
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b9e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  0801bb78  0801bb78  0002bb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c520  0801c520  000343e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c520  0801c520  0002c520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c528  0801c528  000343e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c528  0801c528  0002c528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c52c  0801c52c  0002c52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000043e8  20000000  0801c530  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dfac  200043e8  08020918  000343e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  20012394  08020918  00042394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035a2f  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007128  00000000  00000000  00069e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e68  00000000  00000000  00070f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c28  00000000  00000000  00072dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af0b  00000000  00000000  00074a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f38  00000000  00000000  0009f90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df31b  00000000  00000000  000c8843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a7b5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000965c  00000000  00000000  001a7bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043e8 	.word	0x200043e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bb5c 	.word	0x0801bb5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043ec 	.word	0x200043ec
 80001cc:	0801bb5c 	.word	0x0801bb5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
uint8_t step_status;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08f      	sub	sp, #60	; 0x3c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
    switch(protocol_id) 
 8001016:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8212 	beq.w	8001448 <packetRead+0x458>
 8001024:	f001 b89e 	b.w	8002164 <packetRead+0x1174>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
        	uint16_t timeout_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	867b      	strh	r3, [r7, #50]	; 0x32
        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	75bb      	strb	r3, [r7, #22]
				switch (move_type){
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 81f0 	bhi.w	8001426 <packetRead+0x436>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <packetRead+0x5c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	0800117d 	.word	0x0800117d
 8001054:	08001427 	.word	0x08001427
 8001058:	080012c9 	.word	0x080012c9
 800105c:	080012c9 	.word	0x080012c9
 8001060:	080010ff 	.word	0x080010ff
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	637a      	str	r2, [r7, #52]	; 0x34
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <packetRead+0x2b0>)
 800107e:	701a      	strb	r2, [r3, #0]
//					if(Gcode_Mode == GCODE_LINEAR){
//						bezier_wc = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
//					}
					down_z_height = (double)B2I(temp_pointer)*DATA_INVERSE_SCALE; temp_pointer+=4;
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	a382      	add	r3, pc, #520	; (adr r3, 8001298 <packetRead+0x2a8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab0 	bl	80005f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4981      	ldr	r1, [pc, #516]	; (80012a4 <packetRead+0x2b4>)
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
 80010a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a4:	3304      	adds	r3, #4
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
					up_z_height   = (double)B2I(temp_pointer)*DATA_INVERSE_SCALE; temp_pointer+=4;
 80010a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	a378      	add	r3, pc, #480	; (adr r3, 8001298 <packetRead+0x2a8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4978      	ldr	r1, [pc, #480]	; (80012a8 <packetRead+0x2b8>)
 80010c6:	e9c1 2300 	strd	r2, r3, [r1]
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	3304      	adds	r3, #4
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a74      	ldr	r2, [pc, #464]	; (80012ac <packetRead+0x2bc>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010de:	3304      	adds	r3, #4
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter = 0;
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <packetRead+0x2c0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <packetRead+0x2c4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <packetRead+0x2c8>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <packetRead+0x2cc>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010fc:	e193      	b.n	8001426 <packetRead+0x436>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	3301      	adds	r3, #1
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <packetRead+0x2c4>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	496b      	ldr	r1, [pc, #428]	; (80012c0 <packetRead+0x2d0>)
 8001114:	4603      	mov	r3, r0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4403      	add	r3, r0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001122:	3304      	adds	r3, #4
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <packetRead+0x2c4>)
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	4610      	mov	r0, r2
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4962      	ldr	r1, [pc, #392]	; (80012c0 <packetRead+0x2d0>)
 8001136:	4603      	mov	r3, r0
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4403      	add	r3, r0
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001146:	3304      	adds	r3, #4
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <packetRead+0x2c4>)
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	4610      	mov	r0, r2
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4959      	ldr	r1, [pc, #356]	; (80012c0 <packetRead+0x2d0>)
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116a:	3304      	adds	r3, #4
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
					current_clutch_index++;
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <packetRead+0x2c4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <packetRead+0x2c4>)
 8001178:	801a      	strh	r2, [r3, #0]
				}
				break;
 800117a:	e154      	b.n	8001426 <packetRead+0x436>
//				case BEZIER_TYPE:
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <packetRead+0x2c0>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <packetRead+0x2d4>)
 8001184:	460b      	mov	r3, r1
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a5b      	subs	r3, r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	331a      	adds	r3, #26
 8001190:	7dba      	ldrb	r2, [r7, #22]
 8001192:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	637a      	str	r2, [r7, #52]	; 0x34
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4a42      	ldr	r2, [pc, #264]	; (80012b0 <packetRead+0x2c0>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <packetRead+0x2d4>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	331b      	adds	r3, #27
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
//					if(move_type == BEZIER_TYPE){
//						Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
//					}
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <packetRead+0x2c0>)
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	4610      	mov	r0, r2
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	493c      	ldr	r1, [pc, #240]	; (80012c4 <packetRead+0x2d4>)
 80011d4:	4603      	mov	r3, r0
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a1b      	subs	r3, r3, r0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e2:	3304      	adds	r3, #4
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <packetRead+0x2c0>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4933      	ldr	r1, [pc, #204]	; (80012c4 <packetRead+0x2d4>)
 80011f6:	4603      	mov	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001206:	3304      	adds	r3, #4
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <packetRead+0x2b0>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <packetRead+0x248>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <packetRead+0x2c0>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4928      	ldr	r1, [pc, #160]	; (80012c4 <packetRead+0x2d4>)
 8001222:	4603      	mov	r3, r0
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a1b      	subs	r3, r3, r0
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3308      	adds	r3, #8
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001232:	3304      	adds	r3, #4
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
 8001236:	e025      	b.n	8001284 <packetRead+0x294>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <packetRead+0x2b0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d121      	bne.n	8001284 <packetRead+0x294>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <packetRead+0x2c4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <packetRead+0x2c0>)
 8001246:	8812      	ldrh	r2, [r2, #0]
 8001248:	4611      	mov	r1, r2
 800124a:	3b01      	subs	r3, #1
 800124c:	b298      	uxth	r0, r3
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <packetRead+0x2d4>)
 8001250:	460b      	mov	r3, r1
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3318      	adds	r3, #24
 800125c:	4602      	mov	r2, r0
 800125e:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <packetRead+0x2c0>)
 8001268:	8812      	ldrh	r2, [r2, #0]
 800126a:	4610      	mov	r0, r2
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4915      	ldr	r1, [pc, #84]	; (80012c4 <packetRead+0x2d4>)
 8001270:	4603      	mov	r3, r0
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a1b      	subs	r3, r3, r0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3314      	adds	r3, #20
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	3304      	adds	r3, #4
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
					}
					point_counter++;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <packetRead+0x2c0>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <packetRead+0x2c0>)
 800128e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001290:	e0c9      	b.n	8001426 <packetRead+0x436>
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	a0000000 	.word	0xa0000000
 800129c:	3ec0c6f7 	.word	0x3ec0c6f7
 80012a0:	200085d0 	.word	0x200085d0
 80012a4:	20008f40 	.word	0x20008f40
 80012a8:	200085c8 	.word	0x200085c8
 80012ac:	20009930 	.word	0x20009930
 80012b0:	20004406 	.word	0x20004406
 80012b4:	20004408 	.word	0x20004408
 80012b8:	200106ba 	.word	0x200106ba
 80012bc:	20009909 	.word	0x20009909
 80012c0:	200085e0 	.word	0x200085e0
 80012c4:	20009948 	.word	0x20009948
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <packetRead+0x50c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4a8c      	ldr	r2, [pc, #560]	; (8001500 <packetRead+0x510>)
 80012d0:	460b      	mov	r3, r1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	331a      	adds	r3, #26
 80012dc:	7dba      	ldrb	r2, [r7, #22]
 80012de:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80012e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	637a      	str	r2, [r7, #52]	; 0x34
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4a82      	ldr	r2, [pc, #520]	; (80014fc <packetRead+0x50c>)
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	b2d8      	uxtb	r0, r3
 80012fe:	4a80      	ldr	r2, [pc, #512]	; (8001500 <packetRead+0x510>)
 8001300:	460b      	mov	r3, r1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a5b      	subs	r3, r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	331b      	adds	r3, #27
 800130c:	4602      	mov	r2, r0
 800130e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	4a79      	ldr	r2, [pc, #484]	; (80014fc <packetRead+0x50c>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4610      	mov	r0, r2
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4978      	ldr	r1, [pc, #480]	; (8001500 <packetRead+0x510>)
 8001320:	4603      	mov	r3, r0
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a1b      	subs	r3, r3, r0
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	3304      	adds	r3, #4
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	4a70      	ldr	r2, [pc, #448]	; (80014fc <packetRead+0x50c>)
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	4610      	mov	r0, r2
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	496f      	ldr	r1, [pc, #444]	; (8001500 <packetRead+0x510>)
 8001342:	4603      	mov	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3304      	adds	r3, #4
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	3304      	adds	r3, #4
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <packetRead+0x514>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <packetRead+0x394>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <packetRead+0x50c>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4964      	ldr	r1, [pc, #400]	; (8001500 <packetRead+0x510>)
 800136e:	4603      	mov	r3, r0
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a1b      	subs	r3, r3, r0
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3308      	adds	r3, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	3304      	adds	r3, #4
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
 8001382:	e025      	b.n	80013d0 <packetRead+0x3e0>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <packetRead+0x514>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b09      	cmp	r3, #9
 800138a:	d121      	bne.n	80013d0 <packetRead+0x3e0>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <packetRead+0x518>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <packetRead+0x50c>)
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	4611      	mov	r1, r2
 8001396:	3b01      	subs	r3, #1
 8001398:	b298      	uxth	r0, r3
 800139a:	4a59      	ldr	r2, [pc, #356]	; (8001500 <packetRead+0x510>)
 800139c:	460b      	mov	r3, r1
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a5b      	subs	r3, r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3318      	adds	r3, #24
 80013a8:	4602      	mov	r2, r0
 80013aa:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a52      	ldr	r2, [pc, #328]	; (80014fc <packetRead+0x50c>)
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	4610      	mov	r0, r2
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4951      	ldr	r1, [pc, #324]	; (8001500 <packetRead+0x510>)
 80013bc:	4603      	mov	r3, r0
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a1b      	subs	r3, r3, r0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3314      	adds	r3, #20
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	3304      	adds	r3, #4
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80013d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <packetRead+0x50c>)
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	4610      	mov	r0, r2
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4948      	ldr	r1, [pc, #288]	; (8001500 <packetRead+0x510>)
 80013e0:	4603      	mov	r3, r0
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a1b      	subs	r3, r3, r0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	330c      	adds	r3, #12
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	3304      	adds	r3, #4
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <packetRead+0x50c>)
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	4610      	mov	r0, r2
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	493f      	ldr	r1, [pc, #252]	; (8001500 <packetRead+0x510>)
 8001404:	4603      	mov	r3, r0
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a1b      	subs	r3, r3, r0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3310      	adds	r3, #16
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	3304      	adds	r3, #4
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter++;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <packetRead+0x50c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <packetRead+0x50c>)
 8001422:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001424:	bf00      	nop
				}
				if(timeout_value++ == 0xffff) break;
 8001426:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	867a      	strh	r2, [r7, #50]	; 0x32
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	4293      	cmp	r3, r2
 8001432:	d005      	beq.n	8001440 <packetRead+0x450>
        	}while(temp_pointer < length);
 8001434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	f6ff adf9 	blt.w	8001030 <packetRead+0x40>
 800143e:	e000      	b.n	8001442 <packetRead+0x452>
				if(timeout_value++ == 0xffff) break;
 8001440:	bf00      	nop
        	return CMD_GCODE;
 8001442:	231b      	movs	r3, #27
 8001444:	f000 be8f 	b.w	8002166 <packetRead+0x1176>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            switch(command_id)
 8001450:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001454:	2b1a      	cmp	r3, #26
 8001456:	f200 8683 	bhi.w	8002160 <packetRead+0x1170>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <packetRead+0x470>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014cd 	.word	0x080014cd
 8001464:	080014e5 	.word	0x080014e5
 8001468:	08001511 	.word	0x08001511
 800146c:	080015d9 	.word	0x080015d9
 8001470:	0800182d 	.word	0x0800182d
 8001474:	080015d9 	.word	0x080015d9
 8001478:	08001a97 	.word	0x08001a97
 800147c:	08001a9b 	.word	0x08001a9b
 8001480:	08002161 	.word	0x08002161
 8001484:	08001abb 	.word	0x08001abb
 8001488:	08001aeb 	.word	0x08001aeb
 800148c:	08001b4d 	.word	0x08001b4d
 8001490:	08001c1b 	.word	0x08001c1b
 8001494:	0800210f 	.word	0x0800210f
 8001498:	080020df 	.word	0x080020df
 800149c:	080020ef 	.word	0x080020ef
 80014a0:	08002161 	.word	0x08002161
 80014a4:	08002161 	.word	0x08002161
 80014a8:	0800201b 	.word	0x0800201b
 80014ac:	080020ff 	.word	0x080020ff
 80014b0:	080020cf 	.word	0x080020cf
 80014b4:	08001bb9 	.word	0x08001bb9
 80014b8:	08001be3 	.word	0x08001be3
 80014bc:	08002161 	.word	0x08002161
 80014c0:	08002161 	.word	0x08002161
 80014c4:	08001c71 	.word	0x08001c71
 80014c8:	08001dc7 	.word	0x08001dc7
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f000 be41 	b.w	8002166 <packetRead+0x1176>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 be35 	b.w	8002166 <packetRead+0x1176>
 80014fc:	20004406 	.word	0x20004406
 8001500:	20009948 	.word	0x20009948
 8001504:	200085d0 	.word	0x200085d0
 8001508:	20004408 	.word	0x20004408
 800150c:	360637bd 	.word	0x360637bd
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d15d      	bne.n	80015d2 <packetRead+0x5e2>
						temp_pointer = -2;
 8001516:	f06f 0301 	mvn.w	r3, #1
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->v_factor = B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151e:	3304      	adds	r3, #4
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800150c <packetRead+0x51c>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
						duty_cmd->a_factor = B2I(temp_pointer)*DATA_INVERSE_SCALE;
 800154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800150c <packetRead+0x51c>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7fe ffee 	bl	8000548 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <packetRead+0x830>)
 800157e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                    duty_cmd->target_point.y = -200;
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <packetRead+0x834>)
 800158a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
                    duty_cmd->target_point.z = 120;
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <packetRead+0x838>)
 8001596:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                    duty_cmd->target_point.roll = 0;
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f000 bdca 	b.w	8002166 <packetRead+0x1176>
                        return CMD_ERROR;
 80015d2:	2317      	movs	r3, #23
 80015d4:	f000 bdc7 	b.w	8002166 <packetRead+0x1176>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b1d      	cmp	r3, #29
 80015dc:	f040 8109 	bne.w	80017f2 <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80015e0:	f06f 0301 	mvn.w	r3, #1
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	3304      	adds	r3, #4
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff95 	bl	8000524 <__aeabi_i2d>
 80015fa:	a387      	add	r3, pc, #540	; (adr r3, 8001818 <packetRead+0x828>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fffa 	bl	80005f8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001610:	3304      	adds	r3, #4
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_i2d>
 8001622:	a37d      	add	r3, pc, #500	; (adr r3, 8001818 <packetRead+0x828>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffe6 	bl	80005f8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	3304      	adds	r3, #4
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
 800163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff6d 	bl	8000524 <__aeabi_i2d>
 800164a:	a373      	add	r3, pc, #460	; (adr r3, 8001818 <packetRead+0x828>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffd2 	bl	80005f8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	3304      	adds	r3, #4
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
 8001664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff59 	bl	8000524 <__aeabi_i2d>
 8001672:	a369      	add	r3, pc, #420	; (adr r3, 8001818 <packetRead+0x828>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	3304      	adds	r3, #4
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
 800168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	a35f      	add	r3, pc, #380	; (adr r3, 8001818 <packetRead+0x828>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ffaa 	bl	80005f8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
						mode_init = message[temp_pointer+=4];
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	3304      	adds	r3, #4
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	75fb      	strb	r3, [r7, #23]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d117      	bne.n	80016f4 <packetRead+0x704>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80016ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016cc:	3301      	adds	r3, #1
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	a34e      	add	r3, pc, #312	; (adr r3, 8001818 <packetRead+0x828>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff88 	bl	80005f8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
 80016f2:	e053      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d117      	bne.n	800172a <packetRead+0x73a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001702:	3301      	adds	r3, #1
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	a340      	add	r3, pc, #256	; (adr r3, 8001818 <packetRead+0x828>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001728:	e038      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d117      	bne.n	8001760 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2203      	movs	r2, #3
 8001734:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001738:	3301      	adds	r3, #1
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	a333      	add	r3, pc, #204	; (adr r3, 8001818 <packetRead+0x828>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800175e:	e01d      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d117      	bne.n	8001796 <packetRead+0x7a6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	3301      	adds	r3, #1
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	a325      	add	r3, pc, #148	; (adr r3, 8001818 <packetRead+0x828>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 8001794:	e002      	b.n	800179c <packetRead+0x7ac>
						}else{
							return CMD_ERROR;
 8001796:	2317      	movs	r3, #23
 8001798:	f000 bce5 	b.w	8002166 <packetRead+0x1176>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179e:	3304      	adds	r3, #4
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	3301      	adds	r3, #1
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
 80017b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80017c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d106      	bne.n	80017d6 <packetRead+0x7e6>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	735a      	strb	r2, [r3, #13]
 80017d4:	e010      	b.n	80017f8 <packetRead+0x808>
						}else if(command_id == CMD_MOVE_JOINT){
 80017d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d106      	bne.n	80017ec <packetRead+0x7fc>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	735a      	strb	r2, [r3, #13]
 80017ea:	e005      	b.n	80017f8 <packetRead+0x808>
						}else{
							return CMD_ERROR;
 80017ec:	2317      	movs	r3, #23
 80017ee:	f000 bcba 	b.w	8002166 <packetRead+0x1176>
						}

					}else{
						return CMD_ERROR;
 80017f2:	2317      	movs	r3, #23
 80017f4:	f000 bcb7 	b.w	8002166 <packetRead+0x1176>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
					return command_id;
 800180a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800180e:	f000 bcaa 	b.w	8002166 <packetRead+0x1176>
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	a0000000 	.word	0xa0000000
 800181c:	3ec0c6f7 	.word	0x3ec0c6f7
 8001820:	406f4000 	.word	0x406f4000
 8001824:	c0690000 	.word	0xc0690000
 8001828:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b22      	cmp	r3, #34	; 0x22
 8001830:	f040 812f 	bne.w	8001a92 <packetRead+0xaa2>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	3304      	adds	r3, #4
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe6b 	bl	8000524 <__aeabi_i2d>
 800184e:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fecf 	bl	80005f8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	3304      	adds	r3, #4
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe56 	bl	8000524 <__aeabi_i2d>
 8001878:	a3f7      	add	r3, pc, #988	; (adr r3, 8001c58 <packetRead+0xc68>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe febb 	bl	80005f8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188e:	3304      	adds	r3, #4
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe42 	bl	8000524 <__aeabi_i2d>
 80018a0:	a3ed      	add	r3, pc, #948	; (adr r3, 8001c58 <packetRead+0xc68>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80018b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b6:	3304      	adds	r3, #4
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe2e 	bl	8000524 <__aeabi_i2d>
 80018c8:	a3e3      	add	r3, pc, #908	; (adr r3, 8001c58 <packetRead+0xc68>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fe93 	bl	80005f8 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	3304      	adds	r3, #4
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe1a 	bl	8000524 <__aeabi_i2d>
 80018f0:	a3d9      	add	r3, pc, #868	; (adr r3, 8001c58 <packetRead+0xc68>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fe7f 	bl	80005f8 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	3304      	adds	r3, #4
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
 800190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe06 	bl	8000524 <__aeabi_i2d>
 8001918:	a3cf      	add	r3, pc, #828	; (adr r3, 8001c58 <packetRead+0xc68>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe6b 	bl	80005f8 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
                		arc_type = message[temp_pointer+=4];
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	3304      	adds	r3, #4
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	767b      	strb	r3, [r7, #25]
                		if(arc_type == ARC_AW_TYPE){
 800193c:	7e7b      	ldrb	r3, [r7, #25]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d103      	bne.n	800194a <packetRead+0x95a>
                			duty_cmd->arc_dir = 1;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	e00a      	b.n	8001960 <packetRead+0x970>
                		}else if(arc_type == ARC_CW_TYPE){
 800194a:	7e7b      	ldrb	r3, [r7, #25]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d104      	bne.n	800195a <packetRead+0x96a>
                			duty_cmd->arc_dir = -1;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	e002      	b.n	8001960 <packetRead+0x970>
                		}else{
                			return CMD_ERROR;
 800195a:	2317      	movs	r3, #23
 800195c:	f000 bc03 	b.w	8002166 <packetRead+0x1176>
                		}
                		mode_init = message[temp_pointer+=1];
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	3301      	adds	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	763b      	strb	r3, [r7, #24]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001970:	7e3b      	ldrb	r3, [r7, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d117      	bne.n	80019a6 <packetRead+0x9b6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 800197c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197e:	3301      	adds	r3, #1
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdca 	bl	8000524 <__aeabi_i2d>
 8001990:	a3b1      	add	r3, pc, #708	; (adr r3, 8001c58 <packetRead+0xc68>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fe2f 	bl	80005f8 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
 80019a4:	e052      	b.n	8001a4c <packetRead+0xa5c>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80019a6:	7e3b      	ldrb	r3, [r7, #24]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d117      	bne.n	80019dc <packetRead+0x9ec>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	3301      	adds	r3, #1
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
 80019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdaf 	bl	8000524 <__aeabi_i2d>
 80019c6:	a3a4      	add	r3, pc, #656	; (adr r3, 8001c58 <packetRead+0xc68>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe14 	bl	80005f8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	6839      	ldr	r1, [r7, #0]
 80019d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019da:	e037      	b.n	8001a4c <packetRead+0xa5c>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80019dc:	7e3b      	ldrb	r3, [r7, #24]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d117      	bne.n	8001a12 <packetRead+0xa22>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2203      	movs	r2, #3
 80019e6:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80019e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ea:	3301      	adds	r3, #1
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
 80019ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd94 	bl	8000524 <__aeabi_i2d>
 80019fc:	a396      	add	r3, pc, #600	; (adr r3, 8001c58 <packetRead+0xc68>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	f7fe fdf9 	bl	80005f8 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a10:	e01c      	b.n	8001a4c <packetRead+0xa5c>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001a12:	7e3b      	ldrb	r3, [r7, #24]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d117      	bne.n	8001a48 <packetRead+0xa58>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	3301      	adds	r3, #1
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd79 	bl	8000524 <__aeabi_i2d>
 8001a32:	a389      	add	r3, pc, #548	; (adr r3, 8001c58 <packetRead+0xc68>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fdde 	bl	80005f8 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 8001a46:	e001      	b.n	8001a4c <packetRead+0xa5c>
						}else{
							return CMD_ERROR;
 8001a48:	2317      	movs	r3, #23
 8001a4a:	e38c      	b.n	8002166 <packetRead+0x1176>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	3304      	adds	r3, #4
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
 8001a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2201      	movs	r2, #1
 8001a86:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e369      	b.n	8002166 <packetRead+0x1176>
                		return CMD_ERROR;
 8001a92:	2317      	movs	r3, #23
 8001a94:	e367      	b.n	8002166 <packetRead+0x1176>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a96:	2306      	movs	r3, #6
 8001a98:	e365      	b.n	8002166 <packetRead+0x1176>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d10a      	bne.n	8001ab6 <packetRead+0xac6>
						temp_pointer = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->arc_dir = message[temp_pointer];
 8001aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e357      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8001ab6:	2317      	movs	r3, #23
 8001ab8:	e355      	b.n	8002166 <packetRead+0x1176>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 4){ // 1 byte categorize read type + 1 byte read cycle + 2 byte define
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d112      	bne.n	8001ae6 <packetRead+0xaf6>
						temp_pointer = 2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
						position_type = message[temp_pointer++];
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	637a      	str	r2, [r7, #52]	; 0x34
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <packetRead+0xc70>)
 8001ad4:	701a      	strb	r2, [r3, #0]
						update_pos_cycle = message[temp_pointer];
 8001ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <packetRead+0xc74>)
 8001ae0:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001ae2:	2309      	movs	r3, #9
 8001ae4:	e33f      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8001ae6:	2317      	movs	r3, #23
 8001ae8:	e33d      	b.n	8002166 <packetRead+0x1176>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b06      	cmp	r3, #6
 8001aee:	d12b      	bne.n	8001b48 <packetRead+0xb58>
						temp_pointer = 2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
						test_value_array[0] = message[temp_pointer++];
 8001af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	637a      	str	r2, [r7, #52]	; 0x34
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b25a      	sxtb	r2, r3
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <packetRead+0xc78>)
 8001b06:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	637a      	str	r2, [r7, #52]	; 0x34
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <packetRead+0xc78>)
 8001b1a:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	637a      	str	r2, [r7, #52]	; 0x34
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b25a      	sxtb	r2, r3
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <packetRead+0xc78>)
 8001b2e:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	637a      	str	r2, [r7, #52]	; 0x34
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <packetRead+0xc78>)
 8001b42:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b44:	230a      	movs	r3, #10
 8001b46:	e30e      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8001b48:	2317      	movs	r3, #23
 8001b4a:	e30c      	b.n	8002166 <packetRead+0x1176>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d130      	bne.n	8001bb4 <packetRead+0xbc4>
						uint8_t method;
						temp_pointer = 2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
						method = message[temp_pointer];
 8001b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	76bb      	strb	r3, [r7, #26]
						if (SCARA_METHOD_MANUAL == method) {
 8001b60:	7ebb      	ldrb	r3, [r7, #26]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d103      	bne.n	8001b6e <packetRead+0xb7e>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
 8001b6c:	e01d      	b.n	8001baa <packetRead+0xbba>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001b6e:	7ebb      	ldrb	r3, [r7, #26]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d103      	bne.n	8001b7c <packetRead+0xb8c>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	705a      	strb	r2, [r3, #1]
 8001b7a:	e016      	b.n	8001baa <packetRead+0xbba>
						} else if (SCARA_METHOD_GCODE == method) {
 8001b7c:	7ebb      	ldrb	r3, [r7, #26]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d103      	bne.n	8001b8a <packetRead+0xb9a>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2202      	movs	r2, #2
 8001b86:	705a      	strb	r2, [r3, #1]
 8001b88:	e00f      	b.n	8001baa <packetRead+0xbba>
						}else if(SCARA_METHOD_TEST == method){
 8001b8a:	7ebb      	ldrb	r3, [r7, #26]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d103      	bne.n	8001b98 <packetRead+0xba8>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2203      	movs	r2, #3
 8001b94:	705a      	strb	r2, [r3, #1]
 8001b96:	e008      	b.n	8001baa <packetRead+0xbba>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b98:	7ebb      	ldrb	r3, [r7, #26]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d103      	bne.n	8001ba6 <packetRead+0xbb6>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	705a      	strb	r2, [r3, #1]
 8001ba4:	e001      	b.n	8001baa <packetRead+0xbba>
						}else {
							return CMD_ERROR;
 8001ba6:	2317      	movs	r3, #23
 8001ba8:	e2dd      	b.n	8002166 <packetRead+0x1176>
						}
						duty_cmd->change_method = TRUE;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	e2d8      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8001bb4:	2317      	movs	r3, #23
 8001bb6:	e2d6      	b.n	8002166 <packetRead+0x1176>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d10f      	bne.n	8001bde <packetRead+0xbee>
						int temp_pointer = 2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	623b      	str	r3, [r7, #32]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001bda:	2315      	movs	r3, #21
 8001bdc:	e2c3      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8001bde:	2317      	movs	r3, #23
 8001be0:	e2c1      	b.n	8002166 <packetRead+0x1176>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d116      	bne.n	8001c16 <packetRead+0xc26>
						int temp_pointer = 2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
						int32_t speed = (int32_t)message[temp_pointer];
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	dd02      	ble.n	8001c02 <packetRead+0xc12>
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	2b0e      	cmp	r3, #14
 8001c00:	dd01      	ble.n	8001c06 <packetRead+0xc16>
							return CMD_ERROR;
 8001c02:	2317      	movs	r3, #23
 8001c04:	e2af      	b.n	8002166 <packetRead+0x1176>
						}
						duty_cmd->key_speed = speed;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001c0c:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <packetRead+0xc7c>)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001c12:	2316      	movs	r3, #22
 8001c14:	e2a7      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8001c16:	2317      	movs	r3, #23
 8001c18:	e2a5      	b.n	8002166 <packetRead+0x1176>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d117      	bne.n	8001c50 <packetRead+0xc60>
						int temp_pointer = 2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61fb      	str	r3, [r7, #28]
						uint8_t test_key = message[temp_pointer];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	76fb      	strb	r3, [r7, #27]
						if(test_key < 0 || test_key > 8){
 8001c2e:	7efb      	ldrb	r3, [r7, #27]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d901      	bls.n	8001c38 <packetRead+0xc48>
							return CMD_ERROR;
 8001c34:	2317      	movs	r3, #23
 8001c36:	e296      	b.n	8002166 <packetRead+0x1176>
						}
						duty_cmd->test_key = test_key;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	7efa      	ldrb	r2, [r7, #27]
 8001c3c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2203      	movs	r2, #3
 8001c44:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c4c:	230c      	movs	r3, #12
 8001c4e:	e28a      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8001c50:	2317      	movs	r3, #23
 8001c52:	e288      	b.n	8002166 <packetRead+0x1176>
 8001c54:	f3af 8000 	nop.w
 8001c58:	a0000000 	.word	0xa0000000
 8001c5c:	3ec0c6f7 	.word	0x3ec0c6f7
 8001c60:	200106b8 	.word	0x200106b8
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000060 	.word	0x20000060
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f040 80a5 	bne.w	8001dc2 <packetRead+0xdd2>
						temp_pointer = -2;
 8001c78:	f06f 0301 	mvn.w	r3, #1
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
						Object[object_head_pointer].object_position.x = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	3304      	adds	r3, #4
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc49 	bl	8000524 <__aeabi_i2d>
 8001c92:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <packetRead+0xef0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461c      	mov	r4, r3
 8001c98:	a38f      	add	r3, pc, #572	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fcab 	bl	80005f8 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	488f      	ldr	r0, [pc, #572]	; (8001ee4 <packetRead+0xef4>)
 8001ca8:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001cac:	fb01 f104 	mul.w	r1, r1, r4
 8001cb0:	4401      	add	r1, r0
 8001cb2:	3120      	adds	r1, #32
 8001cb4:	e9c1 2300 	strd	r2, r3, [r1]
						Object[object_head_pointer].object_position.y = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	3304      	adds	r3, #4
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <packetRead+0xef0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461c      	mov	r4, r3
 8001cd2:	a381      	add	r3, pc, #516	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4880      	ldr	r0, [pc, #512]	; (8001ee4 <packetRead+0xef4>)
 8001ce2:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001ce6:	fb01 f104 	mul.w	r1, r1, r4
 8001cea:	4401      	add	r1, r0
 8001cec:	3128      	adds	r1, #40	; 0x28
 8001cee:	e9c1 2300 	strd	r2, r3, [r1]
						Object[object_head_pointer].object_position.roll = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc0f 	bl	8000524 <__aeabi_i2d>
 8001d06:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <packetRead+0xef0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461c      	mov	r4, r3
 8001d0c:	a372      	add	r3, pc, #456	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fc71 	bl	80005f8 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4872      	ldr	r0, [pc, #456]	; (8001ee4 <packetRead+0xef4>)
 8001d1c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001d20:	fb01 f104 	mul.w	r1, r1, r4
 8001d24:	4401      	add	r1, r0
 8001d26:	3138      	adds	r1, #56	; 0x38
 8001d28:	e9c1 2300 	strd	r2, r3, [r1]
						Object[object_head_pointer].object_type = message[temp_pointer+=4];
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2e:	3304      	adds	r3, #4
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a69      	ldr	r2, [pc, #420]	; (8001ee0 <packetRead+0xef0>)
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	7819      	ldrb	r1, [r3, #0]
 8001d40:	4a68      	ldr	r2, [pc, #416]	; (8001ee4 <packetRead+0xef4>)
 8001d42:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001d46:	fb03 f300 	mul.w	r3, r3, r0
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d50:	460a      	mov	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
						ret_object_type = Object[object_head_pointer].object_type;
 8001d54:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <packetRead+0xef0>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4a62      	ldr	r2, [pc, #392]	; (8001ee4 <packetRead+0xef4>)
 8001d5c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001d60:	fb03 f301 	mul.w	r3, r3, r1
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <packetRead+0xef8>)
 8001d6e:	701a      	strb	r2, [r3, #0]
						Object[object_head_pointer].timer_value = GET_MICROS;
 8001d70:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <packetRead+0xefc>)
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <packetRead+0xf00>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	495e      	ldr	r1, [pc, #376]	; (8001ef4 <packetRead+0xf04>)
 8001d7a:	fba1 1303 	umull	r1, r3, r1, r3
 8001d7e:	0c9b      	lsrs	r3, r3, #18
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	4a56      	ldr	r2, [pc, #344]	; (8001ee0 <packetRead+0xef0>)
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	4614      	mov	r4, r2
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	4854      	ldr	r0, [pc, #336]	; (8001ee4 <packetRead+0xef4>)
 8001d92:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001d96:	fb01 f104 	mul.w	r1, r1, r4
 8001d9a:	4401      	add	r1, r0
 8001d9c:	f501 7190 	add.w	r1, r1, #288	; 0x120
 8001da0:	e9c1 2300 	strd	r2, r3, [r1]
						object_head_pointer = (object_head_pointer+1)%8;
 8001da4:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <packetRead+0xef0>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <packetRead+0xef0>)
 8001dbc:	701a      	strb	r2, [r3, #0]
					}else{
						return CMD_ERROR;
					}
//					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
//					duty_cmd->change_method = FALSE;
					return CMD_OBJECT_DETECTED;
 8001dbe:	2319      	movs	r3, #25
 8001dc0:	e1d1      	b.n	8002166 <packetRead+0x1176>
						return CMD_ERROR;
 8001dc2:	2317      	movs	r3, #23
 8001dc4:	e1cf      	b.n	8002166 <packetRead+0x1176>
				}
				break;

				case CMD_SETUP_PNP_CONFIGURE:
				{
					if (length == 48) { // 11 int32_t number + 1 byte move type + 1 byte move option + 2 define byte
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b30      	cmp	r3, #48	; 0x30
 8001dca:	f040 8124 	bne.w	8002016 <packetRead+0x1026>
						temp_pointer = -2;
 8001dce:	f06f 0301 	mvn.w	r3, #1
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
						CONVEYOR_SPEED           = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb9e 	bl	8000524 <__aeabi_i2d>
 8001de8:	a33b      	add	r3, pc, #236	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fc03 	bl	80005f8 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4940      	ldr	r1, [pc, #256]	; (8001ef8 <packetRead+0xf08>)
 8001df8:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	3304      	adds	r3, #4
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb8a 	bl	8000524 <__aeabi_i2d>
 8001e10:	a331      	add	r3, pc, #196	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fbef 	bl	80005f8 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4937      	ldr	r1, [pc, #220]	; (8001efc <packetRead+0xf0c>)
 8001e20:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	3304      	adds	r3, #4
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb76 	bl	8000524 <__aeabi_i2d>
 8001e38:	a327      	add	r3, pc, #156	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fbdb 	bl	80005f8 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	492e      	ldr	r1, [pc, #184]	; (8001f00 <packetRead+0xf10>)
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	3304      	adds	r3, #4
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb62 	bl	8000524 <__aeabi_i2d>
 8001e60:	a31d      	add	r3, pc, #116	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fbc7 	bl	80005f8 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4925      	ldr	r1, [pc, #148]	; (8001f04 <packetRead+0xf14>)
 8001e70:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	3304      	adds	r3, #4
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb4e 	bl	8000524 <__aeabi_i2d>
 8001e88:	a313      	add	r3, pc, #76	; (adr r3, 8001ed8 <packetRead+0xee8>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fbb3 	bl	80005f8 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	491c      	ldr	r1, [pc, #112]	; (8001f08 <packetRead+0xf18>)
 8001e98:	e9c1 2300 	strd	r2, r3, [r1]
						ModeInitTypeDef pnp_move_type = message[temp_pointer+=4];
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						if(pnp_move_type == DUTY_MODE_INIT_QT){
 8001eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d103      	bne.n	8001ebe <packetRead+0xece>
							PNP_MOVE_TYPE = DUTY_MODE_INIT_QT;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <packetRead+0xf1c>)
 8001eb8:	2203      	movs	r2, #3
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e028      	b.n	8001f10 <packetRead+0xf20>
						}else if(pnp_move_type == DUTY_MODE_INIT_QV){
 8001ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d103      	bne.n	8001ece <packetRead+0xede>
							PNP_MOVE_TYPE = DUTY_MODE_INIT_QV;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <packetRead+0xf1c>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	e020      	b.n	8001f10 <packetRead+0xf20>
						}else{
							return CMD_ERROR;
 8001ece:	2317      	movs	r3, #23
 8001ed0:	e149      	b.n	8002166 <packetRead+0x1176>
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	a0000000 	.word	0xa0000000
 8001edc:	3ec0c6f7 	.word	0x3ec0c6f7
 8001ee0:	2000440c 	.word	0x2000440c
 8001ee4:	20008f48 	.word	0x20008f48
 8001ee8:	20009908 	.word	0x20009908
 8001eec:	e0001000 	.word	0xe0001000
 8001ef0:	2000408c 	.word	0x2000408c
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	20000058 	.word	0x20000058
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000010 	.word	0x20000010
 8001f04:	20000018 	.word	0x20000018
 8001f08:	20000020 	.word	0x20000020
 8001f0c:	20000005 	.word	0x20000005
						}
						MOVE_FACTOR 			 = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	3301      	adds	r3, #1
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb00 	bl	8000524 <__aeabi_i2d>
 8001f24:	a392      	add	r3, pc, #584	; (adr r3, 8002170 <packetRead+0x1180>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fb65 	bl	80005f8 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4991      	ldr	r1, [pc, #580]	; (8002178 <packetRead+0x1188>)
 8001f34:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faec 	bl	8000524 <__aeabi_i2d>
 8001f4c:	a388      	add	r3, pc, #544	; (adr r3, 8002170 <packetRead+0x1180>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fb51 	bl	80005f8 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4988      	ldr	r1, [pc, #544]	; (800217c <packetRead+0x118c>)
 8001f5c:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	3304      	adds	r3, #4
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fad8 	bl	8000524 <__aeabi_i2d>
 8001f74:	a37e      	add	r3, pc, #504	; (adr r3, 8002170 <packetRead+0x1180>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb3d 	bl	80005f8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	497f      	ldr	r1, [pc, #508]	; (8002180 <packetRead+0x1190>)
 8001f84:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fac4 	bl	8000524 <__aeabi_i2d>
 8001f9c:	a374      	add	r3, pc, #464	; (adr r3, 8002170 <packetRead+0x1180>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fb29 	bl	80005f8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4976      	ldr	r1, [pc, #472]	; (8002184 <packetRead+0x1194>)
 8001fac:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fab0 	bl	8000524 <__aeabi_i2d>
 8001fc4:	a36a      	add	r3, pc, #424	; (adr r3, 8002170 <packetRead+0x1180>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	496d      	ldr	r1, [pc, #436]	; (8002188 <packetRead+0x1198>)
 8001fd4:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	3304      	adds	r3, #4
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa9c 	bl	8000524 <__aeabi_i2d>
 8001fec:	a360      	add	r3, pc, #384	; (adr r3, 8002170 <packetRead+0x1180>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe fb01 	bl	80005f8 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4964      	ldr	r1, [pc, #400]	; (800218c <packetRead+0x119c>)
 8001ffc:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	3304      	adds	r3, #4
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
 8002006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b60      	ldr	r3, [pc, #384]	; (8002190 <packetRead+0x11a0>)
 8002010:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_PNP_CONFIGURE;
 8002012:	231a      	movs	r3, #26
 8002014:	e0a7      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 8002016:	2317      	movs	r3, #23
 8002018:	e0a5      	b.n	8002166 <packetRead+0x1176>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b12      	cmp	r3, #18
 800201e:	d154      	bne.n	80020ca <packetRead+0x10da>
						temp_pointer = -2;
 8002020:	f06f 0301 	mvn.w	r3, #1
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
						offset_x = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	3304      	adds	r3, #4
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
 800202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa75 	bl	8000524 <__aeabi_i2d>
 800203a:	a34d      	add	r3, pc, #308	; (adr r3, 8002170 <packetRead+0x1180>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fada 	bl	80005f8 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4952      	ldr	r1, [pc, #328]	; (8002194 <packetRead+0x11a4>)
 800204a:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	3304      	adds	r3, #4
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa61 	bl	8000524 <__aeabi_i2d>
 8002062:	a343      	add	r3, pc, #268	; (adr r3, 8002170 <packetRead+0x1180>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe fac6 	bl	80005f8 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4949      	ldr	r1, [pc, #292]	; (8002198 <packetRead+0x11a8>)
 8002072:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8002076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002078:	3304      	adds	r3, #4
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa4d 	bl	8000524 <__aeabi_i2d>
 800208a:	a339      	add	r3, pc, #228	; (adr r3, 8002170 <packetRead+0x1180>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fab2 	bl	80005f8 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4940      	ldr	r1, [pc, #256]	; (800219c <packetRead+0x11ac>)
 800209a:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800209e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a0:	3304      	adds	r3, #4
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa39 	bl	8000524 <__aeabi_i2d>
 80020b2:	a32f      	add	r3, pc, #188	; (adr r3, 8002170 <packetRead+0x1180>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	f7fe fa9e 	bl	80005f8 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4937      	ldr	r1, [pc, #220]	; (80021a0 <packetRead+0x11b0>)
 80020c2:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 80020c6:	2312      	movs	r3, #18
 80020c8:	e04d      	b.n	8002166 <packetRead+0x1176>
					}else{
						return CMD_ERROR;
 80020ca:	2317      	movs	r3, #23
 80020cc:	e04b      	b.n	8002166 <packetRead+0x1176>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2202      	movs	r2, #2
 80020d2:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 80020da:	2314      	movs	r3, #20
 80020dc:	e043      	b.n	8002166 <packetRead+0x1176>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2202      	movs	r2, #2
 80020e2:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 80020ea:	230e      	movs	r3, #14
 80020ec:	e03b      	b.n	8002166 <packetRead+0x1176>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2202      	movs	r2, #2
 80020f2:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 80020fa:	230f      	movs	r3, #15
 80020fc:	e033      	b.n	8002166 <packetRead+0x1176>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2202      	movs	r2, #2
 8002102:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 800210a:	2313      	movs	r3, #19
 800210c:	e02b      	b.n	8002166 <packetRead+0x1176>
				}
				break;
				case CMD_STEP_ON_OFF:
				{
					if(length == 3){ //1 byte status + 2 define byte
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d121      	bne.n	8002158 <packetRead+0x1168>
						temp_pointer = 2;
 8002114:	2302      	movs	r3, #2
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
						if(message[temp_pointer] == 1){
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d109      	bne.n	8002138 <packetRead+0x1148>
							step_status = 1;
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <packetRead+0x11b4>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002130:	481d      	ldr	r0, [pc, #116]	; (80021a8 <packetRead+0x11b8>)
 8002132:	f009 fbc1 	bl	800b8b8 <HAL_GPIO_WritePin>
 8002136:	e011      	b.n	800215c <packetRead+0x116c>
						}else if(message[temp_pointer] == 0){
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <packetRead+0x116c>
							step_status = 0;
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <packetRead+0x11b4>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002150:	4815      	ldr	r0, [pc, #84]	; (80021a8 <packetRead+0x11b8>)
 8002152:	f009 fbb1 	bl	800b8b8 <HAL_GPIO_WritePin>
 8002156:	e001      	b.n	800215c <packetRead+0x116c>
						}
					}else{
						return CMD_ERROR;
 8002158:	2317      	movs	r3, #23
 800215a:	e004      	b.n	8002166 <packetRead+0x1176>
					}
					return CMD_STEP_ON_OFF;
 800215c:	230d      	movs	r3, #13
 800215e:	e002      	b.n	8002166 <packetRead+0x1176>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8002160:	2317      	movs	r3, #23
 8002162:	e000      	b.n	8002166 <packetRead+0x1176>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8002164:	2318      	movs	r3, #24
        }
    }
}
 8002166:	4618      	mov	r0, r3
 8002168:	373c      	adds	r7, #60	; 0x3c
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	a0000000 	.word	0xa0000000
 8002174:	3ec0c6f7 	.word	0x3ec0c6f7
 8002178:	20000028 	.word	0x20000028
 800217c:	20000030 	.word	0x20000030
 8002180:	20000038 	.word	0x20000038
 8002184:	20000040 	.word	0x20000040
 8002188:	20000048 	.word	0x20000048
 800218c:	20000050 	.word	0x20000050
 8002190:	20000064 	.word	0x20000064
 8002194:	20009928 	.word	0x20009928
 8002198:	200106d0 	.word	0x200106d0
 800219c:	200106c0 	.word	0x200106c0
 80021a0:	20009920 	.word	0x20009920
 80021a4:	200106a8 	.word	0x200106a8
 80021a8:	40020000 	.word	0x40020000

080021ac <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80021ac:	b082      	sub	sp, #8
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b0ca      	sub	sp, #296	; 0x128
 80021b2:	af22      	add	r7, sp, #136	; 0x88
 80021b4:	4601      	mov	r1, r0
 80021b6:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80021ba:	e880 000c 	stmia.w	r0, {r2, r3}
 80021be:	460b      	mov	r3, r1
 80021c0:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b1b      	cmp	r3, #27
 80021c6:	f200 81ea 	bhi.w	800259e <commandReply+0x3f2>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <commandReply+0x24>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	08002241 	.word	0x08002241
 80021d4:	08002241 	.word	0x08002241
 80021d8:	08002241 	.word	0x08002241
 80021dc:	08002241 	.word	0x08002241
 80021e0:	08002241 	.word	0x08002241
 80021e4:	08002241 	.word	0x08002241
 80021e8:	08002241 	.word	0x08002241
 80021ec:	08002249 	.word	0x08002249
 80021f0:	080022c3 	.word	0x080022c3
 80021f4:	080022f7 	.word	0x080022f7
 80021f8:	08002439 	.word	0x08002439
 80021fc:	08002463 	.word	0x08002463
 8002200:	08002241 	.word	0x08002241
 8002204:	08002543 	.word	0x08002543
 8002208:	080024d1 	.word	0x080024d1
 800220c:	080024d1 	.word	0x080024d1
 8002210:	080024d1 	.word	0x080024d1
 8002214:	080024d1 	.word	0x080024d1
 8002218:	080024a9 	.word	0x080024a9
 800221c:	080024d1 	.word	0x080024d1
 8002220:	080024d1 	.word	0x080024d1
 8002224:	080024d9 	.word	0x080024d9
 8002228:	080024e1 	.word	0x080024e1
 800222c:	08002521 	.word	0x08002521
 8002230:	0800259f 	.word	0x0800259f
 8002234:	080023fb 	.word	0x080023fb
 8002238:	0800245b 	.word	0x0800245b
 800223c:	0800246b 	.word	0x0800246b
	case CMD_MOVE_LINE:
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002240:	2309      	movs	r3, #9
 8002242:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		break;
 8002246:	e1ba      	b.n	80025be <commandReply+0x412>

	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 8002248:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800224c:	2b01      	cmp	r3, #1
 800224e:	d110      	bne.n	8002272 <commandReply+0xc6>
				scaraSetOutput(1);
 8002250:	2001      	movs	r0, #1
 8002252:	f007 fd09 	bl	8009c68 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8002256:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1c59      	adds	r1, r3, #1
 800225e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002262:	6011      	str	r1, [r2, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800226a:	4413      	add	r3, r2
 800226c:	220d      	movs	r2, #13
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e023      	b.n	80022ba <commandReply+0x10e>
			} else if (0 == duty_cmd.arc_dir) {
 8002272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002276:	2b00      	cmp	r3, #0
 8002278:	d110      	bne.n	800229c <commandReply+0xf0>
				scaraSetOutput(0);
 800227a:	2000      	movs	r0, #0
 800227c:	f007 fcf4 	bl	8009c68 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8002280:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1c59      	adds	r1, r3, #1
 8002288:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800228c:	6011      	str	r1, [r2, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002294:	4413      	add	r3, r2
 8002296:	220e      	movs	r2, #14
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e00e      	b.n	80022ba <commandReply+0x10e>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 800229c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80022a8:	6011      	str	r1, [r2, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80022b0:	4413      	add	r3, r2
 80022b2:	2211      	movs	r2, #17
 80022b4:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80022b6:	2307      	movs	r3, #7
 80022b8:	e183      	b.n	80025c2 <commandReply+0x416>
			}
			ret = RPD_OK;
 80022ba:	2308      	movs	r3, #8
 80022bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}
		break;
 80022c0:	e17d      	b.n	80025be <commandReply+0x412>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80022c2:	f007 fd23 	bl	8009d0c <scaraGetMode>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			current_state	 = scaraGetDutyState();
 80022cc:	f007 fd36 	bl	8009d3c <scaraGetDutyState>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80022d6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <commandReply+0x142>
 80022de:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <commandReply+0x142>
				ret = RPD_IDLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			} else {
				ret = RPD_BUSY;
			}
		}
	break;
 80022ec:	e167      	b.n	80025be <commandReply+0x412>
				ret = RPD_BUSY;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 80022f4:	e163      	b.n	80025be <commandReply+0x412>
	case CMD_READ_POSITION:
		{
//			SCARA_PositionTypeDef position;
			if(position_type == READ_CONTINUOUS_ENABLE){
 80022f6:	4bb6      	ldr	r3, [pc, #728]	; (80025d0 <commandReply+0x424>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d113      	bne.n	8002326 <commandReply+0x17a>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_ENABLE;
 80022fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c59      	adds	r1, r3, #1
 8002306:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800230a:	6011      	str	r1, [r2, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002312:	4413      	add	r3, r2
 8002314:	2212      	movs	r2, #18
 8002316:	701a      	strb	r2, [r3, #0]
//				lowlayer_readTruePosition(&position);
//				kinematicForward(&position);
//				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
//					scaraUpdatePosition(&position);
//				}
				ret = RPD_OK;
 8002318:	2308      	movs	r3, #8
 800231a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				continuous_update = 1;
 800231e:	4bad      	ldr	r3, [pc, #692]	; (80025d4 <commandReply+0x428>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
			}
//			*detail_length = scaraPosition_packaging(detail, position);
//			ret =  RPD_POSITION;
//			ret =  RPD_OK;
		}
	break;
 8002324:	e14b      	b.n	80025be <commandReply+0x412>
			}else if(position_type == READ_CONTINUOUS_DISABLE){
 8002326:	4baa      	ldr	r3, [pc, #680]	; (80025d0 <commandReply+0x424>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d113      	bne.n	8002356 <commandReply+0x1aa>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_DISABLE;
 800232e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1c59      	adds	r1, r3, #1
 8002336:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800233a:	6011      	str	r1, [r2, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002342:	4413      	add	r3, r2
 8002344:	2213      	movs	r2, #19
 8002346:	701a      	strb	r2, [r3, #0]
				continuous_update = 0;
 8002348:	4ba2      	ldr	r3, [pc, #648]	; (80025d4 <commandReply+0x428>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
				ret = RPD_OK;
 800234e:	2308      	movs	r3, #8
 8002350:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 8002354:	e133      	b.n	80025be <commandReply+0x412>
			}else if(position_type == POSITION_UPDATE){
 8002356:	4b9e      	ldr	r3, [pc, #632]	; (80025d0 <commandReply+0x424>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d11f      	bne.n	800239e <commandReply+0x1f2>
				detail[(*detail_length)++] = UPDATE_REAL_POS;
 800235e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c59      	adds	r1, r3, #1
 8002366:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800236a:	6011      	str	r1, [r2, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002372:	4413      	add	r3, r2
 8002374:	2214      	movs	r2, #20
 8002376:	701a      	strb	r2, [r3, #0]
				lowlayer_readTruePosition(&position);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f003 fe87 	bl	8006090 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	4618      	mov	r0, r3
 8002388:	f002 ff46 	bl	8005218 <kinematicForward>
				scaraUpdatePosition(&position);
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	4618      	mov	r0, r3
 8002392:	f007 fcab 	bl	8009cec <scaraUpdatePosition>
				ret = RPD_OK;
 8002396:	2308      	movs	r3, #8
 8002398:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 800239c:	e10f      	b.n	80025be <commandReply+0x412>
			}else if(position_type == READ_REAL_DATA){
 800239e:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <commandReply+0x424>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d11a      	bne.n	80023dc <commandReply+0x230>
				lowlayer_readTruePosition(&position);
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fe70 	bl	8006090 <lowlayer_readTruePosition>
				*detail_length = scaraPosition_packaging(detail, position);
 80023b0:	4668      	mov	r0, sp
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	2288      	movs	r2, #136	; 0x88
 80023b8:	4619      	mov	r1, r3
 80023ba:	f013 f879 	bl	80154b0 <memcpy>
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	cb0c      	ldmia	r3, {r2, r3}
 80023c4:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80023c8:	f007 fcea 	bl	8009da0 <scaraPosition_packaging>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023d2:	601a      	str	r2, [r3, #0]
				ret =  RPD_POSITION;
 80023d4:	2302      	movs	r3, #2
 80023d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 80023da:	e0f0      	b.n	80025be <commandReply+0x412>
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80023dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c59      	adds	r1, r3, #1
 80023e4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80023e8:	6011      	str	r1, [r2, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80023f0:	4413      	add	r3, r2
 80023f2:	2215      	movs	r2, #21
 80023f4:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80023f6:	2307      	movs	r3, #7
 80023f8:	e0e3      	b.n	80025c2 <commandReply+0x416>
	case CMD_OBJECT_DETECTED:
		detail[(*detail_length)++] = OBJECT_DETECTED;
 80023fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	1c59      	adds	r1, r3, #1
 8002402:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002406:	6011      	str	r1, [r2, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800240e:	4413      	add	r3, r2
 8002410:	2222      	movs	r2, #34	; 0x22
 8002412:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = ret_object_type;
 8002414:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1c59      	adds	r1, r3, #1
 800241c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002420:	6011      	str	r1, [r2, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002428:	4413      	add	r3, r2
 800242a:	4a6b      	ldr	r2, [pc, #428]	; (80025d8 <commandReply+0x42c>)
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002430:	2308      	movs	r3, #8
 8002432:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 8002436:	e0c2      	b.n	80025be <commandReply+0x412>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 8002438:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002444:	6011      	str	r1, [r2, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800244c:	4413      	add	r3, r2
 800244e:	2216      	movs	r2, #22
 8002450:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002452:	2308      	movs	r3, #8
 8002454:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 8002458:	e0b1      	b.n	80025be <commandReply+0x412>
	case CMD_SETUP_PNP_CONFIGURE:
		ret = RPD_OK;
 800245a:	2308      	movs	r3, #8
 800245c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 8002460:	e0ad      	b.n	80025be <commandReply+0x412>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8002462:	2309      	movs	r3, #9
 8002464:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 8002468:	e0a9      	b.n	80025be <commandReply+0x412>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 800246a:	4b5c      	ldr	r3, [pc, #368]	; (80025dc <commandReply+0x430>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <commandReply+0x434>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d113      	bne.n	80024a0 <commandReply+0x2f4>
			Gcode_data_available = 1;
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <commandReply+0x438>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 800247e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1c59      	adds	r1, r3, #1
 8002486:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002492:	4413      	add	r3, r2
 8002494:	2224      	movs	r2, #36	; 0x24
 8002496:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002498:	2308      	movs	r3, #8
 800249a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 800249e:	e08e      	b.n	80025be <commandReply+0x412>
			ret = RPD_TRANSFER;
 80024a0:	230a      	movs	r3, #10
 80024a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 80024a6:	e08a      	b.n	80025be <commandReply+0x412>
	case CMD_GCODE_CONFIGURE:
	{
		offset_data_available = 1;
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <commandReply+0x43c>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 80024ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1c59      	adds	r1, r3, #1
 80024b6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80024ba:	6011      	str	r1, [r2, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80024c2:	4413      	add	r3, r2
 80024c4:	2227      	movs	r2, #39	; 0x27
 80024c6:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80024c8:	2308      	movs	r3, #8
 80024ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	break;
 80024ce:	e076      	b.n	80025be <commandReply+0x412>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 80024d0:	2309      	movs	r3, #9
 80024d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 80024d6:	e072      	b.n	80025be <commandReply+0x412>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80024d8:	2309      	movs	r3, #9
 80024da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 80024de:	e06e      	b.n	80025be <commandReply+0x412>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 80024e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1c59      	adds	r1, r3, #1
 80024e8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80024ec:	6011      	str	r1, [r2, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80024f4:	4413      	add	r3, r2
 80024f6:	221b      	movs	r2, #27
 80024f8:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80024fa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80024fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800250a:	6011      	str	r1, [r2, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002512:	4413      	add	r3, r2
 8002514:	b2c2      	uxtb	r2, r0
 8002516:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002518:	2308      	movs	r3, #8
 800251a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	break;
 800251e:	e04e      	b.n	80025be <commandReply+0x412>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8002520:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800252c:	6011      	str	r1, [r2, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002534:	4413      	add	r3, r2
 8002536:	221a      	movs	r2, #26
 8002538:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800253a:	2307      	movs	r3, #7
 800253c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	break;
 8002540:	e03d      	b.n	80025be <commandReply+0x412>
	case CMD_STEP_ON_OFF:{
		if(step_status == 1){
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <commandReply+0x440>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d110      	bne.n	800256c <commandReply+0x3c0>
			detail[(*detail_length)++] = STEP_ON;
 800254a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c59      	adds	r1, r3, #1
 8002552:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002556:	6011      	str	r1, [r2, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800255e:	4413      	add	r3, r2
 8002560:	220f      	movs	r2, #15
 8002562:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002564:	2308      	movs	r3, #8
 8002566:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			ret = RPD_OK;
		}else{
			ret = RPD_ERROR;
		}
	}
	break;
 800256a:	e028      	b.n	80025be <commandReply+0x412>
		}else if(step_status == 0){
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <commandReply+0x440>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d110      	bne.n	8002596 <commandReply+0x3ea>
			detail[(*detail_length)++] = STEP_OFF;
 8002574:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	1c59      	adds	r1, r3, #1
 800257c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002580:	6011      	str	r1, [r2, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002588:	4413      	add	r3, r2
 800258a:	2210      	movs	r2, #16
 800258c:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 800258e:	2308      	movs	r3, #8
 8002590:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 8002594:	e013      	b.n	80025be <commandReply+0x412>
			ret = RPD_ERROR;
 8002596:	2307      	movs	r3, #7
 8002598:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	break;
 800259c:	e00f      	b.n	80025be <commandReply+0x412>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 800259e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1c59      	adds	r1, r3, #1
 80025a6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80025aa:	6011      	str	r1, [r2, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80025b2:	4413      	add	r3, r2
 80025b4:	221c      	movs	r2, #28
 80025b6:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80025b8:	2307      	movs	r3, #7
 80025ba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	return ret;
 80025be:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	37a0      	adds	r7, #160	; 0xa0
 80025c6:	46bd      	mov	sp, r7
 80025c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025cc:	b002      	add	sp, #8
 80025ce:	4770      	bx	lr
 80025d0:	200106b8 	.word	0x200106b8
 80025d4:	2000440a 	.word	0x2000440a
 80025d8:	20009908 	.word	0x20009908
 80025dc:	20004406 	.word	0x20004406
 80025e0:	20009930 	.word	0x20009930
 80025e4:	20004405 	.word	0x20004405
 80025e8:	20004404 	.word	0x20004404
 80025ec:	200106a8 	.word	0x200106a8

080025f0 <commandRespond>:

int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										uint8_t *detail,
										int32_t detail_length,
										uint8_t *respond) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	617a      	str	r2, [r7, #20]
 800260a:	461a      	mov	r2, r3
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	4413      	add	r3, r2
 8002610:	2228      	movs	r2, #40	; 0x28
 8002612:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	617a      	str	r2, [r7, #20]
 800261a:	461a      	mov	r2, r3
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	4413      	add	r3, r2
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	617a      	str	r2, [r7, #20]
 800262a:	461a      	mov	r2, r3
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	4413      	add	r3, r2
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	617a      	str	r2, [r7, #20]
 800263a:	461a      	mov	r2, r3
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	4413      	add	r3, r2
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	617a      	str	r2, [r7, #20]
 800264a:	461a      	mov	r2, r3
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	4413      	add	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <commandRespond+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	6a3a      	ldr	r2, [r7, #32]
 8002660:	4413      	add	r3, r2
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f012 ff22 	bl	80154b0 <memcpy>
		out_length += detail_length;
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e007      	b.n	8002686 <commandRespond+0x96>
	}else{
		respond[out_length++] = NONE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	617a      	str	r2, [r7, #20]
 800267c:	461a      	mov	r2, r3
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	4413      	add	r3, r2
 8002682:	2230      	movs	r2, #48	; 0x30
 8002684:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	617a      	str	r2, [r7, #20]
 800268c:	461a      	mov	r2, r3
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	4413      	add	r3, r2
 8002692:	227d      	movs	r2, #125	; 0x7d
 8002694:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	617a      	str	r2, [r7, #20]
 800269c:	461a      	mov	r2, r3
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	4413      	add	r3, r2
 80026a2:	2229      	movs	r2, #41	; 0x29
 80026a4:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	3301      	adds	r3, #1
 80026ae:	3a02      	subs	r2, #2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
	return out_length;
 80026b4:	697b      	ldr	r3, [r7, #20]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b096      	sub	sp, #88	; 0x58
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	f107 0008 	add.w	r0, r7, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	4a17      	ldr	r2, [pc, #92]	; (8002738 <LOG_REPORT+0x78>)
 80026da:	213f      	movs	r1, #63	; 0x3f
 80026dc:	f013 fe52 	bl	8016384 <sniprintf>
 80026e0:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80026e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d101      	bne.n	80026ee <LOG_REPORT+0x2e>
		return FALSE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e01f      	b.n	800272e <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f4:	4619      	mov	r1, r3
 80026f6:	4811      	ldr	r0, [pc, #68]	; (800273c <LOG_REPORT+0x7c>)
 80026f8:	f003 f9ea 	bl	8005ad0 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80026fc:	4810      	ldr	r0, [pc, #64]	; (8002740 <LOG_REPORT+0x80>)
 80026fe:	f008 fe51 	bl	800b3a4 <HAL_DMA_GetState>
 8002702:	4603      	mov	r3, r0
 8002704:	2b02      	cmp	r3, #2
 8002706:	d101      	bne.n	800270c <LOG_REPORT+0x4c>
		return TRUE;
 8002708:	2301      	movs	r3, #1
 800270a:	e010      	b.n	800272e <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800270c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002710:	490c      	ldr	r1, [pc, #48]	; (8002744 <LOG_REPORT+0x84>)
 8002712:	480a      	ldr	r0, [pc, #40]	; (800273c <LOG_REPORT+0x7c>)
 8002714:	f003 fa04 	bl	8005b20 <ringBuff_PopArray>
 8002718:	4603      	mov	r3, r0
 800271a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800271e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002722:	461a      	mov	r2, r3
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <LOG_REPORT+0x84>)
 8002726:	4808      	ldr	r0, [pc, #32]	; (8002748 <LOG_REPORT+0x88>)
 8002728:	f00b fbb4 	bl	800de94 <HAL_UART_Transmit_DMA>
	return TRUE;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	3750      	adds	r7, #80	; 0x50
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	0801bb78 	.word	0x0801bb78
 800273c:	20002074 	.word	0x20002074
 8002740:	20011640 	.word	0x20011640
 8002744:	200106f0 	.word	0x200106f0
 8002748:	20011600 	.word	0x20011600

0800274c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 3;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3b03      	subs	r3, #3
 800275c:	617b      	str	r3, [r7, #20]
	uint16_t packet_length = *(uint16_t*)(&message_buff[1]);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002764:	827b      	strh	r3, [r7, #18]
	//check packet length
	if(packet_length == data_length && backup_available == 0){
 8002766:	8a7b      	ldrh	r3, [r7, #18]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	429a      	cmp	r2, r3
 800276c:	d119      	bne.n	80027a2 <unPackPayload+0x56>
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <unPackPayload+0xd8>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <unPackPayload+0x56>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b03      	cmp	r3, #3
 800277a:	dc02      	bgt.n	8002782 <unPackPayload+0x36>
			return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	e04c      	b.n	800281c <unPackPayload+0xd0>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b28      	cmp	r3, #40	; 0x28
 8002788:	d002      	beq.n	8002790 <unPackPayload+0x44>
			return -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e045      	b.n	800281c <unPackPayload+0xd0>
		}
		memcpy(data_packet, &message_buff[3], data_length - RECEIVE_END_LENGTH);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1cd9      	adds	r1, r3, #3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3b02      	subs	r3, #2
 8002798:	461a      	mov	r2, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f012 fe88 	bl	80154b0 <memcpy>
 80027a0:	e03a      	b.n	8002818 <unPackPayload+0xcc>
	}else if(packet_length != data_length && backup_available == 0){
 80027a2:	8a7b      	ldrh	r3, [r7, #18]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d01b      	beq.n	80027e2 <unPackPayload+0x96>
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <unPackPayload+0xd8>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d117      	bne.n	80027e2 <unPackPayload+0x96>
		// check start char
		if(message_buff[0] != START_CHAR){
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b28      	cmp	r3, #40	; 0x28
 80027b8:	d002      	beq.n	80027c0 <unPackPayload+0x74>
			return -1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e02d      	b.n	800281c <unPackPayload+0xd0>
		}
		backup_available = 1;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <unPackPayload+0xd8>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
		memcpy(data_packet, &message_buff[3], data_length);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3303      	adds	r3, #3
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f012 fe6e 	bl	80154b0 <memcpy>
		backup_length = data_length;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <unPackPayload+0xdc>)
 80027da:	801a      	strh	r2, [r3, #0]
		return - 1;
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295
 80027e0:	e01c      	b.n	800281c <unPackPayload+0xd0>
	}else if(backup_available == 1){
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <unPackPayload+0xd8>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d113      	bne.n	8002812 <unPackPayload+0xc6>
		backup_available = 0;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <unPackPayload+0xd8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <unPackPayload+0xdc>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	4618      	mov	r0, r3
 8002800:	f012 fe56 	bl	80154b0 <memcpy>
		data_length = backup_length + in_length;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <unPackPayload+0xdc>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e002      	b.n	8002818 <unPackPayload+0xcc>
	}else{
		return - 1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e001      	b.n	800281c <unPackPayload+0xd0>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3b02      	subs	r3, #2
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200107f0 	.word	0x200107f0
 8002828:	200107f2 	.word	0x200107f2

0800282c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_DMA_Init+0x3c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <MX_DMA_Init+0x3c>)
 800283c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_DMA_Init+0x3c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	200f      	movs	r0, #15
 8002854:	f008 faca 	bl	800adec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002858:	200f      	movs	r0, #15
 800285a:	f008 fae3 	bl	800ae24 <HAL_NVIC_EnableIRQ>

}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <vApplicationGetIdleTaskMemory+0x2c>)
 800287c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <vApplicationGetIdleTaskMemory+0x30>)
 8002882:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	20004410 	.word	0x20004410
 800289c:	20004464 	.word	0x20004464

080028a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b094      	sub	sp, #80	; 0x50
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 80028a6:	2300      	movs	r3, #0
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028aa:	2300      	movs	r3, #0
 80028ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 80028ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028b2:	4618      	mov	r0, r3
 80028b4:	f00f fafa 	bl	8011eac <osMutexCreate>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <MX_FREERTOS_Init+0x90>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 80028be:	2301      	movs	r3, #1
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c2:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028cc:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 80028ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f00f fc01 	bl	80120dc <osMailCreate>
 80028da:	4603      	mov	r3, r0
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <MX_FREERTOS_Init+0x94>)
 80028de:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_FREERTOS_Init+0x98>)
 80028e2:	f107 041c 	add.w	r4, r7, #28
 80028e6:	461d      	mov	r5, r3
 80028e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f00f f9e9 	bl	8011cd2 <osThreadCreate>
 8002900:	4603      	mov	r3, r0
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <MX_FREERTOS_Init+0x9c>)
 8002904:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_FREERTOS_Init+0xa0>)
 8002908:	463c      	mov	r4, r7
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002918:	463b      	mov	r3, r7
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f00f f9d8 	bl	8011cd2 <osThreadCreate>
 8002922:	4603      	mov	r3, r0
 8002924:	4a07      	ldr	r2, [pc, #28]	; (8002944 <MX_FREERTOS_Init+0xa4>)
 8002926:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002928:	bf00      	nop
 800292a:	3750      	adds	r7, #80	; 0x50
 800292c:	46bd      	mov	sp, r7
 800292e:	bdb0      	pop	{r4, r5, r7, pc}
 8002930:	200107f8 	.word	0x200107f8
 8002934:	200107fc 	.word	0x200107fc
 8002938:	0801bbb4 	.word	0x0801bbb4
 800293c:	200107f4 	.word	0x200107f4
 8002940:	0801bbd0 	.word	0x0801bbd0
 8002944:	20010800 	.word	0x20010800

08002948 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294c:	ed2d 8b08 	vpush	{d8-d11}
 8002950:	f2ad 5d54 	subw	sp, sp, #1364	; 0x554
 8002954:	af54      	add	r7, sp, #336	; 0x150
 8002956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800295a:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800295c:	f012 f81e 	bl	801499c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002960:	2201      	movs	r2, #1
 8002962:	2110      	movs	r1, #16
 8002964:	48d8      	ldr	r0, [pc, #864]	; (8002cc8 <StartDefaultTask+0x380>)
 8002966:	f008 ffa7 	bl	800b8b8 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff


  // Report buffer;
  uint8_t				update_pos_counter = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe
//  int32_t				task_usb_lenght;
  int32_t 				total_respond_length;
//  int32_t 				detail_ptr;
  uint8_t				detail_array[80];

  uint8_t 				testing_value = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
  double 				value1 = 0;
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
  double 				value2 = 0;
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
  double  				value3 = 0;
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
  SCARA_ScanStateTypeDef	current_scan_state;
  SCARA_KeyStateTypeDef		current_key_state;
  SCARA_KeyTypeDef			current_key;
  SCARA_PositionTypeDef 	update_position;
  int32_t					current_key_speed;
  SCARA_MethodChangeState	method_state = SCARA_METHOD_IDLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
  double						run_time;


  SCARA_Pick_And_Place_State  operation_state;

  double state_time = 0;
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
  int run_point = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 80029b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029bc:	4ac3      	ldr	r2, [pc, #780]	; (8002ccc <StartDefaultTask+0x384>)
 80029be:	4618      	mov	r0, r3
 80029c0:	4611      	mov	r1, r2
 80029c2:	2390      	movs	r3, #144	; 0x90
 80029c4:	461a      	mov	r2, r3
 80029c6:	f012 fd73 	bl	80154b0 <memcpy>
  		{257.2121f, -76.9947f, 0.0f} ,
  		{258.221f, -47.1851f, 0.0f} ,
		{260.695f, -17.075f, 0.0f} ,
		{260.4f, 13.66f, 0.0f}
  };
  const double placement_spacing = -34.0f;
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	4bc0      	ldr	r3, [pc, #768]	; (8002cd0 <StartDefaultTask+0x388>)
 80029d0:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
  uint8_t Slot_Placement[NUM_OF_OBJECT] = {
 80029d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029d8:	4abe      	ldr	r2, [pc, #760]	; (8002cd4 <StartDefaultTask+0x38c>)
 80029da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029de:	6018      	str	r0, [r3, #0]
 80029e0:	3304      	adds	r3, #4
 80029e2:	8019      	strh	r1, [r3, #0]
		  0, 0, 0, 0, 0, 0
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80029e4:	21f6      	movs	r1, #246	; 0xf6
 80029e6:	48bc      	ldr	r0, [pc, #752]	; (8002cd8 <StartDefaultTask+0x390>)
 80029e8:	f7ff fe6a 	bl	80026c0 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80029ec:	f007 f99a 	bl	8009d24 <scaraGetMethod>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
  current_mode	 = scaraGetMode();
 80029f6:	f007 f989 	bl	8009d0c <scaraGetMode>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5
  current_duty_state	 = scaraGetDutyState();
 8002a00:	f007 f99c 	bl	8009d3c <scaraGetDutyState>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4

  // Start up robot
  scaraStartup();
 8002a0a:	f004 f85d 	bl	8006ac8 <scaraStartup>
  osDelay(10);
 8002a0e:	200a      	movs	r0, #10
 8002a10:	f00f f9ab 	bl	8011d6a <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.4345;
 8002a14:	49b1      	ldr	r1, [pc, #708]	; (8002cdc <StartDefaultTask+0x394>)
 8002a16:	a3a4      	add	r3, pc, #656	; (adr r3, 8002ca8 <StartDefaultTask+0x360>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  positionNext.Theta2 = 1.7213f;
 8002a20:	49ae      	ldr	r1, [pc, #696]	; (8002cdc <StartDefaultTask+0x394>)
 8002a22:	a3a3      	add	r3, pc, #652	; (adr r3, 8002cb0 <StartDefaultTask+0x368>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  positionNext.D3 = 9.826;
 8002a2c:	49ab      	ldr	r1, [pc, #684]	; (8002cdc <StartDefaultTask+0x394>)
 8002a2e:	a3a2      	add	r3, pc, #648	; (adr r3, 8002cb8 <StartDefaultTask+0x370>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  positionNext.Theta4 = 0.28676;
 8002a38:	49a8      	ldr	r1, [pc, #672]	; (8002cdc <StartDefaultTask+0x394>)
 8002a3a:	a3a1      	add	r3, pc, #644	; (adr r3, 8002cc0 <StartDefaultTask+0x378>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  positionNext.t = 0;
 8002a44:	49a5      	ldr	r1, [pc, #660]	; (8002cdc <StartDefaultTask+0x394>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c1 2304 	strd	r2, r3, [r1, #16]

  kinematicForward(&positionNext);
 8002a52:	48a2      	ldr	r0, [pc, #648]	; (8002cdc <StartDefaultTask+0x394>)
 8002a54:	f002 fbe0 	bl	8005218 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002a58:	48a1      	ldr	r0, [pc, #644]	; (8002ce0 <StartDefaultTask+0x398>)
 8002a5a:	f00a fdea 	bl	800d632 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002a5e:	f107 0320 	add.w	r3, r7, #32
 8002a62:	f04f 32ff 	mov.w	r2, #4294967295
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00f f9d3 	bl	8011e14 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
//	  respond_packed_lenght = 0;
//	  infor_lenght			= 0;
//	  infor_packed_lenght	= 0;
	  //task_usb_lenght		= 0;
	  //usb_lenght			= 0;
	  total_respond_length  = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
//	  detail_ptr 			= 0;
	  // Update new position
//	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002a7a:	4a9a      	ldr	r2, [pc, #616]	; (8002ce4 <StartDefaultTask+0x39c>)
 8002a7c:	4b97      	ldr	r3, [pc, #604]	; (8002cdc <StartDefaultTask+0x394>)
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	2390      	movs	r3, #144	; 0x90
 8002a84:	461a      	mov	r2, r3
 8002a86:	f012 fd13 	bl	80154b0 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002a8a:	4b97      	ldr	r3, [pc, #604]	; (8002ce8 <StartDefaultTask+0x3a0>)
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8002a92:	2200      	movs	r2, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f00f fbcd 	bl	8012234 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002a9a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d116      	bne.n	8002ad0 <StartDefaultTask+0x188>
		   dataMail = ret_mail.value.p;
 8002aa2:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8002aa6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aae:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8002ab2:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f012 fcfa 	bl	80154b0 <memcpy>
		   isNewDuty = TRUE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002ac2:	4b89      	ldr	r3, [pc, #548]	; (8002ce8 <StartDefaultTask+0x3a0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f00f fc26 	bl	801231c <osMailFree>
	  }
	  if(isNewDuty) {
 8002ad0:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 83d2 	beq.w	800327e <StartDefaultTask+0x936>
		  if (duty_cmd.change_method == TRUE && method_state == SCARA_METHOD_IDLE) {
 8002ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 8103 	bne.w	8002cec <StartDefaultTask+0x3a4>
 8002ae6:	f897 33eb 	ldrb.w	r3, [r7, #1003]	; 0x3eb
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 80fe 	bne.w	8002cec <StartDefaultTask+0x3a4>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af4:	785b      	ldrb	r3, [r3, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d122      	bne.n	8002b40 <StartDefaultTask+0x1f8>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  detail_array[0] = MANUAL_METHOD;
 8002b06:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002b0a:	221d      	movs	r2, #29
 8002b0c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002b18:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2301      	movs	r3, #1
 8002b26:	2008      	movs	r0, #8
 8002b28:	f7ff fd62 	bl	80025f0 <commandRespond>
 8002b2c:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				total_respond_length += respond_lenght;
 8002b30:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002b34:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002b38:	4413      	add	r3, r2
 8002b3a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002b3e:	e398      	b.n	8003272 <StartDefaultTask+0x92a>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d122      	bne.n	8002b90 <StartDefaultTask+0x248>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  detail_array[0] = SEMI_AUTO_METHOD;
 8002b56:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002b5a:	221e      	movs	r2, #30
 8002b5c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002b68:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2301      	movs	r3, #1
 8002b76:	2008      	movs	r0, #8
 8002b78:	f7ff fd3a 	bl	80025f0 <commandRespond>
 8002b7c:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				  total_respond_length += respond_lenght;
 8002b80:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002b84:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002b88:	4413      	add	r3, r2
 8002b8a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002b8e:	e370      	b.n	8003272 <StartDefaultTask+0x92a>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d122      	bne.n	8002be0 <StartDefaultTask+0x298>
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  current_method = SCARA_METHOD_GCODE;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
				  detail_array[0] = GCODE_METHOD;
 8002ba6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002baa:	221f      	movs	r2, #31
 8002bac:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002bb8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	2008      	movs	r0, #8
 8002bc8:	f7ff fd12 	bl	80025f0 <commandRespond>
 8002bcc:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				  total_respond_length += respond_lenght;
 8002bd0:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002bd4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002bd8:	4413      	add	r3, r2
 8002bda:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002bde:	e348      	b.n	8003272 <StartDefaultTask+0x92a>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d132      	bne.n	8002c50 <StartDefaultTask+0x308>
				  test_value[0] = 0;
 8002bea:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002bf2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002bfa:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002bfe:	2200      	movs	r2, #0
 8002c00:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002c02:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002c06:	2200      	movs	r2, #0
 8002c08:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  detail_array[0] = TEST_METHOD;
 8002c16:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002c28:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2301      	movs	r3, #1
 8002c36:	2008      	movs	r0, #8
 8002c38:	f7ff fcda 	bl	80025f0 <commandRespond>
 8002c3c:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				  total_respond_length += respond_lenght;
 8002c40:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002c44:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002c48:	4413      	add	r3, r2
 8002c4a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002c4e:	e310      	b.n	8003272 <StartDefaultTask+0x92a>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	f040 830b 	bne.w	8003272 <StartDefaultTask+0x92a>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002c68:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002c7a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002c7e:	4413      	add	r3, r2
 8002c80:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2301      	movs	r3, #1
 8002c88:	2008      	movs	r0, #8
 8002c8a:	f7ff fcb1 	bl	80025f0 <commandRespond>
 8002c8e:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				  total_respond_length += respond_lenght;
 8002c92:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002c96:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002ca0:	e2e7      	b.n	8003272 <StartDefaultTask+0x92a>
 8002ca2:	bf00      	nop
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	45a1cac1 	.word	0x45a1cac1
 8002cac:	bff6f3b6 	.word	0xbff6f3b6
 8002cb0:	e0000000 	.word	0xe0000000
 8002cb4:	3ffb8a71 	.word	0x3ffb8a71
 8002cb8:	78d4fdf4 	.word	0x78d4fdf4
 8002cbc:	4023a6e9 	.word	0x4023a6e9
 8002cc0:	9d7342ee 	.word	0x9d7342ee
 8002cc4:	3fd25a46 	.word	0x3fd25a46
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	0801bc88 	.word	0x0801bc88
 8002cd0:	c0410000 	.word	0xc0410000
 8002cd4:	0801bd18 	.word	0x0801bd18
 8002cd8:	0801bbec 	.word	0x0801bbec
 8002cdc:	200114b0 	.word	0x200114b0
 8002ce0:	200115c0 	.word	0x200115c0
 8002ce4:	20011420 	.word	0x20011420
 8002ce8:	200107fc 	.word	0x200107fc
			  }
		  } else if(duty_cmd.change_method == FALSE && method_state == SCARA_METHOD_IDLE) {
 8002cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 82a0 	bne.w	8003238 <StartDefaultTask+0x8f0>
 8002cf8:	f897 33eb 	ldrb.w	r3, [r7, #1003]	; 0x3eb
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 829b 	bne.w	8003238 <StartDefaultTask+0x8f0>
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d06:	785b      	ldrb	r3, [r3, #1]
 8002d08:	f897 23f6 	ldrb.w	r2, [r7, #1014]	; 0x3f6
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	f040 8270 	bne.w	80031f2 <StartDefaultTask+0x8aa>
				  	  switch( duty_cmd.robot_method) {
 8002d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	f200 82ac 	bhi.w	8003276 <StartDefaultTask+0x92e>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <StartDefaultTask+0x3dc>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d39 	.word	0x08002d39
 8002d28:	08002d8f 	.word	0x08002d8f
 8002d2c:	0800307f 	.word	0x0800307f
 8002d30:	08002f39 	.word	0x08002f39
 8002d34:	0800322d 	.word	0x0800322d
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002d38:	f897 33f2 	ldrb.w	r3, [r7, #1010]	; 0x3f2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10d      	bne.n	8002d5c <StartDefaultTask+0x414>
				  			  current_key = duty_cmd.keyboard;
 8002d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d44:	78db      	ldrb	r3, [r3, #3]
 8002d46:	f887 33f1 	strb.w	r3, [r7, #1009]	; 0x3f1
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
				  			  current_key_speed = duty_cmd.key_speed;
 8002d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002d5a:	e269      	b.n	8003230 <StartDefaultTask+0x8e8>
				  		  } else if (current_key == duty_cmd.keyboard
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	78db      	ldrb	r3, [r3, #3]
 8002d62:	f897 23f1 	ldrb.w	r2, [r7, #1009]	; 0x3f1
 8002d66:	429a      	cmp	r2, r3
 8002d68:	f040 8262 	bne.w	8003230 <StartDefaultTask+0x8e8>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002d6c:	f897 33f2 	ldrb.w	r3, [r7, #1010]	; 0x3f2
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	f040 825d 	bne.w	8003230 <StartDefaultTask+0x8e8>
									  && current_key_speed == duty_cmd.key_speed) {
 8002d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f040 8255 	bne.w	8003230 <StartDefaultTask+0x8e8>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
				  	  break;
 8002d8c:	e250      	b.n	8003230 <StartDefaultTask+0x8e8>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d92:	789b      	ldrb	r3, [r3, #2]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d074      	beq.n	8002e82 <StartDefaultTask+0x53a>
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	f300 80c6 	bgt.w	8002f2a <StartDefaultTask+0x5e2>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <StartDefaultTask+0x460>
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d020      	beq.n	8002de8 <StartDefaultTask+0x4a0>
 8002da6:	e0c0      	b.n	8002f2a <StartDefaultTask+0x5e2>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5
								detail_array[0] = STOP_NOW;
 8002dae:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002db2:	222b      	movs	r2, #43	; 0x2b
 8002db4:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002dc0:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	2008      	movs	r0, #8
 8002dd0:	f7ff fc0e 	bl	80025f0 <commandRespond>
 8002dd4:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
								total_respond_length += respond_lenght;
 8002dd8:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002ddc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002de0:	4413      	add	r3, r2
 8002de2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
//								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
							  }
							  break;
 8002de6:	e0a6      	b.n	8002f36 <StartDefaultTask+0x5ee>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002de8:	f897 33f5 	ldrb.w	r3, [r7, #1013]	; 0x3f5
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d126      	bne.n	8002e3e <StartDefaultTask+0x4f6>
 8002df0:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d122      	bne.n	8002e3e <StartDefaultTask+0x4f6>
									  current_mode = SCARA_MODE_SCAN;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
									detail_array[0] = START_SCAN;
 8002e04:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002e08:	222c      	movs	r2, #44	; 0x2c
 8002e0a:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002e16:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2301      	movs	r3, #1
 8002e24:	2008      	movs	r0, #8
 8002e26:	f7ff fbe3 	bl	80025f0 <commandRespond>
 8002e2a:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
									total_respond_length += respond_lenght;
 8002e2e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002e32:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002e36:	4413      	add	r3, r2
 8002e38:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
									respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002e3c:	e07b      	b.n	8002f36 <StartDefaultTask+0x5ee>
									detail_array[0] = BUSY;
 8002e3e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002e42:	222d      	movs	r2, #45	; 0x2d
 8002e44:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4a:	6899      	ldr	r1, [r3, #8]
 8002e4c:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002e50:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002e54:	4413      	add	r3, r2
 8002e56:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	2007      	movs	r0, #7
 8002e60:	f7ff fbc6 	bl	80025f0 <commandRespond>
 8002e64:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
									total_respond_length += respond_lenght;
 8002e68:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002e6c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002e70:	4413      	add	r3, r2
 8002e72:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002e76:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002e7a:	48c6      	ldr	r0, [pc, #792]	; (8003194 <StartDefaultTask+0x84c>)
 8002e7c:	f7ff fc20 	bl	80026c0 <LOG_REPORT>
							  break;
 8002e80:	e059      	b.n	8002f36 <StartDefaultTask+0x5ee>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002e82:	f897 33f5 	ldrb.w	r3, [r7, #1013]	; 0x3f5
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d131      	bne.n	8002eee <StartDefaultTask+0x5a6>
 8002e8a:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d12d      	bne.n	8002eee <StartDefaultTask+0x5a6>
									  if (scaraIsScanLimit()) {
 8002e92:	f006 ff5f 	bl	8009d54 <scaraIsScanLimit>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <StartDefaultTask+0x562>
										  current_mode	 = SCARA_MODE_DUTY;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
									  if (scaraIsScanLimit()) {
 8002ea8:	e03e      	b.n	8002f28 <StartDefaultTask+0x5e0>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002eaa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002eae:	222e      	movs	r2, #46	; 0x2e
 8002eb0:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002ebc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	2007      	movs	r0, #7
 8002ecc:	f7ff fb90 	bl	80025f0 <commandRespond>
 8002ed0:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
										total_respond_length += respond_lenght;
 8002ed4:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002ed8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002edc:	4413      	add	r3, r2
 8002ede:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002ee2:	f240 118b 	movw	r1, #395	; 0x18b
 8002ee6:	48ac      	ldr	r0, [pc, #688]	; (8003198 <StartDefaultTask+0x850>)
 8002ee8:	f7ff fbea 	bl	80026c0 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002eec:	e01c      	b.n	8002f28 <StartDefaultTask+0x5e0>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002eee:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002ef2:	222d      	movs	r2, #45	; 0x2d
 8002ef4:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002f00:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002f04:	4413      	add	r3, r2
 8002f06:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2007      	movs	r0, #7
 8002f10:	f7ff fb6e 	bl	80025f0 <commandRespond>
 8002f14:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
									total_respond_length += respond_lenght;
 8002f18:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002f1c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002f20:	4413      	add	r3, r2
 8002f22:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
//									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
								  }
							  }
							  break;
 8002f26:	e006      	b.n	8002f36 <StartDefaultTask+0x5ee>
 8002f28:	e005      	b.n	8002f36 <StartDefaultTask+0x5ee>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002f2a:	f240 1197 	movw	r1, #407	; 0x197
 8002f2e:	489b      	ldr	r0, [pc, #620]	; (800319c <StartDefaultTask+0x854>)
 8002f30:	f7ff fbc6 	bl	80026c0 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002f34:	e17f      	b.n	8003236 <StartDefaultTask+0x8ee>
 8002f36:	e17e      	b.n	8003236 <StartDefaultTask+0x8ee>
					  {
//						  test_value[0] = 0;
//						  test_value[1] = 0;
//						  test_value[2] = 0;
//						  test_value[3] = 0;
						  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
						  switch (duty_cmd.test_key)
 8002f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f42:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002f46:	2b07      	cmp	r3, #7
 8002f48:	f200 8094 	bhi.w	8003074 <StartDefaultTask+0x72c>
 8002f4c:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <StartDefaultTask+0x60c>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f75 	.word	0x08002f75
 8002f58:	08002f91 	.word	0x08002f91
 8002f5c:	08002fb5 	.word	0x08002fb5
 8002f60:	08002fd1 	.word	0x08002fd1
 8002f64:	08002ff5 	.word	0x08002ff5
 8002f68:	08003011 	.word	0x08003011
 8002f6c:	08003035 	.word	0x08003035
 8002f70:	08003051 	.word	0x08003051
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f78:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b87      	ldr	r3, [pc, #540]	; (80031a0 <StartDefaultTask+0x858>)
 8002f84:	f993 1000 	ldrsb.w	r1, [r3]
 8002f88:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002f8c:	5499      	strb	r1, [r3, r2]
						  break;
 8002f8e:	e075      	b.n	800307c <StartDefaultTask+0x734>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002f90:	4b83      	ldr	r3, [pc, #524]	; (80031a0 <StartDefaultTask+0x858>)
 8002f92:	f993 3000 	ldrsb.w	r3, [r3]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	425b      	negs	r3, r3
 8002f9a:	b2d9      	uxtb	r1, r3
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	b249      	sxtb	r1, r1
 8002fac:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002fb0:	5499      	strb	r1, [r3, r2]
						  break;
 8002fb2:	e063      	b.n	800307c <StartDefaultTask+0x734>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b77      	ldr	r3, [pc, #476]	; (80031a0 <StartDefaultTask+0x858>)
 8002fc4:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002fc8:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002fcc:	5499      	strb	r1, [r3, r2]
						  break;
 8002fce:	e055      	b.n	800307c <StartDefaultTask+0x734>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002fd0:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <StartDefaultTask+0x858>)
 8002fd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	425b      	negs	r3, r3
 8002fda:	b2d9      	uxtb	r1, r3
 8002fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	b249      	sxtb	r1, r1
 8002fec:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002ff0:	5499      	strb	r1, [r3, r2]
						  break;
 8002ff2:	e043      	b.n	800307c <StartDefaultTask+0x734>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <StartDefaultTask+0x858>)
 8003004:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003008:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800300c:	5499      	strb	r1, [r3, r2]
						  break;
 800300e:	e035      	b.n	800307c <StartDefaultTask+0x734>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8003010:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <StartDefaultTask+0x858>)
 8003012:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	425b      	negs	r3, r3
 800301a:	b2d9      	uxtb	r1, r3
 800301c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003020:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	b249      	sxtb	r1, r1
 800302c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003030:	5499      	strb	r1, [r3, r2]
						  break;
 8003032:	e023      	b.n	800307c <StartDefaultTask+0x734>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8003034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003038:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <StartDefaultTask+0x858>)
 8003044:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003048:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800304c:	5499      	strb	r1, [r3, r2]
						  break;
 800304e:	e015      	b.n	800307c <StartDefaultTask+0x734>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <StartDefaultTask+0x858>)
 8003052:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	425b      	negs	r3, r3
 800305a:	b2d9      	uxtb	r1, r3
 800305c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003060:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	b249      	sxtb	r1, r1
 800306c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003070:	5499      	strb	r1, [r3, r2]
						  break;						  
 8003072:	e003      	b.n	800307c <StartDefaultTask+0x734>
						  default:
							  current_duty_state = SCARA_DUTY_STATE_READY;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
						  break;
 800307a:	bf00      	nop
						  }
					  }
					  break;
 800307c:	e0db      	b.n	8003236 <StartDefaultTask+0x8ee>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN && Gcode_data_available && offset_data_available){
 800307e:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d13b      	bne.n	80030fe <StartDefaultTask+0x7b6>
 8003086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b14      	cmp	r3, #20
 800308e:	d136      	bne.n	80030fe <StartDefaultTask+0x7b6>
 8003090:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <StartDefaultTask+0x85c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d032      	beq.n	80030fe <StartDefaultTask+0x7b6>
 8003098:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <StartDefaultTask+0x860>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02e      	beq.n	80030fe <StartDefaultTask+0x7b6>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 80030a0:	4b42      	ldr	r3, [pc, #264]	; (80031ac <StartDefaultTask+0x864>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d103      	bne.n	80030b0 <StartDefaultTask+0x768>
				  				run_point = 1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80030ae:	e006      	b.n	80030be <StartDefaultTask+0x776>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80030b0:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <StartDefaultTask+0x864>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d102      	bne.n	80030be <StartDefaultTask+0x776>
				  				run_point = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
				  			  }
				  			detail_array[0] = GCODE_START;
 80030be:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80030c2:	2225      	movs	r2, #37	; 0x25
 80030c4:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80030d0:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80030d4:	4413      	add	r3, r2
 80030d6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2301      	movs	r3, #1
 80030de:	2003      	movs	r0, #3
 80030e0:	f7ff fa86 	bl	80025f0 <commandRespond>
 80030e4:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
							total_respond_length += respond_lenght;
 80030e8:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80030ec:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80030f0:	4413      	add	r3, r2
 80030f2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				  			current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80030f6:	2304      	movs	r3, #4
 80030f8:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  			detail_array[0] = GCODE_OFFSET_MISSING;
							respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
				  		  }
				  	  }
				  	  break;
 80030fc:	e09a      	b.n	8003234 <StartDefaultTask+0x8ec>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT){
 80030fe:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 8003102:	2b01      	cmp	r3, #1
 8003104:	d11c      	bne.n	8003140 <StartDefaultTask+0x7f8>
				  			detail_array[0] = GCODE_MODE_NOT_READY;
 8003106:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800310a:	222a      	movs	r2, #42	; 0x2a
 800310c:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800310e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003118:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800311c:	4413      	add	r3, r2
 800311e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2301      	movs	r3, #1
 8003126:	2008      	movs	r0, #8
 8003128:	f7ff fa62 	bl	80025f0 <commandRespond>
 800312c:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
							total_respond_length += respond_lenght;
 8003130:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003134:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003138:	4413      	add	r3, r2
 800313a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				  	  break;
 800313e:	e079      	b.n	8003234 <StartDefaultTask+0x8ec>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8003140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b0e      	cmp	r3, #14
 8003148:	d103      	bne.n	8003152 <StartDefaultTask+0x80a>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  	  break;
 8003150:	e070      	b.n	8003234 <StartDefaultTask+0x8ec>
				  		  }else if(Gcode_data_available == 0){
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <StartDefaultTask+0x85c>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12a      	bne.n	80031b0 <StartDefaultTask+0x868>
				  			detail_array[0] = GCODE_DATA_MISSING;
 800315a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800315e:	2229      	movs	r2, #41	; 0x29
 8003160:	701a      	strb	r2, [r3, #0]
						    respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800316c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003170:	4413      	add	r3, r2
 8003172:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2301      	movs	r3, #1
 800317a:	2008      	movs	r0, #8
 800317c:	f7ff fa38 	bl	80025f0 <commandRespond>
 8003180:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
						    total_respond_length += respond_lenght;
 8003184:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003188:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800318c:	4413      	add	r3, r2
 800318e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				  	  break;
 8003192:	e04f      	b.n	8003234 <StartDefaultTask+0x8ec>
 8003194:	0801bc0c 	.word	0x0801bc0c
 8003198:	0801bc1c 	.word	0x0801bc1c
 800319c:	0801bc30 	.word	0x0801bc30
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20004405 	.word	0x20004405
 80031a8:	20004404 	.word	0x20004404
 80031ac:	200085d0 	.word	0x200085d0
				  		  }else if(offset_data_available == 0){
 80031b0:	4bc9      	ldr	r3, [pc, #804]	; (80034d8 <StartDefaultTask+0xb90>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d13d      	bne.n	8003234 <StartDefaultTask+0x8ec>
				  			detail_array[0] = GCODE_OFFSET_MISSING;
 80031b8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80031bc:	2228      	movs	r2, #40	; 0x28
 80031be:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80031ca:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80031ce:	4413      	add	r3, r2
 80031d0:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2301      	movs	r3, #1
 80031d8:	2008      	movs	r0, #8
 80031da:	f7ff fa09 	bl	80025f0 <commandRespond>
 80031de:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
							total_respond_length += respond_lenght;
 80031e2:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80031e6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80031ea:	4413      	add	r3, r2
 80031ec:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				  	  break;
 80031f0:	e020      	b.n	8003234 <StartDefaultTask+0x8ec>
				  	  {
//				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 80031f2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80031f6:	222f      	movs	r2, #47	; 0x2f
 80031f8:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003204:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003208:	4413      	add	r3, r2
 800320a:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2301      	movs	r3, #1
 8003212:	2007      	movs	r0, #7
 8003214:	f7ff f9ec 	bl	80025f0 <commandRespond>
 8003218:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					total_respond_length += respond_lenght;
 800321c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003220:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003224:	4413      	add	r3, r2
 8003226:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  	  if (current_method == duty_cmd.robot_method) {
 800322a:	e024      	b.n	8003276 <StartDefaultTask+0x92e>
				  	  break;
 800322c:	bf00      	nop
 800322e:	e022      	b.n	8003276 <StartDefaultTask+0x92e>
				  	  break;
 8003230:	bf00      	nop
 8003232:	e020      	b.n	8003276 <StartDefaultTask+0x92e>
				  	  break;
 8003234:	bf00      	nop
			  	  if (current_method == duty_cmd.robot_method) {
 8003236:	e01e      	b.n	8003276 <StartDefaultTask+0x92e>
			  	  }

			  }else{
				  detail_array[0] = BUSY;
 8003238:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800323c:	222d      	movs	r2, #45	; 0x2d
 800323e:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800324a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800324e:	4413      	add	r3, r2
 8003250:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2301      	movs	r3, #1
 8003258:	2007      	movs	r0, #7
 800325a:	f7ff f9c9 	bl	80025f0 <commandRespond>
 800325e:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				  total_respond_length += respond_lenght;
 8003262:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003266:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800326a:	4413      	add	r3, r2
 800326c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8003270:	e002      	b.n	8003278 <StartDefaultTask+0x930>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8003272:	bf00      	nop
 8003274:	e000      	b.n	8003278 <StartDefaultTask+0x930>
			  	  if (current_method == duty_cmd.robot_method) {
 8003276:	bf00      	nop
			  }
		  isNewDuty = FALSE;
 8003278:	2300      	movs	r3, #0
 800327a:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 800327e:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 8003282:	2b04      	cmp	r3, #4
 8003284:	f201 816a 	bhi.w	800455c <StartDefaultTask+0x1c14>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <StartDefaultTask+0x948>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032a5 	.word	0x080032a5
 8003294:	08003451 	.word	0x08003451
 8003298:	080037d9 	.word	0x080037d9
 800329c:	08003be5 	.word	0x08003be5
 80032a0:	08003c2d 	.word	0x08003c2d
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 80032a4:	f897 33f2 	ldrb.w	r3, [r7, #1010]	; 0x3f2
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	f201 8154 	bhi.w	8004556 <StartDefaultTask+0x1c0e>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <StartDefaultTask+0x96c>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032cd 	.word	0x080032cd
 80032bc:	0800333d 	.word	0x0800333d
 80032c0:	0800340f 	.word	0x0800340f
		  case SCARA_KEY_STATE_READY:
			  method_state = SCARA_METHOD_IDLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  /* Wait for application keyboard , do nothing*/
		  break;
 80032ca:	e0bf      	b.n	800344c <StartDefaultTask+0xb04>
		  case SCARA_KEY_STATE_INIT:
		  {
			  method_state = SCARA_METHOD_ACTIVE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 80032d2:	4b82      	ldr	r3, [pc, #520]	; (80034dc <StartDefaultTask+0xb94>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f897 33f1 	ldrb.w	r3, [r7, #1009]	; 0x3f1
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f006 fdf7 	bl	8009ed0 <scaraKeyInit1>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d125      	bne.n	8003334 <StartDefaultTask+0x9ec>
				  run_time = 0;
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80032f4:	2302      	movs	r3, #2
 80032f6:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
					detail_array[0] = NONE;
 80032fa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80032fe:	2230      	movs	r2, #48	; 0x30
 8003300:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003306:	6899      	ldr	r1, [r3, #8]
 8003308:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800330c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003310:	4413      	add	r3, r2
 8003312:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2301      	movs	r3, #1
 800331a:	2003      	movs	r0, #3
 800331c:	f7ff f968 	bl	80025f0 <commandRespond>
 8003320:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					total_respond_length += respond_lenght;
 8003324:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003328:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800332c:	4413      	add	r3, r2
 800332e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8003332:	e08b      	b.n	800344c <StartDefaultTask+0xb04>
				  current_key_state = SCARA_KEY_STATE_READY;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
		  break;
 800333a:	e087      	b.n	800344c <StartDefaultTask+0xb04>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  method_state = SCARA_METHOD_ACTIVE;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003342:	a363      	add	r3, pc, #396	; (adr r3, 80034d0 <StartDefaultTask+0xb88>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 800334c:	f7fc ff9e 	bl	800028c <__adddf3>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003358:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 800335c:	f006 fd06 	bl	8009d6c <scaraIsFinish>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <StartDefaultTask+0xa26>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8003366:	2303      	movs	r3, #3
 8003368:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 800336c:	e06e      	b.n	800344c <StartDefaultTask+0xb04>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 800336e:	4c5c      	ldr	r4, [pc, #368]	; (80034e0 <StartDefaultTask+0xb98>)
 8003370:	4668      	mov	r0, sp
 8003372:	f104 0108 	add.w	r1, r4, #8
 8003376:	2388      	movs	r3, #136	; 0x88
 8003378:	461a      	mov	r2, r3
 800337a:	f012 f899 	bl	80154b0 <memcpy>
 800337e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003382:	4858      	ldr	r0, [pc, #352]	; (80034e4 <StartDefaultTask+0xb9c>)
 8003384:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 8003388:	f005 fe3a 	bl	8009000 <scaraFlowDuty>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3379 	strb.w	r3, [r7, #889]	; 0x379
				  if ( SCARA_STATUS_OK == status) {
 8003392:	f897 3379 	ldrb.w	r3, [r7, #889]	; 0x379
 8003396:	2b00      	cmp	r3, #0
 8003398:	d113      	bne.n	80033c2 <StartDefaultTask+0xa7a>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800339a:	4c51      	ldr	r4, [pc, #324]	; (80034e0 <StartDefaultTask+0xb98>)
 800339c:	4b51      	ldr	r3, [pc, #324]	; (80034e4 <StartDefaultTask+0xb9c>)
 800339e:	a820      	add	r0, sp, #128	; 0x80
 80033a0:	4619      	mov	r1, r3
 80033a2:	2390      	movs	r3, #144	; 0x90
 80033a4:	461a      	mov	r2, r3
 80033a6:	f012 f883 	bl	80154b0 <memcpy>
 80033aa:	4668      	mov	r0, sp
 80033ac:	f104 0110 	add.w	r1, r4, #16
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	461a      	mov	r2, r3
 80033b4:	f012 f87c 	bl	80154b0 <memcpy>
 80033b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033bc:	f002 fff8 	bl	80063b0 <lowlayer_computeAndWritePulse>
		  break;
 80033c0:	e044      	b.n	800344c <StartDefaultTask+0xb04>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 80033c2:	2303      	movs	r3, #3
 80033c4:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
					detail_array[0] = status;
 80033c8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80033cc:	f897 2379 	ldrb.w	r2, [r7, #889]	; 0x379
 80033d0:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80033d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80033dc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80033e0:	4413      	add	r3, r2
 80033e2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2301      	movs	r3, #1
 80033ea:	2006      	movs	r0, #6
 80033ec:	f7ff f900 	bl	80025f0 <commandRespond>
 80033f0:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					total_respond_length += respond_lenght;
 80033f4:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80033f8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80033fc:	4413      	add	r3, r2
 80033fe:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
					  LOG_REPORT("STOP KEY", __LINE__);
 8003402:	f240 2127 	movw	r1, #551	; 0x227
 8003406:	4838      	ldr	r0, [pc, #224]	; (80034e8 <StartDefaultTask+0xba0>)
 8003408:	f7ff f95a 	bl	80026c0 <LOG_REPORT>
		  break;
 800340c:	e01e      	b.n	800344c <StartDefaultTask+0xb04>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 800340e:	4835      	ldr	r0, [pc, #212]	; (80034e4 <StartDefaultTask+0xb9c>)
 8003410:	f002 fe3e 	bl	8006090 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8003414:	4833      	ldr	r0, [pc, #204]	; (80034e4 <StartDefaultTask+0xb9c>)
 8003416:	f001 feff 	bl	8005218 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
			  positionNext.t = 0;
 8003420:	4930      	ldr	r1, [pc, #192]	; (80034e4 <StartDefaultTask+0xb9c>)
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			  positionNext.total_time = 0;
 800342e:	492d      	ldr	r1, [pc, #180]	; (80034e4 <StartDefaultTask+0xb9c>)
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  positionNext.q = 0;
 800343c:	4929      	ldr	r1, [pc, #164]	; (80034e4 <StartDefaultTask+0xb9c>)
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 800344a:	bf00      	nop
		  }
	  }
	  break;
 800344c:	f001 b883 	b.w	8004556 <StartDefaultTask+0x1c0e>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8003450:	f897 33f5 	ldrb.w	r3, [r7, #1013]	; 0x3f5
 8003454:	2b02      	cmp	r3, #2
 8003456:	d07e      	beq.n	8003556 <StartDefaultTask+0xc0e>
 8003458:	2b02      	cmp	r3, #2
 800345a:	f300 81b5 	bgt.w	80037c8 <StartDefaultTask+0xe80>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <StartDefaultTask+0xb20>
 8003462:	2b01      	cmp	r3, #1
 8003464:	d007      	beq.n	8003476 <StartDefaultTask+0xb2e>
 8003466:	e1af      	b.n	80037c8 <StartDefaultTask+0xe80>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8003468:	2302      	movs	r3, #2
 800346a:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
			  }
		  break;
 8003474:	e1ae      	b.n	80037d4 <StartDefaultTask+0xe8c>

		  case SCARA_MODE_SCAN:
			  {
				  method_state = SCARA_METHOD_ACTIVE;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
				  switch (current_scan_state) {
 800347c:	f897 33f3 	ldrb.w	r3, [r7, #1011]	; 0x3f3
 8003480:	2b03      	cmp	r3, #3
 8003482:	d85e      	bhi.n	8003542 <StartDefaultTask+0xbfa>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <StartDefaultTask+0xb44>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080034a9 	.word	0x080034a9
 8003494:	080034bb 	.word	0x080034bb
 8003498:	080034ed 	.word	0x080034ed
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 800349c:	f002 fbf2 	bl	8005c84 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
					  }
					  break;
 80034a6:	e055      	b.n	8003554 <StartDefaultTask+0xc0c>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80034a8:	f002 fc1e 	bl	8005ce8 <lowlayer_scanFlow>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04d      	beq.n	800354e <StartDefaultTask+0xc06>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80034b2:	2302      	movs	r3, #2
 80034b4:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
						  }
					  }
					  break;
 80034b8:	e049      	b.n	800354e <StartDefaultTask+0xc06>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80034ba:	480a      	ldr	r0, [pc, #40]	; (80034e4 <StartDefaultTask+0xb9c>)
 80034bc:	f002 fd6c 	bl	8005f98 <lowlayer_goToSoftLimit>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d045      	beq.n	8003552 <StartDefaultTask+0xc0a>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
							}
					  }
					  break;
 80034cc:	e041      	b.n	8003552 <StartDefaultTask+0xc0a>
 80034ce:	bf00      	nop
 80034d0:	40000000 	.word	0x40000000
 80034d4:	3f847ae1 	.word	0x3f847ae1
 80034d8:	20004404 	.word	0x20004404
 80034dc:	20000060 	.word	0x20000060
 80034e0:	20011420 	.word	0x20011420
 80034e4:	200114b0 	.word	0x200114b0
 80034e8:	0801bc44 	.word	0x0801bc44
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 80034ec:	48d4      	ldr	r0, [pc, #848]	; (8003840 <StartDefaultTask+0xef8>)
 80034ee:	f002 fdcf 	bl	8006090 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80034f2:	48d3      	ldr	r0, [pc, #844]	; (8003840 <StartDefaultTask+0xef8>)
 80034f4:	f001 fe90 	bl	8005218 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
						  scaraSetScanFlag();
 8003504:	f006 fba4 	bl	8009c50 <scaraSetScanFlag>

						detail_array[0] = NONE;
 8003508:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800350c:	2230      	movs	r2, #48	; 0x30
 800350e:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800351a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800351e:	4413      	add	r3, r2
 8003520:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2301      	movs	r3, #1
 8003528:	2005      	movs	r0, #5
 800352a:	f7ff f861 	bl	80025f0 <commandRespond>
 800352e:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
						total_respond_length += respond_lenght;
 8003532:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003536:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800353a:	4413      	add	r3, r2
 800353c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
					  }
					  break;
 8003540:	e008      	b.n	8003554 <StartDefaultTask+0xc0c>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003542:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8003546:	48bf      	ldr	r0, [pc, #764]	; (8003844 <StartDefaultTask+0xefc>)
 8003548:	f7ff f8ba 	bl	80026c0 <LOG_REPORT>
						  while(1);
 800354c:	e7fe      	b.n	800354c <StartDefaultTask+0xc04>
					  break;
 800354e:	bf00      	nop
 8003550:	e140      	b.n	80037d4 <StartDefaultTask+0xe8c>
					  break;
 8003552:	bf00      	nop
					  }
				  }

			  }
		  break;
 8003554:	e13e      	b.n	80037d4 <StartDefaultTask+0xe8c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8003556:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 800355a:	2b03      	cmp	r3, #3
 800355c:	f200 812d 	bhi.w	80037ba <StartDefaultTask+0xe72>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <StartDefaultTask+0xc20>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	08003579 	.word	0x08003579
 800356c:	08003581 	.word	0x08003581
 8003570:	0800369d 	.word	0x0800369d
 8003574:	0800376f 	.word	0x0800376f
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing;
						  method_state = SCARA_METHOD_IDLE;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
					  }
				  break;
 800357e:	e122      	b.n	80037c6 <StartDefaultTask+0xe7e>

				  case SCARA_DUTY_STATE_INIT:
					  {
						  method_state = SCARA_METHOD_ACTIVE;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8003586:	f507 7402 	add.w	r4, r7, #520	; 0x208
 800358a:	4668      	mov	r0, sp
 800358c:	f104 0110 	add.w	r1, r4, #16
 8003590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003594:	461a      	mov	r2, r3
 8003596:	f011 ff8b 	bl	80154b0 <memcpy>
 800359a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800359e:	f003 fa9f 	bl	8006ae0 <scaraInitDuty>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
						  if ( SCARA_STATUS_OK == status1) {
 80035a8:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d14f      	bne.n	8003650 <StartDefaultTask+0xd08>
							  status2 = scaraTestDuty();
 80035b0:	f006 fad2 	bl	8009b58 <scaraTestDuty>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
							  if (SCARA_STATUS_OK == status2) {
 80035ba:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d125      	bne.n	800360e <StartDefaultTask+0xcc6>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
							  // Respond
//							  detail_array[0] = status1;
//							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
//							  total_respond_length += respond_lenght;
							  detail_array[0] = NONE;
 80035d4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80035d8:	2230      	movs	r2, #48	; 0x30
 80035da:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80035e6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80035ea:	4413      	add	r3, r2
 80035ec:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2301      	movs	r3, #1
 80035f4:	2003      	movs	r0, #3
 80035f6:	f7fe fffb 	bl	80025f0 <commandRespond>
 80035fa:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
							  total_respond_length += respond_lenght;
 80035fe:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003602:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003606:	4413      	add	r3, r2
 8003608:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
							respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 800360c:	e0db      	b.n	80037c6 <StartDefaultTask+0xe7e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
								detail_array[0] = status2;
 8003614:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003618:	f897 237a 	ldrb.w	r2, [r7, #890]	; 0x37a
 800361c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800361e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003628:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800362c:	4413      	add	r3, r2
 800362e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2301      	movs	r3, #1
 8003636:	2007      	movs	r0, #7
 8003638:	f7fe ffda 	bl	80025f0 <commandRespond>
 800363c:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
								total_respond_length += respond_lenght;
 8003640:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003644:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003648:	4413      	add	r3, r2
 800364a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				  break;
 800364e:	e0ba      	b.n	80037c6 <StartDefaultTask+0xe7e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
							detail_array[0] = status1;
 8003656:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800365a:	f897 237b 	ldrb.w	r2, [r7, #891]	; 0x37b
 800365e:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800366a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800366e:	4413      	add	r3, r2
 8003670:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2301      	movs	r3, #1
 8003678:	2007      	movs	r0, #7
 800367a:	f7fe ffb9 	bl	80025f0 <commandRespond>
 800367e:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
							total_respond_length += respond_lenght;
 8003682:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003686:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800368a:	4413      	add	r3, r2
 800368c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
							  LOG_REPORT("INIT FAIL", __LINE__);
 8003690:	f240 219f 	movw	r1, #671	; 0x29f
 8003694:	486c      	ldr	r0, [pc, #432]	; (8003848 <StartDefaultTask+0xf00>)
 8003696:	f7ff f813 	bl	80026c0 <LOG_REPORT>
				  break;
 800369a:	e094      	b.n	80037c6 <StartDefaultTask+0xe7e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  method_state = SCARA_METHOD_ACTIVE;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80036a2:	a365      	add	r3, pc, #404	; (adr r3, 8003838 <StartDefaultTask+0xef0>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 80036ac:	f7fc fdee 	bl	800028c <__adddf3>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80036b8:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 80036bc:	f006 fb56 	bl	8009d6c <scaraIsFinish>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <StartDefaultTask+0xd86>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80036c6:	2303      	movs	r3, #3
 80036c8:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80036cc:	e07b      	b.n	80037c6 <StartDefaultTask+0xe7e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80036ce:	4c5f      	ldr	r4, [pc, #380]	; (800384c <StartDefaultTask+0xf04>)
 80036d0:	4668      	mov	r0, sp
 80036d2:	f104 0108 	add.w	r1, r4, #8
 80036d6:	2388      	movs	r3, #136	; 0x88
 80036d8:	461a      	mov	r2, r3
 80036da:	f011 fee9 	bl	80154b0 <memcpy>
 80036de:	e894 000c 	ldmia.w	r4, {r2, r3}
 80036e2:	4857      	ldr	r0, [pc, #348]	; (8003840 <StartDefaultTask+0xef8>)
 80036e4:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 80036e8:	f005 fc8a 	bl	8009000 <scaraFlowDuty>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 337c 	strb.w	r3, [r7, #892]	; 0x37c
							  if ( SCARA_STATUS_OK == status) {
 80036f2:	f897 337c 	ldrb.w	r3, [r7, #892]	; 0x37c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d113      	bne.n	8003722 <StartDefaultTask+0xdda>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80036fa:	4c54      	ldr	r4, [pc, #336]	; (800384c <StartDefaultTask+0xf04>)
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <StartDefaultTask+0xef8>)
 80036fe:	a820      	add	r0, sp, #128	; 0x80
 8003700:	4619      	mov	r1, r3
 8003702:	2390      	movs	r3, #144	; 0x90
 8003704:	461a      	mov	r2, r3
 8003706:	f011 fed3 	bl	80154b0 <memcpy>
 800370a:	4668      	mov	r0, sp
 800370c:	f104 0110 	add.w	r1, r4, #16
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	461a      	mov	r2, r3
 8003714:	f011 fecc 	bl	80154b0 <memcpy>
 8003718:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800371c:	f002 fe48 	bl	80063b0 <lowlayer_computeAndWritePulse>
				  break;
 8003720:	e051      	b.n	80037c6 <StartDefaultTask+0xe7e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003722:	2303      	movs	r3, #3
 8003724:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
								detail_array[0] = status;
 8003728:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800372c:	f897 237c 	ldrb.w	r2, [r7, #892]	; 0x37c
 8003730:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800373c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003740:	4413      	add	r3, r2
 8003742:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2301      	movs	r3, #1
 800374a:	2006      	movs	r0, #6
 800374c:	f7fe ff50 	bl	80025f0 <commandRespond>
 8003750:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
								total_respond_length += respond_lenght;
 8003754:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003758:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800375c:	4413      	add	r3, r2
 800375e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
								  LOG_REPORT("STOP DUTY", __LINE__);
 8003762:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003766:	483a      	ldr	r0, [pc, #232]	; (8003850 <StartDefaultTask+0xf08>)
 8003768:	f7fe ffaa 	bl	80026c0 <LOG_REPORT>
				  break;
 800376c:	e02b      	b.n	80037c6 <StartDefaultTask+0xe7e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 800376e:	4834      	ldr	r0, [pc, #208]	; (8003840 <StartDefaultTask+0xef8>)
 8003770:	f002 fc8e 	bl	8006090 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003774:	4832      	ldr	r0, [pc, #200]	; (8003840 <StartDefaultTask+0xef8>)
 8003776:	f001 fd4f 	bl	8005218 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
//						  positionNext.t = 0;
//						  positionNext.total_time = 0;
//						  positionNext.q = 0;


						  detail_array[0] = NONE;
 8003780:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003784:	2230      	movs	r2, #48	; 0x30
 8003786:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003792:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003796:	4413      	add	r3, r2
 8003798:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2301      	movs	r3, #1
 80037a0:	2005      	movs	r0, #5
 80037a2:	f7fe ff25 	bl	80025f0 <commandRespond>
 80037a6:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
						  total_respond_length += respond_lenght;
 80037aa:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80037ae:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80037b2:	4413      	add	r3, r2
 80037b4:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
					  }
				  break;
 80037b8:	e005      	b.n	80037c6 <StartDefaultTask+0xe7e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80037ba:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80037be:	4821      	ldr	r0, [pc, #132]	; (8003844 <StartDefaultTask+0xefc>)
 80037c0:	f7fe ff7e 	bl	80026c0 <LOG_REPORT>
						  while(1);
 80037c4:	e7fe      	b.n	80037c4 <StartDefaultTask+0xe7c>
					  }
				  }

			  }
			  break;
 80037c6:	e005      	b.n	80037d4 <StartDefaultTask+0xe8c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 80037c8:	f240 21da 	movw	r1, #730	; 0x2da
 80037cc:	4821      	ldr	r0, [pc, #132]	; (8003854 <StartDefaultTask+0xf0c>)
 80037ce:	f7fe ff77 	bl	80026c0 <LOG_REPORT>
				  while(1);
 80037d2:	e7fe      	b.n	80037d2 <StartDefaultTask+0xe8a>
			  }
		  }
	  }
	  break;
 80037d4:	f000 bec2 	b.w	800455c <StartDefaultTask+0x1c14>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 80037d8:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	f200 81fe 	bhi.w	8003bde <StartDefaultTask+0x1296>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <StartDefaultTask+0xea0>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080038cd 	.word	0x080038cd
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	08003a01 	.word	0x08003a01
 80037f4:	08003bd7 	.word	0x08003bd7
 80037f8:	080038d5 	.word	0x080038d5
		  {
		  case SCARA_DUTY_STATE_INIT:{
			  method_state = SCARA_METHOD_IDLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 8003802:	4b12      	ldr	r3, [pc, #72]	; (800384c <StartDefaultTask+0xf04>)
 8003804:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <StartDefaultTask+0xf10>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f7fc fd3b 	bl	8000288 <__aeabi_dsub>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	61ba      	str	r2, [r7, #24]
 8003818:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <StartDefaultTask+0xf14>)
 8003824:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003828:	f7fd f958 	bl	8000adc <__aeabi_dcmplt>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d116      	bne.n	8003860 <StartDefaultTask+0xf18>
				  current_duty_state = SCARA_DUTY_STATE_READY;
			  }
		  }
		  break;
 8003832:	e1d5      	b.n	8003be0 <StartDefaultTask+0x1298>
 8003834:	f3af 8000 	nop.w
 8003838:	40000000 	.word	0x40000000
 800383c:	3f847ae1 	.word	0x3f847ae1
 8003840:	200114b0 	.word	0x200114b0
 8003844:	0801bc50 	.word	0x0801bc50
 8003848:	0801bc60 	.word	0x0801bc60
 800384c:	20011420 	.word	0x20011420
 8003850:	0801bc6c 	.word	0x0801bc6c
 8003854:	0801bc78 	.word	0x0801bc78
 8003858:	20009928 	.word	0x20009928
 800385c:	40100000 	.word	0x40100000
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 8003860:	4bc1      	ldr	r3, [pc, #772]	; (8003b68 <StartDefaultTask+0x1220>)
 8003862:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003866:	4bc1      	ldr	r3, [pc, #772]	; (8003b6c <StartDefaultTask+0x1224>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f7fc fd0c 	bl	8000288 <__aeabi_dsub>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	613a      	str	r2, [r7, #16]
 8003876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	4bbb      	ldr	r3, [pc, #748]	; (8003b70 <StartDefaultTask+0x1228>)
 8003882:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003886:	f7fd f929 	bl	8000adc <__aeabi_dcmplt>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d100      	bne.n	8003892 <StartDefaultTask+0xf4a>
		  break;
 8003890:	e1a6      	b.n	8003be0 <StartDefaultTask+0x1298>
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 8003892:	4bb5      	ldr	r3, [pc, #724]	; (8003b68 <StartDefaultTask+0x1220>)
 8003894:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003898:	4bb6      	ldr	r3, [pc, #728]	; (8003b74 <StartDefaultTask+0x122c>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc fcf3 	bl	8000288 <__aeabi_dsub>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	60ba      	str	r2, [r7, #8]
 80038a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	4baf      	ldr	r3, [pc, #700]	; (8003b70 <StartDefaultTask+0x1228>)
 80038b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038b8:	f7fd f910 	bl	8000adc <__aeabi_dcmplt>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d100      	bne.n	80038c4 <StartDefaultTask+0xf7c>
		  break;
 80038c2:	e18d      	b.n	8003be0 <StartDefaultTask+0x1298>
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
		  break;
 80038ca:	e189      	b.n	8003be0 <StartDefaultTask+0x1298>
		  case SCARA_DUTY_STATE_READY:{
			  // do nothing wait for hot key
			  method_state = SCARA_METHOD_IDLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
		  }
		  break;
 80038d2:	e185      	b.n	8003be0 <StartDefaultTask+0x1298>
		  case SCARA_DUTY_STATE_OPERATION:{
			  method_state = SCARA_METHOD_ACTIVE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  update_gcode_point(&duty_cmd, run_point);
 80038da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038de:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f87c 	bl	80049e0 <update_gcode_point>
			  testing_value = 1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 80038ee:	f507 7402 	add.w	r4, r7, #520	; 0x208
 80038f2:	4668      	mov	r0, sp
 80038f4:	f104 0110 	add.w	r1, r4, #16
 80038f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80038fc:	461a      	mov	r2, r3
 80038fe:	f011 fdd7 	bl	80154b0 <memcpy>
 8003902:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003906:	f003 f8eb 	bl	8006ae0 <scaraInitDuty>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 337e 	strb.w	r3, [r7, #894]	; 0x37e
			  if(status == SCARA_STATUS_OK){
 8003910:	f897 337e 	ldrb.w	r3, [r7, #894]	; 0x37e
 8003914:	2b00      	cmp	r3, #0
 8003916:	d152      	bne.n	80039be <StartDefaultTask+0x1076>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR || duty_cmd.trajec_type == DUTY_TRAJECTORY_LSPB){
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	7c1b      	ldrb	r3, [r3, #16]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d004      	beq.n	800392c <StartDefaultTask+0xfe4>
 8003922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003926:	7c1b      	ldrb	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <StartDefaultTask+0xff2>
					  run_time = 0;
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 8003938:	e009      	b.n	800394e <StartDefaultTask+0x1006>
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 800393a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393e:	7c1b      	ldrb	r3, [r3, #16]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d104      	bne.n	800394e <StartDefaultTask+0x1006>
					  run_time = last_T;
 8003944:	4b8c      	ldr	r3, [pc, #560]	; (8003b78 <StartDefaultTask+0x1230>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800394e:	2302      	movs	r3, #2
 8003950:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  detail_array[0] = (uint8_t)((run_point+1) * 100.0f / total_num_of_point );
 8003954:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8003958:	3301      	adds	r3, #1
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003962:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003b7c <StartDefaultTask+0x1234>
 8003966:	ee67 6a87 	vmul.f32	s13, s15, s14
 800396a:	4b85      	ldr	r3, [pc, #532]	; (8003b80 <StartDefaultTask+0x1238>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800397a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003982:	793b      	ldrb	r3, [r7, #4]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800398a:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800398c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003996:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800399a:	4413      	add	r3, r2
 800399c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2301      	movs	r3, #1
 80039a4:	200b      	movs	r0, #11
 80039a6:	f7fe fe23 	bl	80025f0 <commandRespond>
 80039aa:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				  total_respond_length += respond_lenght;
 80039ae:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80039b2:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80039b6:	4413      	add	r3, r2
 80039b8:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 80039bc:	e020      	b.n	8003a00 <StartDefaultTask+0x10b8>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80039be:	2303      	movs	r3, #3
 80039c0:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  detail_array[0] = status;
 80039c4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80039c8:	f897 237e 	ldrb.w	r2, [r7, #894]	; 0x37e
 80039cc:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80039ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80039d8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80039dc:	4413      	add	r3, r2
 80039de:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	2301      	movs	r3, #1
 80039e6:	2007      	movs	r0, #7
 80039e8:	f7fe fe02 	bl	80025f0 <commandRespond>
 80039ec:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
				  total_respond_length += respond_lenght;
 80039f0:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80039f4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80039f8:	4413      	add	r3, r2
 80039fa:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
				  break;
 80039fe:	e0ef      	b.n	8003be0 <StartDefaultTask+0x1298>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  method_state = SCARA_METHOD_ACTIVE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  run_time += T_SAMPLING;
 8003a06:	a356      	add	r3, pc, #344	; (adr r3, 8003b60 <StartDefaultTask+0x1218>)
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 8003a10:	f7fc fc3c 	bl	800028c <__adddf3>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003a1c:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 8003a20:	f006 f9a4 	bl	8009d6c <scaraIsFinish>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d06f      	beq.n	8003b0a <StartDefaultTask+0x11c2>
				if(run_point >= total_num_of_point-1){
 8003a2a:	4b55      	ldr	r3, [pc, #340]	; (8003b80 <StartDefaultTask+0x1238>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003a34:	429a      	cmp	r2, r3
 8003a36:	db28      	blt.n	8003a8a <StartDefaultTask+0x1142>
					current_duty_state = SCARA_DUTY_STATE_INIT;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
					lowlayer_readTruePosition(&positionNext);
 8003a3e:	4851      	ldr	r0, [pc, #324]	; (8003b84 <StartDefaultTask+0x123c>)
 8003a40:	f002 fb26 	bl	8006090 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003a44:	484f      	ldr	r0, [pc, #316]	; (8003b84 <StartDefaultTask+0x123c>)
 8003a46:	f001 fbe7 	bl	8005218 <kinematicForward>
				    Gcode_data_available = 0;
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <StartDefaultTask+0x1240>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
				    detail_array[0] = GCODE_FINISH;
 8003a50:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003a54:	2226      	movs	r2, #38	; 0x26
 8003a56:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003a62:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003a66:	4413      	add	r3, r2
 8003a68:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	2005      	movs	r0, #5
 8003a72:	f7fe fdbd 	bl	80025f0 <commandRespond>
 8003a76:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					total_respond_length += respond_lenght;
 8003a7a:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003a7e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003a82:	4413      	add	r3, r2
 8003a84:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  	    respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
			  	    total_respond_length += respond_lenght;
			    }
			  }
		  }
		  break;
 8003a88:	e0aa      	b.n	8003be0 <StartDefaultTask+0x1298>
					if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003a8a:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <StartDefaultTask+0x1244>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b09      	cmp	r3, #9
 8003a90:	d116      	bne.n	8003ac0 <StartDefaultTask+0x1178>
						accumulate_update(Gcode_Cor[run_point++]);
 8003a92:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003a96:	1c53      	adds	r3, r2, #1
 8003a98:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8003a9c:	493c      	ldr	r1, [pc, #240]	; (8003b90 <StartDefaultTask+0x1248>)
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	18cc      	adds	r4, r1, r3
 8003aa8:	466d      	mov	r5, sp
 8003aaa:	f104 0310 	add.w	r3, r4, #16
 8003aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ab2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ab6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003aba:	f001 fabd 	bl	8005038 <accumulate_update>
 8003abe:	e004      	b.n	8003aca <StartDefaultTask+0x1182>
						run_point++;
 8003ac0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003aca:	2304      	movs	r3, #4
 8003acc:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
					positionNext.x = duty_cmd.target_point.x;
 8003ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003ad8:	492a      	ldr	r1, [pc, #168]	; (8003b84 <StartDefaultTask+0x123c>)
 8003ada:	e9c1 2308 	strd	r2, r3, [r1, #32]
					positionNext.y = duty_cmd.target_point.y;
 8003ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003ae6:	4927      	ldr	r1, [pc, #156]	; (8003b84 <StartDefaultTask+0x123c>)
 8003ae8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
					positionNext.z = duty_cmd.target_point.z;
 8003aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003af4:	4923      	ldr	r1, [pc, #140]	; (8003b84 <StartDefaultTask+0x123c>)
 8003af6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					positionNext.roll = duty_cmd.target_point.roll;
 8003afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b02:	4920      	ldr	r1, [pc, #128]	; (8003b84 <StartDefaultTask+0x123c>)
 8003b04:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		  break;
 8003b08:	e06a      	b.n	8003be0 <StartDefaultTask+0x1298>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003b0a:	4c17      	ldr	r4, [pc, #92]	; (8003b68 <StartDefaultTask+0x1220>)
 8003b0c:	4668      	mov	r0, sp
 8003b0e:	f104 0108 	add.w	r1, r4, #8
 8003b12:	2388      	movs	r3, #136	; 0x88
 8003b14:	461a      	mov	r2, r3
 8003b16:	f011 fccb 	bl	80154b0 <memcpy>
 8003b1a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003b1e:	4819      	ldr	r0, [pc, #100]	; (8003b84 <StartDefaultTask+0x123c>)
 8003b20:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 8003b24:	f005 fa6c 	bl	8009000 <scaraFlowDuty>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 337d 	strb.w	r3, [r7, #893]	; 0x37d
				if ( SCARA_STATUS_OK == status) {
 8003b2e:	f897 337d 	ldrb.w	r3, [r7, #893]	; 0x37d
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d12e      	bne.n	8003b94 <StartDefaultTask+0x124c>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003b36:	4c0c      	ldr	r4, [pc, #48]	; (8003b68 <StartDefaultTask+0x1220>)
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <StartDefaultTask+0x123c>)
 8003b3a:	a820      	add	r0, sp, #128	; 0x80
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	2390      	movs	r3, #144	; 0x90
 8003b40:	461a      	mov	r2, r3
 8003b42:	f011 fcb5 	bl	80154b0 <memcpy>
 8003b46:	4668      	mov	r0, sp
 8003b48:	f104 0110 	add.w	r1, r4, #16
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f011 fcae 	bl	80154b0 <memcpy>
 8003b54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b58:	f002 fc2a 	bl	80063b0 <lowlayer_computeAndWritePulse>
		  break;
 8003b5c:	e040      	b.n	8003be0 <StartDefaultTask+0x1298>
 8003b5e:	bf00      	nop
 8003b60:	40000000 	.word	0x40000000
 8003b64:	3f847ae1 	.word	0x3f847ae1
 8003b68:	20011420 	.word	0x20011420
 8003b6c:	200106d0 	.word	0x200106d0
 8003b70:	40100000 	.word	0x40100000
 8003b74:	200106c0 	.word	0x200106c0
 8003b78:	200106c8 	.word	0x200106c8
 8003b7c:	42c80000 	.word	0x42c80000
 8003b80:	20009930 	.word	0x20009930
 8003b84:	200114b0 	.word	0x200114b0
 8003b88:	20004405 	.word	0x20004405
 8003b8c:	200085d0 	.word	0x200085d0
 8003b90:	20009948 	.word	0x20009948
			  	    current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003b94:	2303      	movs	r3, #3
 8003b96:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
			  	    detail_array[0] = status;
 8003b9a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003b9e:	f897 237d 	ldrb.w	r2, [r7, #893]	; 0x37d
 8003ba2:	701a      	strb	r2, [r3, #0]
			  	    respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba8:	6899      	ldr	r1, [r3, #8]
 8003baa:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003bae:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	2007      	movs	r0, #7
 8003bbe:	f7fe fd17 	bl	80025f0 <commandRespond>
 8003bc2:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
			  	    total_respond_length += respond_lenght;
 8003bc6:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8003bca:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003bce:	4413      	add	r3, r2
 8003bd0:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
		  break;
 8003bd4:	e004      	b.n	8003be0 <StartDefaultTask+0x1298>

		  case SCARA_DUTY_STATE_FINISH:{
			  method_state = SCARA_METHOD_IDLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
		  }
		  break;
 8003bdc:	e000      	b.n	8003be0 <StartDefaultTask+0x1298>
		  
		  default:
			  break;
 8003bde:	bf00      	nop
		  }
	  }

	  break;
 8003be0:	f000 bcbc 	b.w	800455c <StartDefaultTask+0x1c14>
	  case SCARA_METHOD_TEST:
	  {
		  switch(current_duty_state){
 8003be4:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <StartDefaultTask+0x12ac>
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d005      	beq.n	8003bfc <StartDefaultTask+0x12b4>
			  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
		  break;
		  }

	  }
	  break;
 8003bf0:	f000 bcb4 	b.w	800455c <StartDefaultTask+0x1c14>
			  method_state = SCARA_METHOD_IDLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
		  break;
 8003bfa:	e015      	b.n	8003c28 <StartDefaultTask+0x12e0>
			  method_state = SCARA_METHOD_ACTIVE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003c02:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003c06:	f993 0000 	ldrsb.w	r0, [r3]
 8003c0a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003c0e:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003c12:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003c16:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003c1a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003c1e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c22:	f002 fd6d 	bl	8006700 <lowlayer_writePulse>
		  break;
 8003c26:	bf00      	nop
	  break;
 8003c28:	f000 bc98 	b.w	800455c <StartDefaultTask+0x1c14>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003c2c:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 8003c30:	3b01      	subs	r3, #1
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	f200 8491 	bhi.w	800455a <StartDefaultTask+0x1c12>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <StartDefaultTask+0x12f8>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08004427 	.word	0x08004427
 8003c48:	0800453f 	.word	0x0800453f
 8003c4c:	08003c85 	.word	0x08003c85
		  case SCARA_DUTY_STATE_INIT:{
			  //HAL_TIM_Base_Start(&htim2);
			  object_tail_pointer = 0;
 8003c50:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <StartDefaultTask+0x14a8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
			  object_head_pointer = 0;
 8003c56:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <StartDefaultTask+0x14ac>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 33df 	strb.w	r3, [r7, #991]	; 0x3df
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003c62:	2304      	movs	r3, #4
 8003c64:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c74:	2200      	movs	r2, #0
 8003c76:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	735a      	strb	r2, [r3, #13]

		  }
		  break;
 8003c80:	f000 bc68 	b.w	8004554 <StartDefaultTask+0x1c0c>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003c84:	4b5a      	ldr	r3, [pc, #360]	; (8003df0 <StartDefaultTask+0x14a8>)
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	4b5a      	ldr	r3, [pc, #360]	; (8003df4 <StartDefaultTask+0x14ac>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f000 83c6 	beq.w	800441e <StartDefaultTask+0x1ad6>
				  method_state = SCARA_METHOD_ACTIVE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
				  switch(operation_state){
 8003c98:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 8003c9c:	2b07      	cmp	r3, #7
 8003c9e:	f200 82d8 	bhi.w	8004252 <StartDefaultTask+0x190a>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <StartDefaultTask+0x1360>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cc9 	.word	0x08003cc9
 8003cac:	08003fef 	.word	0x08003fef
 8003cb0:	08004019 	.word	0x08004019
 8003cb4:	0800402d 	.word	0x0800402d
 8003cb8:	080040a1 	.word	0x080040a1
 8003cbc:	080041eb 	.word	0x080041eb
 8003cc0:	08004215 	.word	0x08004215
 8003cc4:	08004227 	.word	0x08004227
					  case SCARA_MOVE_TO_TARGET:{
						  if(PNP_MOVE_TYPE == DUTY_MODE_INIT_QT){
 8003cc8:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <StartDefaultTask+0x14b0>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	f040 80a7 	bne.w	8003e20 <StartDefaultTask+0x14d8>
							  double wait_time = 1e-6*((uint64_t)(GET_MICROS - Object[object_tail_pointer].timer_value)) + MOVE_FACTOR + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 8003cd2:	4b4a      	ldr	r3, [pc, #296]	; (8003dfc <StartDefaultTask+0x14b4>)
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4b4a      	ldr	r3, [pc, #296]	; (8003e00 <StartDefaultTask+0x14b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	494a      	ldr	r1, [pc, #296]	; (8003e04 <StartDefaultTask+0x14bc>)
 8003cdc:	fba1 1303 	umull	r1, r3, r1, r3
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <StartDefaultTask+0x14a8>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4c45      	ldr	r4, [pc, #276]	; (8003e08 <StartDefaultTask+0x14c0>)
 8003cf4:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003cf8:	fb03 f302 	mul.w	r3, r3, r2
 8003cfc:	4423      	add	r3, r4
 8003cfe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	ebb0 0802 	subs.w	r8, r0, r2
 8003d0a:	eb61 0903 	sbc.w	r9, r1, r3
 8003d0e:	4640      	mov	r0, r8
 8003d10:	4649      	mov	r1, r9
 8003d12:	f7fc fc3b 	bl	800058c <__aeabi_ul2d>
 8003d16:	a334      	add	r3, pc, #208	; (adr r3, 8003de8 <StartDefaultTask+0x14a0>)
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	f7fc fc6c 	bl	80005f8 <__aeabi_dmul>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	4b38      	ldr	r3, [pc, #224]	; (8003e0c <StartDefaultTask+0x14c4>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f7fc faad 	bl	800028c <__adddf3>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <StartDefaultTask+0x14c8>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc faa4 	bl	800028c <__adddf3>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <StartDefaultTask+0x14cc>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f7fc fa9b 	bl	800028c <__adddf3>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
							  state_time = MOVE_FACTOR;
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <StartDefaultTask+0x14c4>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
							  Object[object_tail_pointer].object_position.y -= wait_time*CONVEYOR_SPEED;
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <StartDefaultTask+0x14a8>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <StartDefaultTask+0x14c0>)
 8003d70:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003d74:	fb03 f301 	mul.w	r3, r3, r1
 8003d78:	4413      	add	r3, r2
 8003d7a:	3328      	adds	r3, #40	; 0x28
 8003d7c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <StartDefaultTask+0x14d0>)
 8003d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d86:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8003d8a:	f7fc fc35 	bl	80005f8 <__aeabi_dmul>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <StartDefaultTask+0x14a8>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461e      	mov	r6, r3
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4620      	mov	r0, r4
 8003da2:	4629      	mov	r1, r5
 8003da4:	f7fc fa70 	bl	8000288 <__aeabi_dsub>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <StartDefaultTask+0x14c0>)
 8003db2:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003db6:	fb03 f306 	mul.w	r3, r3, r6
 8003dba:	4413      	add	r3, r2
 8003dbc:	3328      	adds	r3, #40	; 0x28
 8003dbe:	e9c3 0100 	strd	r0, r1, [r3]
							  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <StartDefaultTask+0x14a8>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <StartDefaultTask+0x14d4>)
 8003dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dce:	4c0e      	ldr	r4, [pc, #56]	; (8003e08 <StartDefaultTask+0x14c0>)
 8003dd0:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003dd4:	fb03 f302 	mul.w	r3, r3, r2
 8003dd8:	4423      	add	r3, r4
 8003dda:	3330      	adds	r3, #48	; 0x30
 8003ddc:	e9c3 0100 	strd	r0, r1, [r3]
							  Object[object_tail_pointer].object_position.y -= (has_moved_distance+implement_distance);
							  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
							  state_time = 0;
						  }
					  }
					  break;
 8003de0:	e236      	b.n	8004250 <StartDefaultTask+0x1908>
 8003de2:	bf00      	nop
 8003de4:	f3af 8000 	nop.w
 8003de8:	a0b5ed8d 	.word	0xa0b5ed8d
 8003dec:	3eb0c6f7 	.word	0x3eb0c6f7
 8003df0:	2000440b 	.word	0x2000440b
 8003df4:	2000440c 	.word	0x2000440c
 8003df8:	20000005 	.word	0x20000005
 8003dfc:	e0001000 	.word	0xe0001000
 8003e00:	2000408c 	.word	0x2000408c
 8003e04:	431bde83 	.word	0x431bde83
 8003e08:	20008f48 	.word	0x20008f48
 8003e0c:	20000028 	.word	0x20000028
 8003e10:	20000010 	.word	0x20000010
 8003e14:	20000030 	.word	0x20000030
 8003e18:	20000058 	.word	0x20000058
 8003e1c:	20000040 	.word	0x20000040
						  }else if(PNP_MOVE_TYPE == DUTY_MODE_INIT_QV){
 8003e20:	4b8f      	ldr	r3, [pc, #572]	; (8004060 <StartDefaultTask+0x1718>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	f040 8213 	bne.w	8004250 <StartDefaultTask+0x1908>
							  double has_moved_distance = CONVEYOR_SPEED*(1e-6*((uint64_t)(GET_MICROS - Object[object_tail_pointer].timer_value)) + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME);
 8003e2a:	4b8e      	ldr	r3, [pc, #568]	; (8004064 <StartDefaultTask+0x171c>)
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	4b8e      	ldr	r3, [pc, #568]	; (8004068 <StartDefaultTask+0x1720>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	498e      	ldr	r1, [pc, #568]	; (800406c <StartDefaultTask+0x1724>)
 8003e34:	fba1 1303 	umull	r1, r3, r1, r3
 8003e38:	0c9b      	lsrs	r3, r3, #18
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	4b8a      	ldr	r3, [pc, #552]	; (8004070 <StartDefaultTask+0x1728>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4c8a      	ldr	r4, [pc, #552]	; (8004074 <StartDefaultTask+0x172c>)
 8003e4c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003e50:	fb03 f302 	mul.w	r3, r3, r2
 8003e54:	4423      	add	r3, r4
 8003e56:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	ebb0 0a02 	subs.w	sl, r0, r2
 8003e62:	eb61 0b03 	sbc.w	fp, r1, r3
 8003e66:	4650      	mov	r0, sl
 8003e68:	4659      	mov	r1, fp
 8003e6a:	f7fc fb8f 	bl	800058c <__aeabi_ul2d>
 8003e6e:	a37a      	add	r3, pc, #488	; (adr r3, 8004058 <StartDefaultTask+0x1710>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc fbc0 	bl	80005f8 <__aeabi_dmul>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4b7d      	ldr	r3, [pc, #500]	; (8004078 <StartDefaultTask+0x1730>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fa01 	bl	800028c <__adddf3>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	4b7a      	ldr	r3, [pc, #488]	; (800407c <StartDefaultTask+0x1734>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc f9f8 	bl	800028c <__adddf3>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4b76      	ldr	r3, [pc, #472]	; (8004080 <StartDefaultTask+0x1738>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc fba5 	bl	80005f8 <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
							  double implement_distance = PNPcalMovDistance(positionCurrent.x, positionCurrent.y, Object[object_tail_pointer].object_position.x, Object[object_tail_pointer].object_position.y-has_moved_distance, MOVE_FACTOR*V_MOVE_MAX/1.5, CONVEYOR_SPEED);
 8003eb6:	4b73      	ldr	r3, [pc, #460]	; (8004084 <StartDefaultTask+0x173c>)
 8003eb8:	ed93 8b08 	vldr	d8, [r3, #32]
 8003ebc:	4b71      	ldr	r3, [pc, #452]	; (8004084 <StartDefaultTask+0x173c>)
 8003ebe:	ed93 9b0a 	vldr	d9, [r3, #40]	; 0x28
 8003ec2:	4b6b      	ldr	r3, [pc, #428]	; (8004070 <StartDefaultTask+0x1728>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4a6a      	ldr	r2, [pc, #424]	; (8004074 <StartDefaultTask+0x172c>)
 8003eca:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003ece:	fb03 f301 	mul.w	r3, r3, r1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3320      	adds	r3, #32
 8003ed6:	ed93 ab00 	vldr	d10, [r3]
 8003eda:	4b65      	ldr	r3, [pc, #404]	; (8004070 <StartDefaultTask+0x1728>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4a64      	ldr	r2, [pc, #400]	; (8004074 <StartDefaultTask+0x172c>)
 8003ee2:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003ee6:	fb03 f301 	mul.w	r3, r3, r1
 8003eea:	4413      	add	r3, r2
 8003eec:	3328      	adds	r3, #40	; 0x28
 8003eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef2:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8003ef6:	f7fc f9c7 	bl	8000288 <__aeabi_dsub>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	ec43 2b1b 	vmov	d11, r2, r3
 8003f02:	4b61      	ldr	r3, [pc, #388]	; (8004088 <StartDefaultTask+0x1740>)
 8003f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	4b5f      	ldr	r3, [pc, #380]	; (800408c <StartDefaultTask+0x1744>)
 8003f0e:	f7fc fb73 	bl	80005f8 <__aeabi_dmul>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <StartDefaultTask+0x1748>)
 8003f20:	f7fc fc94 	bl	800084c <__aeabi_ddiv>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	ec43 2b16 	vmov	d6, r2, r3
 8003f2c:	4b54      	ldr	r3, [pc, #336]	; (8004080 <StartDefaultTask+0x1738>)
 8003f2e:	ed93 7b00 	vldr	d7, [r3]
 8003f32:	eeb0 5a47 	vmov.f32	s10, s14
 8003f36:	eef0 5a67 	vmov.f32	s11, s15
 8003f3a:	eeb0 4a46 	vmov.f32	s8, s12
 8003f3e:	eef0 4a66 	vmov.f32	s9, s13
 8003f42:	eeb0 3a4b 	vmov.f32	s6, s22
 8003f46:	eef0 3a6b 	vmov.f32	s7, s23
 8003f4a:	eeb0 2a4a 	vmov.f32	s4, s20
 8003f4e:	eef0 2a6a 	vmov.f32	s5, s21
 8003f52:	eeb0 1a49 	vmov.f32	s2, s18
 8003f56:	eef0 1a69 	vmov.f32	s3, s19
 8003f5a:	eeb0 0a48 	vmov.f32	s0, s16
 8003f5e:	eef0 0a68 	vmov.f32	s1, s17
 8003f62:	f005 fd5b 	bl	8009a1c <PNPcalMovDistance>
 8003f66:	ed87 0be2 	vstr	d0, [r7, #904]	; 0x388
							  Object[object_tail_pointer].object_position.y -= (has_moved_distance+implement_distance);
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <StartDefaultTask+0x1728>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4a40      	ldr	r2, [pc, #256]	; (8004074 <StartDefaultTask+0x172c>)
 8003f72:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003f76:	fb03 f301 	mul.w	r3, r3, r1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3328      	adds	r3, #40	; 0x28
 8003f7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003f82:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8003f86:	e9d7 01e4 	ldrd	r0, r1, [r7, #912]	; 0x390
 8003f8a:	f7fc f97f 	bl	800028c <__adddf3>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4610      	mov	r0, r2
 8003f94:	4619      	mov	r1, r3
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <StartDefaultTask+0x1728>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	461e      	mov	r6, r3
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7fc f970 	bl	8000288 <__aeabi_dsub>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4a30      	ldr	r2, [pc, #192]	; (8004074 <StartDefaultTask+0x172c>)
 8003fb2:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003fb6:	fb03 f306 	mul.w	r3, r3, r6
 8003fba:	4413      	add	r3, r2
 8003fbc:	3328      	adds	r3, #40	; 0x28
 8003fbe:	e9c3 0100 	strd	r0, r1, [r3]
							  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003fc2:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <StartDefaultTask+0x1728>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b32      	ldr	r3, [pc, #200]	; (8004094 <StartDefaultTask+0x174c>)
 8003fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fce:	4c29      	ldr	r4, [pc, #164]	; (8004074 <StartDefaultTask+0x172c>)
 8003fd0:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003fd4:	fb03 f302 	mul.w	r3, r3, r2
 8003fd8:	4423      	add	r3, r4
 8003fda:	3330      	adds	r3, #48	; 0x30
 8003fdc:	e9c3 0100 	strd	r0, r1, [r3]
							  state_time = 0;
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
					  break;
 8003fec:	e130      	b.n	8004250 <StartDefaultTask+0x1908>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <StartDefaultTask+0x1728>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b28      	ldr	r3, [pc, #160]	; (8004098 <StartDefaultTask+0x1750>)
 8003ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ffa:	4c1e      	ldr	r4, [pc, #120]	; (8004074 <StartDefaultTask+0x172c>)
 8003ffc:	f44f 7398 	mov.w	r3, #304	; 0x130
 8004000:	fb03 f302 	mul.w	r3, r3, r2
 8004004:	4423      	add	r3, r4
 8004006:	3330      	adds	r3, #48	; 0x30
 8004008:	e9c3 0100 	strd	r0, r1, [r3]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <StartDefaultTask+0x1730>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
					  }
					  break;
 8004016:	e11c      	b.n	8004252 <StartDefaultTask+0x190a>
					  case SCARA_ATTACH:{
//						  state_time = ATTACH_TIME;
						  state_time = 0;
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
						  scaraSetOutput(1);
 8004024:	2001      	movs	r0, #1
 8004026:	f005 fe1f 	bl	8009c68 <scaraSetOutput>
					  }
					  break;
 800402a:	e112      	b.n	8004252 <StartDefaultTask+0x190a>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <StartDefaultTask+0x1728>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <StartDefaultTask+0x174c>)
 8004034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004038:	4c0e      	ldr	r4, [pc, #56]	; (8004074 <StartDefaultTask+0x172c>)
 800403a:	f44f 7398 	mov.w	r3, #304	; 0x130
 800403e:	fb03 f302 	mul.w	r3, r3, r2
 8004042:	4423      	add	r3, r4
 8004044:	3330      	adds	r3, #48	; 0x30
 8004046:	e9c3 0100 	strd	r0, r1, [r3]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <StartDefaultTask+0x1754>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
					  }
					  break;
 8004054:	e0fd      	b.n	8004252 <StartDefaultTask+0x190a>
 8004056:	bf00      	nop
 8004058:	a0b5ed8d 	.word	0xa0b5ed8d
 800405c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004060:	20000005 	.word	0x20000005
 8004064:	e0001000 	.word	0xe0001000
 8004068:	2000408c 	.word	0x2000408c
 800406c:	431bde83 	.word	0x431bde83
 8004070:	2000440b 	.word	0x2000440b
 8004074:	20008f48 	.word	0x20008f48
 8004078:	20000010 	.word	0x20000010
 800407c:	20000030 	.word	0x20000030
 8004080:	20000058 	.word	0x20000058
 8004084:	20011420 	.word	0x20011420
 8004088:	20000028 	.word	0x20000028
 800408c:	40877000 	.word	0x40877000
 8004090:	3ff80000 	.word	0x3ff80000
 8004094:	20000040 	.word	0x20000040
 8004098:	20000048 	.word	0x20000048
 800409c:	20000018 	.word	0x20000018
					  case SCARA_MOVE_TO_SLOT :{
						  ObjectType current_type = Object[object_tail_pointer].object_type;
 80040a0:	4ba6      	ldr	r3, [pc, #664]	; (800433c <StartDefaultTask+0x19f4>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4aa6      	ldr	r2, [pc, #664]	; (8004340 <StartDefaultTask+0x19f8>)
 80040a8:	f44f 7398 	mov.w	r3, #304	; 0x130
 80040ac:	fb03 f301 	mul.w	r3, r3, r1
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[current_type].posx + Slot_Placement[current_type]*placement_spacing;
 80040bc:	f897 239f 	ldrb.w	r2, [r7, #927]	; 0x39f
 80040c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	440b      	add	r3, r1
 80040ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80040d2:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 80040d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc fa21 	bl	8000524 <__aeabi_i2d>
 80040e2:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 80040e6:	f7fc fa87 	bl	80005f8 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4b92      	ldr	r3, [pc, #584]	; (800433c <StartDefaultTask+0x19f4>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	461e      	mov	r6, r3
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4620      	mov	r0, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	f7fc f8c4 	bl	800028c <__adddf3>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	4a8c      	ldr	r2, [pc, #560]	; (8004340 <StartDefaultTask+0x19f8>)
 800410e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8004112:	fb03 f306 	mul.w	r3, r3, r6
 8004116:	4413      	add	r3, r2
 8004118:	3320      	adds	r3, #32
 800411a:	e9c3 0100 	strd	r0, r1, [r3]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[current_type].posy;
 800411e:	f897 239f 	ldrb.w	r2, [r7, #927]	; 0x39f
 8004122:	4b86      	ldr	r3, [pc, #536]	; (800433c <StartDefaultTask+0x19f4>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461c      	mov	r4, r3
 8004128:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	3308      	adds	r3, #8
 8004138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800413c:	4a80      	ldr	r2, [pc, #512]	; (8004340 <StartDefaultTask+0x19f8>)
 800413e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8004142:	fb03 f304 	mul.w	r3, r3, r4
 8004146:	4413      	add	r3, r2
 8004148:	3328      	adds	r3, #40	; 0x28
 800414a:	e9c3 0100 	strd	r0, r1, [r3]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[current_type].roll;
 800414e:	f897 239f 	ldrb.w	r2, [r7, #927]	; 0x39f
 8004152:	4b7a      	ldr	r3, [pc, #488]	; (800433c <StartDefaultTask+0x19f4>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	461c      	mov	r4, r3
 8004158:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	3310      	adds	r3, #16
 8004168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800416c:	4a74      	ldr	r2, [pc, #464]	; (8004340 <StartDefaultTask+0x19f8>)
 800416e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8004172:	fb03 f304 	mul.w	r3, r3, r4
 8004176:	4413      	add	r3, r2
 8004178:	3338      	adds	r3, #56	; 0x38
 800417a:	e9c3 0100 	strd	r0, r1, [r3]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800417e:	4b6f      	ldr	r3, [pc, #444]	; (800433c <StartDefaultTask+0x19f4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	4b6f      	ldr	r3, [pc, #444]	; (8004344 <StartDefaultTask+0x19fc>)
 8004186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800418a:	4c6d      	ldr	r4, [pc, #436]	; (8004340 <StartDefaultTask+0x19f8>)
 800418c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8004190:	fb03 f302 	mul.w	r3, r3, r2
 8004194:	4423      	add	r3, r4
 8004196:	3330      	adds	r3, #48	; 0x30
 8004198:	e9c3 0100 	strd	r0, r1, [r3]

						  if(PNP_MOVE_TYPE == DUTY_MODE_INIT_QT){
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <StartDefaultTask+0x1a00>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d105      	bne.n	80041b0 <StartDefaultTask+0x1868>
							  state_time = MOVE_FACTOR;
 80041a4:	4b69      	ldr	r3, [pc, #420]	; (800434c <StartDefaultTask+0x1a04>)
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 80041ae:	e009      	b.n	80041c4 <StartDefaultTask+0x187c>
						  }else if(PNP_MOVE_TYPE == DUTY_MODE_INIT_QV){
 80041b0:	4b65      	ldr	r3, [pc, #404]	; (8004348 <StartDefaultTask+0x1a00>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d105      	bne.n	80041c4 <StartDefaultTask+0x187c>
							  state_time = 0;
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
						  }
						  Slot_Placement[current_type] = (Slot_Placement[current_type] + 1)%2;
 80041c4:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 80041c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	3301      	adds	r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	bfb8      	it	lt
 80041d8:	425b      	neglt	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 80041e0:	b2d1      	uxtb	r1, r2
 80041e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041e6:	54d1      	strb	r1, [r2, r3]
					  }
					  break;
 80041e8:	e033      	b.n	8004252 <StartDefaultTask+0x190a>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 80041ea:	4b54      	ldr	r3, [pc, #336]	; (800433c <StartDefaultTask+0x19f4>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b57      	ldr	r3, [pc, #348]	; (8004350 <StartDefaultTask+0x1a08>)
 80041f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041f6:	4c52      	ldr	r4, [pc, #328]	; (8004340 <StartDefaultTask+0x19f8>)
 80041f8:	f44f 7398 	mov.w	r3, #304	; 0x130
 80041fc:	fb03 f302 	mul.w	r3, r3, r2
 8004200:	4423      	add	r3, r4
 8004202:	3330      	adds	r3, #48	; 0x30
 8004204:	e9c3 0100 	strd	r0, r1, [r3]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8004208:	4b52      	ldr	r3, [pc, #328]	; (8004354 <StartDefaultTask+0x1a0c>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
					  }
					  break;
 8004212:	e01e      	b.n	8004252 <StartDefaultTask+0x190a>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8004214:	4b50      	ldr	r3, [pc, #320]	; (8004358 <StartDefaultTask+0x1a10>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
						  scaraSetOutput(0);
 800421e:	2000      	movs	r0, #0
 8004220:	f005 fd22 	bl	8009c68 <scaraSetOutput>
					  }
					  break;
 8004224:	e015      	b.n	8004252 <StartDefaultTask+0x190a>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <StartDefaultTask+0x1a14>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8004230:	4b42      	ldr	r3, [pc, #264]	; (800433c <StartDefaultTask+0x19f4>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b43      	ldr	r3, [pc, #268]	; (8004344 <StartDefaultTask+0x19fc>)
 8004238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800423c:	4c40      	ldr	r4, [pc, #256]	; (8004340 <StartDefaultTask+0x19f8>)
 800423e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8004242:	fb03 f302 	mul.w	r3, r3, r2
 8004246:	4423      	add	r3, r4
 8004248:	3330      	adds	r3, #48	; 0x30
 800424a:	e9c3 0100 	strd	r0, r1, [r3]
					  }
					  break;
 800424e:	e000      	b.n	8004252 <StartDefaultTask+0x190a>
					  break;
 8004250:	bf00      	nop
				  }

				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8004252:	4b3a      	ldr	r3, [pc, #232]	; (800433c <StartDefaultTask+0x19f4>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	f44f 7398 	mov.w	r3, #304	; 0x130
 800425c:	fb03 f302 	mul.w	r3, r3, r2
 8004260:	4a37      	ldr	r2, [pc, #220]	; (8004340 <StartDefaultTask+0x19f8>)
 8004262:	1899      	adds	r1, r3, r2
 8004264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004268:	3328      	adds	r3, #40	; 0x28
 800426a:	2290      	movs	r2, #144	; 0x90
 800426c:	4618      	mov	r0, r3
 800426e:	f011 f91f 	bl	80154b0 <memcpy>
				  duty_cmd.time_total = state_time;
 8004272:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8004276:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800427a:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  if(PNP_MOVE_TYPE == DUTY_MODE_INIT_QT){
 800427e:	4b32      	ldr	r3, [pc, #200]	; (8004348 <StartDefaultTask+0x1a00>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d108      	bne.n	8004298 <StartDefaultTask+0x1950>
					  duty_cmd.v_factor = 0;
 8004286:	f507 7102 	add.w	r1, r7, #520	; 0x208
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 8004296:	e00a      	b.n	80042ae <StartDefaultTask+0x1966>
				  }else if(PNP_MOVE_TYPE == DUTY_MODE_INIT_QV){
 8004298:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <StartDefaultTask+0x1a00>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d106      	bne.n	80042ae <StartDefaultTask+0x1966>
					  duty_cmd.v_factor = MOVE_FACTOR;
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <StartDefaultTask+0x1a04>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80042aa:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
				  }
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 80042ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b2:	2200      	movs	r2, #0
 80042b4:	731a      	strb	r2, [r3, #12]

				  SCARA_StatusTypeDef status1;
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 80042b6:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d003      	beq.n	80042c6 <StartDefaultTask+0x197e>
 80042be:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d103      	bne.n	80042ce <StartDefaultTask+0x1986>
					  status1 = SCARA_STATUS_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 33cb 	strb.w	r3, [r7, #971]	; 0x3cb
 80042cc:	e06b      	b.n	80043a6 <StartDefaultTask+0x1a5e>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80042ce:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d00b      	beq.n	80042ee <StartDefaultTask+0x19a6>
 80042d6:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d007      	beq.n	80042ee <StartDefaultTask+0x19a6>
 80042de:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d003      	beq.n	80042ee <StartDefaultTask+0x19a6>
 80042e6:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 80042ea:	2b07      	cmp	r3, #7
 80042ec:	d110      	bne.n	8004310 <StartDefaultTask+0x19c8>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 80042ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f2:	2200      	movs	r2, #0
 80042f4:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 80042f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042fa:	2200      	movs	r2, #0
 80042fc:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80042fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004302:	2202      	movs	r2, #2
 8004304:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 8004306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430a:	2203      	movs	r2, #3
 800430c:	745a      	strb	r2, [r3, #17]
 800430e:	e039      	b.n	8004384 <StartDefaultTask+0x1a3c>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8004310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004314:	2201      	movs	r2, #1
 8004316:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <StartDefaultTask+0x1a18>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d121      	bne.n	8004364 <StartDefaultTask+0x1a1c>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 8004320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004324:	2200      	movs	r2, #0
 8004326:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432c:	2200      	movs	r2, #0
 800432e:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 8004330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004334:	2201      	movs	r2, #1
 8004336:	741a      	strb	r2, [r3, #16]
 8004338:	e024      	b.n	8004384 <StartDefaultTask+0x1a3c>
 800433a:	bf00      	nop
 800433c:	2000440b 	.word	0x2000440b
 8004340:	20008f48 	.word	0x20008f48
 8004344:	20000040 	.word	0x20000040
 8004348:	20000005 	.word	0x20000005
 800434c:	20000028 	.word	0x20000028
 8004350:	20000050 	.word	0x20000050
 8004354:	20000008 	.word	0x20000008
 8004358:	20000038 	.word	0x20000038
 800435c:	20000020 	.word	0x20000020
 8004360:	20000064 	.word	0x20000064
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 8004364:	4bb8      	ldr	r3, [pc, #736]	; (8004648 <StartDefaultTask+0x1d00>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d10b      	bne.n	8004384 <StartDefaultTask+0x1a3c>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 800436c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004370:	2201      	movs	r2, #1
 8004372:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 8004374:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004378:	2201      	movs	r2, #1
 800437a:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800437c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004380:	2200      	movs	r2, #0
 8004382:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 8004384:	f507 7402 	add.w	r4, r7, #520	; 0x208
 8004388:	4668      	mov	r0, sp
 800438a:	f104 0110 	add.w	r1, r4, #16
 800438e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004392:	461a      	mov	r2, r3
 8004394:	f011 f88c 	bl	80154b0 <memcpy>
 8004398:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800439c:	f002 fba0 	bl	8006ae0 <scaraInitDuty>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 33cb 	strb.w	r3, [r7, #971]	; 0x3cb
//						  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
//						  total_respond_length += respond_lenght;
//						  break;
//					  }
				  }
				  if ( SCARA_STATUS_OK == status1) {
 80043a6:	f897 33cb 	ldrb.w	r3, [r7, #971]	; 0x3cb
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <StartDefaultTask+0x1a7a>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80043ae:	2302      	movs	r3, #2
 80043b0:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				  	run_time = 0;
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 80043c0:	e031      	b.n	8004426 <StartDefaultTask+0x1ade>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80043c2:	4ba2      	ldr	r3, [pc, #648]	; (800464c <StartDefaultTask+0x1d04>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	425a      	negs	r2, r3
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	f002 0207 	and.w	r2, r2, #7
 80043d2:	bf58      	it	pl
 80043d4:	4253      	negpl	r3, r2
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b9c      	ldr	r3, [pc, #624]	; (800464c <StartDefaultTask+0x1d04>)
 80043da:	701a      	strb	r2, [r3, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 33df 	strb.w	r3, [r7, #991]	; 0x3df
					detail_array[0] = status1;
 80043e2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80043e6:	f897 23cb 	ldrb.w	r2, [r7, #971]	; 0x3cb
 80043ea:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80043ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f0:	6899      	ldr	r1, [r3, #8]
 80043f2:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80043f6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80043fa:	4413      	add	r3, r2
 80043fc:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2301      	movs	r3, #1
 8004404:	2007      	movs	r0, #7
 8004406:	f7fe f8f3 	bl	80025f0 <commandRespond>
 800440a:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					total_respond_length += respond_lenght;
 800440e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8004412:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8004416:	4413      	add	r3, r2
 8004418:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
//					LOG_REPORT("INIT FAIL", __LINE__);
					break;
 800441c:	e09a      	b.n	8004554 <StartDefaultTask+0x1c0c>
				  }
			  }else{
				  method_state = SCARA_METHOD_IDLE;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
				  break;
 8004424:	e096      	b.n	8004554 <StartDefaultTask+0x1c0c>
			  }
		  }


		  case SCARA_DUTY_STATE_FLOW:{
			  method_state = SCARA_METHOD_ACTIVE;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800442c:	a382      	add	r3, pc, #520	; (adr r3, 8004638 <StartDefaultTask+0x1cf0>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 8004436:	f7fb ff29 	bl	800028c <__adddf3>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8004442:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 8004446:	f005 fc91 	bl	8009d6c <scaraIsFinish>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d023      	beq.n	8004498 <StartDefaultTask+0x1b50>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004450:	2304      	movs	r3, #4
 8004452:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004456:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 800445a:	2b07      	cmp	r3, #7
 800445c:	d110      	bne.n	8004480 <StartDefaultTask+0x1b38>
					operation_state = SCARA_MOVE_TO_TARGET;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 33df 	strb.w	r3, [r7, #991]	; 0x3df
					object_tail_pointer = (object_tail_pointer+1)%8;
 8004464:	4b79      	ldr	r3, [pc, #484]	; (800464c <StartDefaultTask+0x1d04>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	425a      	negs	r2, r3
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	f002 0207 	and.w	r2, r2, #7
 8004474:	bf58      	it	pl
 8004476:	4253      	negpl	r3, r2
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4b74      	ldr	r3, [pc, #464]	; (800464c <StartDefaultTask+0x1d04>)
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e004      	b.n	800448a <StartDefaultTask+0x1b42>
				}else{
					operation_state += 1; //next state
 8004480:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 8004484:	3301      	adds	r3, #1
 8004486:	f887 33df 	strb.w	r3, [r7, #991]	; 0x3df
				}
				lowlayer_readTruePosition(&positionNext);
 800448a:	4871      	ldr	r0, [pc, #452]	; (8004650 <StartDefaultTask+0x1d08>)
 800448c:	f001 fe00 	bl	8006090 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8004490:	486f      	ldr	r0, [pc, #444]	; (8004650 <StartDefaultTask+0x1d08>)
 8004492:	f000 fec1 	bl	8005218 <kinematicForward>
			  	  respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
			  	  total_respond_length += respond_lenght;
			    }
			    }
		  }
		  break;
 8004496:	e05c      	b.n	8004552 <StartDefaultTask+0x1c0a>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8004498:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 800449c:	2b02      	cmp	r3, #2
 800449e:	d058      	beq.n	8004552 <StartDefaultTask+0x1c0a>
 80044a0:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d054      	beq.n	8004552 <StartDefaultTask+0x1c0a>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80044a8:	4c6a      	ldr	r4, [pc, #424]	; (8004654 <StartDefaultTask+0x1d0c>)
 80044aa:	4668      	mov	r0, sp
 80044ac:	f104 0108 	add.w	r1, r4, #8
 80044b0:	2388      	movs	r3, #136	; 0x88
 80044b2:	461a      	mov	r2, r3
 80044b4:	f010 fffc 	bl	80154b0 <memcpy>
 80044b8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80044bc:	4864      	ldr	r0, [pc, #400]	; (8004650 <StartDefaultTask+0x1d08>)
 80044be:	ed97 0bf8 	vldr	d0, [r7, #992]	; 0x3e0
 80044c2:	f004 fd9d 	bl	8009000 <scaraFlowDuty>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
			    if ( SCARA_STATUS_OK == status) {
 80044cc:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d113      	bne.n	80044fc <StartDefaultTask+0x1bb4>
			  	  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80044d4:	4c5f      	ldr	r4, [pc, #380]	; (8004654 <StartDefaultTask+0x1d0c>)
 80044d6:	4b5e      	ldr	r3, [pc, #376]	; (8004650 <StartDefaultTask+0x1d08>)
 80044d8:	a820      	add	r0, sp, #128	; 0x80
 80044da:	4619      	mov	r1, r3
 80044dc:	2390      	movs	r3, #144	; 0x90
 80044de:	461a      	mov	r2, r3
 80044e0:	f010 ffe6 	bl	80154b0 <memcpy>
 80044e4:	4668      	mov	r0, sp
 80044e6:	f104 0110 	add.w	r1, r4, #16
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	461a      	mov	r2, r3
 80044ee:	f010 ffdf 	bl	80154b0 <memcpy>
 80044f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044f6:	f001 ff5b 	bl	80063b0 <lowlayer_computeAndWritePulse>
		  break;
 80044fa:	e02a      	b.n	8004552 <StartDefaultTask+0x1c0a>
			  	  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
			  	  detail_array[0] = status;
 8004502:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004506:	f897 237f 	ldrb.w	r2, [r7, #895]	; 0x37f
 800450a:	701a      	strb	r2, [r3, #0]
			  	  respond_lenght = commandRespond(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800450c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004510:	6899      	ldr	r1, [r3, #8]
 8004512:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8004516:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800451a:	4413      	add	r3, r2
 800451c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2301      	movs	r3, #1
 8004524:	2007      	movs	r0, #7
 8004526:	f7fe f863 	bl	80025f0 <commandRespond>
 800452a:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
			  	  total_respond_length += respond_lenght;
 800452e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8004532:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8004536:	4413      	add	r3, r2
 8004538:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
		  break;
 800453c:	e009      	b.n	8004552 <StartDefaultTask+0x1c0a>

		  case SCARA_DUTY_STATE_FINISH:
			  lowlayer_readTruePosition(&positionNext);
 800453e:	4844      	ldr	r0, [pc, #272]	; (8004650 <StartDefaultTask+0x1d08>)
 8004540:	f001 fda6 	bl	8006090 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8004544:	4842      	ldr	r0, [pc, #264]	; (8004650 <StartDefaultTask+0x1d08>)
 8004546:	f000 fe67 	bl	8005218 <kinematicForward>
			  current_duty_state = SCARA_DUTY_STATE_INIT;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
			  //error
			  //free(Object);
		  break;
 8004550:	e000      	b.n	8004554 <StartDefaultTask+0x1c0c>
		  break;
 8004552:	bf00      	nop
		  }
	  }
	  break;
 8004554:	e001      	b.n	800455a <StartDefaultTask+0x1c12>
	  break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <StartDefaultTask+0x1c14>
	  break;
 800455a:	bf00      	nop
	  default:
	  {

	  }
	  }
	  if(continuous_update == 1 && update_pos_counter++ >= update_pos_cycle){
 800455c:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <StartDefaultTask+0x1d10>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d147      	bne.n	80045f4 <StartDefaultTask+0x1cac>
 8004564:	f897 33fe 	ldrb.w	r3, [r7, #1022]	; 0x3fe
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	f887 23fe 	strb.w	r2, [r7, #1022]	; 0x3fe
 800456e:	4a3b      	ldr	r2, [pc, #236]	; (800465c <StartDefaultTask+0x1d14>)
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	4293      	cmp	r3, r2
 8004574:	d33e      	bcc.n	80045f4 <StartDefaultTask+0x1cac>
		  update_pos_counter = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe
		  lowlayer_readTruePosition(&update_position);
 800457c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fd85 	bl	8006090 <lowlayer_readTruePosition>
//		  kinematicForward(&update_position);
		  if(testing_value == 1){
 8004586:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
 800458a:	2b01      	cmp	r3, #1
 800458c:	d109      	bne.n	80045a2 <StartDefaultTask+0x1c5a>
			  testing_value = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
			  update_position.D3 = -2000;
 8004594:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004598:	a329      	add	r3, pc, #164	; (adr r3, 8004640 <StartDefaultTask+0x1cf8>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		  }
		  respond_lenght = scaraPosition_packaging(detail_array, update_position);
 80045a2:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80045a6:	f507 75b2 	add.w	r5, r7, #356	; 0x164
 80045aa:	4668      	mov	r0, sp
 80045ac:	f104 0108 	add.w	r1, r4, #8
 80045b0:	2388      	movs	r3, #136	; 0x88
 80045b2:	461a      	mov	r2, r3
 80045b4:	f010 ff7c 	bl	80154b0 <memcpy>
 80045b8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80045bc:	4628      	mov	r0, r5
 80045be:	f005 fbef 	bl	8009da0 <scaraPosition_packaging>
 80045c2:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
		  respond_lenght = commandRespond(RPD_POSITION, CMD_READ_POSITION, detail_array, respond_lenght, &respond[total_respond_length]);
 80045c6:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80045ca:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80045ce:	4413      	add	r3, r2
 80045d0:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80045da:	2109      	movs	r1, #9
 80045dc:	2002      	movs	r0, #2
 80045de:	f7fe f807 	bl	80025f0 <commandRespond>
 80045e2:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
		  total_respond_length += respond_lenght;
 80045e6:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80045ea:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80045ee:	4413      	add	r3, r2
 80045f0:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
//	  if(testing_value == 1){
//		  testing_value = 0;
//		  LOG_REPORT1("info", value1, value2);
//	  }
	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 80045f4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	dd08      	ble.n	800460e <StartDefaultTask+0x1cc6>
		CDC_Transmit_FS(respond, total_respond_length);
 80045fc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8004600:	b29a      	uxth	r2, r3
 8004602:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f010 fad3 	bl	8014bb4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 800460e:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 8004612:	4618      	mov	r0, r3
 8004614:	f005 fb5a 	bl	8009ccc <scaraSetMethod>
	  scaraSetMode(current_mode);
 8004618:	f897 33f5 	ldrb.w	r3, [r7, #1013]	; 0x3f5
 800461c:	4618      	mov	r0, r3
 800461e:	f005 fb45 	bl	8009cac <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8004622:	f897 33f4 	ldrb.w	r3, [r7, #1012]	; 0x3f4
 8004626:	4618      	mov	r0, r3
 8004628:	f005 fb30 	bl	8009c8c <scaraSetDutyState>

    osDelay(1);
 800462c:	2001      	movs	r0, #1
 800462e:	f00d fb9c 	bl	8011d6a <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8004632:	f7fe ba14 	b.w	8002a5e <StartDefaultTask+0x116>
 8004636:	bf00      	nop
 8004638:	40000000 	.word	0x40000000
 800463c:	3f847ae1 	.word	0x3f847ae1
 8004640:	00000000 	.word	0x00000000
 8004644:	c09f4000 	.word	0xc09f4000
 8004648:	20000064 	.word	0x20000064
 800464c:	2000440b 	.word	0x2000440b
 8004650:	200114b0 	.word	0x200114b0
 8004654:	20011420 	.word	0x20011420
 8004658:	2000440a 	.word	0x2000440a
 800465c:	20000004 	.word	0x20000004

08004660 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8004660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004662:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8004666:	af58      	add	r7, sp, #352	; 0x160
 8004668:	1d3b      	adds	r3, r7, #4
 800466a:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 800466c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004670:	2201      	movs	r2, #1
 8004672:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004674:	4964      	ldr	r1, [pc, #400]	; (8004808 <Start_USB_RX_Task+0x1a8>)
 8004676:	4865      	ldr	r0, [pc, #404]	; (800480c <Start_USB_RX_Task+0x1ac>)
 8004678:	f001 fa73 	bl	8005b62 <ringBuff_DistanceOf>
 800467c:	f8c7 03a8 	str.w	r0, [r7, #936]	; 0x3a8
		  if (distance != -1) {
 8004680:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d0f4      	beq.n	8004674 <Start_USB_RX_Task+0x14>
 800468a:	466b      	mov	r3, sp
 800468c:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 800468e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8004692:	1c5c      	adds	r4, r3, #1
 8004694:	1e63      	subs	r3, r4, #1
 8004696:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800469a:	4623      	mov	r3, r4
 800469c:	4618      	mov	r0, r3
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80046b0:	00c2      	lsls	r2, r0, #3
 80046b2:	4623      	mov	r3, r4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f04f 0100 	mov.w	r1, #0
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	00cb      	lsls	r3, r1, #3
 80046c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80046c8:	00c2      	lsls	r2, r0, #3
 80046ca:	4623      	mov	r3, r4
 80046cc:	3307      	adds	r3, #7
 80046ce:	08db      	lsrs	r3, r3, #3
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	ebad 0d03 	sub.w	sp, sp, r3
 80046d6:	ab58      	add	r3, sp, #352	; 0x160
 80046d8:	3300      	adds	r3, #0
 80046da:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80046de:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 80046e2:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80046e6:	3301      	adds	r3, #1
 80046e8:	461a      	mov	r2, r3
 80046ea:	4848      	ldr	r0, [pc, #288]	; (800480c <Start_USB_RX_Task+0x1ac>)
 80046ec:	f001 fa18 	bl	8005b20 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80046f0:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 80046f4:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80046f8:	3301      	adds	r3, #1
 80046fa:	f107 020c 	add.w	r2, r7, #12
 80046fe:	4619      	mov	r1, r3
 8004700:	f7fe f824 	bl	800274c <unPackPayload>
 8004704:	f8c7 039c 	str.w	r0, [r7, #924]	; 0x39c

			  if( -1 == ret) {
 8004708:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d077      	beq.n	8004802 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8004712:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004716:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 800471a:	f107 000c 	add.w	r0, r7, #12
 800471e:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8004722:	f7fc fc65 	bl	8000ff0 <packetRead>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
				  memset(detail, 0, sizeof(detail));
 800472c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004730:	2287      	movs	r2, #135	; 0x87
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f010 fee3 	bl	8015500 <memset>
				  detail_length = 0;
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8004742:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004746:	f897 539b 	ldrb.w	r5, [r7, #923]	; 0x39b
 800474a:	f107 0308 	add.w	r3, r7, #8
 800474e:	9357      	str	r3, [sp, #348]	; 0x15c
 8004750:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004754:	9356      	str	r3, [sp, #344]	; 0x158
 8004756:	4668      	mov	r0, sp
 8004758:	f104 0308 	add.w	r3, r4, #8
 800475c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004760:	4619      	mov	r1, r3
 8004762:	f010 fea5 	bl	80154b0 <memcpy>
 8004766:	e894 000c 	ldmia.w	r4, {r2, r3}
 800476a:	4628      	mov	r0, r5
 800476c:	f7fd fd1e 	bl	80021ac <commandReply>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 339a 	strb.w	r3, [r7, #922]	; 0x39a
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8004776:	f897 339a 	ldrb.w	r3, [r7, #922]	; 0x39a
 800477a:	2b09      	cmp	r3, #9
 800477c:	d123      	bne.n	80047c6 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
					  // Wait allocate
					  while (dataMail == NULL) {
 8004784:	e008      	b.n	8004798 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <Start_USB_RX_Task+0x1b0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f04f 31ff 	mov.w	r1, #4294967295
 800478e:	4618      	mov	r0, r3
 8004790:	f00d fcfc 	bl	801218c <osMailAlloc>
 8004794:	f8c7 03ac 	str.w	r0, [r7, #940]	; 0x3ac
					  while (dataMail == NULL) {
 8004798:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f2      	beq.n	8004786 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80047a0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80047a4:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80047a8:	4619      	mov	r1, r3
 80047aa:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 80047ae:	f010 fe7f 	bl	80154b0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <Start_USB_RX_Task+0x1b0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 80047ba:	4618      	mov	r0, r3
 80047bc:	f00d fcfc 	bl	80121b8 <osMailPut>
 80047c0:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
 80047c4:	e01d      	b.n	8004802 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 80047c6:	f897 339a 	ldrb.w	r3, [r7, #922]	; 0x39a
 80047ca:	2b0a      	cmp	r3, #10
 80047cc:	d019      	beq.n	8004802 <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond(rpd_type, cmd_type,
 80047ce:	f897 139b 	ldrb.w	r1, [r7, #923]	; 0x39b
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	681c      	ldr	r4, [r3, #0]
 80047d8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80047dc:	f897 039a 	ldrb.w	r0, [r7, #922]	; 0x39a
 80047e0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	4623      	mov	r3, r4
 80047e8:	f7fd ff02 	bl	80025f0 <commandRespond>
 80047ec:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
							  	  	  	  detail, detail_length,
										  respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 80047f0:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f010 f9d9 	bl	8014bb4 <CDC_Transmit_FS>
 8004802:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004804:	e736      	b.n	8004674 <Start_USB_RX_Task+0x14>
 8004806:	bf00      	nop
 8004808:	0801bd20 	.word	0x0801bd20
 800480c:	20000068 	.word	0x20000068
 8004810:	200107fc 	.word	0x200107fc

08004814 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b292      	uxth	r2, r2
 8004824:	801a      	strh	r2, [r3, #0]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	611a      	str	r2, [r3, #16]
 8004860:	615a      	str	r2, [r3, #20]
 8004862:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8004864:	4b27      	ldr	r3, [pc, #156]	; (8004904 <MX_FSMC_Init+0xb8>)
 8004866:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800486a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <MX_FSMC_Init+0xb8>)
 800486e:	4a26      	ldr	r2, [pc, #152]	; (8004908 <MX_FSMC_Init+0xbc>)
 8004870:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <MX_FSMC_Init+0xb8>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004878:	4b22      	ldr	r3, [pc, #136]	; (8004904 <MX_FSMC_Init+0xb8>)
 800487a:	2202      	movs	r2, #2
 800487c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <MX_FSMC_Init+0xb8>)
 8004880:	2208      	movs	r2, #8
 8004882:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004884:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <MX_FSMC_Init+0xb8>)
 8004886:	2210      	movs	r2, #16
 8004888:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800488a:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <MX_FSMC_Init+0xb8>)
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <MX_FSMC_Init+0xb8>)
 8004892:	2200      	movs	r2, #0
 8004894:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <MX_FSMC_Init+0xb8>)
 8004898:	2200      	movs	r2, #0
 800489a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <MX_FSMC_Init+0xb8>)
 800489e:	2200      	movs	r2, #0
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <MX_FSMC_Init+0xb8>)
 80048a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <MX_FSMC_Init+0xb8>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80048b0:	4b14      	ldr	r3, [pc, #80]	; (8004904 <MX_FSMC_Init+0xb8>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80048b6:	4b13      	ldr	r3, [pc, #76]	; (8004904 <MX_FSMC_Init+0xb8>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80048bc:	4b11      	ldr	r3, [pc, #68]	; (8004904 <MX_FSMC_Init+0xb8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <MX_FSMC_Init+0xb8>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80048c8:	230f      	movs	r3, #15
 80048ca:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80048cc:	230f      	movs	r3, #15
 80048ce:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80048d0:	23ff      	movs	r3, #255	; 0xff
 80048d2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80048d4:	230f      	movs	r3, #15
 80048d6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80048d8:	2310      	movs	r3, #16
 80048da:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80048dc:	2311      	movs	r3, #17
 80048de:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	2200      	movs	r2, #0
 80048e8:	4619      	mov	r1, r3
 80048ea:	4806      	ldr	r0, [pc, #24]	; (8004904 <MX_FSMC_Init+0xb8>)
 80048ec:	f006 fffe 	bl	800b8ec <HAL_NOR_Init>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80048f6:	f001 f859 	bl	80059ac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80048fa:	bf00      	nop
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20010808 	.word	0x20010808
 8004908:	a0000104 	.word	0xa0000104

0800490c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004920:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_FSMC_MspInit+0xa8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d140      	bne.n	80049aa <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004928:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_FSMC_MspInit+0xa8>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_FSMC_MspInit+0xac>)
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_FSMC_MspInit+0xac>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6393      	str	r3, [r2, #56]	; 0x38
 800493e:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <HAL_FSMC_MspInit+0xac>)
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800494a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800494e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	2302      	movs	r3, #2
 8004952:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004958:	2303      	movs	r3, #3
 800495a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800495c:	230c      	movs	r3, #12
 800495e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4815      	ldr	r0, [pc, #84]	; (80049bc <HAL_FSMC_MspInit+0xb0>)
 8004966:	f006 fe0b 	bl	800b580 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800496a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800496e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004970:	2302      	movs	r3, #2
 8004972:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004978:	2303      	movs	r3, #3
 800497a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800497c:	230c      	movs	r3, #12
 800497e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	4619      	mov	r1, r3
 8004984:	480e      	ldr	r0, [pc, #56]	; (80049c0 <HAL_FSMC_MspInit+0xb4>)
 8004986:	f006 fdfb 	bl	800b580 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498e:	2302      	movs	r3, #2
 8004990:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004996:	2303      	movs	r3, #3
 8004998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800499a:	230c      	movs	r3, #12
 800499c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800499e:	1d3b      	adds	r3, r7, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4808      	ldr	r0, [pc, #32]	; (80049c4 <HAL_FSMC_MspInit+0xb8>)
 80049a4:	f006 fdec 	bl	800b580 <HAL_GPIO_Init>
 80049a8:	e000      	b.n	80049ac <HAL_FSMC_MspInit+0xa0>
    return;
 80049aa:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20004864 	.word	0x20004864
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40020c00 	.word	0x40020c00
 80049c4:	40020400 	.word	0x40020400

080049c8 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80049d0:	f7ff ff9c 	bl	800490c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	0000      	movs	r0, r0
	...

080049e0 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;
extern SCARA_Gcode_Cor_TypeDef			Gcode_Cor[1000];
void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, int32_t run_point)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
//		bezier_y_coeffs[1] = ((double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y)*2.0*bezier_wc;
//		bezier_y_coeffs[2] = duty_cmd->target_point.y;
//	}else{
//
//	}
	duty_cmd->target_point.x = (double)Gcode_Cor[run_point].X * DATA_INVERSE_SCALE + offset_x;
 80049ea:	499d      	ldr	r1, [pc, #628]	; (8004c60 <update_gcode_point+0x280>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fd92 	bl	8000524 <__aeabi_i2d>
 8004a00:	a395      	add	r3, pc, #596	; (adr r3, 8004c58 <update_gcode_point+0x278>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fdf7 	bl	80005f8 <__aeabi_dmul>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	4b94      	ldr	r3, [pc, #592]	; (8004c64 <update_gcode_point+0x284>)
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f7fb fc38 	bl	800028c <__adddf3>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	duty_cmd->target_point.y = (double)Gcode_Cor[run_point].Y * DATA_INVERSE_SCALE + offset_y;
 8004a26:	498e      	ldr	r1, [pc, #568]	; (8004c60 <update_gcode_point+0x280>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fb fd73 	bl	8000524 <__aeabi_i2d>
 8004a3e:	a386      	add	r3, pc, #536	; (adr r3, 8004c58 <update_gcode_point+0x278>)
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f7fb fdd8 	bl	80005f8 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4b85      	ldr	r3, [pc, #532]	; (8004c68 <update_gcode_point+0x288>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fc19 	bl	800028c <__adddf3>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004a64:	497e      	ldr	r1, [pc, #504]	; (8004c60 <update_gcode_point+0x280>)
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	331b      	adds	r3, #27
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d10d      	bne.n	8004a96 <update_gcode_point+0xb6>
	  duty_cmd->target_point.z = up_z_height + offset_z;
 8004a7a:	4b7c      	ldr	r3, [pc, #496]	; (8004c6c <update_gcode_point+0x28c>)
 8004a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a80:	4b7b      	ldr	r3, [pc, #492]	; (8004c70 <update_gcode_point+0x290>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fc01 	bl	800028c <__adddf3>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004a94:	e00c      	b.n	8004ab0 <update_gcode_point+0xd0>
	}else{
	  duty_cmd->target_point.z = down_z_height + offset_z;
 8004a96:	4b77      	ldr	r3, [pc, #476]	; (8004c74 <update_gcode_point+0x294>)
 8004a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a9c:	4b74      	ldr	r3, [pc, #464]	; (8004c70 <update_gcode_point+0x290>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fbf3 	bl	800028c <__adddf3>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	}
	duty_cmd->target_point.roll = roll_angle;
 8004ab0:	4b71      	ldr	r3, [pc, #452]	; (8004c78 <update_gcode_point+0x298>)
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	duty_cmd->space_type = DUTY_SPACE_TASK;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	735a      	strb	r2, [r3, #13]
	duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	731a      	strb	r2, [r3, #12]
	if(Gcode_Cor[run_point].configure.type_define[0] == LINEAR_TYPE){
 8004ac8:	4965      	ldr	r1, [pc, #404]	; (8004c60 <update_gcode_point+0x280>)
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	331a      	adds	r3, #26
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d103      	bne.n	8004ae6 <update_gcode_point+0x106>
	  duty_cmd->path_type = DUTY_PATH_LINE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	739a      	strb	r2, [r3, #14]
 8004ae4:	e07b      	b.n	8004bde <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_AW_TYPE){
 8004ae6:	495e      	ldr	r1, [pc, #376]	; (8004c60 <update_gcode_point+0x280>)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	331a      	adds	r3, #26
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d132      	bne.n	8004b62 <update_gcode_point+0x182>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * DATA_INVERSE_SCALE;
 8004afc:	4958      	ldr	r1, [pc, #352]	; (8004c60 <update_gcode_point+0x280>)
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fb fd08 	bl	8000524 <__aeabi_i2d>
 8004b14:	a350      	add	r3, pc, #320	; (adr r3, 8004c58 <update_gcode_point+0x278>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fd6d 	bl	80005f8 <__aeabi_dmul>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * DATA_INVERSE_SCALE;
 8004b28:	494d      	ldr	r1, [pc, #308]	; (8004c60 <update_gcode_point+0x280>)
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	3310      	adds	r3, #16
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fcf2 	bl	8000524 <__aeabi_i2d>
 8004b40:	a345      	add	r3, pc, #276	; (adr r3, 8004c58 <update_gcode_point+0x278>)
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f7fb fd57 	bl	80005f8 <__aeabi_dmul>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = 1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	615a      	str	r2, [r3, #20]
 8004b60:	e03d      	b.n	8004bde <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_CW_TYPE){
 8004b62:	493f      	ldr	r1, [pc, #252]	; (8004c60 <update_gcode_point+0x280>)
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	331a      	adds	r3, #26
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d132      	bne.n	8004bde <update_gcode_point+0x1fe>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * DATA_INVERSE_SCALE;
 8004b78:	4939      	ldr	r1, [pc, #228]	; (8004c60 <update_gcode_point+0x280>)
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	330c      	adds	r3, #12
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb fcca 	bl	8000524 <__aeabi_i2d>
 8004b90:	a331      	add	r3, pc, #196	; (adr r3, 8004c58 <update_gcode_point+0x278>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fd2f 	bl	80005f8 <__aeabi_dmul>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * DATA_INVERSE_SCALE;
 8004ba4:	492e      	ldr	r1, [pc, #184]	; (8004c60 <update_gcode_point+0x280>)
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3310      	adds	r3, #16
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fb fcb4 	bl	8000524 <__aeabi_i2d>
 8004bbc:	a326      	add	r3, pc, #152	; (adr r3, 8004c58 <update_gcode_point+0x278>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb fd19 	bl	80005f8 <__aeabi_dmul>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = -1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bdc:	615a      	str	r2, [r3, #20]
	}

	if(Gcode_Mode == GCODE_LINEAR){
 8004bde:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <update_gcode_point+0x29c>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d14e      	bne.n	8004c84 <update_gcode_point+0x2a4>
		duty_cmd->v_factor = (double)Gcode_Cor[run_point].F * DATA_INVERSE_SCALE / V_MOVE_MAX;
 8004be6:	491e      	ldr	r1, [pc, #120]	; (8004c60 <update_gcode_point+0x280>)
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fb fc93 	bl	8000524 <__aeabi_i2d>
 8004bfe:	a316      	add	r3, pc, #88	; (adr r3, 8004c58 <update_gcode_point+0x278>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fcf8 	bl	80005f8 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <update_gcode_point+0x2a0>)
 8004c16:	f7fb fe19 	bl	800084c <__aeabi_ddiv>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
		if(run_point == 1){
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10d      	bne.n	8004c46 <update_gcode_point+0x266>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9c1 2308 	strd	r2, r3, [r1, #32]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*DATA_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
		}
	}

}
 8004c44:	e0b6      	b.n	8004db4 <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	745a      	strb	r2, [r3, #17]
}
 8004c52:	e0af      	b.n	8004db4 <update_gcode_point+0x3d4>
 8004c54:	f3af 8000 	nop.w
 8004c58:	a0000000 	.word	0xa0000000
 8004c5c:	3ec0c6f7 	.word	0x3ec0c6f7
 8004c60:	20009948 	.word	0x20009948
 8004c64:	20009928 	.word	0x20009928
 8004c68:	200106d0 	.word	0x200106d0
 8004c6c:	200085c8 	.word	0x200085c8
 8004c70:	200106c0 	.word	0x200106c0
 8004c74:	20008f40 	.word	0x20008f40
 8004c78:	20009920 	.word	0x20009920
 8004c7c:	200085d0 	.word	0x200085d0
 8004c80:	40877000 	.word	0x40877000
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <update_gcode_point+0x3e8>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b09      	cmp	r3, #9
 8004c8a:	f040 8093 	bne.w	8004db4 <update_gcode_point+0x3d4>
		if(Gcode_Cor[run_point].configure.type_define[1] == pre_height){
 8004c8e:	494f      	ldr	r1, [pc, #316]	; (8004dcc <update_gcode_point+0x3ec>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	331b      	adds	r3, #27
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	4b4b      	ldr	r3, [pc, #300]	; (8004dd0 <update_gcode_point+0x3f0>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d14c      	bne.n	8004d42 <update_gcode_point+0x362>
			if(Gcode_Cor[run_point].configure.clutch_index != pre_clutch_index){
 8004ca8:	4948      	ldr	r1, [pc, #288]	; (8004dcc <update_gcode_point+0x3ec>)
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4b45      	ldr	r3, [pc, #276]	; (8004dd4 <update_gcode_point+0x3f4>)
 8004cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d01f      	beq.n	8004d06 <update_gcode_point+0x326>
				LSPB_calculation(gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index]);
 8004cc6:	4941      	ldr	r1, [pc, #260]	; (8004dcc <update_gcode_point+0x3ec>)
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4a3f      	ldr	r2, [pc, #252]	; (8004dd8 <update_gcode_point+0x3f8>)
 8004cdc:	460b      	mov	r3, r1
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	440b      	add	r3, r1
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cea:	f000 f87d 	bl	8004de8 <LSPB_calculation>
				pre_clutch_index = Gcode_Cor[run_point].configure.clutch_index;
 8004cee:	4937      	ldr	r1, [pc, #220]	; (8004dcc <update_gcode_point+0x3ec>)
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3318      	adds	r3, #24
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b21a      	sxth	r2, r3
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <update_gcode_point+0x3f4>)
 8004d04:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(Gcode_Cor[run_point].T*DATA_INVERSE_SCALE);
 8004d0c:	492f      	ldr	r1, [pc, #188]	; (8004dcc <update_gcode_point+0x3ec>)
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	3314      	adds	r3, #20
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d26:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004ddc <update_gcode_point+0x3fc>
 8004d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d2e:	ee17 0a90 	vmov	r0, s15
 8004d32:	f7fb fc09 	bl	8000548 <__aeabi_f2d>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004d40:	e038      	b.n	8004db4 <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*DATA_INVERSE_SCALE/V_MOVE_MAX;
 8004d4e:	491f      	ldr	r1, [pc, #124]	; (8004dcc <update_gcode_point+0x3ec>)
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3318      	adds	r3, #24
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <update_gcode_point+0x3f8>)
 8004d64:	460b      	mov	r3, r1
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	440b      	add	r3, r1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3308      	adds	r3, #8
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fbd6 	bl	8000524 <__aeabi_i2d>
 8004d78:	a311      	add	r3, pc, #68	; (adr r3, 8004dc0 <update_gcode_point+0x3e0>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fc3b 	bl	80005f8 <__aeabi_dmul>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <update_gcode_point+0x400>)
 8004d90:	f7fb fd5c 	bl	800084c <__aeabi_ddiv>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
 8004d9e:	490b      	ldr	r1, [pc, #44]	; (8004dcc <update_gcode_point+0x3ec>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	331b      	adds	r3, #27
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <update_gcode_point+0x3f0>)
 8004db2:	701a      	strb	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	a0000000 	.word	0xa0000000
 8004dc4:	3ec0c6f7 	.word	0x3ec0c6f7
 8004dc8:	200085d0 	.word	0x200085d0
 8004dcc:	20009948 	.word	0x20009948
 8004dd0:	20009909 	.word	0x20009909
 8004dd4:	200106ba 	.word	0x200106ba
 8004dd8:	200085e0 	.word	0x200085e0
 8004ddc:	360637bd 	.word	0x360637bd
 8004de0:	40877000 	.word	0x40877000
 8004de4:	00000000 	.word	0x00000000

08004de8 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8004de8:	b5b0      	push	{r4, r5, r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*DATA_INVERSE_SCALE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fb fb8e 	bl	8000524 <__aeabi_i2d>
 8004e08:	a388      	add	r3, pc, #544	; (adr r3, 800502c <LSPB_calculation+0x244>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f7fb fbf3 	bl	80005f8 <__aeabi_dmul>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*DATA_INVERSE_SCALE;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb fb81 	bl	8000524 <__aeabi_i2d>
 8004e22:	a382      	add	r3, pc, #520	; (adr r3, 800502c <LSPB_calculation+0x244>)
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f7fb fbe6 	bl	80005f8 <__aeabi_dmul>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8004e34:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004e38:	4b71      	ldr	r3, [pc, #452]	; (8005000 <LSPB_calculation+0x218>)
 8004e3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e3e:	f7fb fbdb 	bl	80005f8 <__aeabi_dmul>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e4e:	f7fb fcfd 	bl	800084c <__aeabi_ddiv>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	496b      	ldr	r1, [pc, #428]	; (8005004 <LSPB_calculation+0x21c>)
 8004e58:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 8004e5c:	4b69      	ldr	r3, [pc, #420]	; (8005004 <LSPB_calculation+0x21c>)
 8004e5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e6a:	f7fb fcef 	bl	800084c <__aeabi_ddiv>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7fb fa07 	bl	8000288 <__aeabi_dsub>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4962      	ldr	r1, [pc, #392]	; (8005008 <LSPB_calculation+0x220>)
 8004e80:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 8004e84:	4b5f      	ldr	r3, [pc, #380]	; (8005004 <LSPB_calculation+0x21c>)
 8004e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e8a:	4b5f      	ldr	r3, [pc, #380]	; (8005008 <LSPB_calculation+0x220>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb f9fa 	bl	8000288 <__aeabi_dsub>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	495c      	ldr	r1, [pc, #368]	; (800500c <LSPB_calculation+0x224>)
 8004e9a:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 8004e9e:	4b5a      	ldr	r3, [pc, #360]	; (8005008 <LSPB_calculation+0x220>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ea8:	f7fb fcd0 	bl	800084c <__aeabi_ddiv>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	4b55      	ldr	r3, [pc, #340]	; (8005010 <LSPB_calculation+0x228>)
 8004eba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ebe:	f7fb fb9b 	bl	80005f8 <__aeabi_dmul>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4953      	ldr	r1, [pc, #332]	; (8005014 <LSPB_calculation+0x22c>)
 8004ec8:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 8004ecc:	4952      	ldr	r1, [pc, #328]	; (8005018 <LSPB_calculation+0x230>)
 8004ece:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed2:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <LSPB_calculation+0x220>)
 8004ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	4b4e      	ldr	r3, [pc, #312]	; (800501c <LSPB_calculation+0x234>)
 8004ee2:	f7fb fb89 	bl	80005f8 <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ef2:	f7fb fb81 	bl	80005f8 <__aeabi_dmul>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4947      	ldr	r1, [pc, #284]	; (8005018 <LSPB_calculation+0x230>)
 8004efc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	4b45      	ldr	r3, [pc, #276]	; (800501c <LSPB_calculation+0x234>)
 8004f06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f0a:	f7fb fb75 	bl	80005f8 <__aeabi_dmul>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4943      	ldr	r1, [pc, #268]	; (8005020 <LSPB_calculation+0x238>)
 8004f14:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8004f18:	4b3c      	ldr	r3, [pc, #240]	; (800500c <LSPB_calculation+0x224>)
 8004f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f22:	f7fb fb69 	bl	80005f8 <__aeabi_dmul>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f32:	f7fb f9ab 	bl	800028c <__adddf3>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4939      	ldr	r1, [pc, #228]	; (8005020 <LSPB_calculation+0x238>)
 8004f3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8004f40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	f7fb f9a0 	bl	800028c <__adddf3>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4614      	mov	r4, r2
 8004f52:	461d      	mov	r5, r3
 8004f54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	f7fb f996 	bl	800028c <__adddf3>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <LSPB_calculation+0x224>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fb43 	bl	80005f8 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb f987 	bl	800028c <__adddf3>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4614      	mov	r4, r2
 8004f84:	461d      	mov	r5, r3
 8004f86:	4b1f      	ldr	r3, [pc, #124]	; (8005004 <LSPB_calculation+0x21c>)
 8004f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f90:	f7fb fb32 	bl	80005f8 <__aeabi_dmul>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb f974 	bl	8000288 <__aeabi_dsub>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4b16      	ldr	r3, [pc, #88]	; (8005004 <LSPB_calculation+0x21c>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb fb23 	bl	80005f8 <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fc2:	f7fb fc43 	bl	800084c <__aeabi_ddiv>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004fce:	f7fb f95b 	bl	8000288 <__aeabi_dsub>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4912      	ldr	r1, [pc, #72]	; (8005020 <LSPB_calculation+0x238>)
 8004fd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 8004fdc:	4911      	ldr	r1, [pc, #68]	; (8005024 <LSPB_calculation+0x23c>)
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 8004fea:	490f      	ldr	r1, [pc, #60]	; (8005028 <LSPB_calculation+0x240>)
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004ff8:	bf00      	nop
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8005000:	3ff33333 	.word	0x3ff33333
 8005004:	20009938 	.word	0x20009938
 8005008:	200098c8 	.word	0x200098c8
 800500c:	200098e8 	.word	0x200098e8
 8005010:	3fe00000 	.word	0x3fe00000
 8005014:	200106b0 	.word	0x200106b0
 8005018:	20009910 	.word	0x20009910
 800501c:	bfe00000 	.word	0xbfe00000
 8005020:	200098d0 	.word	0x200098d0
 8005024:	200085d8 	.word	0x200085d8
 8005028:	200106c8 	.word	0x200106c8
 800502c:	a0000000 	.word	0xa0000000
 8005030:	3ec0c6f7 	.word	0x3ec0c6f7
 8005034:	00000000 	.word	0x00000000

08005038 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8005038:	b084      	sub	sp, #16
 800503a:	b580      	push	{r7, lr}
 800503c:	af00      	add	r7, sp, #0
 800503e:	f107 0c08 	add.w	ip, r7, #8
 8005042:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*DATA_INVERSE_SCALE);
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb fa6b 	bl	8000524 <__aeabi_i2d>
 800504e:	a312      	add	r3, pc, #72	; (adr r3, 8005098 <accumulate_update+0x60>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb fad0 	bl	80005f8 <__aeabi_dmul>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	ec43 2b17 	vmov	d7, r2, r3
 8005060:	eeb0 0a47 	vmov.f32	s0, s14
 8005064:	eef0 0a67 	vmov.f32	s1, s15
 8005068:	480d      	ldr	r0, [pc, #52]	; (80050a0 <accumulate_update+0x68>)
 800506a:	f003 fd1b 	bl	8008aa4 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*DATA_INVERSE_SCALE;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb fa57 	bl	8000524 <__aeabi_i2d>
 8005076:	a308      	add	r3, pc, #32	; (adr r3, 8005098 <accumulate_update+0x60>)
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f7fb fabc 	bl	80005f8 <__aeabi_dmul>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4907      	ldr	r1, [pc, #28]	; (80050a4 <accumulate_update+0x6c>)
 8005086:	e9c1 2300 	strd	r2, r3, [r1]
}
 800508a:	bf00      	nop
 800508c:	46bd      	mov	sp, r7
 800508e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005092:	b004      	add	sp, #16
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	a0000000 	.word	0xa0000000
 800509c:	3ec0c6f7 	.word	0x3ec0c6f7
 80050a0:	200085d8 	.word	0x200085d8
 80050a4:	200106c8 	.word	0x200106c8

080050a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ae:	f107 0314 	add.w	r3, r7, #20
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	609a      	str	r2, [r3, #8]
 80050ba:	60da      	str	r2, [r3, #12]
 80050bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	4b51      	ldr	r3, [pc, #324]	; (8005208 <MX_GPIO_Init+0x160>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	4a50      	ldr	r2, [pc, #320]	; (8005208 <MX_GPIO_Init+0x160>)
 80050c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050cc:	6313      	str	r3, [r2, #48]	; 0x30
 80050ce:	4b4e      	ldr	r3, [pc, #312]	; (8005208 <MX_GPIO_Init+0x160>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	4b4a      	ldr	r3, [pc, #296]	; (8005208 <MX_GPIO_Init+0x160>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	4a49      	ldr	r2, [pc, #292]	; (8005208 <MX_GPIO_Init+0x160>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <MX_GPIO_Init+0x160>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	4b43      	ldr	r3, [pc, #268]	; (8005208 <MX_GPIO_Init+0x160>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	4a42      	ldr	r2, [pc, #264]	; (8005208 <MX_GPIO_Init+0x160>)
 8005100:	f043 0310 	orr.w	r3, r3, #16
 8005104:	6313      	str	r3, [r2, #48]	; 0x30
 8005106:	4b40      	ldr	r3, [pc, #256]	; (8005208 <MX_GPIO_Init+0x160>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	4b3c      	ldr	r3, [pc, #240]	; (8005208 <MX_GPIO_Init+0x160>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <MX_GPIO_Init+0x160>)
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	6313      	str	r3, [r2, #48]	; 0x30
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <MX_GPIO_Init+0x160>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <MX_GPIO_Init+0x160>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a34      	ldr	r2, [pc, #208]	; (8005208 <MX_GPIO_Init+0x160>)
 8005138:	f043 0308 	orr.w	r3, r3, #8
 800513c:	6313      	str	r3, [r2, #48]	; 0x30
 800513e:	4b32      	ldr	r3, [pc, #200]	; (8005208 <MX_GPIO_Init+0x160>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 800514a:	2200      	movs	r2, #0
 800514c:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8005150:	482e      	ldr	r0, [pc, #184]	; (800520c <MX_GPIO_Init+0x164>)
 8005152:	f006 fbb1 	bl	800b8b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8005156:	2200      	movs	r2, #0
 8005158:	f641 0148 	movw	r1, #6216	; 0x1848
 800515c:	482c      	ldr	r0, [pc, #176]	; (8005210 <MX_GPIO_Init+0x168>)
 800515e:	f006 fbab 	bl	800b8b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8005162:	2200      	movs	r2, #0
 8005164:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005168:	482a      	ldr	r0, [pc, #168]	; (8005214 <MX_GPIO_Init+0x16c>)
 800516a:	f006 fba5 	bl	800b8b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 800516e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8005172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005174:	2301      	movs	r3, #1
 8005176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800517c:	2300      	movs	r3, #0
 800517e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005180:	f107 0314 	add.w	r3, r7, #20
 8005184:	4619      	mov	r1, r3
 8005186:	4821      	ldr	r0, [pc, #132]	; (800520c <MX_GPIO_Init+0x164>)
 8005188:	f006 f9fa 	bl	800b580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 800518c:	f640 0348 	movw	r3, #2120	; 0x848
 8005190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005192:	2301      	movs	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519a:	2300      	movs	r3, #0
 800519c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800519e:	f107 0314 	add.w	r3, r7, #20
 80051a2:	4619      	mov	r1, r3
 80051a4:	481a      	ldr	r0, [pc, #104]	; (8005210 <MX_GPIO_Init+0x168>)
 80051a6:	f006 f9eb 	bl	800b580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 80051aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051b0:	2301      	movs	r3, #1
 80051b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b8:	2303      	movs	r3, #3
 80051ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4619      	mov	r1, r3
 80051c2:	4813      	ldr	r0, [pc, #76]	; (8005210 <MX_GPIO_Init+0x168>)
 80051c4:	f006 f9dc 	bl	800b580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80051c8:	f242 0304 	movw	r3, #8196	; 0x2004
 80051cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051d2:	2301      	movs	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051d6:	f107 0314 	add.w	r3, r7, #20
 80051da:	4619      	mov	r1, r3
 80051dc:	480c      	ldr	r0, [pc, #48]	; (8005210 <MX_GPIO_Init+0x168>)
 80051de:	f006 f9cf 	bl	800b580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80051e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80051e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e8:	2301      	movs	r3, #1
 80051ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f0:	2300      	movs	r3, #0
 80051f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f4:	f107 0314 	add.w	r3, r7, #20
 80051f8:	4619      	mov	r1, r3
 80051fa:	4806      	ldr	r0, [pc, #24]	; (8005214 <MX_GPIO_Init+0x16c>)
 80051fc:	f006 f9c0 	bl	800b580 <HAL_GPIO_Init>

}
 8005200:	bf00      	nop
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40023800 	.word	0x40023800
 800520c:	40020400 	.word	0x40020400
 8005210:	40020c00 	.word	0x40020c00
 8005214:	40020000 	.word	0x40020000

08005218 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8005218:	b5b0      	push	{r4, r5, r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8005226:	eeb0 0a47 	vmov.f32	s0, s14
 800522a:	eef0 0a67 	vmov.f32	s1, s15
 800522e:	f014 fe1f 	bl	8019e70 <cos>
 8005232:	ec51 0b10 	vmov	r0, r1, d0
 8005236:	a382      	add	r3, pc, #520	; (adr r3, 8005440 <kinematicForward+0x228>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fb f9dc 	bl	80005f8 <__aeabi_dmul>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4614      	mov	r4, r2
 8005246:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005254:	f7fb f81a 	bl	800028c <__adddf3>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	ec43 2b17 	vmov	d7, r2, r3
 8005260:	eeb0 0a47 	vmov.f32	s0, s14
 8005264:	eef0 0a67 	vmov.f32	s1, s15
 8005268:	f014 fe02 	bl	8019e70 <cos>
 800526c:	ec51 0b10 	vmov	r0, r1, d0
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	4b78      	ldr	r3, [pc, #480]	; (8005458 <kinematicForward+0x240>)
 8005276:	f7fb f9bf 	bl	80005f8 <__aeabi_dmul>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f7fb f803 	bl	800028c <__adddf3>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4614      	mov	r4, r2
 800528c:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800529a:	f7fa fff7 	bl	800028c <__adddf3>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80052ac:	f7fa ffec 	bl	8000288 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	ec43 2b17 	vmov	d7, r2, r3
 80052b8:	eeb0 0a47 	vmov.f32	s0, s14
 80052bc:	eef0 0a67 	vmov.f32	s1, s15
 80052c0:	f014 fdd6 	bl	8019e70 <cos>
 80052c4:	ec51 0b10 	vmov	r0, r1, d0
 80052c8:	a35b      	add	r3, pc, #364	; (adr r3, 8005438 <kinematicForward+0x220>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f7fb f993 	bl	80005f8 <__aeabi_dmul>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 80052d6:	4620      	mov	r0, r4
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fa ffd7 	bl	800028c <__adddf3>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80052ec:	eeb0 0a47 	vmov.f32	s0, s14
 80052f0:	eef0 0a67 	vmov.f32	s1, s15
 80052f4:	f014 fe54 	bl	8019fa0 <sin>
 80052f8:	ec51 0b10 	vmov	r0, r1, d0
 80052fc:	a350      	add	r3, pc, #320	; (adr r3, 8005440 <kinematicForward+0x228>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fb f979 	bl	80005f8 <__aeabi_dmul>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4614      	mov	r4, r2
 800530c:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800531a:	f7fa ffb7 	bl	800028c <__adddf3>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	ec43 2b17 	vmov	d7, r2, r3
 8005326:	eeb0 0a47 	vmov.f32	s0, s14
 800532a:	eef0 0a67 	vmov.f32	s1, s15
 800532e:	f014 fe37 	bl	8019fa0 <sin>
 8005332:	ec51 0b10 	vmov	r0, r1, d0
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	4b47      	ldr	r3, [pc, #284]	; (8005458 <kinematicForward+0x240>)
 800533c:	f7fb f95c 	bl	80005f8 <__aeabi_dmul>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fa ffa0 	bl	800028c <__adddf3>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4614      	mov	r4, r2
 8005352:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005360:	f7fa ff94 	bl	800028c <__adddf3>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005372:	f7fa ff89 	bl	8000288 <__aeabi_dsub>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	ec43 2b17 	vmov	d7, r2, r3
 800537e:	eeb0 0a47 	vmov.f32	s0, s14
 8005382:	eef0 0a67 	vmov.f32	s1, s15
 8005386:	f014 fe0b 	bl	8019fa0 <sin>
 800538a:	ec51 0b10 	vmov	r0, r1, d0
 800538e:	a32a      	add	r3, pc, #168	; (adr r3, 8005438 <kinematicForward+0x220>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb f930 	bl	80005f8 <__aeabi_dmul>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 800539c:	4620      	mov	r0, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	f7fa ff74 	bl	800028c <__adddf3>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80053b2:	a125      	add	r1, pc, #148	; (adr r1, 8005448 <kinematicForward+0x230>)
 80053b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053b8:	f7fa ff66 	bl	8000288 <__aeabi_dsub>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	a322      	add	r3, pc, #136	; (adr r3, 8005450 <kinematicForward+0x238>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fa ff5d 	bl	8000288 <__aeabi_dsub>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80053e2:	f7fa ff53 	bl	800028c <__adddf3>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80053f4:	f7fa ff48 	bl	8000288 <__aeabi_dsub>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005406:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pnt->y = y;
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005410:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pnt->z = z;
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800541a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	pnt->roll = roll;
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005424:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	return TRUE;
 8005428:	2301      	movs	r3, #1
}
 800542a:	4618      	mov	r0, r3
 800542c:	3728      	adds	r7, #40	; 0x28
 800542e:	46bd      	mov	sp, r7
 8005430:	bdb0      	pop	{r4, r5, r7, pc}
 8005432:	bf00      	nop
 8005434:	f3af 8000 	nop.w
 8005438:	80000000 	.word	0x80000000
 800543c:	40402e14 	.word	0x40402e14
 8005440:	00000000 	.word	0x00000000
 8005444:	4068a000 	.word	0x4068a000
 8005448:	00000000 	.word	0x00000000
 800544c:	406a6000 	.word	0x406a6000
 8005450:	e0000000 	.word	0xe0000000
 8005454:	40536b22 	.word	0x40536b22
 8005458:	40640000 	.word	0x40640000
 800545c:	00000000 	.word	0x00000000

08005460 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005460:	b082      	sub	sp, #8
 8005462:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005466:	b0a0      	sub	sp, #128	; 0x80
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005470:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800547a:	a1f0      	add	r1, pc, #960	; (adr r1, 800583c <kinematicInverse+0x3dc>)
 800547c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005480:	f7fa ff02 	bl	8000288 <__aeabi_dsub>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8005498:	eeb0 0a47 	vmov.f32	s0, s14
 800549c:	eef0 0a67 	vmov.f32	s1, s15
 80054a0:	f014 fce6 	bl	8019e70 <cos>
 80054a4:	ec51 0b10 	vmov	r0, r1, d0
 80054a8:	a3e6      	add	r3, pc, #920	; (adr r3, 8005844 <kinematicInverse+0x3e4>)
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f7fb f8a3 	bl	80005f8 <__aeabi_dmul>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4650      	mov	r0, sl
 80054b8:	4659      	mov	r1, fp
 80054ba:	f7fa fee5 	bl	8000288 <__aeabi_dsub>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80054d2:	eeb0 0a47 	vmov.f32	s0, s14
 80054d6:	eef0 0a67 	vmov.f32	s1, s15
 80054da:	f014 fd61 	bl	8019fa0 <sin>
 80054de:	ec51 0b10 	vmov	r0, r1, d0
 80054e2:	a3d8      	add	r3, pc, #864	; (adr r3, 8005844 <kinematicInverse+0x3e4>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fb f886 	bl	80005f8 <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4650      	mov	r0, sl
 80054f2:	4659      	mov	r1, fp
 80054f4:	f7fa fec8 	bl	8000288 <__aeabi_dsub>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8005500:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005504:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005508:	f7fb f876 	bl	80005f8 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4692      	mov	sl, r2
 8005512:	469b      	mov	fp, r3
 8005514:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005518:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800551c:	f7fb f86c 	bl	80005f8 <__aeabi_dmul>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4650      	mov	r0, sl
 8005526:	4659      	mov	r1, fp
 8005528:	f7fa feb0 	bl	800028c <__adddf3>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4610      	mov	r0, r2
 8005532:	4619      	mov	r1, r3
 8005534:	a3c5      	add	r3, pc, #788	; (adr r3, 800584c <kinematicInverse+0x3ec>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fa fea5 	bl	8000288 <__aeabi_dsub>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	4bb9      	ldr	r3, [pc, #740]	; (8005830 <kinematicInverse+0x3d0>)
 800554c:	f7fa fe9c 	bl	8000288 <__aeabi_dsub>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4610      	mov	r0, r2
 8005556:	4619      	mov	r1, r3
 8005558:	a3b1      	add	r3, pc, #708	; (adr r3, 8005820 <kinematicInverse+0x3c0>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fb f975 	bl	800084c <__aeabi_ddiv>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800556a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800556e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005572:	f7fb f841 	bl	80005f8 <__aeabi_dmul>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	f04f 0000 	mov.w	r0, #0
 800557e:	49ad      	ldr	r1, [pc, #692]	; (8005834 <kinematicInverse+0x3d4>)
 8005580:	f7fa fe82 	bl	8000288 <__aeabi_dsub>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005598:	f7fb faa0 	bl	8000adc <__aeabi_dcmplt>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <kinematicInverse+0x146>
		return FALSE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e134      	b.n	8005810 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80055a6:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80055aa:	f014 fd89 	bl	801a0c0 <sqrt>
 80055ae:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80055b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80055be:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80055c2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80055c6:	f014 fd79 	bl	801a0bc <atan2>
 80055ca:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80055ce:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80055d2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80055d6:	f014 fd71 	bl	801a0bc <atan2>
 80055da:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80055de:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80055e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80055e6:	f7fa fe4f 	bl	8000288 <__aeabi_dsub>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4614      	mov	r4, r2
 80055f0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80055f4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80055f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055fc:	f7fa fe44 	bl	8000288 <__aeabi_dsub>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4690      	mov	r8, r2
 8005606:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800560a:	4642      	mov	r2, r8
 800560c:	464b      	mov	r3, r9
 800560e:	4620      	mov	r0, r4
 8005610:	4629      	mov	r1, r5
 8005612:	f7fb fa6d 	bl	8000af0 <__aeabi_dcmple>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800561c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005620:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8005624:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005628:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800562c:	e007      	b.n	800563e <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 800562e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005632:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8005636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800563a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	4b7d      	ldr	r3, [pc, #500]	; (8005838 <kinematicInverse+0x3d8>)
 8005644:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005648:	f7fa ffd6 	bl	80005f8 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	a374      	add	r3, pc, #464	; (adr r3, 8005828 <kinematicInverse+0x3c8>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa fe17 	bl	800028c <__adddf3>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800566a:	f7fa ffc5 	bl	80005f8 <__aeabi_dmul>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4614      	mov	r4, r2
 8005674:	461d      	mov	r5, r3
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	4b6f      	ldr	r3, [pc, #444]	; (8005838 <kinematicInverse+0x3d8>)
 800567c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005680:	f7fa ffba 	bl	80005f8 <__aeabi_dmul>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005690:	f7fa ffb2 	bl	80005f8 <__aeabi_dmul>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fa fdf4 	bl	8000288 <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4614      	mov	r4, r2
 80056a6:	461d      	mov	r5, r3
 80056a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80056ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056b0:	f7fa ffa2 	bl	80005f8 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4690      	mov	r8, r2
 80056ba:	4699      	mov	r9, r3
 80056bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056c4:	f7fa ff98 	bl	80005f8 <__aeabi_dmul>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fa fddc 	bl	800028c <__adddf3>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4620      	mov	r0, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	f7fb f8b6 	bl	800084c <__aeabi_ddiv>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	4b52      	ldr	r3, [pc, #328]	; (8005838 <kinematicInverse+0x3d8>)
 80056ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056f2:	f7fa ff81 	bl	80005f8 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	a34a      	add	r3, pc, #296	; (adr r3, 8005828 <kinematicInverse+0x3c8>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fa fdc2 	bl	800028c <__adddf3>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005714:	f7fa ff70 	bl	80005f8 <__aeabi_dmul>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	4b44      	ldr	r3, [pc, #272]	; (8005838 <kinematicInverse+0x3d8>)
 8005726:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800572a:	f7fa ff65 	bl	80005f8 <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800573a:	f7fa ff5d 	bl	80005f8 <__aeabi_dmul>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f7fa fda1 	bl	800028c <__adddf3>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4614      	mov	r4, r2
 8005750:	461d      	mov	r5, r3
 8005752:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005756:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800575a:	f7fa ff4d 	bl	80005f8 <__aeabi_dmul>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4690      	mov	r8, r2
 8005764:	4699      	mov	r9, r3
 8005766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800576a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800576e:	f7fa ff43 	bl	80005f8 <__aeabi_dmul>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4640      	mov	r0, r8
 8005778:	4649      	mov	r1, r9
 800577a:	f7fa fd87 	bl	800028c <__adddf3>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4620      	mov	r0, r4
 8005784:	4629      	mov	r1, r5
 8005786:	f7fb f861 	bl	800084c <__aeabi_ddiv>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 8005792:	ed97 1b06 	vldr	d1, [r7, #24]
 8005796:	ed97 0b08 	vldr	d0, [r7, #32]
 800579a:	f014 fc8f 	bl	801a0bc <atan2>
 800579e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80057a2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80057a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057aa:	f7fa fd6f 	bl	800028c <__adddf3>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80057bc:	f7fa fd64 	bl	8000288 <__aeabi_dsub>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80057c8:	ed97 3b02 	vldr	d3, [r7, #8]
 80057cc:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80057d0:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80057d4:	ed97 0b04 	vldr	d0, [r7, #16]
 80057d8:	f004 f89a 	bl	8009910 <scaraCheckWorkSpace4>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 80057e2:	2300      	movs	r3, #0
 80057e4:	e014      	b.n	8005810 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pnt->Theta2 = theta2;
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80057f6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->D3		= d3;
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005800:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->Theta4 = theta4;
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800580a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	return TRUE; // All is well
 800580e:	2301      	movs	r3, #1
}
 8005810:	4618      	mov	r0, r3
 8005812:	3780      	adds	r7, #128	; 0x80
 8005814:	46bd      	mov	sp, r7
 8005816:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800581a:	b002      	add	sp, #8
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	00000000 	.word	0x00000000
 8005824:	40eec800 	.word	0x40eec800
 8005828:	00000000 	.word	0x00000000
 800582c:	4068a000 	.word	0x4068a000
 8005830:	40d90000 	.word	0x40d90000
 8005834:	3ff00000 	.word	0x3ff00000
 8005838:	40640000 	.word	0x40640000
 800583c:	80000000 	.word	0x80000000
 8005840:	4060aa6e 	.word	0x4060aa6e
 8005844:	80000000 	.word	0x80000000
 8005848:	40402e14 	.word	0x40402e14
 800584c:	00000000 	.word	0x00000000
 8005850:	40e2f320 	.word	0x40e2f320

08005854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005858:	f005 f9aa 	bl	800abb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800585c:	f000 f82a 	bl	80058b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005860:	f7ff fc22 	bl	80050a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005864:	f7fc ffe2 	bl	800282c <MX_DMA_Init>
  MX_UART4_Init();
 8005868:	f005 f8a4 	bl	800a9b4 <MX_UART4_Init>
  MX_FSMC_Init();
 800586c:	f7fe ffee 	bl	800484c <MX_FSMC_Init>
  MX_TIM7_Init();
 8005870:	f005 f82e 	bl	800a8d0 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005874:	f004 ffde 	bl	800a834 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)){
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <main+0x58>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <main+0x48>
  		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <main+0x58>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4a08      	ldr	r2, [pc, #32]	; (80058ac <main+0x58>)
 800588a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800588e:	60d3      	str	r3, [r2, #12]
  		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <main+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <main+0x5c>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6013      	str	r3, [r2, #0]
  	}
  	DWT->CYCCNT = 0;
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <main+0x5c>)
 800589e:	2200      	movs	r2, #0
 80058a0:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80058a2:	f7fc fffd 	bl	80028a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80058a6:	f00c fa0d 	bl	8011cc4 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80058aa:	e7fe      	b.n	80058aa <main+0x56>
 80058ac:	e000edf0 	.word	0xe000edf0
 80058b0:	e0001000 	.word	0xe0001000

080058b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b094      	sub	sp, #80	; 0x50
 80058b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058ba:	f107 0320 	add.w	r3, r7, #32
 80058be:	2230      	movs	r2, #48	; 0x30
 80058c0:	2100      	movs	r1, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f00f fe1c 	bl	8015500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058d8:	2300      	movs	r3, #0
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	4b28      	ldr	r3, [pc, #160]	; (8005980 <SystemClock_Config+0xcc>)
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	4a27      	ldr	r2, [pc, #156]	; (8005980 <SystemClock_Config+0xcc>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6413      	str	r3, [r2, #64]	; 0x40
 80058e8:	4b25      	ldr	r3, [pc, #148]	; (8005980 <SystemClock_Config+0xcc>)
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058f4:	2300      	movs	r3, #0
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	4b22      	ldr	r3, [pc, #136]	; (8005984 <SystemClock_Config+0xd0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a21      	ldr	r2, [pc, #132]	; (8005984 <SystemClock_Config+0xd0>)
 80058fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <SystemClock_Config+0xd0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005910:	2301      	movs	r3, #1
 8005912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800591a:	2302      	movs	r3, #2
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800591e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005924:	2308      	movs	r3, #8
 8005926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005928:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800592c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800592e:	2302      	movs	r3, #2
 8005930:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005932:	2307      	movs	r3, #7
 8005934:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005936:	f107 0320 	add.w	r3, r7, #32
 800593a:	4618      	mov	r0, r3
 800593c:	f007 f9b0 	bl	800cca0 <HAL_RCC_OscConfig>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005946:	f000 f831 	bl	80059ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800594a:	230f      	movs	r3, #15
 800594c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800594e:	2302      	movs	r3, #2
 8005950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005956:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800595a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800595c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005960:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005962:	f107 030c 	add.w	r3, r7, #12
 8005966:	2105      	movs	r1, #5
 8005968:	4618      	mov	r0, r3
 800596a:	f007 fc09 	bl	800d180 <HAL_RCC_ClockConfig>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005974:	f000 f81a 	bl	80059ac <Error_Handler>
  }
}
 8005978:	bf00      	nop
 800597a:	3750      	adds	r7, #80	; 0x50
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40023800 	.word	0x40023800
 8005984:	40007000 	.word	0x40007000

08005988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800599a:	f005 f92b 	bl	800abf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40001000 	.word	0x40001000

080059ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059cc:	3308      	adds	r3, #8
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <ringBuff_PushChar+0x1e>
		return FALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e02e      	b.n	8005a36 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	78f9      	ldrb	r1, [r7, #3]
 80059e4:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3301      	adds	r3, #1
 80059f0:	425a      	negs	r2, r3
 80059f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80059fa:	bf58      	it	pl
 80059fc:	4253      	negpl	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005a04:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a14:	3304      	adds	r3, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d105      	bne.n	8005a28 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a22:	3308      	adds	r3, #8
 8005a24:	2201      	movs	r2, #1
 8005a26:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a2e:	3309      	adds	r3, #9
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005a34:	2301      	movs	r3, #1
	}
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a52:	3309      	adds	r3, #9
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <ringBuff_PopChar+0x1c>
		return FALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e032      	b.n	8005ac4 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a64:	3304      	adds	r3, #4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	5cd2      	ldrb	r2, [r2, r3]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a76:	3304      	adds	r3, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	4259      	negs	r1, r3
 8005a7e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005a82:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8005a86:	bf58      	it	pl
 8005a88:	425a      	negpl	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a90:	3304      	adds	r3, #4
 8005a92:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d105      	bne.n	8005ab6 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ab0:	3309      	adds	r3, #9
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005abc:	3308      	adds	r3, #8
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005ac2:	2301      	movs	r3, #1
	}
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005adc:	2300      	movs	r3, #0
 8005ade:	82fb      	strh	r3, [r7, #22]
 8005ae0:	e011      	b.n	8005b06 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005ae2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4413      	add	r3, r2
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4619      	mov	r1, r3
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff ff63 	bl	80059ba <ringBuff_PushChar>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00b      	beq.n	8005b12 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8005afa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3301      	adds	r3, #1
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	82fb      	strh	r3, [r7, #22]
 8005b06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	dce8      	bgt.n	8005ae2 <ringBuff_PushArray+0x12>
 8005b10:	e000      	b.n	8005b14 <ringBuff_PushArray+0x44>
			break;
 8005b12:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005b14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e00c      	b.n	8005b4c <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	4413      	add	r3, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff ff81 	bl	8005a42 <ringBuff_PopChar>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	dbee      	blt.n	8005b32 <ringBuff_PopArray+0x12>
 8005b54:	e000      	b.n	8005b58 <ringBuff_PopArray+0x38>
			break;
 8005b56:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005b58:	697b      	ldr	r3, [r7, #20]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b088      	sub	sp, #32
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b72:	3304      	adds	r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8005b8a:	6838      	ldr	r0, [r7, #0]
 8005b8c:	f7fa fb20 	bl	80001d0 <strlen>
 8005b90:	4603      	mov	r3, r0
 8005b92:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d066      	beq.n	8005c70 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e030      	b.n	8005c0a <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	440b      	add	r3, r1
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d103      	bne.n	8005bc4 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e00c      	b.n	8005bde <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	781a      	ldrb	r2, [r3, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d102      	bne.n	8005bda <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e001      	b.n	8005bde <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d101      	bne.n	8005bea <ringBuff_DistanceOf+0x88>
	                return distance;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	e048      	b.n	8005c7c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	3301      	adds	r3, #1
 8005bee:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	425a      	negs	r2, r3
 8005bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c00:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005c04:	bf58      	it	pl
 8005c06:	4253      	negpl	r3, r2
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c10:	dbca      	blt.n	8005ba8 <ringBuff_DistanceOf+0x46>
 8005c12:	e031      	b.n	8005c78 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	440b      	add	r3, r1
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d103      	bne.n	8005c30 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e00c      	b.n	8005c4a <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d102      	bne.n	8005c46 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e001      	b.n	8005c4a <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d101      	bne.n	8005c56 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	e012      	b.n	8005c7c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	425a      	negs	r2, r3
 8005c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c66:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005c6a:	bf58      	it	pl
 8005c6c:	4253      	negpl	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d1cd      	bne.n	8005c14 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005c88:	f000 fdfe 	bl	8006888 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005c8c:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <lowlayer_scanReset+0x4c>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <lowlayer_scanReset+0x4c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <lowlayer_scanReset+0x4c>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <lowlayer_scanReset+0x4c>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <lowlayer_scanReset+0x50>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <lowlayer_scanReset+0x50>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <lowlayer_scanReset+0x50>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <lowlayer_scanReset+0x54>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8005cbc:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <lowlayer_scanReset+0x58>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2108      	movs	r1, #8
 8005cc6:	4806      	ldr	r0, [pc, #24]	; (8005ce0 <lowlayer_scanReset+0x5c>)
 8005cc8:	f005 fdf6 	bl	800b8b8 <HAL_GPIO_WritePin>
}
 8005ccc:	bf00      	nop
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20010858 	.word	0x20010858
 8005cd4:	2001086c 	.word	0x2001086c
 8005cd8:	20010868 	.word	0x20010868
 8005cdc:	20010888 	.word	0x20010888
 8005ce0:	40020c00 	.word	0x40020c00
 8005ce4:	00000000 	.word	0x00000000

08005ce8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005cf2:	f000 fe87 	bl	8006a04 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005cf6:	4b96      	ldr	r3, [pc, #600]	; (8005f50 <lowlayer_scanFlow+0x268>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d837      	bhi.n	8005d6e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8005cfe:	4b94      	ldr	r3, [pc, #592]	; (8005f50 <lowlayer_scanFlow+0x268>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f1c3 0303 	rsb	r3, r3, #3
 8005d06:	4a93      	ldr	r2, [pc, #588]	; (8005f54 <lowlayer_scanFlow+0x26c>)
 8005d08:	5cd3      	ldrb	r3, [r2, r3]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d121      	bne.n	8005d52 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8005d0e:	4b90      	ldr	r3, [pc, #576]	; (8005f50 <lowlayer_scanFlow+0x268>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f1c3 0203 	rsb	r2, r3, #3
 8005d16:	4b8e      	ldr	r3, [pc, #568]	; (8005f50 <lowlayer_scanFlow+0x268>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f1c3 0303 	rsb	r3, r3, #3
 8005d1e:	498e      	ldr	r1, [pc, #568]	; (8005f58 <lowlayer_scanFlow+0x270>)
 8005d20:	568a      	ldrsb	r2, [r1, r2]
 8005d22:	f107 0108 	add.w	r1, r7, #8
 8005d26:	440b      	add	r3, r1
 8005d28:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8005d2c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	425b      	negs	r3, r3
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	b258      	sxtb	r0, r3
 8005d38:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005d3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	425b      	negs	r3, r3
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	b25a      	sxtb	r2, r3
 8005d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4c:	f000 fcd8 	bl	8006700 <lowlayer_writePulse>
 8005d50:	e00b      	b.n	8005d6a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005d52:	4b7f      	ldr	r3, [pc, #508]	; (8005f50 <lowlayer_scanFlow+0x268>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	3301      	adds	r3, #1
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b7d      	ldr	r3, [pc, #500]	; (8005f50 <lowlayer_scanFlow+0x268>)
 8005d5c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	2100      	movs	r1, #0
 8005d64:	2000      	movs	r0, #0
 8005d66:	f000 fccb 	bl	8006700 <lowlayer_writePulse>
		}

		return FALSE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e0d2      	b.n	8005f14 <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8005d6e:	2201      	movs	r2, #1
 8005d70:	2108      	movs	r1, #8
 8005d72:	487a      	ldr	r0, [pc, #488]	; (8005f5c <lowlayer_scanFlow+0x274>)
 8005d74:	f005 fda0 	bl	800b8b8 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8005d78:	f000 fe28 	bl	80069cc <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2100      	movs	r1, #0
 8005d82:	2000      	movs	r0, #0
 8005d84:	f000 fcbc 	bl	8006700 <lowlayer_writePulse>
		scan_flag = 1;
 8005d88:	4b75      	ldr	r3, [pc, #468]	; (8005f60 <lowlayer_scanFlow+0x278>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8005d8e:	4b75      	ldr	r3, [pc, #468]	; (8005f64 <lowlayer_scanFlow+0x27c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a75      	ldr	r2, [pc, #468]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005d94:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8005d96:	4b73      	ldr	r3, [pc, #460]	; (8005f64 <lowlayer_scanFlow+0x27c>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4a73      	ldr	r2, [pc, #460]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005d9c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8005d9e:	4b71      	ldr	r3, [pc, #452]	; (8005f64 <lowlayer_scanFlow+0x27c>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4a71      	ldr	r2, [pc, #452]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005da4:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8005da6:	4b71      	ldr	r3, [pc, #452]	; (8005f6c <lowlayer_scanFlow+0x284>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	4a71      	ldr	r2, [pc, #452]	; (8005f70 <lowlayer_scanFlow+0x288>)
 8005dac:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8005dae:	4b6e      	ldr	r3, [pc, #440]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	486f      	ldr	r0, [pc, #444]	; (8005f74 <lowlayer_scanFlow+0x28c>)
 8005db8:	f7fc fc82 	bl	80026c0 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8005dbc:	4b6a      	ldr	r3, [pc, #424]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	486c      	ldr	r0, [pc, #432]	; (8005f78 <lowlayer_scanFlow+0x290>)
 8005dc6:	f7fc fc7b 	bl	80026c0 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8005dca:	4b67      	ldr	r3, [pc, #412]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	486a      	ldr	r0, [pc, #424]	; (8005f7c <lowlayer_scanFlow+0x294>)
 8005dd4:	f7fc fc74 	bl	80026c0 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8005dd8:	4b65      	ldr	r3, [pc, #404]	; (8005f70 <lowlayer_scanFlow+0x288>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	4867      	ldr	r0, [pc, #412]	; (8005f80 <lowlayer_scanFlow+0x298>)
 8005de2:	f7fc fc6d 	bl	80026c0 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005de6:	4b60      	ldr	r3, [pc, #384]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df2:	ee17 0a90 	vmov	r0, s15
 8005df6:	f7fa fba7 	bl	8000548 <__aeabi_f2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	f7fa fa45 	bl	800028c <__adddf3>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	a345      	add	r3, pc, #276	; (adr r3, 8005f20 <lowlayer_scanFlow+0x238>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fbf2 	bl	80005f8 <__aeabi_dmul>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	a342      	add	r3, pc, #264	; (adr r3, 8005f28 <lowlayer_scanFlow+0x240>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f7fa fd13 	bl	800084c <__aeabi_ddiv>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	a141      	add	r1, pc, #260	; (adr r1, 8005f30 <lowlayer_scanFlow+0x248>)
 8005e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e30:	f7fa fa2a 	bl	8000288 <__aeabi_dsub>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8005e38:	4952      	ldr	r1, [pc, #328]	; (8005f84 <lowlayer_scanFlow+0x29c>)
 8005e3a:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8005e3e:	4b4a      	ldr	r3, [pc, #296]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e4a:	ee17 0a90 	vmov	r0, s15
 8005e4e:	f7fa fb7b 	bl	8000548 <__aeabi_f2d>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	f7fa fa19 	bl	800028c <__adddf3>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4619      	mov	r1, r3
 8005e62:	a32f      	add	r3, pc, #188	; (adr r3, 8005f20 <lowlayer_scanFlow+0x238>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f7fa fbc6 	bl	80005f8 <__aeabi_dmul>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4610      	mov	r0, r2
 8005e72:	4619      	mov	r1, r3
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	4b43      	ldr	r3, [pc, #268]	; (8005f88 <lowlayer_scanFlow+0x2a0>)
 8005e7a:	f7fa fce7 	bl	800084c <__aeabi_ddiv>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	a12d      	add	r1, pc, #180	; (adr r1, 8005f38 <lowlayer_scanFlow+0x250>)
 8005e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e88:	f7fa f9fe 	bl	8000288 <__aeabi_dsub>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8005e90:	493c      	ldr	r1, [pc, #240]	; (8005f84 <lowlayer_scanFlow+0x29c>)
 8005e92:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8005e96:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <lowlayer_scanFlow+0x280>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ea2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005f8c <lowlayer_scanFlow+0x2a4>
 8005ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eaa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005f90 <lowlayer_scanFlow+0x2a8>
 8005eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eb2:	ee17 0a90 	vmov	r0, s15
 8005eb6:	f7fa fb47 	bl	8000548 <__aeabi_f2d>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8005ebe:	4931      	ldr	r1, [pc, #196]	; (8005f84 <lowlayer_scanFlow+0x29c>)
 8005ec0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8005ec4:	4b2a      	ldr	r3, [pc, #168]	; (8005f70 <lowlayer_scanFlow+0x288>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fa fb2b 	bl	8000524 <__aeabi_i2d>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	f7fa f9db 	bl	800028c <__adddf3>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	a310      	add	r3, pc, #64	; (adr r3, 8005f20 <lowlayer_scanFlow+0x238>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa fb88 	bl	80005f8 <__aeabi_dmul>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	a313      	add	r3, pc, #76	; (adr r3, 8005f40 <lowlayer_scanFlow+0x258>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa fca9 	bl	800084c <__aeabi_ddiv>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	a112      	add	r1, pc, #72	; (adr r1, 8005f48 <lowlayer_scanFlow+0x260>)
 8005f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f04:	f7fa f9c0 	bl	8000288 <__aeabi_dsub>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8005f0c:	491d      	ldr	r1, [pc, #116]	; (8005f84 <lowlayer_scanFlow+0x29c>)
 8005f0e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 8005f12:	2301      	movs	r3, #1
	}
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	f3af 8000 	nop.w
 8005f20:	60000000 	.word	0x60000000
 8005f24:	400921fb 	.word	0x400921fb
 8005f28:	00000000 	.word	0x00000000
 8005f2c:	40f38800 	.word	0x40f38800
 8005f30:	40000000 	.word	0x40000000
 8005f34:	bff9f17a 	.word	0xbff9f17a
 8005f38:	80000000 	.word	0x80000000
 8005f3c:	40039716 	.word	0x40039716
 8005f40:	a0000000 	.word	0xa0000000
 8005f44:	40d3bca1 	.word	0x40d3bca1
 8005f48:	a0000000 	.word	0xa0000000
 8005f4c:	4008330d 	.word	0x4008330d
 8005f50:	20010888 	.word	0x20010888
 8005f54:	20010878 	.word	0x20010878
 8005f58:	0801bdfc 	.word	0x0801bdfc
 8005f5c:	40020c00 	.word	0x40020c00
 8005f60:	20010868 	.word	0x20010868
 8005f64:	2001087c 	.word	0x2001087c
 8005f68:	200108b0 	.word	0x200108b0
 8005f6c:	20010858 	.word	0x20010858
 8005f70:	2001088c 	.word	0x2001088c
 8005f74:	0801bd24 	.word	0x0801bd24
 8005f78:	0801bd38 	.word	0x0801bd38
 8005f7c:	0801bd4c 	.word	0x0801bd4c
 8005f80:	0801bd60 	.word	0x0801bd60
 8005f84:	20010890 	.word	0x20010890
 8005f88:	40ff4000 	.word	0x40ff4000
 8005f8c:	4426aaab 	.word	0x4426aaab
 8005f90:	400f1aa0 	.word	0x400f1aa0
 8005f94:	00000000 	.word	0x00000000

08005f98 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f94d 	bl	8006248 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005fb4:	a330      	add	r3, pc, #192	; (adr r3, 8006078 <lowlayer_goToSoftLimit+0xe0>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f7fa fd8f 	bl	8000adc <__aeabi_dcmplt>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	723b      	strb	r3, [r7, #8]
		check++;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005fd4:	a32a      	add	r3, pc, #168	; (adr r3, 8006080 <lowlayer_goToSoftLimit+0xe8>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa fd9d 	bl	8000b18 <__aeabi_dcmpgt>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8005fe4:	2305      	movs	r3, #5
 8005fe6:	727b      	strb	r3, [r7, #9]
		check++;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	3301      	adds	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	f7fa fd6e 	bl	8000adc <__aeabi_dcmplt>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8006006:	2305      	movs	r3, #5
 8006008:	72bb      	strb	r3, [r7, #10]
		check++;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	3301      	adds	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006016:	a31c      	add	r3, pc, #112	; (adr r3, 8006088 <lowlayer_goToSoftLimit+0xf0>)
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f7fa fd7c 	bl	8000b18 <__aeabi_dcmpgt>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d004      	beq.n	8006030 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8006026:	230a      	movs	r3, #10
 8006028:	72fb      	strb	r3, [r7, #11]
		check++;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	3301      	adds	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d013      	beq.n	800605e <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8006036:	f997 0008 	ldrsb.w	r0, [r7, #8]
 800603a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	425b      	negs	r3, r3
 8006042:	b2db      	uxtb	r3, r3
 8006044:	b259      	sxtb	r1, r3
 8006046:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800604a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	425b      	negs	r3, r3
 8006052:	b2db      	uxtb	r3, r3
 8006054:	b25b      	sxtb	r3, r3
 8006056:	f000 fb53 	bl	8006700 <lowlayer_writePulse>
		return FALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	e006      	b.n	800606c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 800605e:	2300      	movs	r3, #0
 8006060:	2200      	movs	r2, #0
 8006062:	2100      	movs	r1, #0
 8006064:	2000      	movs	r0, #0
 8006066:	f000 fb4b 	bl	8006700 <lowlayer_writePulse>
		return TRUE;
 800606a:	2301      	movs	r3, #1
	}
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	f3af 8000 	nop.w
 8006078:	daaaaaab 	.word	0xdaaaaaab
 800607c:	bff7bc89 	.word	0xbff7bc89
 8006080:	88000000 	.word	0x88000000
 8006084:	4002d97c 	.word	0x4002d97c
 8006088:	daaaaaab 	.word	0xdaaaaaab
 800608c:	4007bc89 	.word	0x4007bc89

08006090 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8006098:	f000 fc7c 	bl	8006994 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 800609c:	4b62      	ldr	r3, [pc, #392]	; (8006228 <lowlayer_readTruePosition+0x198>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b62      	ldr	r3, [pc, #392]	; (800622c <lowlayer_readTruePosition+0x19c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ae:	ee17 0a90 	vmov	r0, s15
 80060b2:	f7fa fa49 	bl	8000548 <__aeabi_f2d>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	f7fa f8e7 	bl	800028c <__adddf3>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	a34c      	add	r3, pc, #304	; (adr r3, 80061f8 <lowlayer_readTruePosition+0x168>)
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f7fa fa94 	bl	80005f8 <__aeabi_dmul>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4610      	mov	r0, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	a349      	add	r3, pc, #292	; (adr r3, 8006200 <lowlayer_readTruePosition+0x170>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa fbb5 	bl	800084c <__aeabi_ddiv>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	a347      	add	r3, pc, #284	; (adr r3, 8006208 <lowlayer_readTruePosition+0x178>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f7fa f8ca 	bl	8000288 <__aeabi_dsub>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 80060fe:	4b4a      	ldr	r3, [pc, #296]	; (8006228 <lowlayer_readTruePosition+0x198>)
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	4b4a      	ldr	r3, [pc, #296]	; (800622c <lowlayer_readTruePosition+0x19c>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006110:	ee17 0a90 	vmov	r0, s15
 8006114:	f7fa fa18 	bl	8000548 <__aeabi_f2d>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	f7fa f8b6 	bl	800028c <__adddf3>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4610      	mov	r0, r2
 8006126:	4619      	mov	r1, r3
 8006128:	a333      	add	r3, pc, #204	; (adr r3, 80061f8 <lowlayer_readTruePosition+0x168>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fa63 	bl	80005f8 <__aeabi_dmul>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4610      	mov	r0, r2
 8006138:	4619      	mov	r1, r3
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	4b3c      	ldr	r3, [pc, #240]	; (8006230 <lowlayer_readTruePosition+0x1a0>)
 8006140:	f7fa fb84 	bl	800084c <__aeabi_ddiv>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	a330      	add	r3, pc, #192	; (adr r3, 8006210 <lowlayer_readTruePosition+0x180>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa f89b 	bl	800028c <__adddf3>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8006160:	4b31      	ldr	r3, [pc, #196]	; (8006228 <lowlayer_readTruePosition+0x198>)
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	4b31      	ldr	r3, [pc, #196]	; (800622c <lowlayer_readTruePosition+0x19c>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006172:	eeb1 7a67 	vneg.f32	s14, s15
 8006176:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006234 <lowlayer_readTruePosition+0x1a4>
 800617a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800617e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006238 <lowlayer_readTruePosition+0x1a8>
 8006182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006186:	ee17 0a90 	vmov	r0, s15
 800618a:	f7fa f9dd 	bl	8000548 <__aeabi_f2d>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8006198:	4b28      	ldr	r3, [pc, #160]	; (800623c <lowlayer_readTruePosition+0x1ac>)
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	4b28      	ldr	r3, [pc, #160]	; (8006240 <lowlayer_readTruePosition+0x1b0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa f9be 	bl	8000524 <__aeabi_i2d>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	f7fa f86e 	bl	800028c <__adddf3>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4610      	mov	r0, r2
 80061b6:	4619      	mov	r1, r3
 80061b8:	a30f      	add	r3, pc, #60	; (adr r3, 80061f8 <lowlayer_readTruePosition+0x168>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa fa1b 	bl	80005f8 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	a313      	add	r3, pc, #76	; (adr r3, 8006218 <lowlayer_readTruePosition+0x188>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa fb3c 	bl	800084c <__aeabi_ddiv>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4610      	mov	r0, r2
 80061da:	4619      	mov	r1, r3
 80061dc:	a310      	add	r3, pc, #64	; (adr r3, 8006220 <lowlayer_readTruePosition+0x190>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7fa f853 	bl	800028c <__adddf3>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	60000000 	.word	0x60000000
 80061fc:	400921fb 	.word	0x400921fb
 8006200:	00000000 	.word	0x00000000
 8006204:	40f38800 	.word	0x40f38800
 8006208:	40000000 	.word	0x40000000
 800620c:	3ff9f17a 	.word	0x3ff9f17a
 8006210:	80000000 	.word	0x80000000
 8006214:	40039716 	.word	0x40039716
 8006218:	a0000000 	.word	0xa0000000
 800621c:	40d3bca1 	.word	0x40d3bca1
 8006220:	a0000000 	.word	0xa0000000
 8006224:	4008330d 	.word	0x4008330d
 8006228:	2001086c 	.word	0x2001086c
 800622c:	200108b0 	.word	0x200108b0
 8006230:	40ff4000 	.word	0x40ff4000
 8006234:	4426aaab 	.word	0x4426aaab
 8006238:	400f1aa0 	.word	0x400f1aa0
 800623c:	20010858 	.word	0x20010858
 8006240:	2001088c 	.word	0x2001088c
 8006244:	00000000 	.word	0x00000000

08006248 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8006248:	b5b0      	push	{r4, r5, r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8006250:	4b53      	ldr	r3, [pc, #332]	; (80063a0 <lowlayer_readSetPosition+0x158>)
 8006252:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006256:	4b53      	ldr	r3, [pc, #332]	; (80063a4 <lowlayer_readSetPosition+0x15c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f7fa f962 	bl	8000524 <__aeabi_i2d>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	f7fa f812 	bl	800028c <__adddf3>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4610      	mov	r0, r2
 800626e:	4619      	mov	r1, r3
 8006270:	a345      	add	r3, pc, #276	; (adr r3, 8006388 <lowlayer_readSetPosition+0x140>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f7fa f9bf 	bl	80005f8 <__aeabi_dmul>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	a343      	add	r3, pc, #268	; (adr r3, 8006390 <lowlayer_readSetPosition+0x148>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f7fa fae0 	bl	800084c <__aeabi_ddiv>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7f9 fffa 	bl	800028c <__adddf3>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80062a2:	4b3f      	ldr	r3, [pc, #252]	; (80063a0 <lowlayer_readSetPosition+0x158>)
 80062a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80062a8:	4b3e      	ldr	r3, [pc, #248]	; (80063a4 <lowlayer_readSetPosition+0x15c>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fa f939 	bl	8000524 <__aeabi_i2d>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	f7f9 ffe9 	bl	800028c <__adddf3>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4610      	mov	r0, r2
 80062c0:	4619      	mov	r1, r3
 80062c2:	a331      	add	r3, pc, #196	; (adr r3, 8006388 <lowlayer_readSetPosition+0x140>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7fa f996 	bl	80005f8 <__aeabi_dmul>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4610      	mov	r0, r2
 80062d2:	4619      	mov	r1, r3
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	4b33      	ldr	r3, [pc, #204]	; (80063a8 <lowlayer_readSetPosition+0x160>)
 80062da:	f7fa fab7 	bl	800084c <__aeabi_ddiv>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ffd1 	bl	800028c <__adddf3>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80062f4:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <lowlayer_readSetPosition+0x158>)
 80062f6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80062fa:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <lowlayer_readSetPosition+0x15c>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006306:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80063ac <lowlayer_readSetPosition+0x164>
 800630a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800630e:	ee16 0a90 	vmov	r0, s13
 8006312:	f7fa f919 	bl	8000548 <__aeabi_f2d>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7f9 ffb5 	bl	800028c <__adddf3>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800632c:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <lowlayer_readSetPosition+0x158>)
 800632e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006332:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <lowlayer_readSetPosition+0x15c>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fa f8f4 	bl	8000524 <__aeabi_i2d>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	f7f9 ffa4 	bl	800028c <__adddf3>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4610      	mov	r0, r2
 800634a:	4619      	mov	r1, r3
 800634c:	a30e      	add	r3, pc, #56	; (adr r3, 8006388 <lowlayer_readSetPosition+0x140>)
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	a30e      	add	r3, pc, #56	; (adr r3, 8006398 <lowlayer_readSetPosition+0x150>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7fa fa72 	bl	800084c <__aeabi_ddiv>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4620      	mov	r0, r4
 800636e:	4629      	mov	r1, r5
 8006370:	f7f9 ff8c 	bl	800028c <__adddf3>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bdb0      	pop	{r4, r5, r7, pc}
 8006386:	bf00      	nop
 8006388:	60000000 	.word	0x60000000
 800638c:	400921fb 	.word	0x400921fb
 8006390:	00000000 	.word	0x00000000
 8006394:	40d38800 	.word	0x40d38800
 8006398:	a0000000 	.word	0xa0000000
 800639c:	40d3bca1 	.word	0x40d3bca1
 80063a0:	20010890 	.word	0x20010890
 80063a4:	20010858 	.word	0x20010858
 80063a8:	40df4000 	.word	0x40df4000
 80063ac:	42c80000 	.word	0x42c80000

080063b0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80063b0:	b084      	sub	sp, #16
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b092      	sub	sp, #72	; 0x48
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80063bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80063c0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80063c4:	a3c6      	add	r3, pc, #792	; (adr r3, 80066e0 <lowlayer_computeAndWritePulse+0x330>)
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	f7f9 ff5f 	bl	800028c <__adddf3>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4610      	mov	r0, r2
 80063d4:	4619      	mov	r1, r3
 80063d6:	a3c4      	add	r3, pc, #784	; (adr r3, 80066e8 <lowlayer_computeAndWritePulse+0x338>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7fa f90c 	bl	80005f8 <__aeabi_dmul>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	a3b7      	add	r3, pc, #732	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x318>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7fa fa2d 	bl	800084c <__aeabi_ddiv>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	ec43 2b17 	vmov	d7, r2, r3
 80063fa:	eeb0 0a47 	vmov.f32	s0, s14
 80063fe:	eef0 0a67 	vmov.f32	s1, s15
 8006402:	f013 fd85 	bl	8019f10 <round>
 8006406:	ec53 2b10 	vmov	r2, r3, d0
 800640a:	4610      	mov	r0, r2
 800640c:	4619      	mov	r1, r3
 800640e:	f7fa fbcb 	bl	8000ba8 <__aeabi_d2uiz>
 8006412:	4603      	mov	r3, r0
 8006414:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8006416:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800641a:	a3b5      	add	r3, pc, #724	; (adr r3, 80066f0 <lowlayer_computeAndWritePulse+0x340>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7f9 ff34 	bl	800028c <__adddf3>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	4bb1      	ldr	r3, [pc, #708]	; (80066f8 <lowlayer_computeAndWritePulse+0x348>)
 8006432:	f7fa f8e1 	bl	80005f8 <__aeabi_dmul>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	a3a2      	add	r3, pc, #648	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x318>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7fa fa02 	bl	800084c <__aeabi_ddiv>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	ec43 2b17 	vmov	d7, r2, r3
 8006450:	eeb0 0a47 	vmov.f32	s0, s14
 8006454:	eef0 0a67 	vmov.f32	s1, s15
 8006458:	f013 fd5a 	bl	8019f10 <round>
 800645c:	ec53 2b10 	vmov	r2, r3, d0
 8006460:	4610      	mov	r0, r2
 8006462:	4619      	mov	r1, r3
 8006464:	f7fa fba0 	bl	8000ba8 <__aeabi_d2uiz>
 8006468:	4603      	mov	r3, r0
 800646a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800646c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	4ba1      	ldr	r3, [pc, #644]	; (80066fc <lowlayer_computeAndWritePulse+0x34c>)
 8006476:	f7fa f8bf 	bl	80005f8 <__aeabi_dmul>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	ec43 2b17 	vmov	d7, r2, r3
 8006482:	eeb0 0a47 	vmov.f32	s0, s14
 8006486:	eef0 0a67 	vmov.f32	s1, s15
 800648a:	f013 fd41 	bl	8019f10 <round>
 800648e:	ec53 2b10 	vmov	r2, r3, d0
 8006492:	4610      	mov	r0, r2
 8006494:	4619      	mov	r1, r3
 8006496:	f7fa fb87 	bl	8000ba8 <__aeabi_d2uiz>
 800649a:	4603      	mov	r3, r0
 800649c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800649e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80064a2:	a38b      	add	r3, pc, #556	; (adr r3, 80066d0 <lowlayer_computeAndWritePulse+0x320>)
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f7f9 fef0 	bl	800028c <__adddf3>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4610      	mov	r0, r2
 80064b2:	4619      	mov	r1, r3
 80064b4:	a388      	add	r3, pc, #544	; (adr r3, 80066d8 <lowlayer_computeAndWritePulse+0x328>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7fa f89d 	bl	80005f8 <__aeabi_dmul>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	a380      	add	r3, pc, #512	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x318>)
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f7fa f9be 	bl	800084c <__aeabi_ddiv>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	ec43 2b17 	vmov	d7, r2, r3
 80064d8:	eeb0 0a47 	vmov.f32	s0, s14
 80064dc:	eef0 0a67 	vmov.f32	s1, s15
 80064e0:	f013 fd16 	bl	8019f10 <round>
 80064e4:	ec53 2b10 	vmov	r2, r3, d0
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	f7fa fb5c 	bl	8000ba8 <__aeabi_d2uiz>
 80064f0:	4603      	mov	r3, r0
 80064f2:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80064f4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80064f8:	a379      	add	r3, pc, #484	; (adr r3, 80066e0 <lowlayer_computeAndWritePulse+0x330>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7f9 fec5 	bl	800028c <__adddf3>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4610      	mov	r0, r2
 8006508:	4619      	mov	r1, r3
 800650a:	a377      	add	r3, pc, #476	; (adr r3, 80066e8 <lowlayer_computeAndWritePulse+0x338>)
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f7fa f872 	bl	80005f8 <__aeabi_dmul>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	a36a      	add	r3, pc, #424	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x318>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7fa f993 	bl	800084c <__aeabi_ddiv>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	ec43 2b17 	vmov	d7, r2, r3
 800652e:	eeb0 0a47 	vmov.f32	s0, s14
 8006532:	eef0 0a67 	vmov.f32	s1, s15
 8006536:	f013 fceb 	bl	8019f10 <round>
 800653a:	ec53 2b10 	vmov	r2, r3, d0
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	f7fa fb31 	bl	8000ba8 <__aeabi_d2uiz>
 8006546:	4603      	mov	r3, r0
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800654a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800654e:	a368      	add	r3, pc, #416	; (adr r3, 80066f0 <lowlayer_computeAndWritePulse+0x340>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 fe9a 	bl	800028c <__adddf3>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	4b64      	ldr	r3, [pc, #400]	; (80066f8 <lowlayer_computeAndWritePulse+0x348>)
 8006566:	f7fa f847 	bl	80005f8 <__aeabi_dmul>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4610      	mov	r0, r2
 8006570:	4619      	mov	r1, r3
 8006572:	a355      	add	r3, pc, #340	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x318>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7fa f968 	bl	800084c <__aeabi_ddiv>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	ec43 2b17 	vmov	d7, r2, r3
 8006584:	eeb0 0a47 	vmov.f32	s0, s14
 8006588:	eef0 0a67 	vmov.f32	s1, s15
 800658c:	f013 fcc0 	bl	8019f10 <round>
 8006590:	ec53 2b10 	vmov	r2, r3, d0
 8006594:	4610      	mov	r0, r2
 8006596:	4619      	mov	r1, r3
 8006598:	f7fa fb06 	bl	8000ba8 <__aeabi_d2uiz>
 800659c:	4603      	mov	r3, r0
 800659e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80065a0:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	4b54      	ldr	r3, [pc, #336]	; (80066fc <lowlayer_computeAndWritePulse+0x34c>)
 80065aa:	f7fa f825 	bl	80005f8 <__aeabi_dmul>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	ec43 2b17 	vmov	d7, r2, r3
 80065b6:	eeb0 0a47 	vmov.f32	s0, s14
 80065ba:	eef0 0a67 	vmov.f32	s1, s15
 80065be:	f013 fca7 	bl	8019f10 <round>
 80065c2:	ec53 2b10 	vmov	r2, r3, d0
 80065c6:	4610      	mov	r0, r2
 80065c8:	4619      	mov	r1, r3
 80065ca:	f7fa faed 	bl	8000ba8 <__aeabi_d2uiz>
 80065ce:	4603      	mov	r3, r0
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80065d2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80065d6:	a33e      	add	r3, pc, #248	; (adr r3, 80066d0 <lowlayer_computeAndWritePulse+0x320>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 fe56 	bl	800028c <__adddf3>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	a33b      	add	r3, pc, #236	; (adr r3, 80066d8 <lowlayer_computeAndWritePulse+0x328>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f803 	bl	80005f8 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4610      	mov	r0, r2
 80065f8:	4619      	mov	r1, r3
 80065fa:	a333      	add	r3, pc, #204	; (adr r3, 80066c8 <lowlayer_computeAndWritePulse+0x318>)
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f7fa f924 	bl	800084c <__aeabi_ddiv>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	ec43 2b17 	vmov	d7, r2, r3
 800660c:	eeb0 0a47 	vmov.f32	s0, s14
 8006610:	eef0 0a67 	vmov.f32	s1, s15
 8006614:	f013 fc7c 	bl	8019f10 <round>
 8006618:	ec53 2b10 	vmov	r2, r3, d0
 800661c:	4610      	mov	r0, r2
 800661e:	4619      	mov	r1, r3
 8006620:	f7fa fac2 	bl	8000ba8 <__aeabi_d2uiz>
 8006624:	4603      	mov	r3, r0
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8006628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800662a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	461a      	mov	r2, r3
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8006638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8006648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800664a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	461a      	mov	r2, r3
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8006658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	461a      	mov	r2, r3
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	bfb8      	it	lt
 800666e:	425b      	neglt	r3, r3
 8006670:	2b7f      	cmp	r3, #127	; 0x7f
 8006672:	dc11      	bgt.n	8006698 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	bfb8      	it	lt
 800667a:	425b      	neglt	r3, r3
 800667c:	2b7f      	cmp	r3, #127	; 0x7f
 800667e:	dc0b      	bgt.n	8006698 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfb8      	it	lt
 8006686:	425b      	neglt	r3, r3
 8006688:	2b7f      	cmp	r3, #127	; 0x7f
 800668a:	dc05      	bgt.n	8006698 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	bfb8      	it	lt
 8006692:	425b      	neglt	r3, r3
 8006694:	2b7f      	cmp	r3, #127	; 0x7f
 8006696:	dd01      	ble.n	800669c <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8006698:	2300      	movs	r3, #0
 800669a:	e00c      	b.n	80066b6 <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800669c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80066a0:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80066a4:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80066a8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80066ac:	f000 f828 	bl	8006700 <lowlayer_writePulse>
 80066b0:	4603      	mov	r3, r0
 80066b2:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80066b4:	79fb      	ldrb	r3, [r7, #7]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3748      	adds	r7, #72	; 0x48
 80066ba:	46bd      	mov	sp, r7
 80066bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066c0:	b004      	add	sp, #16
 80066c2:	4770      	bx	lr
 80066c4:	f3af 8000 	nop.w
 80066c8:	60000000 	.word	0x60000000
 80066cc:	401921fb 	.word	0x401921fb
 80066d0:	daaaaaab 	.word	0xdaaaaaab
 80066d4:	4007bc89 	.word	0x4007bc89
 80066d8:	a0000000 	.word	0xa0000000
 80066dc:	40d3bca1 	.word	0x40d3bca1
 80066e0:	daaaaaab 	.word	0xdaaaaaab
 80066e4:	3ff7bc89 	.word	0x3ff7bc89
 80066e8:	00000000 	.word	0x00000000
 80066ec:	40d38800 	.word	0x40d38800
 80066f0:	88000000 	.word	0x88000000
 80066f4:	4002d97c 	.word	0x4002d97c
 80066f8:	40df4000 	.word	0x40df4000
 80066fc:	40590000 	.word	0x40590000

08006700 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006700:	b590      	push	{r4, r7, lr}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	4611      	mov	r1, r2
 800670c:	461a      	mov	r2, r3
 800670e:	4623      	mov	r3, r4
 8006710:	71fb      	strb	r3, [r7, #7]
 8006712:	4603      	mov	r3, r0
 8006714:	71bb      	strb	r3, [r7, #6]
 8006716:	460b      	mov	r3, r1
 8006718:	717b      	strb	r3, [r7, #5]
 800671a:	4613      	mov	r3, r2
 800671c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800671e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da06      	bge.n	8006734 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	425b      	negs	r3, r3
 800672a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	425b      	negs	r3, r3
 8006730:	75fb      	strb	r3, [r7, #23]
 8006732:	e006      	b.n	8006742 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800673e:	b25b      	sxtb	r3, r3
 8006740:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8006742:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006746:	2b00      	cmp	r3, #0
 8006748:	da06      	bge.n	8006758 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800674a:	79bb      	ldrb	r3, [r7, #6]
 800674c:	425b      	negs	r3, r3
 800674e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8006750:	79bb      	ldrb	r3, [r7, #6]
 8006752:	425b      	negs	r3, r3
 8006754:	75bb      	strb	r3, [r7, #22]
 8006756:	e006      	b.n	8006766 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8006758:	79bb      	ldrb	r3, [r7, #6]
 800675a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 800675c:	79bb      	ldrb	r3, [r7, #6]
 800675e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006762:	b25b      	sxtb	r3, r3
 8006764:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8006766:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800676a:	2b00      	cmp	r3, #0
 800676c:	da0b      	bge.n	8006786 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800676e:	797b      	ldrb	r3, [r7, #5]
 8006770:	425b      	negs	r3, r3
 8006772:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8006774:	797b      	ldrb	r3, [r7, #5]
 8006776:	425b      	negs	r3, r3
 8006778:	b2db      	uxtb	r3, r3
 800677a:	b25b      	sxtb	r3, r3
 800677c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006780:	b25b      	sxtb	r3, r3
 8006782:	757b      	strb	r3, [r7, #21]
 8006784:	e003      	b.n	800678e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8006786:	797b      	ldrb	r3, [r7, #5]
 8006788:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800678a:	797b      	ldrb	r3, [r7, #5]
 800678c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800678e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	da06      	bge.n	80067a4 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8006796:	793b      	ldrb	r3, [r7, #4]
 8006798:	425b      	negs	r3, r3
 800679a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800679c:	793b      	ldrb	r3, [r7, #4]
 800679e:	425b      	negs	r3, r3
 80067a0:	753b      	strb	r3, [r7, #20]
 80067a2:	e006      	b.n	80067b2 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80067a4:	793b      	ldrb	r3, [r7, #4]
 80067a6:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80067a8:	793b      	ldrb	r3, [r7, #4]
 80067aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80067b2:	7cfb      	ldrb	r3, [r7, #19]
 80067b4:	2b4b      	cmp	r3, #75	; 0x4b
 80067b6:	d808      	bhi.n	80067ca <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80067b8:	7cbb      	ldrb	r3, [r7, #18]
 80067ba:	2b78      	cmp	r3, #120	; 0x78
 80067bc:	d805      	bhi.n	80067ca <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80067be:	7c7b      	ldrb	r3, [r7, #17]
 80067c0:	2b7d      	cmp	r3, #125	; 0x7d
 80067c2:	d802      	bhi.n	80067ca <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80067c4:	7c3b      	ldrb	r3, [r7, #16]
 80067c6:	2b65      	cmp	r3, #101	; 0x65
 80067c8:	d901      	bls.n	80067ce <lowlayer_writePulse+0xce>
		return FALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e04b      	b.n	8006866 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80067ce:	2200      	movs	r2, #0
 80067d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067d4:	4826      	ldr	r0, [pc, #152]	; (8006870 <lowlayer_writePulse+0x170>)
 80067d6:	f005 f86f 	bl	800b8b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80067da:	2200      	movs	r2, #0
 80067dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067e0:	4824      	ldr	r0, [pc, #144]	; (8006874 <lowlayer_writePulse+0x174>)
 80067e2:	f005 f869 	bl	800b8b8 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	4619      	mov	r1, r3
 80067ea:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80067ee:	f7fe f811 	bl	8004814 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80067f2:	7dbb      	ldrb	r3, [r7, #22]
 80067f4:	4619      	mov	r1, r3
 80067f6:	4820      	ldr	r0, [pc, #128]	; (8006878 <lowlayer_writePulse+0x178>)
 80067f8:	f7fe f80c 	bl	8004814 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80067fc:	7d7b      	ldrb	r3, [r7, #21]
 80067fe:	4619      	mov	r1, r3
 8006800:	481e      	ldr	r0, [pc, #120]	; (800687c <lowlayer_writePulse+0x17c>)
 8006802:	f7fe f807 	bl	8004814 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006806:	7d3b      	ldrb	r3, [r7, #20]
 8006808:	4619      	mov	r1, r3
 800680a:	481d      	ldr	r0, [pc, #116]	; (8006880 <lowlayer_writePulse+0x180>)
 800680c:	f7fe f802 	bl	8004814 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006810:	2364      	movs	r3, #100	; 0x64
 8006812:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006814:	bf00      	nop
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	1e5a      	subs	r2, r3, #1
 800681a:	73fa      	strb	r2, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1fa      	bne.n	8006816 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8006820:	2201      	movs	r2, #1
 8006822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006826:	4813      	ldr	r0, [pc, #76]	; (8006874 <lowlayer_writePulse+0x174>)
 8006828:	f005 f846 	bl	800b8b8 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 800682c:	4b15      	ldr	r3, [pc, #84]	; (8006884 <lowlayer_writePulse+0x184>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006834:	4413      	add	r3, r2
 8006836:	4a13      	ldr	r2, [pc, #76]	; (8006884 <lowlayer_writePulse+0x184>)
 8006838:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800683a:	4b12      	ldr	r3, [pc, #72]	; (8006884 <lowlayer_writePulse+0x184>)
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006842:	4413      	add	r3, r2
 8006844:	4a0f      	ldr	r2, [pc, #60]	; (8006884 <lowlayer_writePulse+0x184>)
 8006846:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006848:	4b0e      	ldr	r3, [pc, #56]	; (8006884 <lowlayer_writePulse+0x184>)
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006850:	4413      	add	r3, r2
 8006852:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <lowlayer_writePulse+0x184>)
 8006854:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <lowlayer_writePulse+0x184>)
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	4a08      	ldr	r2, [pc, #32]	; (8006884 <lowlayer_writePulse+0x184>)
 8006862:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8006864:	2301      	movs	r3, #1
}
 8006866:	4618      	mov	r0, r3
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	bd90      	pop	{r4, r7, pc}
 800686e:	bf00      	nop
 8006870:	40020000 	.word	0x40020000
 8006874:	40020c00 	.word	0x40020c00
 8006878:	60000002 	.word	0x60000002
 800687c:	60000004 	.word	0x60000004
 8006880:	60000006 	.word	0x60000006
 8006884:	20010858 	.word	0x20010858

08006888 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800688e:	2364      	movs	r3, #100	; 0x64
 8006890:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006892:	2201      	movs	r2, #1
 8006894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006898:	4809      	ldr	r0, [pc, #36]	; (80068c0 <lowlayer_resetEncoder+0x38>)
 800689a:	f005 f80d 	bl	800b8b8 <HAL_GPIO_WritePin>
	while (delay--);
 800689e:	bf00      	nop
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	1e5a      	subs	r2, r3, #1
 80068a4:	71fa      	strb	r2, [r7, #7]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1fa      	bne.n	80068a0 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80068aa:	2200      	movs	r2, #0
 80068ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068b0:	4803      	ldr	r0, [pc, #12]	; (80068c0 <lowlayer_resetEncoder+0x38>)
 80068b2:	f005 f801 	bl	800b8b8 <HAL_GPIO_WritePin>
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40020c00 	.word	0x40020c00

080068c4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <lowlayer_readLimitSwitch+0x1c>)
 80068cc:	f7fd ffb1 	bl	8004832 <FSMC_Read>
 80068d0:	4603      	mov	r3, r0
 80068d2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	b2db      	uxtb	r3, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	60000020 	.word	0x60000020

080068e4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d81c      	bhi.n	800692e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80068fa:	3310      	adds	r3, #16
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fd ff97 	bl	8004832 <FSMC_Read>
 8006904:	4603      	mov	r3, r0
 8006906:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800690e:	3310      	adds	r3, #16
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	3302      	adds	r3, #2
 8006914:	4618      	mov	r0, r3
 8006916:	f7fd ff8c 	bl	8004832 <FSMC_Read>
 800691a:	4603      	mov	r3, r0
 800691c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800691e:	893b      	ldrh	r3, [r7, #8]
 8006920:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	041a      	lsls	r2, r3, #16
 8006926:	897b      	ldrh	r3, [r7, #10]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e001      	b.n	8006932 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006932:	68fb      	ldr	r3, [r7, #12]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d81c      	bhi.n	8006986 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006952:	3318      	adds	r3, #24
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4618      	mov	r0, r3
 8006958:	f7fd ff6b 	bl	8004832 <FSMC_Read>
 800695c:	4603      	mov	r3, r0
 800695e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006966:	3318      	adds	r3, #24
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	3302      	adds	r3, #2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fd ff60 	bl	8004832 <FSMC_Read>
 8006972:	4603      	mov	r3, r0
 8006974:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006976:	893b      	ldrh	r3, [r7, #8]
 8006978:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	041a      	lsls	r2, r3, #16
 800697e:	897b      	ldrh	r3, [r7, #10]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e001      	b.n	800698a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800699a:	2300      	movs	r3, #0
 800699c:	71fb      	strb	r3, [r7, #7]
 800699e:	e00b      	b.n	80069b8 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 80069a0:	79fc      	ldrb	r4, [r7, #7]
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff ff9d 	bl	80068e4 <lowlayer_readEncoder>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <lowlayer_updateEncoder+0x34>)
 80069ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	3301      	adds	r3, #1
 80069b6:	71fb      	strb	r3, [r7, #7]
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d9f0      	bls.n	80069a0 <lowlayer_updateEncoder+0xc>
	}
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd90      	pop	{r4, r7, pc}
 80069c8:	2001086c 	.word	0x2001086c

080069cc <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80069d2:	2300      	movs	r3, #0
 80069d4:	71fb      	strb	r3, [r7, #7]
 80069d6:	e00b      	b.n	80069f0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 80069d8:	79fc      	ldrb	r4, [r7, #7]
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff ffad 	bl	800693c <lowlayer_readCapture>
 80069e2:	4603      	mov	r3, r0
 80069e4:	4a06      	ldr	r2, [pc, #24]	; (8006a00 <lowlayer_updateCapture+0x34>)
 80069e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	3301      	adds	r3, #1
 80069ee:	71fb      	strb	r3, [r7, #7]
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d9f0      	bls.n	80069d8 <lowlayer_updateCapture+0xc>
	}
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd90      	pop	{r4, r7, pc}
 8006a00:	2001087c 	.word	0x2001087c

08006a04 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8006a0a:	f7ff ff5b 	bl	80068c4 <lowlayer_readLimitSwitch>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006a12:	2300      	movs	r3, #0
 8006a14:	71fb      	strb	r3, [r7, #7]
 8006a16:	e00d      	b.n	8006a34 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006a18:	79ba      	ldrb	r2, [r7, #6]
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	fa42 f303 	asr.w	r3, r2, r3
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	f002 0201 	and.w	r2, r2, #1
 8006a28:	b2d1      	uxtb	r1, r2
 8006a2a:	4a06      	ldr	r2, [pc, #24]	; (8006a44 <lowlayer_updateLimit+0x40>)
 8006a2c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	3301      	adds	r3, #1
 8006a32:	71fb      	strb	r3, [r7, #7]
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d9ee      	bls.n	8006a18 <lowlayer_updateLimit+0x14>
	}
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20010878 	.word	0x20010878

08006a48 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a5e:	4807      	ldr	r0, [pc, #28]	; (8006a7c <lowlayer_setOutput+0x34>)
 8006a60:	f004 ff2a 	bl	800b8b8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006a64:	e005      	b.n	8006a72 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006a66:	2200      	movs	r2, #0
 8006a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a6c:	4803      	ldr	r0, [pc, #12]	; (8006a7c <lowlayer_setOutput+0x34>)
 8006a6e:	f004 ff23 	bl	800b8b8 <HAL_GPIO_WritePin>
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40020400 	.word	0x40020400

08006a80 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006a84:	2201      	movs	r2, #1
 8006a86:	2140      	movs	r1, #64	; 0x40
 8006a88:	4802      	ldr	r0, [pc, #8]	; (8006a94 <lowlayer_CPLD_Init+0x14>)
 8006a8a:	f004 ff15 	bl	800b8b8 <HAL_GPIO_WritePin>
}
 8006a8e:	bf00      	nop
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	40020c00 	.word	0x40020c00

08006a98 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006aa2:	4808      	ldr	r0, [pc, #32]	; (8006ac4 <lowlayer_stepMotorInit+0x2c>)
 8006aa4:	f004 ff08 	bl	800b8b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006aae:	4805      	ldr	r0, [pc, #20]	; (8006ac4 <lowlayer_stepMotorInit+0x2c>)
 8006ab0:	f004 ff02 	bl	800b8b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aba:	4802      	ldr	r0, [pc, #8]	; (8006ac4 <lowlayer_stepMotorInit+0x2c>)
 8006abc:	f004 fefc 	bl	800b8b8 <HAL_GPIO_WritePin>
}
 8006ac0:	bf00      	nop
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40020000 	.word	0x40020000

08006ac8 <scaraStartup>:
//SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];

Trajectory_TargetTypeDef	joint_taget[4] = {  TRAJECTORY_J0, TRAJECTORY_J1,
												TRAJECTORY_J2, TRAJECTORY_J3};

void				scaraStartup(void) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8006acc:	f7ff ffd8 	bl	8006a80 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006ad0:	f7ff ffe2 	bl	8006a98 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006ad4:	f7ff fed8 	bl	8006888 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006ad8:	bf00      	nop
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	0000      	movs	r0, r0
	...

08006ae0 <scaraInitDuty>:


/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae4:	ed2d 8b02 	vpush	{d8}
 8006ae8:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8006aec:	af6c      	add	r7, sp, #432	; 0x1b0
 8006aee:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 8006af2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006af6:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 8359 	bne.w	80071b2 <scaraInitDuty+0x6d2>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006b00:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006b04:	a3bd      	add	r3, pc, #756	; (adr r3, 8006dfc <scaraInitDuty+0x31c>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4610      	mov	r0, r2
 8006b14:	4619      	mov	r1, r3
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	4bb1      	ldr	r3, [pc, #708]	; (8006de0 <scaraInitDuty+0x300>)
 8006b1c:	f7f9 fe96 	bl	800084c <__aeabi_ddiv>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006b28:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d134      	bne.n	8006b9a <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006b30:	4bac      	ldr	r3, [pc, #688]	; (8006de4 <scaraInitDuty+0x304>)
 8006b32:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006b36:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8006b3a:	f7f9 fba7 	bl	800028c <__adddf3>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	f107 0108 	add.w	r1, r7, #8
 8006b46:	e9c1 2308 	strd	r2, r3, [r1, #32]
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006b4a:	4ba6      	ldr	r3, [pc, #664]	; (8006de4 <scaraInitDuty+0x304>)
 8006b4c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006b50:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8006b54:	f7f9 fb9a 	bl	800028c <__adddf3>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	f107 0108 	add.w	r1, r7, #8
 8006b60:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006b64:	4b9f      	ldr	r3, [pc, #636]	; (8006de4 <scaraInitDuty+0x304>)
 8006b66:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006b6a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8006b6e:	f7f9 fb8d 	bl	800028c <__adddf3>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	f107 0108 	add.w	r1, r7, #8
 8006b7a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006b7e:	4b99      	ldr	r3, [pc, #612]	; (8006de4 <scaraInitDuty+0x304>)
 8006b80:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006b84:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006b88:	f7f9 fb80 	bl	800028c <__adddf3>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	f107 0108 	add.w	r1, r7, #8
 8006b94:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006b98:	e01f      	b.n	8006bda <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006b9a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d118      	bne.n	8006bd4 <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 8006ba2:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8006ba6:	f107 0108 	add.w	r1, r7, #8
 8006baa:	e9c1 2308 	strd	r2, r3, [r1, #32]
			target_point.y 		= command.target_point.y;
 8006bae:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8006bb2:	f107 0108 	add.w	r1, r7, #8
 8006bb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.z 		= command.target_point.z;
 8006bba:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8006bbe:	f107 0108 	add.w	r1, r7, #8
 8006bc2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.roll	= command.target_point.roll;
 8006bc6:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006bca:	f107 0108 	add.w	r1, r7, #8
 8006bce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006bd2:	e002      	b.n	8006bda <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	f000 be68 	b.w	80078aa <scaraInitDuty+0xdca>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8006bda:	f107 0308 	add.w	r3, r7, #8
 8006bde:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006be2:	4b80      	ldr	r3, [pc, #512]	; (8006de4 <scaraInitDuty+0x304>)
 8006be4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006be8:	f7f9 fb4e 	bl	8000288 <__aeabi_dsub>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
		dir_angle = 1;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		if ( angle_s < 0) {
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006c06:	f7f9 ff69 	bl	8000adc <__aeabi_dcmplt>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <scaraInitDuty+0x136>
			dir_angle = -1;
 8006c10:	23ff      	movs	r3, #255	; 0xff
 8006c12:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006c16:	4b74      	ldr	r3, [pc, #464]	; (8006de8 <scaraInitDuty+0x308>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8006c1c:	4b71      	ldr	r3, [pc, #452]	; (8006de4 <scaraInitDuty+0x304>)
 8006c1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006c22:	4971      	ldr	r1, [pc, #452]	; (8006de8 <scaraInitDuty+0x308>)
 8006c24:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006c28:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8006c2c:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d120      	bne.n	8006c76 <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006c34:	4b6c      	ldr	r3, [pc, #432]	; (8006de8 <scaraInitDuty+0x308>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8006c3a:	4c6a      	ldr	r4, [pc, #424]	; (8006de4 <scaraInitDuty+0x304>)
 8006c3c:	f107 0208 	add.w	r2, r7, #8
 8006c40:	ab22      	add	r3, sp, #136	; 0x88
 8006c42:	4611      	mov	r1, r2
 8006c44:	2290      	movs	r2, #144	; 0x90
 8006c46:	4618      	mov	r0, r3
 8006c48:	f00e fc32 	bl	80154b0 <memcpy>
 8006c4c:	4668      	mov	r0, sp
 8006c4e:	f104 0308 	add.w	r3, r4, #8
 8006c52:	2288      	movs	r2, #136	; 0x88
 8006c54:	4619      	mov	r1, r3
 8006c56:	f00e fc2b 	bl	80154b0 <memcpy>
 8006c5a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006c5e:	4863      	ldr	r0, [pc, #396]	; (8006dec <scaraInitDuty+0x30c>)
 8006c60:	f000 fe32 	bl	80078c8 <scaraInitLine>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
			total_s = myDUTY.task.path.line.total_s;
 8006c6a:	4b5f      	ldr	r3, [pc, #380]	; (8006de8 <scaraInitDuty+0x308>)
 8006c6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006c70:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 8006c74:	e053      	b.n	8006d1e <scaraInitDuty+0x23e>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006c76:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d14c      	bne.n	8006d18 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006c7e:	4b59      	ldr	r3, [pc, #356]	; (8006de4 <scaraInitDuty+0x304>)
 8006c80:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006c84:	f107 0108 	add.w	r1, r7, #8
 8006c88:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006c8c:	4b55      	ldr	r3, [pc, #340]	; (8006de4 <scaraInitDuty+0x304>)
 8006c8e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006c92:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006c96:	f7f9 faf9 	bl	800028c <__adddf3>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006ca2:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <scaraInitDuty+0x304>)
 8006ca4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006ca8:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006cac:	f7f9 faee 	bl	800028c <__adddf3>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			center_point.z 		= positionCurrent.z;
 8006cb8:	4b4a      	ldr	r3, [pc, #296]	; (8006de4 <scaraInitDuty+0x304>)
 8006cba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006cbe:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006cc2:	4b49      	ldr	r3, [pc, #292]	; (8006de8 <scaraInitDuty+0x308>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006cc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006ccc:	4c45      	ldr	r4, [pc, #276]	; (8006de4 <scaraInitDuty+0x304>)
 8006cce:	936a      	str	r3, [sp, #424]	; 0x1a8
 8006cd0:	a846      	add	r0, sp, #280	; 0x118
 8006cd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006cd6:	2290      	movs	r2, #144	; 0x90
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f00e fbe9 	bl	80154b0 <memcpy>
 8006cde:	f107 0208 	add.w	r2, r7, #8
 8006ce2:	ab22      	add	r3, sp, #136	; 0x88
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	2290      	movs	r2, #144	; 0x90
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f00e fbe1 	bl	80154b0 <memcpy>
 8006cee:	4668      	mov	r0, sp
 8006cf0:	f104 0308 	add.w	r3, r4, #8
 8006cf4:	2288      	movs	r2, #136	; 0x88
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f00e fbda 	bl	80154b0 <memcpy>
 8006cfc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006d00:	483b      	ldr	r0, [pc, #236]	; (8006df0 <scaraInitDuty+0x310>)
 8006d02:	f000 fe95 	bl	8007a30 <scaraInitCircle>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8006d0c:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <scaraInitDuty+0x308>)
 8006d0e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8006d12:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 8006d16:	e002      	b.n	8006d1e <scaraInitDuty+0x23e>
//		}else if(DUTY_PATH_BEZIER_CURVE == command.path_type){
//			myDUTY.task.path.path_type = DUTY_PATH_BEZIER_CURVE;
//			myDUTY.task.path.line.z0 = command.target_point.z;
//		}
		}else {
			return SCARA_STATUS_ERROR_TASK;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	f000 bdc6 	b.w	80078aa <scaraInitDuty+0xdca>
		}

		if ( SCARA_STATUS_OK != status) {
 8006d1e:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <scaraInitDuty+0x24e>
			return status;
 8006d26:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006d2a:	f000 bdbe 	b.w	80078aa <scaraInitDuty+0xdca>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8006d2e:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 80bb 	bne.w	8006eae <scaraInitDuty+0x3ce>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006d38:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d161      	bne.n	8006e04 <scaraInitDuty+0x324>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006d40:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <scaraInitDuty+0x308>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006d48:	ed97 7bae 	vldr	d7, [r7, #696]	; 0x2b8
 8006d4c:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8006d50:	eeb0 2a46 	vmov.f32	s4, s12
 8006d54:	eef0 2a66 	vmov.f32	s5, s13
 8006d58:	eeb0 1a47 	vmov.f32	s2, s14
 8006d5c:	eef0 1a67 	vmov.f32	s3, s15
 8006d60:	2201      	movs	r2, #1
 8006d62:	ed97 0b50 	vldr	d0, [r7, #320]	; 0x140
 8006d66:	2104      	movs	r1, #4
 8006d68:	4822      	ldr	r0, [pc, #136]	; (8006df4 <scaraInitDuty+0x314>)
 8006d6a:	f001 f841 	bl	8007df0 <scaraInitLSPB>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <scaraInitDuty+0x308>)
 8006d76:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006d7a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <scaraInitDuty+0x308>)
 8006d80:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006d84:	4918      	ldr	r1, [pc, #96]	; (8006de8 <scaraInitDuty+0x308>)
 8006d86:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006d8a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d8e:	4b16      	ldr	r3, [pc, #88]	; (8006de8 <scaraInitDuty+0x308>)
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006d96:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7f9 fbc2 	bl	8000524 <__aeabi_i2d>
 8006da0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006da4:	f7f9 fc28 	bl	80005f8 <__aeabi_dmul>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	ec43 2b16 	vmov	d6, r2, r3
 8006db0:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <scaraInitDuty+0x308>)
 8006db2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006db6:	ed93 7b00 	vldr	d7, [r3]
 8006dba:	eeb0 1a47 	vmov.f32	s2, s14
 8006dbe:	eef0 1a67 	vmov.f32	s3, s15
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	eeb0 0a46 	vmov.f32	s0, s12
 8006dc8:	eef0 0a66 	vmov.f32	s1, s13
 8006dcc:	2105      	movs	r1, #5
 8006dce:	480a      	ldr	r0, [pc, #40]	; (8006df8 <scaraInitDuty+0x318>)
 8006dd0:	f000 ffc0 	bl	8007d54 <scaraInitLinear>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8006dda:	e1db      	b.n	8007194 <scaraInitDuty+0x6b4>
 8006ddc:	f3af 8000 	nop.w
 8006de0:	40668000 	.word	0x40668000
 8006de4:	20011420 	.word	0x20011420
 8006de8:	200108c0 	.word	0x200108c0
 8006dec:	200108d0 	.word	0x200108d0
 8006df0:	20010940 	.word	0x20010940
 8006df4:	200109d8 	.word	0x200109d8
 8006df8:	20010ca8 	.word	0x20010ca8
 8006dfc:	60000000 	.word	0x60000000
 8006e00:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006e04:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d14d      	bne.n	8006ea8 <scaraInitDuty+0x3c8>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006e0c:	4bb9      	ldr	r3, [pc, #740]	; (80070f4 <scaraInitDuty+0x614>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006e14:	ed97 7bae 	vldr	d7, [r7, #696]	; 0x2b8
 8006e18:	ed97 6bb0 	vldr	d6, [r7, #704]	; 0x2c0
 8006e1c:	eeb0 2a46 	vmov.f32	s4, s12
 8006e20:	eef0 2a66 	vmov.f32	s5, s13
 8006e24:	eeb0 1a47 	vmov.f32	s2, s14
 8006e28:	eef0 1a67 	vmov.f32	s3, s15
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	ed97 0b50 	vldr	d0, [r7, #320]	; 0x140
 8006e32:	2104      	movs	r1, #4
 8006e34:	48b0      	ldr	r0, [pc, #704]	; (80070f8 <scaraInitDuty+0x618>)
 8006e36:	f000 ffdb 	bl	8007df0 <scaraInitLSPB>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006e40:	4aac      	ldr	r2, [pc, #688]	; (80070f4 <scaraInitDuty+0x614>)
 8006e42:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006e46:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006e4a:	4baa      	ldr	r3, [pc, #680]	; (80070f4 <scaraInitDuty+0x614>)
 8006e4c:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006e50:	49a8      	ldr	r1, [pc, #672]	; (80070f4 <scaraInitDuty+0x614>)
 8006e52:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006e56:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006e5a:	4ba6      	ldr	r3, [pc, #664]	; (80070f4 <scaraInitDuty+0x614>)
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006e62:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7f9 fb5c 	bl	8000524 <__aeabi_i2d>
 8006e6c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006e70:	f7f9 fbc2 	bl	80005f8 <__aeabi_dmul>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	ec43 2b16 	vmov	d6, r2, r3
 8006e7c:	4b9d      	ldr	r3, [pc, #628]	; (80070f4 <scaraInitDuty+0x614>)
 8006e7e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006e82:	ed93 7b00 	vldr	d7, [r3]
 8006e86:	eeb0 1a47 	vmov.f32	s2, s14
 8006e8a:	eef0 1a67 	vmov.f32	s3, s15
 8006e8e:	2203      	movs	r2, #3
 8006e90:	eeb0 0a46 	vmov.f32	s0, s12
 8006e94:	eef0 0a66 	vmov.f32	s1, s13
 8006e98:	2105      	movs	r1, #5
 8006e9a:	4898      	ldr	r0, [pc, #608]	; (80070fc <scaraInitDuty+0x61c>)
 8006e9c:	f000 ff5a 	bl	8007d54 <scaraInitLinear>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8006ea6:	e175      	b.n	8007194 <scaraInitDuty+0x6b4>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f000 bcfe 	b.w	80078aa <scaraInitDuty+0xdca>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006eae:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	f040 80a7 	bne.w	8007006 <scaraInitDuty+0x526>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006eb8:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d14d      	bne.n	8006f5c <scaraInitDuty+0x47c>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006ec0:	4b8c      	ldr	r3, [pc, #560]	; (80070f4 <scaraInitDuty+0x614>)
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006ec8:	ed97 7bae 	vldr	d7, [r7, #696]	; 0x2b8
 8006ecc:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8006ed0:	eeb0 2a46 	vmov.f32	s4, s12
 8006ed4:	eef0 2a66 	vmov.f32	s5, s13
 8006ed8:	eeb0 1a47 	vmov.f32	s2, s14
 8006edc:	eef0 1a67 	vmov.f32	s3, s15
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	ed97 0b50 	vldr	d0, [r7, #320]	; 0x140
 8006ee6:	2104      	movs	r1, #4
 8006ee8:	4885      	ldr	r0, [pc, #532]	; (8007100 <scaraInitDuty+0x620>)
 8006eea:	f001 f9d9 	bl	80082a0 <scaraInitScurve>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006ef4:	4a7f      	ldr	r2, [pc, #508]	; (80070f4 <scaraInitDuty+0x614>)
 8006ef6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006efa:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006efe:	4b7d      	ldr	r3, [pc, #500]	; (80070f4 <scaraInitDuty+0x614>)
 8006f00:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006f04:	497b      	ldr	r1, [pc, #492]	; (80070f4 <scaraInitDuty+0x614>)
 8006f06:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006f0a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006f0e:	4b79      	ldr	r3, [pc, #484]	; (80070f4 <scaraInitDuty+0x614>)
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006f16:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7f9 fb02 	bl	8000524 <__aeabi_i2d>
 8006f20:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006f24:	f7f9 fb68 	bl	80005f8 <__aeabi_dmul>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	ec43 2b16 	vmov	d6, r2, r3
 8006f30:	4b70      	ldr	r3, [pc, #448]	; (80070f4 <scaraInitDuty+0x614>)
 8006f32:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f36:	ed93 7b00 	vldr	d7, [r3]
 8006f3a:	eeb0 1a47 	vmov.f32	s2, s14
 8006f3e:	eef0 1a67 	vmov.f32	s3, s15
 8006f42:	2203      	movs	r2, #3
 8006f44:	eeb0 0a46 	vmov.f32	s0, s12
 8006f48:	eef0 0a66 	vmov.f32	s1, s13
 8006f4c:	2105      	movs	r1, #5
 8006f4e:	486b      	ldr	r0, [pc, #428]	; (80070fc <scaraInitDuty+0x61c>)
 8006f50:	f000 ff00 	bl	8007d54 <scaraInitLinear>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8006f5a:	e11b      	b.n	8007194 <scaraInitDuty+0x6b4>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006f5c:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d14d      	bne.n	8007000 <scaraInitDuty+0x520>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006f64:	4b63      	ldr	r3, [pc, #396]	; (80070f4 <scaraInitDuty+0x614>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006f6c:	ed97 7bae 	vldr	d7, [r7, #696]	; 0x2b8
 8006f70:	ed97 6bb0 	vldr	d6, [r7, #704]	; 0x2c0
 8006f74:	eeb0 2a46 	vmov.f32	s4, s12
 8006f78:	eef0 2a66 	vmov.f32	s5, s13
 8006f7c:	eeb0 1a47 	vmov.f32	s2, s14
 8006f80:	eef0 1a67 	vmov.f32	s3, s15
 8006f84:	2200      	movs	r2, #0
 8006f86:	ed97 0b50 	vldr	d0, [r7, #320]	; 0x140
 8006f8a:	2104      	movs	r1, #4
 8006f8c:	485c      	ldr	r0, [pc, #368]	; (8007100 <scaraInitDuty+0x620>)
 8006f8e:	f001 f987 	bl	80082a0 <scaraInitScurve>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006f98:	4a56      	ldr	r2, [pc, #344]	; (80070f4 <scaraInitDuty+0x614>)
 8006f9a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006f9e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006fa2:	4b54      	ldr	r3, [pc, #336]	; (80070f4 <scaraInitDuty+0x614>)
 8006fa4:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006fa8:	4952      	ldr	r1, [pc, #328]	; (80070f4 <scaraInitDuty+0x614>)
 8006faa:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006fae:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006fb2:	4b50      	ldr	r3, [pc, #320]	; (80070f4 <scaraInitDuty+0x614>)
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006fba:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7f9 fab0 	bl	8000524 <__aeabi_i2d>
 8006fc4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	ec43 2b16 	vmov	d6, r2, r3
 8006fd4:	4b47      	ldr	r3, [pc, #284]	; (80070f4 <scaraInitDuty+0x614>)
 8006fd6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fda:	ed93 7b00 	vldr	d7, [r3]
 8006fde:	eeb0 1a47 	vmov.f32	s2, s14
 8006fe2:	eef0 1a67 	vmov.f32	s3, s15
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	eeb0 0a46 	vmov.f32	s0, s12
 8006fec:	eef0 0a66 	vmov.f32	s1, s13
 8006ff0:	2105      	movs	r1, #5
 8006ff2:	4842      	ldr	r0, [pc, #264]	; (80070fc <scaraInitDuty+0x61c>)
 8006ff4:	f000 feae 	bl	8007d54 <scaraInitLinear>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8006ffe:	e0c9      	b.n	8007194 <scaraInitDuty+0x6b4>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007000:	2308      	movs	r3, #8
 8007002:	f000 bc52 	b.w	80078aa <scaraInitDuty+0xdca>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8007006:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800700a:	2b02      	cmp	r3, #2
 800700c:	d17c      	bne.n	8007108 <scaraInitDuty+0x628>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 800700e:	4a39      	ldr	r2, [pc, #228]	; (80070f4 <scaraInitDuty+0x614>)
 8007010:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007014:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007018:	4b36      	ldr	r3, [pc, #216]	; (80070f4 <scaraInitDuty+0x614>)
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007020:	4b34      	ldr	r3, [pc, #208]	; (80070f4 <scaraInitDuty+0x614>)
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8007028:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 800702c:	2b03      	cmp	r3, #3
 800702e:	d118      	bne.n	8007062 <scaraInitDuty+0x582>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8007030:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007034:	603b      	str	r3, [r7, #0]
 8007036:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800703a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800703e:	607b      	str	r3, [r7, #4]
 8007040:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8007044:	eeb0 1a47 	vmov.f32	s2, s14
 8007048:	eef0 1a67 	vmov.f32	s3, s15
 800704c:	2203      	movs	r2, #3
 800704e:	ed97 0b00 	vldr	d0, [r7]
 8007052:	2104      	movs	r1, #4
 8007054:	482b      	ldr	r0, [pc, #172]	; (8007104 <scaraInitDuty+0x624>)
 8007056:	f000 fe7d 	bl	8007d54 <scaraInitLinear>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8007060:	e01d      	b.n	800709e <scaraInitDuty+0x5be>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8007062:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8007066:	2b02      	cmp	r3, #2
 8007068:	d116      	bne.n	8007098 <scaraInitDuty+0x5b8>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 800706a:	f8d7 5140 	ldr.w	r5, [r7, #320]	; 0x140
 800706e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007072:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8007076:	ed97 7bae 	vldr	d7, [r7, #696]	; 0x2b8
 800707a:	eeb0 1a47 	vmov.f32	s2, s14
 800707e:	eef0 1a67 	vmov.f32	s3, s15
 8007082:	2202      	movs	r2, #2
 8007084:	ec46 5b10 	vmov	d0, r5, r6
 8007088:	2104      	movs	r1, #4
 800708a:	481e      	ldr	r0, [pc, #120]	; (8007104 <scaraInitDuty+0x624>)
 800708c:	f000 fe62 	bl	8007d54 <scaraInitLinear>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8007096:	e002      	b.n	800709e <scaraInitDuty+0x5be>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007098:	2308      	movs	r3, #8
 800709a:	f000 bc06 	b.w	80078aa <scaraInitDuty+0xdca>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <scaraInitDuty+0x614>)
 80070a0:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 80070a4:	4913      	ldr	r1, [pc, #76]	; (80070f4 <scaraInitDuty+0x614>)
 80070a6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80070aa:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80070ae:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7f9 fa36 	bl	8000524 <__aeabi_i2d>
 80070b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	ec43 2b16 	vmov	d6, r2, r3
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <scaraInitDuty+0x614>)
 80070ca:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80070ce:	ed93 7b00 	vldr	d7, [r3]
 80070d2:	eeb0 1a47 	vmov.f32	s2, s14
 80070d6:	eef0 1a67 	vmov.f32	s3, s15
 80070da:	2203      	movs	r2, #3
 80070dc:	eeb0 0a46 	vmov.f32	s0, s12
 80070e0:	eef0 0a66 	vmov.f32	s1, s13
 80070e4:	2105      	movs	r1, #5
 80070e6:	4805      	ldr	r0, [pc, #20]	; (80070fc <scaraInitDuty+0x61c>)
 80070e8:	f000 fe34 	bl	8007d54 <scaraInitLinear>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 80070f2:	e04f      	b.n	8007194 <scaraInitDuty+0x6b4>
 80070f4:	200108c0 	.word	0x200108c0
 80070f8:	200109d8 	.word	0x200109d8
 80070fc:	20010ca8 	.word	0x20010ca8
 8007100:	20010a58 	.word	0x20010a58
 8007104:	20010b28 	.word	0x20010b28
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8007108:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800710c:	2b03      	cmp	r3, #3
 800710e:	d13f      	bne.n	8007190 <scaraInitDuty+0x6b0>
			status1 = SCARA_STATUS_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007116:	4a96      	ldr	r2, [pc, #600]	; (8007370 <scaraInitDuty+0x890>)
 8007118:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800711c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8007120:	4b93      	ldr	r3, [pc, #588]	; (8007370 <scaraInitDuty+0x890>)
 8007122:	2203      	movs	r2, #3
 8007124:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007128:	4b91      	ldr	r3, [pc, #580]	; (8007370 <scaraInitDuty+0x890>)
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8007130:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8007134:	498e      	ldr	r1, [pc, #568]	; (8007370 <scaraInitDuty+0x890>)
 8007136:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800713a:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 800713e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8007142:	4618      	mov	r0, r3
 8007144:	f7f9 f9ee 	bl	8000524 <__aeabi_i2d>
 8007148:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800714c:	f7f9 fa54 	bl	80005f8 <__aeabi_dmul>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	ec43 2b18 	vmov	d8, r2, r3
 8007158:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800715c:	4b85      	ldr	r3, [pc, #532]	; (8007374 <scaraInitDuty+0x894>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f7f9 f891 	bl	8000288 <__aeabi_dsub>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	ec43 2b17 	vmov	d7, r2, r3
 800716e:	eeb0 1a47 	vmov.f32	s2, s14
 8007172:	eef0 1a67 	vmov.f32	s3, s15
 8007176:	2203      	movs	r2, #3
 8007178:	eeb0 0a48 	vmov.f32	s0, s16
 800717c:	eef0 0a68 	vmov.f32	s1, s17
 8007180:	2105      	movs	r1, #5
 8007182:	487d      	ldr	r0, [pc, #500]	; (8007378 <scaraInitDuty+0x898>)
 8007184:	f000 fde6 	bl	8007d54 <scaraInitLinear>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 800718e:	e001      	b.n	8007194 <scaraInitDuty+0x6b4>
//			myDUTY.time_total = command.time_total;
//			status1 = SCARA_STATUS_OK;
//			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
//		}
		else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007190:	2305      	movs	r3, #5
 8007192:	e38a      	b.n	80078aa <scaraInitDuty+0xdca>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8007194:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <scaraInitDuty+0x6c2>
			return status1;
 800719c:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80071a0:	e383      	b.n	80078aa <scaraInitDuty+0xdca>
		}
		if ( SCARA_STATUS_OK != status2) {
 80071a2:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 837e 	beq.w	80078a8 <scaraInitDuty+0xdc8>
			return status2;
 80071ac:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 80071b0:	e37b      	b.n	80078aa <scaraInitDuty+0xdca>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80071b2:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	f040 8374 	bne.w	80078a4 <scaraInitDuty+0xdc4>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80071bc:	4b6c      	ldr	r3, [pc, #432]	; (8007370 <scaraInitDuty+0x890>)
 80071be:	2201      	movs	r2, #1
 80071c0:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80071c2:	4b6e      	ldr	r3, [pc, #440]	; (800737c <scaraInitDuty+0x89c>)
 80071c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80071c8:	4969      	ldr	r1, [pc, #420]	; (8007370 <scaraInitDuty+0x890>)
 80071ca:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 80071ce:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80071d2:	4b6a      	ldr	r3, [pc, #424]	; (800737c <scaraInitDuty+0x89c>)
 80071d4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80071d8:	4965      	ldr	r1, [pc, #404]	; (8007370 <scaraInitDuty+0x890>)
 80071da:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 80071de:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80071e2:	4b66      	ldr	r3, [pc, #408]	; (800737c <scaraInitDuty+0x89c>)
 80071e4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80071e8:	4961      	ldr	r1, [pc, #388]	; (8007370 <scaraInitDuty+0x890>)
 80071ea:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 80071ee:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80071f2:	4b62      	ldr	r3, [pc, #392]	; (800737c <scaraInitDuty+0x89c>)
 80071f4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80071f8:	495d      	ldr	r1, [pc, #372]	; (8007370 <scaraInitDuty+0x890>)
 80071fa:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 80071fe:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8007202:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8007206:	a358      	add	r3, pc, #352	; (adr r3, 8007368 <scaraInitDuty+0x888>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4610      	mov	r0, r2
 8007216:	4619      	mov	r1, r3
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	4b58      	ldr	r3, [pc, #352]	; (8007380 <scaraInitDuty+0x8a0>)
 800721e:	f7f9 fb15 	bl	800084c <__aeabi_ddiv>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800722a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d12c      	bne.n	800728c <scaraInitDuty+0x7ac>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8007232:	4b52      	ldr	r3, [pc, #328]	; (800737c <scaraInitDuty+0x89c>)
 8007234:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007238:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800723c:	f7f9 f826 	bl	800028c <__adddf3>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8007248:	4b4c      	ldr	r3, [pc, #304]	; (800737c <scaraInitDuty+0x89c>)
 800724a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800724e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8007252:	f7f9 f81b 	bl	800028c <__adddf3>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			target_point.z 		= positionCurrent.z + command.target_point.z;
 800725e:	4b47      	ldr	r3, [pc, #284]	; (800737c <scaraInitDuty+0x89c>)
 8007260:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007264:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8007268:	f7f9 f810 	bl	800028c <__adddf3>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8007274:	4b41      	ldr	r3, [pc, #260]	; (800737c <scaraInitDuty+0x89c>)
 8007276:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800727a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800727e:	f7f9 f805 	bl	800028c <__adddf3>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 800728a:	e016      	b.n	80072ba <scaraInitDuty+0x7da>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800728c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d110      	bne.n	80072b6 <scaraInitDuty+0x7d6>
			target_point.x 		= command.target_point.x;
 8007294:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8007298:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
			target_point.y 		= command.target_point.y;
 800729c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80072a0:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			target_point.z 		= command.target_point.z;
 80072a4:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80072a8:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			target_point.roll	= command.target_point.roll;
 80072ac:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80072b0:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 80072b4:	e001      	b.n	80072ba <scaraInitDuty+0x7da>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80072b6:	230c      	movs	r3, #12
 80072b8:	e2f7      	b.n	80078aa <scaraInitDuty+0xdca>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80072ba:	4c30      	ldr	r4, [pc, #192]	; (800737c <scaraInitDuty+0x89c>)
 80072bc:	f107 0598 	add.w	r5, r7, #152	; 0x98
 80072c0:	4668      	mov	r0, sp
 80072c2:	f104 0308 	add.w	r3, r4, #8
 80072c6:	2288      	movs	r2, #136	; 0x88
 80072c8:	4619      	mov	r1, r3
 80072ca:	f00e f8f1 	bl	80154b0 <memcpy>
 80072ce:	e894 000c 	ldmia.w	r4, {r2, r3}
 80072d2:	4628      	mov	r0, r5
 80072d4:	f7fe f8c4 	bl	8005460 <kinematicInverse>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <scaraInitDuty+0x802>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80072de:	2307      	movs	r3, #7
 80072e0:	e2e3      	b.n	80078aa <scaraInitDuty+0xdca>
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80072e2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80072e6:	4b25      	ldr	r3, [pc, #148]	; (800737c <scaraInitDuty+0x89c>)
 80072e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80072ec:	f7f8 ffcc 	bl	8000288 <__aeabi_dsub>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	f107 0108 	add.w	r1, r7, #8
 80072f8:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80072fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007300:	4b1e      	ldr	r3, [pc, #120]	; (800737c <scaraInitDuty+0x89c>)
 8007302:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007306:	f7f8 ffbf 	bl	8000288 <__aeabi_dsub>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	f107 0108 	add.w	r1, r7, #8
 8007312:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 8007316:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800731a:	4b18      	ldr	r3, [pc, #96]	; (800737c <scaraInitDuty+0x89c>)
 800731c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007320:	f7f8 ffb2 	bl	8000288 <__aeabi_dsub>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	f107 0108 	add.w	r1, r7, #8
 800732c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007330:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8007334:	4b11      	ldr	r3, [pc, #68]	; (800737c <scaraInitDuty+0x89c>)
 8007336:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800733a:	f7f8 ffa5 	bl	8000288 <__aeabi_dsub>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	f107 0108 	add.w	r1, r7, #8
 8007346:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800734a:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 8156 	bne.w	8007600 <scaraInitDuty+0xb20>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007354:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8007358:	2b01      	cmp	r3, #1
 800735a:	d171      	bne.n	8007440 <scaraInitDuty+0x960>
				for ( uint8_t i = 0; i < 4; i++) {
 800735c:	2300      	movs	r3, #0
 800735e:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8007362:	e061      	b.n	8007428 <scaraInitDuty+0x948>
 8007364:	f3af 8000 	nop.w
 8007368:	60000000 	.word	0x60000000
 800736c:	400921fb 	.word	0x400921fb
 8007370:	200108c0 	.word	0x200108c0
 8007374:	200106c8 	.word	0x200106c8
 8007378:	20010ca8 	.word	0x20010ca8
 800737c:	20011420 	.word	0x20011420
 8007380:	40668000 	.word	0x40668000
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007384:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
 8007388:	49d3      	ldr	r1, [pc, #844]	; (80076d8 <scaraInitDuty+0xbf8>)
 800738a:	4613      	mov	r3, r2
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4413      	add	r3, r2
 8007390:	01db      	lsls	r3, r3, #7
 8007392:	440b      	add	r3, r1
 8007394:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800739c:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
 80073a0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80073a4:	4ccc      	ldr	r4, [pc, #816]	; (80076d8 <scaraInitDuty+0xbf8>)
 80073a6:	4613      	mov	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	01db      	lsls	r3, r3, #7
 80073ae:	4423      	add	r3, r4
 80073b0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80073b4:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80073b8:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
 80073bc:	4613      	mov	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4413      	add	r3, r2
 80073c2:	01db      	lsls	r3, r3, #7
 80073c4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80073c8:	4ac3      	ldr	r2, [pc, #780]	; (80076d8 <scaraInitDuty+0xbf8>)
 80073ca:	1898      	adds	r0, r3, r2
 80073cc:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 80073d0:	4ac2      	ldr	r2, [pc, #776]	; (80076dc <scaraInitDuty+0xbfc>)
 80073d2:	5cd1      	ldrb	r1, [r2, r3]
 80073d4:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 80073d8:	f107 0208 	add.w	r2, r7, #8
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	4413      	add	r3, r2
 80073e0:	ed93 7b00 	vldr	d7, [r3]
 80073e4:	ed97 6bae 	vldr	d6, [r7, #696]	; 0x2b8
 80073e8:	ed97 5b64 	vldr	d5, [r7, #400]	; 0x190
 80073ec:	eeb0 2a45 	vmov.f32	s4, s10
 80073f0:	eef0 2a65 	vmov.f32	s5, s11
 80073f4:	eeb0 1a46 	vmov.f32	s2, s12
 80073f8:	eef0 1a66 	vmov.f32	s3, s13
 80073fc:	2201      	movs	r2, #1
 80073fe:	eeb0 0a47 	vmov.f32	s0, s14
 8007402:	eef0 0a67 	vmov.f32	s1, s15
 8007406:	f000 fcf3 	bl	8007df0 <scaraInitLSPB>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007410:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <scaraInitDuty+0x93e>
						return status1;
 8007418:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 800741c:	e245      	b.n	80078aa <scaraInitDuty+0xdca>
				for ( uint8_t i = 0; i < 4; i++) {
 800741e:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8007422:	3301      	adds	r3, #1
 8007424:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8007428:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800742c:	2b03      	cmp	r3, #3
 800742e:	d9a9      	bls.n	8007384 <scaraInitDuty+0x8a4>
					}
				}
				myDUTY.time_total = command.time_total;
 8007430:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8007434:	49a8      	ldr	r1, [pc, #672]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007436:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800743a:	e9c1 2300 	strd	r2, r3, [r1]
 800743e:	e233      	b.n	80078a8 <scaraInitDuty+0xdc8>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007440:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 80d9 	bne.w	80075fc <scaraInitDuty+0xb1c>
				for ( uint8_t i = 0; i < 4; i++) {
 800744a:	2300      	movs	r3, #0
 800744c:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 8007450:	e03c      	b.n	80074cc <scaraInitDuty+0x9ec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007452:	f897 213d 	ldrb.w	r2, [r7, #317]	; 0x13d
 8007456:	49a0      	ldr	r1, [pc, #640]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007458:	4613      	mov	r3, r2
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4413      	add	r3, r2
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	440b      	add	r3, r1
 8007462:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800746a:	f897 213d 	ldrb.w	r2, [r7, #317]	; 0x13d
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	01db      	lsls	r3, r3, #7
 8007476:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800747a:	4a97      	ldr	r2, [pc, #604]	; (80076d8 <scaraInitDuty+0xbf8>)
 800747c:	1898      	adds	r0, r3, r2
 800747e:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8007482:	4a96      	ldr	r2, [pc, #600]	; (80076dc <scaraInitDuty+0xbfc>)
 8007484:	5cd1      	ldrb	r1, [r2, r3]
 8007486:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 800748a:	f107 0208 	add.w	r2, r7, #8
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	4413      	add	r3, r2
 8007492:	ed93 7b00 	vldr	d7, [r3]
 8007496:	ed97 6bae 	vldr	d6, [r7, #696]	; 0x2b8
 800749a:	ed97 5bb0 	vldr	d5, [r7, #704]	; 0x2c0
 800749e:	eeb0 2a45 	vmov.f32	s4, s10
 80074a2:	eef0 2a65 	vmov.f32	s5, s11
 80074a6:	eeb0 1a46 	vmov.f32	s2, s12
 80074aa:	eef0 1a66 	vmov.f32	s3, s13
 80074ae:	2200      	movs	r2, #0
 80074b0:	eeb0 0a47 	vmov.f32	s0, s14
 80074b4:	eef0 0a67 	vmov.f32	s1, s15
 80074b8:	f000 fc9a 	bl	8007df0 <scaraInitLSPB>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
				for ( uint8_t i = 0; i < 4; i++) {
 80074c2:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80074c6:	3301      	adds	r3, #1
 80074c8:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 80074cc:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d9be      	bls.n	8007452 <scaraInitDuty+0x972>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80074d4:	4b80      	ldr	r3, [pc, #512]	; (80076d8 <scaraInitDuty+0xbf8>)
 80074d6:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
 80074ec:	e02b      	b.n	8007546 <scaraInitDuty+0xa66>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80074ee:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 80074f2:	4979      	ldr	r1, [pc, #484]	; (80076d8 <scaraInitDuty+0xbf8>)
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	01db      	lsls	r3, r3, #7
 80074fc:	440b      	add	r3, r1
 80074fe:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007506:	4b74      	ldr	r3, [pc, #464]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007508:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f7f9 fb02 	bl	8000b18 <__aeabi_dcmpgt>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d010      	beq.n	800753c <scaraInitDuty+0xa5c>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800751a:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 800751e:	496e      	ldr	r1, [pc, #440]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007520:	4613      	mov	r3, r2
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	01db      	lsls	r3, r3, #7
 8007528:	440b      	add	r3, r1
 800752a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	4969      	ldr	r1, [pc, #420]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007534:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007538:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 800753c:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8007540:	3301      	adds	r3, #1
 8007542:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
 8007546:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 800754a:	2b03      	cmp	r3, #3
 800754c:	d9cf      	bls.n	80074ee <scaraInitDuty+0xa0e>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 800754e:	2300      	movs	r3, #0
 8007550:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007554:	e04d      	b.n	80075f2 <scaraInitDuty+0xb12>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007556:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800755a:	495f      	ldr	r1, [pc, #380]	; (80076d8 <scaraInitDuty+0xbf8>)
 800755c:	4613      	mov	r3, r2
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4413      	add	r3, r2
 8007562:	01db      	lsls	r3, r3, #7
 8007564:	440b      	add	r3, r1
 8007566:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800756e:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8007572:	4b59      	ldr	r3, [pc, #356]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007574:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800757c:	4c56      	ldr	r4, [pc, #344]	; (80076d8 <scaraInitDuty+0xbf8>)
 800757e:	4613      	mov	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4413      	add	r3, r2
 8007584:	01db      	lsls	r3, r3, #7
 8007586:	4423      	add	r3, r4
 8007588:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800758c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007590:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8007594:	4613      	mov	r3, r2
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	4413      	add	r3, r2
 800759a:	01db      	lsls	r3, r3, #7
 800759c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80075a0:	4a4d      	ldr	r2, [pc, #308]	; (80076d8 <scaraInitDuty+0xbf8>)
 80075a2:	1898      	adds	r0, r3, r2
 80075a4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80075a8:	4a4c      	ldr	r2, [pc, #304]	; (80076dc <scaraInitDuty+0xbfc>)
 80075aa:	5cd1      	ldrb	r1, [r2, r3]
 80075ac:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80075b0:	f107 0208 	add.w	r2, r7, #8
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	4413      	add	r3, r2
 80075b8:	ed93 7b00 	vldr	d7, [r3]
 80075bc:	ed97 6bae 	vldr	d6, [r7, #696]	; 0x2b8
 80075c0:	ed97 5bb0 	vldr	d5, [r7, #704]	; 0x2c0
 80075c4:	eeb0 2a45 	vmov.f32	s4, s10
 80075c8:	eef0 2a65 	vmov.f32	s5, s11
 80075cc:	eeb0 1a46 	vmov.f32	s2, s12
 80075d0:	eef0 1a66 	vmov.f32	s3, s13
 80075d4:	2201      	movs	r2, #1
 80075d6:	eeb0 0a47 	vmov.f32	s0, s14
 80075da:	eef0 0a67 	vmov.f32	s1, s15
 80075de:	f000 fc07 	bl	8007df0 <scaraInitLSPB>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
				for ( uint8_t i = 0; i < 4; i++) {
 80075e8:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80075ec:	3301      	adds	r3, #1
 80075ee:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80075f2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d9ad      	bls.n	8007556 <scaraInitDuty+0xa76>
 80075fa:	e155      	b.n	80078a8 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80075fc:	2308      	movs	r3, #8
 80075fe:	e154      	b.n	80078aa <scaraInitDuty+0xdca>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8007600:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8007604:	2b01      	cmp	r3, #1
 8007606:	f040 814b 	bne.w	80078a0 <scaraInitDuty+0xdc0>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800760a:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 800760e:	2b01      	cmp	r3, #1
 8007610:	d166      	bne.n	80076e0 <scaraInitDuty+0xc00>
				for ( uint8_t i = 0; i < 4; i++) {
 8007612:	2300      	movs	r3, #0
 8007614:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8007618:	e051      	b.n	80076be <scaraInitDuty+0xbde>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800761a:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 800761e:	492e      	ldr	r1, [pc, #184]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007620:	4613      	mov	r3, r2
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4413      	add	r3, r2
 8007626:	01db      	lsls	r3, r3, #7
 8007628:	440b      	add	r3, r1
 800762a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800762e:	2201      	movs	r2, #1
 8007630:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8007632:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 8007636:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800763a:	4c27      	ldr	r4, [pc, #156]	; (80076d8 <scaraInitDuty+0xbf8>)
 800763c:	4613      	mov	r3, r2
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	4413      	add	r3, r2
 8007642:	01db      	lsls	r3, r3, #7
 8007644:	4423      	add	r3, r4
 8007646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764a:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800764e:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	01db      	lsls	r3, r3, #7
 800765a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800765e:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <scaraInitDuty+0xbf8>)
 8007660:	1898      	adds	r0, r3, r2
 8007662:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8007666:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <scaraInitDuty+0xbfc>)
 8007668:	5cd1      	ldrb	r1, [r2, r3]
 800766a:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800766e:	f107 0208 	add.w	r2, r7, #8
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	4413      	add	r3, r2
 8007676:	ed93 7b00 	vldr	d7, [r3]
 800767a:	ed97 6bae 	vldr	d6, [r7, #696]	; 0x2b8
 800767e:	ed97 5b64 	vldr	d5, [r7, #400]	; 0x190
 8007682:	eeb0 2a45 	vmov.f32	s4, s10
 8007686:	eef0 2a65 	vmov.f32	s5, s11
 800768a:	eeb0 1a46 	vmov.f32	s2, s12
 800768e:	eef0 1a66 	vmov.f32	s3, s13
 8007692:	2201      	movs	r2, #1
 8007694:	eeb0 0a47 	vmov.f32	s0, s14
 8007698:	eef0 0a67 	vmov.f32	s1, s15
 800769c:	f000 fe00 	bl	80082a0 <scaraInitScurve>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80076a6:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <scaraInitDuty+0xbd4>
						return status1;
 80076ae:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80076b2:	e0fa      	b.n	80078aa <scaraInitDuty+0xdca>
				for ( uint8_t i = 0; i < 4; i++) {
 80076b4:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80076b8:	3301      	adds	r3, #1
 80076ba:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 80076be:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d9a9      	bls.n	800761a <scaraInitDuty+0xb3a>
					}
				}
				myDUTY.time_total = command.time_total;
 80076c6:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80076ca:	4903      	ldr	r1, [pc, #12]	; (80076d8 <scaraInitDuty+0xbf8>)
 80076cc:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80076d0:	e9c1 2300 	strd	r2, r3, [r1]
 80076d4:	e0e8      	b.n	80078a8 <scaraInitDuty+0xdc8>
 80076d6:	bf00      	nop
 80076d8:	200108c0 	.word	0x200108c0
 80076dc:	20004088 	.word	0x20004088
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80076e0:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f040 80d9 	bne.w	800789c <scaraInitDuty+0xdbc>
				for ( uint8_t i = 0; i < 4; i++) {
 80076ea:	2300      	movs	r3, #0
 80076ec:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 80076f0:	e03c      	b.n	800776c <scaraInitDuty+0xc8c>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80076f2:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 80076f6:	4972      	ldr	r1, [pc, #456]	; (80078c0 <scaraInitDuty+0xde0>)
 80076f8:	4613      	mov	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	01db      	lsls	r3, r3, #7
 8007700:	440b      	add	r3, r1
 8007702:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007706:	2201      	movs	r2, #1
 8007708:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800770a:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 800770e:	4613      	mov	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4413      	add	r3, r2
 8007714:	01db      	lsls	r3, r3, #7
 8007716:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800771a:	4a69      	ldr	r2, [pc, #420]	; (80078c0 <scaraInitDuty+0xde0>)
 800771c:	1898      	adds	r0, r3, r2
 800771e:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8007722:	4a68      	ldr	r2, [pc, #416]	; (80078c4 <scaraInitDuty+0xde4>)
 8007724:	5cd1      	ldrb	r1, [r2, r3]
 8007726:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800772a:	f107 0208 	add.w	r2, r7, #8
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	4413      	add	r3, r2
 8007732:	ed93 7b00 	vldr	d7, [r3]
 8007736:	ed97 6bae 	vldr	d6, [r7, #696]	; 0x2b8
 800773a:	ed97 5bb0 	vldr	d5, [r7, #704]	; 0x2c0
 800773e:	eeb0 2a45 	vmov.f32	s4, s10
 8007742:	eef0 2a65 	vmov.f32	s5, s11
 8007746:	eeb0 1a46 	vmov.f32	s2, s12
 800774a:	eef0 1a66 	vmov.f32	s3, s13
 800774e:	2200      	movs	r2, #0
 8007750:	eeb0 0a47 	vmov.f32	s0, s14
 8007754:	eef0 0a67 	vmov.f32	s1, s15
 8007758:	f000 fda2 	bl	80082a0 <scaraInitScurve>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
				for ( uint8_t i = 0; i < 4; i++) {
 8007762:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8007766:	3301      	adds	r3, #1
 8007768:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 800776c:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8007770:	2b03      	cmp	r3, #3
 8007772:	d9be      	bls.n	80076f2 <scaraInitDuty+0xc12>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007774:	4b52      	ldr	r3, [pc, #328]	; (80078c0 <scaraInitDuty+0xde0>)
 8007776:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 800777a:	f04f 0200 	mov.w	r2, #0
 800777e:	f04f 0300 	mov.w	r3, #0
 8007782:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007786:	2300      	movs	r3, #0
 8007788:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 800778c:	e02b      	b.n	80077e6 <scaraInitDuty+0xd06>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 800778e:	f897 2138 	ldrb.w	r2, [r7, #312]	; 0x138
 8007792:	494b      	ldr	r1, [pc, #300]	; (80078c0 <scaraInitDuty+0xde0>)
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	01db      	lsls	r3, r3, #7
 800779c:	440b      	add	r3, r1
 800779e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077a6:	4b46      	ldr	r3, [pc, #280]	; (80078c0 <scaraInitDuty+0xde0>)
 80077a8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f7f9 f9b2 	bl	8000b18 <__aeabi_dcmpgt>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <scaraInitDuty+0xcfc>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80077ba:	f897 2138 	ldrb.w	r2, [r7, #312]	; 0x138
 80077be:	4940      	ldr	r1, [pc, #256]	; (80078c0 <scaraInitDuty+0xde0>)
 80077c0:	4613      	mov	r3, r2
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	4413      	add	r3, r2
 80077c6:	01db      	lsls	r3, r3, #7
 80077c8:	440b      	add	r3, r1
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	493b      	ldr	r1, [pc, #236]	; (80078c0 <scaraInitDuty+0xde0>)
 80077d4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80077d8:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80077dc:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80077e0:	3301      	adds	r3, #1
 80077e2:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 80077e6:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d9cf      	bls.n	800778e <scaraInitDuty+0xcae>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80077ee:	2300      	movs	r3, #0
 80077f0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80077f4:	e04d      	b.n	8007892 <scaraInitDuty+0xdb2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80077f6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80077fa:	4931      	ldr	r1, [pc, #196]	; (80078c0 <scaraInitDuty+0xde0>)
 80077fc:	4613      	mov	r3, r2
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	4413      	add	r3, r2
 8007802:	01db      	lsls	r3, r3, #7
 8007804:	440b      	add	r3, r1
 8007806:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 800780e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007812:	4b2b      	ldr	r3, [pc, #172]	; (80078c0 <scaraInitDuty+0xde0>)
 8007814:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800781c:	4c28      	ldr	r4, [pc, #160]	; (80078c0 <scaraInitDuty+0xde0>)
 800781e:	4613      	mov	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	4413      	add	r3, r2
 8007824:	01db      	lsls	r3, r3, #7
 8007826:	4423      	add	r3, r4
 8007828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800782c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007830:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007834:	4613      	mov	r3, r2
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	4413      	add	r3, r2
 800783a:	01db      	lsls	r3, r3, #7
 800783c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <scaraInitDuty+0xde0>)
 8007842:	1898      	adds	r0, r3, r2
 8007844:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007848:	4a1e      	ldr	r2, [pc, #120]	; (80078c4 <scaraInitDuty+0xde4>)
 800784a:	5cd1      	ldrb	r1, [r2, r3]
 800784c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007850:	f107 0208 	add.w	r2, r7, #8
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	4413      	add	r3, r2
 8007858:	ed93 7b00 	vldr	d7, [r3]
 800785c:	ed97 6bae 	vldr	d6, [r7, #696]	; 0x2b8
 8007860:	ed97 5bb0 	vldr	d5, [r7, #704]	; 0x2c0
 8007864:	eeb0 2a45 	vmov.f32	s4, s10
 8007868:	eef0 2a65 	vmov.f32	s5, s11
 800786c:	eeb0 1a46 	vmov.f32	s2, s12
 8007870:	eef0 1a66 	vmov.f32	s3, s13
 8007874:	2201      	movs	r2, #1
 8007876:	eeb0 0a47 	vmov.f32	s0, s14
 800787a:	eef0 0a67 	vmov.f32	s1, s15
 800787e:	f000 fd0f 	bl	80082a0 <scaraInitScurve>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
				for ( uint8_t i = 0; i < 4; i++) {
 8007888:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800788c:	3301      	adds	r3, #1
 800788e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007892:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007896:	2b03      	cmp	r3, #3
 8007898:	d9ad      	bls.n	80077f6 <scaraInitDuty+0xd16>
 800789a:	e005      	b.n	80078a8 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800789c:	2308      	movs	r3, #8
 800789e:	e004      	b.n	80078aa <scaraInitDuty+0xdca>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80078a0:	2305      	movs	r3, #5
 80078a2:	e002      	b.n	80078aa <scaraInitDuty+0xdca>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80078a4:	2302      	movs	r3, #2
 80078a6:	e000      	b.n	80078aa <scaraInitDuty+0xdca>
//	positionNext.t = 0;
//	positionNext.total_time = myDUTY.time_total;
//	positionTrue.t = 0;
//	positionTrue.total_time = myDUTY.time_total;

	return SCARA_STATUS_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80078b0:	46bd      	mov	sp, r7
 80078b2:	ecbd 8b02 	vpop	{d8}
 80078b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80078ba:	b004      	add	sp, #16
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	200108c0 	.word	0x200108c0
 80078c4:	20004088 	.word	0x20004088

080078c8 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80078c8:	b082      	sub	sp, #8
 80078ca:	b5b0      	push	{r4, r5, r7, lr}
 80078cc:	b0a4      	sub	sp, #144	; 0x90
 80078ce:	af22      	add	r7, sp, #136	; 0x88
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	f107 0118 	add.w	r1, r7, #24
 80078d6:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80078da:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80078de:	4668      	mov	r0, sp
 80078e0:	f107 0320 	add.w	r3, r7, #32
 80078e4:	2288      	movs	r2, #136	; 0x88
 80078e6:	4619      	mov	r1, r3
 80078e8:	f00d fde2 	bl	80154b0 <memcpy>
 80078ec:	f107 0318 	add.w	r3, r7, #24
 80078f0:	cb0c      	ldmia	r3, {r2, r3}
 80078f2:	4620      	mov	r0, r4
 80078f4:	f7fd fdb4 	bl	8005460 <kinematicInverse>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80078fe:	2307      	movs	r3, #7
 8007900:	e08e      	b.n	8007a20 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007902:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 800790c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 8007916:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 800792a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 800793e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007942:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007946:	f7f8 fc9f 	bl	8000288 <__aeabi_dsub>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007954:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007958:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800795c:	f7f8 fc94 	bl	8000288 <__aeabi_dsub>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 800796a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800796e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007972:	f7f8 fc89 	bl	8000288 <__aeabi_dsub>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800798c:	f7f8 fe34 	bl	80005f8 <__aeabi_dmul>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4614      	mov	r4, r2
 8007996:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80079a4:	f7f8 fe28 	bl	80005f8 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f8 fc6c 	bl	800028c <__adddf3>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4614      	mov	r4, r2
 80079ba:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	f7f8 fc5a 	bl	800028c <__adddf3>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	ec43 2b17 	vmov	d7, r2, r3
 80079e0:	eeb0 0a47 	vmov.f32	s0, s14
 80079e4:	eef0 0a67 	vmov.f32	s1, s15
 80079e8:	f012 fb6a 	bl	801a0c0 <sqrt>
 80079ec:	eeb0 7a40 	vmov.f32	s14, s0
 80079f0:	eef0 7a60 	vmov.f32	s15, s1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007a2a:	b002      	add	sp, #8
 8007a2c:	4770      	bx	lr
	...

08007a30 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007a30:	b082      	sub	sp, #8
 8007a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a36:	b0b9      	sub	sp, #228	; 0xe4
 8007a38:	af22      	add	r7, sp, #136	; 0x88
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007a40:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8007a44:	f507 7688 	add.w	r6, r7, #272	; 0x110
 8007a48:	4668      	mov	r0, sp
 8007a4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007a4e:	2288      	movs	r2, #136	; 0x88
 8007a50:	4619      	mov	r1, r3
 8007a52:	f00d fd2d 	bl	80154b0 <memcpy>
 8007a56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a5a:	cb0c      	ldmia	r3, {r2, r3}
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7fd fcff 	bl	8005460 <kinematicInverse>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007a68:	2307      	movs	r3, #7
 8007a6a:	e165      	b.n	8007d38 <scaraInitCircle+0x308>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8007a6c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d006      	beq.n	8007a82 <scaraInitCircle+0x52>
 8007a74:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d001      	beq.n	8007a82 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8007a7e:	2306      	movs	r3, #6
 8007a80:	e15a      	b.n	8007d38 <scaraInitCircle+0x308>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8007a82:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007a86:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8007a8a:	f7f8 fbfd 	bl	8000288 <__aeabi_dsub>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8007a96:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007a9a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8007a9e:	f7f8 fbf3 	bl	8000288 <__aeabi_dsub>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007aaa:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007aae:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8007ab2:	f7f8 fbe9 	bl	8000288 <__aeabi_dsub>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007abe:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8007ac2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8007ac6:	f7f8 fbdf 	bl	8000288 <__aeabi_dsub>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007ad2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ad6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007ada:	f7f8 fd8d 	bl	80005f8 <__aeabi_dmul>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4692      	mov	sl, r2
 8007ae4:	469b      	mov	fp, r3
 8007ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007aea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007aee:	f7f8 fd83 	bl	80005f8 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4650      	mov	r0, sl
 8007af8:	4659      	mov	r1, fp
 8007afa:	f7f8 fbc7 	bl	800028c <__adddf3>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	ec43 2b17 	vmov	d7, r2, r3
 8007b06:	eeb0 0a47 	vmov.f32	s0, s14
 8007b0a:	eef0 0a67 	vmov.f32	s1, s15
 8007b0e:	f012 fad7 	bl	801a0c0 <sqrt>
 8007b12:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007b16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007b1e:	f7f8 fd6b 	bl	80005f8 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4692      	mov	sl, r2
 8007b28:	469b      	mov	fp, r3
 8007b2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007b32:	f7f8 fd61 	bl	80005f8 <__aeabi_dmul>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	f7f8 fba5 	bl	800028c <__adddf3>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	ec43 2b17 	vmov	d7, r2, r3
 8007b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8007b4e:	eef0 0a67 	vmov.f32	s1, s15
 8007b52:	f012 fab5 	bl	801a0c0 <sqrt>
 8007b56:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007b62:	f7f8 fb91 	bl	8000288 <__aeabi_dsub>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4690      	mov	r8, r2
 8007b6c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	4b76      	ldr	r3, [pc, #472]	; (8007d50 <scaraInitCircle+0x320>)
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007b84:	2306      	movs	r3, #6
 8007b86:	e0d7      	b.n	8007d38 <scaraInitCircle+0x308>

//	if (r1 < 0.1 || r2 < 0.1) {
//		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
//	}

	angle_start = atan2(y_start, x_start);
 8007b88:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007b8c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007b90:	f012 fa94 	bl	801a0bc <atan2>
 8007b94:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007b98:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007b9c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007ba0:	f012 fa8c 	bl	801a0bc <atan2>
 8007ba4:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bb0:	f7f8 fb6a 	bl	8000288 <__aeabi_dsub>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007bc8:	f7f8 ff88 	bl	8000adc <__aeabi_dcmplt>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d015      	beq.n	8007bfe <scaraInitCircle+0x1ce>
 8007bd2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd11      	ble.n	8007bfe <scaraInitCircle+0x1ce>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bea:	a157      	add	r1, pc, #348	; (adr r1, 8007d48 <scaraInitCircle+0x318>)
 8007bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bf0:	f7f8 fb4a 	bl	8000288 <__aeabi_dsub>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007bfc:	e01d      	b.n	8007c3a <scaraInitCircle+0x20a>
	}else if(delta_angle > 0 && dir < 0){
 8007bfe:	f04f 0200 	mov.w	r2, #0
 8007c02:	f04f 0300 	mov.w	r3, #0
 8007c06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c0a:	f7f8 ff85 	bl	8000b18 <__aeabi_dcmpgt>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d012      	beq.n	8007c3a <scaraInitCircle+0x20a>
 8007c14:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da0e      	bge.n	8007c3a <scaraInitCircle+0x20a>
		delta_angle = 2*PI - fabs(delta_angle);
 8007c1c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8007c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c20:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	a147      	add	r1, pc, #284	; (adr r1, 8007d48 <scaraInitCircle+0x318>)
 8007c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c2e:	f7f8 fb2b 	bl	8000288 <__aeabi_dsub>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8007c3a:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8007c3e:	f7f8 fc71 	bl	8000524 <__aeabi_i2d>
 8007c42:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c46:	f7f8 fcd7 	bl	80005f8 <__aeabi_dmul>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	f7f8 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <scaraInitCircle+0x240>
		delta_angle = fabs(delta_angle);
 8007c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c66:	653b      	str	r3, [r7, #80]	; 0x50
 8007c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c6e:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007c70:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8007c74:	b25a      	sxtb	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c80:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8007c84:	68f9      	ldr	r1, [r7, #12]
 8007c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 8007c8e:	68f9      	ldr	r1, [r7, #12]
 8007c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c94:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8007c98:	68f9      	ldr	r1, [r7, #12]
 8007c9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c9e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ca6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007caa:	f7f8 fca5 	bl	80005f8 <__aeabi_dmul>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 8007cb8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8007cc2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8007ccc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007cd0:	68f9      	ldr	r1, [r7, #12]
 8007cd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 8007cd6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8007ce0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8007ce4:	68f9      	ldr	r1, [r7, #12]
 8007ce6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 8007cea:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8007cee:	68f9      	ldr	r1, [r7, #12]
 8007cf0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8007cf4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 8007cfe:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8007d08:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007d0c:	68f9      	ldr	r1, [r7, #12]
 8007d0e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d18:	68f9      	ldr	r1, [r7, #12]
 8007d1a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007d24:	68f9      	ldr	r1, [r7, #12]
 8007d26:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007d30:	68f9      	ldr	r1, [r7, #12]
 8007d32:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	375c      	adds	r7, #92	; 0x5c
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d42:	b002      	add	sp, #8
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	60000000 	.word	0x60000000
 8007d4c:	401921fb 	.word	0x401921fb
 8007d50:	3ff00000 	.word	0x3ff00000

08007d54 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6178      	str	r0, [r7, #20]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	ed87 0b02 	vstr	d0, [r7, #8]
 8007d62:	ed87 1b00 	vstr	d1, [r7]
 8007d66:	74fb      	strb	r3, [r7, #19]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007d6c:	7cfb      	ldrb	r3, [r7, #19]
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d004      	beq.n	8007d7c <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8007d72:	7cfb      	ldrb	r3, [r7, #19]
 8007d74:	2b05      	cmp	r3, #5
 8007d76:	d001      	beq.n	8007d7c <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007d78:	2306      	movs	r3, #6
 8007d7a:	e032      	b.n	8007de2 <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007d7c:	7cbb      	ldrb	r3, [r7, #18]
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d110      	bne.n	8007da4 <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8007d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d8a:	f7f8 fd5f 	bl	800084c <__aeabi_ddiv>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	6979      	ldr	r1, [r7, #20]
 8007d94:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8007d98:	6979      	ldr	r1, [r7, #20]
 8007d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007da2:	e01d      	b.n	8007de0 <scaraInitLinear+0x8c>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007da4:	7cbb      	ldrb	r3, [r7, #18]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d118      	bne.n	8007ddc <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <scaraInitLinear+0x98>)
 8007db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007db4:	f7f8 fc20 	bl	80005f8 <__aeabi_dmul>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	6979      	ldr	r1, [r7, #20]
 8007dbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007dc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007dcc:	f7f8 fd3e 	bl	800084c <__aeabi_ddiv>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007dda:	e001      	b.n	8007de0 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007ddc:	2306      	movs	r3, #6
 8007dde:	e000      	b.n	8007de2 <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40877000 	.word	0x40877000

08007df0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007df0:	b5b0      	push	{r4, r5, r7, lr}
 8007df2:	b094      	sub	sp, #80	; 0x50
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	61f8      	str	r0, [r7, #28]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	ed87 0b04 	vstr	d0, [r7, #16]
 8007dfe:	ed87 1b02 	vstr	d1, [r7, #8]
 8007e02:	ed87 2b00 	vstr	d2, [r7]
 8007e06:	76fb      	strb	r3, [r7, #27]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, ta, td, tf;
	if(total_s < 0){
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e18:	f7f8 fe60 	bl	8000adc <__aeabi_dcmplt>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <scaraInitLSPB+0x46>
		total_s = -total_s;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007e2c:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	22ff      	movs	r2, #255	; 0xff
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	e002      	b.n	8007e3c <scaraInitLSPB+0x4c>
	}else{
		lspb->dir= 1;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007e3c:	7efb      	ldrb	r3, [r7, #27]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d12c      	bne.n	8007e9c <scaraInitLSPB+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007e42:	7ebb      	ldrb	r3, [r7, #26]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d10f      	bne.n	8007e68 <scaraInitLSPB+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	4b98      	ldr	r3, [pc, #608]	; (80080b0 <scaraInitLSPB+0x2c0>)
 8007e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e52:	f7f8 fbd1 	bl	80005f8 <__aeabi_dmul>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8007e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007e66:	e073      	b.n	8007f50 <scaraInitLSPB+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007e68:	7ebb      	ldrb	r3, [r7, #26]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d170      	bne.n	8007f50 <scaraInitLSPB+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	4b90      	ldr	r3, [pc, #576]	; (80080b4 <scaraInitLSPB+0x2c4>)
 8007e74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e78:	f7f8 fbbe 	bl	80005f8 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	4b89      	ldr	r3, [pc, #548]	; (80080b0 <scaraInitLSPB+0x2c0>)
 8007e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e8e:	f7f8 fbb3 	bl	80005f8 <__aeabi_dmul>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8007e9a:	e059      	b.n	8007f50 <scaraInitLSPB+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007e9c:	7efb      	ldrb	r3, [r7, #27]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d112      	bne.n	8007ec8 <scaraInitLSPB+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007ea2:	7ebb      	ldrb	r3, [r7, #26]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d153      	bne.n	8007f50 <scaraInitLSPB+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007ea8:	a373      	add	r3, pc, #460	; (adr r3, 8008078 <scaraInitLSPB+0x288>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eb2:	f7f8 fba1 	bl	80005f8 <__aeabi_dmul>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8007ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007ec6:	e043      	b.n	8007f50 <scaraInitLSPB+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007ec8:	7efb      	ldrb	r3, [r7, #27]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d112      	bne.n	8007ef4 <scaraInitLSPB+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007ece:	7ebb      	ldrb	r3, [r7, #26]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d13d      	bne.n	8007f50 <scaraInitLSPB+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007ed4:	a368      	add	r3, pc, #416	; (adr r3, 8008078 <scaraInitLSPB+0x288>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ede:	f7f8 fb8b 	bl	80005f8 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8007eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007ef2:	e02d      	b.n	8007f50 <scaraInitLSPB+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8007ef4:	7efb      	ldrb	r3, [r7, #27]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d112      	bne.n	8007f20 <scaraInitLSPB+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007efa:	7ebb      	ldrb	r3, [r7, #26]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d127      	bne.n	8007f50 <scaraInitLSPB+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007f00:	a35f      	add	r3, pc, #380	; (adr r3, 8008080 <scaraInitLSPB+0x290>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f0a:	f7f8 fb75 	bl	80005f8 <__aeabi_dmul>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8007f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007f1e:	e017      	b.n	8007f50 <scaraInitLSPB+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007f20:	7efb      	ldrb	r3, [r7, #27]
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d112      	bne.n	8007f4c <scaraInitLSPB+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007f26:	7ebb      	ldrb	r3, [r7, #26]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d111      	bne.n	8007f50 <scaraInitLSPB+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007f2c:	a356      	add	r3, pc, #344	; (adr r3, 8008088 <scaraInitLSPB+0x298>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f36:	f7f8 fb5f 	bl	80005f8 <__aeabi_dmul>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8007f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007f4a:	e001      	b.n	8007f50 <scaraInitLSPB+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007f4c:	2306      	movs	r3, #6
 8007f4e:	e1a2      	b.n	8008296 <scaraInitLSPB+0x4a6>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007f50:	7ebb      	ldrb	r3, [r7, #26]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	f040 80f2 	bne.w	800813c <scaraInitLSPB+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8007f58:	a34d      	add	r3, pc, #308	; (adr r3, 8008090 <scaraInitLSPB+0x2a0>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f62:	f7f8 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01d      	beq.n	8007fa8 <scaraInitLSPB+0x1b8>
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	4b51      	ldr	r3, [pc, #324]	; (80080b8 <scaraInitLSPB+0x2c8>)
 8007f72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f76:	f7f8 fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d013      	beq.n	8007fa8 <scaraInitLSPB+0x1b8>
			tf = 1.5*total_s/v_design;
 8007f80:	f04f 0200 	mov.w	r2, #0
 8007f84:	4b4d      	ldr	r3, [pc, #308]	; (80080bc <scaraInitLSPB+0x2cc>)
 8007f86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f8a:	f7f8 fb35 	bl	80005f8 <__aeabi_dmul>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f9a:	f7f8 fc57 	bl	800084c <__aeabi_ddiv>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007fa6:	e0a4      	b.n	80080f2 <scaraInitLSPB+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8007fa8:	a339      	add	r3, pc, #228	; (adr r3, 8008090 <scaraInitLSPB+0x2a0>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007fb2:	f7f8 fd93 	bl	8000adc <__aeabi_dcmplt>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01d      	beq.n	8007ff8 <scaraInitLSPB+0x208>
 8007fbc:	a336      	add	r3, pc, #216	; (adr r3, 8008098 <scaraInitLSPB+0x2a8>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007fc6:	f7f8 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d013      	beq.n	8007ff8 <scaraInitLSPB+0x208>
			v_design = 1.5*total_s/tf;
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	4b39      	ldr	r3, [pc, #228]	; (80080bc <scaraInitLSPB+0x2cc>)
 8007fd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fda:	f7f8 fb0d 	bl	80005f8 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fea:	f7f8 fc2f 	bl	800084c <__aeabi_ddiv>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8007ff6:	e07c      	b.n	80080f2 <scaraInitLSPB+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 8007ff8:	a325      	add	r3, pc, #148	; (adr r3, 8008090 <scaraInitLSPB+0x2a0>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008002:	f7f8 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <scaraInitLSPB+0x234>
 800800c:	a320      	add	r3, pc, #128	; (adr r3, 8008090 <scaraInitLSPB+0x2a0>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008016:	f7f8 fd61 	bl	8000adc <__aeabi_dcmplt>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <scaraInitLSPB+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008020:	2309      	movs	r3, #9
 8008022:	e138      	b.n	8008296 <scaraInitLSPB+0x4a6>
		}
		else{
			if(tf < 0.001){
 8008024:	a31e      	add	r3, pc, #120	; (adr r3, 80080a0 <scaraInitLSPB+0x2b0>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800802e:	f7f8 fd55 	bl	8000adc <__aeabi_dcmplt>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <scaraInitLSPB+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8008038:	2309      	movs	r3, #9
 800803a:	e12c      	b.n	8008296 <scaraInitLSPB+0x4a6>
			}else{
				v_lim = total_s/tf;
 800803c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008040:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008044:	f7f8 fc02 	bl	800084c <__aeabi_ddiv>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8008050:	a315      	add	r3, pc, #84	; (adr r3, 80080a8 <scaraInitLSPB+0x2b8>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800805a:	f7f8 facd 	bl	80005f8 <__aeabi_dmul>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008066:	f7f8 fd39 	bl	8000adc <__aeabi_dcmplt>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d027      	beq.n	80080c0 <scaraInitLSPB+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008070:	230a      	movs	r3, #10
 8008072:	e110      	b.n	8008296 <scaraInitLSPB+0x4a6>
 8008074:	f3af 8000 	nop.w
 8008078:	14000000 	.word	0x14000000
 800807c:	4000f6f0 	.word	0x4000f6f0
 8008080:	00000000 	.word	0x00000000
 8008084:	405c2000 	.word	0x405c2000
 8008088:	6b259425 	.word	0x6b259425
 800808c:	40069b91 	.word	0x40069b91
 8008090:	9999999a 	.word	0x9999999a
 8008094:	3fb99999 	.word	0x3fb99999
 8008098:	33333333 	.word	0x33333333
 800809c:	3fc33333 	.word	0x3fc33333
 80080a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80080a4:	3f50624d 	.word	0x3f50624d
 80080a8:	9999999a 	.word	0x9999999a
 80080ac:	3ff19999 	.word	0x3ff19999
 80080b0:	40877000 	.word	0x40877000
 80080b4:	407f4000 	.word	0x407f4000
 80080b8:	40080000 	.word	0x40080000
 80080bc:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80080c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	f7f8 f8e0 	bl	800028c <__adddf3>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080d4:	f7f8 fd20 	bl	8000b18 <__aeabi_dcmpgt>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <scaraInitLSPB+0x302>
				v_design = 2*v_lim;
 80080de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	f7f8 f8d1 	bl	800028c <__adddf3>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{

			}
		}
		ta = tf - total_s/v_design;
 80080f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080fa:	f7f8 fba7 	bl	800084c <__aeabi_ddiv>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008106:	f7f8 f8bf 	bl	8000288 <__aeabi_dsub>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		a_design = v_design/ta;
 8008112:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008116:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800811a:	f7f8 fb97 	bl	800084c <__aeabi_ddiv>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		td = tf - ta;
 8008126:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800812a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800812e:	f7f8 f8ab 	bl	8000288 <__aeabi_dsub>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800813a:	e06e      	b.n	800821a <scaraInitLSPB+0x42a>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 800813c:	7ebb      	ldrb	r3, [r7, #26]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d16b      	bne.n	800821a <scaraInitLSPB+0x42a>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 8008142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800814a:	f7f8 fa55 	bl	80005f8 <__aeabi_dmul>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4614      	mov	r4, r2
 8008154:	461d      	mov	r5, r3
 8008156:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800815a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800815e:	f7f8 fa4b 	bl	80005f8 <__aeabi_dmul>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 fcd5 	bl	8000b18 <__aeabi_dcmpgt>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01e      	beq.n	80081b2 <scaraInitLSPB+0x3c2>
//			}
//			if(v_design/a_design < 0.1){ //ta is too small
//				//recalculate a_design
//				a_design = v_design/0.1;
//			}
			ta = v_design/a_design;
 8008174:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008178:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800817c:	f7f8 fb66 	bl	800084c <__aeabi_ddiv>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			td = total_s/v_design;
 8008188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800818c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008190:	f7f8 fb5c 	bl	800084c <__aeabi_ddiv>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			tf = ta + td;
 800819c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80081a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081a4:	f7f8 f872 	bl	800028c <__adddf3>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80081b0:	e033      	b.n	800821a <scaraInitLSPB+0x42a>

		}else{
			tf = 2*total_s/v_design;
 80081b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	f7f8 f867 	bl	800028c <__adddf3>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4610      	mov	r0, r2
 80081c4:	4619      	mov	r1, r3
 80081c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081ca:	f7f8 fb3f 	bl	800084c <__aeabi_ddiv>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			ta = tf/2;
 80081d6:	f04f 0200 	mov.w	r2, #0
 80081da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80081e2:	f7f8 fb33 	bl	800084c <__aeabi_ddiv>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			td = tf/2;
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80081fa:	f7f8 fb27 	bl	800084c <__aeabi_ddiv>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			a_design = v_design/ta;
 8008206:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800820a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800820e:	f7f8 fb1d 	bl	800084c <__aeabi_ddiv>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	 // Init lspb params

	 lspb->s0 = 0;
 800821a:	69f9      	ldr	r1, [r7, #28]
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8008228:	69f9      	ldr	r1, [r7, #28]
 800822a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800822e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8008232:	69f9      	ldr	r1, [r7, #28]
 8008234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008238:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 800823c:	69f9      	ldr	r1, [r7, #28]
 800823e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008242:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8008246:	69f9      	ldr	r1, [r7, #28]
 8008248:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800824c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8008250:	69f9      	ldr	r1, [r7, #28]
 8008252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008256:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 800825a:	69f9      	ldr	r1, [r7, #28]
 800825c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008260:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 8008264:	69f9      	ldr	r1, [r7, #28]
 8008266:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800826a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 800826e:	69f9      	ldr	r1, [r7, #28]
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 800827c:	69f9      	ldr	r1, [r7, #28]
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	f04f 0300 	mov.w	r3, #0
 8008286:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->total_s = total_s;
 800828a:	69f9      	ldr	r1, [r7, #28]
 800828c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008290:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3750      	adds	r7, #80	; 0x50
 800829a:	46bd      	mov	sp, r7
 800829c:	bdb0      	pop	{r4, r5, r7, pc}
 800829e:	bf00      	nop

080082a0 <scaraInitScurve>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 80082a0:	b5b0      	push	{r4, r5, r7, lr}
 80082a2:	b094      	sub	sp, #80	; 0x50
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	61f8      	str	r0, [r7, #28]
 80082a8:	460b      	mov	r3, r1
 80082aa:	ed87 0b04 	vstr	d0, [r7, #16]
 80082ae:	ed87 1b02 	vstr	d1, [r7, #8]
 80082b2:	ed87 2b00 	vstr	d2, [r7]
 80082b6:	76fb      	strb	r3, [r7, #27]
 80082b8:	4613      	mov	r3, r2
 80082ba:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, ta, td, tf;
	if(total_s < 0){
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082c8:	f7f8 fc08 	bl	8000adc <__aeabi_dcmplt>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <scaraInitScurve+0x46>
		total_s = -total_s;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80082dc:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	22ff      	movs	r2, #255	; 0xff
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	e002      	b.n	80082ec <scaraInitScurve+0x4c>
	}else{
		scurve->dir= 1;
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	2201      	movs	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 80082ec:	7efb      	ldrb	r3, [r7, #27]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d12c      	bne.n	800834c <scaraInitScurve+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80082f2:	7ebb      	ldrb	r3, [r7, #26]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d10f      	bne.n	8008318 <scaraInitScurve+0x78>
			v_design = V_MOVE_MAX*v_factor;
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	4b90      	ldr	r3, [pc, #576]	; (8008540 <scaraInitScurve+0x2a0>)
 80082fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008302:	f7f8 f979 	bl	80005f8 <__aeabi_dmul>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800830e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008312:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008316:	e073      	b.n	8008400 <scaraInitScurve+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008318:	7ebb      	ldrb	r3, [r7, #26]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d170      	bne.n	8008400 <scaraInitScurve+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	4b88      	ldr	r3, [pc, #544]	; (8008544 <scaraInitScurve+0x2a4>)
 8008324:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008328:	f7f8 f966 	bl	80005f8 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	4b81      	ldr	r3, [pc, #516]	; (8008540 <scaraInitScurve+0x2a0>)
 800833a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800834a:	e059      	b.n	8008400 <scaraInitScurve+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 800834c:	7efb      	ldrb	r3, [r7, #27]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d112      	bne.n	8008378 <scaraInitScurve+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008352:	7ebb      	ldrb	r3, [r7, #26]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d153      	bne.n	8008400 <scaraInitScurve+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8008358:	a36d      	add	r3, pc, #436	; (adr r3, 8008510 <scaraInitScurve+0x270>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008362:	f7f8 f949 	bl	80005f8 <__aeabi_dmul>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800836e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008372:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008376:	e043      	b.n	8008400 <scaraInitScurve+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 8008378:	7efb      	ldrb	r3, [r7, #27]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d112      	bne.n	80083a4 <scaraInitScurve+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800837e:	7ebb      	ldrb	r3, [r7, #26]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d13d      	bne.n	8008400 <scaraInitScurve+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8008384:	a362      	add	r3, pc, #392	; (adr r3, 8008510 <scaraInitScurve+0x270>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800838e:	f7f8 f933 	bl	80005f8 <__aeabi_dmul>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800839a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800839e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80083a2:	e02d      	b.n	8008400 <scaraInitScurve+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 80083a4:	7efb      	ldrb	r3, [r7, #27]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d112      	bne.n	80083d0 <scaraInitScurve+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80083aa:	7ebb      	ldrb	r3, [r7, #26]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d127      	bne.n	8008400 <scaraInitScurve+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80083b0:	a359      	add	r3, pc, #356	; (adr r3, 8008518 <scaraInitScurve+0x278>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083ba:	f7f8 f91d 	bl	80005f8 <__aeabi_dmul>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80083c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80083ce:	e017      	b.n	8008400 <scaraInitScurve+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 80083d0:	7efb      	ldrb	r3, [r7, #27]
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d112      	bne.n	80083fc <scaraInitScurve+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80083d6:	7ebb      	ldrb	r3, [r7, #26]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d111      	bne.n	8008400 <scaraInitScurve+0x160>
			v_design = V_DESIGN_J3*v_factor;
 80083dc:	a350      	add	r3, pc, #320	; (adr r3, 8008520 <scaraInitScurve+0x280>)
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083e6:	f7f8 f907 	bl	80005f8 <__aeabi_dmul>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80083f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80083fa:	e001      	b.n	8008400 <scaraInitScurve+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80083fc:	2306      	movs	r3, #6
 80083fe:	e212      	b.n	8008826 <scaraInitScurve+0x586>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008400:	7ebb      	ldrb	r3, [r7, #26]
 8008402:	2b01      	cmp	r3, #1
 8008404:	f040 80fc 	bne.w	8008600 <scaraInitScurve+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008408:	a347      	add	r3, pc, #284	; (adr r3, 8008528 <scaraInitScurve+0x288>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008412:	f7f8 fb63 	bl	8000adc <__aeabi_dcmplt>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01d      	beq.n	8008458 <scaraInitScurve+0x1b8>
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	4b49      	ldr	r3, [pc, #292]	; (8008548 <scaraInitScurve+0x2a8>)
 8008422:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008426:	f7f8 fb77 	bl	8000b18 <__aeabi_dcmpgt>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d013      	beq.n	8008458 <scaraInitScurve+0x1b8>
			tf = 1.5*total_s/v_design;
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	4b45      	ldr	r3, [pc, #276]	; (800854c <scaraInitScurve+0x2ac>)
 8008436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800843a:	f7f8 f8dd 	bl	80005f8 <__aeabi_dmul>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800844a:	f7f8 f9ff 	bl	800084c <__aeabi_ddiv>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008456:	e094      	b.n	8008582 <scaraInitScurve+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8008458:	a333      	add	r3, pc, #204	; (adr r3, 8008528 <scaraInitScurve+0x288>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008462:	f7f8 fb3b 	bl	8000adc <__aeabi_dcmplt>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01d      	beq.n	80084a8 <scaraInitScurve+0x208>
 800846c:	a330      	add	r3, pc, #192	; (adr r3, 8008530 <scaraInitScurve+0x290>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008476:	f7f8 fb4f 	bl	8000b18 <__aeabi_dcmpgt>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d013      	beq.n	80084a8 <scaraInitScurve+0x208>
			v_design = 1.5*total_s/tf;
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	4b31      	ldr	r3, [pc, #196]	; (800854c <scaraInitScurve+0x2ac>)
 8008486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800848a:	f7f8 f8b5 	bl	80005f8 <__aeabi_dmul>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4610      	mov	r0, r2
 8008494:	4619      	mov	r1, r3
 8008496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800849a:	f7f8 f9d7 	bl	800084c <__aeabi_ddiv>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80084a6:	e06c      	b.n	8008582 <scaraInitScurve+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 80084a8:	a31f      	add	r3, pc, #124	; (adr r3, 8008528 <scaraInitScurve+0x288>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80084b2:	f7f8 fb13 	bl	8000adc <__aeabi_dcmplt>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <scaraInitScurve+0x234>
 80084bc:	a31a      	add	r3, pc, #104	; (adr r3, 8008528 <scaraInitScurve+0x288>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084c6:	f7f8 fb09 	bl	8000adc <__aeabi_dcmplt>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <scaraInitScurve+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 80084d0:	2309      	movs	r3, #9
 80084d2:	e1a8      	b.n	8008826 <scaraInitScurve+0x586>
		}else{
			v_lim = total_s/tf;
 80084d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084dc:	f7f8 f9b6 	bl	800084c <__aeabi_ddiv>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 80084e8:	a313      	add	r3, pc, #76	; (adr r3, 8008538 <scaraInitScurve+0x298>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80084f2:	f7f8 f881 	bl	80005f8 <__aeabi_dmul>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084fe:	f7f8 faed 	bl	8000adc <__aeabi_dcmplt>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d023      	beq.n	8008550 <scaraInitScurve+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008508:	230a      	movs	r3, #10
 800850a:	e18c      	b.n	8008826 <scaraInitScurve+0x586>
 800850c:	f3af 8000 	nop.w
 8008510:	14000000 	.word	0x14000000
 8008514:	4000f6f0 	.word	0x4000f6f0
 8008518:	00000000 	.word	0x00000000
 800851c:	405c2000 	.word	0x405c2000
 8008520:	6b259425 	.word	0x6b259425
 8008524:	40069b91 	.word	0x40069b91
 8008528:	9999999a 	.word	0x9999999a
 800852c:	3fb99999 	.word	0x3fb99999
 8008530:	33333333 	.word	0x33333333
 8008534:	3fc33333 	.word	0x3fc33333
 8008538:	9999999a 	.word	0x9999999a
 800853c:	3ff19999 	.word	0x3ff19999
 8008540:	40877000 	.word	0x40877000
 8008544:	407f4000 	.word	0x407f4000
 8008548:	401e0000 	.word	0x401e0000
 800854c:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008550:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008564:	f7f8 fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <scaraInitScurve+0x2e2>
				v_design = 2*v_lim;
 800856e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	f7f7 fe89 	bl	800028c <__adddf3>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 8008582:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	f7f7 fe7f 	bl	800028c <__adddf3>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4610      	mov	r0, r2
 8008594:	4619      	mov	r1, r3
 8008596:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800859a:	f7f8 f82d 	bl	80005f8 <__aeabi_dmul>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4614      	mov	r4, r2
 80085a4:	461d      	mov	r5, r3
 80085a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4610      	mov	r0, r2
 80085b8:	4619      	mov	r1, r3
 80085ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085be:	f7f7 fe63 	bl	8000288 <__aeabi_dsub>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4620      	mov	r0, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	f7f8 f93f 	bl	800084c <__aeabi_ddiv>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 80085d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085de:	f7f8 f935 	bl	800084c <__aeabi_ddiv>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 80085ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80085ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80085f2:	f7f7 fe49 	bl	8000288 <__aeabi_dsub>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80085fe:	e084      	b.n	800870a <scaraInitScurve+0x46a>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008600:	7ebb      	ldrb	r3, [r7, #26]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 8081 	bne.w	800870a <scaraInitScurve+0x46a>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 8008608:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800860c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008610:	f7f7 fff2 	bl	80005f8 <__aeabi_dmul>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4614      	mov	r4, r2
 800861a:	461d      	mov	r5, r3
 800861c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	f7f7 fe32 	bl	800028c <__adddf3>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4610      	mov	r0, r2
 800862e:	4619      	mov	r1, r3
 8008630:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f7f8 fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d024      	beq.n	8008694 <scaraInitScurve+0x3f4>
//			}
//			if(v_design/a_design < 0.1){ //ta is too small
//				//recalculate a_design
//				a_design = v_design/0.1;
//			}
			ta = v_design/a_design;
 800864a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800864e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008652:	f7f8 f8fb 	bl	800084c <__aeabi_ddiv>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 800865e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008666:	f7f8 f8f1 	bl	800084c <__aeabi_ddiv>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008672:	f7f7 fe0b 	bl	800028c <__adddf3>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 800867e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008682:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008686:	f7f7 fe01 	bl	800028c <__adddf3>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008692:	e03a      	b.n	800870a <scaraInitScurve+0x46a>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008694:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	f7f7 fdf6 	bl	800028c <__adddf3>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4610      	mov	r0, r2
 80086a6:	4619      	mov	r1, r3
 80086a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086ac:	f7f8 f8ce 	bl	800084c <__aeabi_ddiv>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	4b5c      	ldr	r3, [pc, #368]	; (8008830 <scaraInitScurve+0x590>)
 80086be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80086c2:	f7f8 f8c3 	bl	800084c <__aeabi_ddiv>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	4b58      	ldr	r3, [pc, #352]	; (8008834 <scaraInitScurve+0x594>)
 80086d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80086d8:	f7f7 ff8e 	bl	80005f8 <__aeabi_dmul>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4610      	mov	r0, r2
 80086e2:	4619      	mov	r1, r3
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	4b51      	ldr	r3, [pc, #324]	; (8008830 <scaraInitScurve+0x590>)
 80086ea:	f7f8 f8af 	bl	800084c <__aeabi_ddiv>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 80086f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80086fe:	f7f8 f8a5 	bl	800084c <__aeabi_ddiv>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 800870a:	69f9      	ldr	r1, [r7, #28]
 800870c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008710:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 8008714:	69f9      	ldr	r1, [r7, #28]
 8008716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800871a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 800871e:	69f9      	ldr	r1, [r7, #28]
 8008720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008724:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800872e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 8008732:	69f9      	ldr	r1, [r7, #28]
 8008734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008738:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 800873c:	69f9      	ldr	r1, [r7, #28]
 800873e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008742:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 8008746:	69f9      	ldr	r1, [r7, #28]
 8008748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800874c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008750:	69f9      	ldr	r1, [r7, #28]
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 800875e:	69f9      	ldr	r1, [r7, #28]
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 800876c:	69f9      	ldr	r1, [r7, #28]
 800876e:	f04f 0200 	mov.w	r2, #0
 8008772:	f04f 0300 	mov.w	r3, #0
 8008776:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <scaraInitScurve+0x598>)
 8008780:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4610      	mov	r0, r2
 800878e:	4619      	mov	r1, r3
 8008790:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80087a0:	f7f8 f854 	bl	800084c <__aeabi_ddiv>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	69f9      	ldr	r1, [r7, #28]
 80087aa:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 80087ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	f7f7 fd69 	bl	800028c <__adddf3>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4610      	mov	r0, r2
 80087c0:	4619      	mov	r1, r3
 80087c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087c6:	f7f7 ff17 	bl	80005f8 <__aeabi_dmul>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4610      	mov	r0, r2
 80087d0:	4619      	mov	r1, r3
 80087d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087d6:	f7f7 ff0f 	bl	80005f8 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	69f9      	ldr	r1, [r7, #28]
 80087e0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	4b13      	ldr	r3, [pc, #76]	; (8008838 <scaraInitScurve+0x598>)
 80087ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80087ee:	f7f7 ff03 	bl	80005f8 <__aeabi_dmul>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	69f9      	ldr	r1, [r7, #28]
 80087f8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <scaraInitScurve+0x598>)
 8008802:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008806:	f7f7 fef7 	bl	80005f8 <__aeabi_dmul>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4610      	mov	r0, r2
 8008810:	4619      	mov	r1, r3
 8008812:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008816:	f7f7 feef 	bl	80005f8 <__aeabi_dmul>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	69f9      	ldr	r1, [r7, #28]
 8008820:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3750      	adds	r7, #80	; 0x50
 800882a:	46bd      	mov	sp, r7
 800882c:	bdb0      	pop	{r4, r5, r7, pc}
 800882e:	bf00      	nop
 8008830:	40100000 	.word	0x40100000
 8008834:	40080000 	.word	0x40080000
 8008838:	40180000 	.word	0x40180000

0800883c <scaraFlowLSPB>:
SCARA_StatusTypeDef	scaraFlowLSPB	(Trajectory_LSPB_TypeDef *lspb, double time){
 800883c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008840:	b08a      	sub	sp, #40	; 0x28
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008850:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800885a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008864:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008874:	f7f8 f946 	bl	8000b04 <__aeabi_dcmpge>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d040      	beq.n	8008900 <scaraFlowLSPB+0xc4>
 800887e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008886:	f7f8 f933 	bl	8000af0 <__aeabi_dcmple>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d037      	beq.n	8008900 <scaraFlowLSPB+0xc4>
//		lspb->a_current		=	lspb->a_design;
//		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800889c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a0:	f7f7 feaa 	bl	80005f8 <__aeabi_dmul>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4620      	mov	r0, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7f7 fcee 	bl	800028c <__adddf3>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4614      	mov	r4, r2
 80088b6:	461d      	mov	r5, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80088be:	f04f 0200 	mov.w	r2, #0
 80088c2:	4b77      	ldr	r3, [pc, #476]	; (8008aa0 <scaraFlowLSPB+0x264>)
 80088c4:	f7f7 fe98 	bl	80005f8 <__aeabi_dmul>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4610      	mov	r0, r2
 80088ce:	4619      	mov	r1, r3
 80088d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d4:	f7f7 fe90 	bl	80005f8 <__aeabi_dmul>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4610      	mov	r0, r2
 80088de:	4619      	mov	r1, r3
 80088e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4620      	mov	r0, r4
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7f7 fccc 	bl	800028c <__adddf3>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	68f9      	ldr	r1, [r7, #12]
 80088fa:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80088fe:	e0c8      	b.n	8008a92 <scaraFlowLSPB+0x256>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008908:	f7f8 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d047      	beq.n	80089a2 <scaraFlowLSPB+0x166>
 8008912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800891a:	f7f8 f8e9 	bl	8000af0 <__aeabi_dcmple>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d03e      	beq.n	80089a2 <scaraFlowLSPB+0x166>
//		lspb->a_current		=	0;
//		lspb->v_current		=	lspb->v_lim;
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008934:	f7f7 fe60 	bl	80005f8 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4610      	mov	r0, r2
 800893e:	4619      	mov	r1, r3
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	4b56      	ldr	r3, [pc, #344]	; (8008aa0 <scaraFlowLSPB+0x264>)
 8008946:	f7f7 fe57 	bl	80005f8 <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4690      	mov	r8, r2
 800895c:	4699      	mov	r9, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	4b4d      	ldr	r3, [pc, #308]	; (8008aa0 <scaraFlowLSPB+0x264>)
 800896a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800897a:	f7f7 fc85 	bl	8000288 <__aeabi_dsub>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4620      	mov	r0, r4
 8008984:	4629      	mov	r1, r5
 8008986:	f7f7 fe37 	bl	80005f8 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f7 fc7b 	bl	800028c <__adddf3>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80089a0:	e077      	b.n	8008a92 <scaraFlowLSPB+0x256>
	// Decelerate
	} else if (td < time && time <= tf) {
 80089a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089aa:	f7f8 f897 	bl	8000adc <__aeabi_dcmplt>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d068      	beq.n	8008a86 <scaraFlowLSPB+0x24a>
 80089b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089bc:	f7f8 f898 	bl	8000af0 <__aeabi_dcmple>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d05f      	beq.n	8008a86 <scaraFlowLSPB+0x24a>
//		lspb->a_current		=	-lspb->a_design;
//		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80089d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80089da:	f7f7 fc55 	bl	8000288 <__aeabi_dsub>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4640      	mov	r0, r8
 80089e4:	4649      	mov	r1, r9
 80089e6:	f7f7 fe07 	bl	80005f8 <__aeabi_dmul>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f7 fc49 	bl	8000288 <__aeabi_dsub>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4614      	mov	r4, r2
 80089fc:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008a0a:	f7f7 fc3d 	bl	8000288 <__aeabi_dsub>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4690      	mov	r8, r2
 8008a14:	4699      	mov	r9, r3
 8008a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a1e:	f7f7 fc33 	bl	8000288 <__aeabi_dsub>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4640      	mov	r0, r8
 8008a28:	4649      	mov	r1, r9
 8008a2a:	f7f7 fde5 	bl	80005f8 <__aeabi_dmul>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4690      	mov	r8, r2
 8008a34:	4699      	mov	r9, r3
 8008a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a3e:	f7f7 fc23 	bl	8000288 <__aeabi_dsub>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	f7f7 fdd5 	bl	80005f8 <__aeabi_dmul>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4690      	mov	r8, r2
 8008a54:	4699      	mov	r9, r3
 8008a56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	f7f7 fc15 	bl	800028c <__adddf3>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 feef 	bl	800084c <__aeabi_ddiv>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fc07 	bl	8000288 <__aeabi_dsub>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008a84:	e005      	b.n	8008a92 <scaraFlowLSPB+0x256>
	} else {
//		lspb->a_current 	=	0;
//		lspb->v_current		=	0;
		lspb->s_current		=	lspb->total_s;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008a8c:	68f9      	ldr	r1, [r7, #12]
 8008a8e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3728      	adds	r7, #40	; 0x28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008a9e:	bf00      	nop
 8008aa0:	3fe00000 	.word	0x3fe00000

08008aa4 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008aa4:	b5b0      	push	{r4, r5, r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008abc:	f7f8 f822 	bl	8000b04 <__aeabi_dcmpge>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d01e      	beq.n	8008b04 <scaraFlowGCODE+0x60>
 8008ac6:	4b5f      	ldr	r3, [pc, #380]	; (8008c44 <scaraFlowGCODE+0x1a0>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad0:	f7f8 f80e 	bl	8000af0 <__aeabi_dcmple>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d014      	beq.n	8008b04 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 8008ada:	4b5b      	ldr	r3, [pc, #364]	; (8008c48 <scaraFlowGCODE+0x1a4>)
 8008adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae4:	f7f7 fd88 	bl	80005f8 <__aeabi_dmul>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4610      	mov	r0, r2
 8008aee:	4619      	mov	r1, r3
 8008af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af4:	f7f7 fd80 	bl	80005f8 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	68f9      	ldr	r1, [r7, #12]
 8008afe:	e9c1 2300 	strd	r2, r3, [r1]
 8008b02:	e09a      	b.n	8008c3a <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8008b04:	4b4f      	ldr	r3, [pc, #316]	; (8008c44 <scaraFlowGCODE+0x1a0>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b0e:	f7f8 f803 	bl	8000b18 <__aeabi_dcmpgt>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01f      	beq.n	8008b58 <scaraFlowGCODE+0xb4>
 8008b18:	4b4c      	ldr	r3, [pc, #304]	; (8008c4c <scaraFlowGCODE+0x1a8>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b22:	f7f7 ffe5 	bl	8000af0 <__aeabi_dcmple>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d015      	beq.n	8008b58 <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 8008b2c:	4b48      	ldr	r3, [pc, #288]	; (8008c50 <scaraFlowGCODE+0x1ac>)
 8008b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	4b43      	ldr	r3, [pc, #268]	; (8008c50 <scaraFlowGCODE+0x1ac>)
 8008b44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008b48:	f7f7 fba0 	bl	800028c <__adddf3>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	68f9      	ldr	r1, [r7, #12]
 8008b52:	e9c1 2300 	strd	r2, r3, [r1]
 8008b56:	e070      	b.n	8008c3a <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8008b58:	4b3c      	ldr	r3, [pc, #240]	; (8008c4c <scaraFlowGCODE+0x1a8>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b62:	f7f7 ffd9 	bl	8000b18 <__aeabi_dcmpgt>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d038      	beq.n	8008bde <scaraFlowGCODE+0x13a>
 8008b6c:	4b39      	ldr	r3, [pc, #228]	; (8008c54 <scaraFlowGCODE+0x1b0>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b76:	f7f7 ffbb 	bl	8000af0 <__aeabi_dcmple>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d02e      	beq.n	8008bde <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008b80:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <scaraFlowGCODE+0x1b4>)
 8008b82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8a:	f7f7 fd35 	bl	80005f8 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4610      	mov	r0, r2
 8008b94:	4619      	mov	r1, r3
 8008b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9a:	f7f7 fd2d 	bl	80005f8 <__aeabi_dmul>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	461d      	mov	r5, r3
 8008ba6:	4b2c      	ldr	r3, [pc, #176]	; (8008c58 <scaraFlowGCODE+0x1b4>)
 8008ba8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f7f7 fb66 	bl	800028c <__adddf3>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4b23      	ldr	r3, [pc, #140]	; (8008c58 <scaraFlowGCODE+0x1b4>)
 8008bca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008bce:	f7f7 fb5d 	bl	800028c <__adddf3>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	e9c1 2300 	strd	r2, r3, [r1]
 8008bdc:	e02d      	b.n	8008c3a <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008bde:	4b1e      	ldr	r3, [pc, #120]	; (8008c58 <scaraFlowGCODE+0x1b4>)
 8008be0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4614      	mov	r4, r2
 8008c02:	461d      	mov	r5, r3
 8008c04:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <scaraFlowGCODE+0x1b4>)
 8008c06:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 fb37 	bl	800028c <__adddf3>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4610      	mov	r0, r2
 8008c24:	4619      	mov	r1, r3
 8008c26:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <scaraFlowGCODE+0x1b4>)
 8008c28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008c2c:	f7f7 fb2e 	bl	800028c <__adddf3>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bdb0      	pop	{r4, r5, r7, pc}
 8008c44:	200098c8 	.word	0x200098c8
 8008c48:	200106b0 	.word	0x200106b0
 8008c4c:	200098e8 	.word	0x200098e8
 8008c50:	20009910 	.word	0x20009910
 8008c54:	20009938 	.word	0x20009938
 8008c58:	200098d0 	.word	0x200098d0

08008c5c <scaraFLowScurve>:
SCARA_StatusTypeDef	scaraFLowScurve(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8008c5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c60:	b08c      	sub	sp, #48	; 0x30
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008c70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008c7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008c84:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008c8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	f04f 0300 	mov.w	r3, #0
 8008c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c9e:	f7f7 ff31 	bl	8000b04 <__aeabi_dcmpge>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d025      	beq.n	8008cf4 <scaraFLowScurve+0x98>
 8008ca8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cb0:	f7f7 ff1e 	bl	8000af0 <__aeabi_dcmple>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d01c      	beq.n	8008cf4 <scaraFLowScurve+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8008cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cc2:	f7f7 fc99 	bl	80005f8 <__aeabi_dmul>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd2:	f7f7 fc91 	bl	80005f8 <__aeabi_dmul>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008ce4:	f7f7 fc88 	bl	80005f8 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	68f9      	ldr	r1, [r7, #12]
 8008cee:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008cf2:	e17c      	b.n	8008fee <scaraFLowScurve+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8008cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cfc:	f7f7 feee 	bl	8000adc <__aeabi_dcmplt>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d061      	beq.n	8008dca <scaraFLowScurve+0x16e>
 8008d06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	f7f7 fabd 	bl	800028c <__adddf3>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d1a:	f7f7 fee9 	bl	8000af0 <__aeabi_dcmple>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d052      	beq.n	8008dca <scaraFLowScurve+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d2c:	f7f7 fc64 	bl	80005f8 <__aeabi_dmul>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4610      	mov	r0, r2
 8008d36:	4619      	mov	r1, r3
 8008d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d3c:	f7f7 fc5c 	bl	80005f8 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4690      	mov	r8, r2
 8008d46:	4699      	mov	r9, r3
 8008d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d50:	f7f7 fc52 	bl	80005f8 <__aeabi_dmul>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4690      	mov	r8, r2
 8008d78:	4699      	mov	r9, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8008d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d84:	f7f7 fc38 	bl	80005f8 <__aeabi_dmul>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	4649      	mov	r1, r9
 8008d90:	f7f7 fa7c 	bl	800028c <__adddf3>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008da2:	f7f7 fa71 	bl	8000288 <__aeabi_dsub>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4614      	mov	r4, r2
 8008dac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 fc1d 	bl	80005f8 <__aeabi_dmul>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008dc8:	e111      	b.n	8008fee <scaraFLowScurve+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 8008dca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	f7f7 fa5b 	bl	800028c <__adddf3>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dde:	f7f7 fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d022      	beq.n	8008e2e <scaraFLowScurve+0x1d2>
 8008de8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008df0:	f7f7 fa4a 	bl	8000288 <__aeabi_dsub>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dfc:	f7f7 fe78 	bl	8000af0 <__aeabi_dcmple>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d013      	beq.n	8008e2e <scaraFLowScurve+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 8008e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e0e:	f7f7 fa3b 	bl	8000288 <__aeabi_dsub>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4610      	mov	r0, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008e2c:	e0df      	b.n	8008fee <scaraFLowScurve+0x392>
	} else if(td-ta < t && t <= td){
 8008e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e36:	f7f7 fa27 	bl	8000288 <__aeabi_dsub>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e42:	f7f7 fe69 	bl	8000b18 <__aeabi_dcmpgt>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 8081 	beq.w	8008f50 <scaraFLowScurve+0x2f4>
 8008e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e56:	f7f7 fe4b 	bl	8000af0 <__aeabi_dcmple>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d077      	beq.n	8008f50 <scaraFLowScurve+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008e66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e6e:	f7f7 fbc3 	bl	80005f8 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4610      	mov	r0, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	4b5f      	ldr	r3, [pc, #380]	; (8008ffc <scaraFLowScurve+0x3a0>)
 8008e80:	f7f7 fce4 	bl	800084c <__aeabi_ddiv>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4620      	mov	r0, r4
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	f7f7 f9fc 	bl	8000288 <__aeabi_dsub>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4614      	mov	r4, r2
 8008e96:	461d      	mov	r5, r3
 8008e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ea0:	f7f7 f9f2 	bl	8000288 <__aeabi_dsub>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008eb0:	f7f7 fba2 	bl	80005f8 <__aeabi_dmul>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	f7f7 f9e4 	bl	8000288 <__aeabi_dsub>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ed0:	f7f7 f9da 	bl	8000288 <__aeabi_dsub>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4690      	mov	r8, r2
 8008eda:	4699      	mov	r9, r3
 8008edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ee4:	f7f7 f9d0 	bl	8000288 <__aeabi_dsub>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4640      	mov	r0, r8
 8008eee:	4649      	mov	r1, r9
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4690      	mov	r8, r2
 8008efa:	4699      	mov	r9, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f06:	f7f7 f9c1 	bl	800028c <__adddf3>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4619      	mov	r1, r3
 8008f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4640      	mov	r0, r8
 8008f20:	4649      	mov	r1, r9
 8008f22:	f7f7 fb69 	bl	80005f8 <__aeabi_dmul>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008f34:	f7f7 fb60 	bl	80005f8 <__aeabi_dmul>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 f9a2 	bl	8000288 <__aeabi_dsub>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	68f9      	ldr	r1, [r7, #12]
 8008f4a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008f4e:	e04e      	b.n	8008fee <scaraFLowScurve+0x392>
	} else if(td < t && t <= tf){
 8008f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f58:	f7f7 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d045      	beq.n	8008fee <scaraFLowScurve+0x392>
 8008f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f6a:	f7f7 fdc1 	bl	8000af0 <__aeabi_dcmple>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d03c      	beq.n	8008fee <scaraFLowScurve+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f82:	f7f7 f981 	bl	8000288 <__aeabi_dsub>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4690      	mov	r8, r2
 8008f8c:	4699      	mov	r9, r3
 8008f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f96:	f7f7 f977 	bl	8000288 <__aeabi_dsub>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	f7f7 fb29 	bl	80005f8 <__aeabi_dmul>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4690      	mov	r8, r2
 8008fac:	4699      	mov	r9, r3
 8008fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fb6:	f7f7 f967 	bl	8000288 <__aeabi_dsub>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	f7f7 fb19 	bl	80005f8 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 f954 	bl	800028c <__adddf3>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	68f9      	ldr	r1, [r7, #12]
 8008fea:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3730      	adds	r7, #48	; 0x30
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40080000 	.word	0x40080000

08009000 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009000:	b082      	sub	sp, #8
 8009002:	b5b0      	push	{r4, r5, r7, lr}
 8009004:	b0ec      	sub	sp, #432	; 0x1b0
 8009006:	af22      	add	r7, sp, #136	; 0x88
 8009008:	f107 0108 	add.w	r1, r7, #8
 800900c:	ed81 0b00 	vstr	d0, [r1]
 8009010:	1d39      	adds	r1, r7, #4
 8009012:	6008      	str	r0, [r1, #0]
 8009014:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8009018:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800901c:	f107 0118 	add.w	r1, r7, #24
 8009020:	f107 0308 	add.w	r3, r7, #8
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	e9c1 2304 	strd	r2, r3, [r1, #16]
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800902c:	4b91      	ldr	r3, [pc, #580]	; (8009274 <scaraFlowDuty+0x274>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f040 817d 	bne.w	8009330 <scaraFlowDuty+0x330>
		double s, angle, x, y, z, v;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009036:	4b8f      	ldr	r3, [pc, #572]	; (8009274 <scaraFlowDuty+0x274>)
 8009038:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800903c:	2b00      	cmp	r3, #0
 800903e:	d12b      	bne.n	8009098 <scaraFlowDuty+0x98>

			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 8009040:	f107 0308 	add.w	r3, r7, #8
 8009044:	ed93 0b00 	vldr	d0, [r3]
 8009048:	488b      	ldr	r0, [pc, #556]	; (8009278 <scaraFlowDuty+0x278>)
 800904a:	f7ff fbf7 	bl	800883c <scaraFlowLSPB>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009054:	4b87      	ldr	r3, [pc, #540]	; (8009274 <scaraFlowDuty+0x274>)
 8009056:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 800905a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800905e:	4b85      	ldr	r3, [pc, #532]	; (8009274 <scaraFlowDuty+0x274>)
 8009060:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8009064:	f107 0110 	add.w	r1, r7, #16
 8009068:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800906c:	4b81      	ldr	r3, [pc, #516]	; (8009274 <scaraFlowDuty+0x274>)
 800906e:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009072:	f107 0108 	add.w	r1, r7, #8
 8009076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907a:	f7f7 fabd 	bl	80005f8 <__aeabi_dmul>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009086:	4b7b      	ldr	r3, [pc, #492]	; (8009274 <scaraFlowDuty+0x274>)
 8009088:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800908c:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			status2 = SCARA_STATUS_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009096:	e099      	b.n	80091cc <scaraFlowDuty+0x1cc>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009098:	4b76      	ldr	r3, [pc, #472]	; (8009274 <scaraFlowDuty+0x274>)
 800909a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d126      	bne.n	80090f0 <scaraFlowDuty+0xf0>

			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80090a2:	f107 0308 	add.w	r3, r7, #8
 80090a6:	ed93 0b00 	vldr	d0, [r3]
 80090aa:	4874      	ldr	r0, [pc, #464]	; (800927c <scaraFlowDuty+0x27c>)
 80090ac:	f7ff fdd6 	bl	8008c5c <scaraFLowScurve>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 80090b6:	4b6f      	ldr	r3, [pc, #444]	; (8009274 <scaraFlowDuty+0x274>)
 80090b8:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 80090bc:	f107 0110 	add.w	r1, r7, #16
 80090c0:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80090c4:	4b6b      	ldr	r3, [pc, #428]	; (8009274 <scaraFlowDuty+0x274>)
 80090c6:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 80090ca:	f107 0108 	add.w	r1, r7, #8
 80090ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d2:	f7f7 fa91 	bl	80005f8 <__aeabi_dmul>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80090de:	4b65      	ldr	r3, [pc, #404]	; (8009274 <scaraFlowDuty+0x274>)
 80090e0:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80090e4:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			status2 = SCARA_STATUS_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80090ee:	e06d      	b.n	80091cc <scaraFlowDuty+0x1cc>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 80090f0:	4b60      	ldr	r3, [pc, #384]	; (8009274 <scaraFlowDuty+0x274>)
 80090f2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d127      	bne.n	800914a <scaraFlowDuty+0x14a>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 80090fa:	4b5e      	ldr	r3, [pc, #376]	; (8009274 <scaraFlowDuty+0x274>)
 80090fc:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009100:	f107 0308 	add.w	r3, r7, #8
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	f107 0110 	add.w	r1, r7, #16
 8009114:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009118:	4b56      	ldr	r3, [pc, #344]	; (8009274 <scaraFlowDuty+0x274>)
 800911a:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 800911e:	f107 0108 	add.w	r1, r7, #8
 8009122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009126:	f7f7 fa67 	bl	80005f8 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009132:	4b50      	ldr	r3, [pc, #320]	; (8009274 <scaraFlowDuty+0x274>)
 8009134:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009138:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			status1 = SCARA_STATUS_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			status2 = SCARA_STATUS_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009148:	e040      	b.n	80091cc <scaraFlowDuty+0x1cc>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 800914a:	4b4a      	ldr	r3, [pc, #296]	; (8009274 <scaraFlowDuty+0x274>)
 800914c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009150:	2b03      	cmp	r3, #3
 8009152:	d139      	bne.n	80091c8 <scaraFlowDuty+0x1c8>
			scaraFlowGCODE(&s, time);
 8009154:	f107 0308 	add.w	r3, r7, #8
 8009158:	f107 0210 	add.w	r2, r7, #16
 800915c:	ed93 0b00 	vldr	d0, [r3]
 8009160:	4610      	mov	r0, r2
 8009162:	f7ff fc9f 	bl	8008aa4 <scaraFlowGCODE>
			s -= accumulate_s;
 8009166:	f107 0310 	add.w	r3, r7, #16
 800916a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800916e:	4b44      	ldr	r3, [pc, #272]	; (8009280 <scaraFlowDuty+0x280>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f7f7 f888 	bl	8000288 <__aeabi_dsub>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	f107 0110 	add.w	r1, r7, #16
 8009180:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009184:	4b3b      	ldr	r3, [pc, #236]	; (8009274 <scaraFlowDuty+0x274>)
 8009186:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 800918a:	4b3e      	ldr	r3, [pc, #248]	; (8009284 <scaraFlowDuty+0x284>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f107 0108 	add.w	r1, r7, #8
 8009194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009198:	f7f7 f876 	bl	8000288 <__aeabi_dsub>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4620      	mov	r0, r4
 80091a2:	4629      	mov	r1, r5
 80091a4:	f7f7 fa28 	bl	80005f8 <__aeabi_dmul>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80091b0:	4b30      	ldr	r3, [pc, #192]	; (8009274 <scaraFlowDuty+0x274>)
 80091b2:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80091b6:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			status1 = SCARA_STATUS_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			status2 = SCARA_STATUS_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80091c6:	e001      	b.n	80091cc <scaraFlowDuty+0x1cc>
//			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
//			status1 = SCARA_STATUS_OK;
//			status2 = SCARA_STATUS_OK;
//		}
		else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80091c8:	2305      	movs	r3, #5
 80091ca:	e286      	b.n	80096da <scaraFlowDuty+0x6da>
		}

		if ( SCARA_STATUS_OK != status1) {
 80091cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <scaraFlowDuty+0x1da>
			return status1;
 80091d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091d8:	e27f      	b.n	80096da <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status2) {
 80091da:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <scaraFlowDuty+0x1e8>
			return status2;
 80091e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80091e6:	e278      	b.n	80096da <scaraFlowDuty+0x6da>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80091e8:	4b22      	ldr	r3, [pc, #136]	; (8009274 <scaraFlowDuty+0x274>)
 80091ea:	7a1b      	ldrb	r3, [r3, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11d      	bne.n	800922c <scaraFlowDuty+0x22c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80091f0:	f107 0310 	add.w	r3, r7, #16
 80091f4:	ed93 7b00 	vldr	d7, [r3]
 80091f8:	eeb0 0a47 	vmov.f32	s0, s14
 80091fc:	eef0 0a67 	vmov.f32	s1, s15
 8009200:	4821      	ldr	r0, [pc, #132]	; (8009288 <scaraFlowDuty+0x288>)
 8009202:	f000 fa75 	bl	80096f0 <scaraFlowLine>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			x = myDUTY.task.path.line.x_current;
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <scaraFlowDuty+0x274>)
 800920e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009212:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			y = myDUTY.task.path.line.y_current;
 8009216:	4b17      	ldr	r3, [pc, #92]	; (8009274 <scaraFlowDuty+0x274>)
 8009218:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800921c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			z = myDUTY.task.path.line.z_current;
 8009220:	4b14      	ldr	r3, [pc, #80]	; (8009274 <scaraFlowDuty+0x274>)
 8009222:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009226:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 800922a:	e031      	b.n	8009290 <scaraFlowDuty+0x290>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 800922c:	4b11      	ldr	r3, [pc, #68]	; (8009274 <scaraFlowDuty+0x274>)
 800922e:	7a1b      	ldrb	r3, [r3, #8]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d11d      	bne.n	8009270 <scaraFlowDuty+0x270>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009234:	f107 0310 	add.w	r3, r7, #16
 8009238:	ed93 7b00 	vldr	d7, [r3]
 800923c:	eeb0 0a47 	vmov.f32	s0, s14
 8009240:	eef0 0a67 	vmov.f32	s1, s15
 8009244:	4811      	ldr	r0, [pc, #68]	; (800928c <scaraFlowDuty+0x28c>)
 8009246:	f000 fadb 	bl	8009800 <scaraFlowCircle>
 800924a:	4603      	mov	r3, r0
 800924c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			x = myDUTY.task.path.circle.x_current;
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <scaraFlowDuty+0x274>)
 8009252:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8009256:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			y = myDUTY.task.path.circle.y_current;
 800925a:	4b06      	ldr	r3, [pc, #24]	; (8009274 <scaraFlowDuty+0x274>)
 800925c:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8009260:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			z = myDUTY.task.path.circle.z_current;
 8009264:	4b03      	ldr	r3, [pc, #12]	; (8009274 <scaraFlowDuty+0x274>)
 8009266:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 800926a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 800926e:	e00f      	b.n	8009290 <scaraFlowDuty+0x290>
//			x = myDUTY.task.path.line.x_current;
//			y = myDUTY.task.path.line.y_current;
//			z = myDUTY.task.path.line.z0;
//		}
		else {
			return SCARA_STATUS_ERROR_TASK;
 8009270:	2303      	movs	r3, #3
 8009272:	e232      	b.n	80096da <scaraFlowDuty+0x6da>
 8009274:	200108c0 	.word	0x200108c0
 8009278:	200109d8 	.word	0x200109d8
 800927c:	20010a58 	.word	0x20010a58
 8009280:	200085d8 	.word	0x200085d8
 8009284:	200106c8 	.word	0x200106c8
 8009288:	200108d0 	.word	0x200108d0
 800928c:	20010940 	.word	0x20010940
		}

		positionCompute.x 		= x;
 8009290:	f107 0118 	add.w	r1, r7, #24
 8009294:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009298:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.y		= y;
 800929c:	f107 0118 	add.w	r1, r7, #24
 80092a0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80092a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		positionCompute.z 		= z;
 80092a8:	f107 0118 	add.w	r1, r7, #24
 80092ac:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80092b0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80092b4:	4b9c      	ldr	r3, [pc, #624]	; (8009528 <scaraFlowDuty+0x528>)
 80092b6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80092ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80092be:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f7 f92e 	bl	8000524 <__aeabi_i2d>
 80092c8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80092cc:	f7f7 f994 	bl	80005f8 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7f6 ffd8 	bl	800028c <__adddf3>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	f107 0118 	add.w	r1, r7, #24
 80092e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		positionCompute.q		= s;
 80092e8:	f107 0310 	add.w	r3, r7, #16
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f107 0118 	add.w	r1, r7, #24
 80092f4:	e9c1 2300 	strd	r2, r3, [r1]
//		positionCompute.v_3d    = v;
//		positionCompute.v_roll  = v_angle;

//		positionCompute.total_time = myDUTY.time_total;
//		positionCompute.t		= time;
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80092f8:	f107 0418 	add.w	r4, r7, #24
 80092fc:	4668      	mov	r0, sp
 80092fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009302:	2288      	movs	r2, #136	; 0x88
 8009304:	4619      	mov	r1, r3
 8009306:	f00c f8d3 	bl	80154b0 <memcpy>
 800930a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800930e:	cb0c      	ldmia	r3, {r2, r3}
 8009310:	4620      	mov	r0, r4
 8009312:	f7fc f8a5 	bl	8005460 <kinematicInverse>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <scaraFlowDuty+0x320>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800931c:	2307      	movs	r3, #7
 800931e:	e1dc      	b.n	80096da <scaraFlowDuty+0x6da>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009320:	f107 0118 	add.w	r1, r7, #24
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	2290      	movs	r2, #144	; 0x90
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	f00c f8c1 	bl	80154b0 <memcpy>
 800932e:	e1d3      	b.n	80096d8 <scaraFlowDuty+0x6d8>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8009330:	4b7d      	ldr	r3, [pc, #500]	; (8009528 <scaraFlowDuty+0x528>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b01      	cmp	r3, #1
 8009336:	f040 81cd 	bne.w	80096d4 <scaraFlowDuty+0x6d4>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800933a:	4b7b      	ldr	r3, [pc, #492]	; (8009528 <scaraFlowDuty+0x528>)
 800933c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009340:	2b00      	cmp	r3, #0
 8009342:	d174      	bne.n	800942e <scaraFlowDuty+0x42e>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8009344:	f107 0308 	add.w	r3, r7, #8
 8009348:	ed93 0b00 	vldr	d0, [r3]
 800934c:	4877      	ldr	r0, [pc, #476]	; (800952c <scaraFlowDuty+0x52c>)
 800934e:	f7ff fa75 	bl	800883c <scaraFlowLSPB>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8009358:	f107 0308 	add.w	r3, r7, #8
 800935c:	ed93 0b00 	vldr	d0, [r3]
 8009360:	4873      	ldr	r0, [pc, #460]	; (8009530 <scaraFlowDuty+0x530>)
 8009362:	f7ff fa6b 	bl	800883c <scaraFlowLSPB>
 8009366:	4603      	mov	r3, r0
 8009368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800936c:	f107 0308 	add.w	r3, r7, #8
 8009370:	ed93 0b00 	vldr	d0, [r3]
 8009374:	486f      	ldr	r0, [pc, #444]	; (8009534 <scaraFlowDuty+0x534>)
 8009376:	f7ff fa61 	bl	800883c <scaraFlowLSPB>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8009380:	f107 0308 	add.w	r3, r7, #8
 8009384:	ed93 0b00 	vldr	d0, [r3]
 8009388:	486b      	ldr	r0, [pc, #428]	; (8009538 <scaraFlowDuty+0x538>)
 800938a:	f7ff fa57 	bl	800883c <scaraFlowLSPB>
 800938e:	4603      	mov	r3, r0
 8009390:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009394:	4b64      	ldr	r3, [pc, #400]	; (8009528 <scaraFlowDuty+0x528>)
 8009396:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800939a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800939e:	4b62      	ldr	r3, [pc, #392]	; (8009528 <scaraFlowDuty+0x528>)
 80093a0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 80093a4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 80093a8:	4b5f      	ldr	r3, [pc, #380]	; (8009528 <scaraFlowDuty+0x528>)
 80093aa:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 80093ae:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 80093b2:	4b5d      	ldr	r3, [pc, #372]	; (8009528 <scaraFlowDuty+0x528>)
 80093b4:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 80093b8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80093bc:	4b5a      	ldr	r3, [pc, #360]	; (8009528 <scaraFlowDuty+0x528>)
 80093be:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80093ca:	4b57      	ldr	r3, [pc, #348]	; (8009528 <scaraFlowDuty+0x528>)
 80093cc:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80093d8:	4b53      	ldr	r3, [pc, #332]	; (8009528 <scaraFlowDuty+0x528>)
 80093da:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 80093e6:	4b50      	ldr	r3, [pc, #320]	; (8009528 <scaraFlowDuty+0x528>)
 80093e8:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 80093f4:	4b4c      	ldr	r3, [pc, #304]	; (8009528 <scaraFlowDuty+0x528>)
 80093f6:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009402:	4b49      	ldr	r3, [pc, #292]	; (8009528 <scaraFlowDuty+0x528>)
 8009404:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009410:	4b45      	ldr	r3, [pc, #276]	; (8009528 <scaraFlowDuty+0x528>)
 8009412:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800941e:	4b42      	ldr	r3, [pc, #264]	; (8009528 <scaraFlowDuty+0x528>)
 8009420:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800942c:	e05f      	b.n	80094ee <scaraFlowDuty+0x4ee>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800942e:	4b3e      	ldr	r3, [pc, #248]	; (8009528 <scaraFlowDuty+0x528>)
 8009430:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009434:	2b01      	cmp	r3, #1
 8009436:	d158      	bne.n	80094ea <scaraFlowDuty+0x4ea>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	ed93 0b00 	vldr	d0, [r3]
 8009440:	483e      	ldr	r0, [pc, #248]	; (800953c <scaraFlowDuty+0x53c>)
 8009442:	f7ff fc0b 	bl	8008c5c <scaraFLowScurve>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	ed93 0b00 	vldr	d0, [r3]
 8009454:	483a      	ldr	r0, [pc, #232]	; (8009540 <scaraFlowDuty+0x540>)
 8009456:	f7ff fc01 	bl	8008c5c <scaraFLowScurve>
 800945a:	4603      	mov	r3, r0
 800945c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	ed93 0b00 	vldr	d0, [r3]
 8009468:	4836      	ldr	r0, [pc, #216]	; (8009544 <scaraFlowDuty+0x544>)
 800946a:	f7ff fbf7 	bl	8008c5c <scaraFLowScurve>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8009474:	f107 0308 	add.w	r3, r7, #8
 8009478:	ed93 0b00 	vldr	d0, [r3]
 800947c:	4832      	ldr	r0, [pc, #200]	; (8009548 <scaraFlowDuty+0x548>)
 800947e:	f7ff fbed 	bl	8008c5c <scaraFLowScurve>
 8009482:	4603      	mov	r3, r0
 8009484:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8009488:	4b27      	ldr	r3, [pc, #156]	; (8009528 <scaraFlowDuty+0x528>)
 800948a:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800948e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8009492:	4b25      	ldr	r3, [pc, #148]	; (8009528 <scaraFlowDuty+0x528>)
 8009494:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8009498:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800949c:	4b22      	ldr	r3, [pc, #136]	; (8009528 <scaraFlowDuty+0x528>)
 800949e:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 80094a2:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 80094a6:	4b20      	ldr	r3, [pc, #128]	; (8009528 <scaraFlowDuty+0x528>)
 80094a8:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 80094ac:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 80094b0:	4b1d      	ldr	r3, [pc, #116]	; (8009528 <scaraFlowDuty+0x528>)
 80094b2:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 80094be:	4b1a      	ldr	r3, [pc, #104]	; (8009528 <scaraFlowDuty+0x528>)
 80094c0:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80094cc:	4b16      	ldr	r3, [pc, #88]	; (8009528 <scaraFlowDuty+0x528>)
 80094ce:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80094da:	4b13      	ldr	r3, [pc, #76]	; (8009528 <scaraFlowDuty+0x528>)
 80094dc:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 80094e8:	e001      	b.n	80094ee <scaraFlowDuty+0x4ee>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80094ea:	2305      	movs	r3, #5
 80094ec:	e0f5      	b.n	80096da <scaraFlowDuty+0x6da>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 80094ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <scaraFlowDuty+0x4fc>
			return status1;
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094fa:	e0ee      	b.n	80096da <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status2) {
 80094fc:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <scaraFlowDuty+0x50a>
			return status2;
 8009504:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009508:	e0e7      	b.n	80096da <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status3) {
 800950a:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <scaraFlowDuty+0x518>
			return status3;
 8009512:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8009516:	e0e0      	b.n	80096da <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status4) {
 8009518:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 800951c:	2b00      	cmp	r3, #0
 800951e:	d015      	beq.n	800954c <scaraFlowDuty+0x54c>
			return status4;
 8009520:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8009524:	e0d9      	b.n	80096da <scaraFlowDuty+0x6da>
 8009526:	bf00      	nop
 8009528:	200108c0 	.word	0x200108c0
 800952c:	20010ce0 	.word	0x20010ce0
 8009530:	20010e60 	.word	0x20010e60
 8009534:	20010fe0 	.word	0x20010fe0
 8009538:	20011160 	.word	0x20011160
 800953c:	20010d60 	.word	0x20010d60
 8009540:	20010ee0 	.word	0x20010ee0
 8009544:	20011060 	.word	0x20011060
 8009548:	200111e0 	.word	0x200111e0
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800954c:	4b67      	ldr	r3, [pc, #412]	; (80096ec <scaraFlowDuty+0x6ec>)
 800954e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009552:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009556:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 800955a:	4618      	mov	r0, r3
 800955c:	f7f6 ffe2 	bl	8000524 <__aeabi_i2d>
 8009560:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8009564:	f7f7 f848 	bl	80005f8 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f6 fe8c 	bl	800028c <__adddf3>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	f107 0118 	add.w	r1, r7, #24
 800957c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8009580:	4b5a      	ldr	r3, [pc, #360]	; (80096ec <scaraFlowDuty+0x6ec>)
 8009582:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8009586:	e9d3 4500 	ldrd	r4, r5, [r3]
 800958a:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 800958e:	4618      	mov	r0, r3
 8009590:	f7f6 ffc8 	bl	8000524 <__aeabi_i2d>
 8009594:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009598:	f7f7 f82e 	bl	80005f8 <__aeabi_dmul>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f6 fe72 	bl	800028c <__adddf3>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	f107 0118 	add.w	r1, r7, #24
 80095b0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80095b4:	4b4d      	ldr	r3, [pc, #308]	; (80096ec <scaraFlowDuty+0x6ec>)
 80095b6:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80095ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80095be:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7f6 ffae 	bl	8000524 <__aeabi_i2d>
 80095c8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80095cc:	f7f7 f814 	bl	80005f8 <__aeabi_dmul>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f6 fe58 	bl	800028c <__adddf3>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	f107 0118 	add.w	r1, r7, #24
 80095e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 80095e8:	4b40      	ldr	r3, [pc, #256]	; (80096ec <scaraFlowDuty+0x6ec>)
 80095ea:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80095ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80095f2:	f997 30b4 	ldrsb.w	r3, [r7, #180]	; 0xb4
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7f6 ff94 	bl	8000524 <__aeabi_i2d>
 80095fc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009600:	f7f6 fffa 	bl	80005f8 <__aeabi_dmul>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4620      	mov	r0, r4
 800960a:	4629      	mov	r1, r5
 800960c:	f7f6 fe3e 	bl	800028c <__adddf3>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	f107 0118 	add.w	r1, r7, #24
 8009618:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		positionCompute.v_theta1 	= v0;
 800961c:	f107 0118 	add.w	r1, r7, #24
 8009620:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009624:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		positionCompute.v_theta2 	= v1;
 8009628:	f107 0118 	add.w	r1, r7, #24
 800962c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8009630:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.v_d3 		= v2;
 8009634:	f107 0118 	add.w	r1, r7, #24
 8009638:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800963c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.v_theta4 	= v3;
 8009640:	f107 0118 	add.w	r1, r7, #24
 8009644:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8009648:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
//		positionCompute.q_theta1 = s0;
//		positionCompute.q_theta2 = s1;
//		positionCompute.q_d3	 = s2;
//		positionCompute.q_theta4 = s3;

		positionCompute.total_time = myDUTY.time_total;
 800964c:	4b27      	ldr	r3, [pc, #156]	; (80096ec <scaraFlowDuty+0x6ec>)
 800964e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f107 0118 	add.w	r1, r7, #24
 800965a:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.t		= time;
 800965e:	f107 0118 	add.w	r1, r7, #24
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800966e:	f107 0318 	add.w	r3, r7, #24
 8009672:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8009676:	f107 0318 	add.w	r3, r7, #24
 800967a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800967e:	f107 0318 	add.w	r3, r7, #24
 8009682:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 8009686:	f107 0318 	add.w	r3, r7, #24
 800968a:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
 800968e:	eeb0 3a44 	vmov.f32	s6, s8
 8009692:	eef0 3a64 	vmov.f32	s7, s9
 8009696:	eeb0 2a45 	vmov.f32	s4, s10
 800969a:	eef0 2a65 	vmov.f32	s5, s11
 800969e:	eeb0 1a46 	vmov.f32	s2, s12
 80096a2:	eef0 1a66 	vmov.f32	s3, s13
 80096a6:	eeb0 0a47 	vmov.f32	s0, s14
 80096aa:	eef0 0a67 	vmov.f32	s1, s15
 80096ae:	f000 f92f 	bl	8009910 <scaraCheckWorkSpace4>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <scaraFlowDuty+0x6bc>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80096b8:	2307      	movs	r3, #7
 80096ba:	e00e      	b.n	80096da <scaraFlowDuty+0x6da>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80096bc:	f107 0118 	add.w	r1, r7, #24
 80096c0:	1d3b      	adds	r3, r7, #4
 80096c2:	2290      	movs	r2, #144	; 0x90
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	f00b fef3 	bl	80154b0 <memcpy>
		}
		kinematicForward(pos_Next);
 80096ca:	1d3b      	adds	r3, r7, #4
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	f7fb fda3 	bl	8005218 <kinematicForward>
 80096d2:	e001      	b.n	80096d8 <scaraFlowDuty+0x6d8>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80096d4:	2302      	movs	r3, #2
 80096d6:	e000      	b.n	80096da <scaraFlowDuty+0x6da>
	}

	return SCARA_STATUS_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80096e0:	46bd      	mov	sp, r7
 80096e2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80096e6:	b002      	add	sp, #8
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	200108c0 	.word	0x200108c0

080096f0 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 80096f0:	b5b0      	push	{r4, r5, r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009702:	a33d      	add	r3, pc, #244	; (adr r3, 80097f8 <scaraFlowLine+0x108>)
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	f7f7 fa06 	bl	8000b18 <__aeabi_dcmpgt>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d05a      	beq.n	80097c8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800971e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009722:	f7f6 ff69 	bl	80005f8 <__aeabi_dmul>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4610      	mov	r0, r2
 800972c:	4619      	mov	r1, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009734:	f7f7 f88a 	bl	800084c <__aeabi_ddiv>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4620      	mov	r0, r4
 800973e:	4629      	mov	r1, r5
 8009740:	f7f6 fda4 	bl	800028c <__adddf3>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	68f9      	ldr	r1, [r7, #12]
 800974a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800975a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800975e:	f7f6 ff4b 	bl	80005f8 <__aeabi_dmul>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4610      	mov	r0, r2
 8009768:	4619      	mov	r1, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009770:	f7f7 f86c 	bl	800084c <__aeabi_ddiv>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4620      	mov	r0, r4
 800977a:	4629      	mov	r1, r5
 800977c:	f7f6 fd86 	bl	800028c <__adddf3>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	68f9      	ldr	r1, [r7, #12]
 8009786:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8009796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800979a:	f7f6 ff2d 	bl	80005f8 <__aeabi_dmul>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4610      	mov	r0, r2
 80097a4:	4619      	mov	r1, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80097ac:	f7f7 f84e 	bl	800084c <__aeabi_ddiv>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f6 fd68 	bl	800028c <__adddf3>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	68f9      	ldr	r1, [r7, #12]
 80097c2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80097c6:	e011      	b.n	80097ec <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80097da:	68f9      	ldr	r1, [r7, #12]
 80097dc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bdb0      	pop	{r4, r5, r7, pc}
 80097f6:	bf00      	nop
 80097f8:	47ae147b 	.word	0x47ae147b
 80097fc:	3f847ae1 	.word	0x3f847ae1

08009800 <scaraFlowCircle>:
	line->y_current = (a*bezier_y_coeffs[0] + b*bezier_y_coeffs[1] + c*bezier_y_coeffs[2])/(a + 2*bezier_wc*b+c);
	return SCARA_STATUS_OK;
}

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8009800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009804:	b086      	sub	sp, #24
 8009806:	af00      	add	r7, sp, #0
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009818:	f7f7 f818 	bl	800084c <__aeabi_ddiv>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f993 3000 	ldrsb.w	r3, [r3]
 800983c:	4618      	mov	r0, r3
 800983e:	f7f6 fe71 	bl	8000524 <__aeabi_i2d>
 8009842:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009846:	f7f6 fed7 	bl	80005f8 <__aeabi_dmul>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4650      	mov	r0, sl
 8009850:	4659      	mov	r1, fp
 8009852:	f7f6 fd1b 	bl	800028c <__adddf3>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	ec43 2b17 	vmov	d7, r2, r3
 800985e:	eeb0 0a47 	vmov.f32	s0, s14
 8009862:	eef0 0a67 	vmov.f32	s1, s15
 8009866:	f010 fb03 	bl	8019e70 <cos>
 800986a:	ec53 2b10 	vmov	r2, r3, d0
 800986e:	4640      	mov	r0, r8
 8009870:	4649      	mov	r1, r9
 8009872:	f7f6 fec1 	bl	80005f8 <__aeabi_dmul>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4620      	mov	r0, r4
 800987c:	4629      	mov	r1, r5
 800987e:	f7f6 fd05 	bl	800028c <__adddf3>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f993 3000 	ldrsb.w	r3, [r3]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7f6 fe3d 	bl	8000524 <__aeabi_i2d>
 80098aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098ae:	f7f6 fea3 	bl	80005f8 <__aeabi_dmul>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4650      	mov	r0, sl
 80098b8:	4659      	mov	r1, fp
 80098ba:	f7f6 fce7 	bl	800028c <__adddf3>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	ec43 2b17 	vmov	d7, r2, r3
 80098c6:	eeb0 0a47 	vmov.f32	s0, s14
 80098ca:	eef0 0a67 	vmov.f32	s1, s15
 80098ce:	f010 fb67 	bl	8019fa0 <sin>
 80098d2:	ec53 2b10 	vmov	r2, r3, d0
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4620      	mov	r0, r4
 80098e4:	4629      	mov	r1, r5
 80098e6:	f7f6 fcd1 	bl	800028c <__adddf3>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800990c:	0000      	movs	r0, r0
	...

08009910 <scaraCheckWorkSpace4>:
//	return SCARA_STATUS_OK;
//}


/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	ed87 0b06 	vstr	d0, [r7, #24]
 800991a:	ed87 1b04 	vstr	d1, [r7, #16]
 800991e:	ed87 2b02 	vstr	d2, [r7, #8]
 8009922:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 8009926:	a335      	add	r3, pc, #212	; (adr r3, 80099fc <scaraCheckWorkSpace4+0xec>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009930:	f7f7 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <scaraCheckWorkSpace4+0x3e>
 800993a:	a332      	add	r3, pc, #200	; (adr r3, 8009a04 <scaraCheckWorkSpace4+0xf4>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009944:	f7f7 f8e8 	bl	8000b18 <__aeabi_dcmpgt>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800994e:	2307      	movs	r3, #7
 8009950:	e043      	b.n	80099da <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 8009952:	a32e      	add	r3, pc, #184	; (adr r3, 8009a0c <scaraCheckWorkSpace4+0xfc>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800995c:	f7f7 f8be 	bl	8000adc <__aeabi_dcmplt>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <scaraCheckWorkSpace4+0x6a>
 8009966:	a32b      	add	r3, pc, #172	; (adr r3, 8009a14 <scaraCheckWorkSpace4+0x104>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009970:	f7f7 f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800997a:	2307      	movs	r3, #7
 800997c:	e02d      	b.n	80099da <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800997e:	f04f 0200 	mov.w	r2, #0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800998a:	f7f7 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <scaraCheckWorkSpace4+0x98>
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	4b17      	ldr	r3, [pc, #92]	; (80099f8 <scaraCheckWorkSpace4+0xe8>)
 800999a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800999e:	f7f7 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80099a8:	2307      	movs	r3, #7
 80099aa:	e016      	b.n	80099da <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 80099ac:	a30e      	add	r3, pc, #56	; (adr r3, 80099e8 <scaraCheckWorkSpace4+0xd8>)
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099b6:	f7f7 f891 	bl	8000adc <__aeabi_dcmplt>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <scaraCheckWorkSpace4+0xc4>
 80099c0:	a30b      	add	r3, pc, #44	; (adr r3, 80099f0 <scaraCheckWorkSpace4+0xe0>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099ca:	f7f7 f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80099d4:	2307      	movs	r3, #7
 80099d6:	e000      	b.n	80099da <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3720      	adds	r7, #32
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	f3af 8000 	nop.w
 80099e8:	a7777778 	.word	0xa7777778
 80099ec:	c0088956 	.word	0xc0088956
 80099f0:	a7777778 	.word	0xa7777778
 80099f4:	40088956 	.word	0x40088956
 80099f8:	40590000 	.word	0x40590000
 80099fc:	74444445 	.word	0x74444445
 8009a00:	bff95623 	.word	0xbff95623
 8009a04:	74444445 	.word	0x74444445
 8009a08:	3ff95623 	.word	0x3ff95623
 8009a0c:	54cccccd 	.word	0x54cccccd
 8009a10:	c003a649 	.word	0xc003a649
 8009a14:	54cccccd 	.word	0x54cccccd
 8009a18:	4003a649 	.word	0x4003a649

08009a1c <PNPcalMovDistance>:
	} else {
		return SCARA_STATUS_ERROR;
	}
}
double	PNPcalMovDistance(double startx, double starty, double objectx, double objecty, double Vr, double Vc)
{
 8009a1c:	b5b0      	push	{r4, r5, r7, lr}
 8009a1e:	b096      	sub	sp, #88	; 0x58
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8009a26:	ed87 1b08 	vstr	d1, [r7, #32]
 8009a2a:	ed87 2b06 	vstr	d2, [r7, #24]
 8009a2e:	ed87 3b04 	vstr	d3, [r7, #16]
 8009a32:	ed87 4b02 	vstr	d4, [r7, #8]
 8009a36:	ed87 5b00 	vstr	d5, [r7]
	double deltax = objectx - startx;
 8009a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a42:	f7f6 fc21 	bl	8000288 <__aeabi_dsub>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double deltay = objecty - starty;
 8009a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009a56:	f7f6 fc17 	bl	8000288 <__aeabi_dsub>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double distance = sqrt(deltax*deltax + deltay*deltay);
 8009a62:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a6a:	f7f6 fdc5 	bl	80005f8 <__aeabi_dmul>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4614      	mov	r4, r2
 8009a74:	461d      	mov	r5, r3
 8009a76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 fbff 	bl	800028c <__adddf3>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	ec43 2b17 	vmov	d7, r2, r3
 8009a96:	eeb0 0a47 	vmov.f32	s0, s14
 8009a9a:	eef0 0a67 	vmov.f32	s1, s15
 8009a9e:	f010 fb0f 	bl	801a0c0 <sqrt>
 8009aa2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	double alpha = atan2(deltax, deltay);
 8009aa6:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8009aaa:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8009aae:	f010 fb05 	bl	801a0bc <atan2>
 8009ab2:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double beta = asin(Vc/Vr*sin(alpha));
 8009ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009abe:	f7f6 fec5 	bl	800084c <__aeabi_ddiv>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4614      	mov	r4, r2
 8009ac8:	461d      	mov	r5, r3
 8009aca:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8009ace:	f010 fa67 	bl	8019fa0 <sin>
 8009ad2:	ec53 2b10 	vmov	r2, r3, d0
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7f6 fd8d 	bl	80005f8 <__aeabi_dmul>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	ec43 2b17 	vmov	d7, r2, r3
 8009ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8009aea:	eef0 0a67 	vmov.f32	s1, s15
 8009aee:	f010 faab 	bl	801a048 <asin>
 8009af2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	return distance*sin(beta)/sin(beta+alpha);
 8009af6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009afa:	f010 fa51 	bl	8019fa0 <sin>
 8009afe:	ec51 0b10 	vmov	r0, r1, d0
 8009b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b06:	f7f6 fd77 	bl	80005f8 <__aeabi_dmul>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4614      	mov	r4, r2
 8009b10:	461d      	mov	r5, r3
 8009b12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009b1a:	f7f6 fbb7 	bl	800028c <__adddf3>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	ec43 2b17 	vmov	d7, r2, r3
 8009b26:	eeb0 0a47 	vmov.f32	s0, s14
 8009b2a:	eef0 0a67 	vmov.f32	s1, s15
 8009b2e:	f010 fa37 	bl	8019fa0 <sin>
 8009b32:	ec53 2b10 	vmov	r2, r3, d0
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7f6 fe87 	bl	800084c <__aeabi_ddiv>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	ec43 2b17 	vmov	d7, r2, r3
}
 8009b46:	eeb0 0a47 	vmov.f32	s0, s14
 8009b4a:	eef0 0a67 	vmov.f32	s1, s15
 8009b4e:	3758      	adds	r7, #88	; 0x58
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bdb0      	pop	{r4, r5, r7, pc}
 8009b54:	0000      	movs	r0, r0
	...

08009b58 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8009b58:	b5b0      	push	{r4, r5, r7, lr}
 8009b5a:	b0f0      	sub	sp, #448	; 0x1c0
 8009b5c:	af22      	add	r7, sp, #136	; 0x88
	int32_t sample_count;
	double run_time = 0;
 8009b5e:	f04f 0200 	mov.w	r2, #0
 8009b62:	f04f 0300 	mov.w	r3, #0
 8009b66:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8009b6a:	463b      	mov	r3, r7
 8009b6c:	4a36      	ldr	r2, [pc, #216]	; (8009c48 <scaraTestDuty+0xf0>)
 8009b6e:	4618      	mov	r0, r3
 8009b70:	4611      	mov	r1, r2
 8009b72:	2390      	movs	r3, #144	; 0x90
 8009b74:	461a      	mov	r2, r3
 8009b76:	f00b fc9b 	bl	80154b0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 8009b7a:	4b34      	ldr	r3, [pc, #208]	; (8009c4c <scaraTestDuty+0xf4>)
 8009b7c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b84:	a32e      	add	r3, pc, #184	; (adr r3, 8009c40 <scaraTestDuty+0xe8>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f7f6 fe5f 	bl	800084c <__aeabi_ddiv>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	ec43 2b17 	vmov	d7, r2, r3
 8009b96:	eeb0 0a47 	vmov.f32	s0, s14
 8009b9a:	eef0 0a67 	vmov.f32	s1, s15
 8009b9e:	f010 f8e3 	bl	8019d68 <ceil>
 8009ba2:	ec53 2b10 	vmov	r2, r3, d0
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f7f6 ffd5 	bl	8000b58 <__aeabi_d2iz>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	for (int32_t i = 1; i < sample_count; i++) {
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009bba:	e032      	b.n	8009c22 <scaraTestDuty+0xca>
		run_time += T_SAMPLING;
 8009bbc:	a320      	add	r3, pc, #128	; (adr r3, 8009c40 <scaraTestDuty+0xe8>)
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8009bc6:	f7f6 fb61 	bl	800028c <__adddf3>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8009bd2:	463c      	mov	r4, r7
 8009bd4:	f107 0590 	add.w	r5, r7, #144	; 0x90
 8009bd8:	4668      	mov	r0, sp
 8009bda:	f104 0308 	add.w	r3, r4, #8
 8009bde:	2288      	movs	r2, #136	; 0x88
 8009be0:	4619      	mov	r1, r3
 8009be2:	f00b fc65 	bl	80154b0 <memcpy>
 8009be6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009bea:	4628      	mov	r0, r5
 8009bec:	ed97 0b4c 	vldr	d0, [r7, #304]	; 0x130
 8009bf0:	f7ff fa06 	bl	8009000 <scaraFlowDuty>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if (status != SCARA_STATUS_OK) {
 8009bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d002      	beq.n	8009c08 <scaraTestDuty+0xb0>
			return status;
 8009c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c06:	e013      	b.n	8009c30 <scaraTestDuty+0xd8>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 8009c08:	463a      	mov	r2, r7
 8009c0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009c0e:	4611      	mov	r1, r2
 8009c10:	2290      	movs	r2, #144	; 0x90
 8009c12:	4618      	mov	r0, r3
 8009c14:	f00b fc4c 	bl	80154b0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 8009c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009c22:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	dbc6      	blt.n	8009bbc <scaraTestDuty+0x64>
	}
	return SCARA_STATUS_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bdb0      	pop	{r4, r5, r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w
 8009c40:	40000000 	.word	0x40000000
 8009c44:	3f847ae1 	.word	0x3f847ae1
 8009c48:	20011420 	.word	0x20011420
 8009c4c:	200108c0 	.word	0x200108c0

08009c50 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <scaraSetScanFlag+0x14>)
 8009c56:	2201      	movs	r2, #1
 8009c58:	70da      	strb	r2, [r3, #3]
}
 8009c5a:	bf00      	nop
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	20004080 	.word	0x20004080

08009c68 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8009c72:	4a05      	ldr	r2, [pc, #20]	; (8009c88 <scaraSetOutput+0x20>)
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fc fee4 	bl	8006a48 <lowlayer_setOutput>
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20004080 	.word	0x20004080

08009c8c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8009c96:	4a04      	ldr	r2, [pc, #16]	; (8009ca8 <scaraSetDutyState+0x1c>)
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	7093      	strb	r3, [r2, #2]
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20004080 	.word	0x20004080

08009cac <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8009cb6:	4a04      	ldr	r2, [pc, #16]	; (8009cc8 <scaraSetMode+0x1c>)
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	7053      	strb	r3, [r2, #1]
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	20004080 	.word	0x20004080

08009ccc <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 8009cd6:	4a04      	ldr	r2, [pc, #16]	; (8009ce8 <scaraSetMethod+0x1c>)
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	7013      	strb	r3, [r2, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	20004080 	.word	0x20004080

08009cec <scaraUpdatePosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
}

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 8009cf4:	2290      	movs	r2, #144	; 0x90
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4803      	ldr	r0, [pc, #12]	; (8009d08 <scaraUpdatePosition+0x1c>)
 8009cfa:	f00b fbd9 	bl	80154b0 <memcpy>
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	200114b0 	.word	0x200114b0

08009d0c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8009d10:	4b03      	ldr	r3, [pc, #12]	; (8009d20 <scaraGetMode+0x14>)
 8009d12:	785b      	ldrb	r3, [r3, #1]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	20004080 	.word	0x20004080

08009d24 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
	return mySCARA.method;
 8009d28:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <scaraGetMethod+0x14>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	20004080 	.word	0x20004080

08009d3c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8009d40:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <scaraGetDutyState+0x14>)
 8009d42:	789b      	ldrb	r3, [r3, #2]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	20004080 	.word	0x20004080

08009d54 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8009d58:	4b03      	ldr	r3, [pc, #12]	; (8009d68 <scaraIsScanLimit+0x14>)
 8009d5a:	78db      	ldrb	r3, [r3, #3]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20004080 	.word	0x20004080

08009d6c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total < run_time) {
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <scaraIsFinish+0x30>)
 8009d78:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d84:	f7f6 fec8 	bl	8000b18 <__aeabi_dcmpgt>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <scaraIsFinish+0x26>
		return TRUE;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <scaraIsFinish+0x28>
	} else {
		return FALSE;
 8009d92:	2300      	movs	r3, #0
	}
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	200108c0 	.word	0x200108c0

08009da0 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 8009da0:	b082      	sub	sp, #8
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	f107 0118 	add.w	r1, r7, #24
 8009dae:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 8009db2:	f06f 0303 	mvn.w	r3, #3
 8009db6:	60fb      	str	r3, [r7, #12]
//	Append_Coordinate_Value((int32_t)(position.x*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
//	Append_Coordinate_Value((int32_t)(position.y*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
//	Append_Coordinate_Value((int32_t)(position.z*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
//	Append_Coordinate_Value((int32_t)(position.roll*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
	Append_Coordinate_Value((int32_t)(position.Theta1*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009db8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009dbc:	a330      	add	r3, pc, #192	; (adr r3, 8009e80 <scaraPosition_packaging+0xe0>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f7f6 fc19 	bl	80005f8 <__aeabi_dmul>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4610      	mov	r0, r2
 8009dcc:	4619      	mov	r1, r3
 8009dce:	f7f6 fec3 	bl	8000b58 <__aeabi_d2iz>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	4413      	add	r3, r2
 8009dde:	4619      	mov	r1, r3
 8009de0:	f000 f852 	bl	8009e88 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009de4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009de8:	a325      	add	r3, pc, #148	; (adr r3, 8009e80 <scaraPosition_packaging+0xe0>)
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f7f6 fc03 	bl	80005f8 <__aeabi_dmul>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	f7f6 fead 	bl	8000b58 <__aeabi_d2iz>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3304      	adds	r3, #4
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	4413      	add	r3, r2
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	f000 f83c 	bl	8009e88 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009e10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e14:	a31a      	add	r3, pc, #104	; (adr r3, 8009e80 <scaraPosition_packaging+0xe0>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f7f6 fbed 	bl	80005f8 <__aeabi_dmul>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4610      	mov	r0, r2
 8009e24:	4619      	mov	r1, r3
 8009e26:	f7f6 fe97 	bl	8000b58 <__aeabi_d2iz>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	4413      	add	r3, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	f000 f826 	bl	8009e88 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009e3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009e40:	a30f      	add	r3, pc, #60	; (adr r3, 8009e80 <scaraPosition_packaging+0xe0>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f7f6 fbd7 	bl	80005f8 <__aeabi_dmul>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4610      	mov	r0, r2
 8009e50:	4619      	mov	r1, r3
 8009e52:	f7f6 fe81 	bl	8000b58 <__aeabi_d2iz>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	4619      	mov	r1, r3
 8009e64:	f000 f810 	bl	8009e88 <Append_Coordinate_Value>
	return cur_ptr + 4;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3304      	adds	r3, #4
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e76:	b002      	add	sp, #8
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	f3af 8000 	nop.w
 8009e80:	00000000 	.word	0x00000000
 8009e84:	411e8480 	.word	0x411e8480

08009e88 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	121a      	asrs	r2, r3, #8
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	141a      	asrs	r2, r3, #16
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	3302      	adds	r3, #2
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	161a      	asrs	r2, r3, #24
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	3303      	adds	r3, #3
 8009eba:	b2d2      	uxtb	r2, r2
 8009ebc:	701a      	strb	r2, [r3, #0]
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	0000      	movs	r0, r0
 8009ecc:	0000      	movs	r0, r0
	...

08009ed0 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 8009ed0:	b590      	push	{r4, r7, lr}
 8009ed2:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8009ed6:	af54      	add	r7, sp, #336	; 0x150
 8009ed8:	4602      	mov	r2, r0
 8009eda:	463b      	mov	r3, r7
 8009edc:	6019      	str	r1, [r3, #0]
 8009ede:	1dfb      	adds	r3, r7, #7
 8009ee0:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 8009ee2:	f107 0308 	add.w	r3, r7, #8
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8009eea:	f107 0308 	add.w	r3, r7, #8
 8009eee:	2200      	movs	r2, #0
 8009ef0:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	745a      	strb	r2, [r3, #17]

	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 8009efa:	463b      	mov	r3, r7
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dd03      	ble.n	8009f0a <scaraKeyInit1+0x3a>
 8009f02:	463b      	mov	r3, r7
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b0e      	cmp	r3, #14
 8009f08:	dd01      	ble.n	8009f0e <scaraKeyInit1+0x3e>
		return SCARA_STATUS_ERROR_PARA;
 8009f0a:	2306      	movs	r3, #6
 8009f0c:	e2c0      	b.n	800a490 <scaraKeyInit1+0x5c0>
	}
	switch(key){
 8009f0e:	1dfb      	adds	r3, r7, #7
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	2b07      	cmp	r3, #7
 8009f14:	f200 8298 	bhi.w	800a448 <scaraKeyInit1+0x578>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <scaraKeyInit1+0x50>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009f41 	.word	0x08009f41
 8009f24:	08009fe3 	.word	0x08009fe3
 8009f28:	0800a089 	.word	0x0800a089
 8009f2c:	0800a127 	.word	0x0800a127
 8009f30:	0800a1c9 	.word	0x0800a1c9
 8009f34:	0800a267 	.word	0x0800a267
 8009f38:	0800a309 	.word	0x0800a309
 8009f3c:	0800a3a7 	.word	0x0800a3a7
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 8009f40:	f107 0108 	add.w	r1, r7, #8
 8009f44:	f04f 0200 	mov.w	r2, #0
 8009f48:	f04f 0300 	mov.w	r3, #0
 8009f4c:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	2200      	movs	r2, #0
 8009f56:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009f58:	f107 0308 	add.w	r3, r7, #8
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 8009f60:	463b      	mov	r3, r7
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7f6 fada 	bl	8000524 <__aeabi_i2d>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 8009f7c:	f107 0108 	add.w	r1, r7, #8
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 8009f8c:	f107 0108 	add.w	r1, r7, #8
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 8009f9c:	f107 0108 	add.w	r1, r7, #8
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009fac:	463b      	mov	r3, r7
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	f7f6 fab8 	bl	8000524 <__aeabi_i2d>
 8009fb4:	f20f 43e8 	addw	r3, pc, #1256	; 0x4e8
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 fb1c 	bl	80005f8 <__aeabi_dmul>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	f20f 43dc 	addw	r3, pc, #1244	; 0x4dc
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f7f6 f95c 	bl	800028c <__adddf3>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	f107 0108 	add.w	r1, r7, #8
 8009fdc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 8009fe0:	e232      	b.n	800a448 <scaraKeyInit1+0x578>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 8009fe2:	f107 0108 	add.w	r1, r7, #8
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	f04f 0300 	mov.w	r3, #0
 8009fee:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 8009ff2:	f107 0308 	add.w	r3, r7, #8
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009ffa:	f107 0308 	add.w	r3, r7, #8
 8009ffe:	2200      	movs	r2, #0
 800a000:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800a002:	463b      	mov	r3, r7
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	4613      	mov	r3, r2
 800a008:	079b      	lsls	r3, r3, #30
 800a00a:	1a9b      	subs	r3, r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	1a9b      	subs	r3, r3, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7f6 fa87 	bl	8000524 <__aeabi_i2d>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	f107 0108 	add.w	r1, r7, #8
 800a01e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 800a022:	f107 0108 	add.w	r1, r7, #8
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 800a032:	f107 0108 	add.w	r1, r7, #8
 800a036:	f04f 0200 	mov.w	r2, #0
 800a03a:	f04f 0300 	mov.w	r3, #0
 800a03e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 800a042:	f107 0108 	add.w	r1, r7, #8
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a052:	463b      	mov	r3, r7
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f7f6 fa65 	bl	8000524 <__aeabi_i2d>
 800a05a:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4610      	mov	r0, r2
 800a06c:	4619      	mov	r1, r3
 800a06e:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 f909 	bl	800028c <__adddf3>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	f107 0108 	add.w	r1, r7, #8
 800a082:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a086:	e1df      	b.n	800a448 <scaraKeyInit1+0x578>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f04f 0300 	mov.w	r3, #0
 800a094:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 800a098:	f107 0308 	add.w	r3, r7, #8
 800a09c:	2200      	movs	r2, #0
 800a09e:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a0a0:	f107 0308 	add.w	r3, r7, #8
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a0a8:	f107 0108 	add.w	r1, r7, #8
 800a0ac:	f04f 0200 	mov.w	r2, #0
 800a0b0:	f04f 0300 	mov.w	r3, #0
 800a0b4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f6 fa2e 	bl	8000524 <__aeabi_i2d>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 800a0d4:	f107 0108 	add.w	r1, r7, #8
 800a0d8:	f04f 0200 	mov.w	r2, #0
 800a0dc:	f04f 0300 	mov.w	r3, #0
 800a0e0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 800a0e4:	f107 0108 	add.w	r1, r7, #8
 800a0e8:	f04f 0200 	mov.w	r2, #0
 800a0ec:	f04f 0300 	mov.w	r3, #0
 800a0f0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	f7f6 fa14 	bl	8000524 <__aeabi_i2d>
 800a0fc:	a3e8      	add	r3, pc, #928	; (adr r3, 800a4a0 <scaraKeyInit1+0x5d0>)
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	f7f6 fa79 	bl	80005f8 <__aeabi_dmul>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4610      	mov	r0, r2
 800a10c:	4619      	mov	r1, r3
 800a10e:	a3e6      	add	r3, pc, #920	; (adr r3, 800a4a8 <scaraKeyInit1+0x5d8>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	f7f6 f8ba 	bl	800028c <__adddf3>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	f107 0108 	add.w	r1, r7, #8
 800a120:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a124:	e190      	b.n	800a448 <scaraKeyInit1+0x578>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800a126:	f107 0108 	add.w	r1, r7, #8
 800a12a:	f04f 0200 	mov.w	r2, #0
 800a12e:	f04f 0300 	mov.w	r3, #0
 800a132:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 800a136:	f107 0308 	add.w	r3, r7, #8
 800a13a:	2200      	movs	r2, #0
 800a13c:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a13e:	f107 0308 	add.w	r3, r7, #8
 800a142:	2200      	movs	r2, #0
 800a144:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a146:	f107 0108 	add.w	r1, r7, #8
 800a14a:	f04f 0200 	mov.w	r2, #0
 800a14e:	f04f 0300 	mov.w	r3, #0
 800a152:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800a156:	463b      	mov	r3, r7
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4613      	mov	r3, r2
 800a15c:	079b      	lsls	r3, r3, #30
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	1a9b      	subs	r3, r3, r2
 800a164:	4618      	mov	r0, r3
 800a166:	f7f6 f9dd 	bl	8000524 <__aeabi_i2d>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	f107 0108 	add.w	r1, r7, #8
 800a172:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 800a176:	f107 0108 	add.w	r1, r7, #8
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 800a186:	f107 0108 	add.w	r1, r7, #8
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	f04f 0300 	mov.w	r3, #0
 800a192:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a196:	463b      	mov	r3, r7
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	f7f6 f9c3 	bl	8000524 <__aeabi_i2d>
 800a19e:	a3c0      	add	r3, pc, #768	; (adr r3, 800a4a0 <scaraKeyInit1+0x5d0>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7f6 fa28 	bl	80005f8 <__aeabi_dmul>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	a3bd      	add	r3, pc, #756	; (adr r3, 800a4a8 <scaraKeyInit1+0x5d8>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f7f6 f869 	bl	800028c <__adddf3>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	f107 0108 	add.w	r1, r7, #8
 800a1c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a1c6:	e13f      	b.n	800a448 <scaraKeyInit1+0x578>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800a1c8:	f107 0108 	add.w	r1, r7, #8
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	2200      	movs	r2, #0
 800a1de:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a1e8:	f107 0108 	add.w	r1, r7, #8
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 800a1f8:	f107 0108 	add.w	r1, r7, #8
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	f04f 0300 	mov.w	r3, #0
 800a204:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800a208:	463b      	mov	r3, r7
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7f6 f986 	bl	8000524 <__aeabi_i2d>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	f107 0108 	add.w	r1, r7, #8
 800a220:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 800a224:	f107 0108 	add.w	r1, r7, #8
 800a228:	f04f 0200 	mov.w	r2, #0
 800a22c:	f04f 0300 	mov.w	r3, #0
 800a230:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a234:	463b      	mov	r3, r7
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	f7f6 f974 	bl	8000524 <__aeabi_i2d>
 800a23c:	a398      	add	r3, pc, #608	; (adr r3, 800a4a0 <scaraKeyInit1+0x5d0>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f7f6 f9d9 	bl	80005f8 <__aeabi_dmul>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4610      	mov	r0, r2
 800a24c:	4619      	mov	r1, r3
 800a24e:	a396      	add	r3, pc, #600	; (adr r3, 800a4a8 <scaraKeyInit1+0x5d8>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f6 f81a 	bl	800028c <__adddf3>
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	f107 0108 	add.w	r1, r7, #8
 800a260:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a264:	e0f0      	b.n	800a448 <scaraKeyInit1+0x578>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800a266:	f107 0108 	add.w	r1, r7, #8
 800a26a:	f04f 0200 	mov.w	r2, #0
 800a26e:	f04f 0300 	mov.w	r3, #0
 800a272:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 800a276:	f107 0308 	add.w	r3, r7, #8
 800a27a:	2200      	movs	r2, #0
 800a27c:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	2200      	movs	r2, #0
 800a284:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a286:	f107 0108 	add.w	r1, r7, #8
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 800a296:	f107 0108 	add.w	r1, r7, #8
 800a29a:	f04f 0200 	mov.w	r2, #0
 800a29e:	f04f 0300 	mov.w	r3, #0
 800a2a2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800a2a6:	463b      	mov	r3, r7
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	079b      	lsls	r3, r3, #30
 800a2ae:	1a9b      	subs	r3, r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	1a9b      	subs	r3, r3, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7f6 f935 	bl	8000524 <__aeabi_i2d>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	f107 0108 	add.w	r1, r7, #8
 800a2c2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 800a2c6:	f107 0108 	add.w	r1, r7, #8
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	f7f6 f923 	bl	8000524 <__aeabi_i2d>
 800a2de:	a370      	add	r3, pc, #448	; (adr r3, 800a4a0 <scaraKeyInit1+0x5d0>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f6 f988 	bl	80005f8 <__aeabi_dmul>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	a36d      	add	r3, pc, #436	; (adr r3, 800a4a8 <scaraKeyInit1+0x5d8>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f5 ffc9 	bl	800028c <__adddf3>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	f107 0108 	add.w	r1, r7, #8
 800a302:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a306:	e09f      	b.n	800a448 <scaraKeyInit1+0x578>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800a308:	f107 0108 	add.w	r1, r7, #8
 800a30c:	f04f 0200 	mov.w	r2, #0
 800a310:	f04f 0300 	mov.w	r3, #0
 800a314:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	2200      	movs	r2, #0
 800a31e:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a320:	f107 0308 	add.w	r3, r7, #8
 800a324:	2200      	movs	r2, #0
 800a326:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a328:	f107 0108 	add.w	r1, r7, #8
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 800a338:	f107 0108 	add.w	r1, r7, #8
 800a33c:	f04f 0200 	mov.w	r2, #0
 800a340:	f04f 0300 	mov.w	r3, #0
 800a344:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 800a348:	f107 0108 	add.w	r1, r7, #8
 800a34c:	f04f 0200 	mov.w	r2, #0
 800a350:	f04f 0300 	mov.w	r3, #0
 800a354:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800a358:	463b      	mov	r3, r7
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f7f6 f8de 	bl	8000524 <__aeabi_i2d>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	f107 0108 	add.w	r1, r7, #8
 800a370:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a374:	463b      	mov	r3, r7
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	f7f6 f8d4 	bl	8000524 <__aeabi_i2d>
 800a37c:	a348      	add	r3, pc, #288	; (adr r3, 800a4a0 <scaraKeyInit1+0x5d0>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f6 f939 	bl	80005f8 <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4610      	mov	r0, r2
 800a38c:	4619      	mov	r1, r3
 800a38e:	a346      	add	r3, pc, #280	; (adr r3, 800a4a8 <scaraKeyInit1+0x5d8>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f7f5 ff7a 	bl	800028c <__adddf3>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	f107 0108 	add.w	r1, r7, #8
 800a3a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a3a4:	e050      	b.n	800a448 <scaraKeyInit1+0x578>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800a3a6:	f107 0108 	add.w	r1, r7, #8
 800a3aa:	f04f 0200 	mov.w	r2, #0
 800a3ae:	f04f 0300 	mov.w	r3, #0
 800a3b2:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			cmd.space_type = DUTY_SPACE_TASK;
 800a3b6:	f107 0308 	add.w	r3, r7, #8
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a3be:	f107 0308 	add.w	r3, r7, #8
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a3c6:	f107 0108 	add.w	r1, r7, #8
 800a3ca:	f04f 0200 	mov.w	r2, #0
 800a3ce:	f04f 0300 	mov.w	r3, #0
 800a3d2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 800a3d6:	f107 0108 	add.w	r1, r7, #8
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	f04f 0300 	mov.w	r3, #0
 800a3e2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 800a3e6:	f107 0108 	add.w	r1, r7, #8
 800a3ea:	f04f 0200 	mov.w	r2, #0
 800a3ee:	f04f 0300 	mov.w	r3, #0
 800a3f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	079b      	lsls	r3, r3, #30
 800a3fe:	1a9b      	subs	r3, r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	1a9b      	subs	r3, r3, r2
 800a404:	4618      	mov	r0, r3
 800a406:	f7f6 f88d 	bl	8000524 <__aeabi_i2d>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	f107 0108 	add.w	r1, r7, #8
 800a412:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a416:	463b      	mov	r3, r7
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f7f6 f883 	bl	8000524 <__aeabi_i2d>
 800a41e:	a320      	add	r3, pc, #128	; (adr r3, 800a4a0 <scaraKeyInit1+0x5d0>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f6 f8e8 	bl	80005f8 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4610      	mov	r0, r2
 800a42e:	4619      	mov	r1, r3
 800a430:	a31d      	add	r3, pc, #116	; (adr r3, 800a4a8 <scaraKeyInit1+0x5d8>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f5 ff29 	bl	800028c <__adddf3>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	f107 0108 	add.w	r1, r7, #8
 800a442:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a446:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800a448:	f107 0408 	add.w	r4, r7, #8
 800a44c:	4668      	mov	r0, sp
 800a44e:	f104 0310 	add.w	r3, r4, #16
 800a452:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800a456:	4619      	mov	r1, r3
 800a458:	f00b f82a 	bl	80154b0 <memcpy>
 800a45c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a460:	f7fc fb3e 	bl	8006ae0 <scaraInitDuty>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	if (status == SCARA_STATUS_OK) {
 800a46a:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10b      	bne.n	800a48a <scaraKeyInit1+0x5ba>
		status = scaraTestDuty();
 800a472:	f7ff fb71 	bl	8009b58 <scaraTestDuty>
 800a476:	4603      	mov	r3, r0
 800a478:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
		if (status != SCARA_STATUS_OK) {
 800a47c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a480:	2b00      	cmp	r3, #0
 800a482:	d005      	beq.n	800a490 <scaraKeyInit1+0x5c0>
			return status;
 800a484:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a488:	e002      	b.n	800a490 <scaraKeyInit1+0x5c0>
		}

	} else {
		return status;
 800a48a:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a48e:	e7ff      	b.n	800a490 <scaraKeyInit1+0x5c0>
	}
}
 800a490:	4618      	mov	r0, r3
 800a492:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 800a496:	46bd      	mov	sp, r7
 800a498:	bd90      	pop	{r4, r7, pc}
 800a49a:	bf00      	nop
 800a49c:	f3af 8000 	nop.w
 800a4a0:	9999999a 	.word	0x9999999a
 800a4a4:	3fa99999 	.word	0x3fa99999
 800a4a8:	9999999a 	.word	0x9999999a
 800a4ac:	3fe99999 	.word	0x3fe99999

0800a4b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	607b      	str	r3, [r7, #4]
 800a4ba:	4b12      	ldr	r3, [pc, #72]	; (800a504 <HAL_MspInit+0x54>)
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4be:	4a11      	ldr	r2, [pc, #68]	; (800a504 <HAL_MspInit+0x54>)
 800a4c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4c4:	6453      	str	r3, [r2, #68]	; 0x44
 800a4c6:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <HAL_MspInit+0x54>)
 800a4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4ce:	607b      	str	r3, [r7, #4]
 800a4d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	603b      	str	r3, [r7, #0]
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	; (800a504 <HAL_MspInit+0x54>)
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	4a0a      	ldr	r2, [pc, #40]	; (800a504 <HAL_MspInit+0x54>)
 800a4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4e0:	6413      	str	r3, [r2, #64]	; 0x40
 800a4e2:	4b08      	ldr	r3, [pc, #32]	; (800a504 <HAL_MspInit+0x54>)
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	210f      	movs	r1, #15
 800a4f2:	f06f 0001 	mvn.w	r0, #1
 800a4f6:	f000 fc79 	bl	800adec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	40023800 	.word	0x40023800

0800a508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08c      	sub	sp, #48	; 0x30
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800a518:	2200      	movs	r2, #0
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	2036      	movs	r0, #54	; 0x36
 800a51e:	f000 fc65 	bl	800adec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a522:	2036      	movs	r0, #54	; 0x36
 800a524:	f000 fc7e 	bl	800ae24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a528:	2300      	movs	r3, #0
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	4b1f      	ldr	r3, [pc, #124]	; (800a5ac <HAL_InitTick+0xa4>)
 800a52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a530:	4a1e      	ldr	r2, [pc, #120]	; (800a5ac <HAL_InitTick+0xa4>)
 800a532:	f043 0310 	orr.w	r3, r3, #16
 800a536:	6413      	str	r3, [r2, #64]	; 0x40
 800a538:	4b1c      	ldr	r3, [pc, #112]	; (800a5ac <HAL_InitTick+0xa4>)
 800a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53c:	f003 0310 	and.w	r3, r3, #16
 800a540:	60fb      	str	r3, [r7, #12]
 800a542:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a544:	f107 0210 	add.w	r2, r7, #16
 800a548:	f107 0314 	add.w	r3, r7, #20
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f003 f812 	bl	800d578 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a554:	f002 ffe8 	bl	800d528 <HAL_RCC_GetPCLK1Freq>
 800a558:	4603      	mov	r3, r0
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	4a13      	ldr	r2, [pc, #76]	; (800a5b0 <HAL_InitTick+0xa8>)
 800a562:	fba2 2303 	umull	r2, r3, r2, r3
 800a566:	0c9b      	lsrs	r3, r3, #18
 800a568:	3b01      	subs	r3, #1
 800a56a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a56c:	4b11      	ldr	r3, [pc, #68]	; (800a5b4 <HAL_InitTick+0xac>)
 800a56e:	4a12      	ldr	r2, [pc, #72]	; (800a5b8 <HAL_InitTick+0xb0>)
 800a570:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a572:	4b10      	ldr	r3, [pc, #64]	; (800a5b4 <HAL_InitTick+0xac>)
 800a574:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a578:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a57a:	4a0e      	ldr	r2, [pc, #56]	; (800a5b4 <HAL_InitTick+0xac>)
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a580:	4b0c      	ldr	r3, [pc, #48]	; (800a5b4 <HAL_InitTick+0xac>)
 800a582:	2200      	movs	r2, #0
 800a584:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <HAL_InitTick+0xac>)
 800a588:	2200      	movs	r2, #0
 800a58a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a58c:	4809      	ldr	r0, [pc, #36]	; (800a5b4 <HAL_InitTick+0xac>)
 800a58e:	f003 f825 	bl	800d5dc <HAL_TIM_Base_Init>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a598:	4806      	ldr	r0, [pc, #24]	; (800a5b4 <HAL_InitTick+0xac>)
 800a59a:	f003 f84a 	bl	800d632 <HAL_TIM_Base_Start_IT>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	e000      	b.n	800a5a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3730      	adds	r7, #48	; 0x30
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	40023800 	.word	0x40023800
 800a5b0:	431bde83 	.word	0x431bde83
 800a5b4:	20011540 	.word	0x20011540
 800a5b8:	40001000 	.word	0x40001000

0800a5bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a5c0:	bf00      	nop
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
	...

0800a5cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800a5d0:	2162      	movs	r1, #98	; 0x62
 800a5d2:	4802      	ldr	r0, [pc, #8]	; (800a5dc <HardFault_Handler+0x10>)
 800a5d4:	f7f8 f874 	bl	80026c0 <LOG_REPORT>
 800a5d8:	e7fa      	b.n	800a5d0 <HardFault_Handler+0x4>
 800a5da:	bf00      	nop
 800a5dc:	0801bd70 	.word	0x0801bd70

0800a5e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800a5e4:	2172      	movs	r1, #114	; 0x72
 800a5e6:	4802      	ldr	r0, [pc, #8]	; (800a5f0 <MemManage_Handler+0x10>)
 800a5e8:	f7f8 f86a 	bl	80026c0 <LOG_REPORT>
 800a5ec:	e7fa      	b.n	800a5e4 <MemManage_Handler+0x4>
 800a5ee:	bf00      	nop
 800a5f0:	0801bd88 	.word	0x0801bd88

0800a5f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800a5f8:	2182      	movs	r1, #130	; 0x82
 800a5fa:	4802      	ldr	r0, [pc, #8]	; (800a604 <BusFault_Handler+0x10>)
 800a5fc:	f7f8 f860 	bl	80026c0 <LOG_REPORT>
 800a600:	e7fa      	b.n	800a5f8 <BusFault_Handler+0x4>
 800a602:	bf00      	nop
 800a604:	0801bd9c 	.word	0x0801bd9c

0800a608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a608:	b480      	push	{r7}
 800a60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a60c:	e7fe      	b.n	800a60c <UsageFault_Handler+0x4>

0800a60e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a60e:	b480      	push	{r7}
 800a610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a612:	bf00      	nop
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800a620:	4802      	ldr	r0, [pc, #8]	; (800a62c <DMA1_Stream4_IRQHandler+0x10>)
 800a622:	f000 fd35 	bl	800b090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a626:	bf00      	nop
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20011640 	.word	0x20011640

0800a630 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a634:	4802      	ldr	r0, [pc, #8]	; (800a640 <UART4_IRQHandler+0x10>)
 800a636:	f003 fc99 	bl	800df6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800a63a:	bf00      	nop
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20011600 	.word	0x20011600

0800a644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a648:	4802      	ldr	r0, [pc, #8]	; (800a654 <TIM6_DAC_IRQHandler+0x10>)
 800a64a:	f003 f816 	bl	800d67a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a64e:	bf00      	nop
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20011540 	.word	0x20011540

0800a658 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800a65c:	4b05      	ldr	r3, [pc, #20]	; (800a674 <TIM7_IRQHandler+0x1c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2101      	movs	r1, #1
 800a662:	4618      	mov	r0, r3
 800a664:	f007 fb96 	bl	8011d94 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a668:	4803      	ldr	r0, [pc, #12]	; (800a678 <TIM7_IRQHandler+0x20>)
 800a66a:	f003 f806 	bl	800d67a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800a66e:	bf00      	nop
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	200107f4 	.word	0x200107f4
 800a678:	200115c0 	.word	0x200115c0

0800a67c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a680:	4802      	ldr	r0, [pc, #8]	; (800a68c <OTG_FS_IRQHandler+0x10>)
 800a682:	f001 fad9 	bl	800bc38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a686:	bf00      	nop
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20011f7c 	.word	0x20011f7c

0800a690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a690:	b480      	push	{r7}
 800a692:	af00      	add	r7, sp, #0
	return 1;
 800a694:	2301      	movs	r3, #1
}
 800a696:	4618      	mov	r0, r3
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <_kill>:

int _kill(int pid, int sig)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a6aa:	f00a fec7 	bl	801543c <__errno>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2216      	movs	r2, #22
 800a6b2:	601a      	str	r2, [r3, #0]
	return -1;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <_exit>:

void _exit (int status)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff ffe7 	bl	800a6a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a6d2:	e7fe      	b.n	800a6d2 <_exit+0x12>

0800a6d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e00a      	b.n	800a6fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a6e6:	f3af 8000 	nop.w
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	60ba      	str	r2, [r7, #8]
 800a6f2:	b2ca      	uxtb	r2, r1
 800a6f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	429a      	cmp	r2, r3
 800a702:	dbf0      	blt.n	800a6e6 <_read+0x12>
	}

return len;
 800a704:	687b      	ldr	r3, [r7, #4]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b086      	sub	sp, #24
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e009      	b.n	800a734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	60ba      	str	r2, [r7, #8]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	3301      	adds	r3, #1
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	429a      	cmp	r2, r3
 800a73a:	dbf1      	blt.n	800a720 <_write+0x12>
	}
	return len;
 800a73c:	687b      	ldr	r3, [r7, #4]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <_close>:

int _close(int file)
{
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
	return -1;
 800a74e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a76e:	605a      	str	r2, [r3, #4]
	return 0;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <_isatty>:

int _isatty(int file)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
	return 1;
 800a786:	2301      	movs	r3, #1
}
 800a788:	4618      	mov	r0, r3
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
	return 0;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
	...

0800a7b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a7b8:	4b11      	ldr	r3, [pc, #68]	; (800a800 <_sbrk+0x50>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <_sbrk+0x16>
		heap_end = &end;
 800a7c0:	4b0f      	ldr	r3, [pc, #60]	; (800a800 <_sbrk+0x50>)
 800a7c2:	4a10      	ldr	r2, [pc, #64]	; (800a804 <_sbrk+0x54>)
 800a7c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a7c6:	4b0e      	ldr	r3, [pc, #56]	; (800a800 <_sbrk+0x50>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a7cc:	4b0c      	ldr	r3, [pc, #48]	; (800a800 <_sbrk+0x50>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	466a      	mov	r2, sp
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d907      	bls.n	800a7ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a7da:	f00a fe2f 	bl	801543c <__errno>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	220c      	movs	r2, #12
 800a7e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800a7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e8:	e006      	b.n	800a7f8 <_sbrk+0x48>
	}

	heap_end += incr;
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <_sbrk+0x50>)
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	4a03      	ldr	r2, [pc, #12]	; (800a800 <_sbrk+0x50>)
 800a7f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20004868 	.word	0x20004868
 800a804:	20012398 	.word	0x20012398

0800a808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a808:	b480      	push	{r7}
 800a80a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a80c:	4b08      	ldr	r3, [pc, #32]	; (800a830 <SystemInit+0x28>)
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	4a07      	ldr	r2, [pc, #28]	; (800a830 <SystemInit+0x28>)
 800a814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a81c:	4b04      	ldr	r3, [pc, #16]	; (800a830 <SystemInit+0x28>)
 800a81e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a822:	609a      	str	r2, [r3, #8]
#endif
}
 800a824:	bf00      	nop
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	e000ed00 	.word	0xe000ed00

0800a834 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a83a:	f107 0308 	add.w	r3, r7, #8
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	605a      	str	r2, [r3, #4]
 800a844:	609a      	str	r2, [r3, #8]
 800a846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a848:	463b      	mov	r3, r7
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800a850:	4b1e      	ldr	r3, [pc, #120]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800a858:	4b1c      	ldr	r3, [pc, #112]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a85a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800a85e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a860:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a862:	2200      	movs	r2, #0
 800a864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800a866:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a86c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a86e:	4b17      	ldr	r3, [pc, #92]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a870:	2200      	movs	r2, #0
 800a872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a874:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a876:	2200      	movs	r2, #0
 800a878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a87a:	4814      	ldr	r0, [pc, #80]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a87c:	f002 feae 	bl	800d5dc <HAL_TIM_Base_Init>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a886:	f7fb f891 	bl	80059ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a88a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a88e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a890:	f107 0308 	add.w	r3, r7, #8
 800a894:	4619      	mov	r1, r3
 800a896:	480d      	ldr	r0, [pc, #52]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a898:	f002 fff7 	bl	800d88a <HAL_TIM_ConfigClockSource>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a8a2:	f7fb f883 	bl	80059ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4806      	ldr	r0, [pc, #24]	; (800a8cc <MX_TIM2_Init+0x98>)
 800a8b4:	f003 fa10 	bl	800dcd8 <HAL_TIMEx_MasterConfigSynchronization>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a8be:	f7fb f875 	bl	80059ac <Error_Handler>
  }

}
 800a8c2:	bf00      	nop
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20011580 	.word	0x20011580

0800a8d0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800a8de:	4b15      	ldr	r3, [pc, #84]	; (800a934 <MX_TIM7_Init+0x64>)
 800a8e0:	4a15      	ldr	r2, [pc, #84]	; (800a938 <MX_TIM7_Init+0x68>)
 800a8e2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800a8e4:	4b13      	ldr	r3, [pc, #76]	; (800a934 <MX_TIM7_Init+0x64>)
 800a8e6:	2253      	movs	r2, #83	; 0x53
 800a8e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8ea:	4b12      	ldr	r3, [pc, #72]	; (800a934 <MX_TIM7_Init+0x64>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800a8f0:	4b10      	ldr	r3, [pc, #64]	; (800a934 <MX_TIM7_Init+0x64>)
 800a8f2:	f242 720f 	movw	r2, #9999	; 0x270f
 800a8f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a8f8:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <MX_TIM7_Init+0x64>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a8fe:	480d      	ldr	r0, [pc, #52]	; (800a934 <MX_TIM7_Init+0x64>)
 800a900:	f002 fe6c 	bl	800d5dc <HAL_TIM_Base_Init>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800a90a:	f7fb f84f 	bl	80059ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a90e:	2300      	movs	r3, #0
 800a910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a912:	2300      	movs	r3, #0
 800a914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a916:	463b      	mov	r3, r7
 800a918:	4619      	mov	r1, r3
 800a91a:	4806      	ldr	r0, [pc, #24]	; (800a934 <MX_TIM7_Init+0x64>)
 800a91c:	f003 f9dc 	bl	800dcd8 <HAL_TIMEx_MasterConfigSynchronization>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800a926:	f7fb f841 	bl	80059ac <Error_Handler>
  }

}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	200115c0 	.word	0x200115c0
 800a938:	40001400 	.word	0x40001400

0800a93c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a94c:	d10e      	bne.n	800a96c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	4b16      	ldr	r3, [pc, #88]	; (800a9ac <HAL_TIM_Base_MspInit+0x70>)
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	4a15      	ldr	r2, [pc, #84]	; (800a9ac <HAL_TIM_Base_MspInit+0x70>)
 800a958:	f043 0301 	orr.w	r3, r3, #1
 800a95c:	6413      	str	r3, [r2, #64]	; 0x40
 800a95e:	4b13      	ldr	r3, [pc, #76]	; (800a9ac <HAL_TIM_Base_MspInit+0x70>)
 800a960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800a96a:	e01a      	b.n	800a9a2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <HAL_TIM_Base_MspInit+0x74>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d115      	bne.n	800a9a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a976:	2300      	movs	r3, #0
 800a978:	60bb      	str	r3, [r7, #8]
 800a97a:	4b0c      	ldr	r3, [pc, #48]	; (800a9ac <HAL_TIM_Base_MspInit+0x70>)
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	4a0b      	ldr	r2, [pc, #44]	; (800a9ac <HAL_TIM_Base_MspInit+0x70>)
 800a980:	f043 0320 	orr.w	r3, r3, #32
 800a984:	6413      	str	r3, [r2, #64]	; 0x40
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <HAL_TIM_Base_MspInit+0x70>)
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	60bb      	str	r3, [r7, #8]
 800a990:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800a992:	2200      	movs	r2, #0
 800a994:	2105      	movs	r1, #5
 800a996:	2037      	movs	r0, #55	; 0x37
 800a998:	f000 fa28 	bl	800adec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a99c:	2037      	movs	r0, #55	; 0x37
 800a99e:	f000 fa41 	bl	800ae24 <HAL_NVIC_EnableIRQ>
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	40023800 	.word	0x40023800
 800a9b0:	40001400 	.word	0x40001400

0800a9b4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800a9b8:	4b11      	ldr	r3, [pc, #68]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9ba:	4a12      	ldr	r2, [pc, #72]	; (800aa04 <MX_UART4_Init+0x50>)
 800a9bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a9be:	4b10      	ldr	r3, [pc, #64]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a9c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a9c6:	4b0e      	ldr	r3, [pc, #56]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a9d8:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9da:	220c      	movs	r2, #12
 800a9dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a9de:	4b08      	ldr	r3, [pc, #32]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a9e4:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a9ea:	4805      	ldr	r0, [pc, #20]	; (800aa00 <MX_UART4_Init+0x4c>)
 800a9ec:	f003 fa04 	bl	800ddf8 <HAL_UART_Init>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a9f6:	f7fa ffd9 	bl	80059ac <Error_Handler>
  }

}
 800a9fa:	bf00      	nop
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20011600 	.word	0x20011600
 800aa04:	40004c00 	.word	0x40004c00

0800aa08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08a      	sub	sp, #40	; 0x28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa10:	f107 0314 	add.w	r3, r7, #20
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	605a      	str	r2, [r3, #4]
 800aa1a:	609a      	str	r2, [r3, #8]
 800aa1c:	60da      	str	r2, [r3, #12]
 800aa1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a34      	ldr	r2, [pc, #208]	; (800aaf8 <HAL_UART_MspInit+0xf0>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d161      	bne.n	800aaee <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	4b33      	ldr	r3, [pc, #204]	; (800aafc <HAL_UART_MspInit+0xf4>)
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	4a32      	ldr	r2, [pc, #200]	; (800aafc <HAL_UART_MspInit+0xf4>)
 800aa34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa38:	6413      	str	r3, [r2, #64]	; 0x40
 800aa3a:	4b30      	ldr	r3, [pc, #192]	; (800aafc <HAL_UART_MspInit+0xf4>)
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa42:	613b      	str	r3, [r7, #16]
 800aa44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	4b2c      	ldr	r3, [pc, #176]	; (800aafc <HAL_UART_MspInit+0xf4>)
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	4a2b      	ldr	r2, [pc, #172]	; (800aafc <HAL_UART_MspInit+0xf4>)
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	6313      	str	r3, [r2, #48]	; 0x30
 800aa56:	4b29      	ldr	r3, [pc, #164]	; (800aafc <HAL_UART_MspInit+0xf4>)
 800aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800aa62:	2303      	movs	r3, #3
 800aa64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa66:	2302      	movs	r3, #2
 800aa68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800aa72:	2308      	movs	r3, #8
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa76:	f107 0314 	add.w	r3, r7, #20
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	4820      	ldr	r0, [pc, #128]	; (800ab00 <HAL_UART_MspInit+0xf8>)
 800aa7e:	f000 fd7f 	bl	800b580 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800aa82:	4b20      	ldr	r3, [pc, #128]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aa84:	4a20      	ldr	r2, [pc, #128]	; (800ab08 <HAL_UART_MspInit+0x100>)
 800aa86:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800aa88:	4b1e      	ldr	r3, [pc, #120]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aa8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa8e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aa90:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aa92:	2240      	movs	r2, #64	; 0x40
 800aa94:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa96:	4b1b      	ldr	r3, [pc, #108]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aa9c:	4b19      	ldr	r3, [pc, #100]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aa9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aaa2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aaa4:	4b17      	ldr	r3, [pc, #92]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aaaa:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800aab0:	4b14      	ldr	r3, [pc, #80]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aab6:	4b13      	ldr	r3, [pc, #76]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aabc:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800aac2:	4810      	ldr	r0, [pc, #64]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aac4:	f000 f9bc 	bl	800ae40 <HAL_DMA_Init>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800aace:	f7fa ff6d 	bl	80059ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a0b      	ldr	r2, [pc, #44]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aad6:	631a      	str	r2, [r3, #48]	; 0x30
 800aad8:	4a0a      	ldr	r2, [pc, #40]	; (800ab04 <HAL_UART_MspInit+0xfc>)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800aade:	2200      	movs	r2, #0
 800aae0:	2105      	movs	r1, #5
 800aae2:	2034      	movs	r0, #52	; 0x34
 800aae4:	f000 f982 	bl	800adec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800aae8:	2034      	movs	r0, #52	; 0x34
 800aaea:	f000 f99b 	bl	800ae24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800aaee:	bf00      	nop
 800aaf0:	3728      	adds	r7, #40	; 0x28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	40004c00 	.word	0x40004c00
 800aafc:	40023800 	.word	0x40023800
 800ab00:	40020000 	.word	0x40020000
 800ab04:	20011640 	.word	0x20011640
 800ab08:	40026070 	.word	0x40026070

0800ab0c <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a0c      	ldr	r2, [pc, #48]	; (800ab4c <HAL_UART_TxCpltCallback+0x40>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d112      	bne.n	800ab44 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800ab1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab22:	490b      	ldr	r1, [pc, #44]	; (800ab50 <HAL_UART_TxCpltCallback+0x44>)
 800ab24:	480b      	ldr	r0, [pc, #44]	; (800ab54 <HAL_UART_TxCpltCallback+0x48>)
 800ab26:	f7fa fffb 	bl	8005b20 <ringBuff_PopArray>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800ab2e:	89fb      	ldrh	r3, [r7, #14]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d006      	beq.n	800ab42 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800ab34:	89fb      	ldrh	r3, [r7, #14]
 800ab36:	461a      	mov	r2, r3
 800ab38:	4905      	ldr	r1, [pc, #20]	; (800ab50 <HAL_UART_TxCpltCallback+0x44>)
 800ab3a:	4807      	ldr	r0, [pc, #28]	; (800ab58 <HAL_UART_TxCpltCallback+0x4c>)
 800ab3c:	f003 f9aa 	bl	800de94 <HAL_UART_Transmit_DMA>
 800ab40:	e000      	b.n	800ab44 <HAL_UART_TxCpltCallback+0x38>
			return;
 800ab42:	bf00      	nop
	}
}
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	40004c00 	.word	0x40004c00
 800ab50:	200106f0 	.word	0x200106f0
 800ab54:	20002074 	.word	0x20002074
 800ab58:	20011600 	.word	0x20011600

0800ab5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ab5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ab94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ab60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ab62:	e003      	b.n	800ab6c <LoopCopyDataInit>

0800ab64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ab64:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ab66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ab68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ab6a:	3104      	adds	r1, #4

0800ab6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ab6c:	480b      	ldr	r0, [pc, #44]	; (800ab9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ab6e:	4b0c      	ldr	r3, [pc, #48]	; (800aba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ab70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ab72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ab74:	d3f6      	bcc.n	800ab64 <CopyDataInit>
  ldr  r2, =_sbss
 800ab76:	4a0b      	ldr	r2, [pc, #44]	; (800aba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ab78:	e002      	b.n	800ab80 <LoopFillZerobss>

0800ab7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ab7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ab7c:	f842 3b04 	str.w	r3, [r2], #4

0800ab80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ab80:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ab82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ab84:	d3f9      	bcc.n	800ab7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ab86:	f7ff fe3f 	bl	800a808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ab8a:	f00a fc5d 	bl	8015448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ab8e:	f7fa fe61 	bl	8005854 <main>
  bx  lr    
 800ab92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ab94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ab98:	0801c530 	.word	0x0801c530
  ldr  r0, =_sdata
 800ab9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800aba0:	200043e8 	.word	0x200043e8
  ldr  r2, =_sbss
 800aba4:	200043e8 	.word	0x200043e8
  ldr  r3, = _ebss
 800aba8:	20012394 	.word	0x20012394

0800abac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800abac:	e7fe      	b.n	800abac <ADC_IRQHandler>
	...

0800abb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <HAL_Init+0x40>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a0d      	ldr	r2, [pc, #52]	; (800abf0 <HAL_Init+0x40>)
 800abba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <HAL_Init+0x40>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <HAL_Init+0x40>)
 800abc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800abcc:	4b08      	ldr	r3, [pc, #32]	; (800abf0 <HAL_Init+0x40>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a07      	ldr	r2, [pc, #28]	; (800abf0 <HAL_Init+0x40>)
 800abd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800abd8:	2003      	movs	r0, #3
 800abda:	f000 f8fc 	bl	800add6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800abde:	2000      	movs	r0, #0
 800abe0:	f7ff fc92 	bl	800a508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800abe4:	f7ff fc64 	bl	800a4b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	40023c00 	.word	0x40023c00

0800abf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800abf4:	b480      	push	{r7}
 800abf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800abf8:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <HAL_IncTick+0x20>)
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <HAL_IncTick+0x24>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4413      	add	r3, r2
 800ac04:	4a04      	ldr	r2, [pc, #16]	; (800ac18 <HAL_IncTick+0x24>)
 800ac06:	6013      	str	r3, [r2, #0]
}
 800ac08:	bf00      	nop
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20004094 	.word	0x20004094
 800ac18:	200116a0 	.word	0x200116a0

0800ac1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
  return uwTick;
 800ac20:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <HAL_GetTick+0x14>)
 800ac22:	681b      	ldr	r3, [r3, #0]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	200116a0 	.word	0x200116a0

0800ac34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac3c:	f7ff ffee 	bl	800ac1c <HAL_GetTick>
 800ac40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4c:	d005      	beq.n	800ac5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ac4e:	4b0a      	ldr	r3, [pc, #40]	; (800ac78 <HAL_Delay+0x44>)
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4413      	add	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ac5a:	bf00      	nop
 800ac5c:	f7ff ffde 	bl	800ac1c <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d8f7      	bhi.n	800ac5c <HAL_Delay+0x28>
  {
  }
}
 800ac6c:	bf00      	nop
 800ac6e:	bf00      	nop
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20004094 	.word	0x20004094

0800ac7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <__NVIC_SetPriorityGrouping+0x44>)
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ac98:	4013      	ands	r3, r2
 800ac9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800aca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800acae:	4a04      	ldr	r2, [pc, #16]	; (800acc0 <__NVIC_SetPriorityGrouping+0x44>)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	60d3      	str	r3, [r2, #12]
}
 800acb4:	bf00      	nop
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	e000ed00 	.word	0xe000ed00

0800acc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800acc4:	b480      	push	{r7}
 800acc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <__NVIC_GetPriorityGrouping+0x18>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	0a1b      	lsrs	r3, r3, #8
 800acce:	f003 0307 	and.w	r3, r3, #7
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	e000ed00 	.word	0xe000ed00

0800ace0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	db0b      	blt.n	800ad0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	f003 021f 	and.w	r2, r3, #31
 800acf8:	4907      	ldr	r1, [pc, #28]	; (800ad18 <__NVIC_EnableIRQ+0x38>)
 800acfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acfe:	095b      	lsrs	r3, r3, #5
 800ad00:	2001      	movs	r0, #1
 800ad02:	fa00 f202 	lsl.w	r2, r0, r2
 800ad06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ad0a:	bf00      	nop
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	e000e100 	.word	0xe000e100

0800ad1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	4603      	mov	r3, r0
 800ad24:	6039      	str	r1, [r7, #0]
 800ad26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	db0a      	blt.n	800ad46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	490c      	ldr	r1, [pc, #48]	; (800ad68 <__NVIC_SetPriority+0x4c>)
 800ad36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad3a:	0112      	lsls	r2, r2, #4
 800ad3c:	b2d2      	uxtb	r2, r2
 800ad3e:	440b      	add	r3, r1
 800ad40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ad44:	e00a      	b.n	800ad5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	4908      	ldr	r1, [pc, #32]	; (800ad6c <__NVIC_SetPriority+0x50>)
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	3b04      	subs	r3, #4
 800ad54:	0112      	lsls	r2, r2, #4
 800ad56:	b2d2      	uxtb	r2, r2
 800ad58:	440b      	add	r3, r1
 800ad5a:	761a      	strb	r2, [r3, #24]
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	e000e100 	.word	0xe000e100
 800ad6c:	e000ed00 	.word	0xe000ed00

0800ad70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b089      	sub	sp, #36	; 0x24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f003 0307 	and.w	r3, r3, #7
 800ad82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	f1c3 0307 	rsb	r3, r3, #7
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	bf28      	it	cs
 800ad8e:	2304      	movcs	r3, #4
 800ad90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	3304      	adds	r3, #4
 800ad96:	2b06      	cmp	r3, #6
 800ad98:	d902      	bls.n	800ada0 <NVIC_EncodePriority+0x30>
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	3b03      	subs	r3, #3
 800ad9e:	e000      	b.n	800ada2 <NVIC_EncodePriority+0x32>
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	fa02 f303 	lsl.w	r3, r2, r3
 800adae:	43da      	mvns	r2, r3
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	401a      	ands	r2, r3
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800adb8:	f04f 31ff 	mov.w	r1, #4294967295
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	fa01 f303 	lsl.w	r3, r1, r3
 800adc2:	43d9      	mvns	r1, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adc8:	4313      	orrs	r3, r2
         );
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3724      	adds	r7, #36	; 0x24
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff ff4c 	bl	800ac7c <__NVIC_SetPriorityGrouping>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800adfe:	f7ff ff61 	bl	800acc4 <__NVIC_GetPriorityGrouping>
 800ae02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	6978      	ldr	r0, [r7, #20]
 800ae0a:	f7ff ffb1 	bl	800ad70 <NVIC_EncodePriority>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff ff80 	bl	800ad1c <__NVIC_SetPriority>
}
 800ae1c:	bf00      	nop
 800ae1e:	3718      	adds	r7, #24
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff ff54 	bl	800ace0 <__NVIC_EnableIRQ>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ae4c:	f7ff fee6 	bl	800ac1c <HAL_GetTick>
 800ae50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e099      	b.n	800af90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0201 	bic.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ae7c:	e00f      	b.n	800ae9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ae7e:	f7ff fecd 	bl	800ac1c <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	2b05      	cmp	r3, #5
 800ae8a:	d908      	bls.n	800ae9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2220      	movs	r2, #32
 800ae90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2203      	movs	r2, #3
 800ae96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e078      	b.n	800af90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e8      	bne.n	800ae7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	4b38      	ldr	r3, [pc, #224]	; (800af98 <HAL_DMA_Init+0x158>)
 800aeb8:	4013      	ands	r3, r2
 800aeba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aeca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d107      	bne.n	800af08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af00:	4313      	orrs	r3, r2
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	4313      	orrs	r3, r2
 800af06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f023 0307 	bic.w	r3, r3, #7
 800af1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	4313      	orrs	r3, r2
 800af28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d117      	bne.n	800af62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4313      	orrs	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00e      	beq.n	800af62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fa9f 	bl	800b488 <DMA_CheckFifoParam>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d008      	beq.n	800af62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2240      	movs	r2, #64	; 0x40
 800af54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800af5e:	2301      	movs	r3, #1
 800af60:	e016      	b.n	800af90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fa56 	bl	800b41c <DMA_CalcBaseAndBitshift>
 800af70:	4603      	mov	r3, r0
 800af72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af78:	223f      	movs	r2, #63	; 0x3f
 800af7a:	409a      	lsls	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	f010803f 	.word	0xf010803f

0800af9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <HAL_DMA_Start_IT+0x26>
 800afbe:	2302      	movs	r3, #2
 800afc0:	e040      	b.n	800b044 <HAL_DMA_Start_IT+0xa8>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d12f      	bne.n	800b036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2202      	movs	r2, #2
 800afda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 f9e8 	bl	800b3c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aff4:	223f      	movs	r2, #63	; 0x3f
 800aff6:	409a      	lsls	r2, r3
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f042 0216 	orr.w	r2, r2, #22
 800b00a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b010:	2b00      	cmp	r3, #0
 800b012:	d007      	beq.n	800b024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0208 	orr.w	r2, r2, #8
 800b022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f042 0201 	orr.w	r2, r2, #1
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	e005      	b.n	800b042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b03e:	2302      	movs	r3, #2
 800b040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d004      	beq.n	800b06a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2280      	movs	r2, #128	; 0x80
 800b064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e00c      	b.n	800b084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2205      	movs	r2, #5
 800b06e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0201 	bic.w	r2, r2, #1
 800b080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b098:	2300      	movs	r3, #0
 800b09a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b09c:	4b92      	ldr	r3, [pc, #584]	; (800b2e8 <HAL_DMA_IRQHandler+0x258>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a92      	ldr	r2, [pc, #584]	; (800b2ec <HAL_DMA_IRQHandler+0x25c>)
 800b0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a6:	0a9b      	lsrs	r3, r3, #10
 800b0a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0ba:	2208      	movs	r2, #8
 800b0bc:	409a      	lsls	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d01a      	beq.n	800b0fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d013      	beq.n	800b0fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f022 0204 	bic.w	r2, r2, #4
 800b0e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e8:	2208      	movs	r2, #8
 800b0ea:	409a      	lsls	r2, r3
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f4:	f043 0201 	orr.w	r2, r3, #1
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b100:	2201      	movs	r2, #1
 800b102:	409a      	lsls	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4013      	ands	r3, r2
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d012      	beq.n	800b132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00b      	beq.n	800b132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b11e:	2201      	movs	r2, #1
 800b120:	409a      	lsls	r2, r3
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12a:	f043 0202 	orr.w	r2, r3, #2
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b136:	2204      	movs	r2, #4
 800b138:	409a      	lsls	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	4013      	ands	r3, r2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d012      	beq.n	800b168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00b      	beq.n	800b168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b154:	2204      	movs	r2, #4
 800b156:	409a      	lsls	r2, r3
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b160:	f043 0204 	orr.w	r2, r3, #4
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b16c:	2210      	movs	r2, #16
 800b16e:	409a      	lsls	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4013      	ands	r3, r2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d043      	beq.n	800b200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0308 	and.w	r3, r3, #8
 800b182:	2b00      	cmp	r3, #0
 800b184:	d03c      	beq.n	800b200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b18a:	2210      	movs	r2, #16
 800b18c:	409a      	lsls	r2, r3
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d018      	beq.n	800b1d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d108      	bne.n	800b1c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d024      	beq.n	800b200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	4798      	blx	r3
 800b1be:	e01f      	b.n	800b200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01b      	beq.n	800b200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	4798      	blx	r3
 800b1d0:	e016      	b.n	800b200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d107      	bne.n	800b1f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f022 0208 	bic.w	r2, r2, #8
 800b1ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b204:	2220      	movs	r2, #32
 800b206:	409a      	lsls	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 808e 	beq.w	800b32e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0310 	and.w	r3, r3, #16
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 8086 	beq.w	800b32e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b226:	2220      	movs	r2, #32
 800b228:	409a      	lsls	r2, r3
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b05      	cmp	r3, #5
 800b238:	d136      	bne.n	800b2a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f022 0216 	bic.w	r2, r2, #22
 800b248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	695a      	ldr	r2, [r3, #20]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d103      	bne.n	800b26a <HAL_DMA_IRQHandler+0x1da>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b266:	2b00      	cmp	r3, #0
 800b268:	d007      	beq.n	800b27a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f022 0208 	bic.w	r2, r2, #8
 800b278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b27e:	223f      	movs	r2, #63	; 0x3f
 800b280:	409a      	lsls	r2, r3
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d07d      	beq.n	800b39a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	4798      	blx	r3
        }
        return;
 800b2a6:	e078      	b.n	800b39a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01c      	beq.n	800b2f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d108      	bne.n	800b2d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d030      	beq.n	800b32e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	4798      	blx	r3
 800b2d4:	e02b      	b.n	800b32e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d027      	beq.n	800b32e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
 800b2e6:	e022      	b.n	800b32e <HAL_DMA_IRQHandler+0x29e>
 800b2e8:	2000408c 	.word	0x2000408c
 800b2ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10f      	bne.n	800b31e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f022 0210 	bic.w	r2, r2, #16
 800b30c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b332:	2b00      	cmp	r3, #0
 800b334:	d032      	beq.n	800b39c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33a:	f003 0301 	and.w	r3, r3, #1
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d022      	beq.n	800b388 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2205      	movs	r2, #5
 800b346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0201 	bic.w	r2, r2, #1
 800b358:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	3301      	adds	r3, #1
 800b35e:	60bb      	str	r3, [r7, #8]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	429a      	cmp	r2, r3
 800b364:	d307      	bcc.n	800b376 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1f2      	bne.n	800b35a <HAL_DMA_IRQHandler+0x2ca>
 800b374:	e000      	b.n	800b378 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b376:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	4798      	blx	r3
 800b398:	e000      	b.n	800b39c <HAL_DMA_IRQHandler+0x30c>
        return;
 800b39a:	bf00      	nop
    }
  }
}
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop

0800b3a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3b2:	b2db      	uxtb	r3, r3
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b3dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	2b40      	cmp	r3, #64	; 0x40
 800b3ec:	d108      	bne.n	800b400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b3fe:	e007      	b.n	800b410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	60da      	str	r2, [r3, #12]
}
 800b410:	bf00      	nop
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	3b10      	subs	r3, #16
 800b42c:	4a14      	ldr	r2, [pc, #80]	; (800b480 <DMA_CalcBaseAndBitshift+0x64>)
 800b42e:	fba2 2303 	umull	r2, r3, r2, r3
 800b432:	091b      	lsrs	r3, r3, #4
 800b434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b436:	4a13      	ldr	r2, [pc, #76]	; (800b484 <DMA_CalcBaseAndBitshift+0x68>)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4413      	add	r3, r2
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b03      	cmp	r3, #3
 800b448:	d909      	bls.n	800b45e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b452:	f023 0303 	bic.w	r3, r3, #3
 800b456:	1d1a      	adds	r2, r3, #4
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	659a      	str	r2, [r3, #88]	; 0x58
 800b45c:	e007      	b.n	800b46e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b466:	f023 0303 	bic.w	r3, r3, #3
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	aaaaaaab 	.word	0xaaaaaaab
 800b484:	0801be18 	.word	0x0801be18

0800b488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d11f      	bne.n	800b4e2 <DMA_CheckFifoParam+0x5a>
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d856      	bhi.n	800b556 <DMA_CheckFifoParam+0xce>
 800b4a8:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <DMA_CheckFifoParam+0x28>)
 800b4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ae:	bf00      	nop
 800b4b0:	0800b4c1 	.word	0x0800b4c1
 800b4b4:	0800b4d3 	.word	0x0800b4d3
 800b4b8:	0800b4c1 	.word	0x0800b4c1
 800b4bc:	0800b557 	.word	0x0800b557
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d046      	beq.n	800b55a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4d0:	e043      	b.n	800b55a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b4da:	d140      	bne.n	800b55e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4e0:	e03d      	b.n	800b55e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ea:	d121      	bne.n	800b530 <DMA_CheckFifoParam+0xa8>
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d837      	bhi.n	800b562 <DMA_CheckFifoParam+0xda>
 800b4f2:	a201      	add	r2, pc, #4	; (adr r2, 800b4f8 <DMA_CheckFifoParam+0x70>)
 800b4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f8:	0800b509 	.word	0x0800b509
 800b4fc:	0800b50f 	.word	0x0800b50f
 800b500:	0800b509 	.word	0x0800b509
 800b504:	0800b521 	.word	0x0800b521
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	73fb      	strb	r3, [r7, #15]
      break;
 800b50c:	e030      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d025      	beq.n	800b566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b51e:	e022      	b.n	800b566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b528:	d11f      	bne.n	800b56a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b52e:	e01c      	b.n	800b56a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	2b02      	cmp	r3, #2
 800b534:	d903      	bls.n	800b53e <DMA_CheckFifoParam+0xb6>
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d003      	beq.n	800b544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b53c:	e018      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	73fb      	strb	r3, [r7, #15]
      break;
 800b542:	e015      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00e      	beq.n	800b56e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	73fb      	strb	r3, [r7, #15]
      break;
 800b554:	e00b      	b.n	800b56e <DMA_CheckFifoParam+0xe6>
      break;
 800b556:	bf00      	nop
 800b558:	e00a      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      break;
 800b55a:	bf00      	nop
 800b55c:	e008      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      break;
 800b55e:	bf00      	nop
 800b560:	e006      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      break;
 800b562:	bf00      	nop
 800b564:	e004      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      break;
 800b566:	bf00      	nop
 800b568:	e002      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      break;   
 800b56a:	bf00      	nop
 800b56c:	e000      	b.n	800b570 <DMA_CheckFifoParam+0xe8>
      break;
 800b56e:	bf00      	nop
    }
  } 
  
  return status; 
 800b570:	7bfb      	ldrb	r3, [r7, #15]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop

0800b580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b580:	b480      	push	{r7}
 800b582:	b089      	sub	sp, #36	; 0x24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b58e:	2300      	movs	r3, #0
 800b590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b592:	2300      	movs	r3, #0
 800b594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b596:	2300      	movs	r3, #0
 800b598:	61fb      	str	r3, [r7, #28]
 800b59a:	e16b      	b.n	800b874 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b59c:	2201      	movs	r2, #1
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	f040 815a 	bne.w	800b86e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d00b      	beq.n	800b5da <HAL_GPIO_Init+0x5a>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d007      	beq.n	800b5da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b5ce:	2b11      	cmp	r3, #17
 800b5d0:	d003      	beq.n	800b5da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	2b12      	cmp	r3, #18
 800b5d8:	d130      	bne.n	800b63c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	2203      	movs	r2, #3
 800b5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ea:	43db      	mvns	r3, r3
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	005b      	lsls	r3, r3, #1
 800b5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	4313      	orrs	r3, r2
 800b602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b610:	2201      	movs	r2, #1
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	fa02 f303 	lsl.w	r3, r2, r3
 800b618:	43db      	mvns	r3, r3
 800b61a:	69ba      	ldr	r2, [r7, #24]
 800b61c:	4013      	ands	r3, r2
 800b61e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	091b      	lsrs	r3, r3, #4
 800b626:	f003 0201 	and.w	r2, r3, #1
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	fa02 f303 	lsl.w	r3, r2, r3
 800b630:	69ba      	ldr	r2, [r7, #24]
 800b632:	4313      	orrs	r3, r2
 800b634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	2203      	movs	r2, #3
 800b648:	fa02 f303 	lsl.w	r3, r2, r3
 800b64c:	43db      	mvns	r3, r3
 800b64e:	69ba      	ldr	r2, [r7, #24]
 800b650:	4013      	ands	r3, r2
 800b652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	689a      	ldr	r2, [r3, #8]
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	fa02 f303 	lsl.w	r3, r2, r3
 800b660:	69ba      	ldr	r2, [r7, #24]
 800b662:	4313      	orrs	r3, r2
 800b664:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	2b02      	cmp	r3, #2
 800b672:	d003      	beq.n	800b67c <HAL_GPIO_Init+0xfc>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	2b12      	cmp	r3, #18
 800b67a:	d123      	bne.n	800b6c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	08da      	lsrs	r2, r3, #3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3208      	adds	r2, #8
 800b684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	220f      	movs	r2, #15
 800b694:	fa02 f303 	lsl.w	r3, r2, r3
 800b698:	43db      	mvns	r3, r3
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	4013      	ands	r3, r2
 800b69e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	08da      	lsrs	r2, r3, #3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3208      	adds	r2, #8
 800b6be:	69b9      	ldr	r1, [r7, #24]
 800b6c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	2203      	movs	r2, #3
 800b6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d4:	43db      	mvns	r3, r3
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	4013      	ands	r3, r2
 800b6da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	f003 0203 	and.w	r2, r3, #3
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 80b4 	beq.w	800b86e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
 800b70a:	4b60      	ldr	r3, [pc, #384]	; (800b88c <HAL_GPIO_Init+0x30c>)
 800b70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b70e:	4a5f      	ldr	r2, [pc, #380]	; (800b88c <HAL_GPIO_Init+0x30c>)
 800b710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b714:	6453      	str	r3, [r2, #68]	; 0x44
 800b716:	4b5d      	ldr	r3, [pc, #372]	; (800b88c <HAL_GPIO_Init+0x30c>)
 800b718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b71a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b722:	4a5b      	ldr	r2, [pc, #364]	; (800b890 <HAL_GPIO_Init+0x310>)
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	089b      	lsrs	r3, r3, #2
 800b728:	3302      	adds	r3, #2
 800b72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b72e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f003 0303 	and.w	r3, r3, #3
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	220f      	movs	r2, #15
 800b73a:	fa02 f303 	lsl.w	r3, r2, r3
 800b73e:	43db      	mvns	r3, r3
 800b740:	69ba      	ldr	r2, [r7, #24]
 800b742:	4013      	ands	r3, r2
 800b744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a52      	ldr	r2, [pc, #328]	; (800b894 <HAL_GPIO_Init+0x314>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d02b      	beq.n	800b7a6 <HAL_GPIO_Init+0x226>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a51      	ldr	r2, [pc, #324]	; (800b898 <HAL_GPIO_Init+0x318>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d025      	beq.n	800b7a2 <HAL_GPIO_Init+0x222>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a50      	ldr	r2, [pc, #320]	; (800b89c <HAL_GPIO_Init+0x31c>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d01f      	beq.n	800b79e <HAL_GPIO_Init+0x21e>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a4f      	ldr	r2, [pc, #316]	; (800b8a0 <HAL_GPIO_Init+0x320>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d019      	beq.n	800b79a <HAL_GPIO_Init+0x21a>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a4e      	ldr	r2, [pc, #312]	; (800b8a4 <HAL_GPIO_Init+0x324>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d013      	beq.n	800b796 <HAL_GPIO_Init+0x216>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a4d      	ldr	r2, [pc, #308]	; (800b8a8 <HAL_GPIO_Init+0x328>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d00d      	beq.n	800b792 <HAL_GPIO_Init+0x212>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a4c      	ldr	r2, [pc, #304]	; (800b8ac <HAL_GPIO_Init+0x32c>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d007      	beq.n	800b78e <HAL_GPIO_Init+0x20e>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a4b      	ldr	r2, [pc, #300]	; (800b8b0 <HAL_GPIO_Init+0x330>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d101      	bne.n	800b78a <HAL_GPIO_Init+0x20a>
 800b786:	2307      	movs	r3, #7
 800b788:	e00e      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b78a:	2308      	movs	r3, #8
 800b78c:	e00c      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b78e:	2306      	movs	r3, #6
 800b790:	e00a      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b792:	2305      	movs	r3, #5
 800b794:	e008      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b796:	2304      	movs	r3, #4
 800b798:	e006      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b79a:	2303      	movs	r3, #3
 800b79c:	e004      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e002      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <HAL_GPIO_Init+0x228>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	69fa      	ldr	r2, [r7, #28]
 800b7aa:	f002 0203 	and.w	r2, r2, #3
 800b7ae:	0092      	lsls	r2, r2, #2
 800b7b0:	4093      	lsls	r3, r2
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b7b8:	4935      	ldr	r1, [pc, #212]	; (800b890 <HAL_GPIO_Init+0x310>)
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	089b      	lsrs	r3, r3, #2
 800b7be:	3302      	adds	r3, #2
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b7c6:	4b3b      	ldr	r3, [pc, #236]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	43db      	mvns	r3, r3
 800b7d0:	69ba      	ldr	r2, [r7, #24]
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b7e2:	69ba      	ldr	r2, [r7, #24]
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b7ea:	4a32      	ldr	r2, [pc, #200]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b7f0:	4b30      	ldr	r3, [pc, #192]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	43db      	mvns	r3, r3
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	4313      	orrs	r3, r2
 800b812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b814:	4a27      	ldr	r2, [pc, #156]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b81a:	4b26      	ldr	r3, [pc, #152]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	43db      	mvns	r3, r3
 800b824:	69ba      	ldr	r2, [r7, #24]
 800b826:	4013      	ands	r3, r2
 800b828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b83e:	4a1d      	ldr	r2, [pc, #116]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b844:	4b1b      	ldr	r3, [pc, #108]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	43db      	mvns	r3, r3
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	4013      	ands	r3, r2
 800b852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d003      	beq.n	800b868 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b860:	69ba      	ldr	r2, [r7, #24]
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	4313      	orrs	r3, r2
 800b866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b868:	4a12      	ldr	r2, [pc, #72]	; (800b8b4 <HAL_GPIO_Init+0x334>)
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	3301      	adds	r3, #1
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	2b0f      	cmp	r3, #15
 800b878:	f67f ae90 	bls.w	800b59c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b87c:	bf00      	nop
 800b87e:	bf00      	nop
 800b880:	3724      	adds	r7, #36	; 0x24
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	40023800 	.word	0x40023800
 800b890:	40013800 	.word	0x40013800
 800b894:	40020000 	.word	0x40020000
 800b898:	40020400 	.word	0x40020400
 800b89c:	40020800 	.word	0x40020800
 800b8a0:	40020c00 	.word	0x40020c00
 800b8a4:	40021000 	.word	0x40021000
 800b8a8:	40021400 	.word	0x40021400
 800b8ac:	40021800 	.word	0x40021800
 800b8b0:	40021c00 	.word	0x40021c00
 800b8b4:	40013c00 	.word	0x40013c00

0800b8b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	807b      	strh	r3, [r7, #2]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b8c8:	787b      	ldrb	r3, [r7, #1]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b8ce:	887a      	ldrh	r2, [r7, #2]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b8d4:	e003      	b.n	800b8de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b8d6:	887b      	ldrh	r3, [r7, #2]
 800b8d8:	041a      	lsls	r2, r3, #16
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	619a      	str	r2, [r3, #24]
}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
	...

0800b8ec <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	e043      	b.n	800b98a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f7f9 f856 	bl	80049c8 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3308      	adds	r3, #8
 800b924:	4619      	mov	r1, r3
 800b926:	4610      	mov	r0, r2
 800b928:	f003 f992 	bl	800ec50 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6818      	ldr	r0, [r3, #0]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	461a      	mov	r2, r3
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	f003 f9dc 	bl	800ecf4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6858      	ldr	r0, [r3, #4]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	f003 fa11 	bl	800ed70 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	6892      	ldr	r2, [r2, #8]
 800b956:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	6892      	ldr	r2, [r2, #8]
 800b962:	f041 0101 	orr.w	r1, r1, #1
 800b966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d103      	bne.n	800b97a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800b972:	4b08      	ldr	r3, [pc, #32]	; (800b994 <HAL_NOR_Init+0xa8>)
 800b974:	2200      	movs	r2, #0
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	e002      	b.n	800b980 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800b97a:	4b06      	ldr	r3, [pc, #24]	; (800b994 <HAL_NOR_Init+0xa8>)
 800b97c:	2201      	movs	r2, #1
 800b97e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	2000486c 	.word	0x2000486c

0800b998 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b99a:	b08f      	sub	sp, #60	; 0x3c
 800b99c:	af0a      	add	r7, sp, #40	; 0x28
 800b99e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e10f      	b.n	800bbca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d106      	bne.n	800b9ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f009 fa3d 	bl	8014e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2203      	movs	r2, #3
 800b9ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d102      	bne.n	800b9e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f003 fb16 	bl	800f01a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	603b      	str	r3, [r7, #0]
 800b9f4:	687e      	ldr	r6, [r7, #4]
 800b9f6:	466d      	mov	r5, sp
 800b9f8:	f106 0410 	add.w	r4, r6, #16
 800b9fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba04:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ba08:	e885 0003 	stmia.w	r5, {r0, r1}
 800ba0c:	1d33      	adds	r3, r6, #4
 800ba0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba10:	6838      	ldr	r0, [r7, #0]
 800ba12:	f003 f9ed 	bl	800edf0 <USB_CoreInit>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d005      	beq.n	800ba28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e0d0      	b.n	800bbca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f003 fb04 	bl	800f03c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
 800ba38:	e04a      	b.n	800bad0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ba3a:	7bfa      	ldrb	r2, [r7, #15]
 800ba3c:	6879      	ldr	r1, [r7, #4]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	00db      	lsls	r3, r3, #3
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	440b      	add	r3, r1
 800ba48:	333d      	adds	r3, #61	; 0x3d
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ba4e:	7bfa      	ldrb	r2, [r7, #15]
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	4613      	mov	r3, r2
 800ba54:	00db      	lsls	r3, r3, #3
 800ba56:	1a9b      	subs	r3, r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	440b      	add	r3, r1
 800ba5c:	333c      	adds	r3, #60	; 0x3c
 800ba5e:	7bfa      	ldrb	r2, [r7, #15]
 800ba60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ba62:	7bfa      	ldrb	r2, [r7, #15]
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	b298      	uxth	r0, r3
 800ba68:	6879      	ldr	r1, [r7, #4]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	00db      	lsls	r3, r3, #3
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	440b      	add	r3, r1
 800ba74:	3342      	adds	r3, #66	; 0x42
 800ba76:	4602      	mov	r2, r0
 800ba78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ba7a:	7bfa      	ldrb	r2, [r7, #15]
 800ba7c:	6879      	ldr	r1, [r7, #4]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	1a9b      	subs	r3, r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	440b      	add	r3, r1
 800ba88:	333f      	adds	r3, #63	; 0x3f
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ba8e:	7bfa      	ldrb	r2, [r7, #15]
 800ba90:	6879      	ldr	r1, [r7, #4]
 800ba92:	4613      	mov	r3, r2
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	1a9b      	subs	r3, r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	440b      	add	r3, r1
 800ba9c:	3344      	adds	r3, #68	; 0x44
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800baa2:	7bfa      	ldrb	r2, [r7, #15]
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	4613      	mov	r3, r2
 800baa8:	00db      	lsls	r3, r3, #3
 800baaa:	1a9b      	subs	r3, r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	440b      	add	r3, r1
 800bab0:	3348      	adds	r3, #72	; 0x48
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bab6:	7bfa      	ldrb	r2, [r7, #15]
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	4613      	mov	r3, r2
 800babc:	00db      	lsls	r3, r3, #3
 800babe:	1a9b      	subs	r3, r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	440b      	add	r3, r1
 800bac4:	3350      	adds	r3, #80	; 0x50
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	3301      	adds	r3, #1
 800bace:	73fb      	strb	r3, [r7, #15]
 800bad0:	7bfa      	ldrb	r2, [r7, #15]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d3af      	bcc.n	800ba3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
 800bade:	e044      	b.n	800bb6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bae0:	7bfa      	ldrb	r2, [r7, #15]
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	4613      	mov	r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	1a9b      	subs	r3, r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	440b      	add	r3, r1
 800baee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800baf2:	2200      	movs	r2, #0
 800baf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800baf6:	7bfa      	ldrb	r2, [r7, #15]
 800baf8:	6879      	ldr	r1, [r7, #4]
 800bafa:	4613      	mov	r3, r2
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	1a9b      	subs	r3, r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	440b      	add	r3, r1
 800bb04:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bb08:	7bfa      	ldrb	r2, [r7, #15]
 800bb0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bb0c:	7bfa      	ldrb	r2, [r7, #15]
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	4613      	mov	r3, r2
 800bb12:	00db      	lsls	r3, r3, #3
 800bb14:	1a9b      	subs	r3, r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	440b      	add	r3, r1
 800bb1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bb1e:	2200      	movs	r2, #0
 800bb20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bb22:	7bfa      	ldrb	r2, [r7, #15]
 800bb24:	6879      	ldr	r1, [r7, #4]
 800bb26:	4613      	mov	r3, r2
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	1a9b      	subs	r3, r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	440b      	add	r3, r1
 800bb30:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bb38:	7bfa      	ldrb	r2, [r7, #15]
 800bb3a:	6879      	ldr	r1, [r7, #4]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	1a9b      	subs	r3, r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	440b      	add	r3, r1
 800bb46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bb4e:	7bfa      	ldrb	r2, [r7, #15]
 800bb50:	6879      	ldr	r1, [r7, #4]
 800bb52:	4613      	mov	r3, r2
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	1a9b      	subs	r3, r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	440b      	add	r3, r1
 800bb5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bb60:	2200      	movs	r2, #0
 800bb62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	3301      	adds	r3, #1
 800bb68:	73fb      	strb	r3, [r7, #15]
 800bb6a:	7bfa      	ldrb	r2, [r7, #15]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d3b5      	bcc.n	800bae0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	603b      	str	r3, [r7, #0]
 800bb7a:	687e      	ldr	r6, [r7, #4]
 800bb7c:	466d      	mov	r5, sp
 800bb7e:	f106 0410 	add.w	r4, r6, #16
 800bb82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bb8e:	e885 0003 	stmia.w	r5, {r0, r1}
 800bb92:	1d33      	adds	r3, r6, #4
 800bb94:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb96:	6838      	ldr	r0, [r7, #0]
 800bb98:	f003 fa7a 	bl	800f090 <USB_DevInit>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d005      	beq.n	800bbae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2202      	movs	r2, #2
 800bba6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e00d      	b.n	800bbca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f004 fac2 	bl	801014c <USB_DevDisconnect>

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bbd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d101      	bne.n	800bbee <HAL_PCD_Start+0x1c>
 800bbea:	2302      	movs	r3, #2
 800bbec:	e020      	b.n	800bc30 <HAL_PCD_Start+0x5e>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d109      	bne.n	800bc12 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d005      	beq.n	800bc12 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f003 f9ee 	bl	800eff8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f004 fa72 	bl	801010a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b08d      	sub	sp, #52	; 0x34
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f004 fb30 	bl	80102b4 <USB_GetMode>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f040 839d 	bne.w	800c396 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4618      	mov	r0, r3
 800bc62:	f004 fa94 	bl	801018e <USB_ReadInterrupts>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 8393 	beq.w	800c394 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f004 fa8b 	bl	801018e <USB_ReadInterrupts>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d107      	bne.n	800bc92 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	695a      	ldr	r2, [r3, #20]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f002 0202 	and.w	r2, r2, #2
 800bc90:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f004 fa79 	bl	801018e <USB_ReadInterrupts>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f003 0310 	and.w	r3, r3, #16
 800bca2:	2b10      	cmp	r3, #16
 800bca4:	d161      	bne.n	800bd6a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	699a      	ldr	r2, [r3, #24]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 0210 	bic.w	r2, r2, #16
 800bcb4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	f003 020f 	and.w	r2, r3, #15
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	1a9b      	subs	r3, r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	0c5b      	lsrs	r3, r3, #17
 800bcda:	f003 030f 	and.w	r3, r3, #15
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d124      	bne.n	800bd2c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bce2:	69ba      	ldr	r2, [r7, #24]
 800bce4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800bce8:	4013      	ands	r3, r2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d035      	beq.n	800bd5a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	091b      	lsrs	r3, r3, #4
 800bcf6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bcf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6a38      	ldr	r0, [r7, #32]
 800bd02:	f004 f8df 	bl	800fec4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	68da      	ldr	r2, [r3, #12]
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	091b      	lsrs	r3, r3, #4
 800bd0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd12:	441a      	add	r2, r3
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	699a      	ldr	r2, [r3, #24]
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	091b      	lsrs	r3, r3, #4
 800bd20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd24:	441a      	add	r2, r3
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	619a      	str	r2, [r3, #24]
 800bd2a:	e016      	b.n	800bd5a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	0c5b      	lsrs	r3, r3, #17
 800bd30:	f003 030f 	and.w	r3, r3, #15
 800bd34:	2b06      	cmp	r3, #6
 800bd36:	d110      	bne.n	800bd5a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bd3e:	2208      	movs	r2, #8
 800bd40:	4619      	mov	r1, r3
 800bd42:	6a38      	ldr	r0, [r7, #32]
 800bd44:	f004 f8be 	bl	800fec4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	699a      	ldr	r2, [r3, #24]
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	091b      	lsrs	r3, r3, #4
 800bd50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd54:	441a      	add	r2, r3
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	699a      	ldr	r2, [r3, #24]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f042 0210 	orr.w	r2, r2, #16
 800bd68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f004 fa0d 	bl	801018e <USB_ReadInterrupts>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd7e:	d16e      	bne.n	800be5e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800bd80:	2300      	movs	r3, #0
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f004 fa13 	bl	80101b4 <USB_ReadDevAllOutEpInterrupt>
 800bd8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800bd90:	e062      	b.n	800be58 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d057      	beq.n	800be4c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda2:	b2d2      	uxtb	r2, r2
 800bda4:	4611      	mov	r1, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f004 fa38 	bl	801021c <USB_ReadDevOutEPInterrupt>
 800bdac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00c      	beq.n	800bdd2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	015a      	lsls	r2, r3, #5
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bdca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fdb1 	bl	800c934 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	f003 0308 	and.w	r3, r3, #8
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00c      	beq.n	800bdf6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde8:	461a      	mov	r2, r3
 800bdea:	2308      	movs	r3, #8
 800bdec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800bdee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 feab 	bl	800cb4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f003 0310 	and.w	r3, r3, #16
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d008      	beq.n	800be12 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	4413      	add	r3, r2
 800be08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0c:	461a      	mov	r2, r3
 800be0e:	2310      	movs	r3, #16
 800be10:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be28:	461a      	mov	r2, r3
 800be2a:	2320      	movs	r3, #32
 800be2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d009      	beq.n	800be4c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	015a      	lsls	r2, r3, #5
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	4413      	add	r3, r2
 800be40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be44:	461a      	mov	r2, r3
 800be46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be4a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	3301      	adds	r3, #1
 800be50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	085b      	lsrs	r3, r3, #1
 800be56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800be58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d199      	bne.n	800bd92 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4618      	mov	r0, r3
 800be64:	f004 f993 	bl	801018e <USB_ReadInterrupts>
 800be68:	4603      	mov	r3, r0
 800be6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be72:	f040 80c0 	bne.w	800bff6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f004 f9b4 	bl	80101e8 <USB_ReadDevAllInEpInterrupt>
 800be80:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800be82:	2300      	movs	r3, #0
 800be84:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800be86:	e0b2      	b.n	800bfee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 80a7 	beq.w	800bfe2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be9a:	b2d2      	uxtb	r2, r2
 800be9c:	4611      	mov	r1, r2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f004 f9da 	bl	8010258 <USB_ReadDevInEPInterrupt>
 800bea4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d057      	beq.n	800bf60 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	f003 030f 	and.w	r3, r3, #15
 800beb6:	2201      	movs	r2, #1
 800beb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bebc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	43db      	mvns	r3, r3
 800beca:	69f9      	ldr	r1, [r7, #28]
 800becc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bed0:	4013      	ands	r3, r2
 800bed2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee0:	461a      	mov	r2, r3
 800bee2:	2301      	movs	r3, #1
 800bee4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d132      	bne.n	800bf54 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef2:	4613      	mov	r3, r2
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	1a9b      	subs	r3, r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	3348      	adds	r3, #72	; 0x48
 800befe:	6819      	ldr	r1, [r3, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf04:	4613      	mov	r3, r2
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	1a9b      	subs	r3, r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4403      	add	r3, r0
 800bf0e:	3344      	adds	r3, #68	; 0x44
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4419      	add	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf18:	4613      	mov	r3, r2
 800bf1a:	00db      	lsls	r3, r3, #3
 800bf1c:	1a9b      	subs	r3, r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4403      	add	r3, r0
 800bf22:	3348      	adds	r3, #72	; 0x48
 800bf24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d113      	bne.n	800bf54 <HAL_PCD_IRQHandler+0x31c>
 800bf2c:	6879      	ldr	r1, [r7, #4]
 800bf2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf30:	4613      	mov	r3, r2
 800bf32:	00db      	lsls	r3, r3, #3
 800bf34:	1a9b      	subs	r3, r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	440b      	add	r3, r1
 800bf3a:	3350      	adds	r3, #80	; 0x50
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d108      	bne.n	800bf54 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6818      	ldr	r0, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	2101      	movs	r1, #1
 800bf50:	f004 f9e2 	bl	8010318 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f008 fff3 	bl	8014f46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f003 0308 	and.w	r3, r3, #8
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d008      	beq.n	800bf7c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	015a      	lsls	r2, r3, #5
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf76:	461a      	mov	r2, r3
 800bf78:	2308      	movs	r3, #8
 800bf7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f003 0310 	and.w	r3, r3, #16
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d008      	beq.n	800bf98 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf92:	461a      	mov	r2, r3
 800bf94:	2310      	movs	r3, #16
 800bf96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d008      	beq.n	800bfb4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	015a      	lsls	r2, r3, #5
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfae:	461a      	mov	r2, r3
 800bfb0:	2340      	movs	r3, #64	; 0x40
 800bfb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f003 0302 	and.w	r3, r3, #2
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d008      	beq.n	800bfd0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	015a      	lsls	r2, r3, #5
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfca:	461a      	mov	r2, r3
 800bfcc:	2302      	movs	r3, #2
 800bfce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bfda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fc1b 	bl	800c818 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800bfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfea:	085b      	lsrs	r3, r3, #1
 800bfec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f47f af49 	bne.w	800be88 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f004 f8c7 	bl	801018e <USB_ReadInterrupts>
 800c000:	4603      	mov	r3, r0
 800c002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c00a:	d122      	bne.n	800c052 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	69fa      	ldr	r2, [r7, #28]
 800c016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c01a:	f023 0301 	bic.w	r3, r3, #1
 800c01e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c026:	2b01      	cmp	r3, #1
 800c028:	d108      	bne.n	800c03c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c032:	2100      	movs	r1, #0
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fe27 	bl	800cc88 <HAL_PCDEx_LPM_Callback>
 800c03a:	e002      	b.n	800c042 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f008 fff9 	bl	8015034 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	695a      	ldr	r2, [r3, #20]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4618      	mov	r0, r3
 800c058:	f004 f899 	bl	801018e <USB_ReadInterrupts>
 800c05c:	4603      	mov	r3, r0
 800c05e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c066:	d112      	bne.n	800c08e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b01      	cmp	r3, #1
 800c076:	d102      	bne.n	800c07e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f008 ffb5 	bl	8014fe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	695a      	ldr	r2, [r3, #20]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c08c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4618      	mov	r0, r3
 800c094:	f004 f87b 	bl	801018e <USB_ReadInterrupts>
 800c098:	4603      	mov	r3, r0
 800c09a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c09e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a2:	f040 80c7 	bne.w	800c234 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0b4:	f023 0301 	bic.w	r3, r3, #1
 800c0b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2110      	movs	r1, #16
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f003 f949 	bl	800f358 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ca:	e056      	b.n	800c17a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d8:	461a      	mov	r2, r3
 800c0da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c0de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f0:	0151      	lsls	r1, r2, #5
 800c0f2:	69fa      	ldr	r2, [r7, #28]
 800c0f4:	440a      	add	r2, r1
 800c0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	015a      	lsls	r2, r3, #5
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	4413      	add	r3, r2
 800c108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c110:	0151      	lsls	r1, r2, #5
 800c112:	69fa      	ldr	r2, [r7, #28]
 800c114:	440a      	add	r2, r1
 800c116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c11a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c11e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	015a      	lsls	r2, r3, #5
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	4413      	add	r3, r2
 800c128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12c:	461a      	mov	r2, r3
 800c12e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c132:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	015a      	lsls	r2, r3, #5
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	4413      	add	r3, r2
 800c13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c144:	0151      	lsls	r1, r2, #5
 800c146:	69fa      	ldr	r2, [r7, #28]
 800c148:	440a      	add	r2, r1
 800c14a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c14e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	015a      	lsls	r2, r3, #5
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c164:	0151      	lsls	r1, r2, #5
 800c166:	69fa      	ldr	r2, [r7, #28]
 800c168:	440a      	add	r2, r1
 800c16a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c16e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c172:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c176:	3301      	adds	r3, #1
 800c178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c180:	429a      	cmp	r2, r3
 800c182:	d3a3      	bcc.n	800c0cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c192:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c196:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d016      	beq.n	800c1ce <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1aa:	69fa      	ldr	r2, [r7, #28]
 800c1ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1b0:	f043 030b 	orr.w	r3, r3, #11
 800c1b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c0:	69fa      	ldr	r2, [r7, #28]
 800c1c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1c6:	f043 030b 	orr.w	r3, r3, #11
 800c1ca:	6453      	str	r3, [r2, #68]	; 0x44
 800c1cc:	e015      	b.n	800c1fa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	69fa      	ldr	r2, [r7, #28]
 800c1d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c1e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c1e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1f4:	f043 030b 	orr.w	r3, r3, #11
 800c1f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	69fa      	ldr	r2, [r7, #28]
 800c204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c208:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c20c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c21e:	461a      	mov	r2, r3
 800c220:	f004 f87a 	bl	8010318 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	695a      	ldr	r2, [r3, #20]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4618      	mov	r0, r3
 800c23a:	f003 ffa8 	bl	801018e <USB_ReadInterrupts>
 800c23e:	4603      	mov	r3, r0
 800c240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c248:	d124      	bne.n	800c294 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	f004 f83e 	bl	80102d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4618      	mov	r0, r3
 800c25a:	f003 f8de 	bl	800f41a <USB_GetDevSpeed>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681c      	ldr	r4, [r3, #0]
 800c26a:	f001 f951 	bl	800d510 <HAL_RCC_GetHCLKFreq>
 800c26e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c274:	b2db      	uxtb	r3, r3
 800c276:	461a      	mov	r2, r3
 800c278:	4620      	mov	r0, r4
 800c27a:	f002 fe1b 	bl	800eeb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f008 fe89 	bl	8014f96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	695a      	ldr	r2, [r3, #20]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c292:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4618      	mov	r0, r3
 800c29a:	f003 ff78 	bl	801018e <USB_ReadInterrupts>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	f003 0308 	and.w	r3, r3, #8
 800c2a4:	2b08      	cmp	r3, #8
 800c2a6:	d10a      	bne.n	800c2be <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f008 fe66 	bl	8014f7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	695a      	ldr	r2, [r3, #20]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f002 0208 	and.w	r2, r2, #8
 800c2bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f003 ff63 	bl	801018e <USB_ReadInterrupts>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2d2:	d10f      	bne.n	800c2f4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f008 fec8 	bl	8015074 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	695a      	ldr	r2, [r3, #20]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c2f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f003 ff48 	bl	801018e <USB_ReadInterrupts>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c308:	d10f      	bne.n	800c32a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	b2db      	uxtb	r3, r3
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f008 fe9b 	bl	8015050 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	695a      	ldr	r2, [r3, #20]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4618      	mov	r0, r3
 800c330:	f003 ff2d 	bl	801018e <USB_ReadInterrupts>
 800c334:	4603      	mov	r3, r0
 800c336:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c33a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c33e:	d10a      	bne.n	800c356 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f008 fea9 	bl	8015098 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	695a      	ldr	r2, [r3, #20]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f003 ff17 	bl	801018e <USB_ReadInterrupts>
 800c360:	4603      	mov	r3, r0
 800c362:	f003 0304 	and.w	r3, r3, #4
 800c366:	2b04      	cmp	r3, #4
 800c368:	d115      	bne.n	800c396 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	f003 0304 	and.w	r3, r3, #4
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f008 fe99 	bl	80150b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6859      	ldr	r1, [r3, #4]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	430a      	orrs	r2, r1
 800c390:	605a      	str	r2, [r3, #4]
 800c392:	e000      	b.n	800c396 <HAL_PCD_IRQHandler+0x75e>
      return;
 800c394:	bf00      	nop
    }
  }
}
 800c396:	3734      	adds	r7, #52	; 0x34
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd90      	pop	{r4, r7, pc}

0800c39c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d101      	bne.n	800c3b6 <HAL_PCD_SetAddress+0x1a>
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e013      	b.n	800c3de <HAL_PCD_SetAddress+0x42>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	78fa      	ldrb	r2, [r7, #3]
 800c3c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	78fa      	ldrb	r2, [r7, #3]
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f003 fe75 	bl	80100be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	70fb      	strb	r3, [r7, #3]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	803b      	strh	r3, [r7, #0]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	da0f      	bge.n	800c42c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c40c:	78fb      	ldrb	r3, [r7, #3]
 800c40e:	f003 020f 	and.w	r2, r3, #15
 800c412:	4613      	mov	r3, r2
 800c414:	00db      	lsls	r3, r3, #3
 800c416:	1a9b      	subs	r3, r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	3338      	adds	r3, #56	; 0x38
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	4413      	add	r3, r2
 800c420:	3304      	adds	r3, #4
 800c422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	705a      	strb	r2, [r3, #1]
 800c42a:	e00f      	b.n	800c44c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c42c:	78fb      	ldrb	r3, [r7, #3]
 800c42e:	f003 020f 	and.w	r2, r3, #15
 800c432:	4613      	mov	r3, r2
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	4413      	add	r3, r2
 800c442:	3304      	adds	r3, #4
 800c444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	f003 030f 	and.w	r3, r3, #15
 800c452:	b2da      	uxtb	r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c458:	883a      	ldrh	r2, [r7, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	78ba      	ldrb	r2, [r7, #2]
 800c462:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	785b      	ldrb	r3, [r3, #1]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d004      	beq.n	800c476 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	b29a      	uxth	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c476:	78bb      	ldrb	r3, [r7, #2]
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d102      	bne.n	800c482 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d101      	bne.n	800c490 <HAL_PCD_EP_Open+0xaa>
 800c48c:	2302      	movs	r3, #2
 800c48e:	e00e      	b.n	800c4ae <HAL_PCD_EP_Open+0xc8>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68f9      	ldr	r1, [r7, #12]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f002 ffe0 	bl	800f464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c4c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	da0f      	bge.n	800c4ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4ca:	78fb      	ldrb	r3, [r7, #3]
 800c4cc:	f003 020f 	and.w	r2, r3, #15
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	1a9b      	subs	r3, r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	3338      	adds	r3, #56	; 0x38
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	4413      	add	r3, r2
 800c4de:	3304      	adds	r3, #4
 800c4e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	705a      	strb	r2, [r3, #1]
 800c4e8:	e00f      	b.n	800c50a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	f003 020f 	and.w	r2, r3, #15
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	1a9b      	subs	r3, r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	4413      	add	r3, r2
 800c500:	3304      	adds	r3, #4
 800c502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c50a:	78fb      	ldrb	r3, [r7, #3]
 800c50c:	f003 030f 	and.w	r3, r3, #15
 800c510:	b2da      	uxtb	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d101      	bne.n	800c524 <HAL_PCD_EP_Close+0x6e>
 800c520:	2302      	movs	r3, #2
 800c522:	e00e      	b.n	800c542 <HAL_PCD_EP_Close+0x8c>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68f9      	ldr	r1, [r7, #12]
 800c532:	4618      	mov	r0, r3
 800c534:	f003 f81e 	bl	800f574 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b086      	sub	sp, #24
 800c54e:	af00      	add	r7, sp, #0
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	607a      	str	r2, [r7, #4]
 800c554:	603b      	str	r3, [r7, #0]
 800c556:	460b      	mov	r3, r1
 800c558:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c55a:	7afb      	ldrb	r3, [r7, #11]
 800c55c:	f003 020f 	and.w	r2, r3, #15
 800c560:	4613      	mov	r3, r2
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	1a9b      	subs	r3, r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	3304      	adds	r3, #4
 800c572:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2200      	movs	r2, #0
 800c584:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2200      	movs	r2, #0
 800c58a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c58c:	7afb      	ldrb	r3, [r7, #11]
 800c58e:	f003 030f 	and.w	r3, r3, #15
 800c592:	b2da      	uxtb	r2, r3
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d102      	bne.n	800c5a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
 800c5a8:	f003 030f 	and.w	r3, r3, #15
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d109      	bne.n	800c5c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6818      	ldr	r0, [r3, #0]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	6979      	ldr	r1, [r7, #20]
 800c5be:	f003 faf9 	bl	800fbb4 <USB_EP0StartXfer>
 800c5c2:	e008      	b.n	800c5d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6979      	ldr	r1, [r7, #20]
 800c5d2:	f003 f8ab 	bl	800f72c <USB_EPStartXfer>
  }

  return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c5ec:	78fb      	ldrb	r3, [r7, #3]
 800c5ee:	f003 020f 	and.w	r2, r3, #15
 800c5f2:	6879      	ldr	r1, [r7, #4]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	1a9b      	subs	r3, r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	440b      	add	r3, r1
 800c5fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c602:	681b      	ldr	r3, [r3, #0]
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	607a      	str	r2, [r7, #4]
 800c61a:	603b      	str	r3, [r7, #0]
 800c61c:	460b      	mov	r3, r1
 800c61e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c620:	7afb      	ldrb	r3, [r7, #11]
 800c622:	f003 020f 	and.w	r2, r3, #15
 800c626:	4613      	mov	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	1a9b      	subs	r3, r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	3338      	adds	r3, #56	; 0x38
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	4413      	add	r3, r2
 800c634:	3304      	adds	r3, #4
 800c636:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2200      	movs	r2, #0
 800c648:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2201      	movs	r2, #1
 800c64e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	f003 030f 	and.w	r3, r3, #15
 800c656:	b2da      	uxtb	r2, r3
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d102      	bne.n	800c66a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c66a:	7afb      	ldrb	r3, [r7, #11]
 800c66c:	f003 030f 	and.w	r3, r3, #15
 800c670:	2b00      	cmp	r3, #0
 800c672:	d109      	bne.n	800c688 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	461a      	mov	r2, r3
 800c680:	6979      	ldr	r1, [r7, #20]
 800c682:	f003 fa97 	bl	800fbb4 <USB_EP0StartXfer>
 800c686:	e008      	b.n	800c69a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	461a      	mov	r2, r3
 800c694:	6979      	ldr	r1, [r7, #20]
 800c696:	f003 f849 	bl	800f72c <USB_EPStartXfer>
  }

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3718      	adds	r7, #24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c6b0:	78fb      	ldrb	r3, [r7, #3]
 800c6b2:	f003 020f 	and.w	r2, r3, #15
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d901      	bls.n	800c6c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e050      	b.n	800c764 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c6c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	da0f      	bge.n	800c6ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6ca:	78fb      	ldrb	r3, [r7, #3]
 800c6cc:	f003 020f 	and.w	r2, r3, #15
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	1a9b      	subs	r3, r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	3338      	adds	r3, #56	; 0x38
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	4413      	add	r3, r2
 800c6de:	3304      	adds	r3, #4
 800c6e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	705a      	strb	r2, [r3, #1]
 800c6e8:	e00d      	b.n	800c706 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c6ea:	78fa      	ldrb	r2, [r7, #3]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	1a9b      	subs	r3, r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2201      	movs	r2, #1
 800c70a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	f003 030f 	and.w	r3, r3, #15
 800c712:	b2da      	uxtb	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d101      	bne.n	800c726 <HAL_PCD_EP_SetStall+0x82>
 800c722:	2302      	movs	r3, #2
 800c724:	e01e      	b.n	800c764 <HAL_PCD_EP_SetStall+0xc0>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68f9      	ldr	r1, [r7, #12]
 800c734:	4618      	mov	r0, r3
 800c736:	f003 fbee 	bl	800ff16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c73a:	78fb      	ldrb	r3, [r7, #3]
 800c73c:	f003 030f 	and.w	r3, r3, #15
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10a      	bne.n	800c75a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6818      	ldr	r0, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	b2d9      	uxtb	r1, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c754:	461a      	mov	r2, r3
 800c756:	f003 fddf 	bl	8010318 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c778:	78fb      	ldrb	r3, [r7, #3]
 800c77a:	f003 020f 	and.w	r2, r3, #15
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d901      	bls.n	800c78a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e042      	b.n	800c810 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c78a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	da0f      	bge.n	800c7b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c792:	78fb      	ldrb	r3, [r7, #3]
 800c794:	f003 020f 	and.w	r2, r3, #15
 800c798:	4613      	mov	r3, r2
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	1a9b      	subs	r3, r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	3338      	adds	r3, #56	; 0x38
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	705a      	strb	r2, [r3, #1]
 800c7b0:	e00f      	b.n	800c7d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c7b2:	78fb      	ldrb	r3, [r7, #3]
 800c7b4:	f003 020f 	and.w	r2, r3, #15
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c7d8:	78fb      	ldrb	r3, [r7, #3]
 800c7da:	f003 030f 	and.w	r3, r3, #15
 800c7de:	b2da      	uxtb	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d101      	bne.n	800c7f2 <HAL_PCD_EP_ClrStall+0x86>
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	e00e      	b.n	800c810 <HAL_PCD_EP_ClrStall+0xa4>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68f9      	ldr	r1, [r7, #12]
 800c800:	4618      	mov	r0, r3
 800c802:	f003 fbf6 	bl	800fff2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08a      	sub	sp, #40	; 0x28
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	4613      	mov	r3, r2
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	1a9b      	subs	r3, r3, r2
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	3338      	adds	r3, #56	; 0x38
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	4413      	add	r3, r2
 800c83c:	3304      	adds	r3, #4
 800c83e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	699a      	ldr	r2, [r3, #24]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d901      	bls.n	800c850 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	e06c      	b.n	800c92a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	695a      	ldr	r2, [r3, #20]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	69fa      	ldr	r2, [r7, #28]
 800c862:	429a      	cmp	r2, r3
 800c864:	d902      	bls.n	800c86c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	3303      	adds	r3, #3
 800c870:	089b      	lsrs	r3, r3, #2
 800c872:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c874:	e02b      	b.n	800c8ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	695a      	ldr	r2, [r3, #20]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	69fa      	ldr	r2, [r7, #28]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d902      	bls.n	800c892 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	3303      	adds	r3, #3
 800c896:	089b      	lsrs	r3, r3, #2
 800c898:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	68d9      	ldr	r1, [r3, #12]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	6978      	ldr	r0, [r7, #20]
 800c8b2:	f003 fad2 	bl	800fe5a <USB_WritePacket>

    ep->xfer_buff  += len;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	441a      	add	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	699a      	ldr	r2, [r3, #24]
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	015a      	lsls	r2, r3, #5
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	69ba      	ldr	r2, [r7, #24]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d809      	bhi.n	800c8f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	699a      	ldr	r2, [r3, #24]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d203      	bcs.n	800c8f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d1be      	bne.n	800c876 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	695a      	ldr	r2, [r3, #20]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	429a      	cmp	r2, r3
 800c902:	d811      	bhi.n	800c928 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	f003 030f 	and.w	r3, r3, #15
 800c90a:	2201      	movs	r2, #1
 800c90c:	fa02 f303 	lsl.w	r3, r2, r3
 800c910:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	43db      	mvns	r3, r3
 800c91e:	6939      	ldr	r1, [r7, #16]
 800c920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c924:	4013      	ands	r3, r2
 800c926:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3720      	adds	r7, #32
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
	...

0800c934 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	333c      	adds	r3, #60	; 0x3c
 800c94c:	3304      	adds	r3, #4
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	015a      	lsls	r2, r3, #5
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	4413      	add	r3, r2
 800c95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	2b01      	cmp	r3, #1
 800c968:	f040 80a0 	bne.w	800caac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f003 0308 	and.w	r3, r3, #8
 800c972:	2b00      	cmp	r3, #0
 800c974:	d015      	beq.n	800c9a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4a72      	ldr	r2, [pc, #456]	; (800cb44 <PCD_EP_OutXfrComplete_int+0x210>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	f240 80dd 	bls.w	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 80d7 	beq.w	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	015a      	lsls	r2, r3, #5
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	4413      	add	r3, r2
 800c994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c998:	461a      	mov	r2, r3
 800c99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c99e:	6093      	str	r3, [r2, #8]
 800c9a0:	e0cb      	b.n	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f003 0320 	and.w	r3, r3, #32
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d009      	beq.n	800c9c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	015a      	lsls	r2, r3, #5
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	2320      	movs	r3, #32
 800c9bc:	6093      	str	r3, [r2, #8]
 800c9be:	e0bc      	b.n	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f040 80b7 	bne.w	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4a5d      	ldr	r2, [pc, #372]	; (800cb44 <PCD_EP_OutXfrComplete_int+0x210>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d90f      	bls.n	800c9f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00a      	beq.n	800c9f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	015a      	lsls	r2, r3, #5
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9f0:	6093      	str	r3, [r2, #8]
 800c9f2:	e0a2      	b.n	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800c9f4:	6879      	ldr	r1, [r7, #4]
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	1a9b      	subs	r3, r3, r2
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	440b      	add	r3, r1
 800ca02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ca06:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	0159      	lsls	r1, r3, #5
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	440b      	add	r3, r1
 800ca10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800ca1a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	683a      	ldr	r2, [r7, #0]
 800ca20:	4613      	mov	r3, r2
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	1a9b      	subs	r3, r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4403      	add	r3, r0
 800ca2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ca2e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	683a      	ldr	r2, [r7, #0]
 800ca34:	4613      	mov	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	1a9b      	subs	r3, r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	440b      	add	r3, r1
 800ca3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ca42:	6819      	ldr	r1, [r3, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	1a9b      	subs	r3, r3, r2
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	4403      	add	r3, r0
 800ca52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4419      	add	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	1a9b      	subs	r3, r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4403      	add	r3, r0
 800ca68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ca6c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d114      	bne.n	800ca9e <PCD_EP_OutXfrComplete_int+0x16a>
 800ca74:	6879      	ldr	r1, [r7, #4]
 800ca76:	683a      	ldr	r2, [r7, #0]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	1a9b      	subs	r3, r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	440b      	add	r3, r1
 800ca82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d108      	bne.n	800ca9e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ca96:	461a      	mov	r2, r3
 800ca98:	2101      	movs	r1, #1
 800ca9a:	f003 fc3d 	bl	8010318 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f008 fa33 	bl	8014f10 <HAL_PCD_DataOutStageCallback>
 800caaa:	e046      	b.n	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4a26      	ldr	r2, [pc, #152]	; (800cb48 <PCD_EP_OutXfrComplete_int+0x214>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d124      	bne.n	800cafe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00a      	beq.n	800cad4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caca:	461a      	mov	r2, r3
 800cacc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cad0:	6093      	str	r3, [r2, #8]
 800cad2:	e032      	b.n	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f003 0320 	and.w	r3, r3, #32
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d008      	beq.n	800caf0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caea:	461a      	mov	r2, r3
 800caec:	2320      	movs	r3, #32
 800caee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f008 fa0a 	bl	8014f10 <HAL_PCD_DataOutStageCallback>
 800cafc:	e01d      	b.n	800cb3a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d114      	bne.n	800cb2e <PCD_EP_OutXfrComplete_int+0x1fa>
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	4613      	mov	r3, r2
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	1a9b      	subs	r3, r3, r2
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	440b      	add	r3, r1
 800cb12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d108      	bne.n	800cb2e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cb26:	461a      	mov	r2, r3
 800cb28:	2100      	movs	r1, #0
 800cb2a:	f003 fbf5 	bl	8010318 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f008 f9eb 	bl	8014f10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	4f54300a 	.word	0x4f54300a
 800cb48:	4f54310a 	.word	0x4f54310a

0800cb4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	333c      	adds	r3, #60	; 0x3c
 800cb64:	3304      	adds	r3, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	015a      	lsls	r2, r3, #5
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	4413      	add	r3, r2
 800cb72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4a15      	ldr	r2, [pc, #84]	; (800cbd4 <PCD_EP_OutSetupPacket_int+0x88>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d90e      	bls.n	800cba0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d009      	beq.n	800cba0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb98:	461a      	mov	r2, r3
 800cb9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f008 f9a3 	bl	8014eec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	4a0a      	ldr	r2, [pc, #40]	; (800cbd4 <PCD_EP_OutSetupPacket_int+0x88>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d90c      	bls.n	800cbc8 <PCD_EP_OutSetupPacket_int+0x7c>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d108      	bne.n	800cbc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	f003 fba8 	bl	8010318 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	4f54300a 	.word	0x4f54300a

0800cbd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	70fb      	strb	r3, [r7, #3]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d107      	bne.n	800cc06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cbf6:	883b      	ldrh	r3, [r7, #0]
 800cbf8:	0419      	lsls	r1, r3, #16
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	430a      	orrs	r2, r1
 800cc02:	629a      	str	r2, [r3, #40]	; 0x28
 800cc04:	e028      	b.n	800cc58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0c:	0c1b      	lsrs	r3, r3, #16
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	4413      	add	r3, r2
 800cc12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cc14:	2300      	movs	r3, #0
 800cc16:	73fb      	strb	r3, [r7, #15]
 800cc18:	e00d      	b.n	800cc36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
 800cc20:	3340      	adds	r3, #64	; 0x40
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	0c1b      	lsrs	r3, r3, #16
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	3301      	adds	r3, #1
 800cc34:	73fb      	strb	r3, [r7, #15]
 800cc36:	7bfa      	ldrb	r2, [r7, #15]
 800cc38:	78fb      	ldrb	r3, [r7, #3]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d3ec      	bcc.n	800cc1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cc40:	883b      	ldrh	r3, [r7, #0]
 800cc42:	0418      	lsls	r0, r3, #16
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6819      	ldr	r1, [r3, #0]
 800cc48:	78fb      	ldrb	r3, [r7, #3]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	4302      	orrs	r2, r0
 800cc50:	3340      	adds	r3, #64	; 0x40
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	440b      	add	r3, r1
 800cc56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b083      	sub	sp, #12
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	887a      	ldrh	r2, [r7, #2]
 800cc78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d101      	bne.n	800ccb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e25b      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d075      	beq.n	800cdaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ccbe:	4ba3      	ldr	r3, [pc, #652]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f003 030c 	and.w	r3, r3, #12
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	d00c      	beq.n	800cce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ccca:	4ba0      	ldr	r3, [pc, #640]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ccd2:	2b08      	cmp	r3, #8
 800ccd4:	d112      	bne.n	800ccfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ccd6:	4b9d      	ldr	r3, [pc, #628]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cce2:	d10b      	bne.n	800ccfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cce4:	4b99      	ldr	r3, [pc, #612]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d05b      	beq.n	800cda8 <HAL_RCC_OscConfig+0x108>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d157      	bne.n	800cda8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e236      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd04:	d106      	bne.n	800cd14 <HAL_RCC_OscConfig+0x74>
 800cd06:	4b91      	ldr	r3, [pc, #580]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a90      	ldr	r2, [pc, #576]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd10:	6013      	str	r3, [r2, #0]
 800cd12:	e01d      	b.n	800cd50 <HAL_RCC_OscConfig+0xb0>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd1c:	d10c      	bne.n	800cd38 <HAL_RCC_OscConfig+0x98>
 800cd1e:	4b8b      	ldr	r3, [pc, #556]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a8a      	ldr	r2, [pc, #552]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd28:	6013      	str	r3, [r2, #0]
 800cd2a:	4b88      	ldr	r3, [pc, #544]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a87      	ldr	r2, [pc, #540]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	e00b      	b.n	800cd50 <HAL_RCC_OscConfig+0xb0>
 800cd38:	4b84      	ldr	r3, [pc, #528]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a83      	ldr	r2, [pc, #524]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	4b81      	ldr	r3, [pc, #516]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a80      	ldr	r2, [pc, #512]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d013      	beq.n	800cd80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd58:	f7fd ff60 	bl	800ac1c <HAL_GetTick>
 800cd5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd5e:	e008      	b.n	800cd72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd60:	f7fd ff5c 	bl	800ac1c <HAL_GetTick>
 800cd64:	4602      	mov	r2, r0
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	2b64      	cmp	r3, #100	; 0x64
 800cd6c:	d901      	bls.n	800cd72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cd6e:	2303      	movs	r3, #3
 800cd70:	e1fb      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd72:	4b76      	ldr	r3, [pc, #472]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d0f0      	beq.n	800cd60 <HAL_RCC_OscConfig+0xc0>
 800cd7e:	e014      	b.n	800cdaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd80:	f7fd ff4c 	bl	800ac1c <HAL_GetTick>
 800cd84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd86:	e008      	b.n	800cd9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd88:	f7fd ff48 	bl	800ac1c <HAL_GetTick>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	2b64      	cmp	r3, #100	; 0x64
 800cd94:	d901      	bls.n	800cd9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cd96:	2303      	movs	r3, #3
 800cd98:	e1e7      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd9a:	4b6c      	ldr	r3, [pc, #432]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1f0      	bne.n	800cd88 <HAL_RCC_OscConfig+0xe8>
 800cda6:	e000      	b.n	800cdaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cda8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d063      	beq.n	800ce7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cdb6:	4b65      	ldr	r3, [pc, #404]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	f003 030c 	and.w	r3, r3, #12
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00b      	beq.n	800cdda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdc2:	4b62      	ldr	r3, [pc, #392]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cdca:	2b08      	cmp	r3, #8
 800cdcc:	d11c      	bne.n	800ce08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdce:	4b5f      	ldr	r3, [pc, #380]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d116      	bne.n	800ce08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdda:	4b5c      	ldr	r3, [pc, #368]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 0302 	and.w	r3, r3, #2
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d005      	beq.n	800cdf2 <HAL_RCC_OscConfig+0x152>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d001      	beq.n	800cdf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e1bb      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdf2:	4b56      	ldr	r3, [pc, #344]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	4952      	ldr	r1, [pc, #328]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ce02:	4313      	orrs	r3, r2
 800ce04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce06:	e03a      	b.n	800ce7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d020      	beq.n	800ce52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce10:	4b4f      	ldr	r3, [pc, #316]	; (800cf50 <HAL_RCC_OscConfig+0x2b0>)
 800ce12:	2201      	movs	r2, #1
 800ce14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce16:	f7fd ff01 	bl	800ac1c <HAL_GetTick>
 800ce1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce1c:	e008      	b.n	800ce30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce1e:	f7fd fefd 	bl	800ac1c <HAL_GetTick>
 800ce22:	4602      	mov	r2, r0
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d901      	bls.n	800ce30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e19c      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce30:	4b46      	ldr	r3, [pc, #280]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0302 	and.w	r3, r3, #2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d0f0      	beq.n	800ce1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce3c:	4b43      	ldr	r3, [pc, #268]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	00db      	lsls	r3, r3, #3
 800ce4a:	4940      	ldr	r1, [pc, #256]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	600b      	str	r3, [r1, #0]
 800ce50:	e015      	b.n	800ce7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce52:	4b3f      	ldr	r3, [pc, #252]	; (800cf50 <HAL_RCC_OscConfig+0x2b0>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce58:	f7fd fee0 	bl	800ac1c <HAL_GetTick>
 800ce5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce5e:	e008      	b.n	800ce72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce60:	f7fd fedc 	bl	800ac1c <HAL_GetTick>
 800ce64:	4602      	mov	r2, r0
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d901      	bls.n	800ce72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e17b      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce72:	4b36      	ldr	r3, [pc, #216]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 0302 	and.w	r3, r3, #2
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1f0      	bne.n	800ce60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 0308 	and.w	r3, r3, #8
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d030      	beq.n	800ceec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d016      	beq.n	800cec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce92:	4b30      	ldr	r3, [pc, #192]	; (800cf54 <HAL_RCC_OscConfig+0x2b4>)
 800ce94:	2201      	movs	r2, #1
 800ce96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce98:	f7fd fec0 	bl	800ac1c <HAL_GetTick>
 800ce9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce9e:	e008      	b.n	800ceb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cea0:	f7fd febc 	bl	800ac1c <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d901      	bls.n	800ceb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e15b      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ceb2:	4b26      	ldr	r3, [pc, #152]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800ceb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0f0      	beq.n	800cea0 <HAL_RCC_OscConfig+0x200>
 800cebe:	e015      	b.n	800ceec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cec0:	4b24      	ldr	r3, [pc, #144]	; (800cf54 <HAL_RCC_OscConfig+0x2b4>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cec6:	f7fd fea9 	bl	800ac1c <HAL_GetTick>
 800ceca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cecc:	e008      	b.n	800cee0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cece:	f7fd fea5 	bl	800ac1c <HAL_GetTick>
 800ced2:	4602      	mov	r2, r0
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d901      	bls.n	800cee0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cedc:	2303      	movs	r3, #3
 800cede:	e144      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cee0:	4b1a      	ldr	r3, [pc, #104]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cee4:	f003 0302 	and.w	r3, r3, #2
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1f0      	bne.n	800cece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f003 0304 	and.w	r3, r3, #4
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 80a0 	beq.w	800d03a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cefe:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cf00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10f      	bne.n	800cf2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	60bb      	str	r3, [r7, #8]
 800cf0e:	4b0f      	ldr	r3, [pc, #60]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf12:	4a0e      	ldr	r2, [pc, #56]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cf14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf18:	6413      	str	r3, [r2, #64]	; 0x40
 800cf1a:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <HAL_RCC_OscConfig+0x2ac>)
 800cf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf22:	60bb      	str	r3, [r7, #8]
 800cf24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cf26:	2301      	movs	r3, #1
 800cf28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf2a:	4b0b      	ldr	r3, [pc, #44]	; (800cf58 <HAL_RCC_OscConfig+0x2b8>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d121      	bne.n	800cf7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf36:	4b08      	ldr	r3, [pc, #32]	; (800cf58 <HAL_RCC_OscConfig+0x2b8>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a07      	ldr	r2, [pc, #28]	; (800cf58 <HAL_RCC_OscConfig+0x2b8>)
 800cf3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf42:	f7fd fe6b 	bl	800ac1c <HAL_GetTick>
 800cf46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf48:	e011      	b.n	800cf6e <HAL_RCC_OscConfig+0x2ce>
 800cf4a:	bf00      	nop
 800cf4c:	40023800 	.word	0x40023800
 800cf50:	42470000 	.word	0x42470000
 800cf54:	42470e80 	.word	0x42470e80
 800cf58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf5c:	f7fd fe5e 	bl	800ac1c <HAL_GetTick>
 800cf60:	4602      	mov	r2, r0
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d901      	bls.n	800cf6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	e0fd      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf6e:	4b81      	ldr	r3, [pc, #516]	; (800d174 <HAL_RCC_OscConfig+0x4d4>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d0f0      	beq.n	800cf5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d106      	bne.n	800cf90 <HAL_RCC_OscConfig+0x2f0>
 800cf82:	4b7d      	ldr	r3, [pc, #500]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cf84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf86:	4a7c      	ldr	r2, [pc, #496]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cf88:	f043 0301 	orr.w	r3, r3, #1
 800cf8c:	6713      	str	r3, [r2, #112]	; 0x70
 800cf8e:	e01c      	b.n	800cfca <HAL_RCC_OscConfig+0x32a>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	2b05      	cmp	r3, #5
 800cf96:	d10c      	bne.n	800cfb2 <HAL_RCC_OscConfig+0x312>
 800cf98:	4b77      	ldr	r3, [pc, #476]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cf9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf9c:	4a76      	ldr	r2, [pc, #472]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cf9e:	f043 0304 	orr.w	r3, r3, #4
 800cfa2:	6713      	str	r3, [r2, #112]	; 0x70
 800cfa4:	4b74      	ldr	r3, [pc, #464]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cfa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa8:	4a73      	ldr	r2, [pc, #460]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cfaa:	f043 0301 	orr.w	r3, r3, #1
 800cfae:	6713      	str	r3, [r2, #112]	; 0x70
 800cfb0:	e00b      	b.n	800cfca <HAL_RCC_OscConfig+0x32a>
 800cfb2:	4b71      	ldr	r3, [pc, #452]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb6:	4a70      	ldr	r2, [pc, #448]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cfb8:	f023 0301 	bic.w	r3, r3, #1
 800cfbc:	6713      	str	r3, [r2, #112]	; 0x70
 800cfbe:	4b6e      	ldr	r3, [pc, #440]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc2:	4a6d      	ldr	r2, [pc, #436]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cfc4:	f023 0304 	bic.w	r3, r3, #4
 800cfc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d015      	beq.n	800cffe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfd2:	f7fd fe23 	bl	800ac1c <HAL_GetTick>
 800cfd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfd8:	e00a      	b.n	800cff0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfda:	f7fd fe1f 	bl	800ac1c <HAL_GetTick>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d901      	bls.n	800cff0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e0bc      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cff0:	4b61      	ldr	r3, [pc, #388]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800cff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff4:	f003 0302 	and.w	r3, r3, #2
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d0ee      	beq.n	800cfda <HAL_RCC_OscConfig+0x33a>
 800cffc:	e014      	b.n	800d028 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cffe:	f7fd fe0d 	bl	800ac1c <HAL_GetTick>
 800d002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d004:	e00a      	b.n	800d01c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d006:	f7fd fe09 	bl	800ac1c <HAL_GetTick>
 800d00a:	4602      	mov	r2, r0
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	f241 3288 	movw	r2, #5000	; 0x1388
 800d014:	4293      	cmp	r3, r2
 800d016:	d901      	bls.n	800d01c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d018:	2303      	movs	r3, #3
 800d01a:	e0a6      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d01c:	4b56      	ldr	r3, [pc, #344]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d020:	f003 0302 	and.w	r3, r3, #2
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1ee      	bne.n	800d006 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d105      	bne.n	800d03a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d02e:	4b52      	ldr	r3, [pc, #328]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	4a51      	ldr	r2, [pc, #324]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f000 8092 	beq.w	800d168 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d044:	4b4c      	ldr	r3, [pc, #304]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	f003 030c 	and.w	r3, r3, #12
 800d04c:	2b08      	cmp	r3, #8
 800d04e:	d05c      	beq.n	800d10a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d141      	bne.n	800d0dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d058:	4b48      	ldr	r3, [pc, #288]	; (800d17c <HAL_RCC_OscConfig+0x4dc>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d05e:	f7fd fddd 	bl	800ac1c <HAL_GetTick>
 800d062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d064:	e008      	b.n	800d078 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d066:	f7fd fdd9 	bl	800ac1c <HAL_GetTick>
 800d06a:	4602      	mov	r2, r0
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	2b02      	cmp	r3, #2
 800d072:	d901      	bls.n	800d078 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	e078      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d078:	4b3f      	ldr	r3, [pc, #252]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1f0      	bne.n	800d066 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	69da      	ldr	r2, [r3, #28]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a1b      	ldr	r3, [r3, #32]
 800d08c:	431a      	orrs	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d092:	019b      	lsls	r3, r3, #6
 800d094:	431a      	orrs	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d09a:	085b      	lsrs	r3, r3, #1
 800d09c:	3b01      	subs	r3, #1
 800d09e:	041b      	lsls	r3, r3, #16
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a6:	061b      	lsls	r3, r3, #24
 800d0a8:	4933      	ldr	r1, [pc, #204]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d0ae:	4b33      	ldr	r3, [pc, #204]	; (800d17c <HAL_RCC_OscConfig+0x4dc>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0b4:	f7fd fdb2 	bl	800ac1c <HAL_GetTick>
 800d0b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0ba:	e008      	b.n	800d0ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0bc:	f7fd fdae 	bl	800ac1c <HAL_GetTick>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d901      	bls.n	800d0ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	e04d      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0ce:	4b2a      	ldr	r3, [pc, #168]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d0f0      	beq.n	800d0bc <HAL_RCC_OscConfig+0x41c>
 800d0da:	e045      	b.n	800d168 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0dc:	4b27      	ldr	r3, [pc, #156]	; (800d17c <HAL_RCC_OscConfig+0x4dc>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0e2:	f7fd fd9b 	bl	800ac1c <HAL_GetTick>
 800d0e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0e8:	e008      	b.n	800d0fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0ea:	f7fd fd97 	bl	800ac1c <HAL_GetTick>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d901      	bls.n	800d0fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	e036      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0fc:	4b1e      	ldr	r3, [pc, #120]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1f0      	bne.n	800d0ea <HAL_RCC_OscConfig+0x44a>
 800d108:	e02e      	b.n	800d168 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d101      	bne.n	800d116 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e029      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d116:	4b18      	ldr	r3, [pc, #96]	; (800d178 <HAL_RCC_OscConfig+0x4d8>)
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	429a      	cmp	r2, r3
 800d128:	d11c      	bne.n	800d164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d134:	429a      	cmp	r2, r3
 800d136:	d115      	bne.n	800d164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d13e:	4013      	ands	r3, r2
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d144:	4293      	cmp	r3, r2
 800d146:	d10d      	bne.n	800d164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d152:	429a      	cmp	r2, r3
 800d154:	d106      	bne.n	800d164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d160:	429a      	cmp	r2, r3
 800d162:	d001      	beq.n	800d168 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	e000      	b.n	800d16a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3718      	adds	r7, #24
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	40007000 	.word	0x40007000
 800d178:	40023800 	.word	0x40023800
 800d17c:	42470060 	.word	0x42470060

0800d180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e0cc      	b.n	800d32e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d194:	4b68      	ldr	r3, [pc, #416]	; (800d338 <HAL_RCC_ClockConfig+0x1b8>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 030f 	and.w	r3, r3, #15
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d90c      	bls.n	800d1bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1a2:	4b65      	ldr	r3, [pc, #404]	; (800d338 <HAL_RCC_ClockConfig+0x1b8>)
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1aa:	4b63      	ldr	r3, [pc, #396]	; (800d338 <HAL_RCC_ClockConfig+0x1b8>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f003 030f 	and.w	r3, r3, #15
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d001      	beq.n	800d1bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e0b8      	b.n	800d32e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f003 0302 	and.w	r3, r3, #2
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d020      	beq.n	800d20a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 0304 	and.w	r3, r3, #4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d005      	beq.n	800d1e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d1d4:	4b59      	ldr	r3, [pc, #356]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	4a58      	ldr	r2, [pc, #352]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d1da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d1de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 0308 	and.w	r3, r3, #8
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d005      	beq.n	800d1f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d1ec:	4b53      	ldr	r3, [pc, #332]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	4a52      	ldr	r2, [pc, #328]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d1f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d1f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d1f8:	4b50      	ldr	r3, [pc, #320]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	494d      	ldr	r1, [pc, #308]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d206:	4313      	orrs	r3, r2
 800d208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d044      	beq.n	800d2a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d107      	bne.n	800d22e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d21e:	4b47      	ldr	r3, [pc, #284]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d226:	2b00      	cmp	r3, #0
 800d228:	d119      	bne.n	800d25e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e07f      	b.n	800d32e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	2b02      	cmp	r3, #2
 800d234:	d003      	beq.n	800d23e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d23a:	2b03      	cmp	r3, #3
 800d23c:	d107      	bne.n	800d24e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d23e:	4b3f      	ldr	r3, [pc, #252]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d246:	2b00      	cmp	r3, #0
 800d248:	d109      	bne.n	800d25e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e06f      	b.n	800d32e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d24e:	4b3b      	ldr	r3, [pc, #236]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	2b00      	cmp	r3, #0
 800d258:	d101      	bne.n	800d25e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e067      	b.n	800d32e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d25e:	4b37      	ldr	r3, [pc, #220]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	f023 0203 	bic.w	r2, r3, #3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	4934      	ldr	r1, [pc, #208]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d26c:	4313      	orrs	r3, r2
 800d26e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d270:	f7fd fcd4 	bl	800ac1c <HAL_GetTick>
 800d274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d276:	e00a      	b.n	800d28e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d278:	f7fd fcd0 	bl	800ac1c <HAL_GetTick>
 800d27c:	4602      	mov	r2, r0
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	f241 3288 	movw	r2, #5000	; 0x1388
 800d286:	4293      	cmp	r3, r2
 800d288:	d901      	bls.n	800d28e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e04f      	b.n	800d32e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d28e:	4b2b      	ldr	r3, [pc, #172]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	f003 020c 	and.w	r2, r3, #12
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d1eb      	bne.n	800d278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d2a0:	4b25      	ldr	r3, [pc, #148]	; (800d338 <HAL_RCC_ClockConfig+0x1b8>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 030f 	and.w	r3, r3, #15
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d20c      	bcs.n	800d2c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2ae:	4b22      	ldr	r3, [pc, #136]	; (800d338 <HAL_RCC_ClockConfig+0x1b8>)
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2b6:	4b20      	ldr	r3, [pc, #128]	; (800d338 <HAL_RCC_ClockConfig+0x1b8>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f003 030f 	and.w	r3, r3, #15
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d001      	beq.n	800d2c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e032      	b.n	800d32e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d008      	beq.n	800d2e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d2d4:	4b19      	ldr	r3, [pc, #100]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	4916      	ldr	r1, [pc, #88]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f003 0308 	and.w	r3, r3, #8
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d009      	beq.n	800d306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d2f2:	4b12      	ldr	r3, [pc, #72]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d2f4:	689b      	ldr	r3, [r3, #8]
 800d2f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	00db      	lsls	r3, r3, #3
 800d300:	490e      	ldr	r1, [pc, #56]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d302:	4313      	orrs	r3, r2
 800d304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d306:	f000 f821 	bl	800d34c <HAL_RCC_GetSysClockFreq>
 800d30a:	4602      	mov	r2, r0
 800d30c:	4b0b      	ldr	r3, [pc, #44]	; (800d33c <HAL_RCC_ClockConfig+0x1bc>)
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	091b      	lsrs	r3, r3, #4
 800d312:	f003 030f 	and.w	r3, r3, #15
 800d316:	490a      	ldr	r1, [pc, #40]	; (800d340 <HAL_RCC_ClockConfig+0x1c0>)
 800d318:	5ccb      	ldrb	r3, [r1, r3]
 800d31a:	fa22 f303 	lsr.w	r3, r2, r3
 800d31e:	4a09      	ldr	r2, [pc, #36]	; (800d344 <HAL_RCC_ClockConfig+0x1c4>)
 800d320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d322:	4b09      	ldr	r3, [pc, #36]	; (800d348 <HAL_RCC_ClockConfig+0x1c8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4618      	mov	r0, r3
 800d328:	f7fd f8ee 	bl	800a508 <HAL_InitTick>

  return HAL_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	40023c00 	.word	0x40023c00
 800d33c:	40023800 	.word	0x40023800
 800d340:	0801be00 	.word	0x0801be00
 800d344:	2000408c 	.word	0x2000408c
 800d348:	20004090 	.word	0x20004090

0800d34c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d34c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d354:	2300      	movs	r3, #0
 800d356:	607b      	str	r3, [r7, #4]
 800d358:	2300      	movs	r3, #0
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	2300      	movs	r3, #0
 800d35e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d360:	2300      	movs	r3, #0
 800d362:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d364:	4b67      	ldr	r3, [pc, #412]	; (800d504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	f003 030c 	and.w	r3, r3, #12
 800d36c:	2b08      	cmp	r3, #8
 800d36e:	d00d      	beq.n	800d38c <HAL_RCC_GetSysClockFreq+0x40>
 800d370:	2b08      	cmp	r3, #8
 800d372:	f200 80bd 	bhi.w	800d4f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <HAL_RCC_GetSysClockFreq+0x34>
 800d37a:	2b04      	cmp	r3, #4
 800d37c:	d003      	beq.n	800d386 <HAL_RCC_GetSysClockFreq+0x3a>
 800d37e:	e0b7      	b.n	800d4f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d380:	4b61      	ldr	r3, [pc, #388]	; (800d508 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800d382:	60bb      	str	r3, [r7, #8]
       break;
 800d384:	e0b7      	b.n	800d4f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d386:	4b61      	ldr	r3, [pc, #388]	; (800d50c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800d388:	60bb      	str	r3, [r7, #8]
      break;
 800d38a:	e0b4      	b.n	800d4f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d38c:	4b5d      	ldr	r3, [pc, #372]	; (800d504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d394:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d396:	4b5b      	ldr	r3, [pc, #364]	; (800d504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d04d      	beq.n	800d43e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d3a2:	4b58      	ldr	r3, [pc, #352]	; (800d504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	099b      	lsrs	r3, r3, #6
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	f04f 0300 	mov.w	r3, #0
 800d3ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d3b2:	f04f 0100 	mov.w	r1, #0
 800d3b6:	ea02 0800 	and.w	r8, r2, r0
 800d3ba:	ea03 0901 	and.w	r9, r3, r1
 800d3be:	4640      	mov	r0, r8
 800d3c0:	4649      	mov	r1, r9
 800d3c2:	f04f 0200 	mov.w	r2, #0
 800d3c6:	f04f 0300 	mov.w	r3, #0
 800d3ca:	014b      	lsls	r3, r1, #5
 800d3cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d3d0:	0142      	lsls	r2, r0, #5
 800d3d2:	4610      	mov	r0, r2
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	ebb0 0008 	subs.w	r0, r0, r8
 800d3da:	eb61 0109 	sbc.w	r1, r1, r9
 800d3de:	f04f 0200 	mov.w	r2, #0
 800d3e2:	f04f 0300 	mov.w	r3, #0
 800d3e6:	018b      	lsls	r3, r1, #6
 800d3e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d3ec:	0182      	lsls	r2, r0, #6
 800d3ee:	1a12      	subs	r2, r2, r0
 800d3f0:	eb63 0301 	sbc.w	r3, r3, r1
 800d3f4:	f04f 0000 	mov.w	r0, #0
 800d3f8:	f04f 0100 	mov.w	r1, #0
 800d3fc:	00d9      	lsls	r1, r3, #3
 800d3fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d402:	00d0      	lsls	r0, r2, #3
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	eb12 0208 	adds.w	r2, r2, r8
 800d40c:	eb43 0309 	adc.w	r3, r3, r9
 800d410:	f04f 0000 	mov.w	r0, #0
 800d414:	f04f 0100 	mov.w	r1, #0
 800d418:	0259      	lsls	r1, r3, #9
 800d41a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d41e:	0250      	lsls	r0, r2, #9
 800d420:	4602      	mov	r2, r0
 800d422:	460b      	mov	r3, r1
 800d424:	4610      	mov	r0, r2
 800d426:	4619      	mov	r1, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	461a      	mov	r2, r3
 800d42c:	f04f 0300 	mov.w	r3, #0
 800d430:	f7f3 fc2a 	bl	8000c88 <__aeabi_uldivmod>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4613      	mov	r3, r2
 800d43a:	60fb      	str	r3, [r7, #12]
 800d43c:	e04a      	b.n	800d4d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d43e:	4b31      	ldr	r3, [pc, #196]	; (800d504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	099b      	lsrs	r3, r3, #6
 800d444:	461a      	mov	r2, r3
 800d446:	f04f 0300 	mov.w	r3, #0
 800d44a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d44e:	f04f 0100 	mov.w	r1, #0
 800d452:	ea02 0400 	and.w	r4, r2, r0
 800d456:	ea03 0501 	and.w	r5, r3, r1
 800d45a:	4620      	mov	r0, r4
 800d45c:	4629      	mov	r1, r5
 800d45e:	f04f 0200 	mov.w	r2, #0
 800d462:	f04f 0300 	mov.w	r3, #0
 800d466:	014b      	lsls	r3, r1, #5
 800d468:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d46c:	0142      	lsls	r2, r0, #5
 800d46e:	4610      	mov	r0, r2
 800d470:	4619      	mov	r1, r3
 800d472:	1b00      	subs	r0, r0, r4
 800d474:	eb61 0105 	sbc.w	r1, r1, r5
 800d478:	f04f 0200 	mov.w	r2, #0
 800d47c:	f04f 0300 	mov.w	r3, #0
 800d480:	018b      	lsls	r3, r1, #6
 800d482:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d486:	0182      	lsls	r2, r0, #6
 800d488:	1a12      	subs	r2, r2, r0
 800d48a:	eb63 0301 	sbc.w	r3, r3, r1
 800d48e:	f04f 0000 	mov.w	r0, #0
 800d492:	f04f 0100 	mov.w	r1, #0
 800d496:	00d9      	lsls	r1, r3, #3
 800d498:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d49c:	00d0      	lsls	r0, r2, #3
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	1912      	adds	r2, r2, r4
 800d4a4:	eb45 0303 	adc.w	r3, r5, r3
 800d4a8:	f04f 0000 	mov.w	r0, #0
 800d4ac:	f04f 0100 	mov.w	r1, #0
 800d4b0:	0299      	lsls	r1, r3, #10
 800d4b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800d4b6:	0290      	lsls	r0, r2, #10
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4610      	mov	r0, r2
 800d4be:	4619      	mov	r1, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	f04f 0300 	mov.w	r3, #0
 800d4c8:	f7f3 fbde 	bl	8000c88 <__aeabi_uldivmod>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d4d4:	4b0b      	ldr	r3, [pc, #44]	; (800d504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	0c1b      	lsrs	r3, r3, #16
 800d4da:	f003 0303 	and.w	r3, r3, #3
 800d4de:	3301      	adds	r3, #1
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ec:	60bb      	str	r3, [r7, #8]
      break;
 800d4ee:	e002      	b.n	800d4f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d4f0:	4b05      	ldr	r3, [pc, #20]	; (800d508 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800d4f2:	60bb      	str	r3, [r7, #8]
      break;
 800d4f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d4f6:	68bb      	ldr	r3, [r7, #8]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d502:	bf00      	nop
 800d504:	40023800 	.word	0x40023800
 800d508:	00f42400 	.word	0x00f42400
 800d50c:	007a1200 	.word	0x007a1200

0800d510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d510:	b480      	push	{r7}
 800d512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d514:	4b03      	ldr	r3, [pc, #12]	; (800d524 <HAL_RCC_GetHCLKFreq+0x14>)
 800d516:	681b      	ldr	r3, [r3, #0]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	2000408c 	.word	0x2000408c

0800d528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d52c:	f7ff fff0 	bl	800d510 <HAL_RCC_GetHCLKFreq>
 800d530:	4602      	mov	r2, r0
 800d532:	4b05      	ldr	r3, [pc, #20]	; (800d548 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	0a9b      	lsrs	r3, r3, #10
 800d538:	f003 0307 	and.w	r3, r3, #7
 800d53c:	4903      	ldr	r1, [pc, #12]	; (800d54c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d53e:	5ccb      	ldrb	r3, [r1, r3]
 800d540:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d544:	4618      	mov	r0, r3
 800d546:	bd80      	pop	{r7, pc}
 800d548:	40023800 	.word	0x40023800
 800d54c:	0801be10 	.word	0x0801be10

0800d550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d554:	f7ff ffdc 	bl	800d510 <HAL_RCC_GetHCLKFreq>
 800d558:	4602      	mov	r2, r0
 800d55a:	4b05      	ldr	r3, [pc, #20]	; (800d570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	0b5b      	lsrs	r3, r3, #13
 800d560:	f003 0307 	and.w	r3, r3, #7
 800d564:	4903      	ldr	r1, [pc, #12]	; (800d574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d566:	5ccb      	ldrb	r3, [r1, r3]
 800d568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	40023800 	.word	0x40023800
 800d574:	0801be10 	.word	0x0801be10

0800d578 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	220f      	movs	r2, #15
 800d586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d588:	4b12      	ldr	r3, [pc, #72]	; (800d5d4 <HAL_RCC_GetClockConfig+0x5c>)
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	f003 0203 	and.w	r2, r3, #3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d594:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <HAL_RCC_GetClockConfig+0x5c>)
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d5a0:	4b0c      	ldr	r3, [pc, #48]	; (800d5d4 <HAL_RCC_GetClockConfig+0x5c>)
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d5ac:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <HAL_RCC_GetClockConfig+0x5c>)
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	08db      	lsrs	r3, r3, #3
 800d5b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d5ba:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <HAL_RCC_GetClockConfig+0x60>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f003 020f 	and.w	r2, r3, #15
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	601a      	str	r2, [r3, #0]
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	40023800 	.word	0x40023800
 800d5d8:	40023c00 	.word	0x40023c00

0800d5dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e01d      	b.n	800d62a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d106      	bne.n	800d608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7fd f99a 	bl	800a93c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	3304      	adds	r3, #4
 800d618:	4619      	mov	r1, r3
 800d61a:	4610      	mov	r0, r2
 800d61c:	f000 fa22 	bl	800da64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d628:	2300      	movs	r3, #0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d632:	b480      	push	{r7}
 800d634:	b085      	sub	sp, #20
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68da      	ldr	r2, [r3, #12]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f042 0201 	orr.w	r2, r2, #1
 800d648:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	f003 0307 	and.w	r3, r3, #7
 800d654:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b06      	cmp	r3, #6
 800d65a:	d007      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f042 0201 	orr.w	r2, r2, #1
 800d66a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	f003 0302 	and.w	r3, r3, #2
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d122      	bne.n	800d6d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	f003 0302 	and.w	r3, r3, #2
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d11b      	bne.n	800d6d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f06f 0202 	mvn.w	r2, #2
 800d6a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	f003 0303 	and.w	r3, r3, #3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d003      	beq.n	800d6c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f9b2 	bl	800da26 <HAL_TIM_IC_CaptureCallback>
 800d6c2:	e005      	b.n	800d6d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f9a4 	bl	800da12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f9b5 	bl	800da3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	f003 0304 	and.w	r3, r3, #4
 800d6e0:	2b04      	cmp	r3, #4
 800d6e2:	d122      	bne.n	800d72a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	f003 0304 	and.w	r3, r3, #4
 800d6ee:	2b04      	cmp	r3, #4
 800d6f0:	d11b      	bne.n	800d72a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f06f 0204 	mvn.w	r2, #4
 800d6fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2202      	movs	r2, #2
 800d700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d003      	beq.n	800d718 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f988 	bl	800da26 <HAL_TIM_IC_CaptureCallback>
 800d716:	e005      	b.n	800d724 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f97a 	bl	800da12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f98b 	bl	800da3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	f003 0308 	and.w	r3, r3, #8
 800d734:	2b08      	cmp	r3, #8
 800d736:	d122      	bne.n	800d77e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	f003 0308 	and.w	r3, r3, #8
 800d742:	2b08      	cmp	r3, #8
 800d744:	d11b      	bne.n	800d77e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f06f 0208 	mvn.w	r2, #8
 800d74e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2204      	movs	r2, #4
 800d754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	69db      	ldr	r3, [r3, #28]
 800d75c:	f003 0303 	and.w	r3, r3, #3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d003      	beq.n	800d76c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 f95e 	bl	800da26 <HAL_TIM_IC_CaptureCallback>
 800d76a:	e005      	b.n	800d778 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f950 	bl	800da12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f961 	bl	800da3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	691b      	ldr	r3, [r3, #16]
 800d784:	f003 0310 	and.w	r3, r3, #16
 800d788:	2b10      	cmp	r3, #16
 800d78a:	d122      	bne.n	800d7d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	f003 0310 	and.w	r3, r3, #16
 800d796:	2b10      	cmp	r3, #16
 800d798:	d11b      	bne.n	800d7d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f06f 0210 	mvn.w	r2, #16
 800d7a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2208      	movs	r2, #8
 800d7a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	69db      	ldr	r3, [r3, #28]
 800d7b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d003      	beq.n	800d7c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f934 	bl	800da26 <HAL_TIM_IC_CaptureCallback>
 800d7be:	e005      	b.n	800d7cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f926 	bl	800da12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f937 	bl	800da3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d10e      	bne.n	800d7fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d107      	bne.n	800d7fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f06f 0201 	mvn.w	r2, #1
 800d7f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7f8 f8c5 	bl	8005988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d808:	2b80      	cmp	r3, #128	; 0x80
 800d80a:	d10e      	bne.n	800d82a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d816:	2b80      	cmp	r3, #128	; 0x80
 800d818:	d107      	bne.n	800d82a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fadd 	bl	800dde4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d834:	2b40      	cmp	r3, #64	; 0x40
 800d836:	d10e      	bne.n	800d856 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d842:	2b40      	cmp	r3, #64	; 0x40
 800d844:	d107      	bne.n	800d856 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d84e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 f8fc 	bl	800da4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	f003 0320 	and.w	r3, r3, #32
 800d860:	2b20      	cmp	r3, #32
 800d862:	d10e      	bne.n	800d882 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	f003 0320 	and.w	r3, r3, #32
 800d86e:	2b20      	cmp	r3, #32
 800d870:	d107      	bne.n	800d882 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f06f 0220 	mvn.w	r2, #32
 800d87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 faa7 	bl	800ddd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d101      	bne.n	800d8a2 <HAL_TIM_ConfigClockSource+0x18>
 800d89e:	2302      	movs	r3, #2
 800d8a0:	e0b3      	b.n	800da0a <HAL_TIM_ConfigClockSource+0x180>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d8c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d8c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8da:	d03e      	beq.n	800d95a <HAL_TIM_ConfigClockSource+0xd0>
 800d8dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8e0:	f200 8087 	bhi.w	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d8e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8e8:	f000 8085 	beq.w	800d9f6 <HAL_TIM_ConfigClockSource+0x16c>
 800d8ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8f0:	d87f      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d8f2:	2b70      	cmp	r3, #112	; 0x70
 800d8f4:	d01a      	beq.n	800d92c <HAL_TIM_ConfigClockSource+0xa2>
 800d8f6:	2b70      	cmp	r3, #112	; 0x70
 800d8f8:	d87b      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d8fa:	2b60      	cmp	r3, #96	; 0x60
 800d8fc:	d050      	beq.n	800d9a0 <HAL_TIM_ConfigClockSource+0x116>
 800d8fe:	2b60      	cmp	r3, #96	; 0x60
 800d900:	d877      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d902:	2b50      	cmp	r3, #80	; 0x50
 800d904:	d03c      	beq.n	800d980 <HAL_TIM_ConfigClockSource+0xf6>
 800d906:	2b50      	cmp	r3, #80	; 0x50
 800d908:	d873      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d90a:	2b40      	cmp	r3, #64	; 0x40
 800d90c:	d058      	beq.n	800d9c0 <HAL_TIM_ConfigClockSource+0x136>
 800d90e:	2b40      	cmp	r3, #64	; 0x40
 800d910:	d86f      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d912:	2b30      	cmp	r3, #48	; 0x30
 800d914:	d064      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x156>
 800d916:	2b30      	cmp	r3, #48	; 0x30
 800d918:	d86b      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d91a:	2b20      	cmp	r3, #32
 800d91c:	d060      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x156>
 800d91e:	2b20      	cmp	r3, #32
 800d920:	d867      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
 800d922:	2b00      	cmp	r3, #0
 800d924:	d05c      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x156>
 800d926:	2b10      	cmp	r3, #16
 800d928:	d05a      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d92a:	e062      	b.n	800d9f2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	6899      	ldr	r1, [r3, #8]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	f000 f9ac 	bl	800dc98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d94e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	609a      	str	r2, [r3, #8]
      break;
 800d958:	e04e      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6818      	ldr	r0, [r3, #0]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	6899      	ldr	r1, [r3, #8]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	f000 f995 	bl	800dc98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	689a      	ldr	r2, [r3, #8]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d97c:	609a      	str	r2, [r3, #8]
      break;
 800d97e:	e03b      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	6859      	ldr	r1, [r3, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	461a      	mov	r2, r3
 800d98e:	f000 f909 	bl	800dba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2150      	movs	r1, #80	; 0x50
 800d998:	4618      	mov	r0, r3
 800d99a:	f000 f962 	bl	800dc62 <TIM_ITRx_SetConfig>
      break;
 800d99e:	e02b      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6818      	ldr	r0, [r3, #0]
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	6859      	ldr	r1, [r3, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	f000 f928 	bl	800dc02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2160      	movs	r1, #96	; 0x60
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 f952 	bl	800dc62 <TIM_ITRx_SetConfig>
      break;
 800d9be:	e01b      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	6859      	ldr	r1, [r3, #4]
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	f000 f8e9 	bl	800dba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2140      	movs	r1, #64	; 0x40
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f000 f942 	bl	800dc62 <TIM_ITRx_SetConfig>
      break;
 800d9de:	e00b      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f000 f939 	bl	800dc62 <TIM_ITRx_SetConfig>
      break;
 800d9f0:	e002      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d9f2:	bf00      	nop
 800d9f4:	e000      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d9f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da12:	b480      	push	{r7}
 800da14:	b083      	sub	sp, #12
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da2e:	bf00      	nop
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da42:	bf00      	nop
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da4e:	b480      	push	{r7}
 800da50:	b083      	sub	sp, #12
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da56:	bf00      	nop
 800da58:	370c      	adds	r7, #12
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
	...

0800da64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a40      	ldr	r2, [pc, #256]	; (800db78 <TIM_Base_SetConfig+0x114>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d013      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da82:	d00f      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a3d      	ldr	r2, [pc, #244]	; (800db7c <TIM_Base_SetConfig+0x118>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d00b      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a3c      	ldr	r2, [pc, #240]	; (800db80 <TIM_Base_SetConfig+0x11c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d007      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a3b      	ldr	r2, [pc, #236]	; (800db84 <TIM_Base_SetConfig+0x120>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d003      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a3a      	ldr	r2, [pc, #232]	; (800db88 <TIM_Base_SetConfig+0x124>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d108      	bne.n	800dab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a2f      	ldr	r2, [pc, #188]	; (800db78 <TIM_Base_SetConfig+0x114>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d02b      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dac4:	d027      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a2c      	ldr	r2, [pc, #176]	; (800db7c <TIM_Base_SetConfig+0x118>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d023      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a2b      	ldr	r2, [pc, #172]	; (800db80 <TIM_Base_SetConfig+0x11c>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d01f      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a2a      	ldr	r2, [pc, #168]	; (800db84 <TIM_Base_SetConfig+0x120>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d01b      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a29      	ldr	r2, [pc, #164]	; (800db88 <TIM_Base_SetConfig+0x124>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d017      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a28      	ldr	r2, [pc, #160]	; (800db8c <TIM_Base_SetConfig+0x128>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d013      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a27      	ldr	r2, [pc, #156]	; (800db90 <TIM_Base_SetConfig+0x12c>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d00f      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a26      	ldr	r2, [pc, #152]	; (800db94 <TIM_Base_SetConfig+0x130>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d00b      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a25      	ldr	r2, [pc, #148]	; (800db98 <TIM_Base_SetConfig+0x134>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d007      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a24      	ldr	r2, [pc, #144]	; (800db9c <TIM_Base_SetConfig+0x138>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d003      	beq.n	800db16 <TIM_Base_SetConfig+0xb2>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a23      	ldr	r2, [pc, #140]	; (800dba0 <TIM_Base_SetConfig+0x13c>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d108      	bne.n	800db28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	4313      	orrs	r3, r2
 800db26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	695b      	ldr	r3, [r3, #20]
 800db32:	4313      	orrs	r3, r2
 800db34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	689a      	ldr	r2, [r3, #8]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a0a      	ldr	r2, [pc, #40]	; (800db78 <TIM_Base_SetConfig+0x114>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d003      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a0c      	ldr	r2, [pc, #48]	; (800db88 <TIM_Base_SetConfig+0x124>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d103      	bne.n	800db64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	691a      	ldr	r2, [r3, #16]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	615a      	str	r2, [r3, #20]
}
 800db6a:	bf00      	nop
 800db6c:	3714      	adds	r7, #20
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	40010000 	.word	0x40010000
 800db7c:	40000400 	.word	0x40000400
 800db80:	40000800 	.word	0x40000800
 800db84:	40000c00 	.word	0x40000c00
 800db88:	40010400 	.word	0x40010400
 800db8c:	40014000 	.word	0x40014000
 800db90:	40014400 	.word	0x40014400
 800db94:	40014800 	.word	0x40014800
 800db98:	40001800 	.word	0x40001800
 800db9c:	40001c00 	.word	0x40001c00
 800dba0:	40002000 	.word	0x40002000

0800dba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6a1b      	ldr	r3, [r3, #32]
 800dbb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	f023 0201 	bic.w	r2, r3, #1
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	699b      	ldr	r3, [r3, #24]
 800dbc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	011b      	lsls	r3, r3, #4
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f023 030a 	bic.w	r3, r3, #10
 800dbe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbe2:	697a      	ldr	r2, [r7, #20]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	621a      	str	r2, [r3, #32]
}
 800dbf6:	bf00      	nop
 800dbf8:	371c      	adds	r7, #28
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr

0800dc02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc02:	b480      	push	{r7}
 800dc04:	b087      	sub	sp, #28
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6a1b      	ldr	r3, [r3, #32]
 800dc12:	f023 0210 	bic.w	r2, r3, #16
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	699b      	ldr	r3, [r3, #24]
 800dc1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6a1b      	ldr	r3, [r3, #32]
 800dc24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	031b      	lsls	r3, r3, #12
 800dc32:	697a      	ldr	r2, [r7, #20]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	011b      	lsls	r3, r3, #4
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	697a      	ldr	r2, [r7, #20]
 800dc4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	621a      	str	r2, [r3, #32]
}
 800dc56:	bf00      	nop
 800dc58:	371c      	adds	r7, #28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b085      	sub	sp, #20
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	f043 0307 	orr.w	r3, r3, #7
 800dc84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	609a      	str	r2, [r3, #8]
}
 800dc8c:	bf00      	nop
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b087      	sub	sp, #28
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dcb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	021a      	lsls	r2, r3, #8
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	431a      	orrs	r2, r3
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	697a      	ldr	r2, [r7, #20]
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	609a      	str	r2, [r3, #8]
}
 800dccc:	bf00      	nop
 800dcce:	371c      	adds	r7, #28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d101      	bne.n	800dcf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcec:	2302      	movs	r3, #2
 800dcee:	e05a      	b.n	800dda6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2202      	movs	r2, #2
 800dcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a21      	ldr	r2, [pc, #132]	; (800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d022      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd3c:	d01d      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a1d      	ldr	r2, [pc, #116]	; (800ddb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d018      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a1b      	ldr	r2, [pc, #108]	; (800ddbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d013      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a1a      	ldr	r2, [pc, #104]	; (800ddc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d00e      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a18      	ldr	r2, [pc, #96]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d009      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a17      	ldr	r2, [pc, #92]	; (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d004      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a15      	ldr	r2, [pc, #84]	; (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d10c      	bne.n	800dd94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3714      	adds	r7, #20
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	40010000 	.word	0x40010000
 800ddb8:	40000400 	.word	0x40000400
 800ddbc:	40000800 	.word	0x40000800
 800ddc0:	40000c00 	.word	0x40000c00
 800ddc4:	40010400 	.word	0x40010400
 800ddc8:	40014000 	.word	0x40014000
 800ddcc:	40001800 	.word	0x40001800

0800ddd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d101      	bne.n	800de0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e03f      	b.n	800de8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	d106      	bne.n	800de24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7fc fdf2 	bl	800aa08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2224      	movs	r2, #36	; 0x24
 800de28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68da      	ldr	r2, [r3, #12]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fb6b 	bl	800e518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	691a      	ldr	r2, [r3, #16]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	695a      	ldr	r2, [r3, #20]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	68da      	ldr	r2, [r3, #12]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2220      	movs	r2, #32
 800de7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2220      	movs	r2, #32
 800de84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
	...

0800de94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	4613      	mov	r3, r2
 800dea0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b20      	cmp	r3, #32
 800deac:	d153      	bne.n	800df56 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <HAL_UART_Transmit_DMA+0x26>
 800deb4:	88fb      	ldrh	r3, [r7, #6]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e04c      	b.n	800df58 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d101      	bne.n	800decc <HAL_UART_Transmit_DMA+0x38>
 800dec8:	2302      	movs	r3, #2
 800deca:	e045      	b.n	800df58 <HAL_UART_Transmit_DMA+0xc4>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2201      	movs	r2, #1
 800ded0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	88fa      	ldrh	r2, [r7, #6]
 800dede:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	88fa      	ldrh	r2, [r7, #6]
 800dee4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2221      	movs	r2, #33	; 0x21
 800def0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def8:	4a19      	ldr	r2, [pc, #100]	; (800df60 <HAL_UART_Transmit_DMA+0xcc>)
 800defa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df00:	4a18      	ldr	r2, [pc, #96]	; (800df64 <HAL_UART_Transmit_DMA+0xd0>)
 800df02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df08:	4a17      	ldr	r2, [pc, #92]	; (800df68 <HAL_UART_Transmit_DMA+0xd4>)
 800df0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df10:	2200      	movs	r2, #0
 800df12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800df14:	f107 0308 	add.w	r3, r7, #8
 800df18:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	6819      	ldr	r1, [r3, #0]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3304      	adds	r3, #4
 800df28:	461a      	mov	r2, r3
 800df2a:	88fb      	ldrh	r3, [r7, #6]
 800df2c:	f7fd f836 	bl	800af9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	695a      	ldr	r2, [r3, #20]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800df50:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	e000      	b.n	800df58 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800df56:	2302      	movs	r3, #2
  }
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3718      	adds	r7, #24
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	0800e1a9 	.word	0x0800e1a9
 800df64:	0800e1fb 	.word	0x0800e1fb
 800df68:	0800e217 	.word	0x0800e217

0800df6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800df8c:	2300      	movs	r3, #0
 800df8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800df90:	2300      	movs	r3, #0
 800df92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	f003 030f 	and.w	r3, r3, #15
 800df9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10d      	bne.n	800dfbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	f003 0320 	and.w	r3, r3, #32
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d008      	beq.n	800dfbe <HAL_UART_IRQHandler+0x52>
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	f003 0320 	and.w	r3, r3, #32
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d003      	beq.n	800dfbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fa2d 	bl	800e416 <UART_Receive_IT>
      return;
 800dfbc:	e0d0      	b.n	800e160 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f000 80b0 	beq.w	800e126 <HAL_UART_IRQHandler+0x1ba>
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d105      	bne.n	800dfdc <HAL_UART_IRQHandler+0x70>
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f000 80a5 	beq.w	800e126 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00a      	beq.n	800dffc <HAL_UART_IRQHandler+0x90>
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d005      	beq.n	800dffc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff4:	f043 0201 	orr.w	r2, r3, #1
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	f003 0304 	and.w	r3, r3, #4
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <HAL_UART_IRQHandler+0xb0>
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e014:	f043 0202 	orr.w	r2, r3, #2
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	f003 0302 	and.w	r3, r3, #2
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00a      	beq.n	800e03c <HAL_UART_IRQHandler+0xd0>
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e034:	f043 0204 	orr.w	r2, r3, #4
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	f003 0308 	and.w	r3, r3, #8
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00f      	beq.n	800e066 <HAL_UART_IRQHandler+0xfa>
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	f003 0320 	and.w	r3, r3, #32
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d104      	bne.n	800e05a <HAL_UART_IRQHandler+0xee>
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	f003 0301 	and.w	r3, r3, #1
 800e056:	2b00      	cmp	r3, #0
 800e058:	d005      	beq.n	800e066 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e05e:	f043 0208 	orr.w	r2, r3, #8
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d077      	beq.n	800e15e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	f003 0320 	and.w	r3, r3, #32
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <HAL_UART_IRQHandler+0x11c>
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	f003 0320 	and.w	r3, r3, #32
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 f9c7 	bl	800e416 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e092:	2b40      	cmp	r3, #64	; 0x40
 800e094:	bf0c      	ite	eq
 800e096:	2301      	moveq	r3, #1
 800e098:	2300      	movne	r3, #0
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a2:	f003 0308 	and.w	r3, r3, #8
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <HAL_UART_IRQHandler+0x144>
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d031      	beq.n	800e114 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 f910 	bl	800e2d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	695b      	ldr	r3, [r3, #20]
 800e0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c0:	2b40      	cmp	r3, #64	; 0x40
 800e0c2:	d123      	bne.n	800e10c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	695a      	ldr	r2, [r3, #20]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d013      	beq.n	800e104 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e0:	4a21      	ldr	r2, [pc, #132]	; (800e168 <HAL_UART_IRQHandler+0x1fc>)
 800e0e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fc ffaf 	bl	800b04c <HAL_DMA_Abort_IT>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d016      	beq.n	800e122 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e0fe:	4610      	mov	r0, r2
 800e100:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e102:	e00e      	b.n	800e122 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 f845 	bl	800e194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e10a:	e00a      	b.n	800e122 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f841 	bl	800e194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e112:	e006      	b.n	800e122 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 f83d 	bl	800e194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e120:	e01d      	b.n	800e15e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e122:	bf00      	nop
    return;
 800e124:	e01b      	b.n	800e15e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d008      	beq.n	800e142 <HAL_UART_IRQHandler+0x1d6>
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f8fd 	bl	800e33a <UART_Transmit_IT>
    return;
 800e140:	e00e      	b.n	800e160 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d009      	beq.n	800e160 <HAL_UART_IRQHandler+0x1f4>
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d004      	beq.n	800e160 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f945 	bl	800e3e6 <UART_EndTransmit_IT>
    return;
 800e15c:	e000      	b.n	800e160 <HAL_UART_IRQHandler+0x1f4>
    return;
 800e15e:	bf00      	nop
  }
}
 800e160:	3720      	adds	r7, #32
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	0800e313 	.word	0x0800e313

0800e16c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d113      	bne.n	800e1ec <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	695a      	ldr	r2, [r3, #20]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1d8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68da      	ldr	r2, [r3, #12]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1e8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1ea:	e002      	b.n	800e1f2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7fc fc8d 	bl	800ab0c <HAL_UART_TxCpltCallback>
}
 800e1f2:	bf00      	nop
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b084      	sub	sp, #16
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e206:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f7ff ffaf 	bl	800e16c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b084      	sub	sp, #16
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e21e:	2300      	movs	r3, #0
 800e220:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e226:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e232:	2b80      	cmp	r3, #128	; 0x80
 800e234:	bf0c      	ite	eq
 800e236:	2301      	moveq	r3, #1
 800e238:	2300      	movne	r3, #0
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b21      	cmp	r3, #33	; 0x21
 800e248:	d108      	bne.n	800e25c <UART_DMAError+0x46>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d005      	beq.n	800e25c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2200      	movs	r2, #0
 800e254:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e256:	68b8      	ldr	r0, [r7, #8]
 800e258:	f000 f827 	bl	800e2aa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e266:	2b40      	cmp	r3, #64	; 0x40
 800e268:	bf0c      	ite	eq
 800e26a:	2301      	moveq	r3, #1
 800e26c:	2300      	movne	r3, #0
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b22      	cmp	r3, #34	; 0x22
 800e27c:	d108      	bne.n	800e290 <UART_DMAError+0x7a>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2200      	movs	r2, #0
 800e288:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e28a:	68b8      	ldr	r0, [r7, #8]
 800e28c:	f000 f823 	bl	800e2d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e294:	f043 0210 	orr.w	r2, r3, #16
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e29c:	68b8      	ldr	r0, [r7, #8]
 800e29e:	f7ff ff79 	bl	800e194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2a2:	bf00      	nop
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	b083      	sub	sp, #12
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e2c0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e2ca:	bf00      	nop
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b083      	sub	sp, #12
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68da      	ldr	r2, [r3, #12]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e2ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	695a      	ldr	r2, [r3, #20]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f022 0201 	bic.w	r2, r2, #1
 800e2fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2220      	movs	r2, #32
 800e302:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e306:	bf00      	nop
 800e308:	370c      	adds	r7, #12
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr

0800e312 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b084      	sub	sp, #16
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e31e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2200      	movs	r2, #0
 800e324:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f7ff ff31 	bl	800e194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e332:	bf00      	nop
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b085      	sub	sp, #20
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b21      	cmp	r3, #33	; 0x21
 800e34c:	d144      	bne.n	800e3d8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e356:	d11a      	bne.n	800e38e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a1b      	ldr	r3, [r3, #32]
 800e35c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e36c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d105      	bne.n	800e382 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	1c9a      	adds	r2, r3, #2
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	621a      	str	r2, [r3, #32]
 800e380:	e00e      	b.n	800e3a0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a1b      	ldr	r3, [r3, #32]
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	621a      	str	r2, [r3, #32]
 800e38c:	e008      	b.n	800e3a0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	1c59      	adds	r1, r3, #1
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	6211      	str	r1, [r2, #32]
 800e398:	781a      	ldrb	r2, [r3, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10f      	bne.n	800e3d4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68da      	ldr	r2, [r3, #12]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	68da      	ldr	r2, [r3, #12]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e000      	b.n	800e3da <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e3d8:	2302      	movs	r3, #2
  }
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3714      	adds	r7, #20
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr

0800e3e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b082      	sub	sp, #8
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68da      	ldr	r2, [r3, #12]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2220      	movs	r2, #32
 800e402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7fc fb80 	bl	800ab0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e424:	b2db      	uxtb	r3, r3
 800e426:	2b22      	cmp	r3, #34	; 0x22
 800e428:	d171      	bne.n	800e50e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e432:	d123      	bne.n	800e47c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e438:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	691b      	ldr	r3, [r3, #16]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d10e      	bne.n	800e460 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e44e:	b29a      	uxth	r2, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e458:	1c9a      	adds	r2, r3, #2
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	629a      	str	r2, [r3, #40]	; 0x28
 800e45e:	e029      	b.n	800e4b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	b29b      	uxth	r3, r3
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e474:	1c5a      	adds	r2, r3, #1
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	629a      	str	r2, [r3, #40]	; 0x28
 800e47a:	e01b      	b.n	800e4b4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10a      	bne.n	800e49a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6858      	ldr	r0, [r3, #4]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48e:	1c59      	adds	r1, r3, #1
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	6291      	str	r1, [r2, #40]	; 0x28
 800e494:	b2c2      	uxtb	r2, r0
 800e496:	701a      	strb	r2, [r3, #0]
 800e498:	e00c      	b.n	800e4b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a6:	1c58      	adds	r0, r3, #1
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	6288      	str	r0, [r1, #40]	; 0x28
 800e4ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e4b0:	b2d2      	uxtb	r2, r2
 800e4b2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d120      	bne.n	800e50a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68da      	ldr	r2, [r3, #12]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f022 0220 	bic.w	r2, r2, #32
 800e4d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68da      	ldr	r2, [r3, #12]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e4e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	695a      	ldr	r2, [r3, #20]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f022 0201 	bic.w	r2, r2, #1
 800e4f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7ff fe3d 	bl	800e180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e506:	2300      	movs	r3, #0
 800e508:	e002      	b.n	800e510 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	e000      	b.n	800e510 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e50e:	2302      	movs	r3, #2
  }
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	b0bd      	sub	sp, #244	; 0xf4
 800e51e:	af00      	add	r7, sp, #0
 800e520:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e534:	68d9      	ldr	r1, [r3, #12]
 800e536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	ea40 0301 	orr.w	r3, r0, r1
 800e540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e546:	689a      	ldr	r2, [r3, #8]
 800e548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	431a      	orrs	r2, r3
 800e550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e554:	695b      	ldr	r3, [r3, #20]
 800e556:	431a      	orrs	r2, r3
 800e558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e55c:	69db      	ldr	r3, [r3, #28]
 800e55e:	4313      	orrs	r3, r2
 800e560:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800e564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e570:	f021 010c 	bic.w	r1, r1, #12
 800e574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e57e:	430b      	orrs	r3, r1
 800e580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e592:	6999      	ldr	r1, [r3, #24]
 800e594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	ea40 0301 	orr.w	r3, r0, r1
 800e59e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5a4:	69db      	ldr	r3, [r3, #28]
 800e5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5aa:	f040 81a5 	bne.w	800e8f8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	4bcd      	ldr	r3, [pc, #820]	; (800e8ec <UART_SetConfig+0x3d4>)
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d006      	beq.n	800e5c8 <UART_SetConfig+0xb0>
 800e5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	4bcb      	ldr	r3, [pc, #812]	; (800e8f0 <UART_SetConfig+0x3d8>)
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	f040 80cb 	bne.w	800e75e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e5c8:	f7fe ffc2 	bl	800d550 <HAL_RCC_GetPCLK2Freq>
 800e5cc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e5d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e5d4:	461c      	mov	r4, r3
 800e5d6:	f04f 0500 	mov.w	r5, #0
 800e5da:	4622      	mov	r2, r4
 800e5dc:	462b      	mov	r3, r5
 800e5de:	1891      	adds	r1, r2, r2
 800e5e0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e5e4:	415b      	adcs	r3, r3
 800e5e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e5ea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e5ee:	1912      	adds	r2, r2, r4
 800e5f0:	eb45 0303 	adc.w	r3, r5, r3
 800e5f4:	f04f 0000 	mov.w	r0, #0
 800e5f8:	f04f 0100 	mov.w	r1, #0
 800e5fc:	00d9      	lsls	r1, r3, #3
 800e5fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e602:	00d0      	lsls	r0, r2, #3
 800e604:	4602      	mov	r2, r0
 800e606:	460b      	mov	r3, r1
 800e608:	1911      	adds	r1, r2, r4
 800e60a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e60e:	416b      	adcs	r3, r5
 800e610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	461a      	mov	r2, r3
 800e61c:	f04f 0300 	mov.w	r3, #0
 800e620:	1891      	adds	r1, r2, r2
 800e622:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e626:	415b      	adcs	r3, r3
 800e628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e62c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e630:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800e634:	f7f2 fb28 	bl	8000c88 <__aeabi_uldivmod>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	4bad      	ldr	r3, [pc, #692]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e63e:	fba3 2302 	umull	r2, r3, r3, r2
 800e642:	095b      	lsrs	r3, r3, #5
 800e644:	011e      	lsls	r6, r3, #4
 800e646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e64a:	461c      	mov	r4, r3
 800e64c:	f04f 0500 	mov.w	r5, #0
 800e650:	4622      	mov	r2, r4
 800e652:	462b      	mov	r3, r5
 800e654:	1891      	adds	r1, r2, r2
 800e656:	67b9      	str	r1, [r7, #120]	; 0x78
 800e658:	415b      	adcs	r3, r3
 800e65a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e65c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e660:	1912      	adds	r2, r2, r4
 800e662:	eb45 0303 	adc.w	r3, r5, r3
 800e666:	f04f 0000 	mov.w	r0, #0
 800e66a:	f04f 0100 	mov.w	r1, #0
 800e66e:	00d9      	lsls	r1, r3, #3
 800e670:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e674:	00d0      	lsls	r0, r2, #3
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	1911      	adds	r1, r2, r4
 800e67c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800e680:	416b      	adcs	r3, r5
 800e682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	461a      	mov	r2, r3
 800e68e:	f04f 0300 	mov.w	r3, #0
 800e692:	1891      	adds	r1, r2, r2
 800e694:	6739      	str	r1, [r7, #112]	; 0x70
 800e696:	415b      	adcs	r3, r3
 800e698:	677b      	str	r3, [r7, #116]	; 0x74
 800e69a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e69e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e6a2:	f7f2 faf1 	bl	8000c88 <__aeabi_uldivmod>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4b92      	ldr	r3, [pc, #584]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e6ac:	fba3 1302 	umull	r1, r3, r3, r2
 800e6b0:	095b      	lsrs	r3, r3, #5
 800e6b2:	2164      	movs	r1, #100	; 0x64
 800e6b4:	fb01 f303 	mul.w	r3, r1, r3
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	00db      	lsls	r3, r3, #3
 800e6bc:	3332      	adds	r3, #50	; 0x32
 800e6be:	4a8d      	ldr	r2, [pc, #564]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c4:	095b      	lsrs	r3, r3, #5
 800e6c6:	005b      	lsls	r3, r3, #1
 800e6c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e6cc:	441e      	add	r6, r3
 800e6ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f04f 0100 	mov.w	r1, #0
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	1894      	adds	r4, r2, r2
 800e6de:	66bc      	str	r4, [r7, #104]	; 0x68
 800e6e0:	415b      	adcs	r3, r3
 800e6e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e6e8:	1812      	adds	r2, r2, r0
 800e6ea:	eb41 0303 	adc.w	r3, r1, r3
 800e6ee:	f04f 0400 	mov.w	r4, #0
 800e6f2:	f04f 0500 	mov.w	r5, #0
 800e6f6:	00dd      	lsls	r5, r3, #3
 800e6f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e6fc:	00d4      	lsls	r4, r2, #3
 800e6fe:	4622      	mov	r2, r4
 800e700:	462b      	mov	r3, r5
 800e702:	1814      	adds	r4, r2, r0
 800e704:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e708:	414b      	adcs	r3, r1
 800e70a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	461a      	mov	r2, r3
 800e716:	f04f 0300 	mov.w	r3, #0
 800e71a:	1891      	adds	r1, r2, r2
 800e71c:	6639      	str	r1, [r7, #96]	; 0x60
 800e71e:	415b      	adcs	r3, r3
 800e720:	667b      	str	r3, [r7, #100]	; 0x64
 800e722:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e72a:	f7f2 faad 	bl	8000c88 <__aeabi_uldivmod>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4b70      	ldr	r3, [pc, #448]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e734:	fba3 1302 	umull	r1, r3, r3, r2
 800e738:	095b      	lsrs	r3, r3, #5
 800e73a:	2164      	movs	r1, #100	; 0x64
 800e73c:	fb01 f303 	mul.w	r3, r1, r3
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	00db      	lsls	r3, r3, #3
 800e744:	3332      	adds	r3, #50	; 0x32
 800e746:	4a6b      	ldr	r2, [pc, #428]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e748:	fba2 2303 	umull	r2, r3, r2, r3
 800e74c:	095b      	lsrs	r3, r3, #5
 800e74e:	f003 0207 	and.w	r2, r3, #7
 800e752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4432      	add	r2, r6
 800e75a:	609a      	str	r2, [r3, #8]
 800e75c:	e26d      	b.n	800ec3a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e75e:	f7fe fee3 	bl	800d528 <HAL_RCC_GetPCLK1Freq>
 800e762:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e76a:	461c      	mov	r4, r3
 800e76c:	f04f 0500 	mov.w	r5, #0
 800e770:	4622      	mov	r2, r4
 800e772:	462b      	mov	r3, r5
 800e774:	1891      	adds	r1, r2, r2
 800e776:	65b9      	str	r1, [r7, #88]	; 0x58
 800e778:	415b      	adcs	r3, r3
 800e77a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e77c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e780:	1912      	adds	r2, r2, r4
 800e782:	eb45 0303 	adc.w	r3, r5, r3
 800e786:	f04f 0000 	mov.w	r0, #0
 800e78a:	f04f 0100 	mov.w	r1, #0
 800e78e:	00d9      	lsls	r1, r3, #3
 800e790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e794:	00d0      	lsls	r0, r2, #3
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	1911      	adds	r1, r2, r4
 800e79c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800e7a0:	416b      	adcs	r3, r5
 800e7a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	f04f 0300 	mov.w	r3, #0
 800e7b2:	1891      	adds	r1, r2, r2
 800e7b4:	6539      	str	r1, [r7, #80]	; 0x50
 800e7b6:	415b      	adcs	r3, r3
 800e7b8:	657b      	str	r3, [r7, #84]	; 0x54
 800e7ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e7be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800e7c2:	f7f2 fa61 	bl	8000c88 <__aeabi_uldivmod>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	4b4a      	ldr	r3, [pc, #296]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e7cc:	fba3 2302 	umull	r2, r3, r3, r2
 800e7d0:	095b      	lsrs	r3, r3, #5
 800e7d2:	011e      	lsls	r6, r3, #4
 800e7d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e7d8:	461c      	mov	r4, r3
 800e7da:	f04f 0500 	mov.w	r5, #0
 800e7de:	4622      	mov	r2, r4
 800e7e0:	462b      	mov	r3, r5
 800e7e2:	1891      	adds	r1, r2, r2
 800e7e4:	64b9      	str	r1, [r7, #72]	; 0x48
 800e7e6:	415b      	adcs	r3, r3
 800e7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e7ee:	1912      	adds	r2, r2, r4
 800e7f0:	eb45 0303 	adc.w	r3, r5, r3
 800e7f4:	f04f 0000 	mov.w	r0, #0
 800e7f8:	f04f 0100 	mov.w	r1, #0
 800e7fc:	00d9      	lsls	r1, r3, #3
 800e7fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e802:	00d0      	lsls	r0, r2, #3
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	1911      	adds	r1, r2, r4
 800e80a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800e80e:	416b      	adcs	r3, r5
 800e810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	461a      	mov	r2, r3
 800e81c:	f04f 0300 	mov.w	r3, #0
 800e820:	1891      	adds	r1, r2, r2
 800e822:	6439      	str	r1, [r7, #64]	; 0x40
 800e824:	415b      	adcs	r3, r3
 800e826:	647b      	str	r3, [r7, #68]	; 0x44
 800e828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e82c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800e830:	f7f2 fa2a 	bl	8000c88 <__aeabi_uldivmod>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4b2e      	ldr	r3, [pc, #184]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e83a:	fba3 1302 	umull	r1, r3, r3, r2
 800e83e:	095b      	lsrs	r3, r3, #5
 800e840:	2164      	movs	r1, #100	; 0x64
 800e842:	fb01 f303 	mul.w	r3, r1, r3
 800e846:	1ad3      	subs	r3, r2, r3
 800e848:	00db      	lsls	r3, r3, #3
 800e84a:	3332      	adds	r3, #50	; 0x32
 800e84c:	4a29      	ldr	r2, [pc, #164]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e84e:	fba2 2303 	umull	r2, r3, r2, r3
 800e852:	095b      	lsrs	r3, r3, #5
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e85a:	441e      	add	r6, r3
 800e85c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e860:	4618      	mov	r0, r3
 800e862:	f04f 0100 	mov.w	r1, #0
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	1894      	adds	r4, r2, r2
 800e86c:	63bc      	str	r4, [r7, #56]	; 0x38
 800e86e:	415b      	adcs	r3, r3
 800e870:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e872:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e876:	1812      	adds	r2, r2, r0
 800e878:	eb41 0303 	adc.w	r3, r1, r3
 800e87c:	f04f 0400 	mov.w	r4, #0
 800e880:	f04f 0500 	mov.w	r5, #0
 800e884:	00dd      	lsls	r5, r3, #3
 800e886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e88a:	00d4      	lsls	r4, r2, #3
 800e88c:	4622      	mov	r2, r4
 800e88e:	462b      	mov	r3, r5
 800e890:	1814      	adds	r4, r2, r0
 800e892:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800e896:	414b      	adcs	r3, r1
 800e898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	f04f 0300 	mov.w	r3, #0
 800e8a8:	1891      	adds	r1, r2, r2
 800e8aa:	6339      	str	r1, [r7, #48]	; 0x30
 800e8ac:	415b      	adcs	r3, r3
 800e8ae:	637b      	str	r3, [r7, #52]	; 0x34
 800e8b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e8b4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e8b8:	f7f2 f9e6 	bl	8000c88 <__aeabi_uldivmod>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	460b      	mov	r3, r1
 800e8c0:	4b0c      	ldr	r3, [pc, #48]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e8c2:	fba3 1302 	umull	r1, r3, r3, r2
 800e8c6:	095b      	lsrs	r3, r3, #5
 800e8c8:	2164      	movs	r1, #100	; 0x64
 800e8ca:	fb01 f303 	mul.w	r3, r1, r3
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	00db      	lsls	r3, r3, #3
 800e8d2:	3332      	adds	r3, #50	; 0x32
 800e8d4:	4a07      	ldr	r2, [pc, #28]	; (800e8f4 <UART_SetConfig+0x3dc>)
 800e8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e8da:	095b      	lsrs	r3, r3, #5
 800e8dc:	f003 0207 	and.w	r2, r3, #7
 800e8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4432      	add	r2, r6
 800e8e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e8ea:	e1a6      	b.n	800ec3a <UART_SetConfig+0x722>
 800e8ec:	40011000 	.word	0x40011000
 800e8f0:	40011400 	.word	0x40011400
 800e8f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	4bd1      	ldr	r3, [pc, #836]	; (800ec44 <UART_SetConfig+0x72c>)
 800e900:	429a      	cmp	r2, r3
 800e902:	d006      	beq.n	800e912 <UART_SetConfig+0x3fa>
 800e904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	4bcf      	ldr	r3, [pc, #828]	; (800ec48 <UART_SetConfig+0x730>)
 800e90c:	429a      	cmp	r2, r3
 800e90e:	f040 80ca 	bne.w	800eaa6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e912:	f7fe fe1d 	bl	800d550 <HAL_RCC_GetPCLK2Freq>
 800e916:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e91a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e91e:	461c      	mov	r4, r3
 800e920:	f04f 0500 	mov.w	r5, #0
 800e924:	4622      	mov	r2, r4
 800e926:	462b      	mov	r3, r5
 800e928:	1891      	adds	r1, r2, r2
 800e92a:	62b9      	str	r1, [r7, #40]	; 0x28
 800e92c:	415b      	adcs	r3, r3
 800e92e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e934:	1912      	adds	r2, r2, r4
 800e936:	eb45 0303 	adc.w	r3, r5, r3
 800e93a:	f04f 0000 	mov.w	r0, #0
 800e93e:	f04f 0100 	mov.w	r1, #0
 800e942:	00d9      	lsls	r1, r3, #3
 800e944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e948:	00d0      	lsls	r0, r2, #3
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	eb12 0a04 	adds.w	sl, r2, r4
 800e952:	eb43 0b05 	adc.w	fp, r3, r5
 800e956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	4618      	mov	r0, r3
 800e95e:	f04f 0100 	mov.w	r1, #0
 800e962:	f04f 0200 	mov.w	r2, #0
 800e966:	f04f 0300 	mov.w	r3, #0
 800e96a:	008b      	lsls	r3, r1, #2
 800e96c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e970:	0082      	lsls	r2, r0, #2
 800e972:	4650      	mov	r0, sl
 800e974:	4659      	mov	r1, fp
 800e976:	f7f2 f987 	bl	8000c88 <__aeabi_uldivmod>
 800e97a:	4602      	mov	r2, r0
 800e97c:	460b      	mov	r3, r1
 800e97e:	4bb3      	ldr	r3, [pc, #716]	; (800ec4c <UART_SetConfig+0x734>)
 800e980:	fba3 2302 	umull	r2, r3, r3, r2
 800e984:	095b      	lsrs	r3, r3, #5
 800e986:	011e      	lsls	r6, r3, #4
 800e988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e98c:	4618      	mov	r0, r3
 800e98e:	f04f 0100 	mov.w	r1, #0
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	1894      	adds	r4, r2, r2
 800e998:	623c      	str	r4, [r7, #32]
 800e99a:	415b      	adcs	r3, r3
 800e99c:	627b      	str	r3, [r7, #36]	; 0x24
 800e99e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e9a2:	1812      	adds	r2, r2, r0
 800e9a4:	eb41 0303 	adc.w	r3, r1, r3
 800e9a8:	f04f 0400 	mov.w	r4, #0
 800e9ac:	f04f 0500 	mov.w	r5, #0
 800e9b0:	00dd      	lsls	r5, r3, #3
 800e9b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e9b6:	00d4      	lsls	r4, r2, #3
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	462b      	mov	r3, r5
 800e9bc:	1814      	adds	r4, r2, r0
 800e9be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800e9c2:	414b      	adcs	r3, r1
 800e9c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f04f 0100 	mov.w	r1, #0
 800e9d4:	f04f 0200 	mov.w	r2, #0
 800e9d8:	f04f 0300 	mov.w	r3, #0
 800e9dc:	008b      	lsls	r3, r1, #2
 800e9de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e9e2:	0082      	lsls	r2, r0, #2
 800e9e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800e9e8:	f7f2 f94e 	bl	8000c88 <__aeabi_uldivmod>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4b96      	ldr	r3, [pc, #600]	; (800ec4c <UART_SetConfig+0x734>)
 800e9f2:	fba3 1302 	umull	r1, r3, r3, r2
 800e9f6:	095b      	lsrs	r3, r3, #5
 800e9f8:	2164      	movs	r1, #100	; 0x64
 800e9fa:	fb01 f303 	mul.w	r3, r1, r3
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	011b      	lsls	r3, r3, #4
 800ea02:	3332      	adds	r3, #50	; 0x32
 800ea04:	4a91      	ldr	r2, [pc, #580]	; (800ec4c <UART_SetConfig+0x734>)
 800ea06:	fba2 2303 	umull	r2, r3, r2, r3
 800ea0a:	095b      	lsrs	r3, r3, #5
 800ea0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea10:	441e      	add	r6, r3
 800ea12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ea16:	4618      	mov	r0, r3
 800ea18:	f04f 0100 	mov.w	r1, #0
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	1894      	adds	r4, r2, r2
 800ea22:	61bc      	str	r4, [r7, #24]
 800ea24:	415b      	adcs	r3, r3
 800ea26:	61fb      	str	r3, [r7, #28]
 800ea28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ea2c:	1812      	adds	r2, r2, r0
 800ea2e:	eb41 0303 	adc.w	r3, r1, r3
 800ea32:	f04f 0400 	mov.w	r4, #0
 800ea36:	f04f 0500 	mov.w	r5, #0
 800ea3a:	00dd      	lsls	r5, r3, #3
 800ea3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ea40:	00d4      	lsls	r4, r2, #3
 800ea42:	4622      	mov	r2, r4
 800ea44:	462b      	mov	r3, r5
 800ea46:	1814      	adds	r4, r2, r0
 800ea48:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800ea4c:	414b      	adcs	r3, r1
 800ea4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ea52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f04f 0100 	mov.w	r1, #0
 800ea5e:	f04f 0200 	mov.w	r2, #0
 800ea62:	f04f 0300 	mov.w	r3, #0
 800ea66:	008b      	lsls	r3, r1, #2
 800ea68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea6c:	0082      	lsls	r2, r0, #2
 800ea6e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ea72:	f7f2 f909 	bl	8000c88 <__aeabi_uldivmod>
 800ea76:	4602      	mov	r2, r0
 800ea78:	460b      	mov	r3, r1
 800ea7a:	4b74      	ldr	r3, [pc, #464]	; (800ec4c <UART_SetConfig+0x734>)
 800ea7c:	fba3 1302 	umull	r1, r3, r3, r2
 800ea80:	095b      	lsrs	r3, r3, #5
 800ea82:	2164      	movs	r1, #100	; 0x64
 800ea84:	fb01 f303 	mul.w	r3, r1, r3
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	011b      	lsls	r3, r3, #4
 800ea8c:	3332      	adds	r3, #50	; 0x32
 800ea8e:	4a6f      	ldr	r2, [pc, #444]	; (800ec4c <UART_SetConfig+0x734>)
 800ea90:	fba2 2303 	umull	r2, r3, r2, r3
 800ea94:	095b      	lsrs	r3, r3, #5
 800ea96:	f003 020f 	and.w	r2, r3, #15
 800ea9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4432      	add	r2, r6
 800eaa2:	609a      	str	r2, [r3, #8]
 800eaa4:	e0c9      	b.n	800ec3a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800eaa6:	f7fe fd3f 	bl	800d528 <HAL_RCC_GetPCLK1Freq>
 800eaaa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eaae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eab2:	461c      	mov	r4, r3
 800eab4:	f04f 0500 	mov.w	r5, #0
 800eab8:	4622      	mov	r2, r4
 800eaba:	462b      	mov	r3, r5
 800eabc:	1891      	adds	r1, r2, r2
 800eabe:	6139      	str	r1, [r7, #16]
 800eac0:	415b      	adcs	r3, r3
 800eac2:	617b      	str	r3, [r7, #20]
 800eac4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eac8:	1912      	adds	r2, r2, r4
 800eaca:	eb45 0303 	adc.w	r3, r5, r3
 800eace:	f04f 0000 	mov.w	r0, #0
 800ead2:	f04f 0100 	mov.w	r1, #0
 800ead6:	00d9      	lsls	r1, r3, #3
 800ead8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eadc:	00d0      	lsls	r0, r2, #3
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	eb12 0804 	adds.w	r8, r2, r4
 800eae6:	eb43 0905 	adc.w	r9, r3, r5
 800eaea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f04f 0100 	mov.w	r1, #0
 800eaf6:	f04f 0200 	mov.w	r2, #0
 800eafa:	f04f 0300 	mov.w	r3, #0
 800eafe:	008b      	lsls	r3, r1, #2
 800eb00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eb04:	0082      	lsls	r2, r0, #2
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f2 f8bd 	bl	8000c88 <__aeabi_uldivmod>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	4b4e      	ldr	r3, [pc, #312]	; (800ec4c <UART_SetConfig+0x734>)
 800eb14:	fba3 2302 	umull	r2, r3, r3, r2
 800eb18:	095b      	lsrs	r3, r3, #5
 800eb1a:	011e      	lsls	r6, r3, #4
 800eb1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eb20:	4618      	mov	r0, r3
 800eb22:	f04f 0100 	mov.w	r1, #0
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	1894      	adds	r4, r2, r2
 800eb2c:	60bc      	str	r4, [r7, #8]
 800eb2e:	415b      	adcs	r3, r3
 800eb30:	60fb      	str	r3, [r7, #12]
 800eb32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eb36:	1812      	adds	r2, r2, r0
 800eb38:	eb41 0303 	adc.w	r3, r1, r3
 800eb3c:	f04f 0400 	mov.w	r4, #0
 800eb40:	f04f 0500 	mov.w	r5, #0
 800eb44:	00dd      	lsls	r5, r3, #3
 800eb46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eb4a:	00d4      	lsls	r4, r2, #3
 800eb4c:	4622      	mov	r2, r4
 800eb4e:	462b      	mov	r3, r5
 800eb50:	1814      	adds	r4, r2, r0
 800eb52:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800eb56:	414b      	adcs	r3, r1
 800eb58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f04f 0100 	mov.w	r1, #0
 800eb68:	f04f 0200 	mov.w	r2, #0
 800eb6c:	f04f 0300 	mov.w	r3, #0
 800eb70:	008b      	lsls	r3, r1, #2
 800eb72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eb76:	0082      	lsls	r2, r0, #2
 800eb78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800eb7c:	f7f2 f884 	bl	8000c88 <__aeabi_uldivmod>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	4b31      	ldr	r3, [pc, #196]	; (800ec4c <UART_SetConfig+0x734>)
 800eb86:	fba3 1302 	umull	r1, r3, r3, r2
 800eb8a:	095b      	lsrs	r3, r3, #5
 800eb8c:	2164      	movs	r1, #100	; 0x64
 800eb8e:	fb01 f303 	mul.w	r3, r1, r3
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	3332      	adds	r3, #50	; 0x32
 800eb98:	4a2c      	ldr	r2, [pc, #176]	; (800ec4c <UART_SetConfig+0x734>)
 800eb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb9e:	095b      	lsrs	r3, r3, #5
 800eba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eba4:	441e      	add	r6, r3
 800eba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f04f 0100 	mov.w	r1, #0
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	1894      	adds	r4, r2, r2
 800ebb6:	603c      	str	r4, [r7, #0]
 800ebb8:	415b      	adcs	r3, r3
 800ebba:	607b      	str	r3, [r7, #4]
 800ebbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebc0:	1812      	adds	r2, r2, r0
 800ebc2:	eb41 0303 	adc.w	r3, r1, r3
 800ebc6:	f04f 0400 	mov.w	r4, #0
 800ebca:	f04f 0500 	mov.w	r5, #0
 800ebce:	00dd      	lsls	r5, r3, #3
 800ebd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ebd4:	00d4      	lsls	r4, r2, #3
 800ebd6:	4622      	mov	r2, r4
 800ebd8:	462b      	mov	r3, r5
 800ebda:	1814      	adds	r4, r2, r0
 800ebdc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800ebe0:	414b      	adcs	r3, r1
 800ebe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ebe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f04f 0100 	mov.w	r1, #0
 800ebf2:	f04f 0200 	mov.w	r2, #0
 800ebf6:	f04f 0300 	mov.w	r3, #0
 800ebfa:	008b      	lsls	r3, r1, #2
 800ebfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ec00:	0082      	lsls	r2, r0, #2
 800ec02:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ec06:	f7f2 f83f 	bl	8000c88 <__aeabi_uldivmod>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4b0f      	ldr	r3, [pc, #60]	; (800ec4c <UART_SetConfig+0x734>)
 800ec10:	fba3 1302 	umull	r1, r3, r3, r2
 800ec14:	095b      	lsrs	r3, r3, #5
 800ec16:	2164      	movs	r1, #100	; 0x64
 800ec18:	fb01 f303 	mul.w	r3, r1, r3
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	011b      	lsls	r3, r3, #4
 800ec20:	3332      	adds	r3, #50	; 0x32
 800ec22:	4a0a      	ldr	r2, [pc, #40]	; (800ec4c <UART_SetConfig+0x734>)
 800ec24:	fba2 2303 	umull	r2, r3, r2, r3
 800ec28:	095b      	lsrs	r3, r3, #5
 800ec2a:	f003 020f 	and.w	r2, r3, #15
 800ec2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4432      	add	r2, r6
 800ec36:	609a      	str	r2, [r3, #8]
}
 800ec38:	e7ff      	b.n	800ec3a <UART_SetConfig+0x722>
 800ec3a:	bf00      	nop
 800ec3c:	37f4      	adds	r7, #244	; 0xf4
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec44:	40011000 	.word	0x40011000
 800ec48:	40011400 	.word	0x40011400
 800ec4c:	51eb851f 	.word	0x51eb851f

0800ec50 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ec50:	b480      	push	{r7}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec68:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	4b20      	ldr	r3, [pc, #128]	; (800ecf0 <FSMC_NORSRAM_Init+0xa0>)
 800ec6e:	4013      	ands	r3, r2
 800ec70:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ec7a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ec80:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ec86:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ec8c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800ec92:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800ec98:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ec9e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800eca4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ecaa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ecb0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800ecb6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800ecbc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	2b08      	cmp	r3, #8
 800ecca:	d103      	bne.n	800ecd4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecd2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	68f9      	ldr	r1, [r7, #12]
 800ecdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3714      	adds	r7, #20
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	fff00080 	.word	0xfff00080

0800ecf4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	1c5a      	adds	r2, r3, #1
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed0e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ed16:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ed22:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ed2a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ed32:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	691b      	ldr	r3, [r3, #16]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ed3c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	695b      	ldr	r3, [r3, #20]
 800ed42:	3b02      	subs	r3, #2
 800ed44:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ed46:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	697a      	ldr	r2, [r7, #20]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6979      	ldr	r1, [r7, #20]
 800ed5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	371c      	adds	r7, #28
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
	...

0800ed70 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b087      	sub	sp, #28
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed88:	d122      	bne.n	800edd0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed92:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	4b15      	ldr	r3, [pc, #84]	; (800edec <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800ed98:	4013      	ands	r3, r2
 800ed9a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eda6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800edae:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800edb6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800edbc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	6979      	ldr	r1, [r7, #20]
 800edca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800edce:	e005      	b.n	800eddc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800edd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800eddc:	2300      	movs	r3, #0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	371c      	adds	r7, #28
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	cff00000 	.word	0xcff00000

0800edf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800edf0:	b084      	sub	sp, #16
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	f107 001c 	add.w	r0, r7, #28
 800edfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d122      	bne.n	800ee4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ee1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ee30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d105      	bne.n	800ee42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f001 fac6 	bl	80103d4 <USB_CoreReset>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73fb      	strb	r3, [r7, #15]
 800ee4c:	e01a      	b.n	800ee84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f001 faba 	bl	80103d4 <USB_CoreReset>
 800ee60:	4603      	mov	r3, r0
 800ee62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ee64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d106      	bne.n	800ee78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	639a      	str	r2, [r3, #56]	; 0x38
 800ee76:	e005      	b.n	800ee84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ee84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d10b      	bne.n	800eea2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f043 0206 	orr.w	r2, r3, #6
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	f043 0220 	orr.w	r2, r3, #32
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800eea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eeae:	b004      	add	sp, #16
 800eeb0:	4770      	bx	lr
	...

0800eeb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b087      	sub	sp, #28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	4613      	mov	r3, r2
 800eec0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d165      	bne.n	800ef94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	4a41      	ldr	r2, [pc, #260]	; (800efd0 <USB_SetTurnaroundTime+0x11c>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d906      	bls.n	800eede <USB_SetTurnaroundTime+0x2a>
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	4a40      	ldr	r2, [pc, #256]	; (800efd4 <USB_SetTurnaroundTime+0x120>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d202      	bcs.n	800eede <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800eed8:	230f      	movs	r3, #15
 800eeda:	617b      	str	r3, [r7, #20]
 800eedc:	e062      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	4a3c      	ldr	r2, [pc, #240]	; (800efd4 <USB_SetTurnaroundTime+0x120>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d306      	bcc.n	800eef4 <USB_SetTurnaroundTime+0x40>
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	4a3b      	ldr	r2, [pc, #236]	; (800efd8 <USB_SetTurnaroundTime+0x124>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d202      	bcs.n	800eef4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800eeee:	230e      	movs	r3, #14
 800eef0:	617b      	str	r3, [r7, #20]
 800eef2:	e057      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	4a38      	ldr	r2, [pc, #224]	; (800efd8 <USB_SetTurnaroundTime+0x124>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d306      	bcc.n	800ef0a <USB_SetTurnaroundTime+0x56>
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	4a37      	ldr	r2, [pc, #220]	; (800efdc <USB_SetTurnaroundTime+0x128>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d202      	bcs.n	800ef0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ef04:	230d      	movs	r3, #13
 800ef06:	617b      	str	r3, [r7, #20]
 800ef08:	e04c      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	4a33      	ldr	r2, [pc, #204]	; (800efdc <USB_SetTurnaroundTime+0x128>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d306      	bcc.n	800ef20 <USB_SetTurnaroundTime+0x6c>
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	4a32      	ldr	r2, [pc, #200]	; (800efe0 <USB_SetTurnaroundTime+0x12c>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d802      	bhi.n	800ef20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	617b      	str	r3, [r7, #20]
 800ef1e:	e041      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	4a2f      	ldr	r2, [pc, #188]	; (800efe0 <USB_SetTurnaroundTime+0x12c>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d906      	bls.n	800ef36 <USB_SetTurnaroundTime+0x82>
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	4a2e      	ldr	r2, [pc, #184]	; (800efe4 <USB_SetTurnaroundTime+0x130>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d802      	bhi.n	800ef36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ef30:	230b      	movs	r3, #11
 800ef32:	617b      	str	r3, [r7, #20]
 800ef34:	e036      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	4a2a      	ldr	r2, [pc, #168]	; (800efe4 <USB_SetTurnaroundTime+0x130>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d906      	bls.n	800ef4c <USB_SetTurnaroundTime+0x98>
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	4a29      	ldr	r2, [pc, #164]	; (800efe8 <USB_SetTurnaroundTime+0x134>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d802      	bhi.n	800ef4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ef46:	230a      	movs	r3, #10
 800ef48:	617b      	str	r3, [r7, #20]
 800ef4a:	e02b      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	4a26      	ldr	r2, [pc, #152]	; (800efe8 <USB_SetTurnaroundTime+0x134>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d906      	bls.n	800ef62 <USB_SetTurnaroundTime+0xae>
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	4a25      	ldr	r2, [pc, #148]	; (800efec <USB_SetTurnaroundTime+0x138>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d202      	bcs.n	800ef62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ef5c:	2309      	movs	r3, #9
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	e020      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	4a21      	ldr	r2, [pc, #132]	; (800efec <USB_SetTurnaroundTime+0x138>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d306      	bcc.n	800ef78 <USB_SetTurnaroundTime+0xc4>
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	4a20      	ldr	r2, [pc, #128]	; (800eff0 <USB_SetTurnaroundTime+0x13c>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d802      	bhi.n	800ef78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ef72:	2308      	movs	r3, #8
 800ef74:	617b      	str	r3, [r7, #20]
 800ef76:	e015      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	4a1d      	ldr	r2, [pc, #116]	; (800eff0 <USB_SetTurnaroundTime+0x13c>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d906      	bls.n	800ef8e <USB_SetTurnaroundTime+0xda>
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	4a1c      	ldr	r2, [pc, #112]	; (800eff4 <USB_SetTurnaroundTime+0x140>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d202      	bcs.n	800ef8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ef88:	2307      	movs	r3, #7
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	e00a      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ef8e:	2306      	movs	r3, #6
 800ef90:	617b      	str	r3, [r7, #20]
 800ef92:	e007      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d102      	bne.n	800efa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ef9a:	2309      	movs	r3, #9
 800ef9c:	617b      	str	r3, [r7, #20]
 800ef9e:	e001      	b.n	800efa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800efa0:	2309      	movs	r3, #9
 800efa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	68da      	ldr	r2, [r3, #12]
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	029b      	lsls	r3, r3, #10
 800efb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800efbc:	431a      	orrs	r2, r3
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	371c      	adds	r7, #28
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	00d8acbf 	.word	0x00d8acbf
 800efd4:	00e4e1c0 	.word	0x00e4e1c0
 800efd8:	00f42400 	.word	0x00f42400
 800efdc:	01067380 	.word	0x01067380
 800efe0:	011a499f 	.word	0x011a499f
 800efe4:	01312cff 	.word	0x01312cff
 800efe8:	014ca43f 	.word	0x014ca43f
 800efec:	016e3600 	.word	0x016e3600
 800eff0:	01a6ab1f 	.word	0x01a6ab1f
 800eff4:	01e84800 	.word	0x01e84800

0800eff8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	f043 0201 	orr.w	r2, r3, #1
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	370c      	adds	r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr

0800f01a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f01a:	b480      	push	{r7}
 800f01c:	b083      	sub	sp, #12
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f023 0201 	bic.w	r2, r3, #1
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	460b      	mov	r3, r1
 800f046:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f054:	78fb      	ldrb	r3, [r7, #3]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d106      	bne.n	800f068 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	60da      	str	r2, [r3, #12]
 800f066:	e00b      	b.n	800f080 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f068:	78fb      	ldrb	r3, [r7, #3]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d106      	bne.n	800f07c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	60da      	str	r2, [r3, #12]
 800f07a:	e001      	b.n	800f080 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e003      	b.n	800f088 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f080:	2032      	movs	r0, #50	; 0x32
 800f082:	f7fb fdd7 	bl	800ac34 <HAL_Delay>

  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f090:	b084      	sub	sp, #16
 800f092:	b580      	push	{r7, lr}
 800f094:	b086      	sub	sp, #24
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
 800f09a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f09e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	613b      	str	r3, [r7, #16]
 800f0ae:	e009      	b.n	800f0c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	3340      	adds	r3, #64	; 0x40
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4413      	add	r3, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	613b      	str	r3, [r7, #16]
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	2b0e      	cmp	r3, #14
 800f0c8:	d9f2      	bls.n	800f0b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d11c      	bne.n	800f10a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	68fa      	ldr	r2, [r7, #12]
 800f0da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f0de:	f043 0302 	orr.w	r3, r3, #2
 800f0e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f100:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	639a      	str	r2, [r3, #56]	; 0x38
 800f108:	e00b      	b.n	800f122 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f10e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f11a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f128:	461a      	mov	r2, r3
 800f12a:	2300      	movs	r3, #0
 800f12c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f134:	4619      	mov	r1, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f13c:	461a      	mov	r2, r3
 800f13e:	680b      	ldr	r3, [r1, #0]
 800f140:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	2b01      	cmp	r3, #1
 800f146:	d10c      	bne.n	800f162 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d104      	bne.n	800f158 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f14e:	2100      	movs	r1, #0
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f949 	bl	800f3e8 <USB_SetDevSpeed>
 800f156:	e008      	b.n	800f16a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f158:	2101      	movs	r1, #1
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f944 	bl	800f3e8 <USB_SetDevSpeed>
 800f160:	e003      	b.n	800f16a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f162:	2103      	movs	r1, #3
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f93f 	bl	800f3e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f16a:	2110      	movs	r1, #16
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 f8f3 	bl	800f358 <USB_FlushTxFifo>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d001      	beq.n	800f17c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f178:	2301      	movs	r3, #1
 800f17a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 f911 	bl	800f3a4 <USB_FlushRxFifo>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d001      	beq.n	800f18c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f192:	461a      	mov	r2, r3
 800f194:	2300      	movs	r3, #0
 800f196:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f19e:	461a      	mov	r2, r3
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	613b      	str	r3, [r7, #16]
 800f1b4:	e043      	b.n	800f23e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	015a      	lsls	r2, r3, #5
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	4413      	add	r3, r2
 800f1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1cc:	d118      	bne.n	800f200 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d10a      	bne.n	800f1ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	015a      	lsls	r2, r3, #5
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	4413      	add	r3, r2
 800f1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f1e6:	6013      	str	r3, [r2, #0]
 800f1e8:	e013      	b.n	800f212 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	015a      	lsls	r2, r3, #5
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f1fc:	6013      	str	r3, [r2, #0]
 800f1fe:	e008      	b.n	800f212 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	015a      	lsls	r2, r3, #5
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	4413      	add	r3, r2
 800f208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f20c:	461a      	mov	r2, r3
 800f20e:	2300      	movs	r3, #0
 800f210:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	015a      	lsls	r2, r3, #5
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	4413      	add	r3, r2
 800f21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f21e:	461a      	mov	r2, r3
 800f220:	2300      	movs	r3, #0
 800f222:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f230:	461a      	mov	r2, r3
 800f232:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f236:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	3301      	adds	r3, #1
 800f23c:	613b      	str	r3, [r7, #16]
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	693a      	ldr	r2, [r7, #16]
 800f242:	429a      	cmp	r2, r3
 800f244:	d3b7      	bcc.n	800f1b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f246:	2300      	movs	r3, #0
 800f248:	613b      	str	r3, [r7, #16]
 800f24a:	e043      	b.n	800f2d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	015a      	lsls	r2, r3, #5
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	4413      	add	r3, r2
 800f254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f25e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f262:	d118      	bne.n	800f296 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10a      	bne.n	800f280 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	015a      	lsls	r2, r3, #5
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	4413      	add	r3, r2
 800f272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f276:	461a      	mov	r2, r3
 800f278:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f27c:	6013      	str	r3, [r2, #0]
 800f27e:	e013      	b.n	800f2a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	015a      	lsls	r2, r3, #5
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	4413      	add	r3, r2
 800f288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f28c:	461a      	mov	r2, r3
 800f28e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f292:	6013      	str	r3, [r2, #0]
 800f294:	e008      	b.n	800f2a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	015a      	lsls	r2, r3, #5
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	4413      	add	r3, r2
 800f29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	015a      	lsls	r2, r3, #5
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	015a      	lsls	r2, r3, #5
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f2cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	613b      	str	r3, [r7, #16]
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d3b7      	bcc.n	800f24c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	68fa      	ldr	r2, [r7, #12]
 800f2e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f2fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f300:	2b00      	cmp	r3, #0
 800f302:	d105      	bne.n	800f310 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	699b      	ldr	r3, [r3, #24]
 800f308:	f043 0210 	orr.w	r2, r3, #16
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	699a      	ldr	r2, [r3, #24]
 800f314:	4b0f      	ldr	r3, [pc, #60]	; (800f354 <USB_DevInit+0x2c4>)
 800f316:	4313      	orrs	r3, r2
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d005      	beq.n	800f32e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	699b      	ldr	r3, [r3, #24]
 800f326:	f043 0208 	orr.w	r2, r3, #8
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f330:	2b01      	cmp	r3, #1
 800f332:	d107      	bne.n	800f344 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	699b      	ldr	r3, [r3, #24]
 800f338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f33c:	f043 0304 	orr.w	r3, r3, #4
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f344:	7dfb      	ldrb	r3, [r7, #23]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3718      	adds	r7, #24
 800f34a:	46bd      	mov	sp, r7
 800f34c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f350:	b004      	add	sp, #16
 800f352:	4770      	bx	lr
 800f354:	803c3800 	.word	0x803c3800

0800f358 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f362:	2300      	movs	r3, #0
 800f364:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	019b      	lsls	r3, r3, #6
 800f36a:	f043 0220 	orr.w	r2, r3, #32
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3301      	adds	r3, #1
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <USB_FlushTxFifo+0x48>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d901      	bls.n	800f384 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f380:	2303      	movs	r3, #3
 800f382:	e006      	b.n	800f392 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	691b      	ldr	r3, [r3, #16]
 800f388:	f003 0320 	and.w	r3, r3, #32
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	d0f0      	beq.n	800f372 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	00030d40 	.word	0x00030d40

0800f3a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2210      	movs	r2, #16
 800f3b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4a09      	ldr	r2, [pc, #36]	; (800f3e4 <USB_FlushRxFifo+0x40>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d901      	bls.n	800f3c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	e006      	b.n	800f3d6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	f003 0310 	and.w	r3, r3, #16
 800f3d0:	2b10      	cmp	r3, #16
 800f3d2:	d0f0      	beq.n	800f3b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	00030d40 	.word	0x00030d40

0800f3e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	78fb      	ldrb	r3, [r7, #3]
 800f402:	68f9      	ldr	r1, [r7, #12]
 800f404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f408:	4313      	orrs	r3, r2
 800f40a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr

0800f41a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f41a:	b480      	push	{r7}
 800f41c:	b087      	sub	sp, #28
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f42c:	689b      	ldr	r3, [r3, #8]
 800f42e:	f003 0306 	and.w	r3, r3, #6
 800f432:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d102      	bne.n	800f440 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f43a:	2300      	movs	r3, #0
 800f43c:	75fb      	strb	r3, [r7, #23]
 800f43e:	e00a      	b.n	800f456 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b02      	cmp	r3, #2
 800f444:	d002      	beq.n	800f44c <USB_GetDevSpeed+0x32>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b06      	cmp	r3, #6
 800f44a:	d102      	bne.n	800f452 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f44c:	2302      	movs	r3, #2
 800f44e:	75fb      	strb	r3, [r7, #23]
 800f450:	e001      	b.n	800f456 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f452:	230f      	movs	r3, #15
 800f454:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f456:	7dfb      	ldrb	r3, [r7, #23]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	371c      	adds	r7, #28
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	785b      	ldrb	r3, [r3, #1]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d13a      	bne.n	800f4f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f486:	69da      	ldr	r2, [r3, #28]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	f003 030f 	and.w	r3, r3, #15
 800f490:	2101      	movs	r1, #1
 800f492:	fa01 f303 	lsl.w	r3, r1, r3
 800f496:	b29b      	uxth	r3, r3
 800f498:	68f9      	ldr	r1, [r7, #12]
 800f49a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	015a      	lsls	r2, r3, #5
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d155      	bne.n	800f564 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	015a      	lsls	r2, r3, #5
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	4413      	add	r3, r2
 800f4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	78db      	ldrb	r3, [r3, #3]
 800f4d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	059b      	lsls	r3, r3, #22
 800f4da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	0151      	lsls	r1, r2, #5
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	440a      	add	r2, r1
 800f4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	e036      	b.n	800f564 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4fc:	69da      	ldr	r2, [r3, #28]
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	f003 030f 	and.w	r3, r3, #15
 800f506:	2101      	movs	r1, #1
 800f508:	fa01 f303 	lsl.w	r3, r1, r3
 800f50c:	041b      	lsls	r3, r3, #16
 800f50e:	68f9      	ldr	r1, [r7, #12]
 800f510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f514:	4313      	orrs	r3, r2
 800f516:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d11a      	bne.n	800f564 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	015a      	lsls	r2, r3, #5
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	4413      	add	r3, r2
 800f536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	78db      	ldrb	r3, [r3, #3]
 800f548:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f54a:	430b      	orrs	r3, r1
 800f54c:	4313      	orrs	r3, r2
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	0151      	lsls	r1, r2, #5
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	440a      	add	r2, r1
 800f556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f55a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f55e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f562:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3714      	adds	r7, #20
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr
	...

0800f574 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f574:	b480      	push	{r7}
 800f576:	b085      	sub	sp, #20
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	785b      	ldrb	r3, [r3, #1]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d161      	bne.n	800f654 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	015a      	lsls	r2, r3, #5
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	4413      	add	r3, r2
 800f598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f5a6:	d11f      	bne.n	800f5e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	015a      	lsls	r2, r3, #5
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	0151      	lsls	r1, r2, #5
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	440a      	add	r2, r1
 800f5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f5c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	015a      	lsls	r2, r3, #5
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	0151      	lsls	r1, r2, #5
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	440a      	add	r2, r1
 800f5de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	f003 030f 	and.w	r3, r3, #15
 800f5f8:	2101      	movs	r1, #1
 800f5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	43db      	mvns	r3, r3
 800f602:	68f9      	ldr	r1, [r7, #12]
 800f604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f608:	4013      	ands	r3, r2
 800f60a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f612:	69da      	ldr	r2, [r3, #28]
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	f003 030f 	and.w	r3, r3, #15
 800f61c:	2101      	movs	r1, #1
 800f61e:	fa01 f303 	lsl.w	r3, r1, r3
 800f622:	b29b      	uxth	r3, r3
 800f624:	43db      	mvns	r3, r3
 800f626:	68f9      	ldr	r1, [r7, #12]
 800f628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f62c:	4013      	ands	r3, r2
 800f62e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	015a      	lsls	r2, r3, #5
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	4413      	add	r3, r2
 800f638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	0159      	lsls	r1, r3, #5
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	440b      	add	r3, r1
 800f646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f64a:	4619      	mov	r1, r3
 800f64c:	4b35      	ldr	r3, [pc, #212]	; (800f724 <USB_DeactivateEndpoint+0x1b0>)
 800f64e:	4013      	ands	r3, r2
 800f650:	600b      	str	r3, [r1, #0]
 800f652:	e060      	b.n	800f716 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	015a      	lsls	r2, r3, #5
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	4413      	add	r3, r2
 800f65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f66a:	d11f      	bne.n	800f6ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	015a      	lsls	r2, r3, #5
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	4413      	add	r3, r2
 800f674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	0151      	lsls	r1, r2, #5
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	440a      	add	r2, r1
 800f682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f686:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f68a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	015a      	lsls	r2, r3, #5
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	4413      	add	r3, r2
 800f694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	0151      	lsls	r1, r2, #5
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	440a      	add	r2, r1
 800f6a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f6aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	f003 030f 	and.w	r3, r3, #15
 800f6bc:	2101      	movs	r1, #1
 800f6be:	fa01 f303 	lsl.w	r3, r1, r3
 800f6c2:	041b      	lsls	r3, r3, #16
 800f6c4:	43db      	mvns	r3, r3
 800f6c6:	68f9      	ldr	r1, [r7, #12]
 800f6c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d6:	69da      	ldr	r2, [r3, #28]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 030f 	and.w	r3, r3, #15
 800f6e0:	2101      	movs	r1, #1
 800f6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800f6e6:	041b      	lsls	r3, r3, #16
 800f6e8:	43db      	mvns	r3, r3
 800f6ea:	68f9      	ldr	r1, [r7, #12]
 800f6ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	015a      	lsls	r2, r3, #5
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	0159      	lsls	r1, r3, #5
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	440b      	add	r3, r1
 800f70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f70e:	4619      	mov	r1, r3
 800f710:	4b05      	ldr	r3, [pc, #20]	; (800f728 <USB_DeactivateEndpoint+0x1b4>)
 800f712:	4013      	ands	r3, r2
 800f714:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3714      	adds	r7, #20
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	ec337800 	.word	0xec337800
 800f728:	eff37800 	.word	0xeff37800

0800f72c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08a      	sub	sp, #40	; 0x28
 800f730:	af02      	add	r7, sp, #8
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	4613      	mov	r3, r2
 800f738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	785b      	ldrb	r3, [r3, #1]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	f040 815c 	bne.w	800fa06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	695b      	ldr	r3, [r3, #20]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d132      	bne.n	800f7bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	015a      	lsls	r2, r3, #5
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	4413      	add	r3, r2
 800f75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f762:	691b      	ldr	r3, [r3, #16]
 800f764:	69ba      	ldr	r2, [r7, #24]
 800f766:	0151      	lsls	r1, r2, #5
 800f768:	69fa      	ldr	r2, [r7, #28]
 800f76a:	440a      	add	r2, r1
 800f76c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	015a      	lsls	r2, r3, #5
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	4413      	add	r3, r2
 800f782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	69ba      	ldr	r2, [r7, #24]
 800f78a:	0151      	lsls	r1, r2, #5
 800f78c:	69fa      	ldr	r2, [r7, #28]
 800f78e:	440a      	add	r2, r1
 800f790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	015a      	lsls	r2, r3, #5
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	69ba      	ldr	r2, [r7, #24]
 800f7aa:	0151      	lsls	r1, r2, #5
 800f7ac:	69fa      	ldr	r2, [r7, #28]
 800f7ae:	440a      	add	r2, r1
 800f7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7b4:	0cdb      	lsrs	r3, r3, #19
 800f7b6:	04db      	lsls	r3, r3, #19
 800f7b8:	6113      	str	r3, [r2, #16]
 800f7ba:	e074      	b.n	800f8a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	015a      	lsls	r2, r3, #5
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	69ba      	ldr	r2, [r7, #24]
 800f7cc:	0151      	lsls	r1, r2, #5
 800f7ce:	69fa      	ldr	r2, [r7, #28]
 800f7d0:	440a      	add	r2, r1
 800f7d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7d6:	0cdb      	lsrs	r3, r3, #19
 800f7d8:	04db      	lsls	r3, r3, #19
 800f7da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	015a      	lsls	r2, r3, #5
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	69ba      	ldr	r2, [r7, #24]
 800f7ec:	0151      	lsls	r1, r2, #5
 800f7ee:	69fa      	ldr	r2, [r7, #28]
 800f7f0:	440a      	add	r2, r1
 800f7f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	015a      	lsls	r2, r3, #5
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	4413      	add	r3, r2
 800f808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f80c:	691a      	ldr	r2, [r3, #16]
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	6959      	ldr	r1, [r3, #20]
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	440b      	add	r3, r1
 800f818:	1e59      	subs	r1, r3, #1
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f822:	04d9      	lsls	r1, r3, #19
 800f824:	4b9d      	ldr	r3, [pc, #628]	; (800fa9c <USB_EPStartXfer+0x370>)
 800f826:	400b      	ands	r3, r1
 800f828:	69b9      	ldr	r1, [r7, #24]
 800f82a:	0148      	lsls	r0, r1, #5
 800f82c:	69f9      	ldr	r1, [r7, #28]
 800f82e:	4401      	add	r1, r0
 800f830:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f834:	4313      	orrs	r3, r2
 800f836:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	015a      	lsls	r2, r3, #5
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	4413      	add	r3, r2
 800f840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f844:	691a      	ldr	r2, [r3, #16]
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	695b      	ldr	r3, [r3, #20]
 800f84a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f84e:	69b9      	ldr	r1, [r7, #24]
 800f850:	0148      	lsls	r0, r1, #5
 800f852:	69f9      	ldr	r1, [r7, #28]
 800f854:	4401      	add	r1, r0
 800f856:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f85a:	4313      	orrs	r3, r2
 800f85c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	78db      	ldrb	r3, [r3, #3]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d11f      	bne.n	800f8a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	015a      	lsls	r2, r3, #5
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	4413      	add	r3, r2
 800f86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f872:	691b      	ldr	r3, [r3, #16]
 800f874:	69ba      	ldr	r2, [r7, #24]
 800f876:	0151      	lsls	r1, r2, #5
 800f878:	69fa      	ldr	r2, [r7, #28]
 800f87a:	440a      	add	r2, r1
 800f87c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f880:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f884:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f892:	691b      	ldr	r3, [r3, #16]
 800f894:	69ba      	ldr	r2, [r7, #24]
 800f896:	0151      	lsls	r1, r2, #5
 800f898:	69fa      	ldr	r2, [r7, #28]
 800f89a:	440a      	add	r2, r1
 800f89c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f8a6:	79fb      	ldrb	r3, [r7, #7]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d14b      	bne.n	800f944 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d009      	beq.n	800f8c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	015a      	lsls	r2, r3, #5
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	691b      	ldr	r3, [r3, #16]
 800f8c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	78db      	ldrb	r3, [r3, #3]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d128      	bne.n	800f922 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d110      	bne.n	800f902 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f8e0:	69bb      	ldr	r3, [r7, #24]
 800f8e2:	015a      	lsls	r2, r3, #5
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	69ba      	ldr	r2, [r7, #24]
 800f8f0:	0151      	lsls	r1, r2, #5
 800f8f2:	69fa      	ldr	r2, [r7, #28]
 800f8f4:	440a      	add	r2, r1
 800f8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8fe:	6013      	str	r3, [r2, #0]
 800f900:	e00f      	b.n	800f922 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	015a      	lsls	r2, r3, #5
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	4413      	add	r3, r2
 800f90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	69ba      	ldr	r2, [r7, #24]
 800f912:	0151      	lsls	r1, r2, #5
 800f914:	69fa      	ldr	r2, [r7, #28]
 800f916:	440a      	add	r2, r1
 800f918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f91c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f920:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	015a      	lsls	r2, r3, #5
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	4413      	add	r3, r2
 800f92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	69ba      	ldr	r2, [r7, #24]
 800f932:	0151      	lsls	r1, r2, #5
 800f934:	69fa      	ldr	r2, [r7, #28]
 800f936:	440a      	add	r2, r1
 800f938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f93c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f940:	6013      	str	r3, [r2, #0]
 800f942:	e12f      	b.n	800fba4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	015a      	lsls	r2, r3, #5
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	4413      	add	r3, r2
 800f94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	69ba      	ldr	r2, [r7, #24]
 800f954:	0151      	lsls	r1, r2, #5
 800f956:	69fa      	ldr	r2, [r7, #28]
 800f958:	440a      	add	r2, r1
 800f95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f95e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f962:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	78db      	ldrb	r3, [r3, #3]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d015      	beq.n	800f998 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	695b      	ldr	r3, [r3, #20]
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 8117 	beq.w	800fba4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f97c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	f003 030f 	and.w	r3, r3, #15
 800f986:	2101      	movs	r1, #1
 800f988:	fa01 f303 	lsl.w	r3, r1, r3
 800f98c:	69f9      	ldr	r1, [r7, #28]
 800f98e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f992:	4313      	orrs	r3, r2
 800f994:	634b      	str	r3, [r1, #52]	; 0x34
 800f996:	e105      	b.n	800fba4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d110      	bne.n	800f9ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	69ba      	ldr	r2, [r7, #24]
 800f9b8:	0151      	lsls	r1, r2, #5
 800f9ba:	69fa      	ldr	r2, [r7, #28]
 800f9bc:	440a      	add	r2, r1
 800f9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f9c6:	6013      	str	r3, [r2, #0]
 800f9c8:	e00f      	b.n	800f9ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	015a      	lsls	r2, r3, #5
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	69ba      	ldr	r2, [r7, #24]
 800f9da:	0151      	lsls	r1, r2, #5
 800f9dc:	69fa      	ldr	r2, [r7, #28]
 800f9de:	440a      	add	r2, r1
 800f9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	68d9      	ldr	r1, [r3, #12]
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	781a      	ldrb	r2, [r3, #0]
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	b298      	uxth	r0, r3
 800f9f8:	79fb      	ldrb	r3, [r7, #7]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f000 fa2b 	bl	800fe5a <USB_WritePacket>
 800fa04:	e0ce      	b.n	800fba4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	015a      	lsls	r2, r3, #5
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	69ba      	ldr	r2, [r7, #24]
 800fa16:	0151      	lsls	r1, r2, #5
 800fa18:	69fa      	ldr	r2, [r7, #28]
 800fa1a:	440a      	add	r2, r1
 800fa1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa20:	0cdb      	lsrs	r3, r3, #19
 800fa22:	04db      	lsls	r3, r3, #19
 800fa24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	015a      	lsls	r2, r3, #5
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	69ba      	ldr	r2, [r7, #24]
 800fa36:	0151      	lsls	r1, r2, #5
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	440a      	add	r2, r1
 800fa3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	695b      	ldr	r3, [r3, #20]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d126      	bne.n	800faa0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	015a      	lsls	r2, r3, #5
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	4413      	add	r3, r2
 800fa5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa5e:	691a      	ldr	r2, [r3, #16]
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa68:	69b9      	ldr	r1, [r7, #24]
 800fa6a:	0148      	lsls	r0, r1, #5
 800fa6c:	69f9      	ldr	r1, [r7, #28]
 800fa6e:	4401      	add	r1, r0
 800fa70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fa74:	4313      	orrs	r3, r2
 800fa76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	015a      	lsls	r2, r3, #5
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	4413      	add	r3, r2
 800fa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	69ba      	ldr	r2, [r7, #24]
 800fa88:	0151      	lsls	r1, r2, #5
 800fa8a:	69fa      	ldr	r2, [r7, #28]
 800fa8c:	440a      	add	r2, r1
 800fa8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa96:	6113      	str	r3, [r2, #16]
 800fa98:	e036      	b.n	800fb08 <USB_EPStartXfer+0x3dc>
 800fa9a:	bf00      	nop
 800fa9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	695a      	ldr	r2, [r3, #20]
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	4413      	add	r3, r2
 800faaa:	1e5a      	subs	r2, r3, #1
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fab4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	015a      	lsls	r2, r3, #5
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	4413      	add	r3, r2
 800fabe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac2:	691a      	ldr	r2, [r3, #16]
 800fac4:	8afb      	ldrh	r3, [r7, #22]
 800fac6:	04d9      	lsls	r1, r3, #19
 800fac8:	4b39      	ldr	r3, [pc, #228]	; (800fbb0 <USB_EPStartXfer+0x484>)
 800faca:	400b      	ands	r3, r1
 800facc:	69b9      	ldr	r1, [r7, #24]
 800face:	0148      	lsls	r0, r1, #5
 800fad0:	69f9      	ldr	r1, [r7, #28]
 800fad2:	4401      	add	r1, r0
 800fad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fad8:	4313      	orrs	r3, r2
 800fada:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	015a      	lsls	r2, r3, #5
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	4413      	add	r3, r2
 800fae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae8:	691a      	ldr	r2, [r3, #16]
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	8af9      	ldrh	r1, [r7, #22]
 800faf0:	fb01 f303 	mul.w	r3, r1, r3
 800faf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800faf8:	69b9      	ldr	r1, [r7, #24]
 800fafa:	0148      	lsls	r0, r1, #5
 800fafc:	69f9      	ldr	r1, [r7, #28]
 800fafe:	4401      	add	r1, r0
 800fb00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb04:	4313      	orrs	r3, r2
 800fb06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fb08:	79fb      	ldrb	r3, [r7, #7]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d10d      	bne.n	800fb2a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d009      	beq.n	800fb2a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	68d9      	ldr	r1, [r3, #12]
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	015a      	lsls	r2, r3, #5
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	4413      	add	r3, r2
 800fb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb26:	460a      	mov	r2, r1
 800fb28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	78db      	ldrb	r3, [r3, #3]
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d128      	bne.n	800fb84 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb38:	689b      	ldr	r3, [r3, #8]
 800fb3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d110      	bne.n	800fb64 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	015a      	lsls	r2, r3, #5
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	4413      	add	r3, r2
 800fb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	69ba      	ldr	r2, [r7, #24]
 800fb52:	0151      	lsls	r1, r2, #5
 800fb54:	69fa      	ldr	r2, [r7, #28]
 800fb56:	440a      	add	r2, r1
 800fb58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb60:	6013      	str	r3, [r2, #0]
 800fb62:	e00f      	b.n	800fb84 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	015a      	lsls	r2, r3, #5
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	69ba      	ldr	r2, [r7, #24]
 800fb74:	0151      	lsls	r1, r2, #5
 800fb76:	69fa      	ldr	r2, [r7, #28]
 800fb78:	440a      	add	r2, r1
 800fb7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb84:	69bb      	ldr	r3, [r7, #24]
 800fb86:	015a      	lsls	r2, r3, #5
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	4413      	add	r3, r2
 800fb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	69ba      	ldr	r2, [r7, #24]
 800fb94:	0151      	lsls	r1, r2, #5
 800fb96:	69fa      	ldr	r2, [r7, #28]
 800fb98:	440a      	add	r2, r1
 800fb9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fba2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3720      	adds	r7, #32
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	1ff80000 	.word	0x1ff80000

0800fbb4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b087      	sub	sp, #28
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	785b      	ldrb	r3, [r3, #1]
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	f040 80cd 	bne.w	800fd70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	695b      	ldr	r3, [r3, #20]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d132      	bne.n	800fc44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	693a      	ldr	r2, [r7, #16]
 800fbee:	0151      	lsls	r1, r2, #5
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	440a      	add	r2, r1
 800fbf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fbfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	015a      	lsls	r2, r3, #5
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	4413      	add	r3, r2
 800fc0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc0e:	691b      	ldr	r3, [r3, #16]
 800fc10:	693a      	ldr	r2, [r7, #16]
 800fc12:	0151      	lsls	r1, r2, #5
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	440a      	add	r2, r1
 800fc18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	015a      	lsls	r2, r3, #5
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	4413      	add	r3, r2
 800fc2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2e:	691b      	ldr	r3, [r3, #16]
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	0151      	lsls	r1, r2, #5
 800fc34:	697a      	ldr	r2, [r7, #20]
 800fc36:	440a      	add	r2, r1
 800fc38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc3c:	0cdb      	lsrs	r3, r3, #19
 800fc3e:	04db      	lsls	r3, r3, #19
 800fc40:	6113      	str	r3, [r2, #16]
 800fc42:	e04e      	b.n	800fce2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	015a      	lsls	r2, r3, #5
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	693a      	ldr	r2, [r7, #16]
 800fc54:	0151      	lsls	r1, r2, #5
 800fc56:	697a      	ldr	r2, [r7, #20]
 800fc58:	440a      	add	r2, r1
 800fc5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc5e:	0cdb      	lsrs	r3, r3, #19
 800fc60:	04db      	lsls	r3, r3, #19
 800fc62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	015a      	lsls	r2, r3, #5
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc70:	691b      	ldr	r3, [r3, #16]
 800fc72:	693a      	ldr	r2, [r7, #16]
 800fc74:	0151      	lsls	r1, r2, #5
 800fc76:	697a      	ldr	r2, [r7, #20]
 800fc78:	440a      	add	r2, r1
 800fc7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	695a      	ldr	r2, [r3, #20]
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d903      	bls.n	800fc9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	689a      	ldr	r2, [r3, #8]
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	4413      	add	r3, r2
 800fca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	0151      	lsls	r1, r2, #5
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	440a      	add	r2, r1
 800fcb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fcba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	015a      	lsls	r2, r3, #5
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcc8:	691a      	ldr	r2, [r3, #16]
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	695b      	ldr	r3, [r3, #20]
 800fcce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fcd2:	6939      	ldr	r1, [r7, #16]
 800fcd4:	0148      	lsls	r0, r1, #5
 800fcd6:	6979      	ldr	r1, [r7, #20]
 800fcd8:	4401      	add	r1, r0
 800fcda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fcde:	4313      	orrs	r3, r2
 800fce0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fce2:	79fb      	ldrb	r3, [r7, #7]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d11e      	bne.n	800fd26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d009      	beq.n	800fd04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	015a      	lsls	r2, r3, #5
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	015a      	lsls	r2, r3, #5
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	693a      	ldr	r2, [r7, #16]
 800fd14:	0151      	lsls	r1, r2, #5
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	440a      	add	r2, r1
 800fd1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd22:	6013      	str	r3, [r2, #0]
 800fd24:	e092      	b.n	800fe4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	015a      	lsls	r2, r3, #5
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	693a      	ldr	r2, [r7, #16]
 800fd36:	0151      	lsls	r1, r2, #5
 800fd38:	697a      	ldr	r2, [r7, #20]
 800fd3a:	440a      	add	r2, r1
 800fd3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	695b      	ldr	r3, [r3, #20]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d07e      	beq.n	800fe4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	f003 030f 	and.w	r3, r3, #15
 800fd5e:	2101      	movs	r1, #1
 800fd60:	fa01 f303 	lsl.w	r3, r1, r3
 800fd64:	6979      	ldr	r1, [r7, #20]
 800fd66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	634b      	str	r3, [r1, #52]	; 0x34
 800fd6e:	e06d      	b.n	800fe4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	015a      	lsls	r2, r3, #5
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	4413      	add	r3, r2
 800fd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	693a      	ldr	r2, [r7, #16]
 800fd80:	0151      	lsls	r1, r2, #5
 800fd82:	697a      	ldr	r2, [r7, #20]
 800fd84:	440a      	add	r2, r1
 800fd86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd8a:	0cdb      	lsrs	r3, r3, #19
 800fd8c:	04db      	lsls	r3, r3, #19
 800fd8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	015a      	lsls	r2, r3, #5
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	4413      	add	r3, r2
 800fd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	693a      	ldr	r2, [r7, #16]
 800fda0:	0151      	lsls	r1, r2, #5
 800fda2:	697a      	ldr	r2, [r7, #20]
 800fda4:	440a      	add	r2, r1
 800fda6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fdae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fdb2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	695b      	ldr	r3, [r3, #20]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d003      	beq.n	800fdc4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	689a      	ldr	r2, [r3, #8]
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	015a      	lsls	r2, r3, #5
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	4413      	add	r3, r2
 800fdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdd0:	691b      	ldr	r3, [r3, #16]
 800fdd2:	693a      	ldr	r2, [r7, #16]
 800fdd4:	0151      	lsls	r1, r2, #5
 800fdd6:	697a      	ldr	r2, [r7, #20]
 800fdd8:	440a      	add	r2, r1
 800fdda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fde2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf0:	691a      	ldr	r2, [r3, #16]
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	689b      	ldr	r3, [r3, #8]
 800fdf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdfa:	6939      	ldr	r1, [r7, #16]
 800fdfc:	0148      	lsls	r0, r1, #5
 800fdfe:	6979      	ldr	r1, [r7, #20]
 800fe00:	4401      	add	r1, r0
 800fe02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe06:	4313      	orrs	r3, r2
 800fe08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fe0a:	79fb      	ldrb	r3, [r7, #7]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d10d      	bne.n	800fe2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	68d9      	ldr	r1, [r3, #12]
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	015a      	lsls	r2, r3, #5
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	4413      	add	r3, r2
 800fe24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe28:	460a      	mov	r2, r1
 800fe2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	015a      	lsls	r2, r3, #5
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	4413      	add	r3, r2
 800fe34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	693a      	ldr	r2, [r7, #16]
 800fe3c:	0151      	lsls	r1, r2, #5
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	440a      	add	r2, r1
 800fe42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	371c      	adds	r7, #28
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	b089      	sub	sp, #36	; 0x24
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	60f8      	str	r0, [r7, #12]
 800fe62:	60b9      	str	r1, [r7, #8]
 800fe64:	4611      	mov	r1, r2
 800fe66:	461a      	mov	r2, r3
 800fe68:	460b      	mov	r3, r1
 800fe6a:	71fb      	strb	r3, [r7, #7]
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fe78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d11a      	bne.n	800feb6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fe80:	88bb      	ldrh	r3, [r7, #4]
 800fe82:	3303      	adds	r3, #3
 800fe84:	089b      	lsrs	r3, r3, #2
 800fe86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fe88:	2300      	movs	r3, #0
 800fe8a:	61bb      	str	r3, [r7, #24]
 800fe8c:	e00f      	b.n	800feae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fe8e:	79fb      	ldrb	r3, [r7, #7]
 800fe90:	031a      	lsls	r2, r3, #12
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	4413      	add	r3, r2
 800fe96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	3304      	adds	r3, #4
 800fea6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	3301      	adds	r3, #1
 800feac:	61bb      	str	r3, [r7, #24]
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d3eb      	bcc.n	800fe8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3724      	adds	r7, #36	; 0x24
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b089      	sub	sp, #36	; 0x24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	4613      	mov	r3, r2
 800fed0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800feda:	88fb      	ldrh	r3, [r7, #6]
 800fedc:	3303      	adds	r3, #3
 800fede:	089b      	lsrs	r3, r3, #2
 800fee0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800fee2:	2300      	movs	r3, #0
 800fee4:	61bb      	str	r3, [r7, #24]
 800fee6:	e00b      	b.n	800ff00 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	601a      	str	r2, [r3, #0]
    pDest++;
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	3304      	adds	r3, #4
 800fef8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	3301      	adds	r3, #1
 800fefe:	61bb      	str	r3, [r7, #24]
 800ff00:	69ba      	ldr	r2, [r7, #24]
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d3ef      	bcc.n	800fee8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ff08:	69fb      	ldr	r3, [r7, #28]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3724      	adds	r7, #36	; 0x24
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b085      	sub	sp, #20
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
 800ff1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	785b      	ldrb	r3, [r3, #1]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d12c      	bne.n	800ff8c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	015a      	lsls	r2, r3, #5
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	4413      	add	r3, r2
 800ff3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	db12      	blt.n	800ff6a <USB_EPSetStall+0x54>
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d00f      	beq.n	800ff6a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	015a      	lsls	r2, r3, #5
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	4413      	add	r3, r2
 800ff52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	68ba      	ldr	r2, [r7, #8]
 800ff5a:	0151      	lsls	r1, r2, #5
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	440a      	add	r2, r1
 800ff60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ff68:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	015a      	lsls	r2, r3, #5
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	4413      	add	r3, r2
 800ff72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	0151      	lsls	r1, r2, #5
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	440a      	add	r2, r1
 800ff80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ff88:	6013      	str	r3, [r2, #0]
 800ff8a:	e02b      	b.n	800ffe4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	db12      	blt.n	800ffc4 <USB_EPSetStall+0xae>
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00f      	beq.n	800ffc4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	015a      	lsls	r2, r3, #5
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	4413      	add	r3, r2
 800ffac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68ba      	ldr	r2, [r7, #8]
 800ffb4:	0151      	lsls	r1, r2, #5
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	440a      	add	r2, r1
 800ffba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ffbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ffc2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	015a      	lsls	r2, r3, #5
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	4413      	add	r3, r2
 800ffcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68ba      	ldr	r2, [r7, #8]
 800ffd4:	0151      	lsls	r1, r2, #5
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	440a      	add	r2, r1
 800ffda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ffde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ffe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3714      	adds	r7, #20
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fff2:	b480      	push	{r7}
 800fff4:	b085      	sub	sp, #20
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	785b      	ldrb	r3, [r3, #1]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d128      	bne.n	8010060 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	015a      	lsls	r2, r3, #5
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	4413      	add	r3, r2
 8010016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	0151      	lsls	r1, r2, #5
 8010020:	68fa      	ldr	r2, [r7, #12]
 8010022:	440a      	add	r2, r1
 8010024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801002c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	78db      	ldrb	r3, [r3, #3]
 8010032:	2b03      	cmp	r3, #3
 8010034:	d003      	beq.n	801003e <USB_EPClearStall+0x4c>
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	78db      	ldrb	r3, [r3, #3]
 801003a:	2b02      	cmp	r3, #2
 801003c:	d138      	bne.n	80100b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	015a      	lsls	r2, r3, #5
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	4413      	add	r3, r2
 8010046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	68ba      	ldr	r2, [r7, #8]
 801004e:	0151      	lsls	r1, r2, #5
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	440a      	add	r2, r1
 8010054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	e027      	b.n	80100b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	015a      	lsls	r2, r3, #5
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	4413      	add	r3, r2
 8010068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	0151      	lsls	r1, r2, #5
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	440a      	add	r2, r1
 8010076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801007a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801007e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	78db      	ldrb	r3, [r3, #3]
 8010084:	2b03      	cmp	r3, #3
 8010086:	d003      	beq.n	8010090 <USB_EPClearStall+0x9e>
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	78db      	ldrb	r3, [r3, #3]
 801008c:	2b02      	cmp	r3, #2
 801008e:	d10f      	bne.n	80100b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	015a      	lsls	r2, r3, #5
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	4413      	add	r3, r2
 8010098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	0151      	lsls	r1, r2, #5
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	440a      	add	r2, r1
 80100a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80100b0:	2300      	movs	r3, #0
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3714      	adds	r7, #20
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80100be:	b480      	push	{r7}
 80100c0:	b085      	sub	sp, #20
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
 80100c6:	460b      	mov	r3, r1
 80100c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80100e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100e8:	681a      	ldr	r2, [r3, #0]
 80100ea:	78fb      	ldrb	r3, [r7, #3]
 80100ec:	011b      	lsls	r3, r3, #4
 80100ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80100f2:	68f9      	ldr	r1, [r7, #12]
 80100f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100f8:	4313      	orrs	r3, r2
 80100fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80100fc:	2300      	movs	r3, #0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3714      	adds	r7, #20
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801010a:	b480      	push	{r7}
 801010c:	b085      	sub	sp, #20
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010124:	f023 0303 	bic.w	r3, r3, #3
 8010128:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010138:	f023 0302 	bic.w	r3, r3, #2
 801013c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3714      	adds	r7, #20
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010166:	f023 0303 	bic.w	r3, r3, #3
 801016a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801017a:	f043 0302 	orr.w	r3, r3, #2
 801017e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801018e:	b480      	push	{r7}
 8010190:	b085      	sub	sp, #20
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	695b      	ldr	r3, [r3, #20]
 801019a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	699b      	ldr	r3, [r3, #24]
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	4013      	ands	r3, r2
 80101a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80101a6:	68fb      	ldr	r3, [r7, #12]
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr

080101b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101c6:	699b      	ldr	r3, [r3, #24]
 80101c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101d0:	69db      	ldr	r3, [r3, #28]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	4013      	ands	r3, r2
 80101d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	0c1b      	lsrs	r3, r3, #16
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3714      	adds	r7, #20
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101fa:	699b      	ldr	r3, [r3, #24]
 80101fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010204:	69db      	ldr	r3, [r3, #28]
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	4013      	ands	r3, r2
 801020a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	b29b      	uxth	r3, r3
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801021c:	b480      	push	{r7}
 801021e:	b085      	sub	sp, #20
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	460b      	mov	r3, r1
 8010226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801022c:	78fb      	ldrb	r3, [r7, #3]
 801022e:	015a      	lsls	r2, r3, #5
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	4413      	add	r3, r2
 8010234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010238:	689b      	ldr	r3, [r3, #8]
 801023a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	68ba      	ldr	r2, [r7, #8]
 8010246:	4013      	ands	r3, r2
 8010248:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801024a:	68bb      	ldr	r3, [r7, #8]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3714      	adds	r7, #20
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010258:	b480      	push	{r7}
 801025a:	b087      	sub	sp, #28
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	460b      	mov	r3, r1
 8010262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801026e:	691b      	ldr	r3, [r3, #16]
 8010270:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801027a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801027c:	78fb      	ldrb	r3, [r7, #3]
 801027e:	f003 030f 	and.w	r3, r3, #15
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	fa22 f303 	lsr.w	r3, r2, r3
 8010288:	01db      	lsls	r3, r3, #7
 801028a:	b2db      	uxtb	r3, r3
 801028c:	693a      	ldr	r2, [r7, #16]
 801028e:	4313      	orrs	r3, r2
 8010290:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010292:	78fb      	ldrb	r3, [r7, #3]
 8010294:	015a      	lsls	r2, r3, #5
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	4413      	add	r3, r2
 801029a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	4013      	ands	r3, r2
 80102a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80102a6:	68bb      	ldr	r3, [r7, #8]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	371c      	adds	r7, #28
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	695b      	ldr	r3, [r3, #20]
 80102c0:	f003 0301 	and.w	r3, r3, #1
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80102ee:	f023 0307 	bic.w	r3, r3, #7
 80102f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010306:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
	...

08010318 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010318:	b480      	push	{r7}
 801031a:	b087      	sub	sp, #28
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	460b      	mov	r3, r1
 8010322:	607a      	str	r2, [r7, #4]
 8010324:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	333c      	adds	r3, #60	; 0x3c
 801032e:	3304      	adds	r3, #4
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	4a26      	ldr	r2, [pc, #152]	; (80103d0 <USB_EP0_OutStart+0xb8>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d90a      	bls.n	8010352 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801034c:	d101      	bne.n	8010352 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	e037      	b.n	80103c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010358:	461a      	mov	r2, r3
 801035a:	2300      	movs	r3, #0
 801035c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010364:	691b      	ldr	r3, [r3, #16]
 8010366:	697a      	ldr	r2, [r7, #20]
 8010368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801036c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010378:	691b      	ldr	r3, [r3, #16]
 801037a:	697a      	ldr	r2, [r7, #20]
 801037c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010380:	f043 0318 	orr.w	r3, r3, #24
 8010384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	697a      	ldr	r2, [r7, #20]
 8010390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010394:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010398:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801039a:	7afb      	ldrb	r3, [r7, #11]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d10f      	bne.n	80103c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103a6:	461a      	mov	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	697a      	ldr	r2, [r7, #20]
 80103b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80103be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80103c0:	2300      	movs	r3, #0
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	371c      	adds	r7, #28
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	4f54300a 	.word	0x4f54300a

080103d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80103dc:	2300      	movs	r3, #0
 80103de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	3301      	adds	r3, #1
 80103e4:	60fb      	str	r3, [r7, #12]
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	4a13      	ldr	r2, [pc, #76]	; (8010438 <USB_CoreReset+0x64>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d901      	bls.n	80103f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80103ee:	2303      	movs	r3, #3
 80103f0:	e01b      	b.n	801042a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	691b      	ldr	r3, [r3, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	daf2      	bge.n	80103e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80103fa:	2300      	movs	r3, #0
 80103fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	691b      	ldr	r3, [r3, #16]
 8010402:	f043 0201 	orr.w	r2, r3, #1
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	3301      	adds	r3, #1
 801040e:	60fb      	str	r3, [r7, #12]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	4a09      	ldr	r2, [pc, #36]	; (8010438 <USB_CoreReset+0x64>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d901      	bls.n	801041c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010418:	2303      	movs	r3, #3
 801041a:	e006      	b.n	801042a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	691b      	ldr	r3, [r3, #16]
 8010420:	f003 0301 	and.w	r3, r3, #1
 8010424:	2b01      	cmp	r3, #1
 8010426:	d0f0      	beq.n	801040a <USB_CoreReset+0x36>

  return HAL_OK;
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3714      	adds	r7, #20
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	00030d40 	.word	0x00030d40

0801043c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010448:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801044c:	f005 f820 	bl	8015490 <malloc>
 8010450:	4603      	mov	r3, r0
 8010452:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d105      	bne.n	8010466 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2200      	movs	r2, #0
 801045e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010462:	2302      	movs	r3, #2
 8010464:	e066      	b.n	8010534 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	68fa      	ldr	r2, [r7, #12]
 801046a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	7c1b      	ldrb	r3, [r3, #16]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d119      	bne.n	80104aa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010476:	f44f 7300 	mov.w	r3, #512	; 0x200
 801047a:	2202      	movs	r2, #2
 801047c:	2181      	movs	r1, #129	; 0x81
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f004 fe8d 	bl	801519e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2201      	movs	r2, #1
 8010488:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801048a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801048e:	2202      	movs	r2, #2
 8010490:	2101      	movs	r1, #1
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f004 fe83 	bl	801519e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2201      	movs	r2, #1
 801049c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2210      	movs	r2, #16
 80104a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80104a8:	e016      	b.n	80104d8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80104aa:	2340      	movs	r3, #64	; 0x40
 80104ac:	2202      	movs	r2, #2
 80104ae:	2181      	movs	r1, #129	; 0x81
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f004 fe74 	bl	801519e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2201      	movs	r2, #1
 80104ba:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80104bc:	2340      	movs	r3, #64	; 0x40
 80104be:	2202      	movs	r2, #2
 80104c0:	2101      	movs	r1, #1
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f004 fe6b 	bl	801519e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2210      	movs	r2, #16
 80104d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80104d8:	2308      	movs	r3, #8
 80104da:	2203      	movs	r2, #3
 80104dc:	2182      	movs	r1, #130	; 0x82
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f004 fe5d 	bl	801519e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2201      	movs	r2, #1
 80104e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2200      	movs	r2, #0
 80104fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	7c1b      	ldrb	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d109      	bne.n	8010522 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010518:	2101      	movs	r1, #1
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f004 ff2e 	bl	801537c <USBD_LL_PrepareReceive>
 8010520:	e007      	b.n	8010532 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010528:	2340      	movs	r3, #64	; 0x40
 801052a:	2101      	movs	r1, #1
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f004 ff25 	bl	801537c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010532:	2300      	movs	r3, #0
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	460b      	mov	r3, r1
 8010546:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010548:	2300      	movs	r3, #0
 801054a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801054c:	2181      	movs	r1, #129	; 0x81
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f004 fe4b 	bl	80151ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801055a:	2101      	movs	r1, #1
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f004 fe44 	bl	80151ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2200      	movs	r2, #0
 8010566:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801056a:	2182      	movs	r1, #130	; 0x82
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f004 fe3c 	bl	80151ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00e      	beq.n	80105aa <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801059c:	4618      	mov	r0, r3
 801059e:	f004 ff7f 	bl	80154a0 <free>
    pdev->pClassData = NULL;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80105aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b086      	sub	sp, #24
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80105c6:	2300      	movs	r3, #0
 80105c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80105ca:	2300      	movs	r3, #0
 80105cc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80105ce:	2300      	movs	r3, #0
 80105d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d03a      	beq.n	8010654 <USBD_CDC_Setup+0xa0>
 80105de:	2b20      	cmp	r3, #32
 80105e0:	f040 8097 	bne.w	8010712 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	88db      	ldrh	r3, [r3, #6]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d029      	beq.n	8010640 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	b25b      	sxtb	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	da11      	bge.n	801061a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	683a      	ldr	r2, [r7, #0]
 8010600:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010602:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010604:	683a      	ldr	r2, [r7, #0]
 8010606:	88d2      	ldrh	r2, [r2, #6]
 8010608:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801060a:	6939      	ldr	r1, [r7, #16]
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	88db      	ldrh	r3, [r3, #6]
 8010610:	461a      	mov	r2, r3
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f001 faac 	bl	8011b70 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010618:	e082      	b.n	8010720 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	785a      	ldrb	r2, [r3, #1]
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	88db      	ldrh	r3, [r3, #6]
 8010628:	b2da      	uxtb	r2, r3
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010630:	6939      	ldr	r1, [r7, #16]
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	88db      	ldrh	r3, [r3, #6]
 8010636:	461a      	mov	r2, r3
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f001 fac5 	bl	8011bc8 <USBD_CtlPrepareRx>
    break;
 801063e:	e06f      	b.n	8010720 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	683a      	ldr	r2, [r7, #0]
 801064a:	7850      	ldrb	r0, [r2, #1]
 801064c:	2200      	movs	r2, #0
 801064e:	6839      	ldr	r1, [r7, #0]
 8010650:	4798      	blx	r3
    break;
 8010652:	e065      	b.n	8010720 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	785b      	ldrb	r3, [r3, #1]
 8010658:	2b0b      	cmp	r3, #11
 801065a:	d84f      	bhi.n	80106fc <USBD_CDC_Setup+0x148>
 801065c:	a201      	add	r2, pc, #4	; (adr r2, 8010664 <USBD_CDC_Setup+0xb0>)
 801065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010662:	bf00      	nop
 8010664:	08010695 	.word	0x08010695
 8010668:	0801070b 	.word	0x0801070b
 801066c:	080106fd 	.word	0x080106fd
 8010670:	080106fd 	.word	0x080106fd
 8010674:	080106fd 	.word	0x080106fd
 8010678:	080106fd 	.word	0x080106fd
 801067c:	080106fd 	.word	0x080106fd
 8010680:	080106fd 	.word	0x080106fd
 8010684:	080106fd 	.word	0x080106fd
 8010688:	080106fd 	.word	0x080106fd
 801068c:	080106bd 	.word	0x080106bd
 8010690:	080106e5 	.word	0x080106e5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801069a:	2b03      	cmp	r3, #3
 801069c:	d107      	bne.n	80106ae <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801069e:	f107 030c 	add.w	r3, r7, #12
 80106a2:	2202      	movs	r2, #2
 80106a4:	4619      	mov	r1, r3
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f001 fa62 	bl	8011b70 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80106ac:	e030      	b.n	8010710 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80106ae:	6839      	ldr	r1, [r7, #0]
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f001 f9ec 	bl	8011a8e <USBD_CtlError>
        ret = USBD_FAIL;
 80106b6:	2303      	movs	r3, #3
 80106b8:	75fb      	strb	r3, [r7, #23]
      break;
 80106ba:	e029      	b.n	8010710 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106c2:	2b03      	cmp	r3, #3
 80106c4:	d107      	bne.n	80106d6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80106c6:	f107 030f 	add.w	r3, r7, #15
 80106ca:	2201      	movs	r2, #1
 80106cc:	4619      	mov	r1, r3
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f001 fa4e 	bl	8011b70 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80106d4:	e01c      	b.n	8010710 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80106d6:	6839      	ldr	r1, [r7, #0]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f001 f9d8 	bl	8011a8e <USBD_CtlError>
        ret = USBD_FAIL;
 80106de:	2303      	movs	r3, #3
 80106e0:	75fb      	strb	r3, [r7, #23]
      break;
 80106e2:	e015      	b.n	8010710 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106ea:	2b03      	cmp	r3, #3
 80106ec:	d00f      	beq.n	801070e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f001 f9cc 	bl	8011a8e <USBD_CtlError>
        ret = USBD_FAIL;
 80106f6:	2303      	movs	r3, #3
 80106f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80106fa:	e008      	b.n	801070e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f001 f9c5 	bl	8011a8e <USBD_CtlError>
      ret = USBD_FAIL;
 8010704:	2303      	movs	r3, #3
 8010706:	75fb      	strb	r3, [r7, #23]
      break;
 8010708:	e002      	b.n	8010710 <USBD_CDC_Setup+0x15c>
      break;
 801070a:	bf00      	nop
 801070c:	e008      	b.n	8010720 <USBD_CDC_Setup+0x16c>
      break;
 801070e:	bf00      	nop
    }
    break;
 8010710:	e006      	b.n	8010720 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010712:	6839      	ldr	r1, [r7, #0]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f001 f9ba 	bl	8011a8e <USBD_CtlError>
    ret = USBD_FAIL;
 801071a:	2303      	movs	r3, #3
 801071c:	75fb      	strb	r3, [r7, #23]
    break;
 801071e:	bf00      	nop
  }

  return (uint8_t)ret;
 8010720:	7dfb      	ldrb	r3, [r7, #23]
}
 8010722:	4618      	mov	r0, r3
 8010724:	3718      	adds	r7, #24
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop

0801072c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	460b      	mov	r3, r1
 8010736:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801073e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010746:	2b00      	cmp	r3, #0
 8010748:	d101      	bne.n	801074e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801074a:	2303      	movs	r3, #3
 801074c:	e049      	b.n	80107e2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010754:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010756:	78fa      	ldrb	r2, [r7, #3]
 8010758:	6879      	ldr	r1, [r7, #4]
 801075a:	4613      	mov	r3, r2
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	440b      	add	r3, r1
 8010764:	3318      	adds	r3, #24
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d029      	beq.n	80107c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801076c:	78fa      	ldrb	r2, [r7, #3]
 801076e:	6879      	ldr	r1, [r7, #4]
 8010770:	4613      	mov	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	440b      	add	r3, r1
 801077a:	3318      	adds	r3, #24
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	78f9      	ldrb	r1, [r7, #3]
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	460b      	mov	r3, r1
 8010784:	00db      	lsls	r3, r3, #3
 8010786:	1a5b      	subs	r3, r3, r1
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	4403      	add	r3, r0
 801078c:	3344      	adds	r3, #68	; 0x44
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	fbb2 f1f3 	udiv	r1, r2, r3
 8010794:	fb03 f301 	mul.w	r3, r3, r1
 8010798:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801079a:	2b00      	cmp	r3, #0
 801079c:	d110      	bne.n	80107c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801079e:	78fa      	ldrb	r2, [r7, #3]
 80107a0:	6879      	ldr	r1, [r7, #4]
 80107a2:	4613      	mov	r3, r2
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	4413      	add	r3, r2
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	440b      	add	r3, r1
 80107ac:	3318      	adds	r3, #24
 80107ae:	2200      	movs	r2, #0
 80107b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80107b2:	78f9      	ldrb	r1, [r7, #3]
 80107b4:	2300      	movs	r3, #0
 80107b6:	2200      	movs	r2, #0
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f004 fdbe 	bl	801533a <USBD_LL_Transmit>
 80107be:	e00f      	b.n	80107e0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2200      	movs	r2, #0
 80107c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	68ba      	ldr	r2, [r7, #8]
 80107d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80107d6:	68ba      	ldr	r2, [r7, #8]
 80107d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80107dc:	78fa      	ldrb	r2, [r7, #3]
 80107de:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3710      	adds	r7, #16
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b084      	sub	sp, #16
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	460b      	mov	r3, r1
 80107f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010804:	2b00      	cmp	r3, #0
 8010806:	d101      	bne.n	801080c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010808:	2303      	movs	r3, #3
 801080a:	e015      	b.n	8010838 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801080c:	78fb      	ldrb	r3, [r7, #3]
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f004 fdd4 	bl	80153be <USBD_LL_GetRxDataSize>
 8010816:	4602      	mov	r2, r0
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	68fa      	ldr	r2, [r7, #12]
 8010828:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010832:	4611      	mov	r1, r2
 8010834:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3710      	adds	r7, #16
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801084e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d015      	beq.n	8010886 <USBD_CDC_EP0_RxReady+0x46>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010860:	2bff      	cmp	r3, #255	; 0xff
 8010862:	d010      	beq.n	8010886 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010872:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801087a:	b292      	uxth	r2, r2
 801087c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	22ff      	movs	r2, #255	; 0xff
 8010882:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3710      	adds	r7, #16
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2243      	movs	r2, #67	; 0x43
 801089c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801089e:	4b03      	ldr	r3, [pc, #12]	; (80108ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr
 80108ac:	20004120 	.word	0x20004120

080108b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2243      	movs	r2, #67	; 0x43
 80108bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80108be:	4b03      	ldr	r3, [pc, #12]	; (80108cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	200040dc 	.word	0x200040dc

080108d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2243      	movs	r2, #67	; 0x43
 80108dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80108de:	4b03      	ldr	r3, [pc, #12]	; (80108ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr
 80108ec:	20004164 	.word	0x20004164

080108f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	220a      	movs	r2, #10
 80108fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80108fe:	4b03      	ldr	r3, [pc, #12]	; (801090c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010900:	4618      	mov	r0, r3
 8010902:	370c      	adds	r7, #12
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr
 801090c:	20004098 	.word	0x20004098

08010910 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d101      	bne.n	8010924 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010920:	2303      	movs	r3, #3
 8010922:	e004      	b.n	801092e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801092c:	2300      	movs	r3, #0
}
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801093a:	b480      	push	{r7}
 801093c:	b087      	sub	sp, #28
 801093e:	af00      	add	r7, sp, #0
 8010940:	60f8      	str	r0, [r7, #12]
 8010942:	60b9      	str	r1, [r7, #8]
 8010944:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801094c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	371c      	adds	r7, #28
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801097c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3714      	adds	r7, #20
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80109a4:	2301      	movs	r3, #1
 80109a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d101      	bne.n	80109b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80109b2:	2303      	movs	r3, #3
 80109b4:	e01a      	b.n	80109ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d114      	bne.n	80109ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	2201      	movs	r2, #1
 80109c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80109de:	2181      	movs	r1, #129	; 0x81
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f004 fcaa 	bl	801533a <USBD_LL_Transmit>

    ret = USBD_OK;
 80109e6:	2300      	movs	r3, #0
 80109e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80109ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3710      	adds	r7, #16
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d101      	bne.n	8010a12 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010a0e:	2303      	movs	r3, #3
 8010a10:	e016      	b.n	8010a40 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	7c1b      	ldrb	r3, [r3, #16]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d109      	bne.n	8010a2e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a24:	2101      	movs	r1, #1
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f004 fca8 	bl	801537c <USBD_LL_PrepareReceive>
 8010a2c:	e007      	b.n	8010a3e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a34:	2340      	movs	r3, #64	; 0x40
 8010a36:	2101      	movs	r1, #1
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f004 fc9f 	bl	801537c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010a3e:	2300      	movs	r3, #0
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b086      	sub	sp, #24
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	4613      	mov	r3, r2
 8010a54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d101      	bne.n	8010a60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010a5c:	2303      	movs	r3, #3
 8010a5e:	e025      	b.n	8010aac <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d003      	beq.n	8010a72 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d003      	beq.n	8010a84 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d003      	beq.n	8010a92 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2201      	movs	r2, #1
 8010a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	79fa      	ldrb	r2, [r7, #7]
 8010a9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f004 fb15 	bl	80150d0 <USBD_LL_Init>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3718      	adds	r7, #24
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d101      	bne.n	8010acc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010ac8:	2303      	movs	r3, #3
 8010aca:	e010      	b.n	8010aee <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	683a      	ldr	r2, [r7, #0]
 8010ad0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010adc:	f107 020e 	add.w	r2, r7, #14
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	4798      	blx	r3
 8010ae4:	4602      	mov	r2, r0
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010aec:	2300      	movs	r3, #0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3710      	adds	r7, #16
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b082      	sub	sp, #8
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f004 fb32 	bl	8015168 <USBD_LL_Start>
 8010b04:	4603      	mov	r3, r0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010b0e:	b480      	push	{r7}
 8010b10:	b083      	sub	sp, #12
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010b16:	2300      	movs	r3, #0
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010b30:	2303      	movs	r3, #3
 8010b32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d009      	beq.n	8010b52 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	78fa      	ldrb	r2, [r7, #3]
 8010b48:	4611      	mov	r1, r2
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	4798      	blx	r3
 8010b4e:	4603      	mov	r3, r0
 8010b50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	460b      	mov	r3, r1
 8010b66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d007      	beq.n	8010b82 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	78fa      	ldrb	r2, [r7, #3]
 8010b7c:	4611      	mov	r1, r2
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	4798      	blx	r3
  }

  return USBD_OK;
 8010b82:	2300      	movs	r3, #0
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b9c:	6839      	ldr	r1, [r7, #0]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f000 ff3b 	bl	8011a1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010bc0:	f003 031f 	and.w	r3, r3, #31
 8010bc4:	2b02      	cmp	r3, #2
 8010bc6:	d01a      	beq.n	8010bfe <USBD_LL_SetupStage+0x72>
 8010bc8:	2b02      	cmp	r3, #2
 8010bca:	d822      	bhi.n	8010c12 <USBD_LL_SetupStage+0x86>
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <USBD_LL_SetupStage+0x4a>
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d00a      	beq.n	8010bea <USBD_LL_SetupStage+0x5e>
 8010bd4:	e01d      	b.n	8010c12 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010bdc:	4619      	mov	r1, r3
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fa18 	bl	8011014 <USBD_StdDevReq>
 8010be4:	4603      	mov	r3, r0
 8010be6:	73fb      	strb	r3, [r7, #15]
      break;
 8010be8:	e020      	b.n	8010c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 fa7c 	bl	80110f0 <USBD_StdItfReq>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8010bfc:	e016      	b.n	8010c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010c04:	4619      	mov	r1, r3
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f000 faba 	bl	8011180 <USBD_StdEPReq>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8010c10:	e00c      	b.n	8010c2c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	4619      	mov	r1, r3
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f004 fb01 	bl	8015228 <USBD_LL_StallEP>
 8010c26:	4603      	mov	r3, r0
 8010c28:	73fb      	strb	r3, [r7, #15]
      break;
 8010c2a:	bf00      	nop
  }

  return ret;
 8010c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3710      	adds	r7, #16
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b086      	sub	sp, #24
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	60f8      	str	r0, [r7, #12]
 8010c3e:	460b      	mov	r3, r1
 8010c40:	607a      	str	r2, [r7, #4]
 8010c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c44:	7afb      	ldrb	r3, [r7, #11]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d137      	bne.n	8010cba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010c50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c58:	2b03      	cmp	r3, #3
 8010c5a:	d14a      	bne.n	8010cf2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	689a      	ldr	r2, [r3, #8]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d913      	bls.n	8010c90 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	689a      	ldr	r2, [r3, #8]
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	1ad2      	subs	r2, r2, r3
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	68da      	ldr	r2, [r3, #12]
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	689b      	ldr	r3, [r3, #8]
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	bf28      	it	cs
 8010c82:	4613      	movcs	r3, r2
 8010c84:	461a      	mov	r2, r3
 8010c86:	6879      	ldr	r1, [r7, #4]
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f000 ffba 	bl	8011c02 <USBD_CtlContinueRx>
 8010c8e:	e030      	b.n	8010cf2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c96:	691b      	ldr	r3, [r3, #16]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00a      	beq.n	8010cb2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010ca2:	2b03      	cmp	r3, #3
 8010ca4:	d105      	bne.n	8010cb2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cac:	691b      	ldr	r3, [r3, #16]
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	f000 ffb6 	bl	8011c24 <USBD_CtlSendStatus>
 8010cb8:	e01b      	b.n	8010cf2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cc0:	699b      	ldr	r3, [r3, #24]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d013      	beq.n	8010cee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010ccc:	2b03      	cmp	r3, #3
 8010cce:	d10e      	bne.n	8010cee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd6:	699b      	ldr	r3, [r3, #24]
 8010cd8:	7afa      	ldrb	r2, [r7, #11]
 8010cda:	4611      	mov	r1, r2
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	4798      	blx	r3
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010ce4:	7dfb      	ldrb	r3, [r7, #23]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d003      	beq.n	8010cf2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8010cea:	7dfb      	ldrb	r3, [r7, #23]
 8010cec:	e002      	b.n	8010cf4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010cee:	2303      	movs	r3, #3
 8010cf0:	e000      	b.n	8010cf4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3718      	adds	r7, #24
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b086      	sub	sp, #24
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	460b      	mov	r3, r1
 8010d06:	607a      	str	r2, [r7, #4]
 8010d08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010d0a:	7afb      	ldrb	r3, [r7, #11]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d16a      	bne.n	8010de6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	3314      	adds	r3, #20
 8010d14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010d1c:	2b02      	cmp	r3, #2
 8010d1e:	d155      	bne.n	8010dcc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	689a      	ldr	r2, [r3, #8]
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d914      	bls.n	8010d56 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	689a      	ldr	r2, [r3, #8]
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	1ad2      	subs	r2, r2, r3
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	461a      	mov	r2, r3
 8010d40:	6879      	ldr	r1, [r7, #4]
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f000 ff2f 	bl	8011ba6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d48:	2300      	movs	r3, #0
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f004 fb14 	bl	801537c <USBD_LL_PrepareReceive>
 8010d54:	e03a      	b.n	8010dcc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	68da      	ldr	r2, [r3, #12]
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	689b      	ldr	r3, [r3, #8]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d11c      	bne.n	8010d9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	685a      	ldr	r2, [r3, #4]
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d316      	bcc.n	8010d9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	685a      	ldr	r2, [r3, #4]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d20f      	bcs.n	8010d9c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	2100      	movs	r1, #0
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f000 ff10 	bl	8011ba6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d8e:	2300      	movs	r3, #0
 8010d90:	2200      	movs	r2, #0
 8010d92:	2100      	movs	r1, #0
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f004 faf1 	bl	801537c <USBD_LL_PrepareReceive>
 8010d9a:	e017      	b.n	8010dcc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d00a      	beq.n	8010dbe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010dae:	2b03      	cmp	r3, #3
 8010db0:	d105      	bne.n	8010dbe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010db8:	68db      	ldr	r3, [r3, #12]
 8010dba:	68f8      	ldr	r0, [r7, #12]
 8010dbc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010dbe:	2180      	movs	r1, #128	; 0x80
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f004 fa31 	bl	8015228 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f000 ff3f 	bl	8011c4a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d123      	bne.n	8010e1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f7ff fe99 	bl	8010b0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2200      	movs	r2, #0
 8010de0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010de4:	e01b      	b.n	8010e1e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dec:	695b      	ldr	r3, [r3, #20]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d013      	beq.n	8010e1a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8010df8:	2b03      	cmp	r3, #3
 8010dfa:	d10e      	bne.n	8010e1a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	7afa      	ldrb	r2, [r7, #11]
 8010e06:	4611      	mov	r1, r2
 8010e08:	68f8      	ldr	r0, [r7, #12]
 8010e0a:	4798      	blx	r3
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010e10:	7dfb      	ldrb	r3, [r7, #23]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d003      	beq.n	8010e1e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8010e16:	7dfb      	ldrb	r3, [r7, #23]
 8010e18:	e002      	b.n	8010e20 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010e1a:	2303      	movs	r3, #3
 8010e1c:	e000      	b.n	8010e20 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8010e1e:	2300      	movs	r3, #0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3718      	adds	r7, #24
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2201      	movs	r2, #1
 8010e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d009      	beq.n	8010e6c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	6852      	ldr	r2, [r2, #4]
 8010e64:	b2d2      	uxtb	r2, r2
 8010e66:	4611      	mov	r1, r2
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e6c:	2340      	movs	r3, #64	; 0x40
 8010e6e:	2200      	movs	r2, #0
 8010e70:	2100      	movs	r1, #0
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f004 f993 	bl	801519e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2240      	movs	r2, #64	; 0x40
 8010e84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e88:	2340      	movs	r3, #64	; 0x40
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	2180      	movs	r1, #128	; 0x80
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f004 f985 	bl	801519e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2201      	movs	r2, #1
 8010e98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2240      	movs	r2, #64	; 0x40
 8010e9e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010ea0:	2300      	movs	r3, #0
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010eaa:	b480      	push	{r7}
 8010eac:	b083      	sub	sp, #12
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	78fa      	ldrb	r2, [r7, #3]
 8010eba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	370c      	adds	r7, #12
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr

08010eca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010eca:	b480      	push	{r7}
 8010ecc:	b083      	sub	sp, #12
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2204      	movs	r2, #4
 8010ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010ee6:	2300      	movs	r3, #0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	d105      	bne.n	8010f12 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010f12:	2300      	movs	r3, #0
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f2e:	2b03      	cmp	r3, #3
 8010f30:	d10b      	bne.n	8010f4a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f38:	69db      	ldr	r3, [r3, #28]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d005      	beq.n	8010f4a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f44:	69db      	ldr	r3, [r3, #28]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010f60:	2300      	movs	r3, #0
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	370c      	adds	r7, #12
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010f6e:	b480      	push	{r7}
 8010f70:	b083      	sub	sp, #12
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
 8010f76:	460b      	mov	r3, r1
 8010f78:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010f7a:	2300      	movs	r3, #0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f90:	2300      	movs	r3, #0
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	370c      	adds	r7, #12
 8010f96:	46bd      	mov	sp, r7
 8010f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9c:	4770      	bx	lr

08010f9e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2201      	movs	r2, #1
 8010faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d009      	beq.n	8010fcc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	6852      	ldr	r2, [r2, #4]
 8010fc4:	b2d2      	uxtb	r2, r2
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	4798      	blx	r3
  }

  return USBD_OK;
 8010fcc:	2300      	movs	r3, #0
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b087      	sub	sp, #28
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	3301      	adds	r3, #1
 8010fec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010ff4:	8a3b      	ldrh	r3, [r7, #16]
 8010ff6:	021b      	lsls	r3, r3, #8
 8010ff8:	b21a      	sxth	r2, r3
 8010ffa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010ffe:	4313      	orrs	r3, r2
 8011000:	b21b      	sxth	r3, r3
 8011002:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011004:	89fb      	ldrh	r3, [r7, #14]
}
 8011006:	4618      	mov	r0, r3
 8011008:	371c      	adds	r7, #28
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
	...

08011014 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801101e:	2300      	movs	r3, #0
 8011020:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801102a:	2b40      	cmp	r3, #64	; 0x40
 801102c:	d005      	beq.n	801103a <USBD_StdDevReq+0x26>
 801102e:	2b40      	cmp	r3, #64	; 0x40
 8011030:	d853      	bhi.n	80110da <USBD_StdDevReq+0xc6>
 8011032:	2b00      	cmp	r3, #0
 8011034:	d00b      	beq.n	801104e <USBD_StdDevReq+0x3a>
 8011036:	2b20      	cmp	r3, #32
 8011038:	d14f      	bne.n	80110da <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	6839      	ldr	r1, [r7, #0]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	4798      	blx	r3
 8011048:	4603      	mov	r3, r0
 801104a:	73fb      	strb	r3, [r7, #15]
    break;
 801104c:	e04a      	b.n	80110e4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	785b      	ldrb	r3, [r3, #1]
 8011052:	2b09      	cmp	r3, #9
 8011054:	d83b      	bhi.n	80110ce <USBD_StdDevReq+0xba>
 8011056:	a201      	add	r2, pc, #4	; (adr r2, 801105c <USBD_StdDevReq+0x48>)
 8011058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801105c:	080110b1 	.word	0x080110b1
 8011060:	080110c5 	.word	0x080110c5
 8011064:	080110cf 	.word	0x080110cf
 8011068:	080110bb 	.word	0x080110bb
 801106c:	080110cf 	.word	0x080110cf
 8011070:	0801108f 	.word	0x0801108f
 8011074:	08011085 	.word	0x08011085
 8011078:	080110cf 	.word	0x080110cf
 801107c:	080110a7 	.word	0x080110a7
 8011080:	08011099 	.word	0x08011099
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011084:	6839      	ldr	r1, [r7, #0]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 f9d8 	bl	801143c <USBD_GetDescriptor>
      break;
 801108c:	e024      	b.n	80110d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801108e:	6839      	ldr	r1, [r7, #0]
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 fb3d 	bl	8011710 <USBD_SetAddress>
      break;
 8011096:	e01f      	b.n	80110d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011098:	6839      	ldr	r1, [r7, #0]
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 fb7c 	bl	8011798 <USBD_SetConfig>
 80110a0:	4603      	mov	r3, r0
 80110a2:	73fb      	strb	r3, [r7, #15]
      break;
 80110a4:	e018      	b.n	80110d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80110a6:	6839      	ldr	r1, [r7, #0]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 fc19 	bl	80118e0 <USBD_GetConfig>
      break;
 80110ae:	e013      	b.n	80110d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fc49 	bl	801194a <USBD_GetStatus>
      break;
 80110b8:	e00e      	b.n	80110d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 fc77 	bl	80119b0 <USBD_SetFeature>
      break;
 80110c2:	e009      	b.n	80110d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80110c4:	6839      	ldr	r1, [r7, #0]
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 fc86 	bl	80119d8 <USBD_ClrFeature>
      break;
 80110cc:	e004      	b.n	80110d8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80110ce:	6839      	ldr	r1, [r7, #0]
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f000 fcdc 	bl	8011a8e <USBD_CtlError>
      break;
 80110d6:	bf00      	nop
    }
    break;
 80110d8:	e004      	b.n	80110e4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80110da:	6839      	ldr	r1, [r7, #0]
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 fcd6 	bl	8011a8e <USBD_CtlError>
    break;
 80110e2:	bf00      	nop
  }

  return ret;
 80110e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop

080110f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110fa:	2300      	movs	r3, #0
 80110fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011106:	2b40      	cmp	r3, #64	; 0x40
 8011108:	d005      	beq.n	8011116 <USBD_StdItfReq+0x26>
 801110a:	2b40      	cmp	r3, #64	; 0x40
 801110c:	d82e      	bhi.n	801116c <USBD_StdItfReq+0x7c>
 801110e:	2b00      	cmp	r3, #0
 8011110:	d001      	beq.n	8011116 <USBD_StdItfReq+0x26>
 8011112:	2b20      	cmp	r3, #32
 8011114:	d12a      	bne.n	801116c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801111c:	3b01      	subs	r3, #1
 801111e:	2b02      	cmp	r3, #2
 8011120:	d81d      	bhi.n	801115e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	889b      	ldrh	r3, [r3, #4]
 8011126:	b2db      	uxtb	r3, r3
 8011128:	2b01      	cmp	r3, #1
 801112a:	d813      	bhi.n	8011154 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	6839      	ldr	r1, [r7, #0]
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	4798      	blx	r3
 801113a:	4603      	mov	r3, r0
 801113c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	88db      	ldrh	r3, [r3, #6]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d110      	bne.n	8011168 <USBD_StdItfReq+0x78>
 8011146:	7bfb      	ldrb	r3, [r7, #15]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10d      	bne.n	8011168 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 fd69 	bl	8011c24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011152:	e009      	b.n	8011168 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8011154:	6839      	ldr	r1, [r7, #0]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 fc99 	bl	8011a8e <USBD_CtlError>
      break;
 801115c:	e004      	b.n	8011168 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 801115e:	6839      	ldr	r1, [r7, #0]
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 fc94 	bl	8011a8e <USBD_CtlError>
      break;
 8011166:	e000      	b.n	801116a <USBD_StdItfReq+0x7a>
      break;
 8011168:	bf00      	nop
    }
    break;
 801116a:	e004      	b.n	8011176 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 801116c:	6839      	ldr	r1, [r7, #0]
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f000 fc8d 	bl	8011a8e <USBD_CtlError>
    break;
 8011174:	bf00      	nop
  }

  return ret;
 8011176:	7bfb      	ldrb	r3, [r7, #15]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3710      	adds	r7, #16
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801118a:	2300      	movs	r3, #0
 801118c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	889b      	ldrh	r3, [r3, #4]
 8011192:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801119c:	2b40      	cmp	r3, #64	; 0x40
 801119e:	d007      	beq.n	80111b0 <USBD_StdEPReq+0x30>
 80111a0:	2b40      	cmp	r3, #64	; 0x40
 80111a2:	f200 8140 	bhi.w	8011426 <USBD_StdEPReq+0x2a6>
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00c      	beq.n	80111c4 <USBD_StdEPReq+0x44>
 80111aa:	2b20      	cmp	r3, #32
 80111ac:	f040 813b 	bne.w	8011426 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111b6:	689b      	ldr	r3, [r3, #8]
 80111b8:	6839      	ldr	r1, [r7, #0]
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	4798      	blx	r3
 80111be:	4603      	mov	r3, r0
 80111c0:	73fb      	strb	r3, [r7, #15]
    break;
 80111c2:	e135      	b.n	8011430 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	785b      	ldrb	r3, [r3, #1]
 80111c8:	2b03      	cmp	r3, #3
 80111ca:	d007      	beq.n	80111dc <USBD_StdEPReq+0x5c>
 80111cc:	2b03      	cmp	r3, #3
 80111ce:	f300 8124 	bgt.w	801141a <USBD_StdEPReq+0x29a>
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d07b      	beq.n	80112ce <USBD_StdEPReq+0x14e>
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d03b      	beq.n	8011252 <USBD_StdEPReq+0xd2>
 80111da:	e11e      	b.n	801141a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111e2:	2b02      	cmp	r3, #2
 80111e4:	d002      	beq.n	80111ec <USBD_StdEPReq+0x6c>
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	d016      	beq.n	8011218 <USBD_StdEPReq+0x98>
 80111ea:	e02c      	b.n	8011246 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111ec:	7bbb      	ldrb	r3, [r7, #14]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00d      	beq.n	801120e <USBD_StdEPReq+0x8e>
 80111f2:	7bbb      	ldrb	r3, [r7, #14]
 80111f4:	2b80      	cmp	r3, #128	; 0x80
 80111f6:	d00a      	beq.n	801120e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80111f8:	7bbb      	ldrb	r3, [r7, #14]
 80111fa:	4619      	mov	r1, r3
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f004 f813 	bl	8015228 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011202:	2180      	movs	r1, #128	; 0x80
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f004 f80f 	bl	8015228 <USBD_LL_StallEP>
 801120a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801120c:	e020      	b.n	8011250 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 801120e:	6839      	ldr	r1, [r7, #0]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 fc3c 	bl	8011a8e <USBD_CtlError>
        break;
 8011216:	e01b      	b.n	8011250 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	885b      	ldrh	r3, [r3, #2]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d10e      	bne.n	801123e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011220:	7bbb      	ldrb	r3, [r7, #14]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00b      	beq.n	801123e <USBD_StdEPReq+0xbe>
 8011226:	7bbb      	ldrb	r3, [r7, #14]
 8011228:	2b80      	cmp	r3, #128	; 0x80
 801122a:	d008      	beq.n	801123e <USBD_StdEPReq+0xbe>
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	88db      	ldrh	r3, [r3, #6]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d104      	bne.n	801123e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011234:	7bbb      	ldrb	r3, [r7, #14]
 8011236:	4619      	mov	r1, r3
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f003 fff5 	bl	8015228 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fcf0 	bl	8011c24 <USBD_CtlSendStatus>

        break;
 8011244:	e004      	b.n	8011250 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fc20 	bl	8011a8e <USBD_CtlError>
        break;
 801124e:	bf00      	nop
      }
      break;
 8011250:	e0e8      	b.n	8011424 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011258:	2b02      	cmp	r3, #2
 801125a:	d002      	beq.n	8011262 <USBD_StdEPReq+0xe2>
 801125c:	2b03      	cmp	r3, #3
 801125e:	d016      	beq.n	801128e <USBD_StdEPReq+0x10e>
 8011260:	e02e      	b.n	80112c0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011262:	7bbb      	ldrb	r3, [r7, #14]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d00d      	beq.n	8011284 <USBD_StdEPReq+0x104>
 8011268:	7bbb      	ldrb	r3, [r7, #14]
 801126a:	2b80      	cmp	r3, #128	; 0x80
 801126c:	d00a      	beq.n	8011284 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 801126e:	7bbb      	ldrb	r3, [r7, #14]
 8011270:	4619      	mov	r1, r3
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f003 ffd8 	bl	8015228 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011278:	2180      	movs	r1, #128	; 0x80
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f003 ffd4 	bl	8015228 <USBD_LL_StallEP>
 8011280:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011282:	e023      	b.n	80112cc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011284:	6839      	ldr	r1, [r7, #0]
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 fc01 	bl	8011a8e <USBD_CtlError>
        break;
 801128c:	e01e      	b.n	80112cc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	885b      	ldrh	r3, [r3, #2]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d119      	bne.n	80112ca <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011296:	7bbb      	ldrb	r3, [r7, #14]
 8011298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801129c:	2b00      	cmp	r3, #0
 801129e:	d004      	beq.n	80112aa <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80112a0:	7bbb      	ldrb	r3, [r7, #14]
 80112a2:	4619      	mov	r1, r3
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f003 ffde 	bl	8015266 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f000 fcba 	bl	8011c24 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	6839      	ldr	r1, [r7, #0]
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	4798      	blx	r3
        }
        break;
 80112be:	e004      	b.n	80112ca <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80112c0:	6839      	ldr	r1, [r7, #0]
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fbe3 	bl	8011a8e <USBD_CtlError>
        break;
 80112c8:	e000      	b.n	80112cc <USBD_StdEPReq+0x14c>
        break;
 80112ca:	bf00      	nop
      }
      break;
 80112cc:	e0aa      	b.n	8011424 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112d4:	2b02      	cmp	r3, #2
 80112d6:	d002      	beq.n	80112de <USBD_StdEPReq+0x15e>
 80112d8:	2b03      	cmp	r3, #3
 80112da:	d032      	beq.n	8011342 <USBD_StdEPReq+0x1c2>
 80112dc:	e097      	b.n	801140e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112de:	7bbb      	ldrb	r3, [r7, #14]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d007      	beq.n	80112f4 <USBD_StdEPReq+0x174>
 80112e4:	7bbb      	ldrb	r3, [r7, #14]
 80112e6:	2b80      	cmp	r3, #128	; 0x80
 80112e8:	d004      	beq.n	80112f4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80112ea:	6839      	ldr	r1, [r7, #0]
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fbce 	bl	8011a8e <USBD_CtlError>
          break;
 80112f2:	e091      	b.n	8011418 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	da0b      	bge.n	8011314 <USBD_StdEPReq+0x194>
 80112fc:	7bbb      	ldrb	r3, [r7, #14]
 80112fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011302:	4613      	mov	r3, r2
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	4413      	add	r3, r2
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	3310      	adds	r3, #16
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	4413      	add	r3, r2
 8011310:	3304      	adds	r3, #4
 8011312:	e00b      	b.n	801132c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011314:	7bbb      	ldrb	r3, [r7, #14]
 8011316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801131a:	4613      	mov	r3, r2
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	4413      	add	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	4413      	add	r3, r2
 801132a:	3304      	adds	r3, #4
 801132c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	2200      	movs	r2, #0
 8011332:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	2202      	movs	r2, #2
 8011338:	4619      	mov	r1, r3
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f000 fc18 	bl	8011b70 <USBD_CtlSendData>
        break;
 8011340:	e06a      	b.n	8011418 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011346:	2b00      	cmp	r3, #0
 8011348:	da11      	bge.n	801136e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801134a:	7bbb      	ldrb	r3, [r7, #14]
 801134c:	f003 020f 	and.w	r2, r3, #15
 8011350:	6879      	ldr	r1, [r7, #4]
 8011352:	4613      	mov	r3, r2
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	4413      	add	r3, r2
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	440b      	add	r3, r1
 801135c:	3324      	adds	r3, #36	; 0x24
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d117      	bne.n	8011394 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011364:	6839      	ldr	r1, [r7, #0]
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 fb91 	bl	8011a8e <USBD_CtlError>
            break;
 801136c:	e054      	b.n	8011418 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801136e:	7bbb      	ldrb	r3, [r7, #14]
 8011370:	f003 020f 	and.w	r2, r3, #15
 8011374:	6879      	ldr	r1, [r7, #4]
 8011376:	4613      	mov	r3, r2
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	4413      	add	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	440b      	add	r3, r1
 8011380:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d104      	bne.n	8011394 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 801138a:	6839      	ldr	r1, [r7, #0]
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 fb7e 	bl	8011a8e <USBD_CtlError>
            break;
 8011392:	e041      	b.n	8011418 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011398:	2b00      	cmp	r3, #0
 801139a:	da0b      	bge.n	80113b4 <USBD_StdEPReq+0x234>
 801139c:	7bbb      	ldrb	r3, [r7, #14]
 801139e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113a2:	4613      	mov	r3, r2
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	4413      	add	r3, r2
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	3310      	adds	r3, #16
 80113ac:	687a      	ldr	r2, [r7, #4]
 80113ae:	4413      	add	r3, r2
 80113b0:	3304      	adds	r3, #4
 80113b2:	e00b      	b.n	80113cc <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80113b4:	7bbb      	ldrb	r3, [r7, #14]
 80113b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113ba:	4613      	mov	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	4413      	add	r3, r2
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	4413      	add	r3, r2
 80113ca:	3304      	adds	r3, #4
 80113cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80113ce:	7bbb      	ldrb	r3, [r7, #14]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d002      	beq.n	80113da <USBD_StdEPReq+0x25a>
 80113d4:	7bbb      	ldrb	r3, [r7, #14]
 80113d6:	2b80      	cmp	r3, #128	; 0x80
 80113d8:	d103      	bne.n	80113e2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	2200      	movs	r2, #0
 80113de:	601a      	str	r2, [r3, #0]
 80113e0:	e00e      	b.n	8011400 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80113e2:	7bbb      	ldrb	r3, [r7, #14]
 80113e4:	4619      	mov	r1, r3
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f003 ff5c 	bl	80152a4 <USBD_LL_IsStallEP>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	2201      	movs	r2, #1
 80113f6:	601a      	str	r2, [r3, #0]
 80113f8:	e002      	b.n	8011400 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	2200      	movs	r2, #0
 80113fe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2202      	movs	r2, #2
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 fbb2 	bl	8011b70 <USBD_CtlSendData>
          break;
 801140c:	e004      	b.n	8011418 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 801140e:	6839      	ldr	r1, [r7, #0]
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 fb3c 	bl	8011a8e <USBD_CtlError>
        break;
 8011416:	bf00      	nop
      }
      break;
 8011418:	e004      	b.n	8011424 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 801141a:	6839      	ldr	r1, [r7, #0]
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 fb36 	bl	8011a8e <USBD_CtlError>
      break;
 8011422:	bf00      	nop
    }
    break;
 8011424:	e004      	b.n	8011430 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8011426:	6839      	ldr	r1, [r7, #0]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 fb30 	bl	8011a8e <USBD_CtlError>
    break;
 801142e:	bf00      	nop
  }

  return ret;
 8011430:	7bfb      	ldrb	r3, [r7, #15]
}
 8011432:	4618      	mov	r0, r3
 8011434:	3710      	adds	r7, #16
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
	...

0801143c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011446:	2300      	movs	r3, #0
 8011448:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801144a:	2300      	movs	r3, #0
 801144c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801144e:	2300      	movs	r3, #0
 8011450:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	885b      	ldrh	r3, [r3, #2]
 8011456:	0a1b      	lsrs	r3, r3, #8
 8011458:	b29b      	uxth	r3, r3
 801145a:	3b01      	subs	r3, #1
 801145c:	2b06      	cmp	r3, #6
 801145e:	f200 8128 	bhi.w	80116b2 <USBD_GetDescriptor+0x276>
 8011462:	a201      	add	r2, pc, #4	; (adr r2, 8011468 <USBD_GetDescriptor+0x2c>)
 8011464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011468:	08011485 	.word	0x08011485
 801146c:	0801149d 	.word	0x0801149d
 8011470:	080114dd 	.word	0x080114dd
 8011474:	080116b3 	.word	0x080116b3
 8011478:	080116b3 	.word	0x080116b3
 801147c:	08011653 	.word	0x08011653
 8011480:	0801167f 	.word	0x0801167f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	7c12      	ldrb	r2, [r2, #16]
 8011490:	f107 0108 	add.w	r1, r7, #8
 8011494:	4610      	mov	r0, r2
 8011496:	4798      	blx	r3
 8011498:	60f8      	str	r0, [r7, #12]
    break;
 801149a:	e112      	b.n	80116c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	7c1b      	ldrb	r3, [r3, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d10d      	bne.n	80114c0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ac:	f107 0208 	add.w	r2, r7, #8
 80114b0:	4610      	mov	r0, r2
 80114b2:	4798      	blx	r3
 80114b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	3301      	adds	r3, #1
 80114ba:	2202      	movs	r2, #2
 80114bc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80114be:	e100      	b.n	80116c2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c8:	f107 0208 	add.w	r2, r7, #8
 80114cc:	4610      	mov	r0, r2
 80114ce:	4798      	blx	r3
 80114d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	3301      	adds	r3, #1
 80114d6:	2202      	movs	r2, #2
 80114d8:	701a      	strb	r2, [r3, #0]
    break;
 80114da:	e0f2      	b.n	80116c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	885b      	ldrh	r3, [r3, #2]
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	2b05      	cmp	r3, #5
 80114e4:	f200 80ac 	bhi.w	8011640 <USBD_GetDescriptor+0x204>
 80114e8:	a201      	add	r2, pc, #4	; (adr r2, 80114f0 <USBD_GetDescriptor+0xb4>)
 80114ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ee:	bf00      	nop
 80114f0:	08011509 	.word	0x08011509
 80114f4:	0801153d 	.word	0x0801153d
 80114f8:	08011571 	.word	0x08011571
 80114fc:	080115a5 	.word	0x080115a5
 8011500:	080115d9 	.word	0x080115d9
 8011504:	0801160d 	.word	0x0801160d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00b      	beq.n	801152c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	7c12      	ldrb	r2, [r2, #16]
 8011520:	f107 0108 	add.w	r1, r7, #8
 8011524:	4610      	mov	r0, r2
 8011526:	4798      	blx	r3
 8011528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801152a:	e091      	b.n	8011650 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801152c:	6839      	ldr	r1, [r7, #0]
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 faad 	bl	8011a8e <USBD_CtlError>
        err++;
 8011534:	7afb      	ldrb	r3, [r7, #11]
 8011536:	3301      	adds	r3, #1
 8011538:	72fb      	strb	r3, [r7, #11]
      break;
 801153a:	e089      	b.n	8011650 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d00b      	beq.n	8011560 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	7c12      	ldrb	r2, [r2, #16]
 8011554:	f107 0108 	add.w	r1, r7, #8
 8011558:	4610      	mov	r0, r2
 801155a:	4798      	blx	r3
 801155c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801155e:	e077      	b.n	8011650 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011560:	6839      	ldr	r1, [r7, #0]
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 fa93 	bl	8011a8e <USBD_CtlError>
        err++;
 8011568:	7afb      	ldrb	r3, [r7, #11]
 801156a:	3301      	adds	r3, #1
 801156c:	72fb      	strb	r3, [r7, #11]
      break;
 801156e:	e06f      	b.n	8011650 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d00b      	beq.n	8011594 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	7c12      	ldrb	r2, [r2, #16]
 8011588:	f107 0108 	add.w	r1, r7, #8
 801158c:	4610      	mov	r0, r2
 801158e:	4798      	blx	r3
 8011590:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011592:	e05d      	b.n	8011650 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011594:	6839      	ldr	r1, [r7, #0]
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f000 fa79 	bl	8011a8e <USBD_CtlError>
        err++;
 801159c:	7afb      	ldrb	r3, [r7, #11]
 801159e:	3301      	adds	r3, #1
 80115a0:	72fb      	strb	r3, [r7, #11]
      break;
 80115a2:	e055      	b.n	8011650 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00b      	beq.n	80115c8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	7c12      	ldrb	r2, [r2, #16]
 80115bc:	f107 0108 	add.w	r1, r7, #8
 80115c0:	4610      	mov	r0, r2
 80115c2:	4798      	blx	r3
 80115c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80115c6:	e043      	b.n	8011650 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80115c8:	6839      	ldr	r1, [r7, #0]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fa5f 	bl	8011a8e <USBD_CtlError>
        err++;
 80115d0:	7afb      	ldrb	r3, [r7, #11]
 80115d2:	3301      	adds	r3, #1
 80115d4:	72fb      	strb	r3, [r7, #11]
      break;
 80115d6:	e03b      	b.n	8011650 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115de:	695b      	ldr	r3, [r3, #20]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00b      	beq.n	80115fc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ea:	695b      	ldr	r3, [r3, #20]
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	7c12      	ldrb	r2, [r2, #16]
 80115f0:	f107 0108 	add.w	r1, r7, #8
 80115f4:	4610      	mov	r0, r2
 80115f6:	4798      	blx	r3
 80115f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80115fa:	e029      	b.n	8011650 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80115fc:	6839      	ldr	r1, [r7, #0]
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 fa45 	bl	8011a8e <USBD_CtlError>
        err++;
 8011604:	7afb      	ldrb	r3, [r7, #11]
 8011606:	3301      	adds	r3, #1
 8011608:	72fb      	strb	r3, [r7, #11]
      break;
 801160a:	e021      	b.n	8011650 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011612:	699b      	ldr	r3, [r3, #24]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00b      	beq.n	8011630 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801161e:	699b      	ldr	r3, [r3, #24]
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	7c12      	ldrb	r2, [r2, #16]
 8011624:	f107 0108 	add.w	r1, r7, #8
 8011628:	4610      	mov	r0, r2
 801162a:	4798      	blx	r3
 801162c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801162e:	e00f      	b.n	8011650 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011630:	6839      	ldr	r1, [r7, #0]
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 fa2b 	bl	8011a8e <USBD_CtlError>
        err++;
 8011638:	7afb      	ldrb	r3, [r7, #11]
 801163a:	3301      	adds	r3, #1
 801163c:	72fb      	strb	r3, [r7, #11]
      break;
 801163e:	e007      	b.n	8011650 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011640:	6839      	ldr	r1, [r7, #0]
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f000 fa23 	bl	8011a8e <USBD_CtlError>
      err++;
 8011648:	7afb      	ldrb	r3, [r7, #11]
 801164a:	3301      	adds	r3, #1
 801164c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801164e:	bf00      	nop
    }
    break;
 8011650:	e037      	b.n	80116c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	7c1b      	ldrb	r3, [r3, #16]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d109      	bne.n	801166e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011662:	f107 0208 	add.w	r2, r7, #8
 8011666:	4610      	mov	r0, r2
 8011668:	4798      	blx	r3
 801166a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801166c:	e029      	b.n	80116c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 fa0c 	bl	8011a8e <USBD_CtlError>
      err++;
 8011676:	7afb      	ldrb	r3, [r7, #11]
 8011678:	3301      	adds	r3, #1
 801167a:	72fb      	strb	r3, [r7, #11]
    break;
 801167c:	e021      	b.n	80116c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	7c1b      	ldrb	r3, [r3, #16]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d10d      	bne.n	80116a2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801168e:	f107 0208 	add.w	r2, r7, #8
 8011692:	4610      	mov	r0, r2
 8011694:	4798      	blx	r3
 8011696:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	3301      	adds	r3, #1
 801169c:	2207      	movs	r2, #7
 801169e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80116a0:	e00f      	b.n	80116c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80116a2:	6839      	ldr	r1, [r7, #0]
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f000 f9f2 	bl	8011a8e <USBD_CtlError>
      err++;
 80116aa:	7afb      	ldrb	r3, [r7, #11]
 80116ac:	3301      	adds	r3, #1
 80116ae:	72fb      	strb	r3, [r7, #11]
    break;
 80116b0:	e007      	b.n	80116c2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80116b2:	6839      	ldr	r1, [r7, #0]
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 f9ea 	bl	8011a8e <USBD_CtlError>
    err++;
 80116ba:	7afb      	ldrb	r3, [r7, #11]
 80116bc:	3301      	adds	r3, #1
 80116be:	72fb      	strb	r3, [r7, #11]
    break;
 80116c0:	bf00      	nop
  }

  if (err != 0U)
 80116c2:	7afb      	ldrb	r3, [r7, #11]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d11e      	bne.n	8011706 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	88db      	ldrh	r3, [r3, #6]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d016      	beq.n	80116fe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80116d0:	893b      	ldrh	r3, [r7, #8]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00e      	beq.n	80116f4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	88da      	ldrh	r2, [r3, #6]
 80116da:	893b      	ldrh	r3, [r7, #8]
 80116dc:	4293      	cmp	r3, r2
 80116de:	bf28      	it	cs
 80116e0:	4613      	movcs	r3, r2
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80116e6:	893b      	ldrh	r3, [r7, #8]
 80116e8:	461a      	mov	r2, r3
 80116ea:	68f9      	ldr	r1, [r7, #12]
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f000 fa3f 	bl	8011b70 <USBD_CtlSendData>
 80116f2:	e009      	b.n	8011708 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80116f4:	6839      	ldr	r1, [r7, #0]
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 f9c9 	bl	8011a8e <USBD_CtlError>
 80116fc:	e004      	b.n	8011708 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fa90 	bl	8011c24 <USBD_CtlSendStatus>
 8011704:	e000      	b.n	8011708 <USBD_GetDescriptor+0x2cc>
    return;
 8011706:	bf00      	nop
    }
  }
}
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop

08011710 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	889b      	ldrh	r3, [r3, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d130      	bne.n	8011784 <USBD_SetAddress+0x74>
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	88db      	ldrh	r3, [r3, #6]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d12c      	bne.n	8011784 <USBD_SetAddress+0x74>
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	885b      	ldrh	r3, [r3, #2]
 801172e:	2b7f      	cmp	r3, #127	; 0x7f
 8011730:	d828      	bhi.n	8011784 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	885b      	ldrh	r3, [r3, #2]
 8011736:	b2db      	uxtb	r3, r3
 8011738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801173c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011744:	2b03      	cmp	r3, #3
 8011746:	d104      	bne.n	8011752 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011748:	6839      	ldr	r1, [r7, #0]
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f000 f99f 	bl	8011a8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011750:	e01d      	b.n	801178e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	7bfa      	ldrb	r2, [r7, #15]
 8011756:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801175a:	7bfb      	ldrb	r3, [r7, #15]
 801175c:	4619      	mov	r1, r3
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f003 fdcc 	bl	80152fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 fa5d 	bl	8011c24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d004      	beq.n	801177a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2202      	movs	r2, #2
 8011774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011778:	e009      	b.n	801178e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2201      	movs	r2, #1
 801177e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011782:	e004      	b.n	801178e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011784:	6839      	ldr	r1, [r7, #0]
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f000 f981 	bl	8011a8e <USBD_CtlError>
  }
}
 801178c:	bf00      	nop
 801178e:	bf00      	nop
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
	...

08011798 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80117a2:	2300      	movs	r3, #0
 80117a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	885b      	ldrh	r3, [r3, #2]
 80117aa:	b2da      	uxtb	r2, r3
 80117ac:	4b4b      	ldr	r3, [pc, #300]	; (80118dc <USBD_SetConfig+0x144>)
 80117ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80117b0:	4b4a      	ldr	r3, [pc, #296]	; (80118dc <USBD_SetConfig+0x144>)
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d905      	bls.n	80117c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80117b8:	6839      	ldr	r1, [r7, #0]
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 f967 	bl	8011a8e <USBD_CtlError>
    return USBD_FAIL;
 80117c0:	2303      	movs	r3, #3
 80117c2:	e087      	b.n	80118d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	d002      	beq.n	80117d4 <USBD_SetConfig+0x3c>
 80117ce:	2b03      	cmp	r3, #3
 80117d0:	d025      	beq.n	801181e <USBD_SetConfig+0x86>
 80117d2:	e071      	b.n	80118b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80117d4:	4b41      	ldr	r3, [pc, #260]	; (80118dc <USBD_SetConfig+0x144>)
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d01c      	beq.n	8011816 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80117dc:	4b3f      	ldr	r3, [pc, #252]	; (80118dc <USBD_SetConfig+0x144>)
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	461a      	mov	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80117e6:	4b3d      	ldr	r3, [pc, #244]	; (80118dc <USBD_SetConfig+0x144>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	4619      	mov	r1, r3
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f7ff f999 	bl	8010b24 <USBD_SetClassConfig>
 80117f2:	4603      	mov	r3, r0
 80117f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80117f6:	7bfb      	ldrb	r3, [r7, #15]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d004      	beq.n	8011806 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80117fc:	6839      	ldr	r1, [r7, #0]
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f000 f945 	bl	8011a8e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011804:	e065      	b.n	80118d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 fa0c 	bl	8011c24 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2203      	movs	r2, #3
 8011810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011814:	e05d      	b.n	80118d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 fa04 	bl	8011c24 <USBD_CtlSendStatus>
    break;
 801181c:	e059      	b.n	80118d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801181e:	4b2f      	ldr	r3, [pc, #188]	; (80118dc <USBD_SetConfig+0x144>)
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d112      	bne.n	801184c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2202      	movs	r2, #2
 801182a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801182e:	4b2b      	ldr	r3, [pc, #172]	; (80118dc <USBD_SetConfig+0x144>)
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	461a      	mov	r2, r3
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011838:	4b28      	ldr	r3, [pc, #160]	; (80118dc <USBD_SetConfig+0x144>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	4619      	mov	r1, r3
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f7ff f98c 	bl	8010b5c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 f9ed 	bl	8011c24 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801184a:	e042      	b.n	80118d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801184c:	4b23      	ldr	r3, [pc, #140]	; (80118dc <USBD_SetConfig+0x144>)
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	461a      	mov	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	429a      	cmp	r2, r3
 8011858:	d02a      	beq.n	80118b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	b2db      	uxtb	r3, r3
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ff f97a 	bl	8010b5c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011868:	4b1c      	ldr	r3, [pc, #112]	; (80118dc <USBD_SetConfig+0x144>)
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	461a      	mov	r2, r3
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011872:	4b1a      	ldr	r3, [pc, #104]	; (80118dc <USBD_SetConfig+0x144>)
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	4619      	mov	r1, r3
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7ff f953 	bl	8010b24 <USBD_SetClassConfig>
 801187e:	4603      	mov	r3, r0
 8011880:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011882:	7bfb      	ldrb	r3, [r7, #15]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00f      	beq.n	80118a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011888:	6839      	ldr	r1, [r7, #0]
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f000 f8ff 	bl	8011a8e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	b2db      	uxtb	r3, r3
 8011896:	4619      	mov	r1, r3
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7ff f95f 	bl	8010b5c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2202      	movs	r2, #2
 80118a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80118a6:	e014      	b.n	80118d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 f9bb 	bl	8011c24 <USBD_CtlSendStatus>
    break;
 80118ae:	e010      	b.n	80118d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 f9b7 	bl	8011c24 <USBD_CtlSendStatus>
    break;
 80118b6:	e00c      	b.n	80118d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80118b8:	6839      	ldr	r1, [r7, #0]
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 f8e7 	bl	8011a8e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80118c0:	4b06      	ldr	r3, [pc, #24]	; (80118dc <USBD_SetConfig+0x144>)
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	4619      	mov	r1, r3
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f7ff f948 	bl	8010b5c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80118cc:	2303      	movs	r3, #3
 80118ce:	73fb      	strb	r3, [r7, #15]
    break;
 80118d0:	bf00      	nop
  }

  return ret;
 80118d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3710      	adds	r7, #16
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	20004870 	.word	0x20004870

080118e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	88db      	ldrh	r3, [r3, #6]
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d004      	beq.n	80118fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80118f2:	6839      	ldr	r1, [r7, #0]
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 f8ca 	bl	8011a8e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80118fa:	e022      	b.n	8011942 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011902:	2b02      	cmp	r3, #2
 8011904:	dc02      	bgt.n	801190c <USBD_GetConfig+0x2c>
 8011906:	2b00      	cmp	r3, #0
 8011908:	dc03      	bgt.n	8011912 <USBD_GetConfig+0x32>
 801190a:	e015      	b.n	8011938 <USBD_GetConfig+0x58>
 801190c:	2b03      	cmp	r3, #3
 801190e:	d00b      	beq.n	8011928 <USBD_GetConfig+0x48>
 8011910:	e012      	b.n	8011938 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2200      	movs	r2, #0
 8011916:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	3308      	adds	r3, #8
 801191c:	2201      	movs	r2, #1
 801191e:	4619      	mov	r1, r3
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 f925 	bl	8011b70 <USBD_CtlSendData>
      break;
 8011926:	e00c      	b.n	8011942 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3304      	adds	r3, #4
 801192c:	2201      	movs	r2, #1
 801192e:	4619      	mov	r1, r3
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f000 f91d 	bl	8011b70 <USBD_CtlSendData>
      break;
 8011936:	e004      	b.n	8011942 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8011938:	6839      	ldr	r1, [r7, #0]
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 f8a7 	bl	8011a8e <USBD_CtlError>
      break;
 8011940:	bf00      	nop
}
 8011942:	bf00      	nop
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b082      	sub	sp, #8
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801195a:	3b01      	subs	r3, #1
 801195c:	2b02      	cmp	r3, #2
 801195e:	d81e      	bhi.n	801199e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	88db      	ldrh	r3, [r3, #6]
 8011964:	2b02      	cmp	r3, #2
 8011966:	d004      	beq.n	8011972 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f88f 	bl	8011a8e <USBD_CtlError>
      break;
 8011970:	e01a      	b.n	80119a8 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2201      	movs	r2, #1
 8011976:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801197e:	2b00      	cmp	r3, #0
 8011980:	d005      	beq.n	801198e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	f043 0202 	orr.w	r2, r3, #2
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	330c      	adds	r3, #12
 8011992:	2202      	movs	r2, #2
 8011994:	4619      	mov	r1, r3
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 f8ea 	bl	8011b70 <USBD_CtlSendData>
    break;
 801199c:	e004      	b.n	80119a8 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801199e:	6839      	ldr	r1, [r7, #0]
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 f874 	bl	8011a8e <USBD_CtlError>
    break;
 80119a6:	bf00      	nop
  }
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	885b      	ldrh	r3, [r3, #2]
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d106      	bne.n	80119d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2201      	movs	r2, #1
 80119c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 f92a 	bl	8011c24 <USBD_CtlSendStatus>
  }
}
 80119d0:	bf00      	nop
 80119d2:	3708      	adds	r7, #8
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119e8:	3b01      	subs	r3, #1
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d80b      	bhi.n	8011a06 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	885b      	ldrh	r3, [r3, #2]
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	d10c      	bne.n	8011a10 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f910 	bl	8011c24 <USBD_CtlSendStatus>
      }
      break;
 8011a04:	e004      	b.n	8011a10 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8011a06:	6839      	ldr	r1, [r7, #0]
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 f840 	bl	8011a8e <USBD_CtlError>
      break;
 8011a0e:	e000      	b.n	8011a12 <USBD_ClrFeature+0x3a>
      break;
 8011a10:	bf00      	nop
  }
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b084      	sub	sp, #16
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	781a      	ldrb	r2, [r3, #0]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	3301      	adds	r3, #1
 8011a34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	781a      	ldrb	r2, [r3, #0]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	3301      	adds	r3, #1
 8011a42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f7ff fac6 	bl	8010fd6 <SWAPBYTE>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	3301      	adds	r3, #1
 8011a56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	f7ff fab9 	bl	8010fd6 <SWAPBYTE>
 8011a64:	4603      	mov	r3, r0
 8011a66:	461a      	mov	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	3301      	adds	r3, #1
 8011a76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f7ff faac 	bl	8010fd6 <SWAPBYTE>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	461a      	mov	r2, r3
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	80da      	strh	r2, [r3, #6]
}
 8011a86:	bf00      	nop
 8011a88:	3710      	adds	r7, #16
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}

08011a8e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a8e:	b580      	push	{r7, lr}
 8011a90:	b082      	sub	sp, #8
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
 8011a96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a98:	2180      	movs	r1, #128	; 0x80
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f003 fbc4 	bl	8015228 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f003 fbc0 	bl	8015228 <USBD_LL_StallEP>
}
 8011aa8:	bf00      	nop
 8011aaa:	3708      	adds	r7, #8
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	60f8      	str	r0, [r7, #12]
 8011ab8:	60b9      	str	r1, [r7, #8]
 8011aba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011abc:	2300      	movs	r3, #0
 8011abe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d036      	beq.n	8011b34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011aca:	6938      	ldr	r0, [r7, #16]
 8011acc:	f000 f836 	bl	8011b3c <USBD_GetLen>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	005b      	lsls	r3, r3, #1
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011ade:	7dfb      	ldrb	r3, [r7, #23]
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	7812      	ldrb	r2, [r2, #0]
 8011ae8:	701a      	strb	r2, [r3, #0]
  idx++;
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
 8011aec:	3301      	adds	r3, #1
 8011aee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011af0:	7dfb      	ldrb	r3, [r7, #23]
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	4413      	add	r3, r2
 8011af6:	2203      	movs	r2, #3
 8011af8:	701a      	strb	r2, [r3, #0]
  idx++;
 8011afa:	7dfb      	ldrb	r3, [r7, #23]
 8011afc:	3301      	adds	r3, #1
 8011afe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011b00:	e013      	b.n	8011b2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011b02:	7dfb      	ldrb	r3, [r7, #23]
 8011b04:	68ba      	ldr	r2, [r7, #8]
 8011b06:	4413      	add	r3, r2
 8011b08:	693a      	ldr	r2, [r7, #16]
 8011b0a:	7812      	ldrb	r2, [r2, #0]
 8011b0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	3301      	adds	r3, #1
 8011b12:	613b      	str	r3, [r7, #16]
    idx++;
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
 8011b16:	3301      	adds	r3, #1
 8011b18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011b1a:	7dfb      	ldrb	r3, [r7, #23]
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	4413      	add	r3, r2
 8011b20:	2200      	movs	r2, #0
 8011b22:	701a      	strb	r2, [r3, #0]
    idx++;
 8011b24:	7dfb      	ldrb	r3, [r7, #23]
 8011b26:	3301      	adds	r3, #1
 8011b28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1e7      	bne.n	8011b02 <USBD_GetString+0x52>
 8011b32:	e000      	b.n	8011b36 <USBD_GetString+0x86>
    return;
 8011b34:	bf00      	nop
  }
}
 8011b36:	3718      	adds	r7, #24
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011b44:	2300      	movs	r3, #0
 8011b46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011b4c:	e005      	b.n	8011b5a <USBD_GetLen+0x1e>
  {
    len++;
 8011b4e:	7bfb      	ldrb	r3, [r7, #15]
 8011b50:	3301      	adds	r3, #1
 8011b52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	3301      	adds	r3, #1
 8011b58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1f5      	bne.n	8011b4e <USBD_GetLen+0x12>
  }

  return len;
 8011b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3714      	adds	r7, #20
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2202      	movs	r2, #2
 8011b80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	68ba      	ldr	r2, [r7, #8]
 8011b94:	2100      	movs	r1, #0
 8011b96:	68f8      	ldr	r0, [r7, #12]
 8011b98:	f003 fbcf 	bl	801533a <USBD_LL_Transmit>

  return USBD_OK;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b084      	sub	sp, #16
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	60f8      	str	r0, [r7, #12]
 8011bae:	60b9      	str	r1, [r7, #8]
 8011bb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	68ba      	ldr	r2, [r7, #8]
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f003 fbbe 	bl	801533a <USBD_LL_Transmit>

  return USBD_OK;
 8011bbe:	2300      	movs	r3, #0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3710      	adds	r7, #16
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2203      	movs	r2, #3
 8011bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	f003 fbc2 	bl	801537c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}

08011c02 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b084      	sub	sp, #16
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	60f8      	str	r0, [r7, #12]
 8011c0a:	60b9      	str	r1, [r7, #8]
 8011c0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	2100      	movs	r1, #0
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f003 fbb1 	bl	801537c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2204      	movs	r2, #4
 8011c30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c34:	2300      	movs	r3, #0
 8011c36:	2200      	movs	r2, #0
 8011c38:	2100      	movs	r1, #0
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f003 fb7d 	bl	801533a <USBD_LL_Transmit>

  return USBD_OK;
 8011c40:	2300      	movs	r3, #0
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3708      	adds	r7, #8
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}

08011c4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b082      	sub	sp, #8
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2205      	movs	r2, #5
 8011c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	2100      	movs	r1, #0
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f003 fb8b 	bl	801537c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c66:	2300      	movs	r3, #0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b085      	sub	sp, #20
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	4603      	mov	r3, r0
 8011c78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c82:	2b84      	cmp	r3, #132	; 0x84
 8011c84:	d005      	beq.n	8011c92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011c86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	3303      	adds	r3, #3
 8011c90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011c92:	68fb      	ldr	r3, [r7, #12]
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3714      	adds	r7, #20
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ca6:	f3ef 8305 	mrs	r3, IPSR
 8011caa:	607b      	str	r3, [r7, #4]
  return(result);
 8011cac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	bf14      	ite	ne
 8011cb2:	2301      	movne	r3, #1
 8011cb4:	2300      	moveq	r3, #0
 8011cb6:	b2db      	uxtb	r3, r3
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	370c      	adds	r7, #12
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011cc8:	f001 fb4c 	bl	8013364 <vTaskStartScheduler>
  
  return osOK;
 8011ccc:	2300      	movs	r3, #0
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	bd80      	pop	{r7, pc}

08011cd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cd4:	b089      	sub	sp, #36	; 0x24
 8011cd6:	af04      	add	r7, sp, #16
 8011cd8:	6078      	str	r0, [r7, #4]
 8011cda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	695b      	ldr	r3, [r3, #20]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d020      	beq.n	8011d26 <osThreadCreate+0x54>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	699b      	ldr	r3, [r3, #24]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d01c      	beq.n	8011d26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685c      	ldr	r4, [r3, #4]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681d      	ldr	r5, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	691e      	ldr	r6, [r3, #16]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7ff ffb6 	bl	8011c70 <makeFreeRtosPriority>
 8011d04:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	695b      	ldr	r3, [r3, #20]
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d0e:	9202      	str	r2, [sp, #8]
 8011d10:	9301      	str	r3, [sp, #4]
 8011d12:	9100      	str	r1, [sp, #0]
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	4632      	mov	r2, r6
 8011d18:	4629      	mov	r1, r5
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f001 f95a 	bl	8012fd4 <xTaskCreateStatic>
 8011d20:	4603      	mov	r3, r0
 8011d22:	60fb      	str	r3, [r7, #12]
 8011d24:	e01c      	b.n	8011d60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	685c      	ldr	r4, [r3, #4]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d32:	b29e      	uxth	r6, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff ff98 	bl	8011c70 <makeFreeRtosPriority>
 8011d40:	4602      	mov	r2, r0
 8011d42:	f107 030c 	add.w	r3, r7, #12
 8011d46:	9301      	str	r3, [sp, #4]
 8011d48:	9200      	str	r2, [sp, #0]
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	4632      	mov	r2, r6
 8011d4e:	4629      	mov	r1, r5
 8011d50:	4620      	mov	r0, r4
 8011d52:	f001 f99c 	bl	801308e <xTaskCreate>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d001      	beq.n	8011d60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	e000      	b.n	8011d62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011d60:	68fb      	ldr	r3, [r7, #12]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3714      	adds	r7, #20
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b084      	sub	sp, #16
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d001      	beq.n	8011d80 <osDelay+0x16>
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	e000      	b.n	8011d82 <osDelay+0x18>
 8011d80:	2301      	movs	r3, #1
 8011d82:	4618      	mov	r0, r3
 8011d84:	f001 faba 	bl	80132fc <vTaskDelay>
  
  return osOK;
 8011d88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
	...

08011d94 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b086      	sub	sp, #24
 8011d98:	af02      	add	r7, sp, #8
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011da2:	2300      	movs	r3, #0
 8011da4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011da6:	f7ff ff7b 	bl	8011ca0 <inHandlerMode>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d01c      	beq.n	8011dea <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011db0:	6839      	ldr	r1, [r7, #0]
 8011db2:	f107 0208 	add.w	r2, r7, #8
 8011db6:	f107 030c 	add.w	r3, r7, #12
 8011dba:	9300      	str	r3, [sp, #0]
 8011dbc:	4613      	mov	r3, r2
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f002 f881 	bl	8013ec8 <xTaskGenericNotifyFromISR>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d002      	beq.n	8011dd2 <osSignalSet+0x3e>
      return 0x80000000;
 8011dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011dd0:	e019      	b.n	8011e06 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d015      	beq.n	8011e04 <osSignalSet+0x70>
 8011dd8:	4b0d      	ldr	r3, [pc, #52]	; (8011e10 <osSignalSet+0x7c>)
 8011dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dde:	601a      	str	r2, [r3, #0]
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	f3bf 8f6f 	isb	sy
 8011de8:	e00c      	b.n	8011e04 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	f107 0308 	add.w	r3, r7, #8
 8011df0:	2201      	movs	r2, #1
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f001 ffb2 	bl	8013d5c <xTaskGenericNotify>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d002      	beq.n	8011e04 <osSignalSet+0x70>
    return 0x80000000;
 8011dfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e02:	e000      	b.n	8011e06 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011e04:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3710      	adds	r7, #16
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	e000ed04 	.word	0xe000ed04

08011e14 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011e14:	b590      	push	{r4, r7, lr}
 8011e16:	b089      	sub	sp, #36	; 0x24
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011e20:	2300      	movs	r3, #0
 8011e22:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2e:	d103      	bne.n	8011e38 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011e30:	f04f 33ff 	mov.w	r3, #4294967295
 8011e34:	61fb      	str	r3, [r7, #28]
 8011e36:	e009      	b.n	8011e4c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d006      	beq.n	8011e4c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d101      	bne.n	8011e4c <osSignalWait+0x38>
      ticks = 1;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8011e4c:	f7ff ff28 	bl	8011ca0 <inHandlerMode>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d002      	beq.n	8011e5c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011e56:	2382      	movs	r3, #130	; 0x82
 8011e58:	613b      	str	r3, [r7, #16]
 8011e5a:	e01b      	b.n	8011e94 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8011e5c:	68b9      	ldr	r1, [r7, #8]
 8011e5e:	f107 0310 	add.w	r3, r7, #16
 8011e62:	1d1a      	adds	r2, r3, #4
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	2000      	movs	r0, #0
 8011e68:	f001 ff1e 	bl	8013ca8 <xTaskNotifyWait>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d008      	beq.n	8011e84 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d102      	bne.n	8011e7e <osSignalWait+0x6a>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	613b      	str	r3, [r7, #16]
 8011e7c:	e00a      	b.n	8011e94 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8011e7e:	2340      	movs	r3, #64	; 0x40
 8011e80:	613b      	str	r3, [r7, #16]
 8011e82:	e007      	b.n	8011e94 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	da02      	bge.n	8011e90 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011e8a:	2386      	movs	r3, #134	; 0x86
 8011e8c:	613b      	str	r3, [r7, #16]
 8011e8e:	e001      	b.n	8011e94 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011e90:	2308      	movs	r3, #8
 8011e92:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	461c      	mov	r4, r3
 8011e98:	f107 0310 	add.w	r3, r7, #16
 8011e9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	3724      	adds	r7, #36	; 0x24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd90      	pop	{r4, r7, pc}

08011eac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d007      	beq.n	8011ecc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	2001      	movs	r0, #1
 8011ec4:	f000 fc65 	bl	8012792 <xQueueCreateMutexStatic>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	e003      	b.n	8011ed4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011ecc:	2001      	movs	r0, #1
 8011ece:	f000 fc48 	bl	8012762 <xQueueCreateMutex>
 8011ed2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	3303      	adds	r3, #3
 8011eea:	f023 0303 	bic.w	r3, r3, #3
 8011eee:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011ef0:	2014      	movs	r0, #20
 8011ef2:	f002 fb79 	bl	80145e8 <pvPortMalloc>
 8011ef6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d046      	beq.n	8011f8c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8011f06:	68fa      	ldr	r2, [r7, #12]
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f002 fb66 	bl	80145e8 <pvPortMalloc>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d02b      	beq.n	8011f82 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	fb02 f303 	mul.w	r3, r2, r3
 8011f34:	4618      	mov	r0, r3
 8011f36:	f002 fb57 	bl	80145e8 <pvPortMalloc>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d011      	beq.n	8011f6c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011f48:	2300      	movs	r3, #0
 8011f4a:	613b      	str	r3, [r7, #16]
 8011f4c:	e008      	b.n	8011f60 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	685a      	ldr	r2, [r3, #4]
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	4413      	add	r3, r2
 8011f56:	2200      	movs	r2, #0
 8011f58:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	3301      	adds	r3, #1
 8011f5e:	613b      	str	r3, [r7, #16]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	693a      	ldr	r2, [r7, #16]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d3f1      	bcc.n	8011f4e <osPoolCreate+0x72>
 8011f6a:	e00f      	b.n	8011f8c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	f002 fbfd 	bl	8014770 <vPortFree>
        vPortFree(thePool);
 8011f76:	6978      	ldr	r0, [r7, #20]
 8011f78:	f002 fbfa 	bl	8014770 <vPortFree>
        thePool = NULL;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	617b      	str	r3, [r7, #20]
 8011f80:	e004      	b.n	8011f8c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011f82:	6978      	ldr	r0, [r7, #20]
 8011f84:	f002 fbf4 	bl	8014770 <vPortFree>
      thePool = NULL;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011f8c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3718      	adds	r7, #24
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}

08011f96 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011f96:	b580      	push	{r7, lr}
 8011f98:	b08a      	sub	sp, #40	; 0x28
 8011f9a:	af00      	add	r7, sp, #0
 8011f9c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011fa6:	f7ff fe7b 	bl	8011ca0 <inHandlerMode>
 8011faa:	4603      	mov	r3, r0
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00e      	beq.n	8011fce <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011fb0:	f3ef 8211 	mrs	r2, BASEPRI
 8011fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb8:	f383 8811 	msr	BASEPRI, r3
 8011fbc:	f3bf 8f6f 	isb	sy
 8011fc0:	f3bf 8f4f 	dsb	sy
 8011fc4:	617a      	str	r2, [r7, #20]
 8011fc6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011fc8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011fca:	627b      	str	r3, [r7, #36]	; 0x24
 8011fcc:	e001      	b.n	8011fd2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011fce:	f002 f9e9 	bl	80143a4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	61fb      	str	r3, [r7, #28]
 8011fd6:	e029      	b.n	801202c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	691a      	ldr	r2, [r3, #16]
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	4413      	add	r3, r2
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	6892      	ldr	r2, [r2, #8]
 8011fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011fe8:	fb02 f201 	mul.w	r2, r2, r1
 8011fec:	1a9b      	subs	r3, r3, r2
 8011fee:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	685a      	ldr	r2, [r3, #4]
 8011ff4:	69bb      	ldr	r3, [r7, #24]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d113      	bne.n	8012026 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	685a      	ldr	r2, [r3, #4]
 8012002:	69bb      	ldr	r3, [r7, #24]
 8012004:	4413      	add	r3, r2
 8012006:	2201      	movs	r2, #1
 8012008:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	4619      	mov	r1, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	69ba      	ldr	r2, [r7, #24]
 8012016:	fb02 f303 	mul.w	r3, r2, r3
 801201a:	440b      	add	r3, r1
 801201c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	69ba      	ldr	r2, [r7, #24]
 8012022:	611a      	str	r2, [r3, #16]
      break;
 8012024:	e007      	b.n	8012036 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	3301      	adds	r3, #1
 801202a:	61fb      	str	r3, [r7, #28]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	689b      	ldr	r3, [r3, #8]
 8012030:	69fa      	ldr	r2, [r7, #28]
 8012032:	429a      	cmp	r2, r3
 8012034:	d3d0      	bcc.n	8011fd8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012036:	f7ff fe33 	bl	8011ca0 <inHandlerMode>
 801203a:	4603      	mov	r3, r0
 801203c:	2b00      	cmp	r3, #0
 801203e:	d005      	beq.n	801204c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012042:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801204a:	e001      	b.n	8012050 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 801204c:	f002 f9da 	bl	8014404 <vPortExitCritical>
  }
  
  return p;
 8012050:	6a3b      	ldr	r3, [r7, #32]
}
 8012052:	4618      	mov	r0, r3
 8012054:	3728      	adds	r7, #40	; 0x28
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}

0801205a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801205a:	b480      	push	{r7}
 801205c:	b085      	sub	sp, #20
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
 8012062:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d101      	bne.n	801206e <osPoolFree+0x14>
    return osErrorParameter;
 801206a:	2380      	movs	r3, #128	; 0x80
 801206c:	e030      	b.n	80120d0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d101      	bne.n	8012078 <osPoolFree+0x1e>
    return osErrorParameter;
 8012074:	2380      	movs	r3, #128	; 0x80
 8012076:	e02b      	b.n	80120d0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	683a      	ldr	r2, [r7, #0]
 801207e:	429a      	cmp	r2, r3
 8012080:	d201      	bcs.n	8012086 <osPoolFree+0x2c>
    return osErrorParameter;
 8012082:	2380      	movs	r3, #128	; 0x80
 8012084:	e024      	b.n	80120d0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	6812      	ldr	r2, [r2, #0]
 801208c:	1a9b      	subs	r3, r3, r2
 801208e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68da      	ldr	r2, [r3, #12]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	fbb3 f1f2 	udiv	r1, r3, r2
 801209a:	fb02 f201 	mul.w	r2, r2, r1
 801209e:	1a9b      	subs	r3, r3, r2
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <osPoolFree+0x4e>
    return osErrorParameter;
 80120a4:	2380      	movs	r3, #128	; 0x80
 80120a6:	e013      	b.n	80120d0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	68fa      	ldr	r2, [r7, #12]
 80120ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80120b2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	68fa      	ldr	r2, [r7, #12]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d301      	bcc.n	80120c2 <osPoolFree+0x68>
    return osErrorParameter;
 80120be:	2380      	movs	r3, #128	; 0x80
 80120c0:	e006      	b.n	80120d0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	685a      	ldr	r2, [r3, #4]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	4413      	add	r3, r2
 80120ca:	2200      	movs	r2, #0
 80120cc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80120ce:	2300      	movs	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3714      	adds	r7, #20
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr

080120dc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80120dc:	b590      	push	{r4, r7, lr}
 80120de:	b087      	sub	sp, #28
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	60fb      	str	r3, [r7, #12]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	613b      	str	r3, [r7, #16]
 80120f2:	2300      	movs	r3, #0
 80120f4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	689c      	ldr	r4, [r3, #8]
 80120fa:	200c      	movs	r0, #12
 80120fc:	f002 fa74 	bl	80145e8 <pvPortMalloc>
 8012100:	4603      	mov	r3, r0
 8012102:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <osMailCreate+0x36>
    return NULL;
 801210e:	2300      	movs	r3, #0
 8012110:	e038      	b.n	8012184 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6818      	ldr	r0, [r3, #0]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	681c      	ldr	r4, [r3, #0]
 8012126:	2200      	movs	r2, #0
 8012128:	2104      	movs	r1, #4
 801212a:	f000 faa1 	bl	8012670 <xQueueGenericCreate>
 801212e:	4603      	mov	r3, r0
 8012130:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	689b      	ldr	r3, [r3, #8]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d107      	bne.n	801214e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	689b      	ldr	r3, [r3, #8]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4618      	mov	r0, r3
 8012146:	f002 fb13 	bl	8014770 <vPortFree>
    return NULL;
 801214a:	2300      	movs	r3, #0
 801214c:	e01a      	b.n	8012184 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	689b      	ldr	r3, [r3, #8]
 8012152:	681c      	ldr	r4, [r3, #0]
 8012154:	f107 030c 	add.w	r3, r7, #12
 8012158:	4618      	mov	r0, r3
 801215a:	f7ff febf 	bl	8011edc <osPoolCreate>
 801215e:	4603      	mov	r3, r0
 8012160:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	689b      	ldr	r3, [r3, #8]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	689b      	ldr	r3, [r3, #8]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d107      	bne.n	801217e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	689b      	ldr	r3, [r3, #8]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4618      	mov	r0, r3
 8012176:	f002 fafb 	bl	8014770 <vPortFree>
    return NULL;
 801217a:	2300      	movs	r3, #0
 801217c:	e002      	b.n	8012184 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	689b      	ldr	r3, [r3, #8]
 8012182:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012184:	4618      	mov	r0, r3
 8012186:	371c      	adds	r7, #28
 8012188:	46bd      	mov	sp, r7
 801218a:	bd90      	pop	{r4, r7, pc}

0801218c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d101      	bne.n	80121a0 <osMailAlloc+0x14>
    return NULL;
 801219c:	2300      	movs	r3, #0
 801219e:	e006      	b.n	80121ae <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ff fef6 	bl	8011f96 <osPoolAlloc>
 80121aa:	60f8      	str	r0, [r7, #12]
  
  return p;
 80121ac:	68fb      	ldr	r3, [r7, #12]
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3710      	adds	r7, #16
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
	...

080121b8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d101      	bne.n	80121cc <osMailPut+0x14>
    return osErrorParameter;
 80121c8:	2380      	movs	r3, #128	; 0x80
 80121ca:	e02c      	b.n	8012226 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80121cc:	2300      	movs	r3, #0
 80121ce:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80121d0:	f7ff fd66 	bl	8011ca0 <inHandlerMode>
 80121d4:	4603      	mov	r3, r0
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d018      	beq.n	801220c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6858      	ldr	r0, [r3, #4]
 80121de:	f107 020c 	add.w	r2, r7, #12
 80121e2:	4639      	mov	r1, r7
 80121e4:	2300      	movs	r3, #0
 80121e6:	f000 fbed 	bl	80129c4 <xQueueGenericSendFromISR>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d001      	beq.n	80121f4 <osMailPut+0x3c>
      return osErrorOS;
 80121f0:	23ff      	movs	r3, #255	; 0xff
 80121f2:	e018      	b.n	8012226 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d014      	beq.n	8012224 <osMailPut+0x6c>
 80121fa:	4b0d      	ldr	r3, [pc, #52]	; (8012230 <osMailPut+0x78>)
 80121fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012200:	601a      	str	r2, [r3, #0]
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	f3bf 8f6f 	isb	sy
 801220a:	e00b      	b.n	8012224 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6858      	ldr	r0, [r3, #4]
 8012210:	4639      	mov	r1, r7
 8012212:	2300      	movs	r3, #0
 8012214:	2200      	movs	r2, #0
 8012216:	f000 fad7 	bl	80127c8 <xQueueGenericSend>
 801221a:	4603      	mov	r3, r0
 801221c:	2b01      	cmp	r3, #1
 801221e:	d001      	beq.n	8012224 <osMailPut+0x6c>
      return osErrorOS;
 8012220:	23ff      	movs	r3, #255	; 0xff
 8012222:	e000      	b.n	8012226 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012224:	2300      	movs	r3, #0
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	e000ed04 	.word	0xe000ed04

08012234 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012234:	b590      	push	{r4, r7, lr}
 8012236:	b08b      	sub	sp, #44	; 0x2c
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d10a      	bne.n	8012260 <osMailGet+0x2c>
    event.status = osErrorParameter;
 801224a:	2380      	movs	r3, #128	; 0x80
 801224c:	617b      	str	r3, [r7, #20]
    return event;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	461c      	mov	r4, r3
 8012252:	f107 0314 	add.w	r3, r7, #20
 8012256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801225a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801225e:	e056      	b.n	801230e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012260:	2300      	movs	r3, #0
 8012262:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012264:	2300      	movs	r3, #0
 8012266:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801226e:	d103      	bne.n	8012278 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012270:	f04f 33ff 	mov.w	r3, #4294967295
 8012274:	627b      	str	r3, [r7, #36]	; 0x24
 8012276:	e009      	b.n	801228c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d006      	beq.n	801228c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012284:	2b00      	cmp	r3, #0
 8012286:	d101      	bne.n	801228c <osMailGet+0x58>
      ticks = 1;
 8012288:	2301      	movs	r3, #1
 801228a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801228c:	f7ff fd08 	bl	8011ca0 <inHandlerMode>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d01d      	beq.n	80122d2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	6858      	ldr	r0, [r3, #4]
 801229a:	f107 0220 	add.w	r2, r7, #32
 801229e:	f107 0314 	add.w	r3, r7, #20
 80122a2:	3304      	adds	r3, #4
 80122a4:	4619      	mov	r1, r3
 80122a6:	f000 fd05 	bl	8012cb4 <xQueueReceiveFromISR>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d102      	bne.n	80122b6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80122b0:	2320      	movs	r3, #32
 80122b2:	617b      	str	r3, [r7, #20]
 80122b4:	e001      	b.n	80122ba <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80122ba:	6a3b      	ldr	r3, [r7, #32]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d01e      	beq.n	80122fe <osMailGet+0xca>
 80122c0:	4b15      	ldr	r3, [pc, #84]	; (8012318 <osMailGet+0xe4>)
 80122c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122c6:	601a      	str	r2, [r3, #0]
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	e015      	b.n	80122fe <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	6858      	ldr	r0, [r3, #4]
 80122d6:	f107 0314 	add.w	r3, r7, #20
 80122da:	3304      	adds	r3, #4
 80122dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122de:	4619      	mov	r1, r3
 80122e0:	f000 fc08 	bl	8012af4 <xQueueReceive>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d102      	bne.n	80122f0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80122ea:	2320      	movs	r3, #32
 80122ec:	617b      	str	r3, [r7, #20]
 80122ee:	e006      	b.n	80122fe <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d101      	bne.n	80122fa <osMailGet+0xc6>
 80122f6:	2300      	movs	r3, #0
 80122f8:	e000      	b.n	80122fc <osMailGet+0xc8>
 80122fa:	2340      	movs	r3, #64	; 0x40
 80122fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	461c      	mov	r4, r3
 8012302:	f107 0314 	add.w	r3, r7, #20
 8012306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801230a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801230e:	68f8      	ldr	r0, [r7, #12]
 8012310:	372c      	adds	r7, #44	; 0x2c
 8012312:	46bd      	mov	sp, r7
 8012314:	bd90      	pop	{r4, r7, pc}
 8012316:	bf00      	nop
 8012318:	e000ed04 	.word	0xe000ed04

0801231c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d101      	bne.n	8012330 <osMailFree+0x14>
    return osErrorParameter;
 801232c:	2380      	movs	r3, #128	; 0x80
 801232e:	e006      	b.n	801233e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	689b      	ldr	r3, [r3, #8]
 8012334:	6839      	ldr	r1, [r7, #0]
 8012336:	4618      	mov	r0, r3
 8012338:	f7ff fe8f 	bl	801205a <osPoolFree>
 801233c:	4603      	mov	r3, r0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012346:	b480      	push	{r7}
 8012348:	b083      	sub	sp, #12
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f103 0208 	add.w	r2, r3, #8
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f04f 32ff 	mov.w	r2, #4294967295
 801235e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f103 0208 	add.w	r2, r3, #8
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f103 0208 	add.w	r2, r3, #8
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801237a:	bf00      	nop
 801237c:	370c      	adds	r7, #12
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr

08012386 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012386:	b480      	push	{r7}
 8012388:	b083      	sub	sp, #12
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012394:	bf00      	nop
 8012396:	370c      	adds	r7, #12
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr

080123a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	68fa      	ldr	r2, [r7, #12]
 80123b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	689a      	ldr	r2, [r3, #8]
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	1c5a      	adds	r2, r3, #1
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	601a      	str	r2, [r3, #0]
}
 80123dc:	bf00      	nop
 80123de:	3714      	adds	r7, #20
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr

080123e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80123e8:	b480      	push	{r7}
 80123ea:	b085      	sub	sp, #20
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123fe:	d103      	bne.n	8012408 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	60fb      	str	r3, [r7, #12]
 8012406:	e00c      	b.n	8012422 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	3308      	adds	r3, #8
 801240c:	60fb      	str	r3, [r7, #12]
 801240e:	e002      	b.n	8012416 <vListInsert+0x2e>
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	60fb      	str	r3, [r7, #12]
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	429a      	cmp	r2, r3
 8012420:	d2f6      	bcs.n	8012410 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	685a      	ldr	r2, [r3, #4]
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	683a      	ldr	r2, [r7, #0]
 8012430:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	1c5a      	adds	r2, r3, #1
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	601a      	str	r2, [r3, #0]
}
 801244e:	bf00      	nop
 8012450:	3714      	adds	r7, #20
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr

0801245a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801245a:	b480      	push	{r7}
 801245c:	b085      	sub	sp, #20
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	691b      	ldr	r3, [r3, #16]
 8012466:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	6892      	ldr	r2, [r2, #8]
 8012470:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	689b      	ldr	r3, [r3, #8]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	6852      	ldr	r2, [r2, #4]
 801247a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	429a      	cmp	r2, r3
 8012484:	d103      	bne.n	801248e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	689a      	ldr	r2, [r3, #8]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2200      	movs	r2, #0
 8012492:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	1e5a      	subs	r2, r3, #1
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3714      	adds	r7, #20
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr
	...

080124b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d10a      	bne.n	80124da <xQueueGenericReset+0x2a>
	__asm volatile
 80124c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	60bb      	str	r3, [r7, #8]
}
 80124d6:	bf00      	nop
 80124d8:	e7fe      	b.n	80124d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80124da:	f001 ff63 	bl	80143a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124e6:	68f9      	ldr	r1, [r7, #12]
 80124e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80124ea:	fb01 f303 	mul.w	r3, r1, r3
 80124ee:	441a      	add	r2, r3
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	2200      	movs	r2, #0
 80124f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801250a:	3b01      	subs	r3, #1
 801250c:	68f9      	ldr	r1, [r7, #12]
 801250e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012510:	fb01 f303 	mul.w	r3, r1, r3
 8012514:	441a      	add	r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	22ff      	movs	r2, #255	; 0xff
 801251e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	22ff      	movs	r2, #255	; 0xff
 8012526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d114      	bne.n	801255a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	691b      	ldr	r3, [r3, #16]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d01a      	beq.n	801256e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	3310      	adds	r3, #16
 801253c:	4618      	mov	r0, r3
 801253e:	f001 f953 	bl	80137e8 <xTaskRemoveFromEventList>
 8012542:	4603      	mov	r3, r0
 8012544:	2b00      	cmp	r3, #0
 8012546:	d012      	beq.n	801256e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012548:	4b0c      	ldr	r3, [pc, #48]	; (801257c <xQueueGenericReset+0xcc>)
 801254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801254e:	601a      	str	r2, [r3, #0]
 8012550:	f3bf 8f4f 	dsb	sy
 8012554:	f3bf 8f6f 	isb	sy
 8012558:	e009      	b.n	801256e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	3310      	adds	r3, #16
 801255e:	4618      	mov	r0, r3
 8012560:	f7ff fef1 	bl	8012346 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	3324      	adds	r3, #36	; 0x24
 8012568:	4618      	mov	r0, r3
 801256a:	f7ff feec 	bl	8012346 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801256e:	f001 ff49 	bl	8014404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012572:	2301      	movs	r3, #1
}
 8012574:	4618      	mov	r0, r3
 8012576:	3710      	adds	r7, #16
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	e000ed04 	.word	0xe000ed04

08012580 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08e      	sub	sp, #56	; 0x38
 8012584:	af02      	add	r7, sp, #8
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
 801258c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d10a      	bne.n	80125aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012598:	f383 8811 	msr	BASEPRI, r3
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	f3bf 8f4f 	dsb	sy
 80125a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80125a6:	bf00      	nop
 80125a8:	e7fe      	b.n	80125a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d10a      	bne.n	80125c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80125b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80125c2:	bf00      	nop
 80125c4:	e7fe      	b.n	80125c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <xQueueGenericCreateStatic+0x52>
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d001      	beq.n	80125d6 <xQueueGenericCreateStatic+0x56>
 80125d2:	2301      	movs	r3, #1
 80125d4:	e000      	b.n	80125d8 <xQueueGenericCreateStatic+0x58>
 80125d6:	2300      	movs	r3, #0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d10a      	bne.n	80125f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80125dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e0:	f383 8811 	msr	BASEPRI, r3
 80125e4:	f3bf 8f6f 	isb	sy
 80125e8:	f3bf 8f4f 	dsb	sy
 80125ec:	623b      	str	r3, [r7, #32]
}
 80125ee:	bf00      	nop
 80125f0:	e7fe      	b.n	80125f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d102      	bne.n	80125fe <xQueueGenericCreateStatic+0x7e>
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d101      	bne.n	8012602 <xQueueGenericCreateStatic+0x82>
 80125fe:	2301      	movs	r3, #1
 8012600:	e000      	b.n	8012604 <xQueueGenericCreateStatic+0x84>
 8012602:	2300      	movs	r3, #0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d10a      	bne.n	801261e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801260c:	f383 8811 	msr	BASEPRI, r3
 8012610:	f3bf 8f6f 	isb	sy
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	61fb      	str	r3, [r7, #28]
}
 801261a:	bf00      	nop
 801261c:	e7fe      	b.n	801261c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801261e:	2348      	movs	r3, #72	; 0x48
 8012620:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	2b48      	cmp	r3, #72	; 0x48
 8012626:	d00a      	beq.n	801263e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262c:	f383 8811 	msr	BASEPRI, r3
 8012630:	f3bf 8f6f 	isb	sy
 8012634:	f3bf 8f4f 	dsb	sy
 8012638:	61bb      	str	r3, [r7, #24]
}
 801263a:	bf00      	nop
 801263c:	e7fe      	b.n	801263c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801263e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	2b00      	cmp	r3, #0
 8012648:	d00d      	beq.n	8012666 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264c:	2201      	movs	r2, #1
 801264e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012652:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012658:	9300      	str	r3, [sp, #0]
 801265a:	4613      	mov	r3, r2
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	68b9      	ldr	r1, [r7, #8]
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f000 f845 	bl	80126f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012668:	4618      	mov	r0, r3
 801266a:	3730      	adds	r7, #48	; 0x30
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012670:	b580      	push	{r7, lr}
 8012672:	b08a      	sub	sp, #40	; 0x28
 8012674:	af02      	add	r7, sp, #8
 8012676:	60f8      	str	r0, [r7, #12]
 8012678:	60b9      	str	r1, [r7, #8]
 801267a:	4613      	mov	r3, r2
 801267c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d10a      	bne.n	801269a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012688:	f383 8811 	msr	BASEPRI, r3
 801268c:	f3bf 8f6f 	isb	sy
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	613b      	str	r3, [r7, #16]
}
 8012696:	bf00      	nop
 8012698:	e7fe      	b.n	8012698 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d102      	bne.n	80126a6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80126a0:	2300      	movs	r3, #0
 80126a2:	61fb      	str	r3, [r7, #28]
 80126a4:	e004      	b.n	80126b0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	68ba      	ldr	r2, [r7, #8]
 80126aa:	fb02 f303 	mul.w	r3, r2, r3
 80126ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	3348      	adds	r3, #72	; 0x48
 80126b4:	4618      	mov	r0, r3
 80126b6:	f001 ff97 	bl	80145e8 <pvPortMalloc>
 80126ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d011      	beq.n	80126e6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80126c2:	69bb      	ldr	r3, [r7, #24]
 80126c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	3348      	adds	r3, #72	; 0x48
 80126ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	2200      	movs	r2, #0
 80126d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80126d4:	79fa      	ldrb	r2, [r7, #7]
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	4613      	mov	r3, r2
 80126dc:	697a      	ldr	r2, [r7, #20]
 80126de:	68b9      	ldr	r1, [r7, #8]
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f000 f805 	bl	80126f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80126e6:	69bb      	ldr	r3, [r7, #24]
	}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3720      	adds	r7, #32
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b084      	sub	sp, #16
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
 80126fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d103      	bne.n	801270c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012704:	69bb      	ldr	r3, [r7, #24]
 8012706:	69ba      	ldr	r2, [r7, #24]
 8012708:	601a      	str	r2, [r3, #0]
 801270a:	e002      	b.n	8012712 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801270c:	69bb      	ldr	r3, [r7, #24]
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	68ba      	ldr	r2, [r7, #8]
 801271c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801271e:	2101      	movs	r1, #1
 8012720:	69b8      	ldr	r0, [r7, #24]
 8012722:	f7ff fec5 	bl	80124b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012726:	bf00      	nop
 8012728:	3710      	adds	r7, #16
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}

0801272e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801272e:	b580      	push	{r7, lr}
 8012730:	b082      	sub	sp, #8
 8012732:	af00      	add	r7, sp, #0
 8012734:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d00e      	beq.n	801275a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2200      	movs	r2, #0
 8012740:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2200      	movs	r2, #0
 8012746:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2200      	movs	r2, #0
 801274c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801274e:	2300      	movs	r3, #0
 8012750:	2200      	movs	r2, #0
 8012752:	2100      	movs	r1, #0
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f000 f837 	bl	80127c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801275a:	bf00      	nop
 801275c:	3708      	adds	r7, #8
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}

08012762 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012762:	b580      	push	{r7, lr}
 8012764:	b086      	sub	sp, #24
 8012766:	af00      	add	r7, sp, #0
 8012768:	4603      	mov	r3, r0
 801276a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801276c:	2301      	movs	r3, #1
 801276e:	617b      	str	r3, [r7, #20]
 8012770:	2300      	movs	r3, #0
 8012772:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012774:	79fb      	ldrb	r3, [r7, #7]
 8012776:	461a      	mov	r2, r3
 8012778:	6939      	ldr	r1, [r7, #16]
 801277a:	6978      	ldr	r0, [r7, #20]
 801277c:	f7ff ff78 	bl	8012670 <xQueueGenericCreate>
 8012780:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	f7ff ffd3 	bl	801272e <prvInitialiseMutex>

		return xNewQueue;
 8012788:	68fb      	ldr	r3, [r7, #12]
	}
 801278a:	4618      	mov	r0, r3
 801278c:	3718      	adds	r7, #24
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}

08012792 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012792:	b580      	push	{r7, lr}
 8012794:	b088      	sub	sp, #32
 8012796:	af02      	add	r7, sp, #8
 8012798:	4603      	mov	r3, r0
 801279a:	6039      	str	r1, [r7, #0]
 801279c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801279e:	2301      	movs	r3, #1
 80127a0:	617b      	str	r3, [r7, #20]
 80127a2:	2300      	movs	r3, #0
 80127a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	2200      	movs	r2, #0
 80127ae:	6939      	ldr	r1, [r7, #16]
 80127b0:	6978      	ldr	r0, [r7, #20]
 80127b2:	f7ff fee5 	bl	8012580 <xQueueGenericCreateStatic>
 80127b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f7ff ffb8 	bl	801272e <prvInitialiseMutex>

		return xNewQueue;
 80127be:	68fb      	ldr	r3, [r7, #12]
	}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3718      	adds	r7, #24
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b08e      	sub	sp, #56	; 0x38
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
 80127d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80127d6:	2300      	movs	r3, #0
 80127d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d10a      	bne.n	80127fa <xQueueGenericSend+0x32>
	__asm volatile
 80127e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e8:	f383 8811 	msr	BASEPRI, r3
 80127ec:	f3bf 8f6f 	isb	sy
 80127f0:	f3bf 8f4f 	dsb	sy
 80127f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80127f6:	bf00      	nop
 80127f8:	e7fe      	b.n	80127f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d103      	bne.n	8012808 <xQueueGenericSend+0x40>
 8012800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012804:	2b00      	cmp	r3, #0
 8012806:	d101      	bne.n	801280c <xQueueGenericSend+0x44>
 8012808:	2301      	movs	r3, #1
 801280a:	e000      	b.n	801280e <xQueueGenericSend+0x46>
 801280c:	2300      	movs	r3, #0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d10a      	bne.n	8012828 <xQueueGenericSend+0x60>
	__asm volatile
 8012812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012816:	f383 8811 	msr	BASEPRI, r3
 801281a:	f3bf 8f6f 	isb	sy
 801281e:	f3bf 8f4f 	dsb	sy
 8012822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012824:	bf00      	nop
 8012826:	e7fe      	b.n	8012826 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2b02      	cmp	r3, #2
 801282c:	d103      	bne.n	8012836 <xQueueGenericSend+0x6e>
 801282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012832:	2b01      	cmp	r3, #1
 8012834:	d101      	bne.n	801283a <xQueueGenericSend+0x72>
 8012836:	2301      	movs	r3, #1
 8012838:	e000      	b.n	801283c <xQueueGenericSend+0x74>
 801283a:	2300      	movs	r3, #0
 801283c:	2b00      	cmp	r3, #0
 801283e:	d10a      	bne.n	8012856 <xQueueGenericSend+0x8e>
	__asm volatile
 8012840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012844:	f383 8811 	msr	BASEPRI, r3
 8012848:	f3bf 8f6f 	isb	sy
 801284c:	f3bf 8f4f 	dsb	sy
 8012850:	623b      	str	r3, [r7, #32]
}
 8012852:	bf00      	nop
 8012854:	e7fe      	b.n	8012854 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012856:	f001 f983 	bl	8013b60 <xTaskGetSchedulerState>
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d102      	bne.n	8012866 <xQueueGenericSend+0x9e>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <xQueueGenericSend+0xa2>
 8012866:	2301      	movs	r3, #1
 8012868:	e000      	b.n	801286c <xQueueGenericSend+0xa4>
 801286a:	2300      	movs	r3, #0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d10a      	bne.n	8012886 <xQueueGenericSend+0xbe>
	__asm volatile
 8012870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012874:	f383 8811 	msr	BASEPRI, r3
 8012878:	f3bf 8f6f 	isb	sy
 801287c:	f3bf 8f4f 	dsb	sy
 8012880:	61fb      	str	r3, [r7, #28]
}
 8012882:	bf00      	nop
 8012884:	e7fe      	b.n	8012884 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012886:	f001 fd8d 	bl	80143a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012892:	429a      	cmp	r2, r3
 8012894:	d302      	bcc.n	801289c <xQueueGenericSend+0xd4>
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	2b02      	cmp	r3, #2
 801289a:	d129      	bne.n	80128f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801289c:	683a      	ldr	r2, [r7, #0]
 801289e:	68b9      	ldr	r1, [r7, #8]
 80128a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128a2:	f000 fa87 	bl	8012db4 <prvCopyDataToQueue>
 80128a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d010      	beq.n	80128d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b2:	3324      	adds	r3, #36	; 0x24
 80128b4:	4618      	mov	r0, r3
 80128b6:	f000 ff97 	bl	80137e8 <xTaskRemoveFromEventList>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d013      	beq.n	80128e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80128c0:	4b3f      	ldr	r3, [pc, #252]	; (80129c0 <xQueueGenericSend+0x1f8>)
 80128c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128c6:	601a      	str	r2, [r3, #0]
 80128c8:	f3bf 8f4f 	dsb	sy
 80128cc:	f3bf 8f6f 	isb	sy
 80128d0:	e00a      	b.n	80128e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80128d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d007      	beq.n	80128e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80128d8:	4b39      	ldr	r3, [pc, #228]	; (80129c0 <xQueueGenericSend+0x1f8>)
 80128da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128de:	601a      	str	r2, [r3, #0]
 80128e0:	f3bf 8f4f 	dsb	sy
 80128e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80128e8:	f001 fd8c 	bl	8014404 <vPortExitCritical>
				return pdPASS;
 80128ec:	2301      	movs	r3, #1
 80128ee:	e063      	b.n	80129b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d103      	bne.n	80128fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80128f6:	f001 fd85 	bl	8014404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80128fa:	2300      	movs	r3, #0
 80128fc:	e05c      	b.n	80129b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80128fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012900:	2b00      	cmp	r3, #0
 8012902:	d106      	bne.n	8012912 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012904:	f107 0314 	add.w	r3, r7, #20
 8012908:	4618      	mov	r0, r3
 801290a:	f000 ffcf 	bl	80138ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801290e:	2301      	movs	r3, #1
 8012910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012912:	f001 fd77 	bl	8014404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012916:	f000 fd85 	bl	8013424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801291a:	f001 fd43 	bl	80143a4 <vPortEnterCritical>
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012924:	b25b      	sxtb	r3, r3
 8012926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801292a:	d103      	bne.n	8012934 <xQueueGenericSend+0x16c>
 801292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292e:	2200      	movs	r2, #0
 8012930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801293a:	b25b      	sxtb	r3, r3
 801293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012940:	d103      	bne.n	801294a <xQueueGenericSend+0x182>
 8012942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012944:	2200      	movs	r2, #0
 8012946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801294a:	f001 fd5b 	bl	8014404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801294e:	1d3a      	adds	r2, r7, #4
 8012950:	f107 0314 	add.w	r3, r7, #20
 8012954:	4611      	mov	r1, r2
 8012956:	4618      	mov	r0, r3
 8012958:	f000 ffbe 	bl	80138d8 <xTaskCheckForTimeOut>
 801295c:	4603      	mov	r3, r0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d124      	bne.n	80129ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012964:	f000 fb1e 	bl	8012fa4 <prvIsQueueFull>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d018      	beq.n	80129a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012970:	3310      	adds	r3, #16
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	4611      	mov	r1, r2
 8012976:	4618      	mov	r0, r3
 8012978:	f000 ff12 	bl	80137a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801297c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801297e:	f000 faa9 	bl	8012ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012982:	f000 fd5d 	bl	8013440 <xTaskResumeAll>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	f47f af7c 	bne.w	8012886 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801298e:	4b0c      	ldr	r3, [pc, #48]	; (80129c0 <xQueueGenericSend+0x1f8>)
 8012990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012994:	601a      	str	r2, [r3, #0]
 8012996:	f3bf 8f4f 	dsb	sy
 801299a:	f3bf 8f6f 	isb	sy
 801299e:	e772      	b.n	8012886 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80129a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129a2:	f000 fa97 	bl	8012ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129a6:	f000 fd4b 	bl	8013440 <xTaskResumeAll>
 80129aa:	e76c      	b.n	8012886 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80129ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129ae:	f000 fa91 	bl	8012ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129b2:	f000 fd45 	bl	8013440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80129b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3738      	adds	r7, #56	; 0x38
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	e000ed04 	.word	0xe000ed04

080129c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b08e      	sub	sp, #56	; 0x38
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	607a      	str	r2, [r7, #4]
 80129d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80129d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d10a      	bne.n	80129f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80129dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e0:	f383 8811 	msr	BASEPRI, r3
 80129e4:	f3bf 8f6f 	isb	sy
 80129e8:	f3bf 8f4f 	dsb	sy
 80129ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80129ee:	bf00      	nop
 80129f0:	e7fe      	b.n	80129f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d103      	bne.n	8012a00 <xQueueGenericSendFromISR+0x3c>
 80129f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d101      	bne.n	8012a04 <xQueueGenericSendFromISR+0x40>
 8012a00:	2301      	movs	r3, #1
 8012a02:	e000      	b.n	8012a06 <xQueueGenericSendFromISR+0x42>
 8012a04:	2300      	movs	r3, #0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10a      	bne.n	8012a20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0e:	f383 8811 	msr	BASEPRI, r3
 8012a12:	f3bf 8f6f 	isb	sy
 8012a16:	f3bf 8f4f 	dsb	sy
 8012a1a:	623b      	str	r3, [r7, #32]
}
 8012a1c:	bf00      	nop
 8012a1e:	e7fe      	b.n	8012a1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	2b02      	cmp	r3, #2
 8012a24:	d103      	bne.n	8012a2e <xQueueGenericSendFromISR+0x6a>
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d101      	bne.n	8012a32 <xQueueGenericSendFromISR+0x6e>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e000      	b.n	8012a34 <xQueueGenericSendFromISR+0x70>
 8012a32:	2300      	movs	r3, #0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d10a      	bne.n	8012a4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	61fb      	str	r3, [r7, #28]
}
 8012a4a:	bf00      	nop
 8012a4c:	e7fe      	b.n	8012a4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a4e:	f001 fd8b 	bl	8014568 <vPortValidateInterruptPriority>
	__asm volatile
 8012a52:	f3ef 8211 	mrs	r2, BASEPRI
 8012a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a5a:	f383 8811 	msr	BASEPRI, r3
 8012a5e:	f3bf 8f6f 	isb	sy
 8012a62:	f3bf 8f4f 	dsb	sy
 8012a66:	61ba      	str	r2, [r7, #24]
 8012a68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012a6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d302      	bcc.n	8012a80 <xQueueGenericSendFromISR+0xbc>
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	2b02      	cmp	r3, #2
 8012a7e:	d12c      	bne.n	8012ada <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a8a:	683a      	ldr	r2, [r7, #0]
 8012a8c:	68b9      	ldr	r1, [r7, #8]
 8012a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a90:	f000 f990 	bl	8012db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9c:	d112      	bne.n	8012ac4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d016      	beq.n	8012ad4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa8:	3324      	adds	r3, #36	; 0x24
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f000 fe9c 	bl	80137e8 <xTaskRemoveFromEventList>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d00e      	beq.n	8012ad4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00b      	beq.n	8012ad4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2201      	movs	r2, #1
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	e007      	b.n	8012ad4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ac8:	3301      	adds	r3, #1
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	b25a      	sxtb	r2, r3
 8012ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012ad8:	e001      	b.n	8012ade <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012ada:	2300      	movs	r3, #0
 8012adc:	637b      	str	r3, [r7, #52]	; 0x34
 8012ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	f383 8811 	msr	BASEPRI, r3
}
 8012ae8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3738      	adds	r7, #56	; 0x38
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b08c      	sub	sp, #48	; 0x30
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012b00:	2300      	movs	r3, #0
 8012b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d10a      	bne.n	8012b24 <xQueueReceive+0x30>
	__asm volatile
 8012b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b12:	f383 8811 	msr	BASEPRI, r3
 8012b16:	f3bf 8f6f 	isb	sy
 8012b1a:	f3bf 8f4f 	dsb	sy
 8012b1e:	623b      	str	r3, [r7, #32]
}
 8012b20:	bf00      	nop
 8012b22:	e7fe      	b.n	8012b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d103      	bne.n	8012b32 <xQueueReceive+0x3e>
 8012b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d101      	bne.n	8012b36 <xQueueReceive+0x42>
 8012b32:	2301      	movs	r3, #1
 8012b34:	e000      	b.n	8012b38 <xQueueReceive+0x44>
 8012b36:	2300      	movs	r3, #0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d10a      	bne.n	8012b52 <xQueueReceive+0x5e>
	__asm volatile
 8012b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b40:	f383 8811 	msr	BASEPRI, r3
 8012b44:	f3bf 8f6f 	isb	sy
 8012b48:	f3bf 8f4f 	dsb	sy
 8012b4c:	61fb      	str	r3, [r7, #28]
}
 8012b4e:	bf00      	nop
 8012b50:	e7fe      	b.n	8012b50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b52:	f001 f805 	bl	8013b60 <xTaskGetSchedulerState>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d102      	bne.n	8012b62 <xQueueReceive+0x6e>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d101      	bne.n	8012b66 <xQueueReceive+0x72>
 8012b62:	2301      	movs	r3, #1
 8012b64:	e000      	b.n	8012b68 <xQueueReceive+0x74>
 8012b66:	2300      	movs	r3, #0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d10a      	bne.n	8012b82 <xQueueReceive+0x8e>
	__asm volatile
 8012b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b70:	f383 8811 	msr	BASEPRI, r3
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	f3bf 8f4f 	dsb	sy
 8012b7c:	61bb      	str	r3, [r7, #24]
}
 8012b7e:	bf00      	nop
 8012b80:	e7fe      	b.n	8012b80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b82:	f001 fc0f 	bl	80143a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d01f      	beq.n	8012bd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012b92:	68b9      	ldr	r1, [r7, #8]
 8012b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b96:	f000 f977 	bl	8012e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9c:	1e5a      	subs	r2, r3, #1
 8012b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba4:	691b      	ldr	r3, [r3, #16]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d00f      	beq.n	8012bca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bac:	3310      	adds	r3, #16
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f000 fe1a 	bl	80137e8 <xTaskRemoveFromEventList>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d007      	beq.n	8012bca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012bba:	4b3d      	ldr	r3, [pc, #244]	; (8012cb0 <xQueueReceive+0x1bc>)
 8012bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bc0:	601a      	str	r2, [r3, #0]
 8012bc2:	f3bf 8f4f 	dsb	sy
 8012bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012bca:	f001 fc1b 	bl	8014404 <vPortExitCritical>
				return pdPASS;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	e069      	b.n	8012ca6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d103      	bne.n	8012be0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012bd8:	f001 fc14 	bl	8014404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	e062      	b.n	8012ca6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d106      	bne.n	8012bf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012be6:	f107 0310 	add.w	r3, r7, #16
 8012bea:	4618      	mov	r0, r3
 8012bec:	f000 fe5e 	bl	80138ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012bf4:	f001 fc06 	bl	8014404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012bf8:	f000 fc14 	bl	8013424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012bfc:	f001 fbd2 	bl	80143a4 <vPortEnterCritical>
 8012c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c06:	b25b      	sxtb	r3, r3
 8012c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0c:	d103      	bne.n	8012c16 <xQueueReceive+0x122>
 8012c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c10:	2200      	movs	r2, #0
 8012c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c1c:	b25b      	sxtb	r3, r3
 8012c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c22:	d103      	bne.n	8012c2c <xQueueReceive+0x138>
 8012c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c26:	2200      	movs	r2, #0
 8012c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c2c:	f001 fbea 	bl	8014404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c30:	1d3a      	adds	r2, r7, #4
 8012c32:	f107 0310 	add.w	r3, r7, #16
 8012c36:	4611      	mov	r1, r2
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f000 fe4d 	bl	80138d8 <xTaskCheckForTimeOut>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d123      	bne.n	8012c8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c46:	f000 f997 	bl	8012f78 <prvIsQueueEmpty>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d017      	beq.n	8012c80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c52:	3324      	adds	r3, #36	; 0x24
 8012c54:	687a      	ldr	r2, [r7, #4]
 8012c56:	4611      	mov	r1, r2
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f000 fda1 	bl	80137a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c60:	f000 f938 	bl	8012ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012c64:	f000 fbec 	bl	8013440 <xTaskResumeAll>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d189      	bne.n	8012b82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012c6e:	4b10      	ldr	r3, [pc, #64]	; (8012cb0 <xQueueReceive+0x1bc>)
 8012c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	f3bf 8f6f 	isb	sy
 8012c7e:	e780      	b.n	8012b82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c82:	f000 f927 	bl	8012ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c86:	f000 fbdb 	bl	8013440 <xTaskResumeAll>
 8012c8a:	e77a      	b.n	8012b82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c8e:	f000 f921 	bl	8012ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c92:	f000 fbd5 	bl	8013440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c98:	f000 f96e 	bl	8012f78 <prvIsQueueEmpty>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	f43f af6f 	beq.w	8012b82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3730      	adds	r7, #48	; 0x30
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	e000ed04 	.word	0xe000ed04

08012cb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b08e      	sub	sp, #56	; 0x38
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	60b9      	str	r1, [r7, #8]
 8012cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d10a      	bne.n	8012ce0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cce:	f383 8811 	msr	BASEPRI, r3
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	f3bf 8f4f 	dsb	sy
 8012cda:	623b      	str	r3, [r7, #32]
}
 8012cdc:	bf00      	nop
 8012cde:	e7fe      	b.n	8012cde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d103      	bne.n	8012cee <xQueueReceiveFromISR+0x3a>
 8012ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d101      	bne.n	8012cf2 <xQueueReceiveFromISR+0x3e>
 8012cee:	2301      	movs	r3, #1
 8012cf0:	e000      	b.n	8012cf4 <xQueueReceiveFromISR+0x40>
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d10a      	bne.n	8012d0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfc:	f383 8811 	msr	BASEPRI, r3
 8012d00:	f3bf 8f6f 	isb	sy
 8012d04:	f3bf 8f4f 	dsb	sy
 8012d08:	61fb      	str	r3, [r7, #28]
}
 8012d0a:	bf00      	nop
 8012d0c:	e7fe      	b.n	8012d0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d0e:	f001 fc2b 	bl	8014568 <vPortValidateInterruptPriority>
	__asm volatile
 8012d12:	f3ef 8211 	mrs	r2, BASEPRI
 8012d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1a:	f383 8811 	msr	BASEPRI, r3
 8012d1e:	f3bf 8f6f 	isb	sy
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	61ba      	str	r2, [r7, #24]
 8012d28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012d2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d02f      	beq.n	8012d9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d44:	68b9      	ldr	r1, [r7, #8]
 8012d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d48:	f000 f89e 	bl	8012e88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4e:	1e5a      	subs	r2, r3, #1
 8012d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d5c:	d112      	bne.n	8012d84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d60:	691b      	ldr	r3, [r3, #16]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d016      	beq.n	8012d94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	3310      	adds	r3, #16
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 fd3c 	bl	80137e8 <xTaskRemoveFromEventList>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d00e      	beq.n	8012d94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d00b      	beq.n	8012d94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2201      	movs	r2, #1
 8012d80:	601a      	str	r2, [r3, #0]
 8012d82:	e007      	b.n	8012d94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d88:	3301      	adds	r3, #1
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	b25a      	sxtb	r2, r3
 8012d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012d94:	2301      	movs	r3, #1
 8012d96:	637b      	str	r3, [r7, #52]	; 0x34
 8012d98:	e001      	b.n	8012d9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8012d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	f383 8811 	msr	BASEPRI, r3
}
 8012da8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3738      	adds	r7, #56	; 0x38
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d10d      	bne.n	8012dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d14d      	bne.n	8012e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	689b      	ldr	r3, [r3, #8]
 8012dde:	4618      	mov	r0, r3
 8012de0:	f000 fedc 	bl	8013b9c <xTaskPriorityDisinherit>
 8012de4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2200      	movs	r2, #0
 8012dea:	609a      	str	r2, [r3, #8]
 8012dec:	e043      	b.n	8012e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d119      	bne.n	8012e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6858      	ldr	r0, [r3, #4]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	68b9      	ldr	r1, [r7, #8]
 8012e00:	f002 fb56 	bl	80154b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	685a      	ldr	r2, [r3, #4]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e0c:	441a      	add	r2, r3
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	685a      	ldr	r2, [r3, #4]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d32b      	bcc.n	8012e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	605a      	str	r2, [r3, #4]
 8012e26:	e026      	b.n	8012e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	68d8      	ldr	r0, [r3, #12]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e30:	461a      	mov	r2, r3
 8012e32:	68b9      	ldr	r1, [r7, #8]
 8012e34:	f002 fb3c 	bl	80154b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	68da      	ldr	r2, [r3, #12]
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e40:	425b      	negs	r3, r3
 8012e42:	441a      	add	r2, r3
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	68da      	ldr	r2, [r3, #12]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d207      	bcs.n	8012e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	689a      	ldr	r2, [r3, #8]
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e5c:	425b      	negs	r3, r3
 8012e5e:	441a      	add	r2, r3
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2b02      	cmp	r3, #2
 8012e68:	d105      	bne.n	8012e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e6a:	693b      	ldr	r3, [r7, #16]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d002      	beq.n	8012e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	3b01      	subs	r3, #1
 8012e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	1c5a      	adds	r2, r3, #1
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012e7e:	697b      	ldr	r3, [r7, #20]
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3718      	adds	r7, #24
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d018      	beq.n	8012ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	68da      	ldr	r2, [r3, #12]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ea2:	441a      	add	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	68da      	ldr	r2, [r3, #12]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	689b      	ldr	r3, [r3, #8]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d303      	bcc.n	8012ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	68d9      	ldr	r1, [r3, #12]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	6838      	ldr	r0, [r7, #0]
 8012ec8:	f002 faf2 	bl	80154b0 <memcpy>
	}
}
 8012ecc:	bf00      	nop
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012edc:	f001 fa62 	bl	80143a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ee8:	e011      	b.n	8012f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d012      	beq.n	8012f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	3324      	adds	r3, #36	; 0x24
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f000 fc76 	bl	80137e8 <xTaskRemoveFromEventList>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d001      	beq.n	8012f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012f02:	f000 fd4b 	bl	801399c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012f06:	7bfb      	ldrb	r3, [r7, #15]
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	b2db      	uxtb	r3, r3
 8012f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	dce9      	bgt.n	8012eea <prvUnlockQueue+0x16>
 8012f16:	e000      	b.n	8012f1a <prvUnlockQueue+0x46>
					break;
 8012f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	22ff      	movs	r2, #255	; 0xff
 8012f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012f22:	f001 fa6f 	bl	8014404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012f26:	f001 fa3d 	bl	80143a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f32:	e011      	b.n	8012f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d012      	beq.n	8012f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	3310      	adds	r3, #16
 8012f40:	4618      	mov	r0, r3
 8012f42:	f000 fc51 	bl	80137e8 <xTaskRemoveFromEventList>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d001      	beq.n	8012f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012f4c:	f000 fd26 	bl	801399c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012f50:	7bbb      	ldrb	r3, [r7, #14]
 8012f52:	3b01      	subs	r3, #1
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	dce9      	bgt.n	8012f34 <prvUnlockQueue+0x60>
 8012f60:	e000      	b.n	8012f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	22ff      	movs	r2, #255	; 0xff
 8012f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012f6c:	f001 fa4a 	bl	8014404 <vPortExitCritical>
}
 8012f70:	bf00      	nop
 8012f72:	3710      	adds	r7, #16
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f80:	f001 fa10 	bl	80143a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d102      	bne.n	8012f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	60fb      	str	r3, [r7, #12]
 8012f90:	e001      	b.n	8012f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f92:	2300      	movs	r3, #0
 8012f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f96:	f001 fa35 	bl	8014404 <vPortExitCritical>

	return xReturn;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3710      	adds	r7, #16
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012fac:	f001 f9fa 	bl	80143a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d102      	bne.n	8012fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	60fb      	str	r3, [r7, #12]
 8012fc0:	e001      	b.n	8012fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012fc6:	f001 fa1d 	bl	8014404 <vPortExitCritical>

	return xReturn;
 8012fca:	68fb      	ldr	r3, [r7, #12]
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3710      	adds	r7, #16
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b08e      	sub	sp, #56	; 0x38
 8012fd8:	af04      	add	r7, sp, #16
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
 8012fe0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10a      	bne.n	8012ffe <xTaskCreateStatic+0x2a>
	__asm volatile
 8012fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fec:	f383 8811 	msr	BASEPRI, r3
 8012ff0:	f3bf 8f6f 	isb	sy
 8012ff4:	f3bf 8f4f 	dsb	sy
 8012ff8:	623b      	str	r3, [r7, #32]
}
 8012ffa:	bf00      	nop
 8012ffc:	e7fe      	b.n	8012ffc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013000:	2b00      	cmp	r3, #0
 8013002:	d10a      	bne.n	801301a <xTaskCreateStatic+0x46>
	__asm volatile
 8013004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013008:	f383 8811 	msr	BASEPRI, r3
 801300c:	f3bf 8f6f 	isb	sy
 8013010:	f3bf 8f4f 	dsb	sy
 8013014:	61fb      	str	r3, [r7, #28]
}
 8013016:	bf00      	nop
 8013018:	e7fe      	b.n	8013018 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801301a:	2354      	movs	r3, #84	; 0x54
 801301c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	2b54      	cmp	r3, #84	; 0x54
 8013022:	d00a      	beq.n	801303a <xTaskCreateStatic+0x66>
	__asm volatile
 8013024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013028:	f383 8811 	msr	BASEPRI, r3
 801302c:	f3bf 8f6f 	isb	sy
 8013030:	f3bf 8f4f 	dsb	sy
 8013034:	61bb      	str	r3, [r7, #24]
}
 8013036:	bf00      	nop
 8013038:	e7fe      	b.n	8013038 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801303a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303e:	2b00      	cmp	r3, #0
 8013040:	d01e      	beq.n	8013080 <xTaskCreateStatic+0xac>
 8013042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013044:	2b00      	cmp	r3, #0
 8013046:	d01b      	beq.n	8013080 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013050:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013054:	2202      	movs	r2, #2
 8013056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801305a:	2300      	movs	r3, #0
 801305c:	9303      	str	r3, [sp, #12]
 801305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013060:	9302      	str	r3, [sp, #8]
 8013062:	f107 0314 	add.w	r3, r7, #20
 8013066:	9301      	str	r3, [sp, #4]
 8013068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	68b9      	ldr	r1, [r7, #8]
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f000 f850 	bl	8013118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801307a:	f000 f8d5 	bl	8013228 <prvAddNewTaskToReadyList>
 801307e:	e001      	b.n	8013084 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013080:	2300      	movs	r3, #0
 8013082:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013084:	697b      	ldr	r3, [r7, #20]
	}
 8013086:	4618      	mov	r0, r3
 8013088:	3728      	adds	r7, #40	; 0x28
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801308e:	b580      	push	{r7, lr}
 8013090:	b08c      	sub	sp, #48	; 0x30
 8013092:	af04      	add	r7, sp, #16
 8013094:	60f8      	str	r0, [r7, #12]
 8013096:	60b9      	str	r1, [r7, #8]
 8013098:	603b      	str	r3, [r7, #0]
 801309a:	4613      	mov	r3, r2
 801309c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801309e:	88fb      	ldrh	r3, [r7, #6]
 80130a0:	009b      	lsls	r3, r3, #2
 80130a2:	4618      	mov	r0, r3
 80130a4:	f001 faa0 	bl	80145e8 <pvPortMalloc>
 80130a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00e      	beq.n	80130ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80130b0:	2054      	movs	r0, #84	; 0x54
 80130b2:	f001 fa99 	bl	80145e8 <pvPortMalloc>
 80130b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d003      	beq.n	80130c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	697a      	ldr	r2, [r7, #20]
 80130c2:	631a      	str	r2, [r3, #48]	; 0x30
 80130c4:	e005      	b.n	80130d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80130c6:	6978      	ldr	r0, [r7, #20]
 80130c8:	f001 fb52 	bl	8014770 <vPortFree>
 80130cc:	e001      	b.n	80130d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80130ce:	2300      	movs	r3, #0
 80130d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d017      	beq.n	8013108 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80130e0:	88fa      	ldrh	r2, [r7, #6]
 80130e2:	2300      	movs	r3, #0
 80130e4:	9303      	str	r3, [sp, #12]
 80130e6:	69fb      	ldr	r3, [r7, #28]
 80130e8:	9302      	str	r3, [sp, #8]
 80130ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ec:	9301      	str	r3, [sp, #4]
 80130ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f0:	9300      	str	r3, [sp, #0]
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	68b9      	ldr	r1, [r7, #8]
 80130f6:	68f8      	ldr	r0, [r7, #12]
 80130f8:	f000 f80e 	bl	8013118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80130fc:	69f8      	ldr	r0, [r7, #28]
 80130fe:	f000 f893 	bl	8013228 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013102:	2301      	movs	r3, #1
 8013104:	61bb      	str	r3, [r7, #24]
 8013106:	e002      	b.n	801310e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013108:	f04f 33ff 	mov.w	r3, #4294967295
 801310c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801310e:	69bb      	ldr	r3, [r7, #24]
	}
 8013110:	4618      	mov	r0, r3
 8013112:	3720      	adds	r7, #32
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b088      	sub	sp, #32
 801311c:	af00      	add	r7, sp, #0
 801311e:	60f8      	str	r0, [r7, #12]
 8013120:	60b9      	str	r1, [r7, #8]
 8013122:	607a      	str	r2, [r7, #4]
 8013124:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013130:	3b01      	subs	r3, #1
 8013132:	009b      	lsls	r3, r3, #2
 8013134:	4413      	add	r3, r2
 8013136:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	f023 0307 	bic.w	r3, r3, #7
 801313e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	f003 0307 	and.w	r3, r3, #7
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00a      	beq.n	8013160 <prvInitialiseNewTask+0x48>
	__asm volatile
 801314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801314e:	f383 8811 	msr	BASEPRI, r3
 8013152:	f3bf 8f6f 	isb	sy
 8013156:	f3bf 8f4f 	dsb	sy
 801315a:	617b      	str	r3, [r7, #20]
}
 801315c:	bf00      	nop
 801315e:	e7fe      	b.n	801315e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d01f      	beq.n	80131a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013166:	2300      	movs	r3, #0
 8013168:	61fb      	str	r3, [r7, #28]
 801316a:	e012      	b.n	8013192 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801316c:	68ba      	ldr	r2, [r7, #8]
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	4413      	add	r3, r2
 8013172:	7819      	ldrb	r1, [r3, #0]
 8013174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	4413      	add	r3, r2
 801317a:	3334      	adds	r3, #52	; 0x34
 801317c:	460a      	mov	r2, r1
 801317e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013180:	68ba      	ldr	r2, [r7, #8]
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	4413      	add	r3, r2
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d006      	beq.n	801319a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	3301      	adds	r3, #1
 8013190:	61fb      	str	r3, [r7, #28]
 8013192:	69fb      	ldr	r3, [r7, #28]
 8013194:	2b0f      	cmp	r3, #15
 8013196:	d9e9      	bls.n	801316c <prvInitialiseNewTask+0x54>
 8013198:	e000      	b.n	801319c <prvInitialiseNewTask+0x84>
			{
				break;
 801319a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319e:	2200      	movs	r2, #0
 80131a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80131a4:	e003      	b.n	80131ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80131a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a8:	2200      	movs	r2, #0
 80131aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80131ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b0:	2b06      	cmp	r3, #6
 80131b2:	d901      	bls.n	80131b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80131b4:	2306      	movs	r3, #6
 80131b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80131b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80131be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80131c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c6:	2200      	movs	r2, #0
 80131c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80131ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131cc:	3304      	adds	r3, #4
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7ff f8d9 	bl	8012386 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80131d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d6:	3318      	adds	r3, #24
 80131d8:	4618      	mov	r0, r3
 80131da:	f7ff f8d4 	bl	8012386 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80131de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e6:	f1c3 0207 	rsb	r2, r3, #7
 80131ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	2200      	movs	r2, #0
 80131f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80131fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fc:	2200      	movs	r2, #0
 80131fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013202:	683a      	ldr	r2, [r7, #0]
 8013204:	68f9      	ldr	r1, [r7, #12]
 8013206:	69b8      	ldr	r0, [r7, #24]
 8013208:	f000 ff9e 	bl	8014148 <pxPortInitialiseStack>
 801320c:	4602      	mov	r2, r0
 801320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013210:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013214:	2b00      	cmp	r3, #0
 8013216:	d002      	beq.n	801321e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801321c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801321e:	bf00      	nop
 8013220:	3720      	adds	r7, #32
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
	...

08013228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013230:	f001 f8b8 	bl	80143a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013234:	4b2a      	ldr	r3, [pc, #168]	; (80132e0 <prvAddNewTaskToReadyList+0xb8>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	3301      	adds	r3, #1
 801323a:	4a29      	ldr	r2, [pc, #164]	; (80132e0 <prvAddNewTaskToReadyList+0xb8>)
 801323c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801323e:	4b29      	ldr	r3, [pc, #164]	; (80132e4 <prvAddNewTaskToReadyList+0xbc>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d109      	bne.n	801325a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013246:	4a27      	ldr	r2, [pc, #156]	; (80132e4 <prvAddNewTaskToReadyList+0xbc>)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801324c:	4b24      	ldr	r3, [pc, #144]	; (80132e0 <prvAddNewTaskToReadyList+0xb8>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d110      	bne.n	8013276 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013254:	f000 fbc6 	bl	80139e4 <prvInitialiseTaskLists>
 8013258:	e00d      	b.n	8013276 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801325a:	4b23      	ldr	r3, [pc, #140]	; (80132e8 <prvAddNewTaskToReadyList+0xc0>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d109      	bne.n	8013276 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013262:	4b20      	ldr	r3, [pc, #128]	; (80132e4 <prvAddNewTaskToReadyList+0xbc>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801326c:	429a      	cmp	r2, r3
 801326e:	d802      	bhi.n	8013276 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013270:	4a1c      	ldr	r2, [pc, #112]	; (80132e4 <prvAddNewTaskToReadyList+0xbc>)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013276:	4b1d      	ldr	r3, [pc, #116]	; (80132ec <prvAddNewTaskToReadyList+0xc4>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	3301      	adds	r3, #1
 801327c:	4a1b      	ldr	r2, [pc, #108]	; (80132ec <prvAddNewTaskToReadyList+0xc4>)
 801327e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013284:	2201      	movs	r2, #1
 8013286:	409a      	lsls	r2, r3
 8013288:	4b19      	ldr	r3, [pc, #100]	; (80132f0 <prvAddNewTaskToReadyList+0xc8>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4313      	orrs	r3, r2
 801328e:	4a18      	ldr	r2, [pc, #96]	; (80132f0 <prvAddNewTaskToReadyList+0xc8>)
 8013290:	6013      	str	r3, [r2, #0]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013296:	4613      	mov	r3, r2
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	4413      	add	r3, r2
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	4a15      	ldr	r2, [pc, #84]	; (80132f4 <prvAddNewTaskToReadyList+0xcc>)
 80132a0:	441a      	add	r2, r3
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	3304      	adds	r3, #4
 80132a6:	4619      	mov	r1, r3
 80132a8:	4610      	mov	r0, r2
 80132aa:	f7ff f879 	bl	80123a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80132ae:	f001 f8a9 	bl	8014404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80132b2:	4b0d      	ldr	r3, [pc, #52]	; (80132e8 <prvAddNewTaskToReadyList+0xc0>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d00e      	beq.n	80132d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80132ba:	4b0a      	ldr	r3, [pc, #40]	; (80132e4 <prvAddNewTaskToReadyList+0xbc>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d207      	bcs.n	80132d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80132c8:	4b0b      	ldr	r3, [pc, #44]	; (80132f8 <prvAddNewTaskToReadyList+0xd0>)
 80132ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132ce:	601a      	str	r2, [r3, #0]
 80132d0:	f3bf 8f4f 	dsb	sy
 80132d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80132d8:	bf00      	nop
 80132da:	3708      	adds	r7, #8
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	20004974 	.word	0x20004974
 80132e4:	20004874 	.word	0x20004874
 80132e8:	20004980 	.word	0x20004980
 80132ec:	20004990 	.word	0x20004990
 80132f0:	2000497c 	.word	0x2000497c
 80132f4:	20004878 	.word	0x20004878
 80132f8:	e000ed04 	.word	0xe000ed04

080132fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013304:	2300      	movs	r3, #0
 8013306:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d017      	beq.n	801333e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801330e:	4b13      	ldr	r3, [pc, #76]	; (801335c <vTaskDelay+0x60>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d00a      	beq.n	801332c <vTaskDelay+0x30>
	__asm volatile
 8013316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801331a:	f383 8811 	msr	BASEPRI, r3
 801331e:	f3bf 8f6f 	isb	sy
 8013322:	f3bf 8f4f 	dsb	sy
 8013326:	60bb      	str	r3, [r7, #8]
}
 8013328:	bf00      	nop
 801332a:	e7fe      	b.n	801332a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801332c:	f000 f87a 	bl	8013424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013330:	2100      	movs	r1, #0
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f000 fea2 	bl	801407c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013338:	f000 f882 	bl	8013440 <xTaskResumeAll>
 801333c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d107      	bne.n	8013354 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013344:	4b06      	ldr	r3, [pc, #24]	; (8013360 <vTaskDelay+0x64>)
 8013346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801334a:	601a      	str	r2, [r3, #0]
 801334c:	f3bf 8f4f 	dsb	sy
 8013350:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013354:	bf00      	nop
 8013356:	3710      	adds	r7, #16
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}
 801335c:	2000499c 	.word	0x2000499c
 8013360:	e000ed04 	.word	0xe000ed04

08013364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b08a      	sub	sp, #40	; 0x28
 8013368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801336a:	2300      	movs	r3, #0
 801336c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801336e:	2300      	movs	r3, #0
 8013370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013372:	463a      	mov	r2, r7
 8013374:	1d39      	adds	r1, r7, #4
 8013376:	f107 0308 	add.w	r3, r7, #8
 801337a:	4618      	mov	r0, r3
 801337c:	f7ef fa76 	bl	800286c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013380:	6839      	ldr	r1, [r7, #0]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	68ba      	ldr	r2, [r7, #8]
 8013386:	9202      	str	r2, [sp, #8]
 8013388:	9301      	str	r3, [sp, #4]
 801338a:	2300      	movs	r3, #0
 801338c:	9300      	str	r3, [sp, #0]
 801338e:	2300      	movs	r3, #0
 8013390:	460a      	mov	r2, r1
 8013392:	491e      	ldr	r1, [pc, #120]	; (801340c <vTaskStartScheduler+0xa8>)
 8013394:	481e      	ldr	r0, [pc, #120]	; (8013410 <vTaskStartScheduler+0xac>)
 8013396:	f7ff fe1d 	bl	8012fd4 <xTaskCreateStatic>
 801339a:	4603      	mov	r3, r0
 801339c:	4a1d      	ldr	r2, [pc, #116]	; (8013414 <vTaskStartScheduler+0xb0>)
 801339e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80133a0:	4b1c      	ldr	r3, [pc, #112]	; (8013414 <vTaskStartScheduler+0xb0>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d002      	beq.n	80133ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80133a8:	2301      	movs	r3, #1
 80133aa:	617b      	str	r3, [r7, #20]
 80133ac:	e001      	b.n	80133b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80133ae:	2300      	movs	r3, #0
 80133b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	2b01      	cmp	r3, #1
 80133b6:	d116      	bne.n	80133e6 <vTaskStartScheduler+0x82>
	__asm volatile
 80133b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133bc:	f383 8811 	msr	BASEPRI, r3
 80133c0:	f3bf 8f6f 	isb	sy
 80133c4:	f3bf 8f4f 	dsb	sy
 80133c8:	613b      	str	r3, [r7, #16]
}
 80133ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80133cc:	4b12      	ldr	r3, [pc, #72]	; (8013418 <vTaskStartScheduler+0xb4>)
 80133ce:	f04f 32ff 	mov.w	r2, #4294967295
 80133d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80133d4:	4b11      	ldr	r3, [pc, #68]	; (801341c <vTaskStartScheduler+0xb8>)
 80133d6:	2201      	movs	r2, #1
 80133d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80133da:	4b11      	ldr	r3, [pc, #68]	; (8013420 <vTaskStartScheduler+0xbc>)
 80133dc:	2200      	movs	r2, #0
 80133de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80133e0:	f000 ff3e 	bl	8014260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80133e4:	e00e      	b.n	8013404 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ec:	d10a      	bne.n	8013404 <vTaskStartScheduler+0xa0>
	__asm volatile
 80133ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f2:	f383 8811 	msr	BASEPRI, r3
 80133f6:	f3bf 8f6f 	isb	sy
 80133fa:	f3bf 8f4f 	dsb	sy
 80133fe:	60fb      	str	r3, [r7, #12]
}
 8013400:	bf00      	nop
 8013402:	e7fe      	b.n	8013402 <vTaskStartScheduler+0x9e>
}
 8013404:	bf00      	nop
 8013406:	3718      	adds	r7, #24
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	0801bdac 	.word	0x0801bdac
 8013410:	080139b5 	.word	0x080139b5
 8013414:	20004998 	.word	0x20004998
 8013418:	20004994 	.word	0x20004994
 801341c:	20004980 	.word	0x20004980
 8013420:	20004978 	.word	0x20004978

08013424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013424:	b480      	push	{r7}
 8013426:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013428:	4b04      	ldr	r3, [pc, #16]	; (801343c <vTaskSuspendAll+0x18>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	3301      	adds	r3, #1
 801342e:	4a03      	ldr	r2, [pc, #12]	; (801343c <vTaskSuspendAll+0x18>)
 8013430:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013432:	bf00      	nop
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr
 801343c:	2000499c 	.word	0x2000499c

08013440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013446:	2300      	movs	r3, #0
 8013448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801344a:	2300      	movs	r3, #0
 801344c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801344e:	4b41      	ldr	r3, [pc, #260]	; (8013554 <xTaskResumeAll+0x114>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d10a      	bne.n	801346c <xTaskResumeAll+0x2c>
	__asm volatile
 8013456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801345a:	f383 8811 	msr	BASEPRI, r3
 801345e:	f3bf 8f6f 	isb	sy
 8013462:	f3bf 8f4f 	dsb	sy
 8013466:	603b      	str	r3, [r7, #0]
}
 8013468:	bf00      	nop
 801346a:	e7fe      	b.n	801346a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801346c:	f000 ff9a 	bl	80143a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013470:	4b38      	ldr	r3, [pc, #224]	; (8013554 <xTaskResumeAll+0x114>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	3b01      	subs	r3, #1
 8013476:	4a37      	ldr	r2, [pc, #220]	; (8013554 <xTaskResumeAll+0x114>)
 8013478:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801347a:	4b36      	ldr	r3, [pc, #216]	; (8013554 <xTaskResumeAll+0x114>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d161      	bne.n	8013546 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013482:	4b35      	ldr	r3, [pc, #212]	; (8013558 <xTaskResumeAll+0x118>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d05d      	beq.n	8013546 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801348a:	e02e      	b.n	80134ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801348c:	4b33      	ldr	r3, [pc, #204]	; (801355c <xTaskResumeAll+0x11c>)
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	68db      	ldr	r3, [r3, #12]
 8013492:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	3318      	adds	r3, #24
 8013498:	4618      	mov	r0, r3
 801349a:	f7fe ffde 	bl	801245a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	3304      	adds	r3, #4
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7fe ffd9 	bl	801245a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ac:	2201      	movs	r2, #1
 80134ae:	409a      	lsls	r2, r3
 80134b0:	4b2b      	ldr	r3, [pc, #172]	; (8013560 <xTaskResumeAll+0x120>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	4313      	orrs	r3, r2
 80134b6:	4a2a      	ldr	r2, [pc, #168]	; (8013560 <xTaskResumeAll+0x120>)
 80134b8:	6013      	str	r3, [r2, #0]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134be:	4613      	mov	r3, r2
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	4413      	add	r3, r2
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	4a27      	ldr	r2, [pc, #156]	; (8013564 <xTaskResumeAll+0x124>)
 80134c8:	441a      	add	r2, r3
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	3304      	adds	r3, #4
 80134ce:	4619      	mov	r1, r3
 80134d0:	4610      	mov	r0, r2
 80134d2:	f7fe ff65 	bl	80123a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134da:	4b23      	ldr	r3, [pc, #140]	; (8013568 <xTaskResumeAll+0x128>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d302      	bcc.n	80134ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80134e4:	4b21      	ldr	r3, [pc, #132]	; (801356c <xTaskResumeAll+0x12c>)
 80134e6:	2201      	movs	r2, #1
 80134e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80134ea:	4b1c      	ldr	r3, [pc, #112]	; (801355c <xTaskResumeAll+0x11c>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d1cc      	bne.n	801348c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80134f8:	f000 fb12 	bl	8013b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80134fc:	4b1c      	ldr	r3, [pc, #112]	; (8013570 <xTaskResumeAll+0x130>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d010      	beq.n	801352a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013508:	f000 f836 	bl	8013578 <xTaskIncrementTick>
 801350c:	4603      	mov	r3, r0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d002      	beq.n	8013518 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013512:	4b16      	ldr	r3, [pc, #88]	; (801356c <xTaskResumeAll+0x12c>)
 8013514:	2201      	movs	r2, #1
 8013516:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	3b01      	subs	r3, #1
 801351c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d1f1      	bne.n	8013508 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013524:	4b12      	ldr	r3, [pc, #72]	; (8013570 <xTaskResumeAll+0x130>)
 8013526:	2200      	movs	r2, #0
 8013528:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801352a:	4b10      	ldr	r3, [pc, #64]	; (801356c <xTaskResumeAll+0x12c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d009      	beq.n	8013546 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013532:	2301      	movs	r3, #1
 8013534:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013536:	4b0f      	ldr	r3, [pc, #60]	; (8013574 <xTaskResumeAll+0x134>)
 8013538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801353c:	601a      	str	r2, [r3, #0]
 801353e:	f3bf 8f4f 	dsb	sy
 8013542:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013546:	f000 ff5d 	bl	8014404 <vPortExitCritical>

	return xAlreadyYielded;
 801354a:	68bb      	ldr	r3, [r7, #8]
}
 801354c:	4618      	mov	r0, r3
 801354e:	3710      	adds	r7, #16
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	2000499c 	.word	0x2000499c
 8013558:	20004974 	.word	0x20004974
 801355c:	20004934 	.word	0x20004934
 8013560:	2000497c 	.word	0x2000497c
 8013564:	20004878 	.word	0x20004878
 8013568:	20004874 	.word	0x20004874
 801356c:	20004988 	.word	0x20004988
 8013570:	20004984 	.word	0x20004984
 8013574:	e000ed04 	.word	0xe000ed04

08013578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801357e:	2300      	movs	r3, #0
 8013580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013582:	4b4e      	ldr	r3, [pc, #312]	; (80136bc <xTaskIncrementTick+0x144>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	f040 8088 	bne.w	801369c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801358c:	4b4c      	ldr	r3, [pc, #304]	; (80136c0 <xTaskIncrementTick+0x148>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	3301      	adds	r3, #1
 8013592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013594:	4a4a      	ldr	r2, [pc, #296]	; (80136c0 <xTaskIncrementTick+0x148>)
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d120      	bne.n	80135e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80135a0:	4b48      	ldr	r3, [pc, #288]	; (80136c4 <xTaskIncrementTick+0x14c>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d00a      	beq.n	80135c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80135aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ae:	f383 8811 	msr	BASEPRI, r3
 80135b2:	f3bf 8f6f 	isb	sy
 80135b6:	f3bf 8f4f 	dsb	sy
 80135ba:	603b      	str	r3, [r7, #0]
}
 80135bc:	bf00      	nop
 80135be:	e7fe      	b.n	80135be <xTaskIncrementTick+0x46>
 80135c0:	4b40      	ldr	r3, [pc, #256]	; (80136c4 <xTaskIncrementTick+0x14c>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	60fb      	str	r3, [r7, #12]
 80135c6:	4b40      	ldr	r3, [pc, #256]	; (80136c8 <xTaskIncrementTick+0x150>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	4a3e      	ldr	r2, [pc, #248]	; (80136c4 <xTaskIncrementTick+0x14c>)
 80135cc:	6013      	str	r3, [r2, #0]
 80135ce:	4a3e      	ldr	r2, [pc, #248]	; (80136c8 <xTaskIncrementTick+0x150>)
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6013      	str	r3, [r2, #0]
 80135d4:	4b3d      	ldr	r3, [pc, #244]	; (80136cc <xTaskIncrementTick+0x154>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3301      	adds	r3, #1
 80135da:	4a3c      	ldr	r2, [pc, #240]	; (80136cc <xTaskIncrementTick+0x154>)
 80135dc:	6013      	str	r3, [r2, #0]
 80135de:	f000 fa9f 	bl	8013b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80135e2:	4b3b      	ldr	r3, [pc, #236]	; (80136d0 <xTaskIncrementTick+0x158>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d348      	bcc.n	801367e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80135ec:	4b35      	ldr	r3, [pc, #212]	; (80136c4 <xTaskIncrementTick+0x14c>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d104      	bne.n	8013600 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135f6:	4b36      	ldr	r3, [pc, #216]	; (80136d0 <xTaskIncrementTick+0x158>)
 80135f8:	f04f 32ff 	mov.w	r2, #4294967295
 80135fc:	601a      	str	r2, [r3, #0]
					break;
 80135fe:	e03e      	b.n	801367e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013600:	4b30      	ldr	r3, [pc, #192]	; (80136c4 <xTaskIncrementTick+0x14c>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	68db      	ldr	r3, [r3, #12]
 8013608:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013610:	693a      	ldr	r2, [r7, #16]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	429a      	cmp	r2, r3
 8013616:	d203      	bcs.n	8013620 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013618:	4a2d      	ldr	r2, [pc, #180]	; (80136d0 <xTaskIncrementTick+0x158>)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801361e:	e02e      	b.n	801367e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	3304      	adds	r3, #4
 8013624:	4618      	mov	r0, r3
 8013626:	f7fe ff18 	bl	801245a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801362e:	2b00      	cmp	r3, #0
 8013630:	d004      	beq.n	801363c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	3318      	adds	r3, #24
 8013636:	4618      	mov	r0, r3
 8013638:	f7fe ff0f 	bl	801245a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013640:	2201      	movs	r2, #1
 8013642:	409a      	lsls	r2, r3
 8013644:	4b23      	ldr	r3, [pc, #140]	; (80136d4 <xTaskIncrementTick+0x15c>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4313      	orrs	r3, r2
 801364a:	4a22      	ldr	r2, [pc, #136]	; (80136d4 <xTaskIncrementTick+0x15c>)
 801364c:	6013      	str	r3, [r2, #0]
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013652:	4613      	mov	r3, r2
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	4413      	add	r3, r2
 8013658:	009b      	lsls	r3, r3, #2
 801365a:	4a1f      	ldr	r2, [pc, #124]	; (80136d8 <xTaskIncrementTick+0x160>)
 801365c:	441a      	add	r2, r3
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	3304      	adds	r3, #4
 8013662:	4619      	mov	r1, r3
 8013664:	4610      	mov	r0, r2
 8013666:	f7fe fe9b 	bl	80123a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801366e:	4b1b      	ldr	r3, [pc, #108]	; (80136dc <xTaskIncrementTick+0x164>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013674:	429a      	cmp	r2, r3
 8013676:	d3b9      	bcc.n	80135ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013678:	2301      	movs	r3, #1
 801367a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801367c:	e7b6      	b.n	80135ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801367e:	4b17      	ldr	r3, [pc, #92]	; (80136dc <xTaskIncrementTick+0x164>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013684:	4914      	ldr	r1, [pc, #80]	; (80136d8 <xTaskIncrementTick+0x160>)
 8013686:	4613      	mov	r3, r2
 8013688:	009b      	lsls	r3, r3, #2
 801368a:	4413      	add	r3, r2
 801368c:	009b      	lsls	r3, r3, #2
 801368e:	440b      	add	r3, r1
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	2b01      	cmp	r3, #1
 8013694:	d907      	bls.n	80136a6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8013696:	2301      	movs	r3, #1
 8013698:	617b      	str	r3, [r7, #20]
 801369a:	e004      	b.n	80136a6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801369c:	4b10      	ldr	r3, [pc, #64]	; (80136e0 <xTaskIncrementTick+0x168>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	3301      	adds	r3, #1
 80136a2:	4a0f      	ldr	r2, [pc, #60]	; (80136e0 <xTaskIncrementTick+0x168>)
 80136a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80136a6:	4b0f      	ldr	r3, [pc, #60]	; (80136e4 <xTaskIncrementTick+0x16c>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d001      	beq.n	80136b2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80136ae:	2301      	movs	r3, #1
 80136b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80136b2:	697b      	ldr	r3, [r7, #20]
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	2000499c 	.word	0x2000499c
 80136c0:	20004978 	.word	0x20004978
 80136c4:	2000492c 	.word	0x2000492c
 80136c8:	20004930 	.word	0x20004930
 80136cc:	2000498c 	.word	0x2000498c
 80136d0:	20004994 	.word	0x20004994
 80136d4:	2000497c 	.word	0x2000497c
 80136d8:	20004878 	.word	0x20004878
 80136dc:	20004874 	.word	0x20004874
 80136e0:	20004984 	.word	0x20004984
 80136e4:	20004988 	.word	0x20004988

080136e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80136e8:	b480      	push	{r7}
 80136ea:	b087      	sub	sp, #28
 80136ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80136ee:	4b27      	ldr	r3, [pc, #156]	; (801378c <vTaskSwitchContext+0xa4>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d003      	beq.n	80136fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80136f6:	4b26      	ldr	r3, [pc, #152]	; (8013790 <vTaskSwitchContext+0xa8>)
 80136f8:	2201      	movs	r2, #1
 80136fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80136fc:	e03f      	b.n	801377e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80136fe:	4b24      	ldr	r3, [pc, #144]	; (8013790 <vTaskSwitchContext+0xa8>)
 8013700:	2200      	movs	r2, #0
 8013702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013704:	4b23      	ldr	r3, [pc, #140]	; (8013794 <vTaskSwitchContext+0xac>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	fab3 f383 	clz	r3, r3
 8013710:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013712:	7afb      	ldrb	r3, [r7, #11]
 8013714:	f1c3 031f 	rsb	r3, r3, #31
 8013718:	617b      	str	r3, [r7, #20]
 801371a:	491f      	ldr	r1, [pc, #124]	; (8013798 <vTaskSwitchContext+0xb0>)
 801371c:	697a      	ldr	r2, [r7, #20]
 801371e:	4613      	mov	r3, r2
 8013720:	009b      	lsls	r3, r3, #2
 8013722:	4413      	add	r3, r2
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	440b      	add	r3, r1
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d10a      	bne.n	8013744 <vTaskSwitchContext+0x5c>
	__asm volatile
 801372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013732:	f383 8811 	msr	BASEPRI, r3
 8013736:	f3bf 8f6f 	isb	sy
 801373a:	f3bf 8f4f 	dsb	sy
 801373e:	607b      	str	r3, [r7, #4]
}
 8013740:	bf00      	nop
 8013742:	e7fe      	b.n	8013742 <vTaskSwitchContext+0x5a>
 8013744:	697a      	ldr	r2, [r7, #20]
 8013746:	4613      	mov	r3, r2
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	4413      	add	r3, r2
 801374c:	009b      	lsls	r3, r3, #2
 801374e:	4a12      	ldr	r2, [pc, #72]	; (8013798 <vTaskSwitchContext+0xb0>)
 8013750:	4413      	add	r3, r2
 8013752:	613b      	str	r3, [r7, #16]
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	685a      	ldr	r2, [r3, #4]
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	605a      	str	r2, [r3, #4]
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	685a      	ldr	r2, [r3, #4]
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	3308      	adds	r3, #8
 8013766:	429a      	cmp	r2, r3
 8013768:	d104      	bne.n	8013774 <vTaskSwitchContext+0x8c>
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	685a      	ldr	r2, [r3, #4]
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	605a      	str	r2, [r3, #4]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	4a08      	ldr	r2, [pc, #32]	; (801379c <vTaskSwitchContext+0xb4>)
 801377c:	6013      	str	r3, [r2, #0]
}
 801377e:	bf00      	nop
 8013780:	371c      	adds	r7, #28
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop
 801378c:	2000499c 	.word	0x2000499c
 8013790:	20004988 	.word	0x20004988
 8013794:	2000497c 	.word	0x2000497c
 8013798:	20004878 	.word	0x20004878
 801379c:	20004874 	.word	0x20004874

080137a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b084      	sub	sp, #16
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d10a      	bne.n	80137c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80137b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b4:	f383 8811 	msr	BASEPRI, r3
 80137b8:	f3bf 8f6f 	isb	sy
 80137bc:	f3bf 8f4f 	dsb	sy
 80137c0:	60fb      	str	r3, [r7, #12]
}
 80137c2:	bf00      	nop
 80137c4:	e7fe      	b.n	80137c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80137c6:	4b07      	ldr	r3, [pc, #28]	; (80137e4 <vTaskPlaceOnEventList+0x44>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	3318      	adds	r3, #24
 80137cc:	4619      	mov	r1, r3
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f7fe fe0a 	bl	80123e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80137d4:	2101      	movs	r1, #1
 80137d6:	6838      	ldr	r0, [r7, #0]
 80137d8:	f000 fc50 	bl	801407c <prvAddCurrentTaskToDelayedList>
}
 80137dc:	bf00      	nop
 80137de:	3710      	adds	r7, #16
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	20004874 	.word	0x20004874

080137e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d10a      	bne.n	8013814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80137fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	60fb      	str	r3, [r7, #12]
}
 8013810:	bf00      	nop
 8013812:	e7fe      	b.n	8013812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	3318      	adds	r3, #24
 8013818:	4618      	mov	r0, r3
 801381a:	f7fe fe1e 	bl	801245a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801381e:	4b1d      	ldr	r3, [pc, #116]	; (8013894 <xTaskRemoveFromEventList+0xac>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d11c      	bne.n	8013860 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	3304      	adds	r3, #4
 801382a:	4618      	mov	r0, r3
 801382c:	f7fe fe15 	bl	801245a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013834:	2201      	movs	r2, #1
 8013836:	409a      	lsls	r2, r3
 8013838:	4b17      	ldr	r3, [pc, #92]	; (8013898 <xTaskRemoveFromEventList+0xb0>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4313      	orrs	r3, r2
 801383e:	4a16      	ldr	r2, [pc, #88]	; (8013898 <xTaskRemoveFromEventList+0xb0>)
 8013840:	6013      	str	r3, [r2, #0]
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013846:	4613      	mov	r3, r2
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	4413      	add	r3, r2
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	4a13      	ldr	r2, [pc, #76]	; (801389c <xTaskRemoveFromEventList+0xb4>)
 8013850:	441a      	add	r2, r3
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	3304      	adds	r3, #4
 8013856:	4619      	mov	r1, r3
 8013858:	4610      	mov	r0, r2
 801385a:	f7fe fda1 	bl	80123a0 <vListInsertEnd>
 801385e:	e005      	b.n	801386c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	3318      	adds	r3, #24
 8013864:	4619      	mov	r1, r3
 8013866:	480e      	ldr	r0, [pc, #56]	; (80138a0 <xTaskRemoveFromEventList+0xb8>)
 8013868:	f7fe fd9a 	bl	80123a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013870:	4b0c      	ldr	r3, [pc, #48]	; (80138a4 <xTaskRemoveFromEventList+0xbc>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013876:	429a      	cmp	r2, r3
 8013878:	d905      	bls.n	8013886 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801387a:	2301      	movs	r3, #1
 801387c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801387e:	4b0a      	ldr	r3, [pc, #40]	; (80138a8 <xTaskRemoveFromEventList+0xc0>)
 8013880:	2201      	movs	r2, #1
 8013882:	601a      	str	r2, [r3, #0]
 8013884:	e001      	b.n	801388a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013886:	2300      	movs	r3, #0
 8013888:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801388a:	697b      	ldr	r3, [r7, #20]
}
 801388c:	4618      	mov	r0, r3
 801388e:	3718      	adds	r7, #24
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	2000499c 	.word	0x2000499c
 8013898:	2000497c 	.word	0x2000497c
 801389c:	20004878 	.word	0x20004878
 80138a0:	20004934 	.word	0x20004934
 80138a4:	20004874 	.word	0x20004874
 80138a8:	20004988 	.word	0x20004988

080138ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80138ac:	b480      	push	{r7}
 80138ae:	b083      	sub	sp, #12
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80138b4:	4b06      	ldr	r3, [pc, #24]	; (80138d0 <vTaskInternalSetTimeOutState+0x24>)
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80138bc:	4b05      	ldr	r3, [pc, #20]	; (80138d4 <vTaskInternalSetTimeOutState+0x28>)
 80138be:	681a      	ldr	r2, [r3, #0]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	605a      	str	r2, [r3, #4]
}
 80138c4:	bf00      	nop
 80138c6:	370c      	adds	r7, #12
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr
 80138d0:	2000498c 	.word	0x2000498c
 80138d4:	20004978 	.word	0x20004978

080138d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b088      	sub	sp, #32
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d10a      	bne.n	80138fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80138e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ec:	f383 8811 	msr	BASEPRI, r3
 80138f0:	f3bf 8f6f 	isb	sy
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	613b      	str	r3, [r7, #16]
}
 80138fa:	bf00      	nop
 80138fc:	e7fe      	b.n	80138fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d10a      	bne.n	801391a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013908:	f383 8811 	msr	BASEPRI, r3
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	60fb      	str	r3, [r7, #12]
}
 8013916:	bf00      	nop
 8013918:	e7fe      	b.n	8013918 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801391a:	f000 fd43 	bl	80143a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801391e:	4b1d      	ldr	r3, [pc, #116]	; (8013994 <xTaskCheckForTimeOut+0xbc>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	69ba      	ldr	r2, [r7, #24]
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013936:	d102      	bne.n	801393e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013938:	2300      	movs	r3, #0
 801393a:	61fb      	str	r3, [r7, #28]
 801393c:	e023      	b.n	8013986 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	4b15      	ldr	r3, [pc, #84]	; (8013998 <xTaskCheckForTimeOut+0xc0>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	429a      	cmp	r2, r3
 8013948:	d007      	beq.n	801395a <xTaskCheckForTimeOut+0x82>
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	69ba      	ldr	r2, [r7, #24]
 8013950:	429a      	cmp	r2, r3
 8013952:	d302      	bcc.n	801395a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013954:	2301      	movs	r3, #1
 8013956:	61fb      	str	r3, [r7, #28]
 8013958:	e015      	b.n	8013986 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	697a      	ldr	r2, [r7, #20]
 8013960:	429a      	cmp	r2, r3
 8013962:	d20b      	bcs.n	801397c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	681a      	ldr	r2, [r3, #0]
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	1ad2      	subs	r2, r2, r3
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f7ff ff9b 	bl	80138ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013976:	2300      	movs	r3, #0
 8013978:	61fb      	str	r3, [r7, #28]
 801397a:	e004      	b.n	8013986 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	2200      	movs	r2, #0
 8013980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013982:	2301      	movs	r3, #1
 8013984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013986:	f000 fd3d 	bl	8014404 <vPortExitCritical>

	return xReturn;
 801398a:	69fb      	ldr	r3, [r7, #28]
}
 801398c:	4618      	mov	r0, r3
 801398e:	3720      	adds	r7, #32
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	20004978 	.word	0x20004978
 8013998:	2000498c 	.word	0x2000498c

0801399c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801399c:	b480      	push	{r7}
 801399e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80139a0:	4b03      	ldr	r3, [pc, #12]	; (80139b0 <vTaskMissedYield+0x14>)
 80139a2:	2201      	movs	r2, #1
 80139a4:	601a      	str	r2, [r3, #0]
}
 80139a6:	bf00      	nop
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr
 80139b0:	20004988 	.word	0x20004988

080139b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80139bc:	f000 f852 	bl	8013a64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80139c0:	4b06      	ldr	r3, [pc, #24]	; (80139dc <prvIdleTask+0x28>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d9f9      	bls.n	80139bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80139c8:	4b05      	ldr	r3, [pc, #20]	; (80139e0 <prvIdleTask+0x2c>)
 80139ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139ce:	601a      	str	r2, [r3, #0]
 80139d0:	f3bf 8f4f 	dsb	sy
 80139d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80139d8:	e7f0      	b.n	80139bc <prvIdleTask+0x8>
 80139da:	bf00      	nop
 80139dc:	20004878 	.word	0x20004878
 80139e0:	e000ed04 	.word	0xe000ed04

080139e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139ea:	2300      	movs	r3, #0
 80139ec:	607b      	str	r3, [r7, #4]
 80139ee:	e00c      	b.n	8013a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	4613      	mov	r3, r2
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	4413      	add	r3, r2
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	4a12      	ldr	r2, [pc, #72]	; (8013a44 <prvInitialiseTaskLists+0x60>)
 80139fc:	4413      	add	r3, r2
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fe fca1 	bl	8012346 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	3301      	adds	r3, #1
 8013a08:	607b      	str	r3, [r7, #4]
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2b06      	cmp	r3, #6
 8013a0e:	d9ef      	bls.n	80139f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013a10:	480d      	ldr	r0, [pc, #52]	; (8013a48 <prvInitialiseTaskLists+0x64>)
 8013a12:	f7fe fc98 	bl	8012346 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013a16:	480d      	ldr	r0, [pc, #52]	; (8013a4c <prvInitialiseTaskLists+0x68>)
 8013a18:	f7fe fc95 	bl	8012346 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013a1c:	480c      	ldr	r0, [pc, #48]	; (8013a50 <prvInitialiseTaskLists+0x6c>)
 8013a1e:	f7fe fc92 	bl	8012346 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013a22:	480c      	ldr	r0, [pc, #48]	; (8013a54 <prvInitialiseTaskLists+0x70>)
 8013a24:	f7fe fc8f 	bl	8012346 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013a28:	480b      	ldr	r0, [pc, #44]	; (8013a58 <prvInitialiseTaskLists+0x74>)
 8013a2a:	f7fe fc8c 	bl	8012346 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013a2e:	4b0b      	ldr	r3, [pc, #44]	; (8013a5c <prvInitialiseTaskLists+0x78>)
 8013a30:	4a05      	ldr	r2, [pc, #20]	; (8013a48 <prvInitialiseTaskLists+0x64>)
 8013a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013a34:	4b0a      	ldr	r3, [pc, #40]	; (8013a60 <prvInitialiseTaskLists+0x7c>)
 8013a36:	4a05      	ldr	r2, [pc, #20]	; (8013a4c <prvInitialiseTaskLists+0x68>)
 8013a38:	601a      	str	r2, [r3, #0]
}
 8013a3a:	bf00      	nop
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	20004878 	.word	0x20004878
 8013a48:	20004904 	.word	0x20004904
 8013a4c:	20004918 	.word	0x20004918
 8013a50:	20004934 	.word	0x20004934
 8013a54:	20004948 	.word	0x20004948
 8013a58:	20004960 	.word	0x20004960
 8013a5c:	2000492c 	.word	0x2000492c
 8013a60:	20004930 	.word	0x20004930

08013a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b082      	sub	sp, #8
 8013a68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a6a:	e019      	b.n	8013aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013a6c:	f000 fc9a 	bl	80143a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a70:	4b10      	ldr	r3, [pc, #64]	; (8013ab4 <prvCheckTasksWaitingTermination+0x50>)
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	3304      	adds	r3, #4
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fe fcec 	bl	801245a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013a82:	4b0d      	ldr	r3, [pc, #52]	; (8013ab8 <prvCheckTasksWaitingTermination+0x54>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	3b01      	subs	r3, #1
 8013a88:	4a0b      	ldr	r2, [pc, #44]	; (8013ab8 <prvCheckTasksWaitingTermination+0x54>)
 8013a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a8c:	4b0b      	ldr	r3, [pc, #44]	; (8013abc <prvCheckTasksWaitingTermination+0x58>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	3b01      	subs	r3, #1
 8013a92:	4a0a      	ldr	r2, [pc, #40]	; (8013abc <prvCheckTasksWaitingTermination+0x58>)
 8013a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a96:	f000 fcb5 	bl	8014404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f000 f810 	bl	8013ac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013aa0:	4b06      	ldr	r3, [pc, #24]	; (8013abc <prvCheckTasksWaitingTermination+0x58>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1e1      	bne.n	8013a6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013aa8:	bf00      	nop
 8013aaa:	bf00      	nop
 8013aac:	3708      	adds	r7, #8
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	20004948 	.word	0x20004948
 8013ab8:	20004974 	.word	0x20004974
 8013abc:	2000495c 	.word	0x2000495c

08013ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d108      	bne.n	8013ae4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f000 fe4a 	bl	8014770 <vPortFree>
				vPortFree( pxTCB );
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f000 fe47 	bl	8014770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ae2:	e018      	b.n	8013b16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013aea:	2b01      	cmp	r3, #1
 8013aec:	d103      	bne.n	8013af6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f000 fe3e 	bl	8014770 <vPortFree>
	}
 8013af4:	e00f      	b.n	8013b16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d00a      	beq.n	8013b16 <prvDeleteTCB+0x56>
	__asm volatile
 8013b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b04:	f383 8811 	msr	BASEPRI, r3
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	f3bf 8f4f 	dsb	sy
 8013b10:	60fb      	str	r3, [r7, #12]
}
 8013b12:	bf00      	nop
 8013b14:	e7fe      	b.n	8013b14 <prvDeleteTCB+0x54>
	}
 8013b16:	bf00      	nop
 8013b18:	3710      	adds	r7, #16
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}
	...

08013b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013b20:	b480      	push	{r7}
 8013b22:	b083      	sub	sp, #12
 8013b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b26:	4b0c      	ldr	r3, [pc, #48]	; (8013b58 <prvResetNextTaskUnblockTime+0x38>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d104      	bne.n	8013b3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013b30:	4b0a      	ldr	r3, [pc, #40]	; (8013b5c <prvResetNextTaskUnblockTime+0x3c>)
 8013b32:	f04f 32ff 	mov.w	r2, #4294967295
 8013b36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013b38:	e008      	b.n	8013b4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b3a:	4b07      	ldr	r3, [pc, #28]	; (8013b58 <prvResetNextTaskUnblockTime+0x38>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	68db      	ldr	r3, [r3, #12]
 8013b42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	4a04      	ldr	r2, [pc, #16]	; (8013b5c <prvResetNextTaskUnblockTime+0x3c>)
 8013b4a:	6013      	str	r3, [r2, #0]
}
 8013b4c:	bf00      	nop
 8013b4e:	370c      	adds	r7, #12
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr
 8013b58:	2000492c 	.word	0x2000492c
 8013b5c:	20004994 	.word	0x20004994

08013b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013b66:	4b0b      	ldr	r3, [pc, #44]	; (8013b94 <xTaskGetSchedulerState+0x34>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d102      	bne.n	8013b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	607b      	str	r3, [r7, #4]
 8013b72:	e008      	b.n	8013b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b74:	4b08      	ldr	r3, [pc, #32]	; (8013b98 <xTaskGetSchedulerState+0x38>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d102      	bne.n	8013b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013b7c:	2302      	movs	r3, #2
 8013b7e:	607b      	str	r3, [r7, #4]
 8013b80:	e001      	b.n	8013b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013b82:	2300      	movs	r3, #0
 8013b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013b86:	687b      	ldr	r3, [r7, #4]
	}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	370c      	adds	r7, #12
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr
 8013b94:	20004980 	.word	0x20004980
 8013b98:	2000499c 	.word	0x2000499c

08013b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d06e      	beq.n	8013c90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013bb2:	4b3a      	ldr	r3, [pc, #232]	; (8013c9c <xTaskPriorityDisinherit+0x100>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	693a      	ldr	r2, [r7, #16]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d00a      	beq.n	8013bd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc0:	f383 8811 	msr	BASEPRI, r3
 8013bc4:	f3bf 8f6f 	isb	sy
 8013bc8:	f3bf 8f4f 	dsb	sy
 8013bcc:	60fb      	str	r3, [r7, #12]
}
 8013bce:	bf00      	nop
 8013bd0:	e7fe      	b.n	8013bd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d10a      	bne.n	8013bf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	60bb      	str	r3, [r7, #8]
}
 8013bec:	bf00      	nop
 8013bee:	e7fe      	b.n	8013bee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013bf4:	1e5a      	subs	r2, r3, #1
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d044      	beq.n	8013c90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d140      	bne.n	8013c90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	3304      	adds	r3, #4
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fe fc21 	bl	801245a <uxListRemove>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d115      	bne.n	8013c4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c22:	491f      	ldr	r1, [pc, #124]	; (8013ca0 <xTaskPriorityDisinherit+0x104>)
 8013c24:	4613      	mov	r3, r2
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	4413      	add	r3, r2
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	440b      	add	r3, r1
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d10a      	bne.n	8013c4a <xTaskPriorityDisinherit+0xae>
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c38:	2201      	movs	r2, #1
 8013c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8013c3e:	43da      	mvns	r2, r3
 8013c40:	4b18      	ldr	r3, [pc, #96]	; (8013ca4 <xTaskPriorityDisinherit+0x108>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	4013      	ands	r3, r2
 8013c46:	4a17      	ldr	r2, [pc, #92]	; (8013ca4 <xTaskPriorityDisinherit+0x108>)
 8013c48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c56:	f1c3 0207 	rsb	r2, r3, #7
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c62:	2201      	movs	r2, #1
 8013c64:	409a      	lsls	r2, r3
 8013c66:	4b0f      	ldr	r3, [pc, #60]	; (8013ca4 <xTaskPriorityDisinherit+0x108>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	4313      	orrs	r3, r2
 8013c6c:	4a0d      	ldr	r2, [pc, #52]	; (8013ca4 <xTaskPriorityDisinherit+0x108>)
 8013c6e:	6013      	str	r3, [r2, #0]
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c74:	4613      	mov	r3, r2
 8013c76:	009b      	lsls	r3, r3, #2
 8013c78:	4413      	add	r3, r2
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	4a08      	ldr	r2, [pc, #32]	; (8013ca0 <xTaskPriorityDisinherit+0x104>)
 8013c7e:	441a      	add	r2, r3
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	3304      	adds	r3, #4
 8013c84:	4619      	mov	r1, r3
 8013c86:	4610      	mov	r0, r2
 8013c88:	f7fe fb8a 	bl	80123a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c90:	697b      	ldr	r3, [r7, #20]
	}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3718      	adds	r7, #24
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	20004874 	.word	0x20004874
 8013ca0:	20004878 	.word	0x20004878
 8013ca4:	2000497c 	.word	0x2000497c

08013ca8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b086      	sub	sp, #24
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	60b9      	str	r1, [r7, #8]
 8013cb2:	607a      	str	r2, [r7, #4]
 8013cb4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013cb6:	f000 fb75 	bl	80143a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013cba:	4b26      	ldr	r3, [pc, #152]	; (8013d54 <xTaskNotifyWait+0xac>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	2b02      	cmp	r3, #2
 8013cc6:	d01a      	beq.n	8013cfe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013cc8:	4b22      	ldr	r3, [pc, #136]	; (8013d54 <xTaskNotifyWait+0xac>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013cce:	68fa      	ldr	r2, [r7, #12]
 8013cd0:	43d2      	mvns	r2, r2
 8013cd2:	400a      	ands	r2, r1
 8013cd4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013cd6:	4b1f      	ldr	r3, [pc, #124]	; (8013d54 <xTaskNotifyWait+0xac>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2201      	movs	r2, #1
 8013cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d00b      	beq.n	8013cfe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013ce6:	2101      	movs	r1, #1
 8013ce8:	6838      	ldr	r0, [r7, #0]
 8013cea:	f000 f9c7 	bl	801407c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013cee:	4b1a      	ldr	r3, [pc, #104]	; (8013d58 <xTaskNotifyWait+0xb0>)
 8013cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	f3bf 8f4f 	dsb	sy
 8013cfa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013cfe:	f000 fb81 	bl	8014404 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013d02:	f000 fb4f 	bl	80143a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d004      	beq.n	8013d16 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013d0c:	4b11      	ldr	r3, [pc, #68]	; (8013d54 <xTaskNotifyWait+0xac>)
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013d16:	4b0f      	ldr	r3, [pc, #60]	; (8013d54 <xTaskNotifyWait+0xac>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013d1e:	b2db      	uxtb	r3, r3
 8013d20:	2b02      	cmp	r3, #2
 8013d22:	d002      	beq.n	8013d2a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013d24:	2300      	movs	r3, #0
 8013d26:	617b      	str	r3, [r7, #20]
 8013d28:	e008      	b.n	8013d3c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013d2a:	4b0a      	ldr	r3, [pc, #40]	; (8013d54 <xTaskNotifyWait+0xac>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013d30:	68ba      	ldr	r2, [r7, #8]
 8013d32:	43d2      	mvns	r2, r2
 8013d34:	400a      	ands	r2, r1
 8013d36:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8013d38:	2301      	movs	r3, #1
 8013d3a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013d3c:	4b05      	ldr	r3, [pc, #20]	; (8013d54 <xTaskNotifyWait+0xac>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	2200      	movs	r2, #0
 8013d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8013d46:	f000 fb5d 	bl	8014404 <vPortExitCritical>

		return xReturn;
 8013d4a:	697b      	ldr	r3, [r7, #20]
	}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3718      	adds	r7, #24
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	20004874 	.word	0x20004874
 8013d58:	e000ed04 	.word	0xe000ed04

08013d5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b08a      	sub	sp, #40	; 0x28
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	603b      	str	r3, [r7, #0]
 8013d68:	4613      	mov	r3, r2
 8013d6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d10a      	bne.n	8013d8c <xTaskGenericNotify+0x30>
	__asm volatile
 8013d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d7a:	f383 8811 	msr	BASEPRI, r3
 8013d7e:	f3bf 8f6f 	isb	sy
 8013d82:	f3bf 8f4f 	dsb	sy
 8013d86:	61bb      	str	r3, [r7, #24]
}
 8013d88:	bf00      	nop
 8013d8a:	e7fe      	b.n	8013d8a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013d90:	f000 fb08 	bl	80143a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d003      	beq.n	8013da2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013d9a:	6a3b      	ldr	r3, [r7, #32]
 8013d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013da2:	6a3b      	ldr	r3, [r7, #32]
 8013da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013da8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013daa:	6a3b      	ldr	r3, [r7, #32]
 8013dac:	2202      	movs	r2, #2
 8013dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	2b04      	cmp	r3, #4
 8013db6:	d828      	bhi.n	8013e0a <xTaskGenericNotify+0xae>
 8013db8:	a201      	add	r2, pc, #4	; (adr r2, 8013dc0 <xTaskGenericNotify+0x64>)
 8013dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dbe:	bf00      	nop
 8013dc0:	08013e2b 	.word	0x08013e2b
 8013dc4:	08013dd5 	.word	0x08013dd5
 8013dc8:	08013de3 	.word	0x08013de3
 8013dcc:	08013def 	.word	0x08013def
 8013dd0:	08013df7 	.word	0x08013df7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013dd4:	6a3b      	ldr	r3, [r7, #32]
 8013dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	431a      	orrs	r2, r3
 8013ddc:	6a3b      	ldr	r3, [r7, #32]
 8013dde:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013de0:	e026      	b.n	8013e30 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013de2:	6a3b      	ldr	r3, [r7, #32]
 8013de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013de6:	1c5a      	adds	r2, r3, #1
 8013de8:	6a3b      	ldr	r3, [r7, #32]
 8013dea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013dec:	e020      	b.n	8013e30 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013dee:	6a3b      	ldr	r3, [r7, #32]
 8013df0:	68ba      	ldr	r2, [r7, #8]
 8013df2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013df4:	e01c      	b.n	8013e30 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013df6:	7ffb      	ldrb	r3, [r7, #31]
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	d003      	beq.n	8013e04 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013dfc:	6a3b      	ldr	r3, [r7, #32]
 8013dfe:	68ba      	ldr	r2, [r7, #8]
 8013e00:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013e02:	e015      	b.n	8013e30 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8013e04:	2300      	movs	r3, #0
 8013e06:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013e08:	e012      	b.n	8013e30 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013e0a:	6a3b      	ldr	r3, [r7, #32]
 8013e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e12:	d00c      	beq.n	8013e2e <xTaskGenericNotify+0xd2>
	__asm volatile
 8013e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e18:	f383 8811 	msr	BASEPRI, r3
 8013e1c:	f3bf 8f6f 	isb	sy
 8013e20:	f3bf 8f4f 	dsb	sy
 8013e24:	617b      	str	r3, [r7, #20]
}
 8013e26:	bf00      	nop
 8013e28:	e7fe      	b.n	8013e28 <xTaskGenericNotify+0xcc>
					break;
 8013e2a:	bf00      	nop
 8013e2c:	e000      	b.n	8013e30 <xTaskGenericNotify+0xd4>

					break;
 8013e2e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013e30:	7ffb      	ldrb	r3, [r7, #31]
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d139      	bne.n	8013eaa <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e36:	6a3b      	ldr	r3, [r7, #32]
 8013e38:	3304      	adds	r3, #4
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7fe fb0d 	bl	801245a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013e40:	6a3b      	ldr	r3, [r7, #32]
 8013e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e44:	2201      	movs	r2, #1
 8013e46:	409a      	lsls	r2, r3
 8013e48:	4b1b      	ldr	r3, [pc, #108]	; (8013eb8 <xTaskGenericNotify+0x15c>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	4a1a      	ldr	r2, [pc, #104]	; (8013eb8 <xTaskGenericNotify+0x15c>)
 8013e50:	6013      	str	r3, [r2, #0]
 8013e52:	6a3b      	ldr	r3, [r7, #32]
 8013e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e56:	4613      	mov	r3, r2
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	4413      	add	r3, r2
 8013e5c:	009b      	lsls	r3, r3, #2
 8013e5e:	4a17      	ldr	r2, [pc, #92]	; (8013ebc <xTaskGenericNotify+0x160>)
 8013e60:	441a      	add	r2, r3
 8013e62:	6a3b      	ldr	r3, [r7, #32]
 8013e64:	3304      	adds	r3, #4
 8013e66:	4619      	mov	r1, r3
 8013e68:	4610      	mov	r0, r2
 8013e6a:	f7fe fa99 	bl	80123a0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013e6e:	6a3b      	ldr	r3, [r7, #32]
 8013e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d00a      	beq.n	8013e8c <xTaskGenericNotify+0x130>
	__asm volatile
 8013e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7a:	f383 8811 	msr	BASEPRI, r3
 8013e7e:	f3bf 8f6f 	isb	sy
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	613b      	str	r3, [r7, #16]
}
 8013e88:	bf00      	nop
 8013e8a:	e7fe      	b.n	8013e8a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013e8c:	6a3b      	ldr	r3, [r7, #32]
 8013e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e90:	4b0b      	ldr	r3, [pc, #44]	; (8013ec0 <xTaskGenericNotify+0x164>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d907      	bls.n	8013eaa <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013e9a:	4b0a      	ldr	r3, [pc, #40]	; (8013ec4 <xTaskGenericNotify+0x168>)
 8013e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ea0:	601a      	str	r2, [r3, #0]
 8013ea2:	f3bf 8f4f 	dsb	sy
 8013ea6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013eaa:	f000 faab 	bl	8014404 <vPortExitCritical>

		return xReturn;
 8013eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3728      	adds	r7, #40	; 0x28
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	2000497c 	.word	0x2000497c
 8013ebc:	20004878 	.word	0x20004878
 8013ec0:	20004874 	.word	0x20004874
 8013ec4:	e000ed04 	.word	0xe000ed04

08013ec8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b08e      	sub	sp, #56	; 0x38
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	60b9      	str	r1, [r7, #8]
 8013ed2:	603b      	str	r3, [r7, #0]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013ed8:	2301      	movs	r3, #1
 8013eda:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d10a      	bne.n	8013ef8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8013ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee6:	f383 8811 	msr	BASEPRI, r3
 8013eea:	f3bf 8f6f 	isb	sy
 8013eee:	f3bf 8f4f 	dsb	sy
 8013ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013ef4:	bf00      	nop
 8013ef6:	e7fe      	b.n	8013ef6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ef8:	f000 fb36 	bl	8014568 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013f00:	f3ef 8211 	mrs	r2, BASEPRI
 8013f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f08:	f383 8811 	msr	BASEPRI, r3
 8013f0c:	f3bf 8f6f 	isb	sy
 8013f10:	f3bf 8f4f 	dsb	sy
 8013f14:	623a      	str	r2, [r7, #32]
 8013f16:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8013f18:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d003      	beq.n	8013f2a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f36:	2202      	movs	r2, #2
 8013f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013f3c:	79fb      	ldrb	r3, [r7, #7]
 8013f3e:	2b04      	cmp	r3, #4
 8013f40:	d828      	bhi.n	8013f94 <xTaskGenericNotifyFromISR+0xcc>
 8013f42:	a201      	add	r2, pc, #4	; (adr r2, 8013f48 <xTaskGenericNotifyFromISR+0x80>)
 8013f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f48:	08013fb5 	.word	0x08013fb5
 8013f4c:	08013f5d 	.word	0x08013f5d
 8013f50:	08013f6b 	.word	0x08013f6b
 8013f54:	08013f77 	.word	0x08013f77
 8013f58:	08013f7f 	.word	0x08013f7f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	431a      	orrs	r2, r3
 8013f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f66:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013f68:	e027      	b.n	8013fba <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f6e:	1c5a      	adds	r2, r3, #1
 8013f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f72:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013f74:	e021      	b.n	8013fba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f78:	68ba      	ldr	r2, [r7, #8]
 8013f7a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013f7c:	e01d      	b.n	8013fba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013f82:	2b02      	cmp	r3, #2
 8013f84:	d003      	beq.n	8013f8e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f88:	68ba      	ldr	r2, [r7, #8]
 8013f8a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013f8c:	e015      	b.n	8013fba <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013f92:	e012      	b.n	8013fba <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f9c:	d00c      	beq.n	8013fb8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8013f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa2:	f383 8811 	msr	BASEPRI, r3
 8013fa6:	f3bf 8f6f 	isb	sy
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	61bb      	str	r3, [r7, #24]
}
 8013fb0:	bf00      	nop
 8013fb2:	e7fe      	b.n	8013fb2 <xTaskGenericNotifyFromISR+0xea>
					break;
 8013fb4:	bf00      	nop
 8013fb6:	e000      	b.n	8013fba <xTaskGenericNotifyFromISR+0xf2>
					break;
 8013fb8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013fbe:	2b01      	cmp	r3, #1
 8013fc0:	d145      	bne.n	801404e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d00a      	beq.n	8013fe0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8013fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fce:	f383 8811 	msr	BASEPRI, r3
 8013fd2:	f3bf 8f6f 	isb	sy
 8013fd6:	f3bf 8f4f 	dsb	sy
 8013fda:	617b      	str	r3, [r7, #20]
}
 8013fdc:	bf00      	nop
 8013fde:	e7fe      	b.n	8013fde <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fe0:	4b20      	ldr	r3, [pc, #128]	; (8014064 <xTaskGenericNotifyFromISR+0x19c>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d11c      	bne.n	8014022 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fea:	3304      	adds	r3, #4
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7fe fa34 	bl	801245a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	409a      	lsls	r2, r3
 8013ffa:	4b1b      	ldr	r3, [pc, #108]	; (8014068 <xTaskGenericNotifyFromISR+0x1a0>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	4313      	orrs	r3, r2
 8014000:	4a19      	ldr	r2, [pc, #100]	; (8014068 <xTaskGenericNotifyFromISR+0x1a0>)
 8014002:	6013      	str	r3, [r2, #0]
 8014004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014008:	4613      	mov	r3, r2
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	4413      	add	r3, r2
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	4a16      	ldr	r2, [pc, #88]	; (801406c <xTaskGenericNotifyFromISR+0x1a4>)
 8014012:	441a      	add	r2, r3
 8014014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014016:	3304      	adds	r3, #4
 8014018:	4619      	mov	r1, r3
 801401a:	4610      	mov	r0, r2
 801401c:	f7fe f9c0 	bl	80123a0 <vListInsertEnd>
 8014020:	e005      	b.n	801402e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014024:	3318      	adds	r3, #24
 8014026:	4619      	mov	r1, r3
 8014028:	4811      	ldr	r0, [pc, #68]	; (8014070 <xTaskGenericNotifyFromISR+0x1a8>)
 801402a:	f7fe f9b9 	bl	80123a0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014032:	4b10      	ldr	r3, [pc, #64]	; (8014074 <xTaskGenericNotifyFromISR+0x1ac>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014038:	429a      	cmp	r2, r3
 801403a:	d908      	bls.n	801404e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801403c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801403e:	2b00      	cmp	r3, #0
 8014040:	d002      	beq.n	8014048 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014044:	2201      	movs	r2, #1
 8014046:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014048:	4b0b      	ldr	r3, [pc, #44]	; (8014078 <xTaskGenericNotifyFromISR+0x1b0>)
 801404a:	2201      	movs	r2, #1
 801404c:	601a      	str	r2, [r3, #0]
 801404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014050:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	f383 8811 	msr	BASEPRI, r3
}
 8014058:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801405c:	4618      	mov	r0, r3
 801405e:	3738      	adds	r7, #56	; 0x38
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}
 8014064:	2000499c 	.word	0x2000499c
 8014068:	2000497c 	.word	0x2000497c
 801406c:	20004878 	.word	0x20004878
 8014070:	20004934 	.word	0x20004934
 8014074:	20004874 	.word	0x20004874
 8014078:	20004988 	.word	0x20004988

0801407c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b084      	sub	sp, #16
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014086:	4b29      	ldr	r3, [pc, #164]	; (801412c <prvAddCurrentTaskToDelayedList+0xb0>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801408c:	4b28      	ldr	r3, [pc, #160]	; (8014130 <prvAddCurrentTaskToDelayedList+0xb4>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	3304      	adds	r3, #4
 8014092:	4618      	mov	r0, r3
 8014094:	f7fe f9e1 	bl	801245a <uxListRemove>
 8014098:	4603      	mov	r3, r0
 801409a:	2b00      	cmp	r3, #0
 801409c:	d10b      	bne.n	80140b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801409e:	4b24      	ldr	r3, [pc, #144]	; (8014130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a4:	2201      	movs	r2, #1
 80140a6:	fa02 f303 	lsl.w	r3, r2, r3
 80140aa:	43da      	mvns	r2, r3
 80140ac:	4b21      	ldr	r3, [pc, #132]	; (8014134 <prvAddCurrentTaskToDelayedList+0xb8>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	4013      	ands	r3, r2
 80140b2:	4a20      	ldr	r2, [pc, #128]	; (8014134 <prvAddCurrentTaskToDelayedList+0xb8>)
 80140b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140bc:	d10a      	bne.n	80140d4 <prvAddCurrentTaskToDelayedList+0x58>
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d007      	beq.n	80140d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140c4:	4b1a      	ldr	r3, [pc, #104]	; (8014130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	3304      	adds	r3, #4
 80140ca:	4619      	mov	r1, r3
 80140cc:	481a      	ldr	r0, [pc, #104]	; (8014138 <prvAddCurrentTaskToDelayedList+0xbc>)
 80140ce:	f7fe f967 	bl	80123a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80140d2:	e026      	b.n	8014122 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80140d4:	68fa      	ldr	r2, [r7, #12]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	4413      	add	r3, r2
 80140da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80140dc:	4b14      	ldr	r3, [pc, #80]	; (8014130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	68ba      	ldr	r2, [r7, #8]
 80140e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80140e4:	68ba      	ldr	r2, [r7, #8]
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d209      	bcs.n	8014100 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140ec:	4b13      	ldr	r3, [pc, #76]	; (801413c <prvAddCurrentTaskToDelayedList+0xc0>)
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	4b0f      	ldr	r3, [pc, #60]	; (8014130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	3304      	adds	r3, #4
 80140f6:	4619      	mov	r1, r3
 80140f8:	4610      	mov	r0, r2
 80140fa:	f7fe f975 	bl	80123e8 <vListInsert>
}
 80140fe:	e010      	b.n	8014122 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014100:	4b0f      	ldr	r3, [pc, #60]	; (8014140 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	4b0a      	ldr	r3, [pc, #40]	; (8014130 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	3304      	adds	r3, #4
 801410a:	4619      	mov	r1, r3
 801410c:	4610      	mov	r0, r2
 801410e:	f7fe f96b 	bl	80123e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014112:	4b0c      	ldr	r3, [pc, #48]	; (8014144 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	68ba      	ldr	r2, [r7, #8]
 8014118:	429a      	cmp	r2, r3
 801411a:	d202      	bcs.n	8014122 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801411c:	4a09      	ldr	r2, [pc, #36]	; (8014144 <prvAddCurrentTaskToDelayedList+0xc8>)
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	6013      	str	r3, [r2, #0]
}
 8014122:	bf00      	nop
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	20004978 	.word	0x20004978
 8014130:	20004874 	.word	0x20004874
 8014134:	2000497c 	.word	0x2000497c
 8014138:	20004960 	.word	0x20004960
 801413c:	20004930 	.word	0x20004930
 8014140:	2000492c 	.word	0x2000492c
 8014144:	20004994 	.word	0x20004994

08014148 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014148:	b480      	push	{r7}
 801414a:	b085      	sub	sp, #20
 801414c:	af00      	add	r7, sp, #0
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	3b04      	subs	r3, #4
 8014158:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	3b04      	subs	r3, #4
 8014166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	f023 0201 	bic.w	r2, r3, #1
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	3b04      	subs	r3, #4
 8014176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014178:	4a0c      	ldr	r2, [pc, #48]	; (80141ac <pxPortInitialiseStack+0x64>)
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	3b14      	subs	r3, #20
 8014182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	3b04      	subs	r3, #4
 801418e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f06f 0202 	mvn.w	r2, #2
 8014196:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	3b20      	subs	r3, #32
 801419c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801419e:	68fb      	ldr	r3, [r7, #12]
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3714      	adds	r7, #20
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr
 80141ac:	080141b1 	.word	0x080141b1

080141b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80141b0:	b480      	push	{r7}
 80141b2:	b085      	sub	sp, #20
 80141b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80141b6:	2300      	movs	r3, #0
 80141b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80141ba:	4b12      	ldr	r3, [pc, #72]	; (8014204 <prvTaskExitError+0x54>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141c2:	d00a      	beq.n	80141da <prvTaskExitError+0x2a>
	__asm volatile
 80141c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c8:	f383 8811 	msr	BASEPRI, r3
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f3bf 8f4f 	dsb	sy
 80141d4:	60fb      	str	r3, [r7, #12]
}
 80141d6:	bf00      	nop
 80141d8:	e7fe      	b.n	80141d8 <prvTaskExitError+0x28>
	__asm volatile
 80141da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141de:	f383 8811 	msr	BASEPRI, r3
 80141e2:	f3bf 8f6f 	isb	sy
 80141e6:	f3bf 8f4f 	dsb	sy
 80141ea:	60bb      	str	r3, [r7, #8]
}
 80141ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80141ee:	bf00      	nop
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d0fc      	beq.n	80141f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80141f6:	bf00      	nop
 80141f8:	bf00      	nop
 80141fa:	3714      	adds	r7, #20
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr
 8014204:	200041a8 	.word	0x200041a8
	...

08014210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014210:	4b07      	ldr	r3, [pc, #28]	; (8014230 <pxCurrentTCBConst2>)
 8014212:	6819      	ldr	r1, [r3, #0]
 8014214:	6808      	ldr	r0, [r1, #0]
 8014216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801421a:	f380 8809 	msr	PSP, r0
 801421e:	f3bf 8f6f 	isb	sy
 8014222:	f04f 0000 	mov.w	r0, #0
 8014226:	f380 8811 	msr	BASEPRI, r0
 801422a:	4770      	bx	lr
 801422c:	f3af 8000 	nop.w

08014230 <pxCurrentTCBConst2>:
 8014230:	20004874 	.word	0x20004874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014234:	bf00      	nop
 8014236:	bf00      	nop

08014238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014238:	4808      	ldr	r0, [pc, #32]	; (801425c <prvPortStartFirstTask+0x24>)
 801423a:	6800      	ldr	r0, [r0, #0]
 801423c:	6800      	ldr	r0, [r0, #0]
 801423e:	f380 8808 	msr	MSP, r0
 8014242:	f04f 0000 	mov.w	r0, #0
 8014246:	f380 8814 	msr	CONTROL, r0
 801424a:	b662      	cpsie	i
 801424c:	b661      	cpsie	f
 801424e:	f3bf 8f4f 	dsb	sy
 8014252:	f3bf 8f6f 	isb	sy
 8014256:	df00      	svc	0
 8014258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801425a:	bf00      	nop
 801425c:	e000ed08 	.word	0xe000ed08

08014260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b086      	sub	sp, #24
 8014264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014266:	4b46      	ldr	r3, [pc, #280]	; (8014380 <xPortStartScheduler+0x120>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	4a46      	ldr	r2, [pc, #280]	; (8014384 <xPortStartScheduler+0x124>)
 801426c:	4293      	cmp	r3, r2
 801426e:	d10a      	bne.n	8014286 <xPortStartScheduler+0x26>
	__asm volatile
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	613b      	str	r3, [r7, #16]
}
 8014282:	bf00      	nop
 8014284:	e7fe      	b.n	8014284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014286:	4b3e      	ldr	r3, [pc, #248]	; (8014380 <xPortStartScheduler+0x120>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4a3f      	ldr	r2, [pc, #252]	; (8014388 <xPortStartScheduler+0x128>)
 801428c:	4293      	cmp	r3, r2
 801428e:	d10a      	bne.n	80142a6 <xPortStartScheduler+0x46>
	__asm volatile
 8014290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014294:	f383 8811 	msr	BASEPRI, r3
 8014298:	f3bf 8f6f 	isb	sy
 801429c:	f3bf 8f4f 	dsb	sy
 80142a0:	60fb      	str	r3, [r7, #12]
}
 80142a2:	bf00      	nop
 80142a4:	e7fe      	b.n	80142a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80142a6:	4b39      	ldr	r3, [pc, #228]	; (801438c <xPortStartScheduler+0x12c>)
 80142a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	22ff      	movs	r2, #255	; 0xff
 80142b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80142c0:	78fb      	ldrb	r3, [r7, #3]
 80142c2:	b2db      	uxtb	r3, r3
 80142c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80142c8:	b2da      	uxtb	r2, r3
 80142ca:	4b31      	ldr	r3, [pc, #196]	; (8014390 <xPortStartScheduler+0x130>)
 80142cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80142ce:	4b31      	ldr	r3, [pc, #196]	; (8014394 <xPortStartScheduler+0x134>)
 80142d0:	2207      	movs	r2, #7
 80142d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80142d4:	e009      	b.n	80142ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80142d6:	4b2f      	ldr	r3, [pc, #188]	; (8014394 <xPortStartScheduler+0x134>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	3b01      	subs	r3, #1
 80142dc:	4a2d      	ldr	r2, [pc, #180]	; (8014394 <xPortStartScheduler+0x134>)
 80142de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80142e0:	78fb      	ldrb	r3, [r7, #3]
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	005b      	lsls	r3, r3, #1
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80142ea:	78fb      	ldrb	r3, [r7, #3]
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142f2:	2b80      	cmp	r3, #128	; 0x80
 80142f4:	d0ef      	beq.n	80142d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80142f6:	4b27      	ldr	r3, [pc, #156]	; (8014394 <xPortStartScheduler+0x134>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f1c3 0307 	rsb	r3, r3, #7
 80142fe:	2b04      	cmp	r3, #4
 8014300:	d00a      	beq.n	8014318 <xPortStartScheduler+0xb8>
	__asm volatile
 8014302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014306:	f383 8811 	msr	BASEPRI, r3
 801430a:	f3bf 8f6f 	isb	sy
 801430e:	f3bf 8f4f 	dsb	sy
 8014312:	60bb      	str	r3, [r7, #8]
}
 8014314:	bf00      	nop
 8014316:	e7fe      	b.n	8014316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014318:	4b1e      	ldr	r3, [pc, #120]	; (8014394 <xPortStartScheduler+0x134>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	021b      	lsls	r3, r3, #8
 801431e:	4a1d      	ldr	r2, [pc, #116]	; (8014394 <xPortStartScheduler+0x134>)
 8014320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014322:	4b1c      	ldr	r3, [pc, #112]	; (8014394 <xPortStartScheduler+0x134>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801432a:	4a1a      	ldr	r2, [pc, #104]	; (8014394 <xPortStartScheduler+0x134>)
 801432c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	b2da      	uxtb	r2, r3
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014336:	4b18      	ldr	r3, [pc, #96]	; (8014398 <xPortStartScheduler+0x138>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	4a17      	ldr	r2, [pc, #92]	; (8014398 <xPortStartScheduler+0x138>)
 801433c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014342:	4b15      	ldr	r3, [pc, #84]	; (8014398 <xPortStartScheduler+0x138>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	4a14      	ldr	r2, [pc, #80]	; (8014398 <xPortStartScheduler+0x138>)
 8014348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801434c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801434e:	f000 f8dd 	bl	801450c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014352:	4b12      	ldr	r3, [pc, #72]	; (801439c <xPortStartScheduler+0x13c>)
 8014354:	2200      	movs	r2, #0
 8014356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014358:	f000 f8fc 	bl	8014554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801435c:	4b10      	ldr	r3, [pc, #64]	; (80143a0 <xPortStartScheduler+0x140>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4a0f      	ldr	r2, [pc, #60]	; (80143a0 <xPortStartScheduler+0x140>)
 8014362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014368:	f7ff ff66 	bl	8014238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801436c:	f7ff f9bc 	bl	80136e8 <vTaskSwitchContext>
	prvTaskExitError();
 8014370:	f7ff ff1e 	bl	80141b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	3718      	adds	r7, #24
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
 801437e:	bf00      	nop
 8014380:	e000ed00 	.word	0xe000ed00
 8014384:	410fc271 	.word	0x410fc271
 8014388:	410fc270 	.word	0x410fc270
 801438c:	e000e400 	.word	0xe000e400
 8014390:	200049a0 	.word	0x200049a0
 8014394:	200049a4 	.word	0x200049a4
 8014398:	e000ed20 	.word	0xe000ed20
 801439c:	200041a8 	.word	0x200041a8
 80143a0:	e000ef34 	.word	0xe000ef34

080143a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80143a4:	b480      	push	{r7}
 80143a6:	b083      	sub	sp, #12
 80143a8:	af00      	add	r7, sp, #0
	__asm volatile
 80143aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ae:	f383 8811 	msr	BASEPRI, r3
 80143b2:	f3bf 8f6f 	isb	sy
 80143b6:	f3bf 8f4f 	dsb	sy
 80143ba:	607b      	str	r3, [r7, #4]
}
 80143bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80143be:	4b0f      	ldr	r3, [pc, #60]	; (80143fc <vPortEnterCritical+0x58>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	3301      	adds	r3, #1
 80143c4:	4a0d      	ldr	r2, [pc, #52]	; (80143fc <vPortEnterCritical+0x58>)
 80143c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80143c8:	4b0c      	ldr	r3, [pc, #48]	; (80143fc <vPortEnterCritical+0x58>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d10f      	bne.n	80143f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80143d0:	4b0b      	ldr	r3, [pc, #44]	; (8014400 <vPortEnterCritical+0x5c>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	b2db      	uxtb	r3, r3
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d00a      	beq.n	80143f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80143da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143de:	f383 8811 	msr	BASEPRI, r3
 80143e2:	f3bf 8f6f 	isb	sy
 80143e6:	f3bf 8f4f 	dsb	sy
 80143ea:	603b      	str	r3, [r7, #0]
}
 80143ec:	bf00      	nop
 80143ee:	e7fe      	b.n	80143ee <vPortEnterCritical+0x4a>
	}
}
 80143f0:	bf00      	nop
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr
 80143fc:	200041a8 	.word	0x200041a8
 8014400:	e000ed04 	.word	0xe000ed04

08014404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014404:	b480      	push	{r7}
 8014406:	b083      	sub	sp, #12
 8014408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801440a:	4b12      	ldr	r3, [pc, #72]	; (8014454 <vPortExitCritical+0x50>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d10a      	bne.n	8014428 <vPortExitCritical+0x24>
	__asm volatile
 8014412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014416:	f383 8811 	msr	BASEPRI, r3
 801441a:	f3bf 8f6f 	isb	sy
 801441e:	f3bf 8f4f 	dsb	sy
 8014422:	607b      	str	r3, [r7, #4]
}
 8014424:	bf00      	nop
 8014426:	e7fe      	b.n	8014426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014428:	4b0a      	ldr	r3, [pc, #40]	; (8014454 <vPortExitCritical+0x50>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	3b01      	subs	r3, #1
 801442e:	4a09      	ldr	r2, [pc, #36]	; (8014454 <vPortExitCritical+0x50>)
 8014430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014432:	4b08      	ldr	r3, [pc, #32]	; (8014454 <vPortExitCritical+0x50>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d105      	bne.n	8014446 <vPortExitCritical+0x42>
 801443a:	2300      	movs	r3, #0
 801443c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	f383 8811 	msr	BASEPRI, r3
}
 8014444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014446:	bf00      	nop
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr
 8014452:	bf00      	nop
 8014454:	200041a8 	.word	0x200041a8
	...

08014460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014460:	f3ef 8009 	mrs	r0, PSP
 8014464:	f3bf 8f6f 	isb	sy
 8014468:	4b15      	ldr	r3, [pc, #84]	; (80144c0 <pxCurrentTCBConst>)
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	f01e 0f10 	tst.w	lr, #16
 8014470:	bf08      	it	eq
 8014472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447a:	6010      	str	r0, [r2, #0]
 801447c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014484:	f380 8811 	msr	BASEPRI, r0
 8014488:	f3bf 8f4f 	dsb	sy
 801448c:	f3bf 8f6f 	isb	sy
 8014490:	f7ff f92a 	bl	80136e8 <vTaskSwitchContext>
 8014494:	f04f 0000 	mov.w	r0, #0
 8014498:	f380 8811 	msr	BASEPRI, r0
 801449c:	bc09      	pop	{r0, r3}
 801449e:	6819      	ldr	r1, [r3, #0]
 80144a0:	6808      	ldr	r0, [r1, #0]
 80144a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a6:	f01e 0f10 	tst.w	lr, #16
 80144aa:	bf08      	it	eq
 80144ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80144b0:	f380 8809 	msr	PSP, r0
 80144b4:	f3bf 8f6f 	isb	sy
 80144b8:	4770      	bx	lr
 80144ba:	bf00      	nop
 80144bc:	f3af 8000 	nop.w

080144c0 <pxCurrentTCBConst>:
 80144c0:	20004874 	.word	0x20004874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80144c4:	bf00      	nop
 80144c6:	bf00      	nop

080144c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
	__asm volatile
 80144ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d2:	f383 8811 	msr	BASEPRI, r3
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	607b      	str	r3, [r7, #4]
}
 80144e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80144e2:	f7ff f849 	bl	8013578 <xTaskIncrementTick>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d003      	beq.n	80144f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80144ec:	4b06      	ldr	r3, [pc, #24]	; (8014508 <SysTick_Handler+0x40>)
 80144ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144f2:	601a      	str	r2, [r3, #0]
 80144f4:	2300      	movs	r3, #0
 80144f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	f383 8811 	msr	BASEPRI, r3
}
 80144fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014500:	bf00      	nop
 8014502:	3708      	adds	r7, #8
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	e000ed04 	.word	0xe000ed04

0801450c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801450c:	b480      	push	{r7}
 801450e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014510:	4b0b      	ldr	r3, [pc, #44]	; (8014540 <vPortSetupTimerInterrupt+0x34>)
 8014512:	2200      	movs	r2, #0
 8014514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014516:	4b0b      	ldr	r3, [pc, #44]	; (8014544 <vPortSetupTimerInterrupt+0x38>)
 8014518:	2200      	movs	r2, #0
 801451a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801451c:	4b0a      	ldr	r3, [pc, #40]	; (8014548 <vPortSetupTimerInterrupt+0x3c>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a0a      	ldr	r2, [pc, #40]	; (801454c <vPortSetupTimerInterrupt+0x40>)
 8014522:	fba2 2303 	umull	r2, r3, r2, r3
 8014526:	099b      	lsrs	r3, r3, #6
 8014528:	4a09      	ldr	r2, [pc, #36]	; (8014550 <vPortSetupTimerInterrupt+0x44>)
 801452a:	3b01      	subs	r3, #1
 801452c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801452e:	4b04      	ldr	r3, [pc, #16]	; (8014540 <vPortSetupTimerInterrupt+0x34>)
 8014530:	2207      	movs	r2, #7
 8014532:	601a      	str	r2, [r3, #0]
}
 8014534:	bf00      	nop
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr
 801453e:	bf00      	nop
 8014540:	e000e010 	.word	0xe000e010
 8014544:	e000e018 	.word	0xe000e018
 8014548:	2000408c 	.word	0x2000408c
 801454c:	10624dd3 	.word	0x10624dd3
 8014550:	e000e014 	.word	0xe000e014

08014554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014564 <vPortEnableVFP+0x10>
 8014558:	6801      	ldr	r1, [r0, #0]
 801455a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801455e:	6001      	str	r1, [r0, #0]
 8014560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014562:	bf00      	nop
 8014564:	e000ed88 	.word	0xe000ed88

08014568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014568:	b480      	push	{r7}
 801456a:	b085      	sub	sp, #20
 801456c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801456e:	f3ef 8305 	mrs	r3, IPSR
 8014572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2b0f      	cmp	r3, #15
 8014578:	d914      	bls.n	80145a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801457a:	4a17      	ldr	r2, [pc, #92]	; (80145d8 <vPortValidateInterruptPriority+0x70>)
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	4413      	add	r3, r2
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014584:	4b15      	ldr	r3, [pc, #84]	; (80145dc <vPortValidateInterruptPriority+0x74>)
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	7afa      	ldrb	r2, [r7, #11]
 801458a:	429a      	cmp	r2, r3
 801458c:	d20a      	bcs.n	80145a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	607b      	str	r3, [r7, #4]
}
 80145a0:	bf00      	nop
 80145a2:	e7fe      	b.n	80145a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80145a4:	4b0e      	ldr	r3, [pc, #56]	; (80145e0 <vPortValidateInterruptPriority+0x78>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80145ac:	4b0d      	ldr	r3, [pc, #52]	; (80145e4 <vPortValidateInterruptPriority+0x7c>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d90a      	bls.n	80145ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80145b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b8:	f383 8811 	msr	BASEPRI, r3
 80145bc:	f3bf 8f6f 	isb	sy
 80145c0:	f3bf 8f4f 	dsb	sy
 80145c4:	603b      	str	r3, [r7, #0]
}
 80145c6:	bf00      	nop
 80145c8:	e7fe      	b.n	80145c8 <vPortValidateInterruptPriority+0x60>
	}
 80145ca:	bf00      	nop
 80145cc:	3714      	adds	r7, #20
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr
 80145d6:	bf00      	nop
 80145d8:	e000e3f0 	.word	0xe000e3f0
 80145dc:	200049a0 	.word	0x200049a0
 80145e0:	e000ed0c 	.word	0xe000ed0c
 80145e4:	200049a4 	.word	0x200049a4

080145e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b08a      	sub	sp, #40	; 0x28
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80145f0:	2300      	movs	r3, #0
 80145f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80145f4:	f7fe ff16 	bl	8013424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80145f8:	4b58      	ldr	r3, [pc, #352]	; (801475c <pvPortMalloc+0x174>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d101      	bne.n	8014604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014600:	f000 f910 	bl	8014824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014604:	4b56      	ldr	r3, [pc, #344]	; (8014760 <pvPortMalloc+0x178>)
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	4013      	ands	r3, r2
 801460c:	2b00      	cmp	r3, #0
 801460e:	f040 808e 	bne.w	801472e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d01d      	beq.n	8014654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014618:	2208      	movs	r2, #8
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4413      	add	r3, r2
 801461e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f003 0307 	and.w	r3, r3, #7
 8014626:	2b00      	cmp	r3, #0
 8014628:	d014      	beq.n	8014654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f023 0307 	bic.w	r3, r3, #7
 8014630:	3308      	adds	r3, #8
 8014632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f003 0307 	and.w	r3, r3, #7
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00a      	beq.n	8014654 <pvPortMalloc+0x6c>
	__asm volatile
 801463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014642:	f383 8811 	msr	BASEPRI, r3
 8014646:	f3bf 8f6f 	isb	sy
 801464a:	f3bf 8f4f 	dsb	sy
 801464e:	617b      	str	r3, [r7, #20]
}
 8014650:	bf00      	nop
 8014652:	e7fe      	b.n	8014652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d069      	beq.n	801472e <pvPortMalloc+0x146>
 801465a:	4b42      	ldr	r3, [pc, #264]	; (8014764 <pvPortMalloc+0x17c>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	687a      	ldr	r2, [r7, #4]
 8014660:	429a      	cmp	r2, r3
 8014662:	d864      	bhi.n	801472e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014664:	4b40      	ldr	r3, [pc, #256]	; (8014768 <pvPortMalloc+0x180>)
 8014666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014668:	4b3f      	ldr	r3, [pc, #252]	; (8014768 <pvPortMalloc+0x180>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801466e:	e004      	b.n	801467a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	687a      	ldr	r2, [r7, #4]
 8014680:	429a      	cmp	r2, r3
 8014682:	d903      	bls.n	801468c <pvPortMalloc+0xa4>
 8014684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d1f1      	bne.n	8014670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801468c:	4b33      	ldr	r3, [pc, #204]	; (801475c <pvPortMalloc+0x174>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014692:	429a      	cmp	r2, r3
 8014694:	d04b      	beq.n	801472e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014696:	6a3b      	ldr	r3, [r7, #32]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2208      	movs	r2, #8
 801469c:	4413      	add	r3, r2
 801469e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80146a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a2:	681a      	ldr	r2, [r3, #0]
 80146a4:	6a3b      	ldr	r3, [r7, #32]
 80146a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80146a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146aa:	685a      	ldr	r2, [r3, #4]
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	1ad2      	subs	r2, r2, r3
 80146b0:	2308      	movs	r3, #8
 80146b2:	005b      	lsls	r3, r3, #1
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d91f      	bls.n	80146f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80146b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	4413      	add	r3, r2
 80146be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80146c0:	69bb      	ldr	r3, [r7, #24]
 80146c2:	f003 0307 	and.w	r3, r3, #7
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d00a      	beq.n	80146e0 <pvPortMalloc+0xf8>
	__asm volatile
 80146ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ce:	f383 8811 	msr	BASEPRI, r3
 80146d2:	f3bf 8f6f 	isb	sy
 80146d6:	f3bf 8f4f 	dsb	sy
 80146da:	613b      	str	r3, [r7, #16]
}
 80146dc:	bf00      	nop
 80146de:	e7fe      	b.n	80146de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	685a      	ldr	r2, [r3, #4]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	1ad2      	subs	r2, r2, r3
 80146e8:	69bb      	ldr	r3, [r7, #24]
 80146ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80146ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80146f2:	69b8      	ldr	r0, [r7, #24]
 80146f4:	f000 f8f8 	bl	80148e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80146f8:	4b1a      	ldr	r3, [pc, #104]	; (8014764 <pvPortMalloc+0x17c>)
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	1ad3      	subs	r3, r2, r3
 8014702:	4a18      	ldr	r2, [pc, #96]	; (8014764 <pvPortMalloc+0x17c>)
 8014704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014706:	4b17      	ldr	r3, [pc, #92]	; (8014764 <pvPortMalloc+0x17c>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	4b18      	ldr	r3, [pc, #96]	; (801476c <pvPortMalloc+0x184>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	429a      	cmp	r2, r3
 8014710:	d203      	bcs.n	801471a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014712:	4b14      	ldr	r3, [pc, #80]	; (8014764 <pvPortMalloc+0x17c>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	4a15      	ldr	r2, [pc, #84]	; (801476c <pvPortMalloc+0x184>)
 8014718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471c:	685a      	ldr	r2, [r3, #4]
 801471e:	4b10      	ldr	r3, [pc, #64]	; (8014760 <pvPortMalloc+0x178>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	431a      	orrs	r2, r3
 8014724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472a:	2200      	movs	r2, #0
 801472c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801472e:	f7fe fe87 	bl	8013440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014732:	69fb      	ldr	r3, [r7, #28]
 8014734:	f003 0307 	and.w	r3, r3, #7
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00a      	beq.n	8014752 <pvPortMalloc+0x16a>
	__asm volatile
 801473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014740:	f383 8811 	msr	BASEPRI, r3
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	60fb      	str	r3, [r7, #12]
}
 801474e:	bf00      	nop
 8014750:	e7fe      	b.n	8014750 <pvPortMalloc+0x168>
	return pvReturn;
 8014752:	69fb      	ldr	r3, [r7, #28]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3728      	adds	r7, #40	; 0x28
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	200085b0 	.word	0x200085b0
 8014760:	200085bc 	.word	0x200085bc
 8014764:	200085b4 	.word	0x200085b4
 8014768:	200085a8 	.word	0x200085a8
 801476c:	200085b8 	.word	0x200085b8

08014770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b086      	sub	sp, #24
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d048      	beq.n	8014814 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014782:	2308      	movs	r3, #8
 8014784:	425b      	negs	r3, r3
 8014786:	697a      	ldr	r2, [r7, #20]
 8014788:	4413      	add	r3, r2
 801478a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	685a      	ldr	r2, [r3, #4]
 8014794:	4b21      	ldr	r3, [pc, #132]	; (801481c <vPortFree+0xac>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	4013      	ands	r3, r2
 801479a:	2b00      	cmp	r3, #0
 801479c:	d10a      	bne.n	80147b4 <vPortFree+0x44>
	__asm volatile
 801479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147a2:	f383 8811 	msr	BASEPRI, r3
 80147a6:	f3bf 8f6f 	isb	sy
 80147aa:	f3bf 8f4f 	dsb	sy
 80147ae:	60fb      	str	r3, [r7, #12]
}
 80147b0:	bf00      	nop
 80147b2:	e7fe      	b.n	80147b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d00a      	beq.n	80147d2 <vPortFree+0x62>
	__asm volatile
 80147bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c0:	f383 8811 	msr	BASEPRI, r3
 80147c4:	f3bf 8f6f 	isb	sy
 80147c8:	f3bf 8f4f 	dsb	sy
 80147cc:	60bb      	str	r3, [r7, #8]
}
 80147ce:	bf00      	nop
 80147d0:	e7fe      	b.n	80147d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	685a      	ldr	r2, [r3, #4]
 80147d6:	4b11      	ldr	r3, [pc, #68]	; (801481c <vPortFree+0xac>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4013      	ands	r3, r2
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d019      	beq.n	8014814 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d115      	bne.n	8014814 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	685a      	ldr	r2, [r3, #4]
 80147ec:	4b0b      	ldr	r3, [pc, #44]	; (801481c <vPortFree+0xac>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	43db      	mvns	r3, r3
 80147f2:	401a      	ands	r2, r3
 80147f4:	693b      	ldr	r3, [r7, #16]
 80147f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80147f8:	f7fe fe14 	bl	8013424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	685a      	ldr	r2, [r3, #4]
 8014800:	4b07      	ldr	r3, [pc, #28]	; (8014820 <vPortFree+0xb0>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4413      	add	r3, r2
 8014806:	4a06      	ldr	r2, [pc, #24]	; (8014820 <vPortFree+0xb0>)
 8014808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801480a:	6938      	ldr	r0, [r7, #16]
 801480c:	f000 f86c 	bl	80148e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014810:	f7fe fe16 	bl	8013440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014814:	bf00      	nop
 8014816:	3718      	adds	r7, #24
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	200085bc 	.word	0x200085bc
 8014820:	200085b4 	.word	0x200085b4

08014824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014824:	b480      	push	{r7}
 8014826:	b085      	sub	sp, #20
 8014828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801482a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801482e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014830:	4b27      	ldr	r3, [pc, #156]	; (80148d0 <prvHeapInit+0xac>)
 8014832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	f003 0307 	and.w	r3, r3, #7
 801483a:	2b00      	cmp	r3, #0
 801483c:	d00c      	beq.n	8014858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	3307      	adds	r3, #7
 8014842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f023 0307 	bic.w	r3, r3, #7
 801484a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801484c:	68ba      	ldr	r2, [r7, #8]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	1ad3      	subs	r3, r2, r3
 8014852:	4a1f      	ldr	r2, [pc, #124]	; (80148d0 <prvHeapInit+0xac>)
 8014854:	4413      	add	r3, r2
 8014856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801485c:	4a1d      	ldr	r2, [pc, #116]	; (80148d4 <prvHeapInit+0xb0>)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014862:	4b1c      	ldr	r3, [pc, #112]	; (80148d4 <prvHeapInit+0xb0>)
 8014864:	2200      	movs	r2, #0
 8014866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	68ba      	ldr	r2, [r7, #8]
 801486c:	4413      	add	r3, r2
 801486e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014870:	2208      	movs	r2, #8
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	1a9b      	subs	r3, r3, r2
 8014876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f023 0307 	bic.w	r3, r3, #7
 801487e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	4a15      	ldr	r2, [pc, #84]	; (80148d8 <prvHeapInit+0xb4>)
 8014884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014886:	4b14      	ldr	r3, [pc, #80]	; (80148d8 <prvHeapInit+0xb4>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	2200      	movs	r2, #0
 801488c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801488e:	4b12      	ldr	r3, [pc, #72]	; (80148d8 <prvHeapInit+0xb4>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	2200      	movs	r2, #0
 8014894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	68fa      	ldr	r2, [r7, #12]
 801489e:	1ad2      	subs	r2, r2, r3
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80148a4:	4b0c      	ldr	r3, [pc, #48]	; (80148d8 <prvHeapInit+0xb4>)
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	4a0a      	ldr	r2, [pc, #40]	; (80148dc <prvHeapInit+0xb8>)
 80148b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	685b      	ldr	r3, [r3, #4]
 80148b8:	4a09      	ldr	r2, [pc, #36]	; (80148e0 <prvHeapInit+0xbc>)
 80148ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80148bc:	4b09      	ldr	r3, [pc, #36]	; (80148e4 <prvHeapInit+0xc0>)
 80148be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80148c2:	601a      	str	r2, [r3, #0]
}
 80148c4:	bf00      	nop
 80148c6:	3714      	adds	r7, #20
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr
 80148d0:	200049a8 	.word	0x200049a8
 80148d4:	200085a8 	.word	0x200085a8
 80148d8:	200085b0 	.word	0x200085b0
 80148dc:	200085b8 	.word	0x200085b8
 80148e0:	200085b4 	.word	0x200085b4
 80148e4:	200085bc 	.word	0x200085bc

080148e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80148e8:	b480      	push	{r7}
 80148ea:	b085      	sub	sp, #20
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80148f0:	4b28      	ldr	r3, [pc, #160]	; (8014994 <prvInsertBlockIntoFreeList+0xac>)
 80148f2:	60fb      	str	r3, [r7, #12]
 80148f4:	e002      	b.n	80148fc <prvInsertBlockIntoFreeList+0x14>
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	60fb      	str	r3, [r7, #12]
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	429a      	cmp	r2, r3
 8014904:	d8f7      	bhi.n	80148f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	68ba      	ldr	r2, [r7, #8]
 8014910:	4413      	add	r3, r2
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	429a      	cmp	r2, r3
 8014916:	d108      	bne.n	801492a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	685a      	ldr	r2, [r3, #4]
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	441a      	add	r2, r3
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	68ba      	ldr	r2, [r7, #8]
 8014934:	441a      	add	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	429a      	cmp	r2, r3
 801493c:	d118      	bne.n	8014970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	4b15      	ldr	r3, [pc, #84]	; (8014998 <prvInsertBlockIntoFreeList+0xb0>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	429a      	cmp	r2, r3
 8014948:	d00d      	beq.n	8014966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	685a      	ldr	r2, [r3, #4]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	441a      	add	r2, r3
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	601a      	str	r2, [r3, #0]
 8014964:	e008      	b.n	8014978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014966:	4b0c      	ldr	r3, [pc, #48]	; (8014998 <prvInsertBlockIntoFreeList+0xb0>)
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	e003      	b.n	8014978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	681a      	ldr	r2, [r3, #0]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014978:	68fa      	ldr	r2, [r7, #12]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	429a      	cmp	r2, r3
 801497e:	d002      	beq.n	8014986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014986:	bf00      	nop
 8014988:	3714      	adds	r7, #20
 801498a:	46bd      	mov	sp, r7
 801498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop
 8014994:	200085a8 	.word	0x200085a8
 8014998:	200085b0 	.word	0x200085b0

0801499c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80149a0:	2200      	movs	r2, #0
 80149a2:	4912      	ldr	r1, [pc, #72]	; (80149ec <MX_USB_DEVICE_Init+0x50>)
 80149a4:	4812      	ldr	r0, [pc, #72]	; (80149f0 <MX_USB_DEVICE_Init+0x54>)
 80149a6:	f7fc f84f 	bl	8010a48 <USBD_Init>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d001      	beq.n	80149b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80149b0:	f7f0 fffc 	bl	80059ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80149b4:	490f      	ldr	r1, [pc, #60]	; (80149f4 <MX_USB_DEVICE_Init+0x58>)
 80149b6:	480e      	ldr	r0, [pc, #56]	; (80149f0 <MX_USB_DEVICE_Init+0x54>)
 80149b8:	f7fc f87c 	bl	8010ab4 <USBD_RegisterClass>
 80149bc:	4603      	mov	r3, r0
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d001      	beq.n	80149c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80149c2:	f7f0 fff3 	bl	80059ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80149c6:	490c      	ldr	r1, [pc, #48]	; (80149f8 <MX_USB_DEVICE_Init+0x5c>)
 80149c8:	4809      	ldr	r0, [pc, #36]	; (80149f0 <MX_USB_DEVICE_Init+0x54>)
 80149ca:	f7fb ffa1 	bl	8010910 <USBD_CDC_RegisterInterface>
 80149ce:	4603      	mov	r3, r0
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d001      	beq.n	80149d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80149d4:	f7f0 ffea 	bl	80059ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80149d8:	4805      	ldr	r0, [pc, #20]	; (80149f0 <MX_USB_DEVICE_Init+0x54>)
 80149da:	f7fc f88c 	bl	8010af6 <USBD_Start>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d001      	beq.n	80149e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80149e4:	f7f0 ffe2 	bl	80059ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80149e8:	bf00      	nop
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	200041c0 	.word	0x200041c0
 80149f0:	200116a4 	.word	0x200116a4
 80149f4:	200040a4 	.word	0x200040a4
 80149f8:	200041ac 	.word	0x200041ac

080149fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014a00:	2200      	movs	r2, #0
 8014a02:	4905      	ldr	r1, [pc, #20]	; (8014a18 <CDC_Init_FS+0x1c>)
 8014a04:	4805      	ldr	r0, [pc, #20]	; (8014a1c <CDC_Init_FS+0x20>)
 8014a06:	f7fb ff98 	bl	801093a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014a0a:	4905      	ldr	r1, [pc, #20]	; (8014a20 <CDC_Init_FS+0x24>)
 8014a0c:	4803      	ldr	r0, [pc, #12]	; (8014a1c <CDC_Init_FS+0x20>)
 8014a0e:	f7fb ffad 	bl	801096c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014a12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	bd80      	pop	{r7, pc}
 8014a18:	20011b74 	.word	0x20011b74
 8014a1c:	200116a4 	.word	0x200116a4
 8014a20:	20011974 	.word	0x20011974

08014a24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014a24:	b480      	push	{r7}
 8014a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014a28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	6039      	str	r1, [r7, #0]
 8014a3e:	71fb      	strb	r3, [r7, #7]
 8014a40:	4613      	mov	r3, r2
 8014a42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014a44:	79fb      	ldrb	r3, [r7, #7]
 8014a46:	2b23      	cmp	r3, #35	; 0x23
 8014a48:	f200 808c 	bhi.w	8014b64 <CDC_Control_FS+0x130>
 8014a4c:	a201      	add	r2, pc, #4	; (adr r2, 8014a54 <CDC_Control_FS+0x20>)
 8014a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a52:	bf00      	nop
 8014a54:	08014b65 	.word	0x08014b65
 8014a58:	08014b65 	.word	0x08014b65
 8014a5c:	08014b65 	.word	0x08014b65
 8014a60:	08014b65 	.word	0x08014b65
 8014a64:	08014b65 	.word	0x08014b65
 8014a68:	08014b65 	.word	0x08014b65
 8014a6c:	08014b65 	.word	0x08014b65
 8014a70:	08014b65 	.word	0x08014b65
 8014a74:	08014b65 	.word	0x08014b65
 8014a78:	08014b65 	.word	0x08014b65
 8014a7c:	08014b65 	.word	0x08014b65
 8014a80:	08014b65 	.word	0x08014b65
 8014a84:	08014b65 	.word	0x08014b65
 8014a88:	08014b65 	.word	0x08014b65
 8014a8c:	08014b65 	.word	0x08014b65
 8014a90:	08014b65 	.word	0x08014b65
 8014a94:	08014b65 	.word	0x08014b65
 8014a98:	08014b65 	.word	0x08014b65
 8014a9c:	08014b65 	.word	0x08014b65
 8014aa0:	08014b65 	.word	0x08014b65
 8014aa4:	08014b65 	.word	0x08014b65
 8014aa8:	08014b65 	.word	0x08014b65
 8014aac:	08014b65 	.word	0x08014b65
 8014ab0:	08014b65 	.word	0x08014b65
 8014ab4:	08014b65 	.word	0x08014b65
 8014ab8:	08014b65 	.word	0x08014b65
 8014abc:	08014b65 	.word	0x08014b65
 8014ac0:	08014b65 	.word	0x08014b65
 8014ac4:	08014b65 	.word	0x08014b65
 8014ac8:	08014b65 	.word	0x08014b65
 8014acc:	08014b65 	.word	0x08014b65
 8014ad0:	08014b65 	.word	0x08014b65
 8014ad4:	08014ae5 	.word	0x08014ae5
 8014ad8:	08014b1f 	.word	0x08014b1f
 8014adc:	08014b65 	.word	0x08014b65
 8014ae0:	08014b65 	.word	0x08014b65
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	781a      	ldrb	r2, [r3, #0]
 8014ae8:	4b22      	ldr	r3, [pc, #136]	; (8014b74 <CDC_Control_FS+0x140>)
 8014aea:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	785a      	ldrb	r2, [r3, #1]
 8014af0:	4b20      	ldr	r3, [pc, #128]	; (8014b74 <CDC_Control_FS+0x140>)
 8014af2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	789a      	ldrb	r2, [r3, #2]
 8014af8:	4b1e      	ldr	r3, [pc, #120]	; (8014b74 <CDC_Control_FS+0x140>)
 8014afa:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	78da      	ldrb	r2, [r3, #3]
 8014b00:	4b1c      	ldr	r3, [pc, #112]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b02:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	791a      	ldrb	r2, [r3, #4]
 8014b08:	4b1a      	ldr	r3, [pc, #104]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b0a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	795a      	ldrb	r2, [r3, #5]
 8014b10:	4b18      	ldr	r3, [pc, #96]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b12:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	799a      	ldrb	r2, [r3, #6]
 8014b18:	4b16      	ldr	r3, [pc, #88]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b1a:	719a      	strb	r2, [r3, #6]
    	break;
 8014b1c:	e023      	b.n	8014b66 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8014b1e:	4b15      	ldr	r3, [pc, #84]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b20:	781a      	ldrb	r2, [r3, #0]
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	4a12      	ldr	r2, [pc, #72]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b2c:	7852      	ldrb	r2, [r2, #1]
 8014b2e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	3302      	adds	r3, #2
 8014b34:	4a0f      	ldr	r2, [pc, #60]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b36:	7892      	ldrb	r2, [r2, #2]
 8014b38:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	3303      	adds	r3, #3
 8014b3e:	4a0d      	ldr	r2, [pc, #52]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b40:	78d2      	ldrb	r2, [r2, #3]
 8014b42:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	3304      	adds	r3, #4
 8014b48:	4a0a      	ldr	r2, [pc, #40]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b4a:	7912      	ldrb	r2, [r2, #4]
 8014b4c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	3305      	adds	r3, #5
 8014b52:	4a08      	ldr	r2, [pc, #32]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b54:	7952      	ldrb	r2, [r2, #5]
 8014b56:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	3306      	adds	r3, #6
 8014b5c:	4a05      	ldr	r2, [pc, #20]	; (8014b74 <CDC_Control_FS+0x140>)
 8014b5e:	7992      	ldrb	r2, [r2, #6]
 8014b60:	701a      	strb	r2, [r3, #0]
    break;
 8014b62:	e000      	b.n	8014b66 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014b64:	bf00      	nop
  }

  return (USBD_OK);
 8014b66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr
 8014b74:	20011d74 	.word	0x20011d74

08014b78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b082      	sub	sp, #8
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	461a      	mov	r2, r3
 8014b8a:	6879      	ldr	r1, [r7, #4]
 8014b8c:	4807      	ldr	r0, [pc, #28]	; (8014bac <CDC_Receive_FS+0x34>)
 8014b8e:	f7f0 ff9f 	bl	8005ad0 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014b92:	6879      	ldr	r1, [r7, #4]
 8014b94:	4806      	ldr	r0, [pc, #24]	; (8014bb0 <CDC_Receive_FS+0x38>)
 8014b96:	f7fb fee9 	bl	801096c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014b9a:	4805      	ldr	r0, [pc, #20]	; (8014bb0 <CDC_Receive_FS+0x38>)
 8014b9c:	f7fb ff2a 	bl	80109f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014ba0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3708      	adds	r7, #8
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	20000068 	.word	0x20000068
 8014bb0:	200116a4 	.word	0x200116a4

08014bb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b084      	sub	sp, #16
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014bc4:	4b0d      	ldr	r3, [pc, #52]	; (8014bfc <CDC_Transmit_FS+0x48>)
 8014bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014bca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d001      	beq.n	8014bda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	e00b      	b.n	8014bf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014bda:	887b      	ldrh	r3, [r7, #2]
 8014bdc:	461a      	mov	r2, r3
 8014bde:	6879      	ldr	r1, [r7, #4]
 8014be0:	4806      	ldr	r0, [pc, #24]	; (8014bfc <CDC_Transmit_FS+0x48>)
 8014be2:	f7fb feaa 	bl	801093a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014be6:	4805      	ldr	r0, [pc, #20]	; (8014bfc <CDC_Transmit_FS+0x48>)
 8014be8:	f7fb fed4 	bl	8010994 <USBD_CDC_TransmitPacket>
 8014bec:	4603      	mov	r3, r0
 8014bee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	200116a4 	.word	0x200116a4

08014c00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014c00:	b480      	push	{r7}
 8014c02:	b087      	sub	sp, #28
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	371c      	adds	r7, #28
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c20:	4770      	bx	lr
	...

08014c24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b083      	sub	sp, #12
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	6039      	str	r1, [r7, #0]
 8014c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	2212      	movs	r2, #18
 8014c34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014c36:	4b03      	ldr	r3, [pc, #12]	; (8014c44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	370c      	adds	r7, #12
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr
 8014c44:	200041dc 	.word	0x200041dc

08014c48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	4603      	mov	r3, r0
 8014c50:	6039      	str	r1, [r7, #0]
 8014c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	2204      	movs	r2, #4
 8014c58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014c5a:	4b03      	ldr	r3, [pc, #12]	; (8014c68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	370c      	adds	r7, #12
 8014c60:	46bd      	mov	sp, r7
 8014c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c66:	4770      	bx	lr
 8014c68:	200041f0 	.word	0x200041f0

08014c6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	4603      	mov	r3, r0
 8014c74:	6039      	str	r1, [r7, #0]
 8014c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014c78:	79fb      	ldrb	r3, [r7, #7]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d105      	bne.n	8014c8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014c7e:	683a      	ldr	r2, [r7, #0]
 8014c80:	4907      	ldr	r1, [pc, #28]	; (8014ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8014c82:	4808      	ldr	r0, [pc, #32]	; (8014ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8014c84:	f7fc ff14 	bl	8011ab0 <USBD_GetString>
 8014c88:	e004      	b.n	8014c94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014c8a:	683a      	ldr	r2, [r7, #0]
 8014c8c:	4904      	ldr	r1, [pc, #16]	; (8014ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8014c8e:	4805      	ldr	r0, [pc, #20]	; (8014ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8014c90:	f7fc ff0e 	bl	8011ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c94:	4b02      	ldr	r3, [pc, #8]	; (8014ca0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	20011d7c 	.word	0x20011d7c
 8014ca4:	0801bdb4 	.word	0x0801bdb4

08014ca8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	4603      	mov	r3, r0
 8014cb0:	6039      	str	r1, [r7, #0]
 8014cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014cb4:	683a      	ldr	r2, [r7, #0]
 8014cb6:	4904      	ldr	r1, [pc, #16]	; (8014cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014cb8:	4804      	ldr	r0, [pc, #16]	; (8014ccc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014cba:	f7fc fef9 	bl	8011ab0 <USBD_GetString>
  return USBD_StrDesc;
 8014cbe:	4b02      	ldr	r3, [pc, #8]	; (8014cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3708      	adds	r7, #8
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	20011d7c 	.word	0x20011d7c
 8014ccc:	0801bdcc 	.word	0x0801bdcc

08014cd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	6039      	str	r1, [r7, #0]
 8014cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	221a      	movs	r2, #26
 8014ce0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014ce2:	f000 f843 	bl	8014d6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014ce6:	4b02      	ldr	r3, [pc, #8]	; (8014cf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3708      	adds	r7, #8
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}
 8014cf0:	200041f4 	.word	0x200041f4

08014cf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	6039      	str	r1, [r7, #0]
 8014cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014d00:	79fb      	ldrb	r3, [r7, #7]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d105      	bne.n	8014d12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d06:	683a      	ldr	r2, [r7, #0]
 8014d08:	4907      	ldr	r1, [pc, #28]	; (8014d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d0a:	4808      	ldr	r0, [pc, #32]	; (8014d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d0c:	f7fc fed0 	bl	8011ab0 <USBD_GetString>
 8014d10:	e004      	b.n	8014d1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d12:	683a      	ldr	r2, [r7, #0]
 8014d14:	4904      	ldr	r1, [pc, #16]	; (8014d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d16:	4805      	ldr	r0, [pc, #20]	; (8014d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d18:	f7fc feca 	bl	8011ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d1c:	4b02      	ldr	r3, [pc, #8]	; (8014d28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3708      	adds	r7, #8
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	20011d7c 	.word	0x20011d7c
 8014d2c:	0801bde0 	.word	0x0801bde0

08014d30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	4603      	mov	r3, r0
 8014d38:	6039      	str	r1, [r7, #0]
 8014d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d3c:	79fb      	ldrb	r3, [r7, #7]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d105      	bne.n	8014d4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014d42:	683a      	ldr	r2, [r7, #0]
 8014d44:	4907      	ldr	r1, [pc, #28]	; (8014d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014d46:	4808      	ldr	r0, [pc, #32]	; (8014d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014d48:	f7fc feb2 	bl	8011ab0 <USBD_GetString>
 8014d4c:	e004      	b.n	8014d58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	4904      	ldr	r1, [pc, #16]	; (8014d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014d52:	4805      	ldr	r0, [pc, #20]	; (8014d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014d54:	f7fc feac 	bl	8011ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d58:	4b02      	ldr	r3, [pc, #8]	; (8014d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3708      	adds	r7, #8
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	20011d7c 	.word	0x20011d7c
 8014d68:	0801bdec 	.word	0x0801bdec

08014d6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014d72:	4b0f      	ldr	r3, [pc, #60]	; (8014db0 <Get_SerialNum+0x44>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014d78:	4b0e      	ldr	r3, [pc, #56]	; (8014db4 <Get_SerialNum+0x48>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014d7e:	4b0e      	ldr	r3, [pc, #56]	; (8014db8 <Get_SerialNum+0x4c>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014d84:	68fa      	ldr	r2, [r7, #12]
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4413      	add	r3, r2
 8014d8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d009      	beq.n	8014da6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014d92:	2208      	movs	r2, #8
 8014d94:	4909      	ldr	r1, [pc, #36]	; (8014dbc <Get_SerialNum+0x50>)
 8014d96:	68f8      	ldr	r0, [r7, #12]
 8014d98:	f000 f814 	bl	8014dc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014d9c:	2204      	movs	r2, #4
 8014d9e:	4908      	ldr	r1, [pc, #32]	; (8014dc0 <Get_SerialNum+0x54>)
 8014da0:	68b8      	ldr	r0, [r7, #8]
 8014da2:	f000 f80f 	bl	8014dc4 <IntToUnicode>
  }
}
 8014da6:	bf00      	nop
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	1fff7a10 	.word	0x1fff7a10
 8014db4:	1fff7a14 	.word	0x1fff7a14
 8014db8:	1fff7a18 	.word	0x1fff7a18
 8014dbc:	200041f6 	.word	0x200041f6
 8014dc0:	20004206 	.word	0x20004206

08014dc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b087      	sub	sp, #28
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	60f8      	str	r0, [r7, #12]
 8014dcc:	60b9      	str	r1, [r7, #8]
 8014dce:	4613      	mov	r3, r2
 8014dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	75fb      	strb	r3, [r7, #23]
 8014dda:	e027      	b.n	8014e2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	0f1b      	lsrs	r3, r3, #28
 8014de0:	2b09      	cmp	r3, #9
 8014de2:	d80b      	bhi.n	8014dfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	0f1b      	lsrs	r3, r3, #28
 8014de8:	b2da      	uxtb	r2, r3
 8014dea:	7dfb      	ldrb	r3, [r7, #23]
 8014dec:	005b      	lsls	r3, r3, #1
 8014dee:	4619      	mov	r1, r3
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	440b      	add	r3, r1
 8014df4:	3230      	adds	r2, #48	; 0x30
 8014df6:	b2d2      	uxtb	r2, r2
 8014df8:	701a      	strb	r2, [r3, #0]
 8014dfa:	e00a      	b.n	8014e12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	0f1b      	lsrs	r3, r3, #28
 8014e00:	b2da      	uxtb	r2, r3
 8014e02:	7dfb      	ldrb	r3, [r7, #23]
 8014e04:	005b      	lsls	r3, r3, #1
 8014e06:	4619      	mov	r1, r3
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	440b      	add	r3, r1
 8014e0c:	3237      	adds	r2, #55	; 0x37
 8014e0e:	b2d2      	uxtb	r2, r2
 8014e10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	011b      	lsls	r3, r3, #4
 8014e16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014e18:	7dfb      	ldrb	r3, [r7, #23]
 8014e1a:	005b      	lsls	r3, r3, #1
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	68ba      	ldr	r2, [r7, #8]
 8014e20:	4413      	add	r3, r2
 8014e22:	2200      	movs	r2, #0
 8014e24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014e26:	7dfb      	ldrb	r3, [r7, #23]
 8014e28:	3301      	adds	r3, #1
 8014e2a:	75fb      	strb	r3, [r7, #23]
 8014e2c:	7dfa      	ldrb	r2, [r7, #23]
 8014e2e:	79fb      	ldrb	r3, [r7, #7]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d3d3      	bcc.n	8014ddc <IntToUnicode+0x18>
  }
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop
 8014e38:	371c      	adds	r7, #28
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
	...

08014e44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b08a      	sub	sp, #40	; 0x28
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e4c:	f107 0314 	add.w	r3, r7, #20
 8014e50:	2200      	movs	r2, #0
 8014e52:	601a      	str	r2, [r3, #0]
 8014e54:	605a      	str	r2, [r3, #4]
 8014e56:	609a      	str	r2, [r3, #8]
 8014e58:	60da      	str	r2, [r3, #12]
 8014e5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014e64:	d13a      	bne.n	8014edc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e66:	2300      	movs	r3, #0
 8014e68:	613b      	str	r3, [r7, #16]
 8014e6a:	4b1e      	ldr	r3, [pc, #120]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e6e:	4a1d      	ldr	r2, [pc, #116]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014e70:	f043 0301 	orr.w	r3, r3, #1
 8014e74:	6313      	str	r3, [r2, #48]	; 0x30
 8014e76:	4b1b      	ldr	r3, [pc, #108]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e7a:	f003 0301 	and.w	r3, r3, #1
 8014e7e:	613b      	str	r3, [r7, #16]
 8014e80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014e82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e88:	2302      	movs	r3, #2
 8014e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e90:	2303      	movs	r3, #3
 8014e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014e94:	230a      	movs	r3, #10
 8014e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014e98:	f107 0314 	add.w	r3, r7, #20
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	4812      	ldr	r0, [pc, #72]	; (8014ee8 <HAL_PCD_MspInit+0xa4>)
 8014ea0:	f7f6 fb6e 	bl	800b580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014ea4:	4b0f      	ldr	r3, [pc, #60]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ea8:	4a0e      	ldr	r2, [pc, #56]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014eae:	6353      	str	r3, [r2, #52]	; 0x34
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	60fb      	str	r3, [r7, #12]
 8014eb4:	4b0b      	ldr	r3, [pc, #44]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eb8:	4a0a      	ldr	r2, [pc, #40]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014ebe:	6453      	str	r3, [r2, #68]	; 0x44
 8014ec0:	4b08      	ldr	r3, [pc, #32]	; (8014ee4 <HAL_PCD_MspInit+0xa0>)
 8014ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014ec8:	60fb      	str	r3, [r7, #12]
 8014eca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014ecc:	2200      	movs	r2, #0
 8014ece:	2105      	movs	r1, #5
 8014ed0:	2043      	movs	r0, #67	; 0x43
 8014ed2:	f7f5 ff8b 	bl	800adec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014ed6:	2043      	movs	r0, #67	; 0x43
 8014ed8:	f7f5 ffa4 	bl	800ae24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014edc:	bf00      	nop
 8014ede:	3728      	adds	r7, #40	; 0x28
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	40023800 	.word	0x40023800
 8014ee8:	40020000 	.word	0x40020000

08014eec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014f00:	4619      	mov	r1, r3
 8014f02:	4610      	mov	r0, r2
 8014f04:	f7fb fe42 	bl	8010b8c <USBD_LL_SetupStage>
}
 8014f08:	bf00      	nop
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b082      	sub	sp, #8
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014f22:	78fa      	ldrb	r2, [r7, #3]
 8014f24:	6879      	ldr	r1, [r7, #4]
 8014f26:	4613      	mov	r3, r2
 8014f28:	00db      	lsls	r3, r3, #3
 8014f2a:	1a9b      	subs	r3, r3, r2
 8014f2c:	009b      	lsls	r3, r3, #2
 8014f2e:	440b      	add	r3, r1
 8014f30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	78fb      	ldrb	r3, [r7, #3]
 8014f38:	4619      	mov	r1, r3
 8014f3a:	f7fb fe7c 	bl	8010c36 <USBD_LL_DataOutStage>
}
 8014f3e:	bf00      	nop
 8014f40:	3708      	adds	r7, #8
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b082      	sub	sp, #8
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
 8014f4e:	460b      	mov	r3, r1
 8014f50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014f58:	78fa      	ldrb	r2, [r7, #3]
 8014f5a:	6879      	ldr	r1, [r7, #4]
 8014f5c:	4613      	mov	r3, r2
 8014f5e:	00db      	lsls	r3, r3, #3
 8014f60:	1a9b      	subs	r3, r3, r2
 8014f62:	009b      	lsls	r3, r3, #2
 8014f64:	440b      	add	r3, r1
 8014f66:	3348      	adds	r3, #72	; 0x48
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	78fb      	ldrb	r3, [r7, #3]
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	f7fb fec5 	bl	8010cfc <USBD_LL_DataInStage>
}
 8014f72:	bf00      	nop
 8014f74:	3708      	adds	r7, #8
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b082      	sub	sp, #8
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fb ffc9 	bl	8010f20 <USBD_LL_SOF>
}
 8014f8e:	bf00      	nop
 8014f90:	3708      	adds	r7, #8
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}

08014f96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f96:	b580      	push	{r7, lr}
 8014f98:	b084      	sub	sp, #16
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	68db      	ldr	r3, [r3, #12]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d102      	bne.n	8014fb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014faa:	2300      	movs	r3, #0
 8014fac:	73fb      	strb	r3, [r7, #15]
 8014fae:	e008      	b.n	8014fc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	68db      	ldr	r3, [r3, #12]
 8014fb4:	2b02      	cmp	r3, #2
 8014fb6:	d102      	bne.n	8014fbe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014fb8:	2301      	movs	r3, #1
 8014fba:	73fb      	strb	r3, [r7, #15]
 8014fbc:	e001      	b.n	8014fc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014fbe:	f7f0 fcf5 	bl	80059ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014fc8:	7bfa      	ldrb	r2, [r7, #15]
 8014fca:	4611      	mov	r1, r2
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7fb ff6c 	bl	8010eaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7fb ff25 	bl	8010e28 <USBD_LL_Reset>
}
 8014fde:	bf00      	nop
 8014fe0:	3710      	adds	r7, #16
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
	...

08014fe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7fb ff67 	bl	8010eca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	6812      	ldr	r2, [r2, #0]
 801500a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801500e:	f043 0301 	orr.w	r3, r3, #1
 8015012:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6a1b      	ldr	r3, [r3, #32]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d005      	beq.n	8015028 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801501c:	4b04      	ldr	r3, [pc, #16]	; (8015030 <HAL_PCD_SuspendCallback+0x48>)
 801501e:	691b      	ldr	r3, [r3, #16]
 8015020:	4a03      	ldr	r2, [pc, #12]	; (8015030 <HAL_PCD_SuspendCallback+0x48>)
 8015022:	f043 0306 	orr.w	r3, r3, #6
 8015026:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015028:	bf00      	nop
 801502a:	3708      	adds	r7, #8
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	e000ed00 	.word	0xe000ed00

08015034 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015042:	4618      	mov	r0, r3
 8015044:	f7fb ff56 	bl	8010ef4 <USBD_LL_Resume>
}
 8015048:	bf00      	nop
 801504a:	3708      	adds	r7, #8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	460b      	mov	r3, r1
 801505a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015062:	78fa      	ldrb	r2, [r7, #3]
 8015064:	4611      	mov	r1, r2
 8015066:	4618      	mov	r0, r3
 8015068:	f7fb ff81 	bl	8010f6e <USBD_LL_IsoOUTIncomplete>
}
 801506c:	bf00      	nop
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	460b      	mov	r3, r1
 801507e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015086:	78fa      	ldrb	r2, [r7, #3]
 8015088:	4611      	mov	r1, r2
 801508a:	4618      	mov	r0, r3
 801508c:	f7fb ff62 	bl	8010f54 <USBD_LL_IsoINIncomplete>
}
 8015090:	bf00      	nop
 8015092:	3708      	adds	r7, #8
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}

08015098 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7fb ff6e 	bl	8010f88 <USBD_LL_DevConnected>
}
 80150ac:	bf00      	nop
 80150ae:	3708      	adds	r7, #8
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fb ff6b 	bl	8010f9e <USBD_LL_DevDisconnected>
}
 80150c8:	bf00      	nop
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d13c      	bne.n	801515a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80150e0:	4a20      	ldr	r2, [pc, #128]	; (8015164 <USBD_LL_Init+0x94>)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	4a1e      	ldr	r2, [pc, #120]	; (8015164 <USBD_LL_Init+0x94>)
 80150ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80150f0:	4b1c      	ldr	r3, [pc, #112]	; (8015164 <USBD_LL_Init+0x94>)
 80150f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80150f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80150f8:	4b1a      	ldr	r3, [pc, #104]	; (8015164 <USBD_LL_Init+0x94>)
 80150fa:	2204      	movs	r2, #4
 80150fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80150fe:	4b19      	ldr	r3, [pc, #100]	; (8015164 <USBD_LL_Init+0x94>)
 8015100:	2202      	movs	r2, #2
 8015102:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015104:	4b17      	ldr	r3, [pc, #92]	; (8015164 <USBD_LL_Init+0x94>)
 8015106:	2200      	movs	r2, #0
 8015108:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801510a:	4b16      	ldr	r3, [pc, #88]	; (8015164 <USBD_LL_Init+0x94>)
 801510c:	2202      	movs	r2, #2
 801510e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015110:	4b14      	ldr	r3, [pc, #80]	; (8015164 <USBD_LL_Init+0x94>)
 8015112:	2200      	movs	r2, #0
 8015114:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015116:	4b13      	ldr	r3, [pc, #76]	; (8015164 <USBD_LL_Init+0x94>)
 8015118:	2200      	movs	r2, #0
 801511a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801511c:	4b11      	ldr	r3, [pc, #68]	; (8015164 <USBD_LL_Init+0x94>)
 801511e:	2200      	movs	r2, #0
 8015120:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015122:	4b10      	ldr	r3, [pc, #64]	; (8015164 <USBD_LL_Init+0x94>)
 8015124:	2200      	movs	r2, #0
 8015126:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015128:	4b0e      	ldr	r3, [pc, #56]	; (8015164 <USBD_LL_Init+0x94>)
 801512a:	2200      	movs	r2, #0
 801512c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801512e:	480d      	ldr	r0, [pc, #52]	; (8015164 <USBD_LL_Init+0x94>)
 8015130:	f7f6 fc32 	bl	800b998 <HAL_PCD_Init>
 8015134:	4603      	mov	r3, r0
 8015136:	2b00      	cmp	r3, #0
 8015138:	d001      	beq.n	801513e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801513a:	f7f0 fc37 	bl	80059ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801513e:	2180      	movs	r1, #128	; 0x80
 8015140:	4808      	ldr	r0, [pc, #32]	; (8015164 <USBD_LL_Init+0x94>)
 8015142:	f7f7 fd90 	bl	800cc66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015146:	2240      	movs	r2, #64	; 0x40
 8015148:	2100      	movs	r1, #0
 801514a:	4806      	ldr	r0, [pc, #24]	; (8015164 <USBD_LL_Init+0x94>)
 801514c:	f7f7 fd44 	bl	800cbd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015150:	2280      	movs	r2, #128	; 0x80
 8015152:	2101      	movs	r1, #1
 8015154:	4803      	ldr	r0, [pc, #12]	; (8015164 <USBD_LL_Init+0x94>)
 8015156:	f7f7 fd3f 	bl	800cbd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801515a:	2300      	movs	r3, #0
}
 801515c:	4618      	mov	r0, r3
 801515e:	3708      	adds	r7, #8
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	20011f7c 	.word	0x20011f7c

08015168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b084      	sub	sp, #16
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015170:	2300      	movs	r3, #0
 8015172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015174:	2300      	movs	r3, #0
 8015176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801517e:	4618      	mov	r0, r3
 8015180:	f7f6 fd27 	bl	800bbd2 <HAL_PCD_Start>
 8015184:	4603      	mov	r3, r0
 8015186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015188:	7bfb      	ldrb	r3, [r7, #15]
 801518a:	4618      	mov	r0, r3
 801518c:	f000 f92a 	bl	80153e4 <USBD_Get_USB_Status>
 8015190:	4603      	mov	r3, r0
 8015192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015194:	7bbb      	ldrb	r3, [r7, #14]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3710      	adds	r7, #16
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}

0801519e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801519e:	b580      	push	{r7, lr}
 80151a0:	b084      	sub	sp, #16
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
 80151a6:	4608      	mov	r0, r1
 80151a8:	4611      	mov	r1, r2
 80151aa:	461a      	mov	r2, r3
 80151ac:	4603      	mov	r3, r0
 80151ae:	70fb      	strb	r3, [r7, #3]
 80151b0:	460b      	mov	r3, r1
 80151b2:	70bb      	strb	r3, [r7, #2]
 80151b4:	4613      	mov	r3, r2
 80151b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151b8:	2300      	movs	r3, #0
 80151ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151bc:	2300      	movs	r3, #0
 80151be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80151c6:	78bb      	ldrb	r3, [r7, #2]
 80151c8:	883a      	ldrh	r2, [r7, #0]
 80151ca:	78f9      	ldrb	r1, [r7, #3]
 80151cc:	f7f7 f90b 	bl	800c3e6 <HAL_PCD_EP_Open>
 80151d0:	4603      	mov	r3, r0
 80151d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151d4:	7bfb      	ldrb	r3, [r7, #15]
 80151d6:	4618      	mov	r0, r3
 80151d8:	f000 f904 	bl	80153e4 <USBD_Get_USB_Status>
 80151dc:	4603      	mov	r3, r0
 80151de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}

080151ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80151ea:	b580      	push	{r7, lr}
 80151ec:	b084      	sub	sp, #16
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	6078      	str	r0, [r7, #4]
 80151f2:	460b      	mov	r3, r1
 80151f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151f6:	2300      	movs	r3, #0
 80151f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151fa:	2300      	movs	r3, #0
 80151fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015204:	78fa      	ldrb	r2, [r7, #3]
 8015206:	4611      	mov	r1, r2
 8015208:	4618      	mov	r0, r3
 801520a:	f7f7 f954 	bl	800c4b6 <HAL_PCD_EP_Close>
 801520e:	4603      	mov	r3, r0
 8015210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015212:	7bfb      	ldrb	r3, [r7, #15]
 8015214:	4618      	mov	r0, r3
 8015216:	f000 f8e5 	bl	80153e4 <USBD_Get_USB_Status>
 801521a:	4603      	mov	r3, r0
 801521c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801521e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015220:	4618      	mov	r0, r3
 8015222:	3710      	adds	r7, #16
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	460b      	mov	r3, r1
 8015232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015234:	2300      	movs	r3, #0
 8015236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015238:	2300      	movs	r3, #0
 801523a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015242:	78fa      	ldrb	r2, [r7, #3]
 8015244:	4611      	mov	r1, r2
 8015246:	4618      	mov	r0, r3
 8015248:	f7f7 fa2c 	bl	800c6a4 <HAL_PCD_EP_SetStall>
 801524c:	4603      	mov	r3, r0
 801524e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015250:	7bfb      	ldrb	r3, [r7, #15]
 8015252:	4618      	mov	r0, r3
 8015254:	f000 f8c6 	bl	80153e4 <USBD_Get_USB_Status>
 8015258:	4603      	mov	r3, r0
 801525a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801525c:	7bbb      	ldrb	r3, [r7, #14]
}
 801525e:	4618      	mov	r0, r3
 8015260:	3710      	adds	r7, #16
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}

08015266 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b084      	sub	sp, #16
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
 801526e:	460b      	mov	r3, r1
 8015270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015272:	2300      	movs	r3, #0
 8015274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015276:	2300      	movs	r3, #0
 8015278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015280:	78fa      	ldrb	r2, [r7, #3]
 8015282:	4611      	mov	r1, r2
 8015284:	4618      	mov	r0, r3
 8015286:	f7f7 fa71 	bl	800c76c <HAL_PCD_EP_ClrStall>
 801528a:	4603      	mov	r3, r0
 801528c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801528e:	7bfb      	ldrb	r3, [r7, #15]
 8015290:	4618      	mov	r0, r3
 8015292:	f000 f8a7 	bl	80153e4 <USBD_Get_USB_Status>
 8015296:	4603      	mov	r3, r0
 8015298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801529a:	7bbb      	ldrb	r3, [r7, #14]
}
 801529c:	4618      	mov	r0, r3
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b085      	sub	sp, #20
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	460b      	mov	r3, r1
 80152ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80152b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80152b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	da0b      	bge.n	80152d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80152c0:	78fb      	ldrb	r3, [r7, #3]
 80152c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80152c6:	68f9      	ldr	r1, [r7, #12]
 80152c8:	4613      	mov	r3, r2
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	1a9b      	subs	r3, r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	440b      	add	r3, r1
 80152d2:	333e      	adds	r3, #62	; 0x3e
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	e00b      	b.n	80152f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80152d8:	78fb      	ldrb	r3, [r7, #3]
 80152da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80152de:	68f9      	ldr	r1, [r7, #12]
 80152e0:	4613      	mov	r3, r2
 80152e2:	00db      	lsls	r3, r3, #3
 80152e4:	1a9b      	subs	r3, r3, r2
 80152e6:	009b      	lsls	r3, r3, #2
 80152e8:	440b      	add	r3, r1
 80152ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80152ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3714      	adds	r7, #20
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr

080152fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b084      	sub	sp, #16
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	460b      	mov	r3, r1
 8015306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015308:	2300      	movs	r3, #0
 801530a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801530c:	2300      	movs	r3, #0
 801530e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015316:	78fa      	ldrb	r2, [r7, #3]
 8015318:	4611      	mov	r1, r2
 801531a:	4618      	mov	r0, r3
 801531c:	f7f7 f83e 	bl	800c39c <HAL_PCD_SetAddress>
 8015320:	4603      	mov	r3, r0
 8015322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015324:	7bfb      	ldrb	r3, [r7, #15]
 8015326:	4618      	mov	r0, r3
 8015328:	f000 f85c 	bl	80153e4 <USBD_Get_USB_Status>
 801532c:	4603      	mov	r3, r0
 801532e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015330:	7bbb      	ldrb	r3, [r7, #14]
}
 8015332:	4618      	mov	r0, r3
 8015334:	3710      	adds	r7, #16
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}

0801533a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801533a:	b580      	push	{r7, lr}
 801533c:	b086      	sub	sp, #24
 801533e:	af00      	add	r7, sp, #0
 8015340:	60f8      	str	r0, [r7, #12]
 8015342:	607a      	str	r2, [r7, #4]
 8015344:	603b      	str	r3, [r7, #0]
 8015346:	460b      	mov	r3, r1
 8015348:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801534a:	2300      	movs	r3, #0
 801534c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801534e:	2300      	movs	r3, #0
 8015350:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015358:	7af9      	ldrb	r1, [r7, #11]
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	f7f7 f957 	bl	800c610 <HAL_PCD_EP_Transmit>
 8015362:	4603      	mov	r3, r0
 8015364:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015366:	7dfb      	ldrb	r3, [r7, #23]
 8015368:	4618      	mov	r0, r3
 801536a:	f000 f83b 	bl	80153e4 <USBD_Get_USB_Status>
 801536e:	4603      	mov	r3, r0
 8015370:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015372:	7dbb      	ldrb	r3, [r7, #22]
}
 8015374:	4618      	mov	r0, r3
 8015376:	3718      	adds	r7, #24
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b086      	sub	sp, #24
 8015380:	af00      	add	r7, sp, #0
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	607a      	str	r2, [r7, #4]
 8015386:	603b      	str	r3, [r7, #0]
 8015388:	460b      	mov	r3, r1
 801538a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801538c:	2300      	movs	r3, #0
 801538e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015390:	2300      	movs	r3, #0
 8015392:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801539a:	7af9      	ldrb	r1, [r7, #11]
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	f7f7 f8d3 	bl	800c54a <HAL_PCD_EP_Receive>
 80153a4:	4603      	mov	r3, r0
 80153a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153a8:	7dfb      	ldrb	r3, [r7, #23]
 80153aa:	4618      	mov	r0, r3
 80153ac:	f000 f81a 	bl	80153e4 <USBD_Get_USB_Status>
 80153b0:	4603      	mov	r3, r0
 80153b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80153b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3718      	adds	r7, #24
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b082      	sub	sp, #8
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
 80153c6:	460b      	mov	r3, r1
 80153c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80153d0:	78fa      	ldrb	r2, [r7, #3]
 80153d2:	4611      	mov	r1, r2
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7f7 f903 	bl	800c5e0 <HAL_PCD_EP_GetRxCount>
 80153da:	4603      	mov	r3, r0
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3708      	adds	r7, #8
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80153e4:	b480      	push	{r7}
 80153e6:	b085      	sub	sp, #20
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	4603      	mov	r3, r0
 80153ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153ee:	2300      	movs	r3, #0
 80153f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80153f2:	79fb      	ldrb	r3, [r7, #7]
 80153f4:	2b03      	cmp	r3, #3
 80153f6:	d817      	bhi.n	8015428 <USBD_Get_USB_Status+0x44>
 80153f8:	a201      	add	r2, pc, #4	; (adr r2, 8015400 <USBD_Get_USB_Status+0x1c>)
 80153fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153fe:	bf00      	nop
 8015400:	08015411 	.word	0x08015411
 8015404:	08015417 	.word	0x08015417
 8015408:	0801541d 	.word	0x0801541d
 801540c:	08015423 	.word	0x08015423
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015410:	2300      	movs	r3, #0
 8015412:	73fb      	strb	r3, [r7, #15]
    break;
 8015414:	e00b      	b.n	801542e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015416:	2303      	movs	r3, #3
 8015418:	73fb      	strb	r3, [r7, #15]
    break;
 801541a:	e008      	b.n	801542e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801541c:	2301      	movs	r3, #1
 801541e:	73fb      	strb	r3, [r7, #15]
    break;
 8015420:	e005      	b.n	801542e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015422:	2303      	movs	r3, #3
 8015424:	73fb      	strb	r3, [r7, #15]
    break;
 8015426:	e002      	b.n	801542e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015428:	2303      	movs	r3, #3
 801542a:	73fb      	strb	r3, [r7, #15]
    break;
 801542c:	bf00      	nop
  }
  return usb_status;
 801542e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015430:	4618      	mov	r0, r3
 8015432:	3714      	adds	r7, #20
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr

0801543c <__errno>:
 801543c:	4b01      	ldr	r3, [pc, #4]	; (8015444 <__errno+0x8>)
 801543e:	6818      	ldr	r0, [r3, #0]
 8015440:	4770      	bx	lr
 8015442:	bf00      	nop
 8015444:	20004210 	.word	0x20004210

08015448 <__libc_init_array>:
 8015448:	b570      	push	{r4, r5, r6, lr}
 801544a:	4d0d      	ldr	r5, [pc, #52]	; (8015480 <__libc_init_array+0x38>)
 801544c:	4c0d      	ldr	r4, [pc, #52]	; (8015484 <__libc_init_array+0x3c>)
 801544e:	1b64      	subs	r4, r4, r5
 8015450:	10a4      	asrs	r4, r4, #2
 8015452:	2600      	movs	r6, #0
 8015454:	42a6      	cmp	r6, r4
 8015456:	d109      	bne.n	801546c <__libc_init_array+0x24>
 8015458:	4d0b      	ldr	r5, [pc, #44]	; (8015488 <__libc_init_array+0x40>)
 801545a:	4c0c      	ldr	r4, [pc, #48]	; (801548c <__libc_init_array+0x44>)
 801545c:	f006 fb7e 	bl	801bb5c <_init>
 8015460:	1b64      	subs	r4, r4, r5
 8015462:	10a4      	asrs	r4, r4, #2
 8015464:	2600      	movs	r6, #0
 8015466:	42a6      	cmp	r6, r4
 8015468:	d105      	bne.n	8015476 <__libc_init_array+0x2e>
 801546a:	bd70      	pop	{r4, r5, r6, pc}
 801546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015470:	4798      	blx	r3
 8015472:	3601      	adds	r6, #1
 8015474:	e7ee      	b.n	8015454 <__libc_init_array+0xc>
 8015476:	f855 3b04 	ldr.w	r3, [r5], #4
 801547a:	4798      	blx	r3
 801547c:	3601      	adds	r6, #1
 801547e:	e7f2      	b.n	8015466 <__libc_init_array+0x1e>
 8015480:	0801c528 	.word	0x0801c528
 8015484:	0801c528 	.word	0x0801c528
 8015488:	0801c528 	.word	0x0801c528
 801548c:	0801c52c 	.word	0x0801c52c

08015490 <malloc>:
 8015490:	4b02      	ldr	r3, [pc, #8]	; (801549c <malloc+0xc>)
 8015492:	4601      	mov	r1, r0
 8015494:	6818      	ldr	r0, [r3, #0]
 8015496:	f000 b88b 	b.w	80155b0 <_malloc_r>
 801549a:	bf00      	nop
 801549c:	20004210 	.word	0x20004210

080154a0 <free>:
 80154a0:	4b02      	ldr	r3, [pc, #8]	; (80154ac <free+0xc>)
 80154a2:	4601      	mov	r1, r0
 80154a4:	6818      	ldr	r0, [r3, #0]
 80154a6:	f000 b833 	b.w	8015510 <_free_r>
 80154aa:	bf00      	nop
 80154ac:	20004210 	.word	0x20004210

080154b0 <memcpy>:
 80154b0:	440a      	add	r2, r1
 80154b2:	4291      	cmp	r1, r2
 80154b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80154b8:	d100      	bne.n	80154bc <memcpy+0xc>
 80154ba:	4770      	bx	lr
 80154bc:	b510      	push	{r4, lr}
 80154be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80154c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80154c6:	4291      	cmp	r1, r2
 80154c8:	d1f9      	bne.n	80154be <memcpy+0xe>
 80154ca:	bd10      	pop	{r4, pc}

080154cc <memmove>:
 80154cc:	4288      	cmp	r0, r1
 80154ce:	b510      	push	{r4, lr}
 80154d0:	eb01 0402 	add.w	r4, r1, r2
 80154d4:	d902      	bls.n	80154dc <memmove+0x10>
 80154d6:	4284      	cmp	r4, r0
 80154d8:	4623      	mov	r3, r4
 80154da:	d807      	bhi.n	80154ec <memmove+0x20>
 80154dc:	1e43      	subs	r3, r0, #1
 80154de:	42a1      	cmp	r1, r4
 80154e0:	d008      	beq.n	80154f4 <memmove+0x28>
 80154e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80154e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80154ea:	e7f8      	b.n	80154de <memmove+0x12>
 80154ec:	4402      	add	r2, r0
 80154ee:	4601      	mov	r1, r0
 80154f0:	428a      	cmp	r2, r1
 80154f2:	d100      	bne.n	80154f6 <memmove+0x2a>
 80154f4:	bd10      	pop	{r4, pc}
 80154f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80154fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80154fe:	e7f7      	b.n	80154f0 <memmove+0x24>

08015500 <memset>:
 8015500:	4402      	add	r2, r0
 8015502:	4603      	mov	r3, r0
 8015504:	4293      	cmp	r3, r2
 8015506:	d100      	bne.n	801550a <memset+0xa>
 8015508:	4770      	bx	lr
 801550a:	f803 1b01 	strb.w	r1, [r3], #1
 801550e:	e7f9      	b.n	8015504 <memset+0x4>

08015510 <_free_r>:
 8015510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015512:	2900      	cmp	r1, #0
 8015514:	d048      	beq.n	80155a8 <_free_r+0x98>
 8015516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801551a:	9001      	str	r0, [sp, #4]
 801551c:	2b00      	cmp	r3, #0
 801551e:	f1a1 0404 	sub.w	r4, r1, #4
 8015522:	bfb8      	it	lt
 8015524:	18e4      	addlt	r4, r4, r3
 8015526:	f003 f835 	bl	8018594 <__malloc_lock>
 801552a:	4a20      	ldr	r2, [pc, #128]	; (80155ac <_free_r+0x9c>)
 801552c:	9801      	ldr	r0, [sp, #4]
 801552e:	6813      	ldr	r3, [r2, #0]
 8015530:	4615      	mov	r5, r2
 8015532:	b933      	cbnz	r3, 8015542 <_free_r+0x32>
 8015534:	6063      	str	r3, [r4, #4]
 8015536:	6014      	str	r4, [r2, #0]
 8015538:	b003      	add	sp, #12
 801553a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801553e:	f003 b82f 	b.w	80185a0 <__malloc_unlock>
 8015542:	42a3      	cmp	r3, r4
 8015544:	d90b      	bls.n	801555e <_free_r+0x4e>
 8015546:	6821      	ldr	r1, [r4, #0]
 8015548:	1862      	adds	r2, r4, r1
 801554a:	4293      	cmp	r3, r2
 801554c:	bf04      	itt	eq
 801554e:	681a      	ldreq	r2, [r3, #0]
 8015550:	685b      	ldreq	r3, [r3, #4]
 8015552:	6063      	str	r3, [r4, #4]
 8015554:	bf04      	itt	eq
 8015556:	1852      	addeq	r2, r2, r1
 8015558:	6022      	streq	r2, [r4, #0]
 801555a:	602c      	str	r4, [r5, #0]
 801555c:	e7ec      	b.n	8015538 <_free_r+0x28>
 801555e:	461a      	mov	r2, r3
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	b10b      	cbz	r3, 8015568 <_free_r+0x58>
 8015564:	42a3      	cmp	r3, r4
 8015566:	d9fa      	bls.n	801555e <_free_r+0x4e>
 8015568:	6811      	ldr	r1, [r2, #0]
 801556a:	1855      	adds	r5, r2, r1
 801556c:	42a5      	cmp	r5, r4
 801556e:	d10b      	bne.n	8015588 <_free_r+0x78>
 8015570:	6824      	ldr	r4, [r4, #0]
 8015572:	4421      	add	r1, r4
 8015574:	1854      	adds	r4, r2, r1
 8015576:	42a3      	cmp	r3, r4
 8015578:	6011      	str	r1, [r2, #0]
 801557a:	d1dd      	bne.n	8015538 <_free_r+0x28>
 801557c:	681c      	ldr	r4, [r3, #0]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	6053      	str	r3, [r2, #4]
 8015582:	4421      	add	r1, r4
 8015584:	6011      	str	r1, [r2, #0]
 8015586:	e7d7      	b.n	8015538 <_free_r+0x28>
 8015588:	d902      	bls.n	8015590 <_free_r+0x80>
 801558a:	230c      	movs	r3, #12
 801558c:	6003      	str	r3, [r0, #0]
 801558e:	e7d3      	b.n	8015538 <_free_r+0x28>
 8015590:	6825      	ldr	r5, [r4, #0]
 8015592:	1961      	adds	r1, r4, r5
 8015594:	428b      	cmp	r3, r1
 8015596:	bf04      	itt	eq
 8015598:	6819      	ldreq	r1, [r3, #0]
 801559a:	685b      	ldreq	r3, [r3, #4]
 801559c:	6063      	str	r3, [r4, #4]
 801559e:	bf04      	itt	eq
 80155a0:	1949      	addeq	r1, r1, r5
 80155a2:	6021      	streq	r1, [r4, #0]
 80155a4:	6054      	str	r4, [r2, #4]
 80155a6:	e7c7      	b.n	8015538 <_free_r+0x28>
 80155a8:	b003      	add	sp, #12
 80155aa:	bd30      	pop	{r4, r5, pc}
 80155ac:	200085c0 	.word	0x200085c0

080155b0 <_malloc_r>:
 80155b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155b2:	1ccd      	adds	r5, r1, #3
 80155b4:	f025 0503 	bic.w	r5, r5, #3
 80155b8:	3508      	adds	r5, #8
 80155ba:	2d0c      	cmp	r5, #12
 80155bc:	bf38      	it	cc
 80155be:	250c      	movcc	r5, #12
 80155c0:	2d00      	cmp	r5, #0
 80155c2:	4606      	mov	r6, r0
 80155c4:	db01      	blt.n	80155ca <_malloc_r+0x1a>
 80155c6:	42a9      	cmp	r1, r5
 80155c8:	d903      	bls.n	80155d2 <_malloc_r+0x22>
 80155ca:	230c      	movs	r3, #12
 80155cc:	6033      	str	r3, [r6, #0]
 80155ce:	2000      	movs	r0, #0
 80155d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155d2:	f002 ffdf 	bl	8018594 <__malloc_lock>
 80155d6:	4921      	ldr	r1, [pc, #132]	; (801565c <_malloc_r+0xac>)
 80155d8:	680a      	ldr	r2, [r1, #0]
 80155da:	4614      	mov	r4, r2
 80155dc:	b99c      	cbnz	r4, 8015606 <_malloc_r+0x56>
 80155de:	4f20      	ldr	r7, [pc, #128]	; (8015660 <_malloc_r+0xb0>)
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	b923      	cbnz	r3, 80155ee <_malloc_r+0x3e>
 80155e4:	4621      	mov	r1, r4
 80155e6:	4630      	mov	r0, r6
 80155e8:	f000 feb6 	bl	8016358 <_sbrk_r>
 80155ec:	6038      	str	r0, [r7, #0]
 80155ee:	4629      	mov	r1, r5
 80155f0:	4630      	mov	r0, r6
 80155f2:	f000 feb1 	bl	8016358 <_sbrk_r>
 80155f6:	1c43      	adds	r3, r0, #1
 80155f8:	d123      	bne.n	8015642 <_malloc_r+0x92>
 80155fa:	230c      	movs	r3, #12
 80155fc:	6033      	str	r3, [r6, #0]
 80155fe:	4630      	mov	r0, r6
 8015600:	f002 ffce 	bl	80185a0 <__malloc_unlock>
 8015604:	e7e3      	b.n	80155ce <_malloc_r+0x1e>
 8015606:	6823      	ldr	r3, [r4, #0]
 8015608:	1b5b      	subs	r3, r3, r5
 801560a:	d417      	bmi.n	801563c <_malloc_r+0x8c>
 801560c:	2b0b      	cmp	r3, #11
 801560e:	d903      	bls.n	8015618 <_malloc_r+0x68>
 8015610:	6023      	str	r3, [r4, #0]
 8015612:	441c      	add	r4, r3
 8015614:	6025      	str	r5, [r4, #0]
 8015616:	e004      	b.n	8015622 <_malloc_r+0x72>
 8015618:	6863      	ldr	r3, [r4, #4]
 801561a:	42a2      	cmp	r2, r4
 801561c:	bf0c      	ite	eq
 801561e:	600b      	streq	r3, [r1, #0]
 8015620:	6053      	strne	r3, [r2, #4]
 8015622:	4630      	mov	r0, r6
 8015624:	f002 ffbc 	bl	80185a0 <__malloc_unlock>
 8015628:	f104 000b 	add.w	r0, r4, #11
 801562c:	1d23      	adds	r3, r4, #4
 801562e:	f020 0007 	bic.w	r0, r0, #7
 8015632:	1ac2      	subs	r2, r0, r3
 8015634:	d0cc      	beq.n	80155d0 <_malloc_r+0x20>
 8015636:	1a1b      	subs	r3, r3, r0
 8015638:	50a3      	str	r3, [r4, r2]
 801563a:	e7c9      	b.n	80155d0 <_malloc_r+0x20>
 801563c:	4622      	mov	r2, r4
 801563e:	6864      	ldr	r4, [r4, #4]
 8015640:	e7cc      	b.n	80155dc <_malloc_r+0x2c>
 8015642:	1cc4      	adds	r4, r0, #3
 8015644:	f024 0403 	bic.w	r4, r4, #3
 8015648:	42a0      	cmp	r0, r4
 801564a:	d0e3      	beq.n	8015614 <_malloc_r+0x64>
 801564c:	1a21      	subs	r1, r4, r0
 801564e:	4630      	mov	r0, r6
 8015650:	f000 fe82 	bl	8016358 <_sbrk_r>
 8015654:	3001      	adds	r0, #1
 8015656:	d1dd      	bne.n	8015614 <_malloc_r+0x64>
 8015658:	e7cf      	b.n	80155fa <_malloc_r+0x4a>
 801565a:	bf00      	nop
 801565c:	200085c0 	.word	0x200085c0
 8015660:	200085c4 	.word	0x200085c4

08015664 <__cvt>:
 8015664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015668:	ec55 4b10 	vmov	r4, r5, d0
 801566c:	2d00      	cmp	r5, #0
 801566e:	460e      	mov	r6, r1
 8015670:	4619      	mov	r1, r3
 8015672:	462b      	mov	r3, r5
 8015674:	bfbb      	ittet	lt
 8015676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801567a:	461d      	movlt	r5, r3
 801567c:	2300      	movge	r3, #0
 801567e:	232d      	movlt	r3, #45	; 0x2d
 8015680:	700b      	strb	r3, [r1, #0]
 8015682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015688:	4691      	mov	r9, r2
 801568a:	f023 0820 	bic.w	r8, r3, #32
 801568e:	bfbc      	itt	lt
 8015690:	4622      	movlt	r2, r4
 8015692:	4614      	movlt	r4, r2
 8015694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015698:	d005      	beq.n	80156a6 <__cvt+0x42>
 801569a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801569e:	d100      	bne.n	80156a2 <__cvt+0x3e>
 80156a0:	3601      	adds	r6, #1
 80156a2:	2102      	movs	r1, #2
 80156a4:	e000      	b.n	80156a8 <__cvt+0x44>
 80156a6:	2103      	movs	r1, #3
 80156a8:	ab03      	add	r3, sp, #12
 80156aa:	9301      	str	r3, [sp, #4]
 80156ac:	ab02      	add	r3, sp, #8
 80156ae:	9300      	str	r3, [sp, #0]
 80156b0:	ec45 4b10 	vmov	d0, r4, r5
 80156b4:	4653      	mov	r3, sl
 80156b6:	4632      	mov	r2, r6
 80156b8:	f001 fdfa 	bl	80172b0 <_dtoa_r>
 80156bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80156c0:	4607      	mov	r7, r0
 80156c2:	d102      	bne.n	80156ca <__cvt+0x66>
 80156c4:	f019 0f01 	tst.w	r9, #1
 80156c8:	d022      	beq.n	8015710 <__cvt+0xac>
 80156ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80156ce:	eb07 0906 	add.w	r9, r7, r6
 80156d2:	d110      	bne.n	80156f6 <__cvt+0x92>
 80156d4:	783b      	ldrb	r3, [r7, #0]
 80156d6:	2b30      	cmp	r3, #48	; 0x30
 80156d8:	d10a      	bne.n	80156f0 <__cvt+0x8c>
 80156da:	2200      	movs	r2, #0
 80156dc:	2300      	movs	r3, #0
 80156de:	4620      	mov	r0, r4
 80156e0:	4629      	mov	r1, r5
 80156e2:	f7eb f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80156e6:	b918      	cbnz	r0, 80156f0 <__cvt+0x8c>
 80156e8:	f1c6 0601 	rsb	r6, r6, #1
 80156ec:	f8ca 6000 	str.w	r6, [sl]
 80156f0:	f8da 3000 	ldr.w	r3, [sl]
 80156f4:	4499      	add	r9, r3
 80156f6:	2200      	movs	r2, #0
 80156f8:	2300      	movs	r3, #0
 80156fa:	4620      	mov	r0, r4
 80156fc:	4629      	mov	r1, r5
 80156fe:	f7eb f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015702:	b108      	cbz	r0, 8015708 <__cvt+0xa4>
 8015704:	f8cd 900c 	str.w	r9, [sp, #12]
 8015708:	2230      	movs	r2, #48	; 0x30
 801570a:	9b03      	ldr	r3, [sp, #12]
 801570c:	454b      	cmp	r3, r9
 801570e:	d307      	bcc.n	8015720 <__cvt+0xbc>
 8015710:	9b03      	ldr	r3, [sp, #12]
 8015712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015714:	1bdb      	subs	r3, r3, r7
 8015716:	4638      	mov	r0, r7
 8015718:	6013      	str	r3, [r2, #0]
 801571a:	b004      	add	sp, #16
 801571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015720:	1c59      	adds	r1, r3, #1
 8015722:	9103      	str	r1, [sp, #12]
 8015724:	701a      	strb	r2, [r3, #0]
 8015726:	e7f0      	b.n	801570a <__cvt+0xa6>

08015728 <__exponent>:
 8015728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801572a:	4603      	mov	r3, r0
 801572c:	2900      	cmp	r1, #0
 801572e:	bfb8      	it	lt
 8015730:	4249      	neglt	r1, r1
 8015732:	f803 2b02 	strb.w	r2, [r3], #2
 8015736:	bfb4      	ite	lt
 8015738:	222d      	movlt	r2, #45	; 0x2d
 801573a:	222b      	movge	r2, #43	; 0x2b
 801573c:	2909      	cmp	r1, #9
 801573e:	7042      	strb	r2, [r0, #1]
 8015740:	dd2a      	ble.n	8015798 <__exponent+0x70>
 8015742:	f10d 0407 	add.w	r4, sp, #7
 8015746:	46a4      	mov	ip, r4
 8015748:	270a      	movs	r7, #10
 801574a:	46a6      	mov	lr, r4
 801574c:	460a      	mov	r2, r1
 801574e:	fb91 f6f7 	sdiv	r6, r1, r7
 8015752:	fb07 1516 	mls	r5, r7, r6, r1
 8015756:	3530      	adds	r5, #48	; 0x30
 8015758:	2a63      	cmp	r2, #99	; 0x63
 801575a:	f104 34ff 	add.w	r4, r4, #4294967295
 801575e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015762:	4631      	mov	r1, r6
 8015764:	dcf1      	bgt.n	801574a <__exponent+0x22>
 8015766:	3130      	adds	r1, #48	; 0x30
 8015768:	f1ae 0502 	sub.w	r5, lr, #2
 801576c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015770:	1c44      	adds	r4, r0, #1
 8015772:	4629      	mov	r1, r5
 8015774:	4561      	cmp	r1, ip
 8015776:	d30a      	bcc.n	801578e <__exponent+0x66>
 8015778:	f10d 0209 	add.w	r2, sp, #9
 801577c:	eba2 020e 	sub.w	r2, r2, lr
 8015780:	4565      	cmp	r5, ip
 8015782:	bf88      	it	hi
 8015784:	2200      	movhi	r2, #0
 8015786:	4413      	add	r3, r2
 8015788:	1a18      	subs	r0, r3, r0
 801578a:	b003      	add	sp, #12
 801578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801578e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015792:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015796:	e7ed      	b.n	8015774 <__exponent+0x4c>
 8015798:	2330      	movs	r3, #48	; 0x30
 801579a:	3130      	adds	r1, #48	; 0x30
 801579c:	7083      	strb	r3, [r0, #2]
 801579e:	70c1      	strb	r1, [r0, #3]
 80157a0:	1d03      	adds	r3, r0, #4
 80157a2:	e7f1      	b.n	8015788 <__exponent+0x60>

080157a4 <_printf_float>:
 80157a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a8:	ed2d 8b02 	vpush	{d8}
 80157ac:	b08d      	sub	sp, #52	; 0x34
 80157ae:	460c      	mov	r4, r1
 80157b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80157b4:	4616      	mov	r6, r2
 80157b6:	461f      	mov	r7, r3
 80157b8:	4605      	mov	r5, r0
 80157ba:	f002 fed5 	bl	8018568 <_localeconv_r>
 80157be:	f8d0 a000 	ldr.w	sl, [r0]
 80157c2:	4650      	mov	r0, sl
 80157c4:	f7ea fd04 	bl	80001d0 <strlen>
 80157c8:	2300      	movs	r3, #0
 80157ca:	930a      	str	r3, [sp, #40]	; 0x28
 80157cc:	6823      	ldr	r3, [r4, #0]
 80157ce:	9305      	str	r3, [sp, #20]
 80157d0:	f8d8 3000 	ldr.w	r3, [r8]
 80157d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80157d8:	3307      	adds	r3, #7
 80157da:	f023 0307 	bic.w	r3, r3, #7
 80157de:	f103 0208 	add.w	r2, r3, #8
 80157e2:	f8c8 2000 	str.w	r2, [r8]
 80157e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80157ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80157f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80157f6:	9307      	str	r3, [sp, #28]
 80157f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80157fc:	ee08 0a10 	vmov	s16, r0
 8015800:	4b9f      	ldr	r3, [pc, #636]	; (8015a80 <_printf_float+0x2dc>)
 8015802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015806:	f04f 32ff 	mov.w	r2, #4294967295
 801580a:	f7eb f98f 	bl	8000b2c <__aeabi_dcmpun>
 801580e:	bb88      	cbnz	r0, 8015874 <_printf_float+0xd0>
 8015810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015814:	4b9a      	ldr	r3, [pc, #616]	; (8015a80 <_printf_float+0x2dc>)
 8015816:	f04f 32ff 	mov.w	r2, #4294967295
 801581a:	f7eb f969 	bl	8000af0 <__aeabi_dcmple>
 801581e:	bb48      	cbnz	r0, 8015874 <_printf_float+0xd0>
 8015820:	2200      	movs	r2, #0
 8015822:	2300      	movs	r3, #0
 8015824:	4640      	mov	r0, r8
 8015826:	4649      	mov	r1, r9
 8015828:	f7eb f958 	bl	8000adc <__aeabi_dcmplt>
 801582c:	b110      	cbz	r0, 8015834 <_printf_float+0x90>
 801582e:	232d      	movs	r3, #45	; 0x2d
 8015830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015834:	4b93      	ldr	r3, [pc, #588]	; (8015a84 <_printf_float+0x2e0>)
 8015836:	4894      	ldr	r0, [pc, #592]	; (8015a88 <_printf_float+0x2e4>)
 8015838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801583c:	bf94      	ite	ls
 801583e:	4698      	movls	r8, r3
 8015840:	4680      	movhi	r8, r0
 8015842:	2303      	movs	r3, #3
 8015844:	6123      	str	r3, [r4, #16]
 8015846:	9b05      	ldr	r3, [sp, #20]
 8015848:	f023 0204 	bic.w	r2, r3, #4
 801584c:	6022      	str	r2, [r4, #0]
 801584e:	f04f 0900 	mov.w	r9, #0
 8015852:	9700      	str	r7, [sp, #0]
 8015854:	4633      	mov	r3, r6
 8015856:	aa0b      	add	r2, sp, #44	; 0x2c
 8015858:	4621      	mov	r1, r4
 801585a:	4628      	mov	r0, r5
 801585c:	f000 f9d8 	bl	8015c10 <_printf_common>
 8015860:	3001      	adds	r0, #1
 8015862:	f040 8090 	bne.w	8015986 <_printf_float+0x1e2>
 8015866:	f04f 30ff 	mov.w	r0, #4294967295
 801586a:	b00d      	add	sp, #52	; 0x34
 801586c:	ecbd 8b02 	vpop	{d8}
 8015870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015874:	4642      	mov	r2, r8
 8015876:	464b      	mov	r3, r9
 8015878:	4640      	mov	r0, r8
 801587a:	4649      	mov	r1, r9
 801587c:	f7eb f956 	bl	8000b2c <__aeabi_dcmpun>
 8015880:	b140      	cbz	r0, 8015894 <_printf_float+0xf0>
 8015882:	464b      	mov	r3, r9
 8015884:	2b00      	cmp	r3, #0
 8015886:	bfbc      	itt	lt
 8015888:	232d      	movlt	r3, #45	; 0x2d
 801588a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801588e:	487f      	ldr	r0, [pc, #508]	; (8015a8c <_printf_float+0x2e8>)
 8015890:	4b7f      	ldr	r3, [pc, #508]	; (8015a90 <_printf_float+0x2ec>)
 8015892:	e7d1      	b.n	8015838 <_printf_float+0x94>
 8015894:	6863      	ldr	r3, [r4, #4]
 8015896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801589a:	9206      	str	r2, [sp, #24]
 801589c:	1c5a      	adds	r2, r3, #1
 801589e:	d13f      	bne.n	8015920 <_printf_float+0x17c>
 80158a0:	2306      	movs	r3, #6
 80158a2:	6063      	str	r3, [r4, #4]
 80158a4:	9b05      	ldr	r3, [sp, #20]
 80158a6:	6861      	ldr	r1, [r4, #4]
 80158a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80158ac:	2300      	movs	r3, #0
 80158ae:	9303      	str	r3, [sp, #12]
 80158b0:	ab0a      	add	r3, sp, #40	; 0x28
 80158b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80158b6:	ab09      	add	r3, sp, #36	; 0x24
 80158b8:	ec49 8b10 	vmov	d0, r8, r9
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	6022      	str	r2, [r4, #0]
 80158c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80158c4:	4628      	mov	r0, r5
 80158c6:	f7ff fecd 	bl	8015664 <__cvt>
 80158ca:	9b06      	ldr	r3, [sp, #24]
 80158cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158ce:	2b47      	cmp	r3, #71	; 0x47
 80158d0:	4680      	mov	r8, r0
 80158d2:	d108      	bne.n	80158e6 <_printf_float+0x142>
 80158d4:	1cc8      	adds	r0, r1, #3
 80158d6:	db02      	blt.n	80158de <_printf_float+0x13a>
 80158d8:	6863      	ldr	r3, [r4, #4]
 80158da:	4299      	cmp	r1, r3
 80158dc:	dd41      	ble.n	8015962 <_printf_float+0x1be>
 80158de:	f1ab 0b02 	sub.w	fp, fp, #2
 80158e2:	fa5f fb8b 	uxtb.w	fp, fp
 80158e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80158ea:	d820      	bhi.n	801592e <_printf_float+0x18a>
 80158ec:	3901      	subs	r1, #1
 80158ee:	465a      	mov	r2, fp
 80158f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80158f4:	9109      	str	r1, [sp, #36]	; 0x24
 80158f6:	f7ff ff17 	bl	8015728 <__exponent>
 80158fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158fc:	1813      	adds	r3, r2, r0
 80158fe:	2a01      	cmp	r2, #1
 8015900:	4681      	mov	r9, r0
 8015902:	6123      	str	r3, [r4, #16]
 8015904:	dc02      	bgt.n	801590c <_printf_float+0x168>
 8015906:	6822      	ldr	r2, [r4, #0]
 8015908:	07d2      	lsls	r2, r2, #31
 801590a:	d501      	bpl.n	8015910 <_printf_float+0x16c>
 801590c:	3301      	adds	r3, #1
 801590e:	6123      	str	r3, [r4, #16]
 8015910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015914:	2b00      	cmp	r3, #0
 8015916:	d09c      	beq.n	8015852 <_printf_float+0xae>
 8015918:	232d      	movs	r3, #45	; 0x2d
 801591a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801591e:	e798      	b.n	8015852 <_printf_float+0xae>
 8015920:	9a06      	ldr	r2, [sp, #24]
 8015922:	2a47      	cmp	r2, #71	; 0x47
 8015924:	d1be      	bne.n	80158a4 <_printf_float+0x100>
 8015926:	2b00      	cmp	r3, #0
 8015928:	d1bc      	bne.n	80158a4 <_printf_float+0x100>
 801592a:	2301      	movs	r3, #1
 801592c:	e7b9      	b.n	80158a2 <_printf_float+0xfe>
 801592e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015932:	d118      	bne.n	8015966 <_printf_float+0x1c2>
 8015934:	2900      	cmp	r1, #0
 8015936:	6863      	ldr	r3, [r4, #4]
 8015938:	dd0b      	ble.n	8015952 <_printf_float+0x1ae>
 801593a:	6121      	str	r1, [r4, #16]
 801593c:	b913      	cbnz	r3, 8015944 <_printf_float+0x1a0>
 801593e:	6822      	ldr	r2, [r4, #0]
 8015940:	07d0      	lsls	r0, r2, #31
 8015942:	d502      	bpl.n	801594a <_printf_float+0x1a6>
 8015944:	3301      	adds	r3, #1
 8015946:	440b      	add	r3, r1
 8015948:	6123      	str	r3, [r4, #16]
 801594a:	65a1      	str	r1, [r4, #88]	; 0x58
 801594c:	f04f 0900 	mov.w	r9, #0
 8015950:	e7de      	b.n	8015910 <_printf_float+0x16c>
 8015952:	b913      	cbnz	r3, 801595a <_printf_float+0x1b6>
 8015954:	6822      	ldr	r2, [r4, #0]
 8015956:	07d2      	lsls	r2, r2, #31
 8015958:	d501      	bpl.n	801595e <_printf_float+0x1ba>
 801595a:	3302      	adds	r3, #2
 801595c:	e7f4      	b.n	8015948 <_printf_float+0x1a4>
 801595e:	2301      	movs	r3, #1
 8015960:	e7f2      	b.n	8015948 <_printf_float+0x1a4>
 8015962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015968:	4299      	cmp	r1, r3
 801596a:	db05      	blt.n	8015978 <_printf_float+0x1d4>
 801596c:	6823      	ldr	r3, [r4, #0]
 801596e:	6121      	str	r1, [r4, #16]
 8015970:	07d8      	lsls	r0, r3, #31
 8015972:	d5ea      	bpl.n	801594a <_printf_float+0x1a6>
 8015974:	1c4b      	adds	r3, r1, #1
 8015976:	e7e7      	b.n	8015948 <_printf_float+0x1a4>
 8015978:	2900      	cmp	r1, #0
 801597a:	bfd4      	ite	le
 801597c:	f1c1 0202 	rsble	r2, r1, #2
 8015980:	2201      	movgt	r2, #1
 8015982:	4413      	add	r3, r2
 8015984:	e7e0      	b.n	8015948 <_printf_float+0x1a4>
 8015986:	6823      	ldr	r3, [r4, #0]
 8015988:	055a      	lsls	r2, r3, #21
 801598a:	d407      	bmi.n	801599c <_printf_float+0x1f8>
 801598c:	6923      	ldr	r3, [r4, #16]
 801598e:	4642      	mov	r2, r8
 8015990:	4631      	mov	r1, r6
 8015992:	4628      	mov	r0, r5
 8015994:	47b8      	blx	r7
 8015996:	3001      	adds	r0, #1
 8015998:	d12c      	bne.n	80159f4 <_printf_float+0x250>
 801599a:	e764      	b.n	8015866 <_printf_float+0xc2>
 801599c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80159a0:	f240 80e0 	bls.w	8015b64 <_printf_float+0x3c0>
 80159a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80159a8:	2200      	movs	r2, #0
 80159aa:	2300      	movs	r3, #0
 80159ac:	f7eb f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80159b0:	2800      	cmp	r0, #0
 80159b2:	d034      	beq.n	8015a1e <_printf_float+0x27a>
 80159b4:	4a37      	ldr	r2, [pc, #220]	; (8015a94 <_printf_float+0x2f0>)
 80159b6:	2301      	movs	r3, #1
 80159b8:	4631      	mov	r1, r6
 80159ba:	4628      	mov	r0, r5
 80159bc:	47b8      	blx	r7
 80159be:	3001      	adds	r0, #1
 80159c0:	f43f af51 	beq.w	8015866 <_printf_float+0xc2>
 80159c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159c8:	429a      	cmp	r2, r3
 80159ca:	db02      	blt.n	80159d2 <_printf_float+0x22e>
 80159cc:	6823      	ldr	r3, [r4, #0]
 80159ce:	07d8      	lsls	r0, r3, #31
 80159d0:	d510      	bpl.n	80159f4 <_printf_float+0x250>
 80159d2:	ee18 3a10 	vmov	r3, s16
 80159d6:	4652      	mov	r2, sl
 80159d8:	4631      	mov	r1, r6
 80159da:	4628      	mov	r0, r5
 80159dc:	47b8      	blx	r7
 80159de:	3001      	adds	r0, #1
 80159e0:	f43f af41 	beq.w	8015866 <_printf_float+0xc2>
 80159e4:	f04f 0800 	mov.w	r8, #0
 80159e8:	f104 091a 	add.w	r9, r4, #26
 80159ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159ee:	3b01      	subs	r3, #1
 80159f0:	4543      	cmp	r3, r8
 80159f2:	dc09      	bgt.n	8015a08 <_printf_float+0x264>
 80159f4:	6823      	ldr	r3, [r4, #0]
 80159f6:	079b      	lsls	r3, r3, #30
 80159f8:	f100 8105 	bmi.w	8015c06 <_printf_float+0x462>
 80159fc:	68e0      	ldr	r0, [r4, #12]
 80159fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a00:	4298      	cmp	r0, r3
 8015a02:	bfb8      	it	lt
 8015a04:	4618      	movlt	r0, r3
 8015a06:	e730      	b.n	801586a <_printf_float+0xc6>
 8015a08:	2301      	movs	r3, #1
 8015a0a:	464a      	mov	r2, r9
 8015a0c:	4631      	mov	r1, r6
 8015a0e:	4628      	mov	r0, r5
 8015a10:	47b8      	blx	r7
 8015a12:	3001      	adds	r0, #1
 8015a14:	f43f af27 	beq.w	8015866 <_printf_float+0xc2>
 8015a18:	f108 0801 	add.w	r8, r8, #1
 8015a1c:	e7e6      	b.n	80159ec <_printf_float+0x248>
 8015a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	dc39      	bgt.n	8015a98 <_printf_float+0x2f4>
 8015a24:	4a1b      	ldr	r2, [pc, #108]	; (8015a94 <_printf_float+0x2f0>)
 8015a26:	2301      	movs	r3, #1
 8015a28:	4631      	mov	r1, r6
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	47b8      	blx	r7
 8015a2e:	3001      	adds	r0, #1
 8015a30:	f43f af19 	beq.w	8015866 <_printf_float+0xc2>
 8015a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a38:	4313      	orrs	r3, r2
 8015a3a:	d102      	bne.n	8015a42 <_printf_float+0x29e>
 8015a3c:	6823      	ldr	r3, [r4, #0]
 8015a3e:	07d9      	lsls	r1, r3, #31
 8015a40:	d5d8      	bpl.n	80159f4 <_printf_float+0x250>
 8015a42:	ee18 3a10 	vmov	r3, s16
 8015a46:	4652      	mov	r2, sl
 8015a48:	4631      	mov	r1, r6
 8015a4a:	4628      	mov	r0, r5
 8015a4c:	47b8      	blx	r7
 8015a4e:	3001      	adds	r0, #1
 8015a50:	f43f af09 	beq.w	8015866 <_printf_float+0xc2>
 8015a54:	f04f 0900 	mov.w	r9, #0
 8015a58:	f104 0a1a 	add.w	sl, r4, #26
 8015a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a5e:	425b      	negs	r3, r3
 8015a60:	454b      	cmp	r3, r9
 8015a62:	dc01      	bgt.n	8015a68 <_printf_float+0x2c4>
 8015a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a66:	e792      	b.n	801598e <_printf_float+0x1ea>
 8015a68:	2301      	movs	r3, #1
 8015a6a:	4652      	mov	r2, sl
 8015a6c:	4631      	mov	r1, r6
 8015a6e:	4628      	mov	r0, r5
 8015a70:	47b8      	blx	r7
 8015a72:	3001      	adds	r0, #1
 8015a74:	f43f aef7 	beq.w	8015866 <_printf_float+0xc2>
 8015a78:	f109 0901 	add.w	r9, r9, #1
 8015a7c:	e7ee      	b.n	8015a5c <_printf_float+0x2b8>
 8015a7e:	bf00      	nop
 8015a80:	7fefffff 	.word	0x7fefffff
 8015a84:	0801be24 	.word	0x0801be24
 8015a88:	0801be28 	.word	0x0801be28
 8015a8c:	0801be30 	.word	0x0801be30
 8015a90:	0801be2c 	.word	0x0801be2c
 8015a94:	0801be34 	.word	0x0801be34
 8015a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a9c:	429a      	cmp	r2, r3
 8015a9e:	bfa8      	it	ge
 8015aa0:	461a      	movge	r2, r3
 8015aa2:	2a00      	cmp	r2, #0
 8015aa4:	4691      	mov	r9, r2
 8015aa6:	dc37      	bgt.n	8015b18 <_printf_float+0x374>
 8015aa8:	f04f 0b00 	mov.w	fp, #0
 8015aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ab0:	f104 021a 	add.w	r2, r4, #26
 8015ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015ab6:	9305      	str	r3, [sp, #20]
 8015ab8:	eba3 0309 	sub.w	r3, r3, r9
 8015abc:	455b      	cmp	r3, fp
 8015abe:	dc33      	bgt.n	8015b28 <_printf_float+0x384>
 8015ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	db3b      	blt.n	8015b40 <_printf_float+0x39c>
 8015ac8:	6823      	ldr	r3, [r4, #0]
 8015aca:	07da      	lsls	r2, r3, #31
 8015acc:	d438      	bmi.n	8015b40 <_printf_float+0x39c>
 8015ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ad0:	9b05      	ldr	r3, [sp, #20]
 8015ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ad4:	1ad3      	subs	r3, r2, r3
 8015ad6:	eba2 0901 	sub.w	r9, r2, r1
 8015ada:	4599      	cmp	r9, r3
 8015adc:	bfa8      	it	ge
 8015ade:	4699      	movge	r9, r3
 8015ae0:	f1b9 0f00 	cmp.w	r9, #0
 8015ae4:	dc35      	bgt.n	8015b52 <_printf_float+0x3ae>
 8015ae6:	f04f 0800 	mov.w	r8, #0
 8015aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015aee:	f104 0a1a 	add.w	sl, r4, #26
 8015af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015af6:	1a9b      	subs	r3, r3, r2
 8015af8:	eba3 0309 	sub.w	r3, r3, r9
 8015afc:	4543      	cmp	r3, r8
 8015afe:	f77f af79 	ble.w	80159f4 <_printf_float+0x250>
 8015b02:	2301      	movs	r3, #1
 8015b04:	4652      	mov	r2, sl
 8015b06:	4631      	mov	r1, r6
 8015b08:	4628      	mov	r0, r5
 8015b0a:	47b8      	blx	r7
 8015b0c:	3001      	adds	r0, #1
 8015b0e:	f43f aeaa 	beq.w	8015866 <_printf_float+0xc2>
 8015b12:	f108 0801 	add.w	r8, r8, #1
 8015b16:	e7ec      	b.n	8015af2 <_printf_float+0x34e>
 8015b18:	4613      	mov	r3, r2
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	4642      	mov	r2, r8
 8015b1e:	4628      	mov	r0, r5
 8015b20:	47b8      	blx	r7
 8015b22:	3001      	adds	r0, #1
 8015b24:	d1c0      	bne.n	8015aa8 <_printf_float+0x304>
 8015b26:	e69e      	b.n	8015866 <_printf_float+0xc2>
 8015b28:	2301      	movs	r3, #1
 8015b2a:	4631      	mov	r1, r6
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	9205      	str	r2, [sp, #20]
 8015b30:	47b8      	blx	r7
 8015b32:	3001      	adds	r0, #1
 8015b34:	f43f ae97 	beq.w	8015866 <_printf_float+0xc2>
 8015b38:	9a05      	ldr	r2, [sp, #20]
 8015b3a:	f10b 0b01 	add.w	fp, fp, #1
 8015b3e:	e7b9      	b.n	8015ab4 <_printf_float+0x310>
 8015b40:	ee18 3a10 	vmov	r3, s16
 8015b44:	4652      	mov	r2, sl
 8015b46:	4631      	mov	r1, r6
 8015b48:	4628      	mov	r0, r5
 8015b4a:	47b8      	blx	r7
 8015b4c:	3001      	adds	r0, #1
 8015b4e:	d1be      	bne.n	8015ace <_printf_float+0x32a>
 8015b50:	e689      	b.n	8015866 <_printf_float+0xc2>
 8015b52:	9a05      	ldr	r2, [sp, #20]
 8015b54:	464b      	mov	r3, r9
 8015b56:	4442      	add	r2, r8
 8015b58:	4631      	mov	r1, r6
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	47b8      	blx	r7
 8015b5e:	3001      	adds	r0, #1
 8015b60:	d1c1      	bne.n	8015ae6 <_printf_float+0x342>
 8015b62:	e680      	b.n	8015866 <_printf_float+0xc2>
 8015b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b66:	2a01      	cmp	r2, #1
 8015b68:	dc01      	bgt.n	8015b6e <_printf_float+0x3ca>
 8015b6a:	07db      	lsls	r3, r3, #31
 8015b6c:	d538      	bpl.n	8015be0 <_printf_float+0x43c>
 8015b6e:	2301      	movs	r3, #1
 8015b70:	4642      	mov	r2, r8
 8015b72:	4631      	mov	r1, r6
 8015b74:	4628      	mov	r0, r5
 8015b76:	47b8      	blx	r7
 8015b78:	3001      	adds	r0, #1
 8015b7a:	f43f ae74 	beq.w	8015866 <_printf_float+0xc2>
 8015b7e:	ee18 3a10 	vmov	r3, s16
 8015b82:	4652      	mov	r2, sl
 8015b84:	4631      	mov	r1, r6
 8015b86:	4628      	mov	r0, r5
 8015b88:	47b8      	blx	r7
 8015b8a:	3001      	adds	r0, #1
 8015b8c:	f43f ae6b 	beq.w	8015866 <_printf_float+0xc2>
 8015b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b94:	2200      	movs	r2, #0
 8015b96:	2300      	movs	r3, #0
 8015b98:	f7ea ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 8015b9c:	b9d8      	cbnz	r0, 8015bd6 <_printf_float+0x432>
 8015b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ba0:	f108 0201 	add.w	r2, r8, #1
 8015ba4:	3b01      	subs	r3, #1
 8015ba6:	4631      	mov	r1, r6
 8015ba8:	4628      	mov	r0, r5
 8015baa:	47b8      	blx	r7
 8015bac:	3001      	adds	r0, #1
 8015bae:	d10e      	bne.n	8015bce <_printf_float+0x42a>
 8015bb0:	e659      	b.n	8015866 <_printf_float+0xc2>
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	4652      	mov	r2, sl
 8015bb6:	4631      	mov	r1, r6
 8015bb8:	4628      	mov	r0, r5
 8015bba:	47b8      	blx	r7
 8015bbc:	3001      	adds	r0, #1
 8015bbe:	f43f ae52 	beq.w	8015866 <_printf_float+0xc2>
 8015bc2:	f108 0801 	add.w	r8, r8, #1
 8015bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bc8:	3b01      	subs	r3, #1
 8015bca:	4543      	cmp	r3, r8
 8015bcc:	dcf1      	bgt.n	8015bb2 <_printf_float+0x40e>
 8015bce:	464b      	mov	r3, r9
 8015bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015bd4:	e6dc      	b.n	8015990 <_printf_float+0x1ec>
 8015bd6:	f04f 0800 	mov.w	r8, #0
 8015bda:	f104 0a1a 	add.w	sl, r4, #26
 8015bde:	e7f2      	b.n	8015bc6 <_printf_float+0x422>
 8015be0:	2301      	movs	r3, #1
 8015be2:	4642      	mov	r2, r8
 8015be4:	e7df      	b.n	8015ba6 <_printf_float+0x402>
 8015be6:	2301      	movs	r3, #1
 8015be8:	464a      	mov	r2, r9
 8015bea:	4631      	mov	r1, r6
 8015bec:	4628      	mov	r0, r5
 8015bee:	47b8      	blx	r7
 8015bf0:	3001      	adds	r0, #1
 8015bf2:	f43f ae38 	beq.w	8015866 <_printf_float+0xc2>
 8015bf6:	f108 0801 	add.w	r8, r8, #1
 8015bfa:	68e3      	ldr	r3, [r4, #12]
 8015bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bfe:	1a5b      	subs	r3, r3, r1
 8015c00:	4543      	cmp	r3, r8
 8015c02:	dcf0      	bgt.n	8015be6 <_printf_float+0x442>
 8015c04:	e6fa      	b.n	80159fc <_printf_float+0x258>
 8015c06:	f04f 0800 	mov.w	r8, #0
 8015c0a:	f104 0919 	add.w	r9, r4, #25
 8015c0e:	e7f4      	b.n	8015bfa <_printf_float+0x456>

08015c10 <_printf_common>:
 8015c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c14:	4616      	mov	r6, r2
 8015c16:	4699      	mov	r9, r3
 8015c18:	688a      	ldr	r2, [r1, #8]
 8015c1a:	690b      	ldr	r3, [r1, #16]
 8015c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c20:	4293      	cmp	r3, r2
 8015c22:	bfb8      	it	lt
 8015c24:	4613      	movlt	r3, r2
 8015c26:	6033      	str	r3, [r6, #0]
 8015c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015c2c:	4607      	mov	r7, r0
 8015c2e:	460c      	mov	r4, r1
 8015c30:	b10a      	cbz	r2, 8015c36 <_printf_common+0x26>
 8015c32:	3301      	adds	r3, #1
 8015c34:	6033      	str	r3, [r6, #0]
 8015c36:	6823      	ldr	r3, [r4, #0]
 8015c38:	0699      	lsls	r1, r3, #26
 8015c3a:	bf42      	ittt	mi
 8015c3c:	6833      	ldrmi	r3, [r6, #0]
 8015c3e:	3302      	addmi	r3, #2
 8015c40:	6033      	strmi	r3, [r6, #0]
 8015c42:	6825      	ldr	r5, [r4, #0]
 8015c44:	f015 0506 	ands.w	r5, r5, #6
 8015c48:	d106      	bne.n	8015c58 <_printf_common+0x48>
 8015c4a:	f104 0a19 	add.w	sl, r4, #25
 8015c4e:	68e3      	ldr	r3, [r4, #12]
 8015c50:	6832      	ldr	r2, [r6, #0]
 8015c52:	1a9b      	subs	r3, r3, r2
 8015c54:	42ab      	cmp	r3, r5
 8015c56:	dc26      	bgt.n	8015ca6 <_printf_common+0x96>
 8015c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015c5c:	1e13      	subs	r3, r2, #0
 8015c5e:	6822      	ldr	r2, [r4, #0]
 8015c60:	bf18      	it	ne
 8015c62:	2301      	movne	r3, #1
 8015c64:	0692      	lsls	r2, r2, #26
 8015c66:	d42b      	bmi.n	8015cc0 <_printf_common+0xb0>
 8015c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c6c:	4649      	mov	r1, r9
 8015c6e:	4638      	mov	r0, r7
 8015c70:	47c0      	blx	r8
 8015c72:	3001      	adds	r0, #1
 8015c74:	d01e      	beq.n	8015cb4 <_printf_common+0xa4>
 8015c76:	6823      	ldr	r3, [r4, #0]
 8015c78:	68e5      	ldr	r5, [r4, #12]
 8015c7a:	6832      	ldr	r2, [r6, #0]
 8015c7c:	f003 0306 	and.w	r3, r3, #6
 8015c80:	2b04      	cmp	r3, #4
 8015c82:	bf08      	it	eq
 8015c84:	1aad      	subeq	r5, r5, r2
 8015c86:	68a3      	ldr	r3, [r4, #8]
 8015c88:	6922      	ldr	r2, [r4, #16]
 8015c8a:	bf0c      	ite	eq
 8015c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c90:	2500      	movne	r5, #0
 8015c92:	4293      	cmp	r3, r2
 8015c94:	bfc4      	itt	gt
 8015c96:	1a9b      	subgt	r3, r3, r2
 8015c98:	18ed      	addgt	r5, r5, r3
 8015c9a:	2600      	movs	r6, #0
 8015c9c:	341a      	adds	r4, #26
 8015c9e:	42b5      	cmp	r5, r6
 8015ca0:	d11a      	bne.n	8015cd8 <_printf_common+0xc8>
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	e008      	b.n	8015cb8 <_printf_common+0xa8>
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	4652      	mov	r2, sl
 8015caa:	4649      	mov	r1, r9
 8015cac:	4638      	mov	r0, r7
 8015cae:	47c0      	blx	r8
 8015cb0:	3001      	adds	r0, #1
 8015cb2:	d103      	bne.n	8015cbc <_printf_common+0xac>
 8015cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cbc:	3501      	adds	r5, #1
 8015cbe:	e7c6      	b.n	8015c4e <_printf_common+0x3e>
 8015cc0:	18e1      	adds	r1, r4, r3
 8015cc2:	1c5a      	adds	r2, r3, #1
 8015cc4:	2030      	movs	r0, #48	; 0x30
 8015cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015cca:	4422      	add	r2, r4
 8015ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015cd4:	3302      	adds	r3, #2
 8015cd6:	e7c7      	b.n	8015c68 <_printf_common+0x58>
 8015cd8:	2301      	movs	r3, #1
 8015cda:	4622      	mov	r2, r4
 8015cdc:	4649      	mov	r1, r9
 8015cde:	4638      	mov	r0, r7
 8015ce0:	47c0      	blx	r8
 8015ce2:	3001      	adds	r0, #1
 8015ce4:	d0e6      	beq.n	8015cb4 <_printf_common+0xa4>
 8015ce6:	3601      	adds	r6, #1
 8015ce8:	e7d9      	b.n	8015c9e <_printf_common+0x8e>
	...

08015cec <_printf_i>:
 8015cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015cf0:	460c      	mov	r4, r1
 8015cf2:	4691      	mov	r9, r2
 8015cf4:	7e27      	ldrb	r7, [r4, #24]
 8015cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015cf8:	2f78      	cmp	r7, #120	; 0x78
 8015cfa:	4680      	mov	r8, r0
 8015cfc:	469a      	mov	sl, r3
 8015cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d02:	d807      	bhi.n	8015d14 <_printf_i+0x28>
 8015d04:	2f62      	cmp	r7, #98	; 0x62
 8015d06:	d80a      	bhi.n	8015d1e <_printf_i+0x32>
 8015d08:	2f00      	cmp	r7, #0
 8015d0a:	f000 80d8 	beq.w	8015ebe <_printf_i+0x1d2>
 8015d0e:	2f58      	cmp	r7, #88	; 0x58
 8015d10:	f000 80a3 	beq.w	8015e5a <_printf_i+0x16e>
 8015d14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d1c:	e03a      	b.n	8015d94 <_printf_i+0xa8>
 8015d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d22:	2b15      	cmp	r3, #21
 8015d24:	d8f6      	bhi.n	8015d14 <_printf_i+0x28>
 8015d26:	a001      	add	r0, pc, #4	; (adr r0, 8015d2c <_printf_i+0x40>)
 8015d28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015d2c:	08015d85 	.word	0x08015d85
 8015d30:	08015d99 	.word	0x08015d99
 8015d34:	08015d15 	.word	0x08015d15
 8015d38:	08015d15 	.word	0x08015d15
 8015d3c:	08015d15 	.word	0x08015d15
 8015d40:	08015d15 	.word	0x08015d15
 8015d44:	08015d99 	.word	0x08015d99
 8015d48:	08015d15 	.word	0x08015d15
 8015d4c:	08015d15 	.word	0x08015d15
 8015d50:	08015d15 	.word	0x08015d15
 8015d54:	08015d15 	.word	0x08015d15
 8015d58:	08015ea5 	.word	0x08015ea5
 8015d5c:	08015dc9 	.word	0x08015dc9
 8015d60:	08015e87 	.word	0x08015e87
 8015d64:	08015d15 	.word	0x08015d15
 8015d68:	08015d15 	.word	0x08015d15
 8015d6c:	08015ec7 	.word	0x08015ec7
 8015d70:	08015d15 	.word	0x08015d15
 8015d74:	08015dc9 	.word	0x08015dc9
 8015d78:	08015d15 	.word	0x08015d15
 8015d7c:	08015d15 	.word	0x08015d15
 8015d80:	08015e8f 	.word	0x08015e8f
 8015d84:	680b      	ldr	r3, [r1, #0]
 8015d86:	1d1a      	adds	r2, r3, #4
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	600a      	str	r2, [r1, #0]
 8015d8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d94:	2301      	movs	r3, #1
 8015d96:	e0a3      	b.n	8015ee0 <_printf_i+0x1f4>
 8015d98:	6825      	ldr	r5, [r4, #0]
 8015d9a:	6808      	ldr	r0, [r1, #0]
 8015d9c:	062e      	lsls	r6, r5, #24
 8015d9e:	f100 0304 	add.w	r3, r0, #4
 8015da2:	d50a      	bpl.n	8015dba <_printf_i+0xce>
 8015da4:	6805      	ldr	r5, [r0, #0]
 8015da6:	600b      	str	r3, [r1, #0]
 8015da8:	2d00      	cmp	r5, #0
 8015daa:	da03      	bge.n	8015db4 <_printf_i+0xc8>
 8015dac:	232d      	movs	r3, #45	; 0x2d
 8015dae:	426d      	negs	r5, r5
 8015db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015db4:	485e      	ldr	r0, [pc, #376]	; (8015f30 <_printf_i+0x244>)
 8015db6:	230a      	movs	r3, #10
 8015db8:	e019      	b.n	8015dee <_printf_i+0x102>
 8015dba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015dbe:	6805      	ldr	r5, [r0, #0]
 8015dc0:	600b      	str	r3, [r1, #0]
 8015dc2:	bf18      	it	ne
 8015dc4:	b22d      	sxthne	r5, r5
 8015dc6:	e7ef      	b.n	8015da8 <_printf_i+0xbc>
 8015dc8:	680b      	ldr	r3, [r1, #0]
 8015dca:	6825      	ldr	r5, [r4, #0]
 8015dcc:	1d18      	adds	r0, r3, #4
 8015dce:	6008      	str	r0, [r1, #0]
 8015dd0:	0628      	lsls	r0, r5, #24
 8015dd2:	d501      	bpl.n	8015dd8 <_printf_i+0xec>
 8015dd4:	681d      	ldr	r5, [r3, #0]
 8015dd6:	e002      	b.n	8015dde <_printf_i+0xf2>
 8015dd8:	0669      	lsls	r1, r5, #25
 8015dda:	d5fb      	bpl.n	8015dd4 <_printf_i+0xe8>
 8015ddc:	881d      	ldrh	r5, [r3, #0]
 8015dde:	4854      	ldr	r0, [pc, #336]	; (8015f30 <_printf_i+0x244>)
 8015de0:	2f6f      	cmp	r7, #111	; 0x6f
 8015de2:	bf0c      	ite	eq
 8015de4:	2308      	moveq	r3, #8
 8015de6:	230a      	movne	r3, #10
 8015de8:	2100      	movs	r1, #0
 8015dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015dee:	6866      	ldr	r6, [r4, #4]
 8015df0:	60a6      	str	r6, [r4, #8]
 8015df2:	2e00      	cmp	r6, #0
 8015df4:	bfa2      	ittt	ge
 8015df6:	6821      	ldrge	r1, [r4, #0]
 8015df8:	f021 0104 	bicge.w	r1, r1, #4
 8015dfc:	6021      	strge	r1, [r4, #0]
 8015dfe:	b90d      	cbnz	r5, 8015e04 <_printf_i+0x118>
 8015e00:	2e00      	cmp	r6, #0
 8015e02:	d04d      	beq.n	8015ea0 <_printf_i+0x1b4>
 8015e04:	4616      	mov	r6, r2
 8015e06:	fbb5 f1f3 	udiv	r1, r5, r3
 8015e0a:	fb03 5711 	mls	r7, r3, r1, r5
 8015e0e:	5dc7      	ldrb	r7, [r0, r7]
 8015e10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015e14:	462f      	mov	r7, r5
 8015e16:	42bb      	cmp	r3, r7
 8015e18:	460d      	mov	r5, r1
 8015e1a:	d9f4      	bls.n	8015e06 <_printf_i+0x11a>
 8015e1c:	2b08      	cmp	r3, #8
 8015e1e:	d10b      	bne.n	8015e38 <_printf_i+0x14c>
 8015e20:	6823      	ldr	r3, [r4, #0]
 8015e22:	07df      	lsls	r7, r3, #31
 8015e24:	d508      	bpl.n	8015e38 <_printf_i+0x14c>
 8015e26:	6923      	ldr	r3, [r4, #16]
 8015e28:	6861      	ldr	r1, [r4, #4]
 8015e2a:	4299      	cmp	r1, r3
 8015e2c:	bfde      	ittt	le
 8015e2e:	2330      	movle	r3, #48	; 0x30
 8015e30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015e34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015e38:	1b92      	subs	r2, r2, r6
 8015e3a:	6122      	str	r2, [r4, #16]
 8015e3c:	f8cd a000 	str.w	sl, [sp]
 8015e40:	464b      	mov	r3, r9
 8015e42:	aa03      	add	r2, sp, #12
 8015e44:	4621      	mov	r1, r4
 8015e46:	4640      	mov	r0, r8
 8015e48:	f7ff fee2 	bl	8015c10 <_printf_common>
 8015e4c:	3001      	adds	r0, #1
 8015e4e:	d14c      	bne.n	8015eea <_printf_i+0x1fe>
 8015e50:	f04f 30ff 	mov.w	r0, #4294967295
 8015e54:	b004      	add	sp, #16
 8015e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e5a:	4835      	ldr	r0, [pc, #212]	; (8015f30 <_printf_i+0x244>)
 8015e5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015e60:	6823      	ldr	r3, [r4, #0]
 8015e62:	680e      	ldr	r6, [r1, #0]
 8015e64:	061f      	lsls	r7, r3, #24
 8015e66:	f856 5b04 	ldr.w	r5, [r6], #4
 8015e6a:	600e      	str	r6, [r1, #0]
 8015e6c:	d514      	bpl.n	8015e98 <_printf_i+0x1ac>
 8015e6e:	07d9      	lsls	r1, r3, #31
 8015e70:	bf44      	itt	mi
 8015e72:	f043 0320 	orrmi.w	r3, r3, #32
 8015e76:	6023      	strmi	r3, [r4, #0]
 8015e78:	b91d      	cbnz	r5, 8015e82 <_printf_i+0x196>
 8015e7a:	6823      	ldr	r3, [r4, #0]
 8015e7c:	f023 0320 	bic.w	r3, r3, #32
 8015e80:	6023      	str	r3, [r4, #0]
 8015e82:	2310      	movs	r3, #16
 8015e84:	e7b0      	b.n	8015de8 <_printf_i+0xfc>
 8015e86:	6823      	ldr	r3, [r4, #0]
 8015e88:	f043 0320 	orr.w	r3, r3, #32
 8015e8c:	6023      	str	r3, [r4, #0]
 8015e8e:	2378      	movs	r3, #120	; 0x78
 8015e90:	4828      	ldr	r0, [pc, #160]	; (8015f34 <_printf_i+0x248>)
 8015e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015e96:	e7e3      	b.n	8015e60 <_printf_i+0x174>
 8015e98:	065e      	lsls	r6, r3, #25
 8015e9a:	bf48      	it	mi
 8015e9c:	b2ad      	uxthmi	r5, r5
 8015e9e:	e7e6      	b.n	8015e6e <_printf_i+0x182>
 8015ea0:	4616      	mov	r6, r2
 8015ea2:	e7bb      	b.n	8015e1c <_printf_i+0x130>
 8015ea4:	680b      	ldr	r3, [r1, #0]
 8015ea6:	6826      	ldr	r6, [r4, #0]
 8015ea8:	6960      	ldr	r0, [r4, #20]
 8015eaa:	1d1d      	adds	r5, r3, #4
 8015eac:	600d      	str	r5, [r1, #0]
 8015eae:	0635      	lsls	r5, r6, #24
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	d501      	bpl.n	8015eb8 <_printf_i+0x1cc>
 8015eb4:	6018      	str	r0, [r3, #0]
 8015eb6:	e002      	b.n	8015ebe <_printf_i+0x1d2>
 8015eb8:	0671      	lsls	r1, r6, #25
 8015eba:	d5fb      	bpl.n	8015eb4 <_printf_i+0x1c8>
 8015ebc:	8018      	strh	r0, [r3, #0]
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	6123      	str	r3, [r4, #16]
 8015ec2:	4616      	mov	r6, r2
 8015ec4:	e7ba      	b.n	8015e3c <_printf_i+0x150>
 8015ec6:	680b      	ldr	r3, [r1, #0]
 8015ec8:	1d1a      	adds	r2, r3, #4
 8015eca:	600a      	str	r2, [r1, #0]
 8015ecc:	681e      	ldr	r6, [r3, #0]
 8015ece:	6862      	ldr	r2, [r4, #4]
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	f7ea f984 	bl	80001e0 <memchr>
 8015ed8:	b108      	cbz	r0, 8015ede <_printf_i+0x1f2>
 8015eda:	1b80      	subs	r0, r0, r6
 8015edc:	6060      	str	r0, [r4, #4]
 8015ede:	6863      	ldr	r3, [r4, #4]
 8015ee0:	6123      	str	r3, [r4, #16]
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ee8:	e7a8      	b.n	8015e3c <_printf_i+0x150>
 8015eea:	6923      	ldr	r3, [r4, #16]
 8015eec:	4632      	mov	r2, r6
 8015eee:	4649      	mov	r1, r9
 8015ef0:	4640      	mov	r0, r8
 8015ef2:	47d0      	blx	sl
 8015ef4:	3001      	adds	r0, #1
 8015ef6:	d0ab      	beq.n	8015e50 <_printf_i+0x164>
 8015ef8:	6823      	ldr	r3, [r4, #0]
 8015efa:	079b      	lsls	r3, r3, #30
 8015efc:	d413      	bmi.n	8015f26 <_printf_i+0x23a>
 8015efe:	68e0      	ldr	r0, [r4, #12]
 8015f00:	9b03      	ldr	r3, [sp, #12]
 8015f02:	4298      	cmp	r0, r3
 8015f04:	bfb8      	it	lt
 8015f06:	4618      	movlt	r0, r3
 8015f08:	e7a4      	b.n	8015e54 <_printf_i+0x168>
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	4632      	mov	r2, r6
 8015f0e:	4649      	mov	r1, r9
 8015f10:	4640      	mov	r0, r8
 8015f12:	47d0      	blx	sl
 8015f14:	3001      	adds	r0, #1
 8015f16:	d09b      	beq.n	8015e50 <_printf_i+0x164>
 8015f18:	3501      	adds	r5, #1
 8015f1a:	68e3      	ldr	r3, [r4, #12]
 8015f1c:	9903      	ldr	r1, [sp, #12]
 8015f1e:	1a5b      	subs	r3, r3, r1
 8015f20:	42ab      	cmp	r3, r5
 8015f22:	dcf2      	bgt.n	8015f0a <_printf_i+0x21e>
 8015f24:	e7eb      	b.n	8015efe <_printf_i+0x212>
 8015f26:	2500      	movs	r5, #0
 8015f28:	f104 0619 	add.w	r6, r4, #25
 8015f2c:	e7f5      	b.n	8015f1a <_printf_i+0x22e>
 8015f2e:	bf00      	nop
 8015f30:	0801be36 	.word	0x0801be36
 8015f34:	0801be47 	.word	0x0801be47

08015f38 <_scanf_float>:
 8015f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3c:	b087      	sub	sp, #28
 8015f3e:	4617      	mov	r7, r2
 8015f40:	9303      	str	r3, [sp, #12]
 8015f42:	688b      	ldr	r3, [r1, #8]
 8015f44:	1e5a      	subs	r2, r3, #1
 8015f46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015f4a:	bf83      	ittte	hi
 8015f4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015f50:	195b      	addhi	r3, r3, r5
 8015f52:	9302      	strhi	r3, [sp, #8]
 8015f54:	2300      	movls	r3, #0
 8015f56:	bf86      	itte	hi
 8015f58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015f5c:	608b      	strhi	r3, [r1, #8]
 8015f5e:	9302      	strls	r3, [sp, #8]
 8015f60:	680b      	ldr	r3, [r1, #0]
 8015f62:	468b      	mov	fp, r1
 8015f64:	2500      	movs	r5, #0
 8015f66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015f6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8015f6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015f72:	4680      	mov	r8, r0
 8015f74:	460c      	mov	r4, r1
 8015f76:	465e      	mov	r6, fp
 8015f78:	46aa      	mov	sl, r5
 8015f7a:	46a9      	mov	r9, r5
 8015f7c:	9501      	str	r5, [sp, #4]
 8015f7e:	68a2      	ldr	r2, [r4, #8]
 8015f80:	b152      	cbz	r2, 8015f98 <_scanf_float+0x60>
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	2b4e      	cmp	r3, #78	; 0x4e
 8015f88:	d864      	bhi.n	8016054 <_scanf_float+0x11c>
 8015f8a:	2b40      	cmp	r3, #64	; 0x40
 8015f8c:	d83c      	bhi.n	8016008 <_scanf_float+0xd0>
 8015f8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015f92:	b2c8      	uxtb	r0, r1
 8015f94:	280e      	cmp	r0, #14
 8015f96:	d93a      	bls.n	801600e <_scanf_float+0xd6>
 8015f98:	f1b9 0f00 	cmp.w	r9, #0
 8015f9c:	d003      	beq.n	8015fa6 <_scanf_float+0x6e>
 8015f9e:	6823      	ldr	r3, [r4, #0]
 8015fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015fa4:	6023      	str	r3, [r4, #0]
 8015fa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015faa:	f1ba 0f01 	cmp.w	sl, #1
 8015fae:	f200 8113 	bhi.w	80161d8 <_scanf_float+0x2a0>
 8015fb2:	455e      	cmp	r6, fp
 8015fb4:	f200 8105 	bhi.w	80161c2 <_scanf_float+0x28a>
 8015fb8:	2501      	movs	r5, #1
 8015fba:	4628      	mov	r0, r5
 8015fbc:	b007      	add	sp, #28
 8015fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015fc6:	2a0d      	cmp	r2, #13
 8015fc8:	d8e6      	bhi.n	8015f98 <_scanf_float+0x60>
 8015fca:	a101      	add	r1, pc, #4	; (adr r1, 8015fd0 <_scanf_float+0x98>)
 8015fcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015fd0:	0801610f 	.word	0x0801610f
 8015fd4:	08015f99 	.word	0x08015f99
 8015fd8:	08015f99 	.word	0x08015f99
 8015fdc:	08015f99 	.word	0x08015f99
 8015fe0:	0801616f 	.word	0x0801616f
 8015fe4:	08016147 	.word	0x08016147
 8015fe8:	08015f99 	.word	0x08015f99
 8015fec:	08015f99 	.word	0x08015f99
 8015ff0:	0801611d 	.word	0x0801611d
 8015ff4:	08015f99 	.word	0x08015f99
 8015ff8:	08015f99 	.word	0x08015f99
 8015ffc:	08015f99 	.word	0x08015f99
 8016000:	08015f99 	.word	0x08015f99
 8016004:	080160d5 	.word	0x080160d5
 8016008:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801600c:	e7db      	b.n	8015fc6 <_scanf_float+0x8e>
 801600e:	290e      	cmp	r1, #14
 8016010:	d8c2      	bhi.n	8015f98 <_scanf_float+0x60>
 8016012:	a001      	add	r0, pc, #4	; (adr r0, 8016018 <_scanf_float+0xe0>)
 8016014:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016018:	080160c7 	.word	0x080160c7
 801601c:	08015f99 	.word	0x08015f99
 8016020:	080160c7 	.word	0x080160c7
 8016024:	0801615b 	.word	0x0801615b
 8016028:	08015f99 	.word	0x08015f99
 801602c:	08016075 	.word	0x08016075
 8016030:	080160b1 	.word	0x080160b1
 8016034:	080160b1 	.word	0x080160b1
 8016038:	080160b1 	.word	0x080160b1
 801603c:	080160b1 	.word	0x080160b1
 8016040:	080160b1 	.word	0x080160b1
 8016044:	080160b1 	.word	0x080160b1
 8016048:	080160b1 	.word	0x080160b1
 801604c:	080160b1 	.word	0x080160b1
 8016050:	080160b1 	.word	0x080160b1
 8016054:	2b6e      	cmp	r3, #110	; 0x6e
 8016056:	d809      	bhi.n	801606c <_scanf_float+0x134>
 8016058:	2b60      	cmp	r3, #96	; 0x60
 801605a:	d8b2      	bhi.n	8015fc2 <_scanf_float+0x8a>
 801605c:	2b54      	cmp	r3, #84	; 0x54
 801605e:	d077      	beq.n	8016150 <_scanf_float+0x218>
 8016060:	2b59      	cmp	r3, #89	; 0x59
 8016062:	d199      	bne.n	8015f98 <_scanf_float+0x60>
 8016064:	2d07      	cmp	r5, #7
 8016066:	d197      	bne.n	8015f98 <_scanf_float+0x60>
 8016068:	2508      	movs	r5, #8
 801606a:	e029      	b.n	80160c0 <_scanf_float+0x188>
 801606c:	2b74      	cmp	r3, #116	; 0x74
 801606e:	d06f      	beq.n	8016150 <_scanf_float+0x218>
 8016070:	2b79      	cmp	r3, #121	; 0x79
 8016072:	e7f6      	b.n	8016062 <_scanf_float+0x12a>
 8016074:	6821      	ldr	r1, [r4, #0]
 8016076:	05c8      	lsls	r0, r1, #23
 8016078:	d51a      	bpl.n	80160b0 <_scanf_float+0x178>
 801607a:	9b02      	ldr	r3, [sp, #8]
 801607c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016080:	6021      	str	r1, [r4, #0]
 8016082:	f109 0901 	add.w	r9, r9, #1
 8016086:	b11b      	cbz	r3, 8016090 <_scanf_float+0x158>
 8016088:	3b01      	subs	r3, #1
 801608a:	3201      	adds	r2, #1
 801608c:	9302      	str	r3, [sp, #8]
 801608e:	60a2      	str	r2, [r4, #8]
 8016090:	68a3      	ldr	r3, [r4, #8]
 8016092:	3b01      	subs	r3, #1
 8016094:	60a3      	str	r3, [r4, #8]
 8016096:	6923      	ldr	r3, [r4, #16]
 8016098:	3301      	adds	r3, #1
 801609a:	6123      	str	r3, [r4, #16]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	3b01      	subs	r3, #1
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	607b      	str	r3, [r7, #4]
 80160a4:	f340 8084 	ble.w	80161b0 <_scanf_float+0x278>
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	3301      	adds	r3, #1
 80160ac:	603b      	str	r3, [r7, #0]
 80160ae:	e766      	b.n	8015f7e <_scanf_float+0x46>
 80160b0:	eb1a 0f05 	cmn.w	sl, r5
 80160b4:	f47f af70 	bne.w	8015f98 <_scanf_float+0x60>
 80160b8:	6822      	ldr	r2, [r4, #0]
 80160ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80160be:	6022      	str	r2, [r4, #0]
 80160c0:	f806 3b01 	strb.w	r3, [r6], #1
 80160c4:	e7e4      	b.n	8016090 <_scanf_float+0x158>
 80160c6:	6822      	ldr	r2, [r4, #0]
 80160c8:	0610      	lsls	r0, r2, #24
 80160ca:	f57f af65 	bpl.w	8015f98 <_scanf_float+0x60>
 80160ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80160d2:	e7f4      	b.n	80160be <_scanf_float+0x186>
 80160d4:	f1ba 0f00 	cmp.w	sl, #0
 80160d8:	d10e      	bne.n	80160f8 <_scanf_float+0x1c0>
 80160da:	f1b9 0f00 	cmp.w	r9, #0
 80160de:	d10e      	bne.n	80160fe <_scanf_float+0x1c6>
 80160e0:	6822      	ldr	r2, [r4, #0]
 80160e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80160e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80160ea:	d108      	bne.n	80160fe <_scanf_float+0x1c6>
 80160ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80160f0:	6022      	str	r2, [r4, #0]
 80160f2:	f04f 0a01 	mov.w	sl, #1
 80160f6:	e7e3      	b.n	80160c0 <_scanf_float+0x188>
 80160f8:	f1ba 0f02 	cmp.w	sl, #2
 80160fc:	d055      	beq.n	80161aa <_scanf_float+0x272>
 80160fe:	2d01      	cmp	r5, #1
 8016100:	d002      	beq.n	8016108 <_scanf_float+0x1d0>
 8016102:	2d04      	cmp	r5, #4
 8016104:	f47f af48 	bne.w	8015f98 <_scanf_float+0x60>
 8016108:	3501      	adds	r5, #1
 801610a:	b2ed      	uxtb	r5, r5
 801610c:	e7d8      	b.n	80160c0 <_scanf_float+0x188>
 801610e:	f1ba 0f01 	cmp.w	sl, #1
 8016112:	f47f af41 	bne.w	8015f98 <_scanf_float+0x60>
 8016116:	f04f 0a02 	mov.w	sl, #2
 801611a:	e7d1      	b.n	80160c0 <_scanf_float+0x188>
 801611c:	b97d      	cbnz	r5, 801613e <_scanf_float+0x206>
 801611e:	f1b9 0f00 	cmp.w	r9, #0
 8016122:	f47f af3c 	bne.w	8015f9e <_scanf_float+0x66>
 8016126:	6822      	ldr	r2, [r4, #0]
 8016128:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801612c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016130:	f47f af39 	bne.w	8015fa6 <_scanf_float+0x6e>
 8016134:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016138:	6022      	str	r2, [r4, #0]
 801613a:	2501      	movs	r5, #1
 801613c:	e7c0      	b.n	80160c0 <_scanf_float+0x188>
 801613e:	2d03      	cmp	r5, #3
 8016140:	d0e2      	beq.n	8016108 <_scanf_float+0x1d0>
 8016142:	2d05      	cmp	r5, #5
 8016144:	e7de      	b.n	8016104 <_scanf_float+0x1cc>
 8016146:	2d02      	cmp	r5, #2
 8016148:	f47f af26 	bne.w	8015f98 <_scanf_float+0x60>
 801614c:	2503      	movs	r5, #3
 801614e:	e7b7      	b.n	80160c0 <_scanf_float+0x188>
 8016150:	2d06      	cmp	r5, #6
 8016152:	f47f af21 	bne.w	8015f98 <_scanf_float+0x60>
 8016156:	2507      	movs	r5, #7
 8016158:	e7b2      	b.n	80160c0 <_scanf_float+0x188>
 801615a:	6822      	ldr	r2, [r4, #0]
 801615c:	0591      	lsls	r1, r2, #22
 801615e:	f57f af1b 	bpl.w	8015f98 <_scanf_float+0x60>
 8016162:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016166:	6022      	str	r2, [r4, #0]
 8016168:	f8cd 9004 	str.w	r9, [sp, #4]
 801616c:	e7a8      	b.n	80160c0 <_scanf_float+0x188>
 801616e:	6822      	ldr	r2, [r4, #0]
 8016170:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016174:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016178:	d006      	beq.n	8016188 <_scanf_float+0x250>
 801617a:	0550      	lsls	r0, r2, #21
 801617c:	f57f af0c 	bpl.w	8015f98 <_scanf_float+0x60>
 8016180:	f1b9 0f00 	cmp.w	r9, #0
 8016184:	f43f af0f 	beq.w	8015fa6 <_scanf_float+0x6e>
 8016188:	0591      	lsls	r1, r2, #22
 801618a:	bf58      	it	pl
 801618c:	9901      	ldrpl	r1, [sp, #4]
 801618e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016192:	bf58      	it	pl
 8016194:	eba9 0101 	subpl.w	r1, r9, r1
 8016198:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801619c:	bf58      	it	pl
 801619e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80161a2:	6022      	str	r2, [r4, #0]
 80161a4:	f04f 0900 	mov.w	r9, #0
 80161a8:	e78a      	b.n	80160c0 <_scanf_float+0x188>
 80161aa:	f04f 0a03 	mov.w	sl, #3
 80161ae:	e787      	b.n	80160c0 <_scanf_float+0x188>
 80161b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80161b4:	4639      	mov	r1, r7
 80161b6:	4640      	mov	r0, r8
 80161b8:	4798      	blx	r3
 80161ba:	2800      	cmp	r0, #0
 80161bc:	f43f aedf 	beq.w	8015f7e <_scanf_float+0x46>
 80161c0:	e6ea      	b.n	8015f98 <_scanf_float+0x60>
 80161c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80161ca:	463a      	mov	r2, r7
 80161cc:	4640      	mov	r0, r8
 80161ce:	4798      	blx	r3
 80161d0:	6923      	ldr	r3, [r4, #16]
 80161d2:	3b01      	subs	r3, #1
 80161d4:	6123      	str	r3, [r4, #16]
 80161d6:	e6ec      	b.n	8015fb2 <_scanf_float+0x7a>
 80161d8:	1e6b      	subs	r3, r5, #1
 80161da:	2b06      	cmp	r3, #6
 80161dc:	d825      	bhi.n	801622a <_scanf_float+0x2f2>
 80161de:	2d02      	cmp	r5, #2
 80161e0:	d836      	bhi.n	8016250 <_scanf_float+0x318>
 80161e2:	455e      	cmp	r6, fp
 80161e4:	f67f aee8 	bls.w	8015fb8 <_scanf_float+0x80>
 80161e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80161f0:	463a      	mov	r2, r7
 80161f2:	4640      	mov	r0, r8
 80161f4:	4798      	blx	r3
 80161f6:	6923      	ldr	r3, [r4, #16]
 80161f8:	3b01      	subs	r3, #1
 80161fa:	6123      	str	r3, [r4, #16]
 80161fc:	e7f1      	b.n	80161e2 <_scanf_float+0x2aa>
 80161fe:	9802      	ldr	r0, [sp, #8]
 8016200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016204:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016208:	9002      	str	r0, [sp, #8]
 801620a:	463a      	mov	r2, r7
 801620c:	4640      	mov	r0, r8
 801620e:	4798      	blx	r3
 8016210:	6923      	ldr	r3, [r4, #16]
 8016212:	3b01      	subs	r3, #1
 8016214:	6123      	str	r3, [r4, #16]
 8016216:	f10a 3aff 	add.w	sl, sl, #4294967295
 801621a:	fa5f fa8a 	uxtb.w	sl, sl
 801621e:	f1ba 0f02 	cmp.w	sl, #2
 8016222:	d1ec      	bne.n	80161fe <_scanf_float+0x2c6>
 8016224:	3d03      	subs	r5, #3
 8016226:	b2ed      	uxtb	r5, r5
 8016228:	1b76      	subs	r6, r6, r5
 801622a:	6823      	ldr	r3, [r4, #0]
 801622c:	05da      	lsls	r2, r3, #23
 801622e:	d52f      	bpl.n	8016290 <_scanf_float+0x358>
 8016230:	055b      	lsls	r3, r3, #21
 8016232:	d510      	bpl.n	8016256 <_scanf_float+0x31e>
 8016234:	455e      	cmp	r6, fp
 8016236:	f67f aebf 	bls.w	8015fb8 <_scanf_float+0x80>
 801623a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801623e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016242:	463a      	mov	r2, r7
 8016244:	4640      	mov	r0, r8
 8016246:	4798      	blx	r3
 8016248:	6923      	ldr	r3, [r4, #16]
 801624a:	3b01      	subs	r3, #1
 801624c:	6123      	str	r3, [r4, #16]
 801624e:	e7f1      	b.n	8016234 <_scanf_float+0x2fc>
 8016250:	46aa      	mov	sl, r5
 8016252:	9602      	str	r6, [sp, #8]
 8016254:	e7df      	b.n	8016216 <_scanf_float+0x2de>
 8016256:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801625a:	6923      	ldr	r3, [r4, #16]
 801625c:	2965      	cmp	r1, #101	; 0x65
 801625e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016262:	f106 35ff 	add.w	r5, r6, #4294967295
 8016266:	6123      	str	r3, [r4, #16]
 8016268:	d00c      	beq.n	8016284 <_scanf_float+0x34c>
 801626a:	2945      	cmp	r1, #69	; 0x45
 801626c:	d00a      	beq.n	8016284 <_scanf_float+0x34c>
 801626e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016272:	463a      	mov	r2, r7
 8016274:	4640      	mov	r0, r8
 8016276:	4798      	blx	r3
 8016278:	6923      	ldr	r3, [r4, #16]
 801627a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801627e:	3b01      	subs	r3, #1
 8016280:	1eb5      	subs	r5, r6, #2
 8016282:	6123      	str	r3, [r4, #16]
 8016284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016288:	463a      	mov	r2, r7
 801628a:	4640      	mov	r0, r8
 801628c:	4798      	blx	r3
 801628e:	462e      	mov	r6, r5
 8016290:	6825      	ldr	r5, [r4, #0]
 8016292:	f015 0510 	ands.w	r5, r5, #16
 8016296:	d158      	bne.n	801634a <_scanf_float+0x412>
 8016298:	7035      	strb	r5, [r6, #0]
 801629a:	6823      	ldr	r3, [r4, #0]
 801629c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80162a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80162a4:	d11c      	bne.n	80162e0 <_scanf_float+0x3a8>
 80162a6:	9b01      	ldr	r3, [sp, #4]
 80162a8:	454b      	cmp	r3, r9
 80162aa:	eba3 0209 	sub.w	r2, r3, r9
 80162ae:	d124      	bne.n	80162fa <_scanf_float+0x3c2>
 80162b0:	2200      	movs	r2, #0
 80162b2:	4659      	mov	r1, fp
 80162b4:	4640      	mov	r0, r8
 80162b6:	f000 fee1 	bl	801707c <_strtod_r>
 80162ba:	9b03      	ldr	r3, [sp, #12]
 80162bc:	6821      	ldr	r1, [r4, #0]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	f011 0f02 	tst.w	r1, #2
 80162c4:	ec57 6b10 	vmov	r6, r7, d0
 80162c8:	f103 0204 	add.w	r2, r3, #4
 80162cc:	d020      	beq.n	8016310 <_scanf_float+0x3d8>
 80162ce:	9903      	ldr	r1, [sp, #12]
 80162d0:	600a      	str	r2, [r1, #0]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	e9c3 6700 	strd	r6, r7, [r3]
 80162d8:	68e3      	ldr	r3, [r4, #12]
 80162da:	3301      	adds	r3, #1
 80162dc:	60e3      	str	r3, [r4, #12]
 80162de:	e66c      	b.n	8015fba <_scanf_float+0x82>
 80162e0:	9b04      	ldr	r3, [sp, #16]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d0e4      	beq.n	80162b0 <_scanf_float+0x378>
 80162e6:	9905      	ldr	r1, [sp, #20]
 80162e8:	230a      	movs	r3, #10
 80162ea:	462a      	mov	r2, r5
 80162ec:	3101      	adds	r1, #1
 80162ee:	4640      	mov	r0, r8
 80162f0:	f000 ff4e 	bl	8017190 <_strtol_r>
 80162f4:	9b04      	ldr	r3, [sp, #16]
 80162f6:	9e05      	ldr	r6, [sp, #20]
 80162f8:	1ac2      	subs	r2, r0, r3
 80162fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80162fe:	429e      	cmp	r6, r3
 8016300:	bf28      	it	cs
 8016302:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016306:	4912      	ldr	r1, [pc, #72]	; (8016350 <_scanf_float+0x418>)
 8016308:	4630      	mov	r0, r6
 801630a:	f000 f86f 	bl	80163ec <siprintf>
 801630e:	e7cf      	b.n	80162b0 <_scanf_float+0x378>
 8016310:	f011 0f04 	tst.w	r1, #4
 8016314:	9903      	ldr	r1, [sp, #12]
 8016316:	600a      	str	r2, [r1, #0]
 8016318:	d1db      	bne.n	80162d2 <_scanf_float+0x39a>
 801631a:	f8d3 8000 	ldr.w	r8, [r3]
 801631e:	ee10 2a10 	vmov	r2, s0
 8016322:	ee10 0a10 	vmov	r0, s0
 8016326:	463b      	mov	r3, r7
 8016328:	4639      	mov	r1, r7
 801632a:	f7ea fbff 	bl	8000b2c <__aeabi_dcmpun>
 801632e:	b128      	cbz	r0, 801633c <_scanf_float+0x404>
 8016330:	4808      	ldr	r0, [pc, #32]	; (8016354 <_scanf_float+0x41c>)
 8016332:	f000 f821 	bl	8016378 <nanf>
 8016336:	ed88 0a00 	vstr	s0, [r8]
 801633a:	e7cd      	b.n	80162d8 <_scanf_float+0x3a0>
 801633c:	4630      	mov	r0, r6
 801633e:	4639      	mov	r1, r7
 8016340:	f7ea fc52 	bl	8000be8 <__aeabi_d2f>
 8016344:	f8c8 0000 	str.w	r0, [r8]
 8016348:	e7c6      	b.n	80162d8 <_scanf_float+0x3a0>
 801634a:	2500      	movs	r5, #0
 801634c:	e635      	b.n	8015fba <_scanf_float+0x82>
 801634e:	bf00      	nop
 8016350:	0801be58 	.word	0x0801be58
 8016354:	0801c270 	.word	0x0801c270

08016358 <_sbrk_r>:
 8016358:	b538      	push	{r3, r4, r5, lr}
 801635a:	4d06      	ldr	r5, [pc, #24]	; (8016374 <_sbrk_r+0x1c>)
 801635c:	2300      	movs	r3, #0
 801635e:	4604      	mov	r4, r0
 8016360:	4608      	mov	r0, r1
 8016362:	602b      	str	r3, [r5, #0]
 8016364:	f7f4 fa24 	bl	800a7b0 <_sbrk>
 8016368:	1c43      	adds	r3, r0, #1
 801636a:	d102      	bne.n	8016372 <_sbrk_r+0x1a>
 801636c:	682b      	ldr	r3, [r5, #0]
 801636e:	b103      	cbz	r3, 8016372 <_sbrk_r+0x1a>
 8016370:	6023      	str	r3, [r4, #0]
 8016372:	bd38      	pop	{r3, r4, r5, pc}
 8016374:	20012384 	.word	0x20012384

08016378 <nanf>:
 8016378:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016380 <nanf+0x8>
 801637c:	4770      	bx	lr
 801637e:	bf00      	nop
 8016380:	7fc00000 	.word	0x7fc00000

08016384 <sniprintf>:
 8016384:	b40c      	push	{r2, r3}
 8016386:	b530      	push	{r4, r5, lr}
 8016388:	4b17      	ldr	r3, [pc, #92]	; (80163e8 <sniprintf+0x64>)
 801638a:	1e0c      	subs	r4, r1, #0
 801638c:	681d      	ldr	r5, [r3, #0]
 801638e:	b09d      	sub	sp, #116	; 0x74
 8016390:	da08      	bge.n	80163a4 <sniprintf+0x20>
 8016392:	238b      	movs	r3, #139	; 0x8b
 8016394:	602b      	str	r3, [r5, #0]
 8016396:	f04f 30ff 	mov.w	r0, #4294967295
 801639a:	b01d      	add	sp, #116	; 0x74
 801639c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163a0:	b002      	add	sp, #8
 80163a2:	4770      	bx	lr
 80163a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80163a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80163ac:	bf14      	ite	ne
 80163ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80163b2:	4623      	moveq	r3, r4
 80163b4:	9304      	str	r3, [sp, #16]
 80163b6:	9307      	str	r3, [sp, #28]
 80163b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163bc:	9002      	str	r0, [sp, #8]
 80163be:	9006      	str	r0, [sp, #24]
 80163c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80163c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80163c6:	ab21      	add	r3, sp, #132	; 0x84
 80163c8:	a902      	add	r1, sp, #8
 80163ca:	4628      	mov	r0, r5
 80163cc:	9301      	str	r3, [sp, #4]
 80163ce:	f002 fe13 	bl	8018ff8 <_svfiprintf_r>
 80163d2:	1c43      	adds	r3, r0, #1
 80163d4:	bfbc      	itt	lt
 80163d6:	238b      	movlt	r3, #139	; 0x8b
 80163d8:	602b      	strlt	r3, [r5, #0]
 80163da:	2c00      	cmp	r4, #0
 80163dc:	d0dd      	beq.n	801639a <sniprintf+0x16>
 80163de:	9b02      	ldr	r3, [sp, #8]
 80163e0:	2200      	movs	r2, #0
 80163e2:	701a      	strb	r2, [r3, #0]
 80163e4:	e7d9      	b.n	801639a <sniprintf+0x16>
 80163e6:	bf00      	nop
 80163e8:	20004210 	.word	0x20004210

080163ec <siprintf>:
 80163ec:	b40e      	push	{r1, r2, r3}
 80163ee:	b500      	push	{lr}
 80163f0:	b09c      	sub	sp, #112	; 0x70
 80163f2:	ab1d      	add	r3, sp, #116	; 0x74
 80163f4:	9002      	str	r0, [sp, #8]
 80163f6:	9006      	str	r0, [sp, #24]
 80163f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80163fc:	4809      	ldr	r0, [pc, #36]	; (8016424 <siprintf+0x38>)
 80163fe:	9107      	str	r1, [sp, #28]
 8016400:	9104      	str	r1, [sp, #16]
 8016402:	4909      	ldr	r1, [pc, #36]	; (8016428 <siprintf+0x3c>)
 8016404:	f853 2b04 	ldr.w	r2, [r3], #4
 8016408:	9105      	str	r1, [sp, #20]
 801640a:	6800      	ldr	r0, [r0, #0]
 801640c:	9301      	str	r3, [sp, #4]
 801640e:	a902      	add	r1, sp, #8
 8016410:	f002 fdf2 	bl	8018ff8 <_svfiprintf_r>
 8016414:	9b02      	ldr	r3, [sp, #8]
 8016416:	2200      	movs	r2, #0
 8016418:	701a      	strb	r2, [r3, #0]
 801641a:	b01c      	add	sp, #112	; 0x70
 801641c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016420:	b003      	add	sp, #12
 8016422:	4770      	bx	lr
 8016424:	20004210 	.word	0x20004210
 8016428:	ffff0208 	.word	0xffff0208

0801642c <sulp>:
 801642c:	b570      	push	{r4, r5, r6, lr}
 801642e:	4604      	mov	r4, r0
 8016430:	460d      	mov	r5, r1
 8016432:	ec45 4b10 	vmov	d0, r4, r5
 8016436:	4616      	mov	r6, r2
 8016438:	f002 fc24 	bl	8018c84 <__ulp>
 801643c:	ec51 0b10 	vmov	r0, r1, d0
 8016440:	b17e      	cbz	r6, 8016462 <sulp+0x36>
 8016442:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016446:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801644a:	2b00      	cmp	r3, #0
 801644c:	dd09      	ble.n	8016462 <sulp+0x36>
 801644e:	051b      	lsls	r3, r3, #20
 8016450:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016454:	2400      	movs	r4, #0
 8016456:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801645a:	4622      	mov	r2, r4
 801645c:	462b      	mov	r3, r5
 801645e:	f7ea f8cb 	bl	80005f8 <__aeabi_dmul>
 8016462:	bd70      	pop	{r4, r5, r6, pc}
 8016464:	0000      	movs	r0, r0
	...

08016468 <_strtod_l>:
 8016468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801646c:	b0a3      	sub	sp, #140	; 0x8c
 801646e:	461f      	mov	r7, r3
 8016470:	2300      	movs	r3, #0
 8016472:	931e      	str	r3, [sp, #120]	; 0x78
 8016474:	4ba4      	ldr	r3, [pc, #656]	; (8016708 <_strtod_l+0x2a0>)
 8016476:	9219      	str	r2, [sp, #100]	; 0x64
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	9307      	str	r3, [sp, #28]
 801647c:	4604      	mov	r4, r0
 801647e:	4618      	mov	r0, r3
 8016480:	4688      	mov	r8, r1
 8016482:	f7e9 fea5 	bl	80001d0 <strlen>
 8016486:	f04f 0a00 	mov.w	sl, #0
 801648a:	4605      	mov	r5, r0
 801648c:	f04f 0b00 	mov.w	fp, #0
 8016490:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016496:	781a      	ldrb	r2, [r3, #0]
 8016498:	2a2b      	cmp	r2, #43	; 0x2b
 801649a:	d04c      	beq.n	8016536 <_strtod_l+0xce>
 801649c:	d839      	bhi.n	8016512 <_strtod_l+0xaa>
 801649e:	2a0d      	cmp	r2, #13
 80164a0:	d832      	bhi.n	8016508 <_strtod_l+0xa0>
 80164a2:	2a08      	cmp	r2, #8
 80164a4:	d832      	bhi.n	801650c <_strtod_l+0xa4>
 80164a6:	2a00      	cmp	r2, #0
 80164a8:	d03c      	beq.n	8016524 <_strtod_l+0xbc>
 80164aa:	2300      	movs	r3, #0
 80164ac:	930e      	str	r3, [sp, #56]	; 0x38
 80164ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80164b0:	7833      	ldrb	r3, [r6, #0]
 80164b2:	2b30      	cmp	r3, #48	; 0x30
 80164b4:	f040 80b4 	bne.w	8016620 <_strtod_l+0x1b8>
 80164b8:	7873      	ldrb	r3, [r6, #1]
 80164ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80164be:	2b58      	cmp	r3, #88	; 0x58
 80164c0:	d16c      	bne.n	801659c <_strtod_l+0x134>
 80164c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164c4:	9301      	str	r3, [sp, #4]
 80164c6:	ab1e      	add	r3, sp, #120	; 0x78
 80164c8:	9702      	str	r7, [sp, #8]
 80164ca:	9300      	str	r3, [sp, #0]
 80164cc:	4a8f      	ldr	r2, [pc, #572]	; (801670c <_strtod_l+0x2a4>)
 80164ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80164d0:	a91d      	add	r1, sp, #116	; 0x74
 80164d2:	4620      	mov	r0, r4
 80164d4:	f001 fd40 	bl	8017f58 <__gethex>
 80164d8:	f010 0707 	ands.w	r7, r0, #7
 80164dc:	4605      	mov	r5, r0
 80164de:	d005      	beq.n	80164ec <_strtod_l+0x84>
 80164e0:	2f06      	cmp	r7, #6
 80164e2:	d12a      	bne.n	801653a <_strtod_l+0xd2>
 80164e4:	3601      	adds	r6, #1
 80164e6:	2300      	movs	r3, #0
 80164e8:	961d      	str	r6, [sp, #116]	; 0x74
 80164ea:	930e      	str	r3, [sp, #56]	; 0x38
 80164ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	f040 8596 	bne.w	8017020 <_strtod_l+0xbb8>
 80164f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164f6:	b1db      	cbz	r3, 8016530 <_strtod_l+0xc8>
 80164f8:	4652      	mov	r2, sl
 80164fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80164fe:	ec43 2b10 	vmov	d0, r2, r3
 8016502:	b023      	add	sp, #140	; 0x8c
 8016504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016508:	2a20      	cmp	r2, #32
 801650a:	d1ce      	bne.n	80164aa <_strtod_l+0x42>
 801650c:	3301      	adds	r3, #1
 801650e:	931d      	str	r3, [sp, #116]	; 0x74
 8016510:	e7c0      	b.n	8016494 <_strtod_l+0x2c>
 8016512:	2a2d      	cmp	r2, #45	; 0x2d
 8016514:	d1c9      	bne.n	80164aa <_strtod_l+0x42>
 8016516:	2201      	movs	r2, #1
 8016518:	920e      	str	r2, [sp, #56]	; 0x38
 801651a:	1c5a      	adds	r2, r3, #1
 801651c:	921d      	str	r2, [sp, #116]	; 0x74
 801651e:	785b      	ldrb	r3, [r3, #1]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1c4      	bne.n	80164ae <_strtod_l+0x46>
 8016524:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016526:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801652a:	2b00      	cmp	r3, #0
 801652c:	f040 8576 	bne.w	801701c <_strtod_l+0xbb4>
 8016530:	4652      	mov	r2, sl
 8016532:	465b      	mov	r3, fp
 8016534:	e7e3      	b.n	80164fe <_strtod_l+0x96>
 8016536:	2200      	movs	r2, #0
 8016538:	e7ee      	b.n	8016518 <_strtod_l+0xb0>
 801653a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801653c:	b13a      	cbz	r2, 801654e <_strtod_l+0xe6>
 801653e:	2135      	movs	r1, #53	; 0x35
 8016540:	a820      	add	r0, sp, #128	; 0x80
 8016542:	f002 fcaa 	bl	8018e9a <__copybits>
 8016546:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016548:	4620      	mov	r0, r4
 801654a:	f002 f86f 	bl	801862c <_Bfree>
 801654e:	3f01      	subs	r7, #1
 8016550:	2f05      	cmp	r7, #5
 8016552:	d807      	bhi.n	8016564 <_strtod_l+0xfc>
 8016554:	e8df f007 	tbb	[pc, r7]
 8016558:	1d180b0e 	.word	0x1d180b0e
 801655c:	030e      	.short	0x030e
 801655e:	f04f 0b00 	mov.w	fp, #0
 8016562:	46da      	mov	sl, fp
 8016564:	0728      	lsls	r0, r5, #28
 8016566:	d5c1      	bpl.n	80164ec <_strtod_l+0x84>
 8016568:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801656c:	e7be      	b.n	80164ec <_strtod_l+0x84>
 801656e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016572:	e7f7      	b.n	8016564 <_strtod_l+0xfc>
 8016574:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016578:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801657a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801657e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016582:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016586:	e7ed      	b.n	8016564 <_strtod_l+0xfc>
 8016588:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016710 <_strtod_l+0x2a8>
 801658c:	f04f 0a00 	mov.w	sl, #0
 8016590:	e7e8      	b.n	8016564 <_strtod_l+0xfc>
 8016592:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016596:	f04f 3aff 	mov.w	sl, #4294967295
 801659a:	e7e3      	b.n	8016564 <_strtod_l+0xfc>
 801659c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801659e:	1c5a      	adds	r2, r3, #1
 80165a0:	921d      	str	r2, [sp, #116]	; 0x74
 80165a2:	785b      	ldrb	r3, [r3, #1]
 80165a4:	2b30      	cmp	r3, #48	; 0x30
 80165a6:	d0f9      	beq.n	801659c <_strtod_l+0x134>
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d09f      	beq.n	80164ec <_strtod_l+0x84>
 80165ac:	2301      	movs	r3, #1
 80165ae:	f04f 0900 	mov.w	r9, #0
 80165b2:	9304      	str	r3, [sp, #16]
 80165b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80165b6:	930a      	str	r3, [sp, #40]	; 0x28
 80165b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80165bc:	464f      	mov	r7, r9
 80165be:	220a      	movs	r2, #10
 80165c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80165c2:	7806      	ldrb	r6, [r0, #0]
 80165c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80165c8:	b2d9      	uxtb	r1, r3
 80165ca:	2909      	cmp	r1, #9
 80165cc:	d92a      	bls.n	8016624 <_strtod_l+0x1bc>
 80165ce:	9907      	ldr	r1, [sp, #28]
 80165d0:	462a      	mov	r2, r5
 80165d2:	f002 fe19 	bl	8019208 <strncmp>
 80165d6:	b398      	cbz	r0, 8016640 <_strtod_l+0x1d8>
 80165d8:	2000      	movs	r0, #0
 80165da:	4633      	mov	r3, r6
 80165dc:	463d      	mov	r5, r7
 80165de:	9007      	str	r0, [sp, #28]
 80165e0:	4602      	mov	r2, r0
 80165e2:	2b65      	cmp	r3, #101	; 0x65
 80165e4:	d001      	beq.n	80165ea <_strtod_l+0x182>
 80165e6:	2b45      	cmp	r3, #69	; 0x45
 80165e8:	d118      	bne.n	801661c <_strtod_l+0x1b4>
 80165ea:	b91d      	cbnz	r5, 80165f4 <_strtod_l+0x18c>
 80165ec:	9b04      	ldr	r3, [sp, #16]
 80165ee:	4303      	orrs	r3, r0
 80165f0:	d098      	beq.n	8016524 <_strtod_l+0xbc>
 80165f2:	2500      	movs	r5, #0
 80165f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80165f8:	f108 0301 	add.w	r3, r8, #1
 80165fc:	931d      	str	r3, [sp, #116]	; 0x74
 80165fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016602:	2b2b      	cmp	r3, #43	; 0x2b
 8016604:	d075      	beq.n	80166f2 <_strtod_l+0x28a>
 8016606:	2b2d      	cmp	r3, #45	; 0x2d
 8016608:	d07b      	beq.n	8016702 <_strtod_l+0x29a>
 801660a:	f04f 0c00 	mov.w	ip, #0
 801660e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016612:	2909      	cmp	r1, #9
 8016614:	f240 8082 	bls.w	801671c <_strtod_l+0x2b4>
 8016618:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801661c:	2600      	movs	r6, #0
 801661e:	e09d      	b.n	801675c <_strtod_l+0x2f4>
 8016620:	2300      	movs	r3, #0
 8016622:	e7c4      	b.n	80165ae <_strtod_l+0x146>
 8016624:	2f08      	cmp	r7, #8
 8016626:	bfd8      	it	le
 8016628:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801662a:	f100 0001 	add.w	r0, r0, #1
 801662e:	bfda      	itte	le
 8016630:	fb02 3301 	mlale	r3, r2, r1, r3
 8016634:	9309      	strle	r3, [sp, #36]	; 0x24
 8016636:	fb02 3909 	mlagt	r9, r2, r9, r3
 801663a:	3701      	adds	r7, #1
 801663c:	901d      	str	r0, [sp, #116]	; 0x74
 801663e:	e7bf      	b.n	80165c0 <_strtod_l+0x158>
 8016640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016642:	195a      	adds	r2, r3, r5
 8016644:	921d      	str	r2, [sp, #116]	; 0x74
 8016646:	5d5b      	ldrb	r3, [r3, r5]
 8016648:	2f00      	cmp	r7, #0
 801664a:	d037      	beq.n	80166bc <_strtod_l+0x254>
 801664c:	9007      	str	r0, [sp, #28]
 801664e:	463d      	mov	r5, r7
 8016650:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016654:	2a09      	cmp	r2, #9
 8016656:	d912      	bls.n	801667e <_strtod_l+0x216>
 8016658:	2201      	movs	r2, #1
 801665a:	e7c2      	b.n	80165e2 <_strtod_l+0x17a>
 801665c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801665e:	1c5a      	adds	r2, r3, #1
 8016660:	921d      	str	r2, [sp, #116]	; 0x74
 8016662:	785b      	ldrb	r3, [r3, #1]
 8016664:	3001      	adds	r0, #1
 8016666:	2b30      	cmp	r3, #48	; 0x30
 8016668:	d0f8      	beq.n	801665c <_strtod_l+0x1f4>
 801666a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801666e:	2a08      	cmp	r2, #8
 8016670:	f200 84db 	bhi.w	801702a <_strtod_l+0xbc2>
 8016674:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016676:	9007      	str	r0, [sp, #28]
 8016678:	2000      	movs	r0, #0
 801667a:	920a      	str	r2, [sp, #40]	; 0x28
 801667c:	4605      	mov	r5, r0
 801667e:	3b30      	subs	r3, #48	; 0x30
 8016680:	f100 0201 	add.w	r2, r0, #1
 8016684:	d014      	beq.n	80166b0 <_strtod_l+0x248>
 8016686:	9907      	ldr	r1, [sp, #28]
 8016688:	4411      	add	r1, r2
 801668a:	9107      	str	r1, [sp, #28]
 801668c:	462a      	mov	r2, r5
 801668e:	eb00 0e05 	add.w	lr, r0, r5
 8016692:	210a      	movs	r1, #10
 8016694:	4572      	cmp	r2, lr
 8016696:	d113      	bne.n	80166c0 <_strtod_l+0x258>
 8016698:	182a      	adds	r2, r5, r0
 801669a:	2a08      	cmp	r2, #8
 801669c:	f105 0501 	add.w	r5, r5, #1
 80166a0:	4405      	add	r5, r0
 80166a2:	dc1c      	bgt.n	80166de <_strtod_l+0x276>
 80166a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80166a6:	220a      	movs	r2, #10
 80166a8:	fb02 3301 	mla	r3, r2, r1, r3
 80166ac:	9309      	str	r3, [sp, #36]	; 0x24
 80166ae:	2200      	movs	r2, #0
 80166b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166b2:	1c59      	adds	r1, r3, #1
 80166b4:	911d      	str	r1, [sp, #116]	; 0x74
 80166b6:	785b      	ldrb	r3, [r3, #1]
 80166b8:	4610      	mov	r0, r2
 80166ba:	e7c9      	b.n	8016650 <_strtod_l+0x1e8>
 80166bc:	4638      	mov	r0, r7
 80166be:	e7d2      	b.n	8016666 <_strtod_l+0x1fe>
 80166c0:	2a08      	cmp	r2, #8
 80166c2:	dc04      	bgt.n	80166ce <_strtod_l+0x266>
 80166c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80166c6:	434e      	muls	r6, r1
 80166c8:	9609      	str	r6, [sp, #36]	; 0x24
 80166ca:	3201      	adds	r2, #1
 80166cc:	e7e2      	b.n	8016694 <_strtod_l+0x22c>
 80166ce:	f102 0c01 	add.w	ip, r2, #1
 80166d2:	f1bc 0f10 	cmp.w	ip, #16
 80166d6:	bfd8      	it	le
 80166d8:	fb01 f909 	mulle.w	r9, r1, r9
 80166dc:	e7f5      	b.n	80166ca <_strtod_l+0x262>
 80166de:	2d10      	cmp	r5, #16
 80166e0:	bfdc      	itt	le
 80166e2:	220a      	movle	r2, #10
 80166e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80166e8:	e7e1      	b.n	80166ae <_strtod_l+0x246>
 80166ea:	2300      	movs	r3, #0
 80166ec:	9307      	str	r3, [sp, #28]
 80166ee:	2201      	movs	r2, #1
 80166f0:	e77c      	b.n	80165ec <_strtod_l+0x184>
 80166f2:	f04f 0c00 	mov.w	ip, #0
 80166f6:	f108 0302 	add.w	r3, r8, #2
 80166fa:	931d      	str	r3, [sp, #116]	; 0x74
 80166fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016700:	e785      	b.n	801660e <_strtod_l+0x1a6>
 8016702:	f04f 0c01 	mov.w	ip, #1
 8016706:	e7f6      	b.n	80166f6 <_strtod_l+0x28e>
 8016708:	0801c0b0 	.word	0x0801c0b0
 801670c:	0801be60 	.word	0x0801be60
 8016710:	7ff00000 	.word	0x7ff00000
 8016714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016716:	1c59      	adds	r1, r3, #1
 8016718:	911d      	str	r1, [sp, #116]	; 0x74
 801671a:	785b      	ldrb	r3, [r3, #1]
 801671c:	2b30      	cmp	r3, #48	; 0x30
 801671e:	d0f9      	beq.n	8016714 <_strtod_l+0x2ac>
 8016720:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016724:	2908      	cmp	r1, #8
 8016726:	f63f af79 	bhi.w	801661c <_strtod_l+0x1b4>
 801672a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801672e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016730:	9308      	str	r3, [sp, #32]
 8016732:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016734:	1c59      	adds	r1, r3, #1
 8016736:	911d      	str	r1, [sp, #116]	; 0x74
 8016738:	785b      	ldrb	r3, [r3, #1]
 801673a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801673e:	2e09      	cmp	r6, #9
 8016740:	d937      	bls.n	80167b2 <_strtod_l+0x34a>
 8016742:	9e08      	ldr	r6, [sp, #32]
 8016744:	1b89      	subs	r1, r1, r6
 8016746:	2908      	cmp	r1, #8
 8016748:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801674c:	dc02      	bgt.n	8016754 <_strtod_l+0x2ec>
 801674e:	4576      	cmp	r6, lr
 8016750:	bfa8      	it	ge
 8016752:	4676      	movge	r6, lr
 8016754:	f1bc 0f00 	cmp.w	ip, #0
 8016758:	d000      	beq.n	801675c <_strtod_l+0x2f4>
 801675a:	4276      	negs	r6, r6
 801675c:	2d00      	cmp	r5, #0
 801675e:	d14f      	bne.n	8016800 <_strtod_l+0x398>
 8016760:	9904      	ldr	r1, [sp, #16]
 8016762:	4301      	orrs	r1, r0
 8016764:	f47f aec2 	bne.w	80164ec <_strtod_l+0x84>
 8016768:	2a00      	cmp	r2, #0
 801676a:	f47f aedb 	bne.w	8016524 <_strtod_l+0xbc>
 801676e:	2b69      	cmp	r3, #105	; 0x69
 8016770:	d027      	beq.n	80167c2 <_strtod_l+0x35a>
 8016772:	dc24      	bgt.n	80167be <_strtod_l+0x356>
 8016774:	2b49      	cmp	r3, #73	; 0x49
 8016776:	d024      	beq.n	80167c2 <_strtod_l+0x35a>
 8016778:	2b4e      	cmp	r3, #78	; 0x4e
 801677a:	f47f aed3 	bne.w	8016524 <_strtod_l+0xbc>
 801677e:	499e      	ldr	r1, [pc, #632]	; (80169f8 <_strtod_l+0x590>)
 8016780:	a81d      	add	r0, sp, #116	; 0x74
 8016782:	f001 fe41 	bl	8018408 <__match>
 8016786:	2800      	cmp	r0, #0
 8016788:	f43f aecc 	beq.w	8016524 <_strtod_l+0xbc>
 801678c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	2b28      	cmp	r3, #40	; 0x28
 8016792:	d12d      	bne.n	80167f0 <_strtod_l+0x388>
 8016794:	4999      	ldr	r1, [pc, #612]	; (80169fc <_strtod_l+0x594>)
 8016796:	aa20      	add	r2, sp, #128	; 0x80
 8016798:	a81d      	add	r0, sp, #116	; 0x74
 801679a:	f001 fe49 	bl	8018430 <__hexnan>
 801679e:	2805      	cmp	r0, #5
 80167a0:	d126      	bne.n	80167f0 <_strtod_l+0x388>
 80167a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80167a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80167a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80167ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80167b0:	e69c      	b.n	80164ec <_strtod_l+0x84>
 80167b2:	210a      	movs	r1, #10
 80167b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80167b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80167bc:	e7b9      	b.n	8016732 <_strtod_l+0x2ca>
 80167be:	2b6e      	cmp	r3, #110	; 0x6e
 80167c0:	e7db      	b.n	801677a <_strtod_l+0x312>
 80167c2:	498f      	ldr	r1, [pc, #572]	; (8016a00 <_strtod_l+0x598>)
 80167c4:	a81d      	add	r0, sp, #116	; 0x74
 80167c6:	f001 fe1f 	bl	8018408 <__match>
 80167ca:	2800      	cmp	r0, #0
 80167cc:	f43f aeaa 	beq.w	8016524 <_strtod_l+0xbc>
 80167d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80167d2:	498c      	ldr	r1, [pc, #560]	; (8016a04 <_strtod_l+0x59c>)
 80167d4:	3b01      	subs	r3, #1
 80167d6:	a81d      	add	r0, sp, #116	; 0x74
 80167d8:	931d      	str	r3, [sp, #116]	; 0x74
 80167da:	f001 fe15 	bl	8018408 <__match>
 80167de:	b910      	cbnz	r0, 80167e6 <_strtod_l+0x37e>
 80167e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80167e2:	3301      	adds	r3, #1
 80167e4:	931d      	str	r3, [sp, #116]	; 0x74
 80167e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8016a14 <_strtod_l+0x5ac>
 80167ea:	f04f 0a00 	mov.w	sl, #0
 80167ee:	e67d      	b.n	80164ec <_strtod_l+0x84>
 80167f0:	4885      	ldr	r0, [pc, #532]	; (8016a08 <_strtod_l+0x5a0>)
 80167f2:	f002 fd01 	bl	80191f8 <nan>
 80167f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80167fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80167fe:	e675      	b.n	80164ec <_strtod_l+0x84>
 8016800:	9b07      	ldr	r3, [sp, #28]
 8016802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016804:	1af3      	subs	r3, r6, r3
 8016806:	2f00      	cmp	r7, #0
 8016808:	bf08      	it	eq
 801680a:	462f      	moveq	r7, r5
 801680c:	2d10      	cmp	r5, #16
 801680e:	9308      	str	r3, [sp, #32]
 8016810:	46a8      	mov	r8, r5
 8016812:	bfa8      	it	ge
 8016814:	f04f 0810 	movge.w	r8, #16
 8016818:	f7e9 fe74 	bl	8000504 <__aeabi_ui2d>
 801681c:	2d09      	cmp	r5, #9
 801681e:	4682      	mov	sl, r0
 8016820:	468b      	mov	fp, r1
 8016822:	dd13      	ble.n	801684c <_strtod_l+0x3e4>
 8016824:	4b79      	ldr	r3, [pc, #484]	; (8016a0c <_strtod_l+0x5a4>)
 8016826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801682a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801682e:	f7e9 fee3 	bl	80005f8 <__aeabi_dmul>
 8016832:	4682      	mov	sl, r0
 8016834:	4648      	mov	r0, r9
 8016836:	468b      	mov	fp, r1
 8016838:	f7e9 fe64 	bl	8000504 <__aeabi_ui2d>
 801683c:	4602      	mov	r2, r0
 801683e:	460b      	mov	r3, r1
 8016840:	4650      	mov	r0, sl
 8016842:	4659      	mov	r1, fp
 8016844:	f7e9 fd22 	bl	800028c <__adddf3>
 8016848:	4682      	mov	sl, r0
 801684a:	468b      	mov	fp, r1
 801684c:	2d0f      	cmp	r5, #15
 801684e:	dc38      	bgt.n	80168c2 <_strtod_l+0x45a>
 8016850:	9b08      	ldr	r3, [sp, #32]
 8016852:	2b00      	cmp	r3, #0
 8016854:	f43f ae4a 	beq.w	80164ec <_strtod_l+0x84>
 8016858:	dd24      	ble.n	80168a4 <_strtod_l+0x43c>
 801685a:	2b16      	cmp	r3, #22
 801685c:	dc0b      	bgt.n	8016876 <_strtod_l+0x40e>
 801685e:	4d6b      	ldr	r5, [pc, #428]	; (8016a0c <_strtod_l+0x5a4>)
 8016860:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016864:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016868:	4652      	mov	r2, sl
 801686a:	465b      	mov	r3, fp
 801686c:	f7e9 fec4 	bl	80005f8 <__aeabi_dmul>
 8016870:	4682      	mov	sl, r0
 8016872:	468b      	mov	fp, r1
 8016874:	e63a      	b.n	80164ec <_strtod_l+0x84>
 8016876:	9a08      	ldr	r2, [sp, #32]
 8016878:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801687c:	4293      	cmp	r3, r2
 801687e:	db20      	blt.n	80168c2 <_strtod_l+0x45a>
 8016880:	4c62      	ldr	r4, [pc, #392]	; (8016a0c <_strtod_l+0x5a4>)
 8016882:	f1c5 050f 	rsb	r5, r5, #15
 8016886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801688a:	4652      	mov	r2, sl
 801688c:	465b      	mov	r3, fp
 801688e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016892:	f7e9 feb1 	bl	80005f8 <__aeabi_dmul>
 8016896:	9b08      	ldr	r3, [sp, #32]
 8016898:	1b5d      	subs	r5, r3, r5
 801689a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801689e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80168a2:	e7e3      	b.n	801686c <_strtod_l+0x404>
 80168a4:	9b08      	ldr	r3, [sp, #32]
 80168a6:	3316      	adds	r3, #22
 80168a8:	db0b      	blt.n	80168c2 <_strtod_l+0x45a>
 80168aa:	9b07      	ldr	r3, [sp, #28]
 80168ac:	4a57      	ldr	r2, [pc, #348]	; (8016a0c <_strtod_l+0x5a4>)
 80168ae:	1b9e      	subs	r6, r3, r6
 80168b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80168b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80168b8:	4650      	mov	r0, sl
 80168ba:	4659      	mov	r1, fp
 80168bc:	f7e9 ffc6 	bl	800084c <__aeabi_ddiv>
 80168c0:	e7d6      	b.n	8016870 <_strtod_l+0x408>
 80168c2:	9b08      	ldr	r3, [sp, #32]
 80168c4:	eba5 0808 	sub.w	r8, r5, r8
 80168c8:	4498      	add	r8, r3
 80168ca:	f1b8 0f00 	cmp.w	r8, #0
 80168ce:	dd71      	ble.n	80169b4 <_strtod_l+0x54c>
 80168d0:	f018 030f 	ands.w	r3, r8, #15
 80168d4:	d00a      	beq.n	80168ec <_strtod_l+0x484>
 80168d6:	494d      	ldr	r1, [pc, #308]	; (8016a0c <_strtod_l+0x5a4>)
 80168d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168dc:	4652      	mov	r2, sl
 80168de:	465b      	mov	r3, fp
 80168e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168e4:	f7e9 fe88 	bl	80005f8 <__aeabi_dmul>
 80168e8:	4682      	mov	sl, r0
 80168ea:	468b      	mov	fp, r1
 80168ec:	f038 080f 	bics.w	r8, r8, #15
 80168f0:	d04d      	beq.n	801698e <_strtod_l+0x526>
 80168f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80168f6:	dd22      	ble.n	801693e <_strtod_l+0x4d6>
 80168f8:	2500      	movs	r5, #0
 80168fa:	462e      	mov	r6, r5
 80168fc:	9509      	str	r5, [sp, #36]	; 0x24
 80168fe:	9507      	str	r5, [sp, #28]
 8016900:	2322      	movs	r3, #34	; 0x22
 8016902:	f8df b110 	ldr.w	fp, [pc, #272]	; 8016a14 <_strtod_l+0x5ac>
 8016906:	6023      	str	r3, [r4, #0]
 8016908:	f04f 0a00 	mov.w	sl, #0
 801690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801690e:	2b00      	cmp	r3, #0
 8016910:	f43f adec 	beq.w	80164ec <_strtod_l+0x84>
 8016914:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016916:	4620      	mov	r0, r4
 8016918:	f001 fe88 	bl	801862c <_Bfree>
 801691c:	9907      	ldr	r1, [sp, #28]
 801691e:	4620      	mov	r0, r4
 8016920:	f001 fe84 	bl	801862c <_Bfree>
 8016924:	4631      	mov	r1, r6
 8016926:	4620      	mov	r0, r4
 8016928:	f001 fe80 	bl	801862c <_Bfree>
 801692c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801692e:	4620      	mov	r0, r4
 8016930:	f001 fe7c 	bl	801862c <_Bfree>
 8016934:	4629      	mov	r1, r5
 8016936:	4620      	mov	r0, r4
 8016938:	f001 fe78 	bl	801862c <_Bfree>
 801693c:	e5d6      	b.n	80164ec <_strtod_l+0x84>
 801693e:	2300      	movs	r3, #0
 8016940:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016944:	4650      	mov	r0, sl
 8016946:	4659      	mov	r1, fp
 8016948:	4699      	mov	r9, r3
 801694a:	f1b8 0f01 	cmp.w	r8, #1
 801694e:	dc21      	bgt.n	8016994 <_strtod_l+0x52c>
 8016950:	b10b      	cbz	r3, 8016956 <_strtod_l+0x4ee>
 8016952:	4682      	mov	sl, r0
 8016954:	468b      	mov	fp, r1
 8016956:	4b2e      	ldr	r3, [pc, #184]	; (8016a10 <_strtod_l+0x5a8>)
 8016958:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801695c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016960:	4652      	mov	r2, sl
 8016962:	465b      	mov	r3, fp
 8016964:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016968:	f7e9 fe46 	bl	80005f8 <__aeabi_dmul>
 801696c:	4b29      	ldr	r3, [pc, #164]	; (8016a14 <_strtod_l+0x5ac>)
 801696e:	460a      	mov	r2, r1
 8016970:	400b      	ands	r3, r1
 8016972:	4929      	ldr	r1, [pc, #164]	; (8016a18 <_strtod_l+0x5b0>)
 8016974:	428b      	cmp	r3, r1
 8016976:	4682      	mov	sl, r0
 8016978:	d8be      	bhi.n	80168f8 <_strtod_l+0x490>
 801697a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801697e:	428b      	cmp	r3, r1
 8016980:	bf86      	itte	hi
 8016982:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016a1c <_strtod_l+0x5b4>
 8016986:	f04f 3aff 	movhi.w	sl, #4294967295
 801698a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801698e:	2300      	movs	r3, #0
 8016990:	9304      	str	r3, [sp, #16]
 8016992:	e081      	b.n	8016a98 <_strtod_l+0x630>
 8016994:	f018 0f01 	tst.w	r8, #1
 8016998:	d007      	beq.n	80169aa <_strtod_l+0x542>
 801699a:	4b1d      	ldr	r3, [pc, #116]	; (8016a10 <_strtod_l+0x5a8>)
 801699c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80169a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a4:	f7e9 fe28 	bl	80005f8 <__aeabi_dmul>
 80169a8:	2301      	movs	r3, #1
 80169aa:	f109 0901 	add.w	r9, r9, #1
 80169ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80169b2:	e7ca      	b.n	801694a <_strtod_l+0x4e2>
 80169b4:	d0eb      	beq.n	801698e <_strtod_l+0x526>
 80169b6:	f1c8 0800 	rsb	r8, r8, #0
 80169ba:	f018 020f 	ands.w	r2, r8, #15
 80169be:	d00a      	beq.n	80169d6 <_strtod_l+0x56e>
 80169c0:	4b12      	ldr	r3, [pc, #72]	; (8016a0c <_strtod_l+0x5a4>)
 80169c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80169c6:	4650      	mov	r0, sl
 80169c8:	4659      	mov	r1, fp
 80169ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ce:	f7e9 ff3d 	bl	800084c <__aeabi_ddiv>
 80169d2:	4682      	mov	sl, r0
 80169d4:	468b      	mov	fp, r1
 80169d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80169da:	d0d8      	beq.n	801698e <_strtod_l+0x526>
 80169dc:	f1b8 0f1f 	cmp.w	r8, #31
 80169e0:	dd1e      	ble.n	8016a20 <_strtod_l+0x5b8>
 80169e2:	2500      	movs	r5, #0
 80169e4:	462e      	mov	r6, r5
 80169e6:	9509      	str	r5, [sp, #36]	; 0x24
 80169e8:	9507      	str	r5, [sp, #28]
 80169ea:	2322      	movs	r3, #34	; 0x22
 80169ec:	f04f 0a00 	mov.w	sl, #0
 80169f0:	f04f 0b00 	mov.w	fp, #0
 80169f4:	6023      	str	r3, [r4, #0]
 80169f6:	e789      	b.n	801690c <_strtod_l+0x4a4>
 80169f8:	0801be31 	.word	0x0801be31
 80169fc:	0801be74 	.word	0x0801be74
 8016a00:	0801be29 	.word	0x0801be29
 8016a04:	0801bfb4 	.word	0x0801bfb4
 8016a08:	0801c270 	.word	0x0801c270
 8016a0c:	0801c150 	.word	0x0801c150
 8016a10:	0801c128 	.word	0x0801c128
 8016a14:	7ff00000 	.word	0x7ff00000
 8016a18:	7ca00000 	.word	0x7ca00000
 8016a1c:	7fefffff 	.word	0x7fefffff
 8016a20:	f018 0310 	ands.w	r3, r8, #16
 8016a24:	bf18      	it	ne
 8016a26:	236a      	movne	r3, #106	; 0x6a
 8016a28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016de0 <_strtod_l+0x978>
 8016a2c:	9304      	str	r3, [sp, #16]
 8016a2e:	4650      	mov	r0, sl
 8016a30:	4659      	mov	r1, fp
 8016a32:	2300      	movs	r3, #0
 8016a34:	f018 0f01 	tst.w	r8, #1
 8016a38:	d004      	beq.n	8016a44 <_strtod_l+0x5dc>
 8016a3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016a3e:	f7e9 fddb 	bl	80005f8 <__aeabi_dmul>
 8016a42:	2301      	movs	r3, #1
 8016a44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016a48:	f109 0908 	add.w	r9, r9, #8
 8016a4c:	d1f2      	bne.n	8016a34 <_strtod_l+0x5cc>
 8016a4e:	b10b      	cbz	r3, 8016a54 <_strtod_l+0x5ec>
 8016a50:	4682      	mov	sl, r0
 8016a52:	468b      	mov	fp, r1
 8016a54:	9b04      	ldr	r3, [sp, #16]
 8016a56:	b1bb      	cbz	r3, 8016a88 <_strtod_l+0x620>
 8016a58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016a5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	4659      	mov	r1, fp
 8016a64:	dd10      	ble.n	8016a88 <_strtod_l+0x620>
 8016a66:	2b1f      	cmp	r3, #31
 8016a68:	f340 8128 	ble.w	8016cbc <_strtod_l+0x854>
 8016a6c:	2b34      	cmp	r3, #52	; 0x34
 8016a6e:	bfde      	ittt	le
 8016a70:	3b20      	suble	r3, #32
 8016a72:	f04f 32ff 	movle.w	r2, #4294967295
 8016a76:	fa02 f303 	lslle.w	r3, r2, r3
 8016a7a:	f04f 0a00 	mov.w	sl, #0
 8016a7e:	bfcc      	ite	gt
 8016a80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016a84:	ea03 0b01 	andle.w	fp, r3, r1
 8016a88:	2200      	movs	r2, #0
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	4650      	mov	r0, sl
 8016a8e:	4659      	mov	r1, fp
 8016a90:	f7ea f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 8016a94:	2800      	cmp	r0, #0
 8016a96:	d1a4      	bne.n	80169e2 <_strtod_l+0x57a>
 8016a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a9a:	9300      	str	r3, [sp, #0]
 8016a9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a9e:	462b      	mov	r3, r5
 8016aa0:	463a      	mov	r2, r7
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	f001 fe2e 	bl	8018704 <__s2b>
 8016aa8:	9009      	str	r0, [sp, #36]	; 0x24
 8016aaa:	2800      	cmp	r0, #0
 8016aac:	f43f af24 	beq.w	80168f8 <_strtod_l+0x490>
 8016ab0:	9b07      	ldr	r3, [sp, #28]
 8016ab2:	1b9e      	subs	r6, r3, r6
 8016ab4:	9b08      	ldr	r3, [sp, #32]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	bfb4      	ite	lt
 8016aba:	4633      	movlt	r3, r6
 8016abc:	2300      	movge	r3, #0
 8016abe:	9310      	str	r3, [sp, #64]	; 0x40
 8016ac0:	9b08      	ldr	r3, [sp, #32]
 8016ac2:	2500      	movs	r5, #0
 8016ac4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ac8:	9318      	str	r3, [sp, #96]	; 0x60
 8016aca:	462e      	mov	r6, r5
 8016acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ace:	4620      	mov	r0, r4
 8016ad0:	6859      	ldr	r1, [r3, #4]
 8016ad2:	f001 fd6b 	bl	80185ac <_Balloc>
 8016ad6:	9007      	str	r0, [sp, #28]
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	f43f af11 	beq.w	8016900 <_strtod_l+0x498>
 8016ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae0:	691a      	ldr	r2, [r3, #16]
 8016ae2:	3202      	adds	r2, #2
 8016ae4:	f103 010c 	add.w	r1, r3, #12
 8016ae8:	0092      	lsls	r2, r2, #2
 8016aea:	300c      	adds	r0, #12
 8016aec:	f7fe fce0 	bl	80154b0 <memcpy>
 8016af0:	ec4b ab10 	vmov	d0, sl, fp
 8016af4:	aa20      	add	r2, sp, #128	; 0x80
 8016af6:	a91f      	add	r1, sp, #124	; 0x7c
 8016af8:	4620      	mov	r0, r4
 8016afa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016afe:	f002 f93d 	bl	8018d7c <__d2b>
 8016b02:	901e      	str	r0, [sp, #120]	; 0x78
 8016b04:	2800      	cmp	r0, #0
 8016b06:	f43f aefb 	beq.w	8016900 <_strtod_l+0x498>
 8016b0a:	2101      	movs	r1, #1
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f001 fe93 	bl	8018838 <__i2b>
 8016b12:	4606      	mov	r6, r0
 8016b14:	2800      	cmp	r0, #0
 8016b16:	f43f aef3 	beq.w	8016900 <_strtod_l+0x498>
 8016b1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b1c:	9904      	ldr	r1, [sp, #16]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	bfab      	itete	ge
 8016b22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8016b24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8016b26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016b28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8016b2c:	bfac      	ite	ge
 8016b2e:	eb03 0902 	addge.w	r9, r3, r2
 8016b32:	1ad7      	sublt	r7, r2, r3
 8016b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b36:	eba3 0801 	sub.w	r8, r3, r1
 8016b3a:	4490      	add	r8, r2
 8016b3c:	4ba3      	ldr	r3, [pc, #652]	; (8016dcc <_strtod_l+0x964>)
 8016b3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016b42:	4598      	cmp	r8, r3
 8016b44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016b48:	f280 80cc 	bge.w	8016ce4 <_strtod_l+0x87c>
 8016b4c:	eba3 0308 	sub.w	r3, r3, r8
 8016b50:	2b1f      	cmp	r3, #31
 8016b52:	eba2 0203 	sub.w	r2, r2, r3
 8016b56:	f04f 0101 	mov.w	r1, #1
 8016b5a:	f300 80b6 	bgt.w	8016cca <_strtod_l+0x862>
 8016b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b62:	9311      	str	r3, [sp, #68]	; 0x44
 8016b64:	2300      	movs	r3, #0
 8016b66:	930c      	str	r3, [sp, #48]	; 0x30
 8016b68:	eb09 0802 	add.w	r8, r9, r2
 8016b6c:	9b04      	ldr	r3, [sp, #16]
 8016b6e:	45c1      	cmp	r9, r8
 8016b70:	4417      	add	r7, r2
 8016b72:	441f      	add	r7, r3
 8016b74:	464b      	mov	r3, r9
 8016b76:	bfa8      	it	ge
 8016b78:	4643      	movge	r3, r8
 8016b7a:	42bb      	cmp	r3, r7
 8016b7c:	bfa8      	it	ge
 8016b7e:	463b      	movge	r3, r7
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	bfc2      	ittt	gt
 8016b84:	eba8 0803 	subgt.w	r8, r8, r3
 8016b88:	1aff      	subgt	r7, r7, r3
 8016b8a:	eba9 0903 	subgt.w	r9, r9, r3
 8016b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	dd17      	ble.n	8016bc4 <_strtod_l+0x75c>
 8016b94:	4631      	mov	r1, r6
 8016b96:	461a      	mov	r2, r3
 8016b98:	4620      	mov	r0, r4
 8016b9a:	f001 ff09 	bl	80189b0 <__pow5mult>
 8016b9e:	4606      	mov	r6, r0
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	f43f aead 	beq.w	8016900 <_strtod_l+0x498>
 8016ba6:	4601      	mov	r1, r0
 8016ba8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016baa:	4620      	mov	r0, r4
 8016bac:	f001 fe5a 	bl	8018864 <__multiply>
 8016bb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	f43f aea4 	beq.w	8016900 <_strtod_l+0x498>
 8016bb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f001 fd36 	bl	801862c <_Bfree>
 8016bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bc2:	931e      	str	r3, [sp, #120]	; 0x78
 8016bc4:	f1b8 0f00 	cmp.w	r8, #0
 8016bc8:	f300 8091 	bgt.w	8016cee <_strtod_l+0x886>
 8016bcc:	9b08      	ldr	r3, [sp, #32]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	dd08      	ble.n	8016be4 <_strtod_l+0x77c>
 8016bd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016bd4:	9907      	ldr	r1, [sp, #28]
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	f001 feea 	bl	80189b0 <__pow5mult>
 8016bdc:	9007      	str	r0, [sp, #28]
 8016bde:	2800      	cmp	r0, #0
 8016be0:	f43f ae8e 	beq.w	8016900 <_strtod_l+0x498>
 8016be4:	2f00      	cmp	r7, #0
 8016be6:	dd08      	ble.n	8016bfa <_strtod_l+0x792>
 8016be8:	9907      	ldr	r1, [sp, #28]
 8016bea:	463a      	mov	r2, r7
 8016bec:	4620      	mov	r0, r4
 8016bee:	f001 ff39 	bl	8018a64 <__lshift>
 8016bf2:	9007      	str	r0, [sp, #28]
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	f43f ae83 	beq.w	8016900 <_strtod_l+0x498>
 8016bfa:	f1b9 0f00 	cmp.w	r9, #0
 8016bfe:	dd08      	ble.n	8016c12 <_strtod_l+0x7aa>
 8016c00:	4631      	mov	r1, r6
 8016c02:	464a      	mov	r2, r9
 8016c04:	4620      	mov	r0, r4
 8016c06:	f001 ff2d 	bl	8018a64 <__lshift>
 8016c0a:	4606      	mov	r6, r0
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	f43f ae77 	beq.w	8016900 <_strtod_l+0x498>
 8016c12:	9a07      	ldr	r2, [sp, #28]
 8016c14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016c16:	4620      	mov	r0, r4
 8016c18:	f001 ffac 	bl	8018b74 <__mdiff>
 8016c1c:	4605      	mov	r5, r0
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	f43f ae6e 	beq.w	8016900 <_strtod_l+0x498>
 8016c24:	68c3      	ldr	r3, [r0, #12]
 8016c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c28:	2300      	movs	r3, #0
 8016c2a:	60c3      	str	r3, [r0, #12]
 8016c2c:	4631      	mov	r1, r6
 8016c2e:	f001 ff85 	bl	8018b3c <__mcmp>
 8016c32:	2800      	cmp	r0, #0
 8016c34:	da65      	bge.n	8016d02 <_strtod_l+0x89a>
 8016c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c38:	ea53 030a 	orrs.w	r3, r3, sl
 8016c3c:	f040 8087 	bne.w	8016d4e <_strtod_l+0x8e6>
 8016c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	f040 8082 	bne.w	8016d4e <_strtod_l+0x8e6>
 8016c4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016c4e:	0d1b      	lsrs	r3, r3, #20
 8016c50:	051b      	lsls	r3, r3, #20
 8016c52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016c56:	d97a      	bls.n	8016d4e <_strtod_l+0x8e6>
 8016c58:	696b      	ldr	r3, [r5, #20]
 8016c5a:	b913      	cbnz	r3, 8016c62 <_strtod_l+0x7fa>
 8016c5c:	692b      	ldr	r3, [r5, #16]
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	dd75      	ble.n	8016d4e <_strtod_l+0x8e6>
 8016c62:	4629      	mov	r1, r5
 8016c64:	2201      	movs	r2, #1
 8016c66:	4620      	mov	r0, r4
 8016c68:	f001 fefc 	bl	8018a64 <__lshift>
 8016c6c:	4631      	mov	r1, r6
 8016c6e:	4605      	mov	r5, r0
 8016c70:	f001 ff64 	bl	8018b3c <__mcmp>
 8016c74:	2800      	cmp	r0, #0
 8016c76:	dd6a      	ble.n	8016d4e <_strtod_l+0x8e6>
 8016c78:	9904      	ldr	r1, [sp, #16]
 8016c7a:	4a55      	ldr	r2, [pc, #340]	; (8016dd0 <_strtod_l+0x968>)
 8016c7c:	465b      	mov	r3, fp
 8016c7e:	2900      	cmp	r1, #0
 8016c80:	f000 8085 	beq.w	8016d8e <_strtod_l+0x926>
 8016c84:	ea02 010b 	and.w	r1, r2, fp
 8016c88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016c8c:	dc7f      	bgt.n	8016d8e <_strtod_l+0x926>
 8016c8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016c92:	f77f aeaa 	ble.w	80169ea <_strtod_l+0x582>
 8016c96:	4a4f      	ldr	r2, [pc, #316]	; (8016dd4 <_strtod_l+0x96c>)
 8016c98:	2300      	movs	r3, #0
 8016c9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8016c9e:	4650      	mov	r0, sl
 8016ca0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016ca4:	4659      	mov	r1, fp
 8016ca6:	f7e9 fca7 	bl	80005f8 <__aeabi_dmul>
 8016caa:	460b      	mov	r3, r1
 8016cac:	4303      	orrs	r3, r0
 8016cae:	bf08      	it	eq
 8016cb0:	2322      	moveq	r3, #34	; 0x22
 8016cb2:	4682      	mov	sl, r0
 8016cb4:	468b      	mov	fp, r1
 8016cb6:	bf08      	it	eq
 8016cb8:	6023      	streq	r3, [r4, #0]
 8016cba:	e62b      	b.n	8016914 <_strtod_l+0x4ac>
 8016cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8016cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8016cc4:	ea03 0a0a 	and.w	sl, r3, sl
 8016cc8:	e6de      	b.n	8016a88 <_strtod_l+0x620>
 8016cca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016cce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016cd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016cd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016cda:	fa01 f308 	lsl.w	r3, r1, r8
 8016cde:	930c      	str	r3, [sp, #48]	; 0x30
 8016ce0:	9111      	str	r1, [sp, #68]	; 0x44
 8016ce2:	e741      	b.n	8016b68 <_strtod_l+0x700>
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8016ce8:	2301      	movs	r3, #1
 8016cea:	9311      	str	r3, [sp, #68]	; 0x44
 8016cec:	e73c      	b.n	8016b68 <_strtod_l+0x700>
 8016cee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016cf0:	4642      	mov	r2, r8
 8016cf2:	4620      	mov	r0, r4
 8016cf4:	f001 feb6 	bl	8018a64 <__lshift>
 8016cf8:	901e      	str	r0, [sp, #120]	; 0x78
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	f47f af66 	bne.w	8016bcc <_strtod_l+0x764>
 8016d00:	e5fe      	b.n	8016900 <_strtod_l+0x498>
 8016d02:	465f      	mov	r7, fp
 8016d04:	d16e      	bne.n	8016de4 <_strtod_l+0x97c>
 8016d06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d0c:	b342      	cbz	r2, 8016d60 <_strtod_l+0x8f8>
 8016d0e:	4a32      	ldr	r2, [pc, #200]	; (8016dd8 <_strtod_l+0x970>)
 8016d10:	4293      	cmp	r3, r2
 8016d12:	d128      	bne.n	8016d66 <_strtod_l+0x8fe>
 8016d14:	9b04      	ldr	r3, [sp, #16]
 8016d16:	4650      	mov	r0, sl
 8016d18:	b1eb      	cbz	r3, 8016d56 <_strtod_l+0x8ee>
 8016d1a:	4a2d      	ldr	r2, [pc, #180]	; (8016dd0 <_strtod_l+0x968>)
 8016d1c:	403a      	ands	r2, r7
 8016d1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016d22:	f04f 31ff 	mov.w	r1, #4294967295
 8016d26:	d819      	bhi.n	8016d5c <_strtod_l+0x8f4>
 8016d28:	0d12      	lsrs	r2, r2, #20
 8016d2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8016d32:	4298      	cmp	r0, r3
 8016d34:	d117      	bne.n	8016d66 <_strtod_l+0x8fe>
 8016d36:	4b29      	ldr	r3, [pc, #164]	; (8016ddc <_strtod_l+0x974>)
 8016d38:	429f      	cmp	r7, r3
 8016d3a:	d102      	bne.n	8016d42 <_strtod_l+0x8da>
 8016d3c:	3001      	adds	r0, #1
 8016d3e:	f43f addf 	beq.w	8016900 <_strtod_l+0x498>
 8016d42:	4b23      	ldr	r3, [pc, #140]	; (8016dd0 <_strtod_l+0x968>)
 8016d44:	403b      	ands	r3, r7
 8016d46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016d4a:	f04f 0a00 	mov.w	sl, #0
 8016d4e:	9b04      	ldr	r3, [sp, #16]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d1a0      	bne.n	8016c96 <_strtod_l+0x82e>
 8016d54:	e5de      	b.n	8016914 <_strtod_l+0x4ac>
 8016d56:	f04f 33ff 	mov.w	r3, #4294967295
 8016d5a:	e7ea      	b.n	8016d32 <_strtod_l+0x8ca>
 8016d5c:	460b      	mov	r3, r1
 8016d5e:	e7e8      	b.n	8016d32 <_strtod_l+0x8ca>
 8016d60:	ea53 030a 	orrs.w	r3, r3, sl
 8016d64:	d088      	beq.n	8016c78 <_strtod_l+0x810>
 8016d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d68:	b1db      	cbz	r3, 8016da2 <_strtod_l+0x93a>
 8016d6a:	423b      	tst	r3, r7
 8016d6c:	d0ef      	beq.n	8016d4e <_strtod_l+0x8e6>
 8016d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d70:	9a04      	ldr	r2, [sp, #16]
 8016d72:	4650      	mov	r0, sl
 8016d74:	4659      	mov	r1, fp
 8016d76:	b1c3      	cbz	r3, 8016daa <_strtod_l+0x942>
 8016d78:	f7ff fb58 	bl	801642c <sulp>
 8016d7c:	4602      	mov	r2, r0
 8016d7e:	460b      	mov	r3, r1
 8016d80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016d84:	f7e9 fa82 	bl	800028c <__adddf3>
 8016d88:	4682      	mov	sl, r0
 8016d8a:	468b      	mov	fp, r1
 8016d8c:	e7df      	b.n	8016d4e <_strtod_l+0x8e6>
 8016d8e:	4013      	ands	r3, r2
 8016d90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016d94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016d98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016d9c:	f04f 3aff 	mov.w	sl, #4294967295
 8016da0:	e7d5      	b.n	8016d4e <_strtod_l+0x8e6>
 8016da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016da4:	ea13 0f0a 	tst.w	r3, sl
 8016da8:	e7e0      	b.n	8016d6c <_strtod_l+0x904>
 8016daa:	f7ff fb3f 	bl	801642c <sulp>
 8016dae:	4602      	mov	r2, r0
 8016db0:	460b      	mov	r3, r1
 8016db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016db6:	f7e9 fa67 	bl	8000288 <__aeabi_dsub>
 8016dba:	2200      	movs	r2, #0
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	4682      	mov	sl, r0
 8016dc0:	468b      	mov	fp, r1
 8016dc2:	f7e9 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d0c1      	beq.n	8016d4e <_strtod_l+0x8e6>
 8016dca:	e60e      	b.n	80169ea <_strtod_l+0x582>
 8016dcc:	fffffc02 	.word	0xfffffc02
 8016dd0:	7ff00000 	.word	0x7ff00000
 8016dd4:	39500000 	.word	0x39500000
 8016dd8:	000fffff 	.word	0x000fffff
 8016ddc:	7fefffff 	.word	0x7fefffff
 8016de0:	0801be88 	.word	0x0801be88
 8016de4:	4631      	mov	r1, r6
 8016de6:	4628      	mov	r0, r5
 8016de8:	f002 f824 	bl	8018e34 <__ratio>
 8016dec:	ec59 8b10 	vmov	r8, r9, d0
 8016df0:	ee10 0a10 	vmov	r0, s0
 8016df4:	2200      	movs	r2, #0
 8016df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016dfa:	4649      	mov	r1, r9
 8016dfc:	f7e9 fe78 	bl	8000af0 <__aeabi_dcmple>
 8016e00:	2800      	cmp	r0, #0
 8016e02:	d07c      	beq.n	8016efe <_strtod_l+0xa96>
 8016e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d04c      	beq.n	8016ea4 <_strtod_l+0xa3c>
 8016e0a:	4b95      	ldr	r3, [pc, #596]	; (8017060 <_strtod_l+0xbf8>)
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016e12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017060 <_strtod_l+0xbf8>
 8016e16:	f04f 0800 	mov.w	r8, #0
 8016e1a:	4b92      	ldr	r3, [pc, #584]	; (8017064 <_strtod_l+0xbfc>)
 8016e1c:	403b      	ands	r3, r7
 8016e1e:	9311      	str	r3, [sp, #68]	; 0x44
 8016e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016e22:	4b91      	ldr	r3, [pc, #580]	; (8017068 <_strtod_l+0xc00>)
 8016e24:	429a      	cmp	r2, r3
 8016e26:	f040 80b2 	bne.w	8016f8e <_strtod_l+0xb26>
 8016e2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016e36:	ec4b ab10 	vmov	d0, sl, fp
 8016e3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016e3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e42:	f001 ff1f 	bl	8018c84 <__ulp>
 8016e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e4a:	ec53 2b10 	vmov	r2, r3, d0
 8016e4e:	f7e9 fbd3 	bl	80005f8 <__aeabi_dmul>
 8016e52:	4652      	mov	r2, sl
 8016e54:	465b      	mov	r3, fp
 8016e56:	f7e9 fa19 	bl	800028c <__adddf3>
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	4981      	ldr	r1, [pc, #516]	; (8017064 <_strtod_l+0xbfc>)
 8016e5e:	4a83      	ldr	r2, [pc, #524]	; (801706c <_strtod_l+0xc04>)
 8016e60:	4019      	ands	r1, r3
 8016e62:	4291      	cmp	r1, r2
 8016e64:	4682      	mov	sl, r0
 8016e66:	d95e      	bls.n	8016f26 <_strtod_l+0xabe>
 8016e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016e6e:	4293      	cmp	r3, r2
 8016e70:	d103      	bne.n	8016e7a <_strtod_l+0xa12>
 8016e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e74:	3301      	adds	r3, #1
 8016e76:	f43f ad43 	beq.w	8016900 <_strtod_l+0x498>
 8016e7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017078 <_strtod_l+0xc10>
 8016e7e:	f04f 3aff 	mov.w	sl, #4294967295
 8016e82:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016e84:	4620      	mov	r0, r4
 8016e86:	f001 fbd1 	bl	801862c <_Bfree>
 8016e8a:	9907      	ldr	r1, [sp, #28]
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	f001 fbcd 	bl	801862c <_Bfree>
 8016e92:	4631      	mov	r1, r6
 8016e94:	4620      	mov	r0, r4
 8016e96:	f001 fbc9 	bl	801862c <_Bfree>
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f001 fbc5 	bl	801862c <_Bfree>
 8016ea2:	e613      	b.n	8016acc <_strtod_l+0x664>
 8016ea4:	f1ba 0f00 	cmp.w	sl, #0
 8016ea8:	d11b      	bne.n	8016ee2 <_strtod_l+0xa7a>
 8016eaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016eae:	b9f3      	cbnz	r3, 8016eee <_strtod_l+0xa86>
 8016eb0:	4b6b      	ldr	r3, [pc, #428]	; (8017060 <_strtod_l+0xbf8>)
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	4649      	mov	r1, r9
 8016eb8:	f7e9 fe10 	bl	8000adc <__aeabi_dcmplt>
 8016ebc:	b9d0      	cbnz	r0, 8016ef4 <_strtod_l+0xa8c>
 8016ebe:	4640      	mov	r0, r8
 8016ec0:	4649      	mov	r1, r9
 8016ec2:	4b6b      	ldr	r3, [pc, #428]	; (8017070 <_strtod_l+0xc08>)
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	f7e9 fb97 	bl	80005f8 <__aeabi_dmul>
 8016eca:	4680      	mov	r8, r0
 8016ecc:	4689      	mov	r9, r1
 8016ece:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016ed2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016ed6:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ed8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016edc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016ee0:	e79b      	b.n	8016e1a <_strtod_l+0x9b2>
 8016ee2:	f1ba 0f01 	cmp.w	sl, #1
 8016ee6:	d102      	bne.n	8016eee <_strtod_l+0xa86>
 8016ee8:	2f00      	cmp	r7, #0
 8016eea:	f43f ad7e 	beq.w	80169ea <_strtod_l+0x582>
 8016eee:	4b61      	ldr	r3, [pc, #388]	; (8017074 <_strtod_l+0xc0c>)
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	e78c      	b.n	8016e0e <_strtod_l+0x9a6>
 8016ef4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017070 <_strtod_l+0xc08>
 8016ef8:	f04f 0800 	mov.w	r8, #0
 8016efc:	e7e7      	b.n	8016ece <_strtod_l+0xa66>
 8016efe:	4b5c      	ldr	r3, [pc, #368]	; (8017070 <_strtod_l+0xc08>)
 8016f00:	4640      	mov	r0, r8
 8016f02:	4649      	mov	r1, r9
 8016f04:	2200      	movs	r2, #0
 8016f06:	f7e9 fb77 	bl	80005f8 <__aeabi_dmul>
 8016f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f0c:	4680      	mov	r8, r0
 8016f0e:	4689      	mov	r9, r1
 8016f10:	b933      	cbnz	r3, 8016f20 <_strtod_l+0xab8>
 8016f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f16:	9012      	str	r0, [sp, #72]	; 0x48
 8016f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016f1e:	e7dd      	b.n	8016edc <_strtod_l+0xa74>
 8016f20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016f24:	e7f9      	b.n	8016f1a <_strtod_l+0xab2>
 8016f26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016f2a:	9b04      	ldr	r3, [sp, #16]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d1a8      	bne.n	8016e82 <_strtod_l+0xa1a>
 8016f30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016f34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f36:	0d1b      	lsrs	r3, r3, #20
 8016f38:	051b      	lsls	r3, r3, #20
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d1a1      	bne.n	8016e82 <_strtod_l+0xa1a>
 8016f3e:	4640      	mov	r0, r8
 8016f40:	4649      	mov	r1, r9
 8016f42:	f7e9 feb9 	bl	8000cb8 <__aeabi_d2lz>
 8016f46:	f7e9 fb29 	bl	800059c <__aeabi_l2d>
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	4640      	mov	r0, r8
 8016f50:	4649      	mov	r1, r9
 8016f52:	f7e9 f999 	bl	8000288 <__aeabi_dsub>
 8016f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f5c:	ea43 030a 	orr.w	r3, r3, sl
 8016f60:	4313      	orrs	r3, r2
 8016f62:	4680      	mov	r8, r0
 8016f64:	4689      	mov	r9, r1
 8016f66:	d053      	beq.n	8017010 <_strtod_l+0xba8>
 8016f68:	a335      	add	r3, pc, #212	; (adr r3, 8017040 <_strtod_l+0xbd8>)
 8016f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f6e:	f7e9 fdb5 	bl	8000adc <__aeabi_dcmplt>
 8016f72:	2800      	cmp	r0, #0
 8016f74:	f47f acce 	bne.w	8016914 <_strtod_l+0x4ac>
 8016f78:	a333      	add	r3, pc, #204	; (adr r3, 8017048 <_strtod_l+0xbe0>)
 8016f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7e:	4640      	mov	r0, r8
 8016f80:	4649      	mov	r1, r9
 8016f82:	f7e9 fdc9 	bl	8000b18 <__aeabi_dcmpgt>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	f43f af7b 	beq.w	8016e82 <_strtod_l+0xa1a>
 8016f8c:	e4c2      	b.n	8016914 <_strtod_l+0x4ac>
 8016f8e:	9b04      	ldr	r3, [sp, #16]
 8016f90:	b333      	cbz	r3, 8016fe0 <_strtod_l+0xb78>
 8016f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016f98:	d822      	bhi.n	8016fe0 <_strtod_l+0xb78>
 8016f9a:	a32d      	add	r3, pc, #180	; (adr r3, 8017050 <_strtod_l+0xbe8>)
 8016f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa0:	4640      	mov	r0, r8
 8016fa2:	4649      	mov	r1, r9
 8016fa4:	f7e9 fda4 	bl	8000af0 <__aeabi_dcmple>
 8016fa8:	b1a0      	cbz	r0, 8016fd4 <_strtod_l+0xb6c>
 8016faa:	4649      	mov	r1, r9
 8016fac:	4640      	mov	r0, r8
 8016fae:	f7e9 fdfb 	bl	8000ba8 <__aeabi_d2uiz>
 8016fb2:	2801      	cmp	r0, #1
 8016fb4:	bf38      	it	cc
 8016fb6:	2001      	movcc	r0, #1
 8016fb8:	f7e9 faa4 	bl	8000504 <__aeabi_ui2d>
 8016fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fbe:	4680      	mov	r8, r0
 8016fc0:	4689      	mov	r9, r1
 8016fc2:	bb13      	cbnz	r3, 801700a <_strtod_l+0xba2>
 8016fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016fc8:	9014      	str	r0, [sp, #80]	; 0x50
 8016fca:	9315      	str	r3, [sp, #84]	; 0x54
 8016fcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016fd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016fd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016fdc:	1a9b      	subs	r3, r3, r2
 8016fde:	930d      	str	r3, [sp, #52]	; 0x34
 8016fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016fe4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016fe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016fec:	f001 fe4a 	bl	8018c84 <__ulp>
 8016ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016ff4:	ec53 2b10 	vmov	r2, r3, d0
 8016ff8:	f7e9 fafe 	bl	80005f8 <__aeabi_dmul>
 8016ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017000:	f7e9 f944 	bl	800028c <__adddf3>
 8017004:	4682      	mov	sl, r0
 8017006:	468b      	mov	fp, r1
 8017008:	e78f      	b.n	8016f2a <_strtod_l+0xac2>
 801700a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801700e:	e7dd      	b.n	8016fcc <_strtod_l+0xb64>
 8017010:	a311      	add	r3, pc, #68	; (adr r3, 8017058 <_strtod_l+0xbf0>)
 8017012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017016:	f7e9 fd61 	bl	8000adc <__aeabi_dcmplt>
 801701a:	e7b4      	b.n	8016f86 <_strtod_l+0xb1e>
 801701c:	2300      	movs	r3, #0
 801701e:	930e      	str	r3, [sp, #56]	; 0x38
 8017020:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017022:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017024:	6013      	str	r3, [r2, #0]
 8017026:	f7ff ba65 	b.w	80164f4 <_strtod_l+0x8c>
 801702a:	2b65      	cmp	r3, #101	; 0x65
 801702c:	f43f ab5d 	beq.w	80166ea <_strtod_l+0x282>
 8017030:	2b45      	cmp	r3, #69	; 0x45
 8017032:	f43f ab5a 	beq.w	80166ea <_strtod_l+0x282>
 8017036:	2201      	movs	r2, #1
 8017038:	f7ff bb92 	b.w	8016760 <_strtod_l+0x2f8>
 801703c:	f3af 8000 	nop.w
 8017040:	94a03595 	.word	0x94a03595
 8017044:	3fdfffff 	.word	0x3fdfffff
 8017048:	35afe535 	.word	0x35afe535
 801704c:	3fe00000 	.word	0x3fe00000
 8017050:	ffc00000 	.word	0xffc00000
 8017054:	41dfffff 	.word	0x41dfffff
 8017058:	94a03595 	.word	0x94a03595
 801705c:	3fcfffff 	.word	0x3fcfffff
 8017060:	3ff00000 	.word	0x3ff00000
 8017064:	7ff00000 	.word	0x7ff00000
 8017068:	7fe00000 	.word	0x7fe00000
 801706c:	7c9fffff 	.word	0x7c9fffff
 8017070:	3fe00000 	.word	0x3fe00000
 8017074:	bff00000 	.word	0xbff00000
 8017078:	7fefffff 	.word	0x7fefffff

0801707c <_strtod_r>:
 801707c:	4b01      	ldr	r3, [pc, #4]	; (8017084 <_strtod_r+0x8>)
 801707e:	f7ff b9f3 	b.w	8016468 <_strtod_l>
 8017082:	bf00      	nop
 8017084:	20004278 	.word	0x20004278

08017088 <_strtol_l.isra.0>:
 8017088:	2b01      	cmp	r3, #1
 801708a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801708e:	d001      	beq.n	8017094 <_strtol_l.isra.0+0xc>
 8017090:	2b24      	cmp	r3, #36	; 0x24
 8017092:	d906      	bls.n	80170a2 <_strtol_l.isra.0+0x1a>
 8017094:	f7fe f9d2 	bl	801543c <__errno>
 8017098:	2316      	movs	r3, #22
 801709a:	6003      	str	r3, [r0, #0]
 801709c:	2000      	movs	r0, #0
 801709e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170a2:	4f3a      	ldr	r7, [pc, #232]	; (801718c <_strtol_l.isra.0+0x104>)
 80170a4:	468e      	mov	lr, r1
 80170a6:	4676      	mov	r6, lr
 80170a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80170ac:	5de5      	ldrb	r5, [r4, r7]
 80170ae:	f015 0508 	ands.w	r5, r5, #8
 80170b2:	d1f8      	bne.n	80170a6 <_strtol_l.isra.0+0x1e>
 80170b4:	2c2d      	cmp	r4, #45	; 0x2d
 80170b6:	d134      	bne.n	8017122 <_strtol_l.isra.0+0x9a>
 80170b8:	f89e 4000 	ldrb.w	r4, [lr]
 80170bc:	f04f 0801 	mov.w	r8, #1
 80170c0:	f106 0e02 	add.w	lr, r6, #2
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d05c      	beq.n	8017182 <_strtol_l.isra.0+0xfa>
 80170c8:	2b10      	cmp	r3, #16
 80170ca:	d10c      	bne.n	80170e6 <_strtol_l.isra.0+0x5e>
 80170cc:	2c30      	cmp	r4, #48	; 0x30
 80170ce:	d10a      	bne.n	80170e6 <_strtol_l.isra.0+0x5e>
 80170d0:	f89e 4000 	ldrb.w	r4, [lr]
 80170d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80170d8:	2c58      	cmp	r4, #88	; 0x58
 80170da:	d14d      	bne.n	8017178 <_strtol_l.isra.0+0xf0>
 80170dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80170e0:	2310      	movs	r3, #16
 80170e2:	f10e 0e02 	add.w	lr, lr, #2
 80170e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80170ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80170ee:	2600      	movs	r6, #0
 80170f0:	fbbc f9f3 	udiv	r9, ip, r3
 80170f4:	4635      	mov	r5, r6
 80170f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80170fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80170fe:	2f09      	cmp	r7, #9
 8017100:	d818      	bhi.n	8017134 <_strtol_l.isra.0+0xac>
 8017102:	463c      	mov	r4, r7
 8017104:	42a3      	cmp	r3, r4
 8017106:	dd24      	ble.n	8017152 <_strtol_l.isra.0+0xca>
 8017108:	2e00      	cmp	r6, #0
 801710a:	db1f      	blt.n	801714c <_strtol_l.isra.0+0xc4>
 801710c:	45a9      	cmp	r9, r5
 801710e:	d31d      	bcc.n	801714c <_strtol_l.isra.0+0xc4>
 8017110:	d101      	bne.n	8017116 <_strtol_l.isra.0+0x8e>
 8017112:	45a2      	cmp	sl, r4
 8017114:	db1a      	blt.n	801714c <_strtol_l.isra.0+0xc4>
 8017116:	fb05 4503 	mla	r5, r5, r3, r4
 801711a:	2601      	movs	r6, #1
 801711c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017120:	e7eb      	b.n	80170fa <_strtol_l.isra.0+0x72>
 8017122:	2c2b      	cmp	r4, #43	; 0x2b
 8017124:	bf08      	it	eq
 8017126:	f89e 4000 	ldrbeq.w	r4, [lr]
 801712a:	46a8      	mov	r8, r5
 801712c:	bf08      	it	eq
 801712e:	f106 0e02 	addeq.w	lr, r6, #2
 8017132:	e7c7      	b.n	80170c4 <_strtol_l.isra.0+0x3c>
 8017134:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017138:	2f19      	cmp	r7, #25
 801713a:	d801      	bhi.n	8017140 <_strtol_l.isra.0+0xb8>
 801713c:	3c37      	subs	r4, #55	; 0x37
 801713e:	e7e1      	b.n	8017104 <_strtol_l.isra.0+0x7c>
 8017140:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017144:	2f19      	cmp	r7, #25
 8017146:	d804      	bhi.n	8017152 <_strtol_l.isra.0+0xca>
 8017148:	3c57      	subs	r4, #87	; 0x57
 801714a:	e7db      	b.n	8017104 <_strtol_l.isra.0+0x7c>
 801714c:	f04f 36ff 	mov.w	r6, #4294967295
 8017150:	e7e4      	b.n	801711c <_strtol_l.isra.0+0x94>
 8017152:	2e00      	cmp	r6, #0
 8017154:	da05      	bge.n	8017162 <_strtol_l.isra.0+0xda>
 8017156:	2322      	movs	r3, #34	; 0x22
 8017158:	6003      	str	r3, [r0, #0]
 801715a:	4665      	mov	r5, ip
 801715c:	b942      	cbnz	r2, 8017170 <_strtol_l.isra.0+0xe8>
 801715e:	4628      	mov	r0, r5
 8017160:	e79d      	b.n	801709e <_strtol_l.isra.0+0x16>
 8017162:	f1b8 0f00 	cmp.w	r8, #0
 8017166:	d000      	beq.n	801716a <_strtol_l.isra.0+0xe2>
 8017168:	426d      	negs	r5, r5
 801716a:	2a00      	cmp	r2, #0
 801716c:	d0f7      	beq.n	801715e <_strtol_l.isra.0+0xd6>
 801716e:	b10e      	cbz	r6, 8017174 <_strtol_l.isra.0+0xec>
 8017170:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017174:	6011      	str	r1, [r2, #0]
 8017176:	e7f2      	b.n	801715e <_strtol_l.isra.0+0xd6>
 8017178:	2430      	movs	r4, #48	; 0x30
 801717a:	2b00      	cmp	r3, #0
 801717c:	d1b3      	bne.n	80170e6 <_strtol_l.isra.0+0x5e>
 801717e:	2308      	movs	r3, #8
 8017180:	e7b1      	b.n	80170e6 <_strtol_l.isra.0+0x5e>
 8017182:	2c30      	cmp	r4, #48	; 0x30
 8017184:	d0a4      	beq.n	80170d0 <_strtol_l.isra.0+0x48>
 8017186:	230a      	movs	r3, #10
 8017188:	e7ad      	b.n	80170e6 <_strtol_l.isra.0+0x5e>
 801718a:	bf00      	nop
 801718c:	0801beb1 	.word	0x0801beb1

08017190 <_strtol_r>:
 8017190:	f7ff bf7a 	b.w	8017088 <_strtol_l.isra.0>

08017194 <quorem>:
 8017194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017198:	6903      	ldr	r3, [r0, #16]
 801719a:	690c      	ldr	r4, [r1, #16]
 801719c:	42a3      	cmp	r3, r4
 801719e:	4607      	mov	r7, r0
 80171a0:	f2c0 8081 	blt.w	80172a6 <quorem+0x112>
 80171a4:	3c01      	subs	r4, #1
 80171a6:	f101 0814 	add.w	r8, r1, #20
 80171aa:	f100 0514 	add.w	r5, r0, #20
 80171ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171b2:	9301      	str	r3, [sp, #4]
 80171b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80171b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80171bc:	3301      	adds	r3, #1
 80171be:	429a      	cmp	r2, r3
 80171c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80171c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80171c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80171cc:	d331      	bcc.n	8017232 <quorem+0x9e>
 80171ce:	f04f 0e00 	mov.w	lr, #0
 80171d2:	4640      	mov	r0, r8
 80171d4:	46ac      	mov	ip, r5
 80171d6:	46f2      	mov	sl, lr
 80171d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80171dc:	b293      	uxth	r3, r2
 80171de:	fb06 e303 	mla	r3, r6, r3, lr
 80171e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80171e6:	b29b      	uxth	r3, r3
 80171e8:	ebaa 0303 	sub.w	r3, sl, r3
 80171ec:	0c12      	lsrs	r2, r2, #16
 80171ee:	f8dc a000 	ldr.w	sl, [ip]
 80171f2:	fb06 e202 	mla	r2, r6, r2, lr
 80171f6:	fa13 f38a 	uxtah	r3, r3, sl
 80171fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80171fe:	fa1f fa82 	uxth.w	sl, r2
 8017202:	f8dc 2000 	ldr.w	r2, [ip]
 8017206:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801720a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801720e:	b29b      	uxth	r3, r3
 8017210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017214:	4581      	cmp	r9, r0
 8017216:	f84c 3b04 	str.w	r3, [ip], #4
 801721a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801721e:	d2db      	bcs.n	80171d8 <quorem+0x44>
 8017220:	f855 300b 	ldr.w	r3, [r5, fp]
 8017224:	b92b      	cbnz	r3, 8017232 <quorem+0x9e>
 8017226:	9b01      	ldr	r3, [sp, #4]
 8017228:	3b04      	subs	r3, #4
 801722a:	429d      	cmp	r5, r3
 801722c:	461a      	mov	r2, r3
 801722e:	d32e      	bcc.n	801728e <quorem+0xfa>
 8017230:	613c      	str	r4, [r7, #16]
 8017232:	4638      	mov	r0, r7
 8017234:	f001 fc82 	bl	8018b3c <__mcmp>
 8017238:	2800      	cmp	r0, #0
 801723a:	db24      	blt.n	8017286 <quorem+0xf2>
 801723c:	3601      	adds	r6, #1
 801723e:	4628      	mov	r0, r5
 8017240:	f04f 0c00 	mov.w	ip, #0
 8017244:	f858 2b04 	ldr.w	r2, [r8], #4
 8017248:	f8d0 e000 	ldr.w	lr, [r0]
 801724c:	b293      	uxth	r3, r2
 801724e:	ebac 0303 	sub.w	r3, ip, r3
 8017252:	0c12      	lsrs	r2, r2, #16
 8017254:	fa13 f38e 	uxtah	r3, r3, lr
 8017258:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801725c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017260:	b29b      	uxth	r3, r3
 8017262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017266:	45c1      	cmp	r9, r8
 8017268:	f840 3b04 	str.w	r3, [r0], #4
 801726c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017270:	d2e8      	bcs.n	8017244 <quorem+0xb0>
 8017272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801727a:	b922      	cbnz	r2, 8017286 <quorem+0xf2>
 801727c:	3b04      	subs	r3, #4
 801727e:	429d      	cmp	r5, r3
 8017280:	461a      	mov	r2, r3
 8017282:	d30a      	bcc.n	801729a <quorem+0x106>
 8017284:	613c      	str	r4, [r7, #16]
 8017286:	4630      	mov	r0, r6
 8017288:	b003      	add	sp, #12
 801728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801728e:	6812      	ldr	r2, [r2, #0]
 8017290:	3b04      	subs	r3, #4
 8017292:	2a00      	cmp	r2, #0
 8017294:	d1cc      	bne.n	8017230 <quorem+0x9c>
 8017296:	3c01      	subs	r4, #1
 8017298:	e7c7      	b.n	801722a <quorem+0x96>
 801729a:	6812      	ldr	r2, [r2, #0]
 801729c:	3b04      	subs	r3, #4
 801729e:	2a00      	cmp	r2, #0
 80172a0:	d1f0      	bne.n	8017284 <quorem+0xf0>
 80172a2:	3c01      	subs	r4, #1
 80172a4:	e7eb      	b.n	801727e <quorem+0xea>
 80172a6:	2000      	movs	r0, #0
 80172a8:	e7ee      	b.n	8017288 <quorem+0xf4>
 80172aa:	0000      	movs	r0, r0
 80172ac:	0000      	movs	r0, r0
	...

080172b0 <_dtoa_r>:
 80172b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b4:	ed2d 8b02 	vpush	{d8}
 80172b8:	ec57 6b10 	vmov	r6, r7, d0
 80172bc:	b095      	sub	sp, #84	; 0x54
 80172be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80172c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80172c4:	9105      	str	r1, [sp, #20]
 80172c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80172ca:	4604      	mov	r4, r0
 80172cc:	9209      	str	r2, [sp, #36]	; 0x24
 80172ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80172d0:	b975      	cbnz	r5, 80172f0 <_dtoa_r+0x40>
 80172d2:	2010      	movs	r0, #16
 80172d4:	f7fe f8dc 	bl	8015490 <malloc>
 80172d8:	4602      	mov	r2, r0
 80172da:	6260      	str	r0, [r4, #36]	; 0x24
 80172dc:	b920      	cbnz	r0, 80172e8 <_dtoa_r+0x38>
 80172de:	4bb2      	ldr	r3, [pc, #712]	; (80175a8 <_dtoa_r+0x2f8>)
 80172e0:	21ea      	movs	r1, #234	; 0xea
 80172e2:	48b2      	ldr	r0, [pc, #712]	; (80175ac <_dtoa_r+0x2fc>)
 80172e4:	f001 ffb0 	bl	8019248 <__assert_func>
 80172e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80172ec:	6005      	str	r5, [r0, #0]
 80172ee:	60c5      	str	r5, [r0, #12]
 80172f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172f2:	6819      	ldr	r1, [r3, #0]
 80172f4:	b151      	cbz	r1, 801730c <_dtoa_r+0x5c>
 80172f6:	685a      	ldr	r2, [r3, #4]
 80172f8:	604a      	str	r2, [r1, #4]
 80172fa:	2301      	movs	r3, #1
 80172fc:	4093      	lsls	r3, r2
 80172fe:	608b      	str	r3, [r1, #8]
 8017300:	4620      	mov	r0, r4
 8017302:	f001 f993 	bl	801862c <_Bfree>
 8017306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017308:	2200      	movs	r2, #0
 801730a:	601a      	str	r2, [r3, #0]
 801730c:	1e3b      	subs	r3, r7, #0
 801730e:	bfb9      	ittee	lt
 8017310:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017314:	9303      	strlt	r3, [sp, #12]
 8017316:	2300      	movge	r3, #0
 8017318:	f8c8 3000 	strge.w	r3, [r8]
 801731c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017320:	4ba3      	ldr	r3, [pc, #652]	; (80175b0 <_dtoa_r+0x300>)
 8017322:	bfbc      	itt	lt
 8017324:	2201      	movlt	r2, #1
 8017326:	f8c8 2000 	strlt.w	r2, [r8]
 801732a:	ea33 0309 	bics.w	r3, r3, r9
 801732e:	d11b      	bne.n	8017368 <_dtoa_r+0xb8>
 8017330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017332:	f242 730f 	movw	r3, #9999	; 0x270f
 8017336:	6013      	str	r3, [r2, #0]
 8017338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801733c:	4333      	orrs	r3, r6
 801733e:	f000 857a 	beq.w	8017e36 <_dtoa_r+0xb86>
 8017342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017344:	b963      	cbnz	r3, 8017360 <_dtoa_r+0xb0>
 8017346:	4b9b      	ldr	r3, [pc, #620]	; (80175b4 <_dtoa_r+0x304>)
 8017348:	e024      	b.n	8017394 <_dtoa_r+0xe4>
 801734a:	4b9b      	ldr	r3, [pc, #620]	; (80175b8 <_dtoa_r+0x308>)
 801734c:	9300      	str	r3, [sp, #0]
 801734e:	3308      	adds	r3, #8
 8017350:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017352:	6013      	str	r3, [r2, #0]
 8017354:	9800      	ldr	r0, [sp, #0]
 8017356:	b015      	add	sp, #84	; 0x54
 8017358:	ecbd 8b02 	vpop	{d8}
 801735c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017360:	4b94      	ldr	r3, [pc, #592]	; (80175b4 <_dtoa_r+0x304>)
 8017362:	9300      	str	r3, [sp, #0]
 8017364:	3303      	adds	r3, #3
 8017366:	e7f3      	b.n	8017350 <_dtoa_r+0xa0>
 8017368:	ed9d 7b02 	vldr	d7, [sp, #8]
 801736c:	2200      	movs	r2, #0
 801736e:	ec51 0b17 	vmov	r0, r1, d7
 8017372:	2300      	movs	r3, #0
 8017374:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017378:	f7e9 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 801737c:	4680      	mov	r8, r0
 801737e:	b158      	cbz	r0, 8017398 <_dtoa_r+0xe8>
 8017380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017382:	2301      	movs	r3, #1
 8017384:	6013      	str	r3, [r2, #0]
 8017386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017388:	2b00      	cmp	r3, #0
 801738a:	f000 8551 	beq.w	8017e30 <_dtoa_r+0xb80>
 801738e:	488b      	ldr	r0, [pc, #556]	; (80175bc <_dtoa_r+0x30c>)
 8017390:	6018      	str	r0, [r3, #0]
 8017392:	1e43      	subs	r3, r0, #1
 8017394:	9300      	str	r3, [sp, #0]
 8017396:	e7dd      	b.n	8017354 <_dtoa_r+0xa4>
 8017398:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801739c:	aa12      	add	r2, sp, #72	; 0x48
 801739e:	a913      	add	r1, sp, #76	; 0x4c
 80173a0:	4620      	mov	r0, r4
 80173a2:	f001 fceb 	bl	8018d7c <__d2b>
 80173a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80173aa:	4683      	mov	fp, r0
 80173ac:	2d00      	cmp	r5, #0
 80173ae:	d07c      	beq.n	80174aa <_dtoa_r+0x1fa>
 80173b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80173b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80173be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80173c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80173c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80173ca:	4b7d      	ldr	r3, [pc, #500]	; (80175c0 <_dtoa_r+0x310>)
 80173cc:	2200      	movs	r2, #0
 80173ce:	4630      	mov	r0, r6
 80173d0:	4639      	mov	r1, r7
 80173d2:	f7e8 ff59 	bl	8000288 <__aeabi_dsub>
 80173d6:	a36e      	add	r3, pc, #440	; (adr r3, 8017590 <_dtoa_r+0x2e0>)
 80173d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173dc:	f7e9 f90c 	bl	80005f8 <__aeabi_dmul>
 80173e0:	a36d      	add	r3, pc, #436	; (adr r3, 8017598 <_dtoa_r+0x2e8>)
 80173e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e6:	f7e8 ff51 	bl	800028c <__adddf3>
 80173ea:	4606      	mov	r6, r0
 80173ec:	4628      	mov	r0, r5
 80173ee:	460f      	mov	r7, r1
 80173f0:	f7e9 f898 	bl	8000524 <__aeabi_i2d>
 80173f4:	a36a      	add	r3, pc, #424	; (adr r3, 80175a0 <_dtoa_r+0x2f0>)
 80173f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173fa:	f7e9 f8fd 	bl	80005f8 <__aeabi_dmul>
 80173fe:	4602      	mov	r2, r0
 8017400:	460b      	mov	r3, r1
 8017402:	4630      	mov	r0, r6
 8017404:	4639      	mov	r1, r7
 8017406:	f7e8 ff41 	bl	800028c <__adddf3>
 801740a:	4606      	mov	r6, r0
 801740c:	460f      	mov	r7, r1
 801740e:	f7e9 fba3 	bl	8000b58 <__aeabi_d2iz>
 8017412:	2200      	movs	r2, #0
 8017414:	4682      	mov	sl, r0
 8017416:	2300      	movs	r3, #0
 8017418:	4630      	mov	r0, r6
 801741a:	4639      	mov	r1, r7
 801741c:	f7e9 fb5e 	bl	8000adc <__aeabi_dcmplt>
 8017420:	b148      	cbz	r0, 8017436 <_dtoa_r+0x186>
 8017422:	4650      	mov	r0, sl
 8017424:	f7e9 f87e 	bl	8000524 <__aeabi_i2d>
 8017428:	4632      	mov	r2, r6
 801742a:	463b      	mov	r3, r7
 801742c:	f7e9 fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017430:	b908      	cbnz	r0, 8017436 <_dtoa_r+0x186>
 8017432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017436:	f1ba 0f16 	cmp.w	sl, #22
 801743a:	d854      	bhi.n	80174e6 <_dtoa_r+0x236>
 801743c:	4b61      	ldr	r3, [pc, #388]	; (80175c4 <_dtoa_r+0x314>)
 801743e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801744a:	f7e9 fb47 	bl	8000adc <__aeabi_dcmplt>
 801744e:	2800      	cmp	r0, #0
 8017450:	d04b      	beq.n	80174ea <_dtoa_r+0x23a>
 8017452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017456:	2300      	movs	r3, #0
 8017458:	930e      	str	r3, [sp, #56]	; 0x38
 801745a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801745c:	1b5d      	subs	r5, r3, r5
 801745e:	1e6b      	subs	r3, r5, #1
 8017460:	9304      	str	r3, [sp, #16]
 8017462:	bf43      	ittte	mi
 8017464:	2300      	movmi	r3, #0
 8017466:	f1c5 0801 	rsbmi	r8, r5, #1
 801746a:	9304      	strmi	r3, [sp, #16]
 801746c:	f04f 0800 	movpl.w	r8, #0
 8017470:	f1ba 0f00 	cmp.w	sl, #0
 8017474:	db3b      	blt.n	80174ee <_dtoa_r+0x23e>
 8017476:	9b04      	ldr	r3, [sp, #16]
 8017478:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801747c:	4453      	add	r3, sl
 801747e:	9304      	str	r3, [sp, #16]
 8017480:	2300      	movs	r3, #0
 8017482:	9306      	str	r3, [sp, #24]
 8017484:	9b05      	ldr	r3, [sp, #20]
 8017486:	2b09      	cmp	r3, #9
 8017488:	d869      	bhi.n	801755e <_dtoa_r+0x2ae>
 801748a:	2b05      	cmp	r3, #5
 801748c:	bfc4      	itt	gt
 801748e:	3b04      	subgt	r3, #4
 8017490:	9305      	strgt	r3, [sp, #20]
 8017492:	9b05      	ldr	r3, [sp, #20]
 8017494:	f1a3 0302 	sub.w	r3, r3, #2
 8017498:	bfcc      	ite	gt
 801749a:	2500      	movgt	r5, #0
 801749c:	2501      	movle	r5, #1
 801749e:	2b03      	cmp	r3, #3
 80174a0:	d869      	bhi.n	8017576 <_dtoa_r+0x2c6>
 80174a2:	e8df f003 	tbb	[pc, r3]
 80174a6:	4e2c      	.short	0x4e2c
 80174a8:	5a4c      	.short	0x5a4c
 80174aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80174ae:	441d      	add	r5, r3
 80174b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80174b4:	2b20      	cmp	r3, #32
 80174b6:	bfc1      	itttt	gt
 80174b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80174bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80174c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80174c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80174c8:	bfda      	itte	le
 80174ca:	f1c3 0320 	rsble	r3, r3, #32
 80174ce:	fa06 f003 	lslle.w	r0, r6, r3
 80174d2:	4318      	orrgt	r0, r3
 80174d4:	f7e9 f816 	bl	8000504 <__aeabi_ui2d>
 80174d8:	2301      	movs	r3, #1
 80174da:	4606      	mov	r6, r0
 80174dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80174e0:	3d01      	subs	r5, #1
 80174e2:	9310      	str	r3, [sp, #64]	; 0x40
 80174e4:	e771      	b.n	80173ca <_dtoa_r+0x11a>
 80174e6:	2301      	movs	r3, #1
 80174e8:	e7b6      	b.n	8017458 <_dtoa_r+0x1a8>
 80174ea:	900e      	str	r0, [sp, #56]	; 0x38
 80174ec:	e7b5      	b.n	801745a <_dtoa_r+0x1aa>
 80174ee:	f1ca 0300 	rsb	r3, sl, #0
 80174f2:	9306      	str	r3, [sp, #24]
 80174f4:	2300      	movs	r3, #0
 80174f6:	eba8 080a 	sub.w	r8, r8, sl
 80174fa:	930d      	str	r3, [sp, #52]	; 0x34
 80174fc:	e7c2      	b.n	8017484 <_dtoa_r+0x1d4>
 80174fe:	2300      	movs	r3, #0
 8017500:	9308      	str	r3, [sp, #32]
 8017502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017504:	2b00      	cmp	r3, #0
 8017506:	dc39      	bgt.n	801757c <_dtoa_r+0x2cc>
 8017508:	f04f 0901 	mov.w	r9, #1
 801750c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017510:	464b      	mov	r3, r9
 8017512:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017516:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017518:	2200      	movs	r2, #0
 801751a:	6042      	str	r2, [r0, #4]
 801751c:	2204      	movs	r2, #4
 801751e:	f102 0614 	add.w	r6, r2, #20
 8017522:	429e      	cmp	r6, r3
 8017524:	6841      	ldr	r1, [r0, #4]
 8017526:	d92f      	bls.n	8017588 <_dtoa_r+0x2d8>
 8017528:	4620      	mov	r0, r4
 801752a:	f001 f83f 	bl	80185ac <_Balloc>
 801752e:	9000      	str	r0, [sp, #0]
 8017530:	2800      	cmp	r0, #0
 8017532:	d14b      	bne.n	80175cc <_dtoa_r+0x31c>
 8017534:	4b24      	ldr	r3, [pc, #144]	; (80175c8 <_dtoa_r+0x318>)
 8017536:	4602      	mov	r2, r0
 8017538:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801753c:	e6d1      	b.n	80172e2 <_dtoa_r+0x32>
 801753e:	2301      	movs	r3, #1
 8017540:	e7de      	b.n	8017500 <_dtoa_r+0x250>
 8017542:	2300      	movs	r3, #0
 8017544:	9308      	str	r3, [sp, #32]
 8017546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017548:	eb0a 0903 	add.w	r9, sl, r3
 801754c:	f109 0301 	add.w	r3, r9, #1
 8017550:	2b01      	cmp	r3, #1
 8017552:	9301      	str	r3, [sp, #4]
 8017554:	bfb8      	it	lt
 8017556:	2301      	movlt	r3, #1
 8017558:	e7dd      	b.n	8017516 <_dtoa_r+0x266>
 801755a:	2301      	movs	r3, #1
 801755c:	e7f2      	b.n	8017544 <_dtoa_r+0x294>
 801755e:	2501      	movs	r5, #1
 8017560:	2300      	movs	r3, #0
 8017562:	9305      	str	r3, [sp, #20]
 8017564:	9508      	str	r5, [sp, #32]
 8017566:	f04f 39ff 	mov.w	r9, #4294967295
 801756a:	2200      	movs	r2, #0
 801756c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017570:	2312      	movs	r3, #18
 8017572:	9209      	str	r2, [sp, #36]	; 0x24
 8017574:	e7cf      	b.n	8017516 <_dtoa_r+0x266>
 8017576:	2301      	movs	r3, #1
 8017578:	9308      	str	r3, [sp, #32]
 801757a:	e7f4      	b.n	8017566 <_dtoa_r+0x2b6>
 801757c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017580:	f8cd 9004 	str.w	r9, [sp, #4]
 8017584:	464b      	mov	r3, r9
 8017586:	e7c6      	b.n	8017516 <_dtoa_r+0x266>
 8017588:	3101      	adds	r1, #1
 801758a:	6041      	str	r1, [r0, #4]
 801758c:	0052      	lsls	r2, r2, #1
 801758e:	e7c6      	b.n	801751e <_dtoa_r+0x26e>
 8017590:	636f4361 	.word	0x636f4361
 8017594:	3fd287a7 	.word	0x3fd287a7
 8017598:	8b60c8b3 	.word	0x8b60c8b3
 801759c:	3fc68a28 	.word	0x3fc68a28
 80175a0:	509f79fb 	.word	0x509f79fb
 80175a4:	3fd34413 	.word	0x3fd34413
 80175a8:	0801bfbe 	.word	0x0801bfbe
 80175ac:	0801bfd5 	.word	0x0801bfd5
 80175b0:	7ff00000 	.word	0x7ff00000
 80175b4:	0801bfba 	.word	0x0801bfba
 80175b8:	0801bfb1 	.word	0x0801bfb1
 80175bc:	0801be35 	.word	0x0801be35
 80175c0:	3ff80000 	.word	0x3ff80000
 80175c4:	0801c150 	.word	0x0801c150
 80175c8:	0801c034 	.word	0x0801c034
 80175cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80175ce:	9a00      	ldr	r2, [sp, #0]
 80175d0:	601a      	str	r2, [r3, #0]
 80175d2:	9b01      	ldr	r3, [sp, #4]
 80175d4:	2b0e      	cmp	r3, #14
 80175d6:	f200 80ad 	bhi.w	8017734 <_dtoa_r+0x484>
 80175da:	2d00      	cmp	r5, #0
 80175dc:	f000 80aa 	beq.w	8017734 <_dtoa_r+0x484>
 80175e0:	f1ba 0f00 	cmp.w	sl, #0
 80175e4:	dd36      	ble.n	8017654 <_dtoa_r+0x3a4>
 80175e6:	4ac3      	ldr	r2, [pc, #780]	; (80178f4 <_dtoa_r+0x644>)
 80175e8:	f00a 030f 	and.w	r3, sl, #15
 80175ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80175f0:	ed93 7b00 	vldr	d7, [r3]
 80175f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80175f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80175fc:	eeb0 8a47 	vmov.f32	s16, s14
 8017600:	eef0 8a67 	vmov.f32	s17, s15
 8017604:	d016      	beq.n	8017634 <_dtoa_r+0x384>
 8017606:	4bbc      	ldr	r3, [pc, #752]	; (80178f8 <_dtoa_r+0x648>)
 8017608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801760c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017610:	f7e9 f91c 	bl	800084c <__aeabi_ddiv>
 8017614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017618:	f007 070f 	and.w	r7, r7, #15
 801761c:	2503      	movs	r5, #3
 801761e:	4eb6      	ldr	r6, [pc, #728]	; (80178f8 <_dtoa_r+0x648>)
 8017620:	b957      	cbnz	r7, 8017638 <_dtoa_r+0x388>
 8017622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017626:	ec53 2b18 	vmov	r2, r3, d8
 801762a:	f7e9 f90f 	bl	800084c <__aeabi_ddiv>
 801762e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017632:	e029      	b.n	8017688 <_dtoa_r+0x3d8>
 8017634:	2502      	movs	r5, #2
 8017636:	e7f2      	b.n	801761e <_dtoa_r+0x36e>
 8017638:	07f9      	lsls	r1, r7, #31
 801763a:	d508      	bpl.n	801764e <_dtoa_r+0x39e>
 801763c:	ec51 0b18 	vmov	r0, r1, d8
 8017640:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017644:	f7e8 ffd8 	bl	80005f8 <__aeabi_dmul>
 8017648:	ec41 0b18 	vmov	d8, r0, r1
 801764c:	3501      	adds	r5, #1
 801764e:	107f      	asrs	r7, r7, #1
 8017650:	3608      	adds	r6, #8
 8017652:	e7e5      	b.n	8017620 <_dtoa_r+0x370>
 8017654:	f000 80a6 	beq.w	80177a4 <_dtoa_r+0x4f4>
 8017658:	f1ca 0600 	rsb	r6, sl, #0
 801765c:	4ba5      	ldr	r3, [pc, #660]	; (80178f4 <_dtoa_r+0x644>)
 801765e:	4fa6      	ldr	r7, [pc, #664]	; (80178f8 <_dtoa_r+0x648>)
 8017660:	f006 020f 	and.w	r2, r6, #15
 8017664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801766c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017670:	f7e8 ffc2 	bl	80005f8 <__aeabi_dmul>
 8017674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017678:	1136      	asrs	r6, r6, #4
 801767a:	2300      	movs	r3, #0
 801767c:	2502      	movs	r5, #2
 801767e:	2e00      	cmp	r6, #0
 8017680:	f040 8085 	bne.w	801778e <_dtoa_r+0x4de>
 8017684:	2b00      	cmp	r3, #0
 8017686:	d1d2      	bne.n	801762e <_dtoa_r+0x37e>
 8017688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801768a:	2b00      	cmp	r3, #0
 801768c:	f000 808c 	beq.w	80177a8 <_dtoa_r+0x4f8>
 8017690:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017694:	4b99      	ldr	r3, [pc, #612]	; (80178fc <_dtoa_r+0x64c>)
 8017696:	2200      	movs	r2, #0
 8017698:	4630      	mov	r0, r6
 801769a:	4639      	mov	r1, r7
 801769c:	f7e9 fa1e 	bl	8000adc <__aeabi_dcmplt>
 80176a0:	2800      	cmp	r0, #0
 80176a2:	f000 8081 	beq.w	80177a8 <_dtoa_r+0x4f8>
 80176a6:	9b01      	ldr	r3, [sp, #4]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d07d      	beq.n	80177a8 <_dtoa_r+0x4f8>
 80176ac:	f1b9 0f00 	cmp.w	r9, #0
 80176b0:	dd3c      	ble.n	801772c <_dtoa_r+0x47c>
 80176b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80176b6:	9307      	str	r3, [sp, #28]
 80176b8:	2200      	movs	r2, #0
 80176ba:	4b91      	ldr	r3, [pc, #580]	; (8017900 <_dtoa_r+0x650>)
 80176bc:	4630      	mov	r0, r6
 80176be:	4639      	mov	r1, r7
 80176c0:	f7e8 ff9a 	bl	80005f8 <__aeabi_dmul>
 80176c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176c8:	3501      	adds	r5, #1
 80176ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80176ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80176d2:	4628      	mov	r0, r5
 80176d4:	f7e8 ff26 	bl	8000524 <__aeabi_i2d>
 80176d8:	4632      	mov	r2, r6
 80176da:	463b      	mov	r3, r7
 80176dc:	f7e8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80176e0:	4b88      	ldr	r3, [pc, #544]	; (8017904 <_dtoa_r+0x654>)
 80176e2:	2200      	movs	r2, #0
 80176e4:	f7e8 fdd2 	bl	800028c <__adddf3>
 80176e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80176ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176f0:	9303      	str	r3, [sp, #12]
 80176f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d15c      	bne.n	80177b2 <_dtoa_r+0x502>
 80176f8:	4b83      	ldr	r3, [pc, #524]	; (8017908 <_dtoa_r+0x658>)
 80176fa:	2200      	movs	r2, #0
 80176fc:	4630      	mov	r0, r6
 80176fe:	4639      	mov	r1, r7
 8017700:	f7e8 fdc2 	bl	8000288 <__aeabi_dsub>
 8017704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017708:	4606      	mov	r6, r0
 801770a:	460f      	mov	r7, r1
 801770c:	f7e9 fa04 	bl	8000b18 <__aeabi_dcmpgt>
 8017710:	2800      	cmp	r0, #0
 8017712:	f040 8296 	bne.w	8017c42 <_dtoa_r+0x992>
 8017716:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801771a:	4630      	mov	r0, r6
 801771c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017720:	4639      	mov	r1, r7
 8017722:	f7e9 f9db 	bl	8000adc <__aeabi_dcmplt>
 8017726:	2800      	cmp	r0, #0
 8017728:	f040 8288 	bne.w	8017c3c <_dtoa_r+0x98c>
 801772c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017730:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017736:	2b00      	cmp	r3, #0
 8017738:	f2c0 8158 	blt.w	80179ec <_dtoa_r+0x73c>
 801773c:	f1ba 0f0e 	cmp.w	sl, #14
 8017740:	f300 8154 	bgt.w	80179ec <_dtoa_r+0x73c>
 8017744:	4b6b      	ldr	r3, [pc, #428]	; (80178f4 <_dtoa_r+0x644>)
 8017746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801774a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017750:	2b00      	cmp	r3, #0
 8017752:	f280 80e3 	bge.w	801791c <_dtoa_r+0x66c>
 8017756:	9b01      	ldr	r3, [sp, #4]
 8017758:	2b00      	cmp	r3, #0
 801775a:	f300 80df 	bgt.w	801791c <_dtoa_r+0x66c>
 801775e:	f040 826d 	bne.w	8017c3c <_dtoa_r+0x98c>
 8017762:	4b69      	ldr	r3, [pc, #420]	; (8017908 <_dtoa_r+0x658>)
 8017764:	2200      	movs	r2, #0
 8017766:	4640      	mov	r0, r8
 8017768:	4649      	mov	r1, r9
 801776a:	f7e8 ff45 	bl	80005f8 <__aeabi_dmul>
 801776e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017772:	f7e9 f9c7 	bl	8000b04 <__aeabi_dcmpge>
 8017776:	9e01      	ldr	r6, [sp, #4]
 8017778:	4637      	mov	r7, r6
 801777a:	2800      	cmp	r0, #0
 801777c:	f040 8243 	bne.w	8017c06 <_dtoa_r+0x956>
 8017780:	9d00      	ldr	r5, [sp, #0]
 8017782:	2331      	movs	r3, #49	; 0x31
 8017784:	f805 3b01 	strb.w	r3, [r5], #1
 8017788:	f10a 0a01 	add.w	sl, sl, #1
 801778c:	e23f      	b.n	8017c0e <_dtoa_r+0x95e>
 801778e:	07f2      	lsls	r2, r6, #31
 8017790:	d505      	bpl.n	801779e <_dtoa_r+0x4ee>
 8017792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017796:	f7e8 ff2f 	bl	80005f8 <__aeabi_dmul>
 801779a:	3501      	adds	r5, #1
 801779c:	2301      	movs	r3, #1
 801779e:	1076      	asrs	r6, r6, #1
 80177a0:	3708      	adds	r7, #8
 80177a2:	e76c      	b.n	801767e <_dtoa_r+0x3ce>
 80177a4:	2502      	movs	r5, #2
 80177a6:	e76f      	b.n	8017688 <_dtoa_r+0x3d8>
 80177a8:	9b01      	ldr	r3, [sp, #4]
 80177aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80177ae:	930c      	str	r3, [sp, #48]	; 0x30
 80177b0:	e78d      	b.n	80176ce <_dtoa_r+0x41e>
 80177b2:	9900      	ldr	r1, [sp, #0]
 80177b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80177b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80177b8:	4b4e      	ldr	r3, [pc, #312]	; (80178f4 <_dtoa_r+0x644>)
 80177ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80177be:	4401      	add	r1, r0
 80177c0:	9102      	str	r1, [sp, #8]
 80177c2:	9908      	ldr	r1, [sp, #32]
 80177c4:	eeb0 8a47 	vmov.f32	s16, s14
 80177c8:	eef0 8a67 	vmov.f32	s17, s15
 80177cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80177d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80177d4:	2900      	cmp	r1, #0
 80177d6:	d045      	beq.n	8017864 <_dtoa_r+0x5b4>
 80177d8:	494c      	ldr	r1, [pc, #304]	; (801790c <_dtoa_r+0x65c>)
 80177da:	2000      	movs	r0, #0
 80177dc:	f7e9 f836 	bl	800084c <__aeabi_ddiv>
 80177e0:	ec53 2b18 	vmov	r2, r3, d8
 80177e4:	f7e8 fd50 	bl	8000288 <__aeabi_dsub>
 80177e8:	9d00      	ldr	r5, [sp, #0]
 80177ea:	ec41 0b18 	vmov	d8, r0, r1
 80177ee:	4639      	mov	r1, r7
 80177f0:	4630      	mov	r0, r6
 80177f2:	f7e9 f9b1 	bl	8000b58 <__aeabi_d2iz>
 80177f6:	900c      	str	r0, [sp, #48]	; 0x30
 80177f8:	f7e8 fe94 	bl	8000524 <__aeabi_i2d>
 80177fc:	4602      	mov	r2, r0
 80177fe:	460b      	mov	r3, r1
 8017800:	4630      	mov	r0, r6
 8017802:	4639      	mov	r1, r7
 8017804:	f7e8 fd40 	bl	8000288 <__aeabi_dsub>
 8017808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801780a:	3330      	adds	r3, #48	; 0x30
 801780c:	f805 3b01 	strb.w	r3, [r5], #1
 8017810:	ec53 2b18 	vmov	r2, r3, d8
 8017814:	4606      	mov	r6, r0
 8017816:	460f      	mov	r7, r1
 8017818:	f7e9 f960 	bl	8000adc <__aeabi_dcmplt>
 801781c:	2800      	cmp	r0, #0
 801781e:	d165      	bne.n	80178ec <_dtoa_r+0x63c>
 8017820:	4632      	mov	r2, r6
 8017822:	463b      	mov	r3, r7
 8017824:	4935      	ldr	r1, [pc, #212]	; (80178fc <_dtoa_r+0x64c>)
 8017826:	2000      	movs	r0, #0
 8017828:	f7e8 fd2e 	bl	8000288 <__aeabi_dsub>
 801782c:	ec53 2b18 	vmov	r2, r3, d8
 8017830:	f7e9 f954 	bl	8000adc <__aeabi_dcmplt>
 8017834:	2800      	cmp	r0, #0
 8017836:	f040 80b9 	bne.w	80179ac <_dtoa_r+0x6fc>
 801783a:	9b02      	ldr	r3, [sp, #8]
 801783c:	429d      	cmp	r5, r3
 801783e:	f43f af75 	beq.w	801772c <_dtoa_r+0x47c>
 8017842:	4b2f      	ldr	r3, [pc, #188]	; (8017900 <_dtoa_r+0x650>)
 8017844:	ec51 0b18 	vmov	r0, r1, d8
 8017848:	2200      	movs	r2, #0
 801784a:	f7e8 fed5 	bl	80005f8 <__aeabi_dmul>
 801784e:	4b2c      	ldr	r3, [pc, #176]	; (8017900 <_dtoa_r+0x650>)
 8017850:	ec41 0b18 	vmov	d8, r0, r1
 8017854:	2200      	movs	r2, #0
 8017856:	4630      	mov	r0, r6
 8017858:	4639      	mov	r1, r7
 801785a:	f7e8 fecd 	bl	80005f8 <__aeabi_dmul>
 801785e:	4606      	mov	r6, r0
 8017860:	460f      	mov	r7, r1
 8017862:	e7c4      	b.n	80177ee <_dtoa_r+0x53e>
 8017864:	ec51 0b17 	vmov	r0, r1, d7
 8017868:	f7e8 fec6 	bl	80005f8 <__aeabi_dmul>
 801786c:	9b02      	ldr	r3, [sp, #8]
 801786e:	9d00      	ldr	r5, [sp, #0]
 8017870:	930c      	str	r3, [sp, #48]	; 0x30
 8017872:	ec41 0b18 	vmov	d8, r0, r1
 8017876:	4639      	mov	r1, r7
 8017878:	4630      	mov	r0, r6
 801787a:	f7e9 f96d 	bl	8000b58 <__aeabi_d2iz>
 801787e:	9011      	str	r0, [sp, #68]	; 0x44
 8017880:	f7e8 fe50 	bl	8000524 <__aeabi_i2d>
 8017884:	4602      	mov	r2, r0
 8017886:	460b      	mov	r3, r1
 8017888:	4630      	mov	r0, r6
 801788a:	4639      	mov	r1, r7
 801788c:	f7e8 fcfc 	bl	8000288 <__aeabi_dsub>
 8017890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017892:	3330      	adds	r3, #48	; 0x30
 8017894:	f805 3b01 	strb.w	r3, [r5], #1
 8017898:	9b02      	ldr	r3, [sp, #8]
 801789a:	429d      	cmp	r5, r3
 801789c:	4606      	mov	r6, r0
 801789e:	460f      	mov	r7, r1
 80178a0:	f04f 0200 	mov.w	r2, #0
 80178a4:	d134      	bne.n	8017910 <_dtoa_r+0x660>
 80178a6:	4b19      	ldr	r3, [pc, #100]	; (801790c <_dtoa_r+0x65c>)
 80178a8:	ec51 0b18 	vmov	r0, r1, d8
 80178ac:	f7e8 fcee 	bl	800028c <__adddf3>
 80178b0:	4602      	mov	r2, r0
 80178b2:	460b      	mov	r3, r1
 80178b4:	4630      	mov	r0, r6
 80178b6:	4639      	mov	r1, r7
 80178b8:	f7e9 f92e 	bl	8000b18 <__aeabi_dcmpgt>
 80178bc:	2800      	cmp	r0, #0
 80178be:	d175      	bne.n	80179ac <_dtoa_r+0x6fc>
 80178c0:	ec53 2b18 	vmov	r2, r3, d8
 80178c4:	4911      	ldr	r1, [pc, #68]	; (801790c <_dtoa_r+0x65c>)
 80178c6:	2000      	movs	r0, #0
 80178c8:	f7e8 fcde 	bl	8000288 <__aeabi_dsub>
 80178cc:	4602      	mov	r2, r0
 80178ce:	460b      	mov	r3, r1
 80178d0:	4630      	mov	r0, r6
 80178d2:	4639      	mov	r1, r7
 80178d4:	f7e9 f902 	bl	8000adc <__aeabi_dcmplt>
 80178d8:	2800      	cmp	r0, #0
 80178da:	f43f af27 	beq.w	801772c <_dtoa_r+0x47c>
 80178de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178e0:	1e6b      	subs	r3, r5, #1
 80178e2:	930c      	str	r3, [sp, #48]	; 0x30
 80178e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178e8:	2b30      	cmp	r3, #48	; 0x30
 80178ea:	d0f8      	beq.n	80178de <_dtoa_r+0x62e>
 80178ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80178f0:	e04a      	b.n	8017988 <_dtoa_r+0x6d8>
 80178f2:	bf00      	nop
 80178f4:	0801c150 	.word	0x0801c150
 80178f8:	0801c128 	.word	0x0801c128
 80178fc:	3ff00000 	.word	0x3ff00000
 8017900:	40240000 	.word	0x40240000
 8017904:	401c0000 	.word	0x401c0000
 8017908:	40140000 	.word	0x40140000
 801790c:	3fe00000 	.word	0x3fe00000
 8017910:	4baf      	ldr	r3, [pc, #700]	; (8017bd0 <_dtoa_r+0x920>)
 8017912:	f7e8 fe71 	bl	80005f8 <__aeabi_dmul>
 8017916:	4606      	mov	r6, r0
 8017918:	460f      	mov	r7, r1
 801791a:	e7ac      	b.n	8017876 <_dtoa_r+0x5c6>
 801791c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017920:	9d00      	ldr	r5, [sp, #0]
 8017922:	4642      	mov	r2, r8
 8017924:	464b      	mov	r3, r9
 8017926:	4630      	mov	r0, r6
 8017928:	4639      	mov	r1, r7
 801792a:	f7e8 ff8f 	bl	800084c <__aeabi_ddiv>
 801792e:	f7e9 f913 	bl	8000b58 <__aeabi_d2iz>
 8017932:	9002      	str	r0, [sp, #8]
 8017934:	f7e8 fdf6 	bl	8000524 <__aeabi_i2d>
 8017938:	4642      	mov	r2, r8
 801793a:	464b      	mov	r3, r9
 801793c:	f7e8 fe5c 	bl	80005f8 <__aeabi_dmul>
 8017940:	4602      	mov	r2, r0
 8017942:	460b      	mov	r3, r1
 8017944:	4630      	mov	r0, r6
 8017946:	4639      	mov	r1, r7
 8017948:	f7e8 fc9e 	bl	8000288 <__aeabi_dsub>
 801794c:	9e02      	ldr	r6, [sp, #8]
 801794e:	9f01      	ldr	r7, [sp, #4]
 8017950:	3630      	adds	r6, #48	; 0x30
 8017952:	f805 6b01 	strb.w	r6, [r5], #1
 8017956:	9e00      	ldr	r6, [sp, #0]
 8017958:	1bae      	subs	r6, r5, r6
 801795a:	42b7      	cmp	r7, r6
 801795c:	4602      	mov	r2, r0
 801795e:	460b      	mov	r3, r1
 8017960:	d137      	bne.n	80179d2 <_dtoa_r+0x722>
 8017962:	f7e8 fc93 	bl	800028c <__adddf3>
 8017966:	4642      	mov	r2, r8
 8017968:	464b      	mov	r3, r9
 801796a:	4606      	mov	r6, r0
 801796c:	460f      	mov	r7, r1
 801796e:	f7e9 f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 8017972:	b9c8      	cbnz	r0, 80179a8 <_dtoa_r+0x6f8>
 8017974:	4642      	mov	r2, r8
 8017976:	464b      	mov	r3, r9
 8017978:	4630      	mov	r0, r6
 801797a:	4639      	mov	r1, r7
 801797c:	f7e9 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8017980:	b110      	cbz	r0, 8017988 <_dtoa_r+0x6d8>
 8017982:	9b02      	ldr	r3, [sp, #8]
 8017984:	07d9      	lsls	r1, r3, #31
 8017986:	d40f      	bmi.n	80179a8 <_dtoa_r+0x6f8>
 8017988:	4620      	mov	r0, r4
 801798a:	4659      	mov	r1, fp
 801798c:	f000 fe4e 	bl	801862c <_Bfree>
 8017990:	2300      	movs	r3, #0
 8017992:	702b      	strb	r3, [r5, #0]
 8017994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017996:	f10a 0001 	add.w	r0, sl, #1
 801799a:	6018      	str	r0, [r3, #0]
 801799c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f43f acd8 	beq.w	8017354 <_dtoa_r+0xa4>
 80179a4:	601d      	str	r5, [r3, #0]
 80179a6:	e4d5      	b.n	8017354 <_dtoa_r+0xa4>
 80179a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80179ac:	462b      	mov	r3, r5
 80179ae:	461d      	mov	r5, r3
 80179b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179b4:	2a39      	cmp	r2, #57	; 0x39
 80179b6:	d108      	bne.n	80179ca <_dtoa_r+0x71a>
 80179b8:	9a00      	ldr	r2, [sp, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d1f7      	bne.n	80179ae <_dtoa_r+0x6fe>
 80179be:	9a07      	ldr	r2, [sp, #28]
 80179c0:	9900      	ldr	r1, [sp, #0]
 80179c2:	3201      	adds	r2, #1
 80179c4:	9207      	str	r2, [sp, #28]
 80179c6:	2230      	movs	r2, #48	; 0x30
 80179c8:	700a      	strb	r2, [r1, #0]
 80179ca:	781a      	ldrb	r2, [r3, #0]
 80179cc:	3201      	adds	r2, #1
 80179ce:	701a      	strb	r2, [r3, #0]
 80179d0:	e78c      	b.n	80178ec <_dtoa_r+0x63c>
 80179d2:	4b7f      	ldr	r3, [pc, #508]	; (8017bd0 <_dtoa_r+0x920>)
 80179d4:	2200      	movs	r2, #0
 80179d6:	f7e8 fe0f 	bl	80005f8 <__aeabi_dmul>
 80179da:	2200      	movs	r2, #0
 80179dc:	2300      	movs	r3, #0
 80179de:	4606      	mov	r6, r0
 80179e0:	460f      	mov	r7, r1
 80179e2:	f7e9 f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80179e6:	2800      	cmp	r0, #0
 80179e8:	d09b      	beq.n	8017922 <_dtoa_r+0x672>
 80179ea:	e7cd      	b.n	8017988 <_dtoa_r+0x6d8>
 80179ec:	9a08      	ldr	r2, [sp, #32]
 80179ee:	2a00      	cmp	r2, #0
 80179f0:	f000 80c4 	beq.w	8017b7c <_dtoa_r+0x8cc>
 80179f4:	9a05      	ldr	r2, [sp, #20]
 80179f6:	2a01      	cmp	r2, #1
 80179f8:	f300 80a8 	bgt.w	8017b4c <_dtoa_r+0x89c>
 80179fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80179fe:	2a00      	cmp	r2, #0
 8017a00:	f000 80a0 	beq.w	8017b44 <_dtoa_r+0x894>
 8017a04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017a08:	9e06      	ldr	r6, [sp, #24]
 8017a0a:	4645      	mov	r5, r8
 8017a0c:	9a04      	ldr	r2, [sp, #16]
 8017a0e:	2101      	movs	r1, #1
 8017a10:	441a      	add	r2, r3
 8017a12:	4620      	mov	r0, r4
 8017a14:	4498      	add	r8, r3
 8017a16:	9204      	str	r2, [sp, #16]
 8017a18:	f000 ff0e 	bl	8018838 <__i2b>
 8017a1c:	4607      	mov	r7, r0
 8017a1e:	2d00      	cmp	r5, #0
 8017a20:	dd0b      	ble.n	8017a3a <_dtoa_r+0x78a>
 8017a22:	9b04      	ldr	r3, [sp, #16]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	dd08      	ble.n	8017a3a <_dtoa_r+0x78a>
 8017a28:	42ab      	cmp	r3, r5
 8017a2a:	9a04      	ldr	r2, [sp, #16]
 8017a2c:	bfa8      	it	ge
 8017a2e:	462b      	movge	r3, r5
 8017a30:	eba8 0803 	sub.w	r8, r8, r3
 8017a34:	1aed      	subs	r5, r5, r3
 8017a36:	1ad3      	subs	r3, r2, r3
 8017a38:	9304      	str	r3, [sp, #16]
 8017a3a:	9b06      	ldr	r3, [sp, #24]
 8017a3c:	b1fb      	cbz	r3, 8017a7e <_dtoa_r+0x7ce>
 8017a3e:	9b08      	ldr	r3, [sp, #32]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	f000 809f 	beq.w	8017b84 <_dtoa_r+0x8d4>
 8017a46:	2e00      	cmp	r6, #0
 8017a48:	dd11      	ble.n	8017a6e <_dtoa_r+0x7be>
 8017a4a:	4639      	mov	r1, r7
 8017a4c:	4632      	mov	r2, r6
 8017a4e:	4620      	mov	r0, r4
 8017a50:	f000 ffae 	bl	80189b0 <__pow5mult>
 8017a54:	465a      	mov	r2, fp
 8017a56:	4601      	mov	r1, r0
 8017a58:	4607      	mov	r7, r0
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f000 ff02 	bl	8018864 <__multiply>
 8017a60:	4659      	mov	r1, fp
 8017a62:	9007      	str	r0, [sp, #28]
 8017a64:	4620      	mov	r0, r4
 8017a66:	f000 fde1 	bl	801862c <_Bfree>
 8017a6a:	9b07      	ldr	r3, [sp, #28]
 8017a6c:	469b      	mov	fp, r3
 8017a6e:	9b06      	ldr	r3, [sp, #24]
 8017a70:	1b9a      	subs	r2, r3, r6
 8017a72:	d004      	beq.n	8017a7e <_dtoa_r+0x7ce>
 8017a74:	4659      	mov	r1, fp
 8017a76:	4620      	mov	r0, r4
 8017a78:	f000 ff9a 	bl	80189b0 <__pow5mult>
 8017a7c:	4683      	mov	fp, r0
 8017a7e:	2101      	movs	r1, #1
 8017a80:	4620      	mov	r0, r4
 8017a82:	f000 fed9 	bl	8018838 <__i2b>
 8017a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	4606      	mov	r6, r0
 8017a8c:	dd7c      	ble.n	8017b88 <_dtoa_r+0x8d8>
 8017a8e:	461a      	mov	r2, r3
 8017a90:	4601      	mov	r1, r0
 8017a92:	4620      	mov	r0, r4
 8017a94:	f000 ff8c 	bl	80189b0 <__pow5mult>
 8017a98:	9b05      	ldr	r3, [sp, #20]
 8017a9a:	2b01      	cmp	r3, #1
 8017a9c:	4606      	mov	r6, r0
 8017a9e:	dd76      	ble.n	8017b8e <_dtoa_r+0x8de>
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	9306      	str	r3, [sp, #24]
 8017aa4:	6933      	ldr	r3, [r6, #16]
 8017aa6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017aaa:	6918      	ldr	r0, [r3, #16]
 8017aac:	f000 fe74 	bl	8018798 <__hi0bits>
 8017ab0:	f1c0 0020 	rsb	r0, r0, #32
 8017ab4:	9b04      	ldr	r3, [sp, #16]
 8017ab6:	4418      	add	r0, r3
 8017ab8:	f010 001f 	ands.w	r0, r0, #31
 8017abc:	f000 8086 	beq.w	8017bcc <_dtoa_r+0x91c>
 8017ac0:	f1c0 0320 	rsb	r3, r0, #32
 8017ac4:	2b04      	cmp	r3, #4
 8017ac6:	dd7f      	ble.n	8017bc8 <_dtoa_r+0x918>
 8017ac8:	f1c0 001c 	rsb	r0, r0, #28
 8017acc:	9b04      	ldr	r3, [sp, #16]
 8017ace:	4403      	add	r3, r0
 8017ad0:	4480      	add	r8, r0
 8017ad2:	4405      	add	r5, r0
 8017ad4:	9304      	str	r3, [sp, #16]
 8017ad6:	f1b8 0f00 	cmp.w	r8, #0
 8017ada:	dd05      	ble.n	8017ae8 <_dtoa_r+0x838>
 8017adc:	4659      	mov	r1, fp
 8017ade:	4642      	mov	r2, r8
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f000 ffbf 	bl	8018a64 <__lshift>
 8017ae6:	4683      	mov	fp, r0
 8017ae8:	9b04      	ldr	r3, [sp, #16]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	dd05      	ble.n	8017afa <_dtoa_r+0x84a>
 8017aee:	4631      	mov	r1, r6
 8017af0:	461a      	mov	r2, r3
 8017af2:	4620      	mov	r0, r4
 8017af4:	f000 ffb6 	bl	8018a64 <__lshift>
 8017af8:	4606      	mov	r6, r0
 8017afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d069      	beq.n	8017bd4 <_dtoa_r+0x924>
 8017b00:	4631      	mov	r1, r6
 8017b02:	4658      	mov	r0, fp
 8017b04:	f001 f81a 	bl	8018b3c <__mcmp>
 8017b08:	2800      	cmp	r0, #0
 8017b0a:	da63      	bge.n	8017bd4 <_dtoa_r+0x924>
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	4659      	mov	r1, fp
 8017b10:	220a      	movs	r2, #10
 8017b12:	4620      	mov	r0, r4
 8017b14:	f000 fdac 	bl	8018670 <__multadd>
 8017b18:	9b08      	ldr	r3, [sp, #32]
 8017b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b1e:	4683      	mov	fp, r0
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 818f 	beq.w	8017e44 <_dtoa_r+0xb94>
 8017b26:	4639      	mov	r1, r7
 8017b28:	2300      	movs	r3, #0
 8017b2a:	220a      	movs	r2, #10
 8017b2c:	4620      	mov	r0, r4
 8017b2e:	f000 fd9f 	bl	8018670 <__multadd>
 8017b32:	f1b9 0f00 	cmp.w	r9, #0
 8017b36:	4607      	mov	r7, r0
 8017b38:	f300 808e 	bgt.w	8017c58 <_dtoa_r+0x9a8>
 8017b3c:	9b05      	ldr	r3, [sp, #20]
 8017b3e:	2b02      	cmp	r3, #2
 8017b40:	dc50      	bgt.n	8017be4 <_dtoa_r+0x934>
 8017b42:	e089      	b.n	8017c58 <_dtoa_r+0x9a8>
 8017b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b4a:	e75d      	b.n	8017a08 <_dtoa_r+0x758>
 8017b4c:	9b01      	ldr	r3, [sp, #4]
 8017b4e:	1e5e      	subs	r6, r3, #1
 8017b50:	9b06      	ldr	r3, [sp, #24]
 8017b52:	42b3      	cmp	r3, r6
 8017b54:	bfbf      	itttt	lt
 8017b56:	9b06      	ldrlt	r3, [sp, #24]
 8017b58:	9606      	strlt	r6, [sp, #24]
 8017b5a:	1af2      	sublt	r2, r6, r3
 8017b5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017b5e:	bfb6      	itet	lt
 8017b60:	189b      	addlt	r3, r3, r2
 8017b62:	1b9e      	subge	r6, r3, r6
 8017b64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017b66:	9b01      	ldr	r3, [sp, #4]
 8017b68:	bfb8      	it	lt
 8017b6a:	2600      	movlt	r6, #0
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	bfb5      	itete	lt
 8017b70:	eba8 0503 	sublt.w	r5, r8, r3
 8017b74:	9b01      	ldrge	r3, [sp, #4]
 8017b76:	2300      	movlt	r3, #0
 8017b78:	4645      	movge	r5, r8
 8017b7a:	e747      	b.n	8017a0c <_dtoa_r+0x75c>
 8017b7c:	9e06      	ldr	r6, [sp, #24]
 8017b7e:	9f08      	ldr	r7, [sp, #32]
 8017b80:	4645      	mov	r5, r8
 8017b82:	e74c      	b.n	8017a1e <_dtoa_r+0x76e>
 8017b84:	9a06      	ldr	r2, [sp, #24]
 8017b86:	e775      	b.n	8017a74 <_dtoa_r+0x7c4>
 8017b88:	9b05      	ldr	r3, [sp, #20]
 8017b8a:	2b01      	cmp	r3, #1
 8017b8c:	dc18      	bgt.n	8017bc0 <_dtoa_r+0x910>
 8017b8e:	9b02      	ldr	r3, [sp, #8]
 8017b90:	b9b3      	cbnz	r3, 8017bc0 <_dtoa_r+0x910>
 8017b92:	9b03      	ldr	r3, [sp, #12]
 8017b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b98:	b9a3      	cbnz	r3, 8017bc4 <_dtoa_r+0x914>
 8017b9a:	9b03      	ldr	r3, [sp, #12]
 8017b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ba0:	0d1b      	lsrs	r3, r3, #20
 8017ba2:	051b      	lsls	r3, r3, #20
 8017ba4:	b12b      	cbz	r3, 8017bb2 <_dtoa_r+0x902>
 8017ba6:	9b04      	ldr	r3, [sp, #16]
 8017ba8:	3301      	adds	r3, #1
 8017baa:	9304      	str	r3, [sp, #16]
 8017bac:	f108 0801 	add.w	r8, r8, #1
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	9306      	str	r3, [sp, #24]
 8017bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	f47f af74 	bne.w	8017aa4 <_dtoa_r+0x7f4>
 8017bbc:	2001      	movs	r0, #1
 8017bbe:	e779      	b.n	8017ab4 <_dtoa_r+0x804>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e7f6      	b.n	8017bb2 <_dtoa_r+0x902>
 8017bc4:	9b02      	ldr	r3, [sp, #8]
 8017bc6:	e7f4      	b.n	8017bb2 <_dtoa_r+0x902>
 8017bc8:	d085      	beq.n	8017ad6 <_dtoa_r+0x826>
 8017bca:	4618      	mov	r0, r3
 8017bcc:	301c      	adds	r0, #28
 8017bce:	e77d      	b.n	8017acc <_dtoa_r+0x81c>
 8017bd0:	40240000 	.word	0x40240000
 8017bd4:	9b01      	ldr	r3, [sp, #4]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	dc38      	bgt.n	8017c4c <_dtoa_r+0x99c>
 8017bda:	9b05      	ldr	r3, [sp, #20]
 8017bdc:	2b02      	cmp	r3, #2
 8017bde:	dd35      	ble.n	8017c4c <_dtoa_r+0x99c>
 8017be0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017be4:	f1b9 0f00 	cmp.w	r9, #0
 8017be8:	d10d      	bne.n	8017c06 <_dtoa_r+0x956>
 8017bea:	4631      	mov	r1, r6
 8017bec:	464b      	mov	r3, r9
 8017bee:	2205      	movs	r2, #5
 8017bf0:	4620      	mov	r0, r4
 8017bf2:	f000 fd3d 	bl	8018670 <__multadd>
 8017bf6:	4601      	mov	r1, r0
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	4658      	mov	r0, fp
 8017bfc:	f000 ff9e 	bl	8018b3c <__mcmp>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	f73f adbd 	bgt.w	8017780 <_dtoa_r+0x4d0>
 8017c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c08:	9d00      	ldr	r5, [sp, #0]
 8017c0a:	ea6f 0a03 	mvn.w	sl, r3
 8017c0e:	f04f 0800 	mov.w	r8, #0
 8017c12:	4631      	mov	r1, r6
 8017c14:	4620      	mov	r0, r4
 8017c16:	f000 fd09 	bl	801862c <_Bfree>
 8017c1a:	2f00      	cmp	r7, #0
 8017c1c:	f43f aeb4 	beq.w	8017988 <_dtoa_r+0x6d8>
 8017c20:	f1b8 0f00 	cmp.w	r8, #0
 8017c24:	d005      	beq.n	8017c32 <_dtoa_r+0x982>
 8017c26:	45b8      	cmp	r8, r7
 8017c28:	d003      	beq.n	8017c32 <_dtoa_r+0x982>
 8017c2a:	4641      	mov	r1, r8
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	f000 fcfd 	bl	801862c <_Bfree>
 8017c32:	4639      	mov	r1, r7
 8017c34:	4620      	mov	r0, r4
 8017c36:	f000 fcf9 	bl	801862c <_Bfree>
 8017c3a:	e6a5      	b.n	8017988 <_dtoa_r+0x6d8>
 8017c3c:	2600      	movs	r6, #0
 8017c3e:	4637      	mov	r7, r6
 8017c40:	e7e1      	b.n	8017c06 <_dtoa_r+0x956>
 8017c42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017c44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017c48:	4637      	mov	r7, r6
 8017c4a:	e599      	b.n	8017780 <_dtoa_r+0x4d0>
 8017c4c:	9b08      	ldr	r3, [sp, #32]
 8017c4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	f000 80fd 	beq.w	8017e52 <_dtoa_r+0xba2>
 8017c58:	2d00      	cmp	r5, #0
 8017c5a:	dd05      	ble.n	8017c68 <_dtoa_r+0x9b8>
 8017c5c:	4639      	mov	r1, r7
 8017c5e:	462a      	mov	r2, r5
 8017c60:	4620      	mov	r0, r4
 8017c62:	f000 feff 	bl	8018a64 <__lshift>
 8017c66:	4607      	mov	r7, r0
 8017c68:	9b06      	ldr	r3, [sp, #24]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d05c      	beq.n	8017d28 <_dtoa_r+0xa78>
 8017c6e:	6879      	ldr	r1, [r7, #4]
 8017c70:	4620      	mov	r0, r4
 8017c72:	f000 fc9b 	bl	80185ac <_Balloc>
 8017c76:	4605      	mov	r5, r0
 8017c78:	b928      	cbnz	r0, 8017c86 <_dtoa_r+0x9d6>
 8017c7a:	4b80      	ldr	r3, [pc, #512]	; (8017e7c <_dtoa_r+0xbcc>)
 8017c7c:	4602      	mov	r2, r0
 8017c7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017c82:	f7ff bb2e 	b.w	80172e2 <_dtoa_r+0x32>
 8017c86:	693a      	ldr	r2, [r7, #16]
 8017c88:	3202      	adds	r2, #2
 8017c8a:	0092      	lsls	r2, r2, #2
 8017c8c:	f107 010c 	add.w	r1, r7, #12
 8017c90:	300c      	adds	r0, #12
 8017c92:	f7fd fc0d 	bl	80154b0 <memcpy>
 8017c96:	2201      	movs	r2, #1
 8017c98:	4629      	mov	r1, r5
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f000 fee2 	bl	8018a64 <__lshift>
 8017ca0:	9b00      	ldr	r3, [sp, #0]
 8017ca2:	3301      	adds	r3, #1
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	9b00      	ldr	r3, [sp, #0]
 8017ca8:	444b      	add	r3, r9
 8017caa:	9307      	str	r3, [sp, #28]
 8017cac:	9b02      	ldr	r3, [sp, #8]
 8017cae:	f003 0301 	and.w	r3, r3, #1
 8017cb2:	46b8      	mov	r8, r7
 8017cb4:	9306      	str	r3, [sp, #24]
 8017cb6:	4607      	mov	r7, r0
 8017cb8:	9b01      	ldr	r3, [sp, #4]
 8017cba:	4631      	mov	r1, r6
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	4658      	mov	r0, fp
 8017cc0:	9302      	str	r3, [sp, #8]
 8017cc2:	f7ff fa67 	bl	8017194 <quorem>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	3330      	adds	r3, #48	; 0x30
 8017cca:	9004      	str	r0, [sp, #16]
 8017ccc:	4641      	mov	r1, r8
 8017cce:	4658      	mov	r0, fp
 8017cd0:	9308      	str	r3, [sp, #32]
 8017cd2:	f000 ff33 	bl	8018b3c <__mcmp>
 8017cd6:	463a      	mov	r2, r7
 8017cd8:	4681      	mov	r9, r0
 8017cda:	4631      	mov	r1, r6
 8017cdc:	4620      	mov	r0, r4
 8017cde:	f000 ff49 	bl	8018b74 <__mdiff>
 8017ce2:	68c2      	ldr	r2, [r0, #12]
 8017ce4:	9b08      	ldr	r3, [sp, #32]
 8017ce6:	4605      	mov	r5, r0
 8017ce8:	bb02      	cbnz	r2, 8017d2c <_dtoa_r+0xa7c>
 8017cea:	4601      	mov	r1, r0
 8017cec:	4658      	mov	r0, fp
 8017cee:	f000 ff25 	bl	8018b3c <__mcmp>
 8017cf2:	9b08      	ldr	r3, [sp, #32]
 8017cf4:	4602      	mov	r2, r0
 8017cf6:	4629      	mov	r1, r5
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017cfe:	f000 fc95 	bl	801862c <_Bfree>
 8017d02:	9b05      	ldr	r3, [sp, #20]
 8017d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d06:	9d01      	ldr	r5, [sp, #4]
 8017d08:	ea43 0102 	orr.w	r1, r3, r2
 8017d0c:	9b06      	ldr	r3, [sp, #24]
 8017d0e:	430b      	orrs	r3, r1
 8017d10:	9b08      	ldr	r3, [sp, #32]
 8017d12:	d10d      	bne.n	8017d30 <_dtoa_r+0xa80>
 8017d14:	2b39      	cmp	r3, #57	; 0x39
 8017d16:	d029      	beq.n	8017d6c <_dtoa_r+0xabc>
 8017d18:	f1b9 0f00 	cmp.w	r9, #0
 8017d1c:	dd01      	ble.n	8017d22 <_dtoa_r+0xa72>
 8017d1e:	9b04      	ldr	r3, [sp, #16]
 8017d20:	3331      	adds	r3, #49	; 0x31
 8017d22:	9a02      	ldr	r2, [sp, #8]
 8017d24:	7013      	strb	r3, [r2, #0]
 8017d26:	e774      	b.n	8017c12 <_dtoa_r+0x962>
 8017d28:	4638      	mov	r0, r7
 8017d2a:	e7b9      	b.n	8017ca0 <_dtoa_r+0x9f0>
 8017d2c:	2201      	movs	r2, #1
 8017d2e:	e7e2      	b.n	8017cf6 <_dtoa_r+0xa46>
 8017d30:	f1b9 0f00 	cmp.w	r9, #0
 8017d34:	db06      	blt.n	8017d44 <_dtoa_r+0xa94>
 8017d36:	9905      	ldr	r1, [sp, #20]
 8017d38:	ea41 0909 	orr.w	r9, r1, r9
 8017d3c:	9906      	ldr	r1, [sp, #24]
 8017d3e:	ea59 0101 	orrs.w	r1, r9, r1
 8017d42:	d120      	bne.n	8017d86 <_dtoa_r+0xad6>
 8017d44:	2a00      	cmp	r2, #0
 8017d46:	ddec      	ble.n	8017d22 <_dtoa_r+0xa72>
 8017d48:	4659      	mov	r1, fp
 8017d4a:	2201      	movs	r2, #1
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	9301      	str	r3, [sp, #4]
 8017d50:	f000 fe88 	bl	8018a64 <__lshift>
 8017d54:	4631      	mov	r1, r6
 8017d56:	4683      	mov	fp, r0
 8017d58:	f000 fef0 	bl	8018b3c <__mcmp>
 8017d5c:	2800      	cmp	r0, #0
 8017d5e:	9b01      	ldr	r3, [sp, #4]
 8017d60:	dc02      	bgt.n	8017d68 <_dtoa_r+0xab8>
 8017d62:	d1de      	bne.n	8017d22 <_dtoa_r+0xa72>
 8017d64:	07da      	lsls	r2, r3, #31
 8017d66:	d5dc      	bpl.n	8017d22 <_dtoa_r+0xa72>
 8017d68:	2b39      	cmp	r3, #57	; 0x39
 8017d6a:	d1d8      	bne.n	8017d1e <_dtoa_r+0xa6e>
 8017d6c:	9a02      	ldr	r2, [sp, #8]
 8017d6e:	2339      	movs	r3, #57	; 0x39
 8017d70:	7013      	strb	r3, [r2, #0]
 8017d72:	462b      	mov	r3, r5
 8017d74:	461d      	mov	r5, r3
 8017d76:	3b01      	subs	r3, #1
 8017d78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d7c:	2a39      	cmp	r2, #57	; 0x39
 8017d7e:	d050      	beq.n	8017e22 <_dtoa_r+0xb72>
 8017d80:	3201      	adds	r2, #1
 8017d82:	701a      	strb	r2, [r3, #0]
 8017d84:	e745      	b.n	8017c12 <_dtoa_r+0x962>
 8017d86:	2a00      	cmp	r2, #0
 8017d88:	dd03      	ble.n	8017d92 <_dtoa_r+0xae2>
 8017d8a:	2b39      	cmp	r3, #57	; 0x39
 8017d8c:	d0ee      	beq.n	8017d6c <_dtoa_r+0xabc>
 8017d8e:	3301      	adds	r3, #1
 8017d90:	e7c7      	b.n	8017d22 <_dtoa_r+0xa72>
 8017d92:	9a01      	ldr	r2, [sp, #4]
 8017d94:	9907      	ldr	r1, [sp, #28]
 8017d96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017d9a:	428a      	cmp	r2, r1
 8017d9c:	d02a      	beq.n	8017df4 <_dtoa_r+0xb44>
 8017d9e:	4659      	mov	r1, fp
 8017da0:	2300      	movs	r3, #0
 8017da2:	220a      	movs	r2, #10
 8017da4:	4620      	mov	r0, r4
 8017da6:	f000 fc63 	bl	8018670 <__multadd>
 8017daa:	45b8      	cmp	r8, r7
 8017dac:	4683      	mov	fp, r0
 8017dae:	f04f 0300 	mov.w	r3, #0
 8017db2:	f04f 020a 	mov.w	r2, #10
 8017db6:	4641      	mov	r1, r8
 8017db8:	4620      	mov	r0, r4
 8017dba:	d107      	bne.n	8017dcc <_dtoa_r+0xb1c>
 8017dbc:	f000 fc58 	bl	8018670 <__multadd>
 8017dc0:	4680      	mov	r8, r0
 8017dc2:	4607      	mov	r7, r0
 8017dc4:	9b01      	ldr	r3, [sp, #4]
 8017dc6:	3301      	adds	r3, #1
 8017dc8:	9301      	str	r3, [sp, #4]
 8017dca:	e775      	b.n	8017cb8 <_dtoa_r+0xa08>
 8017dcc:	f000 fc50 	bl	8018670 <__multadd>
 8017dd0:	4639      	mov	r1, r7
 8017dd2:	4680      	mov	r8, r0
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	220a      	movs	r2, #10
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 fc49 	bl	8018670 <__multadd>
 8017dde:	4607      	mov	r7, r0
 8017de0:	e7f0      	b.n	8017dc4 <_dtoa_r+0xb14>
 8017de2:	f1b9 0f00 	cmp.w	r9, #0
 8017de6:	9a00      	ldr	r2, [sp, #0]
 8017de8:	bfcc      	ite	gt
 8017dea:	464d      	movgt	r5, r9
 8017dec:	2501      	movle	r5, #1
 8017dee:	4415      	add	r5, r2
 8017df0:	f04f 0800 	mov.w	r8, #0
 8017df4:	4659      	mov	r1, fp
 8017df6:	2201      	movs	r2, #1
 8017df8:	4620      	mov	r0, r4
 8017dfa:	9301      	str	r3, [sp, #4]
 8017dfc:	f000 fe32 	bl	8018a64 <__lshift>
 8017e00:	4631      	mov	r1, r6
 8017e02:	4683      	mov	fp, r0
 8017e04:	f000 fe9a 	bl	8018b3c <__mcmp>
 8017e08:	2800      	cmp	r0, #0
 8017e0a:	dcb2      	bgt.n	8017d72 <_dtoa_r+0xac2>
 8017e0c:	d102      	bne.n	8017e14 <_dtoa_r+0xb64>
 8017e0e:	9b01      	ldr	r3, [sp, #4]
 8017e10:	07db      	lsls	r3, r3, #31
 8017e12:	d4ae      	bmi.n	8017d72 <_dtoa_r+0xac2>
 8017e14:	462b      	mov	r3, r5
 8017e16:	461d      	mov	r5, r3
 8017e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e1c:	2a30      	cmp	r2, #48	; 0x30
 8017e1e:	d0fa      	beq.n	8017e16 <_dtoa_r+0xb66>
 8017e20:	e6f7      	b.n	8017c12 <_dtoa_r+0x962>
 8017e22:	9a00      	ldr	r2, [sp, #0]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d1a5      	bne.n	8017d74 <_dtoa_r+0xac4>
 8017e28:	f10a 0a01 	add.w	sl, sl, #1
 8017e2c:	2331      	movs	r3, #49	; 0x31
 8017e2e:	e779      	b.n	8017d24 <_dtoa_r+0xa74>
 8017e30:	4b13      	ldr	r3, [pc, #76]	; (8017e80 <_dtoa_r+0xbd0>)
 8017e32:	f7ff baaf 	b.w	8017394 <_dtoa_r+0xe4>
 8017e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	f47f aa86 	bne.w	801734a <_dtoa_r+0x9a>
 8017e3e:	4b11      	ldr	r3, [pc, #68]	; (8017e84 <_dtoa_r+0xbd4>)
 8017e40:	f7ff baa8 	b.w	8017394 <_dtoa_r+0xe4>
 8017e44:	f1b9 0f00 	cmp.w	r9, #0
 8017e48:	dc03      	bgt.n	8017e52 <_dtoa_r+0xba2>
 8017e4a:	9b05      	ldr	r3, [sp, #20]
 8017e4c:	2b02      	cmp	r3, #2
 8017e4e:	f73f aec9 	bgt.w	8017be4 <_dtoa_r+0x934>
 8017e52:	9d00      	ldr	r5, [sp, #0]
 8017e54:	4631      	mov	r1, r6
 8017e56:	4658      	mov	r0, fp
 8017e58:	f7ff f99c 	bl	8017194 <quorem>
 8017e5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017e60:	f805 3b01 	strb.w	r3, [r5], #1
 8017e64:	9a00      	ldr	r2, [sp, #0]
 8017e66:	1aaa      	subs	r2, r5, r2
 8017e68:	4591      	cmp	r9, r2
 8017e6a:	ddba      	ble.n	8017de2 <_dtoa_r+0xb32>
 8017e6c:	4659      	mov	r1, fp
 8017e6e:	2300      	movs	r3, #0
 8017e70:	220a      	movs	r2, #10
 8017e72:	4620      	mov	r0, r4
 8017e74:	f000 fbfc 	bl	8018670 <__multadd>
 8017e78:	4683      	mov	fp, r0
 8017e7a:	e7eb      	b.n	8017e54 <_dtoa_r+0xba4>
 8017e7c:	0801c034 	.word	0x0801c034
 8017e80:	0801be34 	.word	0x0801be34
 8017e84:	0801bfb1 	.word	0x0801bfb1

08017e88 <rshift>:
 8017e88:	6903      	ldr	r3, [r0, #16]
 8017e8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017e96:	f100 0414 	add.w	r4, r0, #20
 8017e9a:	dd45      	ble.n	8017f28 <rshift+0xa0>
 8017e9c:	f011 011f 	ands.w	r1, r1, #31
 8017ea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017ea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017ea8:	d10c      	bne.n	8017ec4 <rshift+0x3c>
 8017eaa:	f100 0710 	add.w	r7, r0, #16
 8017eae:	4629      	mov	r1, r5
 8017eb0:	42b1      	cmp	r1, r6
 8017eb2:	d334      	bcc.n	8017f1e <rshift+0x96>
 8017eb4:	1a9b      	subs	r3, r3, r2
 8017eb6:	009b      	lsls	r3, r3, #2
 8017eb8:	1eea      	subs	r2, r5, #3
 8017eba:	4296      	cmp	r6, r2
 8017ebc:	bf38      	it	cc
 8017ebe:	2300      	movcc	r3, #0
 8017ec0:	4423      	add	r3, r4
 8017ec2:	e015      	b.n	8017ef0 <rshift+0x68>
 8017ec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017ec8:	f1c1 0820 	rsb	r8, r1, #32
 8017ecc:	40cf      	lsrs	r7, r1
 8017ece:	f105 0e04 	add.w	lr, r5, #4
 8017ed2:	46a1      	mov	r9, r4
 8017ed4:	4576      	cmp	r6, lr
 8017ed6:	46f4      	mov	ip, lr
 8017ed8:	d815      	bhi.n	8017f06 <rshift+0x7e>
 8017eda:	1a9b      	subs	r3, r3, r2
 8017edc:	009a      	lsls	r2, r3, #2
 8017ede:	3a04      	subs	r2, #4
 8017ee0:	3501      	adds	r5, #1
 8017ee2:	42ae      	cmp	r6, r5
 8017ee4:	bf38      	it	cc
 8017ee6:	2200      	movcc	r2, #0
 8017ee8:	18a3      	adds	r3, r4, r2
 8017eea:	50a7      	str	r7, [r4, r2]
 8017eec:	b107      	cbz	r7, 8017ef0 <rshift+0x68>
 8017eee:	3304      	adds	r3, #4
 8017ef0:	1b1a      	subs	r2, r3, r4
 8017ef2:	42a3      	cmp	r3, r4
 8017ef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017ef8:	bf08      	it	eq
 8017efa:	2300      	moveq	r3, #0
 8017efc:	6102      	str	r2, [r0, #16]
 8017efe:	bf08      	it	eq
 8017f00:	6143      	streq	r3, [r0, #20]
 8017f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f06:	f8dc c000 	ldr.w	ip, [ip]
 8017f0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8017f0e:	ea4c 0707 	orr.w	r7, ip, r7
 8017f12:	f849 7b04 	str.w	r7, [r9], #4
 8017f16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017f1a:	40cf      	lsrs	r7, r1
 8017f1c:	e7da      	b.n	8017ed4 <rshift+0x4c>
 8017f1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017f22:	f847 cf04 	str.w	ip, [r7, #4]!
 8017f26:	e7c3      	b.n	8017eb0 <rshift+0x28>
 8017f28:	4623      	mov	r3, r4
 8017f2a:	e7e1      	b.n	8017ef0 <rshift+0x68>

08017f2c <__hexdig_fun>:
 8017f2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017f30:	2b09      	cmp	r3, #9
 8017f32:	d802      	bhi.n	8017f3a <__hexdig_fun+0xe>
 8017f34:	3820      	subs	r0, #32
 8017f36:	b2c0      	uxtb	r0, r0
 8017f38:	4770      	bx	lr
 8017f3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017f3e:	2b05      	cmp	r3, #5
 8017f40:	d801      	bhi.n	8017f46 <__hexdig_fun+0x1a>
 8017f42:	3847      	subs	r0, #71	; 0x47
 8017f44:	e7f7      	b.n	8017f36 <__hexdig_fun+0xa>
 8017f46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017f4a:	2b05      	cmp	r3, #5
 8017f4c:	d801      	bhi.n	8017f52 <__hexdig_fun+0x26>
 8017f4e:	3827      	subs	r0, #39	; 0x27
 8017f50:	e7f1      	b.n	8017f36 <__hexdig_fun+0xa>
 8017f52:	2000      	movs	r0, #0
 8017f54:	4770      	bx	lr
	...

08017f58 <__gethex>:
 8017f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	ed2d 8b02 	vpush	{d8}
 8017f60:	b089      	sub	sp, #36	; 0x24
 8017f62:	ee08 0a10 	vmov	s16, r0
 8017f66:	9304      	str	r3, [sp, #16]
 8017f68:	4bbc      	ldr	r3, [pc, #752]	; (801825c <__gethex+0x304>)
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	9301      	str	r3, [sp, #4]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	468b      	mov	fp, r1
 8017f72:	4690      	mov	r8, r2
 8017f74:	f7e8 f92c 	bl	80001d0 <strlen>
 8017f78:	9b01      	ldr	r3, [sp, #4]
 8017f7a:	f8db 2000 	ldr.w	r2, [fp]
 8017f7e:	4403      	add	r3, r0
 8017f80:	4682      	mov	sl, r0
 8017f82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017f86:	9305      	str	r3, [sp, #20]
 8017f88:	1c93      	adds	r3, r2, #2
 8017f8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017f8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017f92:	32fe      	adds	r2, #254	; 0xfe
 8017f94:	18d1      	adds	r1, r2, r3
 8017f96:	461f      	mov	r7, r3
 8017f98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017f9c:	9100      	str	r1, [sp, #0]
 8017f9e:	2830      	cmp	r0, #48	; 0x30
 8017fa0:	d0f8      	beq.n	8017f94 <__gethex+0x3c>
 8017fa2:	f7ff ffc3 	bl	8017f2c <__hexdig_fun>
 8017fa6:	4604      	mov	r4, r0
 8017fa8:	2800      	cmp	r0, #0
 8017faa:	d13a      	bne.n	8018022 <__gethex+0xca>
 8017fac:	9901      	ldr	r1, [sp, #4]
 8017fae:	4652      	mov	r2, sl
 8017fb0:	4638      	mov	r0, r7
 8017fb2:	f001 f929 	bl	8019208 <strncmp>
 8017fb6:	4605      	mov	r5, r0
 8017fb8:	2800      	cmp	r0, #0
 8017fba:	d168      	bne.n	801808e <__gethex+0x136>
 8017fbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017fc0:	eb07 060a 	add.w	r6, r7, sl
 8017fc4:	f7ff ffb2 	bl	8017f2c <__hexdig_fun>
 8017fc8:	2800      	cmp	r0, #0
 8017fca:	d062      	beq.n	8018092 <__gethex+0x13a>
 8017fcc:	4633      	mov	r3, r6
 8017fce:	7818      	ldrb	r0, [r3, #0]
 8017fd0:	2830      	cmp	r0, #48	; 0x30
 8017fd2:	461f      	mov	r7, r3
 8017fd4:	f103 0301 	add.w	r3, r3, #1
 8017fd8:	d0f9      	beq.n	8017fce <__gethex+0x76>
 8017fda:	f7ff ffa7 	bl	8017f2c <__hexdig_fun>
 8017fde:	2301      	movs	r3, #1
 8017fe0:	fab0 f480 	clz	r4, r0
 8017fe4:	0964      	lsrs	r4, r4, #5
 8017fe6:	4635      	mov	r5, r6
 8017fe8:	9300      	str	r3, [sp, #0]
 8017fea:	463a      	mov	r2, r7
 8017fec:	4616      	mov	r6, r2
 8017fee:	3201      	adds	r2, #1
 8017ff0:	7830      	ldrb	r0, [r6, #0]
 8017ff2:	f7ff ff9b 	bl	8017f2c <__hexdig_fun>
 8017ff6:	2800      	cmp	r0, #0
 8017ff8:	d1f8      	bne.n	8017fec <__gethex+0x94>
 8017ffa:	9901      	ldr	r1, [sp, #4]
 8017ffc:	4652      	mov	r2, sl
 8017ffe:	4630      	mov	r0, r6
 8018000:	f001 f902 	bl	8019208 <strncmp>
 8018004:	b980      	cbnz	r0, 8018028 <__gethex+0xd0>
 8018006:	b94d      	cbnz	r5, 801801c <__gethex+0xc4>
 8018008:	eb06 050a 	add.w	r5, r6, sl
 801800c:	462a      	mov	r2, r5
 801800e:	4616      	mov	r6, r2
 8018010:	3201      	adds	r2, #1
 8018012:	7830      	ldrb	r0, [r6, #0]
 8018014:	f7ff ff8a 	bl	8017f2c <__hexdig_fun>
 8018018:	2800      	cmp	r0, #0
 801801a:	d1f8      	bne.n	801800e <__gethex+0xb6>
 801801c:	1bad      	subs	r5, r5, r6
 801801e:	00ad      	lsls	r5, r5, #2
 8018020:	e004      	b.n	801802c <__gethex+0xd4>
 8018022:	2400      	movs	r4, #0
 8018024:	4625      	mov	r5, r4
 8018026:	e7e0      	b.n	8017fea <__gethex+0x92>
 8018028:	2d00      	cmp	r5, #0
 801802a:	d1f7      	bne.n	801801c <__gethex+0xc4>
 801802c:	7833      	ldrb	r3, [r6, #0]
 801802e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018032:	2b50      	cmp	r3, #80	; 0x50
 8018034:	d13b      	bne.n	80180ae <__gethex+0x156>
 8018036:	7873      	ldrb	r3, [r6, #1]
 8018038:	2b2b      	cmp	r3, #43	; 0x2b
 801803a:	d02c      	beq.n	8018096 <__gethex+0x13e>
 801803c:	2b2d      	cmp	r3, #45	; 0x2d
 801803e:	d02e      	beq.n	801809e <__gethex+0x146>
 8018040:	1c71      	adds	r1, r6, #1
 8018042:	f04f 0900 	mov.w	r9, #0
 8018046:	7808      	ldrb	r0, [r1, #0]
 8018048:	f7ff ff70 	bl	8017f2c <__hexdig_fun>
 801804c:	1e43      	subs	r3, r0, #1
 801804e:	b2db      	uxtb	r3, r3
 8018050:	2b18      	cmp	r3, #24
 8018052:	d82c      	bhi.n	80180ae <__gethex+0x156>
 8018054:	f1a0 0210 	sub.w	r2, r0, #16
 8018058:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801805c:	f7ff ff66 	bl	8017f2c <__hexdig_fun>
 8018060:	1e43      	subs	r3, r0, #1
 8018062:	b2db      	uxtb	r3, r3
 8018064:	2b18      	cmp	r3, #24
 8018066:	d91d      	bls.n	80180a4 <__gethex+0x14c>
 8018068:	f1b9 0f00 	cmp.w	r9, #0
 801806c:	d000      	beq.n	8018070 <__gethex+0x118>
 801806e:	4252      	negs	r2, r2
 8018070:	4415      	add	r5, r2
 8018072:	f8cb 1000 	str.w	r1, [fp]
 8018076:	b1e4      	cbz	r4, 80180b2 <__gethex+0x15a>
 8018078:	9b00      	ldr	r3, [sp, #0]
 801807a:	2b00      	cmp	r3, #0
 801807c:	bf14      	ite	ne
 801807e:	2700      	movne	r7, #0
 8018080:	2706      	moveq	r7, #6
 8018082:	4638      	mov	r0, r7
 8018084:	b009      	add	sp, #36	; 0x24
 8018086:	ecbd 8b02 	vpop	{d8}
 801808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801808e:	463e      	mov	r6, r7
 8018090:	4625      	mov	r5, r4
 8018092:	2401      	movs	r4, #1
 8018094:	e7ca      	b.n	801802c <__gethex+0xd4>
 8018096:	f04f 0900 	mov.w	r9, #0
 801809a:	1cb1      	adds	r1, r6, #2
 801809c:	e7d3      	b.n	8018046 <__gethex+0xee>
 801809e:	f04f 0901 	mov.w	r9, #1
 80180a2:	e7fa      	b.n	801809a <__gethex+0x142>
 80180a4:	230a      	movs	r3, #10
 80180a6:	fb03 0202 	mla	r2, r3, r2, r0
 80180aa:	3a10      	subs	r2, #16
 80180ac:	e7d4      	b.n	8018058 <__gethex+0x100>
 80180ae:	4631      	mov	r1, r6
 80180b0:	e7df      	b.n	8018072 <__gethex+0x11a>
 80180b2:	1bf3      	subs	r3, r6, r7
 80180b4:	3b01      	subs	r3, #1
 80180b6:	4621      	mov	r1, r4
 80180b8:	2b07      	cmp	r3, #7
 80180ba:	dc0b      	bgt.n	80180d4 <__gethex+0x17c>
 80180bc:	ee18 0a10 	vmov	r0, s16
 80180c0:	f000 fa74 	bl	80185ac <_Balloc>
 80180c4:	4604      	mov	r4, r0
 80180c6:	b940      	cbnz	r0, 80180da <__gethex+0x182>
 80180c8:	4b65      	ldr	r3, [pc, #404]	; (8018260 <__gethex+0x308>)
 80180ca:	4602      	mov	r2, r0
 80180cc:	21de      	movs	r1, #222	; 0xde
 80180ce:	4865      	ldr	r0, [pc, #404]	; (8018264 <__gethex+0x30c>)
 80180d0:	f001 f8ba 	bl	8019248 <__assert_func>
 80180d4:	3101      	adds	r1, #1
 80180d6:	105b      	asrs	r3, r3, #1
 80180d8:	e7ee      	b.n	80180b8 <__gethex+0x160>
 80180da:	f100 0914 	add.w	r9, r0, #20
 80180de:	f04f 0b00 	mov.w	fp, #0
 80180e2:	f1ca 0301 	rsb	r3, sl, #1
 80180e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80180ea:	f8cd b000 	str.w	fp, [sp]
 80180ee:	9306      	str	r3, [sp, #24]
 80180f0:	42b7      	cmp	r7, r6
 80180f2:	d340      	bcc.n	8018176 <__gethex+0x21e>
 80180f4:	9802      	ldr	r0, [sp, #8]
 80180f6:	9b00      	ldr	r3, [sp, #0]
 80180f8:	f840 3b04 	str.w	r3, [r0], #4
 80180fc:	eba0 0009 	sub.w	r0, r0, r9
 8018100:	1080      	asrs	r0, r0, #2
 8018102:	0146      	lsls	r6, r0, #5
 8018104:	6120      	str	r0, [r4, #16]
 8018106:	4618      	mov	r0, r3
 8018108:	f000 fb46 	bl	8018798 <__hi0bits>
 801810c:	1a30      	subs	r0, r6, r0
 801810e:	f8d8 6000 	ldr.w	r6, [r8]
 8018112:	42b0      	cmp	r0, r6
 8018114:	dd63      	ble.n	80181de <__gethex+0x286>
 8018116:	1b87      	subs	r7, r0, r6
 8018118:	4639      	mov	r1, r7
 801811a:	4620      	mov	r0, r4
 801811c:	f000 fee0 	bl	8018ee0 <__any_on>
 8018120:	4682      	mov	sl, r0
 8018122:	b1a8      	cbz	r0, 8018150 <__gethex+0x1f8>
 8018124:	1e7b      	subs	r3, r7, #1
 8018126:	1159      	asrs	r1, r3, #5
 8018128:	f003 021f 	and.w	r2, r3, #31
 801812c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018130:	f04f 0a01 	mov.w	sl, #1
 8018134:	fa0a f202 	lsl.w	r2, sl, r2
 8018138:	420a      	tst	r2, r1
 801813a:	d009      	beq.n	8018150 <__gethex+0x1f8>
 801813c:	4553      	cmp	r3, sl
 801813e:	dd05      	ble.n	801814c <__gethex+0x1f4>
 8018140:	1eb9      	subs	r1, r7, #2
 8018142:	4620      	mov	r0, r4
 8018144:	f000 fecc 	bl	8018ee0 <__any_on>
 8018148:	2800      	cmp	r0, #0
 801814a:	d145      	bne.n	80181d8 <__gethex+0x280>
 801814c:	f04f 0a02 	mov.w	sl, #2
 8018150:	4639      	mov	r1, r7
 8018152:	4620      	mov	r0, r4
 8018154:	f7ff fe98 	bl	8017e88 <rshift>
 8018158:	443d      	add	r5, r7
 801815a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801815e:	42ab      	cmp	r3, r5
 8018160:	da4c      	bge.n	80181fc <__gethex+0x2a4>
 8018162:	ee18 0a10 	vmov	r0, s16
 8018166:	4621      	mov	r1, r4
 8018168:	f000 fa60 	bl	801862c <_Bfree>
 801816c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801816e:	2300      	movs	r3, #0
 8018170:	6013      	str	r3, [r2, #0]
 8018172:	27a3      	movs	r7, #163	; 0xa3
 8018174:	e785      	b.n	8018082 <__gethex+0x12a>
 8018176:	1e73      	subs	r3, r6, #1
 8018178:	9a05      	ldr	r2, [sp, #20]
 801817a:	9303      	str	r3, [sp, #12]
 801817c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018180:	4293      	cmp	r3, r2
 8018182:	d019      	beq.n	80181b8 <__gethex+0x260>
 8018184:	f1bb 0f20 	cmp.w	fp, #32
 8018188:	d107      	bne.n	801819a <__gethex+0x242>
 801818a:	9b02      	ldr	r3, [sp, #8]
 801818c:	9a00      	ldr	r2, [sp, #0]
 801818e:	f843 2b04 	str.w	r2, [r3], #4
 8018192:	9302      	str	r3, [sp, #8]
 8018194:	2300      	movs	r3, #0
 8018196:	9300      	str	r3, [sp, #0]
 8018198:	469b      	mov	fp, r3
 801819a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801819e:	f7ff fec5 	bl	8017f2c <__hexdig_fun>
 80181a2:	9b00      	ldr	r3, [sp, #0]
 80181a4:	f000 000f 	and.w	r0, r0, #15
 80181a8:	fa00 f00b 	lsl.w	r0, r0, fp
 80181ac:	4303      	orrs	r3, r0
 80181ae:	9300      	str	r3, [sp, #0]
 80181b0:	f10b 0b04 	add.w	fp, fp, #4
 80181b4:	9b03      	ldr	r3, [sp, #12]
 80181b6:	e00d      	b.n	80181d4 <__gethex+0x27c>
 80181b8:	9b03      	ldr	r3, [sp, #12]
 80181ba:	9a06      	ldr	r2, [sp, #24]
 80181bc:	4413      	add	r3, r2
 80181be:	42bb      	cmp	r3, r7
 80181c0:	d3e0      	bcc.n	8018184 <__gethex+0x22c>
 80181c2:	4618      	mov	r0, r3
 80181c4:	9901      	ldr	r1, [sp, #4]
 80181c6:	9307      	str	r3, [sp, #28]
 80181c8:	4652      	mov	r2, sl
 80181ca:	f001 f81d 	bl	8019208 <strncmp>
 80181ce:	9b07      	ldr	r3, [sp, #28]
 80181d0:	2800      	cmp	r0, #0
 80181d2:	d1d7      	bne.n	8018184 <__gethex+0x22c>
 80181d4:	461e      	mov	r6, r3
 80181d6:	e78b      	b.n	80180f0 <__gethex+0x198>
 80181d8:	f04f 0a03 	mov.w	sl, #3
 80181dc:	e7b8      	b.n	8018150 <__gethex+0x1f8>
 80181de:	da0a      	bge.n	80181f6 <__gethex+0x29e>
 80181e0:	1a37      	subs	r7, r6, r0
 80181e2:	4621      	mov	r1, r4
 80181e4:	ee18 0a10 	vmov	r0, s16
 80181e8:	463a      	mov	r2, r7
 80181ea:	f000 fc3b 	bl	8018a64 <__lshift>
 80181ee:	1bed      	subs	r5, r5, r7
 80181f0:	4604      	mov	r4, r0
 80181f2:	f100 0914 	add.w	r9, r0, #20
 80181f6:	f04f 0a00 	mov.w	sl, #0
 80181fa:	e7ae      	b.n	801815a <__gethex+0x202>
 80181fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018200:	42a8      	cmp	r0, r5
 8018202:	dd72      	ble.n	80182ea <__gethex+0x392>
 8018204:	1b45      	subs	r5, r0, r5
 8018206:	42ae      	cmp	r6, r5
 8018208:	dc36      	bgt.n	8018278 <__gethex+0x320>
 801820a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801820e:	2b02      	cmp	r3, #2
 8018210:	d02a      	beq.n	8018268 <__gethex+0x310>
 8018212:	2b03      	cmp	r3, #3
 8018214:	d02c      	beq.n	8018270 <__gethex+0x318>
 8018216:	2b01      	cmp	r3, #1
 8018218:	d115      	bne.n	8018246 <__gethex+0x2ee>
 801821a:	42ae      	cmp	r6, r5
 801821c:	d113      	bne.n	8018246 <__gethex+0x2ee>
 801821e:	2e01      	cmp	r6, #1
 8018220:	d10b      	bne.n	801823a <__gethex+0x2e2>
 8018222:	9a04      	ldr	r2, [sp, #16]
 8018224:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018228:	6013      	str	r3, [r2, #0]
 801822a:	2301      	movs	r3, #1
 801822c:	6123      	str	r3, [r4, #16]
 801822e:	f8c9 3000 	str.w	r3, [r9]
 8018232:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018234:	2762      	movs	r7, #98	; 0x62
 8018236:	601c      	str	r4, [r3, #0]
 8018238:	e723      	b.n	8018082 <__gethex+0x12a>
 801823a:	1e71      	subs	r1, r6, #1
 801823c:	4620      	mov	r0, r4
 801823e:	f000 fe4f 	bl	8018ee0 <__any_on>
 8018242:	2800      	cmp	r0, #0
 8018244:	d1ed      	bne.n	8018222 <__gethex+0x2ca>
 8018246:	ee18 0a10 	vmov	r0, s16
 801824a:	4621      	mov	r1, r4
 801824c:	f000 f9ee 	bl	801862c <_Bfree>
 8018250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018252:	2300      	movs	r3, #0
 8018254:	6013      	str	r3, [r2, #0]
 8018256:	2750      	movs	r7, #80	; 0x50
 8018258:	e713      	b.n	8018082 <__gethex+0x12a>
 801825a:	bf00      	nop
 801825c:	0801c0b0 	.word	0x0801c0b0
 8018260:	0801c034 	.word	0x0801c034
 8018264:	0801c045 	.word	0x0801c045
 8018268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801826a:	2b00      	cmp	r3, #0
 801826c:	d1eb      	bne.n	8018246 <__gethex+0x2ee>
 801826e:	e7d8      	b.n	8018222 <__gethex+0x2ca>
 8018270:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018272:	2b00      	cmp	r3, #0
 8018274:	d1d5      	bne.n	8018222 <__gethex+0x2ca>
 8018276:	e7e6      	b.n	8018246 <__gethex+0x2ee>
 8018278:	1e6f      	subs	r7, r5, #1
 801827a:	f1ba 0f00 	cmp.w	sl, #0
 801827e:	d131      	bne.n	80182e4 <__gethex+0x38c>
 8018280:	b127      	cbz	r7, 801828c <__gethex+0x334>
 8018282:	4639      	mov	r1, r7
 8018284:	4620      	mov	r0, r4
 8018286:	f000 fe2b 	bl	8018ee0 <__any_on>
 801828a:	4682      	mov	sl, r0
 801828c:	117b      	asrs	r3, r7, #5
 801828e:	2101      	movs	r1, #1
 8018290:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018294:	f007 071f 	and.w	r7, r7, #31
 8018298:	fa01 f707 	lsl.w	r7, r1, r7
 801829c:	421f      	tst	r7, r3
 801829e:	4629      	mov	r1, r5
 80182a0:	4620      	mov	r0, r4
 80182a2:	bf18      	it	ne
 80182a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80182a8:	1b76      	subs	r6, r6, r5
 80182aa:	f7ff fded 	bl	8017e88 <rshift>
 80182ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80182b2:	2702      	movs	r7, #2
 80182b4:	f1ba 0f00 	cmp.w	sl, #0
 80182b8:	d048      	beq.n	801834c <__gethex+0x3f4>
 80182ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80182be:	2b02      	cmp	r3, #2
 80182c0:	d015      	beq.n	80182ee <__gethex+0x396>
 80182c2:	2b03      	cmp	r3, #3
 80182c4:	d017      	beq.n	80182f6 <__gethex+0x39e>
 80182c6:	2b01      	cmp	r3, #1
 80182c8:	d109      	bne.n	80182de <__gethex+0x386>
 80182ca:	f01a 0f02 	tst.w	sl, #2
 80182ce:	d006      	beq.n	80182de <__gethex+0x386>
 80182d0:	f8d9 0000 	ldr.w	r0, [r9]
 80182d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80182d8:	f01a 0f01 	tst.w	sl, #1
 80182dc:	d10e      	bne.n	80182fc <__gethex+0x3a4>
 80182de:	f047 0710 	orr.w	r7, r7, #16
 80182e2:	e033      	b.n	801834c <__gethex+0x3f4>
 80182e4:	f04f 0a01 	mov.w	sl, #1
 80182e8:	e7d0      	b.n	801828c <__gethex+0x334>
 80182ea:	2701      	movs	r7, #1
 80182ec:	e7e2      	b.n	80182b4 <__gethex+0x35c>
 80182ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80182f0:	f1c3 0301 	rsb	r3, r3, #1
 80182f4:	9315      	str	r3, [sp, #84]	; 0x54
 80182f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d0f0      	beq.n	80182de <__gethex+0x386>
 80182fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018300:	f104 0314 	add.w	r3, r4, #20
 8018304:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018308:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801830c:	f04f 0c00 	mov.w	ip, #0
 8018310:	4618      	mov	r0, r3
 8018312:	f853 2b04 	ldr.w	r2, [r3], #4
 8018316:	f1b2 3fff 	cmp.w	r2, #4294967295
 801831a:	d01c      	beq.n	8018356 <__gethex+0x3fe>
 801831c:	3201      	adds	r2, #1
 801831e:	6002      	str	r2, [r0, #0]
 8018320:	2f02      	cmp	r7, #2
 8018322:	f104 0314 	add.w	r3, r4, #20
 8018326:	d13f      	bne.n	80183a8 <__gethex+0x450>
 8018328:	f8d8 2000 	ldr.w	r2, [r8]
 801832c:	3a01      	subs	r2, #1
 801832e:	42b2      	cmp	r2, r6
 8018330:	d10a      	bne.n	8018348 <__gethex+0x3f0>
 8018332:	1171      	asrs	r1, r6, #5
 8018334:	2201      	movs	r2, #1
 8018336:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801833a:	f006 061f 	and.w	r6, r6, #31
 801833e:	fa02 f606 	lsl.w	r6, r2, r6
 8018342:	421e      	tst	r6, r3
 8018344:	bf18      	it	ne
 8018346:	4617      	movne	r7, r2
 8018348:	f047 0720 	orr.w	r7, r7, #32
 801834c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801834e:	601c      	str	r4, [r3, #0]
 8018350:	9b04      	ldr	r3, [sp, #16]
 8018352:	601d      	str	r5, [r3, #0]
 8018354:	e695      	b.n	8018082 <__gethex+0x12a>
 8018356:	4299      	cmp	r1, r3
 8018358:	f843 cc04 	str.w	ip, [r3, #-4]
 801835c:	d8d8      	bhi.n	8018310 <__gethex+0x3b8>
 801835e:	68a3      	ldr	r3, [r4, #8]
 8018360:	459b      	cmp	fp, r3
 8018362:	db19      	blt.n	8018398 <__gethex+0x440>
 8018364:	6861      	ldr	r1, [r4, #4]
 8018366:	ee18 0a10 	vmov	r0, s16
 801836a:	3101      	adds	r1, #1
 801836c:	f000 f91e 	bl	80185ac <_Balloc>
 8018370:	4681      	mov	r9, r0
 8018372:	b918      	cbnz	r0, 801837c <__gethex+0x424>
 8018374:	4b1a      	ldr	r3, [pc, #104]	; (80183e0 <__gethex+0x488>)
 8018376:	4602      	mov	r2, r0
 8018378:	2184      	movs	r1, #132	; 0x84
 801837a:	e6a8      	b.n	80180ce <__gethex+0x176>
 801837c:	6922      	ldr	r2, [r4, #16]
 801837e:	3202      	adds	r2, #2
 8018380:	f104 010c 	add.w	r1, r4, #12
 8018384:	0092      	lsls	r2, r2, #2
 8018386:	300c      	adds	r0, #12
 8018388:	f7fd f892 	bl	80154b0 <memcpy>
 801838c:	4621      	mov	r1, r4
 801838e:	ee18 0a10 	vmov	r0, s16
 8018392:	f000 f94b 	bl	801862c <_Bfree>
 8018396:	464c      	mov	r4, r9
 8018398:	6923      	ldr	r3, [r4, #16]
 801839a:	1c5a      	adds	r2, r3, #1
 801839c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80183a0:	6122      	str	r2, [r4, #16]
 80183a2:	2201      	movs	r2, #1
 80183a4:	615a      	str	r2, [r3, #20]
 80183a6:	e7bb      	b.n	8018320 <__gethex+0x3c8>
 80183a8:	6922      	ldr	r2, [r4, #16]
 80183aa:	455a      	cmp	r2, fp
 80183ac:	dd0b      	ble.n	80183c6 <__gethex+0x46e>
 80183ae:	2101      	movs	r1, #1
 80183b0:	4620      	mov	r0, r4
 80183b2:	f7ff fd69 	bl	8017e88 <rshift>
 80183b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80183ba:	3501      	adds	r5, #1
 80183bc:	42ab      	cmp	r3, r5
 80183be:	f6ff aed0 	blt.w	8018162 <__gethex+0x20a>
 80183c2:	2701      	movs	r7, #1
 80183c4:	e7c0      	b.n	8018348 <__gethex+0x3f0>
 80183c6:	f016 061f 	ands.w	r6, r6, #31
 80183ca:	d0fa      	beq.n	80183c2 <__gethex+0x46a>
 80183cc:	449a      	add	sl, r3
 80183ce:	f1c6 0620 	rsb	r6, r6, #32
 80183d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80183d6:	f000 f9df 	bl	8018798 <__hi0bits>
 80183da:	42b0      	cmp	r0, r6
 80183dc:	dbe7      	blt.n	80183ae <__gethex+0x456>
 80183de:	e7f0      	b.n	80183c2 <__gethex+0x46a>
 80183e0:	0801c034 	.word	0x0801c034

080183e4 <L_shift>:
 80183e4:	f1c2 0208 	rsb	r2, r2, #8
 80183e8:	0092      	lsls	r2, r2, #2
 80183ea:	b570      	push	{r4, r5, r6, lr}
 80183ec:	f1c2 0620 	rsb	r6, r2, #32
 80183f0:	6843      	ldr	r3, [r0, #4]
 80183f2:	6804      	ldr	r4, [r0, #0]
 80183f4:	fa03 f506 	lsl.w	r5, r3, r6
 80183f8:	432c      	orrs	r4, r5
 80183fa:	40d3      	lsrs	r3, r2
 80183fc:	6004      	str	r4, [r0, #0]
 80183fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8018402:	4288      	cmp	r0, r1
 8018404:	d3f4      	bcc.n	80183f0 <L_shift+0xc>
 8018406:	bd70      	pop	{r4, r5, r6, pc}

08018408 <__match>:
 8018408:	b530      	push	{r4, r5, lr}
 801840a:	6803      	ldr	r3, [r0, #0]
 801840c:	3301      	adds	r3, #1
 801840e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018412:	b914      	cbnz	r4, 801841a <__match+0x12>
 8018414:	6003      	str	r3, [r0, #0]
 8018416:	2001      	movs	r0, #1
 8018418:	bd30      	pop	{r4, r5, pc}
 801841a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801841e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018422:	2d19      	cmp	r5, #25
 8018424:	bf98      	it	ls
 8018426:	3220      	addls	r2, #32
 8018428:	42a2      	cmp	r2, r4
 801842a:	d0f0      	beq.n	801840e <__match+0x6>
 801842c:	2000      	movs	r0, #0
 801842e:	e7f3      	b.n	8018418 <__match+0x10>

08018430 <__hexnan>:
 8018430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018434:	680b      	ldr	r3, [r1, #0]
 8018436:	6801      	ldr	r1, [r0, #0]
 8018438:	115e      	asrs	r6, r3, #5
 801843a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801843e:	f013 031f 	ands.w	r3, r3, #31
 8018442:	b087      	sub	sp, #28
 8018444:	bf18      	it	ne
 8018446:	3604      	addne	r6, #4
 8018448:	2500      	movs	r5, #0
 801844a:	1f37      	subs	r7, r6, #4
 801844c:	4682      	mov	sl, r0
 801844e:	4690      	mov	r8, r2
 8018450:	9301      	str	r3, [sp, #4]
 8018452:	f846 5c04 	str.w	r5, [r6, #-4]
 8018456:	46b9      	mov	r9, r7
 8018458:	463c      	mov	r4, r7
 801845a:	9502      	str	r5, [sp, #8]
 801845c:	46ab      	mov	fp, r5
 801845e:	784a      	ldrb	r2, [r1, #1]
 8018460:	1c4b      	adds	r3, r1, #1
 8018462:	9303      	str	r3, [sp, #12]
 8018464:	b342      	cbz	r2, 80184b8 <__hexnan+0x88>
 8018466:	4610      	mov	r0, r2
 8018468:	9105      	str	r1, [sp, #20]
 801846a:	9204      	str	r2, [sp, #16]
 801846c:	f7ff fd5e 	bl	8017f2c <__hexdig_fun>
 8018470:	2800      	cmp	r0, #0
 8018472:	d14f      	bne.n	8018514 <__hexnan+0xe4>
 8018474:	9a04      	ldr	r2, [sp, #16]
 8018476:	9905      	ldr	r1, [sp, #20]
 8018478:	2a20      	cmp	r2, #32
 801847a:	d818      	bhi.n	80184ae <__hexnan+0x7e>
 801847c:	9b02      	ldr	r3, [sp, #8]
 801847e:	459b      	cmp	fp, r3
 8018480:	dd13      	ble.n	80184aa <__hexnan+0x7a>
 8018482:	454c      	cmp	r4, r9
 8018484:	d206      	bcs.n	8018494 <__hexnan+0x64>
 8018486:	2d07      	cmp	r5, #7
 8018488:	dc04      	bgt.n	8018494 <__hexnan+0x64>
 801848a:	462a      	mov	r2, r5
 801848c:	4649      	mov	r1, r9
 801848e:	4620      	mov	r0, r4
 8018490:	f7ff ffa8 	bl	80183e4 <L_shift>
 8018494:	4544      	cmp	r4, r8
 8018496:	d950      	bls.n	801853a <__hexnan+0x10a>
 8018498:	2300      	movs	r3, #0
 801849a:	f1a4 0904 	sub.w	r9, r4, #4
 801849e:	f844 3c04 	str.w	r3, [r4, #-4]
 80184a2:	f8cd b008 	str.w	fp, [sp, #8]
 80184a6:	464c      	mov	r4, r9
 80184a8:	461d      	mov	r5, r3
 80184aa:	9903      	ldr	r1, [sp, #12]
 80184ac:	e7d7      	b.n	801845e <__hexnan+0x2e>
 80184ae:	2a29      	cmp	r2, #41	; 0x29
 80184b0:	d156      	bne.n	8018560 <__hexnan+0x130>
 80184b2:	3102      	adds	r1, #2
 80184b4:	f8ca 1000 	str.w	r1, [sl]
 80184b8:	f1bb 0f00 	cmp.w	fp, #0
 80184bc:	d050      	beq.n	8018560 <__hexnan+0x130>
 80184be:	454c      	cmp	r4, r9
 80184c0:	d206      	bcs.n	80184d0 <__hexnan+0xa0>
 80184c2:	2d07      	cmp	r5, #7
 80184c4:	dc04      	bgt.n	80184d0 <__hexnan+0xa0>
 80184c6:	462a      	mov	r2, r5
 80184c8:	4649      	mov	r1, r9
 80184ca:	4620      	mov	r0, r4
 80184cc:	f7ff ff8a 	bl	80183e4 <L_shift>
 80184d0:	4544      	cmp	r4, r8
 80184d2:	d934      	bls.n	801853e <__hexnan+0x10e>
 80184d4:	f1a8 0204 	sub.w	r2, r8, #4
 80184d8:	4623      	mov	r3, r4
 80184da:	f853 1b04 	ldr.w	r1, [r3], #4
 80184de:	f842 1f04 	str.w	r1, [r2, #4]!
 80184e2:	429f      	cmp	r7, r3
 80184e4:	d2f9      	bcs.n	80184da <__hexnan+0xaa>
 80184e6:	1b3b      	subs	r3, r7, r4
 80184e8:	f023 0303 	bic.w	r3, r3, #3
 80184ec:	3304      	adds	r3, #4
 80184ee:	3401      	adds	r4, #1
 80184f0:	3e03      	subs	r6, #3
 80184f2:	42b4      	cmp	r4, r6
 80184f4:	bf88      	it	hi
 80184f6:	2304      	movhi	r3, #4
 80184f8:	4443      	add	r3, r8
 80184fa:	2200      	movs	r2, #0
 80184fc:	f843 2b04 	str.w	r2, [r3], #4
 8018500:	429f      	cmp	r7, r3
 8018502:	d2fb      	bcs.n	80184fc <__hexnan+0xcc>
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	b91b      	cbnz	r3, 8018510 <__hexnan+0xe0>
 8018508:	4547      	cmp	r7, r8
 801850a:	d127      	bne.n	801855c <__hexnan+0x12c>
 801850c:	2301      	movs	r3, #1
 801850e:	603b      	str	r3, [r7, #0]
 8018510:	2005      	movs	r0, #5
 8018512:	e026      	b.n	8018562 <__hexnan+0x132>
 8018514:	3501      	adds	r5, #1
 8018516:	2d08      	cmp	r5, #8
 8018518:	f10b 0b01 	add.w	fp, fp, #1
 801851c:	dd06      	ble.n	801852c <__hexnan+0xfc>
 801851e:	4544      	cmp	r4, r8
 8018520:	d9c3      	bls.n	80184aa <__hexnan+0x7a>
 8018522:	2300      	movs	r3, #0
 8018524:	f844 3c04 	str.w	r3, [r4, #-4]
 8018528:	2501      	movs	r5, #1
 801852a:	3c04      	subs	r4, #4
 801852c:	6822      	ldr	r2, [r4, #0]
 801852e:	f000 000f 	and.w	r0, r0, #15
 8018532:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018536:	6022      	str	r2, [r4, #0]
 8018538:	e7b7      	b.n	80184aa <__hexnan+0x7a>
 801853a:	2508      	movs	r5, #8
 801853c:	e7b5      	b.n	80184aa <__hexnan+0x7a>
 801853e:	9b01      	ldr	r3, [sp, #4]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d0df      	beq.n	8018504 <__hexnan+0xd4>
 8018544:	f04f 32ff 	mov.w	r2, #4294967295
 8018548:	f1c3 0320 	rsb	r3, r3, #32
 801854c:	fa22 f303 	lsr.w	r3, r2, r3
 8018550:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018554:	401a      	ands	r2, r3
 8018556:	f846 2c04 	str.w	r2, [r6, #-4]
 801855a:	e7d3      	b.n	8018504 <__hexnan+0xd4>
 801855c:	3f04      	subs	r7, #4
 801855e:	e7d1      	b.n	8018504 <__hexnan+0xd4>
 8018560:	2004      	movs	r0, #4
 8018562:	b007      	add	sp, #28
 8018564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018568 <_localeconv_r>:
 8018568:	4800      	ldr	r0, [pc, #0]	; (801856c <_localeconv_r+0x4>)
 801856a:	4770      	bx	lr
 801856c:	20004368 	.word	0x20004368

08018570 <__ascii_mbtowc>:
 8018570:	b082      	sub	sp, #8
 8018572:	b901      	cbnz	r1, 8018576 <__ascii_mbtowc+0x6>
 8018574:	a901      	add	r1, sp, #4
 8018576:	b142      	cbz	r2, 801858a <__ascii_mbtowc+0x1a>
 8018578:	b14b      	cbz	r3, 801858e <__ascii_mbtowc+0x1e>
 801857a:	7813      	ldrb	r3, [r2, #0]
 801857c:	600b      	str	r3, [r1, #0]
 801857e:	7812      	ldrb	r2, [r2, #0]
 8018580:	1e10      	subs	r0, r2, #0
 8018582:	bf18      	it	ne
 8018584:	2001      	movne	r0, #1
 8018586:	b002      	add	sp, #8
 8018588:	4770      	bx	lr
 801858a:	4610      	mov	r0, r2
 801858c:	e7fb      	b.n	8018586 <__ascii_mbtowc+0x16>
 801858e:	f06f 0001 	mvn.w	r0, #1
 8018592:	e7f8      	b.n	8018586 <__ascii_mbtowc+0x16>

08018594 <__malloc_lock>:
 8018594:	4801      	ldr	r0, [pc, #4]	; (801859c <__malloc_lock+0x8>)
 8018596:	f000 be88 	b.w	80192aa <__retarget_lock_acquire_recursive>
 801859a:	bf00      	nop
 801859c:	2001238c 	.word	0x2001238c

080185a0 <__malloc_unlock>:
 80185a0:	4801      	ldr	r0, [pc, #4]	; (80185a8 <__malloc_unlock+0x8>)
 80185a2:	f000 be83 	b.w	80192ac <__retarget_lock_release_recursive>
 80185a6:	bf00      	nop
 80185a8:	2001238c 	.word	0x2001238c

080185ac <_Balloc>:
 80185ac:	b570      	push	{r4, r5, r6, lr}
 80185ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80185b0:	4604      	mov	r4, r0
 80185b2:	460d      	mov	r5, r1
 80185b4:	b976      	cbnz	r6, 80185d4 <_Balloc+0x28>
 80185b6:	2010      	movs	r0, #16
 80185b8:	f7fc ff6a 	bl	8015490 <malloc>
 80185bc:	4602      	mov	r2, r0
 80185be:	6260      	str	r0, [r4, #36]	; 0x24
 80185c0:	b920      	cbnz	r0, 80185cc <_Balloc+0x20>
 80185c2:	4b18      	ldr	r3, [pc, #96]	; (8018624 <_Balloc+0x78>)
 80185c4:	4818      	ldr	r0, [pc, #96]	; (8018628 <_Balloc+0x7c>)
 80185c6:	2166      	movs	r1, #102	; 0x66
 80185c8:	f000 fe3e 	bl	8019248 <__assert_func>
 80185cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80185d0:	6006      	str	r6, [r0, #0]
 80185d2:	60c6      	str	r6, [r0, #12]
 80185d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80185d6:	68f3      	ldr	r3, [r6, #12]
 80185d8:	b183      	cbz	r3, 80185fc <_Balloc+0x50>
 80185da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80185e2:	b9b8      	cbnz	r0, 8018614 <_Balloc+0x68>
 80185e4:	2101      	movs	r1, #1
 80185e6:	fa01 f605 	lsl.w	r6, r1, r5
 80185ea:	1d72      	adds	r2, r6, #5
 80185ec:	0092      	lsls	r2, r2, #2
 80185ee:	4620      	mov	r0, r4
 80185f0:	f000 fc97 	bl	8018f22 <_calloc_r>
 80185f4:	b160      	cbz	r0, 8018610 <_Balloc+0x64>
 80185f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80185fa:	e00e      	b.n	801861a <_Balloc+0x6e>
 80185fc:	2221      	movs	r2, #33	; 0x21
 80185fe:	2104      	movs	r1, #4
 8018600:	4620      	mov	r0, r4
 8018602:	f000 fc8e 	bl	8018f22 <_calloc_r>
 8018606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018608:	60f0      	str	r0, [r6, #12]
 801860a:	68db      	ldr	r3, [r3, #12]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d1e4      	bne.n	80185da <_Balloc+0x2e>
 8018610:	2000      	movs	r0, #0
 8018612:	bd70      	pop	{r4, r5, r6, pc}
 8018614:	6802      	ldr	r2, [r0, #0]
 8018616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801861a:	2300      	movs	r3, #0
 801861c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018620:	e7f7      	b.n	8018612 <_Balloc+0x66>
 8018622:	bf00      	nop
 8018624:	0801bfbe 	.word	0x0801bfbe
 8018628:	0801c0c4 	.word	0x0801c0c4

0801862c <_Bfree>:
 801862c:	b570      	push	{r4, r5, r6, lr}
 801862e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018630:	4605      	mov	r5, r0
 8018632:	460c      	mov	r4, r1
 8018634:	b976      	cbnz	r6, 8018654 <_Bfree+0x28>
 8018636:	2010      	movs	r0, #16
 8018638:	f7fc ff2a 	bl	8015490 <malloc>
 801863c:	4602      	mov	r2, r0
 801863e:	6268      	str	r0, [r5, #36]	; 0x24
 8018640:	b920      	cbnz	r0, 801864c <_Bfree+0x20>
 8018642:	4b09      	ldr	r3, [pc, #36]	; (8018668 <_Bfree+0x3c>)
 8018644:	4809      	ldr	r0, [pc, #36]	; (801866c <_Bfree+0x40>)
 8018646:	218a      	movs	r1, #138	; 0x8a
 8018648:	f000 fdfe 	bl	8019248 <__assert_func>
 801864c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018650:	6006      	str	r6, [r0, #0]
 8018652:	60c6      	str	r6, [r0, #12]
 8018654:	b13c      	cbz	r4, 8018666 <_Bfree+0x3a>
 8018656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018658:	6862      	ldr	r2, [r4, #4]
 801865a:	68db      	ldr	r3, [r3, #12]
 801865c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018660:	6021      	str	r1, [r4, #0]
 8018662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018666:	bd70      	pop	{r4, r5, r6, pc}
 8018668:	0801bfbe 	.word	0x0801bfbe
 801866c:	0801c0c4 	.word	0x0801c0c4

08018670 <__multadd>:
 8018670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018674:	690e      	ldr	r6, [r1, #16]
 8018676:	4607      	mov	r7, r0
 8018678:	4698      	mov	r8, r3
 801867a:	460c      	mov	r4, r1
 801867c:	f101 0014 	add.w	r0, r1, #20
 8018680:	2300      	movs	r3, #0
 8018682:	6805      	ldr	r5, [r0, #0]
 8018684:	b2a9      	uxth	r1, r5
 8018686:	fb02 8101 	mla	r1, r2, r1, r8
 801868a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801868e:	0c2d      	lsrs	r5, r5, #16
 8018690:	fb02 c505 	mla	r5, r2, r5, ip
 8018694:	b289      	uxth	r1, r1
 8018696:	3301      	adds	r3, #1
 8018698:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801869c:	429e      	cmp	r6, r3
 801869e:	f840 1b04 	str.w	r1, [r0], #4
 80186a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80186a6:	dcec      	bgt.n	8018682 <__multadd+0x12>
 80186a8:	f1b8 0f00 	cmp.w	r8, #0
 80186ac:	d022      	beq.n	80186f4 <__multadd+0x84>
 80186ae:	68a3      	ldr	r3, [r4, #8]
 80186b0:	42b3      	cmp	r3, r6
 80186b2:	dc19      	bgt.n	80186e8 <__multadd+0x78>
 80186b4:	6861      	ldr	r1, [r4, #4]
 80186b6:	4638      	mov	r0, r7
 80186b8:	3101      	adds	r1, #1
 80186ba:	f7ff ff77 	bl	80185ac <_Balloc>
 80186be:	4605      	mov	r5, r0
 80186c0:	b928      	cbnz	r0, 80186ce <__multadd+0x5e>
 80186c2:	4602      	mov	r2, r0
 80186c4:	4b0d      	ldr	r3, [pc, #52]	; (80186fc <__multadd+0x8c>)
 80186c6:	480e      	ldr	r0, [pc, #56]	; (8018700 <__multadd+0x90>)
 80186c8:	21b5      	movs	r1, #181	; 0xb5
 80186ca:	f000 fdbd 	bl	8019248 <__assert_func>
 80186ce:	6922      	ldr	r2, [r4, #16]
 80186d0:	3202      	adds	r2, #2
 80186d2:	f104 010c 	add.w	r1, r4, #12
 80186d6:	0092      	lsls	r2, r2, #2
 80186d8:	300c      	adds	r0, #12
 80186da:	f7fc fee9 	bl	80154b0 <memcpy>
 80186de:	4621      	mov	r1, r4
 80186e0:	4638      	mov	r0, r7
 80186e2:	f7ff ffa3 	bl	801862c <_Bfree>
 80186e6:	462c      	mov	r4, r5
 80186e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80186ec:	3601      	adds	r6, #1
 80186ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80186f2:	6126      	str	r6, [r4, #16]
 80186f4:	4620      	mov	r0, r4
 80186f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186fa:	bf00      	nop
 80186fc:	0801c034 	.word	0x0801c034
 8018700:	0801c0c4 	.word	0x0801c0c4

08018704 <__s2b>:
 8018704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018708:	460c      	mov	r4, r1
 801870a:	4615      	mov	r5, r2
 801870c:	461f      	mov	r7, r3
 801870e:	2209      	movs	r2, #9
 8018710:	3308      	adds	r3, #8
 8018712:	4606      	mov	r6, r0
 8018714:	fb93 f3f2 	sdiv	r3, r3, r2
 8018718:	2100      	movs	r1, #0
 801871a:	2201      	movs	r2, #1
 801871c:	429a      	cmp	r2, r3
 801871e:	db09      	blt.n	8018734 <__s2b+0x30>
 8018720:	4630      	mov	r0, r6
 8018722:	f7ff ff43 	bl	80185ac <_Balloc>
 8018726:	b940      	cbnz	r0, 801873a <__s2b+0x36>
 8018728:	4602      	mov	r2, r0
 801872a:	4b19      	ldr	r3, [pc, #100]	; (8018790 <__s2b+0x8c>)
 801872c:	4819      	ldr	r0, [pc, #100]	; (8018794 <__s2b+0x90>)
 801872e:	21ce      	movs	r1, #206	; 0xce
 8018730:	f000 fd8a 	bl	8019248 <__assert_func>
 8018734:	0052      	lsls	r2, r2, #1
 8018736:	3101      	adds	r1, #1
 8018738:	e7f0      	b.n	801871c <__s2b+0x18>
 801873a:	9b08      	ldr	r3, [sp, #32]
 801873c:	6143      	str	r3, [r0, #20]
 801873e:	2d09      	cmp	r5, #9
 8018740:	f04f 0301 	mov.w	r3, #1
 8018744:	6103      	str	r3, [r0, #16]
 8018746:	dd16      	ble.n	8018776 <__s2b+0x72>
 8018748:	f104 0909 	add.w	r9, r4, #9
 801874c:	46c8      	mov	r8, r9
 801874e:	442c      	add	r4, r5
 8018750:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018754:	4601      	mov	r1, r0
 8018756:	3b30      	subs	r3, #48	; 0x30
 8018758:	220a      	movs	r2, #10
 801875a:	4630      	mov	r0, r6
 801875c:	f7ff ff88 	bl	8018670 <__multadd>
 8018760:	45a0      	cmp	r8, r4
 8018762:	d1f5      	bne.n	8018750 <__s2b+0x4c>
 8018764:	f1a5 0408 	sub.w	r4, r5, #8
 8018768:	444c      	add	r4, r9
 801876a:	1b2d      	subs	r5, r5, r4
 801876c:	1963      	adds	r3, r4, r5
 801876e:	42bb      	cmp	r3, r7
 8018770:	db04      	blt.n	801877c <__s2b+0x78>
 8018772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018776:	340a      	adds	r4, #10
 8018778:	2509      	movs	r5, #9
 801877a:	e7f6      	b.n	801876a <__s2b+0x66>
 801877c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018780:	4601      	mov	r1, r0
 8018782:	3b30      	subs	r3, #48	; 0x30
 8018784:	220a      	movs	r2, #10
 8018786:	4630      	mov	r0, r6
 8018788:	f7ff ff72 	bl	8018670 <__multadd>
 801878c:	e7ee      	b.n	801876c <__s2b+0x68>
 801878e:	bf00      	nop
 8018790:	0801c034 	.word	0x0801c034
 8018794:	0801c0c4 	.word	0x0801c0c4

08018798 <__hi0bits>:
 8018798:	0c03      	lsrs	r3, r0, #16
 801879a:	041b      	lsls	r3, r3, #16
 801879c:	b9d3      	cbnz	r3, 80187d4 <__hi0bits+0x3c>
 801879e:	0400      	lsls	r0, r0, #16
 80187a0:	2310      	movs	r3, #16
 80187a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80187a6:	bf04      	itt	eq
 80187a8:	0200      	lsleq	r0, r0, #8
 80187aa:	3308      	addeq	r3, #8
 80187ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80187b0:	bf04      	itt	eq
 80187b2:	0100      	lsleq	r0, r0, #4
 80187b4:	3304      	addeq	r3, #4
 80187b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80187ba:	bf04      	itt	eq
 80187bc:	0080      	lsleq	r0, r0, #2
 80187be:	3302      	addeq	r3, #2
 80187c0:	2800      	cmp	r0, #0
 80187c2:	db05      	blt.n	80187d0 <__hi0bits+0x38>
 80187c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80187c8:	f103 0301 	add.w	r3, r3, #1
 80187cc:	bf08      	it	eq
 80187ce:	2320      	moveq	r3, #32
 80187d0:	4618      	mov	r0, r3
 80187d2:	4770      	bx	lr
 80187d4:	2300      	movs	r3, #0
 80187d6:	e7e4      	b.n	80187a2 <__hi0bits+0xa>

080187d8 <__lo0bits>:
 80187d8:	6803      	ldr	r3, [r0, #0]
 80187da:	f013 0207 	ands.w	r2, r3, #7
 80187de:	4601      	mov	r1, r0
 80187e0:	d00b      	beq.n	80187fa <__lo0bits+0x22>
 80187e2:	07da      	lsls	r2, r3, #31
 80187e4:	d424      	bmi.n	8018830 <__lo0bits+0x58>
 80187e6:	0798      	lsls	r0, r3, #30
 80187e8:	bf49      	itett	mi
 80187ea:	085b      	lsrmi	r3, r3, #1
 80187ec:	089b      	lsrpl	r3, r3, #2
 80187ee:	2001      	movmi	r0, #1
 80187f0:	600b      	strmi	r3, [r1, #0]
 80187f2:	bf5c      	itt	pl
 80187f4:	600b      	strpl	r3, [r1, #0]
 80187f6:	2002      	movpl	r0, #2
 80187f8:	4770      	bx	lr
 80187fa:	b298      	uxth	r0, r3
 80187fc:	b9b0      	cbnz	r0, 801882c <__lo0bits+0x54>
 80187fe:	0c1b      	lsrs	r3, r3, #16
 8018800:	2010      	movs	r0, #16
 8018802:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018806:	bf04      	itt	eq
 8018808:	0a1b      	lsreq	r3, r3, #8
 801880a:	3008      	addeq	r0, #8
 801880c:	071a      	lsls	r2, r3, #28
 801880e:	bf04      	itt	eq
 8018810:	091b      	lsreq	r3, r3, #4
 8018812:	3004      	addeq	r0, #4
 8018814:	079a      	lsls	r2, r3, #30
 8018816:	bf04      	itt	eq
 8018818:	089b      	lsreq	r3, r3, #2
 801881a:	3002      	addeq	r0, #2
 801881c:	07da      	lsls	r2, r3, #31
 801881e:	d403      	bmi.n	8018828 <__lo0bits+0x50>
 8018820:	085b      	lsrs	r3, r3, #1
 8018822:	f100 0001 	add.w	r0, r0, #1
 8018826:	d005      	beq.n	8018834 <__lo0bits+0x5c>
 8018828:	600b      	str	r3, [r1, #0]
 801882a:	4770      	bx	lr
 801882c:	4610      	mov	r0, r2
 801882e:	e7e8      	b.n	8018802 <__lo0bits+0x2a>
 8018830:	2000      	movs	r0, #0
 8018832:	4770      	bx	lr
 8018834:	2020      	movs	r0, #32
 8018836:	4770      	bx	lr

08018838 <__i2b>:
 8018838:	b510      	push	{r4, lr}
 801883a:	460c      	mov	r4, r1
 801883c:	2101      	movs	r1, #1
 801883e:	f7ff feb5 	bl	80185ac <_Balloc>
 8018842:	4602      	mov	r2, r0
 8018844:	b928      	cbnz	r0, 8018852 <__i2b+0x1a>
 8018846:	4b05      	ldr	r3, [pc, #20]	; (801885c <__i2b+0x24>)
 8018848:	4805      	ldr	r0, [pc, #20]	; (8018860 <__i2b+0x28>)
 801884a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801884e:	f000 fcfb 	bl	8019248 <__assert_func>
 8018852:	2301      	movs	r3, #1
 8018854:	6144      	str	r4, [r0, #20]
 8018856:	6103      	str	r3, [r0, #16]
 8018858:	bd10      	pop	{r4, pc}
 801885a:	bf00      	nop
 801885c:	0801c034 	.word	0x0801c034
 8018860:	0801c0c4 	.word	0x0801c0c4

08018864 <__multiply>:
 8018864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018868:	4614      	mov	r4, r2
 801886a:	690a      	ldr	r2, [r1, #16]
 801886c:	6923      	ldr	r3, [r4, #16]
 801886e:	429a      	cmp	r2, r3
 8018870:	bfb8      	it	lt
 8018872:	460b      	movlt	r3, r1
 8018874:	460d      	mov	r5, r1
 8018876:	bfbc      	itt	lt
 8018878:	4625      	movlt	r5, r4
 801887a:	461c      	movlt	r4, r3
 801887c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018880:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018884:	68ab      	ldr	r3, [r5, #8]
 8018886:	6869      	ldr	r1, [r5, #4]
 8018888:	eb0a 0709 	add.w	r7, sl, r9
 801888c:	42bb      	cmp	r3, r7
 801888e:	b085      	sub	sp, #20
 8018890:	bfb8      	it	lt
 8018892:	3101      	addlt	r1, #1
 8018894:	f7ff fe8a 	bl	80185ac <_Balloc>
 8018898:	b930      	cbnz	r0, 80188a8 <__multiply+0x44>
 801889a:	4602      	mov	r2, r0
 801889c:	4b42      	ldr	r3, [pc, #264]	; (80189a8 <__multiply+0x144>)
 801889e:	4843      	ldr	r0, [pc, #268]	; (80189ac <__multiply+0x148>)
 80188a0:	f240 115d 	movw	r1, #349	; 0x15d
 80188a4:	f000 fcd0 	bl	8019248 <__assert_func>
 80188a8:	f100 0614 	add.w	r6, r0, #20
 80188ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80188b0:	4633      	mov	r3, r6
 80188b2:	2200      	movs	r2, #0
 80188b4:	4543      	cmp	r3, r8
 80188b6:	d31e      	bcc.n	80188f6 <__multiply+0x92>
 80188b8:	f105 0c14 	add.w	ip, r5, #20
 80188bc:	f104 0314 	add.w	r3, r4, #20
 80188c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80188c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80188c8:	9202      	str	r2, [sp, #8]
 80188ca:	ebac 0205 	sub.w	r2, ip, r5
 80188ce:	3a15      	subs	r2, #21
 80188d0:	f022 0203 	bic.w	r2, r2, #3
 80188d4:	3204      	adds	r2, #4
 80188d6:	f105 0115 	add.w	r1, r5, #21
 80188da:	458c      	cmp	ip, r1
 80188dc:	bf38      	it	cc
 80188de:	2204      	movcc	r2, #4
 80188e0:	9201      	str	r2, [sp, #4]
 80188e2:	9a02      	ldr	r2, [sp, #8]
 80188e4:	9303      	str	r3, [sp, #12]
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d808      	bhi.n	80188fc <__multiply+0x98>
 80188ea:	2f00      	cmp	r7, #0
 80188ec:	dc55      	bgt.n	801899a <__multiply+0x136>
 80188ee:	6107      	str	r7, [r0, #16]
 80188f0:	b005      	add	sp, #20
 80188f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f6:	f843 2b04 	str.w	r2, [r3], #4
 80188fa:	e7db      	b.n	80188b4 <__multiply+0x50>
 80188fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8018900:	f1ba 0f00 	cmp.w	sl, #0
 8018904:	d020      	beq.n	8018948 <__multiply+0xe4>
 8018906:	f105 0e14 	add.w	lr, r5, #20
 801890a:	46b1      	mov	r9, r6
 801890c:	2200      	movs	r2, #0
 801890e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018912:	f8d9 b000 	ldr.w	fp, [r9]
 8018916:	b2a1      	uxth	r1, r4
 8018918:	fa1f fb8b 	uxth.w	fp, fp
 801891c:	fb0a b101 	mla	r1, sl, r1, fp
 8018920:	4411      	add	r1, r2
 8018922:	f8d9 2000 	ldr.w	r2, [r9]
 8018926:	0c24      	lsrs	r4, r4, #16
 8018928:	0c12      	lsrs	r2, r2, #16
 801892a:	fb0a 2404 	mla	r4, sl, r4, r2
 801892e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018932:	b289      	uxth	r1, r1
 8018934:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018938:	45f4      	cmp	ip, lr
 801893a:	f849 1b04 	str.w	r1, [r9], #4
 801893e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018942:	d8e4      	bhi.n	801890e <__multiply+0xaa>
 8018944:	9901      	ldr	r1, [sp, #4]
 8018946:	5072      	str	r2, [r6, r1]
 8018948:	9a03      	ldr	r2, [sp, #12]
 801894a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801894e:	3304      	adds	r3, #4
 8018950:	f1b9 0f00 	cmp.w	r9, #0
 8018954:	d01f      	beq.n	8018996 <__multiply+0x132>
 8018956:	6834      	ldr	r4, [r6, #0]
 8018958:	f105 0114 	add.w	r1, r5, #20
 801895c:	46b6      	mov	lr, r6
 801895e:	f04f 0a00 	mov.w	sl, #0
 8018962:	880a      	ldrh	r2, [r1, #0]
 8018964:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018968:	fb09 b202 	mla	r2, r9, r2, fp
 801896c:	4492      	add	sl, r2
 801896e:	b2a4      	uxth	r4, r4
 8018970:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018974:	f84e 4b04 	str.w	r4, [lr], #4
 8018978:	f851 4b04 	ldr.w	r4, [r1], #4
 801897c:	f8be 2000 	ldrh.w	r2, [lr]
 8018980:	0c24      	lsrs	r4, r4, #16
 8018982:	fb09 2404 	mla	r4, r9, r4, r2
 8018986:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801898a:	458c      	cmp	ip, r1
 801898c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018990:	d8e7      	bhi.n	8018962 <__multiply+0xfe>
 8018992:	9a01      	ldr	r2, [sp, #4]
 8018994:	50b4      	str	r4, [r6, r2]
 8018996:	3604      	adds	r6, #4
 8018998:	e7a3      	b.n	80188e2 <__multiply+0x7e>
 801899a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d1a5      	bne.n	80188ee <__multiply+0x8a>
 80189a2:	3f01      	subs	r7, #1
 80189a4:	e7a1      	b.n	80188ea <__multiply+0x86>
 80189a6:	bf00      	nop
 80189a8:	0801c034 	.word	0x0801c034
 80189ac:	0801c0c4 	.word	0x0801c0c4

080189b0 <__pow5mult>:
 80189b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189b4:	4615      	mov	r5, r2
 80189b6:	f012 0203 	ands.w	r2, r2, #3
 80189ba:	4606      	mov	r6, r0
 80189bc:	460f      	mov	r7, r1
 80189be:	d007      	beq.n	80189d0 <__pow5mult+0x20>
 80189c0:	4c25      	ldr	r4, [pc, #148]	; (8018a58 <__pow5mult+0xa8>)
 80189c2:	3a01      	subs	r2, #1
 80189c4:	2300      	movs	r3, #0
 80189c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189ca:	f7ff fe51 	bl	8018670 <__multadd>
 80189ce:	4607      	mov	r7, r0
 80189d0:	10ad      	asrs	r5, r5, #2
 80189d2:	d03d      	beq.n	8018a50 <__pow5mult+0xa0>
 80189d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80189d6:	b97c      	cbnz	r4, 80189f8 <__pow5mult+0x48>
 80189d8:	2010      	movs	r0, #16
 80189da:	f7fc fd59 	bl	8015490 <malloc>
 80189de:	4602      	mov	r2, r0
 80189e0:	6270      	str	r0, [r6, #36]	; 0x24
 80189e2:	b928      	cbnz	r0, 80189f0 <__pow5mult+0x40>
 80189e4:	4b1d      	ldr	r3, [pc, #116]	; (8018a5c <__pow5mult+0xac>)
 80189e6:	481e      	ldr	r0, [pc, #120]	; (8018a60 <__pow5mult+0xb0>)
 80189e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80189ec:	f000 fc2c 	bl	8019248 <__assert_func>
 80189f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80189f4:	6004      	str	r4, [r0, #0]
 80189f6:	60c4      	str	r4, [r0, #12]
 80189f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80189fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018a00:	b94c      	cbnz	r4, 8018a16 <__pow5mult+0x66>
 8018a02:	f240 2171 	movw	r1, #625	; 0x271
 8018a06:	4630      	mov	r0, r6
 8018a08:	f7ff ff16 	bl	8018838 <__i2b>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a12:	4604      	mov	r4, r0
 8018a14:	6003      	str	r3, [r0, #0]
 8018a16:	f04f 0900 	mov.w	r9, #0
 8018a1a:	07eb      	lsls	r3, r5, #31
 8018a1c:	d50a      	bpl.n	8018a34 <__pow5mult+0x84>
 8018a1e:	4639      	mov	r1, r7
 8018a20:	4622      	mov	r2, r4
 8018a22:	4630      	mov	r0, r6
 8018a24:	f7ff ff1e 	bl	8018864 <__multiply>
 8018a28:	4639      	mov	r1, r7
 8018a2a:	4680      	mov	r8, r0
 8018a2c:	4630      	mov	r0, r6
 8018a2e:	f7ff fdfd 	bl	801862c <_Bfree>
 8018a32:	4647      	mov	r7, r8
 8018a34:	106d      	asrs	r5, r5, #1
 8018a36:	d00b      	beq.n	8018a50 <__pow5mult+0xa0>
 8018a38:	6820      	ldr	r0, [r4, #0]
 8018a3a:	b938      	cbnz	r0, 8018a4c <__pow5mult+0x9c>
 8018a3c:	4622      	mov	r2, r4
 8018a3e:	4621      	mov	r1, r4
 8018a40:	4630      	mov	r0, r6
 8018a42:	f7ff ff0f 	bl	8018864 <__multiply>
 8018a46:	6020      	str	r0, [r4, #0]
 8018a48:	f8c0 9000 	str.w	r9, [r0]
 8018a4c:	4604      	mov	r4, r0
 8018a4e:	e7e4      	b.n	8018a1a <__pow5mult+0x6a>
 8018a50:	4638      	mov	r0, r7
 8018a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a56:	bf00      	nop
 8018a58:	0801c218 	.word	0x0801c218
 8018a5c:	0801bfbe 	.word	0x0801bfbe
 8018a60:	0801c0c4 	.word	0x0801c0c4

08018a64 <__lshift>:
 8018a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a68:	460c      	mov	r4, r1
 8018a6a:	6849      	ldr	r1, [r1, #4]
 8018a6c:	6923      	ldr	r3, [r4, #16]
 8018a6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018a72:	68a3      	ldr	r3, [r4, #8]
 8018a74:	4607      	mov	r7, r0
 8018a76:	4691      	mov	r9, r2
 8018a78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018a7c:	f108 0601 	add.w	r6, r8, #1
 8018a80:	42b3      	cmp	r3, r6
 8018a82:	db0b      	blt.n	8018a9c <__lshift+0x38>
 8018a84:	4638      	mov	r0, r7
 8018a86:	f7ff fd91 	bl	80185ac <_Balloc>
 8018a8a:	4605      	mov	r5, r0
 8018a8c:	b948      	cbnz	r0, 8018aa2 <__lshift+0x3e>
 8018a8e:	4602      	mov	r2, r0
 8018a90:	4b28      	ldr	r3, [pc, #160]	; (8018b34 <__lshift+0xd0>)
 8018a92:	4829      	ldr	r0, [pc, #164]	; (8018b38 <__lshift+0xd4>)
 8018a94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018a98:	f000 fbd6 	bl	8019248 <__assert_func>
 8018a9c:	3101      	adds	r1, #1
 8018a9e:	005b      	lsls	r3, r3, #1
 8018aa0:	e7ee      	b.n	8018a80 <__lshift+0x1c>
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	f100 0114 	add.w	r1, r0, #20
 8018aa8:	f100 0210 	add.w	r2, r0, #16
 8018aac:	4618      	mov	r0, r3
 8018aae:	4553      	cmp	r3, sl
 8018ab0:	db33      	blt.n	8018b1a <__lshift+0xb6>
 8018ab2:	6920      	ldr	r0, [r4, #16]
 8018ab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018ab8:	f104 0314 	add.w	r3, r4, #20
 8018abc:	f019 091f 	ands.w	r9, r9, #31
 8018ac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018ac8:	d02b      	beq.n	8018b22 <__lshift+0xbe>
 8018aca:	f1c9 0e20 	rsb	lr, r9, #32
 8018ace:	468a      	mov	sl, r1
 8018ad0:	2200      	movs	r2, #0
 8018ad2:	6818      	ldr	r0, [r3, #0]
 8018ad4:	fa00 f009 	lsl.w	r0, r0, r9
 8018ad8:	4302      	orrs	r2, r0
 8018ada:	f84a 2b04 	str.w	r2, [sl], #4
 8018ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ae2:	459c      	cmp	ip, r3
 8018ae4:	fa22 f20e 	lsr.w	r2, r2, lr
 8018ae8:	d8f3      	bhi.n	8018ad2 <__lshift+0x6e>
 8018aea:	ebac 0304 	sub.w	r3, ip, r4
 8018aee:	3b15      	subs	r3, #21
 8018af0:	f023 0303 	bic.w	r3, r3, #3
 8018af4:	3304      	adds	r3, #4
 8018af6:	f104 0015 	add.w	r0, r4, #21
 8018afa:	4584      	cmp	ip, r0
 8018afc:	bf38      	it	cc
 8018afe:	2304      	movcc	r3, #4
 8018b00:	50ca      	str	r2, [r1, r3]
 8018b02:	b10a      	cbz	r2, 8018b08 <__lshift+0xa4>
 8018b04:	f108 0602 	add.w	r6, r8, #2
 8018b08:	3e01      	subs	r6, #1
 8018b0a:	4638      	mov	r0, r7
 8018b0c:	612e      	str	r6, [r5, #16]
 8018b0e:	4621      	mov	r1, r4
 8018b10:	f7ff fd8c 	bl	801862c <_Bfree>
 8018b14:	4628      	mov	r0, r5
 8018b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8018b1e:	3301      	adds	r3, #1
 8018b20:	e7c5      	b.n	8018aae <__lshift+0x4a>
 8018b22:	3904      	subs	r1, #4
 8018b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b28:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b2c:	459c      	cmp	ip, r3
 8018b2e:	d8f9      	bhi.n	8018b24 <__lshift+0xc0>
 8018b30:	e7ea      	b.n	8018b08 <__lshift+0xa4>
 8018b32:	bf00      	nop
 8018b34:	0801c034 	.word	0x0801c034
 8018b38:	0801c0c4 	.word	0x0801c0c4

08018b3c <__mcmp>:
 8018b3c:	b530      	push	{r4, r5, lr}
 8018b3e:	6902      	ldr	r2, [r0, #16]
 8018b40:	690c      	ldr	r4, [r1, #16]
 8018b42:	1b12      	subs	r2, r2, r4
 8018b44:	d10e      	bne.n	8018b64 <__mcmp+0x28>
 8018b46:	f100 0314 	add.w	r3, r0, #20
 8018b4a:	3114      	adds	r1, #20
 8018b4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018b50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018b54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018b58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018b5c:	42a5      	cmp	r5, r4
 8018b5e:	d003      	beq.n	8018b68 <__mcmp+0x2c>
 8018b60:	d305      	bcc.n	8018b6e <__mcmp+0x32>
 8018b62:	2201      	movs	r2, #1
 8018b64:	4610      	mov	r0, r2
 8018b66:	bd30      	pop	{r4, r5, pc}
 8018b68:	4283      	cmp	r3, r0
 8018b6a:	d3f3      	bcc.n	8018b54 <__mcmp+0x18>
 8018b6c:	e7fa      	b.n	8018b64 <__mcmp+0x28>
 8018b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8018b72:	e7f7      	b.n	8018b64 <__mcmp+0x28>

08018b74 <__mdiff>:
 8018b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b78:	460c      	mov	r4, r1
 8018b7a:	4606      	mov	r6, r0
 8018b7c:	4611      	mov	r1, r2
 8018b7e:	4620      	mov	r0, r4
 8018b80:	4617      	mov	r7, r2
 8018b82:	f7ff ffdb 	bl	8018b3c <__mcmp>
 8018b86:	1e05      	subs	r5, r0, #0
 8018b88:	d110      	bne.n	8018bac <__mdiff+0x38>
 8018b8a:	4629      	mov	r1, r5
 8018b8c:	4630      	mov	r0, r6
 8018b8e:	f7ff fd0d 	bl	80185ac <_Balloc>
 8018b92:	b930      	cbnz	r0, 8018ba2 <__mdiff+0x2e>
 8018b94:	4b39      	ldr	r3, [pc, #228]	; (8018c7c <__mdiff+0x108>)
 8018b96:	4602      	mov	r2, r0
 8018b98:	f240 2132 	movw	r1, #562	; 0x232
 8018b9c:	4838      	ldr	r0, [pc, #224]	; (8018c80 <__mdiff+0x10c>)
 8018b9e:	f000 fb53 	bl	8019248 <__assert_func>
 8018ba2:	2301      	movs	r3, #1
 8018ba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bac:	bfa4      	itt	ge
 8018bae:	463b      	movge	r3, r7
 8018bb0:	4627      	movge	r7, r4
 8018bb2:	4630      	mov	r0, r6
 8018bb4:	6879      	ldr	r1, [r7, #4]
 8018bb6:	bfa6      	itte	ge
 8018bb8:	461c      	movge	r4, r3
 8018bba:	2500      	movge	r5, #0
 8018bbc:	2501      	movlt	r5, #1
 8018bbe:	f7ff fcf5 	bl	80185ac <_Balloc>
 8018bc2:	b920      	cbnz	r0, 8018bce <__mdiff+0x5a>
 8018bc4:	4b2d      	ldr	r3, [pc, #180]	; (8018c7c <__mdiff+0x108>)
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018bcc:	e7e6      	b.n	8018b9c <__mdiff+0x28>
 8018bce:	693e      	ldr	r6, [r7, #16]
 8018bd0:	60c5      	str	r5, [r0, #12]
 8018bd2:	6925      	ldr	r5, [r4, #16]
 8018bd4:	f107 0114 	add.w	r1, r7, #20
 8018bd8:	f104 0914 	add.w	r9, r4, #20
 8018bdc:	f100 0e14 	add.w	lr, r0, #20
 8018be0:	f107 0210 	add.w	r2, r7, #16
 8018be4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018be8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018bec:	46f2      	mov	sl, lr
 8018bee:	2700      	movs	r7, #0
 8018bf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8018bf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018bf8:	fa1f f883 	uxth.w	r8, r3
 8018bfc:	fa17 f78b 	uxtah	r7, r7, fp
 8018c00:	0c1b      	lsrs	r3, r3, #16
 8018c02:	eba7 0808 	sub.w	r8, r7, r8
 8018c06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018c0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018c0e:	fa1f f888 	uxth.w	r8, r8
 8018c12:	141f      	asrs	r7, r3, #16
 8018c14:	454d      	cmp	r5, r9
 8018c16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018c1a:	f84a 3b04 	str.w	r3, [sl], #4
 8018c1e:	d8e7      	bhi.n	8018bf0 <__mdiff+0x7c>
 8018c20:	1b2b      	subs	r3, r5, r4
 8018c22:	3b15      	subs	r3, #21
 8018c24:	f023 0303 	bic.w	r3, r3, #3
 8018c28:	3304      	adds	r3, #4
 8018c2a:	3415      	adds	r4, #21
 8018c2c:	42a5      	cmp	r5, r4
 8018c2e:	bf38      	it	cc
 8018c30:	2304      	movcc	r3, #4
 8018c32:	4419      	add	r1, r3
 8018c34:	4473      	add	r3, lr
 8018c36:	469e      	mov	lr, r3
 8018c38:	460d      	mov	r5, r1
 8018c3a:	4565      	cmp	r5, ip
 8018c3c:	d30e      	bcc.n	8018c5c <__mdiff+0xe8>
 8018c3e:	f10c 0203 	add.w	r2, ip, #3
 8018c42:	1a52      	subs	r2, r2, r1
 8018c44:	f022 0203 	bic.w	r2, r2, #3
 8018c48:	3903      	subs	r1, #3
 8018c4a:	458c      	cmp	ip, r1
 8018c4c:	bf38      	it	cc
 8018c4e:	2200      	movcc	r2, #0
 8018c50:	441a      	add	r2, r3
 8018c52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018c56:	b17b      	cbz	r3, 8018c78 <__mdiff+0x104>
 8018c58:	6106      	str	r6, [r0, #16]
 8018c5a:	e7a5      	b.n	8018ba8 <__mdiff+0x34>
 8018c5c:	f855 8b04 	ldr.w	r8, [r5], #4
 8018c60:	fa17 f488 	uxtah	r4, r7, r8
 8018c64:	1422      	asrs	r2, r4, #16
 8018c66:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018c6a:	b2a4      	uxth	r4, r4
 8018c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018c70:	f84e 4b04 	str.w	r4, [lr], #4
 8018c74:	1417      	asrs	r7, r2, #16
 8018c76:	e7e0      	b.n	8018c3a <__mdiff+0xc6>
 8018c78:	3e01      	subs	r6, #1
 8018c7a:	e7ea      	b.n	8018c52 <__mdiff+0xde>
 8018c7c:	0801c034 	.word	0x0801c034
 8018c80:	0801c0c4 	.word	0x0801c0c4

08018c84 <__ulp>:
 8018c84:	b082      	sub	sp, #8
 8018c86:	ed8d 0b00 	vstr	d0, [sp]
 8018c8a:	9b01      	ldr	r3, [sp, #4]
 8018c8c:	4912      	ldr	r1, [pc, #72]	; (8018cd8 <__ulp+0x54>)
 8018c8e:	4019      	ands	r1, r3
 8018c90:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018c94:	2900      	cmp	r1, #0
 8018c96:	dd05      	ble.n	8018ca4 <__ulp+0x20>
 8018c98:	2200      	movs	r2, #0
 8018c9a:	460b      	mov	r3, r1
 8018c9c:	ec43 2b10 	vmov	d0, r2, r3
 8018ca0:	b002      	add	sp, #8
 8018ca2:	4770      	bx	lr
 8018ca4:	4249      	negs	r1, r1
 8018ca6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018caa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018cae:	f04f 0200 	mov.w	r2, #0
 8018cb2:	f04f 0300 	mov.w	r3, #0
 8018cb6:	da04      	bge.n	8018cc2 <__ulp+0x3e>
 8018cb8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018cbc:	fa41 f300 	asr.w	r3, r1, r0
 8018cc0:	e7ec      	b.n	8018c9c <__ulp+0x18>
 8018cc2:	f1a0 0114 	sub.w	r1, r0, #20
 8018cc6:	291e      	cmp	r1, #30
 8018cc8:	bfda      	itte	le
 8018cca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018cce:	fa20 f101 	lsrle.w	r1, r0, r1
 8018cd2:	2101      	movgt	r1, #1
 8018cd4:	460a      	mov	r2, r1
 8018cd6:	e7e1      	b.n	8018c9c <__ulp+0x18>
 8018cd8:	7ff00000 	.word	0x7ff00000

08018cdc <__b2d>:
 8018cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cde:	6905      	ldr	r5, [r0, #16]
 8018ce0:	f100 0714 	add.w	r7, r0, #20
 8018ce4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018ce8:	1f2e      	subs	r6, r5, #4
 8018cea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018cee:	4620      	mov	r0, r4
 8018cf0:	f7ff fd52 	bl	8018798 <__hi0bits>
 8018cf4:	f1c0 0320 	rsb	r3, r0, #32
 8018cf8:	280a      	cmp	r0, #10
 8018cfa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018d78 <__b2d+0x9c>
 8018cfe:	600b      	str	r3, [r1, #0]
 8018d00:	dc14      	bgt.n	8018d2c <__b2d+0x50>
 8018d02:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d06:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d0a:	42b7      	cmp	r7, r6
 8018d0c:	ea41 030c 	orr.w	r3, r1, ip
 8018d10:	bf34      	ite	cc
 8018d12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d16:	2100      	movcs	r1, #0
 8018d18:	3015      	adds	r0, #21
 8018d1a:	fa04 f000 	lsl.w	r0, r4, r0
 8018d1e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d22:	ea40 0201 	orr.w	r2, r0, r1
 8018d26:	ec43 2b10 	vmov	d0, r2, r3
 8018d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d2c:	42b7      	cmp	r7, r6
 8018d2e:	bf3a      	itte	cc
 8018d30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d34:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d38:	2100      	movcs	r1, #0
 8018d3a:	380b      	subs	r0, #11
 8018d3c:	d017      	beq.n	8018d6e <__b2d+0x92>
 8018d3e:	f1c0 0c20 	rsb	ip, r0, #32
 8018d42:	fa04 f500 	lsl.w	r5, r4, r0
 8018d46:	42be      	cmp	r6, r7
 8018d48:	fa21 f40c 	lsr.w	r4, r1, ip
 8018d4c:	ea45 0504 	orr.w	r5, r5, r4
 8018d50:	bf8c      	ite	hi
 8018d52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d56:	2400      	movls	r4, #0
 8018d58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018d5c:	fa01 f000 	lsl.w	r0, r1, r0
 8018d60:	fa24 f40c 	lsr.w	r4, r4, ip
 8018d64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018d68:	ea40 0204 	orr.w	r2, r0, r4
 8018d6c:	e7db      	b.n	8018d26 <__b2d+0x4a>
 8018d6e:	ea44 030c 	orr.w	r3, r4, ip
 8018d72:	460a      	mov	r2, r1
 8018d74:	e7d7      	b.n	8018d26 <__b2d+0x4a>
 8018d76:	bf00      	nop
 8018d78:	3ff00000 	.word	0x3ff00000

08018d7c <__d2b>:
 8018d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d80:	4689      	mov	r9, r1
 8018d82:	2101      	movs	r1, #1
 8018d84:	ec57 6b10 	vmov	r6, r7, d0
 8018d88:	4690      	mov	r8, r2
 8018d8a:	f7ff fc0f 	bl	80185ac <_Balloc>
 8018d8e:	4604      	mov	r4, r0
 8018d90:	b930      	cbnz	r0, 8018da0 <__d2b+0x24>
 8018d92:	4602      	mov	r2, r0
 8018d94:	4b25      	ldr	r3, [pc, #148]	; (8018e2c <__d2b+0xb0>)
 8018d96:	4826      	ldr	r0, [pc, #152]	; (8018e30 <__d2b+0xb4>)
 8018d98:	f240 310a 	movw	r1, #778	; 0x30a
 8018d9c:	f000 fa54 	bl	8019248 <__assert_func>
 8018da0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018da4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018da8:	bb35      	cbnz	r5, 8018df8 <__d2b+0x7c>
 8018daa:	2e00      	cmp	r6, #0
 8018dac:	9301      	str	r3, [sp, #4]
 8018dae:	d028      	beq.n	8018e02 <__d2b+0x86>
 8018db0:	4668      	mov	r0, sp
 8018db2:	9600      	str	r6, [sp, #0]
 8018db4:	f7ff fd10 	bl	80187d8 <__lo0bits>
 8018db8:	9900      	ldr	r1, [sp, #0]
 8018dba:	b300      	cbz	r0, 8018dfe <__d2b+0x82>
 8018dbc:	9a01      	ldr	r2, [sp, #4]
 8018dbe:	f1c0 0320 	rsb	r3, r0, #32
 8018dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8018dc6:	430b      	orrs	r3, r1
 8018dc8:	40c2      	lsrs	r2, r0
 8018dca:	6163      	str	r3, [r4, #20]
 8018dcc:	9201      	str	r2, [sp, #4]
 8018dce:	9b01      	ldr	r3, [sp, #4]
 8018dd0:	61a3      	str	r3, [r4, #24]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	bf14      	ite	ne
 8018dd6:	2202      	movne	r2, #2
 8018dd8:	2201      	moveq	r2, #1
 8018dda:	6122      	str	r2, [r4, #16]
 8018ddc:	b1d5      	cbz	r5, 8018e14 <__d2b+0x98>
 8018dde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018de2:	4405      	add	r5, r0
 8018de4:	f8c9 5000 	str.w	r5, [r9]
 8018de8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018dec:	f8c8 0000 	str.w	r0, [r8]
 8018df0:	4620      	mov	r0, r4
 8018df2:	b003      	add	sp, #12
 8018df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018dfc:	e7d5      	b.n	8018daa <__d2b+0x2e>
 8018dfe:	6161      	str	r1, [r4, #20]
 8018e00:	e7e5      	b.n	8018dce <__d2b+0x52>
 8018e02:	a801      	add	r0, sp, #4
 8018e04:	f7ff fce8 	bl	80187d8 <__lo0bits>
 8018e08:	9b01      	ldr	r3, [sp, #4]
 8018e0a:	6163      	str	r3, [r4, #20]
 8018e0c:	2201      	movs	r2, #1
 8018e0e:	6122      	str	r2, [r4, #16]
 8018e10:	3020      	adds	r0, #32
 8018e12:	e7e3      	b.n	8018ddc <__d2b+0x60>
 8018e14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018e18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e1c:	f8c9 0000 	str.w	r0, [r9]
 8018e20:	6918      	ldr	r0, [r3, #16]
 8018e22:	f7ff fcb9 	bl	8018798 <__hi0bits>
 8018e26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018e2a:	e7df      	b.n	8018dec <__d2b+0x70>
 8018e2c:	0801c034 	.word	0x0801c034
 8018e30:	0801c0c4 	.word	0x0801c0c4

08018e34 <__ratio>:
 8018e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e38:	4688      	mov	r8, r1
 8018e3a:	4669      	mov	r1, sp
 8018e3c:	4681      	mov	r9, r0
 8018e3e:	f7ff ff4d 	bl	8018cdc <__b2d>
 8018e42:	a901      	add	r1, sp, #4
 8018e44:	4640      	mov	r0, r8
 8018e46:	ec55 4b10 	vmov	r4, r5, d0
 8018e4a:	f7ff ff47 	bl	8018cdc <__b2d>
 8018e4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e56:	eba3 0c02 	sub.w	ip, r3, r2
 8018e5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e5e:	1a9b      	subs	r3, r3, r2
 8018e60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e64:	ec51 0b10 	vmov	r0, r1, d0
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	bfd6      	itet	le
 8018e6c:	460a      	movle	r2, r1
 8018e6e:	462a      	movgt	r2, r5
 8018e70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e74:	468b      	mov	fp, r1
 8018e76:	462f      	mov	r7, r5
 8018e78:	bfd4      	ite	le
 8018e7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018e7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018e82:	4620      	mov	r0, r4
 8018e84:	ee10 2a10 	vmov	r2, s0
 8018e88:	465b      	mov	r3, fp
 8018e8a:	4639      	mov	r1, r7
 8018e8c:	f7e7 fcde 	bl	800084c <__aeabi_ddiv>
 8018e90:	ec41 0b10 	vmov	d0, r0, r1
 8018e94:	b003      	add	sp, #12
 8018e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e9a <__copybits>:
 8018e9a:	3901      	subs	r1, #1
 8018e9c:	b570      	push	{r4, r5, r6, lr}
 8018e9e:	1149      	asrs	r1, r1, #5
 8018ea0:	6914      	ldr	r4, [r2, #16]
 8018ea2:	3101      	adds	r1, #1
 8018ea4:	f102 0314 	add.w	r3, r2, #20
 8018ea8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018eac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018eb0:	1f05      	subs	r5, r0, #4
 8018eb2:	42a3      	cmp	r3, r4
 8018eb4:	d30c      	bcc.n	8018ed0 <__copybits+0x36>
 8018eb6:	1aa3      	subs	r3, r4, r2
 8018eb8:	3b11      	subs	r3, #17
 8018eba:	f023 0303 	bic.w	r3, r3, #3
 8018ebe:	3211      	adds	r2, #17
 8018ec0:	42a2      	cmp	r2, r4
 8018ec2:	bf88      	it	hi
 8018ec4:	2300      	movhi	r3, #0
 8018ec6:	4418      	add	r0, r3
 8018ec8:	2300      	movs	r3, #0
 8018eca:	4288      	cmp	r0, r1
 8018ecc:	d305      	bcc.n	8018eda <__copybits+0x40>
 8018ece:	bd70      	pop	{r4, r5, r6, pc}
 8018ed0:	f853 6b04 	ldr.w	r6, [r3], #4
 8018ed4:	f845 6f04 	str.w	r6, [r5, #4]!
 8018ed8:	e7eb      	b.n	8018eb2 <__copybits+0x18>
 8018eda:	f840 3b04 	str.w	r3, [r0], #4
 8018ede:	e7f4      	b.n	8018eca <__copybits+0x30>

08018ee0 <__any_on>:
 8018ee0:	f100 0214 	add.w	r2, r0, #20
 8018ee4:	6900      	ldr	r0, [r0, #16]
 8018ee6:	114b      	asrs	r3, r1, #5
 8018ee8:	4298      	cmp	r0, r3
 8018eea:	b510      	push	{r4, lr}
 8018eec:	db11      	blt.n	8018f12 <__any_on+0x32>
 8018eee:	dd0a      	ble.n	8018f06 <__any_on+0x26>
 8018ef0:	f011 011f 	ands.w	r1, r1, #31
 8018ef4:	d007      	beq.n	8018f06 <__any_on+0x26>
 8018ef6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018efa:	fa24 f001 	lsr.w	r0, r4, r1
 8018efe:	fa00 f101 	lsl.w	r1, r0, r1
 8018f02:	428c      	cmp	r4, r1
 8018f04:	d10b      	bne.n	8018f1e <__any_on+0x3e>
 8018f06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f0a:	4293      	cmp	r3, r2
 8018f0c:	d803      	bhi.n	8018f16 <__any_on+0x36>
 8018f0e:	2000      	movs	r0, #0
 8018f10:	bd10      	pop	{r4, pc}
 8018f12:	4603      	mov	r3, r0
 8018f14:	e7f7      	b.n	8018f06 <__any_on+0x26>
 8018f16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f1a:	2900      	cmp	r1, #0
 8018f1c:	d0f5      	beq.n	8018f0a <__any_on+0x2a>
 8018f1e:	2001      	movs	r0, #1
 8018f20:	e7f6      	b.n	8018f10 <__any_on+0x30>

08018f22 <_calloc_r>:
 8018f22:	b513      	push	{r0, r1, r4, lr}
 8018f24:	434a      	muls	r2, r1
 8018f26:	4611      	mov	r1, r2
 8018f28:	9201      	str	r2, [sp, #4]
 8018f2a:	f7fc fb41 	bl	80155b0 <_malloc_r>
 8018f2e:	4604      	mov	r4, r0
 8018f30:	b118      	cbz	r0, 8018f3a <_calloc_r+0x18>
 8018f32:	9a01      	ldr	r2, [sp, #4]
 8018f34:	2100      	movs	r1, #0
 8018f36:	f7fc fae3 	bl	8015500 <memset>
 8018f3a:	4620      	mov	r0, r4
 8018f3c:	b002      	add	sp, #8
 8018f3e:	bd10      	pop	{r4, pc}

08018f40 <__ssputs_r>:
 8018f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f44:	688e      	ldr	r6, [r1, #8]
 8018f46:	429e      	cmp	r6, r3
 8018f48:	4682      	mov	sl, r0
 8018f4a:	460c      	mov	r4, r1
 8018f4c:	4690      	mov	r8, r2
 8018f4e:	461f      	mov	r7, r3
 8018f50:	d838      	bhi.n	8018fc4 <__ssputs_r+0x84>
 8018f52:	898a      	ldrh	r2, [r1, #12]
 8018f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018f58:	d032      	beq.n	8018fc0 <__ssputs_r+0x80>
 8018f5a:	6825      	ldr	r5, [r4, #0]
 8018f5c:	6909      	ldr	r1, [r1, #16]
 8018f5e:	eba5 0901 	sub.w	r9, r5, r1
 8018f62:	6965      	ldr	r5, [r4, #20]
 8018f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018f6c:	3301      	adds	r3, #1
 8018f6e:	444b      	add	r3, r9
 8018f70:	106d      	asrs	r5, r5, #1
 8018f72:	429d      	cmp	r5, r3
 8018f74:	bf38      	it	cc
 8018f76:	461d      	movcc	r5, r3
 8018f78:	0553      	lsls	r3, r2, #21
 8018f7a:	d531      	bpl.n	8018fe0 <__ssputs_r+0xa0>
 8018f7c:	4629      	mov	r1, r5
 8018f7e:	f7fc fb17 	bl	80155b0 <_malloc_r>
 8018f82:	4606      	mov	r6, r0
 8018f84:	b950      	cbnz	r0, 8018f9c <__ssputs_r+0x5c>
 8018f86:	230c      	movs	r3, #12
 8018f88:	f8ca 3000 	str.w	r3, [sl]
 8018f8c:	89a3      	ldrh	r3, [r4, #12]
 8018f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f92:	81a3      	strh	r3, [r4, #12]
 8018f94:	f04f 30ff 	mov.w	r0, #4294967295
 8018f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f9c:	6921      	ldr	r1, [r4, #16]
 8018f9e:	464a      	mov	r2, r9
 8018fa0:	f7fc fa86 	bl	80154b0 <memcpy>
 8018fa4:	89a3      	ldrh	r3, [r4, #12]
 8018fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fae:	81a3      	strh	r3, [r4, #12]
 8018fb0:	6126      	str	r6, [r4, #16]
 8018fb2:	6165      	str	r5, [r4, #20]
 8018fb4:	444e      	add	r6, r9
 8018fb6:	eba5 0509 	sub.w	r5, r5, r9
 8018fba:	6026      	str	r6, [r4, #0]
 8018fbc:	60a5      	str	r5, [r4, #8]
 8018fbe:	463e      	mov	r6, r7
 8018fc0:	42be      	cmp	r6, r7
 8018fc2:	d900      	bls.n	8018fc6 <__ssputs_r+0x86>
 8018fc4:	463e      	mov	r6, r7
 8018fc6:	4632      	mov	r2, r6
 8018fc8:	6820      	ldr	r0, [r4, #0]
 8018fca:	4641      	mov	r1, r8
 8018fcc:	f7fc fa7e 	bl	80154cc <memmove>
 8018fd0:	68a3      	ldr	r3, [r4, #8]
 8018fd2:	6822      	ldr	r2, [r4, #0]
 8018fd4:	1b9b      	subs	r3, r3, r6
 8018fd6:	4432      	add	r2, r6
 8018fd8:	60a3      	str	r3, [r4, #8]
 8018fda:	6022      	str	r2, [r4, #0]
 8018fdc:	2000      	movs	r0, #0
 8018fde:	e7db      	b.n	8018f98 <__ssputs_r+0x58>
 8018fe0:	462a      	mov	r2, r5
 8018fe2:	f000 f964 	bl	80192ae <_realloc_r>
 8018fe6:	4606      	mov	r6, r0
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d1e1      	bne.n	8018fb0 <__ssputs_r+0x70>
 8018fec:	6921      	ldr	r1, [r4, #16]
 8018fee:	4650      	mov	r0, sl
 8018ff0:	f7fc fa8e 	bl	8015510 <_free_r>
 8018ff4:	e7c7      	b.n	8018f86 <__ssputs_r+0x46>
	...

08018ff8 <_svfiprintf_r>:
 8018ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffc:	4698      	mov	r8, r3
 8018ffe:	898b      	ldrh	r3, [r1, #12]
 8019000:	061b      	lsls	r3, r3, #24
 8019002:	b09d      	sub	sp, #116	; 0x74
 8019004:	4607      	mov	r7, r0
 8019006:	460d      	mov	r5, r1
 8019008:	4614      	mov	r4, r2
 801900a:	d50e      	bpl.n	801902a <_svfiprintf_r+0x32>
 801900c:	690b      	ldr	r3, [r1, #16]
 801900e:	b963      	cbnz	r3, 801902a <_svfiprintf_r+0x32>
 8019010:	2140      	movs	r1, #64	; 0x40
 8019012:	f7fc facd 	bl	80155b0 <_malloc_r>
 8019016:	6028      	str	r0, [r5, #0]
 8019018:	6128      	str	r0, [r5, #16]
 801901a:	b920      	cbnz	r0, 8019026 <_svfiprintf_r+0x2e>
 801901c:	230c      	movs	r3, #12
 801901e:	603b      	str	r3, [r7, #0]
 8019020:	f04f 30ff 	mov.w	r0, #4294967295
 8019024:	e0d1      	b.n	80191ca <_svfiprintf_r+0x1d2>
 8019026:	2340      	movs	r3, #64	; 0x40
 8019028:	616b      	str	r3, [r5, #20]
 801902a:	2300      	movs	r3, #0
 801902c:	9309      	str	r3, [sp, #36]	; 0x24
 801902e:	2320      	movs	r3, #32
 8019030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019034:	f8cd 800c 	str.w	r8, [sp, #12]
 8019038:	2330      	movs	r3, #48	; 0x30
 801903a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80191e4 <_svfiprintf_r+0x1ec>
 801903e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019042:	f04f 0901 	mov.w	r9, #1
 8019046:	4623      	mov	r3, r4
 8019048:	469a      	mov	sl, r3
 801904a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801904e:	b10a      	cbz	r2, 8019054 <_svfiprintf_r+0x5c>
 8019050:	2a25      	cmp	r2, #37	; 0x25
 8019052:	d1f9      	bne.n	8019048 <_svfiprintf_r+0x50>
 8019054:	ebba 0b04 	subs.w	fp, sl, r4
 8019058:	d00b      	beq.n	8019072 <_svfiprintf_r+0x7a>
 801905a:	465b      	mov	r3, fp
 801905c:	4622      	mov	r2, r4
 801905e:	4629      	mov	r1, r5
 8019060:	4638      	mov	r0, r7
 8019062:	f7ff ff6d 	bl	8018f40 <__ssputs_r>
 8019066:	3001      	adds	r0, #1
 8019068:	f000 80aa 	beq.w	80191c0 <_svfiprintf_r+0x1c8>
 801906c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801906e:	445a      	add	r2, fp
 8019070:	9209      	str	r2, [sp, #36]	; 0x24
 8019072:	f89a 3000 	ldrb.w	r3, [sl]
 8019076:	2b00      	cmp	r3, #0
 8019078:	f000 80a2 	beq.w	80191c0 <_svfiprintf_r+0x1c8>
 801907c:	2300      	movs	r3, #0
 801907e:	f04f 32ff 	mov.w	r2, #4294967295
 8019082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019086:	f10a 0a01 	add.w	sl, sl, #1
 801908a:	9304      	str	r3, [sp, #16]
 801908c:	9307      	str	r3, [sp, #28]
 801908e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019092:	931a      	str	r3, [sp, #104]	; 0x68
 8019094:	4654      	mov	r4, sl
 8019096:	2205      	movs	r2, #5
 8019098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801909c:	4851      	ldr	r0, [pc, #324]	; (80191e4 <_svfiprintf_r+0x1ec>)
 801909e:	f7e7 f89f 	bl	80001e0 <memchr>
 80190a2:	9a04      	ldr	r2, [sp, #16]
 80190a4:	b9d8      	cbnz	r0, 80190de <_svfiprintf_r+0xe6>
 80190a6:	06d0      	lsls	r0, r2, #27
 80190a8:	bf44      	itt	mi
 80190aa:	2320      	movmi	r3, #32
 80190ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190b0:	0711      	lsls	r1, r2, #28
 80190b2:	bf44      	itt	mi
 80190b4:	232b      	movmi	r3, #43	; 0x2b
 80190b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190ba:	f89a 3000 	ldrb.w	r3, [sl]
 80190be:	2b2a      	cmp	r3, #42	; 0x2a
 80190c0:	d015      	beq.n	80190ee <_svfiprintf_r+0xf6>
 80190c2:	9a07      	ldr	r2, [sp, #28]
 80190c4:	4654      	mov	r4, sl
 80190c6:	2000      	movs	r0, #0
 80190c8:	f04f 0c0a 	mov.w	ip, #10
 80190cc:	4621      	mov	r1, r4
 80190ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190d2:	3b30      	subs	r3, #48	; 0x30
 80190d4:	2b09      	cmp	r3, #9
 80190d6:	d94e      	bls.n	8019176 <_svfiprintf_r+0x17e>
 80190d8:	b1b0      	cbz	r0, 8019108 <_svfiprintf_r+0x110>
 80190da:	9207      	str	r2, [sp, #28]
 80190dc:	e014      	b.n	8019108 <_svfiprintf_r+0x110>
 80190de:	eba0 0308 	sub.w	r3, r0, r8
 80190e2:	fa09 f303 	lsl.w	r3, r9, r3
 80190e6:	4313      	orrs	r3, r2
 80190e8:	9304      	str	r3, [sp, #16]
 80190ea:	46a2      	mov	sl, r4
 80190ec:	e7d2      	b.n	8019094 <_svfiprintf_r+0x9c>
 80190ee:	9b03      	ldr	r3, [sp, #12]
 80190f0:	1d19      	adds	r1, r3, #4
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	9103      	str	r1, [sp, #12]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	bfbb      	ittet	lt
 80190fa:	425b      	neglt	r3, r3
 80190fc:	f042 0202 	orrlt.w	r2, r2, #2
 8019100:	9307      	strge	r3, [sp, #28]
 8019102:	9307      	strlt	r3, [sp, #28]
 8019104:	bfb8      	it	lt
 8019106:	9204      	strlt	r2, [sp, #16]
 8019108:	7823      	ldrb	r3, [r4, #0]
 801910a:	2b2e      	cmp	r3, #46	; 0x2e
 801910c:	d10c      	bne.n	8019128 <_svfiprintf_r+0x130>
 801910e:	7863      	ldrb	r3, [r4, #1]
 8019110:	2b2a      	cmp	r3, #42	; 0x2a
 8019112:	d135      	bne.n	8019180 <_svfiprintf_r+0x188>
 8019114:	9b03      	ldr	r3, [sp, #12]
 8019116:	1d1a      	adds	r2, r3, #4
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	9203      	str	r2, [sp, #12]
 801911c:	2b00      	cmp	r3, #0
 801911e:	bfb8      	it	lt
 8019120:	f04f 33ff 	movlt.w	r3, #4294967295
 8019124:	3402      	adds	r4, #2
 8019126:	9305      	str	r3, [sp, #20]
 8019128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80191f4 <_svfiprintf_r+0x1fc>
 801912c:	7821      	ldrb	r1, [r4, #0]
 801912e:	2203      	movs	r2, #3
 8019130:	4650      	mov	r0, sl
 8019132:	f7e7 f855 	bl	80001e0 <memchr>
 8019136:	b140      	cbz	r0, 801914a <_svfiprintf_r+0x152>
 8019138:	2340      	movs	r3, #64	; 0x40
 801913a:	eba0 000a 	sub.w	r0, r0, sl
 801913e:	fa03 f000 	lsl.w	r0, r3, r0
 8019142:	9b04      	ldr	r3, [sp, #16]
 8019144:	4303      	orrs	r3, r0
 8019146:	3401      	adds	r4, #1
 8019148:	9304      	str	r3, [sp, #16]
 801914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801914e:	4826      	ldr	r0, [pc, #152]	; (80191e8 <_svfiprintf_r+0x1f0>)
 8019150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019154:	2206      	movs	r2, #6
 8019156:	f7e7 f843 	bl	80001e0 <memchr>
 801915a:	2800      	cmp	r0, #0
 801915c:	d038      	beq.n	80191d0 <_svfiprintf_r+0x1d8>
 801915e:	4b23      	ldr	r3, [pc, #140]	; (80191ec <_svfiprintf_r+0x1f4>)
 8019160:	bb1b      	cbnz	r3, 80191aa <_svfiprintf_r+0x1b2>
 8019162:	9b03      	ldr	r3, [sp, #12]
 8019164:	3307      	adds	r3, #7
 8019166:	f023 0307 	bic.w	r3, r3, #7
 801916a:	3308      	adds	r3, #8
 801916c:	9303      	str	r3, [sp, #12]
 801916e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019170:	4433      	add	r3, r6
 8019172:	9309      	str	r3, [sp, #36]	; 0x24
 8019174:	e767      	b.n	8019046 <_svfiprintf_r+0x4e>
 8019176:	fb0c 3202 	mla	r2, ip, r2, r3
 801917a:	460c      	mov	r4, r1
 801917c:	2001      	movs	r0, #1
 801917e:	e7a5      	b.n	80190cc <_svfiprintf_r+0xd4>
 8019180:	2300      	movs	r3, #0
 8019182:	3401      	adds	r4, #1
 8019184:	9305      	str	r3, [sp, #20]
 8019186:	4619      	mov	r1, r3
 8019188:	f04f 0c0a 	mov.w	ip, #10
 801918c:	4620      	mov	r0, r4
 801918e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019192:	3a30      	subs	r2, #48	; 0x30
 8019194:	2a09      	cmp	r2, #9
 8019196:	d903      	bls.n	80191a0 <_svfiprintf_r+0x1a8>
 8019198:	2b00      	cmp	r3, #0
 801919a:	d0c5      	beq.n	8019128 <_svfiprintf_r+0x130>
 801919c:	9105      	str	r1, [sp, #20]
 801919e:	e7c3      	b.n	8019128 <_svfiprintf_r+0x130>
 80191a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80191a4:	4604      	mov	r4, r0
 80191a6:	2301      	movs	r3, #1
 80191a8:	e7f0      	b.n	801918c <_svfiprintf_r+0x194>
 80191aa:	ab03      	add	r3, sp, #12
 80191ac:	9300      	str	r3, [sp, #0]
 80191ae:	462a      	mov	r2, r5
 80191b0:	4b0f      	ldr	r3, [pc, #60]	; (80191f0 <_svfiprintf_r+0x1f8>)
 80191b2:	a904      	add	r1, sp, #16
 80191b4:	4638      	mov	r0, r7
 80191b6:	f7fc faf5 	bl	80157a4 <_printf_float>
 80191ba:	1c42      	adds	r2, r0, #1
 80191bc:	4606      	mov	r6, r0
 80191be:	d1d6      	bne.n	801916e <_svfiprintf_r+0x176>
 80191c0:	89ab      	ldrh	r3, [r5, #12]
 80191c2:	065b      	lsls	r3, r3, #25
 80191c4:	f53f af2c 	bmi.w	8019020 <_svfiprintf_r+0x28>
 80191c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191ca:	b01d      	add	sp, #116	; 0x74
 80191cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191d0:	ab03      	add	r3, sp, #12
 80191d2:	9300      	str	r3, [sp, #0]
 80191d4:	462a      	mov	r2, r5
 80191d6:	4b06      	ldr	r3, [pc, #24]	; (80191f0 <_svfiprintf_r+0x1f8>)
 80191d8:	a904      	add	r1, sp, #16
 80191da:	4638      	mov	r0, r7
 80191dc:	f7fc fd86 	bl	8015cec <_printf_i>
 80191e0:	e7eb      	b.n	80191ba <_svfiprintf_r+0x1c2>
 80191e2:	bf00      	nop
 80191e4:	0801c224 	.word	0x0801c224
 80191e8:	0801c22e 	.word	0x0801c22e
 80191ec:	080157a5 	.word	0x080157a5
 80191f0:	08018f41 	.word	0x08018f41
 80191f4:	0801c22a 	.word	0x0801c22a

080191f8 <nan>:
 80191f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019200 <nan+0x8>
 80191fc:	4770      	bx	lr
 80191fe:	bf00      	nop
 8019200:	00000000 	.word	0x00000000
 8019204:	7ff80000 	.word	0x7ff80000

08019208 <strncmp>:
 8019208:	b510      	push	{r4, lr}
 801920a:	b16a      	cbz	r2, 8019228 <strncmp+0x20>
 801920c:	3901      	subs	r1, #1
 801920e:	1884      	adds	r4, r0, r2
 8019210:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019214:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019218:	4293      	cmp	r3, r2
 801921a:	d103      	bne.n	8019224 <strncmp+0x1c>
 801921c:	42a0      	cmp	r0, r4
 801921e:	d001      	beq.n	8019224 <strncmp+0x1c>
 8019220:	2b00      	cmp	r3, #0
 8019222:	d1f5      	bne.n	8019210 <strncmp+0x8>
 8019224:	1a98      	subs	r0, r3, r2
 8019226:	bd10      	pop	{r4, pc}
 8019228:	4610      	mov	r0, r2
 801922a:	e7fc      	b.n	8019226 <strncmp+0x1e>

0801922c <__ascii_wctomb>:
 801922c:	b149      	cbz	r1, 8019242 <__ascii_wctomb+0x16>
 801922e:	2aff      	cmp	r2, #255	; 0xff
 8019230:	bf85      	ittet	hi
 8019232:	238a      	movhi	r3, #138	; 0x8a
 8019234:	6003      	strhi	r3, [r0, #0]
 8019236:	700a      	strbls	r2, [r1, #0]
 8019238:	f04f 30ff 	movhi.w	r0, #4294967295
 801923c:	bf98      	it	ls
 801923e:	2001      	movls	r0, #1
 8019240:	4770      	bx	lr
 8019242:	4608      	mov	r0, r1
 8019244:	4770      	bx	lr
	...

08019248 <__assert_func>:
 8019248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801924a:	4614      	mov	r4, r2
 801924c:	461a      	mov	r2, r3
 801924e:	4b09      	ldr	r3, [pc, #36]	; (8019274 <__assert_func+0x2c>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	4605      	mov	r5, r0
 8019254:	68d8      	ldr	r0, [r3, #12]
 8019256:	b14c      	cbz	r4, 801926c <__assert_func+0x24>
 8019258:	4b07      	ldr	r3, [pc, #28]	; (8019278 <__assert_func+0x30>)
 801925a:	9100      	str	r1, [sp, #0]
 801925c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019260:	4906      	ldr	r1, [pc, #24]	; (801927c <__assert_func+0x34>)
 8019262:	462b      	mov	r3, r5
 8019264:	f000 f80e 	bl	8019284 <fiprintf>
 8019268:	f000 fa60 	bl	801972c <abort>
 801926c:	4b04      	ldr	r3, [pc, #16]	; (8019280 <__assert_func+0x38>)
 801926e:	461c      	mov	r4, r3
 8019270:	e7f3      	b.n	801925a <__assert_func+0x12>
 8019272:	bf00      	nop
 8019274:	20004210 	.word	0x20004210
 8019278:	0801c235 	.word	0x0801c235
 801927c:	0801c242 	.word	0x0801c242
 8019280:	0801c270 	.word	0x0801c270

08019284 <fiprintf>:
 8019284:	b40e      	push	{r1, r2, r3}
 8019286:	b503      	push	{r0, r1, lr}
 8019288:	4601      	mov	r1, r0
 801928a:	ab03      	add	r3, sp, #12
 801928c:	4805      	ldr	r0, [pc, #20]	; (80192a4 <fiprintf+0x20>)
 801928e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019292:	6800      	ldr	r0, [r0, #0]
 8019294:	9301      	str	r3, [sp, #4]
 8019296:	f000 f859 	bl	801934c <_vfiprintf_r>
 801929a:	b002      	add	sp, #8
 801929c:	f85d eb04 	ldr.w	lr, [sp], #4
 80192a0:	b003      	add	sp, #12
 80192a2:	4770      	bx	lr
 80192a4:	20004210 	.word	0x20004210

080192a8 <__retarget_lock_init_recursive>:
 80192a8:	4770      	bx	lr

080192aa <__retarget_lock_acquire_recursive>:
 80192aa:	4770      	bx	lr

080192ac <__retarget_lock_release_recursive>:
 80192ac:	4770      	bx	lr

080192ae <_realloc_r>:
 80192ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192b0:	4607      	mov	r7, r0
 80192b2:	4614      	mov	r4, r2
 80192b4:	460e      	mov	r6, r1
 80192b6:	b921      	cbnz	r1, 80192c2 <_realloc_r+0x14>
 80192b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80192bc:	4611      	mov	r1, r2
 80192be:	f7fc b977 	b.w	80155b0 <_malloc_r>
 80192c2:	b922      	cbnz	r2, 80192ce <_realloc_r+0x20>
 80192c4:	f7fc f924 	bl	8015510 <_free_r>
 80192c8:	4625      	mov	r5, r4
 80192ca:	4628      	mov	r0, r5
 80192cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192ce:	f000 fc51 	bl	8019b74 <_malloc_usable_size_r>
 80192d2:	42a0      	cmp	r0, r4
 80192d4:	d20f      	bcs.n	80192f6 <_realloc_r+0x48>
 80192d6:	4621      	mov	r1, r4
 80192d8:	4638      	mov	r0, r7
 80192da:	f7fc f969 	bl	80155b0 <_malloc_r>
 80192de:	4605      	mov	r5, r0
 80192e0:	2800      	cmp	r0, #0
 80192e2:	d0f2      	beq.n	80192ca <_realloc_r+0x1c>
 80192e4:	4631      	mov	r1, r6
 80192e6:	4622      	mov	r2, r4
 80192e8:	f7fc f8e2 	bl	80154b0 <memcpy>
 80192ec:	4631      	mov	r1, r6
 80192ee:	4638      	mov	r0, r7
 80192f0:	f7fc f90e 	bl	8015510 <_free_r>
 80192f4:	e7e9      	b.n	80192ca <_realloc_r+0x1c>
 80192f6:	4635      	mov	r5, r6
 80192f8:	e7e7      	b.n	80192ca <_realloc_r+0x1c>

080192fa <__sfputc_r>:
 80192fa:	6893      	ldr	r3, [r2, #8]
 80192fc:	3b01      	subs	r3, #1
 80192fe:	2b00      	cmp	r3, #0
 8019300:	b410      	push	{r4}
 8019302:	6093      	str	r3, [r2, #8]
 8019304:	da08      	bge.n	8019318 <__sfputc_r+0x1e>
 8019306:	6994      	ldr	r4, [r2, #24]
 8019308:	42a3      	cmp	r3, r4
 801930a:	db01      	blt.n	8019310 <__sfputc_r+0x16>
 801930c:	290a      	cmp	r1, #10
 801930e:	d103      	bne.n	8019318 <__sfputc_r+0x1e>
 8019310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019314:	f000 b94a 	b.w	80195ac <__swbuf_r>
 8019318:	6813      	ldr	r3, [r2, #0]
 801931a:	1c58      	adds	r0, r3, #1
 801931c:	6010      	str	r0, [r2, #0]
 801931e:	7019      	strb	r1, [r3, #0]
 8019320:	4608      	mov	r0, r1
 8019322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019326:	4770      	bx	lr

08019328 <__sfputs_r>:
 8019328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801932a:	4606      	mov	r6, r0
 801932c:	460f      	mov	r7, r1
 801932e:	4614      	mov	r4, r2
 8019330:	18d5      	adds	r5, r2, r3
 8019332:	42ac      	cmp	r4, r5
 8019334:	d101      	bne.n	801933a <__sfputs_r+0x12>
 8019336:	2000      	movs	r0, #0
 8019338:	e007      	b.n	801934a <__sfputs_r+0x22>
 801933a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801933e:	463a      	mov	r2, r7
 8019340:	4630      	mov	r0, r6
 8019342:	f7ff ffda 	bl	80192fa <__sfputc_r>
 8019346:	1c43      	adds	r3, r0, #1
 8019348:	d1f3      	bne.n	8019332 <__sfputs_r+0xa>
 801934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801934c <_vfiprintf_r>:
 801934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019350:	460d      	mov	r5, r1
 8019352:	b09d      	sub	sp, #116	; 0x74
 8019354:	4614      	mov	r4, r2
 8019356:	4698      	mov	r8, r3
 8019358:	4606      	mov	r6, r0
 801935a:	b118      	cbz	r0, 8019364 <_vfiprintf_r+0x18>
 801935c:	6983      	ldr	r3, [r0, #24]
 801935e:	b90b      	cbnz	r3, 8019364 <_vfiprintf_r+0x18>
 8019360:	f000 fb06 	bl	8019970 <__sinit>
 8019364:	4b89      	ldr	r3, [pc, #548]	; (801958c <_vfiprintf_r+0x240>)
 8019366:	429d      	cmp	r5, r3
 8019368:	d11b      	bne.n	80193a2 <_vfiprintf_r+0x56>
 801936a:	6875      	ldr	r5, [r6, #4]
 801936c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801936e:	07d9      	lsls	r1, r3, #31
 8019370:	d405      	bmi.n	801937e <_vfiprintf_r+0x32>
 8019372:	89ab      	ldrh	r3, [r5, #12]
 8019374:	059a      	lsls	r2, r3, #22
 8019376:	d402      	bmi.n	801937e <_vfiprintf_r+0x32>
 8019378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801937a:	f7ff ff96 	bl	80192aa <__retarget_lock_acquire_recursive>
 801937e:	89ab      	ldrh	r3, [r5, #12]
 8019380:	071b      	lsls	r3, r3, #28
 8019382:	d501      	bpl.n	8019388 <_vfiprintf_r+0x3c>
 8019384:	692b      	ldr	r3, [r5, #16]
 8019386:	b9eb      	cbnz	r3, 80193c4 <_vfiprintf_r+0x78>
 8019388:	4629      	mov	r1, r5
 801938a:	4630      	mov	r0, r6
 801938c:	f000 f960 	bl	8019650 <__swsetup_r>
 8019390:	b1c0      	cbz	r0, 80193c4 <_vfiprintf_r+0x78>
 8019392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019394:	07dc      	lsls	r4, r3, #31
 8019396:	d50e      	bpl.n	80193b6 <_vfiprintf_r+0x6a>
 8019398:	f04f 30ff 	mov.w	r0, #4294967295
 801939c:	b01d      	add	sp, #116	; 0x74
 801939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a2:	4b7b      	ldr	r3, [pc, #492]	; (8019590 <_vfiprintf_r+0x244>)
 80193a4:	429d      	cmp	r5, r3
 80193a6:	d101      	bne.n	80193ac <_vfiprintf_r+0x60>
 80193a8:	68b5      	ldr	r5, [r6, #8]
 80193aa:	e7df      	b.n	801936c <_vfiprintf_r+0x20>
 80193ac:	4b79      	ldr	r3, [pc, #484]	; (8019594 <_vfiprintf_r+0x248>)
 80193ae:	429d      	cmp	r5, r3
 80193b0:	bf08      	it	eq
 80193b2:	68f5      	ldreq	r5, [r6, #12]
 80193b4:	e7da      	b.n	801936c <_vfiprintf_r+0x20>
 80193b6:	89ab      	ldrh	r3, [r5, #12]
 80193b8:	0598      	lsls	r0, r3, #22
 80193ba:	d4ed      	bmi.n	8019398 <_vfiprintf_r+0x4c>
 80193bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80193be:	f7ff ff75 	bl	80192ac <__retarget_lock_release_recursive>
 80193c2:	e7e9      	b.n	8019398 <_vfiprintf_r+0x4c>
 80193c4:	2300      	movs	r3, #0
 80193c6:	9309      	str	r3, [sp, #36]	; 0x24
 80193c8:	2320      	movs	r3, #32
 80193ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80193ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80193d2:	2330      	movs	r3, #48	; 0x30
 80193d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019598 <_vfiprintf_r+0x24c>
 80193d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80193dc:	f04f 0901 	mov.w	r9, #1
 80193e0:	4623      	mov	r3, r4
 80193e2:	469a      	mov	sl, r3
 80193e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193e8:	b10a      	cbz	r2, 80193ee <_vfiprintf_r+0xa2>
 80193ea:	2a25      	cmp	r2, #37	; 0x25
 80193ec:	d1f9      	bne.n	80193e2 <_vfiprintf_r+0x96>
 80193ee:	ebba 0b04 	subs.w	fp, sl, r4
 80193f2:	d00b      	beq.n	801940c <_vfiprintf_r+0xc0>
 80193f4:	465b      	mov	r3, fp
 80193f6:	4622      	mov	r2, r4
 80193f8:	4629      	mov	r1, r5
 80193fa:	4630      	mov	r0, r6
 80193fc:	f7ff ff94 	bl	8019328 <__sfputs_r>
 8019400:	3001      	adds	r0, #1
 8019402:	f000 80aa 	beq.w	801955a <_vfiprintf_r+0x20e>
 8019406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019408:	445a      	add	r2, fp
 801940a:	9209      	str	r2, [sp, #36]	; 0x24
 801940c:	f89a 3000 	ldrb.w	r3, [sl]
 8019410:	2b00      	cmp	r3, #0
 8019412:	f000 80a2 	beq.w	801955a <_vfiprintf_r+0x20e>
 8019416:	2300      	movs	r3, #0
 8019418:	f04f 32ff 	mov.w	r2, #4294967295
 801941c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019420:	f10a 0a01 	add.w	sl, sl, #1
 8019424:	9304      	str	r3, [sp, #16]
 8019426:	9307      	str	r3, [sp, #28]
 8019428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801942c:	931a      	str	r3, [sp, #104]	; 0x68
 801942e:	4654      	mov	r4, sl
 8019430:	2205      	movs	r2, #5
 8019432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019436:	4858      	ldr	r0, [pc, #352]	; (8019598 <_vfiprintf_r+0x24c>)
 8019438:	f7e6 fed2 	bl	80001e0 <memchr>
 801943c:	9a04      	ldr	r2, [sp, #16]
 801943e:	b9d8      	cbnz	r0, 8019478 <_vfiprintf_r+0x12c>
 8019440:	06d1      	lsls	r1, r2, #27
 8019442:	bf44      	itt	mi
 8019444:	2320      	movmi	r3, #32
 8019446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801944a:	0713      	lsls	r3, r2, #28
 801944c:	bf44      	itt	mi
 801944e:	232b      	movmi	r3, #43	; 0x2b
 8019450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019454:	f89a 3000 	ldrb.w	r3, [sl]
 8019458:	2b2a      	cmp	r3, #42	; 0x2a
 801945a:	d015      	beq.n	8019488 <_vfiprintf_r+0x13c>
 801945c:	9a07      	ldr	r2, [sp, #28]
 801945e:	4654      	mov	r4, sl
 8019460:	2000      	movs	r0, #0
 8019462:	f04f 0c0a 	mov.w	ip, #10
 8019466:	4621      	mov	r1, r4
 8019468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801946c:	3b30      	subs	r3, #48	; 0x30
 801946e:	2b09      	cmp	r3, #9
 8019470:	d94e      	bls.n	8019510 <_vfiprintf_r+0x1c4>
 8019472:	b1b0      	cbz	r0, 80194a2 <_vfiprintf_r+0x156>
 8019474:	9207      	str	r2, [sp, #28]
 8019476:	e014      	b.n	80194a2 <_vfiprintf_r+0x156>
 8019478:	eba0 0308 	sub.w	r3, r0, r8
 801947c:	fa09 f303 	lsl.w	r3, r9, r3
 8019480:	4313      	orrs	r3, r2
 8019482:	9304      	str	r3, [sp, #16]
 8019484:	46a2      	mov	sl, r4
 8019486:	e7d2      	b.n	801942e <_vfiprintf_r+0xe2>
 8019488:	9b03      	ldr	r3, [sp, #12]
 801948a:	1d19      	adds	r1, r3, #4
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	9103      	str	r1, [sp, #12]
 8019490:	2b00      	cmp	r3, #0
 8019492:	bfbb      	ittet	lt
 8019494:	425b      	neglt	r3, r3
 8019496:	f042 0202 	orrlt.w	r2, r2, #2
 801949a:	9307      	strge	r3, [sp, #28]
 801949c:	9307      	strlt	r3, [sp, #28]
 801949e:	bfb8      	it	lt
 80194a0:	9204      	strlt	r2, [sp, #16]
 80194a2:	7823      	ldrb	r3, [r4, #0]
 80194a4:	2b2e      	cmp	r3, #46	; 0x2e
 80194a6:	d10c      	bne.n	80194c2 <_vfiprintf_r+0x176>
 80194a8:	7863      	ldrb	r3, [r4, #1]
 80194aa:	2b2a      	cmp	r3, #42	; 0x2a
 80194ac:	d135      	bne.n	801951a <_vfiprintf_r+0x1ce>
 80194ae:	9b03      	ldr	r3, [sp, #12]
 80194b0:	1d1a      	adds	r2, r3, #4
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	9203      	str	r2, [sp, #12]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	bfb8      	it	lt
 80194ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80194be:	3402      	adds	r4, #2
 80194c0:	9305      	str	r3, [sp, #20]
 80194c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80195a8 <_vfiprintf_r+0x25c>
 80194c6:	7821      	ldrb	r1, [r4, #0]
 80194c8:	2203      	movs	r2, #3
 80194ca:	4650      	mov	r0, sl
 80194cc:	f7e6 fe88 	bl	80001e0 <memchr>
 80194d0:	b140      	cbz	r0, 80194e4 <_vfiprintf_r+0x198>
 80194d2:	2340      	movs	r3, #64	; 0x40
 80194d4:	eba0 000a 	sub.w	r0, r0, sl
 80194d8:	fa03 f000 	lsl.w	r0, r3, r0
 80194dc:	9b04      	ldr	r3, [sp, #16]
 80194de:	4303      	orrs	r3, r0
 80194e0:	3401      	adds	r4, #1
 80194e2:	9304      	str	r3, [sp, #16]
 80194e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194e8:	482c      	ldr	r0, [pc, #176]	; (801959c <_vfiprintf_r+0x250>)
 80194ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80194ee:	2206      	movs	r2, #6
 80194f0:	f7e6 fe76 	bl	80001e0 <memchr>
 80194f4:	2800      	cmp	r0, #0
 80194f6:	d03f      	beq.n	8019578 <_vfiprintf_r+0x22c>
 80194f8:	4b29      	ldr	r3, [pc, #164]	; (80195a0 <_vfiprintf_r+0x254>)
 80194fa:	bb1b      	cbnz	r3, 8019544 <_vfiprintf_r+0x1f8>
 80194fc:	9b03      	ldr	r3, [sp, #12]
 80194fe:	3307      	adds	r3, #7
 8019500:	f023 0307 	bic.w	r3, r3, #7
 8019504:	3308      	adds	r3, #8
 8019506:	9303      	str	r3, [sp, #12]
 8019508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801950a:	443b      	add	r3, r7
 801950c:	9309      	str	r3, [sp, #36]	; 0x24
 801950e:	e767      	b.n	80193e0 <_vfiprintf_r+0x94>
 8019510:	fb0c 3202 	mla	r2, ip, r2, r3
 8019514:	460c      	mov	r4, r1
 8019516:	2001      	movs	r0, #1
 8019518:	e7a5      	b.n	8019466 <_vfiprintf_r+0x11a>
 801951a:	2300      	movs	r3, #0
 801951c:	3401      	adds	r4, #1
 801951e:	9305      	str	r3, [sp, #20]
 8019520:	4619      	mov	r1, r3
 8019522:	f04f 0c0a 	mov.w	ip, #10
 8019526:	4620      	mov	r0, r4
 8019528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801952c:	3a30      	subs	r2, #48	; 0x30
 801952e:	2a09      	cmp	r2, #9
 8019530:	d903      	bls.n	801953a <_vfiprintf_r+0x1ee>
 8019532:	2b00      	cmp	r3, #0
 8019534:	d0c5      	beq.n	80194c2 <_vfiprintf_r+0x176>
 8019536:	9105      	str	r1, [sp, #20]
 8019538:	e7c3      	b.n	80194c2 <_vfiprintf_r+0x176>
 801953a:	fb0c 2101 	mla	r1, ip, r1, r2
 801953e:	4604      	mov	r4, r0
 8019540:	2301      	movs	r3, #1
 8019542:	e7f0      	b.n	8019526 <_vfiprintf_r+0x1da>
 8019544:	ab03      	add	r3, sp, #12
 8019546:	9300      	str	r3, [sp, #0]
 8019548:	462a      	mov	r2, r5
 801954a:	4b16      	ldr	r3, [pc, #88]	; (80195a4 <_vfiprintf_r+0x258>)
 801954c:	a904      	add	r1, sp, #16
 801954e:	4630      	mov	r0, r6
 8019550:	f7fc f928 	bl	80157a4 <_printf_float>
 8019554:	4607      	mov	r7, r0
 8019556:	1c78      	adds	r0, r7, #1
 8019558:	d1d6      	bne.n	8019508 <_vfiprintf_r+0x1bc>
 801955a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801955c:	07d9      	lsls	r1, r3, #31
 801955e:	d405      	bmi.n	801956c <_vfiprintf_r+0x220>
 8019560:	89ab      	ldrh	r3, [r5, #12]
 8019562:	059a      	lsls	r2, r3, #22
 8019564:	d402      	bmi.n	801956c <_vfiprintf_r+0x220>
 8019566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019568:	f7ff fea0 	bl	80192ac <__retarget_lock_release_recursive>
 801956c:	89ab      	ldrh	r3, [r5, #12]
 801956e:	065b      	lsls	r3, r3, #25
 8019570:	f53f af12 	bmi.w	8019398 <_vfiprintf_r+0x4c>
 8019574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019576:	e711      	b.n	801939c <_vfiprintf_r+0x50>
 8019578:	ab03      	add	r3, sp, #12
 801957a:	9300      	str	r3, [sp, #0]
 801957c:	462a      	mov	r2, r5
 801957e:	4b09      	ldr	r3, [pc, #36]	; (80195a4 <_vfiprintf_r+0x258>)
 8019580:	a904      	add	r1, sp, #16
 8019582:	4630      	mov	r0, r6
 8019584:	f7fc fbb2 	bl	8015cec <_printf_i>
 8019588:	e7e4      	b.n	8019554 <_vfiprintf_r+0x208>
 801958a:	bf00      	nop
 801958c:	0801c294 	.word	0x0801c294
 8019590:	0801c2b4 	.word	0x0801c2b4
 8019594:	0801c274 	.word	0x0801c274
 8019598:	0801c224 	.word	0x0801c224
 801959c:	0801c22e 	.word	0x0801c22e
 80195a0:	080157a5 	.word	0x080157a5
 80195a4:	08019329 	.word	0x08019329
 80195a8:	0801c22a 	.word	0x0801c22a

080195ac <__swbuf_r>:
 80195ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ae:	460e      	mov	r6, r1
 80195b0:	4614      	mov	r4, r2
 80195b2:	4605      	mov	r5, r0
 80195b4:	b118      	cbz	r0, 80195be <__swbuf_r+0x12>
 80195b6:	6983      	ldr	r3, [r0, #24]
 80195b8:	b90b      	cbnz	r3, 80195be <__swbuf_r+0x12>
 80195ba:	f000 f9d9 	bl	8019970 <__sinit>
 80195be:	4b21      	ldr	r3, [pc, #132]	; (8019644 <__swbuf_r+0x98>)
 80195c0:	429c      	cmp	r4, r3
 80195c2:	d12b      	bne.n	801961c <__swbuf_r+0x70>
 80195c4:	686c      	ldr	r4, [r5, #4]
 80195c6:	69a3      	ldr	r3, [r4, #24]
 80195c8:	60a3      	str	r3, [r4, #8]
 80195ca:	89a3      	ldrh	r3, [r4, #12]
 80195cc:	071a      	lsls	r2, r3, #28
 80195ce:	d52f      	bpl.n	8019630 <__swbuf_r+0x84>
 80195d0:	6923      	ldr	r3, [r4, #16]
 80195d2:	b36b      	cbz	r3, 8019630 <__swbuf_r+0x84>
 80195d4:	6923      	ldr	r3, [r4, #16]
 80195d6:	6820      	ldr	r0, [r4, #0]
 80195d8:	1ac0      	subs	r0, r0, r3
 80195da:	6963      	ldr	r3, [r4, #20]
 80195dc:	b2f6      	uxtb	r6, r6
 80195de:	4283      	cmp	r3, r0
 80195e0:	4637      	mov	r7, r6
 80195e2:	dc04      	bgt.n	80195ee <__swbuf_r+0x42>
 80195e4:	4621      	mov	r1, r4
 80195e6:	4628      	mov	r0, r5
 80195e8:	f000 f92e 	bl	8019848 <_fflush_r>
 80195ec:	bb30      	cbnz	r0, 801963c <__swbuf_r+0x90>
 80195ee:	68a3      	ldr	r3, [r4, #8]
 80195f0:	3b01      	subs	r3, #1
 80195f2:	60a3      	str	r3, [r4, #8]
 80195f4:	6823      	ldr	r3, [r4, #0]
 80195f6:	1c5a      	adds	r2, r3, #1
 80195f8:	6022      	str	r2, [r4, #0]
 80195fa:	701e      	strb	r6, [r3, #0]
 80195fc:	6963      	ldr	r3, [r4, #20]
 80195fe:	3001      	adds	r0, #1
 8019600:	4283      	cmp	r3, r0
 8019602:	d004      	beq.n	801960e <__swbuf_r+0x62>
 8019604:	89a3      	ldrh	r3, [r4, #12]
 8019606:	07db      	lsls	r3, r3, #31
 8019608:	d506      	bpl.n	8019618 <__swbuf_r+0x6c>
 801960a:	2e0a      	cmp	r6, #10
 801960c:	d104      	bne.n	8019618 <__swbuf_r+0x6c>
 801960e:	4621      	mov	r1, r4
 8019610:	4628      	mov	r0, r5
 8019612:	f000 f919 	bl	8019848 <_fflush_r>
 8019616:	b988      	cbnz	r0, 801963c <__swbuf_r+0x90>
 8019618:	4638      	mov	r0, r7
 801961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801961c:	4b0a      	ldr	r3, [pc, #40]	; (8019648 <__swbuf_r+0x9c>)
 801961e:	429c      	cmp	r4, r3
 8019620:	d101      	bne.n	8019626 <__swbuf_r+0x7a>
 8019622:	68ac      	ldr	r4, [r5, #8]
 8019624:	e7cf      	b.n	80195c6 <__swbuf_r+0x1a>
 8019626:	4b09      	ldr	r3, [pc, #36]	; (801964c <__swbuf_r+0xa0>)
 8019628:	429c      	cmp	r4, r3
 801962a:	bf08      	it	eq
 801962c:	68ec      	ldreq	r4, [r5, #12]
 801962e:	e7ca      	b.n	80195c6 <__swbuf_r+0x1a>
 8019630:	4621      	mov	r1, r4
 8019632:	4628      	mov	r0, r5
 8019634:	f000 f80c 	bl	8019650 <__swsetup_r>
 8019638:	2800      	cmp	r0, #0
 801963a:	d0cb      	beq.n	80195d4 <__swbuf_r+0x28>
 801963c:	f04f 37ff 	mov.w	r7, #4294967295
 8019640:	e7ea      	b.n	8019618 <__swbuf_r+0x6c>
 8019642:	bf00      	nop
 8019644:	0801c294 	.word	0x0801c294
 8019648:	0801c2b4 	.word	0x0801c2b4
 801964c:	0801c274 	.word	0x0801c274

08019650 <__swsetup_r>:
 8019650:	4b32      	ldr	r3, [pc, #200]	; (801971c <__swsetup_r+0xcc>)
 8019652:	b570      	push	{r4, r5, r6, lr}
 8019654:	681d      	ldr	r5, [r3, #0]
 8019656:	4606      	mov	r6, r0
 8019658:	460c      	mov	r4, r1
 801965a:	b125      	cbz	r5, 8019666 <__swsetup_r+0x16>
 801965c:	69ab      	ldr	r3, [r5, #24]
 801965e:	b913      	cbnz	r3, 8019666 <__swsetup_r+0x16>
 8019660:	4628      	mov	r0, r5
 8019662:	f000 f985 	bl	8019970 <__sinit>
 8019666:	4b2e      	ldr	r3, [pc, #184]	; (8019720 <__swsetup_r+0xd0>)
 8019668:	429c      	cmp	r4, r3
 801966a:	d10f      	bne.n	801968c <__swsetup_r+0x3c>
 801966c:	686c      	ldr	r4, [r5, #4]
 801966e:	89a3      	ldrh	r3, [r4, #12]
 8019670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019674:	0719      	lsls	r1, r3, #28
 8019676:	d42c      	bmi.n	80196d2 <__swsetup_r+0x82>
 8019678:	06dd      	lsls	r5, r3, #27
 801967a:	d411      	bmi.n	80196a0 <__swsetup_r+0x50>
 801967c:	2309      	movs	r3, #9
 801967e:	6033      	str	r3, [r6, #0]
 8019680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019684:	81a3      	strh	r3, [r4, #12]
 8019686:	f04f 30ff 	mov.w	r0, #4294967295
 801968a:	e03e      	b.n	801970a <__swsetup_r+0xba>
 801968c:	4b25      	ldr	r3, [pc, #148]	; (8019724 <__swsetup_r+0xd4>)
 801968e:	429c      	cmp	r4, r3
 8019690:	d101      	bne.n	8019696 <__swsetup_r+0x46>
 8019692:	68ac      	ldr	r4, [r5, #8]
 8019694:	e7eb      	b.n	801966e <__swsetup_r+0x1e>
 8019696:	4b24      	ldr	r3, [pc, #144]	; (8019728 <__swsetup_r+0xd8>)
 8019698:	429c      	cmp	r4, r3
 801969a:	bf08      	it	eq
 801969c:	68ec      	ldreq	r4, [r5, #12]
 801969e:	e7e6      	b.n	801966e <__swsetup_r+0x1e>
 80196a0:	0758      	lsls	r0, r3, #29
 80196a2:	d512      	bpl.n	80196ca <__swsetup_r+0x7a>
 80196a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196a6:	b141      	cbz	r1, 80196ba <__swsetup_r+0x6a>
 80196a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196ac:	4299      	cmp	r1, r3
 80196ae:	d002      	beq.n	80196b6 <__swsetup_r+0x66>
 80196b0:	4630      	mov	r0, r6
 80196b2:	f7fb ff2d 	bl	8015510 <_free_r>
 80196b6:	2300      	movs	r3, #0
 80196b8:	6363      	str	r3, [r4, #52]	; 0x34
 80196ba:	89a3      	ldrh	r3, [r4, #12]
 80196bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80196c0:	81a3      	strh	r3, [r4, #12]
 80196c2:	2300      	movs	r3, #0
 80196c4:	6063      	str	r3, [r4, #4]
 80196c6:	6923      	ldr	r3, [r4, #16]
 80196c8:	6023      	str	r3, [r4, #0]
 80196ca:	89a3      	ldrh	r3, [r4, #12]
 80196cc:	f043 0308 	orr.w	r3, r3, #8
 80196d0:	81a3      	strh	r3, [r4, #12]
 80196d2:	6923      	ldr	r3, [r4, #16]
 80196d4:	b94b      	cbnz	r3, 80196ea <__swsetup_r+0x9a>
 80196d6:	89a3      	ldrh	r3, [r4, #12]
 80196d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80196dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80196e0:	d003      	beq.n	80196ea <__swsetup_r+0x9a>
 80196e2:	4621      	mov	r1, r4
 80196e4:	4630      	mov	r0, r6
 80196e6:	f000 fa05 	bl	8019af4 <__smakebuf_r>
 80196ea:	89a0      	ldrh	r0, [r4, #12]
 80196ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80196f0:	f010 0301 	ands.w	r3, r0, #1
 80196f4:	d00a      	beq.n	801970c <__swsetup_r+0xbc>
 80196f6:	2300      	movs	r3, #0
 80196f8:	60a3      	str	r3, [r4, #8]
 80196fa:	6963      	ldr	r3, [r4, #20]
 80196fc:	425b      	negs	r3, r3
 80196fe:	61a3      	str	r3, [r4, #24]
 8019700:	6923      	ldr	r3, [r4, #16]
 8019702:	b943      	cbnz	r3, 8019716 <__swsetup_r+0xc6>
 8019704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019708:	d1ba      	bne.n	8019680 <__swsetup_r+0x30>
 801970a:	bd70      	pop	{r4, r5, r6, pc}
 801970c:	0781      	lsls	r1, r0, #30
 801970e:	bf58      	it	pl
 8019710:	6963      	ldrpl	r3, [r4, #20]
 8019712:	60a3      	str	r3, [r4, #8]
 8019714:	e7f4      	b.n	8019700 <__swsetup_r+0xb0>
 8019716:	2000      	movs	r0, #0
 8019718:	e7f7      	b.n	801970a <__swsetup_r+0xba>
 801971a:	bf00      	nop
 801971c:	20004210 	.word	0x20004210
 8019720:	0801c294 	.word	0x0801c294
 8019724:	0801c2b4 	.word	0x0801c2b4
 8019728:	0801c274 	.word	0x0801c274

0801972c <abort>:
 801972c:	b508      	push	{r3, lr}
 801972e:	2006      	movs	r0, #6
 8019730:	f000 fa50 	bl	8019bd4 <raise>
 8019734:	2001      	movs	r0, #1
 8019736:	f7f0 ffc3 	bl	800a6c0 <_exit>
	...

0801973c <__sflush_r>:
 801973c:	898a      	ldrh	r2, [r1, #12]
 801973e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019742:	4605      	mov	r5, r0
 8019744:	0710      	lsls	r0, r2, #28
 8019746:	460c      	mov	r4, r1
 8019748:	d458      	bmi.n	80197fc <__sflush_r+0xc0>
 801974a:	684b      	ldr	r3, [r1, #4]
 801974c:	2b00      	cmp	r3, #0
 801974e:	dc05      	bgt.n	801975c <__sflush_r+0x20>
 8019750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019752:	2b00      	cmp	r3, #0
 8019754:	dc02      	bgt.n	801975c <__sflush_r+0x20>
 8019756:	2000      	movs	r0, #0
 8019758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801975c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801975e:	2e00      	cmp	r6, #0
 8019760:	d0f9      	beq.n	8019756 <__sflush_r+0x1a>
 8019762:	2300      	movs	r3, #0
 8019764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019768:	682f      	ldr	r7, [r5, #0]
 801976a:	602b      	str	r3, [r5, #0]
 801976c:	d032      	beq.n	80197d4 <__sflush_r+0x98>
 801976e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019770:	89a3      	ldrh	r3, [r4, #12]
 8019772:	075a      	lsls	r2, r3, #29
 8019774:	d505      	bpl.n	8019782 <__sflush_r+0x46>
 8019776:	6863      	ldr	r3, [r4, #4]
 8019778:	1ac0      	subs	r0, r0, r3
 801977a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801977c:	b10b      	cbz	r3, 8019782 <__sflush_r+0x46>
 801977e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019780:	1ac0      	subs	r0, r0, r3
 8019782:	2300      	movs	r3, #0
 8019784:	4602      	mov	r2, r0
 8019786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019788:	6a21      	ldr	r1, [r4, #32]
 801978a:	4628      	mov	r0, r5
 801978c:	47b0      	blx	r6
 801978e:	1c43      	adds	r3, r0, #1
 8019790:	89a3      	ldrh	r3, [r4, #12]
 8019792:	d106      	bne.n	80197a2 <__sflush_r+0x66>
 8019794:	6829      	ldr	r1, [r5, #0]
 8019796:	291d      	cmp	r1, #29
 8019798:	d82c      	bhi.n	80197f4 <__sflush_r+0xb8>
 801979a:	4a2a      	ldr	r2, [pc, #168]	; (8019844 <__sflush_r+0x108>)
 801979c:	40ca      	lsrs	r2, r1
 801979e:	07d6      	lsls	r6, r2, #31
 80197a0:	d528      	bpl.n	80197f4 <__sflush_r+0xb8>
 80197a2:	2200      	movs	r2, #0
 80197a4:	6062      	str	r2, [r4, #4]
 80197a6:	04d9      	lsls	r1, r3, #19
 80197a8:	6922      	ldr	r2, [r4, #16]
 80197aa:	6022      	str	r2, [r4, #0]
 80197ac:	d504      	bpl.n	80197b8 <__sflush_r+0x7c>
 80197ae:	1c42      	adds	r2, r0, #1
 80197b0:	d101      	bne.n	80197b6 <__sflush_r+0x7a>
 80197b2:	682b      	ldr	r3, [r5, #0]
 80197b4:	b903      	cbnz	r3, 80197b8 <__sflush_r+0x7c>
 80197b6:	6560      	str	r0, [r4, #84]	; 0x54
 80197b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197ba:	602f      	str	r7, [r5, #0]
 80197bc:	2900      	cmp	r1, #0
 80197be:	d0ca      	beq.n	8019756 <__sflush_r+0x1a>
 80197c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197c4:	4299      	cmp	r1, r3
 80197c6:	d002      	beq.n	80197ce <__sflush_r+0x92>
 80197c8:	4628      	mov	r0, r5
 80197ca:	f7fb fea1 	bl	8015510 <_free_r>
 80197ce:	2000      	movs	r0, #0
 80197d0:	6360      	str	r0, [r4, #52]	; 0x34
 80197d2:	e7c1      	b.n	8019758 <__sflush_r+0x1c>
 80197d4:	6a21      	ldr	r1, [r4, #32]
 80197d6:	2301      	movs	r3, #1
 80197d8:	4628      	mov	r0, r5
 80197da:	47b0      	blx	r6
 80197dc:	1c41      	adds	r1, r0, #1
 80197de:	d1c7      	bne.n	8019770 <__sflush_r+0x34>
 80197e0:	682b      	ldr	r3, [r5, #0]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d0c4      	beq.n	8019770 <__sflush_r+0x34>
 80197e6:	2b1d      	cmp	r3, #29
 80197e8:	d001      	beq.n	80197ee <__sflush_r+0xb2>
 80197ea:	2b16      	cmp	r3, #22
 80197ec:	d101      	bne.n	80197f2 <__sflush_r+0xb6>
 80197ee:	602f      	str	r7, [r5, #0]
 80197f0:	e7b1      	b.n	8019756 <__sflush_r+0x1a>
 80197f2:	89a3      	ldrh	r3, [r4, #12]
 80197f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197f8:	81a3      	strh	r3, [r4, #12]
 80197fa:	e7ad      	b.n	8019758 <__sflush_r+0x1c>
 80197fc:	690f      	ldr	r7, [r1, #16]
 80197fe:	2f00      	cmp	r7, #0
 8019800:	d0a9      	beq.n	8019756 <__sflush_r+0x1a>
 8019802:	0793      	lsls	r3, r2, #30
 8019804:	680e      	ldr	r6, [r1, #0]
 8019806:	bf08      	it	eq
 8019808:	694b      	ldreq	r3, [r1, #20]
 801980a:	600f      	str	r7, [r1, #0]
 801980c:	bf18      	it	ne
 801980e:	2300      	movne	r3, #0
 8019810:	eba6 0807 	sub.w	r8, r6, r7
 8019814:	608b      	str	r3, [r1, #8]
 8019816:	f1b8 0f00 	cmp.w	r8, #0
 801981a:	dd9c      	ble.n	8019756 <__sflush_r+0x1a>
 801981c:	6a21      	ldr	r1, [r4, #32]
 801981e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019820:	4643      	mov	r3, r8
 8019822:	463a      	mov	r2, r7
 8019824:	4628      	mov	r0, r5
 8019826:	47b0      	blx	r6
 8019828:	2800      	cmp	r0, #0
 801982a:	dc06      	bgt.n	801983a <__sflush_r+0xfe>
 801982c:	89a3      	ldrh	r3, [r4, #12]
 801982e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019832:	81a3      	strh	r3, [r4, #12]
 8019834:	f04f 30ff 	mov.w	r0, #4294967295
 8019838:	e78e      	b.n	8019758 <__sflush_r+0x1c>
 801983a:	4407      	add	r7, r0
 801983c:	eba8 0800 	sub.w	r8, r8, r0
 8019840:	e7e9      	b.n	8019816 <__sflush_r+0xda>
 8019842:	bf00      	nop
 8019844:	20400001 	.word	0x20400001

08019848 <_fflush_r>:
 8019848:	b538      	push	{r3, r4, r5, lr}
 801984a:	690b      	ldr	r3, [r1, #16]
 801984c:	4605      	mov	r5, r0
 801984e:	460c      	mov	r4, r1
 8019850:	b913      	cbnz	r3, 8019858 <_fflush_r+0x10>
 8019852:	2500      	movs	r5, #0
 8019854:	4628      	mov	r0, r5
 8019856:	bd38      	pop	{r3, r4, r5, pc}
 8019858:	b118      	cbz	r0, 8019862 <_fflush_r+0x1a>
 801985a:	6983      	ldr	r3, [r0, #24]
 801985c:	b90b      	cbnz	r3, 8019862 <_fflush_r+0x1a>
 801985e:	f000 f887 	bl	8019970 <__sinit>
 8019862:	4b14      	ldr	r3, [pc, #80]	; (80198b4 <_fflush_r+0x6c>)
 8019864:	429c      	cmp	r4, r3
 8019866:	d11b      	bne.n	80198a0 <_fflush_r+0x58>
 8019868:	686c      	ldr	r4, [r5, #4]
 801986a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d0ef      	beq.n	8019852 <_fflush_r+0xa>
 8019872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019874:	07d0      	lsls	r0, r2, #31
 8019876:	d404      	bmi.n	8019882 <_fflush_r+0x3a>
 8019878:	0599      	lsls	r1, r3, #22
 801987a:	d402      	bmi.n	8019882 <_fflush_r+0x3a>
 801987c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801987e:	f7ff fd14 	bl	80192aa <__retarget_lock_acquire_recursive>
 8019882:	4628      	mov	r0, r5
 8019884:	4621      	mov	r1, r4
 8019886:	f7ff ff59 	bl	801973c <__sflush_r>
 801988a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801988c:	07da      	lsls	r2, r3, #31
 801988e:	4605      	mov	r5, r0
 8019890:	d4e0      	bmi.n	8019854 <_fflush_r+0xc>
 8019892:	89a3      	ldrh	r3, [r4, #12]
 8019894:	059b      	lsls	r3, r3, #22
 8019896:	d4dd      	bmi.n	8019854 <_fflush_r+0xc>
 8019898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801989a:	f7ff fd07 	bl	80192ac <__retarget_lock_release_recursive>
 801989e:	e7d9      	b.n	8019854 <_fflush_r+0xc>
 80198a0:	4b05      	ldr	r3, [pc, #20]	; (80198b8 <_fflush_r+0x70>)
 80198a2:	429c      	cmp	r4, r3
 80198a4:	d101      	bne.n	80198aa <_fflush_r+0x62>
 80198a6:	68ac      	ldr	r4, [r5, #8]
 80198a8:	e7df      	b.n	801986a <_fflush_r+0x22>
 80198aa:	4b04      	ldr	r3, [pc, #16]	; (80198bc <_fflush_r+0x74>)
 80198ac:	429c      	cmp	r4, r3
 80198ae:	bf08      	it	eq
 80198b0:	68ec      	ldreq	r4, [r5, #12]
 80198b2:	e7da      	b.n	801986a <_fflush_r+0x22>
 80198b4:	0801c294 	.word	0x0801c294
 80198b8:	0801c2b4 	.word	0x0801c2b4
 80198bc:	0801c274 	.word	0x0801c274

080198c0 <std>:
 80198c0:	2300      	movs	r3, #0
 80198c2:	b510      	push	{r4, lr}
 80198c4:	4604      	mov	r4, r0
 80198c6:	e9c0 3300 	strd	r3, r3, [r0]
 80198ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80198ce:	6083      	str	r3, [r0, #8]
 80198d0:	8181      	strh	r1, [r0, #12]
 80198d2:	6643      	str	r3, [r0, #100]	; 0x64
 80198d4:	81c2      	strh	r2, [r0, #14]
 80198d6:	6183      	str	r3, [r0, #24]
 80198d8:	4619      	mov	r1, r3
 80198da:	2208      	movs	r2, #8
 80198dc:	305c      	adds	r0, #92	; 0x5c
 80198de:	f7fb fe0f 	bl	8015500 <memset>
 80198e2:	4b05      	ldr	r3, [pc, #20]	; (80198f8 <std+0x38>)
 80198e4:	6263      	str	r3, [r4, #36]	; 0x24
 80198e6:	4b05      	ldr	r3, [pc, #20]	; (80198fc <std+0x3c>)
 80198e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80198ea:	4b05      	ldr	r3, [pc, #20]	; (8019900 <std+0x40>)
 80198ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80198ee:	4b05      	ldr	r3, [pc, #20]	; (8019904 <std+0x44>)
 80198f0:	6224      	str	r4, [r4, #32]
 80198f2:	6323      	str	r3, [r4, #48]	; 0x30
 80198f4:	bd10      	pop	{r4, pc}
 80198f6:	bf00      	nop
 80198f8:	08019c0d 	.word	0x08019c0d
 80198fc:	08019c2f 	.word	0x08019c2f
 8019900:	08019c67 	.word	0x08019c67
 8019904:	08019c8b 	.word	0x08019c8b

08019908 <_cleanup_r>:
 8019908:	4901      	ldr	r1, [pc, #4]	; (8019910 <_cleanup_r+0x8>)
 801990a:	f000 b8af 	b.w	8019a6c <_fwalk_reent>
 801990e:	bf00      	nop
 8019910:	08019849 	.word	0x08019849

08019914 <__sfmoreglue>:
 8019914:	b570      	push	{r4, r5, r6, lr}
 8019916:	1e4a      	subs	r2, r1, #1
 8019918:	2568      	movs	r5, #104	; 0x68
 801991a:	4355      	muls	r5, r2
 801991c:	460e      	mov	r6, r1
 801991e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019922:	f7fb fe45 	bl	80155b0 <_malloc_r>
 8019926:	4604      	mov	r4, r0
 8019928:	b140      	cbz	r0, 801993c <__sfmoreglue+0x28>
 801992a:	2100      	movs	r1, #0
 801992c:	e9c0 1600 	strd	r1, r6, [r0]
 8019930:	300c      	adds	r0, #12
 8019932:	60a0      	str	r0, [r4, #8]
 8019934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019938:	f7fb fde2 	bl	8015500 <memset>
 801993c:	4620      	mov	r0, r4
 801993e:	bd70      	pop	{r4, r5, r6, pc}

08019940 <__sfp_lock_acquire>:
 8019940:	4801      	ldr	r0, [pc, #4]	; (8019948 <__sfp_lock_acquire+0x8>)
 8019942:	f7ff bcb2 	b.w	80192aa <__retarget_lock_acquire_recursive>
 8019946:	bf00      	nop
 8019948:	20012390 	.word	0x20012390

0801994c <__sfp_lock_release>:
 801994c:	4801      	ldr	r0, [pc, #4]	; (8019954 <__sfp_lock_release+0x8>)
 801994e:	f7ff bcad 	b.w	80192ac <__retarget_lock_release_recursive>
 8019952:	bf00      	nop
 8019954:	20012390 	.word	0x20012390

08019958 <__sinit_lock_acquire>:
 8019958:	4801      	ldr	r0, [pc, #4]	; (8019960 <__sinit_lock_acquire+0x8>)
 801995a:	f7ff bca6 	b.w	80192aa <__retarget_lock_acquire_recursive>
 801995e:	bf00      	nop
 8019960:	2001238b 	.word	0x2001238b

08019964 <__sinit_lock_release>:
 8019964:	4801      	ldr	r0, [pc, #4]	; (801996c <__sinit_lock_release+0x8>)
 8019966:	f7ff bca1 	b.w	80192ac <__retarget_lock_release_recursive>
 801996a:	bf00      	nop
 801996c:	2001238b 	.word	0x2001238b

08019970 <__sinit>:
 8019970:	b510      	push	{r4, lr}
 8019972:	4604      	mov	r4, r0
 8019974:	f7ff fff0 	bl	8019958 <__sinit_lock_acquire>
 8019978:	69a3      	ldr	r3, [r4, #24]
 801997a:	b11b      	cbz	r3, 8019984 <__sinit+0x14>
 801997c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019980:	f7ff bff0 	b.w	8019964 <__sinit_lock_release>
 8019984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019988:	6523      	str	r3, [r4, #80]	; 0x50
 801998a:	4b13      	ldr	r3, [pc, #76]	; (80199d8 <__sinit+0x68>)
 801998c:	4a13      	ldr	r2, [pc, #76]	; (80199dc <__sinit+0x6c>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	62a2      	str	r2, [r4, #40]	; 0x28
 8019992:	42a3      	cmp	r3, r4
 8019994:	bf04      	itt	eq
 8019996:	2301      	moveq	r3, #1
 8019998:	61a3      	streq	r3, [r4, #24]
 801999a:	4620      	mov	r0, r4
 801999c:	f000 f820 	bl	80199e0 <__sfp>
 80199a0:	6060      	str	r0, [r4, #4]
 80199a2:	4620      	mov	r0, r4
 80199a4:	f000 f81c 	bl	80199e0 <__sfp>
 80199a8:	60a0      	str	r0, [r4, #8]
 80199aa:	4620      	mov	r0, r4
 80199ac:	f000 f818 	bl	80199e0 <__sfp>
 80199b0:	2200      	movs	r2, #0
 80199b2:	60e0      	str	r0, [r4, #12]
 80199b4:	2104      	movs	r1, #4
 80199b6:	6860      	ldr	r0, [r4, #4]
 80199b8:	f7ff ff82 	bl	80198c0 <std>
 80199bc:	68a0      	ldr	r0, [r4, #8]
 80199be:	2201      	movs	r2, #1
 80199c0:	2109      	movs	r1, #9
 80199c2:	f7ff ff7d 	bl	80198c0 <std>
 80199c6:	68e0      	ldr	r0, [r4, #12]
 80199c8:	2202      	movs	r2, #2
 80199ca:	2112      	movs	r1, #18
 80199cc:	f7ff ff78 	bl	80198c0 <std>
 80199d0:	2301      	movs	r3, #1
 80199d2:	61a3      	str	r3, [r4, #24]
 80199d4:	e7d2      	b.n	801997c <__sinit+0xc>
 80199d6:	bf00      	nop
 80199d8:	0801be20 	.word	0x0801be20
 80199dc:	08019909 	.word	0x08019909

080199e0 <__sfp>:
 80199e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199e2:	4607      	mov	r7, r0
 80199e4:	f7ff ffac 	bl	8019940 <__sfp_lock_acquire>
 80199e8:	4b1e      	ldr	r3, [pc, #120]	; (8019a64 <__sfp+0x84>)
 80199ea:	681e      	ldr	r6, [r3, #0]
 80199ec:	69b3      	ldr	r3, [r6, #24]
 80199ee:	b913      	cbnz	r3, 80199f6 <__sfp+0x16>
 80199f0:	4630      	mov	r0, r6
 80199f2:	f7ff ffbd 	bl	8019970 <__sinit>
 80199f6:	3648      	adds	r6, #72	; 0x48
 80199f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80199fc:	3b01      	subs	r3, #1
 80199fe:	d503      	bpl.n	8019a08 <__sfp+0x28>
 8019a00:	6833      	ldr	r3, [r6, #0]
 8019a02:	b30b      	cbz	r3, 8019a48 <__sfp+0x68>
 8019a04:	6836      	ldr	r6, [r6, #0]
 8019a06:	e7f7      	b.n	80199f8 <__sfp+0x18>
 8019a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019a0c:	b9d5      	cbnz	r5, 8019a44 <__sfp+0x64>
 8019a0e:	4b16      	ldr	r3, [pc, #88]	; (8019a68 <__sfp+0x88>)
 8019a10:	60e3      	str	r3, [r4, #12]
 8019a12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019a16:	6665      	str	r5, [r4, #100]	; 0x64
 8019a18:	f7ff fc46 	bl	80192a8 <__retarget_lock_init_recursive>
 8019a1c:	f7ff ff96 	bl	801994c <__sfp_lock_release>
 8019a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019a28:	6025      	str	r5, [r4, #0]
 8019a2a:	61a5      	str	r5, [r4, #24]
 8019a2c:	2208      	movs	r2, #8
 8019a2e:	4629      	mov	r1, r5
 8019a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019a34:	f7fb fd64 	bl	8015500 <memset>
 8019a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019a40:	4620      	mov	r0, r4
 8019a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a44:	3468      	adds	r4, #104	; 0x68
 8019a46:	e7d9      	b.n	80199fc <__sfp+0x1c>
 8019a48:	2104      	movs	r1, #4
 8019a4a:	4638      	mov	r0, r7
 8019a4c:	f7ff ff62 	bl	8019914 <__sfmoreglue>
 8019a50:	4604      	mov	r4, r0
 8019a52:	6030      	str	r0, [r6, #0]
 8019a54:	2800      	cmp	r0, #0
 8019a56:	d1d5      	bne.n	8019a04 <__sfp+0x24>
 8019a58:	f7ff ff78 	bl	801994c <__sfp_lock_release>
 8019a5c:	230c      	movs	r3, #12
 8019a5e:	603b      	str	r3, [r7, #0]
 8019a60:	e7ee      	b.n	8019a40 <__sfp+0x60>
 8019a62:	bf00      	nop
 8019a64:	0801be20 	.word	0x0801be20
 8019a68:	ffff0001 	.word	0xffff0001

08019a6c <_fwalk_reent>:
 8019a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a70:	4606      	mov	r6, r0
 8019a72:	4688      	mov	r8, r1
 8019a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019a78:	2700      	movs	r7, #0
 8019a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8019a82:	d505      	bpl.n	8019a90 <_fwalk_reent+0x24>
 8019a84:	6824      	ldr	r4, [r4, #0]
 8019a86:	2c00      	cmp	r4, #0
 8019a88:	d1f7      	bne.n	8019a7a <_fwalk_reent+0xe>
 8019a8a:	4638      	mov	r0, r7
 8019a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a90:	89ab      	ldrh	r3, [r5, #12]
 8019a92:	2b01      	cmp	r3, #1
 8019a94:	d907      	bls.n	8019aa6 <_fwalk_reent+0x3a>
 8019a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019a9a:	3301      	adds	r3, #1
 8019a9c:	d003      	beq.n	8019aa6 <_fwalk_reent+0x3a>
 8019a9e:	4629      	mov	r1, r5
 8019aa0:	4630      	mov	r0, r6
 8019aa2:	47c0      	blx	r8
 8019aa4:	4307      	orrs	r7, r0
 8019aa6:	3568      	adds	r5, #104	; 0x68
 8019aa8:	e7e9      	b.n	8019a7e <_fwalk_reent+0x12>

08019aaa <__swhatbuf_r>:
 8019aaa:	b570      	push	{r4, r5, r6, lr}
 8019aac:	460e      	mov	r6, r1
 8019aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ab2:	2900      	cmp	r1, #0
 8019ab4:	b096      	sub	sp, #88	; 0x58
 8019ab6:	4614      	mov	r4, r2
 8019ab8:	461d      	mov	r5, r3
 8019aba:	da07      	bge.n	8019acc <__swhatbuf_r+0x22>
 8019abc:	2300      	movs	r3, #0
 8019abe:	602b      	str	r3, [r5, #0]
 8019ac0:	89b3      	ldrh	r3, [r6, #12]
 8019ac2:	061a      	lsls	r2, r3, #24
 8019ac4:	d410      	bmi.n	8019ae8 <__swhatbuf_r+0x3e>
 8019ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019aca:	e00e      	b.n	8019aea <__swhatbuf_r+0x40>
 8019acc:	466a      	mov	r2, sp
 8019ace:	f000 f903 	bl	8019cd8 <_fstat_r>
 8019ad2:	2800      	cmp	r0, #0
 8019ad4:	dbf2      	blt.n	8019abc <__swhatbuf_r+0x12>
 8019ad6:	9a01      	ldr	r2, [sp, #4]
 8019ad8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019adc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019ae0:	425a      	negs	r2, r3
 8019ae2:	415a      	adcs	r2, r3
 8019ae4:	602a      	str	r2, [r5, #0]
 8019ae6:	e7ee      	b.n	8019ac6 <__swhatbuf_r+0x1c>
 8019ae8:	2340      	movs	r3, #64	; 0x40
 8019aea:	2000      	movs	r0, #0
 8019aec:	6023      	str	r3, [r4, #0]
 8019aee:	b016      	add	sp, #88	; 0x58
 8019af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019af4 <__smakebuf_r>:
 8019af4:	898b      	ldrh	r3, [r1, #12]
 8019af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019af8:	079d      	lsls	r5, r3, #30
 8019afa:	4606      	mov	r6, r0
 8019afc:	460c      	mov	r4, r1
 8019afe:	d507      	bpl.n	8019b10 <__smakebuf_r+0x1c>
 8019b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019b04:	6023      	str	r3, [r4, #0]
 8019b06:	6123      	str	r3, [r4, #16]
 8019b08:	2301      	movs	r3, #1
 8019b0a:	6163      	str	r3, [r4, #20]
 8019b0c:	b002      	add	sp, #8
 8019b0e:	bd70      	pop	{r4, r5, r6, pc}
 8019b10:	ab01      	add	r3, sp, #4
 8019b12:	466a      	mov	r2, sp
 8019b14:	f7ff ffc9 	bl	8019aaa <__swhatbuf_r>
 8019b18:	9900      	ldr	r1, [sp, #0]
 8019b1a:	4605      	mov	r5, r0
 8019b1c:	4630      	mov	r0, r6
 8019b1e:	f7fb fd47 	bl	80155b0 <_malloc_r>
 8019b22:	b948      	cbnz	r0, 8019b38 <__smakebuf_r+0x44>
 8019b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b28:	059a      	lsls	r2, r3, #22
 8019b2a:	d4ef      	bmi.n	8019b0c <__smakebuf_r+0x18>
 8019b2c:	f023 0303 	bic.w	r3, r3, #3
 8019b30:	f043 0302 	orr.w	r3, r3, #2
 8019b34:	81a3      	strh	r3, [r4, #12]
 8019b36:	e7e3      	b.n	8019b00 <__smakebuf_r+0xc>
 8019b38:	4b0d      	ldr	r3, [pc, #52]	; (8019b70 <__smakebuf_r+0x7c>)
 8019b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8019b3c:	89a3      	ldrh	r3, [r4, #12]
 8019b3e:	6020      	str	r0, [r4, #0]
 8019b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b44:	81a3      	strh	r3, [r4, #12]
 8019b46:	9b00      	ldr	r3, [sp, #0]
 8019b48:	6163      	str	r3, [r4, #20]
 8019b4a:	9b01      	ldr	r3, [sp, #4]
 8019b4c:	6120      	str	r0, [r4, #16]
 8019b4e:	b15b      	cbz	r3, 8019b68 <__smakebuf_r+0x74>
 8019b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b54:	4630      	mov	r0, r6
 8019b56:	f000 f8d1 	bl	8019cfc <_isatty_r>
 8019b5a:	b128      	cbz	r0, 8019b68 <__smakebuf_r+0x74>
 8019b5c:	89a3      	ldrh	r3, [r4, #12]
 8019b5e:	f023 0303 	bic.w	r3, r3, #3
 8019b62:	f043 0301 	orr.w	r3, r3, #1
 8019b66:	81a3      	strh	r3, [r4, #12]
 8019b68:	89a0      	ldrh	r0, [r4, #12]
 8019b6a:	4305      	orrs	r5, r0
 8019b6c:	81a5      	strh	r5, [r4, #12]
 8019b6e:	e7cd      	b.n	8019b0c <__smakebuf_r+0x18>
 8019b70:	08019909 	.word	0x08019909

08019b74 <_malloc_usable_size_r>:
 8019b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b78:	1f18      	subs	r0, r3, #4
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	bfbc      	itt	lt
 8019b7e:	580b      	ldrlt	r3, [r1, r0]
 8019b80:	18c0      	addlt	r0, r0, r3
 8019b82:	4770      	bx	lr

08019b84 <_raise_r>:
 8019b84:	291f      	cmp	r1, #31
 8019b86:	b538      	push	{r3, r4, r5, lr}
 8019b88:	4604      	mov	r4, r0
 8019b8a:	460d      	mov	r5, r1
 8019b8c:	d904      	bls.n	8019b98 <_raise_r+0x14>
 8019b8e:	2316      	movs	r3, #22
 8019b90:	6003      	str	r3, [r0, #0]
 8019b92:	f04f 30ff 	mov.w	r0, #4294967295
 8019b96:	bd38      	pop	{r3, r4, r5, pc}
 8019b98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019b9a:	b112      	cbz	r2, 8019ba2 <_raise_r+0x1e>
 8019b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019ba0:	b94b      	cbnz	r3, 8019bb6 <_raise_r+0x32>
 8019ba2:	4620      	mov	r0, r4
 8019ba4:	f000 f830 	bl	8019c08 <_getpid_r>
 8019ba8:	462a      	mov	r2, r5
 8019baa:	4601      	mov	r1, r0
 8019bac:	4620      	mov	r0, r4
 8019bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019bb2:	f000 b817 	b.w	8019be4 <_kill_r>
 8019bb6:	2b01      	cmp	r3, #1
 8019bb8:	d00a      	beq.n	8019bd0 <_raise_r+0x4c>
 8019bba:	1c59      	adds	r1, r3, #1
 8019bbc:	d103      	bne.n	8019bc6 <_raise_r+0x42>
 8019bbe:	2316      	movs	r3, #22
 8019bc0:	6003      	str	r3, [r0, #0]
 8019bc2:	2001      	movs	r0, #1
 8019bc4:	e7e7      	b.n	8019b96 <_raise_r+0x12>
 8019bc6:	2400      	movs	r4, #0
 8019bc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019bcc:	4628      	mov	r0, r5
 8019bce:	4798      	blx	r3
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	e7e0      	b.n	8019b96 <_raise_r+0x12>

08019bd4 <raise>:
 8019bd4:	4b02      	ldr	r3, [pc, #8]	; (8019be0 <raise+0xc>)
 8019bd6:	4601      	mov	r1, r0
 8019bd8:	6818      	ldr	r0, [r3, #0]
 8019bda:	f7ff bfd3 	b.w	8019b84 <_raise_r>
 8019bde:	bf00      	nop
 8019be0:	20004210 	.word	0x20004210

08019be4 <_kill_r>:
 8019be4:	b538      	push	{r3, r4, r5, lr}
 8019be6:	4d07      	ldr	r5, [pc, #28]	; (8019c04 <_kill_r+0x20>)
 8019be8:	2300      	movs	r3, #0
 8019bea:	4604      	mov	r4, r0
 8019bec:	4608      	mov	r0, r1
 8019bee:	4611      	mov	r1, r2
 8019bf0:	602b      	str	r3, [r5, #0]
 8019bf2:	f7f0 fd55 	bl	800a6a0 <_kill>
 8019bf6:	1c43      	adds	r3, r0, #1
 8019bf8:	d102      	bne.n	8019c00 <_kill_r+0x1c>
 8019bfa:	682b      	ldr	r3, [r5, #0]
 8019bfc:	b103      	cbz	r3, 8019c00 <_kill_r+0x1c>
 8019bfe:	6023      	str	r3, [r4, #0]
 8019c00:	bd38      	pop	{r3, r4, r5, pc}
 8019c02:	bf00      	nop
 8019c04:	20012384 	.word	0x20012384

08019c08 <_getpid_r>:
 8019c08:	f7f0 bd42 	b.w	800a690 <_getpid>

08019c0c <__sread>:
 8019c0c:	b510      	push	{r4, lr}
 8019c0e:	460c      	mov	r4, r1
 8019c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c14:	f000 f894 	bl	8019d40 <_read_r>
 8019c18:	2800      	cmp	r0, #0
 8019c1a:	bfab      	itete	ge
 8019c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8019c20:	181b      	addge	r3, r3, r0
 8019c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019c26:	bfac      	ite	ge
 8019c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8019c2a:	81a3      	strhlt	r3, [r4, #12]
 8019c2c:	bd10      	pop	{r4, pc}

08019c2e <__swrite>:
 8019c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c32:	461f      	mov	r7, r3
 8019c34:	898b      	ldrh	r3, [r1, #12]
 8019c36:	05db      	lsls	r3, r3, #23
 8019c38:	4605      	mov	r5, r0
 8019c3a:	460c      	mov	r4, r1
 8019c3c:	4616      	mov	r6, r2
 8019c3e:	d505      	bpl.n	8019c4c <__swrite+0x1e>
 8019c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c44:	2302      	movs	r3, #2
 8019c46:	2200      	movs	r2, #0
 8019c48:	f000 f868 	bl	8019d1c <_lseek_r>
 8019c4c:	89a3      	ldrh	r3, [r4, #12]
 8019c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c56:	81a3      	strh	r3, [r4, #12]
 8019c58:	4632      	mov	r2, r6
 8019c5a:	463b      	mov	r3, r7
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c62:	f000 b817 	b.w	8019c94 <_write_r>

08019c66 <__sseek>:
 8019c66:	b510      	push	{r4, lr}
 8019c68:	460c      	mov	r4, r1
 8019c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c6e:	f000 f855 	bl	8019d1c <_lseek_r>
 8019c72:	1c43      	adds	r3, r0, #1
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	bf15      	itete	ne
 8019c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8019c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019c82:	81a3      	strheq	r3, [r4, #12]
 8019c84:	bf18      	it	ne
 8019c86:	81a3      	strhne	r3, [r4, #12]
 8019c88:	bd10      	pop	{r4, pc}

08019c8a <__sclose>:
 8019c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c8e:	f000 b813 	b.w	8019cb8 <_close_r>
	...

08019c94 <_write_r>:
 8019c94:	b538      	push	{r3, r4, r5, lr}
 8019c96:	4d07      	ldr	r5, [pc, #28]	; (8019cb4 <_write_r+0x20>)
 8019c98:	4604      	mov	r4, r0
 8019c9a:	4608      	mov	r0, r1
 8019c9c:	4611      	mov	r1, r2
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	602a      	str	r2, [r5, #0]
 8019ca2:	461a      	mov	r2, r3
 8019ca4:	f7f0 fd33 	bl	800a70e <_write>
 8019ca8:	1c43      	adds	r3, r0, #1
 8019caa:	d102      	bne.n	8019cb2 <_write_r+0x1e>
 8019cac:	682b      	ldr	r3, [r5, #0]
 8019cae:	b103      	cbz	r3, 8019cb2 <_write_r+0x1e>
 8019cb0:	6023      	str	r3, [r4, #0]
 8019cb2:	bd38      	pop	{r3, r4, r5, pc}
 8019cb4:	20012384 	.word	0x20012384

08019cb8 <_close_r>:
 8019cb8:	b538      	push	{r3, r4, r5, lr}
 8019cba:	4d06      	ldr	r5, [pc, #24]	; (8019cd4 <_close_r+0x1c>)
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	4608      	mov	r0, r1
 8019cc2:	602b      	str	r3, [r5, #0]
 8019cc4:	f7f0 fd3f 	bl	800a746 <_close>
 8019cc8:	1c43      	adds	r3, r0, #1
 8019cca:	d102      	bne.n	8019cd2 <_close_r+0x1a>
 8019ccc:	682b      	ldr	r3, [r5, #0]
 8019cce:	b103      	cbz	r3, 8019cd2 <_close_r+0x1a>
 8019cd0:	6023      	str	r3, [r4, #0]
 8019cd2:	bd38      	pop	{r3, r4, r5, pc}
 8019cd4:	20012384 	.word	0x20012384

08019cd8 <_fstat_r>:
 8019cd8:	b538      	push	{r3, r4, r5, lr}
 8019cda:	4d07      	ldr	r5, [pc, #28]	; (8019cf8 <_fstat_r+0x20>)
 8019cdc:	2300      	movs	r3, #0
 8019cde:	4604      	mov	r4, r0
 8019ce0:	4608      	mov	r0, r1
 8019ce2:	4611      	mov	r1, r2
 8019ce4:	602b      	str	r3, [r5, #0]
 8019ce6:	f7f0 fd3a 	bl	800a75e <_fstat>
 8019cea:	1c43      	adds	r3, r0, #1
 8019cec:	d102      	bne.n	8019cf4 <_fstat_r+0x1c>
 8019cee:	682b      	ldr	r3, [r5, #0]
 8019cf0:	b103      	cbz	r3, 8019cf4 <_fstat_r+0x1c>
 8019cf2:	6023      	str	r3, [r4, #0]
 8019cf4:	bd38      	pop	{r3, r4, r5, pc}
 8019cf6:	bf00      	nop
 8019cf8:	20012384 	.word	0x20012384

08019cfc <_isatty_r>:
 8019cfc:	b538      	push	{r3, r4, r5, lr}
 8019cfe:	4d06      	ldr	r5, [pc, #24]	; (8019d18 <_isatty_r+0x1c>)
 8019d00:	2300      	movs	r3, #0
 8019d02:	4604      	mov	r4, r0
 8019d04:	4608      	mov	r0, r1
 8019d06:	602b      	str	r3, [r5, #0]
 8019d08:	f7f0 fd39 	bl	800a77e <_isatty>
 8019d0c:	1c43      	adds	r3, r0, #1
 8019d0e:	d102      	bne.n	8019d16 <_isatty_r+0x1a>
 8019d10:	682b      	ldr	r3, [r5, #0]
 8019d12:	b103      	cbz	r3, 8019d16 <_isatty_r+0x1a>
 8019d14:	6023      	str	r3, [r4, #0]
 8019d16:	bd38      	pop	{r3, r4, r5, pc}
 8019d18:	20012384 	.word	0x20012384

08019d1c <_lseek_r>:
 8019d1c:	b538      	push	{r3, r4, r5, lr}
 8019d1e:	4d07      	ldr	r5, [pc, #28]	; (8019d3c <_lseek_r+0x20>)
 8019d20:	4604      	mov	r4, r0
 8019d22:	4608      	mov	r0, r1
 8019d24:	4611      	mov	r1, r2
 8019d26:	2200      	movs	r2, #0
 8019d28:	602a      	str	r2, [r5, #0]
 8019d2a:	461a      	mov	r2, r3
 8019d2c:	f7f0 fd32 	bl	800a794 <_lseek>
 8019d30:	1c43      	adds	r3, r0, #1
 8019d32:	d102      	bne.n	8019d3a <_lseek_r+0x1e>
 8019d34:	682b      	ldr	r3, [r5, #0]
 8019d36:	b103      	cbz	r3, 8019d3a <_lseek_r+0x1e>
 8019d38:	6023      	str	r3, [r4, #0]
 8019d3a:	bd38      	pop	{r3, r4, r5, pc}
 8019d3c:	20012384 	.word	0x20012384

08019d40 <_read_r>:
 8019d40:	b538      	push	{r3, r4, r5, lr}
 8019d42:	4d07      	ldr	r5, [pc, #28]	; (8019d60 <_read_r+0x20>)
 8019d44:	4604      	mov	r4, r0
 8019d46:	4608      	mov	r0, r1
 8019d48:	4611      	mov	r1, r2
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	602a      	str	r2, [r5, #0]
 8019d4e:	461a      	mov	r2, r3
 8019d50:	f7f0 fcc0 	bl	800a6d4 <_read>
 8019d54:	1c43      	adds	r3, r0, #1
 8019d56:	d102      	bne.n	8019d5e <_read_r+0x1e>
 8019d58:	682b      	ldr	r3, [r5, #0]
 8019d5a:	b103      	cbz	r3, 8019d5e <_read_r+0x1e>
 8019d5c:	6023      	str	r3, [r4, #0]
 8019d5e:	bd38      	pop	{r3, r4, r5, pc}
 8019d60:	20012384 	.word	0x20012384
 8019d64:	00000000 	.word	0x00000000

08019d68 <ceil>:
 8019d68:	ec51 0b10 	vmov	r0, r1, d0
 8019d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019d74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019d78:	2e13      	cmp	r6, #19
 8019d7a:	ee10 5a10 	vmov	r5, s0
 8019d7e:	ee10 8a10 	vmov	r8, s0
 8019d82:	460c      	mov	r4, r1
 8019d84:	dc30      	bgt.n	8019de8 <ceil+0x80>
 8019d86:	2e00      	cmp	r6, #0
 8019d88:	da12      	bge.n	8019db0 <ceil+0x48>
 8019d8a:	a335      	add	r3, pc, #212	; (adr r3, 8019e60 <ceil+0xf8>)
 8019d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d90:	f7e6 fa7c 	bl	800028c <__adddf3>
 8019d94:	2200      	movs	r2, #0
 8019d96:	2300      	movs	r3, #0
 8019d98:	f7e6 febe 	bl	8000b18 <__aeabi_dcmpgt>
 8019d9c:	b128      	cbz	r0, 8019daa <ceil+0x42>
 8019d9e:	2c00      	cmp	r4, #0
 8019da0:	db55      	blt.n	8019e4e <ceil+0xe6>
 8019da2:	432c      	orrs	r4, r5
 8019da4:	d057      	beq.n	8019e56 <ceil+0xee>
 8019da6:	4c30      	ldr	r4, [pc, #192]	; (8019e68 <ceil+0x100>)
 8019da8:	2500      	movs	r5, #0
 8019daa:	4621      	mov	r1, r4
 8019dac:	4628      	mov	r0, r5
 8019dae:	e025      	b.n	8019dfc <ceil+0x94>
 8019db0:	4f2e      	ldr	r7, [pc, #184]	; (8019e6c <ceil+0x104>)
 8019db2:	4137      	asrs	r7, r6
 8019db4:	ea01 0307 	and.w	r3, r1, r7
 8019db8:	4303      	orrs	r3, r0
 8019dba:	d01f      	beq.n	8019dfc <ceil+0x94>
 8019dbc:	a328      	add	r3, pc, #160	; (adr r3, 8019e60 <ceil+0xf8>)
 8019dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc2:	f7e6 fa63 	bl	800028c <__adddf3>
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	2300      	movs	r3, #0
 8019dca:	f7e6 fea5 	bl	8000b18 <__aeabi_dcmpgt>
 8019dce:	2800      	cmp	r0, #0
 8019dd0:	d0eb      	beq.n	8019daa <ceil+0x42>
 8019dd2:	2c00      	cmp	r4, #0
 8019dd4:	bfc2      	ittt	gt
 8019dd6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019dda:	fa43 f606 	asrgt.w	r6, r3, r6
 8019dde:	19a4      	addgt	r4, r4, r6
 8019de0:	ea24 0407 	bic.w	r4, r4, r7
 8019de4:	2500      	movs	r5, #0
 8019de6:	e7e0      	b.n	8019daa <ceil+0x42>
 8019de8:	2e33      	cmp	r6, #51	; 0x33
 8019dea:	dd0b      	ble.n	8019e04 <ceil+0x9c>
 8019dec:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019df0:	d104      	bne.n	8019dfc <ceil+0x94>
 8019df2:	ee10 2a10 	vmov	r2, s0
 8019df6:	460b      	mov	r3, r1
 8019df8:	f7e6 fa48 	bl	800028c <__adddf3>
 8019dfc:	ec41 0b10 	vmov	d0, r0, r1
 8019e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e04:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019e08:	f04f 33ff 	mov.w	r3, #4294967295
 8019e0c:	fa23 f707 	lsr.w	r7, r3, r7
 8019e10:	4207      	tst	r7, r0
 8019e12:	d0f3      	beq.n	8019dfc <ceil+0x94>
 8019e14:	a312      	add	r3, pc, #72	; (adr r3, 8019e60 <ceil+0xf8>)
 8019e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e1a:	f7e6 fa37 	bl	800028c <__adddf3>
 8019e1e:	2200      	movs	r2, #0
 8019e20:	2300      	movs	r3, #0
 8019e22:	f7e6 fe79 	bl	8000b18 <__aeabi_dcmpgt>
 8019e26:	2800      	cmp	r0, #0
 8019e28:	d0bf      	beq.n	8019daa <ceil+0x42>
 8019e2a:	2c00      	cmp	r4, #0
 8019e2c:	dd02      	ble.n	8019e34 <ceil+0xcc>
 8019e2e:	2e14      	cmp	r6, #20
 8019e30:	d103      	bne.n	8019e3a <ceil+0xd2>
 8019e32:	3401      	adds	r4, #1
 8019e34:	ea25 0507 	bic.w	r5, r5, r7
 8019e38:	e7b7      	b.n	8019daa <ceil+0x42>
 8019e3a:	2301      	movs	r3, #1
 8019e3c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019e40:	fa03 f606 	lsl.w	r6, r3, r6
 8019e44:	4435      	add	r5, r6
 8019e46:	4545      	cmp	r5, r8
 8019e48:	bf38      	it	cc
 8019e4a:	18e4      	addcc	r4, r4, r3
 8019e4c:	e7f2      	b.n	8019e34 <ceil+0xcc>
 8019e4e:	2500      	movs	r5, #0
 8019e50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019e54:	e7a9      	b.n	8019daa <ceil+0x42>
 8019e56:	4625      	mov	r5, r4
 8019e58:	e7a7      	b.n	8019daa <ceil+0x42>
 8019e5a:	bf00      	nop
 8019e5c:	f3af 8000 	nop.w
 8019e60:	8800759c 	.word	0x8800759c
 8019e64:	7e37e43c 	.word	0x7e37e43c
 8019e68:	3ff00000 	.word	0x3ff00000
 8019e6c:	000fffff 	.word	0x000fffff

08019e70 <cos>:
 8019e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e72:	ec53 2b10 	vmov	r2, r3, d0
 8019e76:	4824      	ldr	r0, [pc, #144]	; (8019f08 <cos+0x98>)
 8019e78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019e7c:	4281      	cmp	r1, r0
 8019e7e:	dc06      	bgt.n	8019e8e <cos+0x1e>
 8019e80:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8019f00 <cos+0x90>
 8019e84:	f000 fef0 	bl	801ac68 <__kernel_cos>
 8019e88:	ec51 0b10 	vmov	r0, r1, d0
 8019e8c:	e007      	b.n	8019e9e <cos+0x2e>
 8019e8e:	481f      	ldr	r0, [pc, #124]	; (8019f0c <cos+0x9c>)
 8019e90:	4281      	cmp	r1, r0
 8019e92:	dd09      	ble.n	8019ea8 <cos+0x38>
 8019e94:	ee10 0a10 	vmov	r0, s0
 8019e98:	4619      	mov	r1, r3
 8019e9a:	f7e6 f9f5 	bl	8000288 <__aeabi_dsub>
 8019e9e:	ec41 0b10 	vmov	d0, r0, r1
 8019ea2:	b005      	add	sp, #20
 8019ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ea8:	4668      	mov	r0, sp
 8019eaa:	f000 fc1d 	bl	801a6e8 <__ieee754_rem_pio2>
 8019eae:	f000 0003 	and.w	r0, r0, #3
 8019eb2:	2801      	cmp	r0, #1
 8019eb4:	d007      	beq.n	8019ec6 <cos+0x56>
 8019eb6:	2802      	cmp	r0, #2
 8019eb8:	d012      	beq.n	8019ee0 <cos+0x70>
 8019eba:	b9c0      	cbnz	r0, 8019eee <cos+0x7e>
 8019ebc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ec0:	ed9d 0b00 	vldr	d0, [sp]
 8019ec4:	e7de      	b.n	8019e84 <cos+0x14>
 8019ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019eca:	ed9d 0b00 	vldr	d0, [sp]
 8019ece:	f001 fad3 	bl	801b478 <__kernel_sin>
 8019ed2:	ec53 2b10 	vmov	r2, r3, d0
 8019ed6:	ee10 0a10 	vmov	r0, s0
 8019eda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019ede:	e7de      	b.n	8019e9e <cos+0x2e>
 8019ee0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ee4:	ed9d 0b00 	vldr	d0, [sp]
 8019ee8:	f000 febe 	bl	801ac68 <__kernel_cos>
 8019eec:	e7f1      	b.n	8019ed2 <cos+0x62>
 8019eee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ef2:	ed9d 0b00 	vldr	d0, [sp]
 8019ef6:	2001      	movs	r0, #1
 8019ef8:	f001 fabe 	bl	801b478 <__kernel_sin>
 8019efc:	e7c4      	b.n	8019e88 <cos+0x18>
 8019efe:	bf00      	nop
	...
 8019f08:	3fe921fb 	.word	0x3fe921fb
 8019f0c:	7fefffff 	.word	0x7fefffff

08019f10 <round>:
 8019f10:	ec51 0b10 	vmov	r0, r1, d0
 8019f14:	b570      	push	{r4, r5, r6, lr}
 8019f16:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8019f1a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8019f1e:	2c13      	cmp	r4, #19
 8019f20:	ee10 2a10 	vmov	r2, s0
 8019f24:	460b      	mov	r3, r1
 8019f26:	dc19      	bgt.n	8019f5c <round+0x4c>
 8019f28:	2c00      	cmp	r4, #0
 8019f2a:	da09      	bge.n	8019f40 <round+0x30>
 8019f2c:	3401      	adds	r4, #1
 8019f2e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8019f32:	d103      	bne.n	8019f3c <round+0x2c>
 8019f34:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019f38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019f3c:	2100      	movs	r1, #0
 8019f3e:	e028      	b.n	8019f92 <round+0x82>
 8019f40:	4d15      	ldr	r5, [pc, #84]	; (8019f98 <round+0x88>)
 8019f42:	4125      	asrs	r5, r4
 8019f44:	ea01 0605 	and.w	r6, r1, r5
 8019f48:	4332      	orrs	r2, r6
 8019f4a:	d00e      	beq.n	8019f6a <round+0x5a>
 8019f4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019f50:	fa42 f404 	asr.w	r4, r2, r4
 8019f54:	4423      	add	r3, r4
 8019f56:	ea23 0305 	bic.w	r3, r3, r5
 8019f5a:	e7ef      	b.n	8019f3c <round+0x2c>
 8019f5c:	2c33      	cmp	r4, #51	; 0x33
 8019f5e:	dd07      	ble.n	8019f70 <round+0x60>
 8019f60:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019f64:	d101      	bne.n	8019f6a <round+0x5a>
 8019f66:	f7e6 f991 	bl	800028c <__adddf3>
 8019f6a:	ec41 0b10 	vmov	d0, r0, r1
 8019f6e:	bd70      	pop	{r4, r5, r6, pc}
 8019f70:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8019f74:	f04f 35ff 	mov.w	r5, #4294967295
 8019f78:	40f5      	lsrs	r5, r6
 8019f7a:	4228      	tst	r0, r5
 8019f7c:	d0f5      	beq.n	8019f6a <round+0x5a>
 8019f7e:	2101      	movs	r1, #1
 8019f80:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019f84:	fa01 f404 	lsl.w	r4, r1, r4
 8019f88:	1912      	adds	r2, r2, r4
 8019f8a:	bf28      	it	cs
 8019f8c:	185b      	addcs	r3, r3, r1
 8019f8e:	ea22 0105 	bic.w	r1, r2, r5
 8019f92:	4608      	mov	r0, r1
 8019f94:	4619      	mov	r1, r3
 8019f96:	e7e8      	b.n	8019f6a <round+0x5a>
 8019f98:	000fffff 	.word	0x000fffff
 8019f9c:	00000000 	.word	0x00000000

08019fa0 <sin>:
 8019fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019fa2:	ec53 2b10 	vmov	r2, r3, d0
 8019fa6:	4826      	ldr	r0, [pc, #152]	; (801a040 <sin+0xa0>)
 8019fa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019fac:	4281      	cmp	r1, r0
 8019fae:	dc07      	bgt.n	8019fc0 <sin+0x20>
 8019fb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a038 <sin+0x98>
 8019fb4:	2000      	movs	r0, #0
 8019fb6:	f001 fa5f 	bl	801b478 <__kernel_sin>
 8019fba:	ec51 0b10 	vmov	r0, r1, d0
 8019fbe:	e007      	b.n	8019fd0 <sin+0x30>
 8019fc0:	4820      	ldr	r0, [pc, #128]	; (801a044 <sin+0xa4>)
 8019fc2:	4281      	cmp	r1, r0
 8019fc4:	dd09      	ble.n	8019fda <sin+0x3a>
 8019fc6:	ee10 0a10 	vmov	r0, s0
 8019fca:	4619      	mov	r1, r3
 8019fcc:	f7e6 f95c 	bl	8000288 <__aeabi_dsub>
 8019fd0:	ec41 0b10 	vmov	d0, r0, r1
 8019fd4:	b005      	add	sp, #20
 8019fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fda:	4668      	mov	r0, sp
 8019fdc:	f000 fb84 	bl	801a6e8 <__ieee754_rem_pio2>
 8019fe0:	f000 0003 	and.w	r0, r0, #3
 8019fe4:	2801      	cmp	r0, #1
 8019fe6:	d008      	beq.n	8019ffa <sin+0x5a>
 8019fe8:	2802      	cmp	r0, #2
 8019fea:	d00d      	beq.n	801a008 <sin+0x68>
 8019fec:	b9d0      	cbnz	r0, 801a024 <sin+0x84>
 8019fee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ff2:	ed9d 0b00 	vldr	d0, [sp]
 8019ff6:	2001      	movs	r0, #1
 8019ff8:	e7dd      	b.n	8019fb6 <sin+0x16>
 8019ffa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ffe:	ed9d 0b00 	vldr	d0, [sp]
 801a002:	f000 fe31 	bl	801ac68 <__kernel_cos>
 801a006:	e7d8      	b.n	8019fba <sin+0x1a>
 801a008:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a00c:	ed9d 0b00 	vldr	d0, [sp]
 801a010:	2001      	movs	r0, #1
 801a012:	f001 fa31 	bl	801b478 <__kernel_sin>
 801a016:	ec53 2b10 	vmov	r2, r3, d0
 801a01a:	ee10 0a10 	vmov	r0, s0
 801a01e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a022:	e7d5      	b.n	8019fd0 <sin+0x30>
 801a024:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a028:	ed9d 0b00 	vldr	d0, [sp]
 801a02c:	f000 fe1c 	bl	801ac68 <__kernel_cos>
 801a030:	e7f1      	b.n	801a016 <sin+0x76>
 801a032:	bf00      	nop
 801a034:	f3af 8000 	nop.w
	...
 801a040:	3fe921fb 	.word	0x3fe921fb
 801a044:	7fefffff 	.word	0x7fefffff

0801a048 <asin>:
 801a048:	b538      	push	{r3, r4, r5, lr}
 801a04a:	ed2d 8b02 	vpush	{d8}
 801a04e:	ec55 4b10 	vmov	r4, r5, d0
 801a052:	f000 f869 	bl	801a128 <__ieee754_asin>
 801a056:	4b16      	ldr	r3, [pc, #88]	; (801a0b0 <asin+0x68>)
 801a058:	eeb0 8a40 	vmov.f32	s16, s0
 801a05c:	eef0 8a60 	vmov.f32	s17, s1
 801a060:	f993 3000 	ldrsb.w	r3, [r3]
 801a064:	3301      	adds	r3, #1
 801a066:	d01c      	beq.n	801a0a2 <asin+0x5a>
 801a068:	4622      	mov	r2, r4
 801a06a:	462b      	mov	r3, r5
 801a06c:	4620      	mov	r0, r4
 801a06e:	4629      	mov	r1, r5
 801a070:	f7e6 fd5c 	bl	8000b2c <__aeabi_dcmpun>
 801a074:	b9a8      	cbnz	r0, 801a0a2 <asin+0x5a>
 801a076:	ec45 4b10 	vmov	d0, r4, r5
 801a07a:	f001 fc5d 	bl	801b938 <fabs>
 801a07e:	4b0d      	ldr	r3, [pc, #52]	; (801a0b4 <asin+0x6c>)
 801a080:	ec51 0b10 	vmov	r0, r1, d0
 801a084:	2200      	movs	r2, #0
 801a086:	f7e6 fd47 	bl	8000b18 <__aeabi_dcmpgt>
 801a08a:	b150      	cbz	r0, 801a0a2 <asin+0x5a>
 801a08c:	f7fb f9d6 	bl	801543c <__errno>
 801a090:	ecbd 8b02 	vpop	{d8}
 801a094:	2321      	movs	r3, #33	; 0x21
 801a096:	6003      	str	r3, [r0, #0]
 801a098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a09c:	4806      	ldr	r0, [pc, #24]	; (801a0b8 <asin+0x70>)
 801a09e:	f7ff b8ab 	b.w	80191f8 <nan>
 801a0a2:	eeb0 0a48 	vmov.f32	s0, s16
 801a0a6:	eef0 0a68 	vmov.f32	s1, s17
 801a0aa:	ecbd 8b02 	vpop	{d8}
 801a0ae:	bd38      	pop	{r3, r4, r5, pc}
 801a0b0:	200043e4 	.word	0x200043e4
 801a0b4:	3ff00000 	.word	0x3ff00000
 801a0b8:	0801c270 	.word	0x0801c270

0801a0bc <atan2>:
 801a0bc:	f000 ba48 	b.w	801a550 <__ieee754_atan2>

0801a0c0 <sqrt>:
 801a0c0:	b538      	push	{r3, r4, r5, lr}
 801a0c2:	ed2d 8b02 	vpush	{d8}
 801a0c6:	ec55 4b10 	vmov	r4, r5, d0
 801a0ca:	f000 fd17 	bl	801aafc <__ieee754_sqrt>
 801a0ce:	4b15      	ldr	r3, [pc, #84]	; (801a124 <sqrt+0x64>)
 801a0d0:	eeb0 8a40 	vmov.f32	s16, s0
 801a0d4:	eef0 8a60 	vmov.f32	s17, s1
 801a0d8:	f993 3000 	ldrsb.w	r3, [r3]
 801a0dc:	3301      	adds	r3, #1
 801a0de:	d019      	beq.n	801a114 <sqrt+0x54>
 801a0e0:	4622      	mov	r2, r4
 801a0e2:	462b      	mov	r3, r5
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	4629      	mov	r1, r5
 801a0e8:	f7e6 fd20 	bl	8000b2c <__aeabi_dcmpun>
 801a0ec:	b990      	cbnz	r0, 801a114 <sqrt+0x54>
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	4629      	mov	r1, r5
 801a0f6:	f7e6 fcf1 	bl	8000adc <__aeabi_dcmplt>
 801a0fa:	b158      	cbz	r0, 801a114 <sqrt+0x54>
 801a0fc:	f7fb f99e 	bl	801543c <__errno>
 801a100:	2321      	movs	r3, #33	; 0x21
 801a102:	6003      	str	r3, [r0, #0]
 801a104:	2200      	movs	r2, #0
 801a106:	2300      	movs	r3, #0
 801a108:	4610      	mov	r0, r2
 801a10a:	4619      	mov	r1, r3
 801a10c:	f7e6 fb9e 	bl	800084c <__aeabi_ddiv>
 801a110:	ec41 0b18 	vmov	d8, r0, r1
 801a114:	eeb0 0a48 	vmov.f32	s0, s16
 801a118:	eef0 0a68 	vmov.f32	s1, s17
 801a11c:	ecbd 8b02 	vpop	{d8}
 801a120:	bd38      	pop	{r3, r4, r5, pc}
 801a122:	bf00      	nop
 801a124:	200043e4 	.word	0x200043e4

0801a128 <__ieee754_asin>:
 801a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a12c:	ed2d 8b04 	vpush	{d8-d9}
 801a130:	ec55 4b10 	vmov	r4, r5, d0
 801a134:	4bcc      	ldr	r3, [pc, #816]	; (801a468 <__ieee754_asin+0x340>)
 801a136:	b083      	sub	sp, #12
 801a138:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a13c:	4598      	cmp	r8, r3
 801a13e:	9501      	str	r5, [sp, #4]
 801a140:	dd35      	ble.n	801a1ae <__ieee754_asin+0x86>
 801a142:	ee10 3a10 	vmov	r3, s0
 801a146:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801a14a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801a14e:	ea58 0303 	orrs.w	r3, r8, r3
 801a152:	d117      	bne.n	801a184 <__ieee754_asin+0x5c>
 801a154:	a3aa      	add	r3, pc, #680	; (adr r3, 801a400 <__ieee754_asin+0x2d8>)
 801a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a15a:	ee10 0a10 	vmov	r0, s0
 801a15e:	4629      	mov	r1, r5
 801a160:	f7e6 fa4a 	bl	80005f8 <__aeabi_dmul>
 801a164:	a3a8      	add	r3, pc, #672	; (adr r3, 801a408 <__ieee754_asin+0x2e0>)
 801a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a16a:	4606      	mov	r6, r0
 801a16c:	460f      	mov	r7, r1
 801a16e:	4620      	mov	r0, r4
 801a170:	4629      	mov	r1, r5
 801a172:	f7e6 fa41 	bl	80005f8 <__aeabi_dmul>
 801a176:	4602      	mov	r2, r0
 801a178:	460b      	mov	r3, r1
 801a17a:	4630      	mov	r0, r6
 801a17c:	4639      	mov	r1, r7
 801a17e:	f7e6 f885 	bl	800028c <__adddf3>
 801a182:	e00b      	b.n	801a19c <__ieee754_asin+0x74>
 801a184:	ee10 2a10 	vmov	r2, s0
 801a188:	462b      	mov	r3, r5
 801a18a:	ee10 0a10 	vmov	r0, s0
 801a18e:	4629      	mov	r1, r5
 801a190:	f7e6 f87a 	bl	8000288 <__aeabi_dsub>
 801a194:	4602      	mov	r2, r0
 801a196:	460b      	mov	r3, r1
 801a198:	f7e6 fb58 	bl	800084c <__aeabi_ddiv>
 801a19c:	4604      	mov	r4, r0
 801a19e:	460d      	mov	r5, r1
 801a1a0:	ec45 4b10 	vmov	d0, r4, r5
 801a1a4:	b003      	add	sp, #12
 801a1a6:	ecbd 8b04 	vpop	{d8-d9}
 801a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ae:	4baf      	ldr	r3, [pc, #700]	; (801a46c <__ieee754_asin+0x344>)
 801a1b0:	4598      	cmp	r8, r3
 801a1b2:	dc11      	bgt.n	801a1d8 <__ieee754_asin+0xb0>
 801a1b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a1b8:	f280 80ae 	bge.w	801a318 <__ieee754_asin+0x1f0>
 801a1bc:	a394      	add	r3, pc, #592	; (adr r3, 801a410 <__ieee754_asin+0x2e8>)
 801a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c2:	ee10 0a10 	vmov	r0, s0
 801a1c6:	4629      	mov	r1, r5
 801a1c8:	f7e6 f860 	bl	800028c <__adddf3>
 801a1cc:	4ba8      	ldr	r3, [pc, #672]	; (801a470 <__ieee754_asin+0x348>)
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	f7e6 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	d1e3      	bne.n	801a1a0 <__ieee754_asin+0x78>
 801a1d8:	ec45 4b10 	vmov	d0, r4, r5
 801a1dc:	f001 fbac 	bl	801b938 <fabs>
 801a1e0:	49a3      	ldr	r1, [pc, #652]	; (801a470 <__ieee754_asin+0x348>)
 801a1e2:	ec53 2b10 	vmov	r2, r3, d0
 801a1e6:	2000      	movs	r0, #0
 801a1e8:	f7e6 f84e 	bl	8000288 <__aeabi_dsub>
 801a1ec:	4ba1      	ldr	r3, [pc, #644]	; (801a474 <__ieee754_asin+0x34c>)
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	f7e6 fa02 	bl	80005f8 <__aeabi_dmul>
 801a1f4:	a388      	add	r3, pc, #544	; (adr r3, 801a418 <__ieee754_asin+0x2f0>)
 801a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1fa:	4604      	mov	r4, r0
 801a1fc:	460d      	mov	r5, r1
 801a1fe:	f7e6 f9fb 	bl	80005f8 <__aeabi_dmul>
 801a202:	a387      	add	r3, pc, #540	; (adr r3, 801a420 <__ieee754_asin+0x2f8>)
 801a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a208:	f7e6 f840 	bl	800028c <__adddf3>
 801a20c:	4622      	mov	r2, r4
 801a20e:	462b      	mov	r3, r5
 801a210:	f7e6 f9f2 	bl	80005f8 <__aeabi_dmul>
 801a214:	a384      	add	r3, pc, #528	; (adr r3, 801a428 <__ieee754_asin+0x300>)
 801a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21a:	f7e6 f835 	bl	8000288 <__aeabi_dsub>
 801a21e:	4622      	mov	r2, r4
 801a220:	462b      	mov	r3, r5
 801a222:	f7e6 f9e9 	bl	80005f8 <__aeabi_dmul>
 801a226:	a382      	add	r3, pc, #520	; (adr r3, 801a430 <__ieee754_asin+0x308>)
 801a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a22c:	f7e6 f82e 	bl	800028c <__adddf3>
 801a230:	4622      	mov	r2, r4
 801a232:	462b      	mov	r3, r5
 801a234:	f7e6 f9e0 	bl	80005f8 <__aeabi_dmul>
 801a238:	a37f      	add	r3, pc, #508	; (adr r3, 801a438 <__ieee754_asin+0x310>)
 801a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a23e:	f7e6 f823 	bl	8000288 <__aeabi_dsub>
 801a242:	4622      	mov	r2, r4
 801a244:	462b      	mov	r3, r5
 801a246:	f7e6 f9d7 	bl	80005f8 <__aeabi_dmul>
 801a24a:	a37d      	add	r3, pc, #500	; (adr r3, 801a440 <__ieee754_asin+0x318>)
 801a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a250:	f7e6 f81c 	bl	800028c <__adddf3>
 801a254:	4622      	mov	r2, r4
 801a256:	462b      	mov	r3, r5
 801a258:	f7e6 f9ce 	bl	80005f8 <__aeabi_dmul>
 801a25c:	a37a      	add	r3, pc, #488	; (adr r3, 801a448 <__ieee754_asin+0x320>)
 801a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a262:	ec41 0b18 	vmov	d8, r0, r1
 801a266:	4620      	mov	r0, r4
 801a268:	4629      	mov	r1, r5
 801a26a:	f7e6 f9c5 	bl	80005f8 <__aeabi_dmul>
 801a26e:	a378      	add	r3, pc, #480	; (adr r3, 801a450 <__ieee754_asin+0x328>)
 801a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a274:	f7e6 f808 	bl	8000288 <__aeabi_dsub>
 801a278:	4622      	mov	r2, r4
 801a27a:	462b      	mov	r3, r5
 801a27c:	f7e6 f9bc 	bl	80005f8 <__aeabi_dmul>
 801a280:	a375      	add	r3, pc, #468	; (adr r3, 801a458 <__ieee754_asin+0x330>)
 801a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a286:	f7e6 f801 	bl	800028c <__adddf3>
 801a28a:	4622      	mov	r2, r4
 801a28c:	462b      	mov	r3, r5
 801a28e:	f7e6 f9b3 	bl	80005f8 <__aeabi_dmul>
 801a292:	a373      	add	r3, pc, #460	; (adr r3, 801a460 <__ieee754_asin+0x338>)
 801a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a298:	f7e5 fff6 	bl	8000288 <__aeabi_dsub>
 801a29c:	4622      	mov	r2, r4
 801a29e:	462b      	mov	r3, r5
 801a2a0:	f7e6 f9aa 	bl	80005f8 <__aeabi_dmul>
 801a2a4:	4b72      	ldr	r3, [pc, #456]	; (801a470 <__ieee754_asin+0x348>)
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	f7e5 fff0 	bl	800028c <__adddf3>
 801a2ac:	ec45 4b10 	vmov	d0, r4, r5
 801a2b0:	4606      	mov	r6, r0
 801a2b2:	460f      	mov	r7, r1
 801a2b4:	f000 fc22 	bl	801aafc <__ieee754_sqrt>
 801a2b8:	4b6f      	ldr	r3, [pc, #444]	; (801a478 <__ieee754_asin+0x350>)
 801a2ba:	4598      	cmp	r8, r3
 801a2bc:	ec5b ab10 	vmov	sl, fp, d0
 801a2c0:	f340 80dc 	ble.w	801a47c <__ieee754_asin+0x354>
 801a2c4:	4632      	mov	r2, r6
 801a2c6:	463b      	mov	r3, r7
 801a2c8:	ec51 0b18 	vmov	r0, r1, d8
 801a2cc:	f7e6 fabe 	bl	800084c <__aeabi_ddiv>
 801a2d0:	4652      	mov	r2, sl
 801a2d2:	465b      	mov	r3, fp
 801a2d4:	f7e6 f990 	bl	80005f8 <__aeabi_dmul>
 801a2d8:	4652      	mov	r2, sl
 801a2da:	465b      	mov	r3, fp
 801a2dc:	f7e5 ffd6 	bl	800028c <__adddf3>
 801a2e0:	4602      	mov	r2, r0
 801a2e2:	460b      	mov	r3, r1
 801a2e4:	f7e5 ffd2 	bl	800028c <__adddf3>
 801a2e8:	a347      	add	r3, pc, #284	; (adr r3, 801a408 <__ieee754_asin+0x2e0>)
 801a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ee:	f7e5 ffcb 	bl	8000288 <__aeabi_dsub>
 801a2f2:	4602      	mov	r2, r0
 801a2f4:	460b      	mov	r3, r1
 801a2f6:	a142      	add	r1, pc, #264	; (adr r1, 801a400 <__ieee754_asin+0x2d8>)
 801a2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2fc:	f7e5 ffc4 	bl	8000288 <__aeabi_dsub>
 801a300:	9b01      	ldr	r3, [sp, #4]
 801a302:	2b00      	cmp	r3, #0
 801a304:	bfdc      	itt	le
 801a306:	4602      	movle	r2, r0
 801a308:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801a30c:	4604      	mov	r4, r0
 801a30e:	460d      	mov	r5, r1
 801a310:	bfdc      	itt	le
 801a312:	4614      	movle	r4, r2
 801a314:	461d      	movle	r5, r3
 801a316:	e743      	b.n	801a1a0 <__ieee754_asin+0x78>
 801a318:	ee10 2a10 	vmov	r2, s0
 801a31c:	ee10 0a10 	vmov	r0, s0
 801a320:	462b      	mov	r3, r5
 801a322:	4629      	mov	r1, r5
 801a324:	f7e6 f968 	bl	80005f8 <__aeabi_dmul>
 801a328:	a33b      	add	r3, pc, #236	; (adr r3, 801a418 <__ieee754_asin+0x2f0>)
 801a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a32e:	4606      	mov	r6, r0
 801a330:	460f      	mov	r7, r1
 801a332:	f7e6 f961 	bl	80005f8 <__aeabi_dmul>
 801a336:	a33a      	add	r3, pc, #232	; (adr r3, 801a420 <__ieee754_asin+0x2f8>)
 801a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a33c:	f7e5 ffa6 	bl	800028c <__adddf3>
 801a340:	4632      	mov	r2, r6
 801a342:	463b      	mov	r3, r7
 801a344:	f7e6 f958 	bl	80005f8 <__aeabi_dmul>
 801a348:	a337      	add	r3, pc, #220	; (adr r3, 801a428 <__ieee754_asin+0x300>)
 801a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a34e:	f7e5 ff9b 	bl	8000288 <__aeabi_dsub>
 801a352:	4632      	mov	r2, r6
 801a354:	463b      	mov	r3, r7
 801a356:	f7e6 f94f 	bl	80005f8 <__aeabi_dmul>
 801a35a:	a335      	add	r3, pc, #212	; (adr r3, 801a430 <__ieee754_asin+0x308>)
 801a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a360:	f7e5 ff94 	bl	800028c <__adddf3>
 801a364:	4632      	mov	r2, r6
 801a366:	463b      	mov	r3, r7
 801a368:	f7e6 f946 	bl	80005f8 <__aeabi_dmul>
 801a36c:	a332      	add	r3, pc, #200	; (adr r3, 801a438 <__ieee754_asin+0x310>)
 801a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a372:	f7e5 ff89 	bl	8000288 <__aeabi_dsub>
 801a376:	4632      	mov	r2, r6
 801a378:	463b      	mov	r3, r7
 801a37a:	f7e6 f93d 	bl	80005f8 <__aeabi_dmul>
 801a37e:	a330      	add	r3, pc, #192	; (adr r3, 801a440 <__ieee754_asin+0x318>)
 801a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a384:	f7e5 ff82 	bl	800028c <__adddf3>
 801a388:	4632      	mov	r2, r6
 801a38a:	463b      	mov	r3, r7
 801a38c:	f7e6 f934 	bl	80005f8 <__aeabi_dmul>
 801a390:	a32d      	add	r3, pc, #180	; (adr r3, 801a448 <__ieee754_asin+0x320>)
 801a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a396:	4680      	mov	r8, r0
 801a398:	4689      	mov	r9, r1
 801a39a:	4630      	mov	r0, r6
 801a39c:	4639      	mov	r1, r7
 801a39e:	f7e6 f92b 	bl	80005f8 <__aeabi_dmul>
 801a3a2:	a32b      	add	r3, pc, #172	; (adr r3, 801a450 <__ieee754_asin+0x328>)
 801a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a8:	f7e5 ff6e 	bl	8000288 <__aeabi_dsub>
 801a3ac:	4632      	mov	r2, r6
 801a3ae:	463b      	mov	r3, r7
 801a3b0:	f7e6 f922 	bl	80005f8 <__aeabi_dmul>
 801a3b4:	a328      	add	r3, pc, #160	; (adr r3, 801a458 <__ieee754_asin+0x330>)
 801a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ba:	f7e5 ff67 	bl	800028c <__adddf3>
 801a3be:	4632      	mov	r2, r6
 801a3c0:	463b      	mov	r3, r7
 801a3c2:	f7e6 f919 	bl	80005f8 <__aeabi_dmul>
 801a3c6:	a326      	add	r3, pc, #152	; (adr r3, 801a460 <__ieee754_asin+0x338>)
 801a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3cc:	f7e5 ff5c 	bl	8000288 <__aeabi_dsub>
 801a3d0:	4632      	mov	r2, r6
 801a3d2:	463b      	mov	r3, r7
 801a3d4:	f7e6 f910 	bl	80005f8 <__aeabi_dmul>
 801a3d8:	4b25      	ldr	r3, [pc, #148]	; (801a470 <__ieee754_asin+0x348>)
 801a3da:	2200      	movs	r2, #0
 801a3dc:	f7e5 ff56 	bl	800028c <__adddf3>
 801a3e0:	4602      	mov	r2, r0
 801a3e2:	460b      	mov	r3, r1
 801a3e4:	4640      	mov	r0, r8
 801a3e6:	4649      	mov	r1, r9
 801a3e8:	f7e6 fa30 	bl	800084c <__aeabi_ddiv>
 801a3ec:	4622      	mov	r2, r4
 801a3ee:	462b      	mov	r3, r5
 801a3f0:	f7e6 f902 	bl	80005f8 <__aeabi_dmul>
 801a3f4:	4602      	mov	r2, r0
 801a3f6:	460b      	mov	r3, r1
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	4629      	mov	r1, r5
 801a3fc:	e6bf      	b.n	801a17e <__ieee754_asin+0x56>
 801a3fe:	bf00      	nop
 801a400:	54442d18 	.word	0x54442d18
 801a404:	3ff921fb 	.word	0x3ff921fb
 801a408:	33145c07 	.word	0x33145c07
 801a40c:	3c91a626 	.word	0x3c91a626
 801a410:	8800759c 	.word	0x8800759c
 801a414:	7e37e43c 	.word	0x7e37e43c
 801a418:	0dfdf709 	.word	0x0dfdf709
 801a41c:	3f023de1 	.word	0x3f023de1
 801a420:	7501b288 	.word	0x7501b288
 801a424:	3f49efe0 	.word	0x3f49efe0
 801a428:	b5688f3b 	.word	0xb5688f3b
 801a42c:	3fa48228 	.word	0x3fa48228
 801a430:	0e884455 	.word	0x0e884455
 801a434:	3fc9c155 	.word	0x3fc9c155
 801a438:	03eb6f7d 	.word	0x03eb6f7d
 801a43c:	3fd4d612 	.word	0x3fd4d612
 801a440:	55555555 	.word	0x55555555
 801a444:	3fc55555 	.word	0x3fc55555
 801a448:	b12e9282 	.word	0xb12e9282
 801a44c:	3fb3b8c5 	.word	0x3fb3b8c5
 801a450:	1b8d0159 	.word	0x1b8d0159
 801a454:	3fe6066c 	.word	0x3fe6066c
 801a458:	9c598ac8 	.word	0x9c598ac8
 801a45c:	40002ae5 	.word	0x40002ae5
 801a460:	1c8a2d4b 	.word	0x1c8a2d4b
 801a464:	40033a27 	.word	0x40033a27
 801a468:	3fefffff 	.word	0x3fefffff
 801a46c:	3fdfffff 	.word	0x3fdfffff
 801a470:	3ff00000 	.word	0x3ff00000
 801a474:	3fe00000 	.word	0x3fe00000
 801a478:	3fef3332 	.word	0x3fef3332
 801a47c:	ee10 2a10 	vmov	r2, s0
 801a480:	ee10 0a10 	vmov	r0, s0
 801a484:	465b      	mov	r3, fp
 801a486:	4659      	mov	r1, fp
 801a488:	f7e5 ff00 	bl	800028c <__adddf3>
 801a48c:	4632      	mov	r2, r6
 801a48e:	463b      	mov	r3, r7
 801a490:	ec41 0b19 	vmov	d9, r0, r1
 801a494:	ec51 0b18 	vmov	r0, r1, d8
 801a498:	f7e6 f9d8 	bl	800084c <__aeabi_ddiv>
 801a49c:	4602      	mov	r2, r0
 801a49e:	460b      	mov	r3, r1
 801a4a0:	ec51 0b19 	vmov	r0, r1, d9
 801a4a4:	f7e6 f8a8 	bl	80005f8 <__aeabi_dmul>
 801a4a8:	f04f 0800 	mov.w	r8, #0
 801a4ac:	4606      	mov	r6, r0
 801a4ae:	460f      	mov	r7, r1
 801a4b0:	4642      	mov	r2, r8
 801a4b2:	465b      	mov	r3, fp
 801a4b4:	4640      	mov	r0, r8
 801a4b6:	4659      	mov	r1, fp
 801a4b8:	f7e6 f89e 	bl	80005f8 <__aeabi_dmul>
 801a4bc:	4602      	mov	r2, r0
 801a4be:	460b      	mov	r3, r1
 801a4c0:	4620      	mov	r0, r4
 801a4c2:	4629      	mov	r1, r5
 801a4c4:	f7e5 fee0 	bl	8000288 <__aeabi_dsub>
 801a4c8:	4642      	mov	r2, r8
 801a4ca:	4604      	mov	r4, r0
 801a4cc:	460d      	mov	r5, r1
 801a4ce:	465b      	mov	r3, fp
 801a4d0:	4650      	mov	r0, sl
 801a4d2:	4659      	mov	r1, fp
 801a4d4:	f7e5 feda 	bl	800028c <__adddf3>
 801a4d8:	4602      	mov	r2, r0
 801a4da:	460b      	mov	r3, r1
 801a4dc:	4620      	mov	r0, r4
 801a4de:	4629      	mov	r1, r5
 801a4e0:	f7e6 f9b4 	bl	800084c <__aeabi_ddiv>
 801a4e4:	4602      	mov	r2, r0
 801a4e6:	460b      	mov	r3, r1
 801a4e8:	f7e5 fed0 	bl	800028c <__adddf3>
 801a4ec:	4602      	mov	r2, r0
 801a4ee:	460b      	mov	r3, r1
 801a4f0:	a113      	add	r1, pc, #76	; (adr r1, 801a540 <__ieee754_asin+0x418>)
 801a4f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4f6:	f7e5 fec7 	bl	8000288 <__aeabi_dsub>
 801a4fa:	4602      	mov	r2, r0
 801a4fc:	460b      	mov	r3, r1
 801a4fe:	4630      	mov	r0, r6
 801a500:	4639      	mov	r1, r7
 801a502:	f7e5 fec1 	bl	8000288 <__aeabi_dsub>
 801a506:	4642      	mov	r2, r8
 801a508:	4604      	mov	r4, r0
 801a50a:	460d      	mov	r5, r1
 801a50c:	465b      	mov	r3, fp
 801a50e:	4640      	mov	r0, r8
 801a510:	4659      	mov	r1, fp
 801a512:	f7e5 febb 	bl	800028c <__adddf3>
 801a516:	4602      	mov	r2, r0
 801a518:	460b      	mov	r3, r1
 801a51a:	a10b      	add	r1, pc, #44	; (adr r1, 801a548 <__ieee754_asin+0x420>)
 801a51c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a520:	f7e5 feb2 	bl	8000288 <__aeabi_dsub>
 801a524:	4602      	mov	r2, r0
 801a526:	460b      	mov	r3, r1
 801a528:	4620      	mov	r0, r4
 801a52a:	4629      	mov	r1, r5
 801a52c:	f7e5 feac 	bl	8000288 <__aeabi_dsub>
 801a530:	4602      	mov	r2, r0
 801a532:	460b      	mov	r3, r1
 801a534:	a104      	add	r1, pc, #16	; (adr r1, 801a548 <__ieee754_asin+0x420>)
 801a536:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a53a:	e6df      	b.n	801a2fc <__ieee754_asin+0x1d4>
 801a53c:	f3af 8000 	nop.w
 801a540:	33145c07 	.word	0x33145c07
 801a544:	3c91a626 	.word	0x3c91a626
 801a548:	54442d18 	.word	0x54442d18
 801a54c:	3fe921fb 	.word	0x3fe921fb

0801a550 <__ieee754_atan2>:
 801a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a554:	ec57 6b11 	vmov	r6, r7, d1
 801a558:	4273      	negs	r3, r6
 801a55a:	f8df e184 	ldr.w	lr, [pc, #388]	; 801a6e0 <__ieee754_atan2+0x190>
 801a55e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a562:	4333      	orrs	r3, r6
 801a564:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a568:	4573      	cmp	r3, lr
 801a56a:	ec51 0b10 	vmov	r0, r1, d0
 801a56e:	ee11 8a10 	vmov	r8, s2
 801a572:	d80a      	bhi.n	801a58a <__ieee754_atan2+0x3a>
 801a574:	4244      	negs	r4, r0
 801a576:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a57a:	4304      	orrs	r4, r0
 801a57c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a580:	4574      	cmp	r4, lr
 801a582:	ee10 9a10 	vmov	r9, s0
 801a586:	468c      	mov	ip, r1
 801a588:	d907      	bls.n	801a59a <__ieee754_atan2+0x4a>
 801a58a:	4632      	mov	r2, r6
 801a58c:	463b      	mov	r3, r7
 801a58e:	f7e5 fe7d 	bl	800028c <__adddf3>
 801a592:	ec41 0b10 	vmov	d0, r0, r1
 801a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a59a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a59e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a5a2:	4334      	orrs	r4, r6
 801a5a4:	d103      	bne.n	801a5ae <__ieee754_atan2+0x5e>
 801a5a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5aa:	f001 b825 	b.w	801b5f8 <atan>
 801a5ae:	17bc      	asrs	r4, r7, #30
 801a5b0:	f004 0402 	and.w	r4, r4, #2
 801a5b4:	ea53 0909 	orrs.w	r9, r3, r9
 801a5b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a5bc:	d107      	bne.n	801a5ce <__ieee754_atan2+0x7e>
 801a5be:	2c02      	cmp	r4, #2
 801a5c0:	d060      	beq.n	801a684 <__ieee754_atan2+0x134>
 801a5c2:	2c03      	cmp	r4, #3
 801a5c4:	d1e5      	bne.n	801a592 <__ieee754_atan2+0x42>
 801a5c6:	a142      	add	r1, pc, #264	; (adr r1, 801a6d0 <__ieee754_atan2+0x180>)
 801a5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a5cc:	e7e1      	b.n	801a592 <__ieee754_atan2+0x42>
 801a5ce:	ea52 0808 	orrs.w	r8, r2, r8
 801a5d2:	d106      	bne.n	801a5e2 <__ieee754_atan2+0x92>
 801a5d4:	f1bc 0f00 	cmp.w	ip, #0
 801a5d8:	da5f      	bge.n	801a69a <__ieee754_atan2+0x14a>
 801a5da:	a13f      	add	r1, pc, #252	; (adr r1, 801a6d8 <__ieee754_atan2+0x188>)
 801a5dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a5e0:	e7d7      	b.n	801a592 <__ieee754_atan2+0x42>
 801a5e2:	4572      	cmp	r2, lr
 801a5e4:	d10f      	bne.n	801a606 <__ieee754_atan2+0xb6>
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	f104 34ff 	add.w	r4, r4, #4294967295
 801a5ec:	d107      	bne.n	801a5fe <__ieee754_atan2+0xae>
 801a5ee:	2c02      	cmp	r4, #2
 801a5f0:	d84c      	bhi.n	801a68c <__ieee754_atan2+0x13c>
 801a5f2:	4b35      	ldr	r3, [pc, #212]	; (801a6c8 <__ieee754_atan2+0x178>)
 801a5f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a5f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 801a5fc:	e7c9      	b.n	801a592 <__ieee754_atan2+0x42>
 801a5fe:	2c02      	cmp	r4, #2
 801a600:	d848      	bhi.n	801a694 <__ieee754_atan2+0x144>
 801a602:	4b32      	ldr	r3, [pc, #200]	; (801a6cc <__ieee754_atan2+0x17c>)
 801a604:	e7f6      	b.n	801a5f4 <__ieee754_atan2+0xa4>
 801a606:	4573      	cmp	r3, lr
 801a608:	d0e4      	beq.n	801a5d4 <__ieee754_atan2+0x84>
 801a60a:	1a9b      	subs	r3, r3, r2
 801a60c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801a610:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a614:	da1e      	bge.n	801a654 <__ieee754_atan2+0x104>
 801a616:	2f00      	cmp	r7, #0
 801a618:	da01      	bge.n	801a61e <__ieee754_atan2+0xce>
 801a61a:	323c      	adds	r2, #60	; 0x3c
 801a61c:	db1e      	blt.n	801a65c <__ieee754_atan2+0x10c>
 801a61e:	4632      	mov	r2, r6
 801a620:	463b      	mov	r3, r7
 801a622:	f7e6 f913 	bl	800084c <__aeabi_ddiv>
 801a626:	ec41 0b10 	vmov	d0, r0, r1
 801a62a:	f001 f985 	bl	801b938 <fabs>
 801a62e:	f000 ffe3 	bl	801b5f8 <atan>
 801a632:	ec51 0b10 	vmov	r0, r1, d0
 801a636:	2c01      	cmp	r4, #1
 801a638:	d013      	beq.n	801a662 <__ieee754_atan2+0x112>
 801a63a:	2c02      	cmp	r4, #2
 801a63c:	d015      	beq.n	801a66a <__ieee754_atan2+0x11a>
 801a63e:	2c00      	cmp	r4, #0
 801a640:	d0a7      	beq.n	801a592 <__ieee754_atan2+0x42>
 801a642:	a319      	add	r3, pc, #100	; (adr r3, 801a6a8 <__ieee754_atan2+0x158>)
 801a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a648:	f7e5 fe1e 	bl	8000288 <__aeabi_dsub>
 801a64c:	a318      	add	r3, pc, #96	; (adr r3, 801a6b0 <__ieee754_atan2+0x160>)
 801a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a652:	e014      	b.n	801a67e <__ieee754_atan2+0x12e>
 801a654:	a118      	add	r1, pc, #96	; (adr r1, 801a6b8 <__ieee754_atan2+0x168>)
 801a656:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a65a:	e7ec      	b.n	801a636 <__ieee754_atan2+0xe6>
 801a65c:	2000      	movs	r0, #0
 801a65e:	2100      	movs	r1, #0
 801a660:	e7e9      	b.n	801a636 <__ieee754_atan2+0xe6>
 801a662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a666:	4619      	mov	r1, r3
 801a668:	e793      	b.n	801a592 <__ieee754_atan2+0x42>
 801a66a:	a30f      	add	r3, pc, #60	; (adr r3, 801a6a8 <__ieee754_atan2+0x158>)
 801a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a670:	f7e5 fe0a 	bl	8000288 <__aeabi_dsub>
 801a674:	4602      	mov	r2, r0
 801a676:	460b      	mov	r3, r1
 801a678:	a10d      	add	r1, pc, #52	; (adr r1, 801a6b0 <__ieee754_atan2+0x160>)
 801a67a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a67e:	f7e5 fe03 	bl	8000288 <__aeabi_dsub>
 801a682:	e786      	b.n	801a592 <__ieee754_atan2+0x42>
 801a684:	a10a      	add	r1, pc, #40	; (adr r1, 801a6b0 <__ieee754_atan2+0x160>)
 801a686:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a68a:	e782      	b.n	801a592 <__ieee754_atan2+0x42>
 801a68c:	a10c      	add	r1, pc, #48	; (adr r1, 801a6c0 <__ieee754_atan2+0x170>)
 801a68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a692:	e77e      	b.n	801a592 <__ieee754_atan2+0x42>
 801a694:	2000      	movs	r0, #0
 801a696:	2100      	movs	r1, #0
 801a698:	e77b      	b.n	801a592 <__ieee754_atan2+0x42>
 801a69a:	a107      	add	r1, pc, #28	; (adr r1, 801a6b8 <__ieee754_atan2+0x168>)
 801a69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6a0:	e777      	b.n	801a592 <__ieee754_atan2+0x42>
 801a6a2:	bf00      	nop
 801a6a4:	f3af 8000 	nop.w
 801a6a8:	33145c07 	.word	0x33145c07
 801a6ac:	3ca1a626 	.word	0x3ca1a626
 801a6b0:	54442d18 	.word	0x54442d18
 801a6b4:	400921fb 	.word	0x400921fb
 801a6b8:	54442d18 	.word	0x54442d18
 801a6bc:	3ff921fb 	.word	0x3ff921fb
 801a6c0:	54442d18 	.word	0x54442d18
 801a6c4:	3fe921fb 	.word	0x3fe921fb
 801a6c8:	0801c2d8 	.word	0x0801c2d8
 801a6cc:	0801c2f0 	.word	0x0801c2f0
 801a6d0:	54442d18 	.word	0x54442d18
 801a6d4:	c00921fb 	.word	0xc00921fb
 801a6d8:	54442d18 	.word	0x54442d18
 801a6dc:	bff921fb 	.word	0xbff921fb
 801a6e0:	7ff00000 	.word	0x7ff00000
 801a6e4:	00000000 	.word	0x00000000

0801a6e8 <__ieee754_rem_pio2>:
 801a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ec:	ed2d 8b02 	vpush	{d8}
 801a6f0:	ec55 4b10 	vmov	r4, r5, d0
 801a6f4:	4bca      	ldr	r3, [pc, #808]	; (801aa20 <__ieee754_rem_pio2+0x338>)
 801a6f6:	b08b      	sub	sp, #44	; 0x2c
 801a6f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a6fc:	4598      	cmp	r8, r3
 801a6fe:	4682      	mov	sl, r0
 801a700:	9502      	str	r5, [sp, #8]
 801a702:	dc08      	bgt.n	801a716 <__ieee754_rem_pio2+0x2e>
 801a704:	2200      	movs	r2, #0
 801a706:	2300      	movs	r3, #0
 801a708:	ed80 0b00 	vstr	d0, [r0]
 801a70c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a710:	f04f 0b00 	mov.w	fp, #0
 801a714:	e028      	b.n	801a768 <__ieee754_rem_pio2+0x80>
 801a716:	4bc3      	ldr	r3, [pc, #780]	; (801aa24 <__ieee754_rem_pio2+0x33c>)
 801a718:	4598      	cmp	r8, r3
 801a71a:	dc78      	bgt.n	801a80e <__ieee754_rem_pio2+0x126>
 801a71c:	9b02      	ldr	r3, [sp, #8]
 801a71e:	4ec2      	ldr	r6, [pc, #776]	; (801aa28 <__ieee754_rem_pio2+0x340>)
 801a720:	2b00      	cmp	r3, #0
 801a722:	ee10 0a10 	vmov	r0, s0
 801a726:	a3b0      	add	r3, pc, #704	; (adr r3, 801a9e8 <__ieee754_rem_pio2+0x300>)
 801a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72c:	4629      	mov	r1, r5
 801a72e:	dd39      	ble.n	801a7a4 <__ieee754_rem_pio2+0xbc>
 801a730:	f7e5 fdaa 	bl	8000288 <__aeabi_dsub>
 801a734:	45b0      	cmp	r8, r6
 801a736:	4604      	mov	r4, r0
 801a738:	460d      	mov	r5, r1
 801a73a:	d01b      	beq.n	801a774 <__ieee754_rem_pio2+0x8c>
 801a73c:	a3ac      	add	r3, pc, #688	; (adr r3, 801a9f0 <__ieee754_rem_pio2+0x308>)
 801a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a742:	f7e5 fda1 	bl	8000288 <__aeabi_dsub>
 801a746:	4602      	mov	r2, r0
 801a748:	460b      	mov	r3, r1
 801a74a:	e9ca 2300 	strd	r2, r3, [sl]
 801a74e:	4620      	mov	r0, r4
 801a750:	4629      	mov	r1, r5
 801a752:	f7e5 fd99 	bl	8000288 <__aeabi_dsub>
 801a756:	a3a6      	add	r3, pc, #664	; (adr r3, 801a9f0 <__ieee754_rem_pio2+0x308>)
 801a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a75c:	f7e5 fd94 	bl	8000288 <__aeabi_dsub>
 801a760:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a764:	f04f 0b01 	mov.w	fp, #1
 801a768:	4658      	mov	r0, fp
 801a76a:	b00b      	add	sp, #44	; 0x2c
 801a76c:	ecbd 8b02 	vpop	{d8}
 801a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a774:	a3a0      	add	r3, pc, #640	; (adr r3, 801a9f8 <__ieee754_rem_pio2+0x310>)
 801a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a77a:	f7e5 fd85 	bl	8000288 <__aeabi_dsub>
 801a77e:	a3a0      	add	r3, pc, #640	; (adr r3, 801aa00 <__ieee754_rem_pio2+0x318>)
 801a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a784:	4604      	mov	r4, r0
 801a786:	460d      	mov	r5, r1
 801a788:	f7e5 fd7e 	bl	8000288 <__aeabi_dsub>
 801a78c:	4602      	mov	r2, r0
 801a78e:	460b      	mov	r3, r1
 801a790:	e9ca 2300 	strd	r2, r3, [sl]
 801a794:	4620      	mov	r0, r4
 801a796:	4629      	mov	r1, r5
 801a798:	f7e5 fd76 	bl	8000288 <__aeabi_dsub>
 801a79c:	a398      	add	r3, pc, #608	; (adr r3, 801aa00 <__ieee754_rem_pio2+0x318>)
 801a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a2:	e7db      	b.n	801a75c <__ieee754_rem_pio2+0x74>
 801a7a4:	f7e5 fd72 	bl	800028c <__adddf3>
 801a7a8:	45b0      	cmp	r8, r6
 801a7aa:	4604      	mov	r4, r0
 801a7ac:	460d      	mov	r5, r1
 801a7ae:	d016      	beq.n	801a7de <__ieee754_rem_pio2+0xf6>
 801a7b0:	a38f      	add	r3, pc, #572	; (adr r3, 801a9f0 <__ieee754_rem_pio2+0x308>)
 801a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7b6:	f7e5 fd69 	bl	800028c <__adddf3>
 801a7ba:	4602      	mov	r2, r0
 801a7bc:	460b      	mov	r3, r1
 801a7be:	e9ca 2300 	strd	r2, r3, [sl]
 801a7c2:	4620      	mov	r0, r4
 801a7c4:	4629      	mov	r1, r5
 801a7c6:	f7e5 fd5f 	bl	8000288 <__aeabi_dsub>
 801a7ca:	a389      	add	r3, pc, #548	; (adr r3, 801a9f0 <__ieee754_rem_pio2+0x308>)
 801a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d0:	f7e5 fd5c 	bl	800028c <__adddf3>
 801a7d4:	f04f 3bff 	mov.w	fp, #4294967295
 801a7d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a7dc:	e7c4      	b.n	801a768 <__ieee754_rem_pio2+0x80>
 801a7de:	a386      	add	r3, pc, #536	; (adr r3, 801a9f8 <__ieee754_rem_pio2+0x310>)
 801a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7e4:	f7e5 fd52 	bl	800028c <__adddf3>
 801a7e8:	a385      	add	r3, pc, #532	; (adr r3, 801aa00 <__ieee754_rem_pio2+0x318>)
 801a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ee:	4604      	mov	r4, r0
 801a7f0:	460d      	mov	r5, r1
 801a7f2:	f7e5 fd4b 	bl	800028c <__adddf3>
 801a7f6:	4602      	mov	r2, r0
 801a7f8:	460b      	mov	r3, r1
 801a7fa:	e9ca 2300 	strd	r2, r3, [sl]
 801a7fe:	4620      	mov	r0, r4
 801a800:	4629      	mov	r1, r5
 801a802:	f7e5 fd41 	bl	8000288 <__aeabi_dsub>
 801a806:	a37e      	add	r3, pc, #504	; (adr r3, 801aa00 <__ieee754_rem_pio2+0x318>)
 801a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80c:	e7e0      	b.n	801a7d0 <__ieee754_rem_pio2+0xe8>
 801a80e:	4b87      	ldr	r3, [pc, #540]	; (801aa2c <__ieee754_rem_pio2+0x344>)
 801a810:	4598      	cmp	r8, r3
 801a812:	f300 80d9 	bgt.w	801a9c8 <__ieee754_rem_pio2+0x2e0>
 801a816:	f001 f88f 	bl	801b938 <fabs>
 801a81a:	ec55 4b10 	vmov	r4, r5, d0
 801a81e:	ee10 0a10 	vmov	r0, s0
 801a822:	a379      	add	r3, pc, #484	; (adr r3, 801aa08 <__ieee754_rem_pio2+0x320>)
 801a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a828:	4629      	mov	r1, r5
 801a82a:	f7e5 fee5 	bl	80005f8 <__aeabi_dmul>
 801a82e:	4b80      	ldr	r3, [pc, #512]	; (801aa30 <__ieee754_rem_pio2+0x348>)
 801a830:	2200      	movs	r2, #0
 801a832:	f7e5 fd2b 	bl	800028c <__adddf3>
 801a836:	f7e6 f98f 	bl	8000b58 <__aeabi_d2iz>
 801a83a:	4683      	mov	fp, r0
 801a83c:	f7e5 fe72 	bl	8000524 <__aeabi_i2d>
 801a840:	4602      	mov	r2, r0
 801a842:	460b      	mov	r3, r1
 801a844:	ec43 2b18 	vmov	d8, r2, r3
 801a848:	a367      	add	r3, pc, #412	; (adr r3, 801a9e8 <__ieee754_rem_pio2+0x300>)
 801a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a84e:	f7e5 fed3 	bl	80005f8 <__aeabi_dmul>
 801a852:	4602      	mov	r2, r0
 801a854:	460b      	mov	r3, r1
 801a856:	4620      	mov	r0, r4
 801a858:	4629      	mov	r1, r5
 801a85a:	f7e5 fd15 	bl	8000288 <__aeabi_dsub>
 801a85e:	a364      	add	r3, pc, #400	; (adr r3, 801a9f0 <__ieee754_rem_pio2+0x308>)
 801a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a864:	4606      	mov	r6, r0
 801a866:	460f      	mov	r7, r1
 801a868:	ec51 0b18 	vmov	r0, r1, d8
 801a86c:	f7e5 fec4 	bl	80005f8 <__aeabi_dmul>
 801a870:	f1bb 0f1f 	cmp.w	fp, #31
 801a874:	4604      	mov	r4, r0
 801a876:	460d      	mov	r5, r1
 801a878:	dc0d      	bgt.n	801a896 <__ieee754_rem_pio2+0x1ae>
 801a87a:	4b6e      	ldr	r3, [pc, #440]	; (801aa34 <__ieee754_rem_pio2+0x34c>)
 801a87c:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a884:	4543      	cmp	r3, r8
 801a886:	d006      	beq.n	801a896 <__ieee754_rem_pio2+0x1ae>
 801a888:	4622      	mov	r2, r4
 801a88a:	462b      	mov	r3, r5
 801a88c:	4630      	mov	r0, r6
 801a88e:	4639      	mov	r1, r7
 801a890:	f7e5 fcfa 	bl	8000288 <__aeabi_dsub>
 801a894:	e00f      	b.n	801a8b6 <__ieee754_rem_pio2+0x1ce>
 801a896:	462b      	mov	r3, r5
 801a898:	4622      	mov	r2, r4
 801a89a:	4630      	mov	r0, r6
 801a89c:	4639      	mov	r1, r7
 801a89e:	f7e5 fcf3 	bl	8000288 <__aeabi_dsub>
 801a8a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a8a6:	9303      	str	r3, [sp, #12]
 801a8a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a8ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801a8b0:	f1b8 0f10 	cmp.w	r8, #16
 801a8b4:	dc02      	bgt.n	801a8bc <__ieee754_rem_pio2+0x1d4>
 801a8b6:	e9ca 0100 	strd	r0, r1, [sl]
 801a8ba:	e039      	b.n	801a930 <__ieee754_rem_pio2+0x248>
 801a8bc:	a34e      	add	r3, pc, #312	; (adr r3, 801a9f8 <__ieee754_rem_pio2+0x310>)
 801a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c2:	ec51 0b18 	vmov	r0, r1, d8
 801a8c6:	f7e5 fe97 	bl	80005f8 <__aeabi_dmul>
 801a8ca:	4604      	mov	r4, r0
 801a8cc:	460d      	mov	r5, r1
 801a8ce:	4602      	mov	r2, r0
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	4630      	mov	r0, r6
 801a8d4:	4639      	mov	r1, r7
 801a8d6:	f7e5 fcd7 	bl	8000288 <__aeabi_dsub>
 801a8da:	4602      	mov	r2, r0
 801a8dc:	460b      	mov	r3, r1
 801a8de:	4680      	mov	r8, r0
 801a8e0:	4689      	mov	r9, r1
 801a8e2:	4630      	mov	r0, r6
 801a8e4:	4639      	mov	r1, r7
 801a8e6:	f7e5 fccf 	bl	8000288 <__aeabi_dsub>
 801a8ea:	4622      	mov	r2, r4
 801a8ec:	462b      	mov	r3, r5
 801a8ee:	f7e5 fccb 	bl	8000288 <__aeabi_dsub>
 801a8f2:	a343      	add	r3, pc, #268	; (adr r3, 801aa00 <__ieee754_rem_pio2+0x318>)
 801a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8f8:	4604      	mov	r4, r0
 801a8fa:	460d      	mov	r5, r1
 801a8fc:	ec51 0b18 	vmov	r0, r1, d8
 801a900:	f7e5 fe7a 	bl	80005f8 <__aeabi_dmul>
 801a904:	4622      	mov	r2, r4
 801a906:	462b      	mov	r3, r5
 801a908:	f7e5 fcbe 	bl	8000288 <__aeabi_dsub>
 801a90c:	4602      	mov	r2, r0
 801a90e:	460b      	mov	r3, r1
 801a910:	4604      	mov	r4, r0
 801a912:	460d      	mov	r5, r1
 801a914:	4640      	mov	r0, r8
 801a916:	4649      	mov	r1, r9
 801a918:	f7e5 fcb6 	bl	8000288 <__aeabi_dsub>
 801a91c:	9a03      	ldr	r2, [sp, #12]
 801a91e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	2b31      	cmp	r3, #49	; 0x31
 801a926:	dc24      	bgt.n	801a972 <__ieee754_rem_pio2+0x28a>
 801a928:	e9ca 0100 	strd	r0, r1, [sl]
 801a92c:	4646      	mov	r6, r8
 801a92e:	464f      	mov	r7, r9
 801a930:	e9da 8900 	ldrd	r8, r9, [sl]
 801a934:	4630      	mov	r0, r6
 801a936:	4642      	mov	r2, r8
 801a938:	464b      	mov	r3, r9
 801a93a:	4639      	mov	r1, r7
 801a93c:	f7e5 fca4 	bl	8000288 <__aeabi_dsub>
 801a940:	462b      	mov	r3, r5
 801a942:	4622      	mov	r2, r4
 801a944:	f7e5 fca0 	bl	8000288 <__aeabi_dsub>
 801a948:	9b02      	ldr	r3, [sp, #8]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a950:	f6bf af0a 	bge.w	801a768 <__ieee754_rem_pio2+0x80>
 801a954:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a958:	f8ca 3004 	str.w	r3, [sl, #4]
 801a95c:	f8ca 8000 	str.w	r8, [sl]
 801a960:	f8ca 0008 	str.w	r0, [sl, #8]
 801a964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a968:	f8ca 300c 	str.w	r3, [sl, #12]
 801a96c:	f1cb 0b00 	rsb	fp, fp, #0
 801a970:	e6fa      	b.n	801a768 <__ieee754_rem_pio2+0x80>
 801a972:	a327      	add	r3, pc, #156	; (adr r3, 801aa10 <__ieee754_rem_pio2+0x328>)
 801a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a978:	ec51 0b18 	vmov	r0, r1, d8
 801a97c:	f7e5 fe3c 	bl	80005f8 <__aeabi_dmul>
 801a980:	4604      	mov	r4, r0
 801a982:	460d      	mov	r5, r1
 801a984:	4602      	mov	r2, r0
 801a986:	460b      	mov	r3, r1
 801a988:	4640      	mov	r0, r8
 801a98a:	4649      	mov	r1, r9
 801a98c:	f7e5 fc7c 	bl	8000288 <__aeabi_dsub>
 801a990:	4602      	mov	r2, r0
 801a992:	460b      	mov	r3, r1
 801a994:	4606      	mov	r6, r0
 801a996:	460f      	mov	r7, r1
 801a998:	4640      	mov	r0, r8
 801a99a:	4649      	mov	r1, r9
 801a99c:	f7e5 fc74 	bl	8000288 <__aeabi_dsub>
 801a9a0:	4622      	mov	r2, r4
 801a9a2:	462b      	mov	r3, r5
 801a9a4:	f7e5 fc70 	bl	8000288 <__aeabi_dsub>
 801a9a8:	a31b      	add	r3, pc, #108	; (adr r3, 801aa18 <__ieee754_rem_pio2+0x330>)
 801a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ae:	4604      	mov	r4, r0
 801a9b0:	460d      	mov	r5, r1
 801a9b2:	ec51 0b18 	vmov	r0, r1, d8
 801a9b6:	f7e5 fe1f 	bl	80005f8 <__aeabi_dmul>
 801a9ba:	4622      	mov	r2, r4
 801a9bc:	462b      	mov	r3, r5
 801a9be:	f7e5 fc63 	bl	8000288 <__aeabi_dsub>
 801a9c2:	4604      	mov	r4, r0
 801a9c4:	460d      	mov	r5, r1
 801a9c6:	e75f      	b.n	801a888 <__ieee754_rem_pio2+0x1a0>
 801a9c8:	4b1b      	ldr	r3, [pc, #108]	; (801aa38 <__ieee754_rem_pio2+0x350>)
 801a9ca:	4598      	cmp	r8, r3
 801a9cc:	dd36      	ble.n	801aa3c <__ieee754_rem_pio2+0x354>
 801a9ce:	ee10 2a10 	vmov	r2, s0
 801a9d2:	462b      	mov	r3, r5
 801a9d4:	4620      	mov	r0, r4
 801a9d6:	4629      	mov	r1, r5
 801a9d8:	f7e5 fc56 	bl	8000288 <__aeabi_dsub>
 801a9dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a9e0:	e9ca 0100 	strd	r0, r1, [sl]
 801a9e4:	e694      	b.n	801a710 <__ieee754_rem_pio2+0x28>
 801a9e6:	bf00      	nop
 801a9e8:	54400000 	.word	0x54400000
 801a9ec:	3ff921fb 	.word	0x3ff921fb
 801a9f0:	1a626331 	.word	0x1a626331
 801a9f4:	3dd0b461 	.word	0x3dd0b461
 801a9f8:	1a600000 	.word	0x1a600000
 801a9fc:	3dd0b461 	.word	0x3dd0b461
 801aa00:	2e037073 	.word	0x2e037073
 801aa04:	3ba3198a 	.word	0x3ba3198a
 801aa08:	6dc9c883 	.word	0x6dc9c883
 801aa0c:	3fe45f30 	.word	0x3fe45f30
 801aa10:	2e000000 	.word	0x2e000000
 801aa14:	3ba3198a 	.word	0x3ba3198a
 801aa18:	252049c1 	.word	0x252049c1
 801aa1c:	397b839a 	.word	0x397b839a
 801aa20:	3fe921fb 	.word	0x3fe921fb
 801aa24:	4002d97b 	.word	0x4002d97b
 801aa28:	3ff921fb 	.word	0x3ff921fb
 801aa2c:	413921fb 	.word	0x413921fb
 801aa30:	3fe00000 	.word	0x3fe00000
 801aa34:	0801c308 	.word	0x0801c308
 801aa38:	7fefffff 	.word	0x7fefffff
 801aa3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 801aa40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801aa44:	ee10 0a10 	vmov	r0, s0
 801aa48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801aa4c:	ee10 6a10 	vmov	r6, s0
 801aa50:	460f      	mov	r7, r1
 801aa52:	f7e6 f881 	bl	8000b58 <__aeabi_d2iz>
 801aa56:	f7e5 fd65 	bl	8000524 <__aeabi_i2d>
 801aa5a:	4602      	mov	r2, r0
 801aa5c:	460b      	mov	r3, r1
 801aa5e:	4630      	mov	r0, r6
 801aa60:	4639      	mov	r1, r7
 801aa62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801aa66:	f7e5 fc0f 	bl	8000288 <__aeabi_dsub>
 801aa6a:	4b22      	ldr	r3, [pc, #136]	; (801aaf4 <__ieee754_rem_pio2+0x40c>)
 801aa6c:	2200      	movs	r2, #0
 801aa6e:	f7e5 fdc3 	bl	80005f8 <__aeabi_dmul>
 801aa72:	460f      	mov	r7, r1
 801aa74:	4606      	mov	r6, r0
 801aa76:	f7e6 f86f 	bl	8000b58 <__aeabi_d2iz>
 801aa7a:	f7e5 fd53 	bl	8000524 <__aeabi_i2d>
 801aa7e:	4602      	mov	r2, r0
 801aa80:	460b      	mov	r3, r1
 801aa82:	4630      	mov	r0, r6
 801aa84:	4639      	mov	r1, r7
 801aa86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801aa8a:	f7e5 fbfd 	bl	8000288 <__aeabi_dsub>
 801aa8e:	4b19      	ldr	r3, [pc, #100]	; (801aaf4 <__ieee754_rem_pio2+0x40c>)
 801aa90:	2200      	movs	r2, #0
 801aa92:	f7e5 fdb1 	bl	80005f8 <__aeabi_dmul>
 801aa96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aa9a:	ad04      	add	r5, sp, #16
 801aa9c:	f04f 0803 	mov.w	r8, #3
 801aaa0:	46a9      	mov	r9, r5
 801aaa2:	2600      	movs	r6, #0
 801aaa4:	2700      	movs	r7, #0
 801aaa6:	4632      	mov	r2, r6
 801aaa8:	463b      	mov	r3, r7
 801aaaa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801aaae:	46c3      	mov	fp, r8
 801aab0:	3d08      	subs	r5, #8
 801aab2:	f108 38ff 	add.w	r8, r8, #4294967295
 801aab6:	f7e6 f807 	bl	8000ac8 <__aeabi_dcmpeq>
 801aaba:	2800      	cmp	r0, #0
 801aabc:	d1f3      	bne.n	801aaa6 <__ieee754_rem_pio2+0x3be>
 801aabe:	4b0e      	ldr	r3, [pc, #56]	; (801aaf8 <__ieee754_rem_pio2+0x410>)
 801aac0:	9301      	str	r3, [sp, #4]
 801aac2:	2302      	movs	r3, #2
 801aac4:	9300      	str	r3, [sp, #0]
 801aac6:	4622      	mov	r2, r4
 801aac8:	465b      	mov	r3, fp
 801aaca:	4651      	mov	r1, sl
 801aacc:	4648      	mov	r0, r9
 801aace:	f000 f993 	bl	801adf8 <__kernel_rem_pio2>
 801aad2:	9b02      	ldr	r3, [sp, #8]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	4683      	mov	fp, r0
 801aad8:	f6bf ae46 	bge.w	801a768 <__ieee754_rem_pio2+0x80>
 801aadc:	f8da 3004 	ldr.w	r3, [sl, #4]
 801aae0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801aae4:	f8ca 3004 	str.w	r3, [sl, #4]
 801aae8:	f8da 300c 	ldr.w	r3, [sl, #12]
 801aaec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801aaf0:	e73a      	b.n	801a968 <__ieee754_rem_pio2+0x280>
 801aaf2:	bf00      	nop
 801aaf4:	41700000 	.word	0x41700000
 801aaf8:	0801c388 	.word	0x0801c388

0801aafc <__ieee754_sqrt>:
 801aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab00:	ec55 4b10 	vmov	r4, r5, d0
 801ab04:	4e56      	ldr	r6, [pc, #344]	; (801ac60 <__ieee754_sqrt+0x164>)
 801ab06:	43ae      	bics	r6, r5
 801ab08:	ee10 0a10 	vmov	r0, s0
 801ab0c:	ee10 3a10 	vmov	r3, s0
 801ab10:	4629      	mov	r1, r5
 801ab12:	462a      	mov	r2, r5
 801ab14:	d110      	bne.n	801ab38 <__ieee754_sqrt+0x3c>
 801ab16:	ee10 2a10 	vmov	r2, s0
 801ab1a:	462b      	mov	r3, r5
 801ab1c:	f7e5 fd6c 	bl	80005f8 <__aeabi_dmul>
 801ab20:	4602      	mov	r2, r0
 801ab22:	460b      	mov	r3, r1
 801ab24:	4620      	mov	r0, r4
 801ab26:	4629      	mov	r1, r5
 801ab28:	f7e5 fbb0 	bl	800028c <__adddf3>
 801ab2c:	4604      	mov	r4, r0
 801ab2e:	460d      	mov	r5, r1
 801ab30:	ec45 4b10 	vmov	d0, r4, r5
 801ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab38:	2d00      	cmp	r5, #0
 801ab3a:	dc10      	bgt.n	801ab5e <__ieee754_sqrt+0x62>
 801ab3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ab40:	4330      	orrs	r0, r6
 801ab42:	d0f5      	beq.n	801ab30 <__ieee754_sqrt+0x34>
 801ab44:	b15d      	cbz	r5, 801ab5e <__ieee754_sqrt+0x62>
 801ab46:	ee10 2a10 	vmov	r2, s0
 801ab4a:	462b      	mov	r3, r5
 801ab4c:	ee10 0a10 	vmov	r0, s0
 801ab50:	f7e5 fb9a 	bl	8000288 <__aeabi_dsub>
 801ab54:	4602      	mov	r2, r0
 801ab56:	460b      	mov	r3, r1
 801ab58:	f7e5 fe78 	bl	800084c <__aeabi_ddiv>
 801ab5c:	e7e6      	b.n	801ab2c <__ieee754_sqrt+0x30>
 801ab5e:	1509      	asrs	r1, r1, #20
 801ab60:	d076      	beq.n	801ac50 <__ieee754_sqrt+0x154>
 801ab62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ab66:	07ce      	lsls	r6, r1, #31
 801ab68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801ab6c:	bf5e      	ittt	pl
 801ab6e:	0fda      	lsrpl	r2, r3, #31
 801ab70:	005b      	lslpl	r3, r3, #1
 801ab72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801ab76:	0fda      	lsrs	r2, r3, #31
 801ab78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801ab7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ab80:	2000      	movs	r0, #0
 801ab82:	106d      	asrs	r5, r5, #1
 801ab84:	005b      	lsls	r3, r3, #1
 801ab86:	f04f 0e16 	mov.w	lr, #22
 801ab8a:	4684      	mov	ip, r0
 801ab8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ab90:	eb0c 0401 	add.w	r4, ip, r1
 801ab94:	4294      	cmp	r4, r2
 801ab96:	bfde      	ittt	le
 801ab98:	1b12      	suble	r2, r2, r4
 801ab9a:	eb04 0c01 	addle.w	ip, r4, r1
 801ab9e:	1840      	addle	r0, r0, r1
 801aba0:	0052      	lsls	r2, r2, #1
 801aba2:	f1be 0e01 	subs.w	lr, lr, #1
 801aba6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801abaa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801abae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801abb2:	d1ed      	bne.n	801ab90 <__ieee754_sqrt+0x94>
 801abb4:	4671      	mov	r1, lr
 801abb6:	2720      	movs	r7, #32
 801abb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801abbc:	4562      	cmp	r2, ip
 801abbe:	eb04 060e 	add.w	r6, r4, lr
 801abc2:	dc02      	bgt.n	801abca <__ieee754_sqrt+0xce>
 801abc4:	d113      	bne.n	801abee <__ieee754_sqrt+0xf2>
 801abc6:	429e      	cmp	r6, r3
 801abc8:	d811      	bhi.n	801abee <__ieee754_sqrt+0xf2>
 801abca:	2e00      	cmp	r6, #0
 801abcc:	eb06 0e04 	add.w	lr, r6, r4
 801abd0:	da43      	bge.n	801ac5a <__ieee754_sqrt+0x15e>
 801abd2:	f1be 0f00 	cmp.w	lr, #0
 801abd6:	db40      	blt.n	801ac5a <__ieee754_sqrt+0x15e>
 801abd8:	f10c 0801 	add.w	r8, ip, #1
 801abdc:	eba2 020c 	sub.w	r2, r2, ip
 801abe0:	429e      	cmp	r6, r3
 801abe2:	bf88      	it	hi
 801abe4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801abe8:	1b9b      	subs	r3, r3, r6
 801abea:	4421      	add	r1, r4
 801abec:	46c4      	mov	ip, r8
 801abee:	0052      	lsls	r2, r2, #1
 801abf0:	3f01      	subs	r7, #1
 801abf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801abf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801abfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801abfe:	d1dd      	bne.n	801abbc <__ieee754_sqrt+0xc0>
 801ac00:	4313      	orrs	r3, r2
 801ac02:	d006      	beq.n	801ac12 <__ieee754_sqrt+0x116>
 801ac04:	1c4c      	adds	r4, r1, #1
 801ac06:	bf13      	iteet	ne
 801ac08:	3101      	addne	r1, #1
 801ac0a:	3001      	addeq	r0, #1
 801ac0c:	4639      	moveq	r1, r7
 801ac0e:	f021 0101 	bicne.w	r1, r1, #1
 801ac12:	1043      	asrs	r3, r0, #1
 801ac14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ac18:	0849      	lsrs	r1, r1, #1
 801ac1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ac1e:	07c2      	lsls	r2, r0, #31
 801ac20:	bf48      	it	mi
 801ac22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801ac26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801ac2a:	460c      	mov	r4, r1
 801ac2c:	463d      	mov	r5, r7
 801ac2e:	e77f      	b.n	801ab30 <__ieee754_sqrt+0x34>
 801ac30:	0ada      	lsrs	r2, r3, #11
 801ac32:	3815      	subs	r0, #21
 801ac34:	055b      	lsls	r3, r3, #21
 801ac36:	2a00      	cmp	r2, #0
 801ac38:	d0fa      	beq.n	801ac30 <__ieee754_sqrt+0x134>
 801ac3a:	02d7      	lsls	r7, r2, #11
 801ac3c:	d50a      	bpl.n	801ac54 <__ieee754_sqrt+0x158>
 801ac3e:	f1c1 0420 	rsb	r4, r1, #32
 801ac42:	fa23 f404 	lsr.w	r4, r3, r4
 801ac46:	1e4d      	subs	r5, r1, #1
 801ac48:	408b      	lsls	r3, r1
 801ac4a:	4322      	orrs	r2, r4
 801ac4c:	1b41      	subs	r1, r0, r5
 801ac4e:	e788      	b.n	801ab62 <__ieee754_sqrt+0x66>
 801ac50:	4608      	mov	r0, r1
 801ac52:	e7f0      	b.n	801ac36 <__ieee754_sqrt+0x13a>
 801ac54:	0052      	lsls	r2, r2, #1
 801ac56:	3101      	adds	r1, #1
 801ac58:	e7ef      	b.n	801ac3a <__ieee754_sqrt+0x13e>
 801ac5a:	46e0      	mov	r8, ip
 801ac5c:	e7be      	b.n	801abdc <__ieee754_sqrt+0xe0>
 801ac5e:	bf00      	nop
 801ac60:	7ff00000 	.word	0x7ff00000
 801ac64:	00000000 	.word	0x00000000

0801ac68 <__kernel_cos>:
 801ac68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6c:	ec57 6b10 	vmov	r6, r7, d0
 801ac70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801ac74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801ac78:	ed8d 1b00 	vstr	d1, [sp]
 801ac7c:	da07      	bge.n	801ac8e <__kernel_cos+0x26>
 801ac7e:	ee10 0a10 	vmov	r0, s0
 801ac82:	4639      	mov	r1, r7
 801ac84:	f7e5 ff68 	bl	8000b58 <__aeabi_d2iz>
 801ac88:	2800      	cmp	r0, #0
 801ac8a:	f000 8088 	beq.w	801ad9e <__kernel_cos+0x136>
 801ac8e:	4632      	mov	r2, r6
 801ac90:	463b      	mov	r3, r7
 801ac92:	4630      	mov	r0, r6
 801ac94:	4639      	mov	r1, r7
 801ac96:	f7e5 fcaf 	bl	80005f8 <__aeabi_dmul>
 801ac9a:	4b51      	ldr	r3, [pc, #324]	; (801ade0 <__kernel_cos+0x178>)
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	4604      	mov	r4, r0
 801aca0:	460d      	mov	r5, r1
 801aca2:	f7e5 fca9 	bl	80005f8 <__aeabi_dmul>
 801aca6:	a340      	add	r3, pc, #256	; (adr r3, 801ada8 <__kernel_cos+0x140>)
 801aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acac:	4682      	mov	sl, r0
 801acae:	468b      	mov	fp, r1
 801acb0:	4620      	mov	r0, r4
 801acb2:	4629      	mov	r1, r5
 801acb4:	f7e5 fca0 	bl	80005f8 <__aeabi_dmul>
 801acb8:	a33d      	add	r3, pc, #244	; (adr r3, 801adb0 <__kernel_cos+0x148>)
 801acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acbe:	f7e5 fae5 	bl	800028c <__adddf3>
 801acc2:	4622      	mov	r2, r4
 801acc4:	462b      	mov	r3, r5
 801acc6:	f7e5 fc97 	bl	80005f8 <__aeabi_dmul>
 801acca:	a33b      	add	r3, pc, #236	; (adr r3, 801adb8 <__kernel_cos+0x150>)
 801accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd0:	f7e5 fada 	bl	8000288 <__aeabi_dsub>
 801acd4:	4622      	mov	r2, r4
 801acd6:	462b      	mov	r3, r5
 801acd8:	f7e5 fc8e 	bl	80005f8 <__aeabi_dmul>
 801acdc:	a338      	add	r3, pc, #224	; (adr r3, 801adc0 <__kernel_cos+0x158>)
 801acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace2:	f7e5 fad3 	bl	800028c <__adddf3>
 801ace6:	4622      	mov	r2, r4
 801ace8:	462b      	mov	r3, r5
 801acea:	f7e5 fc85 	bl	80005f8 <__aeabi_dmul>
 801acee:	a336      	add	r3, pc, #216	; (adr r3, 801adc8 <__kernel_cos+0x160>)
 801acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf4:	f7e5 fac8 	bl	8000288 <__aeabi_dsub>
 801acf8:	4622      	mov	r2, r4
 801acfa:	462b      	mov	r3, r5
 801acfc:	f7e5 fc7c 	bl	80005f8 <__aeabi_dmul>
 801ad00:	a333      	add	r3, pc, #204	; (adr r3, 801add0 <__kernel_cos+0x168>)
 801ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad06:	f7e5 fac1 	bl	800028c <__adddf3>
 801ad0a:	4622      	mov	r2, r4
 801ad0c:	462b      	mov	r3, r5
 801ad0e:	f7e5 fc73 	bl	80005f8 <__aeabi_dmul>
 801ad12:	4622      	mov	r2, r4
 801ad14:	462b      	mov	r3, r5
 801ad16:	f7e5 fc6f 	bl	80005f8 <__aeabi_dmul>
 801ad1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ad1e:	4604      	mov	r4, r0
 801ad20:	460d      	mov	r5, r1
 801ad22:	4630      	mov	r0, r6
 801ad24:	4639      	mov	r1, r7
 801ad26:	f7e5 fc67 	bl	80005f8 <__aeabi_dmul>
 801ad2a:	460b      	mov	r3, r1
 801ad2c:	4602      	mov	r2, r0
 801ad2e:	4629      	mov	r1, r5
 801ad30:	4620      	mov	r0, r4
 801ad32:	f7e5 faa9 	bl	8000288 <__aeabi_dsub>
 801ad36:	4b2b      	ldr	r3, [pc, #172]	; (801ade4 <__kernel_cos+0x17c>)
 801ad38:	4598      	cmp	r8, r3
 801ad3a:	4606      	mov	r6, r0
 801ad3c:	460f      	mov	r7, r1
 801ad3e:	dc10      	bgt.n	801ad62 <__kernel_cos+0xfa>
 801ad40:	4602      	mov	r2, r0
 801ad42:	460b      	mov	r3, r1
 801ad44:	4650      	mov	r0, sl
 801ad46:	4659      	mov	r1, fp
 801ad48:	f7e5 fa9e 	bl	8000288 <__aeabi_dsub>
 801ad4c:	460b      	mov	r3, r1
 801ad4e:	4926      	ldr	r1, [pc, #152]	; (801ade8 <__kernel_cos+0x180>)
 801ad50:	4602      	mov	r2, r0
 801ad52:	2000      	movs	r0, #0
 801ad54:	f7e5 fa98 	bl	8000288 <__aeabi_dsub>
 801ad58:	ec41 0b10 	vmov	d0, r0, r1
 801ad5c:	b003      	add	sp, #12
 801ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad62:	4b22      	ldr	r3, [pc, #136]	; (801adec <__kernel_cos+0x184>)
 801ad64:	4920      	ldr	r1, [pc, #128]	; (801ade8 <__kernel_cos+0x180>)
 801ad66:	4598      	cmp	r8, r3
 801ad68:	bfcc      	ite	gt
 801ad6a:	4d21      	ldrgt	r5, [pc, #132]	; (801adf0 <__kernel_cos+0x188>)
 801ad6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801ad70:	2400      	movs	r4, #0
 801ad72:	4622      	mov	r2, r4
 801ad74:	462b      	mov	r3, r5
 801ad76:	2000      	movs	r0, #0
 801ad78:	f7e5 fa86 	bl	8000288 <__aeabi_dsub>
 801ad7c:	4622      	mov	r2, r4
 801ad7e:	4680      	mov	r8, r0
 801ad80:	4689      	mov	r9, r1
 801ad82:	462b      	mov	r3, r5
 801ad84:	4650      	mov	r0, sl
 801ad86:	4659      	mov	r1, fp
 801ad88:	f7e5 fa7e 	bl	8000288 <__aeabi_dsub>
 801ad8c:	4632      	mov	r2, r6
 801ad8e:	463b      	mov	r3, r7
 801ad90:	f7e5 fa7a 	bl	8000288 <__aeabi_dsub>
 801ad94:	4602      	mov	r2, r0
 801ad96:	460b      	mov	r3, r1
 801ad98:	4640      	mov	r0, r8
 801ad9a:	4649      	mov	r1, r9
 801ad9c:	e7da      	b.n	801ad54 <__kernel_cos+0xec>
 801ad9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801add8 <__kernel_cos+0x170>
 801ada2:	e7db      	b.n	801ad5c <__kernel_cos+0xf4>
 801ada4:	f3af 8000 	nop.w
 801ada8:	be8838d4 	.word	0xbe8838d4
 801adac:	bda8fae9 	.word	0xbda8fae9
 801adb0:	bdb4b1c4 	.word	0xbdb4b1c4
 801adb4:	3e21ee9e 	.word	0x3e21ee9e
 801adb8:	809c52ad 	.word	0x809c52ad
 801adbc:	3e927e4f 	.word	0x3e927e4f
 801adc0:	19cb1590 	.word	0x19cb1590
 801adc4:	3efa01a0 	.word	0x3efa01a0
 801adc8:	16c15177 	.word	0x16c15177
 801adcc:	3f56c16c 	.word	0x3f56c16c
 801add0:	5555554c 	.word	0x5555554c
 801add4:	3fa55555 	.word	0x3fa55555
 801add8:	00000000 	.word	0x00000000
 801addc:	3ff00000 	.word	0x3ff00000
 801ade0:	3fe00000 	.word	0x3fe00000
 801ade4:	3fd33332 	.word	0x3fd33332
 801ade8:	3ff00000 	.word	0x3ff00000
 801adec:	3fe90000 	.word	0x3fe90000
 801adf0:	3fd20000 	.word	0x3fd20000
 801adf4:	00000000 	.word	0x00000000

0801adf8 <__kernel_rem_pio2>:
 801adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adfc:	ed2d 8b02 	vpush	{d8}
 801ae00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801ae04:	f112 0f14 	cmn.w	r2, #20
 801ae08:	9308      	str	r3, [sp, #32]
 801ae0a:	9101      	str	r1, [sp, #4]
 801ae0c:	4bc6      	ldr	r3, [pc, #792]	; (801b128 <__kernel_rem_pio2+0x330>)
 801ae0e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801ae10:	9009      	str	r0, [sp, #36]	; 0x24
 801ae12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ae16:	9304      	str	r3, [sp, #16]
 801ae18:	9b08      	ldr	r3, [sp, #32]
 801ae1a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ae1e:	bfa8      	it	ge
 801ae20:	1ed4      	subge	r4, r2, #3
 801ae22:	9306      	str	r3, [sp, #24]
 801ae24:	bfb2      	itee	lt
 801ae26:	2400      	movlt	r4, #0
 801ae28:	2318      	movge	r3, #24
 801ae2a:	fb94 f4f3 	sdivge	r4, r4, r3
 801ae2e:	f06f 0317 	mvn.w	r3, #23
 801ae32:	fb04 3303 	mla	r3, r4, r3, r3
 801ae36:	eb03 0a02 	add.w	sl, r3, r2
 801ae3a:	9b04      	ldr	r3, [sp, #16]
 801ae3c:	9a06      	ldr	r2, [sp, #24]
 801ae3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b118 <__kernel_rem_pio2+0x320>
 801ae42:	eb03 0802 	add.w	r8, r3, r2
 801ae46:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801ae48:	1aa7      	subs	r7, r4, r2
 801ae4a:	ae20      	add	r6, sp, #128	; 0x80
 801ae4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ae50:	2500      	movs	r5, #0
 801ae52:	4545      	cmp	r5, r8
 801ae54:	dd18      	ble.n	801ae88 <__kernel_rem_pio2+0x90>
 801ae56:	9b08      	ldr	r3, [sp, #32]
 801ae58:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ae5c:	aa20      	add	r2, sp, #128	; 0x80
 801ae5e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801b118 <__kernel_rem_pio2+0x320>
 801ae62:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ae66:	f1c3 0301 	rsb	r3, r3, #1
 801ae6a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801ae6e:	9307      	str	r3, [sp, #28]
 801ae70:	9b07      	ldr	r3, [sp, #28]
 801ae72:	9a04      	ldr	r2, [sp, #16]
 801ae74:	4443      	add	r3, r8
 801ae76:	429a      	cmp	r2, r3
 801ae78:	db2f      	blt.n	801aeda <__kernel_rem_pio2+0xe2>
 801ae7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ae7e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ae82:	462f      	mov	r7, r5
 801ae84:	2600      	movs	r6, #0
 801ae86:	e01b      	b.n	801aec0 <__kernel_rem_pio2+0xc8>
 801ae88:	42ef      	cmn	r7, r5
 801ae8a:	d407      	bmi.n	801ae9c <__kernel_rem_pio2+0xa4>
 801ae8c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ae90:	f7e5 fb48 	bl	8000524 <__aeabi_i2d>
 801ae94:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ae98:	3501      	adds	r5, #1
 801ae9a:	e7da      	b.n	801ae52 <__kernel_rem_pio2+0x5a>
 801ae9c:	ec51 0b18 	vmov	r0, r1, d8
 801aea0:	e7f8      	b.n	801ae94 <__kernel_rem_pio2+0x9c>
 801aea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aea6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801aeaa:	f7e5 fba5 	bl	80005f8 <__aeabi_dmul>
 801aeae:	4602      	mov	r2, r0
 801aeb0:	460b      	mov	r3, r1
 801aeb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aeb6:	f7e5 f9e9 	bl	800028c <__adddf3>
 801aeba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aebe:	3601      	adds	r6, #1
 801aec0:	9b06      	ldr	r3, [sp, #24]
 801aec2:	429e      	cmp	r6, r3
 801aec4:	f1a7 0708 	sub.w	r7, r7, #8
 801aec8:	ddeb      	ble.n	801aea2 <__kernel_rem_pio2+0xaa>
 801aeca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aece:	3508      	adds	r5, #8
 801aed0:	ecab 7b02 	vstmia	fp!, {d7}
 801aed4:	f108 0801 	add.w	r8, r8, #1
 801aed8:	e7ca      	b.n	801ae70 <__kernel_rem_pio2+0x78>
 801aeda:	9b04      	ldr	r3, [sp, #16]
 801aedc:	aa0c      	add	r2, sp, #48	; 0x30
 801aede:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aee2:	930b      	str	r3, [sp, #44]	; 0x2c
 801aee4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801aee6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801aeea:	9c04      	ldr	r4, [sp, #16]
 801aeec:	930a      	str	r3, [sp, #40]	; 0x28
 801aeee:	ab98      	add	r3, sp, #608	; 0x260
 801aef0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aef4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801aef8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801aefc:	f8cd b008 	str.w	fp, [sp, #8]
 801af00:	4625      	mov	r5, r4
 801af02:	2d00      	cmp	r5, #0
 801af04:	dc78      	bgt.n	801aff8 <__kernel_rem_pio2+0x200>
 801af06:	ec47 6b10 	vmov	d0, r6, r7
 801af0a:	4650      	mov	r0, sl
 801af0c:	f000 fda0 	bl	801ba50 <scalbn>
 801af10:	ec57 6b10 	vmov	r6, r7, d0
 801af14:	2200      	movs	r2, #0
 801af16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801af1a:	ee10 0a10 	vmov	r0, s0
 801af1e:	4639      	mov	r1, r7
 801af20:	f7e5 fb6a 	bl	80005f8 <__aeabi_dmul>
 801af24:	ec41 0b10 	vmov	d0, r0, r1
 801af28:	f000 fd12 	bl	801b950 <floor>
 801af2c:	4b7f      	ldr	r3, [pc, #508]	; (801b12c <__kernel_rem_pio2+0x334>)
 801af2e:	ec51 0b10 	vmov	r0, r1, d0
 801af32:	2200      	movs	r2, #0
 801af34:	f7e5 fb60 	bl	80005f8 <__aeabi_dmul>
 801af38:	4602      	mov	r2, r0
 801af3a:	460b      	mov	r3, r1
 801af3c:	4630      	mov	r0, r6
 801af3e:	4639      	mov	r1, r7
 801af40:	f7e5 f9a2 	bl	8000288 <__aeabi_dsub>
 801af44:	460f      	mov	r7, r1
 801af46:	4606      	mov	r6, r0
 801af48:	f7e5 fe06 	bl	8000b58 <__aeabi_d2iz>
 801af4c:	9007      	str	r0, [sp, #28]
 801af4e:	f7e5 fae9 	bl	8000524 <__aeabi_i2d>
 801af52:	4602      	mov	r2, r0
 801af54:	460b      	mov	r3, r1
 801af56:	4630      	mov	r0, r6
 801af58:	4639      	mov	r1, r7
 801af5a:	f7e5 f995 	bl	8000288 <__aeabi_dsub>
 801af5e:	f1ba 0f00 	cmp.w	sl, #0
 801af62:	4606      	mov	r6, r0
 801af64:	460f      	mov	r7, r1
 801af66:	dd70      	ble.n	801b04a <__kernel_rem_pio2+0x252>
 801af68:	1e62      	subs	r2, r4, #1
 801af6a:	ab0c      	add	r3, sp, #48	; 0x30
 801af6c:	9d07      	ldr	r5, [sp, #28]
 801af6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801af72:	f1ca 0118 	rsb	r1, sl, #24
 801af76:	fa40 f301 	asr.w	r3, r0, r1
 801af7a:	441d      	add	r5, r3
 801af7c:	408b      	lsls	r3, r1
 801af7e:	1ac0      	subs	r0, r0, r3
 801af80:	ab0c      	add	r3, sp, #48	; 0x30
 801af82:	9507      	str	r5, [sp, #28]
 801af84:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801af88:	f1ca 0317 	rsb	r3, sl, #23
 801af8c:	fa40 f303 	asr.w	r3, r0, r3
 801af90:	9302      	str	r3, [sp, #8]
 801af92:	9b02      	ldr	r3, [sp, #8]
 801af94:	2b00      	cmp	r3, #0
 801af96:	dd66      	ble.n	801b066 <__kernel_rem_pio2+0x26e>
 801af98:	9b07      	ldr	r3, [sp, #28]
 801af9a:	2200      	movs	r2, #0
 801af9c:	3301      	adds	r3, #1
 801af9e:	9307      	str	r3, [sp, #28]
 801afa0:	4615      	mov	r5, r2
 801afa2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801afa6:	4294      	cmp	r4, r2
 801afa8:	f300 8099 	bgt.w	801b0de <__kernel_rem_pio2+0x2e6>
 801afac:	f1ba 0f00 	cmp.w	sl, #0
 801afb0:	dd07      	ble.n	801afc2 <__kernel_rem_pio2+0x1ca>
 801afb2:	f1ba 0f01 	cmp.w	sl, #1
 801afb6:	f000 80a5 	beq.w	801b104 <__kernel_rem_pio2+0x30c>
 801afba:	f1ba 0f02 	cmp.w	sl, #2
 801afbe:	f000 80c1 	beq.w	801b144 <__kernel_rem_pio2+0x34c>
 801afc2:	9b02      	ldr	r3, [sp, #8]
 801afc4:	2b02      	cmp	r3, #2
 801afc6:	d14e      	bne.n	801b066 <__kernel_rem_pio2+0x26e>
 801afc8:	4632      	mov	r2, r6
 801afca:	463b      	mov	r3, r7
 801afcc:	4958      	ldr	r1, [pc, #352]	; (801b130 <__kernel_rem_pio2+0x338>)
 801afce:	2000      	movs	r0, #0
 801afd0:	f7e5 f95a 	bl	8000288 <__aeabi_dsub>
 801afd4:	4606      	mov	r6, r0
 801afd6:	460f      	mov	r7, r1
 801afd8:	2d00      	cmp	r5, #0
 801afda:	d044      	beq.n	801b066 <__kernel_rem_pio2+0x26e>
 801afdc:	4650      	mov	r0, sl
 801afde:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b120 <__kernel_rem_pio2+0x328>
 801afe2:	f000 fd35 	bl	801ba50 <scalbn>
 801afe6:	4630      	mov	r0, r6
 801afe8:	4639      	mov	r1, r7
 801afea:	ec53 2b10 	vmov	r2, r3, d0
 801afee:	f7e5 f94b 	bl	8000288 <__aeabi_dsub>
 801aff2:	4606      	mov	r6, r0
 801aff4:	460f      	mov	r7, r1
 801aff6:	e036      	b.n	801b066 <__kernel_rem_pio2+0x26e>
 801aff8:	4b4e      	ldr	r3, [pc, #312]	; (801b134 <__kernel_rem_pio2+0x33c>)
 801affa:	2200      	movs	r2, #0
 801affc:	4630      	mov	r0, r6
 801affe:	4639      	mov	r1, r7
 801b000:	f7e5 fafa 	bl	80005f8 <__aeabi_dmul>
 801b004:	f7e5 fda8 	bl	8000b58 <__aeabi_d2iz>
 801b008:	f7e5 fa8c 	bl	8000524 <__aeabi_i2d>
 801b00c:	4b4a      	ldr	r3, [pc, #296]	; (801b138 <__kernel_rem_pio2+0x340>)
 801b00e:	2200      	movs	r2, #0
 801b010:	4680      	mov	r8, r0
 801b012:	4689      	mov	r9, r1
 801b014:	f7e5 faf0 	bl	80005f8 <__aeabi_dmul>
 801b018:	4602      	mov	r2, r0
 801b01a:	460b      	mov	r3, r1
 801b01c:	4630      	mov	r0, r6
 801b01e:	4639      	mov	r1, r7
 801b020:	f7e5 f932 	bl	8000288 <__aeabi_dsub>
 801b024:	f7e5 fd98 	bl	8000b58 <__aeabi_d2iz>
 801b028:	9b02      	ldr	r3, [sp, #8]
 801b02a:	f843 0b04 	str.w	r0, [r3], #4
 801b02e:	3d01      	subs	r5, #1
 801b030:	9302      	str	r3, [sp, #8]
 801b032:	ab70      	add	r3, sp, #448	; 0x1c0
 801b034:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03c:	4640      	mov	r0, r8
 801b03e:	4649      	mov	r1, r9
 801b040:	f7e5 f924 	bl	800028c <__adddf3>
 801b044:	4606      	mov	r6, r0
 801b046:	460f      	mov	r7, r1
 801b048:	e75b      	b.n	801af02 <__kernel_rem_pio2+0x10a>
 801b04a:	d105      	bne.n	801b058 <__kernel_rem_pio2+0x260>
 801b04c:	1e63      	subs	r3, r4, #1
 801b04e:	aa0c      	add	r2, sp, #48	; 0x30
 801b050:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b054:	15c3      	asrs	r3, r0, #23
 801b056:	e79b      	b.n	801af90 <__kernel_rem_pio2+0x198>
 801b058:	4b38      	ldr	r3, [pc, #224]	; (801b13c <__kernel_rem_pio2+0x344>)
 801b05a:	2200      	movs	r2, #0
 801b05c:	f7e5 fd52 	bl	8000b04 <__aeabi_dcmpge>
 801b060:	2800      	cmp	r0, #0
 801b062:	d139      	bne.n	801b0d8 <__kernel_rem_pio2+0x2e0>
 801b064:	9002      	str	r0, [sp, #8]
 801b066:	2200      	movs	r2, #0
 801b068:	2300      	movs	r3, #0
 801b06a:	4630      	mov	r0, r6
 801b06c:	4639      	mov	r1, r7
 801b06e:	f7e5 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 801b072:	2800      	cmp	r0, #0
 801b074:	f000 80b4 	beq.w	801b1e0 <__kernel_rem_pio2+0x3e8>
 801b078:	f104 3bff 	add.w	fp, r4, #4294967295
 801b07c:	465b      	mov	r3, fp
 801b07e:	2200      	movs	r2, #0
 801b080:	9904      	ldr	r1, [sp, #16]
 801b082:	428b      	cmp	r3, r1
 801b084:	da65      	bge.n	801b152 <__kernel_rem_pio2+0x35a>
 801b086:	2a00      	cmp	r2, #0
 801b088:	d07b      	beq.n	801b182 <__kernel_rem_pio2+0x38a>
 801b08a:	ab0c      	add	r3, sp, #48	; 0x30
 801b08c:	f1aa 0a18 	sub.w	sl, sl, #24
 801b090:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b094:	2b00      	cmp	r3, #0
 801b096:	f000 80a0 	beq.w	801b1da <__kernel_rem_pio2+0x3e2>
 801b09a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b120 <__kernel_rem_pio2+0x328>
 801b09e:	4650      	mov	r0, sl
 801b0a0:	f000 fcd6 	bl	801ba50 <scalbn>
 801b0a4:	4f23      	ldr	r7, [pc, #140]	; (801b134 <__kernel_rem_pio2+0x33c>)
 801b0a6:	ec55 4b10 	vmov	r4, r5, d0
 801b0aa:	46d8      	mov	r8, fp
 801b0ac:	2600      	movs	r6, #0
 801b0ae:	f1b8 0f00 	cmp.w	r8, #0
 801b0b2:	f280 80cf 	bge.w	801b254 <__kernel_rem_pio2+0x45c>
 801b0b6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801b118 <__kernel_rem_pio2+0x320>
 801b0ba:	465f      	mov	r7, fp
 801b0bc:	f04f 0800 	mov.w	r8, #0
 801b0c0:	2f00      	cmp	r7, #0
 801b0c2:	f2c0 80fd 	blt.w	801b2c0 <__kernel_rem_pio2+0x4c8>
 801b0c6:	ab70      	add	r3, sp, #448	; 0x1c0
 801b0c8:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b140 <__kernel_rem_pio2+0x348>
 801b0cc:	ec55 4b18 	vmov	r4, r5, d8
 801b0d0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801b0d4:	2600      	movs	r6, #0
 801b0d6:	e0e5      	b.n	801b2a4 <__kernel_rem_pio2+0x4ac>
 801b0d8:	2302      	movs	r3, #2
 801b0da:	9302      	str	r3, [sp, #8]
 801b0dc:	e75c      	b.n	801af98 <__kernel_rem_pio2+0x1a0>
 801b0de:	f8db 3000 	ldr.w	r3, [fp]
 801b0e2:	b955      	cbnz	r5, 801b0fa <__kernel_rem_pio2+0x302>
 801b0e4:	b123      	cbz	r3, 801b0f0 <__kernel_rem_pio2+0x2f8>
 801b0e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b0ea:	f8cb 3000 	str.w	r3, [fp]
 801b0ee:	2301      	movs	r3, #1
 801b0f0:	3201      	adds	r2, #1
 801b0f2:	f10b 0b04 	add.w	fp, fp, #4
 801b0f6:	461d      	mov	r5, r3
 801b0f8:	e755      	b.n	801afa6 <__kernel_rem_pio2+0x1ae>
 801b0fa:	1acb      	subs	r3, r1, r3
 801b0fc:	f8cb 3000 	str.w	r3, [fp]
 801b100:	462b      	mov	r3, r5
 801b102:	e7f5      	b.n	801b0f0 <__kernel_rem_pio2+0x2f8>
 801b104:	1e62      	subs	r2, r4, #1
 801b106:	ab0c      	add	r3, sp, #48	; 0x30
 801b108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b10c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b110:	a90c      	add	r1, sp, #48	; 0x30
 801b112:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b116:	e754      	b.n	801afc2 <__kernel_rem_pio2+0x1ca>
	...
 801b124:	3ff00000 	.word	0x3ff00000
 801b128:	0801c4d0 	.word	0x0801c4d0
 801b12c:	40200000 	.word	0x40200000
 801b130:	3ff00000 	.word	0x3ff00000
 801b134:	3e700000 	.word	0x3e700000
 801b138:	41700000 	.word	0x41700000
 801b13c:	3fe00000 	.word	0x3fe00000
 801b140:	0801c490 	.word	0x0801c490
 801b144:	1e62      	subs	r2, r4, #1
 801b146:	ab0c      	add	r3, sp, #48	; 0x30
 801b148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b14c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b150:	e7de      	b.n	801b110 <__kernel_rem_pio2+0x318>
 801b152:	a90c      	add	r1, sp, #48	; 0x30
 801b154:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b158:	3b01      	subs	r3, #1
 801b15a:	430a      	orrs	r2, r1
 801b15c:	e790      	b.n	801b080 <__kernel_rem_pio2+0x288>
 801b15e:	3301      	adds	r3, #1
 801b160:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b164:	2900      	cmp	r1, #0
 801b166:	d0fa      	beq.n	801b15e <__kernel_rem_pio2+0x366>
 801b168:	9a08      	ldr	r2, [sp, #32]
 801b16a:	18e3      	adds	r3, r4, r3
 801b16c:	18a6      	adds	r6, r4, r2
 801b16e:	aa20      	add	r2, sp, #128	; 0x80
 801b170:	1c65      	adds	r5, r4, #1
 801b172:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b176:	9302      	str	r3, [sp, #8]
 801b178:	9b02      	ldr	r3, [sp, #8]
 801b17a:	42ab      	cmp	r3, r5
 801b17c:	da04      	bge.n	801b188 <__kernel_rem_pio2+0x390>
 801b17e:	461c      	mov	r4, r3
 801b180:	e6b5      	b.n	801aeee <__kernel_rem_pio2+0xf6>
 801b182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b184:	2301      	movs	r3, #1
 801b186:	e7eb      	b.n	801b160 <__kernel_rem_pio2+0x368>
 801b188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b18a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b18e:	f7e5 f9c9 	bl	8000524 <__aeabi_i2d>
 801b192:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b198:	46b3      	mov	fp, r6
 801b19a:	461c      	mov	r4, r3
 801b19c:	2700      	movs	r7, #0
 801b19e:	f04f 0800 	mov.w	r8, #0
 801b1a2:	f04f 0900 	mov.w	r9, #0
 801b1a6:	9b06      	ldr	r3, [sp, #24]
 801b1a8:	429f      	cmp	r7, r3
 801b1aa:	dd06      	ble.n	801b1ba <__kernel_rem_pio2+0x3c2>
 801b1ac:	ab70      	add	r3, sp, #448	; 0x1c0
 801b1ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b1b2:	e9c3 8900 	strd	r8, r9, [r3]
 801b1b6:	3501      	adds	r5, #1
 801b1b8:	e7de      	b.n	801b178 <__kernel_rem_pio2+0x380>
 801b1ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b1be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b1c2:	f7e5 fa19 	bl	80005f8 <__aeabi_dmul>
 801b1c6:	4602      	mov	r2, r0
 801b1c8:	460b      	mov	r3, r1
 801b1ca:	4640      	mov	r0, r8
 801b1cc:	4649      	mov	r1, r9
 801b1ce:	f7e5 f85d 	bl	800028c <__adddf3>
 801b1d2:	3701      	adds	r7, #1
 801b1d4:	4680      	mov	r8, r0
 801b1d6:	4689      	mov	r9, r1
 801b1d8:	e7e5      	b.n	801b1a6 <__kernel_rem_pio2+0x3ae>
 801b1da:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b1de:	e754      	b.n	801b08a <__kernel_rem_pio2+0x292>
 801b1e0:	ec47 6b10 	vmov	d0, r6, r7
 801b1e4:	f1ca 0000 	rsb	r0, sl, #0
 801b1e8:	f000 fc32 	bl	801ba50 <scalbn>
 801b1ec:	ec57 6b10 	vmov	r6, r7, d0
 801b1f0:	4b9f      	ldr	r3, [pc, #636]	; (801b470 <__kernel_rem_pio2+0x678>)
 801b1f2:	ee10 0a10 	vmov	r0, s0
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	4639      	mov	r1, r7
 801b1fa:	f7e5 fc83 	bl	8000b04 <__aeabi_dcmpge>
 801b1fe:	b300      	cbz	r0, 801b242 <__kernel_rem_pio2+0x44a>
 801b200:	4b9c      	ldr	r3, [pc, #624]	; (801b474 <__kernel_rem_pio2+0x67c>)
 801b202:	2200      	movs	r2, #0
 801b204:	4630      	mov	r0, r6
 801b206:	4639      	mov	r1, r7
 801b208:	f7e5 f9f6 	bl	80005f8 <__aeabi_dmul>
 801b20c:	f7e5 fca4 	bl	8000b58 <__aeabi_d2iz>
 801b210:	4605      	mov	r5, r0
 801b212:	f7e5 f987 	bl	8000524 <__aeabi_i2d>
 801b216:	4b96      	ldr	r3, [pc, #600]	; (801b470 <__kernel_rem_pio2+0x678>)
 801b218:	2200      	movs	r2, #0
 801b21a:	f7e5 f9ed 	bl	80005f8 <__aeabi_dmul>
 801b21e:	460b      	mov	r3, r1
 801b220:	4602      	mov	r2, r0
 801b222:	4639      	mov	r1, r7
 801b224:	4630      	mov	r0, r6
 801b226:	f7e5 f82f 	bl	8000288 <__aeabi_dsub>
 801b22a:	f7e5 fc95 	bl	8000b58 <__aeabi_d2iz>
 801b22e:	f104 0b01 	add.w	fp, r4, #1
 801b232:	ab0c      	add	r3, sp, #48	; 0x30
 801b234:	f10a 0a18 	add.w	sl, sl, #24
 801b238:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b23c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801b240:	e72b      	b.n	801b09a <__kernel_rem_pio2+0x2a2>
 801b242:	4630      	mov	r0, r6
 801b244:	4639      	mov	r1, r7
 801b246:	f7e5 fc87 	bl	8000b58 <__aeabi_d2iz>
 801b24a:	ab0c      	add	r3, sp, #48	; 0x30
 801b24c:	46a3      	mov	fp, r4
 801b24e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b252:	e722      	b.n	801b09a <__kernel_rem_pio2+0x2a2>
 801b254:	ab70      	add	r3, sp, #448	; 0x1c0
 801b256:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801b25a:	ab0c      	add	r3, sp, #48	; 0x30
 801b25c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b260:	f7e5 f960 	bl	8000524 <__aeabi_i2d>
 801b264:	4622      	mov	r2, r4
 801b266:	462b      	mov	r3, r5
 801b268:	f7e5 f9c6 	bl	80005f8 <__aeabi_dmul>
 801b26c:	4632      	mov	r2, r6
 801b26e:	e9c9 0100 	strd	r0, r1, [r9]
 801b272:	463b      	mov	r3, r7
 801b274:	4620      	mov	r0, r4
 801b276:	4629      	mov	r1, r5
 801b278:	f7e5 f9be 	bl	80005f8 <__aeabi_dmul>
 801b27c:	f108 38ff 	add.w	r8, r8, #4294967295
 801b280:	4604      	mov	r4, r0
 801b282:	460d      	mov	r5, r1
 801b284:	e713      	b.n	801b0ae <__kernel_rem_pio2+0x2b6>
 801b286:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801b28a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801b28e:	f7e5 f9b3 	bl	80005f8 <__aeabi_dmul>
 801b292:	4602      	mov	r2, r0
 801b294:	460b      	mov	r3, r1
 801b296:	4620      	mov	r0, r4
 801b298:	4629      	mov	r1, r5
 801b29a:	f7e4 fff7 	bl	800028c <__adddf3>
 801b29e:	3601      	adds	r6, #1
 801b2a0:	4604      	mov	r4, r0
 801b2a2:	460d      	mov	r5, r1
 801b2a4:	9b04      	ldr	r3, [sp, #16]
 801b2a6:	429e      	cmp	r6, r3
 801b2a8:	dc01      	bgt.n	801b2ae <__kernel_rem_pio2+0x4b6>
 801b2aa:	45b0      	cmp	r8, r6
 801b2ac:	daeb      	bge.n	801b286 <__kernel_rem_pio2+0x48e>
 801b2ae:	ab48      	add	r3, sp, #288	; 0x120
 801b2b0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b2b4:	e9c3 4500 	strd	r4, r5, [r3]
 801b2b8:	3f01      	subs	r7, #1
 801b2ba:	f108 0801 	add.w	r8, r8, #1
 801b2be:	e6ff      	b.n	801b0c0 <__kernel_rem_pio2+0x2c8>
 801b2c0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b2c2:	2b02      	cmp	r3, #2
 801b2c4:	dc0b      	bgt.n	801b2de <__kernel_rem_pio2+0x4e6>
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	dc6e      	bgt.n	801b3a8 <__kernel_rem_pio2+0x5b0>
 801b2ca:	d045      	beq.n	801b358 <__kernel_rem_pio2+0x560>
 801b2cc:	9b07      	ldr	r3, [sp, #28]
 801b2ce:	f003 0007 	and.w	r0, r3, #7
 801b2d2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b2d6:	ecbd 8b02 	vpop	{d8}
 801b2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b2e0:	2b03      	cmp	r3, #3
 801b2e2:	d1f3      	bne.n	801b2cc <__kernel_rem_pio2+0x4d4>
 801b2e4:	ab48      	add	r3, sp, #288	; 0x120
 801b2e6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801b2ea:	46d0      	mov	r8, sl
 801b2ec:	46d9      	mov	r9, fp
 801b2ee:	f1b9 0f00 	cmp.w	r9, #0
 801b2f2:	f1a8 0808 	sub.w	r8, r8, #8
 801b2f6:	dc64      	bgt.n	801b3c2 <__kernel_rem_pio2+0x5ca>
 801b2f8:	465c      	mov	r4, fp
 801b2fa:	2c01      	cmp	r4, #1
 801b2fc:	f1aa 0a08 	sub.w	sl, sl, #8
 801b300:	dc7e      	bgt.n	801b400 <__kernel_rem_pio2+0x608>
 801b302:	2000      	movs	r0, #0
 801b304:	2100      	movs	r1, #0
 801b306:	f1bb 0f01 	cmp.w	fp, #1
 801b30a:	f300 8097 	bgt.w	801b43c <__kernel_rem_pio2+0x644>
 801b30e:	9b02      	ldr	r3, [sp, #8]
 801b310:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801b314:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801b318:	2b00      	cmp	r3, #0
 801b31a:	f040 8099 	bne.w	801b450 <__kernel_rem_pio2+0x658>
 801b31e:	9b01      	ldr	r3, [sp, #4]
 801b320:	e9c3 5600 	strd	r5, r6, [r3]
 801b324:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801b328:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b32c:	e7ce      	b.n	801b2cc <__kernel_rem_pio2+0x4d4>
 801b32e:	ab48      	add	r3, sp, #288	; 0x120
 801b330:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b338:	f7e4 ffa8 	bl	800028c <__adddf3>
 801b33c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b340:	f1bb 0f00 	cmp.w	fp, #0
 801b344:	daf3      	bge.n	801b32e <__kernel_rem_pio2+0x536>
 801b346:	9b02      	ldr	r3, [sp, #8]
 801b348:	b113      	cbz	r3, 801b350 <__kernel_rem_pio2+0x558>
 801b34a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b34e:	4619      	mov	r1, r3
 801b350:	9b01      	ldr	r3, [sp, #4]
 801b352:	e9c3 0100 	strd	r0, r1, [r3]
 801b356:	e7b9      	b.n	801b2cc <__kernel_rem_pio2+0x4d4>
 801b358:	2000      	movs	r0, #0
 801b35a:	2100      	movs	r1, #0
 801b35c:	e7f0      	b.n	801b340 <__kernel_rem_pio2+0x548>
 801b35e:	ab48      	add	r3, sp, #288	; 0x120
 801b360:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b368:	f7e4 ff90 	bl	800028c <__adddf3>
 801b36c:	3c01      	subs	r4, #1
 801b36e:	2c00      	cmp	r4, #0
 801b370:	daf5      	bge.n	801b35e <__kernel_rem_pio2+0x566>
 801b372:	9b02      	ldr	r3, [sp, #8]
 801b374:	b1e3      	cbz	r3, 801b3b0 <__kernel_rem_pio2+0x5b8>
 801b376:	4602      	mov	r2, r0
 801b378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b37c:	9c01      	ldr	r4, [sp, #4]
 801b37e:	e9c4 2300 	strd	r2, r3, [r4]
 801b382:	4602      	mov	r2, r0
 801b384:	460b      	mov	r3, r1
 801b386:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b38a:	f7e4 ff7d 	bl	8000288 <__aeabi_dsub>
 801b38e:	ad4a      	add	r5, sp, #296	; 0x128
 801b390:	2401      	movs	r4, #1
 801b392:	45a3      	cmp	fp, r4
 801b394:	da0f      	bge.n	801b3b6 <__kernel_rem_pio2+0x5be>
 801b396:	9b02      	ldr	r3, [sp, #8]
 801b398:	b113      	cbz	r3, 801b3a0 <__kernel_rem_pio2+0x5a8>
 801b39a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b39e:	4619      	mov	r1, r3
 801b3a0:	9b01      	ldr	r3, [sp, #4]
 801b3a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b3a6:	e791      	b.n	801b2cc <__kernel_rem_pio2+0x4d4>
 801b3a8:	465c      	mov	r4, fp
 801b3aa:	2000      	movs	r0, #0
 801b3ac:	2100      	movs	r1, #0
 801b3ae:	e7de      	b.n	801b36e <__kernel_rem_pio2+0x576>
 801b3b0:	4602      	mov	r2, r0
 801b3b2:	460b      	mov	r3, r1
 801b3b4:	e7e2      	b.n	801b37c <__kernel_rem_pio2+0x584>
 801b3b6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801b3ba:	f7e4 ff67 	bl	800028c <__adddf3>
 801b3be:	3401      	adds	r4, #1
 801b3c0:	e7e7      	b.n	801b392 <__kernel_rem_pio2+0x59a>
 801b3c2:	e9d8 4500 	ldrd	r4, r5, [r8]
 801b3c6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801b3ca:	4620      	mov	r0, r4
 801b3cc:	4632      	mov	r2, r6
 801b3ce:	463b      	mov	r3, r7
 801b3d0:	4629      	mov	r1, r5
 801b3d2:	f7e4 ff5b 	bl	800028c <__adddf3>
 801b3d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b3da:	4602      	mov	r2, r0
 801b3dc:	460b      	mov	r3, r1
 801b3de:	4620      	mov	r0, r4
 801b3e0:	4629      	mov	r1, r5
 801b3e2:	f7e4 ff51 	bl	8000288 <__aeabi_dsub>
 801b3e6:	4632      	mov	r2, r6
 801b3e8:	463b      	mov	r3, r7
 801b3ea:	f7e4 ff4f 	bl	800028c <__adddf3>
 801b3ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b3f2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801b3f6:	ed88 7b00 	vstr	d7, [r8]
 801b3fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801b3fe:	e776      	b.n	801b2ee <__kernel_rem_pio2+0x4f6>
 801b400:	e9da 8900 	ldrd	r8, r9, [sl]
 801b404:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b408:	4640      	mov	r0, r8
 801b40a:	4632      	mov	r2, r6
 801b40c:	463b      	mov	r3, r7
 801b40e:	4649      	mov	r1, r9
 801b410:	f7e4 ff3c 	bl	800028c <__adddf3>
 801b414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b418:	4602      	mov	r2, r0
 801b41a:	460b      	mov	r3, r1
 801b41c:	4640      	mov	r0, r8
 801b41e:	4649      	mov	r1, r9
 801b420:	f7e4 ff32 	bl	8000288 <__aeabi_dsub>
 801b424:	4632      	mov	r2, r6
 801b426:	463b      	mov	r3, r7
 801b428:	f7e4 ff30 	bl	800028c <__adddf3>
 801b42c:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b430:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b434:	ed8a 7b00 	vstr	d7, [sl]
 801b438:	3c01      	subs	r4, #1
 801b43a:	e75e      	b.n	801b2fa <__kernel_rem_pio2+0x502>
 801b43c:	ab48      	add	r3, sp, #288	; 0x120
 801b43e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b446:	f7e4 ff21 	bl	800028c <__adddf3>
 801b44a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b44e:	e75a      	b.n	801b306 <__kernel_rem_pio2+0x50e>
 801b450:	9b01      	ldr	r3, [sp, #4]
 801b452:	9a01      	ldr	r2, [sp, #4]
 801b454:	601d      	str	r5, [r3, #0]
 801b456:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801b45a:	605c      	str	r4, [r3, #4]
 801b45c:	609f      	str	r7, [r3, #8]
 801b45e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801b462:	60d3      	str	r3, [r2, #12]
 801b464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b468:	6110      	str	r0, [r2, #16]
 801b46a:	6153      	str	r3, [r2, #20]
 801b46c:	e72e      	b.n	801b2cc <__kernel_rem_pio2+0x4d4>
 801b46e:	bf00      	nop
 801b470:	41700000 	.word	0x41700000
 801b474:	3e700000 	.word	0x3e700000

0801b478 <__kernel_sin>:
 801b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b47c:	ed2d 8b04 	vpush	{d8-d9}
 801b480:	eeb0 8a41 	vmov.f32	s16, s2
 801b484:	eef0 8a61 	vmov.f32	s17, s3
 801b488:	ec55 4b10 	vmov	r4, r5, d0
 801b48c:	b083      	sub	sp, #12
 801b48e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b492:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b496:	9001      	str	r0, [sp, #4]
 801b498:	da06      	bge.n	801b4a8 <__kernel_sin+0x30>
 801b49a:	ee10 0a10 	vmov	r0, s0
 801b49e:	4629      	mov	r1, r5
 801b4a0:	f7e5 fb5a 	bl	8000b58 <__aeabi_d2iz>
 801b4a4:	2800      	cmp	r0, #0
 801b4a6:	d051      	beq.n	801b54c <__kernel_sin+0xd4>
 801b4a8:	4622      	mov	r2, r4
 801b4aa:	462b      	mov	r3, r5
 801b4ac:	4620      	mov	r0, r4
 801b4ae:	4629      	mov	r1, r5
 801b4b0:	f7e5 f8a2 	bl	80005f8 <__aeabi_dmul>
 801b4b4:	4682      	mov	sl, r0
 801b4b6:	468b      	mov	fp, r1
 801b4b8:	4602      	mov	r2, r0
 801b4ba:	460b      	mov	r3, r1
 801b4bc:	4620      	mov	r0, r4
 801b4be:	4629      	mov	r1, r5
 801b4c0:	f7e5 f89a 	bl	80005f8 <__aeabi_dmul>
 801b4c4:	a341      	add	r3, pc, #260	; (adr r3, 801b5cc <__kernel_sin+0x154>)
 801b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ca:	4680      	mov	r8, r0
 801b4cc:	4689      	mov	r9, r1
 801b4ce:	4650      	mov	r0, sl
 801b4d0:	4659      	mov	r1, fp
 801b4d2:	f7e5 f891 	bl	80005f8 <__aeabi_dmul>
 801b4d6:	a33f      	add	r3, pc, #252	; (adr r3, 801b5d4 <__kernel_sin+0x15c>)
 801b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4dc:	f7e4 fed4 	bl	8000288 <__aeabi_dsub>
 801b4e0:	4652      	mov	r2, sl
 801b4e2:	465b      	mov	r3, fp
 801b4e4:	f7e5 f888 	bl	80005f8 <__aeabi_dmul>
 801b4e8:	a33c      	add	r3, pc, #240	; (adr r3, 801b5dc <__kernel_sin+0x164>)
 801b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ee:	f7e4 fecd 	bl	800028c <__adddf3>
 801b4f2:	4652      	mov	r2, sl
 801b4f4:	465b      	mov	r3, fp
 801b4f6:	f7e5 f87f 	bl	80005f8 <__aeabi_dmul>
 801b4fa:	a33a      	add	r3, pc, #232	; (adr r3, 801b5e4 <__kernel_sin+0x16c>)
 801b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b500:	f7e4 fec2 	bl	8000288 <__aeabi_dsub>
 801b504:	4652      	mov	r2, sl
 801b506:	465b      	mov	r3, fp
 801b508:	f7e5 f876 	bl	80005f8 <__aeabi_dmul>
 801b50c:	a337      	add	r3, pc, #220	; (adr r3, 801b5ec <__kernel_sin+0x174>)
 801b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b512:	f7e4 febb 	bl	800028c <__adddf3>
 801b516:	9b01      	ldr	r3, [sp, #4]
 801b518:	4606      	mov	r6, r0
 801b51a:	460f      	mov	r7, r1
 801b51c:	b9eb      	cbnz	r3, 801b55a <__kernel_sin+0xe2>
 801b51e:	4602      	mov	r2, r0
 801b520:	460b      	mov	r3, r1
 801b522:	4650      	mov	r0, sl
 801b524:	4659      	mov	r1, fp
 801b526:	f7e5 f867 	bl	80005f8 <__aeabi_dmul>
 801b52a:	a325      	add	r3, pc, #148	; (adr r3, 801b5c0 <__kernel_sin+0x148>)
 801b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b530:	f7e4 feaa 	bl	8000288 <__aeabi_dsub>
 801b534:	4642      	mov	r2, r8
 801b536:	464b      	mov	r3, r9
 801b538:	f7e5 f85e 	bl	80005f8 <__aeabi_dmul>
 801b53c:	4602      	mov	r2, r0
 801b53e:	460b      	mov	r3, r1
 801b540:	4620      	mov	r0, r4
 801b542:	4629      	mov	r1, r5
 801b544:	f7e4 fea2 	bl	800028c <__adddf3>
 801b548:	4604      	mov	r4, r0
 801b54a:	460d      	mov	r5, r1
 801b54c:	ec45 4b10 	vmov	d0, r4, r5
 801b550:	b003      	add	sp, #12
 801b552:	ecbd 8b04 	vpop	{d8-d9}
 801b556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b55a:	4b1b      	ldr	r3, [pc, #108]	; (801b5c8 <__kernel_sin+0x150>)
 801b55c:	ec51 0b18 	vmov	r0, r1, d8
 801b560:	2200      	movs	r2, #0
 801b562:	f7e5 f849 	bl	80005f8 <__aeabi_dmul>
 801b566:	4632      	mov	r2, r6
 801b568:	ec41 0b19 	vmov	d9, r0, r1
 801b56c:	463b      	mov	r3, r7
 801b56e:	4640      	mov	r0, r8
 801b570:	4649      	mov	r1, r9
 801b572:	f7e5 f841 	bl	80005f8 <__aeabi_dmul>
 801b576:	4602      	mov	r2, r0
 801b578:	460b      	mov	r3, r1
 801b57a:	ec51 0b19 	vmov	r0, r1, d9
 801b57e:	f7e4 fe83 	bl	8000288 <__aeabi_dsub>
 801b582:	4652      	mov	r2, sl
 801b584:	465b      	mov	r3, fp
 801b586:	f7e5 f837 	bl	80005f8 <__aeabi_dmul>
 801b58a:	ec53 2b18 	vmov	r2, r3, d8
 801b58e:	f7e4 fe7b 	bl	8000288 <__aeabi_dsub>
 801b592:	a30b      	add	r3, pc, #44	; (adr r3, 801b5c0 <__kernel_sin+0x148>)
 801b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b598:	4606      	mov	r6, r0
 801b59a:	460f      	mov	r7, r1
 801b59c:	4640      	mov	r0, r8
 801b59e:	4649      	mov	r1, r9
 801b5a0:	f7e5 f82a 	bl	80005f8 <__aeabi_dmul>
 801b5a4:	4602      	mov	r2, r0
 801b5a6:	460b      	mov	r3, r1
 801b5a8:	4630      	mov	r0, r6
 801b5aa:	4639      	mov	r1, r7
 801b5ac:	f7e4 fe6e 	bl	800028c <__adddf3>
 801b5b0:	4602      	mov	r2, r0
 801b5b2:	460b      	mov	r3, r1
 801b5b4:	4620      	mov	r0, r4
 801b5b6:	4629      	mov	r1, r5
 801b5b8:	f7e4 fe66 	bl	8000288 <__aeabi_dsub>
 801b5bc:	e7c4      	b.n	801b548 <__kernel_sin+0xd0>
 801b5be:	bf00      	nop
 801b5c0:	55555549 	.word	0x55555549
 801b5c4:	3fc55555 	.word	0x3fc55555
 801b5c8:	3fe00000 	.word	0x3fe00000
 801b5cc:	5acfd57c 	.word	0x5acfd57c
 801b5d0:	3de5d93a 	.word	0x3de5d93a
 801b5d4:	8a2b9ceb 	.word	0x8a2b9ceb
 801b5d8:	3e5ae5e6 	.word	0x3e5ae5e6
 801b5dc:	57b1fe7d 	.word	0x57b1fe7d
 801b5e0:	3ec71de3 	.word	0x3ec71de3
 801b5e4:	19c161d5 	.word	0x19c161d5
 801b5e8:	3f2a01a0 	.word	0x3f2a01a0
 801b5ec:	1110f8a6 	.word	0x1110f8a6
 801b5f0:	3f811111 	.word	0x3f811111
 801b5f4:	00000000 	.word	0x00000000

0801b5f8 <atan>:
 801b5f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5fc:	ec55 4b10 	vmov	r4, r5, d0
 801b600:	4bc3      	ldr	r3, [pc, #780]	; (801b910 <atan+0x318>)
 801b602:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b606:	429e      	cmp	r6, r3
 801b608:	46ab      	mov	fp, r5
 801b60a:	dd18      	ble.n	801b63e <atan+0x46>
 801b60c:	4bc1      	ldr	r3, [pc, #772]	; (801b914 <atan+0x31c>)
 801b60e:	429e      	cmp	r6, r3
 801b610:	dc01      	bgt.n	801b616 <atan+0x1e>
 801b612:	d109      	bne.n	801b628 <atan+0x30>
 801b614:	b144      	cbz	r4, 801b628 <atan+0x30>
 801b616:	4622      	mov	r2, r4
 801b618:	462b      	mov	r3, r5
 801b61a:	4620      	mov	r0, r4
 801b61c:	4629      	mov	r1, r5
 801b61e:	f7e4 fe35 	bl	800028c <__adddf3>
 801b622:	4604      	mov	r4, r0
 801b624:	460d      	mov	r5, r1
 801b626:	e006      	b.n	801b636 <atan+0x3e>
 801b628:	f1bb 0f00 	cmp.w	fp, #0
 801b62c:	f300 8131 	bgt.w	801b892 <atan+0x29a>
 801b630:	a59b      	add	r5, pc, #620	; (adr r5, 801b8a0 <atan+0x2a8>)
 801b632:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b636:	ec45 4b10 	vmov	d0, r4, r5
 801b63a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b63e:	4bb6      	ldr	r3, [pc, #728]	; (801b918 <atan+0x320>)
 801b640:	429e      	cmp	r6, r3
 801b642:	dc14      	bgt.n	801b66e <atan+0x76>
 801b644:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b648:	429e      	cmp	r6, r3
 801b64a:	dc0d      	bgt.n	801b668 <atan+0x70>
 801b64c:	a396      	add	r3, pc, #600	; (adr r3, 801b8a8 <atan+0x2b0>)
 801b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b652:	ee10 0a10 	vmov	r0, s0
 801b656:	4629      	mov	r1, r5
 801b658:	f7e4 fe18 	bl	800028c <__adddf3>
 801b65c:	4baf      	ldr	r3, [pc, #700]	; (801b91c <atan+0x324>)
 801b65e:	2200      	movs	r2, #0
 801b660:	f7e5 fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 801b664:	2800      	cmp	r0, #0
 801b666:	d1e6      	bne.n	801b636 <atan+0x3e>
 801b668:	f04f 3aff 	mov.w	sl, #4294967295
 801b66c:	e02b      	b.n	801b6c6 <atan+0xce>
 801b66e:	f000 f963 	bl	801b938 <fabs>
 801b672:	4bab      	ldr	r3, [pc, #684]	; (801b920 <atan+0x328>)
 801b674:	429e      	cmp	r6, r3
 801b676:	ec55 4b10 	vmov	r4, r5, d0
 801b67a:	f300 80bf 	bgt.w	801b7fc <atan+0x204>
 801b67e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b682:	429e      	cmp	r6, r3
 801b684:	f300 80a0 	bgt.w	801b7c8 <atan+0x1d0>
 801b688:	ee10 2a10 	vmov	r2, s0
 801b68c:	ee10 0a10 	vmov	r0, s0
 801b690:	462b      	mov	r3, r5
 801b692:	4629      	mov	r1, r5
 801b694:	f7e4 fdfa 	bl	800028c <__adddf3>
 801b698:	4ba0      	ldr	r3, [pc, #640]	; (801b91c <atan+0x324>)
 801b69a:	2200      	movs	r2, #0
 801b69c:	f7e4 fdf4 	bl	8000288 <__aeabi_dsub>
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	4606      	mov	r6, r0
 801b6a4:	460f      	mov	r7, r1
 801b6a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	4629      	mov	r1, r5
 801b6ae:	f7e4 fded 	bl	800028c <__adddf3>
 801b6b2:	4602      	mov	r2, r0
 801b6b4:	460b      	mov	r3, r1
 801b6b6:	4630      	mov	r0, r6
 801b6b8:	4639      	mov	r1, r7
 801b6ba:	f7e5 f8c7 	bl	800084c <__aeabi_ddiv>
 801b6be:	f04f 0a00 	mov.w	sl, #0
 801b6c2:	4604      	mov	r4, r0
 801b6c4:	460d      	mov	r5, r1
 801b6c6:	4622      	mov	r2, r4
 801b6c8:	462b      	mov	r3, r5
 801b6ca:	4620      	mov	r0, r4
 801b6cc:	4629      	mov	r1, r5
 801b6ce:	f7e4 ff93 	bl	80005f8 <__aeabi_dmul>
 801b6d2:	4602      	mov	r2, r0
 801b6d4:	460b      	mov	r3, r1
 801b6d6:	4680      	mov	r8, r0
 801b6d8:	4689      	mov	r9, r1
 801b6da:	f7e4 ff8d 	bl	80005f8 <__aeabi_dmul>
 801b6de:	a374      	add	r3, pc, #464	; (adr r3, 801b8b0 <atan+0x2b8>)
 801b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e4:	4606      	mov	r6, r0
 801b6e6:	460f      	mov	r7, r1
 801b6e8:	f7e4 ff86 	bl	80005f8 <__aeabi_dmul>
 801b6ec:	a372      	add	r3, pc, #456	; (adr r3, 801b8b8 <atan+0x2c0>)
 801b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f2:	f7e4 fdcb 	bl	800028c <__adddf3>
 801b6f6:	4632      	mov	r2, r6
 801b6f8:	463b      	mov	r3, r7
 801b6fa:	f7e4 ff7d 	bl	80005f8 <__aeabi_dmul>
 801b6fe:	a370      	add	r3, pc, #448	; (adr r3, 801b8c0 <atan+0x2c8>)
 801b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b704:	f7e4 fdc2 	bl	800028c <__adddf3>
 801b708:	4632      	mov	r2, r6
 801b70a:	463b      	mov	r3, r7
 801b70c:	f7e4 ff74 	bl	80005f8 <__aeabi_dmul>
 801b710:	a36d      	add	r3, pc, #436	; (adr r3, 801b8c8 <atan+0x2d0>)
 801b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b716:	f7e4 fdb9 	bl	800028c <__adddf3>
 801b71a:	4632      	mov	r2, r6
 801b71c:	463b      	mov	r3, r7
 801b71e:	f7e4 ff6b 	bl	80005f8 <__aeabi_dmul>
 801b722:	a36b      	add	r3, pc, #428	; (adr r3, 801b8d0 <atan+0x2d8>)
 801b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b728:	f7e4 fdb0 	bl	800028c <__adddf3>
 801b72c:	4632      	mov	r2, r6
 801b72e:	463b      	mov	r3, r7
 801b730:	f7e4 ff62 	bl	80005f8 <__aeabi_dmul>
 801b734:	a368      	add	r3, pc, #416	; (adr r3, 801b8d8 <atan+0x2e0>)
 801b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b73a:	f7e4 fda7 	bl	800028c <__adddf3>
 801b73e:	4642      	mov	r2, r8
 801b740:	464b      	mov	r3, r9
 801b742:	f7e4 ff59 	bl	80005f8 <__aeabi_dmul>
 801b746:	a366      	add	r3, pc, #408	; (adr r3, 801b8e0 <atan+0x2e8>)
 801b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b74c:	4680      	mov	r8, r0
 801b74e:	4689      	mov	r9, r1
 801b750:	4630      	mov	r0, r6
 801b752:	4639      	mov	r1, r7
 801b754:	f7e4 ff50 	bl	80005f8 <__aeabi_dmul>
 801b758:	a363      	add	r3, pc, #396	; (adr r3, 801b8e8 <atan+0x2f0>)
 801b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b75e:	f7e4 fd93 	bl	8000288 <__aeabi_dsub>
 801b762:	4632      	mov	r2, r6
 801b764:	463b      	mov	r3, r7
 801b766:	f7e4 ff47 	bl	80005f8 <__aeabi_dmul>
 801b76a:	a361      	add	r3, pc, #388	; (adr r3, 801b8f0 <atan+0x2f8>)
 801b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b770:	f7e4 fd8a 	bl	8000288 <__aeabi_dsub>
 801b774:	4632      	mov	r2, r6
 801b776:	463b      	mov	r3, r7
 801b778:	f7e4 ff3e 	bl	80005f8 <__aeabi_dmul>
 801b77c:	a35e      	add	r3, pc, #376	; (adr r3, 801b8f8 <atan+0x300>)
 801b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b782:	f7e4 fd81 	bl	8000288 <__aeabi_dsub>
 801b786:	4632      	mov	r2, r6
 801b788:	463b      	mov	r3, r7
 801b78a:	f7e4 ff35 	bl	80005f8 <__aeabi_dmul>
 801b78e:	a35c      	add	r3, pc, #368	; (adr r3, 801b900 <atan+0x308>)
 801b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b794:	f7e4 fd78 	bl	8000288 <__aeabi_dsub>
 801b798:	4632      	mov	r2, r6
 801b79a:	463b      	mov	r3, r7
 801b79c:	f7e4 ff2c 	bl	80005f8 <__aeabi_dmul>
 801b7a0:	4602      	mov	r2, r0
 801b7a2:	460b      	mov	r3, r1
 801b7a4:	4640      	mov	r0, r8
 801b7a6:	4649      	mov	r1, r9
 801b7a8:	f7e4 fd70 	bl	800028c <__adddf3>
 801b7ac:	4622      	mov	r2, r4
 801b7ae:	462b      	mov	r3, r5
 801b7b0:	f7e4 ff22 	bl	80005f8 <__aeabi_dmul>
 801b7b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b7b8:	4602      	mov	r2, r0
 801b7ba:	460b      	mov	r3, r1
 801b7bc:	d14b      	bne.n	801b856 <atan+0x25e>
 801b7be:	4620      	mov	r0, r4
 801b7c0:	4629      	mov	r1, r5
 801b7c2:	f7e4 fd61 	bl	8000288 <__aeabi_dsub>
 801b7c6:	e72c      	b.n	801b622 <atan+0x2a>
 801b7c8:	ee10 0a10 	vmov	r0, s0
 801b7cc:	4b53      	ldr	r3, [pc, #332]	; (801b91c <atan+0x324>)
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	4629      	mov	r1, r5
 801b7d2:	f7e4 fd59 	bl	8000288 <__aeabi_dsub>
 801b7d6:	4b51      	ldr	r3, [pc, #324]	; (801b91c <atan+0x324>)
 801b7d8:	4606      	mov	r6, r0
 801b7da:	460f      	mov	r7, r1
 801b7dc:	2200      	movs	r2, #0
 801b7de:	4620      	mov	r0, r4
 801b7e0:	4629      	mov	r1, r5
 801b7e2:	f7e4 fd53 	bl	800028c <__adddf3>
 801b7e6:	4602      	mov	r2, r0
 801b7e8:	460b      	mov	r3, r1
 801b7ea:	4630      	mov	r0, r6
 801b7ec:	4639      	mov	r1, r7
 801b7ee:	f7e5 f82d 	bl	800084c <__aeabi_ddiv>
 801b7f2:	f04f 0a01 	mov.w	sl, #1
 801b7f6:	4604      	mov	r4, r0
 801b7f8:	460d      	mov	r5, r1
 801b7fa:	e764      	b.n	801b6c6 <atan+0xce>
 801b7fc:	4b49      	ldr	r3, [pc, #292]	; (801b924 <atan+0x32c>)
 801b7fe:	429e      	cmp	r6, r3
 801b800:	da1d      	bge.n	801b83e <atan+0x246>
 801b802:	ee10 0a10 	vmov	r0, s0
 801b806:	4b48      	ldr	r3, [pc, #288]	; (801b928 <atan+0x330>)
 801b808:	2200      	movs	r2, #0
 801b80a:	4629      	mov	r1, r5
 801b80c:	f7e4 fd3c 	bl	8000288 <__aeabi_dsub>
 801b810:	4b45      	ldr	r3, [pc, #276]	; (801b928 <atan+0x330>)
 801b812:	4606      	mov	r6, r0
 801b814:	460f      	mov	r7, r1
 801b816:	2200      	movs	r2, #0
 801b818:	4620      	mov	r0, r4
 801b81a:	4629      	mov	r1, r5
 801b81c:	f7e4 feec 	bl	80005f8 <__aeabi_dmul>
 801b820:	4b3e      	ldr	r3, [pc, #248]	; (801b91c <atan+0x324>)
 801b822:	2200      	movs	r2, #0
 801b824:	f7e4 fd32 	bl	800028c <__adddf3>
 801b828:	4602      	mov	r2, r0
 801b82a:	460b      	mov	r3, r1
 801b82c:	4630      	mov	r0, r6
 801b82e:	4639      	mov	r1, r7
 801b830:	f7e5 f80c 	bl	800084c <__aeabi_ddiv>
 801b834:	f04f 0a02 	mov.w	sl, #2
 801b838:	4604      	mov	r4, r0
 801b83a:	460d      	mov	r5, r1
 801b83c:	e743      	b.n	801b6c6 <atan+0xce>
 801b83e:	462b      	mov	r3, r5
 801b840:	ee10 2a10 	vmov	r2, s0
 801b844:	4939      	ldr	r1, [pc, #228]	; (801b92c <atan+0x334>)
 801b846:	2000      	movs	r0, #0
 801b848:	f7e5 f800 	bl	800084c <__aeabi_ddiv>
 801b84c:	f04f 0a03 	mov.w	sl, #3
 801b850:	4604      	mov	r4, r0
 801b852:	460d      	mov	r5, r1
 801b854:	e737      	b.n	801b6c6 <atan+0xce>
 801b856:	4b36      	ldr	r3, [pc, #216]	; (801b930 <atan+0x338>)
 801b858:	4e36      	ldr	r6, [pc, #216]	; (801b934 <atan+0x33c>)
 801b85a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801b85e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801b862:	e9da 2300 	ldrd	r2, r3, [sl]
 801b866:	f7e4 fd0f 	bl	8000288 <__aeabi_dsub>
 801b86a:	4622      	mov	r2, r4
 801b86c:	462b      	mov	r3, r5
 801b86e:	f7e4 fd0b 	bl	8000288 <__aeabi_dsub>
 801b872:	4602      	mov	r2, r0
 801b874:	460b      	mov	r3, r1
 801b876:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b87a:	f7e4 fd05 	bl	8000288 <__aeabi_dsub>
 801b87e:	f1bb 0f00 	cmp.w	fp, #0
 801b882:	4604      	mov	r4, r0
 801b884:	460d      	mov	r5, r1
 801b886:	f6bf aed6 	bge.w	801b636 <atan+0x3e>
 801b88a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b88e:	461d      	mov	r5, r3
 801b890:	e6d1      	b.n	801b636 <atan+0x3e>
 801b892:	a51d      	add	r5, pc, #116	; (adr r5, 801b908 <atan+0x310>)
 801b894:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b898:	e6cd      	b.n	801b636 <atan+0x3e>
 801b89a:	bf00      	nop
 801b89c:	f3af 8000 	nop.w
 801b8a0:	54442d18 	.word	0x54442d18
 801b8a4:	bff921fb 	.word	0xbff921fb
 801b8a8:	8800759c 	.word	0x8800759c
 801b8ac:	7e37e43c 	.word	0x7e37e43c
 801b8b0:	e322da11 	.word	0xe322da11
 801b8b4:	3f90ad3a 	.word	0x3f90ad3a
 801b8b8:	24760deb 	.word	0x24760deb
 801b8bc:	3fa97b4b 	.word	0x3fa97b4b
 801b8c0:	a0d03d51 	.word	0xa0d03d51
 801b8c4:	3fb10d66 	.word	0x3fb10d66
 801b8c8:	c54c206e 	.word	0xc54c206e
 801b8cc:	3fb745cd 	.word	0x3fb745cd
 801b8d0:	920083ff 	.word	0x920083ff
 801b8d4:	3fc24924 	.word	0x3fc24924
 801b8d8:	5555550d 	.word	0x5555550d
 801b8dc:	3fd55555 	.word	0x3fd55555
 801b8e0:	2c6a6c2f 	.word	0x2c6a6c2f
 801b8e4:	bfa2b444 	.word	0xbfa2b444
 801b8e8:	52defd9a 	.word	0x52defd9a
 801b8ec:	3fadde2d 	.word	0x3fadde2d
 801b8f0:	af749a6d 	.word	0xaf749a6d
 801b8f4:	3fb3b0f2 	.word	0x3fb3b0f2
 801b8f8:	fe231671 	.word	0xfe231671
 801b8fc:	3fbc71c6 	.word	0x3fbc71c6
 801b900:	9998ebc4 	.word	0x9998ebc4
 801b904:	3fc99999 	.word	0x3fc99999
 801b908:	54442d18 	.word	0x54442d18
 801b90c:	3ff921fb 	.word	0x3ff921fb
 801b910:	440fffff 	.word	0x440fffff
 801b914:	7ff00000 	.word	0x7ff00000
 801b918:	3fdbffff 	.word	0x3fdbffff
 801b91c:	3ff00000 	.word	0x3ff00000
 801b920:	3ff2ffff 	.word	0x3ff2ffff
 801b924:	40038000 	.word	0x40038000
 801b928:	3ff80000 	.word	0x3ff80000
 801b92c:	bff00000 	.word	0xbff00000
 801b930:	0801c500 	.word	0x0801c500
 801b934:	0801c4e0 	.word	0x0801c4e0

0801b938 <fabs>:
 801b938:	ec51 0b10 	vmov	r0, r1, d0
 801b93c:	ee10 2a10 	vmov	r2, s0
 801b940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b944:	ec43 2b10 	vmov	d0, r2, r3
 801b948:	4770      	bx	lr
 801b94a:	0000      	movs	r0, r0
 801b94c:	0000      	movs	r0, r0
	...

0801b950 <floor>:
 801b950:	ec51 0b10 	vmov	r0, r1, d0
 801b954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b958:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b95c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b960:	2e13      	cmp	r6, #19
 801b962:	ee10 5a10 	vmov	r5, s0
 801b966:	ee10 8a10 	vmov	r8, s0
 801b96a:	460c      	mov	r4, r1
 801b96c:	dc32      	bgt.n	801b9d4 <floor+0x84>
 801b96e:	2e00      	cmp	r6, #0
 801b970:	da14      	bge.n	801b99c <floor+0x4c>
 801b972:	a333      	add	r3, pc, #204	; (adr r3, 801ba40 <floor+0xf0>)
 801b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b978:	f7e4 fc88 	bl	800028c <__adddf3>
 801b97c:	2200      	movs	r2, #0
 801b97e:	2300      	movs	r3, #0
 801b980:	f7e5 f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 801b984:	b138      	cbz	r0, 801b996 <floor+0x46>
 801b986:	2c00      	cmp	r4, #0
 801b988:	da57      	bge.n	801ba3a <floor+0xea>
 801b98a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b98e:	431d      	orrs	r5, r3
 801b990:	d001      	beq.n	801b996 <floor+0x46>
 801b992:	4c2d      	ldr	r4, [pc, #180]	; (801ba48 <floor+0xf8>)
 801b994:	2500      	movs	r5, #0
 801b996:	4621      	mov	r1, r4
 801b998:	4628      	mov	r0, r5
 801b99a:	e025      	b.n	801b9e8 <floor+0x98>
 801b99c:	4f2b      	ldr	r7, [pc, #172]	; (801ba4c <floor+0xfc>)
 801b99e:	4137      	asrs	r7, r6
 801b9a0:	ea01 0307 	and.w	r3, r1, r7
 801b9a4:	4303      	orrs	r3, r0
 801b9a6:	d01f      	beq.n	801b9e8 <floor+0x98>
 801b9a8:	a325      	add	r3, pc, #148	; (adr r3, 801ba40 <floor+0xf0>)
 801b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ae:	f7e4 fc6d 	bl	800028c <__adddf3>
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	f7e5 f8af 	bl	8000b18 <__aeabi_dcmpgt>
 801b9ba:	2800      	cmp	r0, #0
 801b9bc:	d0eb      	beq.n	801b996 <floor+0x46>
 801b9be:	2c00      	cmp	r4, #0
 801b9c0:	bfbe      	ittt	lt
 801b9c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b9c6:	fa43 f606 	asrlt.w	r6, r3, r6
 801b9ca:	19a4      	addlt	r4, r4, r6
 801b9cc:	ea24 0407 	bic.w	r4, r4, r7
 801b9d0:	2500      	movs	r5, #0
 801b9d2:	e7e0      	b.n	801b996 <floor+0x46>
 801b9d4:	2e33      	cmp	r6, #51	; 0x33
 801b9d6:	dd0b      	ble.n	801b9f0 <floor+0xa0>
 801b9d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b9dc:	d104      	bne.n	801b9e8 <floor+0x98>
 801b9de:	ee10 2a10 	vmov	r2, s0
 801b9e2:	460b      	mov	r3, r1
 801b9e4:	f7e4 fc52 	bl	800028c <__adddf3>
 801b9e8:	ec41 0b10 	vmov	d0, r0, r1
 801b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b9f4:	f04f 33ff 	mov.w	r3, #4294967295
 801b9f8:	fa23 f707 	lsr.w	r7, r3, r7
 801b9fc:	4207      	tst	r7, r0
 801b9fe:	d0f3      	beq.n	801b9e8 <floor+0x98>
 801ba00:	a30f      	add	r3, pc, #60	; (adr r3, 801ba40 <floor+0xf0>)
 801ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba06:	f7e4 fc41 	bl	800028c <__adddf3>
 801ba0a:	2200      	movs	r2, #0
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	f7e5 f883 	bl	8000b18 <__aeabi_dcmpgt>
 801ba12:	2800      	cmp	r0, #0
 801ba14:	d0bf      	beq.n	801b996 <floor+0x46>
 801ba16:	2c00      	cmp	r4, #0
 801ba18:	da02      	bge.n	801ba20 <floor+0xd0>
 801ba1a:	2e14      	cmp	r6, #20
 801ba1c:	d103      	bne.n	801ba26 <floor+0xd6>
 801ba1e:	3401      	adds	r4, #1
 801ba20:	ea25 0507 	bic.w	r5, r5, r7
 801ba24:	e7b7      	b.n	801b996 <floor+0x46>
 801ba26:	2301      	movs	r3, #1
 801ba28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ba2c:	fa03 f606 	lsl.w	r6, r3, r6
 801ba30:	4435      	add	r5, r6
 801ba32:	4545      	cmp	r5, r8
 801ba34:	bf38      	it	cc
 801ba36:	18e4      	addcc	r4, r4, r3
 801ba38:	e7f2      	b.n	801ba20 <floor+0xd0>
 801ba3a:	2500      	movs	r5, #0
 801ba3c:	462c      	mov	r4, r5
 801ba3e:	e7aa      	b.n	801b996 <floor+0x46>
 801ba40:	8800759c 	.word	0x8800759c
 801ba44:	7e37e43c 	.word	0x7e37e43c
 801ba48:	bff00000 	.word	0xbff00000
 801ba4c:	000fffff 	.word	0x000fffff

0801ba50 <scalbn>:
 801ba50:	b570      	push	{r4, r5, r6, lr}
 801ba52:	ec55 4b10 	vmov	r4, r5, d0
 801ba56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ba5a:	4606      	mov	r6, r0
 801ba5c:	462b      	mov	r3, r5
 801ba5e:	b99a      	cbnz	r2, 801ba88 <scalbn+0x38>
 801ba60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ba64:	4323      	orrs	r3, r4
 801ba66:	d036      	beq.n	801bad6 <scalbn+0x86>
 801ba68:	4b39      	ldr	r3, [pc, #228]	; (801bb50 <scalbn+0x100>)
 801ba6a:	4629      	mov	r1, r5
 801ba6c:	ee10 0a10 	vmov	r0, s0
 801ba70:	2200      	movs	r2, #0
 801ba72:	f7e4 fdc1 	bl	80005f8 <__aeabi_dmul>
 801ba76:	4b37      	ldr	r3, [pc, #220]	; (801bb54 <scalbn+0x104>)
 801ba78:	429e      	cmp	r6, r3
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	460d      	mov	r5, r1
 801ba7e:	da10      	bge.n	801baa2 <scalbn+0x52>
 801ba80:	a32b      	add	r3, pc, #172	; (adr r3, 801bb30 <scalbn+0xe0>)
 801ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba86:	e03a      	b.n	801bafe <scalbn+0xae>
 801ba88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ba8c:	428a      	cmp	r2, r1
 801ba8e:	d10c      	bne.n	801baaa <scalbn+0x5a>
 801ba90:	ee10 2a10 	vmov	r2, s0
 801ba94:	4620      	mov	r0, r4
 801ba96:	4629      	mov	r1, r5
 801ba98:	f7e4 fbf8 	bl	800028c <__adddf3>
 801ba9c:	4604      	mov	r4, r0
 801ba9e:	460d      	mov	r5, r1
 801baa0:	e019      	b.n	801bad6 <scalbn+0x86>
 801baa2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801baa6:	460b      	mov	r3, r1
 801baa8:	3a36      	subs	r2, #54	; 0x36
 801baaa:	4432      	add	r2, r6
 801baac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bab0:	428a      	cmp	r2, r1
 801bab2:	dd08      	ble.n	801bac6 <scalbn+0x76>
 801bab4:	2d00      	cmp	r5, #0
 801bab6:	a120      	add	r1, pc, #128	; (adr r1, 801bb38 <scalbn+0xe8>)
 801bab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801babc:	da1c      	bge.n	801baf8 <scalbn+0xa8>
 801babe:	a120      	add	r1, pc, #128	; (adr r1, 801bb40 <scalbn+0xf0>)
 801bac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bac4:	e018      	b.n	801baf8 <scalbn+0xa8>
 801bac6:	2a00      	cmp	r2, #0
 801bac8:	dd08      	ble.n	801badc <scalbn+0x8c>
 801baca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bace:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bad2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801bad6:	ec45 4b10 	vmov	d0, r4, r5
 801bada:	bd70      	pop	{r4, r5, r6, pc}
 801badc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bae0:	da19      	bge.n	801bb16 <scalbn+0xc6>
 801bae2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801bae6:	429e      	cmp	r6, r3
 801bae8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801baec:	dd0a      	ble.n	801bb04 <scalbn+0xb4>
 801baee:	a112      	add	r1, pc, #72	; (adr r1, 801bb38 <scalbn+0xe8>)
 801baf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d1e2      	bne.n	801babe <scalbn+0x6e>
 801baf8:	a30f      	add	r3, pc, #60	; (adr r3, 801bb38 <scalbn+0xe8>)
 801bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bafe:	f7e4 fd7b 	bl	80005f8 <__aeabi_dmul>
 801bb02:	e7cb      	b.n	801ba9c <scalbn+0x4c>
 801bb04:	a10a      	add	r1, pc, #40	; (adr r1, 801bb30 <scalbn+0xe0>)
 801bb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d0b8      	beq.n	801ba80 <scalbn+0x30>
 801bb0e:	a10e      	add	r1, pc, #56	; (adr r1, 801bb48 <scalbn+0xf8>)
 801bb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb14:	e7b4      	b.n	801ba80 <scalbn+0x30>
 801bb16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bb1a:	3236      	adds	r2, #54	; 0x36
 801bb1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bb20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bb24:	4620      	mov	r0, r4
 801bb26:	4b0c      	ldr	r3, [pc, #48]	; (801bb58 <scalbn+0x108>)
 801bb28:	2200      	movs	r2, #0
 801bb2a:	e7e8      	b.n	801bafe <scalbn+0xae>
 801bb2c:	f3af 8000 	nop.w
 801bb30:	c2f8f359 	.word	0xc2f8f359
 801bb34:	01a56e1f 	.word	0x01a56e1f
 801bb38:	8800759c 	.word	0x8800759c
 801bb3c:	7e37e43c 	.word	0x7e37e43c
 801bb40:	8800759c 	.word	0x8800759c
 801bb44:	fe37e43c 	.word	0xfe37e43c
 801bb48:	c2f8f359 	.word	0xc2f8f359
 801bb4c:	81a56e1f 	.word	0x81a56e1f
 801bb50:	43500000 	.word	0x43500000
 801bb54:	ffff3cb0 	.word	0xffff3cb0
 801bb58:	3c900000 	.word	0x3c900000

0801bb5c <_init>:
 801bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb5e:	bf00      	nop
 801bb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb62:	bc08      	pop	{r3}
 801bb64:	469e      	mov	lr, r3
 801bb66:	4770      	bx	lr

0801bb68 <_fini>:
 801bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb6a:	bf00      	nop
 801bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb6e:	bc08      	pop	{r3}
 801bb70:	469e      	mov	lr, r3
 801bb72:	4770      	bx	lr
