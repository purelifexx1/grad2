
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b2cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0801b460  0801b460  0002b460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc10  0801bc10  00030b80  2**0
                  CONTENTS
  4 .ARM          00000008  0801bc10  0801bc10  0002bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc18  0801bc18  00030b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc18  0801bc18  0002bc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc1c  0801bc1c  0002bc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b80  20000000  0801bc20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bdf0  20000b80  0801c7a0  00030b80  2**3
                  ALLOC
 10 ._user_heap_stack 000063c0  2000c970  0801c7a0  0003c970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031383  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065c1  00000000  00000000  00061f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dd0  00000000  00000000  000684f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b88  00000000  00000000  0006a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0aa  00000000  00000000  0006be50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020182  00000000  00000000  00095efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dddb7  00000000  00000000  000b607c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00193e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008be0  00000000  00000000  00193eb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b80 	.word	0x20000b80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b444 	.word	0x0801b444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b84 	.word	0x20000b84
 80001cc:	0801b444 	.word	0x0801b444

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <packetRead>:
//												"OKAY"};

Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef		Gcode_Cor[1000];
uint16_t point_counter = 0;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <packetRead+0x38>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 813e 	beq.w	8001238 <packetRead+0x2b0>
 8000fbc:	f000 be52 	b.w	8001c64 <packetRead+0xcdc>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	 = message[temp_pointer] & 0x0f;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	743b      	strb	r3, [r7, #16]
				switch (move_type){
 8000fd2:	7c3b      	ldrb	r3, [r7, #16]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 8127 	bhi.w	8001228 <packetRead+0x2a0>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <packetRead+0x58>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001061 	.word	0x08001061
 8000fe8:	08001121 	.word	0x08001121
 8000fec:	08001121 	.word	0x08001121
				case FIRST_PACKET:{
					temp_pointer++;
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8000ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_i2d>
 8001004:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d0 <packetRead+0x348>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4ab1      	ldr	r2, [pc, #708]	; (80012d8 <packetRead+0x350>)
 8001014:	e9c2 3400 	strd	r3, r4, [r2]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	3304      	adds	r3, #4
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 800101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa7c 	bl	8000524 <__aeabi_i2d>
 800102c:	a3a8      	add	r3, pc, #672	; (adr r3, 80012d0 <packetRead+0x348>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4aa8      	ldr	r2, [pc, #672]	; (80012dc <packetRead+0x354>)
 800103c:	e9c2 3400 	strd	r3, r4, [r2]
 8001040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001042:	3304      	adds	r3, #4
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4aa4      	ldr	r2, [pc, #656]	; (80012e0 <packetRead+0x358>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3304      	adds	r3, #4
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 8001058:	4ba2      	ldr	r3, [pc, #648]	; (80012e4 <packetRead+0x35c>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800105e:	e0e3      	b.n	8001228 <packetRead+0x2a0>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <packetRead+0x35c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	4aa0      	ldr	r2, [pc, #640]	; (80012e8 <packetRead+0x360>)
 8001068:	460b      	mov	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	3314      	adds	r3, #20
 8001074:	7c3a      	ldrb	r2, [r7, #16]
 8001076:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4a96      	ldr	r2, [pc, #600]	; (80012e4 <packetRead+0x35c>)
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	4a94      	ldr	r2, [pc, #592]	; (80012e8 <packetRead+0x360>)
 8001098:	460b      	mov	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	3315      	adds	r3, #21
 80010a4:	4602      	mov	r2, r0
 80010a6:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a8d      	ldr	r2, [pc, #564]	; (80012e4 <packetRead+0x35c>)
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4610      	mov	r0, r2
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	498c      	ldr	r1, [pc, #560]	; (80012e8 <packetRead+0x360>)
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	3304      	adds	r3, #4
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a84      	ldr	r2, [pc, #528]	; (80012e4 <packetRead+0x35c>)
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	4610      	mov	r0, r2
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4983      	ldr	r1, [pc, #524]	; (80012e8 <packetRead+0x360>)
 80010da:	4603      	mov	r3, r0
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3304      	adds	r3, #4
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3304      	adds	r3, #4
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a7b      	ldr	r2, [pc, #492]	; (80012e4 <packetRead+0x35c>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	4610      	mov	r0, r2
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	497a      	ldr	r1, [pc, #488]	; (80012e8 <packetRead+0x360>)
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4403      	add	r3, r0
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3308      	adds	r3, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	3304      	adds	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001112:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <packetRead+0x35c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <packetRead+0x35c>)
 800111c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800111e:	e083      	b.n	8001228 <packetRead+0x2a0>
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <packetRead+0x35c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <packetRead+0x360>)
 8001128:	460b      	mov	r3, r1
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	440b      	add	r3, r1
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	3314      	adds	r3, #20
 8001134:	7c3a      	ldrb	r2, [r7, #16]
 8001136:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <packetRead+0x35c>)
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	4a64      	ldr	r2, [pc, #400]	; (80012e8 <packetRead+0x360>)
 8001158:	460b      	mov	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	3315      	adds	r3, #21
 8001164:	4602      	mov	r2, r0
 8001166:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	4a5d      	ldr	r2, [pc, #372]	; (80012e4 <packetRead+0x35c>)
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	4610      	mov	r0, r2
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <packetRead+0x360>)
 8001178:	4603      	mov	r3, r0
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4403      	add	r3, r0
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	3304      	adds	r3, #4
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <packetRead+0x35c>)
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	4610      	mov	r0, r2
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4953      	ldr	r1, [pc, #332]	; (80012e8 <packetRead+0x360>)
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4403      	add	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	3304      	adds	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <packetRead+0x35c>)
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	494a      	ldr	r1, [pc, #296]	; (80012e8 <packetRead+0x360>)
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4403      	add	r3, r0
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3308      	adds	r3, #8
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	3304      	adds	r3, #4
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <packetRead+0x35c>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	4610      	mov	r0, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4941      	ldr	r1, [pc, #260]	; (80012e8 <packetRead+0x360>)
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	330c      	adds	r3, #12
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	3304      	adds	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <packetRead+0x35c>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4938      	ldr	r1, [pc, #224]	; (80012e8 <packetRead+0x360>)
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4403      	add	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	3304      	adds	r3, #4
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <packetRead+0x35c>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <packetRead+0x35c>)
 8001224:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001226:	bf00      	nop
				}
        	}while(temp_pointer < length);
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	429a      	cmp	r2, r3
 800122e:	f6ff aec9 	blt.w	8000fc4 <packetRead+0x3c>
        	return CMD_GCODE;
 8001232:	231a      	movs	r3, #26
 8001234:	f000 bd17 	b.w	8001c66 <packetRead+0xcde>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 8001240:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001244:	2b19      	cmp	r3, #25
 8001246:	f200 850b 	bhi.w	8001c60 <packetRead+0xcd8>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <packetRead+0x2c8>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	080012b9 	.word	0x080012b9
 8001254:	080012f1 	.word	0x080012f1
 8001258:	08001309 	.word	0x08001309
 800125c:	080013d1 	.word	0x080013d1
 8001260:	0800161d 	.word	0x0800161d
 8001264:	080013d1 	.word	0x080013d1
 8001268:	0800188f 	.word	0x0800188f
 800126c:	08001893 	.word	0x08001893
 8001270:	08001c61 	.word	0x08001c61
 8001274:	080018b3 	.word	0x080018b3
 8001278:	080018d1 	.word	0x080018d1
 800127c:	0800193d 	.word	0x0800193d
 8001280:	08001a0b 	.word	0x08001a0b
 8001284:	08001c31 	.word	0x08001c31
 8001288:	08001c41 	.word	0x08001c41
 800128c:	08001c61 	.word	0x08001c61
 8001290:	08001c61 	.word	0x08001c61
 8001294:	08001b6d 	.word	0x08001b6d
 8001298:	08001c51 	.word	0x08001c51
 800129c:	08001c21 	.word	0x08001c21
 80012a0:	080019a9 	.word	0x080019a9
 80012a4:	080019d3 	.word	0x080019d3
 80012a8:	08001c61 	.word	0x08001c61
 80012ac:	08001c61 	.word	0x08001c61
 80012b0:	08001a45 	.word	0x08001a45
 80012b4:	08001b25 	.word	0x08001b25
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f000 bccb 	b.w	8001c66 <packetRead+0xcde>
 80012d0:	a0000000 	.word	0xa0000000
 80012d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80012d8:	20004d68 	.word	0x20004d68
 80012dc:	20004d60 	.word	0x20004d60
 80012e0:	20004d80 	.word	0x20004d80
 80012e4:	20000b9c 	.word	0x20000b9c
 80012e8:	20004d84 	.word	0x20004d84
 80012ec:	358637bd 	.word	0x358637bd
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001302:	2301      	movs	r3, #1
 8001304:	f000 bcaf 	b.w	8001c66 <packetRead+0xcde>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d15d      	bne.n	80013ca <packetRead+0x442>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800130e:	f06f 0301 	mvn.w	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	3304      	adds	r3, #4
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80012ec <packetRead+0x364>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 80012ec <packetRead+0x364>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ee17 0a90 	vmov	r0, s15
 8001360:	f7ff f8f2 	bl	8000548 <__aeabi_f2d>
 8001364:	4603      	mov	r3, r0
 8001366:	460c      	mov	r4, r1
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	4ca6      	ldr	r4, [pc, #664]	; (8001610 <packetRead+0x688>)
 8001376:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	4ca4      	ldr	r4, [pc, #656]	; (8001614 <packetRead+0x68c>)
 8001382:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	4ca2      	ldr	r4, [pc, #648]	; (8001618 <packetRead+0x690>)
 800138e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	f04f 0400 	mov.w	r4, #0
 800139c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2201      	movs	r2, #1
 80013b0:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2202      	movs	r2, #2
 80013b6:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f000 bc4e 	b.w	8001c66 <packetRead+0xcde>
                        return CMD_ERROR;
 80013ca:	2316      	movs	r3, #22
 80013cc:	f000 bc4b 	b.w	8001c66 <packetRead+0xcde>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b1d      	cmp	r3, #29
 80013d4:	f040 8107 	bne.w	80015e6 <packetRead+0x65e>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80013d8:	f06f 0301 	mvn.w	r3, #1
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	3304      	adds	r3, #4
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f899 	bl	8000524 <__aeabi_i2d>
 80013f2:	a385      	add	r3, pc, #532	; (adr r3, 8001608 <packetRead+0x680>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f8fe 	bl	80005f8 <__aeabi_dmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	3304      	adds	r3, #4
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	a37b      	add	r3, pc, #492	; (adr r3, 8001608 <packetRead+0x680>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8ea 	bl	80005f8 <__aeabi_dmul>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	3304      	adds	r3, #4
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f871 	bl	8000524 <__aeabi_i2d>
 8001442:	a371      	add	r3, pc, #452	; (adr r3, 8001608 <packetRead+0x680>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f8d6 	bl	80005f8 <__aeabi_dmul>
 800144c:	4603      	mov	r3, r0
 800144e:	460c      	mov	r4, r1
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	3304      	adds	r3, #4
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f85d 	bl	8000524 <__aeabi_i2d>
 800146a:	a367      	add	r3, pc, #412	; (adr r3, 8001608 <packetRead+0x680>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8c2 	bl	80005f8 <__aeabi_dmul>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	3304      	adds	r3, #4
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f849 	bl	8000524 <__aeabi_i2d>
 8001492:	a35d      	add	r3, pc, #372	; (adr r3, 8001608 <packetRead+0x680>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f8ae 	bl	80005f8 <__aeabi_dmul>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	3304      	adds	r3, #4
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	747b      	strb	r3, [r7, #17]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80014b6:	7c7b      	ldrb	r3, [r7, #17]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d117      	bne.n	80014ec <packetRead+0x564>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	3301      	adds	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f827 	bl	8000524 <__aeabi_i2d>
 80014d6:	a34c      	add	r3, pc, #304	; (adr r3, 8001608 <packetRead+0x680>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f88c 	bl	80005f8 <__aeabi_dmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 80014ea:	e052      	b.n	8001592 <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80014ec:	7c7b      	ldrb	r3, [r7, #17]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d117      	bne.n	8001522 <packetRead+0x59a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	3301      	adds	r3, #1
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f80c 	bl	8000524 <__aeabi_i2d>
 800150c:	a33e      	add	r3, pc, #248	; (adr r3, 8001608 <packetRead+0x680>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f871 	bl	80005f8 <__aeabi_dmul>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001520:	e037      	b.n	8001592 <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001522:	7c7b      	ldrb	r3, [r7, #17]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d117      	bne.n	8001558 <packetRead+0x5d0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2203      	movs	r2, #3
 800152c:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	3301      	adds	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	a331      	add	r3, pc, #196	; (adr r3, 8001608 <packetRead+0x680>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f856 	bl	80005f8 <__aeabi_dmul>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001556:	e01c      	b.n	8001592 <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001558:	7c7b      	ldrb	r3, [r7, #17]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d117      	bne.n	800158e <packetRead+0x606>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2202      	movs	r2, #2
 8001562:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	3301      	adds	r3, #1
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	a323      	add	r3, pc, #140	; (adr r3, 8001608 <packetRead+0x680>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f83b 	bl	80005f8 <__aeabi_dmul>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800158c:	e001      	b.n	8001592 <packetRead+0x60a>
						}else{
							return CMD_ERROR;
 800158e:	2316      	movs	r3, #22
 8001590:	e369      	b.n	8001c66 <packetRead+0xcde>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	3304      	adds	r3, #4
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	3301      	adds	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80015b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d106      	bne.n	80015cc <packetRead+0x644>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	735a      	strb	r2, [r3, #13]
 80015ca:	e00e      	b.n	80015ea <packetRead+0x662>
						}else if(command_id == CMD_MOVE_JOINT){
 80015cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d106      	bne.n	80015e2 <packetRead+0x65a>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	735a      	strb	r2, [r3, #13]
 80015e0:	e003      	b.n	80015ea <packetRead+0x662>
						}else{
							return CMD_ERROR;
 80015e2:	2316      	movs	r3, #22
 80015e4:	e33f      	b.n	8001c66 <packetRead+0xcde>
						}

					}else{
						return CMD_ERROR;
 80015e6:	2316      	movs	r3, #22
 80015e8:	e33d      	b.n	8001c66 <packetRead+0xcde>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2202      	movs	r2, #2
 80015ee:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
					return command_id;
 80015fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001600:	e331      	b.n	8001c66 <packetRead+0xcde>
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	a0000000 	.word	0xa0000000
 800160c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001610:	406f4000 	.word	0x406f4000
 8001614:	c0690000 	.word	0xc0690000
 8001618:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b22      	cmp	r3, #34	; 0x22
 8001620:	f040 8133 	bne.w	800188a <packetRead+0x902>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001624:	f06f 0301 	mvn.w	r3, #1
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	3304      	adds	r3, #4
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_i2d>
 800163e:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	3304      	adds	r3, #4
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f20f 43ec 	addw	r3, pc, #1260	; 0x4ec
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	3304      	adds	r3, #4
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff49 	bl	8000524 <__aeabi_i2d>
 8001692:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	3304      	adds	r3, #4
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff34 	bl	8000524 <__aeabi_i2d>
 80016bc:	f20f 4398 	addw	r3, pc, #1176	; 0x498
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff98 	bl	80005f8 <__aeabi_dmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	3304      	adds	r3, #4
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_i2d>
 80016e6:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff83 	bl	80005f8 <__aeabi_dmul>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	3304      	adds	r3, #4
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff0a 	bl	8000524 <__aeabi_i2d>
 8001710:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff6e 	bl	80005f8 <__aeabi_dmul>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
                		arc_type = message[temp_pointer+=4];
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	3304      	adds	r3, #4
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	74fb      	strb	r3, [r7, #19]
                		if(arc_type == ARC_AW_TYPE){
 8001736:	7cfb      	ldrb	r3, [r7, #19]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d103      	bne.n	8001744 <packetRead+0x7bc>
                			duty_cmd->arc_dir = 1;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	e009      	b.n	8001758 <packetRead+0x7d0>
                		}else if(arc_type == ARC_CW_TYPE){
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d104      	bne.n	8001754 <packetRead+0x7cc>
                			duty_cmd->arc_dir = -1;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	e001      	b.n	8001758 <packetRead+0x7d0>
                		}else{
                			return CMD_ERROR;
 8001754:	2316      	movs	r3, #22
 8001756:	e286      	b.n	8001c66 <packetRead+0xcde>
                		}
                		mode_init = message[temp_pointer+=1];
 8001758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175a:	3301      	adds	r3, #1
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	74bb      	strb	r3, [r7, #18]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001768:	7cbb      	ldrb	r3, [r7, #18]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d117      	bne.n	800179e <packetRead+0x816>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	3301      	adds	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fece 	bl	8000524 <__aeabi_i2d>
 8001788:	a3f3      	add	r3, pc, #972	; (adr r3, 8001b58 <packetRead+0xbd0>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff33 	bl	80005f8 <__aeabi_dmul>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 800179c:	e052      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 800179e:	7cbb      	ldrb	r3, [r7, #18]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d117      	bne.n	80017d4 <packetRead+0x84c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	3301      	adds	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe feb3 	bl	8000524 <__aeabi_i2d>
 80017be:	a3e6      	add	r3, pc, #920	; (adr r3, 8001b58 <packetRead+0xbd0>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff18 	bl	80005f8 <__aeabi_dmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80017d2:	e037      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80017d4:	7cbb      	ldrb	r3, [r7, #18]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d117      	bne.n	800180a <packetRead+0x882>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2203      	movs	r2, #3
 80017de:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	3301      	adds	r3, #1
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe98 	bl	8000524 <__aeabi_i2d>
 80017f4:	a3d8      	add	r3, pc, #864	; (adr r3, 8001b58 <packetRead+0xbd0>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001808:	e01c      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 800180a:	7cbb      	ldrb	r3, [r7, #18]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d117      	bne.n	8001840 <packetRead+0x8b8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2202      	movs	r2, #2
 8001814:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	3301      	adds	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe7d 	bl	8000524 <__aeabi_i2d>
 800182a:	a3cb      	add	r3, pc, #812	; (adr r3, 8001b58 <packetRead+0xbd0>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fee2 	bl	80005f8 <__aeabi_dmul>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800183e:	e001      	b.n	8001844 <packetRead+0x8bc>
						}else{
							return CMD_ERROR;
 8001840:	2316      	movs	r3, #22
 8001842:	e210      	b.n	8001c66 <packetRead+0xcde>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	3304      	adds	r3, #4
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	3301      	adds	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001886:	2304      	movs	r3, #4
 8001888:	e1ed      	b.n	8001c66 <packetRead+0xcde>
                		return CMD_ERROR;
 800188a:	2316      	movs	r3, #22
 800188c:	e1eb      	b.n	8001c66 <packetRead+0xcde>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 800188e:	2306      	movs	r3, #6
 8001890:	e1e9      	b.n	8001c66 <packetRead+0xcde>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d10a      	bne.n	80018ae <packetRead+0x926>
						temp_pointer = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 800189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 80018aa:	2307      	movs	r3, #7
 80018ac:	e1db      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 80018ae:	2316      	movs	r3, #22
 80018b0:	e1d9      	b.n	8001c66 <packetRead+0xcde>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d109      	bne.n	80018cc <packetRead+0x944>
						temp_pointer = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	4ba6      	ldr	r3, [pc, #664]	; (8001b60 <packetRead+0xbd8>)
 80018c6:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 80018c8:	2309      	movs	r3, #9
 80018ca:	e1cc      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 80018cc:	2316      	movs	r3, #22
 80018ce:	e1ca      	b.n	8001c66 <packetRead+0xcde>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d130      	bne.n	8001938 <packetRead+0x9b0>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e0:	461a      	mov	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 80018f4:	7d7b      	ldrb	r3, [r7, #21]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <packetRead+0x97a>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	731a      	strb	r2, [r3, #12]
 8001900:	e008      	b.n	8001914 <packetRead+0x98c>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 8001902:	7d7b      	ldrb	r3, [r7, #21]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d103      	bne.n	8001910 <packetRead+0x988>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2201      	movs	r2, #1
 800190c:	731a      	strb	r2, [r3, #12]
 800190e:	e001      	b.n	8001914 <packetRead+0x98c>
						} else {
							return CMD_ERROR;
 8001910:	2316      	movs	r3, #22
 8001912:	e1a8      	b.n	8001c66 <packetRead+0xcde>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 8001914:	7d3b      	ldrb	r3, [r7, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <packetRead+0x99a>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	741a      	strb	r2, [r3, #16]
 8001920:	e008      	b.n	8001934 <packetRead+0x9ac>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 8001922:	7d3b      	ldrb	r3, [r7, #20]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d103      	bne.n	8001930 <packetRead+0x9a8>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	741a      	strb	r2, [r3, #16]
 800192e:	e001      	b.n	8001934 <packetRead+0x9ac>
						} else {
							return CMD_ERROR;
 8001930:	2316      	movs	r3, #22
 8001932:	e198      	b.n	8001c66 <packetRead+0xcde>
						}
						return CMD_SETTING;
 8001934:	230a      	movs	r3, #10
 8001936:	e196      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001938:	2316      	movs	r3, #22
 800193a:	e194      	b.n	8001c66 <packetRead+0xcde>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d130      	bne.n	80019a4 <packetRead+0xa1c>
						uint8_t method;
						temp_pointer = 2;
 8001942:	2302      	movs	r3, #2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001950:	7dbb      	ldrb	r3, [r7, #22]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <packetRead+0x9d6>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	705a      	strb	r2, [r3, #1]
 800195c:	e01d      	b.n	800199a <packetRead+0xa12>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 800195e:	7dbb      	ldrb	r3, [r7, #22]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d103      	bne.n	800196c <packetRead+0x9e4>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	705a      	strb	r2, [r3, #1]
 800196a:	e016      	b.n	800199a <packetRead+0xa12>
						} else if (SCARA_METHOD_GCODE == method) {
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d103      	bne.n	800197a <packetRead+0x9f2>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2202      	movs	r2, #2
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	e00f      	b.n	800199a <packetRead+0xa12>
						}else if(SCARA_METHOD_TEST == method){
 800197a:	7dbb      	ldrb	r3, [r7, #22]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d103      	bne.n	8001988 <packetRead+0xa00>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2203      	movs	r2, #3
 8001984:	705a      	strb	r2, [r3, #1]
 8001986:	e008      	b.n	800199a <packetRead+0xa12>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001988:	7dbb      	ldrb	r3, [r7, #22]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d103      	bne.n	8001996 <packetRead+0xa0e>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2204      	movs	r2, #4
 8001992:	705a      	strb	r2, [r3, #1]
 8001994:	e001      	b.n	800199a <packetRead+0xa12>
						}else {
							return CMD_ERROR;
 8001996:	2316      	movs	r3, #22
 8001998:	e165      	b.n	8001c66 <packetRead+0xcde>
						}
						duty_cmd->change_method = TRUE;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 80019a0:	230b      	movs	r3, #11
 80019a2:	e160      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 80019a4:	2316      	movs	r3, #22
 80019a6:	e15e      	b.n	8001c66 <packetRead+0xcde>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d10f      	bne.n	80019ce <packetRead+0xa46>
						int temp_pointer = 2;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 80019ca:	2314      	movs	r3, #20
 80019cc:	e14b      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 80019ce:	2316      	movs	r3, #22
 80019d0:	e149      	b.n	8001c66 <packetRead+0xcde>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d116      	bne.n	8001a06 <packetRead+0xa7e>
						int temp_pointer = 2;
 80019d8:	2302      	movs	r3, #2
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dd02      	ble.n	80019f2 <packetRead+0xa6a>
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	2b0e      	cmp	r3, #14
 80019f0:	dd01      	ble.n	80019f6 <packetRead+0xa6e>
							return CMD_ERROR;
 80019f2:	2316      	movs	r3, #22
 80019f4:	e137      	b.n	8001c66 <packetRead+0xcde>
						}
						duty_cmd->key_speed = speed;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 80019fc:	4a59      	ldr	r2, [pc, #356]	; (8001b64 <packetRead+0xbdc>)
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001a02:	2315      	movs	r3, #21
 8001a04:	e12f      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001a06:	2316      	movs	r3, #22
 8001a08:	e12d      	b.n	8001c66 <packetRead+0xcde>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d117      	bne.n	8001a40 <packetRead+0xab8>
						int temp_pointer = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d901      	bls.n	8001a28 <packetRead+0xaa0>
							return CMD_ERROR;
 8001a24:	2316      	movs	r3, #22
 8001a26:	e11e      	b.n	8001c66 <packetRead+0xcde>
						}
						duty_cmd->test_key = test_key;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	7dfa      	ldrb	r2, [r7, #23]
 8001a2c:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2203      	movs	r2, #3
 8001a34:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	e112      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001a40:	2316      	movs	r3, #22
 8001a42:	e110      	b.n	8001c66 <packetRead+0xcde>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	d16a      	bne.n	8001b20 <packetRead+0xb98>
						temp_pointer = -2;
 8001a4a:	f06f 0301 	mvn.w	r3, #1
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a52:	3304      	adds	r3, #4
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd60 	bl	8000524 <__aeabi_i2d>
 8001a64:	a33c      	add	r3, pc, #240	; (adr r3, 8001b58 <packetRead+0xbd0>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fdc5 	bl	80005f8 <__aeabi_dmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	460c      	mov	r4, r1
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd4c 	bl	8000524 <__aeabi_i2d>
 8001a8c:	a332      	add	r3, pc, #200	; (adr r3, 8001b58 <packetRead+0xbd0>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fdb1 	bl	80005f8 <__aeabi_dmul>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd38 	bl	8000524 <__aeabi_i2d>
 8001ab4:	a328      	add	r3, pc, #160	; (adr r3, 8001b58 <packetRead+0xbd0>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fd9d 	bl	80005f8 <__aeabi_dmul>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	3304      	adds	r3, #4
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd0e 	bl	8000504 <__aeabi_ui2d>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2204      	movs	r2, #4
 8001b14:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001b1c:	2318      	movs	r3, #24
 8001b1e:	e0a2      	b.n	8001c66 <packetRead+0xcde>
						return CMD_ERROR;
 8001b20:	2316      	movs	r3, #22
 8001b22:	e0a0      	b.n	8001c66 <packetRead+0xcde>
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d114      	bne.n	8001b54 <packetRead+0xbcc>
						temp_pointer = 2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcf4 	bl	8000524 <__aeabi_i2d>
 8001b3c:	a306      	add	r3, pc, #24	; (adr r3, 8001b58 <packetRead+0xbd0>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fd59 	bl	80005f8 <__aeabi_dmul>
 8001b46:	4603      	mov	r3, r0
 8001b48:	460c      	mov	r4, r1
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <packetRead+0xbe0>)
 8001b4c:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001b50:	2319      	movs	r3, #25
 8001b52:	e088      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001b54:	2316      	movs	r3, #22
 8001b56:	e086      	b.n	8001c66 <packetRead+0xcde>
 8001b58:	a0000000 	.word	0xa0000000
 8001b5c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001b60:	2000ab44 	.word	0x2000ab44
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000ba0 	.word	0x20000ba0
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d154      	bne.n	8001c1c <packetRead+0xc94>
						temp_pointer = -2;
 8001b72:	f06f 0301 	mvn.w	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fccc 	bl	8000524 <__aeabi_i2d>
 8001b8c:	a338      	add	r3, pc, #224	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fd31 	bl	80005f8 <__aeabi_dmul>
 8001b96:	4603      	mov	r3, r0
 8001b98:	460c      	mov	r4, r1
 8001b9a:	4a37      	ldr	r2, [pc, #220]	; (8001c78 <packetRead+0xcf0>)
 8001b9c:	e9c2 3400 	strd	r3, r4, [r2]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcb8 	bl	8000524 <__aeabi_i2d>
 8001bb4:	a32e      	add	r3, pc, #184	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	f7fe fd1d 	bl	80005f8 <__aeabi_dmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460c      	mov	r4, r1
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <packetRead+0xcf4>)
 8001bc4:	e9c2 3400 	strd	r3, r4, [r2]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bca:	3304      	adds	r3, #4
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fca4 	bl	8000524 <__aeabi_i2d>
 8001bdc:	a324      	add	r3, pc, #144	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fd09 	bl	80005f8 <__aeabi_dmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	460c      	mov	r4, r1
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <packetRead+0xcf8>)
 8001bec:	e9c2 3400 	strd	r3, r4, [r2]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc90 	bl	8000524 <__aeabi_i2d>
 8001c04:	a31a      	add	r3, pc, #104	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe fcf5 	bl	80005f8 <__aeabi_dmul>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <packetRead+0xcfc>)
 8001c14:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_GCODE_CONFIGURE;
 8001c18:	2311      	movs	r3, #17
 8001c1a:	e024      	b.n	8001c66 <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001c1c:	2316      	movs	r3, #22
 8001c1e:	e022      	b.n	8001c66 <packetRead+0xcde>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001c2c:	2313      	movs	r3, #19
 8001c2e:	e01a      	b.n	8001c66 <packetRead+0xcde>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2202      	movs	r2, #2
 8001c34:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001c3c:	230d      	movs	r3, #13
 8001c3e:	e012      	b.n	8001c66 <packetRead+0xcde>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2202      	movs	r2, #2
 8001c44:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001c4c:	230e      	movs	r3, #14
 8001c4e:	e00a      	b.n	8001c66 <packetRead+0xcde>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	e002      	b.n	8001c66 <packetRead+0xcde>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001c60:	2316      	movs	r3, #22
 8001c62:	e000      	b.n	8001c66 <packetRead+0xcde>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001c64:	2317      	movs	r3, #23
        }
    }
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3734      	adds	r7, #52	; 0x34
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	a0000000 	.word	0xa0000000
 8001c74:	3eb0c6f7 	.word	0x3eb0c6f7
 8001c78:	20004d78 	.word	0x20004d78
 8001c7c:	2000ab50 	.word	0x2000ab50
 8001c80:	2000ab48 	.word	0x2000ab48
 8001c84:	20004d70 	.word	0x20004d70

08001c88 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001c88:	b082      	sub	sp, #8
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b0e2      	sub	sp, #392	; 0x188
 8001c8e:	af2e      	add	r7, sp, #184	; 0xb8
 8001c90:	4601      	mov	r1, r0
 8001c92:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001c96:	e880 000c 	stmia.w	r0, {r2, r3}
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b1a      	cmp	r3, #26
 8001ca2:	f200 81b7 	bhi.w	8002014 <commandReply+0x38c>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <commandReply+0x24>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d19 	.word	0x08001d19
 8001cb0:	08001d19 	.word	0x08001d19
 8001cb4:	08001d19 	.word	0x08001d19
 8001cb8:	08001d19 	.word	0x08001d19
 8001cbc:	08001d19 	.word	0x08001d19
 8001cc0:	08001d19 	.word	0x08001d19
 8001cc4:	08001d19 	.word	0x08001d19
 8001cc8:	08001d21 	.word	0x08001d21
 8001ccc:	08001d9b 	.word	0x08001d9b
 8001cd0:	08001dcf 	.word	0x08001dcf
 8001cd4:	08001e65 	.word	0x08001e65
 8001cd8:	08001f41 	.word	0x08001f41
 8001cdc:	08001d19 	.word	0x08001d19
 8001ce0:	08001fa3 	.word	0x08001fa3
 8001ce4:	08001fa3 	.word	0x08001fa3
 8001ce8:	08001fa3 	.word	0x08001fa3
 8001cec:	08001fa3 	.word	0x08001fa3
 8001cf0:	08001f81 	.word	0x08001f81
 8001cf4:	08001fa3 	.word	0x08001fa3
 8001cf8:	08001fa3 	.word	0x08001fa3
 8001cfc:	08001fab 	.word	0x08001fab
 8001d00:	08001fb3 	.word	0x08001fb3
 8001d04:	08001ff3 	.word	0x08001ff3
 8001d08:	08002015 	.word	0x08002015
 8001d0c:	08001d19 	.word	0x08001d19
 8001d10:	08001f39 	.word	0x08001f39
 8001d14:	08001f49 	.word	0x08001f49
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001d18:	2309      	movs	r3, #9
 8001d1a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001d1e:	e189      	b.n	8002034 <commandReply+0x3ac>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 8001d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d110      	bne.n	8001d4a <commandReply+0xc2>
				scaraSetOutput(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f008 fd8d 	bl	800a848 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8001d2e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d3a:	6011      	str	r1, [r2, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d42:	4413      	add	r3, r2
 8001d44:	220d      	movs	r2, #13
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e023      	b.n	8001d92 <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 8001d4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d110      	bne.n	8001d74 <commandReply+0xec>
				scaraSetOutput(0);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f008 fd78 	bl	800a848 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8001d58:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d64:	6011      	str	r1, [r2, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d6c:	4413      	add	r3, r2
 8001d6e:	220e      	movs	r2, #14
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e00e      	b.n	8001d92 <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001d74:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1c59      	adds	r1, r3, #1
 8001d7c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d80:	6011      	str	r1, [r2, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d88:	4413      	add	r3, r2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001d8e:	2307      	movs	r3, #7
 8001d90:	e152      	b.n	8002038 <commandReply+0x3b0>
			}
			ret = RPD_OK;
 8001d92:	2308      	movs	r3, #8
 8001d94:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001d98:	e14c      	b.n	8002034 <commandReply+0x3ac>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001d9a:	f008 fdb7 	bl	800a90c <scaraGetMode>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001da4:	f008 fdca 	bl	800a93c <scaraGetDutyState>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001dae:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <commandReply+0x13e>
 8001db6:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <commandReply+0x13e>
				ret = RPD_IDLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001dc4:	e136      	b.n	8002034 <commandReply+0x3ac>
				ret = RPD_BUSY;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001dcc:	e132      	b.n	8002034 <commandReply+0x3ac>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001dce:	4b9e      	ldr	r3, [pc, #632]	; (8002048 <commandReply+0x3c0>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <commandReply+0x156>
 8001dd6:	4b9c      	ldr	r3, [pc, #624]	; (8002048 <commandReply+0x3c0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d113      	bne.n	8001e06 <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f8b8 	bl	8004f58 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 f98f 	bl	8004110 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001df2:	4b95      	ldr	r3, [pc, #596]	; (8002048 <commandReply+0x3c0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d11e      	bne.n	8001e38 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f008 fd74 	bl	800a8ec <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001e04:	e018      	b.n	8001e38 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8001e06:	4b90      	ldr	r3, [pc, #576]	; (8002048 <commandReply+0x3c0>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d105      	bne.n	8001e1a <commandReply+0x192>
				scaraGetPosition(&position);
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	4618      	mov	r0, r3
 8001e14:	f008 fd5a 	bl	800a8cc <scaraGetPosition>
 8001e18:	e00e      	b.n	8001e38 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8001e1a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1c59      	adds	r1, r3, #1
 8001e22:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e26:	6011      	str	r1, [r2, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001e2e:	4413      	add	r3, r2
 8001e30:	2210      	movs	r2, #16
 8001e32:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001e34:	2307      	movs	r3, #7
 8001e36:	e0ff      	b.n	8002038 <commandReply+0x3b0>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8001e38:	4668      	mov	r0, sp
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	22b8      	movs	r2, #184	; 0xb8
 8001e40:	4619      	mov	r1, r3
 8001e42:	f014 f89b 	bl	8015f7c <memcpy>
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	cb0c      	ldmia	r3, {r2, r3}
 8001e4c:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001e50:	f008 fdaa 	bl	800a9a8 <scaraPosition_packaging>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e5a:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001e62:	e0e7      	b.n	8002034 <commandReply+0x3ac>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001e64:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10d      	bne.n	8001e88 <commandReply+0x200>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 8001e6c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	1c59      	adds	r1, r3, #1
 8001e74:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e78:	6011      	str	r1, [r2, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001e80:	4413      	add	r3, r2
 8001e82:	2211      	movs	r2, #17
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e020      	b.n	8001eca <commandReply+0x242>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001e88:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10d      	bne.n	8001eac <commandReply+0x224>
			detail[(*detail_length)++] = RELATIVE;
 8001e90:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	1c59      	adds	r1, r3, #1
 8001e98:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ea4:	4413      	add	r3, r2
 8001ea6:	2212      	movs	r2, #18
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e00e      	b.n	8001eca <commandReply+0x242>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 8001eac:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ec0:	4413      	add	r3, r2
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e0b6      	b.n	8002038 <commandReply+0x3b0>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001eca:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <commandReply+0x266>
			detail[(*detail_length)++] = LSPB;
 8001ed2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c59      	adds	r1, r3, #1
 8001eda:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ede:	6011      	str	r1, [r2, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2213      	movs	r2, #19
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e020      	b.n	8001f30 <commandReply+0x2a8>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001eee:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10d      	bne.n	8001f12 <commandReply+0x28a>
			detail[(*detail_length)++] = S_CURVE;
 8001ef6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f02:	6011      	str	r1, [r2, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2214      	movs	r2, #20
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e00e      	b.n	8001f30 <commandReply+0x2a8>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 8001f12:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1c59      	adds	r1, r3, #1
 8001f1a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f1e:	6011      	str	r1, [r2, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f26:	4413      	add	r3, r2
 8001f28:	2205      	movs	r2, #5
 8001f2a:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	e083      	b.n	8002038 <commandReply+0x3b0>
		}		
		ret = RPD_OK;
 8001f30:	2308      	movs	r3, #8
 8001f32:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001f36:	e07d      	b.n	8002034 <commandReply+0x3ac>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001f3e:	e079      	b.n	8002034 <commandReply+0x3ac>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001f40:	2309      	movs	r3, #9
 8001f42:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001f46:	e075      	b.n	8002034 <commandReply+0x3ac>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 8001f48:	4b40      	ldr	r3, [pc, #256]	; (800204c <commandReply+0x3c4>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <commandReply+0x3c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d110      	bne.n	8001f78 <commandReply+0x2f0>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8001f56:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	1c59      	adds	r1, r3, #1
 8001f5e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f62:	6011      	str	r1, [r2, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f6a:	4413      	add	r3, r2
 8001f6c:	221e      	movs	r2, #30
 8001f6e:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8001f70:	2308      	movs	r3, #8
 8001f72:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8001f76:	e05d      	b.n	8002034 <commandReply+0x3ac>
			ret = RPD_TRANSFER;
 8001f78:	230a      	movs	r3, #10
 8001f7a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8001f7e:	e059      	b.n	8002034 <commandReply+0x3ac>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8001f80:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f8c:	6011      	str	r1, [r2, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f94:	4413      	add	r3, r2
 8001f96:	221f      	movs	r2, #31
 8001f98:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 8001fa0:	e048      	b.n	8002034 <commandReply+0x3ac>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 8001fa2:	2309      	movs	r3, #9
 8001fa4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001fa8:	e044      	b.n	8002034 <commandReply+0x3ac>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001faa:	2309      	movs	r3, #9
 8001fac:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001fb0:	e040      	b.n	8002034 <commandReply+0x3ac>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 8001fb2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1c59      	adds	r1, r3, #1
 8001fba:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001fbe:	6011      	str	r1, [r2, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2216      	movs	r2, #22
 8001fca:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8001fcc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001fd0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b2c2      	uxtb	r2, r0
 8001fe8:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001fea:	2308      	movs	r3, #8
 8001fec:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001ff0:	e020      	b.n	8002034 <commandReply+0x3ac>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8001ff2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1c59      	adds	r1, r3, #1
 8001ffa:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ffe:	6011      	str	r1, [r2, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002006:	4413      	add	r3, r2
 8002008:	2215      	movs	r2, #21
 800200a:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800200c:	2307      	movs	r3, #7
 800200e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002012:	e00f      	b.n	8002034 <commandReply+0x3ac>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8002014:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1c59      	adds	r1, r3, #1
 800201c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002020:	6011      	str	r1, [r2, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002028:	4413      	add	r3, r2
 800202a:	2217      	movs	r2, #23
 800202c:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800202e:	2307      	movs	r3, #7
 8002030:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 8002034:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8002038:	4618      	mov	r0, r3
 800203a:	37d0      	adds	r7, #208	; 0xd0
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002042:	b002      	add	sp, #8
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000ab44 	.word	0x2000ab44
 800204c:	20000b9c 	.word	0x20000b9c
 8002050:	20004d80 	.word	0x20004d80

08002054 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	617a      	str	r2, [r7, #20]
 800206e:	461a      	mov	r2, r3
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	4413      	add	r3, r2
 8002074:	2228      	movs	r2, #40	; 0x28
 8002076:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	617a      	str	r2, [r7, #20]
 800207e:	461a      	mov	r2, r3
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	4413      	add	r3, r2
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	617a      	str	r2, [r7, #20]
 800208e:	461a      	mov	r2, r3
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	4413      	add	r3, r2
 8002094:	2202      	movs	r2, #2
 8002096:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	617a      	str	r2, [r7, #20]
 800209e:	461a      	mov	r2, r3
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	4413      	add	r3, r2
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	617a      	str	r2, [r7, #20]
 80020ae:	461a      	mov	r2, r3
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	4413      	add	r3, r2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	6a3a      	ldr	r2, [r7, #32]
 80020c4:	4413      	add	r3, r2
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f013 ff56 	bl	8015f7c <memcpy>
		out_length += detail_length;
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e007      	b.n	80020ea <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	617a      	str	r2, [r7, #20]
 80020e0:	461a      	mov	r2, r3
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	4413      	add	r3, r2
 80020e6:	2225      	movs	r2, #37	; 0x25
 80020e8:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	617a      	str	r2, [r7, #20]
 80020f0:	461a      	mov	r2, r3
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	4413      	add	r3, r2
 80020f6:	227d      	movs	r2, #125	; 0x7d
 80020f8:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	617a      	str	r2, [r7, #20]
 8002100:	461a      	mov	r2, r3
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	4413      	add	r3, r2
 8002106:	2229      	movs	r2, #41	; 0x29
 8002108:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	3301      	adds	r3, #1
 8002112:	3a02      	subs	r2, #2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002118:	697b      	ldr	r3, [r7, #20]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b096      	sub	sp, #88	; 0x58
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	f107 0008 	add.w	r0, r7, #8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <LOG_REPORT+0x78>)
 800213e:	213f      	movs	r1, #63	; 0x3f
 8002140:	f014 fe44 	bl	8016dcc <sniprintf>
 8002144:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8002146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d101      	bne.n	8002152 <LOG_REPORT+0x2e>
		return FALSE;
 800214e:	2300      	movs	r3, #0
 8002150:	e01f      	b.n	8002192 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002158:	4619      	mov	r1, r3
 800215a:	4811      	ldr	r0, [pc, #68]	; (80021a0 <LOG_REPORT+0x7c>)
 800215c:	f002 fc1d 	bl	800499a <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8002160:	4810      	ldr	r0, [pc, #64]	; (80021a4 <LOG_REPORT+0x80>)
 8002162:	f009 feed 	bl	800bf40 <HAL_DMA_GetState>
 8002166:	4603      	mov	r3, r0
 8002168:	2b02      	cmp	r3, #2
 800216a:	d101      	bne.n	8002170 <LOG_REPORT+0x4c>
		return TRUE;
 800216c:	2301      	movs	r3, #1
 800216e:	e010      	b.n	8002192 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <LOG_REPORT+0x84>)
 8002176:	480a      	ldr	r0, [pc, #40]	; (80021a0 <LOG_REPORT+0x7c>)
 8002178:	f002 fc37 	bl	80049ea <ringBuff_PopArray>
 800217c:	4603      	mov	r3, r0
 800217e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8002182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002186:	461a      	mov	r2, r3
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <LOG_REPORT+0x84>)
 800218a:	4808      	ldr	r0, [pc, #32]	; (80021ac <LOG_REPORT+0x88>)
 800218c:	f00c fc58 	bl	800ea40 <HAL_UART_Transmit_DMA>
	return TRUE;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	3750      	adds	r7, #80	; 0x50
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	0801b460 	.word	0x0801b460
 80021a0:	20000410 	.word	0x20000410
 80021a4:	2000bc28 	.word	0x2000bc28
 80021a8:	2000ab58 	.word	0x2000ab58
 80021ac:	2000bbe8 	.word	0x2000bbe8

080021b0 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3b02      	subs	r3, #2
 80021c0:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3301      	adds	r3, #1
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d119      	bne.n	8002204 <unPackPayload+0x54>
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <unPackPayload+0xdc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d115      	bne.n	8002204 <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	dc02      	bgt.n	80021e4 <unPackPayload+0x34>
			return -1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e04f      	b.n	8002284 <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b28      	cmp	r3, #40	; 0x28
 80021ea:	d002      	beq.n	80021f2 <unPackPayload+0x42>
			return -1;
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
 80021f0:	e048      	b.n	8002284 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1c99      	adds	r1, r3, #2
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3b02      	subs	r3, #2
 80021fa:	461a      	mov	r2, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f013 febd 	bl	8015f7c <memcpy>
 8002202:	e03d      	b.n	8002280 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3301      	adds	r3, #1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	4293      	cmp	r3, r2
 8002210:	d01b      	beq.n	800224a <unPackPayload+0x9a>
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <unPackPayload+0xdc>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d117      	bne.n	800224a <unPackPayload+0x9a>
		backup_available = 1;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <unPackPayload+0xdc>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b28      	cmp	r3, #40	; 0x28
 8002226:	d002      	beq.n	800222e <unPackPayload+0x7e>
			return -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	e02a      	b.n	8002284 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3302      	adds	r3, #2
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4619      	mov	r1, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f013 fea0 	bl	8015f7c <memcpy>
		backup_length = data_length;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <unPackPayload+0xe0>)
 8002242:	701a      	strb	r2, [r3, #0]
		return - 1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	e01c      	b.n	8002284 <unPackPayload+0xd4>
	}else if(backup_available == 1){
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <unPackPayload+0xdc>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d113      	bne.n	800227a <unPackPayload+0xca>
		backup_available = 0;
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <unPackPayload+0xdc>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <unPackPayload+0xe0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	4618      	mov	r0, r3
 8002268:	f013 fe88 	bl	8015f7c <memcpy>
		data_length = backup_length + in_length;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <unPackPayload+0xe0>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4413      	add	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e002      	b.n	8002280 <unPackPayload+0xd0>
	}else{
		return - 1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	e001      	b.n	8002284 <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3b02      	subs	r3, #2
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000ac58 	.word	0x2000ac58
 8002290:	2000ac59 	.word	0x2000ac59

08002294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_DMA_Init+0x3c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <MX_DMA_Init+0x3c>)
 80022a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_DMA_Init+0x3c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2105      	movs	r1, #5
 80022ba:	200f      	movs	r0, #15
 80022bc:	f009 fb64 	bl	800b988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80022c0:	200f      	movs	r0, #15
 80022c2:	f009 fb7d 	bl	800b9c0 <HAL_NVIC_EnableIRQ>

}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a07      	ldr	r2, [pc, #28]	; (8002300 <vApplicationGetIdleTaskMemory+0x2c>)
 80022e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <vApplicationGetIdleTaskMemory+0x30>)
 80022ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20000ba8 	.word	0x20000ba8
 8002304:	20000bfc 	.word	0x20000bfc

08002308 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b094      	sub	sp, #80	; 0x50
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800230e:	2300      	movs	r3, #0
 8002310:	64bb      	str	r3, [r7, #72]	; 0x48
 8002312:	2300      	movs	r3, #0
 8002314:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8002316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800231a:	4618      	mov	r0, r3
 800231c:	f010 fb6c 	bl	80129f8 <osMutexCreate>
 8002320:	4602      	mov	r2, r0
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <MX_FREERTOS_Init+0x90>)
 8002324:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002326:	2301      	movs	r3, #1
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
 800232a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800232e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002330:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002334:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8002336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f010 fc73 	bl	8012c28 <osMailCreate>
 8002342:	4602      	mov	r2, r0
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <MX_FREERTOS_Init+0x94>)
 8002346:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <MX_FREERTOS_Init+0x98>)
 800234a:	f107 041c 	add.w	r4, r7, #28
 800234e:	461d      	mov	r5, r3
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f010 fa5c 	bl	8012820 <osThreadCreate>
 8002368:	4602      	mov	r2, r0
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_FREERTOS_Init+0x9c>)
 800236c:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_FREERTOS_Init+0xa0>)
 8002370:	463c      	mov	r4, r7
 8002372:	461d      	mov	r5, r3
 8002374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800237c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002380:	463b      	mov	r3, r7
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f010 fa4b 	bl	8012820 <osThreadCreate>
 800238a:	4602      	mov	r2, r0
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <MX_FREERTOS_Init+0xa4>)
 800238e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002390:	bf00      	nop
 8002392:	3750      	adds	r7, #80	; 0x50
 8002394:	46bd      	mov	sp, r7
 8002396:	bdb0      	pop	{r4, r5, r7, pc}
 8002398:	2000ac60 	.word	0x2000ac60
 800239c:	2000ac64 	.word	0x2000ac64
 80023a0:	0801b47c 	.word	0x0801b47c
 80023a4:	2000ac5c 	.word	0x2000ac5c
 80023a8:	0801b4a8 	.word	0x0801b4a8
 80023ac:	2000ac68 	.word	0x2000ac68

080023b0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	f6ad 3d14 	subw	sp, sp, #2836	; 0xb14
 80023b6:	af6c      	add	r7, sp, #432	; 0x1b0
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023be:	f013 f855 	bl	801546c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80023c2:	2201      	movs	r2, #1
 80023c4:	2110      	movs	r1, #16
 80023c6:	48d0      	ldr	r0, [pc, #832]	; (8002708 <StartDefaultTask+0x358>)
 80023c8:	f00a f840 	bl	800c44c <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
  uint8_t object_head_pointer = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
  double state_time = 0;
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	f04f 0400 	mov.w	r4, #0
 80023e6:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80023ea:	e9c2 3400 	strd	r3, r4, [r2]
  int run_point = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 80023f4:	f107 0320 	add.w	r3, r7, #32
 80023f8:	4ac4      	ldr	r2, [pc, #784]	; (800270c <StartDefaultTask+0x35c>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	4611      	mov	r1, r2
 80023fe:	2390      	movs	r3, #144	; 0x90
 8002400:	461a      	mov	r2, r3
 8002402:	f013 fdbb 	bl	8015f7c <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002406:	21e7      	movs	r1, #231	; 0xe7
 8002408:	48c1      	ldr	r0, [pc, #772]	; (8002710 <StartDefaultTask+0x360>)
 800240a:	f7ff fe8b 	bl	8002124 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800240e:	f008 fa89 	bl	800a924 <scaraGetMethod>
 8002412:	4603      	mov	r3, r0
 8002414:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
  current_mode	 = scaraGetMode();
 8002418:	f008 fa78 	bl	800a90c <scaraGetMode>
 800241c:	4603      	mov	r3, r0
 800241e:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
  current_duty_state	 = scaraGetDutyState();
 8002422:	f008 fa8b 	bl	800a93c <scaraGetDutyState>
 8002426:	4603      	mov	r3, r0
 8002428:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955

  // Start up robot
  scaraStartup();
 800242c:	f003 faac 	bl	8005988 <scaraStartup>
  osDelay(10);
 8002430:	200a      	movs	r0, #10
 8002432:	f010 fa41 	bl	80128b8 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8002436:	4ab7      	ldr	r2, [pc, #732]	; (8002714 <StartDefaultTask+0x364>)
 8002438:	a4ab      	add	r4, pc, #684	; (adr r4, 80026e8 <StartDefaultTask+0x338>)
 800243a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800243e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002442:	4ab4      	ldr	r2, [pc, #720]	; (8002714 <StartDefaultTask+0x364>)
 8002444:	a4aa      	add	r4, pc, #680	; (adr r4, 80026f0 <StartDefaultTask+0x340>)
 8002446:	e9d4 3400 	ldrd	r3, r4, [r4]
 800244a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 800244e:	4ab1      	ldr	r2, [pc, #708]	; (8002714 <StartDefaultTask+0x364>)
 8002450:	a4a9      	add	r4, pc, #676	; (adr r4, 80026f8 <StartDefaultTask+0x348>)
 8002452:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002456:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 800245a:	4aae      	ldr	r2, [pc, #696]	; (8002714 <StartDefaultTask+0x364>)
 800245c:	a4a8      	add	r4, pc, #672	; (adr r4, 8002700 <StartDefaultTask+0x350>)
 800245e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002462:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002466:	4aab      	ldr	r2, [pc, #684]	; (8002714 <StartDefaultTask+0x364>)
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	f04f 0400 	mov.w	r4, #0
 8002470:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 8002474:	48a7      	ldr	r0, [pc, #668]	; (8002714 <StartDefaultTask+0x364>)
 8002476:	f001 fe4b 	bl	8004110 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800247a:	48a7      	ldr	r0, [pc, #668]	; (8002718 <StartDefaultTask+0x368>)
 800247c:	f00b febd 	bl	800e1fa <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002480:	f107 0308 	add.w	r3, r7, #8
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f010 fa68 	bl	8012960 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	  respond_packed_lenght = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
	  infor_lenght			= 0;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	  infor_packed_lenght	= 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
	  task_usb_lenght		= 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
	  usb_lenght			= 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
	  total_respond_length  = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
	  detail_ptr 			= 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80024c0:	4a96      	ldr	r2, [pc, #600]	; (800271c <StartDefaultTask+0x36c>)
 80024c2:	4b97      	ldr	r3, [pc, #604]	; (8002720 <StartDefaultTask+0x370>)
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	23c0      	movs	r3, #192	; 0xc0
 80024ca:	461a      	mov	r2, r3
 80024cc:	f013 fd56 	bl	8015f7c <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 80024d0:	4a93      	ldr	r2, [pc, #588]	; (8002720 <StartDefaultTask+0x370>)
 80024d2:	4b90      	ldr	r3, [pc, #576]	; (8002714 <StartDefaultTask+0x364>)
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	23c0      	movs	r3, #192	; 0xc0
 80024da:	461a      	mov	r2, r3
 80024dc:	f013 fd4e 	bl	8015f7c <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80024e0:	4b90      	ldr	r3, [pc, #576]	; (8002724 <StartDefaultTask+0x374>)
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 80024e8:	2200      	movs	r2, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f010 fc48 	bl	8012d80 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80024f0:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d116      	bne.n	8002526 <StartDefaultTask+0x176>
		   dataMail = ret_mail.value.p;
 80024f8:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 80024fc:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002500:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002504:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002508:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800250c:	4618      	mov	r0, r3
 800250e:	f013 fd35 	bl	8015f7c <memcpy>
		   isNewDuty = TRUE;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002518:	4b82      	ldr	r3, [pc, #520]	; (8002724 <StartDefaultTask+0x374>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 8002520:	4618      	mov	r0, r3
 8002522:	f010 fca1 	bl	8012e68 <osMailFree>
	  }
	  if(isNewDuty) {
 8002526:	f897 395f 	ldrb.w	r3, [r7, #2399]	; 0x95f
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8366 	beq.w	8002bfc <StartDefaultTask+0x84c>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8002530:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 80f6 	bne.w	8002728 <StartDefaultTask+0x378>
			  //free(Object);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 800253c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d122      	bne.n	800258c <StartDefaultTask+0x1dc>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 8002552:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002556:	2218      	movs	r2, #24
 8002558:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800255a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002564:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002568:	4413      	add	r3, r2
 800256a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2301      	movs	r3, #1
 8002572:	2008      	movs	r0, #8
 8002574:	f7ff fd6e 	bl	8002054 <commandRespond1>
 8002578:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 800257c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002580:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002584:	4413      	add	r3, r2
 8002586:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800258a:	e334      	b.n	8002bf6 <StartDefaultTask+0x846>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 800258c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d122      	bne.n	80025dc <StartDefaultTask+0x22c>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 80025a2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80025a6:	2219      	movs	r2, #25
 80025a8:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80025aa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80025b4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80025b8:	4413      	add	r3, r2
 80025ba:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	2008      	movs	r0, #8
 80025c4:	f7ff fd46 	bl	8002054 <commandRespond1>
 80025c8:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 80025cc:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80025d0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80025d4:	4413      	add	r3, r2
 80025d6:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80025da:	e30c      	b.n	8002bf6 <StartDefaultTask+0x846>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 80025dc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d122      	bne.n	800262c <StartDefaultTask+0x27c>
//				  }
//				  testing_array = (double*)malloc(2*sizeof(double));
//				  if(testing_array == NULL){
//					  int t = 2;
//				  }
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  current_method = SCARA_METHOD_GCODE;
 80025ec:	2302      	movs	r3, #2
 80025ee:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 80025f2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80025f6:	221a      	movs	r2, #26
 80025f8:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80025fa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002604:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002608:	4413      	add	r3, r2
 800260a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	2008      	movs	r0, #8
 8002614:	f7ff fd1e 	bl	8002054 <commandRespond1>
 8002618:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 800261c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002620:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002624:	4413      	add	r3, r2
 8002626:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800262a:	e2e4      	b.n	8002bf6 <StartDefaultTask+0x846>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 800262c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d12f      	bne.n	8002696 <StartDefaultTask+0x2e6>
				  test_value[0] = 0;
 8002636:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 800263e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002642:	2200      	movs	r2, #0
 8002644:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002646:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800264a:	2200      	movs	r2, #0
 800264c:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 800264e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002652:	2200      	movs	r2, #0
 8002654:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002656:	2303      	movs	r3, #3
 8002658:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  detail_array[0] = TEST_METHOD;
 800265c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002660:	221b      	movs	r2, #27
 8002662:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002664:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800266e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002672:	4413      	add	r3, r2
 8002674:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2301      	movs	r3, #1
 800267c:	2008      	movs	r0, #8
 800267e:	f7ff fce9 	bl	8002054 <commandRespond1>
 8002682:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8002686:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800268a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800268e:	4413      	add	r3, r2
 8002690:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002694:	e2af      	b.n	8002bf6 <StartDefaultTask+0x846>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002696:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b04      	cmp	r3, #4
 800269e:	f040 82aa 	bne.w	8002bf6 <StartDefaultTask+0x846>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 80026a2:	2304      	movs	r3, #4
 80026a4:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 80026ae:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80026b2:	221c      	movs	r2, #28
 80026b4:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80026b6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80026c0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80026c4:	4413      	add	r3, r2
 80026c6:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2301      	movs	r3, #1
 80026ce:	2008      	movs	r0, #8
 80026d0:	f7ff fcc0 	bl	8002054 <commandRespond1>
 80026d4:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 80026d8:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80026dc:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80026e0:	4413      	add	r3, r2
 80026e2:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80026e6:	e286      	b.n	8002bf6 <StartDefaultTask+0x846>
 80026e8:	20000000 	.word	0x20000000
 80026ec:	bff7b904 	.word	0xbff7b904
 80026f0:	80000000 	.word	0x80000000
 80026f4:	4002d893 	.word	0x4002d893
 80026f8:	90c91080 	.word	0x90c91080
 80026fc:	3fa1eb63 	.word	0x3fa1eb63
 8002700:	cec41dd2 	.word	0xcec41dd2
 8002704:	4007ba14 	.word	0x4007ba14
 8002708:	40020400 	.word	0x40020400
 800270c:	0801b5a8 	.word	0x0801b5a8
 8002710:	0801b4c4 	.word	0x0801b4c4
 8002714:	2000ba68 	.word	0x2000ba68
 8002718:	2000bba8 	.word	0x2000bba8
 800271c:	2000b768 	.word	0x2000b768
 8002720:	2000b8e8 	.word	0x2000b8e8
 8002724:	2000ac64 	.word	0x2000ac64
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002728:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800272c:	785b      	ldrb	r3, [r3, #1]
 800272e:	f897 2957 	ldrb.w	r2, [r7, #2391]	; 0x957
 8002732:	429a      	cmp	r2, r3
 8002734:	f040 823f 	bne.w	8002bb6 <StartDefaultTask+0x806>
				  	  switch( duty_cmd.robot_method) {
 8002738:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	2b04      	cmp	r3, #4
 8002740:	f200 8233 	bhi.w	8002baa <StartDefaultTask+0x7fa>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <StartDefaultTask+0x39c>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	08002761 	.word	0x08002761
 8002750:	080027b7 	.word	0x080027b7
 8002754:	08002a89 	.word	0x08002a89
 8002758:	08002973 	.word	0x08002973
 800275c:	08002b11 	.word	0x08002b11
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002760:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <StartDefaultTask+0x3d4>
				  			  current_key = duty_cmd.keyboard;
 8002768:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800276c:	78db      	ldrb	r3, [r3, #3]
 800276e:	f887 3952 	strb.w	r3, [r7, #2386]	; 0x952
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  			  current_key_speed = duty_cmd.key_speed;
 8002778:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002782:	e235      	b.n	8002bf0 <StartDefaultTask+0x840>
				  		  } else if (current_key == duty_cmd.keyboard
 8002784:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	f897 2952 	ldrb.w	r2, [r7, #2386]	; 0x952
 800278e:	429a      	cmp	r2, r3
 8002790:	f040 822e 	bne.w	8002bf0 <StartDefaultTask+0x840>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002794:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 8002798:	2b02      	cmp	r3, #2
 800279a:	f040 8229 	bne.w	8002bf0 <StartDefaultTask+0x840>
									  && current_key_speed == duty_cmd.key_speed) {
 800279e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f8d7 294c 	ldr.w	r2, [r7, #2380]	; 0x94c
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 8221 	bne.w	8002bf0 <StartDefaultTask+0x840>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  	  break;
 80027b4:	e21c      	b.n	8002bf0 <StartDefaultTask+0x840>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 80027b6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d029      	beq.n	8002814 <StartDefaultTask+0x464>
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d074      	beq.n	80028ae <StartDefaultTask+0x4fe>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 80cd 	bne.w	8002964 <StartDefaultTask+0x5b4>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 80027d0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80027d4:	2220      	movs	r2, #32
 80027d6:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027d8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80027e2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80027e6:	4413      	add	r3, r2
 80027e8:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2301      	movs	r3, #1
 80027f0:	2008      	movs	r0, #8
 80027f2:	f7ff fc2f 	bl	8002054 <commandRespond1>
 80027f6:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 80027fa:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80027fe:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002802:	4413      	add	r3, r2
 8002804:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002808:	f240 117f 	movw	r1, #383	; 0x17f
 800280c:	48ba      	ldr	r0, [pc, #744]	; (8002af8 <StartDefaultTask+0x748>)
 800280e:	f7ff fc89 	bl	8002124 <LOG_REPORT>
							  }
							  break;
 8002812:	e0ad      	b.n	8002970 <StartDefaultTask+0x5c0>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002814:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002818:	2b02      	cmp	r3, #2
 800281a:	d126      	bne.n	800286a <StartDefaultTask+0x4ba>
 800281c:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002820:	2b00      	cmp	r3, #0
 8002822:	d122      	bne.n	800286a <StartDefaultTask+0x4ba>
									  current_mode = SCARA_MODE_SCAN;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 8002830:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002834:	2221      	movs	r2, #33	; 0x21
 8002836:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002838:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002842:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002846:	4413      	add	r3, r2
 8002848:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2301      	movs	r3, #1
 8002850:	2008      	movs	r0, #8
 8002852:	f7ff fbff 	bl	8002054 <commandRespond1>
 8002856:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 800285a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800285e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002862:	4413      	add	r3, r2
 8002864:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002868:	e082      	b.n	8002970 <StartDefaultTask+0x5c0>
									detail_array[0] = BUSY;
 800286a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800286e:	2222      	movs	r2, #34	; 0x22
 8002870:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002872:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800287c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002880:	4413      	add	r3, r2
 8002882:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2301      	movs	r3, #1
 800288a:	2007      	movs	r0, #7
 800288c:	f7ff fbe2 	bl	8002054 <commandRespond1>
 8002890:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 8002894:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002898:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800289c:	4413      	add	r3, r2
 800289e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80028a2:	f240 1197 	movw	r1, #407	; 0x197
 80028a6:	4895      	ldr	r0, [pc, #596]	; (8002afc <StartDefaultTask+0x74c>)
 80028a8:	f7ff fc3c 	bl	8002124 <LOG_REPORT>
							  break;
 80028ac:	e060      	b.n	8002970 <StartDefaultTask+0x5c0>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 80028ae:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d133      	bne.n	800291e <StartDefaultTask+0x56e>
 80028b6:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12f      	bne.n	800291e <StartDefaultTask+0x56e>
									  scaraSetScanFlag();
 80028be:	f007 ffb7 	bl	800a830 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 80028c2:	f008 f847 	bl	800a954 <scaraIsScanLimit>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <StartDefaultTask+0x52a>
										  current_mode	 = SCARA_MODE_DUTY;
 80028cc:	2302      	movs	r3, #2
 80028ce:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
									  if (scaraIsScanLimit()) {
 80028d8:	e043      	b.n	8002962 <StartDefaultTask+0x5b2>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 80028da:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80028de:	2223      	movs	r2, #35	; 0x23
 80028e0:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028e2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80028ec:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80028f0:	4413      	add	r3, r2
 80028f2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2301      	movs	r3, #1
 80028fa:	2007      	movs	r0, #7
 80028fc:	f7ff fbaa 	bl	8002054 <commandRespond1>
 8002900:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
										total_respond_length += respond_lenght;
 8002904:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002908:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800290c:	4413      	add	r3, r2
 800290e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002912:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8002916:	487a      	ldr	r0, [pc, #488]	; (8002b00 <StartDefaultTask+0x750>)
 8002918:	f7ff fc04 	bl	8002124 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 800291c:	e021      	b.n	8002962 <StartDefaultTask+0x5b2>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 800291e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002922:	2222      	movs	r2, #34	; 0x22
 8002924:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002926:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002930:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002934:	4413      	add	r3, r2
 8002936:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2301      	movs	r3, #1
 800293e:	2007      	movs	r0, #7
 8002940:	f7ff fb88 	bl	8002054 <commandRespond1>
 8002944:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 8002948:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800294c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002950:	4413      	add	r3, r2
 8002952:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002956:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800295a:	486a      	ldr	r0, [pc, #424]	; (8002b04 <StartDefaultTask+0x754>)
 800295c:	f7ff fbe2 	bl	8002124 <LOG_REPORT>
								  }
							  }
							  break;
 8002960:	e006      	b.n	8002970 <StartDefaultTask+0x5c0>
 8002962:	e005      	b.n	8002970 <StartDefaultTask+0x5c0>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002964:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002968:	4867      	ldr	r0, [pc, #412]	; (8002b08 <StartDefaultTask+0x758>)
 800296a:	f7ff fbdb 	bl	8002124 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 800296e:	e142      	b.n	8002bf6 <StartDefaultTask+0x846>
 8002970:	e141      	b.n	8002bf6 <StartDefaultTask+0x846>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002972:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 800297a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800297e:	2200      	movs	r2, #0
 8002980:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002982:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002986:	2200      	movs	r2, #0
 8002988:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 800298a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800298e:	2200      	movs	r2, #0
 8002990:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002992:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002996:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800299a:	2b07      	cmp	r3, #7
 800299c:	d872      	bhi.n	8002a84 <StartDefaultTask+0x6d4>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <StartDefaultTask+0x5f4>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029c5 	.word	0x080029c5
 80029a8:	080029dd 	.word	0x080029dd
 80029ac:	080029f5 	.word	0x080029f5
 80029b0:	08002a0d 	.word	0x08002a0d
 80029b4:	08002a25 	.word	0x08002a25
 80029b8:	08002a3d 	.word	0x08002a3d
 80029bc:	08002a55 	.word	0x08002a55
 80029c0:	08002a6d 	.word	0x08002a6d
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80029c4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80029c8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029d6:	2105      	movs	r1, #5
 80029d8:	5499      	strb	r1, [r3, r2]
						  break;
 80029da:	e054      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 80029dc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80029e0:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029ee:	21fb      	movs	r1, #251	; 0xfb
 80029f0:	5499      	strb	r1, [r3, r2]
						  break;
 80029f2:	e048      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80029f4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80029f8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a06:	2105      	movs	r1, #5
 8002a08:	5499      	strb	r1, [r3, r2]
						  break;
 8002a0a:	e03c      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002a0c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a10:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a1e:	21fb      	movs	r1, #251	; 0xfb
 8002a20:	5499      	strb	r1, [r3, r2]
						  break;
 8002a22:	e030      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002a24:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a28:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a36:	2105      	movs	r1, #5
 8002a38:	5499      	strb	r1, [r3, r2]
						  break;
 8002a3a:	e024      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002a3c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a40:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a4e:	21fb      	movs	r1, #251	; 0xfb
 8002a50:	5499      	strb	r1, [r3, r2]
						  break;
 8002a52:	e018      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 8002a54:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a58:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a66:	210a      	movs	r1, #10
 8002a68:	5499      	strb	r1, [r3, r2]
						  break;
 8002a6a:	e00c      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 8002a6c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a70:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a7e:	21f6      	movs	r1, #246	; 0xf6
 8002a80:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002a82:	e000      	b.n	8002a86 <StartDefaultTask+0x6d6>
						  default:
							  break;
 8002a84:	bf00      	nop
						  }
					  }
					  break;
 8002a86:	e0b6      	b.n	8002bf6 <StartDefaultTask+0x846>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002a88:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <StartDefaultTask+0x6f8>
 8002a90:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b13      	cmp	r3, #19
 8002a98:	d106      	bne.n	8002aa8 <StartDefaultTask+0x6f8>
				  			  run_point = 1;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 8002aa6:	e025      	b.n	8002af4 <StartDefaultTask+0x744>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002aa8:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10e      	bne.n	8002ace <StartDefaultTask+0x71e>
 8002ab0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b12      	cmp	r3, #18
 8002ab8:	d109      	bne.n	8002ace <StartDefaultTask+0x71e>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002aba:	4814      	ldr	r0, [pc, #80]	; (8002b0c <StartDefaultTask+0x75c>)
 8002abc:	f002 fa4c 	bl	8004f58 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002ac0:	4812      	ldr	r0, [pc, #72]	; (8002b0c <StartDefaultTask+0x75c>)
 8002ac2:	f001 fb25 	bl	8004110 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 8002acc:	e012      	b.n	8002af4 <StartDefaultTask+0x744>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002ace:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b0d      	cmp	r3, #13
 8002ad6:	d103      	bne.n	8002ae0 <StartDefaultTask+0x730>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8002ade:	e089      	b.n	8002bf4 <StartDefaultTask+0x844>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 8002ae0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b0e      	cmp	r3, #14
 8002ae8:	f040 8084 	bne.w	8002bf4 <StartDefaultTask+0x844>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	  break;
 8002af2:	e07f      	b.n	8002bf4 <StartDefaultTask+0x844>
 8002af4:	e07e      	b.n	8002bf4 <StartDefaultTask+0x844>
 8002af6:	bf00      	nop
 8002af8:	0801b4e4 	.word	0x0801b4e4
 8002afc:	0801b4f4 	.word	0x0801b4f4
 8002b00:	0801b504 	.word	0x0801b504
 8002b04:	0801b518 	.word	0x0801b518
 8002b08:	0801b528 	.word	0x0801b528
 8002b0c:	2000b8e8 	.word	0x2000b8e8
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002b10:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002b14:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002b18:	21c8      	movs	r1, #200	; 0xc8
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	18d0      	adds	r0, r2, r3
 8002b20:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b24:	3328      	adds	r3, #40	; 0x28
 8002b26:	22c0      	movs	r2, #192	; 0xc0
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f013 fa27 	bl	8015f7c <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002b2e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b32:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002b36:	f897 593d 	ldrb.w	r5, [r7, #2365]	; 0x93d
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	f7fe f833 	bl	8000ba8 <__aeabi_d2uiz>
 8002b42:	4603      	mov	r3, r0
 8002b44:	b299      	uxth	r1, r3
 8002b46:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002b4a:	23c8      	movs	r3, #200	; 0xc8
 8002b4c:	fb03 f305 	mul.w	r3, r3, r5
 8002b50:	4413      	add	r3, r2
 8002b52:	33c0      	adds	r3, #192	; 0xc0
 8002b54:	460a      	mov	r2, r1
 8002b56:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8002b58:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	425a      	negs	r2, r3
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	f002 0207 	and.w	r2, r2, #7
 8002b68:	bf58      	it	pl
 8002b6a:	4253      	negpl	r3, r2
 8002b6c:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
				  		  detail_array[0] = OBJECT_DETECTED;
 8002b70:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002b74:	221d      	movs	r2, #29
 8002b76:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b78:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b7c:	6899      	ldr	r1, [r3, #8]
 8002b7e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002b82:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002b86:	4413      	add	r3, r2
 8002b88:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	2008      	movs	r0, #8
 8002b92:	f7ff fa5f 	bl	8002054 <commandRespond1>
 8002b96:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						  total_respond_length += respond_lenght;
 8002b9a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002b9e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  	  }
				  	  break;
 8002ba8:	e025      	b.n	8002bf6 <StartDefaultTask+0x846>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002baa:	f240 2103 	movw	r1, #515	; 0x203
 8002bae:	48c8      	ldr	r0, [pc, #800]	; (8002ed0 <StartDefaultTask+0xb20>)
 8002bb0:	f7ff fab8 	bl	8002124 <LOG_REPORT>
 8002bb4:	e01f      	b.n	8002bf6 <StartDefaultTask+0x846>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 8002bb6:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002bbe:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002bc8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002bcc:	4413      	add	r3, r2
 8002bce:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	2007      	movs	r0, #7
 8002bd8:	f7ff fa3c 	bl	8002054 <commandRespond1>
 8002bdc:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002be0:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002be4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002be8:	4413      	add	r3, r2
 8002bea:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002bee:	e002      	b.n	8002bf6 <StartDefaultTask+0x846>
				  	  break;
 8002bf0:	bf00      	nop
 8002bf2:	e000      	b.n	8002bf6 <StartDefaultTask+0x846>
				  	  break;
 8002bf4:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002bfc:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	f200 8722 	bhi.w	8003a4a <StartDefaultTask+0x169a>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <StartDefaultTask+0x85c>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c21 	.word	0x08002c21
 8002c10:	08002dcf 	.word	0x08002dcf
 8002c14:	080031b9 	.word	0x080031b9
 8002c18:	08003433 	.word	0x08003433
 8002c1c:	08003459 	.word	0x08003459
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8002c20:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	f200 870d 	bhi.w	8003a44 <StartDefaultTask+0x1694>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <StartDefaultTask+0x880>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002dc9 	.word	0x08002dc9
 8002c34:	08002c41 	.word	0x08002c41
 8002c38:	08002caf 	.word	0x08002caf
 8002c3c:	08002d8b 	.word	0x08002d8b
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8002c40:	4ba4      	ldr	r3, [pc, #656]	; (8002ed4 <StartDefaultTask+0xb24>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f897 3952 	ldrb.w	r3, [r7, #2386]	; 0x952
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f007 ff9c 	bl	800ab88 <scaraKeyInit1>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d127      	bne.n	8002ca6 <StartDefaultTask+0x8f6>
				  run_time = 0;
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	f04f 0400 	mov.w	r4, #0
 8002c5e:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002c62:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002c66:	2302      	movs	r3, #2
 8002c68:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 8002c6c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002c70:	2225      	movs	r2, #37	; 0x25
 8002c72:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c74:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002c7e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002c82:	4413      	add	r3, r2
 8002c84:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f7ff f9e1 	bl	8002054 <commandRespond1>
 8002c92:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002c96:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002c9a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002ca4:	e091      	b.n	8002dca <StartDefaultTask+0xa1a>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
		  break;
 8002cac:	e08d      	b.n	8002dca <StartDefaultTask+0xa1a>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002cae:	a386      	add	r3, pc, #536	; (adr r3, 8002ec8 <StartDefaultTask+0xb18>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cbc:	f7fd fae6 	bl	800028c <__adddf3>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002cc8:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002ccc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8002cd0:	ed93 0b00 	vldr	d0, [r3]
 8002cd4:	f007 fe4a 	bl	800a96c <scaraIsFinish>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <StartDefaultTask+0x936>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8002cde:	2303      	movs	r3, #3
 8002ce0:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002ce4:	e071      	b.n	8002dca <StartDefaultTask+0xa1a>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8002ce6:	4c7c      	ldr	r4, [pc, #496]	; (8002ed8 <StartDefaultTask+0xb28>)
 8002ce8:	4668      	mov	r0, sp
 8002cea:	f104 0308 	add.w	r3, r4, #8
 8002cee:	22b8      	movs	r2, #184	; 0xb8
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f013 f943 	bl	8015f7c <memcpy>
 8002cf6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002cfa:	4878      	ldr	r0, [pc, #480]	; (8002edc <StartDefaultTask+0xb2c>)
 8002cfc:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002d00:	ed91 0b00 	vldr	d0, [r1]
 8002d04:	f005 feda 	bl	8008abc <scaraFlowDuty>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 38f9 	strb.w	r3, [r7, #2297]	; 0x8f9
				  if ( SCARA_STATUS_OK == status) {
 8002d0e:	f897 38f9 	ldrb.w	r3, [r7, #2297]	; 0x8f9
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d113      	bne.n	8002d3e <StartDefaultTask+0x98e>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002d16:	4c70      	ldr	r4, [pc, #448]	; (8002ed8 <StartDefaultTask+0xb28>)
 8002d18:	4a70      	ldr	r2, [pc, #448]	; (8002edc <StartDefaultTask+0xb2c>)
 8002d1a:	ab2c      	add	r3, sp, #176	; 0xb0
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	22c0      	movs	r2, #192	; 0xc0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f013 f92b 	bl	8015f7c <memcpy>
 8002d26:	4668      	mov	r0, sp
 8002d28:	f104 0310 	add.w	r3, r4, #16
 8002d2c:	22b0      	movs	r2, #176	; 0xb0
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f013 f924 	bl	8015f7c <memcpy>
 8002d34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d38:	f002 fa9e 	bl	8005278 <lowlayer_computeAndWritePulse>
		  break;
 8002d3c:	e045      	b.n	8002dca <StartDefaultTask+0xa1a>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					detail_array[0] = status;
 8002d44:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002d48:	f897 28f9 	ldrb.w	r2, [r7, #2297]	; 0x8f9
 8002d4c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d4e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002d58:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	2006      	movs	r0, #6
 8002d68:	f7ff f974 	bl	8002054 <commandRespond1>
 8002d6c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002d70:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002d74:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002d78:	4413      	add	r3, r2
 8002d7a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  LOG_REPORT("STOP KEY", __LINE__);
 8002d7e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002d82:	4857      	ldr	r0, [pc, #348]	; (8002ee0 <StartDefaultTask+0xb30>)
 8002d84:	f7ff f9ce 	bl	8002124 <LOG_REPORT>
		  break;
 8002d88:	e01f      	b.n	8002dca <StartDefaultTask+0xa1a>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8002d8a:	4854      	ldr	r0, [pc, #336]	; (8002edc <StartDefaultTask+0xb2c>)
 8002d8c:	f002 f8e4 	bl	8004f58 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8002d90:	4852      	ldr	r0, [pc, #328]	; (8002edc <StartDefaultTask+0xb2c>)
 8002d92:	f001 f9bd 	bl	8004110 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
			  positionNext.t = 0;
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	; (8002edc <StartDefaultTask+0xb2c>)
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f04f 0400 	mov.w	r4, #0
 8002da6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002daa:	4a4c      	ldr	r2, [pc, #304]	; (8002edc <StartDefaultTask+0xb2c>)
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002db8:	4a48      	ldr	r2, [pc, #288]	; (8002edc <StartDefaultTask+0xb2c>)
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	f04f 0400 	mov.w	r4, #0
 8002dc2:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002dc6:	e000      	b.n	8002dca <StartDefaultTask+0xa1a>
		  break;
 8002dc8:	bf00      	nop
		  }
	  }
	  break;
 8002dca:	f000 be3b 	b.w	8003a44 <StartDefaultTask+0x1694>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002dce:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d00b      	beq.n	8002dee <StartDefaultTask+0xa3e>
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d066      	beq.n	8002ea8 <StartDefaultTask+0xaf8>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 81e4 	bne.w	80031a8 <StartDefaultTask+0xdf8>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002de0:	2302      	movs	r3, #2
 8002de2:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  }
			  break;
 8002dec:	e1e2      	b.n	80031b4 <StartDefaultTask+0xe04>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002dee:	f897 3954 	ldrb.w	r3, [r7, #2388]	; 0x954
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d84e      	bhi.n	8002e94 <StartDefaultTask+0xae4>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <StartDefaultTask+0xa4c>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e19 	.word	0x08002e19
 8002e04:	08002e2b 	.word	0x08002e2b
 8002e08:	08002e3f 	.word	0x08002e3f
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002e0c:	f001 fe9a 	bl	8004b44 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
					  }
					  break;
 8002e16:	e046      	b.n	8002ea6 <StartDefaultTask+0xaf6>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002e18:	f001 fec6 	bl	8004ba8 <lowlayer_scanFlow>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d03e      	beq.n	8002ea0 <StartDefaultTask+0xaf0>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002e22:	2302      	movs	r3, #2
 8002e24:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
						  }
					  }
					  break;
 8002e28:	e03a      	b.n	8002ea0 <StartDefaultTask+0xaf0>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002e2a:	482c      	ldr	r0, [pc, #176]	; (8002edc <StartDefaultTask+0xb2c>)
 8002e2c:	f002 f818 	bl	8004e60 <lowlayer_goToSoftLimit>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d036      	beq.n	8002ea4 <StartDefaultTask+0xaf4>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
							}
					  }
					  break;
 8002e3c:	e032      	b.n	8002ea4 <StartDefaultTask+0xaf4>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8002e3e:	4827      	ldr	r0, [pc, #156]	; (8002edc <StartDefaultTask+0xb2c>)
 8002e40:	f002 f88a 	bl	8004f58 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002e44:	4825      	ldr	r0, [pc, #148]	; (8002edc <StartDefaultTask+0xb2c>)
 8002e46:	f001 f963 	bl	8004110 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  scaraSetScanFlag();
 8002e56:	f007 fceb 	bl	800a830 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8002e5a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002e5e:	2225      	movs	r2, #37	; 0x25
 8002e60:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e62:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002e6c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002e70:	4413      	add	r3, r2
 8002e72:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	2005      	movs	r0, #5
 8002e7c:	f7ff f8ea 	bl	8002054 <commandRespond1>
 8002e80:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						total_respond_length += respond_lenght;
 8002e84:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002e88:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
					  break;
 8002e92:	e008      	b.n	8002ea6 <StartDefaultTask+0xaf6>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002e94:	f240 21a1 	movw	r1, #673	; 0x2a1
 8002e98:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <StartDefaultTask+0xb34>)
 8002e9a:	f7ff f943 	bl	8002124 <LOG_REPORT>
						  while(1);
 8002e9e:	e7fe      	b.n	8002e9e <StartDefaultTask+0xaee>
					  break;
 8002ea0:	bf00      	nop
 8002ea2:	e187      	b.n	80031b4 <StartDefaultTask+0xe04>
					  break;
 8002ea4:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002ea6:	e185      	b.n	80031b4 <StartDefaultTask+0xe04>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002ea8:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	f200 8173 	bhi.w	8003198 <StartDefaultTask+0xde8>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <StartDefaultTask+0xb08>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	080031a5 	.word	0x080031a5
 8002ebc:	08002ee9 	.word	0x08002ee9
 8002ec0:	08003047 	.word	0x08003047
 8002ec4:	08003123 	.word	0x08003123
 8002ec8:	40000000 	.word	0x40000000
 8002ecc:	3f847ae1 	.word	0x3f847ae1
 8002ed0:	0801b53c 	.word	0x0801b53c
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	2000b8e8 	.word	0x2000b8e8
 8002edc:	2000ba68 	.word	0x2000ba68
 8002ee0:	0801b554 	.word	0x0801b554
 8002ee4:	0801b560 	.word	0x0801b560

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002ee8:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8002eec:	4668      	mov	r0, sp
 8002eee:	f104 0310 	add.w	r3, r4, #16
 8002ef2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f013 f840 	bl	8015f7c <memcpy>
 8002efc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f00:	f002 fd4e 	bl	80059a0 <scaraInitDuty>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 38fb 	strb.w	r3, [r7, #2299]	; 0x8fb
						  if ( SCARA_STATUS_OK == status1) {
 8002f0a:	f897 38fb 	ldrb.w	r3, [r7, #2299]	; 0x8fb
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d173      	bne.n	8002ffa <StartDefaultTask+0xc4a>
							  status2 = scaraTestDuty();
 8002f12:	f007 fc11 	bl	800a738 <scaraTestDuty>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f887 38fa 	strb.w	r3, [r7, #2298]	; 0x8fa
							  if (SCARA_STATUS_OK == status2) {
 8002f1c:	f897 38fa 	ldrb.w	r3, [r7, #2298]	; 0x8fa
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d144      	bne.n	8002fae <StartDefaultTask+0xbfe>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002f24:	2302      	movs	r3, #2
 8002f26:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f04f 0400 	mov.w	r4, #0
 8002f32:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002f36:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 8002f3a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002f3e:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8002f42:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002f44:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002f48:	6899      	ldr	r1, [r3, #8]
 8002f4a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002f4e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002f52:	4413      	add	r3, r2
 8002f54:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	2008      	movs	r0, #8
 8002f5e:	f7ff f879 	bl	8002054 <commandRespond1>
 8002f62:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8002f66:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002f6a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002f6e:	4413      	add	r3, r2
 8002f70:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  detail_array[0] = NONE;
 8002f74:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002f78:	2225      	movs	r2, #37	; 0x25
 8002f7a:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002f7c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002f86:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2301      	movs	r3, #1
 8002f94:	2003      	movs	r0, #3
 8002f96:	f7ff f85d 	bl	8002054 <commandRespond1>
 8002f9a:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8002f9e:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002fa2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002fac:	e0fb      	b.n	80031a6 <StartDefaultTask+0xdf6>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002fb4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8002fb8:	48cf      	ldr	r0, [pc, #828]	; (80032f8 <StartDefaultTask+0xf48>)
 8002fba:	f7ff f8b3 	bl	8002124 <LOG_REPORT>
								detail_array[0] = status2;
 8002fbe:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002fc2:	f897 28fa 	ldrb.w	r2, [r7, #2298]	; 0x8fa
 8002fc6:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002fc8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002fd2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	2007      	movs	r0, #7
 8002fe2:	f7ff f837 	bl	8002054 <commandRespond1>
 8002fe6:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8002fea:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002fee:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 8002ff8:	e0d5      	b.n	80031a6 <StartDefaultTask+0xdf6>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							detail_array[0] = status1;
 8003000:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003004:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8003008:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800300a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800300e:	6899      	ldr	r1, [r3, #8]
 8003010:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003014:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003018:	4413      	add	r3, r2
 800301a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2301      	movs	r3, #1
 8003022:	2007      	movs	r0, #7
 8003024:	f7ff f816 	bl	8002054 <commandRespond1>
 8003028:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							total_respond_length += respond_lenght;
 800302c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003030:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003034:	4413      	add	r3, r2
 8003036:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  LOG_REPORT("INIT FAIL", __LINE__);
 800303a:	f240 21d7 	movw	r1, #727	; 0x2d7
 800303e:	48af      	ldr	r0, [pc, #700]	; (80032fc <StartDefaultTask+0xf4c>)
 8003040:	f7ff f870 	bl	8002124 <LOG_REPORT>
				  break;
 8003044:	e0af      	b.n	80031a6 <StartDefaultTask+0xdf6>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8003046:	a3aa      	add	r3, pc, #680	; (adr r3, 80032f0 <StartDefaultTask+0xf40>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003054:	f7fd f91a 	bl	800028c <__adddf3>
 8003058:	4603      	mov	r3, r0
 800305a:	460c      	mov	r4, r1
 800305c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003060:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8003064:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8003068:	ed93 0b00 	vldr	d0, [r3]
 800306c:	f007 fc7e 	bl	800a96c <scaraIsFinish>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <StartDefaultTask+0xcce>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8003076:	2303      	movs	r3, #3
 8003078:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 800307c:	e093      	b.n	80031a6 <StartDefaultTask+0xdf6>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800307e:	4ca0      	ldr	r4, [pc, #640]	; (8003300 <StartDefaultTask+0xf50>)
 8003080:	4668      	mov	r0, sp
 8003082:	f104 0308 	add.w	r3, r4, #8
 8003086:	22b8      	movs	r2, #184	; 0xb8
 8003088:	4619      	mov	r1, r3
 800308a:	f012 ff77 	bl	8015f7c <memcpy>
 800308e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003092:	489c      	ldr	r0, [pc, #624]	; (8003304 <StartDefaultTask+0xf54>)
 8003094:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003098:	ed91 0b00 	vldr	d0, [r1]
 800309c:	f005 fd0e 	bl	8008abc <scaraFlowDuty>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 38fc 	strb.w	r3, [r7, #2300]	; 0x8fc
							  if ( SCARA_STATUS_OK == status) {
 80030a6:	f897 38fc 	ldrb.w	r3, [r7, #2300]	; 0x8fc
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d113      	bne.n	80030d6 <StartDefaultTask+0xd26>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80030ae:	4c94      	ldr	r4, [pc, #592]	; (8003300 <StartDefaultTask+0xf50>)
 80030b0:	4a94      	ldr	r2, [pc, #592]	; (8003304 <StartDefaultTask+0xf54>)
 80030b2:	ab2c      	add	r3, sp, #176	; 0xb0
 80030b4:	4611      	mov	r1, r2
 80030b6:	22c0      	movs	r2, #192	; 0xc0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f012 ff5f 	bl	8015f7c <memcpy>
 80030be:	4668      	mov	r0, sp
 80030c0:	f104 0310 	add.w	r3, r4, #16
 80030c4:	22b0      	movs	r2, #176	; 0xb0
 80030c6:	4619      	mov	r1, r3
 80030c8:	f012 ff58 	bl	8015f7c <memcpy>
 80030cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030d0:	f002 f8d2 	bl	8005278 <lowlayer_computeAndWritePulse>
				  break;
 80030d4:	e067      	b.n	80031a6 <StartDefaultTask+0xdf6>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								detail_array[0] = status;
 80030dc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80030e0:	f897 28fc 	ldrb.w	r2, [r7, #2300]	; 0x8fc
 80030e4:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030e6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80030f0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80030f4:	4413      	add	r3, r2
 80030f6:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2301      	movs	r3, #1
 80030fe:	2006      	movs	r0, #6
 8003100:	f7fe ffa8 	bl	8002054 <commandRespond1>
 8003104:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8003108:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800310c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003110:	4413      	add	r3, r2
 8003112:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("STOP DUTY", __LINE__);
 8003116:	f240 21ef 	movw	r1, #751	; 0x2ef
 800311a:	487b      	ldr	r0, [pc, #492]	; (8003308 <StartDefaultTask+0xf58>)
 800311c:	f7ff f802 	bl	8002124 <LOG_REPORT>
				  break;
 8003120:	e041      	b.n	80031a6 <StartDefaultTask+0xdf6>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8003122:	4878      	ldr	r0, [pc, #480]	; (8003304 <StartDefaultTask+0xf54>)
 8003124:	f001 ff18 	bl	8004f58 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003128:	4876      	ldr	r0, [pc, #472]	; (8003304 <StartDefaultTask+0xf54>)
 800312a:	f000 fff1 	bl	8004110 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  positionNext.t = 0;
 8003134:	4a73      	ldr	r2, [pc, #460]	; (8003304 <StartDefaultTask+0xf54>)
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8003142:	4a70      	ldr	r2, [pc, #448]	; (8003304 <StartDefaultTask+0xf54>)
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8003150:	4a6c      	ldr	r2, [pc, #432]	; (8003304 <StartDefaultTask+0xf54>)
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform

					detail_array[0] = NONE;
 800315e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003162:	2225      	movs	r2, #37	; 0x25
 8003164:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003166:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003170:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003174:	4413      	add	r3, r2
 8003176:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2301      	movs	r3, #1
 800317e:	2005      	movs	r0, #5
 8003180:	f7fe ff68 	bl	8002054 <commandRespond1>
 8003184:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8003188:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800318c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003190:	4413      	add	r3, r2
 8003192:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
				  break;
 8003196:	e006      	b.n	80031a6 <StartDefaultTask+0xdf6>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003198:	f240 3107 	movw	r1, #775	; 0x307
 800319c:	485b      	ldr	r0, [pc, #364]	; (800330c <StartDefaultTask+0xf5c>)
 800319e:	f7fe ffc1 	bl	8002124 <LOG_REPORT>
						  while(1);
 80031a2:	e7fe      	b.n	80031a2 <StartDefaultTask+0xdf2>
				  break;
 80031a4:	bf00      	nop
					  }
				  }

			  }
			  break;
 80031a6:	e005      	b.n	80031b4 <StartDefaultTask+0xe04>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 80031a8:	f240 3111 	movw	r1, #785	; 0x311
 80031ac:	4858      	ldr	r0, [pc, #352]	; (8003310 <StartDefaultTask+0xf60>)
 80031ae:	f7fe ffb9 	bl	8002124 <LOG_REPORT>
				  while(1);
 80031b2:	e7fe      	b.n	80031b2 <StartDefaultTask+0xe02>
			  }
		  }
	  }
	  break;
 80031b4:	f000 bc49 	b.w	8003a4a <StartDefaultTask+0x169a>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 80031b8:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80031bc:	2b04      	cmp	r3, #4
 80031be:	f200 8136 	bhi.w	800342e <StartDefaultTask+0x107e>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <StartDefaultTask+0xe18>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	0800342f 	.word	0x0800342f
 80031cc:	0800342f 	.word	0x0800342f
 80031d0:	08003321 	.word	0x08003321
 80031d4:	0800342f 	.word	0x0800342f
 80031d8:	080031dd 	.word	0x080031dd
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point]);
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <StartDefaultTask+0xf64>)
 80031de:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	f507 65e5 	add.w	r5, r7, #1832	; 0x728
 80031f0:	466c      	mov	r4, sp
 80031f2:	f103 020c 	add.w	r2, r3, #12
 80031f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031fe:	4628      	mov	r0, r5
 8003200:	f000 fe1e 	bl	8003e40 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 8003204:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8003208:	4668      	mov	r0, sp
 800320a:	f104 0310 	add.w	r3, r4, #16
 800320e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003212:	4619      	mov	r1, r3
 8003214:	f012 feb2 	bl	8015f7c <memcpy>
 8003218:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800321c:	f002 fbc0 	bl	80059a0 <scaraInitDuty>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 38fe 	strb.w	r3, [r7, #2302]	; 0x8fe
			  if(status == SCARA_STATUS_OK){
 8003226:	f897 38fe 	ldrb.w	r3, [r7, #2302]	; 0x8fe
 800322a:	2b00      	cmp	r3, #0
 800322c:	d13e      	bne.n	80032ac <StartDefaultTask+0xefc>
				  run_time = 0;
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	f04f 0400 	mov.w	r4, #0
 8003236:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800323a:	e9c2 3400 	strd	r3, r4, [r2]
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800323e:	2302      	movs	r3, #2
 8003240:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 8003244:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003250:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003318 <StartDefaultTask+0xf68>
 8003254:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <StartDefaultTask+0xf6c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800326c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003270:	793b      	ldrb	r3, [r7, #4]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003278:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800327a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003284:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003288:	4413      	add	r3, r2
 800328a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2301      	movs	r3, #1
 8003292:	200b      	movs	r0, #11
 8003294:	f7fe fede 	bl	8002054 <commandRespond1>
 8003298:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 800329c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80032a0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80032a4:	4413      	add	r3, r2
 80032a6:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80032aa:	e039      	b.n	8003320 <StartDefaultTask+0xf70>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = status;
 80032b2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80032b6:	f897 28fe 	ldrb.w	r2, [r7, #2302]	; 0x8fe
 80032ba:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80032bc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80032c6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80032ca:	4413      	add	r3, r2
 80032cc:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2301      	movs	r3, #1
 80032d4:	2007      	movs	r0, #7
 80032d6:	f7fe febd 	bl	8002054 <commandRespond1>
 80032da:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 80032de:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80032e2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80032e6:	4413      	add	r3, r2
 80032e8:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 80032ec:	e0a0      	b.n	8003430 <StartDefaultTask+0x1080>
 80032ee:	bf00      	nop
 80032f0:	40000000 	.word	0x40000000
 80032f4:	3f847ae1 	.word	0x3f847ae1
 80032f8:	0801b570 	.word	0x0801b570
 80032fc:	0801b57c 	.word	0x0801b57c
 8003300:	2000b8e8 	.word	0x2000b8e8
 8003304:	2000ba68 	.word	0x2000ba68
 8003308:	0801b588 	.word	0x0801b588
 800330c:	0801b560 	.word	0x0801b560
 8003310:	0801b594 	.word	0x0801b594
 8003314:	20004d84 	.word	0x20004d84
 8003318:	42c80000 	.word	0x42c80000
 800331c:	20004d80 	.word	0x20004d80
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003320:	a3cb      	add	r3, pc, #812	; (adr r3, 8003650 <StartDefaultTask+0x12a0>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800332a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800332e:	f7fc ffad 	bl	800028c <__adddf3>
 8003332:	4603      	mov	r3, r0
 8003334:	460c      	mov	r4, r1
 8003336:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800333a:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 800333e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8003342:	ed93 0b00 	vldr	d0, [r3]
 8003346:	f007 fb11 	bl	800a96c <scaraIsFinish>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d021      	beq.n	8003394 <StartDefaultTask+0xfe4>
				if(run_point >= total_num_of_point){
 8003350:	4bc1      	ldr	r3, [pc, #772]	; (8003658 <StartDefaultTask+0x12a8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 8003358:	429a      	cmp	r2, r3
 800335a:	db09      	blt.n	8003370 <StartDefaultTask+0xfc0>
					current_duty_state = SCARA_DUTY_STATE_READY;
 800335c:	2300      	movs	r3, #0
 800335e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					lowlayer_readTruePosition(&positionNext);
 8003362:	48be      	ldr	r0, [pc, #760]	; (800365c <StartDefaultTask+0x12ac>)
 8003364:	f001 fdf8 	bl	8004f58 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003368:	48bc      	ldr	r0, [pc, #752]	; (800365c <StartDefaultTask+0x12ac>)
 800336a:	f000 fed1 	bl	8004110 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 800336e:	e05f      	b.n	8003430 <StartDefaultTask+0x1080>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003370:	2304      	movs	r3, #4
 8003372:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					run_point++;
 8003376:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 800337a:	3301      	adds	r3, #1
 800337c:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003380:	4ab6      	ldr	r2, [pc, #728]	; (800365c <StartDefaultTask+0x12ac>)
 8003382:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003386:	4610      	mov	r0, r2
 8003388:	3328      	adds	r3, #40	; 0x28
 800338a:	22c0      	movs	r2, #192	; 0xc0
 800338c:	4619      	mov	r1, r3
 800338e:	f012 fdf5 	bl	8015f7c <memcpy>
		  break;
 8003392:	e04d      	b.n	8003430 <StartDefaultTask+0x1080>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003394:	4cb2      	ldr	r4, [pc, #712]	; (8003660 <StartDefaultTask+0x12b0>)
 8003396:	4668      	mov	r0, sp
 8003398:	f104 0308 	add.w	r3, r4, #8
 800339c:	22b8      	movs	r2, #184	; 0xb8
 800339e:	4619      	mov	r1, r3
 80033a0:	f012 fdec 	bl	8015f7c <memcpy>
 80033a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80033a8:	48ac      	ldr	r0, [pc, #688]	; (800365c <StartDefaultTask+0x12ac>)
 80033aa:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80033ae:	ed91 0b00 	vldr	d0, [r1]
 80033b2:	f005 fb83 	bl	8008abc <scaraFlowDuty>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 38fd 	strb.w	r3, [r7, #2301]	; 0x8fd
				if ( SCARA_STATUS_OK == status) {
 80033bc:	f897 38fd 	ldrb.w	r3, [r7, #2301]	; 0x8fd
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d113      	bne.n	80033ec <StartDefaultTask+0x103c>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80033c4:	4ca6      	ldr	r4, [pc, #664]	; (8003660 <StartDefaultTask+0x12b0>)
 80033c6:	4aa5      	ldr	r2, [pc, #660]	; (800365c <StartDefaultTask+0x12ac>)
 80033c8:	ab2c      	add	r3, sp, #176	; 0xb0
 80033ca:	4611      	mov	r1, r2
 80033cc:	22c0      	movs	r2, #192	; 0xc0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f012 fdd4 	bl	8015f7c <memcpy>
 80033d4:	4668      	mov	r0, sp
 80033d6:	f104 0310 	add.w	r3, r4, #16
 80033da:	22b0      	movs	r2, #176	; 0xb0
 80033dc:	4619      	mov	r1, r3
 80033de:	f012 fdcd 	bl	8015f7c <memcpy>
 80033e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033e6:	f001 ff47 	bl	8005278 <lowlayer_computeAndWritePulse>
		  break;
 80033ea:	e021      	b.n	8003430 <StartDefaultTask+0x1080>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 80033f2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80033f6:	f897 28fd 	ldrb.w	r2, [r7, #2301]	; 0x8fd
 80033fa:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80033fc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003406:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800340a:	4413      	add	r3, r2
 800340c:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2301      	movs	r3, #1
 8003414:	2007      	movs	r0, #7
 8003416:	f7fe fe1d 	bl	8002054 <commandRespond1>
 800341a:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 800341e:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003422:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003426:	4413      	add	r3, r2
 8003428:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 800342c:	e000      	b.n	8003430 <StartDefaultTask+0x1080>

		  }
		  break;
		  
		  default:
			  break;
 800342e:	bf00      	nop
		  }
	  }

	  break;
 8003430:	e30b      	b.n	8003a4a <StartDefaultTask+0x169a>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003432:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8003436:	f993 0000 	ldrsb.w	r0, [r3]
 800343a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800343e:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003442:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8003446:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800344a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800344e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003452:	f002 f8b5 	bl	80055c0 <lowlayer_writePulse>
	  }
	  break;
 8003456:	e2f8      	b.n	8003a4a <StartDefaultTask+0x169a>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003458:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 800345c:	3b01      	subs	r3, #1
 800345e:	2b03      	cmp	r3, #3
 8003460:	f200 82f2 	bhi.w	8003a48 <StartDefaultTask+0x1698>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <StartDefaultTask+0x10bc>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800347d 	.word	0x0800347d
 8003470:	08003919 	.word	0x08003919
 8003474:	08003a39 	.word	0x08003a39
 8003478:	080034b5 	.word	0x080034b5
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 800347c:	4879      	ldr	r0, [pc, #484]	; (8003664 <StartDefaultTask+0x12b4>)
 800347e:	f00a fe98 	bl	800e1b2 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
			  object_head_pointer = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
			  operation_state = SCARA_MOVE_TO_TARGET;
 800348e:	2300      	movs	r3, #0
 8003490:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003494:	2304      	movs	r3, #4
 8003496:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 800349a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800349e:	2204      	movs	r2, #4
 80034a0:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 80034a2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80034a6:	2200      	movs	r2, #0
 80034a8:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 80034aa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80034ae:	2200      	movs	r2, #0
 80034b0:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 80034b2:	e2c6      	b.n	8003a42 <StartDefaultTask+0x1692>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 80034b4:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 80034b8:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 80034bc:	429a      	cmp	r2, r3
 80034be:	f000 82bd 	beq.w	8003a3c <StartDefaultTask+0x168c>
				  switch(operation_state){
 80034c2:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80034c6:	2b07      	cmp	r3, #7
 80034c8:	f200 8187 	bhi.w	80037da <StartDefaultTask+0x142a>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <StartDefaultTask+0x1124>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034f5 	.word	0x080034f5
 80034d8:	080035c5 	.word	0x080035c5
 80034dc:	080035f3 	.word	0x080035f3
 80034e0:	08003609 	.word	0x08003609
 80034e4:	0800367d 	.word	0x0800367d
 80034e8:	08003769 	.word	0x08003769
 80034ec:	08003797 	.word	0x08003797
 80034f0:	080037ad 	.word	0x080037ad
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 80034f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003500:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003504:	20c8      	movs	r0, #200	; 0xc8
 8003506:	fb00 f303 	mul.w	r3, r0, r3
 800350a:	440b      	add	r3, r1
 800350c:	33c0      	adds	r3, #192	; 0xc0
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	b29b      	uxth	r3, r3
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003668 <StartDefaultTask+0x12b8>
 8003520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003524:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800366c <StartDefaultTask+0x12bc>
 8003528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800352c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003670 <StartDefaultTask+0x12c0>
 8003530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003534:	ee17 0a90 	vmov	r0, s15
 8003538:	f7fd f806 	bl	8000548 <__aeabi_f2d>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
 8003540:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003544:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003548:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800354c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003550:	21c8      	movs	r1, #200	; 0xc8
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3350      	adds	r3, #80	; 0x50
 800355a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800355e:	4b45      	ldr	r3, [pc, #276]	; (8003674 <StartDefaultTask+0x12c4>)
 8003560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003564:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f7fd f844 	bl	80005f8 <__aeabi_dmul>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	f897 693e 	ldrb.w	r6, [r7, #2366]	; 0x93e
 8003578:	4620      	mov	r0, r4
 800357a:	4629      	mov	r1, r5
 800357c:	f7fc fe84 	bl	8000288 <__aeabi_dsub>
 8003580:	4603      	mov	r3, r0
 8003582:	460c      	mov	r4, r1
 8003584:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003588:	22c8      	movs	r2, #200	; 0xc8
 800358a:	fb02 f206 	mul.w	r2, r2, r6
 800358e:	440a      	add	r2, r1
 8003590:	3250      	adds	r2, #80	; 0x50
 8003592:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003596:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800359a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800359e:	21c8      	movs	r1, #200	; 0xc8
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80035aa:	a423      	add	r4, pc, #140	; (adr r4, 8003638 <StartDefaultTask+0x1288>)
 80035ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035b0:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 80035b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035b8:	4c2f      	ldr	r4, [pc, #188]	; (8003678 <StartDefaultTask+0x12c8>)
 80035ba:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80035be:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80035c2:	e10a      	b.n	80037da <StartDefaultTask+0x142a>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 80035c4:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80035c8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80035cc:	21c8      	movs	r1, #200	; 0xc8
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80035d8:	a419      	add	r4, pc, #100	; (adr r4, 8003640 <StartDefaultTask+0x1290>)
 80035da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035de:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 80035e2:	a419      	add	r4, pc, #100	; (adr r4, 8003648 <StartDefaultTask+0x1298>)
 80035e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035e8:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80035ec:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80035f0:	e0f3      	b.n	80037da <StartDefaultTask+0x142a>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 80035f2:	a417      	add	r4, pc, #92	; (adr r4, 8003650 <StartDefaultTask+0x12a0>)
 80035f4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035f8:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80035fc:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8003600:	2001      	movs	r0, #1
 8003602:	f007 f921 	bl	800a848 <scaraSetOutput>
					  }
					  break;
 8003606:	e0e8      	b.n	80037da <StartDefaultTask+0x142a>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003608:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800360c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003610:	21c8      	movs	r1, #200	; 0xc8
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800361c:	a406      	add	r4, pc, #24	; (adr r4, 8003638 <StartDefaultTask+0x1288>)
 800361e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003622:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003626:	a408      	add	r4, pc, #32	; (adr r4, 8003648 <StartDefaultTask+0x1298>)
 8003628:	e9d4 3400 	ldrd	r3, r4, [r4]
 800362c:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003630:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003634:	e0d1      	b.n	80037da <StartDefaultTask+0x142a>
 8003636:	bf00      	nop
 8003638:	00000000 	.word	0x00000000
 800363c:	40606000 	.word	0x40606000
 8003640:	00000000 	.word	0x00000000
 8003644:	405fa000 	.word	0x405fa000
 8003648:	40000000 	.word	0x40000000
 800364c:	3fd33333 	.word	0x3fd33333
 8003650:	40000000 	.word	0x40000000
 8003654:	3f847ae1 	.word	0x3f847ae1
 8003658:	20004d80 	.word	0x20004d80
 800365c:	2000ba68 	.word	0x2000ba68
 8003660:	2000b8e8 	.word	0x2000b8e8
 8003664:	2000bb68 	.word	0x2000bb68
 8003668:	399c09bf 	.word	0x399c09bf
 800366c:	3f99999a 	.word	0x3f99999a
 8003670:	3e99999a 	.word	0x3e99999a
 8003674:	20000ba0 	.word	0x20000ba0
 8003678:	3ff33333 	.word	0x3ff33333
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 800367c:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003680:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003684:	21c8      	movs	r1, #200	; 0xc8
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	33b8      	adds	r3, #184	; 0xb8
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003696:	f107 0120 	add.w	r1, r7, #32
 800369a:	4603      	mov	r3, r0
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4403      	add	r3, r0
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	440b      	add	r3, r1
 80036a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036a8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80036ac:	20c8      	movs	r0, #200	; 0xc8
 80036ae:	fb00 f202 	mul.w	r2, r0, r2
 80036b2:	440a      	add	r2, r1
 80036b4:	3248      	adds	r2, #72	; 0x48
 80036b6:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 80036ba:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80036be:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80036c2:	21c8      	movs	r1, #200	; 0xc8
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	33b8      	adds	r3, #184	; 0xb8
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 80036d4:	f107 0120 	add.w	r1, r7, #32
 80036d8:	4603      	mov	r3, r0
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4403      	add	r3, r0
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	3308      	adds	r3, #8
 80036e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036e8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80036ec:	20c8      	movs	r0, #200	; 0xc8
 80036ee:	fb00 f202 	mul.w	r2, r0, r2
 80036f2:	440a      	add	r2, r1
 80036f4:	3250      	adds	r2, #80	; 0x50
 80036f6:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 80036fa:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80036fe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003702:	21c8      	movs	r1, #200	; 0xc8
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	33b8      	adds	r3, #184	; 0xb8
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003714:	f107 0120 	add.w	r1, r7, #32
 8003718:	4603      	mov	r3, r0
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4403      	add	r3, r0
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	3310      	adds	r3, #16
 8003724:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003728:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800372c:	20c8      	movs	r0, #200	; 0xc8
 800372e:	fb00 f202 	mul.w	r2, r0, r2
 8003732:	440a      	add	r2, r1
 8003734:	3260      	adds	r2, #96	; 0x60
 8003736:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800373a:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800373e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003742:	21c8      	movs	r1, #200	; 0xc8
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800374e:	a4d6      	add	r4, pc, #856	; (adr r4, 8003aa8 <StartDefaultTask+0x16f8>)
 8003750:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003754:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800375c:	4cd4      	ldr	r4, [pc, #848]	; (8003ab0 <StartDefaultTask+0x1700>)
 800375e:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003762:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003766:	e038      	b.n	80037da <StartDefaultTask+0x142a>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003768:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800376c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003770:	21c8      	movs	r1, #200	; 0xc8
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800377c:	a4c4      	add	r4, pc, #784	; (adr r4, 8003a90 <StartDefaultTask+0x16e0>)
 800377e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003782:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8003786:	a4c4      	add	r4, pc, #784	; (adr r4, 8003a98 <StartDefaultTask+0x16e8>)
 8003788:	e9d4 3400 	ldrd	r3, r4, [r4]
 800378c:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003790:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003794:	e021      	b.n	80037da <StartDefaultTask+0x142a>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003796:	a4c2      	add	r4, pc, #776	; (adr r4, 8003aa0 <StartDefaultTask+0x16f0>)
 8003798:	e9d4 3400 	ldrd	r3, r4, [r4]
 800379c:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80037a0:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f007 f84f 	bl	800a848 <scaraSetOutput>
					  }
					  break;
 80037aa:	e016      	b.n	80037da <StartDefaultTask+0x142a>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 80037ac:	a4ba      	add	r4, pc, #744	; (adr r4, 8003a98 <StartDefaultTask+0x16e8>)
 80037ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037b2:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80037b6:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80037ba:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80037be:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80037c2:	21c8      	movs	r1, #200	; 0xc8
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80037ce:	a4b6      	add	r4, pc, #728	; (adr r4, 8003aa8 <StartDefaultTask+0x16f8>)
 80037d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037d4:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80037d8:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 80037da:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80037de:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80037e2:	21c8      	movs	r1, #200	; 0xc8
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	18d1      	adds	r1, r2, r3
 80037ea:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80037ee:	3328      	adds	r3, #40	; 0x28
 80037f0:	22c0      	movs	r2, #192	; 0xc0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f012 fbc2 	bl	8015f7c <memcpy>
				  duty_cmd.time_total = state_time;
 80037f8:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80037fc:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003800:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003804:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8003808:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	f04f 0400 	mov.w	r4, #0
 8003814:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8003818:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800381c:	2b02      	cmp	r3, #2
 800381e:	d003      	beq.n	8003828 <StartDefaultTask+0x1478>
 8003820:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003824:	2b06      	cmp	r3, #6
 8003826:	d103      	bne.n	8003830 <StartDefaultTask+0x1480>
					  status1 = SCARA_STATUS_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
 800382e:	e031      	b.n	8003894 <StartDefaultTask+0x14e4>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 8003830:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003834:	2b01      	cmp	r3, #1
 8003836:	d00b      	beq.n	8003850 <StartDefaultTask+0x14a0>
 8003838:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800383c:	2b05      	cmp	r3, #5
 800383e:	d007      	beq.n	8003850 <StartDefaultTask+0x14a0>
 8003840:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003844:	2b03      	cmp	r3, #3
 8003846:	d003      	beq.n	8003850 <StartDefaultTask+0x14a0>
 8003848:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800384c:	2b07      	cmp	r3, #7
 800384e:	d108      	bne.n	8003862 <StartDefaultTask+0x14b2>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8003850:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003854:	2202      	movs	r2, #2
 8003856:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 8003858:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800385c:	2203      	movs	r2, #3
 800385e:	745a      	strb	r2, [r3, #17]
 8003860:	e007      	b.n	8003872 <StartDefaultTask+0x14c2>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8003862:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003866:	2200      	movs	r2, #0
 8003868:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800386a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800386e:	2201      	movs	r2, #1
 8003870:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 8003872:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8003876:	4668      	mov	r0, sp
 8003878:	f104 0310 	add.w	r3, r4, #16
 800387c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003880:	4619      	mov	r1, r3
 8003882:	f012 fb7b 	bl	8015f7c <memcpy>
 8003886:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800388a:	f002 f889 	bl	80059a0 <scaraInitDuty>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
				  }
				  if ( SCARA_STATUS_OK == status1) {
 8003894:	f897 392b 	ldrb.w	r3, [r7, #2347]	; 0x92b
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <StartDefaultTask+0x1504>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 800389c:	2302      	movs	r3, #2
 800389e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	run_time = 0;
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	f04f 0400 	mov.w	r4, #0
 80038aa:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80038ae:	e9c2 3400 	strd	r3, r4, [r2]
 80038b2:	e031      	b.n	8003918 <StartDefaultTask+0x1568>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80038b4:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80038b8:	3301      	adds	r3, #1
 80038ba:	425a      	negs	r2, r3
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	f002 0207 	and.w	r2, r2, #7
 80038c4:	bf58      	it	pl
 80038c6:	4253      	negpl	r3, r2
 80038c8:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
					operation_state = SCARA_MOVE_TO_TARGET;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					detail_array[0] = status1;
 80038d2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80038d6:	f897 292b 	ldrb.w	r2, [r7, #2347]	; 0x92b
 80038da:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80038dc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80038e0:	6899      	ldr	r1, [r3, #8]
 80038e2:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80038e6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80038ea:	4413      	add	r3, r2
 80038ec:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	2301      	movs	r3, #1
 80038f4:	2007      	movs	r0, #7
 80038f6:	f7fe fbad 	bl	8002054 <commandRespond1>
 80038fa:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 80038fe:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003902:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003906:	4413      	add	r3, r2
 8003908:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					LOG_REPORT("INIT FAIL", __LINE__);
 800390c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8003910:	4868      	ldr	r0, [pc, #416]	; (8003ab4 <StartDefaultTask+0x1704>)
 8003912:	f7fe fc07 	bl	8002124 <LOG_REPORT>
					break;
 8003916:	e094      	b.n	8003a42 <StartDefaultTask+0x1692>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003918:	a361      	add	r3, pc, #388	; (adr r3, 8003aa0 <StartDefaultTask+0x16f0>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003926:	f7fc fcb1 	bl	800028c <__adddf3>
 800392a:	4603      	mov	r3, r0
 800392c:	460c      	mov	r4, r1
 800392e:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003932:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003936:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800393a:	ed93 0b00 	vldr	d0, [r3]
 800393e:	f007 f815 	bl	800a96c <scaraIsFinish>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d022      	beq.n	800398e <StartDefaultTask+0x15de>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003948:	2304      	movs	r3, #4
 800394a:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 800394e:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003952:	2b07      	cmp	r3, #7
 8003954:	d10f      	bne.n	8003976 <StartDefaultTask+0x15c6>
					operation_state = SCARA_MOVE_TO_TARGET;
 8003956:	2300      	movs	r3, #0
 8003958:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					object_tail_pointer = (object_tail_pointer+1)%8;
 800395c:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003960:	3301      	adds	r3, #1
 8003962:	425a      	negs	r2, r3
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	f002 0207 	and.w	r2, r2, #7
 800396c:	bf58      	it	pl
 800396e:	4253      	negpl	r3, r2
 8003970:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
 8003974:	e004      	b.n	8003980 <StartDefaultTask+0x15d0>
				}else{
					operation_state += 1; //next state
 8003976:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800397a:	3301      	adds	r3, #1
 800397c:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
				}
				lowlayer_readTruePosition(&positionNext);
 8003980:	484d      	ldr	r0, [pc, #308]	; (8003ab8 <StartDefaultTask+0x1708>)
 8003982:	f001 fae9 	bl	8004f58 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8003986:	484c      	ldr	r0, [pc, #304]	; (8003ab8 <StartDefaultTask+0x1708>)
 8003988:	f000 fbc2 	bl	8004110 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 800398c:	e058      	b.n	8003a40 <StartDefaultTask+0x1690>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 800398e:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003992:	2b02      	cmp	r3, #2
 8003994:	d054      	beq.n	8003a40 <StartDefaultTask+0x1690>
 8003996:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800399a:	2b06      	cmp	r3, #6
 800399c:	d050      	beq.n	8003a40 <StartDefaultTask+0x1690>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800399e:	4c47      	ldr	r4, [pc, #284]	; (8003abc <StartDefaultTask+0x170c>)
 80039a0:	4668      	mov	r0, sp
 80039a2:	f104 0308 	add.w	r3, r4, #8
 80039a6:	22b8      	movs	r2, #184	; 0xb8
 80039a8:	4619      	mov	r1, r3
 80039aa:	f012 fae7 	bl	8015f7c <memcpy>
 80039ae:	e894 000c 	ldmia.w	r4, {r2, r3}
 80039b2:	4841      	ldr	r0, [pc, #260]	; (8003ab8 <StartDefaultTask+0x1708>)
 80039b4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80039b8:	ed91 0b00 	vldr	d0, [r1]
 80039bc:	f005 f87e 	bl	8008abc <scaraFlowDuty>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 38ff 	strb.w	r3, [r7, #2303]	; 0x8ff
				if ( SCARA_STATUS_OK == status) {
 80039c6:	f897 38ff 	ldrb.w	r3, [r7, #2303]	; 0x8ff
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <StartDefaultTask+0x1646>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80039ce:	4c3b      	ldr	r4, [pc, #236]	; (8003abc <StartDefaultTask+0x170c>)
 80039d0:	4a39      	ldr	r2, [pc, #228]	; (8003ab8 <StartDefaultTask+0x1708>)
 80039d2:	ab2c      	add	r3, sp, #176	; 0xb0
 80039d4:	4611      	mov	r1, r2
 80039d6:	22c0      	movs	r2, #192	; 0xc0
 80039d8:	4618      	mov	r0, r3
 80039da:	f012 facf 	bl	8015f7c <memcpy>
 80039de:	4668      	mov	r0, sp
 80039e0:	f104 0310 	add.w	r3, r4, #16
 80039e4:	22b0      	movs	r2, #176	; 0xb0
 80039e6:	4619      	mov	r1, r3
 80039e8:	f012 fac8 	bl	8015f7c <memcpy>
 80039ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80039f0:	f001 fc42 	bl	8005278 <lowlayer_computeAndWritePulse>
		  break;
 80039f4:	e024      	b.n	8003a40 <StartDefaultTask+0x1690>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 80039fc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003a00:	f897 28ff 	ldrb.w	r2, [r7, #2303]	; 0x8ff
 8003a04:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a06:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003a0a:	6899      	ldr	r1, [r3, #8]
 8003a0c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003a10:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003a14:	4413      	add	r3, r2
 8003a16:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	2007      	movs	r0, #7
 8003a20:	f7fe fb18 	bl	8002054 <commandRespond1>
 8003a24:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 8003a28:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003a2c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003a30:	4413      	add	r3, r2
 8003a32:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 8003a36:	e003      	b.n	8003a40 <StartDefaultTask+0x1690>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8003a38:	bf00      	nop
 8003a3a:	e005      	b.n	8003a48 <StartDefaultTask+0x1698>
				  break;
 8003a3c:	bf00      	nop
 8003a3e:	e003      	b.n	8003a48 <StartDefaultTask+0x1698>
		  break;
 8003a40:	bf00      	nop
		  }
	  }
	  break;
 8003a42:	e001      	b.n	8003a48 <StartDefaultTask+0x1698>
	  break;
 8003a44:	bf00      	nop
 8003a46:	e000      	b.n	8003a4a <StartDefaultTask+0x169a>
	  break;
 8003a48:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 8003a4a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	dd08      	ble.n	8003a64 <StartDefaultTask+0x16b4>
		CDC_Transmit_FS(respond, total_respond_length);
 8003a52:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f011 fe10 	bl	8015684 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8003a64:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f006 ff1f 	bl	800a8ac <scaraSetMethod>
	  scaraSetMode(current_mode);
 8003a6e:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8003a72:	4618      	mov	r0, r3
 8003a74:	f006 ff0a 	bl	800a88c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8003a78:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 fef5 	bl	800a86c <scaraSetDutyState>

    osDelay(1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f00e ff18 	bl	80128b8 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8003a88:	f7fe bcfa 	b.w	8002480 <StartDefaultTask+0xd0>
 8003a8c:	f3af 8000 	nop.w
 8003a90:	00000000 	.word	0x00000000
 8003a94:	405fa000 	.word	0x405fa000
 8003a98:	40000000 	.word	0x40000000
 8003a9c:	3fd33333 	.word	0x3fd33333
 8003aa0:	40000000 	.word	0x40000000
 8003aa4:	3f847ae1 	.word	0x3f847ae1
 8003aa8:	00000000 	.word	0x00000000
 8003aac:	40606000 	.word	0x40606000
 8003ab0:	3ff33333 	.word	0x3ff33333
 8003ab4:	0801b57c 	.word	0x0801b57c
 8003ab8:	2000ba68 	.word	0x2000ba68
 8003abc:	2000b8e8 	.word	0x2000b8e8

08003ac0 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac2:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8003ac6:	af70      	add	r7, sp, #448	; 0x1c0
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003acc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003ad4:	4964      	ldr	r1, [pc, #400]	; (8003c68 <Start_USB_RX_Task+0x1a8>)
 8003ad6:	4865      	ldr	r0, [pc, #404]	; (8003c6c <Start_USB_RX_Task+0x1ac>)
 8003ad8:	f000 ffa8 	bl	8004a2c <ringBuff_DistanceOf>
 8003adc:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8003ae0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d0f4      	beq.n	8003ad4 <Start_USB_RX_Task+0x14>
 8003aea:	466b      	mov	r3, sp
 8003aec:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003aee:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003af2:	1c58      	adds	r0, r3, #1
 8003af4:	1e43      	subs	r3, r0, #1
 8003af6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	00d4      	lsls	r4, r2, #3
 8003b0c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003b10:	00cb      	lsls	r3, r1, #3
 8003b12:	4603      	mov	r3, r0
 8003b14:	4619      	mov	r1, r3
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	00d4      	lsls	r4, r2, #3
 8003b24:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003b28:	00cb      	lsls	r3, r1, #3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	08db      	lsrs	r3, r3, #3
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	ebad 0d03 	sub.w	sp, sp, r3
 8003b36:	ab70      	add	r3, sp, #448	; 0x1c0
 8003b38:	3300      	adds	r3, #0
 8003b3a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8003b3e:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8003b42:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003b46:	3301      	adds	r3, #1
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4848      	ldr	r0, [pc, #288]	; (8003c6c <Start_USB_RX_Task+0x1ac>)
 8003b4c:	f000 ff4d 	bl	80049ea <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8003b50:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8003b54:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f107 020c 	add.w	r2, r7, #12
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f7fe fb26 	bl	80021b0 <unPackPayload>
 8003b64:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8003b68:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d077      	beq.n	8003c62 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8003b72:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003b76:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8003b7a:	f107 000c 	add.w	r0, r7, #12
 8003b7e:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8003b82:	f7fd fa01 	bl	8000f88 <packetRead>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8003b8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b90:	2287      	movs	r2, #135	; 0x87
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f012 fa15 	bl	8015fc4 <memset>
				  detail_length = 0;
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8003ba2:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8003ba6:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	936f      	str	r3, [sp, #444]	; 0x1bc
 8003bb0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003bb4:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003bb6:	4668      	mov	r0, sp
 8003bb8:	f104 0308 	add.w	r3, r4, #8
 8003bbc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f012 f9db 	bl	8015f7c <memcpy>
 8003bc6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f7fe f85c 	bl	8001c88 <commandReply>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8003bd6:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003bda:	2b09      	cmp	r3, #9
 8003bdc:	d123      	bne.n	8003c26 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8003be4:	e008      	b.n	8003bf8 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <Start_USB_RX_Task+0x1b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f04f 31ff 	mov.w	r1, #4294967295
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f00f f872 	bl	8012cd8 <osMailAlloc>
 8003bf4:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8003bf8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f2      	beq.n	8003be6 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8003c00:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003c04:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8003c0e:	f012 f9b5 	bl	8015f7c <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8003c12:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <Start_USB_RX_Task+0x1b0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f00f f872 	bl	8012d04 <osMailPut>
 8003c20:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8003c24:	e01d      	b.n	8003c62 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8003c26:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003c2a:	2b0a      	cmp	r3, #10
 8003c2c:	d019      	beq.n	8003c62 <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8003c2e:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	681c      	ldr	r4, [r3, #0]
 8003c38:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003c3c:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8003c40:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	4623      	mov	r3, r4
 8003c48:	f7fe fa04 	bl	8002054 <commandRespond1>
 8003c4c:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8003c50:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f011 fd11 	bl	8015684 <CDC_Transmit_FS>
 8003c62:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003c64:	e736      	b.n	8003ad4 <Start_USB_RX_Task+0x14>
 8003c66:	bf00      	nop
 8003c68:	0801b638 	.word	0x0801b638
 8003c6c:	20000004 	.word	0x20000004
 8003c70:	2000ac64 	.word	0x2000ac64

08003c74 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
 8003cc0:	615a      	str	r2, [r3, #20]
 8003cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cc6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003cca:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cce:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <MX_FSMC_Init+0xbc>)
 8003cd0:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003cd8:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003cde:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003d04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003d16:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003d28:	230f      	movs	r3, #15
 8003d2a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003d2c:	230f      	movs	r3, #15
 8003d2e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003d30:	23ff      	movs	r3, #255	; 0xff
 8003d32:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003d34:	230f      	movs	r3, #15
 8003d36:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003d38:	2310      	movs	r3, #16
 8003d3a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003d3c:	2311      	movs	r3, #17
 8003d3e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	2200      	movs	r2, #0
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4806      	ldr	r0, [pc, #24]	; (8003d64 <MX_FSMC_Init+0xb8>)
 8003d4c:	f008 fb98 	bl	800c480 <HAL_NOR_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003d56:	f000 fda9 	bl	80048ac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003d5a:	bf00      	nop
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2000ac70 	.word	0x2000ac70
 8003d68:	a0000104 	.word	0xa0000104

08003d6c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d72:	1d3b      	adds	r3, r7, #4
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_FSMC_MspInit+0xa8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d140      	bne.n	8003e0a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_FSMC_MspInit+0xa8>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <HAL_FSMC_MspInit+0xac>)
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <HAL_FSMC_MspInit+0xac>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6393      	str	r3, [r2, #56]	; 0x38
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_FSMC_MspInit+0xac>)
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003daa:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003dae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	2302      	movs	r3, #2
 8003db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db8:	2303      	movs	r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4815      	ldr	r0, [pc, #84]	; (8003e1c <HAL_FSMC_MspInit+0xb0>)
 8003dc6:	f008 f9a7 	bl	800c118 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003dca:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003dce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003ddc:	230c      	movs	r3, #12
 8003dde:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	4619      	mov	r1, r3
 8003de4:	480e      	ldr	r0, [pc, #56]	; (8003e20 <HAL_FSMC_MspInit+0xb4>)
 8003de6:	f008 f997 	bl	800c118 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df6:	2303      	movs	r3, #3
 8003df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4808      	ldr	r0, [pc, #32]	; (8003e24 <HAL_FSMC_MspInit+0xb8>)
 8003e04:	f008 f988 	bl	800c118 <HAL_GPIO_Init>
 8003e08:	e000      	b.n	8003e0c <HAL_FSMC_MspInit+0xa0>
    return;
 8003e0a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000ffc 	.word	0x20000ffc
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40020c00 	.word	0x40020c00
 8003e24:	40020400 	.word	0x40020400

08003e28 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003e30:	f7ff ff9c 	bl	8003d6c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	0000      	movs	r0, r0
	...

08003e40 <update_gcode_point>:
 */

#include "gcode_handler.h"

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point)
{
 8003e40:	b084      	sub	sp, #16
 8003e42:	b590      	push	{r4, r7, lr}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	f107 001c 	add.w	r0, r7, #28
 8003e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb65 	bl	8000524 <__aeabi_i2d>
 8003e5a:	a347      	add	r3, pc, #284	; (adr r3, 8003f78 <update_gcode_point+0x138>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fbca 	bl	80005f8 <__aeabi_dmul>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	4b44      	ldr	r3, [pc, #272]	; (8003f80 <update_gcode_point+0x140>)
 8003e6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e72:	461a      	mov	r2, r3
 8003e74:	4623      	mov	r3, r4
 8003e76:	f7fc fa09 	bl	800028c <__adddf3>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc fb4c 	bl	8000524 <__aeabi_i2d>
 8003e8c:	a33a      	add	r3, pc, #232	; (adr r3, 8003f78 <update_gcode_point+0x138>)
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f7fc fbb1 	bl	80005f8 <__aeabi_dmul>
 8003e96:	4603      	mov	r3, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <update_gcode_point+0x144>)
 8003ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	f7fc f9f0 	bl	800028c <__adddf3>
 8003eac:	4603      	mov	r3, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    if(gcode_point.type_define[1] == UP_Z){
 8003eb6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d10f      	bne.n	8003ede <update_gcode_point+0x9e>
  	  duty_cmd->target_point.z = up_z_height + offset_z;
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <update_gcode_point+0x148>)
 8003ec0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ec4:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <update_gcode_point+0x14c>)
 8003ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4623      	mov	r3, r4
 8003ece:	f7fc f9dd 	bl	800028c <__adddf3>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8003edc:	e00e      	b.n	8003efc <update_gcode_point+0xbc>
    }else{
  	  duty_cmd->target_point.z = down_z_height + offset_z;
 8003ede:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <update_gcode_point+0x150>)
 8003ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <update_gcode_point+0x14c>)
 8003ee6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eea:	461a      	mov	r2, r3
 8003eec:	4623      	mov	r3, r4
 8003eee:	f7fc f9cd 	bl	800028c <__adddf3>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    }
    duty_cmd->target_point.roll = roll_angle;
 8003efc:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <update_gcode_point+0x154>)
 8003efe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
    duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb0a 	bl	8000524 <__aeabi_i2d>
 8003f10:	a319      	add	r3, pc, #100	; (adr r3, 8003f78 <update_gcode_point+0x138>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc fb6f 	bl	80005f8 <__aeabi_dmul>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	4621      	mov	r1, r4
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <update_gcode_point+0x158>)
 8003f28:	f7fc fc90 	bl	800084c <__aeabi_ddiv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
    duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	741a      	strb	r2, [r3, #16]
    duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	731a      	strb	r2, [r3, #12]
    duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	745a      	strb	r2, [r3, #17]
    if(gcode_point.type_define[0] == LINEAR_TYPE){
 8003f48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d103      	bne.n	8003f58 <update_gcode_point+0x118>
  	  duty_cmd->path_type = DUTY_PATH_LINE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	739a      	strb	r2, [r3, #14]
 8003f56:	e002      	b.n	8003f5e <update_gcode_point+0x11e>
    }else if(gcode_point.type_define[0] == ARC_AW_TYPE){
 8003f58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f5c:	2b03      	cmp	r3, #3

    }else if(gcode_point.type_define[0] == ARC_CW_TYPE){

    }
    duty_cmd->path_type = DUTY_PATH_LINE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	739a      	strb	r2, [r3, #14]
    duty_cmd->space_type = DUTY_SPACE_TASK;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	735a      	strb	r2, [r3, #13]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f74:	b004      	add	sp, #16
 8003f76:	4770      	bx	lr
 8003f78:	a0000000 	.word	0xa0000000
 8003f7c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003f80:	20004d78 	.word	0x20004d78
 8003f84:	2000ab50 	.word	0x2000ab50
 8003f88:	20004d60 	.word	0x20004d60
 8003f8c:	2000ab48 	.word	0x2000ab48
 8003f90:	20004d68 	.word	0x20004d68
 8003f94:	20004d70 	.word	0x20004d70
 8003f98:	40877000 	.word	0x40877000

08003f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	4b51      	ldr	r3, [pc, #324]	; (80040fc <MX_GPIO_Init+0x160>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a50      	ldr	r2, [pc, #320]	; (80040fc <MX_GPIO_Init+0x160>)
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <MX_GPIO_Init+0x160>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <MX_GPIO_Init+0x160>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a49      	ldr	r2, [pc, #292]	; (80040fc <MX_GPIO_Init+0x160>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <MX_GPIO_Init+0x160>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	4b43      	ldr	r3, [pc, #268]	; (80040fc <MX_GPIO_Init+0x160>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a42      	ldr	r2, [pc, #264]	; (80040fc <MX_GPIO_Init+0x160>)
 8003ff4:	f043 0310 	orr.w	r3, r3, #16
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b40      	ldr	r3, [pc, #256]	; (80040fc <MX_GPIO_Init+0x160>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	4b3c      	ldr	r3, [pc, #240]	; (80040fc <MX_GPIO_Init+0x160>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <MX_GPIO_Init+0x160>)
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b39      	ldr	r3, [pc, #228]	; (80040fc <MX_GPIO_Init+0x160>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <MX_GPIO_Init+0x160>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a34      	ldr	r2, [pc, #208]	; (80040fc <MX_GPIO_Init+0x160>)
 800402c:	f043 0308 	orr.w	r3, r3, #8
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b32      	ldr	r3, [pc, #200]	; (80040fc <MX_GPIO_Init+0x160>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 800403e:	2200      	movs	r2, #0
 8004040:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8004044:	482e      	ldr	r0, [pc, #184]	; (8004100 <MX_GPIO_Init+0x164>)
 8004046:	f008 fa01 	bl	800c44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800404a:	2200      	movs	r2, #0
 800404c:	f641 0148 	movw	r1, #6216	; 0x1848
 8004050:	482c      	ldr	r0, [pc, #176]	; (8004104 <MX_GPIO_Init+0x168>)
 8004052:	f008 f9fb 	bl	800c44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004056:	2200      	movs	r2, #0
 8004058:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800405c:	482a      	ldr	r0, [pc, #168]	; (8004108 <MX_GPIO_Init+0x16c>)
 800405e:	f008 f9f5 	bl	800c44c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8004062:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8004066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004068:	2301      	movs	r3, #1
 800406a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004070:	2300      	movs	r3, #0
 8004072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4619      	mov	r1, r3
 800407a:	4821      	ldr	r0, [pc, #132]	; (8004100 <MX_GPIO_Init+0x164>)
 800407c:	f008 f84c 	bl	800c118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004080:	f640 0348 	movw	r3, #2120	; 0x848
 8004084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	4619      	mov	r1, r3
 8004098:	481a      	ldr	r0, [pc, #104]	; (8004104 <MX_GPIO_Init+0x168>)
 800409a:	f008 f83d 	bl	800c118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 800409e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a4:	2301      	movs	r3, #1
 80040a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ac:	2303      	movs	r3, #3
 80040ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80040b0:	f107 0314 	add.w	r3, r7, #20
 80040b4:	4619      	mov	r1, r3
 80040b6:	4813      	ldr	r0, [pc, #76]	; (8004104 <MX_GPIO_Init+0x168>)
 80040b8:	f008 f82e 	bl	800c118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80040bc:	f242 0304 	movw	r3, #8196	; 0x2004
 80040c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040c6:	2301      	movs	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	4619      	mov	r1, r3
 80040d0:	480c      	ldr	r0, [pc, #48]	; (8004104 <MX_GPIO_Init+0x168>)
 80040d2:	f008 f821 	bl	800c118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80040d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80040da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040dc:	2301      	movs	r3, #1
 80040de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e4:	2300      	movs	r3, #0
 80040e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4619      	mov	r1, r3
 80040ee:	4806      	ldr	r0, [pc, #24]	; (8004108 <MX_GPIO_Init+0x16c>)
 80040f0:	f008 f812 	bl	800c118 <HAL_GPIO_Init>

}
 80040f4:	bf00      	nop
 80040f6:	3728      	adds	r7, #40	; 0x28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	40020400 	.word	0x40020400
 8004104:	40020c00 	.word	0x40020c00
 8004108:	40020000 	.word	0x40020000
 800410c:	00000000 	.word	0x00000000

08004110 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b08b      	sub	sp, #44	; 0x2c
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800411e:	eeb0 0a47 	vmov.f32	s0, s14
 8004122:	eef0 0a67 	vmov.f32	s1, s15
 8004126:	f015 fd17 	bl	8019b58 <cos>
 800412a:	ec51 0b10 	vmov	r0, r1, d0
 800412e:	a38e      	add	r3, pc, #568	; (adr r3, 8004368 <kinematicForward+0x258>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f7fc fa60 	bl	80005f8 <__aeabi_dmul>
 8004138:	4603      	mov	r3, r0
 800413a:	460c      	mov	r4, r1
 800413c:	461d      	mov	r5, r3
 800413e:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800414c:	461a      	mov	r2, r3
 800414e:	4623      	mov	r3, r4
 8004150:	f7fc f89c 	bl	800028c <__adddf3>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
 8004158:	ec44 3b17 	vmov	d7, r3, r4
 800415c:	eeb0 0a47 	vmov.f32	s0, s14
 8004160:	eef0 0a67 	vmov.f32	s1, s15
 8004164:	f015 fcf8 	bl	8019b58 <cos>
 8004168:	ec51 0b10 	vmov	r0, r1, d0
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	4b83      	ldr	r3, [pc, #524]	; (8004380 <kinematicForward+0x270>)
 8004172:	f7fc fa41 	bl	80005f8 <__aeabi_dmul>
 8004176:	4603      	mov	r3, r0
 8004178:	460c      	mov	r4, r1
 800417a:	461a      	mov	r2, r3
 800417c:	4623      	mov	r3, r4
 800417e:	4628      	mov	r0, r5
 8004180:	4631      	mov	r1, r6
 8004182:	f7fc f883 	bl	800028c <__adddf3>
 8004186:	4603      	mov	r3, r0
 8004188:	460c      	mov	r4, r1
 800418a:	461d      	mov	r5, r3
 800418c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800419a:	461a      	mov	r2, r3
 800419c:	4623      	mov	r3, r4
 800419e:	f7fc f875 	bl	800028c <__adddf3>
 80041a2:	4603      	mov	r3, r0
 80041a4:	460c      	mov	r4, r1
 80041a6:	4618      	mov	r0, r3
 80041a8:	4621      	mov	r1, r4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80041b0:	461a      	mov	r2, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	f7fc f868 	bl	8000288 <__aeabi_dsub>
 80041b8:	4603      	mov	r3, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	ec44 3b17 	vmov	d7, r3, r4
 80041c0:	eeb0 0a47 	vmov.f32	s0, s14
 80041c4:	eef0 0a67 	vmov.f32	s1, s15
 80041c8:	f015 fcc6 	bl	8019b58 <cos>
 80041cc:	ec51 0b10 	vmov	r0, r1, d0
 80041d0:	a363      	add	r3, pc, #396	; (adr r3, 8004360 <kinematicForward+0x250>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc fa0f 	bl	80005f8 <__aeabi_dmul>
 80041da:	4603      	mov	r3, r0
 80041dc:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 80041de:	461a      	mov	r2, r3
 80041e0:	4623      	mov	r3, r4
 80041e2:	4628      	mov	r0, r5
 80041e4:	4631      	mov	r1, r6
 80041e6:	f7fc f851 	bl	800028c <__adddf3>
 80041ea:	4603      	mov	r3, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80041f8:	eeb0 0a47 	vmov.f32	s0, s14
 80041fc:	eef0 0a67 	vmov.f32	s1, s15
 8004200:	f015 fd3a 	bl	8019c78 <sin>
 8004204:	ec51 0b10 	vmov	r0, r1, d0
 8004208:	a357      	add	r3, pc, #348	; (adr r3, 8004368 <kinematicForward+0x258>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc f9f3 	bl	80005f8 <__aeabi_dmul>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	461d      	mov	r5, r3
 8004218:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004226:	461a      	mov	r2, r3
 8004228:	4623      	mov	r3, r4
 800422a:	f7fc f82f 	bl	800028c <__adddf3>
 800422e:	4603      	mov	r3, r0
 8004230:	460c      	mov	r4, r1
 8004232:	ec44 3b17 	vmov	d7, r3, r4
 8004236:	eeb0 0a47 	vmov.f32	s0, s14
 800423a:	eef0 0a67 	vmov.f32	s1, s15
 800423e:	f015 fd1b 	bl	8019c78 <sin>
 8004242:	ec51 0b10 	vmov	r0, r1, d0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	4b4d      	ldr	r3, [pc, #308]	; (8004380 <kinematicForward+0x270>)
 800424c:	f7fc f9d4 	bl	80005f8 <__aeabi_dmul>
 8004250:	4603      	mov	r3, r0
 8004252:	460c      	mov	r4, r1
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	4628      	mov	r0, r5
 800425a:	4631      	mov	r1, r6
 800425c:	f7fc f816 	bl	800028c <__adddf3>
 8004260:	4603      	mov	r3, r0
 8004262:	460c      	mov	r4, r1
 8004264:	461d      	mov	r5, r3
 8004266:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004274:	461a      	mov	r2, r3
 8004276:	4623      	mov	r3, r4
 8004278:	f7fc f808 	bl	800028c <__adddf3>
 800427c:	4603      	mov	r3, r0
 800427e:	460c      	mov	r4, r1
 8004280:	4618      	mov	r0, r3
 8004282:	4621      	mov	r1, r4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800428a:	461a      	mov	r2, r3
 800428c:	4623      	mov	r3, r4
 800428e:	f7fb fffb 	bl	8000288 <__aeabi_dsub>
 8004292:	4603      	mov	r3, r0
 8004294:	460c      	mov	r4, r1
 8004296:	ec44 3b17 	vmov	d7, r3, r4
 800429a:	eeb0 0a47 	vmov.f32	s0, s14
 800429e:	eef0 0a67 	vmov.f32	s1, s15
 80042a2:	f015 fce9 	bl	8019c78 <sin>
 80042a6:	ec51 0b10 	vmov	r0, r1, d0
 80042aa:	a32d      	add	r3, pc, #180	; (adr r3, 8004360 <kinematicForward+0x250>)
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f7fc f9a2 	bl	80005f8 <__aeabi_dmul>
 80042b4:	4603      	mov	r3, r0
 80042b6:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 80042b8:	461a      	mov	r2, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	4628      	mov	r0, r5
 80042be:	4631      	mov	r1, r6
 80042c0:	f7fb ffe4 	bl	800028c <__adddf3>
 80042c4:	4603      	mov	r3, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80042d2:	461a      	mov	r2, r3
 80042d4:	4623      	mov	r3, r4
 80042d6:	a126      	add	r1, pc, #152	; (adr r1, 8004370 <kinematicForward+0x260>)
 80042d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042dc:	f7fb ffd4 	bl	8000288 <__aeabi_dsub>
 80042e0:	4603      	mov	r3, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	4618      	mov	r0, r3
 80042e6:	4621      	mov	r1, r4
 80042e8:	a323      	add	r3, pc, #140	; (adr r3, 8004378 <kinematicForward+0x268>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fb ffcb 	bl	8000288 <__aeabi_dsub>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004306:	461a      	mov	r2, r3
 8004308:	4623      	mov	r3, r4
 800430a:	f7fb ffbf 	bl	800028c <__adddf3>
 800430e:	4603      	mov	r3, r0
 8004310:	460c      	mov	r4, r1
 8004312:	4618      	mov	r0, r3
 8004314:	4621      	mov	r1, r4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	f7fb ffb2 	bl	8000288 <__aeabi_dsub>
 8004324:	4603      	mov	r3, r0
 8004326:	460c      	mov	r4, r1
 8004328:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004332:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800433c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004346:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004350:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	372c      	adds	r7, #44	; 0x2c
 800435a:	46bd      	mov	sp, r7
 800435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435e:	bf00      	nop
 8004360:	80000000 	.word	0x80000000
 8004364:	40402e14 	.word	0x40402e14
 8004368:	00000000 	.word	0x00000000
 800436c:	4068a000 	.word	0x4068a000
 8004370:	00000000 	.word	0x00000000
 8004374:	406a6000 	.word	0x406a6000
 8004378:	e0000000 	.word	0xe0000000
 800437c:	40536b22 	.word	0x40536b22
 8004380:	40640000 	.word	0x40640000
 8004384:	00000000 	.word	0x00000000

08004388 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8004388:	b082      	sub	sp, #8
 800438a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800438e:	b0a0      	sub	sp, #128	; 0x80
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004398:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80043a2:	a1f2      	add	r1, pc, #968	; (adr r1, 800476c <kinematicInverse+0x3e4>)
 80043a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043a8:	f7fb ff6e 	bl	8000288 <__aeabi_dsub>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80043c0:	eeb0 0a47 	vmov.f32	s0, s14
 80043c4:	eef0 0a67 	vmov.f32	s1, s15
 80043c8:	f015 fbc6 	bl	8019b58 <cos>
 80043cc:	ec51 0b10 	vmov	r0, r1, d0
 80043d0:	a3e8      	add	r3, pc, #928	; (adr r3, 8004774 <kinematicInverse+0x3ec>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc f90f 	bl	80005f8 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4650      	mov	r0, sl
 80043e0:	4659      	mov	r1, fp
 80043e2:	f7fb ff51 	bl	8000288 <__aeabi_dsub>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80043fa:	eeb0 0a47 	vmov.f32	s0, s14
 80043fe:	eef0 0a67 	vmov.f32	s1, s15
 8004402:	f015 fc39 	bl	8019c78 <sin>
 8004406:	ec51 0b10 	vmov	r0, r1, d0
 800440a:	a3da      	add	r3, pc, #872	; (adr r3, 8004774 <kinematicInverse+0x3ec>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fc f8f2 	bl	80005f8 <__aeabi_dmul>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4650      	mov	r0, sl
 800441a:	4659      	mov	r1, fp
 800441c:	f7fb ff34 	bl	8000288 <__aeabi_dsub>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8004428:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800442c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004430:	f7fc f8e2 	bl	80005f8 <__aeabi_dmul>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4692      	mov	sl, r2
 800443a:	469b      	mov	fp, r3
 800443c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004440:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004444:	f7fc f8d8 	bl	80005f8 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4650      	mov	r0, sl
 800444e:	4659      	mov	r1, fp
 8004450:	f7fb ff1c 	bl	800028c <__adddf3>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	a3c7      	add	r3, pc, #796	; (adr r3, 800477c <kinematicInverse+0x3f4>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb ff11 	bl	8000288 <__aeabi_dsub>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	4bbb      	ldr	r3, [pc, #748]	; (8004760 <kinematicInverse+0x3d8>)
 8004474:	f7fb ff08 	bl	8000288 <__aeabi_dsub>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	a3b3      	add	r3, pc, #716	; (adr r3, 8004750 <kinematicInverse+0x3c8>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fc f9e1 	bl	800084c <__aeabi_ddiv>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8004492:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004496:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800449a:	f7fc f8ad 	bl	80005f8 <__aeabi_dmul>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	49af      	ldr	r1, [pc, #700]	; (8004764 <kinematicInverse+0x3dc>)
 80044a8:	f7fb feee 	bl	8000288 <__aeabi_dsub>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044c0:	f7fc fb0c 	bl	8000adc <__aeabi_dcmplt>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <kinematicInverse+0x146>
		return FALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e136      	b.n	800473c <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80044ce:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80044d2:	f015 fc5b 	bl	8019d8c <sqrt>
 80044d6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80044e6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80044ea:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80044ee:	f015 fc4b 	bl	8019d88 <atan2>
 80044f2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80044f6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80044fa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80044fe:	f015 fc43 	bl	8019d88 <atan2>
 8004502:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8004506:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800450a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800450e:	f7fb febb 	bl	8000288 <__aeabi_dsub>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4614      	mov	r4, r2
 8004518:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800451c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004520:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004524:	f7fb feb0 	bl	8000288 <__aeabi_dsub>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4690      	mov	r8, r2
 800452e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004532:	4642      	mov	r2, r8
 8004534:	464b      	mov	r3, r9
 8004536:	4620      	mov	r0, r4
 8004538:	4629      	mov	r1, r5
 800453a:	f7fc fad9 	bl	8000af0 <__aeabi_dcmple>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8004544:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004548:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800454c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004550:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8004554:	e007      	b.n	8004566 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8004556:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800455a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800455e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004562:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	4b7f      	ldr	r3, [pc, #508]	; (8004768 <kinematicInverse+0x3e0>)
 800456c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004570:	f7fc f842 	bl	80005f8 <__aeabi_dmul>
 8004574:	4603      	mov	r3, r0
 8004576:	460c      	mov	r4, r1
 8004578:	4618      	mov	r0, r3
 800457a:	4621      	mov	r1, r4
 800457c:	a376      	add	r3, pc, #472	; (adr r3, 8004758 <kinematicInverse+0x3d0>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fb fe83 	bl	800028c <__adddf3>
 8004586:	4603      	mov	r3, r0
 8004588:	460c      	mov	r4, r1
 800458a:	4618      	mov	r0, r3
 800458c:	4621      	mov	r1, r4
 800458e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004592:	f7fc f831 	bl	80005f8 <__aeabi_dmul>
 8004596:	4603      	mov	r3, r0
 8004598:	460c      	mov	r4, r1
 800459a:	4625      	mov	r5, r4
 800459c:	461c      	mov	r4, r3
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	4b71      	ldr	r3, [pc, #452]	; (8004768 <kinematicInverse+0x3e0>)
 80045a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80045a8:	f7fc f826 	bl	80005f8 <__aeabi_dmul>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80045b8:	f7fc f81e 	bl	80005f8 <__aeabi_dmul>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4620      	mov	r0, r4
 80045c2:	4629      	mov	r1, r5
 80045c4:	f7fb fe60 	bl	8000288 <__aeabi_dsub>
 80045c8:	4603      	mov	r3, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	4625      	mov	r5, r4
 80045ce:	461c      	mov	r4, r3
 80045d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80045d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045d8:	f7fc f80e 	bl	80005f8 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4690      	mov	r8, r2
 80045e2:	4699      	mov	r9, r3
 80045e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045ec:	f7fc f804 	bl	80005f8 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4640      	mov	r0, r8
 80045f6:	4649      	mov	r1, r9
 80045f8:	f7fb fe48 	bl	800028c <__adddf3>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4620      	mov	r0, r4
 8004602:	4629      	mov	r1, r5
 8004604:	f7fc f922 	bl	800084c <__aeabi_ddiv>
 8004608:	4603      	mov	r3, r0
 800460a:	460c      	mov	r4, r1
 800460c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	4b54      	ldr	r3, [pc, #336]	; (8004768 <kinematicInverse+0x3e0>)
 8004616:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800461a:	f7fb ffed 	bl	80005f8 <__aeabi_dmul>
 800461e:	4603      	mov	r3, r0
 8004620:	460c      	mov	r4, r1
 8004622:	4618      	mov	r0, r3
 8004624:	4621      	mov	r1, r4
 8004626:	a34c      	add	r3, pc, #304	; (adr r3, 8004758 <kinematicInverse+0x3d0>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb fe2e 	bl	800028c <__adddf3>
 8004630:	4603      	mov	r3, r0
 8004632:	460c      	mov	r4, r1
 8004634:	4618      	mov	r0, r3
 8004636:	4621      	mov	r1, r4
 8004638:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800463c:	f7fb ffdc 	bl	80005f8 <__aeabi_dmul>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	4625      	mov	r5, r4
 8004646:	461c      	mov	r4, r3
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	4b46      	ldr	r3, [pc, #280]	; (8004768 <kinematicInverse+0x3e0>)
 800464e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004652:	f7fb ffd1 	bl	80005f8 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004662:	f7fb ffc9 	bl	80005f8 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4620      	mov	r0, r4
 800466c:	4629      	mov	r1, r5
 800466e:	f7fb fe0d 	bl	800028c <__adddf3>
 8004672:	4603      	mov	r3, r0
 8004674:	460c      	mov	r4, r1
 8004676:	4625      	mov	r5, r4
 8004678:	461c      	mov	r4, r3
 800467a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800467e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004682:	f7fb ffb9 	bl	80005f8 <__aeabi_dmul>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4690      	mov	r8, r2
 800468c:	4699      	mov	r9, r3
 800468e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004692:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004696:	f7fb ffaf 	bl	80005f8 <__aeabi_dmul>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4640      	mov	r0, r8
 80046a0:	4649      	mov	r1, r9
 80046a2:	f7fb fdf3 	bl	800028c <__adddf3>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4620      	mov	r0, r4
 80046ac:	4629      	mov	r1, r5
 80046ae:	f7fc f8cd 	bl	800084c <__aeabi_ddiv>
 80046b2:	4603      	mov	r3, r0
 80046b4:	460c      	mov	r4, r1
 80046b6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 80046ba:	ed97 1b06 	vldr	d1, [r7, #24]
 80046be:	ed97 0b08 	vldr	d0, [r7, #32]
 80046c2:	f015 fb61 	bl	8019d88 <atan2>
 80046c6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80046ca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80046ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046d2:	f7fb fddb 	bl	800028c <__adddf3>
 80046d6:	4603      	mov	r3, r0
 80046d8:	460c      	mov	r4, r1
 80046da:	4618      	mov	r0, r3
 80046dc:	4621      	mov	r1, r4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80046e4:	461a      	mov	r2, r3
 80046e6:	4623      	mov	r3, r4
 80046e8:	f7fb fdce 	bl	8000288 <__aeabi_dsub>
 80046ec:	4603      	mov	r3, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80046f4:	ed97 3b02 	vldr	d3, [r7, #8]
 80046f8:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80046fc:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8004700:	ed97 0b04 	vldr	d0, [r7, #16]
 8004704:	f005 fef8 	bl	800a4f8 <scaraCheckWorkSpace4>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 800470e:	2300      	movs	r3, #0
 8004710:	e014      	b.n	800473c <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004718:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004722:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800472c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004736:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 800473a:	2301      	movs	r3, #1
}
 800473c:	4618      	mov	r0, r3
 800473e:	3780      	adds	r7, #128	; 0x80
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004746:	b002      	add	sp, #8
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w
 8004750:	00000000 	.word	0x00000000
 8004754:	40eec800 	.word	0x40eec800
 8004758:	00000000 	.word	0x00000000
 800475c:	4068a000 	.word	0x4068a000
 8004760:	40d90000 	.word	0x40d90000
 8004764:	3ff00000 	.word	0x3ff00000
 8004768:	40640000 	.word	0x40640000
 800476c:	80000000 	.word	0x80000000
 8004770:	4060aa6e 	.word	0x4060aa6e
 8004774:	80000000 	.word	0x80000000
 8004778:	40402e14 	.word	0x40402e14
 800477c:	00000000 	.word	0x00000000
 8004780:	40e2f320 	.word	0x40e2f320

08004784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004788:	f006 ffe2 	bl	800b750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800478c:	f000 f812 	bl	80047b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004790:	f7ff fc04 	bl	8003f9c <MX_GPIO_Init>
  MX_DMA_Init();
 8004794:	f7fd fd7e 	bl	8002294 <MX_DMA_Init>
  MX_UART4_Init();
 8004798:	f006 fedc 	bl	800b554 <MX_UART4_Init>
  MX_FSMC_Init();
 800479c:	f7ff fa86 	bl	8003cac <MX_FSMC_Init>
  MX_TIM7_Init();
 80047a0:	f006 fe66 	bl	800b470 <MX_TIM7_Init>
  MX_TIM2_Init();
 80047a4:	f006 fe16 	bl	800b3d4 <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80047a8:	f7fd fdae 	bl	8002308 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80047ac:	f00e f831 	bl	8012812 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80047b0:	e7fe      	b.n	80047b0 <main+0x2c>
	...

080047b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b094      	sub	sp, #80	; 0x50
 80047b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ba:	f107 0320 	add.w	r3, r7, #32
 80047be:	2230      	movs	r2, #48	; 0x30
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f011 fbfe 	bl	8015fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047c8:	f107 030c 	add.w	r3, r7, #12
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	2300      	movs	r3, #0
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <SystemClock_Config+0xcc>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	4a27      	ldr	r2, [pc, #156]	; (8004880 <SystemClock_Config+0xcc>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6413      	str	r3, [r2, #64]	; 0x40
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <SystemClock_Config+0xcc>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f4:	2300      	movs	r3, #0
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	4b22      	ldr	r3, [pc, #136]	; (8004884 <SystemClock_Config+0xd0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a21      	ldr	r2, [pc, #132]	; (8004884 <SystemClock_Config+0xd0>)
 80047fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <SystemClock_Config+0xd0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004810:	2301      	movs	r3, #1
 8004812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800481a:	2302      	movs	r3, #2
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800481e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004824:	2308      	movs	r3, #8
 8004826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800482e:	2302      	movs	r3, #2
 8004830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004832:	2307      	movs	r3, #7
 8004834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004836:	f107 0320 	add.w	r3, r7, #32
 800483a:	4618      	mov	r0, r3
 800483c:	f008 fffa 	bl	800d834 <HAL_RCC_OscConfig>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004846:	f000 f831 	bl	80048ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800484a:	230f      	movs	r3, #15
 800484c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800484e:	2302      	movs	r3, #2
 8004850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800485a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800485c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004862:	f107 030c 	add.w	r3, r7, #12
 8004866:	2105      	movs	r1, #5
 8004868:	4618      	mov	r0, r3
 800486a:	f009 fa53 	bl	800dd14 <HAL_RCC_ClockConfig>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004874:	f000 f81a 	bl	80048ac <Error_Handler>
  }
}
 8004878:	bf00      	nop
 800487a:	3750      	adds	r7, #80	; 0x50
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000

08004888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800489a:	f006 ff7b 	bl	800b794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40001000 	.word	0x40001000

080048ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <ringBuff_PushChar+0x1a>
		return FALSE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e024      	b.n	800491e <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	78f9      	ldrb	r1, [r7, #3]
 80048de:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80048e6:	3301      	adds	r3, #1
 80048e8:	425a      	negs	r2, r3
 80048ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80048f2:	bf58      	it	pl
 80048f4:	4253      	negpl	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004908:	429a      	cmp	r2, r3
 800490a:	d103      	bne.n	8004914 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 800491c:	2301      	movs	r3, #1
	}
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <ringBuff_PopChar+0x18>
		return FALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	e025      	b.n	800498e <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	5cd2      	ldrb	r2, [r2, r3]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004956:	3301      	adds	r3, #1
 8004958:	425a      	negs	r2, r3
 800495a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004962:	bf58      	it	pl
 8004964:	4253      	negpl	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004978:	429a      	cmp	r2, r3
 800497a:	d103      	bne.n	8004984 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 800498c:	2301      	movs	r3, #1
	}
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80049a6:	2300      	movs	r3, #0
 80049a8:	82fb      	strh	r3, [r7, #22]
 80049aa:	e011      	b.n	80049d0 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80049ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff ff7e 	bl	80048ba <ringBuff_PushChar>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00b      	beq.n	80049dc <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 80049c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	82fb      	strh	r3, [r7, #22]
 80049d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	dce8      	bgt.n	80049ac <ringBuff_PushArray+0x12>
 80049da:	e000      	b.n	80049de <ringBuff_PushArray+0x44>
			break;
 80049dc:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 80049de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e00c      	b.n	8004a16 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4413      	add	r3, r2
 8004a02:	4619      	mov	r1, r3
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff ff90 	bl	800492a <ringBuff_PopChar>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3301      	adds	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	dbee      	blt.n	80049fc <ringBuff_PopArray+0x12>
 8004a1e:	e000      	b.n	8004a22 <ringBuff_PopArray+0x38>
			break;
 8004a20:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8004a22:	697b      	ldr	r3, [r7, #20]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a3c:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004a4c:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8004a4e:	6838      	ldr	r0, [r7, #0]
 8004a50:	f7fb fbbe 	bl	80001d0 <strlen>
 8004a54:	4603      	mov	r3, r0
 8004a56:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d066      	beq.n	8004b30 <ringBuff_DistanceOf+0x104>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e030      	b.n	8004aca <ringBuff_DistanceOf+0x9e>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	440b      	add	r3, r1
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d103      	bne.n	8004a84 <ringBuff_DistanceOf+0x58>
	                sync_state++;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e00c      	b.n	8004a9e <ringBuff_DistanceOf+0x72>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d102      	bne.n	8004a9a <ringBuff_DistanceOf+0x6e>
	                sync_state = 1;
 8004a94:	2301      	movs	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e001      	b.n	8004a9e <ringBuff_DistanceOf+0x72>
	            }else{
	                sync_state = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d101      	bne.n	8004aaa <ringBuff_DistanceOf+0x7e>
	                return distance;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	e048      	b.n	8004b3c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	425a      	negs	r2, r3
 8004abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ac4:	bf58      	it	pl
 8004ac6:	4253      	negpl	r3, r2
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad0:	dbca      	blt.n	8004a68 <ringBuff_DistanceOf+0x3c>
 8004ad2:	e031      	b.n	8004b38 <ringBuff_DistanceOf+0x10c>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	440b      	add	r3, r1
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d103      	bne.n	8004af0 <ringBuff_DistanceOf+0xc4>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	3301      	adds	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e00c      	b.n	8004b0a <ringBuff_DistanceOf+0xde>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d102      	bne.n	8004b06 <ringBuff_DistanceOf+0xda>
	                sync_state = 1;
 8004b00:	2301      	movs	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e001      	b.n	8004b0a <ringBuff_DistanceOf+0xde>
	            }else{
	                sync_state = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d101      	bne.n	8004b16 <ringBuff_DistanceOf+0xea>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	e012      	b.n	8004b3c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	425a      	negs	r2, r3
 8004b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004b2a:	bf58      	it	pl
 8004b2c:	4253      	negpl	r3, r2
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1cd      	bne.n	8004ad4 <ringBuff_DistanceOf+0xa8>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8004b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004b48:	f000 fdfe 	bl	8005748 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <lowlayer_scanReset+0x4c>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004b52:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <lowlayer_scanReset+0x4c>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004b58:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <lowlayer_scanReset+0x4c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <lowlayer_scanReset+0x4c>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <lowlayer_scanReset+0x50>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <lowlayer_scanReset+0x50>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <lowlayer_scanReset+0x50>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <lowlayer_scanReset+0x54>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <lowlayer_scanReset+0x58>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2108      	movs	r1, #8
 8004b86:	4806      	ldr	r0, [pc, #24]	; (8004ba0 <lowlayer_scanReset+0x5c>)
 8004b88:	f007 fc60 	bl	800c44c <HAL_GPIO_WritePin>
}
 8004b8c:	bf00      	nop
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	2000acc0 	.word	0x2000acc0
 8004b94:	2000acd4 	.word	0x2000acd4
 8004b98:	2000acd0 	.word	0x2000acd0
 8004b9c:	2000acf0 	.word	0x2000acf0
 8004ba0:	40020c00 	.word	0x40020c00
 8004ba4:	00000000 	.word	0x00000000

08004ba8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8004bb2:	f000 fe87 	bl	80058c4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8004bb6:	4b98      	ldr	r3, [pc, #608]	; (8004e18 <lowlayer_scanFlow+0x270>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d837      	bhi.n	8004c2e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8004bbe:	4b96      	ldr	r3, [pc, #600]	; (8004e18 <lowlayer_scanFlow+0x270>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	f1c3 0303 	rsb	r3, r3, #3
 8004bc6:	4a95      	ldr	r2, [pc, #596]	; (8004e1c <lowlayer_scanFlow+0x274>)
 8004bc8:	5cd3      	ldrb	r3, [r2, r3]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d121      	bne.n	8004c12 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8004bce:	4b92      	ldr	r3, [pc, #584]	; (8004e18 <lowlayer_scanFlow+0x270>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f1c3 0203 	rsb	r2, r3, #3
 8004bd6:	4b90      	ldr	r3, [pc, #576]	; (8004e18 <lowlayer_scanFlow+0x270>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	f1c3 0303 	rsb	r3, r3, #3
 8004bde:	4990      	ldr	r1, [pc, #576]	; (8004e20 <lowlayer_scanFlow+0x278>)
 8004be0:	568a      	ldrsb	r2, [r1, r2]
 8004be2:	f107 0108 	add.w	r1, r7, #8
 8004be6:	440b      	add	r3, r1
 8004be8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8004bec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	425b      	negs	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	b258      	sxtb	r0, r3
 8004bf8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8004bfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	425b      	negs	r3, r3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	b25a      	sxtb	r2, r3
 8004c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0c:	f000 fcd8 	bl	80055c0 <lowlayer_writePulse>
 8004c10:	e00b      	b.n	8004c2a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8004c12:	4b81      	ldr	r3, [pc, #516]	; (8004e18 <lowlayer_scanFlow+0x270>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b7f      	ldr	r3, [pc, #508]	; (8004e18 <lowlayer_scanFlow+0x270>)
 8004c1c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	2000      	movs	r0, #0
 8004c26:	f000 fccb 	bl	80055c0 <lowlayer_writePulse>
		}

		return FALSE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e0d8      	b.n	8004de0 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8004c2e:	2201      	movs	r2, #1
 8004c30:	2108      	movs	r1, #8
 8004c32:	487c      	ldr	r0, [pc, #496]	; (8004e24 <lowlayer_scanFlow+0x27c>)
 8004c34:	f007 fc0a 	bl	800c44c <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004c38:	f000 fe28 	bl	800588c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	2000      	movs	r0, #0
 8004c44:	f000 fcbc 	bl	80055c0 <lowlayer_writePulse>
		scan_flag = 1;
 8004c48:	4b77      	ldr	r3, [pc, #476]	; (8004e28 <lowlayer_scanFlow+0x280>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8004c4e:	4b77      	ldr	r3, [pc, #476]	; (8004e2c <lowlayer_scanFlow+0x284>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a77      	ldr	r2, [pc, #476]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004c54:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004c56:	4b75      	ldr	r3, [pc, #468]	; (8004e2c <lowlayer_scanFlow+0x284>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4a75      	ldr	r2, [pc, #468]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004c5c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8004c5e:	4b73      	ldr	r3, [pc, #460]	; (8004e2c <lowlayer_scanFlow+0x284>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	4a73      	ldr	r2, [pc, #460]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004c64:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004c66:	4b73      	ldr	r3, [pc, #460]	; (8004e34 <lowlayer_scanFlow+0x28c>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	4a73      	ldr	r2, [pc, #460]	; (8004e38 <lowlayer_scanFlow+0x290>)
 8004c6c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8004c6e:	4b70      	ldr	r3, [pc, #448]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4619      	mov	r1, r3
 8004c76:	4871      	ldr	r0, [pc, #452]	; (8004e3c <lowlayer_scanFlow+0x294>)
 8004c78:	f7fd fa54 	bl	8002124 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8004c7c:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	4619      	mov	r1, r3
 8004c84:	486e      	ldr	r0, [pc, #440]	; (8004e40 <lowlayer_scanFlow+0x298>)
 8004c86:	f7fd fa4d 	bl	8002124 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8004c8a:	4b69      	ldr	r3, [pc, #420]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	486c      	ldr	r0, [pc, #432]	; (8004e44 <lowlayer_scanFlow+0x29c>)
 8004c94:	f7fd fa46 	bl	8002124 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004c98:	4b67      	ldr	r3, [pc, #412]	; (8004e38 <lowlayer_scanFlow+0x290>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4869      	ldr	r0, [pc, #420]	; (8004e48 <lowlayer_scanFlow+0x2a0>)
 8004ca2:	f7fd fa3f 	bl	8002124 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8004ca6:	4b62      	ldr	r3, [pc, #392]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb2:	ee17 0a90 	vmov	r0, s15
 8004cb6:	f7fb fc47 	bl	8000548 <__aeabi_f2d>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	f7fb fae5 	bl	800028c <__adddf3>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	4621      	mov	r1, r4
 8004cca:	a347      	add	r3, pc, #284	; (adr r3, 8004de8 <lowlayer_scanFlow+0x240>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fc92 	bl	80005f8 <__aeabi_dmul>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	4621      	mov	r1, r4
 8004cdc:	a344      	add	r3, pc, #272	; (adr r3, 8004df0 <lowlayer_scanFlow+0x248>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fdb3 	bl	800084c <__aeabi_ddiv>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	461a      	mov	r2, r3
 8004cec:	4623      	mov	r3, r4
 8004cee:	a142      	add	r1, pc, #264	; (adr r1, 8004df8 <lowlayer_scanFlow+0x250>)
 8004cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cf4:	f7fb fac8 	bl	8000288 <__aeabi_dsub>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8004cfc:	4a53      	ldr	r2, [pc, #332]	; (8004e4c <lowlayer_scanFlow+0x2a4>)
 8004cfe:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d0e:	ee17 0a90 	vmov	r0, s15
 8004d12:	f7fb fc19 	bl	8000548 <__aeabi_f2d>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	f7fb fab7 	bl	800028c <__adddf3>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	4618      	mov	r0, r3
 8004d24:	4621      	mov	r1, r4
 8004d26:	a330      	add	r3, pc, #192	; (adr r3, 8004de8 <lowlayer_scanFlow+0x240>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f7fb fc64 	bl	80005f8 <__aeabi_dmul>
 8004d30:	4603      	mov	r3, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	4618      	mov	r0, r3
 8004d36:	4621      	mov	r1, r4
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	4b44      	ldr	r3, [pc, #272]	; (8004e50 <lowlayer_scanFlow+0x2a8>)
 8004d3e:	f7fb fd85 	bl	800084c <__aeabi_ddiv>
 8004d42:	4603      	mov	r3, r0
 8004d44:	460c      	mov	r4, r1
 8004d46:	461a      	mov	r2, r3
 8004d48:	4623      	mov	r3, r4
 8004d4a:	a12d      	add	r1, pc, #180	; (adr r1, 8004e00 <lowlayer_scanFlow+0x258>)
 8004d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d50:	f7fb fa9a 	bl	8000288 <__aeabi_dsub>
 8004d54:	4603      	mov	r3, r0
 8004d56:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004d58:	4a3c      	ldr	r2, [pc, #240]	; (8004e4c <lowlayer_scanFlow+0x2a4>)
 8004d5a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <lowlayer_scanFlow+0x288>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d6a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004e54 <lowlayer_scanFlow+0x2ac>
 8004d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d72:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004e58 <lowlayer_scanFlow+0x2b0>
 8004d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d7a:	ee17 0a90 	vmov	r0, s15
 8004d7e:	f7fb fbe3 	bl	8000548 <__aeabi_f2d>
 8004d82:	4603      	mov	r3, r0
 8004d84:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004d86:	4a31      	ldr	r2, [pc, #196]	; (8004e4c <lowlayer_scanFlow+0x2a4>)
 8004d88:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <lowlayer_scanFlow+0x290>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbc7 	bl	8000524 <__aeabi_i2d>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	f7fb fa77 	bl	800028c <__adddf3>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	460c      	mov	r4, r1
 8004da2:	4618      	mov	r0, r3
 8004da4:	4621      	mov	r1, r4
 8004da6:	a310      	add	r3, pc, #64	; (adr r3, 8004de8 <lowlayer_scanFlow+0x240>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fc24 	bl	80005f8 <__aeabi_dmul>
 8004db0:	4603      	mov	r3, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	4618      	mov	r0, r3
 8004db6:	4621      	mov	r1, r4
 8004db8:	a313      	add	r3, pc, #76	; (adr r3, 8004e08 <lowlayer_scanFlow+0x260>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fd45 	bl	800084c <__aeabi_ddiv>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4623      	mov	r3, r4
 8004dca:	a111      	add	r1, pc, #68	; (adr r1, 8004e10 <lowlayer_scanFlow+0x268>)
 8004dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dd0:	f7fb fa5a 	bl	8000288 <__aeabi_dsub>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004dd8:	4a1c      	ldr	r2, [pc, #112]	; (8004e4c <lowlayer_scanFlow+0x2a4>)
 8004dda:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8004dde:	2301      	movs	r3, #1
	}
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}
 8004de8:	60000000 	.word	0x60000000
 8004dec:	400921fb 	.word	0x400921fb
 8004df0:	00000000 	.word	0x00000000
 8004df4:	40f38800 	.word	0x40f38800
 8004df8:	40000000 	.word	0x40000000
 8004dfc:	bff9f17a 	.word	0xbff9f17a
 8004e00:	80000000 	.word	0x80000000
 8004e04:	40039716 	.word	0x40039716
 8004e08:	a0000000 	.word	0xa0000000
 8004e0c:	40d3bca1 	.word	0x40d3bca1
 8004e10:	a0000000 	.word	0xa0000000
 8004e14:	4008330d 	.word	0x4008330d
 8004e18:	2000acf0 	.word	0x2000acf0
 8004e1c:	2000ace0 	.word	0x2000ace0
 8004e20:	0801b714 	.word	0x0801b714
 8004e24:	40020c00 	.word	0x40020c00
 8004e28:	2000acd0 	.word	0x2000acd0
 8004e2c:	2000ace4 	.word	0x2000ace4
 8004e30:	2000ad18 	.word	0x2000ad18
 8004e34:	2000acc0 	.word	0x2000acc0
 8004e38:	2000acf4 	.word	0x2000acf4
 8004e3c:	0801b63c 	.word	0x0801b63c
 8004e40:	0801b650 	.word	0x0801b650
 8004e44:	0801b664 	.word	0x0801b664
 8004e48:	0801b678 	.word	0x0801b678
 8004e4c:	2000acf8 	.word	0x2000acf8
 8004e50:	40ff4000 	.word	0x40ff4000
 8004e54:	4426aaab 	.word	0x4426aaab
 8004e58:	400f1aa0 	.word	0x400f1aa0
 8004e5c:	00000000 	.word	0x00000000

08004e60 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f94d 	bl	8005110 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004e7c:	a330      	add	r3, pc, #192	; (adr r3, 8004f40 <lowlayer_goToSoftLimit+0xe0>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb fe2b 	bl	8000adc <__aeabi_dcmplt>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	723b      	strb	r3, [r7, #8]
		check++;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	3301      	adds	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004e9c:	a32a      	add	r3, pc, #168	; (adr r3, 8004f48 <lowlayer_goToSoftLimit+0xe8>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb fe39 	bl	8000b18 <__aeabi_dcmpgt>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8004eac:	2305      	movs	r3, #5
 8004eae:	727b      	strb	r3, [r7, #9]
		check++;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	f7fb fe0a 	bl	8000adc <__aeabi_dcmplt>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8004ece:	2305      	movs	r3, #5
 8004ed0:	72bb      	strb	r3, [r7, #10]
		check++;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004ede:	a31c      	add	r3, pc, #112	; (adr r3, 8004f50 <lowlayer_goToSoftLimit+0xf0>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fe18 	bl	8000b18 <__aeabi_dcmpgt>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8004eee:	230a      	movs	r3, #10
 8004ef0:	72fb      	strb	r3, [r7, #11]
		check++;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d013      	beq.n	8004f26 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8004efe:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8004f02:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	425b      	negs	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	b259      	sxtb	r1, r3
 8004f0e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004f12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	425b      	negs	r3, r3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	b25b      	sxtb	r3, r3
 8004f1e:	f000 fb4f 	bl	80055c0 <lowlayer_writePulse>
		return FALSE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e006      	b.n	8004f34 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8004f26:	2300      	movs	r3, #0
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f000 fb47 	bl	80055c0 <lowlayer_writePulse>
		return TRUE;
 8004f32:	2301      	movs	r3, #1
	}
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	f3af 8000 	nop.w
 8004f40:	daaaaaab 	.word	0xdaaaaaab
 8004f44:	bff7bc89 	.word	0xbff7bc89
 8004f48:	88000000 	.word	0x88000000
 8004f4c:	4002d97c 	.word	0x4002d97c
 8004f50:	daaaaaab 	.word	0xdaaaaaab
 8004f54:	4007bc89 	.word	0x4007bc89

08004f58 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004f60:	f000 fc78 	bl	8005854 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004f64:	4b62      	ldr	r3, [pc, #392]	; (80050f0 <lowlayer_readTruePosition+0x198>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <lowlayer_readTruePosition+0x19c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f76:	ee17 0a90 	vmov	r0, s15
 8004f7a:	f7fb fae5 	bl	8000548 <__aeabi_f2d>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	f7fb f983 	bl	800028c <__adddf3>
 8004f86:	4603      	mov	r3, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	a34c      	add	r3, pc, #304	; (adr r3, 80050c0 <lowlayer_readTruePosition+0x168>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f7fb fb30 	bl	80005f8 <__aeabi_dmul>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	a349      	add	r3, pc, #292	; (adr r3, 80050c8 <lowlayer_readTruePosition+0x170>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f7fb fc51 	bl	800084c <__aeabi_ddiv>
 8004faa:	4603      	mov	r3, r0
 8004fac:	460c      	mov	r4, r1
 8004fae:	4618      	mov	r0, r3
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	a347      	add	r3, pc, #284	; (adr r3, 80050d0 <lowlayer_readTruePosition+0x178>)
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f7fb f966 	bl	8000288 <__aeabi_dsub>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <lowlayer_readTruePosition+0x198>)
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	4b4a      	ldr	r3, [pc, #296]	; (80050f4 <lowlayer_readTruePosition+0x19c>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd8:	ee17 0a90 	vmov	r0, s15
 8004fdc:	f7fb fab4 	bl	8000548 <__aeabi_f2d>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	f7fb f952 	bl	800028c <__adddf3>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	4618      	mov	r0, r3
 8004fee:	4621      	mov	r1, r4
 8004ff0:	a333      	add	r3, pc, #204	; (adr r3, 80050c0 <lowlayer_readTruePosition+0x168>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb faff 	bl	80005f8 <__aeabi_dmul>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	4618      	mov	r0, r3
 8005000:	4621      	mov	r1, r4
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	4b3c      	ldr	r3, [pc, #240]	; (80050f8 <lowlayer_readTruePosition+0x1a0>)
 8005008:	f7fb fc20 	bl	800084c <__aeabi_ddiv>
 800500c:	4603      	mov	r3, r0
 800500e:	460c      	mov	r4, r1
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	a330      	add	r3, pc, #192	; (adr r3, 80050d8 <lowlayer_readTruePosition+0x180>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb f937 	bl	800028c <__adddf3>
 800501e:	4603      	mov	r3, r0
 8005020:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005028:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <lowlayer_readTruePosition+0x198>)
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <lowlayer_readTruePosition+0x19c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800503a:	eeb1 7a67 	vneg.f32	s14, s15
 800503e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80050fc <lowlayer_readTruePosition+0x1a4>
 8005042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005046:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005100 <lowlayer_readTruePosition+0x1a8>
 800504a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800504e:	ee17 0a90 	vmov	r0, s15
 8005052:	f7fb fa79 	bl	8000548 <__aeabi_f2d>
 8005056:	4603      	mov	r3, r0
 8005058:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <lowlayer_readTruePosition+0x1ac>)
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	4b28      	ldr	r3, [pc, #160]	; (8005108 <lowlayer_readTruePosition+0x1b0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fa5a 	bl	8000524 <__aeabi_i2d>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	f7fb f90a 	bl	800028c <__adddf3>
 8005078:	4603      	mov	r3, r0
 800507a:	460c      	mov	r4, r1
 800507c:	4618      	mov	r0, r3
 800507e:	4621      	mov	r1, r4
 8005080:	a30f      	add	r3, pc, #60	; (adr r3, 80050c0 <lowlayer_readTruePosition+0x168>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f7fb fab7 	bl	80005f8 <__aeabi_dmul>
 800508a:	4603      	mov	r3, r0
 800508c:	460c      	mov	r4, r1
 800508e:	4618      	mov	r0, r3
 8005090:	4621      	mov	r1, r4
 8005092:	a313      	add	r3, pc, #76	; (adr r3, 80050e0 <lowlayer_readTruePosition+0x188>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb fbd8 	bl	800084c <__aeabi_ddiv>
 800509c:	4603      	mov	r3, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	4618      	mov	r0, r3
 80050a2:	4621      	mov	r1, r4
 80050a4:	a310      	add	r3, pc, #64	; (adr r3, 80050e8 <lowlayer_readTruePosition+0x190>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb f8ef 	bl	800028c <__adddf3>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	60000000 	.word	0x60000000
 80050c4:	400921fb 	.word	0x400921fb
 80050c8:	00000000 	.word	0x00000000
 80050cc:	40f38800 	.word	0x40f38800
 80050d0:	40000000 	.word	0x40000000
 80050d4:	3ff9f17a 	.word	0x3ff9f17a
 80050d8:	80000000 	.word	0x80000000
 80050dc:	40039716 	.word	0x40039716
 80050e0:	a0000000 	.word	0xa0000000
 80050e4:	40d3bca1 	.word	0x40d3bca1
 80050e8:	a0000000 	.word	0xa0000000
 80050ec:	4008330d 	.word	0x4008330d
 80050f0:	2000acd4 	.word	0x2000acd4
 80050f4:	2000ad18 	.word	0x2000ad18
 80050f8:	40ff4000 	.word	0x40ff4000
 80050fc:	4426aaab 	.word	0x4426aaab
 8005100:	400f1aa0 	.word	0x400f1aa0
 8005104:	2000acc0 	.word	0x2000acc0
 8005108:	2000acf4 	.word	0x2000acf4
 800510c:	00000000 	.word	0x00000000

08005110 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005110:	b5b0      	push	{r4, r5, r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005118:	4b53      	ldr	r3, [pc, #332]	; (8005268 <lowlayer_readSetPosition+0x158>)
 800511a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800511e:	4b53      	ldr	r3, [pc, #332]	; (800526c <lowlayer_readSetPosition+0x15c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb f9fe 	bl	8000524 <__aeabi_i2d>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	f7fb f8ae 	bl	800028c <__adddf3>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	a345      	add	r3, pc, #276	; (adr r3, 8005250 <lowlayer_readSetPosition+0x140>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f7fb fa5b 	bl	80005f8 <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4610      	mov	r0, r2
 8005148:	4619      	mov	r1, r3
 800514a:	a343      	add	r3, pc, #268	; (adr r3, 8005258 <lowlayer_readSetPosition+0x148>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb fb7c 	bl	800084c <__aeabi_ddiv>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4620      	mov	r0, r4
 800515a:	4629      	mov	r1, r5
 800515c:	f7fb f896 	bl	800028c <__adddf3>
 8005160:	4603      	mov	r3, r0
 8005162:	460c      	mov	r4, r1
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 800516a:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <lowlayer_readSetPosition+0x158>)
 800516c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005170:	4b3e      	ldr	r3, [pc, #248]	; (800526c <lowlayer_readSetPosition+0x15c>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f9d5 	bl	8000524 <__aeabi_i2d>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	f7fb f885 	bl	800028c <__adddf3>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	a331      	add	r3, pc, #196	; (adr r3, 8005250 <lowlayer_readSetPosition+0x140>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb fa32 	bl	80005f8 <__aeabi_dmul>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	4b33      	ldr	r3, [pc, #204]	; (8005270 <lowlayer_readSetPosition+0x160>)
 80051a2:	f7fb fb53 	bl	800084c <__aeabi_ddiv>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4620      	mov	r0, r4
 80051ac:	4629      	mov	r1, r5
 80051ae:	f7fb f86d 	bl	800028c <__adddf3>
 80051b2:	4603      	mov	r3, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80051bc:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <lowlayer_readSetPosition+0x158>)
 80051be:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80051c2:	4b2a      	ldr	r3, [pc, #168]	; (800526c <lowlayer_readSetPosition+0x15c>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ce:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005274 <lowlayer_readSetPosition+0x164>
 80051d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051d6:	ee16 0a90 	vmov	r0, s13
 80051da:	f7fb f9b5 	bl	8000548 <__aeabi_f2d>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4620      	mov	r0, r4
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7fb f851 	bl	800028c <__adddf3>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <lowlayer_readSetPosition+0x158>)
 80051f6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <lowlayer_readSetPosition+0x15c>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb f990 	bl	8000524 <__aeabi_i2d>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	f7fb f840 	bl	800028c <__adddf3>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4610      	mov	r0, r2
 8005212:	4619      	mov	r1, r3
 8005214:	a30e      	add	r3, pc, #56	; (adr r3, 8005250 <lowlayer_readSetPosition+0x140>)
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f7fb f9ed 	bl	80005f8 <__aeabi_dmul>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	a30e      	add	r3, pc, #56	; (adr r3, 8005260 <lowlayer_readSetPosition+0x150>)
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f7fb fb0e 	bl	800084c <__aeabi_ddiv>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fb f828 	bl	800028c <__adddf3>
 800523c:	4603      	mov	r3, r0
 800523e:	460c      	mov	r4, r1
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bdb0      	pop	{r4, r5, r7, pc}
 800524e:	bf00      	nop
 8005250:	60000000 	.word	0x60000000
 8005254:	400921fb 	.word	0x400921fb
 8005258:	00000000 	.word	0x00000000
 800525c:	40d38800 	.word	0x40d38800
 8005260:	a0000000 	.word	0xa0000000
 8005264:	40d3bca1 	.word	0x40d3bca1
 8005268:	2000acf8 	.word	0x2000acf8
 800526c:	2000acc0 	.word	0x2000acc0
 8005270:	40df4000 	.word	0x40df4000
 8005274:	42c80000 	.word	0x42c80000

08005278 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8005278:	b084      	sub	sp, #16
 800527a:	b590      	push	{r4, r7, lr}
 800527c:	b093      	sub	sp, #76	; 0x4c
 800527e:	af00      	add	r7, sp, #0
 8005280:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8005284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8005288:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800528c:	a3c4      	add	r3, pc, #784	; (adr r3, 80055a0 <lowlayer_computeAndWritePulse+0x328>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	f7fa fffb 	bl	800028c <__adddf3>
 8005296:	4603      	mov	r3, r0
 8005298:	460c      	mov	r4, r1
 800529a:	4618      	mov	r0, r3
 800529c:	4621      	mov	r1, r4
 800529e:	a3c2      	add	r3, pc, #776	; (adr r3, 80055a8 <lowlayer_computeAndWritePulse+0x330>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fb f9a8 	bl	80005f8 <__aeabi_dmul>
 80052a8:	4603      	mov	r3, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	4618      	mov	r0, r3
 80052ae:	4621      	mov	r1, r4
 80052b0:	a3b5      	add	r3, pc, #724	; (adr r3, 8005588 <lowlayer_computeAndWritePulse+0x310>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f7fb fac9 	bl	800084c <__aeabi_ddiv>
 80052ba:	4603      	mov	r3, r0
 80052bc:	460c      	mov	r4, r1
 80052be:	ec44 3b17 	vmov	d7, r3, r4
 80052c2:	eeb0 0a47 	vmov.f32	s0, s14
 80052c6:	eef0 0a67 	vmov.f32	s1, s15
 80052ca:	f014 fc89 	bl	8019be0 <round>
 80052ce:	ec54 3b10 	vmov	r3, r4, d0
 80052d2:	4618      	mov	r0, r3
 80052d4:	4621      	mov	r1, r4
 80052d6:	f7fb fc67 	bl	8000ba8 <__aeabi_d2uiz>
 80052da:	4603      	mov	r3, r0
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80052de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052e2:	a3b3      	add	r3, pc, #716	; (adr r3, 80055b0 <lowlayer_computeAndWritePulse+0x338>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fa ffd0 	bl	800028c <__adddf3>
 80052ec:	4603      	mov	r3, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	4618      	mov	r0, r3
 80052f2:	4621      	mov	r1, r4
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	4baf      	ldr	r3, [pc, #700]	; (80055b8 <lowlayer_computeAndWritePulse+0x340>)
 80052fa:	f7fb f97d 	bl	80005f8 <__aeabi_dmul>
 80052fe:	4603      	mov	r3, r0
 8005300:	460c      	mov	r4, r1
 8005302:	4618      	mov	r0, r3
 8005304:	4621      	mov	r1, r4
 8005306:	a3a0      	add	r3, pc, #640	; (adr r3, 8005588 <lowlayer_computeAndWritePulse+0x310>)
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f7fb fa9e 	bl	800084c <__aeabi_ddiv>
 8005310:	4603      	mov	r3, r0
 8005312:	460c      	mov	r4, r1
 8005314:	ec44 3b17 	vmov	d7, r3, r4
 8005318:	eeb0 0a47 	vmov.f32	s0, s14
 800531c:	eef0 0a67 	vmov.f32	s1, s15
 8005320:	f014 fc5e 	bl	8019be0 <round>
 8005324:	ec54 3b10 	vmov	r3, r4, d0
 8005328:	4618      	mov	r0, r3
 800532a:	4621      	mov	r1, r4
 800532c:	f7fb fc3c 	bl	8000ba8 <__aeabi_d2uiz>
 8005330:	4603      	mov	r3, r0
 8005332:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8005334:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	4b9f      	ldr	r3, [pc, #636]	; (80055bc <lowlayer_computeAndWritePulse+0x344>)
 800533e:	f7fb f95b 	bl	80005f8 <__aeabi_dmul>
 8005342:	4603      	mov	r3, r0
 8005344:	460c      	mov	r4, r1
 8005346:	ec44 3b17 	vmov	d7, r3, r4
 800534a:	eeb0 0a47 	vmov.f32	s0, s14
 800534e:	eef0 0a67 	vmov.f32	s1, s15
 8005352:	f014 fc45 	bl	8019be0 <round>
 8005356:	ec54 3b10 	vmov	r3, r4, d0
 800535a:	4618      	mov	r0, r3
 800535c:	4621      	mov	r1, r4
 800535e:	f7fb fc23 	bl	8000ba8 <__aeabi_d2uiz>
 8005362:	4603      	mov	r3, r0
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8005366:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800536a:	a389      	add	r3, pc, #548	; (adr r3, 8005590 <lowlayer_computeAndWritePulse+0x318>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fa ff8c 	bl	800028c <__adddf3>
 8005374:	4603      	mov	r3, r0
 8005376:	460c      	mov	r4, r1
 8005378:	4618      	mov	r0, r3
 800537a:	4621      	mov	r1, r4
 800537c:	a386      	add	r3, pc, #536	; (adr r3, 8005598 <lowlayer_computeAndWritePulse+0x320>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fb f939 	bl	80005f8 <__aeabi_dmul>
 8005386:	4603      	mov	r3, r0
 8005388:	460c      	mov	r4, r1
 800538a:	4618      	mov	r0, r3
 800538c:	4621      	mov	r1, r4
 800538e:	a37e      	add	r3, pc, #504	; (adr r3, 8005588 <lowlayer_computeAndWritePulse+0x310>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb fa5a 	bl	800084c <__aeabi_ddiv>
 8005398:	4603      	mov	r3, r0
 800539a:	460c      	mov	r4, r1
 800539c:	ec44 3b17 	vmov	d7, r3, r4
 80053a0:	eeb0 0a47 	vmov.f32	s0, s14
 80053a4:	eef0 0a67 	vmov.f32	s1, s15
 80053a8:	f014 fc1a 	bl	8019be0 <round>
 80053ac:	ec54 3b10 	vmov	r3, r4, d0
 80053b0:	4618      	mov	r0, r3
 80053b2:	4621      	mov	r1, r4
 80053b4:	f7fb fbf8 	bl	8000ba8 <__aeabi_d2uiz>
 80053b8:	4603      	mov	r3, r0
 80053ba:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80053bc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80053c0:	a377      	add	r3, pc, #476	; (adr r3, 80055a0 <lowlayer_computeAndWritePulse+0x328>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fa ff61 	bl	800028c <__adddf3>
 80053ca:	4603      	mov	r3, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	4618      	mov	r0, r3
 80053d0:	4621      	mov	r1, r4
 80053d2:	a375      	add	r3, pc, #468	; (adr r3, 80055a8 <lowlayer_computeAndWritePulse+0x330>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f90e 	bl	80005f8 <__aeabi_dmul>
 80053dc:	4603      	mov	r3, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	4618      	mov	r0, r3
 80053e2:	4621      	mov	r1, r4
 80053e4:	a368      	add	r3, pc, #416	; (adr r3, 8005588 <lowlayer_computeAndWritePulse+0x310>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f7fb fa2f 	bl	800084c <__aeabi_ddiv>
 80053ee:	4603      	mov	r3, r0
 80053f0:	460c      	mov	r4, r1
 80053f2:	ec44 3b17 	vmov	d7, r3, r4
 80053f6:	eeb0 0a47 	vmov.f32	s0, s14
 80053fa:	eef0 0a67 	vmov.f32	s1, s15
 80053fe:	f014 fbef 	bl	8019be0 <round>
 8005402:	ec54 3b10 	vmov	r3, r4, d0
 8005406:	4618      	mov	r0, r3
 8005408:	4621      	mov	r1, r4
 800540a:	f7fb fbcd 	bl	8000ba8 <__aeabi_d2uiz>
 800540e:	4603      	mov	r3, r0
 8005410:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8005412:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005416:	a366      	add	r3, pc, #408	; (adr r3, 80055b0 <lowlayer_computeAndWritePulse+0x338>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f7fa ff36 	bl	800028c <__adddf3>
 8005420:	4603      	mov	r3, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4618      	mov	r0, r3
 8005426:	4621      	mov	r1, r4
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	4b62      	ldr	r3, [pc, #392]	; (80055b8 <lowlayer_computeAndWritePulse+0x340>)
 800542e:	f7fb f8e3 	bl	80005f8 <__aeabi_dmul>
 8005432:	4603      	mov	r3, r0
 8005434:	460c      	mov	r4, r1
 8005436:	4618      	mov	r0, r3
 8005438:	4621      	mov	r1, r4
 800543a:	a353      	add	r3, pc, #332	; (adr r3, 8005588 <lowlayer_computeAndWritePulse+0x310>)
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f7fb fa04 	bl	800084c <__aeabi_ddiv>
 8005444:	4603      	mov	r3, r0
 8005446:	460c      	mov	r4, r1
 8005448:	ec44 3b17 	vmov	d7, r3, r4
 800544c:	eeb0 0a47 	vmov.f32	s0, s14
 8005450:	eef0 0a67 	vmov.f32	s1, s15
 8005454:	f014 fbc4 	bl	8019be0 <round>
 8005458:	ec54 3b10 	vmov	r3, r4, d0
 800545c:	4618      	mov	r0, r3
 800545e:	4621      	mov	r1, r4
 8005460:	f7fb fba2 	bl	8000ba8 <__aeabi_d2uiz>
 8005464:	4603      	mov	r3, r0
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8005468:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	4b52      	ldr	r3, [pc, #328]	; (80055bc <lowlayer_computeAndWritePulse+0x344>)
 8005472:	f7fb f8c1 	bl	80005f8 <__aeabi_dmul>
 8005476:	4603      	mov	r3, r0
 8005478:	460c      	mov	r4, r1
 800547a:	ec44 3b17 	vmov	d7, r3, r4
 800547e:	eeb0 0a47 	vmov.f32	s0, s14
 8005482:	eef0 0a67 	vmov.f32	s1, s15
 8005486:	f014 fbab 	bl	8019be0 <round>
 800548a:	ec54 3b10 	vmov	r3, r4, d0
 800548e:	4618      	mov	r0, r3
 8005490:	4621      	mov	r1, r4
 8005492:	f7fb fb89 	bl	8000ba8 <__aeabi_d2uiz>
 8005496:	4603      	mov	r3, r0
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800549a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800549e:	a33c      	add	r3, pc, #240	; (adr r3, 8005590 <lowlayer_computeAndWritePulse+0x318>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fa fef2 	bl	800028c <__adddf3>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	4618      	mov	r0, r3
 80054ae:	4621      	mov	r1, r4
 80054b0:	a339      	add	r3, pc, #228	; (adr r3, 8005598 <lowlayer_computeAndWritePulse+0x320>)
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	f7fb f89f 	bl	80005f8 <__aeabi_dmul>
 80054ba:	4603      	mov	r3, r0
 80054bc:	460c      	mov	r4, r1
 80054be:	4618      	mov	r0, r3
 80054c0:	4621      	mov	r1, r4
 80054c2:	a331      	add	r3, pc, #196	; (adr r3, 8005588 <lowlayer_computeAndWritePulse+0x310>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fb f9c0 	bl	800084c <__aeabi_ddiv>
 80054cc:	4603      	mov	r3, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	ec44 3b17 	vmov	d7, r3, r4
 80054d4:	eeb0 0a47 	vmov.f32	s0, s14
 80054d8:	eef0 0a67 	vmov.f32	s1, s15
 80054dc:	f014 fb80 	bl	8019be0 <round>
 80054e0:	ec54 3b10 	vmov	r3, r4, d0
 80054e4:	4618      	mov	r0, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	f7fb fb5e 	bl	8000ba8 <__aeabi_d2uiz>
 80054ec:	4603      	mov	r3, r0
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 80054f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f04f 0400 	mov.w	r4, #0
 80054fa:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 80054fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f04f 0400 	mov.w	r4, #0
 8005508:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 800550c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 800551a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	2b00      	cmp	r3, #0
 800552c:	bfb8      	it	lt
 800552e:	425b      	neglt	r3, r3
 8005530:	2b7f      	cmp	r3, #127	; 0x7f
 8005532:	dc11      	bgt.n	8005558 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	bfb8      	it	lt
 800553a:	425b      	neglt	r3, r3
 800553c:	2b7f      	cmp	r3, #127	; 0x7f
 800553e:	dc0b      	bgt.n	8005558 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	bfb8      	it	lt
 8005546:	425b      	neglt	r3, r3
 8005548:	2b7f      	cmp	r3, #127	; 0x7f
 800554a:	dc05      	bgt.n	8005558 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfb8      	it	lt
 8005552:	425b      	neglt	r3, r3
 8005554:	2b7f      	cmp	r3, #127	; 0x7f
 8005556:	dd01      	ble.n	800555c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	e00c      	b.n	8005576 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800555c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8005560:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8005564:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8005568:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800556c:	f000 f828 	bl	80055c0 <lowlayer_writePulse>
 8005570:	4603      	mov	r3, r0
 8005572:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8005574:	79fb      	ldrb	r3, [r7, #7]
}
 8005576:	4618      	mov	r0, r3
 8005578:	374c      	adds	r7, #76	; 0x4c
 800557a:	46bd      	mov	sp, r7
 800557c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005580:	b004      	add	sp, #16
 8005582:	4770      	bx	lr
 8005584:	f3af 8000 	nop.w
 8005588:	60000000 	.word	0x60000000
 800558c:	401921fb 	.word	0x401921fb
 8005590:	daaaaaab 	.word	0xdaaaaaab
 8005594:	4007bc89 	.word	0x4007bc89
 8005598:	a0000000 	.word	0xa0000000
 800559c:	40d3bca1 	.word	0x40d3bca1
 80055a0:	daaaaaab 	.word	0xdaaaaaab
 80055a4:	3ff7bc89 	.word	0x3ff7bc89
 80055a8:	00000000 	.word	0x00000000
 80055ac:	40d38800 	.word	0x40d38800
 80055b0:	88000000 	.word	0x88000000
 80055b4:	4002d97c 	.word	0x4002d97c
 80055b8:	40df4000 	.word	0x40df4000
 80055bc:	40590000 	.word	0x40590000

080055c0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4623      	mov	r3, r4
 80055d0:	71fb      	strb	r3, [r7, #7]
 80055d2:	4603      	mov	r3, r0
 80055d4:	71bb      	strb	r3, [r7, #6]
 80055d6:	460b      	mov	r3, r1
 80055d8:	717b      	strb	r3, [r7, #5]
 80055da:	4613      	mov	r3, r2
 80055dc:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da06      	bge.n	80055f4 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	425b      	negs	r3, r3
 80055ea:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	425b      	negs	r3, r3
 80055f0:	75fb      	strb	r3, [r7, #23]
 80055f2:	e006      	b.n	8005602 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8005602:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005606:	2b00      	cmp	r3, #0
 8005608:	da06      	bge.n	8005618 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800560a:	79bb      	ldrb	r3, [r7, #6]
 800560c:	425b      	negs	r3, r3
 800560e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8005610:	79bb      	ldrb	r3, [r7, #6]
 8005612:	425b      	negs	r3, r3
 8005614:	75bb      	strb	r3, [r7, #22]
 8005616:	e006      	b.n	8005626 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8005618:	79bb      	ldrb	r3, [r7, #6]
 800561a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 800561c:	79bb      	ldrb	r3, [r7, #6]
 800561e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005622:	b25b      	sxtb	r3, r3
 8005624:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8005626:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800562a:	2b00      	cmp	r3, #0
 800562c:	da0b      	bge.n	8005646 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800562e:	797b      	ldrb	r3, [r7, #5]
 8005630:	425b      	negs	r3, r3
 8005632:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8005634:	797b      	ldrb	r3, [r7, #5]
 8005636:	425b      	negs	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	b25b      	sxtb	r3, r3
 800563c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005640:	b25b      	sxtb	r3, r3
 8005642:	757b      	strb	r3, [r7, #21]
 8005644:	e003      	b.n	800564e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8005646:	797b      	ldrb	r3, [r7, #5]
 8005648:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800564a:	797b      	ldrb	r3, [r7, #5]
 800564c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800564e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	da06      	bge.n	8005664 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8005656:	793b      	ldrb	r3, [r7, #4]
 8005658:	425b      	negs	r3, r3
 800565a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800565c:	793b      	ldrb	r3, [r7, #4]
 800565e:	425b      	negs	r3, r3
 8005660:	753b      	strb	r3, [r7, #20]
 8005662:	e006      	b.n	8005672 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8005664:	793b      	ldrb	r3, [r7, #4]
 8005666:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8005668:	793b      	ldrb	r3, [r7, #4]
 800566a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566e:	b25b      	sxtb	r3, r3
 8005670:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8005672:	7cfb      	ldrb	r3, [r7, #19]
 8005674:	2b4b      	cmp	r3, #75	; 0x4b
 8005676:	d808      	bhi.n	800568a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8005678:	7cbb      	ldrb	r3, [r7, #18]
 800567a:	2b78      	cmp	r3, #120	; 0x78
 800567c:	d805      	bhi.n	800568a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 800567e:	7c7b      	ldrb	r3, [r7, #17]
 8005680:	2b7d      	cmp	r3, #125	; 0x7d
 8005682:	d802      	bhi.n	800568a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8005684:	7c3b      	ldrb	r3, [r7, #16]
 8005686:	2b65      	cmp	r3, #101	; 0x65
 8005688:	d901      	bls.n	800568e <lowlayer_writePulse+0xce>
		return FALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	e04b      	b.n	8005726 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800568e:	2200      	movs	r2, #0
 8005690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005694:	4826      	ldr	r0, [pc, #152]	; (8005730 <lowlayer_writePulse+0x170>)
 8005696:	f006 fed9 	bl	800c44c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 800569a:	2200      	movs	r2, #0
 800569c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056a0:	4824      	ldr	r0, [pc, #144]	; (8005734 <lowlayer_writePulse+0x174>)
 80056a2:	f006 fed3 	bl	800c44c <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	4619      	mov	r1, r3
 80056aa:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80056ae:	f7fe fae1 	bl	8003c74 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80056b2:	7dbb      	ldrb	r3, [r7, #22]
 80056b4:	4619      	mov	r1, r3
 80056b6:	4820      	ldr	r0, [pc, #128]	; (8005738 <lowlayer_writePulse+0x178>)
 80056b8:	f7fe fadc 	bl	8003c74 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80056bc:	7d7b      	ldrb	r3, [r7, #21]
 80056be:	4619      	mov	r1, r3
 80056c0:	481e      	ldr	r0, [pc, #120]	; (800573c <lowlayer_writePulse+0x17c>)
 80056c2:	f7fe fad7 	bl	8003c74 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80056c6:	7d3b      	ldrb	r3, [r7, #20]
 80056c8:	4619      	mov	r1, r3
 80056ca:	481d      	ldr	r0, [pc, #116]	; (8005740 <lowlayer_writePulse+0x180>)
 80056cc:	f7fe fad2 	bl	8003c74 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 80056d0:	2364      	movs	r3, #100	; 0x64
 80056d2:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 80056d4:	bf00      	nop
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	1e5a      	subs	r2, r3, #1
 80056da:	73fa      	strb	r2, [r7, #15]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1fa      	bne.n	80056d6 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 80056e0:	2201      	movs	r2, #1
 80056e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056e6:	4813      	ldr	r0, [pc, #76]	; (8005734 <lowlayer_writePulse+0x174>)
 80056e8:	f006 feb0 	bl	800c44c <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 80056ec:	4b15      	ldr	r3, [pc, #84]	; (8005744 <lowlayer_writePulse+0x184>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f4:	4413      	add	r3, r2
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <lowlayer_writePulse+0x184>)
 80056f8:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <lowlayer_writePulse+0x184>)
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005702:	4413      	add	r3, r2
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <lowlayer_writePulse+0x184>)
 8005706:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <lowlayer_writePulse+0x184>)
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005710:	4413      	add	r3, r2
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <lowlayer_writePulse+0x184>)
 8005714:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <lowlayer_writePulse+0x184>)
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800571e:	4413      	add	r3, r2
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <lowlayer_writePulse+0x184>)
 8005722:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8005724:	2301      	movs	r3, #1
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd90      	pop	{r4, r7, pc}
 800572e:	bf00      	nop
 8005730:	40020000 	.word	0x40020000
 8005734:	40020c00 	.word	0x40020c00
 8005738:	60000002 	.word	0x60000002
 800573c:	60000004 	.word	0x60000004
 8005740:	60000006 	.word	0x60000006
 8005744:	2000acc0 	.word	0x2000acc0

08005748 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800574e:	2364      	movs	r3, #100	; 0x64
 8005750:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8005752:	2201      	movs	r2, #1
 8005754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005758:	4809      	ldr	r0, [pc, #36]	; (8005780 <lowlayer_resetEncoder+0x38>)
 800575a:	f006 fe77 	bl	800c44c <HAL_GPIO_WritePin>
	while (delay--);
 800575e:	bf00      	nop
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	1e5a      	subs	r2, r3, #1
 8005764:	71fa      	strb	r2, [r7, #7]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1fa      	bne.n	8005760 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800576a:	2200      	movs	r2, #0
 800576c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005770:	4803      	ldr	r0, [pc, #12]	; (8005780 <lowlayer_resetEncoder+0x38>)
 8005772:	f006 fe6b 	bl	800c44c <HAL_GPIO_WritePin>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40020c00 	.word	0x40020c00

08005784 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 800578a:	4805      	ldr	r0, [pc, #20]	; (80057a0 <lowlayer_readLimitSwitch+0x1c>)
 800578c:	f7fe fa81 	bl	8003c92 <FSMC_Read>
 8005790:	4603      	mov	r3, r0
 8005792:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	b2db      	uxtb	r3, r3
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	60000020 	.word	0x60000020

080057a4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d81c      	bhi.n	80057ee <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80057ba:	3310      	adds	r3, #16
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fa67 	bl	8003c92 <FSMC_Read>
 80057c4:	4603      	mov	r3, r0
 80057c6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80057ce:	3310      	adds	r3, #16
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3302      	adds	r3, #2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe fa5c 	bl	8003c92 <FSMC_Read>
 80057da:	4603      	mov	r3, r0
 80057dc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80057de:	893b      	ldrh	r3, [r7, #8]
 80057e0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	041a      	lsls	r2, r3, #16
 80057e6:	897b      	ldrh	r3, [r7, #10]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e001      	b.n	80057f2 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80057f2:	68fb      	ldr	r3, [r7, #12]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d81c      	bhi.n	8005846 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005812:	3318      	adds	r3, #24
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fa3b 	bl	8003c92 <FSMC_Read>
 800581c:	4603      	mov	r3, r0
 800581e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005826:	3318      	adds	r3, #24
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	3302      	adds	r3, #2
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe fa30 	bl	8003c92 <FSMC_Read>
 8005832:	4603      	mov	r3, r0
 8005834:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8005836:	893b      	ldrh	r3, [r7, #8]
 8005838:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	041a      	lsls	r2, r3, #16
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e001      	b.n	800584a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800585a:	2300      	movs	r3, #0
 800585c:	71fb      	strb	r3, [r7, #7]
 800585e:	e00b      	b.n	8005878 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8005860:	79fc      	ldrb	r4, [r7, #7]
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff ff9d 	bl	80057a4 <lowlayer_readEncoder>
 800586a:	4602      	mov	r2, r0
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <lowlayer_updateEncoder+0x34>)
 800586e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	3301      	adds	r3, #1
 8005876:	71fb      	strb	r3, [r7, #7]
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d9f0      	bls.n	8005860 <lowlayer_updateEncoder+0xc>
	}
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bd90      	pop	{r4, r7, pc}
 8005886:	bf00      	nop
 8005888:	2000acd4 	.word	0x2000acd4

0800588c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8005892:	2300      	movs	r3, #0
 8005894:	71fb      	strb	r3, [r7, #7]
 8005896:	e00b      	b.n	80058b0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8005898:	79fc      	ldrb	r4, [r7, #7]
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ffad 	bl	80057fc <lowlayer_readCapture>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <lowlayer_updateCapture+0x34>)
 80058a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	3301      	adds	r3, #1
 80058ae:	71fb      	strb	r3, [r7, #7]
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d9f0      	bls.n	8005898 <lowlayer_updateCapture+0xc>
	}
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	bf00      	nop
 80058c0:	2000ace4 	.word	0x2000ace4

080058c4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 80058ca:	f7ff ff5b 	bl	8005784 <lowlayer_readLimitSwitch>
 80058ce:	4603      	mov	r3, r0
 80058d0:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 80058d2:	2300      	movs	r3, #0
 80058d4:	71fb      	strb	r3, [r7, #7]
 80058d6:	e00d      	b.n	80058f4 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 80058d8:	79ba      	ldrb	r2, [r7, #6]
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	fa42 f303 	asr.w	r3, r2, r3
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	f002 0201 	and.w	r2, r2, #1
 80058e8:	b2d1      	uxtb	r1, r2
 80058ea:	4a06      	ldr	r2, [pc, #24]	; (8005904 <lowlayer_updateLimit+0x40>)
 80058ec:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	3301      	adds	r3, #1
 80058f2:	71fb      	strb	r3, [r7, #7]
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d9ee      	bls.n	80058d8 <lowlayer_updateLimit+0x14>
	}
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	2000ace0 	.word	0x2000ace0

08005908 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8005918:	2201      	movs	r2, #1
 800591a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800591e:	4807      	ldr	r0, [pc, #28]	; (800593c <lowlayer_setOutput+0x34>)
 8005920:	f006 fd94 	bl	800c44c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8005924:	e005      	b.n	8005932 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8005926:	2200      	movs	r2, #0
 8005928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800592c:	4803      	ldr	r0, [pc, #12]	; (800593c <lowlayer_setOutput+0x34>)
 800592e:	f006 fd8d 	bl	800c44c <HAL_GPIO_WritePin>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40020400 	.word	0x40020400

08005940 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8005944:	2201      	movs	r2, #1
 8005946:	2140      	movs	r1, #64	; 0x40
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <lowlayer_CPLD_Init+0x14>)
 800594a:	f006 fd7f 	bl	800c44c <HAL_GPIO_WritePin>
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40020c00 	.word	0x40020c00

08005958 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800595c:	2201      	movs	r2, #1
 800595e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005962:	4808      	ldr	r0, [pc, #32]	; (8005984 <lowlayer_stepMotorInit+0x2c>)
 8005964:	f006 fd72 	bl	800c44c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8005968:	2201      	movs	r2, #1
 800596a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800596e:	4805      	ldr	r0, [pc, #20]	; (8005984 <lowlayer_stepMotorInit+0x2c>)
 8005970:	f006 fd6c 	bl	800c44c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8005974:	2201      	movs	r2, #1
 8005976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800597a:	4802      	ldr	r0, [pc, #8]	; (8005984 <lowlayer_stepMotorInit+0x2c>)
 800597c:	f006 fd66 	bl	800c44c <HAL_GPIO_WritePin>
}
 8005980:	bf00      	nop
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40020000 	.word	0x40020000

08005988 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 800598c:	f7ff ffd8 	bl	8005940 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8005990:	f7ff ffe2 	bl	8005958 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8005994:	f7ff fed8 	bl	8005748 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8005998:	bf00      	nop
 800599a:	bd80      	pop	{r7, pc}
 800599c:	0000      	movs	r0, r0
	...

080059a0 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80059a0:	b084      	sub	sp, #16
 80059a2:	b5b0      	push	{r4, r5, r7, lr}
 80059a4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80059a8:	af90      	add	r7, sp, #576	; 0x240
 80059aa:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 80059ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80059b2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 8390 	bne.w	80060dc <scaraInitDuty+0x73c>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80059bc:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80059c0:	a394      	add	r3, pc, #592	; (adr r3, 8005c14 <scaraInitDuty+0x274>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fe17 	bl	80005f8 <__aeabi_dmul>
 80059ca:	4603      	mov	r3, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	4618      	mov	r0, r3
 80059d0:	4621      	mov	r1, r4
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	4b8a      	ldr	r3, [pc, #552]	; (8005c00 <scaraInitDuty+0x260>)
 80059d8:	f7fa ff38 	bl	800084c <__aeabi_ddiv>
 80059dc:	4603      	mov	r3, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80059e4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d138      	bne.n	8005a5e <scaraInitDuty+0xbe>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80059ec:	4b85      	ldr	r3, [pc, #532]	; (8005c04 <scaraInitDuty+0x264>)
 80059ee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80059f2:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80059f6:	461a      	mov	r2, r3
 80059f8:	4623      	mov	r3, r4
 80059fa:	f7fa fc47 	bl	800028c <__adddf3>
 80059fe:	4603      	mov	r3, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	463a      	mov	r2, r7
 8005a04:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8005a08:	4b7e      	ldr	r3, [pc, #504]	; (8005c04 <scaraInitDuty+0x264>)
 8005a0a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005a0e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005a12:	461a      	mov	r2, r3
 8005a14:	4623      	mov	r3, r4
 8005a16:	f7fa fc39 	bl	800028c <__adddf3>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	463a      	mov	r2, r7
 8005a20:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8005a24:	4b77      	ldr	r3, [pc, #476]	; (8005c04 <scaraInitDuty+0x264>)
 8005a26:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005a2a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4623      	mov	r3, r4
 8005a32:	f7fa fc2b 	bl	800028c <__adddf3>
 8005a36:	4603      	mov	r3, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	463a      	mov	r2, r7
 8005a3c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005a40:	4b70      	ldr	r3, [pc, #448]	; (8005c04 <scaraInitDuty+0x264>)
 8005a42:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005a46:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	f7fa fc1d 	bl	800028c <__adddf3>
 8005a52:	4603      	mov	r3, r0
 8005a54:	460c      	mov	r4, r1
 8005a56:	463a      	mov	r2, r7
 8005a58:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8005a5c:	e01b      	b.n	8005a96 <scaraInitDuty+0xf6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005a5e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d114      	bne.n	8005a90 <scaraInitDuty+0xf0>
			target_point.x 		= command.target_point.x;
 8005a66:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005a6a:	463a      	mov	r2, r7
 8005a6c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005a70:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005a74:	463a      	mov	r2, r7
 8005a76:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8005a7a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8005a7e:	463a      	mov	r2, r7
 8005a80:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8005a84:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8005a88:	463a      	mov	r2, r7
 8005a8a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8005a8e:	e002      	b.n	8005a96 <scaraInitDuty+0xf6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8005a90:	230c      	movs	r3, #12
 8005a92:	f001 bac3 	b.w	800701c <scaraInitDuty+0x167c>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8005a96:	463b      	mov	r3, r7
 8005a98:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005a9c:	4b59      	ldr	r3, [pc, #356]	; (8005c04 <scaraInitDuty+0x264>)
 8005a9e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	f7fa fbef 	bl	8000288 <__aeabi_dsub>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		dir_angle = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
		if ( angle_s < 0) {
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8005ac4:	f7fb f80a 	bl	8000adc <__aeabi_dcmplt>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <scaraInitDuty+0x134>
			dir_angle = -1;
 8005ace:	23ff      	movs	r3, #255	; 0xff
 8005ad0:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005ad4:	4b4c      	ldr	r3, [pc, #304]	; (8005c08 <scaraInitDuty+0x268>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8005ada:	4b4a      	ldr	r3, [pc, #296]	; (8005c04 <scaraInitDuty+0x264>)
 8005adc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005ae0:	4a49      	ldr	r2, [pc, #292]	; (8005c08 <scaraInitDuty+0x268>)
 8005ae2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005ae6:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8005aea:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d11f      	bne.n	8005b32 <scaraInitDuty+0x192>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8005af2:	4b45      	ldr	r3, [pc, #276]	; (8005c08 <scaraInitDuty+0x268>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005af8:	4c42      	ldr	r4, [pc, #264]	; (8005c04 <scaraInitDuty+0x264>)
 8005afa:	463b      	mov	r3, r7
 8005afc:	a82e      	add	r0, sp, #184	; 0xb8
 8005afe:	4619      	mov	r1, r3
 8005b00:	23c0      	movs	r3, #192	; 0xc0
 8005b02:	461a      	mov	r2, r3
 8005b04:	f010 fa3a 	bl	8015f7c <memcpy>
 8005b08:	4668      	mov	r0, sp
 8005b0a:	f104 0308 	add.w	r3, r4, #8
 8005b0e:	22b8      	movs	r2, #184	; 0xb8
 8005b10:	4619      	mov	r1, r3
 8005b12:	f010 fa33 	bl	8015f7c <memcpy>
 8005b16:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005b1a:	483c      	ldr	r0, [pc, #240]	; (8005c0c <scaraInitDuty+0x26c>)
 8005b1c:	f001 fa96 	bl	800704c <scaraInitLine>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 8005b26:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <scaraInitDuty+0x268>)
 8005b28:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005b2c:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005b30:	e05c      	b.n	8005bec <scaraInitDuty+0x24c>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8005b32:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d155      	bne.n	8005be6 <scaraInitDuty+0x246>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8005b3a:	4b32      	ldr	r3, [pc, #200]	; (8005c04 <scaraInitDuty+0x264>)
 8005b3c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005b40:	463a      	mov	r2, r7
 8005b42:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
//				center_point.y 		= command.target_point.y;
//				center_point.z 		= positionCurrent.z;
//			} else {
//				return SCARA_STATUS_ERROR_COORDINATE;
//			}
			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8005b46:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <scaraInitDuty+0x264>)
 8005b48:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005b4c:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8005b50:	461a      	mov	r2, r3
 8005b52:	4623      	mov	r3, r4
 8005b54:	f7fa fb9a 	bl	800028c <__adddf3>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005b60:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8005b64:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <scaraInitDuty+0x264>)
 8005b66:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005b6a:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4623      	mov	r3, r4
 8005b72:	f7fa fb8b 	bl	800028c <__adddf3>
 8005b76:	4603      	mov	r3, r0
 8005b78:	460c      	mov	r4, r1
 8005b7a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005b7e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			center_point.z 		= positionCurrent.z;
 8005b82:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <scaraInitDuty+0x264>)
 8005b84:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005b88:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005b8c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <scaraInitDuty+0x268>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005b96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005b9a:	4c1a      	ldr	r4, [pc, #104]	; (8005c04 <scaraInitDuty+0x264>)
 8005b9c:	938e      	str	r3, [sp, #568]	; 0x238
 8005b9e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005ba2:	a85e      	add	r0, sp, #376	; 0x178
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	23c0      	movs	r3, #192	; 0xc0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f010 f9e7 	bl	8015f7c <memcpy>
 8005bae:	463b      	mov	r3, r7
 8005bb0:	a82e      	add	r0, sp, #184	; 0xb8
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	23c0      	movs	r3, #192	; 0xc0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f010 f9e0 	bl	8015f7c <memcpy>
 8005bbc:	4668      	mov	r0, sp
 8005bbe:	f104 0308 	add.w	r3, r4, #8
 8005bc2:	22b8      	movs	r2, #184	; 0xb8
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f010 f9d9 	bl	8015f7c <memcpy>
 8005bca:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005bce:	4810      	ldr	r0, [pc, #64]	; (8005c10 <scaraInitDuty+0x270>)
 8005bd0:	f001 fb02 	bl	80071d8 <scaraInitCircle>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <scaraInitDuty+0x268>)
 8005bdc:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8005be0:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005be4:	e002      	b.n	8005bec <scaraInitDuty+0x24c>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005be6:	2303      	movs	r3, #3
 8005be8:	f001 ba18 	b.w	800701c <scaraInitDuty+0x167c>
		}

		if ( SCARA_STATUS_OK != status) {
 8005bec:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d013      	beq.n	8005c1c <scaraInitDuty+0x27c>
			return status;
 8005bf4:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005bf8:	f001 ba10 	b.w	800701c <scaraInitDuty+0x167c>
 8005bfc:	f3af 8000 	nop.w
 8005c00:	40668000 	.word	0x40668000
 8005c04:	2000b8e8 	.word	0x2000b8e8
 8005c08:	2000ad28 	.word	0x2000ad28
 8005c0c:	2000ad38 	.word	0x2000ad38
 8005c10:	2000ada8 	.word	0x2000ada8
 8005c14:	60000000 	.word	0x60000000
 8005c18:	400921fb 	.word	0x400921fb
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8005c1c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 80ed 	bne.w	8005e00 <scaraInitDuty+0x460>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005c26:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d155      	bne.n	8005cda <scaraInitDuty+0x33a>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8005c2e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005c32:	4a9b      	ldr	r2, [pc, #620]	; (8005ea0 <scaraInitDuty+0x500>)
 8005c34:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005c38:	4b99      	ldr	r3, [pc, #612]	; (8005ea0 <scaraInitDuty+0x500>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005c40:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005c44:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8005c48:	eeb0 2a46 	vmov.f32	s4, s12
 8005c4c:	eef0 2a66 	vmov.f32	s5, s13
 8005c50:	eeb0 1a47 	vmov.f32	s2, s14
 8005c54:	eef0 1a67 	vmov.f32	s3, s15
 8005c58:	2201      	movs	r2, #1
 8005c5a:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005c5e:	2104      	movs	r1, #4
 8005c60:	4890      	ldr	r0, [pc, #576]	; (8005ea4 <scaraInitDuty+0x504>)
 8005c62:	f001 fcf1 	bl	8007648 <scaraInitLSPB1>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005c6c:	4a8c      	ldr	r2, [pc, #560]	; (8005ea0 <scaraInitDuty+0x500>)
 8005c6e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8005c72:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005c76:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005c7a:	4a89      	ldr	r2, [pc, #548]	; (8005ea0 <scaraInitDuty+0x500>)
 8005c7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c80:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005c84:	4b86      	ldr	r3, [pc, #536]	; (8005ea0 <scaraInitDuty+0x500>)
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005c8c:	f997 31af 	ldrsb.w	r3, [r7, #431]	; 0x1af
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fa fc47 	bl	8000524 <__aeabi_i2d>
 8005c96:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005c9a:	f7fa fcad 	bl	80005f8 <__aeabi_dmul>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	ec44 3b16 	vmov	d6, r3, r4
 8005ca6:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005caa:	eeb0 1a47 	vmov.f32	s2, s14
 8005cae:	eef0 1a67 	vmov.f32	s3, s15
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	eeb0 0a46 	vmov.f32	s0, s12
 8005cb8:	eef0 0a66 	vmov.f32	s1, s13
 8005cbc:	2105      	movs	r1, #5
 8005cbe:	487a      	ldr	r0, [pc, #488]	; (8005ea8 <scaraInitDuty+0x508>)
 8005cc0:	f001 fc56 	bl	8007570 <scaraInitLinear>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 8005cca:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005cce:	4a74      	ldr	r2, [pc, #464]	; (8005ea0 <scaraInitDuty+0x500>)
 8005cd0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005cd4:	e9c2 3400 	strd	r3, r4, [r2]
 8005cd8:	e1e5      	b.n	80060a6 <scaraInitDuty+0x706>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005cda:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 808b 	bne.w	8005dfa <scaraInitDuty+0x45a>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005ce4:	4b6e      	ldr	r3, [pc, #440]	; (8005ea0 <scaraInitDuty+0x500>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005cec:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005cf0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005cf4:	eeb0 2a46 	vmov.f32	s4, s12
 8005cf8:	eef0 2a66 	vmov.f32	s5, s13
 8005cfc:	eeb0 1a47 	vmov.f32	s2, s14
 8005d00:	eef0 1a67 	vmov.f32	s3, s15
 8005d04:	2200      	movs	r2, #0
 8005d06:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	4865      	ldr	r0, [pc, #404]	; (8005ea4 <scaraInitDuty+0x504>)
 8005d0e:	f001 ff6f 	bl	8007bf0 <scaraInitLSPB>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005d18:	4b61      	ldr	r3, [pc, #388]	; (8005ea0 <scaraInitDuty+0x500>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005d20:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d24:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d28:	eeb0 2a46 	vmov.f32	s4, s12
 8005d2c:	eef0 2a66 	vmov.f32	s5, s13
 8005d30:	eeb0 1a47 	vmov.f32	s2, s14
 8005d34:	eef0 1a67 	vmov.f32	s3, s15
 8005d38:	2200      	movs	r2, #0
 8005d3a:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005d3e:	2105      	movs	r1, #5
 8005d40:	485a      	ldr	r0, [pc, #360]	; (8005eac <scaraInitDuty+0x50c>)
 8005d42:	f001 ff55 	bl	8007bf0 <scaraInitLSPB>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8005d4c:	4b54      	ldr	r3, [pc, #336]	; (8005ea0 <scaraInitDuty+0x500>)
 8005d4e:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005d52:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <scaraInitDuty+0x500>)
 8005d54:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	f7fa fedc 	bl	8000b18 <__aeabi_dcmpgt>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d024      	beq.n	8005db0 <scaraInitDuty+0x410>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8005d66:	4b4e      	ldr	r3, [pc, #312]	; (8005ea0 <scaraInitDuty+0x500>)
 8005d68:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005d6c:	4a4c      	ldr	r2, [pc, #304]	; (8005ea0 <scaraInitDuty+0x500>)
 8005d6e:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005d72:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d76:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d7a:	eeb0 2a46 	vmov.f32	s4, s12
 8005d7e:	eef0 2a66 	vmov.f32	s5, s13
 8005d82:	eeb0 1a47 	vmov.f32	s2, s14
 8005d86:	eef0 1a67 	vmov.f32	s3, s15
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005d90:	2105      	movs	r1, #5
 8005d92:	4846      	ldr	r0, [pc, #280]	; (8005eac <scaraInitDuty+0x50c>)
 8005d94:	f001 ff2c 	bl	8007bf0 <scaraInitLSPB>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005d9e:	4b40      	ldr	r3, [pc, #256]	; (8005ea0 <scaraInitDuty+0x500>)
 8005da0:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005da4:	4a3e      	ldr	r2, [pc, #248]	; (8005ea0 <scaraInitDuty+0x500>)
 8005da6:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005daa:	e9c2 3400 	strd	r3, r4, [r2]
 8005dae:	e17a      	b.n	80060a6 <scaraInitDuty+0x706>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005db0:	4b3b      	ldr	r3, [pc, #236]	; (8005ea0 <scaraInitDuty+0x500>)
 8005db2:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005db6:	4a3a      	ldr	r2, [pc, #232]	; (8005ea0 <scaraInitDuty+0x500>)
 8005db8:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005dbc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005dc0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dc4:	eeb0 2a46 	vmov.f32	s4, s12
 8005dc8:	eef0 2a66 	vmov.f32	s5, s13
 8005dcc:	eeb0 1a47 	vmov.f32	s2, s14
 8005dd0:	eef0 1a67 	vmov.f32	s3, s15
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005dda:	2104      	movs	r1, #4
 8005ddc:	4831      	ldr	r0, [pc, #196]	; (8005ea4 <scaraInitDuty+0x504>)
 8005dde:	f001 ff07 	bl	8007bf0 <scaraInitLSPB>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8005de8:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <scaraInitDuty+0x500>)
 8005dea:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005dee:	4a2c      	ldr	r2, [pc, #176]	; (8005ea0 <scaraInitDuty+0x500>)
 8005df0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005df4:	e9c2 3400 	strd	r3, r4, [r2]
 8005df8:	e155      	b.n	80060a6 <scaraInitDuty+0x706>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	f001 b90e 	b.w	800701c <scaraInitDuty+0x167c>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8005e00:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	f040 80ea 	bne.w	8005fde <scaraInitDuty+0x63e>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005e0a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d152      	bne.n	8005eb8 <scaraInitDuty+0x518>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8005e12:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005e16:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <scaraInitDuty+0x500>)
 8005e18:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e1c:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <scaraInitDuty+0x500>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005e24:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e28:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e2c:	eeb0 2a46 	vmov.f32	s4, s12
 8005e30:	eef0 2a66 	vmov.f32	s5, s13
 8005e34:	eeb0 1a47 	vmov.f32	s2, s14
 8005e38:	eef0 1a67 	vmov.f32	s3, s15
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005e42:	2104      	movs	r1, #4
 8005e44:	481a      	ldr	r0, [pc, #104]	; (8005eb0 <scaraInitDuty+0x510>)
 8005e46:	f002 fab3 	bl	80083b0 <scaraInitScurve>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8005e50:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005e54:	4a12      	ldr	r2, [pc, #72]	; (8005ea0 <scaraInitDuty+0x500>)
 8005e56:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e5a:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <scaraInitDuty+0x500>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005e62:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e66:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e6a:	eeb0 2a46 	vmov.f32	s4, s12
 8005e6e:	eef0 2a66 	vmov.f32	s5, s13
 8005e72:	eeb0 1a47 	vmov.f32	s2, s14
 8005e76:	eef0 1a67 	vmov.f32	s3, s15
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005e80:	2105      	movs	r1, #5
 8005e82:	480c      	ldr	r0, [pc, #48]	; (8005eb4 <scaraInitDuty+0x514>)
 8005e84:	f002 fa94 	bl	80083b0 <scaraInitScurve>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005e8e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005e92:	4a03      	ldr	r2, [pc, #12]	; (8005ea0 <scaraInitDuty+0x500>)
 8005e94:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005e98:	e9c2 3400 	strd	r3, r4, [r2]
 8005e9c:	e103      	b.n	80060a6 <scaraInitDuty+0x706>
 8005e9e:	bf00      	nop
 8005ea0:	2000ad28 	.word	0x2000ad28
 8005ea4:	2000ae40 	.word	0x2000ae40
 8005ea8:	2000b110 	.word	0x2000b110
 8005eac:	2000afc0 	.word	0x2000afc0
 8005eb0:	2000aec0 	.word	0x2000aec0
 8005eb4:	2000b040 	.word	0x2000b040

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005eb8:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 808b 	bne.w	8005fd8 <scaraInitDuty+0x638>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ec2:	4b81      	ldr	r3, [pc, #516]	; (80060c8 <scaraInitDuty+0x728>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005eca:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005ece:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005ed2:	eeb0 2a46 	vmov.f32	s4, s12
 8005ed6:	eef0 2a66 	vmov.f32	s5, s13
 8005eda:	eeb0 1a47 	vmov.f32	s2, s14
 8005ede:	eef0 1a67 	vmov.f32	s3, s15
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005ee8:	2104      	movs	r1, #4
 8005eea:	4878      	ldr	r0, [pc, #480]	; (80060cc <scaraInitDuty+0x72c>)
 8005eec:	f002 fa60 	bl	80083b0 <scaraInitScurve>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ef6:	4b74      	ldr	r3, [pc, #464]	; (80060c8 <scaraInitDuty+0x728>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005efe:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f02:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f06:	eeb0 2a46 	vmov.f32	s4, s12
 8005f0a:	eef0 2a66 	vmov.f32	s5, s13
 8005f0e:	eeb0 1a47 	vmov.f32	s2, s14
 8005f12:	eef0 1a67 	vmov.f32	s3, s15
 8005f16:	2200      	movs	r2, #0
 8005f18:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005f1c:	2105      	movs	r1, #5
 8005f1e:	486c      	ldr	r0, [pc, #432]	; (80060d0 <scaraInitDuty+0x730>)
 8005f20:	f002 fa46 	bl	80083b0 <scaraInitScurve>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8005f2a:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <scaraInitDuty+0x728>)
 8005f2c:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8005f30:	4b65      	ldr	r3, [pc, #404]	; (80060c8 <scaraInitDuty+0x728>)
 8005f32:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005f36:	461a      	mov	r2, r3
 8005f38:	4623      	mov	r3, r4
 8005f3a:	f7fa fded 	bl	8000b18 <__aeabi_dcmpgt>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d024      	beq.n	8005f8e <scaraInitDuty+0x5ee>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8005f44:	4b60      	ldr	r3, [pc, #384]	; (80060c8 <scaraInitDuty+0x728>)
 8005f46:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005f4a:	4a5f      	ldr	r2, [pc, #380]	; (80060c8 <scaraInitDuty+0x728>)
 8005f4c:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005f50:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f54:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f58:	eeb0 2a46 	vmov.f32	s4, s12
 8005f5c:	eef0 2a66 	vmov.f32	s5, s13
 8005f60:	eeb0 1a47 	vmov.f32	s2, s14
 8005f64:	eef0 1a67 	vmov.f32	s3, s15
 8005f68:	2201      	movs	r2, #1
 8005f6a:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005f6e:	2105      	movs	r1, #5
 8005f70:	4857      	ldr	r0, [pc, #348]	; (80060d0 <scaraInitDuty+0x730>)
 8005f72:	f002 fa1d 	bl	80083b0 <scaraInitScurve>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005f7c:	4b52      	ldr	r3, [pc, #328]	; (80060c8 <scaraInitDuty+0x728>)
 8005f7e:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005f82:	4a51      	ldr	r2, [pc, #324]	; (80060c8 <scaraInitDuty+0x728>)
 8005f84:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005f88:	e9c2 3400 	strd	r3, r4, [r2]
 8005f8c:	e08b      	b.n	80060a6 <scaraInitDuty+0x706>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8005f8e:	4b4e      	ldr	r3, [pc, #312]	; (80060c8 <scaraInitDuty+0x728>)
 8005f90:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005f94:	4a4c      	ldr	r2, [pc, #304]	; (80060c8 <scaraInitDuty+0x728>)
 8005f96:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005f9a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f9e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005fa2:	eeb0 2a46 	vmov.f32	s4, s12
 8005fa6:	eef0 2a66 	vmov.f32	s5, s13
 8005faa:	eeb0 1a47 	vmov.f32	s2, s14
 8005fae:	eef0 1a67 	vmov.f32	s3, s15
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005fb8:	2104      	movs	r1, #4
 8005fba:	4844      	ldr	r0, [pc, #272]	; (80060cc <scaraInitDuty+0x72c>)
 8005fbc:	f002 f9f8 	bl	80083b0 <scaraInitScurve>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8005fc6:	4b40      	ldr	r3, [pc, #256]	; (80060c8 <scaraInitDuty+0x728>)
 8005fc8:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005fcc:	4a3e      	ldr	r2, [pc, #248]	; (80060c8 <scaraInitDuty+0x728>)
 8005fce:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005fd2:	e9c2 3400 	strd	r3, r4, [r2]
 8005fd6:	e066      	b.n	80060a6 <scaraInitDuty+0x706>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f001 b81f 	b.w	800701c <scaraInitDuty+0x167c>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8005fde:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d15c      	bne.n	80060a0 <scaraInitDuty+0x700>
			myDUTY.time_total = command.time_total;
 8005fe6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005fea:	4a37      	ldr	r2, [pc, #220]	; (80060c8 <scaraInitDuty+0x728>)
 8005fec:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005ff0:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005ff4:	4a34      	ldr	r2, [pc, #208]	; (80060c8 <scaraInitDuty+0x728>)
 8005ff6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8005ffa:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005ffe:	4b32      	ldr	r3, [pc, #200]	; (80060c8 <scaraInitDuty+0x728>)
 8006000:	2202      	movs	r2, #2
 8006002:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006006:	4b30      	ldr	r3, [pc, #192]	; (80060c8 <scaraInitDuty+0x728>)
 8006008:	2202      	movs	r2, #2
 800600a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 800600e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006012:	2b03      	cmp	r3, #3
 8006014:	d110      	bne.n	8006038 <scaraInitDuty+0x698>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 8006016:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800601a:	eeb0 1a47 	vmov.f32	s2, s14
 800601e:	eef0 1a67 	vmov.f32	s3, s15
 8006022:	2203      	movs	r2, #3
 8006024:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8006028:	2104      	movs	r1, #4
 800602a:	482a      	ldr	r0, [pc, #168]	; (80060d4 <scaraInitDuty+0x734>)
 800602c:	f001 faa0 	bl	8007570 <scaraInitLinear>
 8006030:	4603      	mov	r3, r0
 8006032:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006036:	e013      	b.n	8006060 <scaraInitDuty+0x6c0>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8006038:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800603c:	2b02      	cmp	r3, #2
 800603e:	d10f      	bne.n	8006060 <scaraInitDuty+0x6c0>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QV, command.v_factor);
 8006040:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006044:	eeb0 1a47 	vmov.f32	s2, s14
 8006048:	eef0 1a67 	vmov.f32	s3, s15
 800604c:	2202      	movs	r2, #2
 800604e:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8006052:	2104      	movs	r1, #4
 8006054:	481f      	ldr	r0, [pc, #124]	; (80060d4 <scaraInitDuty+0x734>)
 8006056:	f001 fa8b 	bl	8007570 <scaraInitLinear>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			}
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8006060:	f997 31af 	ldrsb.w	r3, [r7, #431]	; 0x1af
 8006064:	4618      	mov	r0, r3
 8006066:	f7fa fa5d 	bl	8000524 <__aeabi_i2d>
 800606a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800606e:	f7fa fac3 	bl	80005f8 <__aeabi_dmul>
 8006072:	4603      	mov	r3, r0
 8006074:	460c      	mov	r4, r1
 8006076:	ec44 3b16 	vmov	d6, r3, r4
 800607a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800607e:	eeb0 1a47 	vmov.f32	s2, s14
 8006082:	eef0 1a67 	vmov.f32	s3, s15
 8006086:	2203      	movs	r2, #3
 8006088:	eeb0 0a46 	vmov.f32	s0, s12
 800608c:	eef0 0a66 	vmov.f32	s1, s13
 8006090:	2105      	movs	r1, #5
 8006092:	4811      	ldr	r0, [pc, #68]	; (80060d8 <scaraInitDuty+0x738>)
 8006094:	f001 fa6c 	bl	8007570 <scaraInitLinear>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800609e:	e002      	b.n	80060a6 <scaraInitDuty+0x706>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80060a0:	2305      	movs	r3, #5
 80060a2:	f000 bfbb 	b.w	800701c <scaraInitDuty+0x167c>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 80060a6:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <scaraInitDuty+0x716>
			return status1;
 80060ae:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 80060b2:	f000 bfb3 	b.w	800701c <scaraInitDuty+0x167c>
		}
		if ( SCARA_STATUS_OK != status2) {
 80060b6:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8780 	beq.w	8006fc0 <scaraInitDuty+0x1620>
			return status2;
 80060c0:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80060c4:	f000 bfaa 	b.w	800701c <scaraInitDuty+0x167c>
 80060c8:	2000ad28 	.word	0x2000ad28
 80060cc:	2000aec0 	.word	0x2000aec0
 80060d0:	2000b040 	.word	0x2000b040
 80060d4:	2000af90 	.word	0x2000af90
 80060d8:	2000b110 	.word	0x2000b110
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80060dc:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	f040 876b 	bne.w	8006fbc <scaraInitDuty+0x161c>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80060e6:	4bb6      	ldr	r3, [pc, #728]	; (80063c0 <scaraInitDuty+0xa20>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80060ec:	4bb5      	ldr	r3, [pc, #724]	; (80063c4 <scaraInitDuty+0xa24>)
 80060ee:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80060f2:	4ab3      	ldr	r2, [pc, #716]	; (80063c0 <scaraInitDuty+0xa20>)
 80060f4:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 80060f8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80060fc:	4bb1      	ldr	r3, [pc, #708]	; (80063c4 <scaraInitDuty+0xa24>)
 80060fe:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006102:	4aaf      	ldr	r2, [pc, #700]	; (80063c0 <scaraInitDuty+0xa20>)
 8006104:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8006108:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 800610c:	4bad      	ldr	r3, [pc, #692]	; (80063c4 <scaraInitDuty+0xa24>)
 800610e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8006112:	4aab      	ldr	r2, [pc, #684]	; (80063c0 <scaraInitDuty+0xa20>)
 8006114:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8006118:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 800611c:	4ba9      	ldr	r3, [pc, #676]	; (80063c4 <scaraInitDuty+0xa24>)
 800611e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8006122:	4aa7      	ldr	r2, [pc, #668]	; (80063c0 <scaraInitDuty+0xa20>)
 8006124:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8006128:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if(command.joint_type == DUTY_JOINT_4DOF){
 800612c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8006130:	2b01      	cmp	r3, #1
 8006132:	f040 8373 	bne.w	800681c <scaraInitDuty+0xe7c>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8006136:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800613a:	a39f      	add	r3, pc, #636	; (adr r3, 80063b8 <scaraInitDuty+0xa18>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f7fa fa5a 	bl	80005f8 <__aeabi_dmul>
 8006144:	4603      	mov	r3, r0
 8006146:	460c      	mov	r4, r1
 8006148:	4618      	mov	r0, r3
 800614a:	4621      	mov	r1, r4
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	4b9d      	ldr	r3, [pc, #628]	; (80063c8 <scaraInitDuty+0xa28>)
 8006152:	f7fa fb7b 	bl	800084c <__aeabi_ddiv>
 8006156:	4603      	mov	r3, r0
 8006158:	460c      	mov	r4, r1
 800615a:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800615e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006162:	2b01      	cmp	r3, #1
 8006164:	d13c      	bne.n	80061e0 <scaraInitDuty+0x840>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8006166:	4b97      	ldr	r3, [pc, #604]	; (80063c4 <scaraInitDuty+0xa24>)
 8006168:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800616c:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006170:	461a      	mov	r2, r3
 8006172:	4623      	mov	r3, r4
 8006174:	f7fa f88a 	bl	800028c <__adddf3>
 8006178:	4603      	mov	r3, r0
 800617a:	460c      	mov	r4, r1
 800617c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006180:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8006184:	4b8f      	ldr	r3, [pc, #572]	; (80063c4 <scaraInitDuty+0xa24>)
 8006186:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800618a:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800618e:	461a      	mov	r2, r3
 8006190:	4623      	mov	r3, r4
 8006192:	f7fa f87b 	bl	800028c <__adddf3>
 8006196:	4603      	mov	r3, r0
 8006198:	460c      	mov	r4, r1
 800619a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800619e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80061a2:	4b88      	ldr	r3, [pc, #544]	; (80063c4 <scaraInitDuty+0xa24>)
 80061a4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80061a8:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80061ac:	461a      	mov	r2, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	f7fa f86c 	bl	800028c <__adddf3>
 80061b4:	4603      	mov	r3, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061bc:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80061c0:	4b80      	ldr	r3, [pc, #512]	; (80063c4 <scaraInitDuty+0xa24>)
 80061c2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80061c6:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80061ca:	461a      	mov	r2, r3
 80061cc:	4623      	mov	r3, r4
 80061ce:	f7fa f85d 	bl	800028c <__adddf3>
 80061d2:	4603      	mov	r3, r0
 80061d4:	460c      	mov	r4, r1
 80061d6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061da:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 80061de:	e01f      	b.n	8006220 <scaraInitDuty+0x880>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80061e0:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d118      	bne.n	800621a <scaraInitDuty+0x87a>
				target_point.x 		= command.target_point.x;
 80061e8:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80061ec:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061f0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 80061f4:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80061f8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061fc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 8006200:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006204:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006208:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 800620c:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8006210:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006214:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006218:	e002      	b.n	8006220 <scaraInitDuty+0x880>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 800621a:	230c      	movs	r3, #12
 800621c:	f000 befe 	b.w	800701c <scaraInitDuty+0x167c>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006220:	4c68      	ldr	r4, [pc, #416]	; (80063c4 <scaraInitDuty+0xa24>)
 8006222:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 8006226:	4668      	mov	r0, sp
 8006228:	f104 0308 	add.w	r3, r4, #8
 800622c:	22b8      	movs	r2, #184	; 0xb8
 800622e:	4619      	mov	r1, r3
 8006230:	f00f fea4 	bl	8015f7c <memcpy>
 8006234:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006238:	4628      	mov	r0, r5
 800623a:	f7fe f8a5 	bl	8004388 <kinematicInverse>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <scaraInitDuty+0x8aa>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8006244:	2307      	movs	r3, #7
 8006246:	f000 bee9 	b.w	800701c <scaraInitDuty+0x167c>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800624a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800624e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006252:	4b5c      	ldr	r3, [pc, #368]	; (80063c4 <scaraInitDuty+0xa24>)
 8006254:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8006258:	461a      	mov	r2, r3
 800625a:	4623      	mov	r3, r4
 800625c:	f7fa f814 	bl	8000288 <__aeabi_dsub>
 8006260:	4603      	mov	r3, r0
 8006262:	460c      	mov	r4, r1
 8006264:	463a      	mov	r2, r7
 8006266:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800626a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800626e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006272:	4b54      	ldr	r3, [pc, #336]	; (80063c4 <scaraInitDuty+0xa24>)
 8006274:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006278:	461a      	mov	r2, r3
 800627a:	4623      	mov	r3, r4
 800627c:	f7fa f804 	bl	8000288 <__aeabi_dsub>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	463a      	mov	r2, r7
 8006286:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 800628a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800628e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006292:	4b4c      	ldr	r3, [pc, #304]	; (80063c4 <scaraInitDuty+0xa24>)
 8006294:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8006298:	461a      	mov	r2, r3
 800629a:	4623      	mov	r3, r4
 800629c:	f7f9 fff4 	bl	8000288 <__aeabi_dsub>
 80062a0:	4603      	mov	r3, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	463a      	mov	r2, r7
 80062a6:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80062aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80062ae:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80062b2:	4b44      	ldr	r3, [pc, #272]	; (80063c4 <scaraInitDuty+0xa24>)
 80062b4:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80062b8:	461a      	mov	r2, r3
 80062ba:	4623      	mov	r3, r4
 80062bc:	f7f9 ffe4 	bl	8000288 <__aeabi_dsub>
 80062c0:	4603      	mov	r3, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	463a      	mov	r2, r7
 80062c6:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80062ca:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 8157 	bne.w	8006582 <scaraInitDuty+0xbe2>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80062d4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d162      	bne.n	80063a2 <scaraInitDuty+0xa02>
					for ( uint8_t i = 0; i < 4; i++) {
 80062dc:	2300      	movs	r3, #0
 80062de:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80062e2:	e051      	b.n	8006388 <scaraInitDuty+0x9e8>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80062e4:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 80062e8:	4935      	ldr	r1, [pc, #212]	; (80063c0 <scaraInitDuty+0xa20>)
 80062ea:	4613      	mov	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	4413      	add	r3, r2
 80062f0:	01db      	lsls	r3, r3, #7
 80062f2:	440b      	add	r3, r1
 80062f4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80062fc:	f897 01ae 	ldrb.w	r0, [r7, #430]	; 0x1ae
 8006300:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006304:	4c2e      	ldr	r4, [pc, #184]	; (80063c0 <scaraInitDuty+0xa20>)
 8006306:	4603      	mov	r3, r0
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4403      	add	r3, r0
 800630c:	01db      	lsls	r3, r3, #7
 800630e:	4423      	add	r3, r4
 8006310:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006314:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006318:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 800631c:	4613      	mov	r3, r2
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	4413      	add	r3, r2
 8006322:	01db      	lsls	r3, r3, #7
 8006324:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006328:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <scaraInitDuty+0xa20>)
 800632a:	1898      	adds	r0, r3, r2
 800632c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006330:	4a26      	ldr	r2, [pc, #152]	; (80063cc <scaraInitDuty+0xa2c>)
 8006332:	5cd1      	ldrb	r1, [r2, r3]
 8006334:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006338:	463a      	mov	r2, r7
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4413      	add	r3, r2
 800633e:	ed93 7b00 	vldr	d7, [r3]
 8006342:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006346:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 800634a:	eeb0 2a45 	vmov.f32	s4, s10
 800634e:	eef0 2a65 	vmov.f32	s5, s11
 8006352:	eeb0 1a46 	vmov.f32	s2, s12
 8006356:	eef0 1a66 	vmov.f32	s3, s13
 800635a:	2201      	movs	r2, #1
 800635c:	eeb0 0a47 	vmov.f32	s0, s14
 8006360:	eef0 0a67 	vmov.f32	s1, s15
 8006364:	f001 f970 	bl	8007648 <scaraInitLSPB1>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
						if(status1 != SCARA_STATUS_OK){
 800636e:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <scaraInitDuty+0x9de>
							return status1;
 8006376:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800637a:	f000 be4f 	b.w	800701c <scaraInitDuty+0x167c>
					for ( uint8_t i = 0; i < 4; i++) {
 800637e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006382:	3301      	adds	r3, #1
 8006384:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006388:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800638c:	2b03      	cmp	r3, #3
 800638e:	d9a9      	bls.n	80062e4 <scaraInitDuty+0x944>
						}
					}
					myDUTY.time_total = command.time_total;
 8006390:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006394:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <scaraInitDuty+0xa20>)
 8006396:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800639a:	e9c2 3400 	strd	r3, r4, [r2]
 800639e:	f000 be0f 	b.w	8006fc0 <scaraInitDuty+0x1620>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80063a2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 80e8 	bne.w	800657c <scaraInitDuty+0xbdc>
					for ( uint8_t i = 0; i < 4; i++) {
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80063b2:	e049      	b.n	8006448 <scaraInitDuty+0xaa8>
 80063b4:	f3af 8000 	nop.w
 80063b8:	60000000 	.word	0x60000000
 80063bc:	400921fb 	.word	0x400921fb
 80063c0:	2000ad28 	.word	0x2000ad28
 80063c4:	2000b8e8 	.word	0x2000b8e8
 80063c8:	40668000 	.word	0x40668000
 80063cc:	20000824 	.word	0x20000824
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80063d0:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 80063d4:	49c8      	ldr	r1, [pc, #800]	; (80066f8 <scaraInitDuty+0xd58>)
 80063d6:	4613      	mov	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4413      	add	r3, r2
 80063dc:	01db      	lsls	r3, r3, #7
 80063de:	440b      	add	r3, r1
 80063e0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80063e8:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80063f8:	4abf      	ldr	r2, [pc, #764]	; (80066f8 <scaraInitDuty+0xd58>)
 80063fa:	1898      	adds	r0, r3, r2
 80063fc:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006400:	4abe      	ldr	r2, [pc, #760]	; (80066fc <scaraInitDuty+0xd5c>)
 8006402:	5cd1      	ldrb	r1, [r2, r3]
 8006404:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006408:	463a      	mov	r2, r7
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	ed93 7b00 	vldr	d7, [r3]
 8006412:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006416:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800641a:	eeb0 2a45 	vmov.f32	s4, s10
 800641e:	eef0 2a65 	vmov.f32	s5, s11
 8006422:	eeb0 1a46 	vmov.f32	s2, s12
 8006426:	eef0 1a66 	vmov.f32	s3, s13
 800642a:	2200      	movs	r2, #0
 800642c:	eeb0 0a47 	vmov.f32	s0, s14
 8006430:	eef0 0a67 	vmov.f32	s1, s15
 8006434:	f001 fbdc 	bl	8007bf0 <scaraInitLSPB>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800643e:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006442:	3301      	adds	r3, #1
 8006444:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006448:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800644c:	2b03      	cmp	r3, #3
 800644e:	d9bf      	bls.n	80063d0 <scaraInitDuty+0xa30>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8006450:	4ba9      	ldr	r3, [pc, #676]	; (80066f8 <scaraInitDuty+0xd58>)
 8006452:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	f04f 0400 	mov.w	r4, #0
 800645e:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006462:	2300      	movs	r3, #0
 8006464:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 8006468:	e02d      	b.n	80064c6 <scaraInitDuty+0xb26>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 800646a:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 800646e:	49a2      	ldr	r1, [pc, #648]	; (80066f8 <scaraInitDuty+0xd58>)
 8006470:	4613      	mov	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	4413      	add	r3, r2
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	440b      	add	r3, r1
 800647a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800647e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006482:	4b9d      	ldr	r3, [pc, #628]	; (80066f8 <scaraInitDuty+0xd58>)
 8006484:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006488:	e9d3 3400 	ldrd	r3, r4, [r3]
 800648c:	461a      	mov	r2, r3
 800648e:	4623      	mov	r3, r4
 8006490:	f7fa fb42 	bl	8000b18 <__aeabi_dcmpgt>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <scaraInitDuty+0xb1c>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800649a:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 800649e:	4996      	ldr	r1, [pc, #600]	; (80066f8 <scaraInitDuty+0xd58>)
 80064a0:	4613      	mov	r3, r2
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	4413      	add	r3, r2
 80064a6:	01db      	lsls	r3, r3, #7
 80064a8:	440b      	add	r3, r1
 80064aa:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80064ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064b2:	4a91      	ldr	r2, [pc, #580]	; (80066f8 <scaraInitDuty+0xd58>)
 80064b4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80064b8:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80064bc:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 80064c0:	3301      	adds	r3, #1
 80064c2:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 80064c6:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d9cd      	bls.n	800646a <scaraInitDuty+0xaca>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80064d4:	e04c      	b.n	8006570 <scaraInitDuty+0xbd0>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80064d6:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80064da:	4987      	ldr	r1, [pc, #540]	; (80066f8 <scaraInitDuty+0xd58>)
 80064dc:	4613      	mov	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	4413      	add	r3, r2
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	440b      	add	r3, r1
 80064e6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80064ee:	f897 01ab 	ldrb.w	r0, [r7, #427]	; 0x1ab
 80064f2:	4b81      	ldr	r3, [pc, #516]	; (80066f8 <scaraInitDuty+0xd58>)
 80064f4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80064f8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80064fc:	4c7e      	ldr	r4, [pc, #504]	; (80066f8 <scaraInitDuty+0xd58>)
 80064fe:	4603      	mov	r3, r0
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4403      	add	r3, r0
 8006504:	01db      	lsls	r3, r3, #7
 8006506:	4423      	add	r3, r4
 8006508:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800650c:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006510:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8006514:	4613      	mov	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	4413      	add	r3, r2
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006520:	4a75      	ldr	r2, [pc, #468]	; (80066f8 <scaraInitDuty+0xd58>)
 8006522:	1898      	adds	r0, r3, r2
 8006524:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8006528:	4a74      	ldr	r2, [pc, #464]	; (80066fc <scaraInitDuty+0xd5c>)
 800652a:	5cd1      	ldrb	r1, [r2, r3]
 800652c:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8006530:	463a      	mov	r2, r7
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4413      	add	r3, r2
 8006536:	ed93 7b00 	vldr	d7, [r3]
 800653a:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800653e:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006542:	eeb0 2a45 	vmov.f32	s4, s10
 8006546:	eef0 2a65 	vmov.f32	s5, s11
 800654a:	eeb0 1a46 	vmov.f32	s2, s12
 800654e:	eef0 1a66 	vmov.f32	s3, s13
 8006552:	2201      	movs	r2, #1
 8006554:	eeb0 0a47 	vmov.f32	s0, s14
 8006558:	eef0 0a67 	vmov.f32	s1, s15
 800655c:	f001 fb48 	bl	8007bf0 <scaraInitLSPB>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006566:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 800656a:	3301      	adds	r3, #1
 800656c:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8006570:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8006574:	2b03      	cmp	r3, #3
 8006576:	d9ae      	bls.n	80064d6 <scaraInitDuty+0xb36>
 8006578:	f000 bd22 	b.w	8006fc0 <scaraInitDuty+0x1620>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800657c:	2308      	movs	r3, #8
 800657e:	f000 bd4d 	b.w	800701c <scaraInitDuty+0x167c>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8006582:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006586:	2b01      	cmp	r3, #1
 8006588:	f040 8145 	bne.w	8006816 <scaraInitDuty+0xe76>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800658c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d15a      	bne.n	800664a <scaraInitDuty+0xcaa>
					for ( uint8_t i = 0; i < 4; i++) {
 8006594:	2300      	movs	r3, #0
 8006596:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 800659a:	e049      	b.n	8006630 <scaraInitDuty+0xc90>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800659c:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 80065a0:	4955      	ldr	r1, [pc, #340]	; (80066f8 <scaraInitDuty+0xd58>)
 80065a2:	4613      	mov	r3, r2
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	4413      	add	r3, r2
 80065a8:	01db      	lsls	r3, r3, #7
 80065aa:	440b      	add	r3, r1
 80065ac:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80065b0:	2201      	movs	r2, #1
 80065b2:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80065b4:	f897 01aa 	ldrb.w	r0, [r7, #426]	; 0x1aa
 80065b8:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80065bc:	4c4e      	ldr	r4, [pc, #312]	; (80066f8 <scaraInitDuty+0xd58>)
 80065be:	4603      	mov	r3, r0
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4403      	add	r3, r0
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	4423      	add	r3, r4
 80065c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065cc:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80065d0:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	01db      	lsls	r3, r3, #7
 80065dc:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80065e0:	4a45      	ldr	r2, [pc, #276]	; (80066f8 <scaraInitDuty+0xd58>)
 80065e2:	1898      	adds	r0, r3, r2
 80065e4:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80065e8:	4a44      	ldr	r2, [pc, #272]	; (80066fc <scaraInitDuty+0xd5c>)
 80065ea:	5cd1      	ldrb	r1, [r2, r3]
 80065ec:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80065f0:	463a      	mov	r2, r7
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4413      	add	r3, r2
 80065f6:	ed93 7b00 	vldr	d7, [r3]
 80065fa:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80065fe:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006602:	eeb0 2a45 	vmov.f32	s4, s10
 8006606:	eef0 2a65 	vmov.f32	s5, s11
 800660a:	eeb0 1a46 	vmov.f32	s2, s12
 800660e:	eef0 1a66 	vmov.f32	s3, s13
 8006612:	2201      	movs	r2, #1
 8006614:	eeb0 0a47 	vmov.f32	s0, s14
 8006618:	eef0 0a67 	vmov.f32	s1, s15
 800661c:	f001 fec8 	bl	80083b0 <scaraInitScurve>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006626:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 800662a:	3301      	adds	r3, #1
 800662c:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 8006630:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8006634:	2b03      	cmp	r3, #3
 8006636:	d9b1      	bls.n	800659c <scaraInitDuty+0xbfc>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8006638:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800663c:	4a2e      	ldr	r2, [pc, #184]	; (80066f8 <scaraInitDuty+0xd58>)
 800663e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006642:	e9c2 3400 	strd	r3, r4, [r2]
 8006646:	f000 bcbb 	b.w	8006fc0 <scaraInitDuty+0x1620>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800664a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 80de 	bne.w	8006810 <scaraInitDuty+0xe70>
					for ( uint8_t i = 0; i < 4; i++) {
 8006654:	2300      	movs	r3, #0
 8006656:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 800665a:	e03b      	b.n	80066d4 <scaraInitDuty+0xd34>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800665c:	f897 21a9 	ldrb.w	r2, [r7, #425]	; 0x1a9
 8006660:	4925      	ldr	r1, [pc, #148]	; (80066f8 <scaraInitDuty+0xd58>)
 8006662:	4613      	mov	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4413      	add	r3, r2
 8006668:	01db      	lsls	r3, r3, #7
 800666a:	440b      	add	r3, r1
 800666c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006670:	2201      	movs	r2, #1
 8006672:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006674:	f897 21a9 	ldrb.w	r2, [r7, #425]	; 0x1a9
 8006678:	4613      	mov	r3, r2
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	4413      	add	r3, r2
 800667e:	01db      	lsls	r3, r3, #7
 8006680:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006684:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <scaraInitDuty+0xd58>)
 8006686:	1898      	adds	r0, r3, r2
 8006688:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 800668c:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <scaraInitDuty+0xd5c>)
 800668e:	5cd1      	ldrb	r1, [r2, r3]
 8006690:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8006694:	463a      	mov	r2, r7
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4413      	add	r3, r2
 800669a:	ed93 7b00 	vldr	d7, [r3]
 800669e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80066a2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80066a6:	eeb0 2a45 	vmov.f32	s4, s10
 80066aa:	eef0 2a65 	vmov.f32	s5, s11
 80066ae:	eeb0 1a46 	vmov.f32	s2, s12
 80066b2:	eef0 1a66 	vmov.f32	s3, s13
 80066b6:	2200      	movs	r2, #0
 80066b8:	eeb0 0a47 	vmov.f32	s0, s14
 80066bc:	eef0 0a67 	vmov.f32	s1, s15
 80066c0:	f001 fe76 	bl	80083b0 <scaraInitScurve>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80066ca:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 80066ce:	3301      	adds	r3, #1
 80066d0:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 80066d4:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d9bf      	bls.n	800665c <scaraInitDuty+0xcbc>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <scaraInitDuty+0xd58>)
 80066de:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	f04f 0400 	mov.w	r4, #0
 80066ea:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 80066f4:	e032      	b.n	800675c <scaraInitDuty+0xdbc>
 80066f6:	bf00      	nop
 80066f8:	2000ad28 	.word	0x2000ad28
 80066fc:	20000824 	.word	0x20000824
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8006700:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8006704:	49bc      	ldr	r1, [pc, #752]	; (80069f8 <scaraInitDuty+0x1058>)
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	01db      	lsls	r3, r3, #7
 800670e:	440b      	add	r3, r1
 8006710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006718:	4bb7      	ldr	r3, [pc, #732]	; (80069f8 <scaraInitDuty+0x1058>)
 800671a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800671e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006722:	461a      	mov	r2, r3
 8006724:	4623      	mov	r3, r4
 8006726:	f7fa f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <scaraInitDuty+0xdb2>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006730:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8006734:	49b0      	ldr	r1, [pc, #704]	; (80069f8 <scaraInitDuty+0x1058>)
 8006736:	4613      	mov	r3, r2
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	4413      	add	r3, r2
 800673c:	01db      	lsls	r3, r3, #7
 800673e:	440b      	add	r3, r1
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006748:	4aab      	ldr	r2, [pc, #684]	; (80069f8 <scaraInitDuty+0x1058>)
 800674a:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800674e:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006752:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8006756:	3301      	adds	r3, #1
 8006758:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 800675c:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8006760:	2b03      	cmp	r3, #3
 8006762:	d9cd      	bls.n	8006700 <scaraInitDuty+0xd60>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8006764:	2300      	movs	r3, #0
 8006766:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 800676a:	e04c      	b.n	8006806 <scaraInitDuty+0xe66>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800676c:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 8006770:	49a1      	ldr	r1, [pc, #644]	; (80069f8 <scaraInitDuty+0x1058>)
 8006772:	4613      	mov	r3, r2
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	4413      	add	r3, r2
 8006778:	01db      	lsls	r3, r3, #7
 800677a:	440b      	add	r3, r1
 800677c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006780:	2201      	movs	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8006784:	f897 01a7 	ldrb.w	r0, [r7, #423]	; 0x1a7
 8006788:	4b9b      	ldr	r3, [pc, #620]	; (80069f8 <scaraInitDuty+0x1058>)
 800678a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800678e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006792:	4c99      	ldr	r4, [pc, #612]	; (80069f8 <scaraInitDuty+0x1058>)
 8006794:	4603      	mov	r3, r0
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	4403      	add	r3, r0
 800679a:	01db      	lsls	r3, r3, #7
 800679c:	4423      	add	r3, r4
 800679e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a2:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80067a6:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	01db      	lsls	r3, r3, #7
 80067b2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80067b6:	4a90      	ldr	r2, [pc, #576]	; (80069f8 <scaraInitDuty+0x1058>)
 80067b8:	1898      	adds	r0, r3, r2
 80067ba:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80067be:	4a8f      	ldr	r2, [pc, #572]	; (80069fc <scaraInitDuty+0x105c>)
 80067c0:	5cd1      	ldrb	r1, [r2, r3]
 80067c2:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80067c6:	463a      	mov	r2, r7
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	ed93 7b00 	vldr	d7, [r3]
 80067d0:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80067d4:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80067d8:	eeb0 2a45 	vmov.f32	s4, s10
 80067dc:	eef0 2a65 	vmov.f32	s5, s11
 80067e0:	eeb0 1a46 	vmov.f32	s2, s12
 80067e4:	eef0 1a66 	vmov.f32	s3, s13
 80067e8:	2201      	movs	r2, #1
 80067ea:	eeb0 0a47 	vmov.f32	s0, s14
 80067ee:	eef0 0a67 	vmov.f32	s1, s15
 80067f2:	f001 fddd 	bl	80083b0 <scaraInitScurve>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80067fc:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8006800:	3301      	adds	r3, #1
 8006802:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 8006806:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800680a:	2b03      	cmp	r3, #3
 800680c:	d9ae      	bls.n	800676c <scaraInitDuty+0xdcc>
 800680e:	e3d7      	b.n	8006fc0 <scaraInitDuty+0x1620>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006810:	2308      	movs	r3, #8
 8006812:	f000 bc03 	b.w	800701c <scaraInitDuty+0x167c>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006816:	2305      	movs	r3, #5
 8006818:	f000 bc00 	b.w	800701c <scaraInitDuty+0x167c>
			}
		}else if ( DUTY_JOINT_SINGLE == command.joint_type) {
 800681c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 83c9 	bne.w	8006fb8 <scaraInitDuty+0x1618>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.arc_dir) {
 8006826:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800682a:	2b03      	cmp	r3, #3
 800682c:	f200 8144 	bhi.w	8006ab8 <scaraInitDuty+0x1118>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <scaraInitDuty+0xe98>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006849 	.word	0x08006849
 800683c:	080068eb 	.word	0x080068eb
 8006840:	0800698d 	.word	0x0800698d
 8006844:	08006a19 	.word	0x08006a19
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8006848:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800684c:	a368      	add	r3, pc, #416	; (adr r3, 80069f0 <scaraInitDuty+0x1050>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f7f9 fed1 	bl	80005f8 <__aeabi_dmul>
 8006856:	4603      	mov	r3, r0
 8006858:	460c      	mov	r4, r1
 800685a:	4618      	mov	r0, r3
 800685c:	4621      	mov	r1, r4
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	4b67      	ldr	r3, [pc, #412]	; (8006a00 <scaraInitDuty+0x1060>)
 8006864:	f7f9 fff2 	bl	800084c <__aeabi_ddiv>
 8006868:	4603      	mov	r3, r0
 800686a:	460c      	mov	r4, r1
 800686c:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006870:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006874:	2b01      	cmp	r3, #1
 8006876:	d113      	bne.n	80068a0 <scaraInitDuty+0xf00>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8006878:	4b5f      	ldr	r3, [pc, #380]	; (80069f8 <scaraInitDuty+0x1058>)
 800687a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800687e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006882:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006886:	461a      	mov	r2, r3
 8006888:	4623      	mov	r3, r4
 800688a:	f7f9 fcff 	bl	800028c <__adddf3>
 800688e:	4603      	mov	r3, r0
 8006890:	460c      	mov	r4, r1
 8006892:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8006896:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800689a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 800689e:	e019      	b.n	80068d4 <scaraInitDuty+0xf34>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80068a0:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d113      	bne.n	80068d0 <scaraInitDuty+0xf30>
					abs_position = command.sub_para_double;
 80068a8:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80068ac:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 80068b0:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80068b4:	4b50      	ldr	r3, [pc, #320]	; (80069f8 <scaraInitDuty+0x1058>)
 80068b6:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80068ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068be:	461a      	mov	r2, r3
 80068c0:	4623      	mov	r3, r4
 80068c2:	f7f9 fce1 	bl	8000288 <__aeabi_dsub>
 80068c6:	4603      	mov	r3, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 80068ce:	e001      	b.n	80068d4 <scaraInitDuty+0xf34>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80068d0:	230c      	movs	r3, #12
 80068d2:	e3a3      	b.n	800701c <scaraInitDuty+0x167c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 80068d4:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 80068d8:	2000      	movs	r0, #0
 80068da:	f003 fe95 	bl	800a608 <scaraCheckWorkSpace1>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80eb 	beq.w	8006abc <scaraInitDuty+0x111c>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80068e6:	2307      	movs	r3, #7
 80068e8:	e398      	b.n	800701c <scaraInitDuty+0x167c>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80068ea:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80068ee:	a340      	add	r3, pc, #256	; (adr r3, 80069f0 <scaraInitDuty+0x1050>)
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	f7f9 fe80 	bl	80005f8 <__aeabi_dmul>
 80068f8:	4603      	mov	r3, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	4618      	mov	r0, r3
 80068fe:	4621      	mov	r1, r4
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	4b3e      	ldr	r3, [pc, #248]	; (8006a00 <scaraInitDuty+0x1060>)
 8006906:	f7f9 ffa1 	bl	800084c <__aeabi_ddiv>
 800690a:	4603      	mov	r3, r0
 800690c:	460c      	mov	r4, r1
 800690e:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006912:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006916:	2b01      	cmp	r3, #1
 8006918:	d113      	bne.n	8006942 <scaraInitDuty+0xfa2>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 800691a:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <scaraInitDuty+0x1058>)
 800691c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8006920:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006924:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006928:	461a      	mov	r2, r3
 800692a:	4623      	mov	r3, r4
 800692c:	f7f9 fcae 	bl	800028c <__adddf3>
 8006930:	4603      	mov	r3, r0
 8006932:	460c      	mov	r4, r1
 8006934:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8006938:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800693c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8006940:	e019      	b.n	8006976 <scaraInitDuty+0xfd6>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006942:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006946:	2b00      	cmp	r3, #0
 8006948:	d113      	bne.n	8006972 <scaraInitDuty+0xfd2>
					abs_position = command.sub_para_double;
 800694a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800694e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8006952:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006956:	4b28      	ldr	r3, [pc, #160]	; (80069f8 <scaraInitDuty+0x1058>)
 8006958:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800695c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006960:	461a      	mov	r2, r3
 8006962:	4623      	mov	r3, r4
 8006964:	f7f9 fc90 	bl	8000288 <__aeabi_dsub>
 8006968:	4603      	mov	r3, r0
 800696a:	460c      	mov	r4, r1
 800696c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8006970:	e001      	b.n	8006976 <scaraInitDuty+0xfd6>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8006972:	230c      	movs	r3, #12
 8006974:	e352      	b.n	800701c <scaraInitDuty+0x167c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8006976:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800697a:	2001      	movs	r0, #1
 800697c:	f003 fe44 	bl	800a608 <scaraCheckWorkSpace1>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 809c 	beq.w	8006ac0 <scaraInitDuty+0x1120>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006988:	2307      	movs	r3, #7
 800698a:	e347      	b.n	800701c <scaraInitDuty+0x167c>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800698c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006990:	2b01      	cmp	r3, #1
 8006992:	d113      	bne.n	80069bc <scaraInitDuty+0x101c>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8006994:	4b18      	ldr	r3, [pc, #96]	; (80069f8 <scaraInitDuty+0x1058>)
 8006996:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800699a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800699e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80069a2:	461a      	mov	r2, r3
 80069a4:	4623      	mov	r3, r4
 80069a6:	f7f9 fc71 	bl	800028c <__adddf3>
 80069aa:	4603      	mov	r3, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 80069b2:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80069b6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 80069ba:	e023      	b.n	8006a04 <scaraInitDuty+0x1064>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80069bc:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d113      	bne.n	80069ec <scaraInitDuty+0x104c>
					abs_position = command.sub_para_double;
 80069c4:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80069c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 80069cc:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80069d0:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <scaraInitDuty+0x1058>)
 80069d2:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80069d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069da:	461a      	mov	r2, r3
 80069dc:	4623      	mov	r3, r4
 80069de:	f7f9 fc53 	bl	8000288 <__aeabi_dsub>
 80069e2:	4603      	mov	r3, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 80069ea:	e00b      	b.n	8006a04 <scaraInitDuty+0x1064>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80069ec:	230c      	movs	r3, #12
 80069ee:	e315      	b.n	800701c <scaraInitDuty+0x167c>
 80069f0:	60000000 	.word	0x60000000
 80069f4:	400921fb 	.word	0x400921fb
 80069f8:	2000ad28 	.word	0x2000ad28
 80069fc:	20000824 	.word	0x20000824
 8006a00:	40668000 	.word	0x40668000
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8006a04:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006a08:	2002      	movs	r0, #2
 8006a0a:	f003 fdfd 	bl	800a608 <scaraCheckWorkSpace1>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d057      	beq.n	8006ac4 <scaraInitDuty+0x1124>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006a14:	2307      	movs	r3, #7
 8006a16:	e301      	b.n	800701c <scaraInitDuty+0x167c>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8006a18:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006a1c:	a3cd      	add	r3, pc, #820	; (adr r3, 8006d54 <scaraInitDuty+0x13b4>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fde9 	bl	80005f8 <__aeabi_dmul>
 8006a26:	4603      	mov	r3, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	4bc5      	ldr	r3, [pc, #788]	; (8006d48 <scaraInitDuty+0x13a8>)
 8006a34:	f7f9 ff0a 	bl	800084c <__aeabi_ddiv>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006a40:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d113      	bne.n	8006a70 <scaraInitDuty+0x10d0>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8006a48:	4bc0      	ldr	r3, [pc, #768]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006a4a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a52:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006a56:	461a      	mov	r2, r3
 8006a58:	4623      	mov	r3, r4
 8006a5a:	f7f9 fc17 	bl	800028c <__adddf3>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	460c      	mov	r4, r1
 8006a62:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8006a66:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006a6a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8006a6e:	e019      	b.n	8006aa4 <scaraInitDuty+0x1104>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006a70:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d113      	bne.n	8006aa0 <scaraInitDuty+0x1100>
					abs_position = command.sub_para_double;
 8006a78:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006a7c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8006a80:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006a84:	4bb1      	ldr	r3, [pc, #708]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006a86:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006a8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4623      	mov	r3, r4
 8006a92:	f7f9 fbf9 	bl	8000288 <__aeabi_dsub>
 8006a96:	4603      	mov	r3, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8006a9e:	e001      	b.n	8006aa4 <scaraInitDuty+0x1104>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8006aa0:	230c      	movs	r3, #12
 8006aa2:	e2bb      	b.n	800701c <scaraInitDuty+0x167c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8006aa4:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006aa8:	2003      	movs	r0, #3
 8006aaa:	f003 fdad 	bl	800a608 <scaraCheckWorkSpace1>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <scaraInitDuty+0x1128>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006ab4:	2307      	movs	r3, #7
 8006ab6:	e2b1      	b.n	800701c <scaraInitDuty+0x167c>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8006ab8:	230b      	movs	r3, #11
 8006aba:	e2af      	b.n	800701c <scaraInitDuty+0x167c>
				break;
 8006abc:	bf00      	nop
 8006abe:	e004      	b.n	8006aca <scaraInitDuty+0x112a>
				break;
 8006ac0:	bf00      	nop
 8006ac2:	e002      	b.n	8006aca <scaraInitDuty+0x112a>
				break;
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <scaraInitDuty+0x112a>
				break;
 8006ac8:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8006aca:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8127 	bne.w	8006d22 <scaraInitDuty+0x1382>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006ad4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 8097 	bne.w	8006c0c <scaraInitDuty+0x126c>
					for ( uint8_t i = 0; i < 4; i++) {
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8006ae4:	e08c      	b.n	8006c00 <scaraInitDuty+0x1260>
						if ( i == command.arc_dir) {
 8006ae6:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006aea:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d13d      	bne.n	8006b6e <scaraInitDuty+0x11ce>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006af2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006af6:	4995      	ldr	r1, [pc, #596]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	01db      	lsls	r3, r3, #7
 8006b00:	440b      	add	r3, r1
 8006b02:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006b0a:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8006b0e:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006b12:	4c8e      	ldr	r4, [pc, #568]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006b14:	4603      	mov	r3, r0
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	4403      	add	r3, r0
 8006b1a:	01db      	lsls	r3, r3, #7
 8006b1c:	4423      	add	r3, r4
 8006b1e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006b22:	e9c3 1200 	strd	r1, r2, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006b26:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	01db      	lsls	r3, r3, #7
 8006b32:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006b36:	4a85      	ldr	r2, [pc, #532]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006b38:	1898      	adds	r0, r3, r2
 8006b3a:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006b3e:	4a84      	ldr	r2, [pc, #528]	; (8006d50 <scaraInitDuty+0x13b0>)
 8006b40:	5cd3      	ldrb	r3, [r2, r3]
 8006b42:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006b46:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006b4a:	eeb0 2a46 	vmov.f32	s4, s12
 8006b4e:	eef0 2a66 	vmov.f32	s5, s13
 8006b52:	eeb0 1a47 	vmov.f32	s2, s14
 8006b56:	eef0 1a67 	vmov.f32	s3, s15
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006b60:	4619      	mov	r1, r3
 8006b62:	f001 f845 	bl	8007bf0 <scaraInitLSPB>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006b6c:	e03c      	b.n	8006be8 <scaraInitDuty+0x1248>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006b6e:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006b72:	4976      	ldr	r1, [pc, #472]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	01db      	lsls	r3, r3, #7
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006b86:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8006b8a:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006b8e:	4c6f      	ldr	r4, [pc, #444]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006b90:	4603      	mov	r3, r0
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	4403      	add	r3, r0
 8006b96:	01db      	lsls	r3, r3, #7
 8006b98:	4423      	add	r3, r4
 8006b9a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006b9e:	e9c3 1200 	strd	r1, r2, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006ba2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4413      	add	r3, r2
 8006bac:	01db      	lsls	r3, r3, #7
 8006bae:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006bb2:	4a66      	ldr	r2, [pc, #408]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006bb4:	1898      	adds	r0, r3, r2
 8006bb6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006bba:	4a65      	ldr	r2, [pc, #404]	; (8006d50 <scaraInitDuty+0x13b0>)
 8006bbc:	5cd3      	ldrb	r3, [r2, r3]
 8006bbe:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006bc2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006bc6:	eeb0 2a46 	vmov.f32	s4, s12
 8006bca:	eef0 2a66 	vmov.f32	s5, s13
 8006bce:	eeb0 1a47 	vmov.f32	s2, s14
 8006bd2:	eef0 1a67 	vmov.f32	s3, s15
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8006d40 <scaraInitDuty+0x13a0>
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f001 f807 	bl	8007bf0 <scaraInitLSPB>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8006be8:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006bec:	4a57      	ldr	r2, [pc, #348]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006bee:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006bf2:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006bf6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8006c00:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	f67f af6e 	bls.w	8006ae6 <scaraInitDuty+0x1146>
 8006c0a:	e1c7      	b.n	8006f9c <scaraInitDuty+0x15fc>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006c0c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 8084 	bne.w	8006d1e <scaraInitDuty+0x137e>
					for ( uint8_t i = 0; i < 4; i++) {
 8006c16:	2300      	movs	r3, #0
 8006c18:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8006c1c:	e07a      	b.n	8006d14 <scaraInitDuty+0x1374>
						if ( i == command.arc_dir) {
 8006c1e:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c22:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d140      	bne.n	8006cac <scaraInitDuty+0x130c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006c2a:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c2e:	4947      	ldr	r1, [pc, #284]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006c30:	4613      	mov	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	4413      	add	r3, r2
 8006c36:	01db      	lsls	r3, r3, #7
 8006c38:	440b      	add	r3, r1
 8006c3a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006c42:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c46:	4613      	mov	r3, r2
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	4413      	add	r3, r2
 8006c4c:	01db      	lsls	r3, r3, #7
 8006c4e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006c52:	4a3e      	ldr	r2, [pc, #248]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006c54:	1898      	adds	r0, r3, r2
 8006c56:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006c5a:	4a3d      	ldr	r2, [pc, #244]	; (8006d50 <scaraInitDuty+0x13b0>)
 8006c5c:	5cd3      	ldrb	r3, [r2, r3]
 8006c5e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c62:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c66:	eeb0 2a46 	vmov.f32	s4, s12
 8006c6a:	eef0 2a66 	vmov.f32	s5, s13
 8006c6e:	eeb0 1a47 	vmov.f32	s2, s14
 8006c72:	eef0 1a67 	vmov.f32	s3, s15
 8006c76:	2200      	movs	r2, #0
 8006c78:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	f000 ffb7 	bl	8007bf0 <scaraInitLSPB>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8006c88:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c8c:	492f      	ldr	r1, [pc, #188]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	01db      	lsls	r3, r3, #7
 8006c96:	440b      	add	r3, r1
 8006c98:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006c9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ca0:	4a2a      	ldr	r2, [pc, #168]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006ca2:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006ca6:	e9c2 3400 	strd	r3, r4, [r2]
 8006caa:	e02e      	b.n	8006d0a <scaraInitDuty+0x136a>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006cac:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006cb0:	4926      	ldr	r1, [pc, #152]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	01db      	lsls	r3, r3, #7
 8006cba:	440b      	add	r3, r1
 8006cbc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006cc4:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006cc8:	4613      	mov	r3, r2
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	4413      	add	r3, r2
 8006cce:	01db      	lsls	r3, r3, #7
 8006cd0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006cd4:	4a1d      	ldr	r2, [pc, #116]	; (8006d4c <scaraInitDuty+0x13ac>)
 8006cd6:	1898      	adds	r0, r3, r2
 8006cd8:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006cdc:	4a1c      	ldr	r2, [pc, #112]	; (8006d50 <scaraInitDuty+0x13b0>)
 8006cde:	5cd3      	ldrb	r3, [r2, r3]
 8006ce0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006ce4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006ce8:	eeb0 2a46 	vmov.f32	s4, s12
 8006cec:	eef0 2a66 	vmov.f32	s5, s13
 8006cf0:	eeb0 1a47 	vmov.f32	s2, s14
 8006cf4:	eef0 1a67 	vmov.f32	s3, s15
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006d40 <scaraInitDuty+0x13a0>
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f000 ff76 	bl	8007bf0 <scaraInitLSPB>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8006d0a:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006d0e:	3301      	adds	r3, #1
 8006d10:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8006d14:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d980      	bls.n	8006c1e <scaraInitDuty+0x127e>
 8006d1c:	e13e      	b.n	8006f9c <scaraInitDuty+0x15fc>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006d1e:	2308      	movs	r3, #8
 8006d20:	e17c      	b.n	800701c <scaraInitDuty+0x167c>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8006d22:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	f040 8136 	bne.w	8006f98 <scaraInitDuty+0x15f8>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006d2c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	f040 80a6 	bne.w	8006e82 <scaraInitDuty+0x14e2>
						for ( uint8_t i = 0; i < 4; i++) {
 8006d36:	2300      	movs	r3, #0
 8006d38:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006d3c:	e09b      	b.n	8006e76 <scaraInitDuty+0x14d6>
 8006d3e:	bf00      	nop
	...
 8006d48:	40668000 	.word	0x40668000
 8006d4c:	2000ad28 	.word	0x2000ad28
 8006d50:	20000824 	.word	0x20000824
 8006d54:	60000000 	.word	0x60000000
 8006d58:	400921fb 	.word	0x400921fb
							if ( i == command.arc_dir) {
 8006d5c:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d60:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d13d      	bne.n	8006de4 <scaraInitDuty+0x1444>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006d68:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d6c:	49b2      	ldr	r1, [pc, #712]	; (8007038 <scaraInitDuty+0x1698>)
 8006d6e:	4613      	mov	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4413      	add	r3, r2
 8006d74:	01db      	lsls	r3, r3, #7
 8006d76:	440b      	add	r3, r1
 8006d78:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006d80:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8006d84:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006d88:	4cab      	ldr	r4, [pc, #684]	; (8007038 <scaraInitDuty+0x1698>)
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	4403      	add	r3, r0
 8006d90:	01db      	lsls	r3, r3, #7
 8006d92:	4423      	add	r3, r4
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d98:	e9c3 1200 	strd	r1, r2, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006d9c:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006da0:	4613      	mov	r3, r2
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	4413      	add	r3, r2
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006dac:	4aa2      	ldr	r2, [pc, #648]	; (8007038 <scaraInitDuty+0x1698>)
 8006dae:	1898      	adds	r0, r3, r2
 8006db0:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006db4:	4aa1      	ldr	r2, [pc, #644]	; (800703c <scaraInitDuty+0x169c>)
 8006db6:	5cd3      	ldrb	r3, [r2, r3]
 8006db8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006dbc:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006dc0:	eeb0 2a46 	vmov.f32	s4, s12
 8006dc4:	eef0 2a66 	vmov.f32	s5, s13
 8006dc8:	eeb0 1a47 	vmov.f32	s2, s14
 8006dcc:	eef0 1a67 	vmov.f32	s3, s15
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f001 faea 	bl	80083b0 <scaraInitScurve>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006de2:	e03c      	b.n	8006e5e <scaraInitDuty+0x14be>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006de4:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006de8:	4993      	ldr	r1, [pc, #588]	; (8007038 <scaraInitDuty+0x1698>)
 8006dea:	4613      	mov	r3, r2
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4413      	add	r3, r2
 8006df0:	01db      	lsls	r3, r3, #7
 8006df2:	440b      	add	r3, r1
 8006df4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006dfc:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8006e00:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006e04:	4c8c      	ldr	r4, [pc, #560]	; (8007038 <scaraInitDuty+0x1698>)
 8006e06:	4603      	mov	r3, r0
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	4403      	add	r3, r0
 8006e0c:	01db      	lsls	r3, r3, #7
 8006e0e:	4423      	add	r3, r4
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	e9c3 1200 	strd	r1, r2, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006e18:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	4413      	add	r3, r2
 8006e22:	01db      	lsls	r3, r3, #7
 8006e24:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006e28:	4a83      	ldr	r2, [pc, #524]	; (8007038 <scaraInitDuty+0x1698>)
 8006e2a:	1898      	adds	r0, r3, r2
 8006e2c:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006e30:	4a82      	ldr	r2, [pc, #520]	; (800703c <scaraInitDuty+0x169c>)
 8006e32:	5cd3      	ldrb	r3, [r2, r3]
 8006e34:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006e38:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006e3c:	eeb0 2a46 	vmov.f32	s4, s12
 8006e40:	eef0 2a66 	vmov.f32	s5, s13
 8006e44:	eeb0 1a47 	vmov.f32	s2, s14
 8006e48:	eef0 1a67 	vmov.f32	s3, s15
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8007030 <scaraInitDuty+0x1690>
 8006e52:	4619      	mov	r1, r3
 8006e54:	f001 faac 	bl	80083b0 <scaraInitScurve>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8006e5e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006e62:	4a75      	ldr	r2, [pc, #468]	; (8007038 <scaraInitDuty+0x1698>)
 8006e64:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006e68:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8006e6c:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006e70:	3301      	adds	r3, #1
 8006e72:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006e76:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	f67f af6e 	bls.w	8006d5c <scaraInitDuty+0x13bc>
 8006e80:	e08c      	b.n	8006f9c <scaraInitDuty+0x15fc>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006e82:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 8084 	bne.w	8006f94 <scaraInitDuty+0x15f4>
						for ( uint8_t i = 0; i < 4; i++) {
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006e92:	e07a      	b.n	8006f8a <scaraInitDuty+0x15ea>
							if ( i == command.arc_dir) {
 8006e94:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e98:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d140      	bne.n	8006f22 <scaraInitDuty+0x1582>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006ea0:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006ea4:	4964      	ldr	r1, [pc, #400]	; (8007038 <scaraInitDuty+0x1698>)
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4413      	add	r3, r2
 8006eac:	01db      	lsls	r3, r3, #7
 8006eae:	440b      	add	r3, r1
 8006eb0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006eb8:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	01db      	lsls	r3, r3, #7
 8006ec4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006ec8:	4a5b      	ldr	r2, [pc, #364]	; (8007038 <scaraInitDuty+0x1698>)
 8006eca:	1898      	adds	r0, r3, r2
 8006ecc:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006ed0:	4a5a      	ldr	r2, [pc, #360]	; (800703c <scaraInitDuty+0x169c>)
 8006ed2:	5cd3      	ldrb	r3, [r2, r3]
 8006ed4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006ed8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006edc:	eeb0 2a46 	vmov.f32	s4, s12
 8006ee0:	eef0 2a66 	vmov.f32	s5, s13
 8006ee4:	eeb0 1a47 	vmov.f32	s2, s14
 8006ee8:	eef0 1a67 	vmov.f32	s3, s15
 8006eec:	2200      	movs	r2, #0
 8006eee:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f001 fa5c 	bl	80083b0 <scaraInitScurve>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006efe:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006f02:	494d      	ldr	r1, [pc, #308]	; (8007038 <scaraInitDuty+0x1698>)
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4413      	add	r3, r2
 8006f0a:	01db      	lsls	r3, r3, #7
 8006f0c:	440b      	add	r3, r1
 8006f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f16:	4a48      	ldr	r2, [pc, #288]	; (8007038 <scaraInitDuty+0x1698>)
 8006f18:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006f1c:	e9c2 3400 	strd	r3, r4, [r2]
 8006f20:	e02e      	b.n	8006f80 <scaraInitDuty+0x15e0>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006f22:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006f26:	4944      	ldr	r1, [pc, #272]	; (8007038 <scaraInitDuty+0x1698>)
 8006f28:	4613      	mov	r3, r2
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	01db      	lsls	r3, r3, #7
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006f3a:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006f3e:	4613      	mov	r3, r2
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	4413      	add	r3, r2
 8006f44:	01db      	lsls	r3, r3, #7
 8006f46:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006f4a:	4a3b      	ldr	r2, [pc, #236]	; (8007038 <scaraInitDuty+0x1698>)
 8006f4c:	1898      	adds	r0, r3, r2
 8006f4e:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f52:	4a3a      	ldr	r2, [pc, #232]	; (800703c <scaraInitDuty+0x169c>)
 8006f54:	5cd3      	ldrb	r3, [r2, r3]
 8006f56:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006f5a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006f5e:	eeb0 2a46 	vmov.f32	s4, s12
 8006f62:	eef0 2a66 	vmov.f32	s5, s13
 8006f66:	eeb0 1a47 	vmov.f32	s2, s14
 8006f6a:	eef0 1a67 	vmov.f32	s3, s15
 8006f6e:	2200      	movs	r2, #0
 8006f70:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8007030 <scaraInitDuty+0x1690>
 8006f74:	4619      	mov	r1, r3
 8006f76:	f001 fa1b 	bl	80083b0 <scaraInitScurve>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 8006f80:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f84:	3301      	adds	r3, #1
 8006f86:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006f8a:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d980      	bls.n	8006e94 <scaraInitDuty+0x14f4>
 8006f92:	e003      	b.n	8006f9c <scaraInitDuty+0x15fc>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006f94:	2308      	movs	r3, #8
 8006f96:	e041      	b.n	800701c <scaraInitDuty+0x167c>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006f98:	2305      	movs	r3, #5
 8006f9a:	e03f      	b.n	800701c <scaraInitDuty+0x167c>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006f9c:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <scaraInitDuty+0x160a>
				return status1;
 8006fa4:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006fa8:	e038      	b.n	800701c <scaraInitDuty+0x167c>
			}
			if ( SCARA_STATUS_OK != status2) {
 8006faa:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d006      	beq.n	8006fc0 <scaraInitDuty+0x1620>
				return status2;
 8006fb2:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006fb6:	e031      	b.n	800701c <scaraInitDuty+0x167c>
			}

		//----Joint Quadra
		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8006fb8:	2304      	movs	r3, #4
 8006fba:	e02f      	b.n	800701c <scaraInitDuty+0x167c>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e02d      	b.n	800701c <scaraInitDuty+0x167c>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8006fc0:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <scaraInitDuty+0x16a0>)
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	f04f 0400 	mov.w	r4, #0
 8006fca:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8006fce:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <scaraInitDuty+0x1698>)
 8006fd0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fd8:	4a19      	ldr	r2, [pc, #100]	; (8007040 <scaraInitDuty+0x16a0>)
 8006fda:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8006fde:	4a19      	ldr	r2, [pc, #100]	; (8007044 <scaraInitDuty+0x16a4>)
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	f04f 0400 	mov.w	r4, #0
 8006fe8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <scaraInitDuty+0x1698>)
 8006fee:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006ff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ff6:	4a13      	ldr	r2, [pc, #76]	; (8007044 <scaraInitDuty+0x16a4>)
 8006ff8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8006ffc:	4a12      	ldr	r2, [pc, #72]	; (8007048 <scaraInitDuty+0x16a8>)
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	f04f 0400 	mov.w	r4, #0
 8007006:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <scaraInitDuty+0x1698>)
 800700c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007010:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007014:	4a0c      	ldr	r2, [pc, #48]	; (8007048 <scaraInitDuty+0x16a8>)
 8007016:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007028:	b004      	add	sp, #16
 800702a:	4770      	bx	lr
 800702c:	f3af 8000 	nop.w
	...
 8007038:	2000ad28 	.word	0x2000ad28
 800703c:	20000824 	.word	0x20000824
 8007040:	2000b8e8 	.word	0x2000b8e8
 8007044:	2000ba68 	.word	0x2000ba68
 8007048:	2000b9a8 	.word	0x2000b9a8

0800704c <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 800704c:	b082      	sub	sp, #8
 800704e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007050:	b0b1      	sub	sp, #196	; 0xc4
 8007052:	af2e      	add	r7, sp, #184	; 0xb8
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	f107 0120 	add.w	r1, r7, #32
 800705a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 800705e:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8007062:	4668      	mov	r0, sp
 8007064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007068:	22b8      	movs	r2, #184	; 0xb8
 800706a:	4619      	mov	r1, r3
 800706c:	f00e ff86 	bl	8015f7c <memcpy>
 8007070:	f107 0320 	add.w	r3, r7, #32
 8007074:	cb0c      	ldmia	r3, {r2, r3}
 8007076:	4620      	mov	r0, r4
 8007078:	f7fd f986 	bl	8004388 <kinematicInverse>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007082:	2307      	movs	r3, #7
 8007084:	e09e      	b.n	80071c4 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8007086:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8007090:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 800709a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 80070a4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 80070ae:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 80070b8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 80070c2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80070c6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80070ca:	461a      	mov	r2, r3
 80070cc:	4623      	mov	r3, r4
 80070ce:	f7f9 f8db 	bl	8000288 <__aeabi_dsub>
 80070d2:	4603      	mov	r3, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 80070dc:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80070e0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80070e4:	461a      	mov	r2, r3
 80070e6:	4623      	mov	r3, r4
 80070e8:	f7f9 f8ce 	bl	8000288 <__aeabi_dsub>
 80070ec:	4603      	mov	r3, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80070f6:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80070fa:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80070fe:	461a      	mov	r2, r3
 8007100:	4623      	mov	r3, r4
 8007102:	f7f9 f8c1 	bl	8000288 <__aeabi_dsub>
 8007106:	4603      	mov	r3, r0
 8007108:	460c      	mov	r4, r1
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800711c:	461a      	mov	r2, r3
 800711e:	4623      	mov	r3, r4
 8007120:	f7f9 fa6a 	bl	80005f8 <__aeabi_dmul>
 8007124:	4603      	mov	r3, r0
 8007126:	460c      	mov	r4, r1
 8007128:	461d      	mov	r5, r3
 800712a:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007138:	461a      	mov	r2, r3
 800713a:	4623      	mov	r3, r4
 800713c:	f7f9 fa5c 	bl	80005f8 <__aeabi_dmul>
 8007140:	4603      	mov	r3, r0
 8007142:	460c      	mov	r4, r1
 8007144:	461a      	mov	r2, r3
 8007146:	4623      	mov	r3, r4
 8007148:	4628      	mov	r0, r5
 800714a:	4631      	mov	r1, r6
 800714c:	f7f9 f89e 	bl	800028c <__adddf3>
 8007150:	4603      	mov	r3, r0
 8007152:	460c      	mov	r4, r1
 8007154:	461d      	mov	r5, r3
 8007156:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8007164:	461a      	mov	r2, r3
 8007166:	4623      	mov	r3, r4
 8007168:	f7f9 fa46 	bl	80005f8 <__aeabi_dmul>
 800716c:	4603      	mov	r3, r0
 800716e:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007170:	461a      	mov	r2, r3
 8007172:	4623      	mov	r3, r4
 8007174:	4628      	mov	r0, r5
 8007176:	4631      	mov	r1, r6
 8007178:	f7f9 f888 	bl	800028c <__adddf3>
 800717c:	4603      	mov	r3, r0
 800717e:	460c      	mov	r4, r1
 8007180:	ec44 3b17 	vmov	d7, r3, r4
 8007184:	eeb0 0a47 	vmov.f32	s0, s14
 8007188:	eef0 0a67 	vmov.f32	s1, s15
 800718c:	f012 fdfe 	bl	8019d8c <sqrt>
 8007190:	eeb0 7a40 	vmov.f32	s14, s0
 8007194:	eef0 7a60 	vmov.f32	s15, s1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80071ce:	b002      	add	sp, #8
 80071d0:	4770      	bx	lr
 80071d2:	0000      	movs	r0, r0
 80071d4:	0000      	movs	r0, r0
	...

080071d8 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 80071d8:	b082      	sub	sp, #8
 80071da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071de:	b0c7      	sub	sp, #284	; 0x11c
 80071e0:	af2e      	add	r7, sp, #184	; 0xb8
 80071e2:	6178      	str	r0, [r7, #20]
 80071e4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80071e8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 80071ec:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80071f0:	4668      	mov	r0, sp
 80071f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80071f6:	22b8      	movs	r2, #184	; 0xb8
 80071f8:	4619      	mov	r1, r3
 80071fa:	f00e febf 	bl	8015f7c <memcpy>
 80071fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007202:	cb0c      	ldmia	r3, {r2, r3}
 8007204:	4620      	mov	r0, r4
 8007206:	f7fd f8bf 	bl	8004388 <kinematicInverse>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007210:	2307      	movs	r3, #7
 8007212:	e198      	b.n	8007546 <scaraInitCircle+0x36e>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != ARC_AW_TYPE || dir != ARC_CW_TYPE){
 8007214:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007218:	2b03      	cmp	r3, #3
 800721a:	d103      	bne.n	8007224 <scaraInitCircle+0x4c>
 800721c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007220:	2b02      	cmp	r3, #2
 8007222:	d001      	beq.n	8007228 <scaraInitCircle+0x50>
		return SCARA_STATUS_ERROR_PARA;
 8007224:	2306      	movs	r3, #6
 8007226:	e18e      	b.n	8007546 <scaraInitCircle+0x36e>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8007228:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800722c:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007230:	461a      	mov	r2, r3
 8007232:	4623      	mov	r3, r4
 8007234:	f7f9 f828 	bl	8000288 <__aeabi_dsub>
 8007238:	4603      	mov	r3, r0
 800723a:	460c      	mov	r4, r1
 800723c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	y_start = start.y - center.y;
 8007240:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007244:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8007248:	461a      	mov	r2, r3
 800724a:	4623      	mov	r3, r4
 800724c:	f7f9 f81c 	bl	8000288 <__aeabi_dsub>
 8007250:	4603      	mov	r3, r0
 8007252:	460c      	mov	r4, r1
 8007254:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	x_stop  = end.x  - center.x;
 8007258:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800725c:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007260:	461a      	mov	r2, r3
 8007262:	4623      	mov	r3, r4
 8007264:	f7f9 f810 	bl	8000288 <__aeabi_dsub>
 8007268:	4603      	mov	r3, r0
 800726a:	460c      	mov	r4, r1
 800726c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	y_stop  = end.y  - center.y;
 8007270:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8007274:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8007278:	461a      	mov	r2, r3
 800727a:	4623      	mov	r3, r4
 800727c:	f7f9 f804 	bl	8000288 <__aeabi_dsub>
 8007280:	4603      	mov	r3, r0
 8007282:	460c      	mov	r4, r1
 8007284:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800728c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007290:	f7f9 f9b2 	bl	80005f8 <__aeabi_dmul>
 8007294:	4603      	mov	r3, r0
 8007296:	460c      	mov	r4, r1
 8007298:	469a      	mov	sl, r3
 800729a:	46a3      	mov	fp, r4
 800729c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80072a4:	f7f9 f9a8 	bl	80005f8 <__aeabi_dmul>
 80072a8:	4603      	mov	r3, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	461a      	mov	r2, r3
 80072ae:	4623      	mov	r3, r4
 80072b0:	4650      	mov	r0, sl
 80072b2:	4659      	mov	r1, fp
 80072b4:	f7f8 ffea 	bl	800028c <__adddf3>
 80072b8:	4603      	mov	r3, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	ec44 3b17 	vmov	d7, r3, r4
 80072c0:	eeb0 0a47 	vmov.f32	s0, s14
 80072c4:	eef0 0a67 	vmov.f32	s1, s15
 80072c8:	f012 fd60 	bl	8019d8c <sqrt>
 80072cc:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 80072d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80072d8:	f7f9 f98e 	bl	80005f8 <__aeabi_dmul>
 80072dc:	4603      	mov	r3, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	469a      	mov	sl, r3
 80072e2:	46a3      	mov	fp, r4
 80072e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80072ec:	f7f9 f984 	bl	80005f8 <__aeabi_dmul>
 80072f0:	4603      	mov	r3, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	461a      	mov	r2, r3
 80072f6:	4623      	mov	r3, r4
 80072f8:	4650      	mov	r0, sl
 80072fa:	4659      	mov	r1, fp
 80072fc:	f7f8 ffc6 	bl	800028c <__adddf3>
 8007300:	4603      	mov	r3, r0
 8007302:	460c      	mov	r4, r1
 8007304:	ec44 3b17 	vmov	d7, r3, r4
 8007308:	eeb0 0a47 	vmov.f32	s0, s14
 800730c:	eef0 0a67 	vmov.f32	s1, s15
 8007310:	f012 fd3c 	bl	8019d8c <sqrt>
 8007314:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	if( 1.0 < fabs(r1 - r2)) {
 8007318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800731c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007320:	f7f8 ffb2 	bl	8000288 <__aeabi_dsub>
 8007324:	4603      	mov	r3, r0
 8007326:	460c      	mov	r4, r1
 8007328:	4698      	mov	r8, r3
 800732a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	4b8d      	ldr	r3, [pc, #564]	; (8007568 <scaraInitCircle+0x390>)
 8007334:	4640      	mov	r0, r8
 8007336:	4649      	mov	r1, r9
 8007338:	f7f9 fbee 	bl	8000b18 <__aeabi_dcmpgt>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <scaraInitCircle+0x16e>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007342:	2306      	movs	r3, #6
 8007344:	e0ff      	b.n	8007546 <scaraInitCircle+0x36e>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007346:	a384      	add	r3, pc, #528	; (adr r3, 8007558 <scaraInitCircle+0x380>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007350:	f7f9 fbc4 	bl	8000adc <__aeabi_dcmplt>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <scaraInitCircle+0x196>
 800735a:	a37f      	add	r3, pc, #508	; (adr r3, 8007558 <scaraInitCircle+0x380>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007364:	f7f9 fbba 	bl	8000adc <__aeabi_dcmplt>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <scaraInitCircle+0x19a>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 800736e:	2306      	movs	r3, #6
 8007370:	e0e9      	b.n	8007546 <scaraInitCircle+0x36e>
	}

	angle_start = atan2(y_start, x_start);
 8007372:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8007376:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800737a:	f012 fd05 	bl	8019d88 <atan2>
 800737e:	ed87 0b08 	vstr	d0, [r7, #32]
	angle_stop  = atan2(y_stop, x_stop);
 8007382:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8007386:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800738a:	f012 fcfd 	bl	8019d88 <atan2>
 800738e:	ed87 0b06 	vstr	d0, [r7, #24]
	delta_angle = angle_stop - angle_start;
 8007392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007396:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800739a:	f7f8 ff75 	bl	8000288 <__aeabi_dsub>
 800739e:	4603      	mov	r3, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

	if (delta_angle < 0 && dir > 0) {
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073b2:	f7f9 fb93 	bl	8000adc <__aeabi_dcmplt>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d015      	beq.n	80073e8 <scaraInitCircle+0x210>
 80073bc:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dd11      	ble.n	80073e8 <scaraInitCircle+0x210>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 80073c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073c6:	60bb      	str	r3, [r7, #8]
 80073c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073d4:	a162      	add	r1, pc, #392	; (adr r1, 8007560 <scaraInitCircle+0x388>)
 80073d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073da:	f7f8 ff55 	bl	8000288 <__aeabi_dsub>
 80073de:	4603      	mov	r3, r0
 80073e0:	460c      	mov	r4, r1
 80073e2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 80073e6:	e01f      	b.n	8007428 <scaraInitCircle+0x250>
	}else if(delta_angle > 0 && dir < 0){
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073f4:	f7f9 fb90 	bl	8000b18 <__aeabi_dcmpgt>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d014      	beq.n	8007428 <scaraInitCircle+0x250>
 80073fe:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007402:	2b00      	cmp	r3, #0
 8007404:	da10      	bge.n	8007428 <scaraInitCircle+0x250>
		delta_angle = 2*PI - fabs(delta_angle);
 8007406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007408:	603b      	str	r3, [r7, #0]
 800740a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007410:	607b      	str	r3, [r7, #4]
 8007412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007416:	a152      	add	r1, pc, #328	; (adr r1, 8007560 <scaraInitCircle+0x388>)
 8007418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800741c:	f7f8 ff34 	bl	8000288 <__aeabi_dsub>
 8007420:	4603      	mov	r3, r0
 8007422:	460c      	mov	r4, r1
 8007424:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	}
	if(delta_angle*dir < 0){
 8007428:	f8d7 02c8 	ldr.w	r0, [r7, #712]	; 0x2c8
 800742c:	f7f9 f87a 	bl	8000524 <__aeabi_i2d>
 8007430:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007434:	f7f9 f8e0 	bl	80005f8 <__aeabi_dmul>
 8007438:	4603      	mov	r3, r0
 800743a:	460c      	mov	r4, r1
 800743c:	4618      	mov	r0, r3
 800743e:	4621      	mov	r1, r4
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	f04f 0300 	mov.w	r3, #0
 8007448:	f7f9 fb48 	bl	8000adc <__aeabi_dcmplt>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00f      	beq.n	8007472 <scaraInitCircle+0x29a>
		delta_angle = 2*PI - fabs(delta_angle);
 8007452:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 8007454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007456:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800745a:	462a      	mov	r2, r5
 800745c:	4633      	mov	r3, r6
 800745e:	a140      	add	r1, pc, #256	; (adr r1, 8007560 <scaraInitCircle+0x388>)
 8007460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007464:	f7f8 ff10 	bl	8000288 <__aeabi_dsub>
 8007468:	4603      	mov	r3, r0
 800746a:	460c      	mov	r4, r1
 800746c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8007470:	e005      	b.n	800747e <scaraInitCircle+0x2a6>
	}else{
		delta_angle = fabs(delta_angle);
 8007472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007474:	65bb      	str	r3, [r7, #88]	; 0x58
 8007476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007478:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800747c:	65fb      	str	r3, [r7, #92]	; 0x5c

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 800747e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007482:	b25a      	sxtb	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800748e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007498:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80074a2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80074ac:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 80074b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80074b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80074b8:	f7f9 f89e 	bl	80005f8 <__aeabi_dmul>
 80074bc:	4603      	mov	r3, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 80074c6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 80074d0:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 80074da:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 80074e4:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 80074ee:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 80074f8:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8007502:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 800750c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8007516:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3764      	adds	r7, #100	; 0x64
 800754a:	46bd      	mov	sp, r7
 800754c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	b002      	add	sp, #8
 8007552:	4770      	bx	lr
 8007554:	f3af 8000 	nop.w
 8007558:	9999999a 	.word	0x9999999a
 800755c:	3fb99999 	.word	0x3fb99999
 8007560:	60000000 	.word	0x60000000
 8007564:	401921fb 	.word	0x401921fb
 8007568:	3ff00000 	.word	0x3ff00000
 800756c:	00000000 	.word	0x00000000

08007570 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6178      	str	r0, [r7, #20]
 8007578:	460b      	mov	r3, r1
 800757a:	ed87 0b02 	vstr	d0, [r7, #8]
 800757e:	ed87 1b00 	vstr	d1, [r7]
 8007582:	74fb      	strb	r3, [r7, #19]
 8007584:	4613      	mov	r3, r2
 8007586:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007588:	7cfb      	ldrb	r3, [r7, #19]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d004      	beq.n	8007598 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 800758e:	7cfb      	ldrb	r3, [r7, #19]
 8007590:	2b05      	cmp	r3, #5
 8007592:	d001      	beq.n	8007598 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007594:	2306      	movs	r3, #6
 8007596:	e04b      	b.n	8007630 <scaraInitLinear+0xc0>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007598:	7cbb      	ldrb	r3, [r7, #18]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d125      	bne.n	80075ea <scaraInitLinear+0x7a>
		linear->constant_v = total_s / additional_factor;
 800759e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075a6:	f7f9 f951 	bl	800084c <__aeabi_ddiv>
 80075aa:	4603      	mov	r3, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
 80075b4:	a322      	add	r3, pc, #136	; (adr r3, 8007640 <scaraInitLinear+0xd0>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075be:	f7f9 f945 	bl	800084c <__aeabi_ddiv>
 80075c2:	4603      	mov	r3, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	4618      	mov	r0, r3
 80075c8:	4621      	mov	r1, r4
 80075ca:	f7f9 fb0d 	bl	8000be8 <__aeabi_d2f>
 80075ce:	4603      	mov	r3, r0
 80075d0:	ee00 3a10 	vmov	s0, r3
 80075d4:	f012 fb98 	bl	8019d08 <ceilf>
 80075d8:	eef0 7a40 	vmov.f32	s15, s0
 80075dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e0:	ee17 2a90 	vmov	r2, s15
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	621a      	str	r2, [r3, #32]
 80075e8:	e021      	b.n	800762e <scaraInitLinear+0xbe>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 80075ea:	7cbb      	ldrb	r3, [r7, #18]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d11c      	bne.n	800762a <scaraInitLinear+0xba>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	4b10      	ldr	r3, [pc, #64]	; (8007638 <scaraInitLinear+0xc8>)
 80075f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4603      	mov	r3, r0
 8007600:	460c      	mov	r4, r1
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	e9c2 3402 	strd	r3, r4, [r2, #8]
		myDUTY.time_total = total_s / linear->constant_v;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800760e:	461a      	mov	r2, r3
 8007610:	4623      	mov	r3, r4
 8007612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007616:	f7f9 f919 	bl	800084c <__aeabi_ddiv>
 800761a:	4603      	mov	r3, r0
 800761c:	460c      	mov	r4, r1
 800761e:	4a07      	ldr	r2, [pc, #28]	; (800763c <scaraInitLinear+0xcc>)
 8007620:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8007624:	e9c2 3400 	strd	r3, r4, [r2]
 8007628:	e001      	b.n	800762e <scaraInitLinear+0xbe>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800762a:	2306      	movs	r3, #6
 800762c:	e000      	b.n	8007630 <scaraInitLinear+0xc0>
	}

	return SCARA_STATUS_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	bd90      	pop	{r4, r7, pc}
 8007638:	40877000 	.word	0x40877000
 800763c:	2000ad28 	.word	0x2000ad28
 8007640:	40000000 	.word	0x40000000
 8007644:	3f847ae1 	.word	0x3f847ae1

08007648 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007648:	b5b0      	push	{r4, r5, r7, lr}
 800764a:	b096      	sub	sp, #88	; 0x58
 800764c:	af00      	add	r7, sp, #0
 800764e:	61f8      	str	r0, [r7, #28]
 8007650:	460b      	mov	r3, r1
 8007652:	ed87 0b04 	vstr	d0, [r7, #16]
 8007656:	ed87 1b02 	vstr	d1, [r7, #8]
 800765a:	ed87 2b00 	vstr	d2, [r7]
 800765e:	76fb      	strb	r3, [r7, #27]
 8007660:	4613      	mov	r3, r2
 8007662:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(total_s < 0){
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007670:	f7f9 fa34 	bl	8000adc <__aeabi_dcmplt>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <scaraInitLSPB1+0x46>
		total_s = -total_s;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007684:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	22ff      	movs	r2, #255	; 0xff
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e002      	b.n	8007694 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2201      	movs	r2, #1
 8007692:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007694:	7efb      	ldrb	r3, [r7, #27]
 8007696:	2b04      	cmp	r3, #4
 8007698:	d12c      	bne.n	80076f4 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800769a:	7ebb      	ldrb	r3, [r7, #26]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10f      	bne.n	80076c0 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	4ba6      	ldr	r3, [pc, #664]	; (8007940 <scaraInitLSPB1+0x2f8>)
 80076a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076aa:	f7f8 ffa5 	bl	80005f8 <__aeabi_dmul>
 80076ae:	4603      	mov	r3, r0
 80076b0:	460c      	mov	r4, r1
 80076b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 80076b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80076ba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80076be:	e073      	b.n	80077a8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 80076c0:	7ebb      	ldrb	r3, [r7, #26]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d170      	bne.n	80077a8 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	4b9e      	ldr	r3, [pc, #632]	; (8007944 <scaraInitLSPB1+0x2fc>)
 80076cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076d0:	f7f8 ff92 	bl	80005f8 <__aeabi_dmul>
 80076d4:	4603      	mov	r3, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	4b97      	ldr	r3, [pc, #604]	; (8007940 <scaraInitLSPB1+0x2f8>)
 80076e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076e6:	f7f8 ff87 	bl	80005f8 <__aeabi_dmul>
 80076ea:	4603      	mov	r3, r0
 80076ec:	460c      	mov	r4, r1
 80076ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80076f2:	e059      	b.n	80077a8 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 80076f4:	7efb      	ldrb	r3, [r7, #27]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d112      	bne.n	8007720 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076fa:	7ebb      	ldrb	r3, [r7, #26]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d153      	bne.n	80077a8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007700:	a383      	add	r3, pc, #524	; (adr r3, 8007910 <scaraInitLSPB1+0x2c8>)
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800770a:	f7f8 ff75 	bl	80005f8 <__aeabi_dmul>
 800770e:	4603      	mov	r3, r0
 8007710:	460c      	mov	r4, r1
 8007712:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007716:	e9d7 3400 	ldrd	r3, r4, [r7]
 800771a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800771e:	e043      	b.n	80077a8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007720:	7efb      	ldrb	r3, [r7, #27]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d112      	bne.n	800774c <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007726:	7ebb      	ldrb	r3, [r7, #26]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d13d      	bne.n	80077a8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 800772c:	a378      	add	r3, pc, #480	; (adr r3, 8007910 <scaraInitLSPB1+0x2c8>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007736:	f7f8 ff5f 	bl	80005f8 <__aeabi_dmul>
 800773a:	4603      	mov	r3, r0
 800773c:	460c      	mov	r4, r1
 800773e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007742:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007746:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800774a:	e02d      	b.n	80077a8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 800774c:	7efb      	ldrb	r3, [r7, #27]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d112      	bne.n	8007778 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007752:	7ebb      	ldrb	r3, [r7, #26]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d127      	bne.n	80077a8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007758:	a36f      	add	r3, pc, #444	; (adr r3, 8007918 <scaraInitLSPB1+0x2d0>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007762:	f7f8 ff49 	bl	80005f8 <__aeabi_dmul>
 8007766:	4603      	mov	r3, r0
 8007768:	460c      	mov	r4, r1
 800776a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 800776e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007772:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007776:	e017      	b.n	80077a8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007778:	7efb      	ldrb	r3, [r7, #27]
 800777a:	2b03      	cmp	r3, #3
 800777c:	d112      	bne.n	80077a4 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800777e:	7ebb      	ldrb	r3, [r7, #26]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d111      	bne.n	80077a8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007784:	a366      	add	r3, pc, #408	; (adr r3, 8007920 <scaraInitLSPB1+0x2d8>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800778e:	f7f8 ff33 	bl	80005f8 <__aeabi_dmul>
 8007792:	4603      	mov	r3, r0
 8007794:	460c      	mov	r4, r1
 8007796:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 800779a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800779e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80077a2:	e001      	b.n	80077a8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80077a4:	2306      	movs	r3, #6
 80077a6:	e213      	b.n	8007bd0 <scaraInitLSPB1+0x588>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 80077a8:	7ebb      	ldrb	r3, [r7, #26]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	f040 80d2 	bne.w	8007954 <scaraInitLSPB1+0x30c>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 80077b0:	a35d      	add	r3, pc, #372	; (adr r3, 8007928 <scaraInitLSPB1+0x2e0>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80077ba:	f7f9 f98f 	bl	8000adc <__aeabi_dcmplt>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01d      	beq.n	8007800 <scaraInitLSPB1+0x1b8>
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	4b5f      	ldr	r3, [pc, #380]	; (8007948 <scaraInitLSPB1+0x300>)
 80077ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80077ce:	f7f9 f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d013      	beq.n	8007800 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	4b5b      	ldr	r3, [pc, #364]	; (800794c <scaraInitLSPB1+0x304>)
 80077de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	4603      	mov	r3, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	4618      	mov	r0, r3
 80077ec:	4621      	mov	r1, r4
 80077ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077f2:	f7f9 f82b 	bl	800084c <__aeabi_ddiv>
 80077f6:	4603      	mov	r3, r0
 80077f8:	460c      	mov	r4, r1
 80077fa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80077fe:	e060      	b.n	80078c2 <scaraInitLSPB1+0x27a>
		}else if(v_design < 0.0001 && tf > 0.15){ //check if velocity valid or not
 8007800:	a34b      	add	r3, pc, #300	; (adr r3, 8007930 <scaraInitLSPB1+0x2e8>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800780a:	f7f9 f967 	bl	8000adc <__aeabi_dcmplt>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01d      	beq.n	8007850 <scaraInitLSPB1+0x208>
 8007814:	a348      	add	r3, pc, #288	; (adr r3, 8007938 <scaraInitLSPB1+0x2f0>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800781e:	f7f9 f97b 	bl	8000b18 <__aeabi_dcmpgt>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d013      	beq.n	8007850 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	4b47      	ldr	r3, [pc, #284]	; (800794c <scaraInitLSPB1+0x304>)
 800782e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007832:	f7f8 fee1 	bl	80005f8 <__aeabi_dmul>
 8007836:	4603      	mov	r3, r0
 8007838:	460c      	mov	r4, r1
 800783a:	4618      	mov	r0, r3
 800783c:	4621      	mov	r1, r4
 800783e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007842:	f7f9 f803 	bl	800084c <__aeabi_ddiv>
 8007846:	4603      	mov	r3, r0
 8007848:	460c      	mov	r4, r1
 800784a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 800784e:	e038      	b.n	80078c2 <scaraInitLSPB1+0x27a>
		}else{
			v_lim = total_s/tf;
 8007850:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007854:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007858:	f7f8 fff8 	bl	800084c <__aeabi_ddiv>
 800785c:	4603      	mov	r3, r0
 800785e:	460c      	mov	r4, r1
 8007860:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 8007864:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8007868:	4b39      	ldr	r3, [pc, #228]	; (8007950 <scaraInitLSPB1+0x308>)
 800786a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800786e:	f7f8 fec3 	bl	80005f8 <__aeabi_dmul>
 8007872:	4603      	mov	r3, r0
 8007874:	460c      	mov	r4, r1
 8007876:	461a      	mov	r2, r3
 8007878:	4623      	mov	r3, r4
 800787a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800787e:	f7f9 f92d 	bl	8000adc <__aeabi_dcmplt>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <scaraInitLSPB1+0x244>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007888:	2309      	movs	r3, #9
 800788a:	e1a1      	b.n	8007bd0 <scaraInitLSPB1+0x588>
			}else if(v_design > 2*v_lim){
 800788c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	f7f8 fcfa 	bl	800028c <__adddf3>
 8007898:	4603      	mov	r3, r0
 800789a:	460c      	mov	r4, r1
 800789c:	461a      	mov	r2, r3
 800789e:	4623      	mov	r3, r4
 80078a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80078a4:	f7f9 f938 	bl	8000b18 <__aeabi_dcmpgt>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <scaraInitLSPB1+0x27a>
				v_design = 2*v_lim;
 80078ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	f7f8 fce9 	bl	800028c <__adddf3>
 80078ba:	4603      	mov	r3, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 80078c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078ca:	f7f8 ffbf 	bl	800084c <__aeabi_ddiv>
 80078ce:	4603      	mov	r3, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	461a      	mov	r2, r3
 80078d4:	4623      	mov	r3, r4
 80078d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80078da:	f7f8 fcd5 	bl	8000288 <__aeabi_dsub>
 80078de:	4603      	mov	r3, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 80078e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80078ee:	f7f8 ffad 	bl	800084c <__aeabi_ddiv>
 80078f2:	4603      	mov	r3, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 80078fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007902:	f7f8 fcc1 	bl	8000288 <__aeabi_dsub>
 8007906:	4603      	mov	r3, r0
 8007908:	460c      	mov	r4, r1
 800790a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800790e:	e0fb      	b.n	8007b08 <scaraInitLSPB1+0x4c0>
 8007910:	14000000 	.word	0x14000000
 8007914:	4000f6f0 	.word	0x4000f6f0
 8007918:	00000000 	.word	0x00000000
 800791c:	405c2000 	.word	0x405c2000
 8007920:	6b259425 	.word	0x6b259425
 8007924:	40069b91 	.word	0x40069b91
 8007928:	9999999a 	.word	0x9999999a
 800792c:	3fb99999 	.word	0x3fb99999
 8007930:	eb1c432d 	.word	0xeb1c432d
 8007934:	3f1a36e2 	.word	0x3f1a36e2
 8007938:	33333333 	.word	0x33333333
 800793c:	3fc33333 	.word	0x3fc33333
 8007940:	40877000 	.word	0x40877000
 8007944:	407f4000 	.word	0x407f4000
 8007948:	401e0000 	.word	0x401e0000
 800794c:	3ff80000 	.word	0x3ff80000
 8007950:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007954:	7ebb      	ldrb	r3, [r7, #26]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80d6 	bne.w	8007b08 <scaraInitLSPB1+0x4c0>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 800795c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007964:	f7f8 fe48 	bl	80005f8 <__aeabi_dmul>
 8007968:	4603      	mov	r3, r0
 800796a:	460c      	mov	r4, r1
 800796c:	4625      	mov	r5, r4
 800796e:	461c      	mov	r4, r3
 8007970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007974:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4620      	mov	r0, r4
 8007982:	4629      	mov	r1, r5
 8007984:	f7f9 f8aa 	bl	8000adc <__aeabi_dcmplt>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8088 	beq.w	8007aa0 <scaraInitLSPB1+0x458>
			if(total_s/v_design < 0.8){ //td too small
 8007990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007994:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007998:	f7f8 ff58 	bl	800084c <__aeabi_ddiv>
 800799c:	4603      	mov	r3, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	4618      	mov	r0, r3
 80079a2:	4621      	mov	r1, r4
 80079a4:	a390      	add	r3, pc, #576	; (adr r3, 8007be8 <scaraInitLSPB1+0x5a0>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f7f9 f897 	bl	8000adc <__aeabi_dcmplt>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <scaraInitLSPB1+0x382>
				//recalculate v_design
				v_design = 0.8*total_s;
 80079b4:	a38c      	add	r3, pc, #560	; (adr r3, 8007be8 <scaraInitLSPB1+0x5a0>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079be:	f7f8 fe1b 	bl	80005f8 <__aeabi_dmul>
 80079c2:	4603      	mov	r3, r0
 80079c4:	460c      	mov	r4, r1
 80079c6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 80079ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079d2:	f7f8 ff3b 	bl	800084c <__aeabi_ddiv>
 80079d6:	4603      	mov	r3, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	4618      	mov	r0, r3
 80079dc:	4621      	mov	r1, r4
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	4b7f      	ldr	r3, [pc, #508]	; (8007be0 <scaraInitLSPB1+0x598>)
 80079e4:	f7f9 f87a 	bl	8000adc <__aeabi_dcmplt>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <scaraInitLSPB1+0x3bc>
				//recalculate a_design
				a_design = v_design/0.5;
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	4b7b      	ldr	r3, [pc, #492]	; (8007be0 <scaraInitLSPB1+0x598>)
 80079f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079f8:	f7f8 ff28 	bl	800084c <__aeabi_ddiv>
 80079fc:	4603      	mov	r3, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8007a04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a08:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a0c:	f7f8 ff1e 	bl	800084c <__aeabi_ddiv>
 8007a10:	4603      	mov	r3, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a20:	f7f8 ff14 	bl	800084c <__aeabi_ddiv>
 8007a24:	4603      	mov	r3, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 8007a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a34:	f7f8 fc2a 	bl	800028c <__adddf3>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 8007a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a44:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a48:	f7f8 ff00 	bl	800084c <__aeabi_ddiv>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	4618      	mov	r0, r3
 8007a52:	4621      	mov	r1, r4
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	4b62      	ldr	r3, [pc, #392]	; (8007be4 <scaraInitLSPB1+0x59c>)
 8007a5a:	f7f9 f83f 	bl	8000adc <__aeabi_dcmplt>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d051      	beq.n	8007b08 <scaraInitLSPB1+0x4c0>
				//recalculate a_design
				a_design = v_design;
 8007a64:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007a68:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				ta = 1;
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	4c5c      	ldr	r4, [pc, #368]	; (8007be4 <scaraInitLSPB1+0x59c>)
 8007a72:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				td = total_s/v_design;
 8007a76:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a7e:	f7f8 fee5 	bl	800084c <__aeabi_ddiv>
 8007a82:	4603      	mov	r3, r0
 8007a84:	460c      	mov	r4, r1
 8007a86:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				tf = ta + td;
 8007a8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a92:	f7f8 fbfb 	bl	800028c <__adddf3>
 8007a96:	4603      	mov	r3, r0
 8007a98:	460c      	mov	r4, r1
 8007a9a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007a9e:	e033      	b.n	8007b08 <scaraInitLSPB1+0x4c0>
			}

		}else{
			tf = 2*total_s/v_design;
 8007aa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	f7f8 fbf0 	bl	800028c <__adddf3>
 8007aac:	4603      	mov	r3, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ab8:	f7f8 fec8 	bl	800084c <__aeabi_ddiv>
 8007abc:	4603      	mov	r3, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007acc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007ad0:	f7f8 febc 	bl	800084c <__aeabi_ddiv>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ae4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007ae8:	f7f8 feb0 	bl	800084c <__aeabi_ddiv>
 8007aec:	4603      	mov	r3, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8007af4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007af8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007afc:	f7f8 fea6 	bl	800084c <__aeabi_ddiv>
 8007b00:	4603      	mov	r3, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007b08:	a333      	add	r3, pc, #204	; (adr r3, 8007bd8 <scaraInitLSPB1+0x590>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007b12:	f7f8 fe9b 	bl	800084c <__aeabi_ddiv>
 8007b16:	4603      	mov	r3, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	f7f9 f863 	bl	8000be8 <__aeabi_d2f>
 8007b22:	4603      	mov	r3, r0
 8007b24:	ee00 3a10 	vmov	s0, r3
 8007b28:	f012 f8ee 	bl	8019d08 <ceilf>
 8007b2c:	eef0 7a40 	vmov.f32	s15, s0
 8007b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b34:	ee17 3a90 	vmov	r3, s15
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	f04f 0400 	mov.w	r4, #0
 8007b44:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007b4e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007b58:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007b5c:	69fa      	ldr	r2, [r7, #28]
 8007b5e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007b62:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007b6c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007b76:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007b80:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007b8a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	f04f 0400 	mov.w	r4, #0
 8007ba6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bae:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	f7f8 fb62 	bl	8000288 <__aeabi_dsub>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	69fa      	ldr	r2, [r7, #28]
 8007bca:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3758      	adds	r7, #88	; 0x58
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8007bd8:	40000000 	.word	0x40000000
 8007bdc:	3f847ae1 	.word	0x3f847ae1
 8007be0:	3fe00000 	.word	0x3fe00000
 8007be4:	3ff00000 	.word	0x3ff00000
 8007be8:	9999999a 	.word	0x9999999a
 8007bec:	3fe99999 	.word	0x3fe99999

08007bf0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	b0ad      	sub	sp, #180	; 0xb4
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	ed87 0b08 	vstr	d0, [r7, #32]
 8007c00:	ed87 1b06 	vstr	d1, [r7, #24]
 8007c04:	ed87 2b04 	vstr	d2, [r7, #16]
 8007c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8007c12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d118      	bne.n	8007c4c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8007c1a:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c26:	f7f8 fce7 	bl	80005f8 <__aeabi_dmul>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8007c32:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c3e:	f7f8 fcdb 	bl	80005f8 <__aeabi_dmul>
 8007c42:	4603      	mov	r3, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007c4a:	e092      	b.n	8007d72 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8007c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c50:	2b05      	cmp	r3, #5
 8007c52:	d118      	bne.n	8007c86 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007c54:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c60:	f7f8 fcca 	bl	80005f8 <__aeabi_dmul>
 8007c64:	4603      	mov	r3, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8007c6c:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c78:	f7f8 fcbe 	bl	80005f8 <__aeabi_dmul>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007c84:	e075      	b.n	8007d72 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8007c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d118      	bne.n	8007cc0 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8007c8e:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c9a:	f7f8 fcad 	bl	80005f8 <__aeabi_dmul>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8007ca6:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	460c      	mov	r4, r1
 8007cba:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007cbe:	e058      	b.n	8007d72 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8007cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d118      	bne.n	8007cfa <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8007cc8:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cd4:	f7f8 fc90 	bl	80005f8 <__aeabi_dmul>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8007ce0:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cec:	f7f8 fc84 	bl	80005f8 <__aeabi_dmul>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007cf8:	e03b      	b.n	8007d72 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8007cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d118      	bne.n	8007d34 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8007d02:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d0e:	f7f8 fc73 	bl	80005f8 <__aeabi_dmul>
 8007d12:	4603      	mov	r3, r0
 8007d14:	460c      	mov	r4, r1
 8007d16:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8007d1a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d26:	f7f8 fc67 	bl	80005f8 <__aeabi_dmul>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007d32:	e01e      	b.n	8007d72 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8007d34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d118      	bne.n	8007d6e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8007d3c:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d48:	f7f8 fc56 	bl	80005f8 <__aeabi_dmul>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8007d54:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d60:	f7f8 fc4a 	bl	80005f8 <__aeabi_dmul>
 8007d64:	4603      	mov	r3, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007d6c:	e001      	b.n	8007d72 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007d6e:	2306      	movs	r3, #6
 8007d70:	e2fa      	b.n	8008368 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	f04f 0400 	mov.w	r4, #0
 8007d7a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 8007d7e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007d82:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 8007d86:	f04f 0300 	mov.w	r3, #0
 8007d8a:	f04f 0400 	mov.w	r4, #0
 8007d8e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 8007d92:	f04f 0300 	mov.w	r3, #0
 8007d96:	f04f 0400 	mov.w	r4, #0
 8007d9a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8007d9e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007da2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007da6:	f7f8 fea3 	bl	8000af0 <__aeabi_dcmple>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007db6:	e00c      	b.n	8007dd2 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8007db8:	23ff      	movs	r3, #255	; 0xff
 8007dba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8007dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007dd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	f040 809e 	bne.w	8007f18 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007de2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007de6:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007df2:	f7f8 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8081 	beq.w	8007f00 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 8007dfe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007e02:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007e06:	f7f8 fa3f 	bl	8000288 <__aeabi_dsub>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	4618      	mov	r0, r3
 8007e10:	4621      	mov	r1, r4
 8007e12:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007e16:	f7f8 fd19 	bl	800084c <__aeabi_ddiv>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8007e22:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007e26:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007e2a:	f7f8 fa2d 	bl	8000288 <__aeabi_dsub>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	460c      	mov	r4, r1
 8007e32:	4618      	mov	r0, r3
 8007e34:	4621      	mov	r1, r4
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	f7f8 fa27 	bl	800028c <__adddf3>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	4618      	mov	r0, r3
 8007e44:	4621      	mov	r1, r4
 8007e46:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007e4a:	f7f8 fcff 	bl	800084c <__aeabi_ddiv>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8007e56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e5a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007e5e:	f7f8 fe3d 	bl	8000adc <__aeabi_dcmplt>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8007e68:	2309      	movs	r3, #9
 8007e6a:	e27d      	b.n	8008368 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 8007e6c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007e70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e74:	f7f8 fe3c 	bl	8000af0 <__aeabi_dcmple>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 8007e7e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007e82:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8007e86:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007e92:	f7f8 fe41 	bl	8000b18 <__aeabi_dcmpgt>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01a      	beq.n	8007ed2 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8007e9c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007ea0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007ea4:	f7f8 f9f0 	bl	8000288 <__aeabi_dsub>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4618      	mov	r0, r3
 8007eae:	4621      	mov	r1, r4
 8007eb0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007eb4:	f7f8 fcca 	bl	800084c <__aeabi_ddiv>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007ec4:	f7f8 f9e0 	bl	8000288 <__aeabi_dsub>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8007ed0:	e00b      	b.n	8007eea <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007eda:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007ede:	f7f8 fcb5 	bl	800084c <__aeabi_ddiv>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8007eea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007eee:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007ef2:	f7f8 fcab 	bl	800084c <__aeabi_ddiv>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8007efe:	e00b      	b.n	8007f18 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	f04f 0400 	mov.w	r4, #0
 8007f08:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	f04f 0400 	mov.w	r4, #0
 8007f14:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007f18:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007f24:	f7f8 fdf8 	bl	8000b18 <__aeabi_dcmpgt>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 819c 	beq.w	8008268 <scaraInitLSPB+0x678>
 8007f30:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007f3c:	f7f8 fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 8190 	beq.w	8008268 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007f48:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007f4c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007f50:	f7f8 f99a 	bl	8000288 <__aeabi_dsub>
 8007f54:	4603      	mov	r3, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	461d      	mov	r5, r3
 8007f5a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8007f5e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007f62:	4628      	mov	r0, r5
 8007f64:	4631      	mov	r1, r6
 8007f66:	f7f8 fb47 	bl	80005f8 <__aeabi_dmul>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8007f72:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007f76:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007f7a:	f7f8 fb3d 	bl	80005f8 <__aeabi_dmul>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	e9c7 3400 	strd	r3, r4, [r7]
 8007f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f8e:	f7f8 fb33 	bl	80005f8 <__aeabi_dmul>
 8007f92:	4603      	mov	r3, r0
 8007f94:	460c      	mov	r4, r1
 8007f96:	461d      	mov	r5, r3
 8007f98:	4626      	mov	r6, r4
 8007f9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fa2:	f7f8 fb29 	bl	80005f8 <__aeabi_dmul>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	460c      	mov	r4, r1
 8007faa:	461a      	mov	r2, r3
 8007fac:	4623      	mov	r3, r4
 8007fae:	4628      	mov	r0, r5
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	f7f8 f96b 	bl	800028c <__adddf3>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	4618      	mov	r0, r3
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc6:	f7f8 fc41 	bl	800084c <__aeabi_ddiv>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd6:	f7f8 f957 	bl	8000288 <__aeabi_dsub>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	460c      	mov	r4, r1
 8007fde:	461a      	mov	r2, r3
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fe6:	f7f8 fd83 	bl	8000af0 <__aeabi_dcmple>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d075      	beq.n	80080dc <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8007ff0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007ff4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007ff8:	f7f8 f946 	bl	8000288 <__aeabi_dsub>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	469a      	mov	sl, r3
 8008002:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8008006:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800800a:	4650      	mov	r0, sl
 800800c:	4659      	mov	r1, fp
 800800e:	f7f8 faf3 	bl	80005f8 <__aeabi_dmul>
 8008012:	4603      	mov	r3, r0
 8008014:	460c      	mov	r4, r1
 8008016:	4625      	mov	r5, r4
 8008018:	461c      	mov	r4, r3
 800801a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800801e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008022:	f7f8 fae9 	bl	80005f8 <__aeabi_dmul>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4690      	mov	r8, r2
 800802c:	4699      	mov	r9, r3
 800802e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008032:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008036:	f7f8 fadf 	bl	80005f8 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4640      	mov	r0, r8
 8008040:	4649      	mov	r1, r9
 8008042:	f7f8 f923 	bl	800028c <__adddf3>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008056:	f7f8 fbf9 	bl	800084c <__aeabi_ddiv>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 f913 	bl	800028c <__adddf3>
 8008066:	4603      	mov	r3, r0
 8008068:	460c      	mov	r4, r1
 800806a:	ec44 3b17 	vmov	d7, r3, r4
 800806e:	eeb0 0a47 	vmov.f32	s0, s14
 8008072:	eef0 0a67 	vmov.f32	s1, s15
 8008076:	f011 fe89 	bl	8019d8c <sqrt>
 800807a:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800807e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008082:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008086:	f7f8 f8ff 	bl	8000288 <__aeabi_dsub>
 800808a:	4603      	mov	r3, r0
 800808c:	460c      	mov	r4, r1
 800808e:	4618      	mov	r0, r3
 8008090:	4621      	mov	r1, r4
 8008092:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008096:	f7f8 fbd9 	bl	800084c <__aeabi_ddiv>
 800809a:	4603      	mov	r3, r0
 800809c:	460c      	mov	r4, r1
 800809e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80080a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080a6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080aa:	f7f8 f8ed 	bl	8000288 <__aeabi_dsub>
 80080ae:	4603      	mov	r3, r0
 80080b0:	460c      	mov	r4, r1
 80080b2:	4618      	mov	r0, r3
 80080b4:	4621      	mov	r1, r4
 80080b6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80080ba:	f7f8 fbc7 	bl	800084c <__aeabi_ddiv>
 80080be:	4603      	mov	r3, r0
 80080c0:	460c      	mov	r4, r1
 80080c2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 80080c6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80080ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80080ce:	f7f8 f8dd 	bl	800028c <__adddf3>
 80080d2:	4603      	mov	r3, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80080da:	e0e3      	b.n	80082a4 <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 80080dc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80080e0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80080e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080ec:	f7f8 f8cc 	bl	8000288 <__aeabi_dsub>
 80080f0:	4603      	mov	r3, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	4618      	mov	r0, r3
 80080f6:	4621      	mov	r1, r4
 80080f8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80080fc:	f7f8 fba6 	bl	800084c <__aeabi_ddiv>
 8008100:	4603      	mov	r3, r0
 8008102:	460c      	mov	r4, r1
 8008104:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8008108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800810c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008110:	f7f8 f8ba 	bl	8000288 <__aeabi_dsub>
 8008114:	4603      	mov	r3, r0
 8008116:	460c      	mov	r4, r1
 8008118:	4618      	mov	r0, r3
 800811a:	4621      	mov	r1, r4
 800811c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008120:	f7f8 fb94 	bl	800084c <__aeabi_ddiv>
 8008124:	4603      	mov	r3, r0
 8008126:	460c      	mov	r4, r1
 8008128:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800812c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008130:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008134:	f7f8 f8a8 	bl	8000288 <__aeabi_dsub>
 8008138:	4603      	mov	r3, r0
 800813a:	460c      	mov	r4, r1
 800813c:	4698      	mov	r8, r3
 800813e:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8008142:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008146:	4640      	mov	r0, r8
 8008148:	4649      	mov	r1, r9
 800814a:	f7f8 fb7f 	bl	800084c <__aeabi_ddiv>
 800814e:	4603      	mov	r3, r0
 8008150:	460c      	mov	r4, r1
 8008152:	4625      	mov	r5, r4
 8008154:	461c      	mov	r4, r3
 8008156:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	f7f8 f895 	bl	800028c <__adddf3>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800816a:	f7f8 fb6f 	bl	800084c <__aeabi_ddiv>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4690      	mov	r8, r2
 8008174:	4699      	mov	r9, r3
 8008176:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800817a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800817e:	f7f8 fb65 	bl	800084c <__aeabi_ddiv>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	f04f 0000 	mov.w	r0, #0
 800818a:	497d      	ldr	r1, [pc, #500]	; (8008380 <scaraInitLSPB+0x790>)
 800818c:	f7f8 f87c 	bl	8000288 <__aeabi_dsub>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 fa2e 	bl	80005f8 <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4690      	mov	r8, r2
 80081a2:	4699      	mov	r9, r3
 80081a4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80081a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081ac:	f7f8 fb4e 	bl	800084c <__aeabi_ddiv>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	f04f 0000 	mov.w	r0, #0
 80081b8:	4971      	ldr	r1, [pc, #452]	; (8008380 <scaraInitLSPB+0x790>)
 80081ba:	f7f8 f865 	bl	8000288 <__aeabi_dsub>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4640      	mov	r0, r8
 80081c4:	4649      	mov	r1, r9
 80081c6:	f7f8 fa17 	bl	80005f8 <__aeabi_dmul>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4620      	mov	r0, r4
 80081d0:	4629      	mov	r1, r5
 80081d2:	f7f8 f85b 	bl	800028c <__adddf3>
 80081d6:	4603      	mov	r3, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	4625      	mov	r5, r4
 80081dc:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80081de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	f7f8 f851 	bl	800028c <__adddf3>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80081f2:	f7f8 fb2b 	bl	800084c <__aeabi_ddiv>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4690      	mov	r8, r2
 80081fc:	4699      	mov	r9, r3
 80081fe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008202:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008206:	f7f8 fb21 	bl	800084c <__aeabi_ddiv>
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	f04f 0000 	mov.w	r0, #0
 8008212:	495b      	ldr	r1, [pc, #364]	; (8008380 <scaraInitLSPB+0x790>)
 8008214:	f7f8 f838 	bl	8000288 <__aeabi_dsub>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4640      	mov	r0, r8
 800821e:	4649      	mov	r1, r9
 8008220:	f7f8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4690      	mov	r8, r2
 800822a:	4699      	mov	r9, r3
 800822c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008230:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008234:	f7f8 fb0a 	bl	800084c <__aeabi_ddiv>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	f04f 0000 	mov.w	r0, #0
 8008240:	494f      	ldr	r1, [pc, #316]	; (8008380 <scaraInitLSPB+0x790>)
 8008242:	f7f8 f821 	bl	8000288 <__aeabi_dsub>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4640      	mov	r0, r8
 800824c:	4649      	mov	r1, r9
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	f7f8 f817 	bl	800028c <__adddf3>
 800825e:	4603      	mov	r3, r0
 8008260:	460c      	mov	r4, r1
 8008262:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8008266:	e01d      	b.n	80082a4 <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	f04f 0400 	mov.w	r4, #0
 8008270:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800827c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008280:	f7f8 fae4 	bl	800084c <__aeabi_ddiv>
 8008284:	4603      	mov	r3, r0
 8008286:	460c      	mov	r4, r1
 8008288:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008294:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008298:	f7f8 fad8 	bl	800084c <__aeabi_ddiv>
 800829c:	4603      	mov	r3, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80082a4:	a334      	add	r3, pc, #208	; (adr r3, 8008378 <scaraInitLSPB+0x788>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80082ae:	f7f8 facd 	bl	800084c <__aeabi_ddiv>
 80082b2:	4603      	mov	r3, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	4618      	mov	r0, r3
 80082b8:	4621      	mov	r1, r4
 80082ba:	f7f8 fc95 	bl	8000be8 <__aeabi_d2f>
 80082be:	4603      	mov	r3, r0
 80082c0:	ee00 3a10 	vmov	s0, r3
 80082c4:	f011 fd20 	bl	8019d08 <ceilf>
 80082c8:	eef0 7a40 	vmov.f32	s15, s0
 80082cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d0:	ee17 3a90 	vmov	r3, s15
 80082d4:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80082dc:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80082de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80082e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 80082e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ea:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80082ee:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 80082f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80082f8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 80082fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082fe:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8008302:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8008306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008308:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800830c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8008310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008312:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8008316:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 800831a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800831c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008320:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8008324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008326:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800832a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 800832e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008330:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008334:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8008338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800833a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800833e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008346:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008354:	461a      	mov	r2, r3
 8008356:	4623      	mov	r3, r4
 8008358:	f7f7 ff96 	bl	8000288 <__aeabi_dsub>
 800835c:	4603      	mov	r3, r0
 800835e:	460c      	mov	r4, r1
 8008360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008362:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	37b4      	adds	r7, #180	; 0xb4
 800836c:	46bd      	mov	sp, r7
 800836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008372:	bf00      	nop
 8008374:	f3af 8000 	nop.w
 8008378:	40000000 	.word	0x40000000
 800837c:	3f847ae1 	.word	0x3f847ae1
 8008380:	3ff00000 	.word	0x3ff00000
 8008384:	00000000 	.word	0x00000000
 8008388:	405c2000 	.word	0x405c2000
 800838c:	14000000 	.word	0x14000000
 8008390:	4000f6f0 	.word	0x4000f6f0
 8008394:	6b259425 	.word	0x6b259425
 8008398:	40069b91 	.word	0x40069b91
 800839c:	d2f1a9fc 	.word	0xd2f1a9fc
 80083a0:	3f50624d 	.word	0x3f50624d
 80083a4:	9abcaf48 	.word	0x9abcaf48
 80083a8:	3e7ad7f2 	.word	0x3e7ad7f2
 80083ac:	00000000 	.word	0x00000000

080083b0 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80083b0:	b5b0      	push	{r4, r5, r7, lr}
 80083b2:	b0ba      	sub	sp, #232	; 0xe8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	61f8      	str	r0, [r7, #28]
 80083b8:	460b      	mov	r3, r1
 80083ba:	ed87 0b04 	vstr	d0, [r7, #16]
 80083be:	ed87 1b02 	vstr	d1, [r7, #8]
 80083c2:	ed87 2b00 	vstr	d2, [r7]
 80083c6:	76fb      	strb	r3, [r7, #27]
 80083c8:	4613      	mov	r3, r2
 80083ca:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 80083cc:	7efb      	ldrb	r3, [r7, #27]
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d118      	bne.n	8008404 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 80083d2:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083de:	f7f8 f90b 	bl	80005f8 <__aeabi_dmul>
 80083e2:	4603      	mov	r3, r0
 80083e4:	460c      	mov	r4, r1
 80083e6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 80083ea:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f6:	f7f8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008402:	e083      	b.n	800850c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8008404:	7efb      	ldrb	r3, [r7, #27]
 8008406:	2b05      	cmp	r3, #5
 8008408:	d116      	bne.n	8008438 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 800840a:	a3fc      	add	r3, pc, #1008	; (adr r3, 80087fc <scaraInitScurve+0x44c>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008414:	f7f8 f8f0 	bl	80005f8 <__aeabi_dmul>
 8008418:	4603      	mov	r3, r0
 800841a:	460c      	mov	r4, r1
 800841c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8008420:	a3f6      	add	r3, pc, #984	; (adr r3, 80087fc <scaraInitScurve+0x44c>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800842a:	f7f8 f8e5 	bl	80005f8 <__aeabi_dmul>
 800842e:	4603      	mov	r3, r0
 8008430:	460c      	mov	r4, r1
 8008432:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008436:	e069      	b.n	800850c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8008438:	7efb      	ldrb	r3, [r7, #27]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d116      	bne.n	800846c <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 800843e:	a3ef      	add	r3, pc, #956	; (adr r3, 80087fc <scaraInitScurve+0x44c>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008448:	f7f8 f8d6 	bl	80005f8 <__aeabi_dmul>
 800844c:	4603      	mov	r3, r0
 800844e:	460c      	mov	r4, r1
 8008450:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8008454:	a3e9      	add	r3, pc, #932	; (adr r3, 80087fc <scaraInitScurve+0x44c>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800845e:	f7f8 f8cb 	bl	80005f8 <__aeabi_dmul>
 8008462:	4603      	mov	r3, r0
 8008464:	460c      	mov	r4, r1
 8008466:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800846a:	e04f      	b.n	800850c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 800846c:	7efb      	ldrb	r3, [r7, #27]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d116      	bne.n	80084a0 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8008472:	a3e2      	add	r3, pc, #904	; (adr r3, 80087fc <scaraInitScurve+0x44c>)
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800847c:	f7f8 f8bc 	bl	80005f8 <__aeabi_dmul>
 8008480:	4603      	mov	r3, r0
 8008482:	460c      	mov	r4, r1
 8008484:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8008488:	a3dc      	add	r3, pc, #880	; (adr r3, 80087fc <scaraInitScurve+0x44c>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008492:	f7f8 f8b1 	bl	80005f8 <__aeabi_dmul>
 8008496:	4603      	mov	r3, r0
 8008498:	460c      	mov	r4, r1
 800849a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800849e:	e035      	b.n	800850c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 80084a0:	7efb      	ldrb	r3, [r7, #27]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d116      	bne.n	80084d4 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 80084a6:	a3d3      	add	r3, pc, #844	; (adr r3, 80087f4 <scaraInitScurve+0x444>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084b0:	f7f8 f8a2 	bl	80005f8 <__aeabi_dmul>
 80084b4:	4603      	mov	r3, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 80084bc:	a3cd      	add	r3, pc, #820	; (adr r3, 80087f4 <scaraInitScurve+0x444>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084c6:	f7f8 f897 	bl	80005f8 <__aeabi_dmul>
 80084ca:	4603      	mov	r3, r0
 80084cc:	460c      	mov	r4, r1
 80084ce:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80084d2:	e01b      	b.n	800850c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 80084d4:	7efb      	ldrb	r3, [r7, #27]
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d116      	bne.n	8008508 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 80084da:	a3ca      	add	r3, pc, #808	; (adr r3, 8008804 <scaraInitScurve+0x454>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084e4:	f7f8 f888 	bl	80005f8 <__aeabi_dmul>
 80084e8:	4603      	mov	r3, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 80084f0:	a3c4      	add	r3, pc, #784	; (adr r3, 8008804 <scaraInitScurve+0x454>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	4603      	mov	r3, r0
 8008500:	460c      	mov	r4, r1
 8008502:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008506:	e001      	b.n	800850c <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8008508:	2306      	movs	r3, #6
 800850a:	e2c8      	b.n	8008a9e <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	f04f 0400 	mov.w	r4, #0
 8008514:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	f04f 0400 	mov.w	r4, #0
 800852c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8008530:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008534:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	f04f 0300 	mov.w	r3, #0
 8008540:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008544:	f7f8 faca 	bl	8000adc <__aeabi_dcmplt>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d015      	beq.n	800857a <scaraInitScurve+0x1ca>
		 dir = -1;
 800854e:	f04f 0300 	mov.w	r3, #0
 8008552:	4ca5      	ldr	r4, [pc, #660]	; (80087e8 <scaraInitScurve+0x438>)
 8008554:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8008558:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800855c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008564:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	e004      	b.n	8008584 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	4c9b      	ldr	r4, [pc, #620]	; (80087ec <scaraInitScurve+0x43c>)
 8008580:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8008584:	7ebb      	ldrb	r3, [r7, #26]
 8008586:	2b01      	cmp	r3, #1
 8008588:	f040 8082 	bne.w	8008690 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008592:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8008596:	a390      	add	r3, pc, #576	; (adr r3, 80087d8 <scaraInitScurve+0x428>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80085a0:	f7f8 faba 	bl	8000b18 <__aeabi_dcmpgt>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d066      	beq.n	8008678 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	4b90      	ldr	r3, [pc, #576]	; (80087f0 <scaraInitScurve+0x440>)
 80085b0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80085b4:	f7f8 f94a 	bl	800084c <__aeabi_ddiv>
 80085b8:	4603      	mov	r3, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 80085c0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	f7f7 fe60 	bl	800028c <__adddf3>
 80085cc:	4603      	mov	r3, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	461a      	mov	r2, r3
 80085d2:	4623      	mov	r3, r4
 80085d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085d8:	f7f8 f938 	bl	800084c <__aeabi_ddiv>
 80085dc:	4603      	mov	r3, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 80085e4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80085e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80085ec:	f7f8 fa94 	bl	8000b18 <__aeabi_dcmpgt>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d022      	beq.n	800863c <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008602:	f7f8 f923 	bl	800084c <__aeabi_ddiv>
 8008606:	4603      	mov	r3, r0
 8008608:	460c      	mov	r4, r1
 800860a:	4625      	mov	r5, r4
 800860c:	461c      	mov	r4, r3
 800860e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	f7f7 fe39 	bl	800028c <__adddf3>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008622:	f7f8 f913 	bl	800084c <__aeabi_ddiv>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4620      	mov	r0, r4
 800862c:	4629      	mov	r1, r5
 800862e:	f7f7 fe2b 	bl	8000288 <__aeabi_dsub>
 8008632:	4603      	mov	r3, r0
 8008634:	460c      	mov	r4, r1
 8008636:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 800863a:	e003      	b.n	8008644 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 800863c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8008640:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8008644:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800864c:	f7f8 f8fe 	bl	800084c <__aeabi_ddiv>
 8008650:	4603      	mov	r3, r0
 8008652:	460c      	mov	r4, r1
 8008654:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8008658:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800865c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008660:	f7f8 fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 800866a:	230a      	movs	r3, #10
 800866c:	e217      	b.n	8008a9e <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 800866e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8008672:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008676:	e00b      	b.n	8008690 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	f04f 0400 	mov.w	r4, #0
 8008680:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	f04f 0400 	mov.w	r4, #0
 800868c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8008690:	a353      	add	r3, pc, #332	; (adr r3, 80087e0 <scaraInitScurve+0x430>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800869a:	f7f8 fa3d 	bl	8000b18 <__aeabi_dcmpgt>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80b3 	beq.w	800880c <scaraInitScurve+0x45c>
 80086a6:	a34e      	add	r3, pc, #312	; (adr r3, 80087e0 <scaraInitScurve+0x430>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80086b0:	f7f8 fa32 	bl	8000b18 <__aeabi_dcmpgt>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 80a8 	beq.w	800880c <scaraInitScurve+0x45c>
		 no_phases = 5;
 80086bc:	2305      	movs	r3, #5
 80086be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 80086c2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80086c6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80086ca:	f7f8 f8bf 	bl	800084c <__aeabi_ddiv>
 80086ce:	4603      	mov	r3, r0
 80086d0:	460c      	mov	r4, r1
 80086d2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 80086d6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80086da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086de:	f7f8 f8b5 	bl	800084c <__aeabi_ddiv>
 80086e2:	4603      	mov	r3, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	4625      	mov	r5, r4
 80086e8:	461c      	mov	r4, r3
 80086ea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	f7f7 fdcb 	bl	800028c <__adddf3>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4620      	mov	r0, r4
 80086fc:	4629      	mov	r1, r5
 80086fe:	f7f7 fdc3 	bl	8000288 <__aeabi_dsub>
 8008702:	4603      	mov	r3, r0
 8008704:	460c      	mov	r4, r1
 8008706:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008716:	f7f8 f9e1 	bl	8000adc <__aeabi_dcmplt>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d022      	beq.n	8008766 <scaraInitScurve+0x3b6>
			 tc = 0;
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	f04f 0400 	mov.w	r4, #0
 8008728:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 800872c:	2304      	movs	r3, #4
 800872e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8008732:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	f7f7 fda7 	bl	800028c <__adddf3>
 800873e:	4603      	mov	r3, r0
 8008740:	460c      	mov	r4, r1
 8008742:	461a      	mov	r2, r3
 8008744:	4623      	mov	r3, r4
 8008746:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800874a:	f7f8 f87f 	bl	800084c <__aeabi_ddiv>
 800874e:	4603      	mov	r3, r0
 8008750:	460c      	mov	r4, r1
 8008752:	ec44 3b17 	vmov	d7, r3, r4
 8008756:	eeb0 0a47 	vmov.f32	s0, s14
 800875a:	eef0 0a67 	vmov.f32	s1, s15
 800875e:	f011 fb15 	bl	8019d8c <sqrt>
 8008762:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8008766:	a31c      	add	r3, pc, #112	; (adr r3, 80087d8 <scaraInitScurve+0x428>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008770:	f7f8 f9b4 	bl	8000adc <__aeabi_dcmplt>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <scaraInitScurve+0x3d8>
			 j_max = 0;
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	f04f 0400 	mov.w	r4, #0
 8008782:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8008786:	e009      	b.n	800879c <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8008788:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800878c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008790:	f7f8 f85c 	bl	800084c <__aeabi_ddiv>
 8008794:	4603      	mov	r3, r0
 8008796:	460c      	mov	r4, r1
 8008798:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 800879c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80087a0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80087a4:	f7f7 ff28 	bl	80005f8 <__aeabi_dmul>
 80087a8:	4603      	mov	r3, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <scaraInitScurve+0x440>)
 80087b6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80087ba:	f7f7 ff1d 	bl	80005f8 <__aeabi_dmul>
 80087be:	4603      	mov	r3, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	461a      	mov	r2, r3
 80087c4:	4623      	mov	r3, r4
 80087c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087ca:	f7f7 fd5f 	bl	800028c <__adddf3>
 80087ce:	4603      	mov	r3, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80087d6:	e039      	b.n	800884c <scaraInitScurve+0x49c>
 80087d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80087dc:	3f50624d 	.word	0x3f50624d
 80087e0:	9abcaf48 	.word	0x9abcaf48
 80087e4:	3e7ad7f2 	.word	0x3e7ad7f2
 80087e8:	bff00000 	.word	0xbff00000
 80087ec:	3ff00000 	.word	0x3ff00000
 80087f0:	40100000 	.word	0x40100000
 80087f4:	00000000 	.word	0x00000000
 80087f8:	405c2000 	.word	0x405c2000
 80087fc:	14000000 	.word	0x14000000
 8008800:	4000f6f0 	.word	0x4000f6f0
 8008804:	6b259425 	.word	0x6b259425
 8008808:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 800880c:	f04f 0300 	mov.w	r3, #0
 8008810:	f04f 0400 	mov.w	r4, #0
 8008814:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	f04f 0400 	mov.w	r4, #0
 8008820:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8008824:	2304      	movs	r3, #4
 8008826:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	4ba0      	ldr	r3, [pc, #640]	; (8008ab0 <scaraInitScurve+0x700>)
 8008830:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008834:	f7f8 f80a 	bl	800084c <__aeabi_ddiv>
 8008838:	4603      	mov	r3, r0
 800883a:	460c      	mov	r4, r1
 800883c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	f04f 0400 	mov.w	r4, #0
 8008848:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 800884c:	a396      	add	r3, pc, #600	; (adr r3, 8008aa8 <scaraInitScurve+0x6f8>)
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008856:	f7f7 fff9 	bl	800084c <__aeabi_ddiv>
 800885a:	4603      	mov	r3, r0
 800885c:	460c      	mov	r4, r1
 800885e:	ec44 3b17 	vmov	d7, r3, r4
 8008862:	eeb0 0a47 	vmov.f32	s0, s14
 8008866:	eef0 0a67 	vmov.f32	s1, s15
 800886a:	f011 f8f5 	bl	8019a58 <ceil>
 800886e:	ec54 3b10 	vmov	r3, r4, d0
 8008872:	4618      	mov	r0, r3
 8008874:	4621      	mov	r1, r4
 8008876:	f7f8 f997 	bl	8000ba8 <__aeabi_d2uiz>
 800887a:	4603      	mov	r3, r0
 800887c:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	4b8c      	ldr	r3, [pc, #560]	; (8008ab4 <scaraInitScurve+0x704>)
 8008884:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008888:	f7f7 feb6 	bl	80005f8 <__aeabi_dmul>
 800888c:	4603      	mov	r3, r0
 800888e:	460c      	mov	r4, r1
 8008890:	4618      	mov	r0, r3
 8008892:	4621      	mov	r1, r4
 8008894:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008898:	f7f7 feae 	bl	80005f8 <__aeabi_dmul>
 800889c:	4603      	mov	r3, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	461a      	mov	r2, r3
 80088a2:	4623      	mov	r3, r4
 80088a4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80088a8:	f7f7 fea6 	bl	80005f8 <__aeabi_dmul>
 80088ac:	4603      	mov	r3, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 80088b4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80088b8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80088bc:	f7f7 fe9c 	bl	80005f8 <__aeabi_dmul>
 80088c0:	4603      	mov	r3, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	4618      	mov	r0, r3
 80088c6:	4621      	mov	r1, r4
 80088c8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80088cc:	f7f7 fe94 	bl	80005f8 <__aeabi_dmul>
 80088d0:	4603      	mov	r3, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	4618      	mov	r0, r3
 80088d6:	4621      	mov	r1, r4
 80088d8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80088dc:	f7f7 fe8c 	bl	80005f8 <__aeabi_dmul>
 80088e0:	4603      	mov	r3, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	4618      	mov	r0, r3
 80088e6:	4621      	mov	r1, r4
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	4b72      	ldr	r3, [pc, #456]	; (8008ab8 <scaraInitScurve+0x708>)
 80088ee:	f7f7 ffad 	bl	800084c <__aeabi_ddiv>
 80088f2:	4603      	mov	r3, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 80088fa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80088fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008902:	f7f7 fe79 	bl	80005f8 <__aeabi_dmul>
 8008906:	4603      	mov	r3, r0
 8008908:	460c      	mov	r4, r1
 800890a:	461a      	mov	r2, r3
 800890c:	4623      	mov	r3, r4
 800890e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008912:	f7f7 fe71 	bl	80005f8 <__aeabi_dmul>
 8008916:	4603      	mov	r3, r0
 8008918:	460c      	mov	r4, r1
 800891a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 800891e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008922:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008926:	f7f7 fe67 	bl	80005f8 <__aeabi_dmul>
 800892a:	4603      	mov	r3, r0
 800892c:	460c      	mov	r4, r1
 800892e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8008932:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008936:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 800893a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800893e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008942:	f7f7 fe59 	bl	80005f8 <__aeabi_dmul>
 8008946:	4603      	mov	r3, r0
 8008948:	460c      	mov	r4, r1
 800894a:	461a      	mov	r2, r3
 800894c:	4623      	mov	r3, r4
 800894e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4603      	mov	r3, r0
 8008958:	460c      	mov	r4, r1
 800895a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 800895e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008962:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8008966:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800896a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800896e:	f7f7 fc8d 	bl	800028c <__adddf3>
 8008972:	4603      	mov	r3, r0
 8008974:	460c      	mov	r4, r1
 8008976:	4618      	mov	r0, r3
 8008978:	4621      	mov	r1, r4
 800897a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800897e:	f7f7 fc83 	bl	8000288 <__aeabi_dsub>
 8008982:	4603      	mov	r3, r0
 8008984:	460c      	mov	r4, r1
 8008986:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008990:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8008994:	69fa      	ldr	r2, [r7, #28]
 8008996:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800899a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80089a4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80089ae:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80089b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80089c2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80089cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80089d6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80089e0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80089ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80089f4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80089fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a06:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008a0e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8008a12:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008a16:	f7f8 f89f 	bl	8000b58 <__aeabi_d2iz>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	b25a      	sxtb	r2, r3
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	f04f 0300 	mov.w	r3, #0
 8008a28:	f04f 0400 	mov.w	r4, #0
 8008a2c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8008a30:	69fa      	ldr	r2, [r7, #28]
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	f04f 0400 	mov.w	r4, #0
 8008a3a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	f04f 0300 	mov.w	r3, #0
 8008a44:	f04f 0400 	mov.w	r4, #0
 8008a48:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008a52:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008a5c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008a66:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8008a6a:	69fa      	ldr	r2, [r7, #28]
 8008a6c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008a70:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008a7a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8008a7e:	69fa      	ldr	r2, [r7, #28]
 8008a80:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008a84:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8008a8e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008a98:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	37e8      	adds	r7, #232	; 0xe8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40000000 	.word	0x40000000
 8008aac:	3f847ae1 	.word	0x3f847ae1
 8008ab0:	40100000 	.word	0x40100000
 8008ab4:	3fe00000 	.word	0x3fe00000
 8008ab8:	40180000 	.word	0x40180000

08008abc <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008abc:	b082      	sub	sp, #8
 8008abe:	b5b0      	push	{r4, r5, r7, lr}
 8008ac0:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008ac4:	af2e      	add	r7, sp, #184	; 0xb8
 8008ac6:	f107 0108 	add.w	r1, r7, #8
 8008aca:	ed81 0b00 	vstr	d0, [r1]
 8008ace:	1d39      	adds	r1, r7, #4
 8008ad0:	6008      	str	r0, [r1, #0]
 8008ad2:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8008ad6:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008ada:	f107 0210 	add.w	r2, r7, #16
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ae6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008aea:	4ba9      	ldr	r3, [pc, #676]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f040 815a 	bne.w	8008da8 <scaraFlowDuty+0x2ec>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8008af4:	4ba6      	ldr	r3, [pc, #664]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008af6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d12b      	bne.n	8008b56 <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008afe:	f107 0308 	add.w	r3, r7, #8
 8008b02:	ed93 0b00 	vldr	d0, [r3]
 8008b06:	48a3      	ldr	r0, [pc, #652]	; (8008d94 <scaraFlowDuty+0x2d8>)
 8008b08:	f000 fc72 	bl	80093f0 <scaraFlowLSPB1>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8008b12:	4b9f      	ldr	r3, [pc, #636]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b14:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8008b18:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8008b1c:	4b9c      	ldr	r3, [pc, #624]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b1e:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8008b22:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008b26:	4b9a      	ldr	r3, [pc, #616]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b28:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008b2c:	f107 0108 	add.w	r1, r7, #8
 8008b30:	461a      	mov	r2, r3
 8008b32:	4623      	mov	r3, r4
 8008b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b38:	f7f7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008b44:	4b92      	ldr	r3, [pc, #584]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b46:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008b4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008b54:	e063      	b.n	8008c1e <scaraFlowDuty+0x162>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8008b56:	4b8e      	ldr	r3, [pc, #568]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b58:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d12d      	bne.n	8008bbc <scaraFlowDuty+0x100>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8008b60:	f107 0308 	add.w	r3, r7, #8
 8008b64:	ed93 0b00 	vldr	d0, [r3]
 8008b68:	488b      	ldr	r0, [pc, #556]	; (8008d98 <scaraFlowDuty+0x2dc>)
 8008b6a:	f000 fddf 	bl	800972c <scaraFLowScurve>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8008b74:	f107 0308 	add.w	r3, r7, #8
 8008b78:	ed93 0b00 	vldr	d0, [r3]
 8008b7c:	4887      	ldr	r0, [pc, #540]	; (8008d9c <scaraFlowDuty+0x2e0>)
 8008b7e:	f000 fdd5 	bl	800972c <scaraFLowScurve>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008b88:	4b81      	ldr	r3, [pc, #516]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b8a:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8008b8e:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 8008b92:	4b7f      	ldr	r3, [pc, #508]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b94:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8008b98:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8008b9c:	4b7c      	ldr	r3, [pc, #496]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008b9e:	e9d3 34f8 	ldrd	r3, r4, [r3, #992]	; 0x3e0
 8008ba2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 8008ba6:	4b7a      	ldr	r3, [pc, #488]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008ba8:	e9d3 34f6 	ldrd	r3, r4, [r3, #984]	; 0x3d8
 8008bac:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008bb0:	4b77      	ldr	r3, [pc, #476]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008bb2:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8008bb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008bba:	e030      	b.n	8008c1e <scaraFlowDuty+0x162>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008bbc:	4b74      	ldr	r3, [pc, #464]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008bbe:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d129      	bne.n	8008c1a <scaraFlowDuty+0x15e>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8008bc6:	4b72      	ldr	r3, [pc, #456]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008bc8:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8008bcc:	f107 0108 	add.w	r1, r7, #8
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd8:	f7f7 fd0e 	bl	80005f8 <__aeabi_dmul>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008be4:	4b6a      	ldr	r3, [pc, #424]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008be6:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008bea:	f107 0108 	add.w	r1, r7, #8
 8008bee:	461a      	mov	r2, r3
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bf6:	f7f7 fcff 	bl	80005f8 <__aeabi_dmul>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008c02:	4b63      	ldr	r3, [pc, #396]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c04:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008c08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008c18:	e001      	b.n	8008c1e <scaraFlowDuty+0x162>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008c1a:	2305      	movs	r3, #5
 8008c1c:	e2cd      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}

		if ( SCARA_STATUS_OK != status1) {
 8008c1e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <scaraFlowDuty+0x170>
			return status1;
 8008c26:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008c2a:	e2c6      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008c2c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <scaraFlowDuty+0x17e>
			return status2;
 8008c34:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008c38:	e2bf      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8008c3a:	4b55      	ldr	r3, [pc, #340]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c3c:	7a1b      	ldrb	r3, [r3, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d117      	bne.n	8008c72 <scaraFlowDuty+0x1b6>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8008c42:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008c46:	4856      	ldr	r0, [pc, #344]	; (8008da0 <scaraFlowDuty+0x2e4>)
 8008c48:	f000 fac2 	bl	80091d0 <scaraFlowLine>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8008c52:	4b4f      	ldr	r3, [pc, #316]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c54:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8008c58:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 8008c5c:	4b4c      	ldr	r3, [pc, #304]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c5e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008c62:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 8008c66:	4b4a      	ldr	r3, [pc, #296]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c68:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008c6c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008c70:	e01d      	b.n	8008cae <scaraFlowDuty+0x1f2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8008c72:	4b47      	ldr	r3, [pc, #284]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c74:	7a1b      	ldrb	r3, [r3, #8]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d117      	bne.n	8008caa <scaraFlowDuty+0x1ee>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008c7a:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008c7e:	4849      	ldr	r0, [pc, #292]	; (8008da4 <scaraFlowDuty+0x2e8>)
 8008c80:	f000 fb2e 	bl	80092e0 <scaraFlowCircle>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008c8a:	4b41      	ldr	r3, [pc, #260]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c8c:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8008c90:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 8008c94:	4b3e      	ldr	r3, [pc, #248]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008c96:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8008c9a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008c9e:	4b3c      	ldr	r3, [pc, #240]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008ca0:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8008ca4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008ca8:	e001      	b.n	8008cae <scaraFlowDuty+0x1f2>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e285      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}

		positionCompute.x 		= x;
 8008cae:	f107 0210 	add.w	r2, r7, #16
 8008cb2:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8008cb6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8008cba:	f107 0210 	add.w	r2, r7, #16
 8008cbe:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8008cc2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8008cc6:	f107 0210 	add.w	r2, r7, #16
 8008cca:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8008cce:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8008cd2:	4b2f      	ldr	r3, [pc, #188]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008cd4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008cd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008cdc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f7 fc1f 	bl	8000524 <__aeabi_i2d>
 8008ce6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008cea:	f7f7 fc85 	bl	80005f8 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 fac9 	bl	800028c <__adddf3>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	f107 0210 	add.w	r2, r7, #16
 8008d02:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8008d06:	f107 0210 	add.w	r2, r7, #16
 8008d0a:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8008d0e:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8008d12:	f107 0210 	add.w	r2, r7, #16
 8008d16:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8008d1a:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8008d1e:	f107 0210 	add.w	r2, r7, #16
 8008d22:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8008d26:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8008d2a:	f107 0210 	add.w	r2, r7, #16
 8008d2e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8008d32:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8008d36:	4b16      	ldr	r3, [pc, #88]	; (8008d90 <scaraFlowDuty+0x2d4>)
 8008d38:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8008d3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d40:	f107 0210 	add.w	r2, r7, #16
 8008d44:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008d48:	f107 0210 	add.w	r2, r7, #16
 8008d4c:	f107 0308 	add.w	r3, r7, #8
 8008d50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d54:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008d58:	f107 0410 	add.w	r4, r7, #16
 8008d5c:	4668      	mov	r0, sp
 8008d5e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008d62:	22b8      	movs	r2, #184	; 0xb8
 8008d64:	4619      	mov	r1, r3
 8008d66:	f00d f909 	bl	8015f7c <memcpy>
 8008d6a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008d6e:	cb0c      	ldmia	r3, {r2, r3}
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7fb fb09 	bl	8004388 <kinematicInverse>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <scaraFlowDuty+0x2c4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d7c:	2307      	movs	r3, #7
 8008d7e:	e21c      	b.n	80091ba <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008d80:	f107 0110 	add.w	r1, r7, #16
 8008d84:	1d3b      	adds	r3, r7, #4
 8008d86:	22c0      	movs	r2, #192	; 0xc0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f00d f8f7 	bl	8015f7c <memcpy>
 8008d8e:	e213      	b.n	80091b8 <scaraFlowDuty+0x6fc>
 8008d90:	2000ad28 	.word	0x2000ad28
 8008d94:	2000ae40 	.word	0x2000ae40
 8008d98:	2000aec0 	.word	0x2000aec0
 8008d9c:	2000b040 	.word	0x2000b040
 8008da0:	2000ad38 	.word	0x2000ad38
 8008da4:	2000ada8 	.word	0x2000ada8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008da8:	4b8b      	ldr	r3, [pc, #556]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	f040 8201 	bne.w	80091b4 <scaraFlowDuty+0x6f8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8008db2:	4b89      	ldr	r3, [pc, #548]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008db4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d174      	bne.n	8008ea6 <scaraFlowDuty+0x3ea>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	ed93 0b00 	vldr	d0, [r3]
 8008dc4:	4885      	ldr	r0, [pc, #532]	; (8008fdc <scaraFlowDuty+0x520>)
 8008dc6:	f000 fb13 	bl	80093f0 <scaraFlowLSPB1>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8008dd0:	f107 0308 	add.w	r3, r7, #8
 8008dd4:	ed93 0b00 	vldr	d0, [r3]
 8008dd8:	4881      	ldr	r0, [pc, #516]	; (8008fe0 <scaraFlowDuty+0x524>)
 8008dda:	f000 fb09 	bl	80093f0 <scaraFlowLSPB1>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	ed93 0b00 	vldr	d0, [r3]
 8008dec:	487d      	ldr	r0, [pc, #500]	; (8008fe4 <scaraFlowDuty+0x528>)
 8008dee:	f000 faff 	bl	80093f0 <scaraFlowLSPB1>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8008df8:	f107 0308 	add.w	r3, r7, #8
 8008dfc:	ed93 0b00 	vldr	d0, [r3]
 8008e00:	4879      	ldr	r0, [pc, #484]	; (8008fe8 <scaraFlowDuty+0x52c>)
 8008e02:	f000 faf5 	bl	80093f0 <scaraFlowLSPB1>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8008e0c:	4b72      	ldr	r3, [pc, #456]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e0e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8008e12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8008e16:	4b70      	ldr	r3, [pc, #448]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e18:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8008e1c:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8008e20:	4b6d      	ldr	r3, [pc, #436]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e22:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8008e26:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8008e2a:	4b6b      	ldr	r3, [pc, #428]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e2c:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8008e30:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8008e34:	4b68      	ldr	r3, [pc, #416]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e36:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008e3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e3e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8008e42:	4b65      	ldr	r3, [pc, #404]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e44:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8008e48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e4c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8008e50:	4b61      	ldr	r3, [pc, #388]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e52:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8008e56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e5a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8008e5e:	4b5e      	ldr	r3, [pc, #376]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e60:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8008e64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e68:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8008e6c:	4b5a      	ldr	r3, [pc, #360]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e6e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8008e72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e76:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008e7a:	4b57      	ldr	r3, [pc, #348]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e7c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008e80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e84:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008e88:	4b53      	ldr	r3, [pc, #332]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e8a:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e92:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8008e96:	4b50      	ldr	r3, [pc, #320]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008e98:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008e9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ea0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008ea4:	e07b      	b.n	8008f9e <scaraFlowDuty+0x4e2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8008ea6:	4b4c      	ldr	r3, [pc, #304]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008ea8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d174      	bne.n	8008f9a <scaraFlowDuty+0x4de>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008eb0:	f107 0308 	add.w	r3, r7, #8
 8008eb4:	ed93 0b00 	vldr	d0, [r3]
 8008eb8:	484c      	ldr	r0, [pc, #304]	; (8008fec <scaraFlowDuty+0x530>)
 8008eba:	f000 fc37 	bl	800972c <scaraFLowScurve>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8008ec4:	f107 0308 	add.w	r3, r7, #8
 8008ec8:	ed93 0b00 	vldr	d0, [r3]
 8008ecc:	4848      	ldr	r0, [pc, #288]	; (8008ff0 <scaraFlowDuty+0x534>)
 8008ece:	f000 fc2d 	bl	800972c <scaraFLowScurve>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	ed93 0b00 	vldr	d0, [r3]
 8008ee0:	4844      	ldr	r0, [pc, #272]	; (8008ff4 <scaraFlowDuty+0x538>)
 8008ee2:	f000 fc23 	bl	800972c <scaraFLowScurve>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008eec:	f107 0308 	add.w	r3, r7, #8
 8008ef0:	ed93 0b00 	vldr	d0, [r3]
 8008ef4:	4840      	ldr	r0, [pc, #256]	; (8008ff8 <scaraFlowDuty+0x53c>)
 8008ef6:	f000 fc19 	bl	800972c <scaraFLowScurve>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008f00:	4b35      	ldr	r3, [pc, #212]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f02:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8008f06:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8008f0a:	4b33      	ldr	r3, [pc, #204]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f0c:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8008f10:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8008f14:	4b30      	ldr	r3, [pc, #192]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f16:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8008f1a:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8008f1e:	4b2e      	ldr	r3, [pc, #184]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f20:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8008f24:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8008f28:	4b2b      	ldr	r3, [pc, #172]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f2a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8008f2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f32:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8008f36:	4b28      	ldr	r3, [pc, #160]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f38:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008f3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f40:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8008f44:	4b24      	ldr	r3, [pc, #144]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f46:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8008f4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f4e:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8008f52:	4b21      	ldr	r3, [pc, #132]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f54:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8008f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f5c:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8008f60:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f62:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8008f66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f6a:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008f6e:	4b1a      	ldr	r3, [pc, #104]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f70:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8008f74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f78:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008f7c:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f7e:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8008f82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f86:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <scaraFlowDuty+0x51c>)
 8008f8c:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f94:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008f98:	e001      	b.n	8008f9e <scaraFlowDuty+0x4e2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008f9a:	2305      	movs	r3, #5
 8008f9c:	e10d      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008f9e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <scaraFlowDuty+0x4f0>
			return status1;
 8008fa6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008faa:	e106      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008fac:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <scaraFlowDuty+0x4fe>
			return status2;
 8008fb4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008fb8:	e0ff      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008fba:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <scaraFlowDuty+0x50c>
			return status3;
 8008fc2:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008fc6:	e0f8      	b.n	80091ba <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008fc8:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d015      	beq.n	8008ffc <scaraFlowDuty+0x540>
			return status4;
 8008fd0:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008fd4:	e0f1      	b.n	80091ba <scaraFlowDuty+0x6fe>
 8008fd6:	bf00      	nop
 8008fd8:	2000ad28 	.word	0x2000ad28
 8008fdc:	2000b148 	.word	0x2000b148
 8008fe0:	2000b2c8 	.word	0x2000b2c8
 8008fe4:	2000b448 	.word	0x2000b448
 8008fe8:	2000b5c8 	.word	0x2000b5c8
 8008fec:	2000b1c8 	.word	0x2000b1c8
 8008ff0:	2000b348 	.word	0x2000b348
 8008ff4:	2000b4c8 	.word	0x2000b4c8
 8008ff8:	2000b648 	.word	0x2000b648
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8008ffc:	4b73      	ldr	r3, [pc, #460]	; (80091cc <scaraFlowDuty+0x710>)
 8008ffe:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009002:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009006:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 800900a:	4618      	mov	r0, r3
 800900c:	f7f7 fa8a 	bl	8000524 <__aeabi_i2d>
 8009010:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009014:	f7f7 faf0 	bl	80005f8 <__aeabi_dmul>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4620      	mov	r0, r4
 800901e:	4629      	mov	r1, r5
 8009020:	f7f7 f934 	bl	800028c <__adddf3>
 8009024:	4603      	mov	r3, r0
 8009026:	460c      	mov	r4, r1
 8009028:	f107 0210 	add.w	r2, r7, #16
 800902c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8009030:	4b66      	ldr	r3, [pc, #408]	; (80091cc <scaraFlowDuty+0x710>)
 8009032:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8009036:	e9d3 4500 	ldrd	r4, r5, [r3]
 800903a:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 800903e:	4618      	mov	r0, r3
 8009040:	f7f7 fa70 	bl	8000524 <__aeabi_i2d>
 8009044:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8009048:	f7f7 fad6 	bl	80005f8 <__aeabi_dmul>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 f91a 	bl	800028c <__adddf3>
 8009058:	4603      	mov	r3, r0
 800905a:	460c      	mov	r4, r1
 800905c:	f107 0210 	add.w	r2, r7, #16
 8009060:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8009064:	4b59      	ldr	r3, [pc, #356]	; (80091cc <scaraFlowDuty+0x710>)
 8009066:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800906a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800906e:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 8009072:	4618      	mov	r0, r3
 8009074:	f7f7 fa56 	bl	8000524 <__aeabi_i2d>
 8009078:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800907c:	f7f7 fabc 	bl	80005f8 <__aeabi_dmul>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	f7f7 f900 	bl	800028c <__adddf3>
 800908c:	4603      	mov	r3, r0
 800908e:	460c      	mov	r4, r1
 8009090:	f107 0210 	add.w	r2, r7, #16
 8009094:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8009098:	4b4c      	ldr	r3, [pc, #304]	; (80091cc <scaraFlowDuty+0x710>)
 800909a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800909e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090a2:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f7 fa3c 	bl	8000524 <__aeabi_i2d>
 80090ac:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80090b0:	f7f7 faa2 	bl	80005f8 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4620      	mov	r0, r4
 80090ba:	4629      	mov	r1, r5
 80090bc:	f7f7 f8e6 	bl	800028c <__adddf3>
 80090c0:	4603      	mov	r3, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	f107 0210 	add.w	r2, r7, #16
 80090c8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 80090cc:	f107 0210 	add.w	r2, r7, #16
 80090d0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80090d4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 80090d8:	f107 0210 	add.w	r2, r7, #16
 80090dc:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80090e0:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 80090e4:	f107 0210 	add.w	r2, r7, #16
 80090e8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80090ec:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 80090f0:	f107 0210 	add.w	r2, r7, #16
 80090f4:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80090f8:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 80090fc:	f107 0210 	add.w	r2, r7, #16
 8009100:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8009104:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8009108:	f107 0210 	add.w	r2, r7, #16
 800910c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8009110:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 8009114:	f107 0210 	add.w	r2, r7, #16
 8009118:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800911c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8009120:	f107 0210 	add.w	r2, r7, #16
 8009124:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8009128:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800912c:	4b27      	ldr	r3, [pc, #156]	; (80091cc <scaraFlowDuty+0x710>)
 800912e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009132:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009136:	f107 0210 	add.w	r2, r7, #16
 800913a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800913e:	f107 0210 	add.w	r2, r7, #16
 8009142:	f107 0308 	add.w	r3, r7, #8
 8009146:	e9d3 3400 	ldrd	r3, r4, [r3]
 800914a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800914e:	f107 0310 	add.w	r3, r7, #16
 8009152:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8009156:	f107 0310 	add.w	r3, r7, #16
 800915a:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800915e:	f107 0310 	add.w	r3, r7, #16
 8009162:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8009166:	f107 0310 	add.w	r3, r7, #16
 800916a:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800916e:	eeb0 3a44 	vmov.f32	s6, s8
 8009172:	eef0 3a64 	vmov.f32	s7, s9
 8009176:	eeb0 2a45 	vmov.f32	s4, s10
 800917a:	eef0 2a65 	vmov.f32	s5, s11
 800917e:	eeb0 1a46 	vmov.f32	s2, s12
 8009182:	eef0 1a66 	vmov.f32	s3, s13
 8009186:	eeb0 0a47 	vmov.f32	s0, s14
 800918a:	eef0 0a67 	vmov.f32	s1, s15
 800918e:	f001 f9b3 	bl	800a4f8 <scaraCheckWorkSpace4>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <scaraFlowDuty+0x6e0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009198:	2307      	movs	r3, #7
 800919a:	e00e      	b.n	80091ba <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800919c:	f107 0110 	add.w	r1, r7, #16
 80091a0:	1d3b      	adds	r3, r7, #4
 80091a2:	22c0      	movs	r2, #192	; 0xc0
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	f00c fee9 	bl	8015f7c <memcpy>
		}
		kinematicForward(pos_Next);
 80091aa:	1d3b      	adds	r3, r7, #4
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	f7fa ffaf 	bl	8004110 <kinematicForward>
 80091b2:	e001      	b.n	80091b8 <scaraFlowDuty+0x6fc>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80091b4:	2302      	movs	r3, #2
 80091b6:	e000      	b.n	80091ba <scaraFlowDuty+0x6fe>
	}

	return SCARA_STATUS_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80091c0:	46bd      	mov	sp, r7
 80091c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80091c6:	b002      	add	sp, #8
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	2000ad28 	.word	0x2000ad28

080091d0 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 80091d0:	b5b0      	push	{r4, r5, r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80091e2:	a33d      	add	r3, pc, #244	; (adr r3, 80092d8 <scaraFlowLine+0x108>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f7f7 fc96 	bl	8000b18 <__aeabi_dcmpgt>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d05a      	beq.n	80092a8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80091fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4610      	mov	r0, r2
 800920c:	4619      	mov	r1, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009214:	f7f7 fb1a 	bl	800084c <__aeabi_ddiv>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f7f7 f834 	bl	800028c <__adddf3>
 8009224:	4603      	mov	r3, r0
 8009226:	460c      	mov	r4, r1
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800923a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923e:	f7f7 f9db 	bl	80005f8 <__aeabi_dmul>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009250:	f7f7 fafc 	bl	800084c <__aeabi_ddiv>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4620      	mov	r0, r4
 800925a:	4629      	mov	r1, r5
 800925c:	f7f7 f816 	bl	800028c <__adddf3>
 8009260:	4603      	mov	r3, r0
 8009262:	460c      	mov	r4, r1
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8009276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927a:	f7f7 f9bd 	bl	80005f8 <__aeabi_dmul>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800928c:	f7f7 fade 	bl	800084c <__aeabi_ddiv>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4620      	mov	r0, r4
 8009296:	4629      	mov	r1, r5
 8009298:	f7f6 fff8 	bl	800028c <__adddf3>
 800929c:	4603      	mov	r3, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80092a6:	e011      	b.n	80092cc <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bdb0      	pop	{r4, r5, r7, pc}
 80092d6:	bf00      	nop
 80092d8:	47ae147b 	.word	0x47ae147b
 80092dc:	3f847ae1 	.word	0x3f847ae1

080092e0 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 80092e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80092f4:	461a      	mov	r2, r3
 80092f6:	4623      	mov	r3, r4
 80092f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092fc:	f7f7 faa6 	bl	800084c <__aeabi_ddiv>
 8009300:	4603      	mov	r3, r0
 8009302:	460c      	mov	r4, r1
 8009304:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f993 3000 	ldrsb.w	r3, [r3]
 8009320:	4618      	mov	r0, r3
 8009322:	f7f7 f8ff 	bl	8000524 <__aeabi_i2d>
 8009326:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800932a:	f7f7 f965 	bl	80005f8 <__aeabi_dmul>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4650      	mov	r0, sl
 8009334:	4659      	mov	r1, fp
 8009336:	f7f6 ffa9 	bl	800028c <__adddf3>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	ec43 2b17 	vmov	d7, r2, r3
 8009342:	eeb0 0a47 	vmov.f32	s0, s14
 8009346:	eef0 0a67 	vmov.f32	s1, s15
 800934a:	f010 fc05 	bl	8019b58 <cos>
 800934e:	ec53 2b10 	vmov	r2, r3, d0
 8009352:	4640      	mov	r0, r8
 8009354:	4649      	mov	r1, r9
 8009356:	f7f7 f94f 	bl	80005f8 <__aeabi_dmul>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	f7f6 ff93 	bl	800028c <__adddf3>
 8009366:	4603      	mov	r3, r0
 8009368:	460c      	mov	r4, r1
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f993 3000 	ldrsb.w	r3, [r3]
 8009388:	4618      	mov	r0, r3
 800938a:	f7f7 f8cb 	bl	8000524 <__aeabi_i2d>
 800938e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009392:	f7f7 f931 	bl	80005f8 <__aeabi_dmul>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	4650      	mov	r0, sl
 800939c:	4659      	mov	r1, fp
 800939e:	f7f6 ff75 	bl	800028c <__adddf3>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	ec43 2b17 	vmov	d7, r2, r3
 80093aa:	eeb0 0a47 	vmov.f32	s0, s14
 80093ae:	eef0 0a67 	vmov.f32	s1, s15
 80093b2:	f010 fc61 	bl	8019c78 <sin>
 80093b6:	ec53 2b10 	vmov	r2, r3, d0
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	f7f7 f91b 	bl	80005f8 <__aeabi_dmul>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f6 ff5f 	bl	800028c <__adddf3>
 80093ce:	4603      	mov	r3, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080093f0 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 80093f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093f4:	b08b      	sub	sp, #44	; 0x2c
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009404:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800940e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009418:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 800941c:	f04f 0200 	mov.w	r2, #0
 8009420:	f04f 0300 	mov.w	r3, #0
 8009424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009428:	f7f7 fb6c 	bl	8000b04 <__aeabi_dcmpge>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d05b      	beq.n	80094ea <scaraFlowLSPB1+0xfa>
 8009432:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800943a:	f7f7 fb59 	bl	8000af0 <__aeabi_dcmple>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d052      	beq.n	80094ea <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800945c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009460:	f7f7 f8ca 	bl	80005f8 <__aeabi_dmul>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4620      	mov	r0, r4
 800946a:	4629      	mov	r1, r5
 800946c:	f7f6 ff0e 	bl	800028c <__adddf3>
 8009470:	4603      	mov	r3, r0
 8009472:	460c      	mov	r4, r1
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4620      	mov	r0, r4
 8009494:	4629      	mov	r1, r5
 8009496:	f7f6 fef9 	bl	800028c <__adddf3>
 800949a:	4603      	mov	r3, r0
 800949c:	460c      	mov	r4, r1
 800949e:	4625      	mov	r5, r4
 80094a0:	461c      	mov	r4, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	4b9e      	ldr	r3, [pc, #632]	; (8009728 <scaraFlowLSPB1+0x338>)
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4610      	mov	r0, r2
 80094b8:	4619      	mov	r1, r3
 80094ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4610      	mov	r0, r2
 80094c8:	4619      	mov	r1, r3
 80094ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ce:	f7f7 f893 	bl	80005f8 <__aeabi_dmul>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f6 fed7 	bl	800028c <__adddf3>
 80094de:	4603      	mov	r3, r0
 80094e0:	460c      	mov	r4, r1
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80094e8:	e117      	b.n	800971a <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 80094ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094f2:	f7f7 fafd 	bl	8000af0 <__aeabi_dcmple>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d056      	beq.n	80095aa <scaraFlowLSPB1+0x1ba>
 80094fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009504:	f7f7 faf4 	bl	8000af0 <__aeabi_dcmple>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d04d      	beq.n	80095aa <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	f04f 0300 	mov.w	r3, #0
 8009514:	f04f 0400 	mov.w	r4, #0
 8009518:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009538:	f7f7 f85e 	bl	80005f8 <__aeabi_dmul>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4610      	mov	r0, r2
 8009542:	4619      	mov	r1, r3
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	4b77      	ldr	r3, [pc, #476]	; (8009728 <scaraFlowLSPB1+0x338>)
 800954a:	f7f7 f855 	bl	80005f8 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4620      	mov	r0, r4
 8009554:	4629      	mov	r1, r5
 8009556:	f7f6 fe99 	bl	800028c <__adddf3>
 800955a:	4603      	mov	r3, r0
 800955c:	460c      	mov	r4, r1
 800955e:	4698      	mov	r8, r3
 8009560:	46a1      	mov	r9, r4
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	4b6e      	ldr	r3, [pc, #440]	; (8009728 <scaraFlowLSPB1+0x338>)
 800956e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800957e:	f7f6 fe83 	bl	8000288 <__aeabi_dsub>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 f835 	bl	80005f8 <__aeabi_dmul>
 800958e:	4603      	mov	r3, r0
 8009590:	460c      	mov	r4, r1
 8009592:	461a      	mov	r2, r3
 8009594:	4623      	mov	r3, r4
 8009596:	4640      	mov	r0, r8
 8009598:	4649      	mov	r1, r9
 800959a:	f7f6 fe77 	bl	800028c <__adddf3>
 800959e:	4603      	mov	r3, r0
 80095a0:	460c      	mov	r4, r1
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80095a8:	e0b7      	b.n	800971a <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td <= time && time <= tf) {
 80095aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095b2:	f7f7 fa9d 	bl	8000af0 <__aeabi_dcmple>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 809a 	beq.w	80096f2 <scaraFlowLSPB1+0x302>
 80095be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095c6:	f7f7 fa93 	bl	8000af0 <__aeabi_dcmple>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8090 	beq.w	80096f2 <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80095d8:	4614      	mov	r4, r2
 80095da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80095f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095f8:	f7f6 fe46 	bl	8000288 <__aeabi_dsub>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4640      	mov	r0, r8
 8009602:	4649      	mov	r1, r9
 8009604:	f7f6 fff8 	bl	80005f8 <__aeabi_dmul>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 fe3c 	bl	800028c <__adddf3>
 8009614:	4603      	mov	r3, r0
 8009616:	460c      	mov	r4, r1
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800962a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009632:	f7f6 fe29 	bl	8000288 <__aeabi_dsub>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4640      	mov	r0, r8
 800963c:	4649      	mov	r1, r9
 800963e:	f7f6 ffdb 	bl	80005f8 <__aeabi_dmul>
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	4620      	mov	r0, r4
 8009648:	4629      	mov	r1, r5
 800964a:	f7f6 fe1d 	bl	8000288 <__aeabi_dsub>
 800964e:	4603      	mov	r3, r0
 8009650:	460c      	mov	r4, r1
 8009652:	461d      	mov	r5, r3
 8009654:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009662:	461a      	mov	r2, r3
 8009664:	4623      	mov	r3, r4
 8009666:	f7f6 fe0f 	bl	8000288 <__aeabi_dsub>
 800966a:	4603      	mov	r3, r0
 800966c:	460c      	mov	r4, r1
 800966e:	4698      	mov	r8, r3
 8009670:	46a1      	mov	r9, r4
 8009672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009676:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800967a:	f7f6 fe05 	bl	8000288 <__aeabi_dsub>
 800967e:	4603      	mov	r3, r0
 8009680:	460c      	mov	r4, r1
 8009682:	461a      	mov	r2, r3
 8009684:	4623      	mov	r3, r4
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	4603      	mov	r3, r0
 8009690:	460c      	mov	r4, r1
 8009692:	4698      	mov	r8, r3
 8009694:	46a1      	mov	r9, r4
 8009696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800969a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	4603      	mov	r3, r0
 80096a4:	460c      	mov	r4, r1
 80096a6:	461a      	mov	r2, r3
 80096a8:	4623      	mov	r3, r4
 80096aa:	4640      	mov	r0, r8
 80096ac:	4649      	mov	r1, r9
 80096ae:	f7f6 ffa3 	bl	80005f8 <__aeabi_dmul>
 80096b2:	4603      	mov	r3, r0
 80096b4:	460c      	mov	r4, r1
 80096b6:	4698      	mov	r8, r3
 80096b8:	46a1      	mov	r9, r4
 80096ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	f7f6 fde3 	bl	800028c <__adddf3>
 80096c6:	4603      	mov	r3, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	461a      	mov	r2, r3
 80096cc:	4623      	mov	r3, r4
 80096ce:	4640      	mov	r0, r8
 80096d0:	4649      	mov	r1, r9
 80096d2:	f7f7 f8bb 	bl	800084c <__aeabi_ddiv>
 80096d6:	4603      	mov	r3, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	461a      	mov	r2, r3
 80096dc:	4623      	mov	r3, r4
 80096de:	4628      	mov	r0, r5
 80096e0:	4631      	mov	r1, r6
 80096e2:	f7f6 fdd1 	bl	8000288 <__aeabi_dsub>
 80096e6:	4603      	mov	r3, r0
 80096e8:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80096f0:	e013      	b.n	800971a <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	f04f 0300 	mov.w	r3, #0
 80096f8:	f04f 0400 	mov.w	r4, #0
 80096fc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	f04f 0300 	mov.w	r3, #0
 8009706:	f04f 0400 	mov.w	r4, #0
 800970a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	372c      	adds	r7, #44	; 0x2c
 8009720:	46bd      	mov	sp, r7
 8009722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009726:	bf00      	nop
 8009728:	3fe00000 	.word	0x3fe00000

0800972c <scaraFLowScurve>:
	return SCARA_STATUS_OK;
}


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 800972c:	b5b0      	push	{r4, r5, r7, lr}
 800972e:	b092      	sub	sp, #72	; 0x48
 8009730:	af00      	add	r7, sp, #0
 8009732:	6278      	str	r0, [r7, #36]	; 0x24
 8009734:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800973e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009748:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009752:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800975c:	2b04      	cmp	r3, #4
 800975e:	f040 8321 	bne.w	8009da4 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800976e:	f7f7 f9c9 	bl	8000b04 <__aeabi_dcmpge>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d059      	beq.n	800982c <scaraFLowScurve+0x100>
 8009778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800977c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009780:	f7f7 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d050      	beq.n	800982c <scaraFLowScurve+0x100>
			 t = time;
 800978a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800978e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009796:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800979a:	f7f6 ff2d 	bl	80005f8 <__aeabi_dmul>
 800979e:	4603      	mov	r3, r0
 80097a0:	460c      	mov	r4, r1
 80097a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	4b93      	ldr	r3, [pc, #588]	; (80099fc <scaraFLowScurve+0x2d0>)
 80097ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097b2:	f7f6 ff21 	bl	80005f8 <__aeabi_dmul>
 80097b6:	4603      	mov	r3, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	4618      	mov	r0, r3
 80097bc:	4621      	mov	r1, r4
 80097be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097c2:	f7f6 ff19 	bl	80005f8 <__aeabi_dmul>
 80097c6:	4603      	mov	r3, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	4618      	mov	r0, r3
 80097cc:	4621      	mov	r1, r4
 80097ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097d2:	f7f6 ff11 	bl	80005f8 <__aeabi_dmul>
 80097d6:	4603      	mov	r3, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097dc:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80097e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097e8:	f7f6 ff06 	bl	80005f8 <__aeabi_dmul>
 80097ec:	4603      	mov	r3, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	4618      	mov	r0, r3
 80097f2:	4621      	mov	r1, r4
 80097f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097f8:	f7f6 fefe 	bl	80005f8 <__aeabi_dmul>
 80097fc:	4603      	mov	r3, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	4618      	mov	r0, r3
 8009802:	4621      	mov	r1, r4
 8009804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009808:	f7f6 fef6 	bl	80005f8 <__aeabi_dmul>
 800980c:	4603      	mov	r3, r0
 800980e:	460c      	mov	r4, r1
 8009810:	4618      	mov	r0, r3
 8009812:	4621      	mov	r1, r4
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	4b79      	ldr	r3, [pc, #484]	; (8009a00 <scaraFLowScurve+0x2d4>)
 800981a:	f7f7 f817 	bl	800084c <__aeabi_ddiv>
 800981e:	4603      	mov	r3, r0
 8009820:	460c      	mov	r4, r1
 8009822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009824:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009828:	f000 be56 	b.w	800a4d8 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 800982c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009830:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009834:	f7f7 f95c 	bl	8000af0 <__aeabi_dcmple>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 80e2 	beq.w	8009a04 <scaraFLowScurve+0x2d8>
 8009840:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	f7f6 fd20 	bl	800028c <__adddf3>
 800984c:	4603      	mov	r3, r0
 800984e:	460c      	mov	r4, r1
 8009850:	461a      	mov	r2, r3
 8009852:	4623      	mov	r3, r4
 8009854:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009858:	f7f7 f940 	bl	8000adc <__aeabi_dcmplt>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80d0 	beq.w	8009a04 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8009864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009868:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800986c:	f7f6 fd0c 	bl	8000288 <__aeabi_dsub>
 8009870:	4603      	mov	r3, r0
 8009872:	460c      	mov	r4, r1
 8009874:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800987c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009880:	f7f6 feba 	bl	80005f8 <__aeabi_dmul>
 8009884:	4603      	mov	r3, r0
 8009886:	460c      	mov	r4, r1
 8009888:	4625      	mov	r5, r4
 800988a:	461c      	mov	r4, r3
 800988c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009890:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009894:	f7f6 feb0 	bl	80005f8 <__aeabi_dmul>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4620      	mov	r0, r4
 800989e:	4629      	mov	r1, r5
 80098a0:	f7f6 fcf2 	bl	8000288 <__aeabi_dsub>
 80098a4:	4603      	mov	r3, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098aa:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80098b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098bc:	f7f6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4610      	mov	r0, r2
 80098c6:	4619      	mov	r1, r3
 80098c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098cc:	f7f6 fe94 	bl	80005f8 <__aeabi_dmul>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4620      	mov	r0, r4
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7f6 fcd8 	bl	800028c <__adddf3>
 80098dc:	4603      	mov	r3, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	4625      	mov	r5, r4
 80098e2:	461c      	mov	r4, r3
 80098e4:	f04f 0200 	mov.w	r2, #0
 80098e8:	4b44      	ldr	r3, [pc, #272]	; (80099fc <scaraFLowScurve+0x2d0>)
 80098ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098ee:	f7f6 fe83 	bl	80005f8 <__aeabi_dmul>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4610      	mov	r0, r2
 80098f8:	4619      	mov	r1, r3
 80098fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098fe:	f7f6 fe7b 	bl	80005f8 <__aeabi_dmul>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4610      	mov	r0, r2
 8009908:	4619      	mov	r1, r3
 800990a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800990e:	f7f6 fe73 	bl	80005f8 <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 fcb5 	bl	8000288 <__aeabi_dsub>
 800991e:	4603      	mov	r3, r0
 8009920:	460c      	mov	r4, r1
 8009922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009924:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009938:	f7f6 fe5e 	bl	80005f8 <__aeabi_dmul>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	4620      	mov	r0, r4
 8009942:	4629      	mov	r1, r5
 8009944:	f7f6 fca2 	bl	800028c <__adddf3>
 8009948:	4603      	mov	r3, r0
 800994a:	460c      	mov	r4, r1
 800994c:	4625      	mov	r5, r4
 800994e:	461c      	mov	r4, r3
 8009950:	f04f 0200 	mov.w	r2, #0
 8009954:	4b29      	ldr	r3, [pc, #164]	; (80099fc <scaraFLowScurve+0x2d0>)
 8009956:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800995a:	f7f6 fe4d 	bl	80005f8 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800996a:	f7f6 fe45 	bl	80005f8 <__aeabi_dmul>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4610      	mov	r0, r2
 8009974:	4619      	mov	r1, r3
 8009976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800997a:	f7f6 fe3d 	bl	80005f8 <__aeabi_dmul>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4610      	mov	r0, r2
 8009984:	4619      	mov	r1, r3
 8009986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800998a:	f7f6 fe35 	bl	80005f8 <__aeabi_dmul>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f6 fc79 	bl	800028c <__adddf3>
 800999a:	4603      	mov	r3, r0
 800999c:	460c      	mov	r4, r1
 800999e:	4625      	mov	r5, r4
 80099a0:	461c      	mov	r4, r3
 80099a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099aa:	f7f6 fe25 	bl	80005f8 <__aeabi_dmul>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4610      	mov	r0, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099ba:	f7f6 fe1d 	bl	80005f8 <__aeabi_dmul>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4610      	mov	r0, r2
 80099c4:	4619      	mov	r1, r3
 80099c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099ca:	f7f6 fe15 	bl	80005f8 <__aeabi_dmul>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4610      	mov	r0, r2
 80099d4:	4619      	mov	r1, r3
 80099d6:	f04f 0200 	mov.w	r2, #0
 80099da:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <scaraFLowScurve+0x2d4>)
 80099dc:	f7f6 ff36 	bl	800084c <__aeabi_ddiv>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fc4e 	bl	8000288 <__aeabi_dsub>
 80099ec:	4603      	mov	r3, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80099f6:	f000 bd6f 	b.w	800a4d8 <scaraFLowScurve+0xdac>
 80099fa:	bf00      	nop
 80099fc:	3fe00000 	.word	0x3fe00000
 8009a00:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8009a04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	f7f6 fc3e 	bl	800028c <__adddf3>
 8009a10:	4603      	mov	r3, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	461a      	mov	r2, r3
 8009a16:	4623      	mov	r3, r4
 8009a18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a1c:	f7f7 f872 	bl	8000b04 <__aeabi_dcmpge>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 80a2 	beq.w	8009b6c <scaraFLowScurve+0x440>
 8009a28:	f04f 0200 	mov.w	r2, #0
 8009a2c:	4b4c      	ldr	r3, [pc, #304]	; (8009b60 <scaraFLowScurve+0x434>)
 8009a2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	4603      	mov	r3, r0
 8009a38:	460c      	mov	r4, r1
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a42:	f7f7 f84b 	bl	8000adc <__aeabi_dcmplt>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 808f 	beq.w	8009b6c <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 8009a4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	f7f6 fc19 	bl	800028c <__adddf3>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4623      	mov	r3, r4
 8009a62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a66:	f7f6 fc0f 	bl	8000288 <__aeabi_dsub>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a74:	613b      	str	r3, [r7, #16]
 8009a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009a86:	f7f6 fdb7 	bl	80005f8 <__aeabi_dmul>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a90:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	4b31      	ldr	r3, [pc, #196]	; (8009b64 <scaraFLowScurve+0x438>)
 8009aa0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009aa4:	f7f6 fda8 	bl	80005f8 <__aeabi_dmul>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4610      	mov	r0, r2
 8009aae:	4619      	mov	r1, r3
 8009ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ab4:	f7f6 fda0 	bl	80005f8 <__aeabi_dmul>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4610      	mov	r0, r2
 8009abe:	4619      	mov	r1, r3
 8009ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ac4:	f7f6 fd98 	bl	80005f8 <__aeabi_dmul>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f7f6 fbda 	bl	8000288 <__aeabi_dsub>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ada:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009aee:	f7f6 fd83 	bl	80005f8 <__aeabi_dmul>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	f7f6 fbc7 	bl	800028c <__adddf3>
 8009afe:	4603      	mov	r3, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	4625      	mov	r5, r4
 8009b04:	461c      	mov	r4, r3
 8009b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b0e:	f7f6 fd73 	bl	80005f8 <__aeabi_dmul>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4610      	mov	r0, r2
 8009b18:	4619      	mov	r1, r3
 8009b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b1e:	f7f6 fd6b 	bl	80005f8 <__aeabi_dmul>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4610      	mov	r0, r2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b2e:	f7f6 fd63 	bl	80005f8 <__aeabi_dmul>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4610      	mov	r0, r2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <scaraFLowScurve+0x43c>)
 8009b40:	f7f6 fe84 	bl	800084c <__aeabi_ddiv>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fb9c 	bl	8000288 <__aeabi_dsub>
 8009b50:	4603      	mov	r3, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b56:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009b5a:	f000 bcbd 	b.w	800a4d8 <scaraFLowScurve+0xdac>
 8009b5e:	bf00      	nop
 8009b60:	40080000 	.word	0x40080000
 8009b64:	3fe00000 	.word	0x3fe00000
 8009b68:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8009b6c:	f04f 0200 	mov.w	r2, #0
 8009b70:	4b88      	ldr	r3, [pc, #544]	; (8009d94 <scaraFLowScurve+0x668>)
 8009b72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b76:	f7f6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4623      	mov	r3, r4
 8009b82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b86:	f7f6 ffbd 	bl	8000b04 <__aeabi_dcmpge>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 80ec 	beq.w	8009d6a <scaraFLowScurve+0x63e>
 8009b92:	f04f 0200 	mov.w	r2, #0
 8009b96:	4b80      	ldr	r3, [pc, #512]	; (8009d98 <scaraFLowScurve+0x66c>)
 8009b98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4623      	mov	r3, r4
 8009ba8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009bac:	f7f6 ff96 	bl	8000adc <__aeabi_dcmplt>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 80d9 	beq.w	8009d6a <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8009bb8:	f04f 0200 	mov.w	r2, #0
 8009bbc:	4b75      	ldr	r3, [pc, #468]	; (8009d94 <scaraFLowScurve+0x668>)
 8009bbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009bc2:	f7f6 fd19 	bl	80005f8 <__aeabi_dmul>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	460c      	mov	r4, r1
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4623      	mov	r3, r4
 8009bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009bd2:	f7f6 fb59 	bl	8000288 <__aeabi_dsub>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be0:	60bb      	str	r3, [r7, #8]
 8009be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009be8:	60fb      	str	r3, [r7, #12]
 8009bea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bf2:	f7f6 fd01 	bl	80005f8 <__aeabi_dmul>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	4625      	mov	r5, r4
 8009bfc:	461c      	mov	r4, r3
 8009bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c06:	f7f6 fcf7 	bl	80005f8 <__aeabi_dmul>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	f7f6 fb3b 	bl	800028c <__adddf3>
 8009c16:	4603      	mov	r3, r0
 8009c18:	460c      	mov	r4, r1
 8009c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009c26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c2e:	f7f6 fce3 	bl	80005f8 <__aeabi_dmul>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4610      	mov	r0, r2
 8009c38:	4619      	mov	r1, r3
 8009c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c3e:	f7f6 fcdb 	bl	80005f8 <__aeabi_dmul>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7f6 fb1d 	bl	8000288 <__aeabi_dsub>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	460c      	mov	r4, r1
 8009c52:	4625      	mov	r5, r4
 8009c54:	461c      	mov	r4, r3
 8009c56:	f04f 0200 	mov.w	r2, #0
 8009c5a:	4b50      	ldr	r3, [pc, #320]	; (8009d9c <scaraFLowScurve+0x670>)
 8009c5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c60:	f7f6 fcca 	bl	80005f8 <__aeabi_dmul>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c70:	f7f6 fcc2 	bl	80005f8 <__aeabi_dmul>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c80:	f7f6 fcba 	bl	80005f8 <__aeabi_dmul>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7f6 fafe 	bl	800028c <__adddf3>
 8009c90:	4603      	mov	r3, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c96:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009caa:	f7f6 fca5 	bl	80005f8 <__aeabi_dmul>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	f7f6 fae9 	bl	800028c <__adddf3>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	4625      	mov	r5, r4
 8009cc0:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8009cc2:	f04f 0200 	mov.w	r2, #0
 8009cc6:	4b35      	ldr	r3, [pc, #212]	; (8009d9c <scaraFLowScurve+0x670>)
 8009cc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ccc:	f7f6 fc94 	bl	80005f8 <__aeabi_dmul>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009cdc:	f7f6 fc8c 	bl	80005f8 <__aeabi_dmul>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cec:	f7f6 fc84 	bl	80005f8 <__aeabi_dmul>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cfc:	f7f6 fc7c 	bl	80005f8 <__aeabi_dmul>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4620      	mov	r0, r4
 8009d06:	4629      	mov	r1, r5
 8009d08:	f7f6 fabe 	bl	8000288 <__aeabi_dsub>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	4625      	mov	r5, r4
 8009d12:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8009d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d1c:	f7f6 fc6c 	bl	80005f8 <__aeabi_dmul>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	4610      	mov	r0, r2
 8009d26:	4619      	mov	r1, r3
 8009d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d2c:	f7f6 fc64 	bl	80005f8 <__aeabi_dmul>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4610      	mov	r0, r2
 8009d36:	4619      	mov	r1, r3
 8009d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d3c:	f7f6 fc5c 	bl	80005f8 <__aeabi_dmul>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4610      	mov	r0, r2
 8009d46:	4619      	mov	r1, r3
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <scaraFLowScurve+0x674>)
 8009d4e:	f7f6 fd7d 	bl	800084c <__aeabi_ddiv>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fa97 	bl	800028c <__adddf3>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d64:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009d68:	e3b6      	b.n	800a4d8 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8009d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	f04f 0400 	mov.w	r4, #0
 8009d74:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	f04f 0400 	mov.w	r4, #0
 8009d82:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009d92:	e3a1      	b.n	800a4d8 <scaraFLowScurve+0xdac>
 8009d94:	40080000 	.word	0x40080000
 8009d98:	40100000 	.word	0x40100000
 8009d9c:	3fe00000 	.word	0x3fe00000
 8009da0:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009daa:	2b05      	cmp	r3, #5
 8009dac:	f040 8392 	bne.w	800a4d4 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dbc:	f7f6 fea2 	bl	8000b04 <__aeabi_dcmpge>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d058      	beq.n	8009e78 <scaraFLowScurve+0x74c>
 8009dc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dce:	f7f6 fe85 	bl	8000adc <__aeabi_dcmplt>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d04f      	beq.n	8009e78 <scaraFLowScurve+0x74c>
			 t = time;
 8009dd8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009ddc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009de0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009de4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009de8:	f7f6 fc06 	bl	80005f8 <__aeabi_dmul>
 8009dec:	4603      	mov	r3, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	4b91      	ldr	r3, [pc, #580]	; (800a040 <scaraFLowScurve+0x914>)
 8009dfc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e00:	f7f6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8009e04:	4603      	mov	r3, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4618      	mov	r0, r3
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e10:	f7f6 fbf2 	bl	80005f8 <__aeabi_dmul>
 8009e14:	4603      	mov	r3, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	4618      	mov	r0, r3
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e20:	f7f6 fbea 	bl	80005f8 <__aeabi_dmul>
 8009e24:	4603      	mov	r3, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e36:	f7f6 fbdf 	bl	80005f8 <__aeabi_dmul>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	4618      	mov	r0, r3
 8009e40:	4621      	mov	r1, r4
 8009e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e46:	f7f6 fbd7 	bl	80005f8 <__aeabi_dmul>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	4618      	mov	r0, r3
 8009e50:	4621      	mov	r1, r4
 8009e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e56:	f7f6 fbcf 	bl	80005f8 <__aeabi_dmul>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4618      	mov	r0, r3
 8009e60:	4621      	mov	r1, r4
 8009e62:	f04f 0200 	mov.w	r2, #0
 8009e66:	4b77      	ldr	r3, [pc, #476]	; (800a044 <scaraFLowScurve+0x918>)
 8009e68:	f7f6 fcf0 	bl	800084c <__aeabi_ddiv>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e72:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009e76:	e32f      	b.n	800a4d8 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009e80:	f7f6 fe36 	bl	8000af0 <__aeabi_dcmple>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80de 	beq.w	800a048 <scaraFLowScurve+0x91c>
 8009e8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	f7f6 f9fa 	bl	800028c <__adddf3>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ea0:	f7f6 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80ce 	beq.w	800a048 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8009eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009eb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009eb4:	f7f6 f9e8 	bl	8000288 <__aeabi_dsub>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ec4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ec8:	f7f6 fb96 	bl	80005f8 <__aeabi_dmul>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	4625      	mov	r5, r4
 8009ed2:	461c      	mov	r4, r3
 8009ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ed8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009edc:	f7f6 fb8c 	bl	80005f8 <__aeabi_dmul>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 f9ce 	bl	8000288 <__aeabi_dsub>
 8009eec:	4603      	mov	r3, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f00:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f04:	f7f6 fb78 	bl	80005f8 <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4619      	mov	r1, r3
 8009f10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f14:	f7f6 fb70 	bl	80005f8 <__aeabi_dmul>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7f6 f9b4 	bl	800028c <__adddf3>
 8009f24:	4603      	mov	r3, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	4625      	mov	r5, r4
 8009f2a:	461c      	mov	r4, r3
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	4b43      	ldr	r3, [pc, #268]	; (800a040 <scaraFLowScurve+0x914>)
 8009f32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f36:	f7f6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4610      	mov	r0, r2
 8009f40:	4619      	mov	r1, r3
 8009f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f46:	f7f6 fb57 	bl	80005f8 <__aeabi_dmul>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4610      	mov	r0, r2
 8009f50:	4619      	mov	r1, r3
 8009f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 f991 	bl	8000288 <__aeabi_dsub>
 8009f66:	4603      	mov	r3, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f80:	f7f6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4620      	mov	r0, r4
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7f6 f97e 	bl	800028c <__adddf3>
 8009f90:	4603      	mov	r3, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	4625      	mov	r5, r4
 8009f96:	461c      	mov	r4, r3
 8009f98:	f04f 0200 	mov.w	r2, #0
 8009f9c:	4b28      	ldr	r3, [pc, #160]	; (800a040 <scaraFLowScurve+0x914>)
 8009f9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009fa2:	f7f6 fb29 	bl	80005f8 <__aeabi_dmul>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4610      	mov	r0, r2
 8009fac:	4619      	mov	r1, r3
 8009fae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009fb2:	f7f6 fb21 	bl	80005f8 <__aeabi_dmul>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4610      	mov	r0, r2
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fc2:	f7f6 fb19 	bl	80005f8 <__aeabi_dmul>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4610      	mov	r0, r2
 8009fcc:	4619      	mov	r1, r3
 8009fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fd2:	f7f6 fb11 	bl	80005f8 <__aeabi_dmul>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4620      	mov	r0, r4
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7f6 f955 	bl	800028c <__adddf3>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	4625      	mov	r5, r4
 8009fe8:	461c      	mov	r4, r3
 8009fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ff2:	f7f6 fb01 	bl	80005f8 <__aeabi_dmul>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a002:	f7f6 faf9 	bl	80005f8 <__aeabi_dmul>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4610      	mov	r0, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a012:	f7f6 faf1 	bl	80005f8 <__aeabi_dmul>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4610      	mov	r0, r2
 800a01c:	4619      	mov	r1, r3
 800a01e:	f04f 0200 	mov.w	r2, #0
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <scaraFLowScurve+0x918>)
 800a024:	f7f6 fc12 	bl	800084c <__aeabi_ddiv>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4620      	mov	r0, r4
 800a02e:	4629      	mov	r1, r5
 800a030:	f7f6 f92a 	bl	8000288 <__aeabi_dsub>
 800a034:	4603      	mov	r3, r0
 800a036:	460c      	mov	r4, r1
 800a038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a03e:	e24b      	b.n	800a4d8 <scaraFLowScurve+0xdac>
 800a040:	3fe00000 	.word	0x3fe00000
 800a044:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 800a048:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	f7f6 f91c 	bl	800028c <__adddf3>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a05c:	f7f6 fd52 	bl	8000b04 <__aeabi_dcmpge>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d04b      	beq.n	800a0fe <scaraFLowScurve+0x9d2>
 800a066:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	f7f6 f90d 	bl	800028c <__adddf3>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4610      	mov	r0, r2
 800a078:	4619      	mov	r1, r3
 800a07a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a07e:	f7f6 f905 	bl	800028c <__adddf3>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a08a:	f7f6 fd27 	bl	8000adc <__aeabi_dcmplt>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d034      	beq.n	800a0fe <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 800a094:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	f7f6 f8f6 	bl	800028c <__adddf3>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a0ac:	f7f6 f8ec 	bl	8000288 <__aeabi_dsub>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 800a0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	f04f 0400 	mov.w	r4, #0
 800a0c2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800a0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ce:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d4:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800a0de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0e2:	f7f6 fa89 	bl	80005f8 <__aeabi_dmul>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f7f6 f8cd 	bl	800028c <__adddf3>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a0fc:	e1ec      	b.n	800a4d8 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 800a0fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	f7f6 f8c1 	bl	800028c <__adddf3>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4610      	mov	r0, r2
 800a110:	4619      	mov	r1, r3
 800a112:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a116:	f7f6 f8b9 	bl	800028c <__adddf3>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a122:	f7f6 fcef 	bl	8000b04 <__aeabi_dcmpge>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 80af 	beq.w	800a28c <scaraFLowScurve+0xb60>
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	4b53      	ldr	r3, [pc, #332]	; (800a280 <scaraFLowScurve+0xb54>)
 800a134:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a138:	f7f6 fa5e 	bl	80005f8 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4610      	mov	r0, r2
 800a142:	4619      	mov	r1, r3
 800a144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a148:	f7f6 f8a0 	bl	800028c <__adddf3>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a154:	f7f6 fcc2 	bl	8000adc <__aeabi_dcmplt>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 8096 	beq.w	800a28c <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 800a160:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	f7f6 f890 	bl	800028c <__adddf3>
 800a16c:	4603      	mov	r3, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4618      	mov	r0, r3
 800a172:	4621      	mov	r1, r4
 800a174:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a178:	f7f6 f888 	bl	800028c <__adddf3>
 800a17c:	4603      	mov	r3, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	461a      	mov	r2, r3
 800a182:	4623      	mov	r3, r4
 800a184:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a188:	f7f6 f87e 	bl	8000288 <__aeabi_dsub>
 800a18c:	4603      	mov	r3, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800a194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a19a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a19e:	607b      	str	r3, [r7, #4]
 800a1a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1a8:	f7f6 fa26 	bl	80005f8 <__aeabi_dmul>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	4b30      	ldr	r3, [pc, #192]	; (800a284 <scaraFLowScurve+0xb58>)
 800a1c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a1c6:	f7f6 fa17 	bl	80005f8 <__aeabi_dmul>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1d6:	f7f6 fa0f 	bl	80005f8 <__aeabi_dmul>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1e6:	f7f6 fa07 	bl	80005f8 <__aeabi_dmul>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f7f6 f849 	bl	8000288 <__aeabi_dsub>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fc:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800a20c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a210:	f7f6 f9f2 	bl	80005f8 <__aeabi_dmul>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4620      	mov	r0, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	f7f6 f836 	bl	800028c <__adddf3>
 800a220:	4603      	mov	r3, r0
 800a222:	460c      	mov	r4, r1
 800a224:	4625      	mov	r5, r4
 800a226:	461c      	mov	r4, r3
 800a228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a22c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a230:	f7f6 f9e2 	bl	80005f8 <__aeabi_dmul>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4610      	mov	r0, r2
 800a23a:	4619      	mov	r1, r3
 800a23c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a240:	f7f6 f9da 	bl	80005f8 <__aeabi_dmul>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4610      	mov	r0, r2
 800a24a:	4619      	mov	r1, r3
 800a24c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a250:	f7f6 f9d2 	bl	80005f8 <__aeabi_dmul>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4610      	mov	r0, r2
 800a25a:	4619      	mov	r1, r3
 800a25c:	f04f 0200 	mov.w	r2, #0
 800a260:	4b09      	ldr	r3, [pc, #36]	; (800a288 <scaraFLowScurve+0xb5c>)
 800a262:	f7f6 faf3 	bl	800084c <__aeabi_ddiv>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4620      	mov	r0, r4
 800a26c:	4629      	mov	r1, r5
 800a26e:	f7f6 f80b 	bl	8000288 <__aeabi_dsub>
 800a272:	4603      	mov	r3, r0
 800a274:	460c      	mov	r4, r1
 800a276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a278:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a27c:	e12c      	b.n	800a4d8 <scaraFLowScurve+0xdac>
 800a27e:	bf00      	nop
 800a280:	40080000 	.word	0x40080000
 800a284:	3fe00000 	.word	0x3fe00000
 800a288:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 800a28c:	f04f 0200 	mov.w	r2, #0
 800a290:	4b94      	ldr	r3, [pc, #592]	; (800a4e4 <scaraFLowScurve+0xdb8>)
 800a292:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a296:	f7f6 f9af 	bl	80005f8 <__aeabi_dmul>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	4610      	mov	r0, r2
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a2a6:	f7f5 fff1 	bl	800028c <__adddf3>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a2b2:	f7f6 fc27 	bl	8000b04 <__aeabi_dcmpge>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 80f6 	beq.w	800a4aa <scaraFLowScurve+0xd7e>
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	4b89      	ldr	r3, [pc, #548]	; (800a4e8 <scaraFLowScurve+0xdbc>)
 800a2c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a2d8:	f7f5 ffd8 	bl	800028c <__adddf3>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a2e4:	f7f6 fbfa 	bl	8000adc <__aeabi_dcmplt>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 80dd 	beq.w	800a4aa <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 800a2f0:	f04f 0200 	mov.w	r2, #0
 800a2f4:	4b7b      	ldr	r3, [pc, #492]	; (800a4e4 <scaraFLowScurve+0xdb8>)
 800a2f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a2fa:	f7f6 f97d 	bl	80005f8 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4610      	mov	r0, r2
 800a304:	4619      	mov	r1, r3
 800a306:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a30a:	f7f5 ffbf 	bl	800028c <__adddf3>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a316:	f7f5 ffb7 	bl	8000288 <__aeabi_dsub>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800a322:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800a324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a326:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a32a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	f7f6 f961 	bl	80005f8 <__aeabi_dmul>
 800a336:	4603      	mov	r3, r0
 800a338:	460c      	mov	r4, r1
 800a33a:	4625      	mov	r5, r4
 800a33c:	461c      	mov	r4, r3
 800a33e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a342:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a346:	f7f6 f957 	bl	80005f8 <__aeabi_dmul>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7f5 ff9b 	bl	800028c <__adddf3>
 800a356:	4603      	mov	r3, r0
 800a358:	460c      	mov	r4, r1
 800a35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800a366:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a36a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a36e:	f7f6 f943 	bl	80005f8 <__aeabi_dmul>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4610      	mov	r0, r2
 800a378:	4619      	mov	r1, r3
 800a37a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a37e:	f7f6 f93b 	bl	80005f8 <__aeabi_dmul>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4620      	mov	r0, r4
 800a388:	4629      	mov	r1, r5
 800a38a:	f7f5 ff7d 	bl	8000288 <__aeabi_dsub>
 800a38e:	4603      	mov	r3, r0
 800a390:	460c      	mov	r4, r1
 800a392:	4625      	mov	r5, r4
 800a394:	461c      	mov	r4, r3
 800a396:	f04f 0200 	mov.w	r2, #0
 800a39a:	4b54      	ldr	r3, [pc, #336]	; (800a4ec <scaraFLowScurve+0xdc0>)
 800a39c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3b0:	f7f6 f922 	bl	80005f8 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3c0:	f7f6 f91a 	bl	80005f8 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7f5 ff5e 	bl	800028c <__adddf3>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800a3e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3ea:	f7f6 f905 	bl	80005f8 <__aeabi_dmul>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	f7f5 ff49 	bl	800028c <__adddf3>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	4625      	mov	r5, r4
 800a400:	461c      	mov	r4, r3
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	4b39      	ldr	r3, [pc, #228]	; (800a4ec <scaraFLowScurve+0xdc0>)
 800a408:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a40c:	f7f6 f8f4 	bl	80005f8 <__aeabi_dmul>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4610      	mov	r0, r2
 800a416:	4619      	mov	r1, r3
 800a418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a41c:	f7f6 f8ec 	bl	80005f8 <__aeabi_dmul>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4610      	mov	r0, r2
 800a426:	4619      	mov	r1, r3
 800a428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a42c:	f7f6 f8e4 	bl	80005f8 <__aeabi_dmul>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4610      	mov	r0, r2
 800a436:	4619      	mov	r1, r3
 800a438:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4620      	mov	r0, r4
 800a446:	4629      	mov	r1, r5
 800a448:	f7f5 ff1e 	bl	8000288 <__aeabi_dsub>
 800a44c:	4603      	mov	r3, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	4625      	mov	r5, r4
 800a452:	461c      	mov	r4, r3
 800a454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a458:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4610      	mov	r0, r2
 800a466:	4619      	mov	r1, r3
 800a468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a46c:	f7f6 f8c4 	bl	80005f8 <__aeabi_dmul>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4610      	mov	r0, r2
 800a476:	4619      	mov	r1, r3
 800a478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a47c:	f7f6 f8bc 	bl	80005f8 <__aeabi_dmul>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4610      	mov	r0, r2
 800a486:	4619      	mov	r1, r3
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	4b18      	ldr	r3, [pc, #96]	; (800a4f0 <scaraFLowScurve+0xdc4>)
 800a48e:	f7f6 f9dd 	bl	800084c <__aeabi_ddiv>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4620      	mov	r0, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	f7f5 fef7 	bl	800028c <__adddf3>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a4a8:	e016      	b.n	800a4d8 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800a4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ac:	f04f 0300 	mov.w	r3, #0
 800a4b0:	f04f 0400 	mov.w	r4, #0
 800a4b4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ba:	f04f 0300 	mov.w	r3, #0
 800a4be:	f04f 0400 	mov.w	r4, #0
 800a4c2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ce:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a4d2:	e001      	b.n	800a4d8 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3748      	adds	r7, #72	; 0x48
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40080000 	.word	0x40080000
 800a4e8:	40100000 	.word	0x40100000
 800a4ec:	3fe00000 	.word	0x3fe00000
 800a4f0:	40180000 	.word	0x40180000
 800a4f4:	00000000 	.word	0x00000000

0800a4f8 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b088      	sub	sp, #32
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	ed87 0b06 	vstr	d0, [r7, #24]
 800a502:	ed87 1b04 	vstr	d1, [r7, #16]
 800a506:	ed87 2b02 	vstr	d2, [r7, #8]
 800a50a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a50e:	a335      	add	r3, pc, #212	; (adr r3, 800a5e4 <scaraCheckWorkSpace4+0xec>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a518:	f7f6 fae0 	bl	8000adc <__aeabi_dcmplt>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d109      	bne.n	800a536 <scaraCheckWorkSpace4+0x3e>
 800a522:	a332      	add	r3, pc, #200	; (adr r3, 800a5ec <scaraCheckWorkSpace4+0xf4>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a52c:	f7f6 faf4 	bl	8000b18 <__aeabi_dcmpgt>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a536:	2307      	movs	r3, #7
 800a538:	e043      	b.n	800a5c2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a53a:	a32e      	add	r3, pc, #184	; (adr r3, 800a5f4 <scaraCheckWorkSpace4+0xfc>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a544:	f7f6 faca 	bl	8000adc <__aeabi_dcmplt>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d109      	bne.n	800a562 <scaraCheckWorkSpace4+0x6a>
 800a54e:	a32b      	add	r3, pc, #172	; (adr r3, 800a5fc <scaraCheckWorkSpace4+0x104>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a558:	f7f6 fade 	bl	8000b18 <__aeabi_dcmpgt>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a562:	2307      	movs	r3, #7
 800a564:	e02d      	b.n	800a5c2 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a572:	f7f6 fab3 	bl	8000adc <__aeabi_dcmplt>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d109      	bne.n	800a590 <scaraCheckWorkSpace4+0x98>
 800a57c:	f04f 0200 	mov.w	r2, #0
 800a580:	4b17      	ldr	r3, [pc, #92]	; (800a5e0 <scaraCheckWorkSpace4+0xe8>)
 800a582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a586:	f7f6 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a590:	2307      	movs	r3, #7
 800a592:	e016      	b.n	800a5c2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a594:	a30e      	add	r3, pc, #56	; (adr r3, 800a5d0 <scaraCheckWorkSpace4+0xd8>)
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a59e:	f7f6 fa9d 	bl	8000adc <__aeabi_dcmplt>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d109      	bne.n	800a5bc <scaraCheckWorkSpace4+0xc4>
 800a5a8:	a30b      	add	r3, pc, #44	; (adr r3, 800a5d8 <scaraCheckWorkSpace4+0xe0>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5b2:	f7f6 fab1 	bl	8000b18 <__aeabi_dcmpgt>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a5bc:	2307      	movs	r3, #7
 800a5be:	e000      	b.n	800a5c2 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3720      	adds	r7, #32
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	f3af 8000 	nop.w
 800a5d0:	a7777778 	.word	0xa7777778
 800a5d4:	c0088956 	.word	0xc0088956
 800a5d8:	a7777778 	.word	0xa7777778
 800a5dc:	40088956 	.word	0x40088956
 800a5e0:	40590000 	.word	0x40590000
 800a5e4:	74444445 	.word	0x74444445
 800a5e8:	bff95623 	.word	0xbff95623
 800a5ec:	74444445 	.word	0x74444445
 800a5f0:	3ff95623 	.word	0x3ff95623
 800a5f4:	54cccccd 	.word	0x54cccccd
 800a5f8:	c003a649 	.word	0xc003a649
 800a5fc:	54cccccd 	.word	0x54cccccd
 800a600:	4003a649 	.word	0x4003a649
 800a604:	00000000 	.word	0x00000000

0800a608 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	ed87 0b00 	vstr	d0, [r7]
 800a614:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d117      	bne.n	800a64c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a61c:	a33d      	add	r3, pc, #244	; (adr r3, 800a714 <scaraCheckWorkSpace1+0x10c>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a626:	f7f6 fa6d 	bl	8000b04 <__aeabi_dcmpge>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00b      	beq.n	800a648 <scaraCheckWorkSpace1+0x40>
 800a630:	a33a      	add	r3, pc, #232	; (adr r3, 800a71c <scaraCheckWorkSpace1+0x114>)
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a63a:	f7f6 fa59 	bl	8000af0 <__aeabi_dcmple>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	e054      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a648:	2307      	movs	r3, #7
 800a64a:	e052      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d117      	bne.n	800a682 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a652:	a334      	add	r3, pc, #208	; (adr r3, 800a724 <scaraCheckWorkSpace1+0x11c>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a65c:	f7f6 fa52 	bl	8000b04 <__aeabi_dcmpge>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <scaraCheckWorkSpace1+0x76>
 800a666:	a331      	add	r3, pc, #196	; (adr r3, 800a72c <scaraCheckWorkSpace1+0x124>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a670:	f7f6 fa3e 	bl	8000af0 <__aeabi_dcmple>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e039      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a67e:	2307      	movs	r3, #7
 800a680:	e037      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d118      	bne.n	800a6ba <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	f04f 0300 	mov.w	r3, #0
 800a690:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a694:	f7f6 fa36 	bl	8000b04 <__aeabi_dcmpge>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <scaraCheckWorkSpace1+0xae>
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <scaraCheckWorkSpace1+0x108>)
 800a6a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6a8:	f7f6 fa22 	bl	8000af0 <__aeabi_dcmple>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e01d      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a6b6:	2307      	movs	r3, #7
 800a6b8:	e01b      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d117      	bne.n	800a6f0 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a6c0:	a30f      	add	r3, pc, #60	; (adr r3, 800a700 <scaraCheckWorkSpace1+0xf8>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6ca:	f7f6 fa1b 	bl	8000b04 <__aeabi_dcmpge>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <scaraCheckWorkSpace1+0xe4>
 800a6d4:	a30c      	add	r3, pc, #48	; (adr r3, 800a708 <scaraCheckWorkSpace1+0x100>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6de:	f7f6 fa07 	bl	8000af0 <__aeabi_dcmple>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e002      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a6ec:	2307      	movs	r3, #7
 800a6ee:	e000      	b.n	800a6f2 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a6f0:	2301      	movs	r3, #1
	}
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	f3af 8000 	nop.w
 800a700:	daaaaaab 	.word	0xdaaaaaab
 800a704:	c007bc89 	.word	0xc007bc89
 800a708:	daaaaaab 	.word	0xdaaaaaab
 800a70c:	4007bc89 	.word	0x4007bc89
 800a710:	40590000 	.word	0x40590000
 800a714:	daaaaaab 	.word	0xdaaaaaab
 800a718:	bff7bc89 	.word	0xbff7bc89
 800a71c:	daaaaaab 	.word	0xdaaaaaab
 800a720:	3ff7bc89 	.word	0x3ff7bc89
 800a724:	88000000 	.word	0x88000000
 800a728:	c002d97c 	.word	0xc002d97c
 800a72c:	88000000 	.word	0x88000000
 800a730:	4002d97c 	.word	0x4002d97c
 800a734:	00000000 	.word	0x00000000

0800a738 <scaraTestDuty>:
	}
	return SCARA_STATUS_OK;
}

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a738:	b5b0      	push	{r4, r5, r7, lr}
 800a73a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a73e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a740:	f04f 0300 	mov.w	r3, #0
 800a744:	f04f 0400 	mov.w	r4, #0
 800a748:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a74c:	463b      	mov	r3, r7
 800a74e:	4a36      	ldr	r2, [pc, #216]	; (800a828 <scaraTestDuty+0xf0>)
 800a750:	4618      	mov	r0, r3
 800a752:	4611      	mov	r1, r2
 800a754:	23c0      	movs	r3, #192	; 0xc0
 800a756:	461a      	mov	r2, r3
 800a758:	f00b fc10 	bl	8015f7c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a75c:	4b33      	ldr	r3, [pc, #204]	; (800a82c <scaraTestDuty+0xf4>)
 800a75e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a762:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a766:	a32e      	add	r3, pc, #184	; (adr r3, 800a820 <scaraTestDuty+0xe8>)
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	f7f6 f86e 	bl	800084c <__aeabi_ddiv>
 800a770:	4603      	mov	r3, r0
 800a772:	460c      	mov	r4, r1
 800a774:	ec44 3b17 	vmov	d7, r3, r4
 800a778:	eeb0 0a47 	vmov.f32	s0, s14
 800a77c:	eef0 0a67 	vmov.f32	s1, s15
 800a780:	f00f f96a 	bl	8019a58 <ceil>
 800a784:	ec54 3b10 	vmov	r3, r4, d0
 800a788:	4618      	mov	r0, r3
 800a78a:	4621      	mov	r1, r4
 800a78c:	f7f6 f9e4 	bl	8000b58 <__aeabi_d2iz>
 800a790:	4603      	mov	r3, r0
 800a792:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a796:	2301      	movs	r3, #1
 800a798:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a79c:	e032      	b.n	800a804 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a79e:	a320      	add	r3, pc, #128	; (adr r3, 800a820 <scaraTestDuty+0xe8>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a7a8:	f7f5 fd70 	bl	800028c <__adddf3>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a7b4:	463c      	mov	r4, r7
 800a7b6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a7ba:	4668      	mov	r0, sp
 800a7bc:	f104 0308 	add.w	r3, r4, #8
 800a7c0:	22b8      	movs	r2, #184	; 0xb8
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	f00b fbda 	bl	8015f7c <memcpy>
 800a7c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a7d2:	f7fe f973 	bl	8008abc <scaraFlowDuty>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a7dc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d002      	beq.n	800a7ea <scaraTestDuty+0xb2>
			return status;
 800a7e4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a7e8:	e013      	b.n	800a812 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	22c0      	movs	r2, #192	; 0xc0
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f00b fbc1 	bl	8015f7c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a7fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a7fe:	3301      	adds	r3, #1
 800a800:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a804:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a808:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a80c:	429a      	cmp	r2, r3
 800a80e:	dbc6      	blt.n	800a79e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a818:	46bd      	mov	sp, r7
 800a81a:	bdb0      	pop	{r4, r5, r7, pc}
 800a81c:	f3af 8000 	nop.w
 800a820:	40000000 	.word	0x40000000
 800a824:	3f847ae1 	.word	0x3f847ae1
 800a828:	2000b8e8 	.word	0x2000b8e8
 800a82c:	2000ad28 	.word	0x2000ad28

0800a830 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a830:	b480      	push	{r7}
 800a832:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a834:	4b03      	ldr	r3, [pc, #12]	; (800a844 <scaraSetScanFlag+0x14>)
 800a836:	2201      	movs	r2, #1
 800a838:	70da      	strb	r2, [r3, #3]
}
 800a83a:	bf00      	nop
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	2000081c 	.word	0x2000081c

0800a848 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a852:	4a05      	ldr	r2, [pc, #20]	; (800a868 <scaraSetOutput+0x20>)
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fb f854 	bl	8005908 <lowlayer_setOutput>
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	2000081c 	.word	0x2000081c

0800a86c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a876:	4a04      	ldr	r2, [pc, #16]	; (800a888 <scaraSetDutyState+0x1c>)
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	7093      	strb	r3, [r2, #2]
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	2000081c 	.word	0x2000081c

0800a88c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a896:	4a04      	ldr	r2, [pc, #16]	; (800a8a8 <scaraSetMode+0x1c>)
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	7053      	strb	r3, [r2, #1]
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	2000081c 	.word	0x2000081c

0800a8ac <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a8b6:	4a04      	ldr	r2, [pc, #16]	; (800a8c8 <scaraSetMethod+0x1c>)
 800a8b8:	79fb      	ldrb	r3, [r7, #7]
 800a8ba:	7013      	strb	r3, [r2, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	2000081c 	.word	0x2000081c

0800a8cc <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a8d4:	22c0      	movs	r2, #192	; 0xc0
 800a8d6:	4904      	ldr	r1, [pc, #16]	; (800a8e8 <scaraGetPosition+0x1c>)
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f00b fb4f 	bl	8015f7c <memcpy>
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	2000b8e8 	.word	0x2000b8e8

0800a8ec <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a8f4:	22c0      	movs	r2, #192	; 0xc0
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	4803      	ldr	r0, [pc, #12]	; (800a908 <scaraUpdatePosition+0x1c>)
 800a8fa:	f00b fb3f 	bl	8015f7c <memcpy>
}
 800a8fe:	bf00      	nop
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	2000ba68 	.word	0x2000ba68

0800a90c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a910:	4b03      	ldr	r3, [pc, #12]	; (800a920 <scaraGetMode+0x14>)
 800a912:	785b      	ldrb	r3, [r3, #1]
}
 800a914:	4618      	mov	r0, r3
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	2000081c 	.word	0x2000081c

0800a924 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a924:	b480      	push	{r7}
 800a926:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a928:	4b03      	ldr	r3, [pc, #12]	; (800a938 <scaraGetMethod+0x14>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	2000081c 	.word	0x2000081c

0800a93c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <scaraGetDutyState+0x14>)
 800a942:	789b      	ldrb	r3, [r3, #2]
}
 800a944:	4618      	mov	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	2000081c 	.word	0x2000081c

0800a954 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a954:	b480      	push	{r7}
 800a956:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a958:	4b03      	ldr	r3, [pc, #12]	; (800a968 <scaraIsScanLimit+0x14>)
 800a95a:	78db      	ldrb	r3, [r3, #3]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	2000081c 	.word	0x2000081c

0800a96c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a96c:	b590      	push	{r4, r7, lr}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a976:	4b0a      	ldr	r3, [pc, #40]	; (800a9a0 <scaraIsFinish+0x34>)
 800a978:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a97c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a980:	461a      	mov	r2, r3
 800a982:	4623      	mov	r3, r4
 800a984:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a988:	f7f6 f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <scaraIsFinish+0x2a>
		return TRUE;
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a996:	2300      	movs	r3, #0
	}
}
 800a998:	4618      	mov	r0, r3
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd90      	pop	{r4, r7, pc}
 800a9a0:	2000ad28 	.word	0x2000ad28
 800a9a4:	00000000 	.word	0x00000000

0800a9a8 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	b590      	push	{r4, r7, lr}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	f107 0120 	add.w	r1, r7, #32
 800a9b6:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a9ba:	f06f 0303 	mvn.w	r3, #3
 800a9be:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a9c4:	a35c      	add	r3, pc, #368	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f7f5 fe15 	bl	80005f8 <__aeabi_dmul>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7f6 f8bf 	bl	8000b58 <__aeabi_d2iz>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f000 f8aa 	bl	800ab40 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a9f0:	a351      	add	r3, pc, #324	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	4618      	mov	r0, r3
 800aa00:	4621      	mov	r1, r4
 800aa02:	f7f6 f8a9 	bl	8000b58 <__aeabi_d2iz>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	f000 f894 	bl	800ab40 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa18:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800aa1c:	a346      	add	r3, pc, #280	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fde9 	bl	80005f8 <__aeabi_dmul>
 800aa26:	4603      	mov	r3, r0
 800aa28:	460c      	mov	r4, r1
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	f7f6 f893 	bl	8000b58 <__aeabi_d2iz>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3304      	adds	r3, #4
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	4619      	mov	r1, r3
 800aa40:	f000 f87e 	bl	800ab40 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa44:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aa48:	a33b      	add	r3, pc, #236	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fdd3 	bl	80005f8 <__aeabi_dmul>
 800aa52:	4603      	mov	r3, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	4618      	mov	r0, r3
 800aa58:	4621      	mov	r1, r4
 800aa5a:	f7f6 f87d 	bl	8000b58 <__aeabi_d2iz>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3304      	adds	r3, #4
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4413      	add	r3, r2
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	f000 f868 	bl	800ab40 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa70:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800aa74:	a330      	add	r3, pc, #192	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fdbd 	bl	80005f8 <__aeabi_dmul>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	4618      	mov	r0, r3
 800aa84:	4621      	mov	r1, r4
 800aa86:	f7f6 f867 	bl	8000b58 <__aeabi_d2iz>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	4413      	add	r3, r2
 800aa96:	4619      	mov	r1, r3
 800aa98:	f000 f852 	bl	800ab40 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa9c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800aaa0:	a325      	add	r3, pc, #148	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fda7 	bl	80005f8 <__aeabi_dmul>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	460c      	mov	r4, r1
 800aaae:	4618      	mov	r0, r3
 800aab0:	4621      	mov	r1, r4
 800aab2:	f7f6 f851 	bl	8000b58 <__aeabi_d2iz>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3304      	adds	r3, #4
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	4413      	add	r3, r2
 800aac2:	4619      	mov	r1, r3
 800aac4:	f000 f83c 	bl	800ab40 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aac8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aacc:	a31a      	add	r3, pc, #104	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f5 fd91 	bl	80005f8 <__aeabi_dmul>
 800aad6:	4603      	mov	r3, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	4618      	mov	r0, r3
 800aadc:	4621      	mov	r1, r4
 800aade:	f7f6 f83b 	bl	8000b58 <__aeabi_d2iz>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3304      	adds	r3, #4
 800aae6:	60fb      	str	r3, [r7, #12]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	4413      	add	r3, r2
 800aaee:	4619      	mov	r1, r3
 800aaf0:	f000 f826 	bl	800ab40 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aaf4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800aaf8:	a30f      	add	r3, pc, #60	; (adr r3, 800ab38 <scaraPosition_packaging+0x190>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fd7b 	bl	80005f8 <__aeabi_dmul>
 800ab02:	4603      	mov	r3, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	4618      	mov	r0, r3
 800ab08:	4621      	mov	r1, r4
 800ab0a:	f7f6 f825 	bl	8000b58 <__aeabi_d2iz>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3304      	adds	r3, #4
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	4413      	add	r3, r2
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	f000 f810 	bl	800ab40 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3304      	adds	r3, #4
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ab2e:	b002      	add	sp, #8
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	f3af 8000 	nop.w
 800ab38:	00000000 	.word	0x00000000
 800ab3c:	412e8480 	.word	0x412e8480

0800ab40 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	121a      	asrs	r2, r3, #8
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	141a      	asrs	r2, r3, #16
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	3302      	adds	r3, #2
 800ab66:	b2d2      	uxtb	r2, r2
 800ab68:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	161a      	asrs	r2, r3, #24
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	3303      	adds	r3, #3
 800ab72:	b2d2      	uxtb	r2, r2
 800ab74:	701a      	strb	r2, [r3, #0]
}
 800ab76:	bf00      	nop
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	0000      	movs	r0, r0
 800ab84:	0000      	movs	r0, r0
	...

0800ab88 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800ab88:	b590      	push	{r4, r7, lr}
 800ab8a:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800ab8e:	af6c      	add	r7, sp, #432	; 0x1b0
 800ab90:	4602      	mov	r2, r0
 800ab92:	463b      	mov	r3, r7
 800ab94:	6019      	str	r1, [r3, #0]
 800ab96:	1dfb      	adds	r3, r7, #7
 800ab98:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800ab9a:	f107 0308 	add.w	r3, r7, #8
 800ab9e:	2201      	movs	r2, #1
 800aba0:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800aba2:	f107 0308 	add.w	r3, r7, #8
 800aba6:	2200      	movs	r2, #0
 800aba8:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	2201      	movs	r2, #1
 800abb0:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800abb2:	f04f 0300 	mov.w	r3, #0
 800abb6:	f04f 0400 	mov.w	r4, #0
 800abba:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800abbe:	463b      	mov	r3, r7
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dd03      	ble.n	800abce <scaraKeyInit1+0x46>
 800abc6:	463b      	mov	r3, r7
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b0e      	cmp	r3, #14
 800abcc:	dd01      	ble.n	800abd2 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800abce:	2306      	movs	r3, #6
 800abd0:	e2c0      	b.n	800b154 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800abd2:	1dfb      	adds	r3, r7, #7
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	2b07      	cmp	r3, #7
 800abd8:	f200 8298 	bhi.w	800b10c <scaraKeyInit1+0x584>
 800abdc:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <scaraKeyInit1+0x5c>)
 800abde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe2:	bf00      	nop
 800abe4:	0800ac05 	.word	0x0800ac05
 800abe8:	0800aca7 	.word	0x0800aca7
 800abec:	0800ad4d 	.word	0x0800ad4d
 800abf0:	0800adeb 	.word	0x0800adeb
 800abf4:	0800ae8d 	.word	0x0800ae8d
 800abf8:	0800af2b 	.word	0x0800af2b
 800abfc:	0800afcd 	.word	0x0800afcd
 800ac00:	0800b06b 	.word	0x0800b06b
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800ac04:	f107 0208 	add.w	r2, r7, #8
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	f04f 0400 	mov.w	r4, #0
 800ac10:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	2200      	movs	r2, #0
 800ac1a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	2200      	movs	r2, #0
 800ac22:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800ac24:	463b      	mov	r3, r7
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f5 fc78 	bl	8000524 <__aeabi_i2d>
 800ac34:	4603      	mov	r3, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	f107 0208 	add.w	r2, r7, #8
 800ac3c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac40:	f107 0208 	add.w	r2, r7, #8
 800ac44:	f04f 0300 	mov.w	r3, #0
 800ac48:	f04f 0400 	mov.w	r4, #0
 800ac4c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac50:	f107 0208 	add.w	r2, r7, #8
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	f04f 0400 	mov.w	r4, #0
 800ac5c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac60:	f107 0208 	add.w	r2, r7, #8
 800ac64:	f04f 0300 	mov.w	r3, #0
 800ac68:	f04f 0400 	mov.w	r4, #0
 800ac6c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac70:	463b      	mov	r3, r7
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	f7f5 fc56 	bl	8000524 <__aeabi_i2d>
 800ac78:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	4603      	mov	r3, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	4618      	mov	r0, r3
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f7f5 fafa 	bl	800028c <__adddf3>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	f107 0208 	add.w	r2, r7, #8
 800aca0:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aca4:	e232      	b.n	800b10c <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800aca6:	f107 0208 	add.w	r2, r7, #8
 800acaa:	f04f 0300 	mov.w	r3, #0
 800acae:	f04f 0400 	mov.w	r4, #0
 800acb2:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acb6:	f107 0308 	add.w	r3, r7, #8
 800acba:	2200      	movs	r2, #0
 800acbc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800acbe:	f107 0308 	add.w	r3, r7, #8
 800acc2:	2200      	movs	r2, #0
 800acc4:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800acc6:	463b      	mov	r3, r7
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4613      	mov	r3, r2
 800accc:	079b      	lsls	r3, r3, #30
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	1a9b      	subs	r3, r3, r2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7f5 fc25 	bl	8000524 <__aeabi_i2d>
 800acda:	4603      	mov	r3, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	f107 0208 	add.w	r2, r7, #8
 800ace2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ace6:	f107 0208 	add.w	r2, r7, #8
 800acea:	f04f 0300 	mov.w	r3, #0
 800acee:	f04f 0400 	mov.w	r4, #0
 800acf2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800acf6:	f107 0208 	add.w	r2, r7, #8
 800acfa:	f04f 0300 	mov.w	r3, #0
 800acfe:	f04f 0400 	mov.w	r4, #0
 800ad02:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad06:	f107 0208 	add.w	r2, r7, #8
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	f04f 0400 	mov.w	r4, #0
 800ad12:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad16:	463b      	mov	r3, r7
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	f7f5 fc03 	bl	8000524 <__aeabi_i2d>
 800ad1e:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	f7f5 fc67 	bl	80005f8 <__aeabi_dmul>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	4618      	mov	r0, r3
 800ad30:	4621      	mov	r1, r4
 800ad32:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f7f5 faa7 	bl	800028c <__adddf3>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	460c      	mov	r4, r1
 800ad42:	f107 0208 	add.w	r2, r7, #8
 800ad46:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ad4a:	e1df      	b.n	800b10c <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800ad4c:	f107 0208 	add.w	r2, r7, #8
 800ad50:	f04f 0300 	mov.w	r3, #0
 800ad54:	f04f 0400 	mov.w	r4, #0
 800ad58:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad5c:	f107 0308 	add.w	r3, r7, #8
 800ad60:	2200      	movs	r2, #0
 800ad62:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad64:	f107 0308 	add.w	r3, r7, #8
 800ad68:	2200      	movs	r2, #0
 800ad6a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad6c:	f107 0208 	add.w	r2, r7, #8
 800ad70:	f04f 0300 	mov.w	r3, #0
 800ad74:	f04f 0400 	mov.w	r4, #0
 800ad78:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7f5 fbcc 	bl	8000524 <__aeabi_i2d>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	f107 0208 	add.w	r2, r7, #8
 800ad94:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ad98:	f107 0208 	add.w	r2, r7, #8
 800ad9c:	f04f 0300 	mov.w	r3, #0
 800ada0:	f04f 0400 	mov.w	r4, #0
 800ada4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ada8:	f107 0208 	add.w	r2, r7, #8
 800adac:	f04f 0300 	mov.w	r3, #0
 800adb0:	f04f 0400 	mov.w	r4, #0
 800adb4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800adb8:	463b      	mov	r3, r7
 800adba:	6818      	ldr	r0, [r3, #0]
 800adbc:	f7f5 fbb2 	bl	8000524 <__aeabi_i2d>
 800adc0:	a3e7      	add	r3, pc, #924	; (adr r3, 800b160 <scaraKeyInit1+0x5d8>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fc17 	bl	80005f8 <__aeabi_dmul>
 800adca:	4603      	mov	r3, r0
 800adcc:	460c      	mov	r4, r1
 800adce:	4618      	mov	r0, r3
 800add0:	4621      	mov	r1, r4
 800add2:	a3e5      	add	r3, pc, #916	; (adr r3, 800b168 <scaraKeyInit1+0x5e0>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f7f5 fa58 	bl	800028c <__adddf3>
 800addc:	4603      	mov	r3, r0
 800adde:	460c      	mov	r4, r1
 800ade0:	f107 0208 	add.w	r2, r7, #8
 800ade4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ade8:	e190      	b.n	800b10c <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800adea:	f107 0208 	add.w	r2, r7, #8
 800adee:	f04f 0300 	mov.w	r3, #0
 800adf2:	f04f 0400 	mov.w	r4, #0
 800adf6:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800adfa:	f107 0308 	add.w	r3, r7, #8
 800adfe:	2200      	movs	r2, #0
 800ae00:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae02:	f107 0308 	add.w	r3, r7, #8
 800ae06:	2200      	movs	r2, #0
 800ae08:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae0a:	f107 0208 	add.w	r2, r7, #8
 800ae0e:	f04f 0300 	mov.w	r3, #0
 800ae12:	f04f 0400 	mov.w	r4, #0
 800ae16:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	079b      	lsls	r3, r3, #30
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	1a9b      	subs	r3, r3, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7f5 fb7b 	bl	8000524 <__aeabi_i2d>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	460c      	mov	r4, r1
 800ae32:	f107 0208 	add.w	r2, r7, #8
 800ae36:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ae3a:	f107 0208 	add.w	r2, r7, #8
 800ae3e:	f04f 0300 	mov.w	r3, #0
 800ae42:	f04f 0400 	mov.w	r4, #0
 800ae46:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ae4a:	f107 0208 	add.w	r2, r7, #8
 800ae4e:	f04f 0300 	mov.w	r3, #0
 800ae52:	f04f 0400 	mov.w	r4, #0
 800ae56:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae5a:	463b      	mov	r3, r7
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f7f5 fb61 	bl	8000524 <__aeabi_i2d>
 800ae62:	a3bf      	add	r3, pc, #764	; (adr r3, 800b160 <scaraKeyInit1+0x5d8>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f7f5 fbc6 	bl	80005f8 <__aeabi_dmul>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	4618      	mov	r0, r3
 800ae72:	4621      	mov	r1, r4
 800ae74:	a3bc      	add	r3, pc, #752	; (adr r3, 800b168 <scaraKeyInit1+0x5e0>)
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	f7f5 fa07 	bl	800028c <__adddf3>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	460c      	mov	r4, r1
 800ae82:	f107 0208 	add.w	r2, r7, #8
 800ae86:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ae8a:	e13f      	b.n	800b10c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ae8c:	f107 0208 	add.w	r2, r7, #8
 800ae90:	f04f 0300 	mov.w	r3, #0
 800ae94:	f04f 0400 	mov.w	r4, #0
 800ae98:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	2200      	movs	r2, #0
 800aea2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aea4:	f107 0308 	add.w	r3, r7, #8
 800aea8:	2200      	movs	r2, #0
 800aeaa:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aeac:	f107 0208 	add.w	r2, r7, #8
 800aeb0:	f04f 0300 	mov.w	r3, #0
 800aeb4:	f04f 0400 	mov.w	r4, #0
 800aeb8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aebc:	f107 0208 	add.w	r2, r7, #8
 800aec0:	f04f 0300 	mov.w	r3, #0
 800aec4:	f04f 0400 	mov.w	r4, #0
 800aec8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800aecc:	463b      	mov	r3, r7
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f5 fb24 	bl	8000524 <__aeabi_i2d>
 800aedc:	4603      	mov	r3, r0
 800aede:	460c      	mov	r4, r1
 800aee0:	f107 0208 	add.w	r2, r7, #8
 800aee4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aee8:	f107 0208 	add.w	r2, r7, #8
 800aeec:	f04f 0300 	mov.w	r3, #0
 800aef0:	f04f 0400 	mov.w	r4, #0
 800aef4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aef8:	463b      	mov	r3, r7
 800aefa:	6818      	ldr	r0, [r3, #0]
 800aefc:	f7f5 fb12 	bl	8000524 <__aeabi_i2d>
 800af00:	a397      	add	r3, pc, #604	; (adr r3, 800b160 <scaraKeyInit1+0x5d8>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	f7f5 fb77 	bl	80005f8 <__aeabi_dmul>
 800af0a:	4603      	mov	r3, r0
 800af0c:	460c      	mov	r4, r1
 800af0e:	4618      	mov	r0, r3
 800af10:	4621      	mov	r1, r4
 800af12:	a395      	add	r3, pc, #596	; (adr r3, 800b168 <scaraKeyInit1+0x5e0>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f7f5 f9b8 	bl	800028c <__adddf3>
 800af1c:	4603      	mov	r3, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	f107 0208 	add.w	r2, r7, #8
 800af24:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800af28:	e0f0      	b.n	800b10c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800af2a:	f107 0208 	add.w	r2, r7, #8
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	f04f 0400 	mov.w	r4, #0
 800af36:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800af3a:	f107 0308 	add.w	r3, r7, #8
 800af3e:	2200      	movs	r2, #0
 800af40:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	2200      	movs	r2, #0
 800af48:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800af4a:	f107 0208 	add.w	r2, r7, #8
 800af4e:	f04f 0300 	mov.w	r3, #0
 800af52:	f04f 0400 	mov.w	r4, #0
 800af56:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800af5a:	f107 0208 	add.w	r2, r7, #8
 800af5e:	f04f 0300 	mov.w	r3, #0
 800af62:	f04f 0400 	mov.w	r4, #0
 800af66:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800af6a:	463b      	mov	r3, r7
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4613      	mov	r3, r2
 800af70:	079b      	lsls	r3, r3, #30
 800af72:	1a9b      	subs	r3, r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	1a9b      	subs	r3, r3, r2
 800af78:	4618      	mov	r0, r3
 800af7a:	f7f5 fad3 	bl	8000524 <__aeabi_i2d>
 800af7e:	4603      	mov	r3, r0
 800af80:	460c      	mov	r4, r1
 800af82:	f107 0208 	add.w	r2, r7, #8
 800af86:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800af8a:	f107 0208 	add.w	r2, r7, #8
 800af8e:	f04f 0300 	mov.w	r3, #0
 800af92:	f04f 0400 	mov.w	r4, #0
 800af96:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800af9a:	463b      	mov	r3, r7
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	f7f5 fac1 	bl	8000524 <__aeabi_i2d>
 800afa2:	a36f      	add	r3, pc, #444	; (adr r3, 800b160 <scaraKeyInit1+0x5d8>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 fb26 	bl	80005f8 <__aeabi_dmul>
 800afac:	4603      	mov	r3, r0
 800afae:	460c      	mov	r4, r1
 800afb0:	4618      	mov	r0, r3
 800afb2:	4621      	mov	r1, r4
 800afb4:	a36c      	add	r3, pc, #432	; (adr r3, 800b168 <scaraKeyInit1+0x5e0>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f7f5 f967 	bl	800028c <__adddf3>
 800afbe:	4603      	mov	r3, r0
 800afc0:	460c      	mov	r4, r1
 800afc2:	f107 0208 	add.w	r2, r7, #8
 800afc6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800afca:	e09f      	b.n	800b10c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800afcc:	f107 0208 	add.w	r2, r7, #8
 800afd0:	f04f 0300 	mov.w	r3, #0
 800afd4:	f04f 0400 	mov.w	r4, #0
 800afd8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	2200      	movs	r2, #0
 800afe2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	2200      	movs	r2, #0
 800afea:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800afec:	f107 0208 	add.w	r2, r7, #8
 800aff0:	f04f 0300 	mov.w	r3, #0
 800aff4:	f04f 0400 	mov.w	r4, #0
 800aff8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800affc:	f107 0208 	add.w	r2, r7, #8
 800b000:	f04f 0300 	mov.w	r3, #0
 800b004:	f04f 0400 	mov.w	r4, #0
 800b008:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b00c:	f107 0208 	add.w	r2, r7, #8
 800b010:	f04f 0300 	mov.w	r3, #0
 800b014:	f04f 0400 	mov.w	r4, #0
 800b018:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800b01c:	463b      	mov	r3, r7
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	4613      	mov	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	4618      	mov	r0, r3
 800b028:	f7f5 fa7c 	bl	8000524 <__aeabi_i2d>
 800b02c:	4603      	mov	r3, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	f107 0208 	add.w	r2, r7, #8
 800b034:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b038:	463b      	mov	r3, r7
 800b03a:	6818      	ldr	r0, [r3, #0]
 800b03c:	f7f5 fa72 	bl	8000524 <__aeabi_i2d>
 800b040:	a347      	add	r3, pc, #284	; (adr r3, 800b160 <scaraKeyInit1+0x5d8>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	f7f5 fad7 	bl	80005f8 <__aeabi_dmul>
 800b04a:	4603      	mov	r3, r0
 800b04c:	460c      	mov	r4, r1
 800b04e:	4618      	mov	r0, r3
 800b050:	4621      	mov	r1, r4
 800b052:	a345      	add	r3, pc, #276	; (adr r3, 800b168 <scaraKeyInit1+0x5e0>)
 800b054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b058:	f7f5 f918 	bl	800028c <__adddf3>
 800b05c:	4603      	mov	r3, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	f107 0208 	add.w	r2, r7, #8
 800b064:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800b068:	e050      	b.n	800b10c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800b06a:	f107 0208 	add.w	r2, r7, #8
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	f04f 0400 	mov.w	r4, #0
 800b076:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	2200      	movs	r2, #0
 800b080:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b082:	f107 0308 	add.w	r3, r7, #8
 800b086:	2200      	movs	r2, #0
 800b088:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b08a:	f107 0208 	add.w	r2, r7, #8
 800b08e:	f04f 0300 	mov.w	r3, #0
 800b092:	f04f 0400 	mov.w	r4, #0
 800b096:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	f04f 0300 	mov.w	r3, #0
 800b0a2:	f04f 0400 	mov.w	r4, #0
 800b0a6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b0aa:	f107 0208 	add.w	r2, r7, #8
 800b0ae:	f04f 0300 	mov.w	r3, #0
 800b0b2:	f04f 0400 	mov.w	r4, #0
 800b0b6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800b0ba:	463b      	mov	r3, r7
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	079b      	lsls	r3, r3, #30
 800b0c2:	1a9b      	subs	r3, r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	1a9b      	subs	r3, r3, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7f5 fa2b 	bl	8000524 <__aeabi_i2d>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	f107 0208 	add.w	r2, r7, #8
 800b0d6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b0da:	463b      	mov	r3, r7
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f7f5 fa21 	bl	8000524 <__aeabi_i2d>
 800b0e2:	a31f      	add	r3, pc, #124	; (adr r3, 800b160 <scaraKeyInit1+0x5d8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 fa86 	bl	80005f8 <__aeabi_dmul>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	a31c      	add	r3, pc, #112	; (adr r3, 800b168 <scaraKeyInit1+0x5e0>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f7f5 f8c7 	bl	800028c <__adddf3>
 800b0fe:	4603      	mov	r3, r0
 800b100:	460c      	mov	r4, r1
 800b102:	f107 0208 	add.w	r2, r7, #8
 800b106:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800b10a:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800b10c:	f107 0408 	add.w	r4, r7, #8
 800b110:	4668      	mov	r0, sp
 800b112:	f104 0310 	add.w	r3, r4, #16
 800b116:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800b11a:	4619      	mov	r1, r3
 800b11c:	f00a ff2e 	bl	8015f7c <memcpy>
 800b120:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b124:	f7fa fc3c 	bl	80059a0 <scaraInitDuty>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800b12e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10b      	bne.n	800b14e <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800b136:	f7ff faff 	bl	800a738 <scaraTestDuty>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800b140:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b144:	2b00      	cmp	r3, #0
 800b146:	d005      	beq.n	800b154 <scaraKeyInit1+0x5cc>
			return status;
 800b148:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b14c:	e002      	b.n	800b154 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800b14e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b152:	e7ff      	b.n	800b154 <scaraKeyInit1+0x5cc>
	}
}
 800b154:	4618      	mov	r0, r3
 800b156:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd90      	pop	{r4, r7, pc}
 800b15e:	bf00      	nop
 800b160:	9999999a 	.word	0x9999999a
 800b164:	3fa99999 	.word	0x3fa99999
 800b168:	9999999a 	.word	0x9999999a
 800b16c:	3fe99999 	.word	0x3fe99999

0800b170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b176:	2300      	movs	r3, #0
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	4b12      	ldr	r3, [pc, #72]	; (800b1c4 <HAL_MspInit+0x54>)
 800b17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17e:	4a11      	ldr	r2, [pc, #68]	; (800b1c4 <HAL_MspInit+0x54>)
 800b180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b184:	6453      	str	r3, [r2, #68]	; 0x44
 800b186:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <HAL_MspInit+0x54>)
 800b188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b18e:	607b      	str	r3, [r7, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b192:	2300      	movs	r3, #0
 800b194:	603b      	str	r3, [r7, #0]
 800b196:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <HAL_MspInit+0x54>)
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	4a0a      	ldr	r2, [pc, #40]	; (800b1c4 <HAL_MspInit+0x54>)
 800b19c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1a0:	6413      	str	r3, [r2, #64]	; 0x40
 800b1a2:	4b08      	ldr	r3, [pc, #32]	; (800b1c4 <HAL_MspInit+0x54>)
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	210f      	movs	r1, #15
 800b1b2:	f06f 0001 	mvn.w	r0, #1
 800b1b6:	f000 fbe7 	bl	800b988 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	40023800 	.word	0x40023800

0800b1c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b08c      	sub	sp, #48	; 0x30
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b1d8:	2200      	movs	r2, #0
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	2036      	movs	r0, #54	; 0x36
 800b1de:	f000 fbd3 	bl	800b988 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b1e2:	2036      	movs	r0, #54	; 0x36
 800b1e4:	f000 fbec 	bl	800b9c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	4b1f      	ldr	r3, [pc, #124]	; (800b26c <HAL_InitTick+0xa4>)
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f0:	4a1e      	ldr	r2, [pc, #120]	; (800b26c <HAL_InitTick+0xa4>)
 800b1f2:	f043 0310 	orr.w	r3, r3, #16
 800b1f6:	6413      	str	r3, [r2, #64]	; 0x40
 800b1f8:	4b1c      	ldr	r3, [pc, #112]	; (800b26c <HAL_InitTick+0xa4>)
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	f003 0310 	and.w	r3, r3, #16
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b204:	f107 0210 	add.w	r2, r7, #16
 800b208:	f107 0314 	add.w	r3, r7, #20
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f002 ff72 	bl	800e0f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b214:	f002 ff48 	bl	800e0a8 <HAL_RCC_GetPCLK1Freq>
 800b218:	4603      	mov	r3, r0
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	4a13      	ldr	r2, [pc, #76]	; (800b270 <HAL_InitTick+0xa8>)
 800b222:	fba2 2303 	umull	r2, r3, r2, r3
 800b226:	0c9b      	lsrs	r3, r3, #18
 800b228:	3b01      	subs	r3, #1
 800b22a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b22c:	4b11      	ldr	r3, [pc, #68]	; (800b274 <HAL_InitTick+0xac>)
 800b22e:	4a12      	ldr	r2, [pc, #72]	; (800b278 <HAL_InitTick+0xb0>)
 800b230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b232:	4b10      	ldr	r3, [pc, #64]	; (800b274 <HAL_InitTick+0xac>)
 800b234:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b238:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b23a:	4a0e      	ldr	r2, [pc, #56]	; (800b274 <HAL_InitTick+0xac>)
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b240:	4b0c      	ldr	r3, [pc, #48]	; (800b274 <HAL_InitTick+0xac>)
 800b242:	2200      	movs	r2, #0
 800b244:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b246:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <HAL_InitTick+0xac>)
 800b248:	2200      	movs	r2, #0
 800b24a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b24c:	4809      	ldr	r0, [pc, #36]	; (800b274 <HAL_InitTick+0xac>)
 800b24e:	f002 ff85 	bl	800e15c <HAL_TIM_Base_Init>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d104      	bne.n	800b262 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b258:	4806      	ldr	r0, [pc, #24]	; (800b274 <HAL_InitTick+0xac>)
 800b25a:	f002 ffce 	bl	800e1fa <HAL_TIM_Base_Start_IT>
 800b25e:	4603      	mov	r3, r0
 800b260:	e000      	b.n	800b264 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
}
 800b264:	4618      	mov	r0, r3
 800b266:	3730      	adds	r7, #48	; 0x30
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	40023800 	.word	0x40023800
 800b270:	431bde83 	.word	0x431bde83
 800b274:	2000bb28 	.word	0x2000bb28
 800b278:	40001000 	.word	0x40001000

0800b27c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b280:	bf00      	nop
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
	...

0800b28c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b290:	2162      	movs	r1, #98	; 0x62
 800b292:	4802      	ldr	r0, [pc, #8]	; (800b29c <HardFault_Handler+0x10>)
 800b294:	f7f6 ff46 	bl	8002124 <LOG_REPORT>
 800b298:	e7fa      	b.n	800b290 <HardFault_Handler+0x4>
 800b29a:	bf00      	nop
 800b29c:	0801b688 	.word	0x0801b688

0800b2a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b2a4:	2172      	movs	r1, #114	; 0x72
 800b2a6:	4802      	ldr	r0, [pc, #8]	; (800b2b0 <MemManage_Handler+0x10>)
 800b2a8:	f7f6 ff3c 	bl	8002124 <LOG_REPORT>
 800b2ac:	e7fa      	b.n	800b2a4 <MemManage_Handler+0x4>
 800b2ae:	bf00      	nop
 800b2b0:	0801b6a0 	.word	0x0801b6a0

0800b2b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b2b8:	2182      	movs	r1, #130	; 0x82
 800b2ba:	4802      	ldr	r0, [pc, #8]	; (800b2c4 <BusFault_Handler+0x10>)
 800b2bc:	f7f6 ff32 	bl	8002124 <LOG_REPORT>
 800b2c0:	e7fa      	b.n	800b2b8 <BusFault_Handler+0x4>
 800b2c2:	bf00      	nop
 800b2c4:	0801b6b4 	.word	0x0801b6b4

0800b2c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b2cc:	e7fe      	b.n	800b2cc <UsageFault_Handler+0x4>

0800b2ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b2d2:	bf00      	nop
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b2e0:	4802      	ldr	r0, [pc, #8]	; (800b2ec <DMA1_Stream4_IRQHandler+0x10>)
 800b2e2:	f000 fca3 	bl	800bc2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b2e6:	bf00      	nop
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2000bc28 	.word	0x2000bc28

0800b2f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b2f4:	4802      	ldr	r0, [pc, #8]	; (800b300 <UART4_IRQHandler+0x10>)
 800b2f6:	f003 fc0f 	bl	800eb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b2fa:	bf00      	nop
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	2000bbe8 	.word	0x2000bbe8

0800b304 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b308:	4802      	ldr	r0, [pc, #8]	; (800b314 <TIM6_DAC_IRQHandler+0x10>)
 800b30a:	f002 ff9a 	bl	800e242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b30e:	bf00      	nop
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	2000bb28 	.word	0x2000bb28

0800b318 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <TIM7_IRQHandler+0x1c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2101      	movs	r1, #1
 800b322:	4618      	mov	r0, r3
 800b324:	f007 fadc 	bl	80128e0 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b328:	4803      	ldr	r0, [pc, #12]	; (800b338 <TIM7_IRQHandler+0x20>)
 800b32a:	f002 ff8a 	bl	800e242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b32e:	bf00      	nop
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	2000ac5c 	.word	0x2000ac5c
 800b338:	2000bba8 	.word	0x2000bba8

0800b33c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b340:	4802      	ldr	r0, [pc, #8]	; (800b34c <OTG_FS_IRQHandler+0x10>)
 800b342:	f001 fa43 	bl	800c7cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b346:	bf00      	nop
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	2000c564 	.word	0x2000c564

0800b350 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b358:	4b11      	ldr	r3, [pc, #68]	; (800b3a0 <_sbrk+0x50>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <_sbrk+0x16>
		heap_end = &end;
 800b360:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <_sbrk+0x50>)
 800b362:	4a10      	ldr	r2, [pc, #64]	; (800b3a4 <_sbrk+0x54>)
 800b364:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b366:	4b0e      	ldr	r3, [pc, #56]	; (800b3a0 <_sbrk+0x50>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b36c:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <_sbrk+0x50>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4413      	add	r3, r2
 800b374:	466a      	mov	r2, sp
 800b376:	4293      	cmp	r3, r2
 800b378:	d907      	bls.n	800b38a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b37a:	f00a fdc5 	bl	8015f08 <__errno>
 800b37e:	4602      	mov	r2, r0
 800b380:	230c      	movs	r3, #12
 800b382:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b384:	f04f 33ff 	mov.w	r3, #4294967295
 800b388:	e006      	b.n	800b398 <_sbrk+0x48>
	}

	heap_end += incr;
 800b38a:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <_sbrk+0x50>)
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4413      	add	r3, r2
 800b392:	4a03      	ldr	r2, [pc, #12]	; (800b3a0 <_sbrk+0x50>)
 800b394:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b396:	68fb      	ldr	r3, [r7, #12]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	20001000 	.word	0x20001000
 800b3a4:	2000c970 	.word	0x2000c970

0800b3a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3ac:	4b08      	ldr	r3, [pc, #32]	; (800b3d0 <SystemInit+0x28>)
 800b3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b2:	4a07      	ldr	r2, [pc, #28]	; (800b3d0 <SystemInit+0x28>)
 800b3b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b3bc:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <SystemInit+0x28>)
 800b3be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b3c2:	609a      	str	r2, [r3, #8]
#endif
}
 800b3c4:	bf00      	nop
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	e000ed00 	.word	0xe000ed00

0800b3d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b3da:	f107 0308 	add.w	r3, r7, #8
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	605a      	str	r2, [r3, #4]
 800b3e4:	609a      	str	r2, [r3, #8]
 800b3e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b3e8:	463b      	mov	r3, r7
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b3f0:	4b1e      	ldr	r3, [pc, #120]	; (800b46c <MX_TIM2_Init+0x98>)
 800b3f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b3f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b3f8:	4b1c      	ldr	r3, [pc, #112]	; (800b46c <MX_TIM2_Init+0x98>)
 800b3fa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b3fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b400:	4b1a      	ldr	r3, [pc, #104]	; (800b46c <MX_TIM2_Init+0x98>)
 800b402:	2200      	movs	r2, #0
 800b404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b406:	4b19      	ldr	r3, [pc, #100]	; (800b46c <MX_TIM2_Init+0x98>)
 800b408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b40c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b40e:	4b17      	ldr	r3, [pc, #92]	; (800b46c <MX_TIM2_Init+0x98>)
 800b410:	2200      	movs	r2, #0
 800b412:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b414:	4b15      	ldr	r3, [pc, #84]	; (800b46c <MX_TIM2_Init+0x98>)
 800b416:	2200      	movs	r2, #0
 800b418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b41a:	4814      	ldr	r0, [pc, #80]	; (800b46c <MX_TIM2_Init+0x98>)
 800b41c:	f002 fe9e 	bl	800e15c <HAL_TIM_Base_Init>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b426:	f7f9 fa41 	bl	80048ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b42a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b42e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b430:	f107 0308 	add.w	r3, r7, #8
 800b434:	4619      	mov	r1, r3
 800b436:	480d      	ldr	r0, [pc, #52]	; (800b46c <MX_TIM2_Init+0x98>)
 800b438:	f003 f80b 	bl	800e452 <HAL_TIM_ConfigClockSource>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b442:	f7f9 fa33 	bl	80048ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b446:	2300      	movs	r3, #0
 800b448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b44e:	463b      	mov	r3, r7
 800b450:	4619      	mov	r1, r3
 800b452:	4806      	ldr	r0, [pc, #24]	; (800b46c <MX_TIM2_Init+0x98>)
 800b454:	f003 fa16 	bl	800e884 <HAL_TIMEx_MasterConfigSynchronization>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b45e:	f7f9 fa25 	bl	80048ac <Error_Handler>
  }

}
 800b462:	bf00      	nop
 800b464:	3718      	adds	r7, #24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	2000bb68 	.word	0x2000bb68

0800b470 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b476:	463b      	mov	r3, r7
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b47e:	4b15      	ldr	r3, [pc, #84]	; (800b4d4 <MX_TIM7_Init+0x64>)
 800b480:	4a15      	ldr	r2, [pc, #84]	; (800b4d8 <MX_TIM7_Init+0x68>)
 800b482:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b484:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <MX_TIM7_Init+0x64>)
 800b486:	2253      	movs	r2, #83	; 0x53
 800b488:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b48a:	4b12      	ldr	r3, [pc, #72]	; (800b4d4 <MX_TIM7_Init+0x64>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b490:	4b10      	ldr	r3, [pc, #64]	; (800b4d4 <MX_TIM7_Init+0x64>)
 800b492:	f242 720f 	movw	r2, #9999	; 0x270f
 800b496:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b498:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <MX_TIM7_Init+0x64>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b49e:	480d      	ldr	r0, [pc, #52]	; (800b4d4 <MX_TIM7_Init+0x64>)
 800b4a0:	f002 fe5c 	bl	800e15c <HAL_TIM_Base_Init>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b4aa:	f7f9 f9ff 	bl	80048ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	4806      	ldr	r0, [pc, #24]	; (800b4d4 <MX_TIM7_Init+0x64>)
 800b4bc:	f003 f9e2 	bl	800e884 <HAL_TIMEx_MasterConfigSynchronization>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b4c6:	f7f9 f9f1 	bl	80048ac <Error_Handler>
  }

}
 800b4ca:	bf00      	nop
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	2000bba8 	.word	0x2000bba8
 800b4d8:	40001400 	.word	0x40001400

0800b4dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ec:	d10e      	bne.n	800b50c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
 800b4f2:	4b16      	ldr	r3, [pc, #88]	; (800b54c <HAL_TIM_Base_MspInit+0x70>)
 800b4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f6:	4a15      	ldr	r2, [pc, #84]	; (800b54c <HAL_TIM_Base_MspInit+0x70>)
 800b4f8:	f043 0301 	orr.w	r3, r3, #1
 800b4fc:	6413      	str	r3, [r2, #64]	; 0x40
 800b4fe:	4b13      	ldr	r3, [pc, #76]	; (800b54c <HAL_TIM_Base_MspInit+0x70>)
 800b500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b50a:	e01a      	b.n	800b542 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a0f      	ldr	r2, [pc, #60]	; (800b550 <HAL_TIM_Base_MspInit+0x74>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d115      	bne.n	800b542 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b516:	2300      	movs	r3, #0
 800b518:	60bb      	str	r3, [r7, #8]
 800b51a:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <HAL_TIM_Base_MspInit+0x70>)
 800b51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51e:	4a0b      	ldr	r2, [pc, #44]	; (800b54c <HAL_TIM_Base_MspInit+0x70>)
 800b520:	f043 0320 	orr.w	r3, r3, #32
 800b524:	6413      	str	r3, [r2, #64]	; 0x40
 800b526:	4b09      	ldr	r3, [pc, #36]	; (800b54c <HAL_TIM_Base_MspInit+0x70>)
 800b528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52a:	f003 0320 	and.w	r3, r3, #32
 800b52e:	60bb      	str	r3, [r7, #8]
 800b530:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b532:	2200      	movs	r2, #0
 800b534:	2105      	movs	r1, #5
 800b536:	2037      	movs	r0, #55	; 0x37
 800b538:	f000 fa26 	bl	800b988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b53c:	2037      	movs	r0, #55	; 0x37
 800b53e:	f000 fa3f 	bl	800b9c0 <HAL_NVIC_EnableIRQ>
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	40023800 	.word	0x40023800
 800b550:	40001400 	.word	0x40001400

0800b554 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b558:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b55a:	4a12      	ldr	r2, [pc, #72]	; (800b5a4 <MX_UART4_Init+0x50>)
 800b55c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b55e:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b564:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b566:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b568:	2200      	movs	r2, #0
 800b56a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b56c:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b56e:	2200      	movs	r2, #0
 800b570:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b572:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b574:	2200      	movs	r2, #0
 800b576:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b578:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b57a:	220c      	movs	r2, #12
 800b57c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b57e:	4b08      	ldr	r3, [pc, #32]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b580:	2200      	movs	r2, #0
 800b582:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b584:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b586:	2200      	movs	r2, #0
 800b588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b58a:	4805      	ldr	r0, [pc, #20]	; (800b5a0 <MX_UART4_Init+0x4c>)
 800b58c:	f003 fa0a 	bl	800e9a4 <HAL_UART_Init>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b596:	f7f9 f989 	bl	80048ac <Error_Handler>
  }

}
 800b59a:	bf00      	nop
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	2000bbe8 	.word	0x2000bbe8
 800b5a4:	40004c00 	.word	0x40004c00

0800b5a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5b0:	f107 0314 	add.w	r3, r7, #20
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	605a      	str	r2, [r3, #4]
 800b5ba:	609a      	str	r2, [r3, #8]
 800b5bc:	60da      	str	r2, [r3, #12]
 800b5be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a34      	ldr	r2, [pc, #208]	; (800b698 <HAL_UART_MspInit+0xf0>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d161      	bne.n	800b68e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	4b33      	ldr	r3, [pc, #204]	; (800b69c <HAL_UART_MspInit+0xf4>)
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d2:	4a32      	ldr	r2, [pc, #200]	; (800b69c <HAL_UART_MspInit+0xf4>)
 800b5d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b5da:	4b30      	ldr	r3, [pc, #192]	; (800b69c <HAL_UART_MspInit+0xf4>)
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5e2:	613b      	str	r3, [r7, #16]
 800b5e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	4b2c      	ldr	r3, [pc, #176]	; (800b69c <HAL_UART_MspInit+0xf4>)
 800b5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ee:	4a2b      	ldr	r2, [pc, #172]	; (800b69c <HAL_UART_MspInit+0xf4>)
 800b5f0:	f043 0301 	orr.w	r3, r3, #1
 800b5f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b5f6:	4b29      	ldr	r3, [pc, #164]	; (800b69c <HAL_UART_MspInit+0xf4>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b602:	2303      	movs	r3, #3
 800b604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b606:	2302      	movs	r3, #2
 800b608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b60a:	2301      	movs	r3, #1
 800b60c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b60e:	2303      	movs	r3, #3
 800b610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b612:	2308      	movs	r3, #8
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b616:	f107 0314 	add.w	r3, r7, #20
 800b61a:	4619      	mov	r1, r3
 800b61c:	4820      	ldr	r0, [pc, #128]	; (800b6a0 <HAL_UART_MspInit+0xf8>)
 800b61e:	f000 fd7b 	bl	800c118 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b622:	4b20      	ldr	r3, [pc, #128]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b624:	4a20      	ldr	r2, [pc, #128]	; (800b6a8 <HAL_UART_MspInit+0x100>)
 800b626:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b628:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b62a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b62e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b630:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b632:	2240      	movs	r2, #64	; 0x40
 800b634:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b636:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b638:	2200      	movs	r2, #0
 800b63a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b63c:	4b19      	ldr	r3, [pc, #100]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b63e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b642:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b644:	4b17      	ldr	r3, [pc, #92]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b646:	2200      	movs	r2, #0
 800b648:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b64a:	4b16      	ldr	r3, [pc, #88]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b650:	4b14      	ldr	r3, [pc, #80]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b652:	2200      	movs	r2, #0
 800b654:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b656:	4b13      	ldr	r3, [pc, #76]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b658:	2200      	movs	r2, #0
 800b65a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b65c:	4b11      	ldr	r3, [pc, #68]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b65e:	2200      	movs	r2, #0
 800b660:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b662:	4810      	ldr	r0, [pc, #64]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b664:	f000 f9ba 	bl	800b9dc <HAL_DMA_Init>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b66e:	f7f9 f91d 	bl	80048ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a0b      	ldr	r2, [pc, #44]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b676:	631a      	str	r2, [r3, #48]	; 0x30
 800b678:	4a0a      	ldr	r2, [pc, #40]	; (800b6a4 <HAL_UART_MspInit+0xfc>)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b67e:	2200      	movs	r2, #0
 800b680:	2105      	movs	r1, #5
 800b682:	2034      	movs	r0, #52	; 0x34
 800b684:	f000 f980 	bl	800b988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b688:	2034      	movs	r0, #52	; 0x34
 800b68a:	f000 f999 	bl	800b9c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b68e:	bf00      	nop
 800b690:	3728      	adds	r7, #40	; 0x28
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	40004c00 	.word	0x40004c00
 800b69c:	40023800 	.word	0x40023800
 800b6a0:	40020000 	.word	0x40020000
 800b6a4:	2000bc28 	.word	0x2000bc28
 800b6a8:	40026070 	.word	0x40026070

0800b6ac <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a0c      	ldr	r2, [pc, #48]	; (800b6ec <HAL_UART_TxCpltCallback+0x40>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d112      	bne.n	800b6e4 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b6be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6c2:	490b      	ldr	r1, [pc, #44]	; (800b6f0 <HAL_UART_TxCpltCallback+0x44>)
 800b6c4:	480b      	ldr	r0, [pc, #44]	; (800b6f4 <HAL_UART_TxCpltCallback+0x48>)
 800b6c6:	f7f9 f990 	bl	80049ea <ringBuff_PopArray>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b6ce:	89fb      	ldrh	r3, [r7, #14]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b6d4:	89fb      	ldrh	r3, [r7, #14]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4905      	ldr	r1, [pc, #20]	; (800b6f0 <HAL_UART_TxCpltCallback+0x44>)
 800b6da:	4807      	ldr	r0, [pc, #28]	; (800b6f8 <HAL_UART_TxCpltCallback+0x4c>)
 800b6dc:	f003 f9b0 	bl	800ea40 <HAL_UART_Transmit_DMA>
 800b6e0:	e000      	b.n	800b6e4 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b6e2:	bf00      	nop
	}
}
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	40004c00 	.word	0x40004c00
 800b6f0:	2000ab58 	.word	0x2000ab58
 800b6f4:	20000410 	.word	0x20000410
 800b6f8:	2000bbe8 	.word	0x2000bbe8

0800b6fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b6fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b734 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b700:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b702:	e003      	b.n	800b70c <LoopCopyDataInit>

0800b704 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b704:	4b0c      	ldr	r3, [pc, #48]	; (800b738 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b706:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b708:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b70a:	3104      	adds	r1, #4

0800b70c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b70c:	480b      	ldr	r0, [pc, #44]	; (800b73c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b70e:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b710:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b712:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b714:	d3f6      	bcc.n	800b704 <CopyDataInit>
  ldr  r2, =_sbss
 800b716:	4a0b      	ldr	r2, [pc, #44]	; (800b744 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b718:	e002      	b.n	800b720 <LoopFillZerobss>

0800b71a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b71a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b71c:	f842 3b04 	str.w	r3, [r2], #4

0800b720 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b720:	4b09      	ldr	r3, [pc, #36]	; (800b748 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b722:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b724:	d3f9      	bcc.n	800b71a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b726:	f7ff fe3f 	bl	800b3a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b72a:	f00a fbf3 	bl	8015f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b72e:	f7f9 f829 	bl	8004784 <main>
  bx  lr    
 800b732:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b734:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b738:	0801bc20 	.word	0x0801bc20
  ldr  r0, =_sdata
 800b73c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b740:	20000b80 	.word	0x20000b80
  ldr  r2, =_sbss
 800b744:	20000b80 	.word	0x20000b80
  ldr  r3, = _ebss
 800b748:	2000c970 	.word	0x2000c970

0800b74c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b74c:	e7fe      	b.n	800b74c <ADC_IRQHandler>
	...

0800b750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b754:	4b0e      	ldr	r3, [pc, #56]	; (800b790 <HAL_Init+0x40>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a0d      	ldr	r2, [pc, #52]	; (800b790 <HAL_Init+0x40>)
 800b75a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b75e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b760:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <HAL_Init+0x40>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a0a      	ldr	r2, [pc, #40]	; (800b790 <HAL_Init+0x40>)
 800b766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b76a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b76c:	4b08      	ldr	r3, [pc, #32]	; (800b790 <HAL_Init+0x40>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a07      	ldr	r2, [pc, #28]	; (800b790 <HAL_Init+0x40>)
 800b772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b778:	2003      	movs	r0, #3
 800b77a:	f000 f8fa 	bl	800b972 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b77e:	2000      	movs	r0, #0
 800b780:	f7ff fd22 	bl	800b1c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b784:	f7ff fcf4 	bl	800b170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	40023c00 	.word	0x40023c00

0800b794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b798:	4b06      	ldr	r3, [pc, #24]	; (800b7b4 <HAL_IncTick+0x20>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	461a      	mov	r2, r3
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <HAL_IncTick+0x24>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	4a04      	ldr	r2, [pc, #16]	; (800b7b8 <HAL_IncTick+0x24>)
 800b7a6:	6013      	str	r3, [r2, #0]
}
 800b7a8:	bf00      	nop
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	20000830 	.word	0x20000830
 800b7b8:	2000bc88 	.word	0x2000bc88

0800b7bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
  return uwTick;
 800b7c0:	4b03      	ldr	r3, [pc, #12]	; (800b7d0 <HAL_GetTick+0x14>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	2000bc88 	.word	0x2000bc88

0800b7d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b7dc:	f7ff ffee 	bl	800b7bc <HAL_GetTick>
 800b7e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ec:	d005      	beq.n	800b7fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <HAL_Delay+0x40>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b7fa:	bf00      	nop
 800b7fc:	f7ff ffde 	bl	800b7bc <HAL_GetTick>
 800b800:	4602      	mov	r2, r0
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d8f7      	bhi.n	800b7fc <HAL_Delay+0x28>
  {
  }
}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	20000830 	.word	0x20000830

0800b818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b828:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <__NVIC_SetPriorityGrouping+0x44>)
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b834:	4013      	ands	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b84a:	4a04      	ldr	r2, [pc, #16]	; (800b85c <__NVIC_SetPriorityGrouping+0x44>)
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	60d3      	str	r3, [r2, #12]
}
 800b850:	bf00      	nop
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	e000ed00 	.word	0xe000ed00

0800b860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b860:	b480      	push	{r7}
 800b862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b864:	4b04      	ldr	r3, [pc, #16]	; (800b878 <__NVIC_GetPriorityGrouping+0x18>)
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	0a1b      	lsrs	r3, r3, #8
 800b86a:	f003 0307 	and.w	r3, r3, #7
}
 800b86e:	4618      	mov	r0, r3
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	e000ed00 	.word	0xe000ed00

0800b87c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	db0b      	blt.n	800b8a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b88e:	79fb      	ldrb	r3, [r7, #7]
 800b890:	f003 021f 	and.w	r2, r3, #31
 800b894:	4907      	ldr	r1, [pc, #28]	; (800b8b4 <__NVIC_EnableIRQ+0x38>)
 800b896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b89a:	095b      	lsrs	r3, r3, #5
 800b89c:	2001      	movs	r0, #1
 800b89e:	fa00 f202 	lsl.w	r2, r0, r2
 800b8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	e000e100 	.word	0xe000e100

0800b8b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	6039      	str	r1, [r7, #0]
 800b8c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	db0a      	blt.n	800b8e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	490c      	ldr	r1, [pc, #48]	; (800b904 <__NVIC_SetPriority+0x4c>)
 800b8d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8d6:	0112      	lsls	r2, r2, #4
 800b8d8:	b2d2      	uxtb	r2, r2
 800b8da:	440b      	add	r3, r1
 800b8dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b8e0:	e00a      	b.n	800b8f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	4908      	ldr	r1, [pc, #32]	; (800b908 <__NVIC_SetPriority+0x50>)
 800b8e8:	79fb      	ldrb	r3, [r7, #7]
 800b8ea:	f003 030f 	and.w	r3, r3, #15
 800b8ee:	3b04      	subs	r3, #4
 800b8f0:	0112      	lsls	r2, r2, #4
 800b8f2:	b2d2      	uxtb	r2, r2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	761a      	strb	r2, [r3, #24]
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	e000e100 	.word	0xe000e100
 800b908:	e000ed00 	.word	0xe000ed00

0800b90c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b089      	sub	sp, #36	; 0x24
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f1c3 0307 	rsb	r3, r3, #7
 800b926:	2b04      	cmp	r3, #4
 800b928:	bf28      	it	cs
 800b92a:	2304      	movcs	r3, #4
 800b92c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	3304      	adds	r3, #4
 800b932:	2b06      	cmp	r3, #6
 800b934:	d902      	bls.n	800b93c <NVIC_EncodePriority+0x30>
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	3b03      	subs	r3, #3
 800b93a:	e000      	b.n	800b93e <NVIC_EncodePriority+0x32>
 800b93c:	2300      	movs	r3, #0
 800b93e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b940:	f04f 32ff 	mov.w	r2, #4294967295
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	fa02 f303 	lsl.w	r3, r2, r3
 800b94a:	43da      	mvns	r2, r3
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	401a      	ands	r2, r3
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b954:	f04f 31ff 	mov.w	r1, #4294967295
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	fa01 f303 	lsl.w	r3, r1, r3
 800b95e:	43d9      	mvns	r1, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b964:	4313      	orrs	r3, r2
         );
}
 800b966:	4618      	mov	r0, r3
 800b968:	3724      	adds	r7, #36	; 0x24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b082      	sub	sp, #8
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7ff ff4c 	bl	800b818 <__NVIC_SetPriorityGrouping>
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b996:	2300      	movs	r3, #0
 800b998:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b99a:	f7ff ff61 	bl	800b860 <__NVIC_GetPriorityGrouping>
 800b99e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	68b9      	ldr	r1, [r7, #8]
 800b9a4:	6978      	ldr	r0, [r7, #20]
 800b9a6:	f7ff ffb1 	bl	800b90c <NVIC_EncodePriority>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7ff ff80 	bl	800b8b8 <__NVIC_SetPriority>
}
 800b9b8:	bf00      	nop
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b9ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff ff54 	bl	800b87c <__NVIC_EnableIRQ>
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b9e8:	f7ff fee8 	bl	800b7bc <HAL_GetTick>
 800b9ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e099      	b.n	800bb2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2202      	movs	r2, #2
 800ba04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f022 0201 	bic.w	r2, r2, #1
 800ba16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ba18:	e00f      	b.n	800ba3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ba1a:	f7ff fecf 	bl	800b7bc <HAL_GetTick>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	2b05      	cmp	r3, #5
 800ba26:	d908      	bls.n	800ba3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2203      	movs	r2, #3
 800ba32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e078      	b.n	800bb2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e8      	bne.n	800ba1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	4b38      	ldr	r3, [pc, #224]	; (800bb34 <HAL_DMA_Init+0x158>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	d107      	bne.n	800baa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	697a      	ldr	r2, [r7, #20]
 800baaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	f023 0307 	bic.w	r3, r3, #7
 800baba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	2b04      	cmp	r3, #4
 800bacc:	d117      	bne.n	800bafe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00e      	beq.n	800bafe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fa9f 	bl	800c024 <DMA_CheckFifoParam>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d008      	beq.n	800bafe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2240      	movs	r2, #64	; 0x40
 800baf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bafa:	2301      	movs	r3, #1
 800bafc:	e016      	b.n	800bb2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fa56 	bl	800bfb8 <DMA_CalcBaseAndBitshift>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb14:	223f      	movs	r2, #63	; 0x3f
 800bb16:	409a      	lsls	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	f010803f 	.word	0xf010803f

0800bb38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d101      	bne.n	800bb5e <HAL_DMA_Start_IT+0x26>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	e040      	b.n	800bbe0 <HAL_DMA_Start_IT+0xa8>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d12f      	bne.n	800bbd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2202      	movs	r2, #2
 800bb76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	68b9      	ldr	r1, [r7, #8]
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 f9e8 	bl	800bf5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb90:	223f      	movs	r2, #63	; 0x3f
 800bb92:	409a      	lsls	r2, r3
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f042 0216 	orr.w	r2, r2, #22
 800bba6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d007      	beq.n	800bbc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0208 	orr.w	r2, r2, #8
 800bbbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f042 0201 	orr.w	r2, r2, #1
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	e005      	b.n	800bbde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bbda:	2302      	movs	r3, #2
 800bbdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d004      	beq.n	800bc06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2280      	movs	r2, #128	; 0x80
 800bc00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e00c      	b.n	800bc20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2205      	movs	r2, #5
 800bc0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f022 0201 	bic.w	r2, r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bc34:	2300      	movs	r3, #0
 800bc36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bc38:	4b92      	ldr	r3, [pc, #584]	; (800be84 <HAL_DMA_IRQHandler+0x258>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a92      	ldr	r2, [pc, #584]	; (800be88 <HAL_DMA_IRQHandler+0x25c>)
 800bc3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc42:	0a9b      	lsrs	r3, r3, #10
 800bc44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc56:	2208      	movs	r2, #8
 800bc58:	409a      	lsls	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d01a      	beq.n	800bc98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f003 0304 	and.w	r3, r3, #4
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d013      	beq.n	800bc98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f022 0204 	bic.w	r2, r2, #4
 800bc7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc84:	2208      	movs	r2, #8
 800bc86:	409a      	lsls	r2, r3
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc90:	f043 0201 	orr.w	r2, r3, #1
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	409a      	lsls	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4013      	ands	r3, r2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d012      	beq.n	800bcce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcba:	2201      	movs	r2, #1
 800bcbc:	409a      	lsls	r2, r3
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc6:	f043 0202 	orr.w	r2, r3, #2
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcd2:	2204      	movs	r2, #4
 800bcd4:	409a      	lsls	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	4013      	ands	r3, r2
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d012      	beq.n	800bd04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcf0:	2204      	movs	r2, #4
 800bcf2:	409a      	lsls	r2, r3
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfc:	f043 0204 	orr.w	r2, r3, #4
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd08:	2210      	movs	r2, #16
 800bd0a:	409a      	lsls	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4013      	ands	r3, r2
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d043      	beq.n	800bd9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0308 	and.w	r3, r3, #8
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d03c      	beq.n	800bd9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd26:	2210      	movs	r2, #16
 800bd28:	409a      	lsls	r2, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d018      	beq.n	800bd6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d108      	bne.n	800bd5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d024      	beq.n	800bd9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	4798      	blx	r3
 800bd5a:	e01f      	b.n	800bd9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d01b      	beq.n	800bd9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	4798      	blx	r3
 800bd6c:	e016      	b.n	800bd9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d107      	bne.n	800bd8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f022 0208 	bic.w	r2, r2, #8
 800bd8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d003      	beq.n	800bd9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bda0:	2220      	movs	r2, #32
 800bda2:	409a      	lsls	r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4013      	ands	r3, r2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 808e 	beq.w	800beca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0310 	and.w	r3, r3, #16
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 8086 	beq.w	800beca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	409a      	lsls	r2, r3
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b05      	cmp	r3, #5
 800bdd4:	d136      	bne.n	800be44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 0216 	bic.w	r2, r2, #22
 800bde4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	695a      	ldr	r2, [r3, #20]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d103      	bne.n	800be06 <HAL_DMA_IRQHandler+0x1da>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be02:	2b00      	cmp	r3, #0
 800be04:	d007      	beq.n	800be16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f022 0208 	bic.w	r2, r2, #8
 800be14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be1a:	223f      	movs	r2, #63	; 0x3f
 800be1c:	409a      	lsls	r2, r3
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be36:	2b00      	cmp	r3, #0
 800be38:	d07d      	beq.n	800bf36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	4798      	blx	r3
        }
        return;
 800be42:	e078      	b.n	800bf36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d01c      	beq.n	800be8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d108      	bne.n	800be72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be64:	2b00      	cmp	r3, #0
 800be66:	d030      	beq.n	800beca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	4798      	blx	r3
 800be70:	e02b      	b.n	800beca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d027      	beq.n	800beca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	4798      	blx	r3
 800be82:	e022      	b.n	800beca <HAL_DMA_IRQHandler+0x29e>
 800be84:	20000828 	.word	0x20000828
 800be88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10f      	bne.n	800beba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f022 0210 	bic.w	r2, r2, #16
 800bea8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d032      	beq.n	800bf38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d022      	beq.n	800bf24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2205      	movs	r2, #5
 800bee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f022 0201 	bic.w	r2, r2, #1
 800bef4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	3301      	adds	r3, #1
 800befa:	60bb      	str	r3, [r7, #8]
 800befc:	697a      	ldr	r2, [r7, #20]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d307      	bcc.n	800bf12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1f2      	bne.n	800bef6 <HAL_DMA_IRQHandler+0x2ca>
 800bf10:	e000      	b.n	800bf14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bf12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d005      	beq.n	800bf38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	4798      	blx	r3
 800bf34:	e000      	b.n	800bf38 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bf36:	bf00      	nop
    }
  }
}
 800bf38:	3718      	adds	r7, #24
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop

0800bf40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf4e:	b2db      	uxtb	r3, r3
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	2b40      	cmp	r3, #64	; 0x40
 800bf88:	d108      	bne.n	800bf9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bf9a:	e007      	b.n	800bfac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	60da      	str	r2, [r3, #12]
}
 800bfac:	bf00      	nop
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	3b10      	subs	r3, #16
 800bfc8:	4a14      	ldr	r2, [pc, #80]	; (800c01c <DMA_CalcBaseAndBitshift+0x64>)
 800bfca:	fba2 2303 	umull	r2, r3, r2, r3
 800bfce:	091b      	lsrs	r3, r3, #4
 800bfd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bfd2:	4a13      	ldr	r2, [pc, #76]	; (800c020 <DMA_CalcBaseAndBitshift+0x68>)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b03      	cmp	r3, #3
 800bfe4:	d909      	bls.n	800bffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bfee:	f023 0303 	bic.w	r3, r3, #3
 800bff2:	1d1a      	adds	r2, r3, #4
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	659a      	str	r2, [r3, #88]	; 0x58
 800bff8:	e007      	b.n	800c00a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c002:	f023 0303 	bic.w	r3, r3, #3
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	aaaaaaab 	.word	0xaaaaaaab
 800c020:	0801b730 	.word	0x0801b730

0800c024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d11f      	bne.n	800c07e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	2b03      	cmp	r3, #3
 800c042:	d855      	bhi.n	800c0f0 <DMA_CheckFifoParam+0xcc>
 800c044:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <DMA_CheckFifoParam+0x28>)
 800c046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04a:	bf00      	nop
 800c04c:	0800c05d 	.word	0x0800c05d
 800c050:	0800c06f 	.word	0x0800c06f
 800c054:	0800c05d 	.word	0x0800c05d
 800c058:	0800c0f1 	.word	0x0800c0f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d045      	beq.n	800c0f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c06c:	e042      	b.n	800c0f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c076:	d13f      	bne.n	800c0f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c07c:	e03c      	b.n	800c0f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c086:	d121      	bne.n	800c0cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d836      	bhi.n	800c0fc <DMA_CheckFifoParam+0xd8>
 800c08e:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <DMA_CheckFifoParam+0x70>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0a5 	.word	0x0800c0a5
 800c098:	0800c0ab 	.word	0x0800c0ab
 800c09c:	0800c0a5 	.word	0x0800c0a5
 800c0a0:	0800c0bd 	.word	0x0800c0bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a8:	e02f      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d024      	beq.n	800c100 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c0ba:	e021      	b.n	800c100 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c0c4:	d11e      	bne.n	800c104 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c0ca:	e01b      	b.n	800c104 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d902      	bls.n	800c0d8 <DMA_CheckFifoParam+0xb4>
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d003      	beq.n	800c0de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c0d6:	e018      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	73fb      	strb	r3, [r7, #15]
      break;
 800c0dc:	e015      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00e      	beq.n	800c108 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ee:	e00b      	b.n	800c108 <DMA_CheckFifoParam+0xe4>
      break;
 800c0f0:	bf00      	nop
 800c0f2:	e00a      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      break;
 800c0f4:	bf00      	nop
 800c0f6:	e008      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      break;
 800c0f8:	bf00      	nop
 800c0fa:	e006      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      break;
 800c0fc:	bf00      	nop
 800c0fe:	e004      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      break;
 800c100:	bf00      	nop
 800c102:	e002      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      break;   
 800c104:	bf00      	nop
 800c106:	e000      	b.n	800c10a <DMA_CheckFifoParam+0xe6>
      break;
 800c108:	bf00      	nop
    }
  } 
  
  return status; 
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c118:	b480      	push	{r7}
 800c11a:	b089      	sub	sp, #36	; 0x24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c122:	2300      	movs	r3, #0
 800c124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c126:	2300      	movs	r3, #0
 800c128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c12a:	2300      	movs	r3, #0
 800c12c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c12e:	2300      	movs	r3, #0
 800c130:	61fb      	str	r3, [r7, #28]
 800c132:	e16b      	b.n	800c40c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c134:	2201      	movs	r2, #1
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	fa02 f303 	lsl.w	r3, r2, r3
 800c13c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	4013      	ands	r3, r2
 800c146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	f040 815a 	bne.w	800c406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d00b      	beq.n	800c172 <HAL_GPIO_Init+0x5a>
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d007      	beq.n	800c172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c166:	2b11      	cmp	r3, #17
 800c168:	d003      	beq.n	800c172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	2b12      	cmp	r3, #18
 800c170:	d130      	bne.n	800c1d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	2203      	movs	r2, #3
 800c17e:	fa02 f303 	lsl.w	r3, r2, r3
 800c182:	43db      	mvns	r3, r3
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	4013      	ands	r3, r2
 800c188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	fa02 f303 	lsl.w	r3, r2, r3
 800c196:	69ba      	ldr	r2, [r7, #24]
 800c198:	4313      	orrs	r3, r2
 800c19a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	69ba      	ldr	r2, [r7, #24]
 800c1a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b0:	43db      	mvns	r3, r3
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	091b      	lsrs	r3, r3, #4
 800c1be:	f003 0201 	and.w	r2, r3, #1
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	69ba      	ldr	r2, [r7, #24]
 800c1d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	2203      	movs	r2, #3
 800c1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e4:	43db      	mvns	r3, r3
 800c1e6:	69ba      	ldr	r2, [r7, #24]
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	689a      	ldr	r2, [r3, #8]
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d003      	beq.n	800c214 <HAL_GPIO_Init+0xfc>
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	2b12      	cmp	r3, #18
 800c212:	d123      	bne.n	800c25c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	08da      	lsrs	r2, r3, #3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3208      	adds	r2, #8
 800c21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	f003 0307 	and.w	r3, r3, #7
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	220f      	movs	r2, #15
 800c22c:	fa02 f303 	lsl.w	r3, r2, r3
 800c230:	43db      	mvns	r3, r3
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	4013      	ands	r3, r2
 800c236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	691a      	ldr	r2, [r3, #16]
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	fa02 f303 	lsl.w	r3, r2, r3
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	08da      	lsrs	r2, r3, #3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	3208      	adds	r2, #8
 800c256:	69b9      	ldr	r1, [r7, #24]
 800c258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	2203      	movs	r2, #3
 800c268:	fa02 f303 	lsl.w	r3, r2, r3
 800c26c:	43db      	mvns	r3, r3
 800c26e:	69ba      	ldr	r2, [r7, #24]
 800c270:	4013      	ands	r3, r2
 800c272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	f003 0203 	and.w	r2, r3, #3
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	fa02 f303 	lsl.w	r3, r2, r3
 800c284:	69ba      	ldr	r2, [r7, #24]
 800c286:	4313      	orrs	r3, r2
 800c288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 80b4 	beq.w	800c406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	4b5f      	ldr	r3, [pc, #380]	; (800c420 <HAL_GPIO_Init+0x308>)
 800c2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a6:	4a5e      	ldr	r2, [pc, #376]	; (800c420 <HAL_GPIO_Init+0x308>)
 800c2a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2ac:	6453      	str	r3, [r2, #68]	; 0x44
 800c2ae:	4b5c      	ldr	r3, [pc, #368]	; (800c420 <HAL_GPIO_Init+0x308>)
 800c2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c2ba:	4a5a      	ldr	r2, [pc, #360]	; (800c424 <HAL_GPIO_Init+0x30c>)
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	089b      	lsrs	r3, r3, #2
 800c2c0:	3302      	adds	r3, #2
 800c2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	f003 0303 	and.w	r3, r3, #3
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	220f      	movs	r2, #15
 800c2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d6:	43db      	mvns	r3, r3
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	4013      	ands	r3, r2
 800c2dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a51      	ldr	r2, [pc, #324]	; (800c428 <HAL_GPIO_Init+0x310>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d02b      	beq.n	800c33e <HAL_GPIO_Init+0x226>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a50      	ldr	r2, [pc, #320]	; (800c42c <HAL_GPIO_Init+0x314>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d025      	beq.n	800c33a <HAL_GPIO_Init+0x222>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a4f      	ldr	r2, [pc, #316]	; (800c430 <HAL_GPIO_Init+0x318>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d01f      	beq.n	800c336 <HAL_GPIO_Init+0x21e>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a4e      	ldr	r2, [pc, #312]	; (800c434 <HAL_GPIO_Init+0x31c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d019      	beq.n	800c332 <HAL_GPIO_Init+0x21a>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a4d      	ldr	r2, [pc, #308]	; (800c438 <HAL_GPIO_Init+0x320>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d013      	beq.n	800c32e <HAL_GPIO_Init+0x216>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a4c      	ldr	r2, [pc, #304]	; (800c43c <HAL_GPIO_Init+0x324>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d00d      	beq.n	800c32a <HAL_GPIO_Init+0x212>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a4b      	ldr	r2, [pc, #300]	; (800c440 <HAL_GPIO_Init+0x328>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d007      	beq.n	800c326 <HAL_GPIO_Init+0x20e>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a4a      	ldr	r2, [pc, #296]	; (800c444 <HAL_GPIO_Init+0x32c>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d101      	bne.n	800c322 <HAL_GPIO_Init+0x20a>
 800c31e:	2307      	movs	r3, #7
 800c320:	e00e      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c322:	2308      	movs	r3, #8
 800c324:	e00c      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c326:	2306      	movs	r3, #6
 800c328:	e00a      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c32a:	2305      	movs	r3, #5
 800c32c:	e008      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c32e:	2304      	movs	r3, #4
 800c330:	e006      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c332:	2303      	movs	r3, #3
 800c334:	e004      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c336:	2302      	movs	r3, #2
 800c338:	e002      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c33a:	2301      	movs	r3, #1
 800c33c:	e000      	b.n	800c340 <HAL_GPIO_Init+0x228>
 800c33e:	2300      	movs	r3, #0
 800c340:	69fa      	ldr	r2, [r7, #28]
 800c342:	f002 0203 	and.w	r2, r2, #3
 800c346:	0092      	lsls	r2, r2, #2
 800c348:	4093      	lsls	r3, r2
 800c34a:	69ba      	ldr	r2, [r7, #24]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c350:	4934      	ldr	r1, [pc, #208]	; (800c424 <HAL_GPIO_Init+0x30c>)
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	089b      	lsrs	r3, r3, #2
 800c356:	3302      	adds	r3, #2
 800c358:	69ba      	ldr	r2, [r7, #24]
 800c35a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c35e:	4b3a      	ldr	r3, [pc, #232]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	43db      	mvns	r3, r3
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	4013      	ands	r3, r2
 800c36c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d003      	beq.n	800c382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	4313      	orrs	r3, r2
 800c380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c382:	4a31      	ldr	r2, [pc, #196]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c388:	4b2f      	ldr	r3, [pc, #188]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	43db      	mvns	r3, r3
 800c392:	69ba      	ldr	r2, [r7, #24]
 800c394:	4013      	ands	r3, r2
 800c396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c3a4:	69ba      	ldr	r2, [r7, #24]
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c3ac:	4a26      	ldr	r2, [pc, #152]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c3b2:	4b25      	ldr	r3, [pc, #148]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	43db      	mvns	r3, r3
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	4013      	ands	r3, r2
 800c3c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c3ce:	69ba      	ldr	r2, [r7, #24]
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c3d6:	4a1c      	ldr	r2, [pc, #112]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c3dc:	4b1a      	ldr	r3, [pc, #104]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	43db      	mvns	r3, r3
 800c3e6:	69ba      	ldr	r2, [r7, #24]
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c3f8:	69ba      	ldr	r2, [r7, #24]
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c400:	4a11      	ldr	r2, [pc, #68]	; (800c448 <HAL_GPIO_Init+0x330>)
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	3301      	adds	r3, #1
 800c40a:	61fb      	str	r3, [r7, #28]
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	2b0f      	cmp	r3, #15
 800c410:	f67f ae90 	bls.w	800c134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c414:	bf00      	nop
 800c416:	3724      	adds	r7, #36	; 0x24
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	40023800 	.word	0x40023800
 800c424:	40013800 	.word	0x40013800
 800c428:	40020000 	.word	0x40020000
 800c42c:	40020400 	.word	0x40020400
 800c430:	40020800 	.word	0x40020800
 800c434:	40020c00 	.word	0x40020c00
 800c438:	40021000 	.word	0x40021000
 800c43c:	40021400 	.word	0x40021400
 800c440:	40021800 	.word	0x40021800
 800c444:	40021c00 	.word	0x40021c00
 800c448:	40013c00 	.word	0x40013c00

0800c44c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	807b      	strh	r3, [r7, #2]
 800c458:	4613      	mov	r3, r2
 800c45a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c45c:	787b      	ldrb	r3, [r7, #1]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d003      	beq.n	800c46a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c462:	887a      	ldrh	r2, [r7, #2]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c468:	e003      	b.n	800c472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c46a:	887b      	ldrh	r3, [r7, #2]
 800c46c:	041a      	lsls	r2, r3, #16
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	619a      	str	r2, [r3, #24]
}
 800c472:	bf00      	nop
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
	...

0800c480 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e043      	b.n	800c51e <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d106      	bne.n	800c4b0 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7f7 fcbc 	bl	8003e28 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f003 f97e 	bl	800f7bc <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	68b9      	ldr	r1, [r7, #8]
 800c4cc:	f003 f9c8 	bl	800f860 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6858      	ldr	r0, [r3, #4]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	689a      	ldr	r2, [r3, #8]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4dc:	6879      	ldr	r1, [r7, #4]
 800c4de:	f003 f9fd 	bl	800f8dc <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	6892      	ldr	r2, [r2, #8]
 800c4ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	6892      	ldr	r2, [r2, #8]
 800c4f6:	f041 0101 	orr.w	r1, r1, #1
 800c4fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d103      	bne.n	800c50e <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c506:	4b08      	ldr	r3, [pc, #32]	; (800c528 <HAL_NOR_Init+0xa8>)
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	e002      	b.n	800c514 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c50e:	4b06      	ldr	r3, [pc, #24]	; (800c528 <HAL_NOR_Init+0xa8>)
 800c510:	2201      	movs	r2, #1
 800c512:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20001004 	.word	0x20001004

0800c52c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52e:	b08f      	sub	sp, #60	; 0x3c
 800c530:	af0a      	add	r7, sp, #40	; 0x28
 800c532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e10f      	b.n	800c75e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d106      	bne.n	800c55e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f009 f9d9 	bl	8015910 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2203      	movs	r2, #3
 800c562:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f003 fb02 	bl	800fb86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	603b      	str	r3, [r7, #0]
 800c588:	687e      	ldr	r6, [r7, #4]
 800c58a:	466d      	mov	r5, sp
 800c58c:	f106 0410 	add.w	r4, r6, #16
 800c590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c598:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c59c:	e885 0003 	stmia.w	r5, {r0, r1}
 800c5a0:	1d33      	adds	r3, r6, #4
 800c5a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5a4:	6838      	ldr	r0, [r7, #0]
 800c5a6:	f003 f9d9 	bl	800f95c <USB_CoreInit>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d005      	beq.n	800c5bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e0d0      	b.n	800c75e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f003 faf0 	bl	800fba8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73fb      	strb	r3, [r7, #15]
 800c5cc:	e04a      	b.n	800c664 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c5ce:	7bfa      	ldrb	r2, [r7, #15]
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	1a9b      	subs	r3, r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	440b      	add	r3, r1
 800c5dc:	333d      	adds	r3, #61	; 0x3d
 800c5de:	2201      	movs	r2, #1
 800c5e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c5e2:	7bfa      	ldrb	r2, [r7, #15]
 800c5e4:	6879      	ldr	r1, [r7, #4]
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	440b      	add	r3, r1
 800c5f0:	333c      	adds	r3, #60	; 0x3c
 800c5f2:	7bfa      	ldrb	r2, [r7, #15]
 800c5f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c5f6:	7bfa      	ldrb	r2, [r7, #15]
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
 800c5fa:	b298      	uxth	r0, r3
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	4613      	mov	r3, r2
 800c600:	00db      	lsls	r3, r3, #3
 800c602:	1a9b      	subs	r3, r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	440b      	add	r3, r1
 800c608:	3342      	adds	r3, #66	; 0x42
 800c60a:	4602      	mov	r2, r0
 800c60c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c60e:	7bfa      	ldrb	r2, [r7, #15]
 800c610:	6879      	ldr	r1, [r7, #4]
 800c612:	4613      	mov	r3, r2
 800c614:	00db      	lsls	r3, r3, #3
 800c616:	1a9b      	subs	r3, r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	440b      	add	r3, r1
 800c61c:	333f      	adds	r3, #63	; 0x3f
 800c61e:	2200      	movs	r2, #0
 800c620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c622:	7bfa      	ldrb	r2, [r7, #15]
 800c624:	6879      	ldr	r1, [r7, #4]
 800c626:	4613      	mov	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	1a9b      	subs	r3, r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	440b      	add	r3, r1
 800c630:	3344      	adds	r3, #68	; 0x44
 800c632:	2200      	movs	r2, #0
 800c634:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c636:	7bfa      	ldrb	r2, [r7, #15]
 800c638:	6879      	ldr	r1, [r7, #4]
 800c63a:	4613      	mov	r3, r2
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	1a9b      	subs	r3, r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	440b      	add	r3, r1
 800c644:	3348      	adds	r3, #72	; 0x48
 800c646:	2200      	movs	r2, #0
 800c648:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c64a:	7bfa      	ldrb	r2, [r7, #15]
 800c64c:	6879      	ldr	r1, [r7, #4]
 800c64e:	4613      	mov	r3, r2
 800c650:	00db      	lsls	r3, r3, #3
 800c652:	1a9b      	subs	r3, r3, r2
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	440b      	add	r3, r1
 800c658:	3350      	adds	r3, #80	; 0x50
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	3301      	adds	r3, #1
 800c662:	73fb      	strb	r3, [r7, #15]
 800c664:	7bfa      	ldrb	r2, [r7, #15]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d3af      	bcc.n	800c5ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
 800c672:	e044      	b.n	800c6fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c674:	7bfa      	ldrb	r2, [r7, #15]
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	4613      	mov	r3, r2
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	1a9b      	subs	r3, r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	440b      	add	r3, r1
 800c682:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c686:	2200      	movs	r2, #0
 800c688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c68a:	7bfa      	ldrb	r2, [r7, #15]
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	4613      	mov	r3, r2
 800c690:	00db      	lsls	r3, r3, #3
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c69c:	7bfa      	ldrb	r2, [r7, #15]
 800c69e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c6a0:	7bfa      	ldrb	r2, [r7, #15]
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	1a9b      	subs	r3, r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	440b      	add	r3, r1
 800c6ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c6b6:	7bfa      	ldrb	r2, [r7, #15]
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	00db      	lsls	r3, r3, #3
 800c6be:	1a9b      	subs	r3, r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	440b      	add	r3, r1
 800c6c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c6cc:	7bfa      	ldrb	r2, [r7, #15]
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	1a9b      	subs	r3, r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	440b      	add	r3, r1
 800c6da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c6de:	2200      	movs	r2, #0
 800c6e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c6e2:	7bfa      	ldrb	r2, [r7, #15]
 800c6e4:	6879      	ldr	r1, [r7, #4]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	440b      	add	r3, r1
 800c6f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	73fb      	strb	r3, [r7, #15]
 800c6fe:	7bfa      	ldrb	r2, [r7, #15]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	429a      	cmp	r2, r3
 800c706:	d3b5      	bcc.n	800c674 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	603b      	str	r3, [r7, #0]
 800c70e:	687e      	ldr	r6, [r7, #4]
 800c710:	466d      	mov	r5, sp
 800c712:	f106 0410 	add.w	r4, r6, #16
 800c716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c71a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c71c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c71e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c722:	e885 0003 	stmia.w	r5, {r0, r1}
 800c726:	1d33      	adds	r3, r6, #4
 800c728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c72a:	6838      	ldr	r0, [r7, #0]
 800c72c:	f003 fa66 	bl	800fbfc <USB_DevInit>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d005      	beq.n	800c742 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2202      	movs	r2, #2
 800c73a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	e00d      	b.n	800c75e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4618      	mov	r0, r3
 800c758:	f004 faae 	bl	8010cb8 <USB_DevDisconnect>

  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c766 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d101      	bne.n	800c782 <HAL_PCD_Start+0x1c>
 800c77e:	2302      	movs	r3, #2
 800c780:	e020      	b.n	800c7c4 <HAL_PCD_Start+0x5e>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d109      	bne.n	800c7a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c796:	2b01      	cmp	r3, #1
 800c798:	d005      	beq.n	800c7a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f003 f9da 	bl	800fb64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f004 fa5e 	bl	8010c76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c7cc:	b590      	push	{r4, r7, lr}
 800c7ce:	b08d      	sub	sp, #52	; 0x34
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f004 fb1c 	bl	8010e20 <USB_GetMode>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f040 839d 	bne.w	800cf2a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f004 fa80 	bl	8010cfa <USB_ReadInterrupts>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 8393 	beq.w	800cf28 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4618      	mov	r0, r3
 800c808:	f004 fa77 	bl	8010cfa <USB_ReadInterrupts>
 800c80c:	4603      	mov	r3, r0
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b02      	cmp	r3, #2
 800c814:	d107      	bne.n	800c826 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	695a      	ldr	r2, [r3, #20]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f002 0202 	and.w	r2, r2, #2
 800c824:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f004 fa65 	bl	8010cfa <USB_ReadInterrupts>
 800c830:	4603      	mov	r3, r0
 800c832:	f003 0310 	and.w	r3, r3, #16
 800c836:	2b10      	cmp	r3, #16
 800c838:	d161      	bne.n	800c8fe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	699a      	ldr	r2, [r3, #24]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0210 	bic.w	r2, r2, #16
 800c848:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	6a1b      	ldr	r3, [r3, #32]
 800c84e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	f003 020f 	and.w	r2, r3, #15
 800c856:	4613      	mov	r3, r2
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	1a9b      	subs	r3, r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4413      	add	r3, r2
 800c866:	3304      	adds	r3, #4
 800c868:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	0c5b      	lsrs	r3, r3, #17
 800c86e:	f003 030f 	and.w	r3, r3, #15
 800c872:	2b02      	cmp	r3, #2
 800c874:	d124      	bne.n	800c8c0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c876:	69ba      	ldr	r2, [r7, #24]
 800c878:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c87c:	4013      	ands	r3, r2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d035      	beq.n	800c8ee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	091b      	lsrs	r3, r3, #4
 800c88a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c88c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c890:	b29b      	uxth	r3, r3
 800c892:	461a      	mov	r2, r3
 800c894:	6a38      	ldr	r0, [r7, #32]
 800c896:	f004 f8cb 	bl	8010a30 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	68da      	ldr	r2, [r3, #12]
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	091b      	lsrs	r3, r3, #4
 800c8a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8a6:	441a      	add	r2, r3
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	699a      	ldr	r2, [r3, #24]
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	091b      	lsrs	r3, r3, #4
 800c8b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8b8:	441a      	add	r2, r3
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	619a      	str	r2, [r3, #24]
 800c8be:	e016      	b.n	800c8ee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	0c5b      	lsrs	r3, r3, #17
 800c8c4:	f003 030f 	and.w	r3, r3, #15
 800c8c8:	2b06      	cmp	r3, #6
 800c8ca:	d110      	bne.n	800c8ee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8d2:	2208      	movs	r2, #8
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6a38      	ldr	r0, [r7, #32]
 800c8d8:	f004 f8aa 	bl	8010a30 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	699a      	ldr	r2, [r3, #24]
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	091b      	lsrs	r3, r3, #4
 800c8e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8e8:	441a      	add	r2, r3
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	699a      	ldr	r2, [r3, #24]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f042 0210 	orr.w	r2, r2, #16
 800c8fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f004 f9f9 	bl	8010cfa <USB_ReadInterrupts>
 800c908:	4603      	mov	r3, r0
 800c90a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c90e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c912:	d16e      	bne.n	800c9f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c914:	2300      	movs	r3, #0
 800c916:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f004 f9ff 	bl	8010d20 <USB_ReadDevAllOutEpInterrupt>
 800c922:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c924:	e062      	b.n	800c9ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d057      	beq.n	800c9e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c936:	b2d2      	uxtb	r2, r2
 800c938:	4611      	mov	r1, r2
 800c93a:	4618      	mov	r0, r3
 800c93c:	f004 fa24 	bl	8010d88 <USB_ReadDevOutEPInterrupt>
 800c940:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f003 0301 	and.w	r3, r3, #1
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00c      	beq.n	800c966 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c958:	461a      	mov	r2, r3
 800c95a:	2301      	movs	r3, #1
 800c95c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c95e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fdb1 	bl	800d4c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f003 0308 	and.w	r3, r3, #8
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00c      	beq.n	800c98a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c97c:	461a      	mov	r2, r3
 800c97e:	2308      	movs	r3, #8
 800c980:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 feab 	bl	800d6e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	f003 0310 	and.w	r3, r3, #16
 800c990:	2b00      	cmp	r3, #0
 800c992:	d008      	beq.n	800c9a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	2310      	movs	r3, #16
 800c9a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f003 0320 	and.w	r3, r3, #32
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d008      	beq.n	800c9c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	015a      	lsls	r2, r3, #5
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9bc:	461a      	mov	r2, r3
 800c9be:	2320      	movs	r3, #32
 800c9c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d009      	beq.n	800c9e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d8:	461a      	mov	r2, r3
 800c9da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	085b      	lsrs	r3, r3, #1
 800c9ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d199      	bne.n	800c926 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f004 f97f 	bl	8010cfa <USB_ReadInterrupts>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca06:	f040 80c0 	bne.w	800cb8a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f004 f9a0 	bl	8010d54 <USB_ReadDevAllInEpInterrupt>
 800ca14:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ca1a:	e0b2      	b.n	800cb82 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 80a7 	beq.w	800cb76 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2e:	b2d2      	uxtb	r2, r2
 800ca30:	4611      	mov	r1, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f004 f9c6 	bl	8010dc4 <USB_ReadDevInEPInterrupt>
 800ca38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d057      	beq.n	800caf4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca50:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	43db      	mvns	r3, r3
 800ca5e:	69f9      	ldr	r1, [r7, #28]
 800ca60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca64:	4013      	ands	r3, r2
 800ca66:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	015a      	lsls	r2, r3, #5
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	4413      	add	r3, r2
 800ca70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca74:	461a      	mov	r2, r3
 800ca76:	2301      	movs	r3, #1
 800ca78:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d132      	bne.n	800cae8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca86:	4613      	mov	r3, r2
 800ca88:	00db      	lsls	r3, r3, #3
 800ca8a:	1a9b      	subs	r3, r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	440b      	add	r3, r1
 800ca90:	3348      	adds	r3, #72	; 0x48
 800ca92:	6819      	ldr	r1, [r3, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca98:	4613      	mov	r3, r2
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	1a9b      	subs	r3, r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4403      	add	r3, r0
 800caa2:	3344      	adds	r3, #68	; 0x44
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4419      	add	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caac:	4613      	mov	r3, r2
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4403      	add	r3, r0
 800cab6:	3348      	adds	r3, #72	; 0x48
 800cab8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d113      	bne.n	800cae8 <HAL_PCD_IRQHandler+0x31c>
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac4:	4613      	mov	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	1a9b      	subs	r3, r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	440b      	add	r3, r1
 800cace:	3350      	adds	r3, #80	; 0x50
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d108      	bne.n	800cae8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6818      	ldr	r0, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cae0:	461a      	mov	r2, r3
 800cae2:	2101      	movs	r1, #1
 800cae4:	f004 f9ce 	bl	8010e84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	b2db      	uxtb	r3, r3
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f008 ff8f 	bl	8015a12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f003 0308 	and.w	r3, r3, #8
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d008      	beq.n	800cb10 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	015a      	lsls	r2, r3, #5
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	4413      	add	r3, r2
 800cb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	f003 0310 	and.w	r3, r3, #16
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d008      	beq.n	800cb2c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	015a      	lsls	r2, r3, #5
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	4413      	add	r3, r2
 800cb22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb26:	461a      	mov	r2, r3
 800cb28:	2310      	movs	r3, #16
 800cb2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d008      	beq.n	800cb48 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb42:	461a      	mov	r2, r3
 800cb44:	2340      	movs	r3, #64	; 0x40
 800cb46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f003 0302 	and.w	r3, r3, #2
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d008      	beq.n	800cb64 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	015a      	lsls	r2, r3, #5
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	4413      	add	r3, r2
 800cb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb5e:	461a      	mov	r2, r3
 800cb60:	2302      	movs	r3, #2
 800cb62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cb6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fc1b 	bl	800d3ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	3301      	adds	r3, #1
 800cb7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	085b      	lsrs	r3, r3, #1
 800cb80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f47f af49 	bne.w	800ca1c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f004 f8b3 	bl	8010cfa <USB_ReadInterrupts>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb9e:	d122      	bne.n	800cbe6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	69fa      	ldr	r2, [r7, #28]
 800cbaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbae:	f023 0301 	bic.w	r3, r3, #1
 800cbb2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d108      	bne.n	800cbd0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fe27 	bl	800d81c <HAL_PCDEx_LPM_Callback>
 800cbce:	e002      	b.n	800cbd6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f008 ff95 	bl	8015b00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	695a      	ldr	r2, [r3, #20]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cbe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f004 f885 	bl	8010cfa <USB_ReadInterrupts>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbfa:	d112      	bne.n	800cc22 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d102      	bne.n	800cc12 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f008 ff51 	bl	8015ab4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	695a      	ldr	r2, [r3, #20]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800cc20:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f004 f867 	bl	8010cfa <USB_ReadInterrupts>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc36:	f040 80c7 	bne.w	800cdc8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	69fa      	ldr	r2, [r7, #28]
 800cc44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc48:	f023 0301 	bic.w	r3, r3, #1
 800cc4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2110      	movs	r1, #16
 800cc54:	4618      	mov	r0, r3
 800cc56:	f003 f935 	bl	800fec4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc5e:	e056      	b.n	800cd0e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc62:	015a      	lsls	r2, r3, #5
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	4413      	add	r3, r2
 800cc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc76:	015a      	lsls	r2, r3, #5
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc84:	0151      	lsls	r1, r2, #5
 800cc86:	69fa      	ldr	r2, [r7, #28]
 800cc88:	440a      	add	r2, r1
 800cc8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc92:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca4:	0151      	lsls	r1, r2, #5
 800cca6:	69fa      	ldr	r2, [r7, #28]
 800cca8:	440a      	add	r2, r1
 800ccaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ccc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	015a      	lsls	r2, r3, #5
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	4413      	add	r3, r2
 800ccd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccd8:	0151      	lsls	r1, r2, #5
 800ccda:	69fa      	ldr	r2, [r7, #28]
 800ccdc:	440a      	add	r2, r1
 800ccde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cce6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	015a      	lsls	r2, r3, #5
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	4413      	add	r3, r2
 800ccf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccf8:	0151      	lsls	r1, r2, #5
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	440a      	add	r2, r1
 800ccfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d3a3      	bcc.n	800cc60 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd1e:	69db      	ldr	r3, [r3, #28]
 800cd20:	69fa      	ldr	r2, [r7, #28]
 800cd22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd26:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cd2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d016      	beq.n	800cd62 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd3e:	69fa      	ldr	r2, [r7, #28]
 800cd40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd44:	f043 030b 	orr.w	r3, r3, #11
 800cd48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd54:	69fa      	ldr	r2, [r7, #28]
 800cd56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd5a:	f043 030b 	orr.w	r3, r3, #11
 800cd5e:	6453      	str	r3, [r2, #68]	; 0x44
 800cd60:	e015      	b.n	800cd8e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cd74:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cd78:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	69fa      	ldr	r2, [r7, #28]
 800cd84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd88:	f043 030b 	orr.w	r3, r3, #11
 800cd8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	69fa      	ldr	r2, [r7, #28]
 800cd98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cda0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6818      	ldr	r0, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f004 f866 	bl	8010e84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	695a      	ldr	r2, [r3, #20]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cdc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f003 ff94 	bl	8010cfa <USB_ReadInterrupts>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cddc:	d124      	bne.n	800ce28 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f004 f82a 	bl	8010e3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f003 f8ca 	bl	800ff86 <USB_GetDevSpeed>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681c      	ldr	r4, [r3, #0]
 800cdfe:	f001 f947 	bl	800e090 <HAL_RCC_GetHCLKFreq>
 800ce02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f002 fe07 	bl	800fa20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f008 fe25 	bl	8015a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	695a      	ldr	r2, [r3, #20]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ce26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f003 ff64 	bl	8010cfa <USB_ReadInterrupts>
 800ce32:	4603      	mov	r3, r0
 800ce34:	f003 0308 	and.w	r3, r3, #8
 800ce38:	2b08      	cmp	r3, #8
 800ce3a:	d10a      	bne.n	800ce52 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f008 fe02 	bl	8015a46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	695a      	ldr	r2, [r3, #20]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f002 0208 	and.w	r2, r2, #8
 800ce50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f003 ff4f 	bl	8010cfa <USB_ReadInterrupts>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce66:	d10f      	bne.n	800ce88 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	4619      	mov	r1, r3
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f008 fe64 	bl	8015b40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	695a      	ldr	r2, [r3, #20]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ce86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f003 ff34 	bl	8010cfa <USB_ReadInterrupts>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce9c:	d10f      	bne.n	800cebe <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f008 fe37 	bl	8015b1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	695a      	ldr	r2, [r3, #20]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f003 ff19 	bl	8010cfa <USB_ReadInterrupts>
 800cec8:	4603      	mov	r3, r0
 800ceca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ced2:	d10a      	bne.n	800ceea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f008 fe45 	bl	8015b64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	695a      	ldr	r2, [r3, #20]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f003 ff03 	bl	8010cfa <USB_ReadInterrupts>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f003 0304 	and.w	r3, r3, #4
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	d115      	bne.n	800cf2a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	f003 0304 	and.w	r3, r3, #4
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d002      	beq.n	800cf16 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f008 fe35 	bl	8015b80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6859      	ldr	r1, [r3, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	69ba      	ldr	r2, [r7, #24]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	605a      	str	r2, [r3, #4]
 800cf26:	e000      	b.n	800cf2a <HAL_PCD_IRQHandler+0x75e>
      return;
 800cf28:	bf00      	nop
    }
  }
}
 800cf2a:	3734      	adds	r7, #52	; 0x34
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd90      	pop	{r4, r7, pc}

0800cf30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d101      	bne.n	800cf4a <HAL_PCD_SetAddress+0x1a>
 800cf46:	2302      	movs	r3, #2
 800cf48:	e013      	b.n	800cf72 <HAL_PCD_SetAddress+0x42>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	78fa      	ldrb	r2, [r7, #3]
 800cf56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	78fa      	ldrb	r2, [r7, #3]
 800cf60:	4611      	mov	r1, r2
 800cf62:	4618      	mov	r0, r3
 800cf64:	f003 fe61 	bl	8010c2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	4608      	mov	r0, r1
 800cf84:	4611      	mov	r1, r2
 800cf86:	461a      	mov	r2, r3
 800cf88:	4603      	mov	r3, r0
 800cf8a:	70fb      	strb	r3, [r7, #3]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	803b      	strh	r3, [r7, #0]
 800cf90:	4613      	mov	r3, r2
 800cf92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cf98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	da0f      	bge.n	800cfc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cfa0:	78fb      	ldrb	r3, [r7, #3]
 800cfa2:	f003 020f 	and.w	r2, r3, #15
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	1a9b      	subs	r3, r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	3338      	adds	r3, #56	; 0x38
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	705a      	strb	r2, [r3, #1]
 800cfbe:	e00f      	b.n	800cfe0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	f003 020f 	and.w	r2, r3, #15
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	00db      	lsls	r3, r3, #3
 800cfca:	1a9b      	subs	r3, r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cfe0:	78fb      	ldrb	r3, [r7, #3]
 800cfe2:	f003 030f 	and.w	r3, r3, #15
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cfec:	883a      	ldrh	r2, [r7, #0]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	78ba      	ldrb	r2, [r7, #2]
 800cff6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	785b      	ldrb	r3, [r3, #1]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d004      	beq.n	800d00a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	b29a      	uxth	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d00a:	78bb      	ldrb	r3, [r7, #2]
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d102      	bne.n	800d016 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d101      	bne.n	800d024 <HAL_PCD_EP_Open+0xaa>
 800d020:	2302      	movs	r3, #2
 800d022:	e00e      	b.n	800d042 <HAL_PCD_EP_Open+0xc8>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68f9      	ldr	r1, [r7, #12]
 800d032:	4618      	mov	r0, r3
 800d034:	f002 ffcc 	bl	800ffd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d040:	7afb      	ldrb	r3, [r7, #11]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b084      	sub	sp, #16
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	460b      	mov	r3, r1
 800d054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	da0f      	bge.n	800d07e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d05e:	78fb      	ldrb	r3, [r7, #3]
 800d060:	f003 020f 	and.w	r2, r3, #15
 800d064:	4613      	mov	r3, r2
 800d066:	00db      	lsls	r3, r3, #3
 800d068:	1a9b      	subs	r3, r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	3338      	adds	r3, #56	; 0x38
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	4413      	add	r3, r2
 800d072:	3304      	adds	r3, #4
 800d074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2201      	movs	r2, #1
 800d07a:	705a      	strb	r2, [r3, #1]
 800d07c:	e00f      	b.n	800d09e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d07e:	78fb      	ldrb	r3, [r7, #3]
 800d080:	f003 020f 	and.w	r2, r3, #15
 800d084:	4613      	mov	r3, r2
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	1a9b      	subs	r3, r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	4413      	add	r3, r2
 800d094:	3304      	adds	r3, #4
 800d096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2200      	movs	r2, #0
 800d09c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d09e:	78fb      	ldrb	r3, [r7, #3]
 800d0a0:	f003 030f 	and.w	r3, r3, #15
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d101      	bne.n	800d0b8 <HAL_PCD_EP_Close+0x6e>
 800d0b4:	2302      	movs	r3, #2
 800d0b6:	e00e      	b.n	800d0d6 <HAL_PCD_EP_Close+0x8c>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68f9      	ldr	r1, [r7, #12]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f003 f80a 	bl	80100e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b086      	sub	sp, #24
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	603b      	str	r3, [r7, #0]
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0ee:	7afb      	ldrb	r3, [r7, #11]
 800d0f0:	f003 020f 	and.w	r2, r3, #15
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	1a9b      	subs	r3, r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	4413      	add	r3, r2
 800d104:	3304      	adds	r3, #4
 800d106:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	683a      	ldr	r2, [r7, #0]
 800d112:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2200      	movs	r2, #0
 800d118:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	2200      	movs	r2, #0
 800d11e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d120:	7afb      	ldrb	r3, [r7, #11]
 800d122:	f003 030f 	and.w	r3, r3, #15
 800d126:	b2da      	uxtb	r2, r3
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d102      	bne.n	800d13a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d13a:	7afb      	ldrb	r3, [r7, #11]
 800d13c:	f003 030f 	and.w	r3, r3, #15
 800d140:	2b00      	cmp	r3, #0
 800d142:	d109      	bne.n	800d158 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	461a      	mov	r2, r3
 800d150:	6979      	ldr	r1, [r7, #20]
 800d152:	f003 fae5 	bl	8010720 <USB_EP0StartXfer>
 800d156:	e008      	b.n	800d16a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6818      	ldr	r0, [r3, #0]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	b2db      	uxtb	r3, r3
 800d162:	461a      	mov	r2, r3
 800d164:	6979      	ldr	r1, [r7, #20]
 800d166:	f003 f897 	bl	8010298 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3718      	adds	r7, #24
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	f003 020f 	and.w	r2, r3, #15
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	4613      	mov	r3, r2
 800d18a:	00db      	lsls	r3, r3, #3
 800d18c:	1a9b      	subs	r3, r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	440b      	add	r3, r1
 800d192:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d196:	681b      	ldr	r3, [r3, #0]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	607a      	str	r2, [r7, #4]
 800d1ae:	603b      	str	r3, [r7, #0]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1b4:	7afb      	ldrb	r3, [r7, #11]
 800d1b6:	f003 020f 	and.w	r2, r3, #15
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	1a9b      	subs	r3, r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	3338      	adds	r3, #56	; 0x38
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d1e4:	7afb      	ldrb	r3, [r7, #11]
 800d1e6:	f003 030f 	and.w	r3, r3, #15
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d102      	bne.n	800d1fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d1fe:	7afb      	ldrb	r3, [r7, #11]
 800d200:	f003 030f 	and.w	r3, r3, #15
 800d204:	2b00      	cmp	r3, #0
 800d206:	d109      	bne.n	800d21c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6818      	ldr	r0, [r3, #0]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	b2db      	uxtb	r3, r3
 800d212:	461a      	mov	r2, r3
 800d214:	6979      	ldr	r1, [r7, #20]
 800d216:	f003 fa83 	bl	8010720 <USB_EP0StartXfer>
 800d21a:	e008      	b.n	800d22e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6818      	ldr	r0, [r3, #0]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	b2db      	uxtb	r3, r3
 800d226:	461a      	mov	r2, r3
 800d228:	6979      	ldr	r1, [r7, #20]
 800d22a:	f003 f835 	bl	8010298 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 020f 	and.w	r2, r3, #15
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d901      	bls.n	800d256 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e050      	b.n	800d2f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	da0f      	bge.n	800d27e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	f003 020f 	and.w	r2, r3, #15
 800d264:	4613      	mov	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	1a9b      	subs	r3, r3, r2
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	3338      	adds	r3, #56	; 0x38
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	4413      	add	r3, r2
 800d272:	3304      	adds	r3, #4
 800d274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2201      	movs	r2, #1
 800d27a:	705a      	strb	r2, [r3, #1]
 800d27c:	e00d      	b.n	800d29a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d27e:	78fa      	ldrb	r2, [r7, #3]
 800d280:	4613      	mov	r3, r2
 800d282:	00db      	lsls	r3, r3, #3
 800d284:	1a9b      	subs	r3, r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	4413      	add	r3, r2
 800d290:	3304      	adds	r3, #4
 800d292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2a0:	78fb      	ldrb	r3, [r7, #3]
 800d2a2:	f003 030f 	and.w	r3, r3, #15
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d101      	bne.n	800d2ba <HAL_PCD_EP_SetStall+0x82>
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	e01e      	b.n	800d2f8 <HAL_PCD_EP_SetStall+0xc0>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68f9      	ldr	r1, [r7, #12]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f003 fbda 	bl	8010a82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d2ce:	78fb      	ldrb	r3, [r7, #3]
 800d2d0:	f003 030f 	and.w	r3, r3, #15
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	b2d9      	uxtb	r1, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	f003 fdcb 	bl	8010e84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d30c:	78fb      	ldrb	r3, [r7, #3]
 800d30e:	f003 020f 	and.w	r2, r3, #15
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	429a      	cmp	r2, r3
 800d318:	d901      	bls.n	800d31e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e042      	b.n	800d3a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d31e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d322:	2b00      	cmp	r3, #0
 800d324:	da0f      	bge.n	800d346 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d326:	78fb      	ldrb	r3, [r7, #3]
 800d328:	f003 020f 	and.w	r2, r3, #15
 800d32c:	4613      	mov	r3, r2
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	1a9b      	subs	r3, r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	3338      	adds	r3, #56	; 0x38
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	4413      	add	r3, r2
 800d33a:	3304      	adds	r3, #4
 800d33c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2201      	movs	r2, #1
 800d342:	705a      	strb	r2, [r3, #1]
 800d344:	e00f      	b.n	800d366 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d346:	78fb      	ldrb	r3, [r7, #3]
 800d348:	f003 020f 	and.w	r2, r3, #15
 800d34c:	4613      	mov	r3, r2
 800d34e:	00db      	lsls	r3, r3, #3
 800d350:	1a9b      	subs	r3, r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	4413      	add	r3, r2
 800d35c:	3304      	adds	r3, #4
 800d35e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d36c:	78fb      	ldrb	r3, [r7, #3]
 800d36e:	f003 030f 	and.w	r3, r3, #15
 800d372:	b2da      	uxtb	r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d101      	bne.n	800d386 <HAL_PCD_EP_ClrStall+0x86>
 800d382:	2302      	movs	r3, #2
 800d384:	e00e      	b.n	800d3a4 <HAL_PCD_EP_ClrStall+0xa4>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	68f9      	ldr	r1, [r7, #12]
 800d394:	4618      	mov	r0, r3
 800d396:	f003 fbe2 	bl	8010b5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08a      	sub	sp, #40	; 0x28
 800d3b0:	af02      	add	r7, sp, #8
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	1a9b      	subs	r3, r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	3338      	adds	r3, #56	; 0x38
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	699a      	ldr	r2, [r3, #24]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d901      	bls.n	800d3e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e06c      	b.n	800d4be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	695a      	ldr	r2, [r3, #20]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	69fa      	ldr	r2, [r7, #28]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d902      	bls.n	800d400 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	3303      	adds	r3, #3
 800d404:	089b      	lsrs	r3, r3, #2
 800d406:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d408:	e02b      	b.n	800d462 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	695a      	ldr	r2, [r3, #20]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	699b      	ldr	r3, [r3, #24]
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	69fa      	ldr	r2, [r7, #28]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d902      	bls.n	800d426 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	3303      	adds	r3, #3
 800d42a:	089b      	lsrs	r3, r3, #2
 800d42c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68d9      	ldr	r1, [r3, #12]
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	b2da      	uxtb	r2, r3
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	4603      	mov	r3, r0
 800d444:	6978      	ldr	r0, [r7, #20]
 800d446:	f003 fabe 	bl	80109c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	68da      	ldr	r2, [r3, #12]
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	441a      	add	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	699a      	ldr	r2, [r3, #24]
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	441a      	add	r2, r3
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	015a      	lsls	r2, r3, #5
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	4413      	add	r3, r2
 800d46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46e:	699b      	ldr	r3, [r3, #24]
 800d470:	b29b      	uxth	r3, r3
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	429a      	cmp	r2, r3
 800d476:	d809      	bhi.n	800d48c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	699a      	ldr	r2, [r3, #24]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d480:	429a      	cmp	r2, r3
 800d482:	d203      	bcs.n	800d48c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	695b      	ldr	r3, [r3, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1be      	bne.n	800d40a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	695a      	ldr	r2, [r3, #20]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	429a      	cmp	r2, r3
 800d496:	d811      	bhi.n	800d4bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	f003 030f 	and.w	r3, r3, #15
 800d49e:	2201      	movs	r2, #1
 800d4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	43db      	mvns	r3, r3
 800d4b2:	6939      	ldr	r1, [r7, #16]
 800d4b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3720      	adds	r7, #32
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
	...

0800d4c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	333c      	adds	r3, #60	; 0x3c
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	015a      	lsls	r2, r3, #5
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	f040 80a0 	bne.w	800d640 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	f003 0308 	and.w	r3, r3, #8
 800d506:	2b00      	cmp	r3, #0
 800d508:	d015      	beq.n	800d536 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	4a72      	ldr	r2, [pc, #456]	; (800d6d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	f240 80dd 	bls.w	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 80d7 	beq.w	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	015a      	lsls	r2, r3, #5
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	4413      	add	r3, r2
 800d528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d52c:	461a      	mov	r2, r3
 800d52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d532:	6093      	str	r3, [r2, #8]
 800d534:	e0cb      	b.n	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f003 0320 	and.w	r3, r3, #32
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d009      	beq.n	800d554 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	015a      	lsls	r2, r3, #5
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	4413      	add	r3, r2
 800d548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d54c:	461a      	mov	r2, r3
 800d54e:	2320      	movs	r3, #32
 800d550:	6093      	str	r3, [r2, #8]
 800d552:	e0bc      	b.n	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f040 80b7 	bne.w	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	4a5d      	ldr	r2, [pc, #372]	; (800d6d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d90f      	bls.n	800d588 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00a      	beq.n	800d588 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	015a      	lsls	r2, r3, #5
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	4413      	add	r3, r2
 800d57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d57e:	461a      	mov	r2, r3
 800d580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d584:	6093      	str	r3, [r2, #8]
 800d586:	e0a2      	b.n	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d588:	6879      	ldr	r1, [r7, #4]
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	4613      	mov	r3, r2
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	1a9b      	subs	r3, r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	440b      	add	r3, r1
 800d596:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d59a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	0159      	lsls	r1, r3, #5
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	440b      	add	r3, r1
 800d5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d5ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	1a9b      	subs	r3, r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4403      	add	r3, r0
 800d5be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d5c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	1a9b      	subs	r3, r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	440b      	add	r3, r1
 800d5d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d5d6:	6819      	ldr	r1, [r3, #0]
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	1a9b      	subs	r3, r3, r2
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4403      	add	r3, r0
 800d5e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4419      	add	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	683a      	ldr	r2, [r7, #0]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	00db      	lsls	r3, r3, #3
 800d5f6:	1a9b      	subs	r3, r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4403      	add	r3, r0
 800d5fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d600:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d114      	bne.n	800d632 <PCD_EP_OutXfrComplete_int+0x16a>
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	4613      	mov	r3, r2
 800d60e:	00db      	lsls	r3, r3, #3
 800d610:	1a9b      	subs	r3, r3, r2
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	440b      	add	r3, r1
 800d616:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d108      	bne.n	800d632 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6818      	ldr	r0, [r3, #0]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d62a:	461a      	mov	r2, r3
 800d62c:	2101      	movs	r1, #1
 800d62e:	f003 fc29 	bl	8010e84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	b2db      	uxtb	r3, r3
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f008 f9cf 	bl	80159dc <HAL_PCD_DataOutStageCallback>
 800d63e:	e046      	b.n	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4a26      	ldr	r2, [pc, #152]	; (800d6dc <PCD_EP_OutXfrComplete_int+0x214>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d124      	bne.n	800d692 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00a      	beq.n	800d668 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d65e:	461a      	mov	r2, r3
 800d660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d664:	6093      	str	r3, [r2, #8]
 800d666:	e032      	b.n	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	f003 0320 	and.w	r3, r3, #32
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d008      	beq.n	800d684 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	015a      	lsls	r2, r3, #5
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	4413      	add	r3, r2
 800d67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d67e:	461a      	mov	r2, r3
 800d680:	2320      	movs	r3, #32
 800d682:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f008 f9a6 	bl	80159dc <HAL_PCD_DataOutStageCallback>
 800d690:	e01d      	b.n	800d6ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d114      	bne.n	800d6c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d698:	6879      	ldr	r1, [r7, #4]
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	4613      	mov	r3, r2
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	1a9b      	subs	r3, r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	440b      	add	r3, r1
 800d6a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d108      	bne.n	800d6c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6818      	ldr	r0, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	2100      	movs	r1, #0
 800d6be:	f003 fbe1 	bl	8010e84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f008 f987 	bl	80159dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	4f54300a 	.word	0x4f54300a
 800d6dc:	4f54310a 	.word	0x4f54310a

0800d6e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	333c      	adds	r3, #60	; 0x3c
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	015a      	lsls	r2, r3, #5
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	4413      	add	r3, r2
 800d706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	4a15      	ldr	r2, [pc, #84]	; (800d768 <PCD_EP_OutSetupPacket_int+0x88>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d90e      	bls.n	800d734 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d009      	beq.n	800d734 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	015a      	lsls	r2, r3, #5
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	4413      	add	r3, r2
 800d728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d72c:	461a      	mov	r2, r3
 800d72e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d732:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f008 f93f 	bl	80159b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	4a0a      	ldr	r2, [pc, #40]	; (800d768 <PCD_EP_OutSetupPacket_int+0x88>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d90c      	bls.n	800d75c <PCD_EP_OutSetupPacket_int+0x7c>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d108      	bne.n	800d75c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6818      	ldr	r0, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d754:	461a      	mov	r2, r3
 800d756:	2101      	movs	r1, #1
 800d758:	f003 fb94 	bl	8010e84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3718      	adds	r7, #24
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	4f54300a 	.word	0x4f54300a

0800d76c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b085      	sub	sp, #20
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	70fb      	strb	r3, [r7, #3]
 800d778:	4613      	mov	r3, r2
 800d77a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d782:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d784:	78fb      	ldrb	r3, [r7, #3]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d107      	bne.n	800d79a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d78a:	883b      	ldrh	r3, [r7, #0]
 800d78c:	0419      	lsls	r1, r3, #16
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	430a      	orrs	r2, r1
 800d796:	629a      	str	r2, [r3, #40]	; 0x28
 800d798:	e028      	b.n	800d7ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	0c1b      	lsrs	r3, r3, #16
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	73fb      	strb	r3, [r7, #15]
 800d7ac:	e00d      	b.n	800d7ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	3340      	adds	r3, #64	; 0x40
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	0c1b      	lsrs	r3, r3, #16
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	73fb      	strb	r3, [r7, #15]
 800d7ca:	7bfa      	ldrb	r2, [r7, #15]
 800d7cc:	78fb      	ldrb	r3, [r7, #3]
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d3ec      	bcc.n	800d7ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d7d4:	883b      	ldrh	r3, [r7, #0]
 800d7d6:	0418      	lsls	r0, r3, #16
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6819      	ldr	r1, [r3, #0]
 800d7dc:	78fb      	ldrb	r3, [r7, #3]
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	4302      	orrs	r2, r0
 800d7e4:	3340      	adds	r3, #64	; 0x40
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	440b      	add	r3, r1
 800d7ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	460b      	mov	r3, r1
 800d804:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	887a      	ldrh	r2, [r7, #2]
 800d80c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	460b      	mov	r3, r1
 800d826:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d828:	bf00      	nop
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d101      	bne.n	800d846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d842:	2301      	movs	r3, #1
 800d844:	e25b      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 0301 	and.w	r3, r3, #1
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d075      	beq.n	800d93e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d852:	4ba3      	ldr	r3, [pc, #652]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	f003 030c 	and.w	r3, r3, #12
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d00c      	beq.n	800d878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d85e:	4ba0      	ldr	r3, [pc, #640]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d866:	2b08      	cmp	r3, #8
 800d868:	d112      	bne.n	800d890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d86a:	4b9d      	ldr	r3, [pc, #628]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d876:	d10b      	bne.n	800d890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d878:	4b99      	ldr	r3, [pc, #612]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d05b      	beq.n	800d93c <HAL_RCC_OscConfig+0x108>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d157      	bne.n	800d93c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e236      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d898:	d106      	bne.n	800d8a8 <HAL_RCC_OscConfig+0x74>
 800d89a:	4b91      	ldr	r3, [pc, #580]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a90      	ldr	r2, [pc, #576]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	e01d      	b.n	800d8e4 <HAL_RCC_OscConfig+0xb0>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d8b0:	d10c      	bne.n	800d8cc <HAL_RCC_OscConfig+0x98>
 800d8b2:	4b8b      	ldr	r3, [pc, #556]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a8a      	ldr	r2, [pc, #552]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	4b88      	ldr	r3, [pc, #544]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a87      	ldr	r2, [pc, #540]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	e00b      	b.n	800d8e4 <HAL_RCC_OscConfig+0xb0>
 800d8cc:	4b84      	ldr	r3, [pc, #528]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a83      	ldr	r2, [pc, #524]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8d6:	6013      	str	r3, [r2, #0]
 800d8d8:	4b81      	ldr	r3, [pc, #516]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a80      	ldr	r2, [pc, #512]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d8de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d013      	beq.n	800d914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8ec:	f7fd ff66 	bl	800b7bc <HAL_GetTick>
 800d8f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d8f2:	e008      	b.n	800d906 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d8f4:	f7fd ff62 	bl	800b7bc <HAL_GetTick>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	2b64      	cmp	r3, #100	; 0x64
 800d900:	d901      	bls.n	800d906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d902:	2303      	movs	r3, #3
 800d904:	e1fb      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d906:	4b76      	ldr	r3, [pc, #472]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d0f0      	beq.n	800d8f4 <HAL_RCC_OscConfig+0xc0>
 800d912:	e014      	b.n	800d93e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d914:	f7fd ff52 	bl	800b7bc <HAL_GetTick>
 800d918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d91a:	e008      	b.n	800d92e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d91c:	f7fd ff4e 	bl	800b7bc <HAL_GetTick>
 800d920:	4602      	mov	r2, r0
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	2b64      	cmp	r3, #100	; 0x64
 800d928:	d901      	bls.n	800d92e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e1e7      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d92e:	4b6c      	ldr	r3, [pc, #432]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1f0      	bne.n	800d91c <HAL_RCC_OscConfig+0xe8>
 800d93a:	e000      	b.n	800d93e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d93c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f003 0302 	and.w	r3, r3, #2
 800d946:	2b00      	cmp	r3, #0
 800d948:	d063      	beq.n	800da12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d94a:	4b65      	ldr	r3, [pc, #404]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f003 030c 	and.w	r3, r3, #12
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00b      	beq.n	800d96e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d956:	4b62      	ldr	r3, [pc, #392]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d95e:	2b08      	cmp	r3, #8
 800d960:	d11c      	bne.n	800d99c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d962:	4b5f      	ldr	r3, [pc, #380]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d116      	bne.n	800d99c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d96e:	4b5c      	ldr	r3, [pc, #368]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0302 	and.w	r3, r3, #2
 800d976:	2b00      	cmp	r3, #0
 800d978:	d005      	beq.n	800d986 <HAL_RCC_OscConfig+0x152>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d001      	beq.n	800d986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	e1bb      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d986:	4b56      	ldr	r3, [pc, #344]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	00db      	lsls	r3, r3, #3
 800d994:	4952      	ldr	r1, [pc, #328]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d996:	4313      	orrs	r3, r2
 800d998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d99a:	e03a      	b.n	800da12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d020      	beq.n	800d9e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d9a4:	4b4f      	ldr	r3, [pc, #316]	; (800dae4 <HAL_RCC_OscConfig+0x2b0>)
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9aa:	f7fd ff07 	bl	800b7bc <HAL_GetTick>
 800d9ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9b0:	e008      	b.n	800d9c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d9b2:	f7fd ff03 	bl	800b7bc <HAL_GetTick>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d901      	bls.n	800d9c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	e19c      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9c4:	4b46      	ldr	r3, [pc, #280]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d0f0      	beq.n	800d9b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9d0:	4b43      	ldr	r3, [pc, #268]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	4940      	ldr	r1, [pc, #256]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	600b      	str	r3, [r1, #0]
 800d9e4:	e015      	b.n	800da12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d9e6:	4b3f      	ldr	r3, [pc, #252]	; (800dae4 <HAL_RCC_OscConfig+0x2b0>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9ec:	f7fd fee6 	bl	800b7bc <HAL_GetTick>
 800d9f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d9f2:	e008      	b.n	800da06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d9f4:	f7fd fee2 	bl	800b7bc <HAL_GetTick>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d901      	bls.n	800da06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800da02:	2303      	movs	r3, #3
 800da04:	e17b      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da06:	4b36      	ldr	r3, [pc, #216]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f003 0302 	and.w	r3, r3, #2
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1f0      	bne.n	800d9f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f003 0308 	and.w	r3, r3, #8
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d030      	beq.n	800da80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d016      	beq.n	800da54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800da26:	4b30      	ldr	r3, [pc, #192]	; (800dae8 <HAL_RCC_OscConfig+0x2b4>)
 800da28:	2201      	movs	r2, #1
 800da2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da2c:	f7fd fec6 	bl	800b7bc <HAL_GetTick>
 800da30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da32:	e008      	b.n	800da46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da34:	f7fd fec2 	bl	800b7bc <HAL_GetTick>
 800da38:	4602      	mov	r2, r0
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	2b02      	cmp	r3, #2
 800da40:	d901      	bls.n	800da46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800da42:	2303      	movs	r3, #3
 800da44:	e15b      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da46:	4b26      	ldr	r3, [pc, #152]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800da48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da4a:	f003 0302 	and.w	r3, r3, #2
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0f0      	beq.n	800da34 <HAL_RCC_OscConfig+0x200>
 800da52:	e015      	b.n	800da80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800da54:	4b24      	ldr	r3, [pc, #144]	; (800dae8 <HAL_RCC_OscConfig+0x2b4>)
 800da56:	2200      	movs	r2, #0
 800da58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da5a:	f7fd feaf 	bl	800b7bc <HAL_GetTick>
 800da5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da60:	e008      	b.n	800da74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da62:	f7fd feab 	bl	800b7bc <HAL_GetTick>
 800da66:	4602      	mov	r2, r0
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	d901      	bls.n	800da74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800da70:	2303      	movs	r3, #3
 800da72:	e144      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da74:	4b1a      	ldr	r3, [pc, #104]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800da76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da78:	f003 0302 	and.w	r3, r3, #2
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1f0      	bne.n	800da62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 80a0 	beq.w	800dbce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da8e:	2300      	movs	r3, #0
 800da90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da92:	4b13      	ldr	r3, [pc, #76]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800da94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d10f      	bne.n	800dabe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800da9e:	2300      	movs	r3, #0
 800daa0:	60bb      	str	r3, [r7, #8]
 800daa2:	4b0f      	ldr	r3, [pc, #60]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800daa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa6:	4a0e      	ldr	r2, [pc, #56]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800daa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800daac:	6413      	str	r3, [r2, #64]	; 0x40
 800daae:	4b0c      	ldr	r3, [pc, #48]	; (800dae0 <HAL_RCC_OscConfig+0x2ac>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dab6:	60bb      	str	r3, [r7, #8]
 800dab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800daba:	2301      	movs	r3, #1
 800dabc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dabe:	4b0b      	ldr	r3, [pc, #44]	; (800daec <HAL_RCC_OscConfig+0x2b8>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d121      	bne.n	800db0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800daca:	4b08      	ldr	r3, [pc, #32]	; (800daec <HAL_RCC_OscConfig+0x2b8>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a07      	ldr	r2, [pc, #28]	; (800daec <HAL_RCC_OscConfig+0x2b8>)
 800dad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dad6:	f7fd fe71 	bl	800b7bc <HAL_GetTick>
 800dada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dadc:	e011      	b.n	800db02 <HAL_RCC_OscConfig+0x2ce>
 800dade:	bf00      	nop
 800dae0:	40023800 	.word	0x40023800
 800dae4:	42470000 	.word	0x42470000
 800dae8:	42470e80 	.word	0x42470e80
 800daec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800daf0:	f7fd fe64 	bl	800b7bc <HAL_GetTick>
 800daf4:	4602      	mov	r2, r0
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d901      	bls.n	800db02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800dafe:	2303      	movs	r3, #3
 800db00:	e0fd      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db02:	4b81      	ldr	r3, [pc, #516]	; (800dd08 <HAL_RCC_OscConfig+0x4d4>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d0f0      	beq.n	800daf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	2b01      	cmp	r3, #1
 800db14:	d106      	bne.n	800db24 <HAL_RCC_OscConfig+0x2f0>
 800db16:	4b7d      	ldr	r3, [pc, #500]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db1a:	4a7c      	ldr	r2, [pc, #496]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db1c:	f043 0301 	orr.w	r3, r3, #1
 800db20:	6713      	str	r3, [r2, #112]	; 0x70
 800db22:	e01c      	b.n	800db5e <HAL_RCC_OscConfig+0x32a>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	2b05      	cmp	r3, #5
 800db2a:	d10c      	bne.n	800db46 <HAL_RCC_OscConfig+0x312>
 800db2c:	4b77      	ldr	r3, [pc, #476]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db30:	4a76      	ldr	r2, [pc, #472]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db32:	f043 0304 	orr.w	r3, r3, #4
 800db36:	6713      	str	r3, [r2, #112]	; 0x70
 800db38:	4b74      	ldr	r3, [pc, #464]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3c:	4a73      	ldr	r2, [pc, #460]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db3e:	f043 0301 	orr.w	r3, r3, #1
 800db42:	6713      	str	r3, [r2, #112]	; 0x70
 800db44:	e00b      	b.n	800db5e <HAL_RCC_OscConfig+0x32a>
 800db46:	4b71      	ldr	r3, [pc, #452]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4a:	4a70      	ldr	r2, [pc, #448]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db4c:	f023 0301 	bic.w	r3, r3, #1
 800db50:	6713      	str	r3, [r2, #112]	; 0x70
 800db52:	4b6e      	ldr	r3, [pc, #440]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db56:	4a6d      	ldr	r2, [pc, #436]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db58:	f023 0304 	bic.w	r3, r3, #4
 800db5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d015      	beq.n	800db92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db66:	f7fd fe29 	bl	800b7bc <HAL_GetTick>
 800db6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db6c:	e00a      	b.n	800db84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db6e:	f7fd fe25 	bl	800b7bc <HAL_GetTick>
 800db72:	4602      	mov	r2, r0
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	f241 3288 	movw	r2, #5000	; 0x1388
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d901      	bls.n	800db84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800db80:	2303      	movs	r3, #3
 800db82:	e0bc      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db84:	4b61      	ldr	r3, [pc, #388]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800db86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db88:	f003 0302 	and.w	r3, r3, #2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d0ee      	beq.n	800db6e <HAL_RCC_OscConfig+0x33a>
 800db90:	e014      	b.n	800dbbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800db92:	f7fd fe13 	bl	800b7bc <HAL_GetTick>
 800db96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db98:	e00a      	b.n	800dbb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db9a:	f7fd fe0f 	bl	800b7bc <HAL_GetTick>
 800db9e:	4602      	mov	r2, r0
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d901      	bls.n	800dbb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e0a6      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbb0:	4b56      	ldr	r3, [pc, #344]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dbb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb4:	f003 0302 	and.w	r3, r3, #2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1ee      	bne.n	800db9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d105      	bne.n	800dbce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbc2:	4b52      	ldr	r3, [pc, #328]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc6:	4a51      	ldr	r2, [pc, #324]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dbc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	699b      	ldr	r3, [r3, #24]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f000 8092 	beq.w	800dcfc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dbd8:	4b4c      	ldr	r3, [pc, #304]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	f003 030c 	and.w	r3, r3, #12
 800dbe0:	2b08      	cmp	r3, #8
 800dbe2:	d05c      	beq.n	800dc9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	d141      	bne.n	800dc70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbec:	4b48      	ldr	r3, [pc, #288]	; (800dd10 <HAL_RCC_OscConfig+0x4dc>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbf2:	f7fd fde3 	bl	800b7bc <HAL_GetTick>
 800dbf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbf8:	e008      	b.n	800dc0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dbfa:	f7fd fddf 	bl	800b7bc <HAL_GetTick>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d901      	bls.n	800dc0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	e078      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc0c:	4b3f      	ldr	r3, [pc, #252]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d1f0      	bne.n	800dbfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	69da      	ldr	r2, [r3, #28]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6a1b      	ldr	r3, [r3, #32]
 800dc20:	431a      	orrs	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc26:	019b      	lsls	r3, r3, #6
 800dc28:	431a      	orrs	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	085b      	lsrs	r3, r3, #1
 800dc30:	3b01      	subs	r3, #1
 800dc32:	041b      	lsls	r3, r3, #16
 800dc34:	431a      	orrs	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3a:	061b      	lsls	r3, r3, #24
 800dc3c:	4933      	ldr	r1, [pc, #204]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dc42:	4b33      	ldr	r3, [pc, #204]	; (800dd10 <HAL_RCC_OscConfig+0x4dc>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc48:	f7fd fdb8 	bl	800b7bc <HAL_GetTick>
 800dc4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc4e:	e008      	b.n	800dc62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc50:	f7fd fdb4 	bl	800b7bc <HAL_GetTick>
 800dc54:	4602      	mov	r2, r0
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	d901      	bls.n	800dc62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	e04d      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc62:	4b2a      	ldr	r3, [pc, #168]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d0f0      	beq.n	800dc50 <HAL_RCC_OscConfig+0x41c>
 800dc6e:	e045      	b.n	800dcfc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc70:	4b27      	ldr	r3, [pc, #156]	; (800dd10 <HAL_RCC_OscConfig+0x4dc>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc76:	f7fd fda1 	bl	800b7bc <HAL_GetTick>
 800dc7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc7c:	e008      	b.n	800dc90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc7e:	f7fd fd9d 	bl	800b7bc <HAL_GetTick>
 800dc82:	4602      	mov	r2, r0
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d901      	bls.n	800dc90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e036      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc90:	4b1e      	ldr	r3, [pc, #120]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1f0      	bne.n	800dc7e <HAL_RCC_OscConfig+0x44a>
 800dc9c:	e02e      	b.n	800dcfc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	699b      	ldr	r3, [r3, #24]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d101      	bne.n	800dcaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e029      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dcaa:	4b18      	ldr	r3, [pc, #96]	; (800dd0c <HAL_RCC_OscConfig+0x4d8>)
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d11c      	bne.n	800dcf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d115      	bne.n	800dcf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dcd2:	4013      	ands	r3, r2
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d10d      	bne.n	800dcf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d106      	bne.n	800dcf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d001      	beq.n	800dcfc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e000      	b.n	800dcfe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	40007000 	.word	0x40007000
 800dd0c:	40023800 	.word	0x40023800
 800dd10:	42470060 	.word	0x42470060

0800dd14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e0cc      	b.n	800dec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dd28:	4b68      	ldr	r3, [pc, #416]	; (800decc <HAL_RCC_ClockConfig+0x1b8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 030f 	and.w	r3, r3, #15
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d90c      	bls.n	800dd50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd36:	4b65      	ldr	r3, [pc, #404]	; (800decc <HAL_RCC_ClockConfig+0x1b8>)
 800dd38:	683a      	ldr	r2, [r7, #0]
 800dd3a:	b2d2      	uxtb	r2, r2
 800dd3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd3e:	4b63      	ldr	r3, [pc, #396]	; (800decc <HAL_RCC_ClockConfig+0x1b8>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f003 030f 	and.w	r3, r3, #15
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d001      	beq.n	800dd50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e0b8      	b.n	800dec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f003 0302 	and.w	r3, r3, #2
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d020      	beq.n	800dd9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 0304 	and.w	r3, r3, #4
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d005      	beq.n	800dd74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dd68:	4b59      	ldr	r3, [pc, #356]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	4a58      	ldr	r2, [pc, #352]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dd6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dd72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f003 0308 	and.w	r3, r3, #8
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d005      	beq.n	800dd8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dd80:	4b53      	ldr	r3, [pc, #332]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	4a52      	ldr	r2, [pc, #328]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dd86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dd8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd8c:	4b50      	ldr	r3, [pc, #320]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	494d      	ldr	r1, [pc, #308]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f003 0301 	and.w	r3, r3, #1
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d044      	beq.n	800de34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d107      	bne.n	800ddc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddb2:	4b47      	ldr	r3, [pc, #284]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d119      	bne.n	800ddf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e07f      	b.n	800dec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d003      	beq.n	800ddd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ddce:	2b03      	cmp	r3, #3
 800ddd0:	d107      	bne.n	800dde2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ddd2:	4b3f      	ldr	r3, [pc, #252]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d109      	bne.n	800ddf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	e06f      	b.n	800dec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dde2:	4b3b      	ldr	r3, [pc, #236]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f003 0302 	and.w	r3, r3, #2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d101      	bne.n	800ddf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e067      	b.n	800dec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ddf2:	4b37      	ldr	r3, [pc, #220]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	f023 0203 	bic.w	r2, r3, #3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	4934      	ldr	r1, [pc, #208]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800de00:	4313      	orrs	r3, r2
 800de02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800de04:	f7fd fcda 	bl	800b7bc <HAL_GetTick>
 800de08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de0a:	e00a      	b.n	800de22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de0c:	f7fd fcd6 	bl	800b7bc <HAL_GetTick>
 800de10:	4602      	mov	r2, r0
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	f241 3288 	movw	r2, #5000	; 0x1388
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d901      	bls.n	800de22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e04f      	b.n	800dec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de22:	4b2b      	ldr	r3, [pc, #172]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	f003 020c 	and.w	r2, r3, #12
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	429a      	cmp	r2, r3
 800de32:	d1eb      	bne.n	800de0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800de34:	4b25      	ldr	r3, [pc, #148]	; (800decc <HAL_RCC_ClockConfig+0x1b8>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f003 030f 	and.w	r3, r3, #15
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d20c      	bcs.n	800de5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de42:	4b22      	ldr	r3, [pc, #136]	; (800decc <HAL_RCC_ClockConfig+0x1b8>)
 800de44:	683a      	ldr	r2, [r7, #0]
 800de46:	b2d2      	uxtb	r2, r2
 800de48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de4a:	4b20      	ldr	r3, [pc, #128]	; (800decc <HAL_RCC_ClockConfig+0x1b8>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 030f 	and.w	r3, r3, #15
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	429a      	cmp	r2, r3
 800de56:	d001      	beq.n	800de5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	e032      	b.n	800dec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b00      	cmp	r3, #0
 800de66:	d008      	beq.n	800de7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de68:	4b19      	ldr	r3, [pc, #100]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	4916      	ldr	r1, [pc, #88]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800de76:	4313      	orrs	r3, r2
 800de78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0308 	and.w	r3, r3, #8
 800de82:	2b00      	cmp	r3, #0
 800de84:	d009      	beq.n	800de9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800de86:	4b12      	ldr	r3, [pc, #72]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	490e      	ldr	r1, [pc, #56]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800de96:	4313      	orrs	r3, r2
 800de98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800de9a:	f000 f821 	bl	800dee0 <HAL_RCC_GetSysClockFreq>
 800de9e:	4601      	mov	r1, r0
 800dea0:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <HAL_RCC_ClockConfig+0x1bc>)
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	091b      	lsrs	r3, r3, #4
 800dea6:	f003 030f 	and.w	r3, r3, #15
 800deaa:	4a0a      	ldr	r2, [pc, #40]	; (800ded4 <HAL_RCC_ClockConfig+0x1c0>)
 800deac:	5cd3      	ldrb	r3, [r2, r3]
 800deae:	fa21 f303 	lsr.w	r3, r1, r3
 800deb2:	4a09      	ldr	r2, [pc, #36]	; (800ded8 <HAL_RCC_ClockConfig+0x1c4>)
 800deb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800deb6:	4b09      	ldr	r3, [pc, #36]	; (800dedc <HAL_RCC_ClockConfig+0x1c8>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4618      	mov	r0, r3
 800debc:	f7fd f984 	bl	800b1c8 <HAL_InitTick>

  return HAL_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	40023c00 	.word	0x40023c00
 800ded0:	40023800 	.word	0x40023800
 800ded4:	0801b718 	.word	0x0801b718
 800ded8:	20000828 	.word	0x20000828
 800dedc:	2000082c 	.word	0x2000082c

0800dee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dee6:	2300      	movs	r3, #0
 800dee8:	607b      	str	r3, [r7, #4]
 800deea:	2300      	movs	r3, #0
 800deec:	60fb      	str	r3, [r7, #12]
 800deee:	2300      	movs	r3, #0
 800def0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800def2:	2300      	movs	r3, #0
 800def4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800def6:	4b63      	ldr	r3, [pc, #396]	; (800e084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f003 030c 	and.w	r3, r3, #12
 800defe:	2b04      	cmp	r3, #4
 800df00:	d007      	beq.n	800df12 <HAL_RCC_GetSysClockFreq+0x32>
 800df02:	2b08      	cmp	r3, #8
 800df04:	d008      	beq.n	800df18 <HAL_RCC_GetSysClockFreq+0x38>
 800df06:	2b00      	cmp	r3, #0
 800df08:	f040 80b4 	bne.w	800e074 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800df0c:	4b5e      	ldr	r3, [pc, #376]	; (800e088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800df0e:	60bb      	str	r3, [r7, #8]
       break;
 800df10:	e0b3      	b.n	800e07a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800df12:	4b5e      	ldr	r3, [pc, #376]	; (800e08c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800df14:	60bb      	str	r3, [r7, #8]
      break;
 800df16:	e0b0      	b.n	800e07a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800df18:	4b5a      	ldr	r3, [pc, #360]	; (800e084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800df22:	4b58      	ldr	r3, [pc, #352]	; (800e084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d04a      	beq.n	800dfc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df2e:	4b55      	ldr	r3, [pc, #340]	; (800e084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	099b      	lsrs	r3, r3, #6
 800df34:	f04f 0400 	mov.w	r4, #0
 800df38:	f240 11ff 	movw	r1, #511	; 0x1ff
 800df3c:	f04f 0200 	mov.w	r2, #0
 800df40:	ea03 0501 	and.w	r5, r3, r1
 800df44:	ea04 0602 	and.w	r6, r4, r2
 800df48:	4629      	mov	r1, r5
 800df4a:	4632      	mov	r2, r6
 800df4c:	f04f 0300 	mov.w	r3, #0
 800df50:	f04f 0400 	mov.w	r4, #0
 800df54:	0154      	lsls	r4, r2, #5
 800df56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800df5a:	014b      	lsls	r3, r1, #5
 800df5c:	4619      	mov	r1, r3
 800df5e:	4622      	mov	r2, r4
 800df60:	1b49      	subs	r1, r1, r5
 800df62:	eb62 0206 	sbc.w	r2, r2, r6
 800df66:	f04f 0300 	mov.w	r3, #0
 800df6a:	f04f 0400 	mov.w	r4, #0
 800df6e:	0194      	lsls	r4, r2, #6
 800df70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800df74:	018b      	lsls	r3, r1, #6
 800df76:	1a5b      	subs	r3, r3, r1
 800df78:	eb64 0402 	sbc.w	r4, r4, r2
 800df7c:	f04f 0100 	mov.w	r1, #0
 800df80:	f04f 0200 	mov.w	r2, #0
 800df84:	00e2      	lsls	r2, r4, #3
 800df86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800df8a:	00d9      	lsls	r1, r3, #3
 800df8c:	460b      	mov	r3, r1
 800df8e:	4614      	mov	r4, r2
 800df90:	195b      	adds	r3, r3, r5
 800df92:	eb44 0406 	adc.w	r4, r4, r6
 800df96:	f04f 0100 	mov.w	r1, #0
 800df9a:	f04f 0200 	mov.w	r2, #0
 800df9e:	0262      	lsls	r2, r4, #9
 800dfa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800dfa4:	0259      	lsls	r1, r3, #9
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	4614      	mov	r4, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	4621      	mov	r1, r4
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f04f 0400 	mov.w	r4, #0
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	4623      	mov	r3, r4
 800dfb8:	f7f2 fe66 	bl	8000c88 <__aeabi_uldivmod>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	e049      	b.n	800e058 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dfc4:	4b2f      	ldr	r3, [pc, #188]	; (800e084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	099b      	lsrs	r3, r3, #6
 800dfca:	f04f 0400 	mov.w	r4, #0
 800dfce:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dfd2:	f04f 0200 	mov.w	r2, #0
 800dfd6:	ea03 0501 	and.w	r5, r3, r1
 800dfda:	ea04 0602 	and.w	r6, r4, r2
 800dfde:	4629      	mov	r1, r5
 800dfe0:	4632      	mov	r2, r6
 800dfe2:	f04f 0300 	mov.w	r3, #0
 800dfe6:	f04f 0400 	mov.w	r4, #0
 800dfea:	0154      	lsls	r4, r2, #5
 800dfec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dff0:	014b      	lsls	r3, r1, #5
 800dff2:	4619      	mov	r1, r3
 800dff4:	4622      	mov	r2, r4
 800dff6:	1b49      	subs	r1, r1, r5
 800dff8:	eb62 0206 	sbc.w	r2, r2, r6
 800dffc:	f04f 0300 	mov.w	r3, #0
 800e000:	f04f 0400 	mov.w	r4, #0
 800e004:	0194      	lsls	r4, r2, #6
 800e006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e00a:	018b      	lsls	r3, r1, #6
 800e00c:	1a5b      	subs	r3, r3, r1
 800e00e:	eb64 0402 	sbc.w	r4, r4, r2
 800e012:	f04f 0100 	mov.w	r1, #0
 800e016:	f04f 0200 	mov.w	r2, #0
 800e01a:	00e2      	lsls	r2, r4, #3
 800e01c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e020:	00d9      	lsls	r1, r3, #3
 800e022:	460b      	mov	r3, r1
 800e024:	4614      	mov	r4, r2
 800e026:	195b      	adds	r3, r3, r5
 800e028:	eb44 0406 	adc.w	r4, r4, r6
 800e02c:	f04f 0100 	mov.w	r1, #0
 800e030:	f04f 0200 	mov.w	r2, #0
 800e034:	02a2      	lsls	r2, r4, #10
 800e036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800e03a:	0299      	lsls	r1, r3, #10
 800e03c:	460b      	mov	r3, r1
 800e03e:	4614      	mov	r4, r2
 800e040:	4618      	mov	r0, r3
 800e042:	4621      	mov	r1, r4
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f04f 0400 	mov.w	r4, #0
 800e04a:	461a      	mov	r2, r3
 800e04c:	4623      	mov	r3, r4
 800e04e:	f7f2 fe1b 	bl	8000c88 <__aeabi_uldivmod>
 800e052:	4603      	mov	r3, r0
 800e054:	460c      	mov	r4, r1
 800e056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e058:	4b0a      	ldr	r3, [pc, #40]	; (800e084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	0c1b      	lsrs	r3, r3, #16
 800e05e:	f003 0303 	and.w	r3, r3, #3
 800e062:	3301      	adds	r3, #1
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e070:	60bb      	str	r3, [r7, #8]
      break;
 800e072:	e002      	b.n	800e07a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e074:	4b04      	ldr	r3, [pc, #16]	; (800e088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e076:	60bb      	str	r3, [r7, #8]
      break;
 800e078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e07a:	68bb      	ldr	r3, [r7, #8]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e084:	40023800 	.word	0x40023800
 800e088:	00f42400 	.word	0x00f42400
 800e08c:	007a1200 	.word	0x007a1200

0800e090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e090:	b480      	push	{r7}
 800e092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e094:	4b03      	ldr	r3, [pc, #12]	; (800e0a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e096:	681b      	ldr	r3, [r3, #0]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	20000828 	.word	0x20000828

0800e0a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e0ac:	f7ff fff0 	bl	800e090 <HAL_RCC_GetHCLKFreq>
 800e0b0:	4601      	mov	r1, r0
 800e0b2:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	0a9b      	lsrs	r3, r3, #10
 800e0b8:	f003 0307 	and.w	r3, r3, #7
 800e0bc:	4a03      	ldr	r2, [pc, #12]	; (800e0cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800e0be:	5cd3      	ldrb	r3, [r2, r3]
 800e0c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	40023800 	.word	0x40023800
 800e0cc:	0801b728 	.word	0x0801b728

0800e0d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e0d4:	f7ff ffdc 	bl	800e090 <HAL_RCC_GetHCLKFreq>
 800e0d8:	4601      	mov	r1, r0
 800e0da:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	0b5b      	lsrs	r3, r3, #13
 800e0e0:	f003 0307 	and.w	r3, r3, #7
 800e0e4:	4a03      	ldr	r2, [pc, #12]	; (800e0f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0e6:	5cd3      	ldrb	r3, [r2, r3]
 800e0e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	40023800 	.word	0x40023800
 800e0f4:	0801b728 	.word	0x0801b728

0800e0f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	220f      	movs	r2, #15
 800e106:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e108:	4b12      	ldr	r3, [pc, #72]	; (800e154 <HAL_RCC_GetClockConfig+0x5c>)
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	f003 0203 	and.w	r2, r3, #3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e114:	4b0f      	ldr	r3, [pc, #60]	; (800e154 <HAL_RCC_GetClockConfig+0x5c>)
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e120:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <HAL_RCC_GetClockConfig+0x5c>)
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e12c:	4b09      	ldr	r3, [pc, #36]	; (800e154 <HAL_RCC_GetClockConfig+0x5c>)
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	08db      	lsrs	r3, r3, #3
 800e132:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e13a:	4b07      	ldr	r3, [pc, #28]	; (800e158 <HAL_RCC_GetClockConfig+0x60>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f003 020f 	and.w	r2, r3, #15
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	601a      	str	r2, [r3, #0]
}
 800e146:	bf00      	nop
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	40023800 	.word	0x40023800
 800e158:	40023c00 	.word	0x40023c00

0800e15c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e01d      	b.n	800e1aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7fd f9aa 	bl	800b4dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2202      	movs	r2, #2
 800e18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3304      	adds	r3, #4
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f000 fa38 	bl	800e610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e1b2:	b480      	push	{r7}
 800e1b4:	b085      	sub	sp, #20
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2202      	movs	r2, #2
 800e1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	f003 0307 	and.w	r3, r3, #7
 800e1cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2b06      	cmp	r3, #6
 800e1d2:	d007      	beq.n	800e1e4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f042 0201 	orr.w	r2, r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b085      	sub	sp, #20
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68da      	ldr	r2, [r3, #12]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f042 0201 	orr.w	r2, r2, #1
 800e210:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	f003 0307 	and.w	r3, r3, #7
 800e21c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2b06      	cmp	r3, #6
 800e222:	d007      	beq.n	800e234 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f042 0201 	orr.w	r2, r2, #1
 800e232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3714      	adds	r7, #20
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b082      	sub	sp, #8
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	f003 0302 	and.w	r3, r3, #2
 800e254:	2b02      	cmp	r3, #2
 800e256:	d122      	bne.n	800e29e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	f003 0302 	and.w	r3, r3, #2
 800e262:	2b02      	cmp	r3, #2
 800e264:	d11b      	bne.n	800e29e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f06f 0202 	mvn.w	r2, #2
 800e26e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	f003 0303 	and.w	r3, r3, #3
 800e280:	2b00      	cmp	r3, #0
 800e282:	d003      	beq.n	800e28c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f9a5 	bl	800e5d4 <HAL_TIM_IC_CaptureCallback>
 800e28a:	e005      	b.n	800e298 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f997 	bl	800e5c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f9a8 	bl	800e5e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	f003 0304 	and.w	r3, r3, #4
 800e2a8:	2b04      	cmp	r3, #4
 800e2aa:	d122      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	f003 0304 	and.w	r3, r3, #4
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	d11b      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f06f 0204 	mvn.w	r2, #4
 800e2c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2202      	movs	r2, #2
 800e2c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d003      	beq.n	800e2e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 f97b 	bl	800e5d4 <HAL_TIM_IC_CaptureCallback>
 800e2de:	e005      	b.n	800e2ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f96d 	bl	800e5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f97e 	bl	800e5e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	f003 0308 	and.w	r3, r3, #8
 800e2fc:	2b08      	cmp	r3, #8
 800e2fe:	d122      	bne.n	800e346 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	f003 0308 	and.w	r3, r3, #8
 800e30a:	2b08      	cmp	r3, #8
 800e30c:	d11b      	bne.n	800e346 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f06f 0208 	mvn.w	r2, #8
 800e316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2204      	movs	r2, #4
 800e31c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	69db      	ldr	r3, [r3, #28]
 800e324:	f003 0303 	and.w	r3, r3, #3
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f951 	bl	800e5d4 <HAL_TIM_IC_CaptureCallback>
 800e332:	e005      	b.n	800e340 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 f943 	bl	800e5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f954 	bl	800e5e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	f003 0310 	and.w	r3, r3, #16
 800e350:	2b10      	cmp	r3, #16
 800e352:	d122      	bne.n	800e39a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	f003 0310 	and.w	r3, r3, #16
 800e35e:	2b10      	cmp	r3, #16
 800e360:	d11b      	bne.n	800e39a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f06f 0210 	mvn.w	r2, #16
 800e36a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2208      	movs	r2, #8
 800e370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f927 	bl	800e5d4 <HAL_TIM_IC_CaptureCallback>
 800e386:	e005      	b.n	800e394 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f919 	bl	800e5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f92a 	bl	800e5e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d10e      	bne.n	800e3c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d107      	bne.n	800e3c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f06f 0201 	mvn.w	r2, #1
 800e3be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7f6 fa61 	bl	8004888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3d0:	2b80      	cmp	r3, #128	; 0x80
 800e3d2:	d10e      	bne.n	800e3f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3de:	2b80      	cmp	r3, #128	; 0x80
 800e3e0:	d107      	bne.n	800e3f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e3ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 facf 	bl	800e990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3fc:	2b40      	cmp	r3, #64	; 0x40
 800e3fe:	d10e      	bne.n	800e41e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e40a:	2b40      	cmp	r3, #64	; 0x40
 800e40c:	d107      	bne.n	800e41e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 f8ef 	bl	800e5fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	f003 0320 	and.w	r3, r3, #32
 800e428:	2b20      	cmp	r3, #32
 800e42a:	d10e      	bne.n	800e44a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	f003 0320 	and.w	r3, r3, #32
 800e436:	2b20      	cmp	r3, #32
 800e438:	d107      	bne.n	800e44a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f06f 0220 	mvn.w	r2, #32
 800e442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 fa99 	bl	800e97c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e44a:	bf00      	nop
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e462:	2b01      	cmp	r3, #1
 800e464:	d101      	bne.n	800e46a <HAL_TIM_ConfigClockSource+0x18>
 800e466:	2302      	movs	r3, #2
 800e468:	e0a6      	b.n	800e5b8 <HAL_TIM_ConfigClockSource+0x166>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2202      	movs	r2, #2
 800e476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e488:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e490:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b40      	cmp	r3, #64	; 0x40
 800e4a0:	d067      	beq.n	800e572 <HAL_TIM_ConfigClockSource+0x120>
 800e4a2:	2b40      	cmp	r3, #64	; 0x40
 800e4a4:	d80b      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x6c>
 800e4a6:	2b10      	cmp	r3, #16
 800e4a8:	d073      	beq.n	800e592 <HAL_TIM_ConfigClockSource+0x140>
 800e4aa:	2b10      	cmp	r3, #16
 800e4ac:	d802      	bhi.n	800e4b4 <HAL_TIM_ConfigClockSource+0x62>
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d06f      	beq.n	800e592 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e4b2:	e078      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e4b4:	2b20      	cmp	r3, #32
 800e4b6:	d06c      	beq.n	800e592 <HAL_TIM_ConfigClockSource+0x140>
 800e4b8:	2b30      	cmp	r3, #48	; 0x30
 800e4ba:	d06a      	beq.n	800e592 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e4bc:	e073      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e4be:	2b70      	cmp	r3, #112	; 0x70
 800e4c0:	d00d      	beq.n	800e4de <HAL_TIM_ConfigClockSource+0x8c>
 800e4c2:	2b70      	cmp	r3, #112	; 0x70
 800e4c4:	d804      	bhi.n	800e4d0 <HAL_TIM_ConfigClockSource+0x7e>
 800e4c6:	2b50      	cmp	r3, #80	; 0x50
 800e4c8:	d033      	beq.n	800e532 <HAL_TIM_ConfigClockSource+0xe0>
 800e4ca:	2b60      	cmp	r3, #96	; 0x60
 800e4cc:	d041      	beq.n	800e552 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e4ce:	e06a      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4d4:	d066      	beq.n	800e5a4 <HAL_TIM_ConfigClockSource+0x152>
 800e4d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4da:	d017      	beq.n	800e50c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e4dc:	e063      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	6899      	ldr	r1, [r3, #8]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	685a      	ldr	r2, [r3, #4]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	f000 f9a9 	bl	800e844 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e500:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	609a      	str	r2, [r3, #8]
      break;
 800e50a:	e04c      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6818      	ldr	r0, [r3, #0]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	6899      	ldr	r1, [r3, #8]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	685a      	ldr	r2, [r3, #4]
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	f000 f992 	bl	800e844 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689a      	ldr	r2, [r3, #8]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e52e:	609a      	str	r2, [r3, #8]
      break;
 800e530:	e039      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6818      	ldr	r0, [r3, #0]
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	6859      	ldr	r1, [r3, #4]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	461a      	mov	r2, r3
 800e540:	f000 f906 	bl	800e750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2150      	movs	r1, #80	; 0x50
 800e54a:	4618      	mov	r0, r3
 800e54c:	f000 f95f 	bl	800e80e <TIM_ITRx_SetConfig>
      break;
 800e550:	e029      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6818      	ldr	r0, [r3, #0]
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	6859      	ldr	r1, [r3, #4]
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	461a      	mov	r2, r3
 800e560:	f000 f925 	bl	800e7ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2160      	movs	r1, #96	; 0x60
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 f94f 	bl	800e80e <TIM_ITRx_SetConfig>
      break;
 800e570:	e019      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6818      	ldr	r0, [r3, #0]
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	6859      	ldr	r1, [r3, #4]
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	461a      	mov	r2, r3
 800e580:	f000 f8e6 	bl	800e750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2140      	movs	r1, #64	; 0x40
 800e58a:	4618      	mov	r0, r3
 800e58c:	f000 f93f 	bl	800e80e <TIM_ITRx_SetConfig>
      break;
 800e590:	e009      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4619      	mov	r1, r3
 800e59c:	4610      	mov	r0, r2
 800e59e:	f000 f936 	bl	800e80e <TIM_ITRx_SetConfig>
      break;
 800e5a2:	e000      	b.n	800e5a6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e5a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e5c8:	bf00      	nop
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e5dc:	bf00      	nop
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a40      	ldr	r2, [pc, #256]	; (800e724 <TIM_Base_SetConfig+0x114>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d013      	beq.n	800e650 <TIM_Base_SetConfig+0x40>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e62e:	d00f      	beq.n	800e650 <TIM_Base_SetConfig+0x40>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a3d      	ldr	r2, [pc, #244]	; (800e728 <TIM_Base_SetConfig+0x118>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d00b      	beq.n	800e650 <TIM_Base_SetConfig+0x40>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a3c      	ldr	r2, [pc, #240]	; (800e72c <TIM_Base_SetConfig+0x11c>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d007      	beq.n	800e650 <TIM_Base_SetConfig+0x40>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a3b      	ldr	r2, [pc, #236]	; (800e730 <TIM_Base_SetConfig+0x120>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d003      	beq.n	800e650 <TIM_Base_SetConfig+0x40>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a3a      	ldr	r2, [pc, #232]	; (800e734 <TIM_Base_SetConfig+0x124>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d108      	bne.n	800e662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	4313      	orrs	r3, r2
 800e660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4a2f      	ldr	r2, [pc, #188]	; (800e724 <TIM_Base_SetConfig+0x114>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d02b      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e670:	d027      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4a2c      	ldr	r2, [pc, #176]	; (800e728 <TIM_Base_SetConfig+0x118>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d023      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4a2b      	ldr	r2, [pc, #172]	; (800e72c <TIM_Base_SetConfig+0x11c>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d01f      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4a2a      	ldr	r2, [pc, #168]	; (800e730 <TIM_Base_SetConfig+0x120>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d01b      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4a29      	ldr	r2, [pc, #164]	; (800e734 <TIM_Base_SetConfig+0x124>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d017      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	4a28      	ldr	r2, [pc, #160]	; (800e738 <TIM_Base_SetConfig+0x128>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d013      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4a27      	ldr	r2, [pc, #156]	; (800e73c <TIM_Base_SetConfig+0x12c>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d00f      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4a26      	ldr	r2, [pc, #152]	; (800e740 <TIM_Base_SetConfig+0x130>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d00b      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4a25      	ldr	r2, [pc, #148]	; (800e744 <TIM_Base_SetConfig+0x134>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d007      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4a24      	ldr	r2, [pc, #144]	; (800e748 <TIM_Base_SetConfig+0x138>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d003      	beq.n	800e6c2 <TIM_Base_SetConfig+0xb2>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a23      	ldr	r2, [pc, #140]	; (800e74c <TIM_Base_SetConfig+0x13c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d108      	bne.n	800e6d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	695b      	ldr	r3, [r3, #20]
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	689a      	ldr	r2, [r3, #8]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4a0a      	ldr	r2, [pc, #40]	; (800e724 <TIM_Base_SetConfig+0x114>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d003      	beq.n	800e708 <TIM_Base_SetConfig+0xf8>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a0c      	ldr	r2, [pc, #48]	; (800e734 <TIM_Base_SetConfig+0x124>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d103      	bne.n	800e710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	691a      	ldr	r2, [r3, #16]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2201      	movs	r2, #1
 800e714:	615a      	str	r2, [r3, #20]
}
 800e716:	bf00      	nop
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	40010000 	.word	0x40010000
 800e728:	40000400 	.word	0x40000400
 800e72c:	40000800 	.word	0x40000800
 800e730:	40000c00 	.word	0x40000c00
 800e734:	40010400 	.word	0x40010400
 800e738:	40014000 	.word	0x40014000
 800e73c:	40014400 	.word	0x40014400
 800e740:	40014800 	.word	0x40014800
 800e744:	40001800 	.word	0x40001800
 800e748:	40001c00 	.word	0x40001c00
 800e74c:	40002000 	.word	0x40002000

0800e750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e750:	b480      	push	{r7}
 800e752:	b087      	sub	sp, #28
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6a1b      	ldr	r3, [r3, #32]
 800e760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	f023 0201 	bic.w	r2, r3, #1
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	699b      	ldr	r3, [r3, #24]
 800e772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e77a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	011b      	lsls	r3, r3, #4
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	4313      	orrs	r3, r2
 800e784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	f023 030a 	bic.w	r3, r3, #10
 800e78c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	4313      	orrs	r3, r2
 800e794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	693a      	ldr	r2, [r7, #16]
 800e79a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	697a      	ldr	r2, [r7, #20]
 800e7a0:	621a      	str	r2, [r3, #32]
}
 800e7a2:	bf00      	nop
 800e7a4:	371c      	adds	r7, #28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b087      	sub	sp, #28
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	60f8      	str	r0, [r7, #12]
 800e7b6:	60b9      	str	r1, [r7, #8]
 800e7b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6a1b      	ldr	r3, [r3, #32]
 800e7be:	f023 0210 	bic.w	r2, r3, #16
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6a1b      	ldr	r3, [r3, #32]
 800e7d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	031b      	lsls	r3, r3, #12
 800e7de:	697a      	ldr	r2, [r7, #20]
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	011b      	lsls	r3, r3, #4
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	697a      	ldr	r2, [r7, #20]
 800e7fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	693a      	ldr	r2, [r7, #16]
 800e800:	621a      	str	r2, [r3, #32]
}
 800e802:	bf00      	nop
 800e804:	371c      	adds	r7, #28
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e80e:	b480      	push	{r7}
 800e810:	b085      	sub	sp, #20
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	f043 0307 	orr.w	r3, r3, #7
 800e830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	609a      	str	r2, [r3, #8]
}
 800e838:	bf00      	nop
 800e83a:	3714      	adds	r7, #20
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e844:	b480      	push	{r7}
 800e846:	b087      	sub	sp, #28
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e85e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	021a      	lsls	r2, r3, #8
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	431a      	orrs	r2, r3
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	4313      	orrs	r3, r2
 800e86c:	697a      	ldr	r2, [r7, #20]
 800e86e:	4313      	orrs	r3, r2
 800e870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	697a      	ldr	r2, [r7, #20]
 800e876:	609a      	str	r2, [r3, #8]
}
 800e878:	bf00      	nop
 800e87a:	371c      	adds	r7, #28
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e894:	2b01      	cmp	r3, #1
 800e896:	d101      	bne.n	800e89c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e898:	2302      	movs	r3, #2
 800e89a:	e05a      	b.n	800e952 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a21      	ldr	r2, [pc, #132]	; (800e960 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d022      	beq.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8e8:	d01d      	beq.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a1d      	ldr	r2, [pc, #116]	; (800e964 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d018      	beq.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a1b      	ldr	r2, [pc, #108]	; (800e968 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d013      	beq.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4a1a      	ldr	r2, [pc, #104]	; (800e96c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d00e      	beq.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a18      	ldr	r2, [pc, #96]	; (800e970 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d009      	beq.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a17      	ldr	r2, [pc, #92]	; (800e974 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d004      	beq.n	800e926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a15      	ldr	r2, [pc, #84]	; (800e978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d10c      	bne.n	800e940 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e92c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	68ba      	ldr	r2, [r7, #8]
 800e934:	4313      	orrs	r3, r2
 800e936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	40010000 	.word	0x40010000
 800e964:	40000400 	.word	0x40000400
 800e968:	40000800 	.word	0x40000800
 800e96c:	40000c00 	.word	0x40000c00
 800e970:	40010400 	.word	0x40010400
 800e974:	40014000 	.word	0x40014000
 800e978:	40001800 	.word	0x40001800

0800e97c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d101      	bne.n	800e9b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e03f      	b.n	800ea36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d106      	bne.n	800e9d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f7fc fdec 	bl	800b5a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2224      	movs	r2, #36	; 0x24
 800e9d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68da      	ldr	r2, [r3, #12]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e9e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 fb6b 	bl	800f0c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	691a      	ldr	r2, [r3, #16]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e9fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	695a      	ldr	r2, [r3, #20]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68da      	ldr	r2, [r3, #12]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2220      	movs	r2, #32
 800ea28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2220      	movs	r2, #32
 800ea30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
	...

0800ea40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	4613      	mov	r3, r2
 800ea4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b20      	cmp	r3, #32
 800ea58:	d153      	bne.n	800eb02 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d002      	beq.n	800ea66 <HAL_UART_Transmit_DMA+0x26>
 800ea60:	88fb      	ldrh	r3, [r7, #6]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d101      	bne.n	800ea6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	e04c      	b.n	800eb04 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d101      	bne.n	800ea78 <HAL_UART_Transmit_DMA+0x38>
 800ea74:	2302      	movs	r3, #2
 800ea76:	e045      	b.n	800eb04 <HAL_UART_Transmit_DMA+0xc4>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	88fa      	ldrh	r2, [r7, #6]
 800ea8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	88fa      	ldrh	r2, [r7, #6]
 800ea90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2221      	movs	r2, #33	; 0x21
 800ea9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa4:	4a19      	ldr	r2, [pc, #100]	; (800eb0c <HAL_UART_Transmit_DMA+0xcc>)
 800eaa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaac:	4a18      	ldr	r2, [pc, #96]	; (800eb10 <HAL_UART_Transmit_DMA+0xd0>)
 800eaae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eab4:	4a17      	ldr	r2, [pc, #92]	; (800eb14 <HAL_UART_Transmit_DMA+0xd4>)
 800eab6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eabc:	2200      	movs	r2, #0
 800eabe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800eac0:	f107 0308 	add.w	r3, r7, #8
 800eac4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	6819      	ldr	r1, [r3, #0]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	3304      	adds	r3, #4
 800ead4:	461a      	mov	r2, r3
 800ead6:	88fb      	ldrh	r3, [r7, #6]
 800ead8:	f7fd f82e 	bl	800bb38 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eae4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	695a      	ldr	r2, [r3, #20]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eafc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800eafe:	2300      	movs	r3, #0
 800eb00:	e000      	b.n	800eb04 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800eb02:	2302      	movs	r3, #2
  }
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3718      	adds	r7, #24
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	0800ed55 	.word	0x0800ed55
 800eb10:	0800eda7 	.word	0x0800eda7
 800eb14:	0800edc3 	.word	0x0800edc3

0800eb18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b088      	sub	sp, #32
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	695b      	ldr	r3, [r3, #20]
 800eb36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	f003 030f 	and.w	r3, r3, #15
 800eb46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10d      	bne.n	800eb6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	f003 0320 	and.w	r3, r3, #32
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d008      	beq.n	800eb6a <HAL_UART_IRQHandler+0x52>
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	f003 0320 	and.w	r3, r3, #32
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d003      	beq.n	800eb6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 fa2d 	bl	800efc2 <UART_Receive_IT>
      return;
 800eb68:	e0d1      	b.n	800ed0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f000 80b0 	beq.w	800ecd2 <HAL_UART_IRQHandler+0x1ba>
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f003 0301 	and.w	r3, r3, #1
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d105      	bne.n	800eb88 <HAL_UART_IRQHandler+0x70>
 800eb7c:	69bb      	ldr	r3, [r7, #24]
 800eb7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 80a5 	beq.w	800ecd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	f003 0301 	and.w	r3, r3, #1
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00a      	beq.n	800eba8 <HAL_UART_IRQHandler+0x90>
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d005      	beq.n	800eba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eba0:	f043 0201 	orr.w	r2, r3, #1
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	f003 0304 	and.w	r3, r3, #4
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00a      	beq.n	800ebc8 <HAL_UART_IRQHandler+0xb0>
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	f003 0301 	and.w	r3, r3, #1
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d005      	beq.n	800ebc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc0:	f043 0202 	orr.w	r2, r3, #2
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	f003 0302 	and.w	r3, r3, #2
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00a      	beq.n	800ebe8 <HAL_UART_IRQHandler+0xd0>
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d005      	beq.n	800ebe8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebe0:	f043 0204 	orr.w	r2, r3, #4
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	f003 0308 	and.w	r3, r3, #8
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00f      	beq.n	800ec12 <HAL_UART_IRQHandler+0xfa>
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	f003 0320 	and.w	r3, r3, #32
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d104      	bne.n	800ec06 <HAL_UART_IRQHandler+0xee>
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d005      	beq.n	800ec12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec0a:	f043 0208 	orr.w	r2, r3, #8
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d078      	beq.n	800ed0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	f003 0320 	and.w	r3, r3, #32
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d007      	beq.n	800ec34 <HAL_UART_IRQHandler+0x11c>
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	f003 0320 	and.w	r3, r3, #32
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d002      	beq.n	800ec34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f9c7 	bl	800efc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	695b      	ldr	r3, [r3, #20]
 800ec3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec3e:	2b40      	cmp	r3, #64	; 0x40
 800ec40:	bf0c      	ite	eq
 800ec42:	2301      	moveq	r3, #1
 800ec44:	2300      	movne	r3, #0
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec4e:	f003 0308 	and.w	r3, r3, #8
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d102      	bne.n	800ec5c <HAL_UART_IRQHandler+0x144>
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d031      	beq.n	800ecc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 f910 	bl	800ee82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec6c:	2b40      	cmp	r3, #64	; 0x40
 800ec6e:	d123      	bne.n	800ecb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	695a      	ldr	r2, [r3, #20]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d013      	beq.n	800ecb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec8c:	4a21      	ldr	r2, [pc, #132]	; (800ed14 <HAL_UART_IRQHandler+0x1fc>)
 800ec8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fc ffa7 	bl	800bbe8 <HAL_DMA_Abort_IT>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d016      	beq.n	800ecce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ecaa:	4610      	mov	r0, r2
 800ecac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecae:	e00e      	b.n	800ecce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f845 	bl	800ed40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecb6:	e00a      	b.n	800ecce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 f841 	bl	800ed40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecbe:	e006      	b.n	800ecce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f83d 	bl	800ed40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800eccc:	e01e      	b.n	800ed0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecce:	bf00      	nop
    return;
 800ecd0:	e01c      	b.n	800ed0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d008      	beq.n	800ecee <HAL_UART_IRQHandler+0x1d6>
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d003      	beq.n	800ecee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 f8fd 	bl	800eee6 <UART_Transmit_IT>
    return;
 800ecec:	e00f      	b.n	800ed0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00a      	beq.n	800ed0e <HAL_UART_IRQHandler+0x1f6>
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d005      	beq.n	800ed0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f945 	bl	800ef92 <UART_EndTransmit_IT>
    return;
 800ed08:	bf00      	nop
 800ed0a:	e000      	b.n	800ed0e <HAL_UART_IRQHandler+0x1f6>
    return;
 800ed0c:	bf00      	nop
  }
}
 800ed0e:	3720      	adds	r7, #32
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	0800eebf 	.word	0x0800eebf

0800ed18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d113      	bne.n	800ed98 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	695a      	ldr	r2, [r3, #20]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed84:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68da      	ldr	r2, [r3, #12]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed94:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed96:	e002      	b.n	800ed9e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f7fc fc87 	bl	800b6ac <HAL_UART_TxCpltCallback>
}
 800ed9e:	bf00      	nop
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b084      	sub	sp, #16
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f7ff ffaf 	bl	800ed18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edba:	bf00      	nop
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b084      	sub	sp, #16
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800edca:	2300      	movs	r3, #0
 800edcc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edde:	2b80      	cmp	r3, #128	; 0x80
 800ede0:	bf0c      	ite	eq
 800ede2:	2301      	moveq	r3, #1
 800ede4:	2300      	movne	r3, #0
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	2b21      	cmp	r3, #33	; 0x21
 800edf4:	d108      	bne.n	800ee08 <UART_DMAError+0x46>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d005      	beq.n	800ee08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	2200      	movs	r2, #0
 800ee00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ee02:	68b8      	ldr	r0, [r7, #8]
 800ee04:	f000 f827 	bl	800ee56 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee12:	2b40      	cmp	r3, #64	; 0x40
 800ee14:	bf0c      	ite	eq
 800ee16:	2301      	moveq	r3, #1
 800ee18:	2300      	movne	r3, #0
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b22      	cmp	r3, #34	; 0x22
 800ee28:	d108      	bne.n	800ee3c <UART_DMAError+0x7a>
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d005      	beq.n	800ee3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	2200      	movs	r2, #0
 800ee34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ee36:	68b8      	ldr	r0, [r7, #8]
 800ee38:	f000 f823 	bl	800ee82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee40:	f043 0210 	orr.w	r2, r3, #16
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee48:	68b8      	ldr	r0, [r7, #8]
 800ee4a:	f7ff ff79 	bl	800ed40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee4e:	bf00      	nop
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ee56:	b480      	push	{r7}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	68da      	ldr	r2, [r3, #12]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ee6c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2220      	movs	r2, #32
 800ee72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ee76:	bf00      	nop
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr

0800ee82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	68da      	ldr	r2, [r3, #12]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ee98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	695a      	ldr	r2, [r3, #20]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f022 0201 	bic.w	r2, r2, #1
 800eea8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2220      	movs	r2, #32
 800eeae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800eeb2:	bf00      	nop
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b084      	sub	sp, #16
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2200      	movs	r2, #0
 800eed6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f7ff ff31 	bl	800ed40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eee6:	b480      	push	{r7}
 800eee8:	b085      	sub	sp, #20
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	2b21      	cmp	r3, #33	; 0x21
 800eef8:	d144      	bne.n	800ef84 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef02:	d11a      	bne.n	800ef3a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6a1b      	ldr	r3, [r3, #32]
 800ef08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef18:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	691b      	ldr	r3, [r3, #16]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d105      	bne.n	800ef2e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a1b      	ldr	r3, [r3, #32]
 800ef26:	1c9a      	adds	r2, r3, #2
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	621a      	str	r2, [r3, #32]
 800ef2c:	e00e      	b.n	800ef4c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	1c5a      	adds	r2, r3, #1
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	621a      	str	r2, [r3, #32]
 800ef38:	e008      	b.n	800ef4c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	1c59      	adds	r1, r3, #1
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	6211      	str	r1, [r2, #32]
 800ef44:	781a      	ldrb	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	3b01      	subs	r3, #1
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	4619      	mov	r1, r3
 800ef5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10f      	bne.n	800ef80 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68da      	ldr	r2, [r3, #12]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	68da      	ldr	r2, [r3, #12]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ef80:	2300      	movs	r3, #0
 800ef82:	e000      	b.n	800ef86 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ef84:	2302      	movs	r3, #2
  }
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3714      	adds	r7, #20
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr

0800ef92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b082      	sub	sp, #8
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68da      	ldr	r2, [r3, #12]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2220      	movs	r2, #32
 800efae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7fc fb7a 	bl	800b6ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b084      	sub	sp, #16
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b22      	cmp	r3, #34	; 0x22
 800efd4:	d171      	bne.n	800f0ba <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efde:	d123      	bne.n	800f028 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10e      	bne.n	800f00c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800effa:	b29a      	uxth	r2, r3
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f004:	1c9a      	adds	r2, r3, #2
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	629a      	str	r2, [r3, #40]	; 0x28
 800f00a:	e029      	b.n	800f060 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	b29b      	uxth	r3, r3
 800f014:	b2db      	uxtb	r3, r3
 800f016:	b29a      	uxth	r2, r3
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f020:	1c5a      	adds	r2, r3, #1
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	629a      	str	r2, [r3, #40]	; 0x28
 800f026:	e01b      	b.n	800f060 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	691b      	ldr	r3, [r3, #16]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d10a      	bne.n	800f046 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	6858      	ldr	r0, [r3, #4]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f03a:	1c59      	adds	r1, r3, #1
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	6291      	str	r1, [r2, #40]	; 0x28
 800f040:	b2c2      	uxtb	r2, r0
 800f042:	701a      	strb	r2, [r3, #0]
 800f044:	e00c      	b.n	800f060 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f052:	1c58      	adds	r0, r3, #1
 800f054:	6879      	ldr	r1, [r7, #4]
 800f056:	6288      	str	r0, [r1, #40]	; 0x28
 800f058:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f05c:	b2d2      	uxtb	r2, r2
 800f05e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f064:	b29b      	uxth	r3, r3
 800f066:	3b01      	subs	r3, #1
 800f068:	b29b      	uxth	r3, r3
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	4619      	mov	r1, r3
 800f06e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f070:	2b00      	cmp	r3, #0
 800f072:	d120      	bne.n	800f0b6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68da      	ldr	r2, [r3, #12]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f022 0220 	bic.w	r2, r2, #32
 800f082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68da      	ldr	r2, [r3, #12]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	695a      	ldr	r2, [r3, #20]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f022 0201 	bic.w	r2, r2, #1
 800f0a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2220      	movs	r2, #32
 800f0a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7ff fe3d 	bl	800ed2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e002      	b.n	800f0bc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	e000      	b.n	800f0bc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f0ba:	2302      	movs	r3, #2
  }
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	691b      	ldr	r3, [r3, #16]
 800f0d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	68da      	ldr	r2, [r3, #12]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	430a      	orrs	r2, r1
 800f0e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	689a      	ldr	r2, [r3, #8]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	431a      	orrs	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	695b      	ldr	r3, [r3, #20]
 800f0f2:	431a      	orrs	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	69db      	ldr	r3, [r3, #28]
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f106:	f023 030c 	bic.w	r3, r3, #12
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	6812      	ldr	r2, [r2, #0]
 800f10e:	68f9      	ldr	r1, [r7, #12]
 800f110:	430b      	orrs	r3, r1
 800f112:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	695b      	ldr	r3, [r3, #20]
 800f11a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	699a      	ldr	r2, [r3, #24]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	430a      	orrs	r2, r1
 800f128:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	69db      	ldr	r3, [r3, #28]
 800f12e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f132:	f040 818b 	bne.w	800f44c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4ac1      	ldr	r2, [pc, #772]	; (800f440 <UART_SetConfig+0x37c>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d005      	beq.n	800f14c <UART_SetConfig+0x88>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4abf      	ldr	r2, [pc, #764]	; (800f444 <UART_SetConfig+0x380>)
 800f146:	4293      	cmp	r3, r2
 800f148:	f040 80bd 	bne.w	800f2c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f14c:	f7fe ffc0 	bl	800e0d0 <HAL_RCC_GetPCLK2Freq>
 800f150:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	461d      	mov	r5, r3
 800f156:	f04f 0600 	mov.w	r6, #0
 800f15a:	46a8      	mov	r8, r5
 800f15c:	46b1      	mov	r9, r6
 800f15e:	eb18 0308 	adds.w	r3, r8, r8
 800f162:	eb49 0409 	adc.w	r4, r9, r9
 800f166:	4698      	mov	r8, r3
 800f168:	46a1      	mov	r9, r4
 800f16a:	eb18 0805 	adds.w	r8, r8, r5
 800f16e:	eb49 0906 	adc.w	r9, r9, r6
 800f172:	f04f 0100 	mov.w	r1, #0
 800f176:	f04f 0200 	mov.w	r2, #0
 800f17a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f17e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f182:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f186:	4688      	mov	r8, r1
 800f188:	4691      	mov	r9, r2
 800f18a:	eb18 0005 	adds.w	r0, r8, r5
 800f18e:	eb49 0106 	adc.w	r1, r9, r6
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	461d      	mov	r5, r3
 800f198:	f04f 0600 	mov.w	r6, #0
 800f19c:	196b      	adds	r3, r5, r5
 800f19e:	eb46 0406 	adc.w	r4, r6, r6
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	4623      	mov	r3, r4
 800f1a6:	f7f1 fd6f 	bl	8000c88 <__aeabi_uldivmod>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	460c      	mov	r4, r1
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	4ba5      	ldr	r3, [pc, #660]	; (800f448 <UART_SetConfig+0x384>)
 800f1b2:	fba3 2302 	umull	r2, r3, r3, r2
 800f1b6:	095b      	lsrs	r3, r3, #5
 800f1b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	461d      	mov	r5, r3
 800f1c0:	f04f 0600 	mov.w	r6, #0
 800f1c4:	46a9      	mov	r9, r5
 800f1c6:	46b2      	mov	sl, r6
 800f1c8:	eb19 0309 	adds.w	r3, r9, r9
 800f1cc:	eb4a 040a 	adc.w	r4, sl, sl
 800f1d0:	4699      	mov	r9, r3
 800f1d2:	46a2      	mov	sl, r4
 800f1d4:	eb19 0905 	adds.w	r9, r9, r5
 800f1d8:	eb4a 0a06 	adc.w	sl, sl, r6
 800f1dc:	f04f 0100 	mov.w	r1, #0
 800f1e0:	f04f 0200 	mov.w	r2, #0
 800f1e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1f0:	4689      	mov	r9, r1
 800f1f2:	4692      	mov	sl, r2
 800f1f4:	eb19 0005 	adds.w	r0, r9, r5
 800f1f8:	eb4a 0106 	adc.w	r1, sl, r6
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	461d      	mov	r5, r3
 800f202:	f04f 0600 	mov.w	r6, #0
 800f206:	196b      	adds	r3, r5, r5
 800f208:	eb46 0406 	adc.w	r4, r6, r6
 800f20c:	461a      	mov	r2, r3
 800f20e:	4623      	mov	r3, r4
 800f210:	f7f1 fd3a 	bl	8000c88 <__aeabi_uldivmod>
 800f214:	4603      	mov	r3, r0
 800f216:	460c      	mov	r4, r1
 800f218:	461a      	mov	r2, r3
 800f21a:	4b8b      	ldr	r3, [pc, #556]	; (800f448 <UART_SetConfig+0x384>)
 800f21c:	fba3 1302 	umull	r1, r3, r3, r2
 800f220:	095b      	lsrs	r3, r3, #5
 800f222:	2164      	movs	r1, #100	; 0x64
 800f224:	fb01 f303 	mul.w	r3, r1, r3
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	3332      	adds	r3, #50	; 0x32
 800f22e:	4a86      	ldr	r2, [pc, #536]	; (800f448 <UART_SetConfig+0x384>)
 800f230:	fba2 2303 	umull	r2, r3, r2, r3
 800f234:	095b      	lsrs	r3, r3, #5
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f23c:	4498      	add	r8, r3
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	461d      	mov	r5, r3
 800f242:	f04f 0600 	mov.w	r6, #0
 800f246:	46a9      	mov	r9, r5
 800f248:	46b2      	mov	sl, r6
 800f24a:	eb19 0309 	adds.w	r3, r9, r9
 800f24e:	eb4a 040a 	adc.w	r4, sl, sl
 800f252:	4699      	mov	r9, r3
 800f254:	46a2      	mov	sl, r4
 800f256:	eb19 0905 	adds.w	r9, r9, r5
 800f25a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f25e:	f04f 0100 	mov.w	r1, #0
 800f262:	f04f 0200 	mov.w	r2, #0
 800f266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f26a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f26e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f272:	4689      	mov	r9, r1
 800f274:	4692      	mov	sl, r2
 800f276:	eb19 0005 	adds.w	r0, r9, r5
 800f27a:	eb4a 0106 	adc.w	r1, sl, r6
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	461d      	mov	r5, r3
 800f284:	f04f 0600 	mov.w	r6, #0
 800f288:	196b      	adds	r3, r5, r5
 800f28a:	eb46 0406 	adc.w	r4, r6, r6
 800f28e:	461a      	mov	r2, r3
 800f290:	4623      	mov	r3, r4
 800f292:	f7f1 fcf9 	bl	8000c88 <__aeabi_uldivmod>
 800f296:	4603      	mov	r3, r0
 800f298:	460c      	mov	r4, r1
 800f29a:	461a      	mov	r2, r3
 800f29c:	4b6a      	ldr	r3, [pc, #424]	; (800f448 <UART_SetConfig+0x384>)
 800f29e:	fba3 1302 	umull	r1, r3, r3, r2
 800f2a2:	095b      	lsrs	r3, r3, #5
 800f2a4:	2164      	movs	r1, #100	; 0x64
 800f2a6:	fb01 f303 	mul.w	r3, r1, r3
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	3332      	adds	r3, #50	; 0x32
 800f2b0:	4a65      	ldr	r2, [pc, #404]	; (800f448 <UART_SetConfig+0x384>)
 800f2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2b6:	095b      	lsrs	r3, r3, #5
 800f2b8:	f003 0207 	and.w	r2, r3, #7
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4442      	add	r2, r8
 800f2c2:	609a      	str	r2, [r3, #8]
 800f2c4:	e26f      	b.n	800f7a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f2c6:	f7fe feef 	bl	800e0a8 <HAL_RCC_GetPCLK1Freq>
 800f2ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	461d      	mov	r5, r3
 800f2d0:	f04f 0600 	mov.w	r6, #0
 800f2d4:	46a8      	mov	r8, r5
 800f2d6:	46b1      	mov	r9, r6
 800f2d8:	eb18 0308 	adds.w	r3, r8, r8
 800f2dc:	eb49 0409 	adc.w	r4, r9, r9
 800f2e0:	4698      	mov	r8, r3
 800f2e2:	46a1      	mov	r9, r4
 800f2e4:	eb18 0805 	adds.w	r8, r8, r5
 800f2e8:	eb49 0906 	adc.w	r9, r9, r6
 800f2ec:	f04f 0100 	mov.w	r1, #0
 800f2f0:	f04f 0200 	mov.w	r2, #0
 800f2f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f2f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f2fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f300:	4688      	mov	r8, r1
 800f302:	4691      	mov	r9, r2
 800f304:	eb18 0005 	adds.w	r0, r8, r5
 800f308:	eb49 0106 	adc.w	r1, r9, r6
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	461d      	mov	r5, r3
 800f312:	f04f 0600 	mov.w	r6, #0
 800f316:	196b      	adds	r3, r5, r5
 800f318:	eb46 0406 	adc.w	r4, r6, r6
 800f31c:	461a      	mov	r2, r3
 800f31e:	4623      	mov	r3, r4
 800f320:	f7f1 fcb2 	bl	8000c88 <__aeabi_uldivmod>
 800f324:	4603      	mov	r3, r0
 800f326:	460c      	mov	r4, r1
 800f328:	461a      	mov	r2, r3
 800f32a:	4b47      	ldr	r3, [pc, #284]	; (800f448 <UART_SetConfig+0x384>)
 800f32c:	fba3 2302 	umull	r2, r3, r3, r2
 800f330:	095b      	lsrs	r3, r3, #5
 800f332:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	461d      	mov	r5, r3
 800f33a:	f04f 0600 	mov.w	r6, #0
 800f33e:	46a9      	mov	r9, r5
 800f340:	46b2      	mov	sl, r6
 800f342:	eb19 0309 	adds.w	r3, r9, r9
 800f346:	eb4a 040a 	adc.w	r4, sl, sl
 800f34a:	4699      	mov	r9, r3
 800f34c:	46a2      	mov	sl, r4
 800f34e:	eb19 0905 	adds.w	r9, r9, r5
 800f352:	eb4a 0a06 	adc.w	sl, sl, r6
 800f356:	f04f 0100 	mov.w	r1, #0
 800f35a:	f04f 0200 	mov.w	r2, #0
 800f35e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f36a:	4689      	mov	r9, r1
 800f36c:	4692      	mov	sl, r2
 800f36e:	eb19 0005 	adds.w	r0, r9, r5
 800f372:	eb4a 0106 	adc.w	r1, sl, r6
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	461d      	mov	r5, r3
 800f37c:	f04f 0600 	mov.w	r6, #0
 800f380:	196b      	adds	r3, r5, r5
 800f382:	eb46 0406 	adc.w	r4, r6, r6
 800f386:	461a      	mov	r2, r3
 800f388:	4623      	mov	r3, r4
 800f38a:	f7f1 fc7d 	bl	8000c88 <__aeabi_uldivmod>
 800f38e:	4603      	mov	r3, r0
 800f390:	460c      	mov	r4, r1
 800f392:	461a      	mov	r2, r3
 800f394:	4b2c      	ldr	r3, [pc, #176]	; (800f448 <UART_SetConfig+0x384>)
 800f396:	fba3 1302 	umull	r1, r3, r3, r2
 800f39a:	095b      	lsrs	r3, r3, #5
 800f39c:	2164      	movs	r1, #100	; 0x64
 800f39e:	fb01 f303 	mul.w	r3, r1, r3
 800f3a2:	1ad3      	subs	r3, r2, r3
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	3332      	adds	r3, #50	; 0x32
 800f3a8:	4a27      	ldr	r2, [pc, #156]	; (800f448 <UART_SetConfig+0x384>)
 800f3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f3ae:	095b      	lsrs	r3, r3, #5
 800f3b0:	005b      	lsls	r3, r3, #1
 800f3b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f3b6:	4498      	add	r8, r3
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	461d      	mov	r5, r3
 800f3bc:	f04f 0600 	mov.w	r6, #0
 800f3c0:	46a9      	mov	r9, r5
 800f3c2:	46b2      	mov	sl, r6
 800f3c4:	eb19 0309 	adds.w	r3, r9, r9
 800f3c8:	eb4a 040a 	adc.w	r4, sl, sl
 800f3cc:	4699      	mov	r9, r3
 800f3ce:	46a2      	mov	sl, r4
 800f3d0:	eb19 0905 	adds.w	r9, r9, r5
 800f3d4:	eb4a 0a06 	adc.w	sl, sl, r6
 800f3d8:	f04f 0100 	mov.w	r1, #0
 800f3dc:	f04f 0200 	mov.w	r2, #0
 800f3e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f3e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f3e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f3ec:	4689      	mov	r9, r1
 800f3ee:	4692      	mov	sl, r2
 800f3f0:	eb19 0005 	adds.w	r0, r9, r5
 800f3f4:	eb4a 0106 	adc.w	r1, sl, r6
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	461d      	mov	r5, r3
 800f3fe:	f04f 0600 	mov.w	r6, #0
 800f402:	196b      	adds	r3, r5, r5
 800f404:	eb46 0406 	adc.w	r4, r6, r6
 800f408:	461a      	mov	r2, r3
 800f40a:	4623      	mov	r3, r4
 800f40c:	f7f1 fc3c 	bl	8000c88 <__aeabi_uldivmod>
 800f410:	4603      	mov	r3, r0
 800f412:	460c      	mov	r4, r1
 800f414:	461a      	mov	r2, r3
 800f416:	4b0c      	ldr	r3, [pc, #48]	; (800f448 <UART_SetConfig+0x384>)
 800f418:	fba3 1302 	umull	r1, r3, r3, r2
 800f41c:	095b      	lsrs	r3, r3, #5
 800f41e:	2164      	movs	r1, #100	; 0x64
 800f420:	fb01 f303 	mul.w	r3, r1, r3
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	00db      	lsls	r3, r3, #3
 800f428:	3332      	adds	r3, #50	; 0x32
 800f42a:	4a07      	ldr	r2, [pc, #28]	; (800f448 <UART_SetConfig+0x384>)
 800f42c:	fba2 2303 	umull	r2, r3, r2, r3
 800f430:	095b      	lsrs	r3, r3, #5
 800f432:	f003 0207 	and.w	r2, r3, #7
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4442      	add	r2, r8
 800f43c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f43e:	e1b2      	b.n	800f7a6 <UART_SetConfig+0x6e2>
 800f440:	40011000 	.word	0x40011000
 800f444:	40011400 	.word	0x40011400
 800f448:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4ad7      	ldr	r2, [pc, #860]	; (800f7b0 <UART_SetConfig+0x6ec>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d005      	beq.n	800f462 <UART_SetConfig+0x39e>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4ad6      	ldr	r2, [pc, #856]	; (800f7b4 <UART_SetConfig+0x6f0>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	f040 80d1 	bne.w	800f604 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f462:	f7fe fe35 	bl	800e0d0 <HAL_RCC_GetPCLK2Freq>
 800f466:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	469a      	mov	sl, r3
 800f46c:	f04f 0b00 	mov.w	fp, #0
 800f470:	46d0      	mov	r8, sl
 800f472:	46d9      	mov	r9, fp
 800f474:	eb18 0308 	adds.w	r3, r8, r8
 800f478:	eb49 0409 	adc.w	r4, r9, r9
 800f47c:	4698      	mov	r8, r3
 800f47e:	46a1      	mov	r9, r4
 800f480:	eb18 080a 	adds.w	r8, r8, sl
 800f484:	eb49 090b 	adc.w	r9, r9, fp
 800f488:	f04f 0100 	mov.w	r1, #0
 800f48c:	f04f 0200 	mov.w	r2, #0
 800f490:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f494:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f498:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f49c:	4688      	mov	r8, r1
 800f49e:	4691      	mov	r9, r2
 800f4a0:	eb1a 0508 	adds.w	r5, sl, r8
 800f4a4:	eb4b 0609 	adc.w	r6, fp, r9
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	f04f 0200 	mov.w	r2, #0
 800f4b2:	f04f 0300 	mov.w	r3, #0
 800f4b6:	f04f 0400 	mov.w	r4, #0
 800f4ba:	0094      	lsls	r4, r2, #2
 800f4bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4c0:	008b      	lsls	r3, r1, #2
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	4623      	mov	r3, r4
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	4631      	mov	r1, r6
 800f4ca:	f7f1 fbdd 	bl	8000c88 <__aeabi_uldivmod>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	460c      	mov	r4, r1
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	4bb8      	ldr	r3, [pc, #736]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f4d6:	fba3 2302 	umull	r2, r3, r3, r2
 800f4da:	095b      	lsrs	r3, r3, #5
 800f4dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	469b      	mov	fp, r3
 800f4e4:	f04f 0c00 	mov.w	ip, #0
 800f4e8:	46d9      	mov	r9, fp
 800f4ea:	46e2      	mov	sl, ip
 800f4ec:	eb19 0309 	adds.w	r3, r9, r9
 800f4f0:	eb4a 040a 	adc.w	r4, sl, sl
 800f4f4:	4699      	mov	r9, r3
 800f4f6:	46a2      	mov	sl, r4
 800f4f8:	eb19 090b 	adds.w	r9, r9, fp
 800f4fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f500:	f04f 0100 	mov.w	r1, #0
 800f504:	f04f 0200 	mov.w	r2, #0
 800f508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f50c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f514:	4689      	mov	r9, r1
 800f516:	4692      	mov	sl, r2
 800f518:	eb1b 0509 	adds.w	r5, fp, r9
 800f51c:	eb4c 060a 	adc.w	r6, ip, sl
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	4619      	mov	r1, r3
 800f526:	f04f 0200 	mov.w	r2, #0
 800f52a:	f04f 0300 	mov.w	r3, #0
 800f52e:	f04f 0400 	mov.w	r4, #0
 800f532:	0094      	lsls	r4, r2, #2
 800f534:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f538:	008b      	lsls	r3, r1, #2
 800f53a:	461a      	mov	r2, r3
 800f53c:	4623      	mov	r3, r4
 800f53e:	4628      	mov	r0, r5
 800f540:	4631      	mov	r1, r6
 800f542:	f7f1 fba1 	bl	8000c88 <__aeabi_uldivmod>
 800f546:	4603      	mov	r3, r0
 800f548:	460c      	mov	r4, r1
 800f54a:	461a      	mov	r2, r3
 800f54c:	4b9a      	ldr	r3, [pc, #616]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f54e:	fba3 1302 	umull	r1, r3, r3, r2
 800f552:	095b      	lsrs	r3, r3, #5
 800f554:	2164      	movs	r1, #100	; 0x64
 800f556:	fb01 f303 	mul.w	r3, r1, r3
 800f55a:	1ad3      	subs	r3, r2, r3
 800f55c:	011b      	lsls	r3, r3, #4
 800f55e:	3332      	adds	r3, #50	; 0x32
 800f560:	4a95      	ldr	r2, [pc, #596]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f562:	fba2 2303 	umull	r2, r3, r2, r3
 800f566:	095b      	lsrs	r3, r3, #5
 800f568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f56c:	4498      	add	r8, r3
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	469b      	mov	fp, r3
 800f572:	f04f 0c00 	mov.w	ip, #0
 800f576:	46d9      	mov	r9, fp
 800f578:	46e2      	mov	sl, ip
 800f57a:	eb19 0309 	adds.w	r3, r9, r9
 800f57e:	eb4a 040a 	adc.w	r4, sl, sl
 800f582:	4699      	mov	r9, r3
 800f584:	46a2      	mov	sl, r4
 800f586:	eb19 090b 	adds.w	r9, r9, fp
 800f58a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f58e:	f04f 0100 	mov.w	r1, #0
 800f592:	f04f 0200 	mov.w	r2, #0
 800f596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f59a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f59e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f5a2:	4689      	mov	r9, r1
 800f5a4:	4692      	mov	sl, r2
 800f5a6:	eb1b 0509 	adds.w	r5, fp, r9
 800f5aa:	eb4c 060a 	adc.w	r6, ip, sl
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	f04f 0200 	mov.w	r2, #0
 800f5b8:	f04f 0300 	mov.w	r3, #0
 800f5bc:	f04f 0400 	mov.w	r4, #0
 800f5c0:	0094      	lsls	r4, r2, #2
 800f5c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f5c6:	008b      	lsls	r3, r1, #2
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	4623      	mov	r3, r4
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	4631      	mov	r1, r6
 800f5d0:	f7f1 fb5a 	bl	8000c88 <__aeabi_uldivmod>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4b77      	ldr	r3, [pc, #476]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800f5e0:	095b      	lsrs	r3, r3, #5
 800f5e2:	2164      	movs	r1, #100	; 0x64
 800f5e4:	fb01 f303 	mul.w	r3, r1, r3
 800f5e8:	1ad3      	subs	r3, r2, r3
 800f5ea:	011b      	lsls	r3, r3, #4
 800f5ec:	3332      	adds	r3, #50	; 0x32
 800f5ee:	4a72      	ldr	r2, [pc, #456]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f4:	095b      	lsrs	r3, r3, #5
 800f5f6:	f003 020f 	and.w	r2, r3, #15
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4442      	add	r2, r8
 800f600:	609a      	str	r2, [r3, #8]
 800f602:	e0d0      	b.n	800f7a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f604:	f7fe fd50 	bl	800e0a8 <HAL_RCC_GetPCLK1Freq>
 800f608:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	469a      	mov	sl, r3
 800f60e:	f04f 0b00 	mov.w	fp, #0
 800f612:	46d0      	mov	r8, sl
 800f614:	46d9      	mov	r9, fp
 800f616:	eb18 0308 	adds.w	r3, r8, r8
 800f61a:	eb49 0409 	adc.w	r4, r9, r9
 800f61e:	4698      	mov	r8, r3
 800f620:	46a1      	mov	r9, r4
 800f622:	eb18 080a 	adds.w	r8, r8, sl
 800f626:	eb49 090b 	adc.w	r9, r9, fp
 800f62a:	f04f 0100 	mov.w	r1, #0
 800f62e:	f04f 0200 	mov.w	r2, #0
 800f632:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f636:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f63a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f63e:	4688      	mov	r8, r1
 800f640:	4691      	mov	r9, r2
 800f642:	eb1a 0508 	adds.w	r5, sl, r8
 800f646:	eb4b 0609 	adc.w	r6, fp, r9
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	4619      	mov	r1, r3
 800f650:	f04f 0200 	mov.w	r2, #0
 800f654:	f04f 0300 	mov.w	r3, #0
 800f658:	f04f 0400 	mov.w	r4, #0
 800f65c:	0094      	lsls	r4, r2, #2
 800f65e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f662:	008b      	lsls	r3, r1, #2
 800f664:	461a      	mov	r2, r3
 800f666:	4623      	mov	r3, r4
 800f668:	4628      	mov	r0, r5
 800f66a:	4631      	mov	r1, r6
 800f66c:	f7f1 fb0c 	bl	8000c88 <__aeabi_uldivmod>
 800f670:	4603      	mov	r3, r0
 800f672:	460c      	mov	r4, r1
 800f674:	461a      	mov	r2, r3
 800f676:	4b50      	ldr	r3, [pc, #320]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f678:	fba3 2302 	umull	r2, r3, r3, r2
 800f67c:	095b      	lsrs	r3, r3, #5
 800f67e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	469b      	mov	fp, r3
 800f686:	f04f 0c00 	mov.w	ip, #0
 800f68a:	46d9      	mov	r9, fp
 800f68c:	46e2      	mov	sl, ip
 800f68e:	eb19 0309 	adds.w	r3, r9, r9
 800f692:	eb4a 040a 	adc.w	r4, sl, sl
 800f696:	4699      	mov	r9, r3
 800f698:	46a2      	mov	sl, r4
 800f69a:	eb19 090b 	adds.w	r9, r9, fp
 800f69e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f6a2:	f04f 0100 	mov.w	r1, #0
 800f6a6:	f04f 0200 	mov.w	r2, #0
 800f6aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f6ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f6b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f6b6:	4689      	mov	r9, r1
 800f6b8:	4692      	mov	sl, r2
 800f6ba:	eb1b 0509 	adds.w	r5, fp, r9
 800f6be:	eb4c 060a 	adc.w	r6, ip, sl
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	f04f 0200 	mov.w	r2, #0
 800f6cc:	f04f 0300 	mov.w	r3, #0
 800f6d0:	f04f 0400 	mov.w	r4, #0
 800f6d4:	0094      	lsls	r4, r2, #2
 800f6d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f6da:	008b      	lsls	r3, r1, #2
 800f6dc:	461a      	mov	r2, r3
 800f6de:	4623      	mov	r3, r4
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	f7f1 fad0 	bl	8000c88 <__aeabi_uldivmod>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	4b32      	ldr	r3, [pc, #200]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f6f0:	fba3 1302 	umull	r1, r3, r3, r2
 800f6f4:	095b      	lsrs	r3, r3, #5
 800f6f6:	2164      	movs	r1, #100	; 0x64
 800f6f8:	fb01 f303 	mul.w	r3, r1, r3
 800f6fc:	1ad3      	subs	r3, r2, r3
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	3332      	adds	r3, #50	; 0x32
 800f702:	4a2d      	ldr	r2, [pc, #180]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f704:	fba2 2303 	umull	r2, r3, r2, r3
 800f708:	095b      	lsrs	r3, r3, #5
 800f70a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f70e:	4498      	add	r8, r3
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	469b      	mov	fp, r3
 800f714:	f04f 0c00 	mov.w	ip, #0
 800f718:	46d9      	mov	r9, fp
 800f71a:	46e2      	mov	sl, ip
 800f71c:	eb19 0309 	adds.w	r3, r9, r9
 800f720:	eb4a 040a 	adc.w	r4, sl, sl
 800f724:	4699      	mov	r9, r3
 800f726:	46a2      	mov	sl, r4
 800f728:	eb19 090b 	adds.w	r9, r9, fp
 800f72c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f730:	f04f 0100 	mov.w	r1, #0
 800f734:	f04f 0200 	mov.w	r2, #0
 800f738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f73c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f744:	4689      	mov	r9, r1
 800f746:	4692      	mov	sl, r2
 800f748:	eb1b 0509 	adds.w	r5, fp, r9
 800f74c:	eb4c 060a 	adc.w	r6, ip, sl
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	4619      	mov	r1, r3
 800f756:	f04f 0200 	mov.w	r2, #0
 800f75a:	f04f 0300 	mov.w	r3, #0
 800f75e:	f04f 0400 	mov.w	r4, #0
 800f762:	0094      	lsls	r4, r2, #2
 800f764:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f768:	008b      	lsls	r3, r1, #2
 800f76a:	461a      	mov	r2, r3
 800f76c:	4623      	mov	r3, r4
 800f76e:	4628      	mov	r0, r5
 800f770:	4631      	mov	r1, r6
 800f772:	f7f1 fa89 	bl	8000c88 <__aeabi_uldivmod>
 800f776:	4603      	mov	r3, r0
 800f778:	460c      	mov	r4, r1
 800f77a:	461a      	mov	r2, r3
 800f77c:	4b0e      	ldr	r3, [pc, #56]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f77e:	fba3 1302 	umull	r1, r3, r3, r2
 800f782:	095b      	lsrs	r3, r3, #5
 800f784:	2164      	movs	r1, #100	; 0x64
 800f786:	fb01 f303 	mul.w	r3, r1, r3
 800f78a:	1ad3      	subs	r3, r2, r3
 800f78c:	011b      	lsls	r3, r3, #4
 800f78e:	3332      	adds	r3, #50	; 0x32
 800f790:	4a09      	ldr	r2, [pc, #36]	; (800f7b8 <UART_SetConfig+0x6f4>)
 800f792:	fba2 2303 	umull	r2, r3, r2, r3
 800f796:	095b      	lsrs	r3, r3, #5
 800f798:	f003 020f 	and.w	r2, r3, #15
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4442      	add	r2, r8
 800f7a2:	609a      	str	r2, [r3, #8]
}
 800f7a4:	e7ff      	b.n	800f7a6 <UART_SetConfig+0x6e2>
 800f7a6:	bf00      	nop
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b0:	40011000 	.word	0x40011000
 800f7b4:	40011400 	.word	0x40011400
 800f7b8:	51eb851f 	.word	0x51eb851f

0800f7bc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f7bc:	b480      	push	{r7}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	4b20      	ldr	r3, [pc, #128]	; (800f85c <FSMC_NORSRAM_Init+0xa0>)
 800f7da:	4013      	ands	r3, r2
 800f7dc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f7e6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f7ec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f7f2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f7f8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f7fe:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f804:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f80a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f810:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f816:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f81c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f822:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f828:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	2b08      	cmp	r3, #8
 800f836:	d103      	bne.n	800f840 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f83e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	68f9      	ldr	r1, [r7, #12]
 800f848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	fff00080 	.word	0xfff00080

0800f860 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f860:	b480      	push	{r7}
 800f862:	b087      	sub	sp, #28
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f86c:	2300      	movs	r3, #0
 800f86e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	1c5a      	adds	r2, r3, #1
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f87a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f882:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f88e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f896:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f89e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f8a8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	695b      	ldr	r3, [r3, #20]
 800f8ae:	3b02      	subs	r3, #2
 800f8b0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f8b2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	697a      	ldr	r2, [r7, #20]
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	1c5a      	adds	r2, r3, #1
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6979      	ldr	r1, [r7, #20]
 800f8c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	371c      	adds	r7, #28
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
	...

0800f8dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b087      	sub	sp, #28
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
 800f8e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8f4:	d122      	bne.n	800f93c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8fe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f900:	697a      	ldr	r2, [r7, #20]
 800f902:	4b15      	ldr	r3, [pc, #84]	; (800f958 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f904:	4013      	ands	r3, r2
 800f906:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f912:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f91a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f922:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f928:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	6979      	ldr	r1, [r7, #20]
 800f936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f93a:	e005      	b.n	800f948 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f948:	2300      	movs	r3, #0
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	371c      	adds	r7, #28
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	cff00000 	.word	0xcff00000

0800f95c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f95c:	b084      	sub	sp, #16
 800f95e:	b580      	push	{r7, lr}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	f107 001c 	add.w	r0, r7, #28
 800f96a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f970:	2b01      	cmp	r3, #1
 800f972:	d122      	bne.n	800f9ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d105      	bne.n	800f9ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f001 fac6 	bl	8010f40 <USB_CoreReset>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73fb      	strb	r3, [r7, #15]
 800f9b8:	e01a      	b.n	800f9f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f001 faba 	bl	8010f40 <USB_CoreReset>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d106      	bne.n	800f9e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	639a      	str	r2, [r3, #56]	; 0x38
 800f9e2:	e005      	b.n	800f9f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d10b      	bne.n	800fa0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	f043 0206 	orr.w	r2, r3, #6
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	f043 0220 	orr.w	r2, r3, #32
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fa0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa1a:	b004      	add	sp, #16
 800fa1c:	4770      	bx	lr
	...

0800fa20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fa2e:	79fb      	ldrb	r3, [r7, #7]
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d165      	bne.n	800fb00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	4a41      	ldr	r2, [pc, #260]	; (800fb3c <USB_SetTurnaroundTime+0x11c>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d906      	bls.n	800fa4a <USB_SetTurnaroundTime+0x2a>
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	4a40      	ldr	r2, [pc, #256]	; (800fb40 <USB_SetTurnaroundTime+0x120>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d802      	bhi.n	800fa4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fa44:	230f      	movs	r3, #15
 800fa46:	617b      	str	r3, [r7, #20]
 800fa48:	e062      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	4a3c      	ldr	r2, [pc, #240]	; (800fb40 <USB_SetTurnaroundTime+0x120>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d906      	bls.n	800fa60 <USB_SetTurnaroundTime+0x40>
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	4a3b      	ldr	r2, [pc, #236]	; (800fb44 <USB_SetTurnaroundTime+0x124>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d802      	bhi.n	800fa60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fa5a:	230e      	movs	r3, #14
 800fa5c:	617b      	str	r3, [r7, #20]
 800fa5e:	e057      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	4a38      	ldr	r2, [pc, #224]	; (800fb44 <USB_SetTurnaroundTime+0x124>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d906      	bls.n	800fa76 <USB_SetTurnaroundTime+0x56>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	4a37      	ldr	r2, [pc, #220]	; (800fb48 <USB_SetTurnaroundTime+0x128>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d802      	bhi.n	800fa76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fa70:	230d      	movs	r3, #13
 800fa72:	617b      	str	r3, [r7, #20]
 800fa74:	e04c      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	4a33      	ldr	r2, [pc, #204]	; (800fb48 <USB_SetTurnaroundTime+0x128>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d906      	bls.n	800fa8c <USB_SetTurnaroundTime+0x6c>
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	4a32      	ldr	r2, [pc, #200]	; (800fb4c <USB_SetTurnaroundTime+0x12c>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d802      	bhi.n	800fa8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fa86:	230c      	movs	r3, #12
 800fa88:	617b      	str	r3, [r7, #20]
 800fa8a:	e041      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	4a2f      	ldr	r2, [pc, #188]	; (800fb4c <USB_SetTurnaroundTime+0x12c>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d906      	bls.n	800faa2 <USB_SetTurnaroundTime+0x82>
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	4a2e      	ldr	r2, [pc, #184]	; (800fb50 <USB_SetTurnaroundTime+0x130>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d802      	bhi.n	800faa2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fa9c:	230b      	movs	r3, #11
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	e036      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	4a2a      	ldr	r2, [pc, #168]	; (800fb50 <USB_SetTurnaroundTime+0x130>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d906      	bls.n	800fab8 <USB_SetTurnaroundTime+0x98>
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	4a29      	ldr	r2, [pc, #164]	; (800fb54 <USB_SetTurnaroundTime+0x134>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d802      	bhi.n	800fab8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fab2:	230a      	movs	r3, #10
 800fab4:	617b      	str	r3, [r7, #20]
 800fab6:	e02b      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	4a26      	ldr	r2, [pc, #152]	; (800fb54 <USB_SetTurnaroundTime+0x134>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d906      	bls.n	800face <USB_SetTurnaroundTime+0xae>
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	4a25      	ldr	r2, [pc, #148]	; (800fb58 <USB_SetTurnaroundTime+0x138>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d802      	bhi.n	800face <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fac8:	2309      	movs	r3, #9
 800faca:	617b      	str	r3, [r7, #20]
 800facc:	e020      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	4a21      	ldr	r2, [pc, #132]	; (800fb58 <USB_SetTurnaroundTime+0x138>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d906      	bls.n	800fae4 <USB_SetTurnaroundTime+0xc4>
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	4a20      	ldr	r2, [pc, #128]	; (800fb5c <USB_SetTurnaroundTime+0x13c>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d802      	bhi.n	800fae4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fade:	2308      	movs	r3, #8
 800fae0:	617b      	str	r3, [r7, #20]
 800fae2:	e015      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	4a1d      	ldr	r2, [pc, #116]	; (800fb5c <USB_SetTurnaroundTime+0x13c>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d906      	bls.n	800fafa <USB_SetTurnaroundTime+0xda>
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	4a1c      	ldr	r2, [pc, #112]	; (800fb60 <USB_SetTurnaroundTime+0x140>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d802      	bhi.n	800fafa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800faf4:	2307      	movs	r3, #7
 800faf6:	617b      	str	r3, [r7, #20]
 800faf8:	e00a      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fafa:	2306      	movs	r3, #6
 800fafc:	617b      	str	r3, [r7, #20]
 800fafe:	e007      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d102      	bne.n	800fb0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fb06:	2309      	movs	r3, #9
 800fb08:	617b      	str	r3, [r7, #20]
 800fb0a:	e001      	b.n	800fb10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fb0c:	2309      	movs	r3, #9
 800fb0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	68da      	ldr	r2, [r3, #12]
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	029b      	lsls	r3, r3, #10
 800fb24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fb28:	431a      	orrs	r2, r3
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	371c      	adds	r7, #28
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	00d8acbf 	.word	0x00d8acbf
 800fb40:	00e4e1bf 	.word	0x00e4e1bf
 800fb44:	00f423ff 	.word	0x00f423ff
 800fb48:	0106737f 	.word	0x0106737f
 800fb4c:	011a499f 	.word	0x011a499f
 800fb50:	01312cff 	.word	0x01312cff
 800fb54:	014ca43f 	.word	0x014ca43f
 800fb58:	016e35ff 	.word	0x016e35ff
 800fb5c:	01a6ab1f 	.word	0x01a6ab1f
 800fb60:	01e847ff 	.word	0x01e847ff

0800fb64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	f043 0201 	orr.w	r2, r3, #1
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	370c      	adds	r7, #12
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb86:	b480      	push	{r7}
 800fb88:	b083      	sub	sp, #12
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	f023 0201 	bic.w	r2, r3, #1
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fbc0:	78fb      	ldrb	r3, [r7, #3]
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d106      	bne.n	800fbd4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	60da      	str	r2, [r3, #12]
 800fbd2:	e00b      	b.n	800fbec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fbd4:	78fb      	ldrb	r3, [r7, #3]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d106      	bne.n	800fbe8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	60da      	str	r2, [r3, #12]
 800fbe6:	e001      	b.n	800fbec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e003      	b.n	800fbf4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fbec:	2032      	movs	r0, #50	; 0x32
 800fbee:	f7fb fdf1 	bl	800b7d4 <HAL_Delay>

  return HAL_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fbfc:	b084      	sub	sp, #16
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b086      	sub	sp, #24
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fc0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fc16:	2300      	movs	r3, #0
 800fc18:	613b      	str	r3, [r7, #16]
 800fc1a:	e009      	b.n	800fc30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	3340      	adds	r3, #64	; 0x40
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	4413      	add	r3, r2
 800fc26:	2200      	movs	r2, #0
 800fc28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	613b      	str	r3, [r7, #16]
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	2b0e      	cmp	r3, #14
 800fc34:	d9f2      	bls.n	800fc1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d11c      	bne.n	800fc76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc4a:	f043 0302 	orr.w	r3, r3, #2
 800fc4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	639a      	str	r2, [r3, #56]	; 0x38
 800fc74:	e00b      	b.n	800fc8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc94:	461a      	mov	r2, r3
 800fc96:	2300      	movs	r3, #0
 800fc98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fca0:	4619      	mov	r1, r3
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fca8:	461a      	mov	r2, r3
 800fcaa:	680b      	ldr	r3, [r1, #0]
 800fcac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d10c      	bne.n	800fcce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d104      	bne.n	800fcc4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fcba:	2100      	movs	r1, #0
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 f949 	bl	800ff54 <USB_SetDevSpeed>
 800fcc2:	e008      	b.n	800fcd6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f944 	bl	800ff54 <USB_SetDevSpeed>
 800fccc:	e003      	b.n	800fcd6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fcce:	2103      	movs	r1, #3
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 f93f 	bl	800ff54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fcd6:	2110      	movs	r1, #16
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f8f3 	bl	800fec4 <USB_FlushTxFifo>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800fce4:	2301      	movs	r3, #1
 800fce6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 f911 	bl	800ff10 <USB_FlushRxFifo>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfe:	461a      	mov	r2, r3
 800fd00:	2300      	movs	r3, #0
 800fd02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd16:	461a      	mov	r2, r3
 800fd18:	2300      	movs	r3, #0
 800fd1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	613b      	str	r3, [r7, #16]
 800fd20:	e043      	b.n	800fdaa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	015a      	lsls	r2, r3, #5
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4413      	add	r3, r2
 800fd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd38:	d118      	bne.n	800fd6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10a      	bne.n	800fd56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	015a      	lsls	r2, r3, #5
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	4413      	add	r3, r2
 800fd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fd52:	6013      	str	r3, [r2, #0]
 800fd54:	e013      	b.n	800fd7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	015a      	lsls	r2, r3, #5
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd62:	461a      	mov	r2, r3
 800fd64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fd68:	6013      	str	r3, [r2, #0]
 800fd6a:	e008      	b.n	800fd7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	015a      	lsls	r2, r3, #5
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	4413      	add	r3, r2
 800fd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd78:	461a      	mov	r2, r3
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	015a      	lsls	r2, r3, #5
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	4413      	add	r3, r2
 800fd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	015a      	lsls	r2, r3, #5
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	4413      	add	r3, r2
 800fd98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fda2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	3301      	adds	r3, #1
 800fda8:	613b      	str	r3, [r7, #16]
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	693a      	ldr	r2, [r7, #16]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d3b7      	bcc.n	800fd22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	613b      	str	r3, [r7, #16]
 800fdb6:	e043      	b.n	800fe40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	015a      	lsls	r2, r3, #5
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdce:	d118      	bne.n	800fe02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d10a      	bne.n	800fdec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	015a      	lsls	r2, r3, #5
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	4413      	add	r3, r2
 800fdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde2:	461a      	mov	r2, r3
 800fde4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fde8:	6013      	str	r3, [r2, #0]
 800fdea:	e013      	b.n	800fe14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	015a      	lsls	r2, r3, #5
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	e008      	b.n	800fe14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	015a      	lsls	r2, r3, #5
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	4413      	add	r3, r2
 800fe0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe0e:	461a      	mov	r2, r3
 800fe10:	2300      	movs	r3, #0
 800fe12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	015a      	lsls	r2, r3, #5
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe20:	461a      	mov	r2, r3
 800fe22:	2300      	movs	r3, #0
 800fe24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	015a      	lsls	r2, r3, #5
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe32:	461a      	mov	r2, r3
 800fe34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fe38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	613b      	str	r3, [r7, #16]
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	693a      	ldr	r2, [r7, #16]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d3b7      	bcc.n	800fdb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe4e:	691b      	ldr	r3, [r3, #16]
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fe68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d105      	bne.n	800fe7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	699b      	ldr	r3, [r3, #24]
 800fe74:	f043 0210 	orr.w	r2, r3, #16
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	699a      	ldr	r2, [r3, #24]
 800fe80:	4b0f      	ldr	r3, [pc, #60]	; (800fec0 <USB_DevInit+0x2c4>)
 800fe82:	4313      	orrs	r3, r2
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fe88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d005      	beq.n	800fe9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	699b      	ldr	r3, [r3, #24]
 800fe92:	f043 0208 	orr.w	r2, r3, #8
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fe9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d107      	bne.n	800feb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fea8:	f043 0304 	orr.w	r3, r3, #4
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800feb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3718      	adds	r7, #24
 800feb6:	46bd      	mov	sp, r7
 800feb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800febc:	b004      	add	sp, #16
 800febe:	4770      	bx	lr
 800fec0:	803c3800 	.word	0x803c3800

0800fec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b085      	sub	sp, #20
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fece:	2300      	movs	r3, #0
 800fed0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	019b      	lsls	r3, r3, #6
 800fed6:	f043 0220 	orr.w	r2, r3, #32
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	3301      	adds	r3, #1
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	4a09      	ldr	r2, [pc, #36]	; (800ff0c <USB_FlushTxFifo+0x48>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d901      	bls.n	800fef0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800feec:	2303      	movs	r3, #3
 800feee:	e006      	b.n	800fefe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	f003 0320 	and.w	r3, r3, #32
 800fef8:	2b20      	cmp	r3, #32
 800fefa:	d0f0      	beq.n	800fede <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3714      	adds	r7, #20
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop
 800ff0c:	00030d40 	.word	0x00030d40

0800ff10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2210      	movs	r2, #16
 800ff20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	3301      	adds	r3, #1
 800ff26:	60fb      	str	r3, [r7, #12]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	4a09      	ldr	r2, [pc, #36]	; (800ff50 <USB_FlushRxFifo+0x40>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d901      	bls.n	800ff34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ff30:	2303      	movs	r3, #3
 800ff32:	e006      	b.n	800ff42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	691b      	ldr	r3, [r3, #16]
 800ff38:	f003 0310 	and.w	r3, r3, #16
 800ff3c:	2b10      	cmp	r3, #16
 800ff3e:	d0f0      	beq.n	800ff22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3714      	adds	r7, #20
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	00030d40 	.word	0x00030d40

0800ff54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b085      	sub	sp, #20
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	78fb      	ldrb	r3, [r7, #3]
 800ff6e:	68f9      	ldr	r1, [r7, #12]
 800ff70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff74:	4313      	orrs	r3, r2
 800ff76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3714      	adds	r7, #20
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr

0800ff86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ff86:	b480      	push	{r7}
 800ff88:	b087      	sub	sp, #28
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	f003 0306 	and.w	r3, r3, #6
 800ff9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d102      	bne.n	800ffac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	75fb      	strb	r3, [r7, #23]
 800ffaa:	e00a      	b.n	800ffc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d002      	beq.n	800ffb8 <USB_GetDevSpeed+0x32>
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2b06      	cmp	r3, #6
 800ffb6:	d102      	bne.n	800ffbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ffb8:	2302      	movs	r3, #2
 800ffba:	75fb      	strb	r3, [r7, #23]
 800ffbc:	e001      	b.n	800ffc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ffbe:	230f      	movs	r3, #15
 800ffc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ffc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	371c      	adds	r7, #28
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	785b      	ldrb	r3, [r3, #1]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d13a      	bne.n	8010062 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fff2:	69da      	ldr	r2, [r3, #28]
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	f003 030f 	and.w	r3, r3, #15
 800fffc:	2101      	movs	r1, #1
 800fffe:	fa01 f303 	lsl.w	r3, r1, r3
 8010002:	b29b      	uxth	r3, r3
 8010004:	68f9      	ldr	r1, [r7, #12]
 8010006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801000a:	4313      	orrs	r3, r2
 801000c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	015a      	lsls	r2, r3, #5
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	4413      	add	r3, r2
 8010016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010020:	2b00      	cmp	r3, #0
 8010022:	d155      	bne.n	80100d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	015a      	lsls	r2, r3, #5
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	4413      	add	r3, r2
 801002c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	78db      	ldrb	r3, [r3, #3]
 801003e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010040:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	059b      	lsls	r3, r3, #22
 8010046:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010048:	4313      	orrs	r3, r2
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	0151      	lsls	r1, r2, #5
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	440a      	add	r2, r1
 8010052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801005a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801005e:	6013      	str	r3, [r2, #0]
 8010060:	e036      	b.n	80100d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010068:	69da      	ldr	r2, [r3, #28]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	f003 030f 	and.w	r3, r3, #15
 8010072:	2101      	movs	r1, #1
 8010074:	fa01 f303 	lsl.w	r3, r1, r3
 8010078:	041b      	lsls	r3, r3, #16
 801007a:	68f9      	ldr	r1, [r7, #12]
 801007c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010080:	4313      	orrs	r3, r2
 8010082:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	015a      	lsls	r2, r3, #5
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	4413      	add	r3, r2
 801008c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010096:	2b00      	cmp	r3, #0
 8010098:	d11a      	bne.n	80100d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	015a      	lsls	r2, r3, #5
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	4413      	add	r3, r2
 80100a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	78db      	ldrb	r3, [r3, #3]
 80100b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80100b6:	430b      	orrs	r3, r1
 80100b8:	4313      	orrs	r3, r2
 80100ba:	68ba      	ldr	r2, [r7, #8]
 80100bc:	0151      	lsls	r1, r2, #5
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	440a      	add	r2, r1
 80100c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80100d0:	2300      	movs	r3, #0
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3714      	adds	r7, #20
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr
	...

080100e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b085      	sub	sp, #20
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	785b      	ldrb	r3, [r3, #1]
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d161      	bne.n	80101c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	015a      	lsls	r2, r3, #5
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	4413      	add	r3, r2
 8010104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801010e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010112:	d11f      	bne.n	8010154 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	015a      	lsls	r2, r3, #5
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	4413      	add	r3, r2
 801011c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	0151      	lsls	r1, r2, #5
 8010126:	68fa      	ldr	r2, [r7, #12]
 8010128:	440a      	add	r2, r1
 801012a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801012e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010132:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	015a      	lsls	r2, r3, #5
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4413      	add	r3, r2
 801013c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	0151      	lsls	r1, r2, #5
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	440a      	add	r2, r1
 801014a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801014e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010152:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801015a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	f003 030f 	and.w	r3, r3, #15
 8010164:	2101      	movs	r1, #1
 8010166:	fa01 f303 	lsl.w	r3, r1, r3
 801016a:	b29b      	uxth	r3, r3
 801016c:	43db      	mvns	r3, r3
 801016e:	68f9      	ldr	r1, [r7, #12]
 8010170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010174:	4013      	ands	r3, r2
 8010176:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801017e:	69da      	ldr	r2, [r3, #28]
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	f003 030f 	and.w	r3, r3, #15
 8010188:	2101      	movs	r1, #1
 801018a:	fa01 f303 	lsl.w	r3, r1, r3
 801018e:	b29b      	uxth	r3, r3
 8010190:	43db      	mvns	r3, r3
 8010192:	68f9      	ldr	r1, [r7, #12]
 8010194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010198:	4013      	ands	r3, r2
 801019a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	015a      	lsls	r2, r3, #5
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	4413      	add	r3, r2
 80101a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	0159      	lsls	r1, r3, #5
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	440b      	add	r3, r1
 80101b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101b6:	4619      	mov	r1, r3
 80101b8:	4b35      	ldr	r3, [pc, #212]	; (8010290 <USB_DeactivateEndpoint+0x1b0>)
 80101ba:	4013      	ands	r3, r2
 80101bc:	600b      	str	r3, [r1, #0]
 80101be:	e060      	b.n	8010282 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	015a      	lsls	r2, r3, #5
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	4413      	add	r3, r2
 80101c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101d6:	d11f      	bne.n	8010218 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	015a      	lsls	r2, r3, #5
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	4413      	add	r3, r2
 80101e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	0151      	lsls	r1, r2, #5
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	440a      	add	r2, r1
 80101ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80101f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	015a      	lsls	r2, r3, #5
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	4413      	add	r3, r2
 8010200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	0151      	lsls	r1, r2, #5
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	440a      	add	r2, r1
 801020e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010216:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801021e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	f003 030f 	and.w	r3, r3, #15
 8010228:	2101      	movs	r1, #1
 801022a:	fa01 f303 	lsl.w	r3, r1, r3
 801022e:	041b      	lsls	r3, r3, #16
 8010230:	43db      	mvns	r3, r3
 8010232:	68f9      	ldr	r1, [r7, #12]
 8010234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010238:	4013      	ands	r3, r2
 801023a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010242:	69da      	ldr	r2, [r3, #28]
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	f003 030f 	and.w	r3, r3, #15
 801024c:	2101      	movs	r1, #1
 801024e:	fa01 f303 	lsl.w	r3, r1, r3
 8010252:	041b      	lsls	r3, r3, #16
 8010254:	43db      	mvns	r3, r3
 8010256:	68f9      	ldr	r1, [r7, #12]
 8010258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801025c:	4013      	ands	r3, r2
 801025e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	015a      	lsls	r2, r3, #5
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	4413      	add	r3, r2
 8010268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	0159      	lsls	r1, r3, #5
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	440b      	add	r3, r1
 8010276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027a:	4619      	mov	r1, r3
 801027c:	4b05      	ldr	r3, [pc, #20]	; (8010294 <USB_DeactivateEndpoint+0x1b4>)
 801027e:	4013      	ands	r3, r2
 8010280:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010282:	2300      	movs	r3, #0
}
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr
 8010290:	ec337800 	.word	0xec337800
 8010294:	eff37800 	.word	0xeff37800

08010298 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b08a      	sub	sp, #40	; 0x28
 801029c:	af02      	add	r7, sp, #8
 801029e:	60f8      	str	r0, [r7, #12]
 80102a0:	60b9      	str	r1, [r7, #8]
 80102a2:	4613      	mov	r3, r2
 80102a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	785b      	ldrb	r3, [r3, #1]
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	f040 815c 	bne.w	8010572 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	695b      	ldr	r3, [r3, #20]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d132      	bne.n	8010328 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	015a      	lsls	r2, r3, #5
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	4413      	add	r3, r2
 80102ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102ce:	691b      	ldr	r3, [r3, #16]
 80102d0:	69ba      	ldr	r2, [r7, #24]
 80102d2:	0151      	lsls	r1, r2, #5
 80102d4:	69fa      	ldr	r2, [r7, #28]
 80102d6:	440a      	add	r2, r1
 80102d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	015a      	lsls	r2, r3, #5
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	4413      	add	r3, r2
 80102ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	69ba      	ldr	r2, [r7, #24]
 80102f6:	0151      	lsls	r1, r2, #5
 80102f8:	69fa      	ldr	r2, [r7, #28]
 80102fa:	440a      	add	r2, r1
 80102fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	015a      	lsls	r2, r3, #5
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	4413      	add	r3, r2
 801030e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	69ba      	ldr	r2, [r7, #24]
 8010316:	0151      	lsls	r1, r2, #5
 8010318:	69fa      	ldr	r2, [r7, #28]
 801031a:	440a      	add	r2, r1
 801031c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010320:	0cdb      	lsrs	r3, r3, #19
 8010322:	04db      	lsls	r3, r3, #19
 8010324:	6113      	str	r3, [r2, #16]
 8010326:	e074      	b.n	8010412 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	015a      	lsls	r2, r3, #5
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	4413      	add	r3, r2
 8010330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	0151      	lsls	r1, r2, #5
 801033a:	69fa      	ldr	r2, [r7, #28]
 801033c:	440a      	add	r2, r1
 801033e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010342:	0cdb      	lsrs	r3, r3, #19
 8010344:	04db      	lsls	r3, r3, #19
 8010346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	015a      	lsls	r2, r3, #5
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	4413      	add	r3, r2
 8010350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010354:	691b      	ldr	r3, [r3, #16]
 8010356:	69ba      	ldr	r2, [r7, #24]
 8010358:	0151      	lsls	r1, r2, #5
 801035a:	69fa      	ldr	r2, [r7, #28]
 801035c:	440a      	add	r2, r1
 801035e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010362:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010366:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801036a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801036c:	69bb      	ldr	r3, [r7, #24]
 801036e:	015a      	lsls	r2, r3, #5
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	4413      	add	r3, r2
 8010374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010378:	691a      	ldr	r2, [r3, #16]
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	6959      	ldr	r1, [r3, #20]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	440b      	add	r3, r1
 8010384:	1e59      	subs	r1, r3, #1
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	fbb1 f3f3 	udiv	r3, r1, r3
 801038e:	04d9      	lsls	r1, r3, #19
 8010390:	4b9d      	ldr	r3, [pc, #628]	; (8010608 <USB_EPStartXfer+0x370>)
 8010392:	400b      	ands	r3, r1
 8010394:	69b9      	ldr	r1, [r7, #24]
 8010396:	0148      	lsls	r0, r1, #5
 8010398:	69f9      	ldr	r1, [r7, #28]
 801039a:	4401      	add	r1, r0
 801039c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80103a0:	4313      	orrs	r3, r2
 80103a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	015a      	lsls	r2, r3, #5
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	4413      	add	r3, r2
 80103ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103b0:	691a      	ldr	r2, [r3, #16]
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	695b      	ldr	r3, [r3, #20]
 80103b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103ba:	69b9      	ldr	r1, [r7, #24]
 80103bc:	0148      	lsls	r0, r1, #5
 80103be:	69f9      	ldr	r1, [r7, #28]
 80103c0:	4401      	add	r1, r0
 80103c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80103c6:	4313      	orrs	r3, r2
 80103c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	78db      	ldrb	r3, [r3, #3]
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d11f      	bne.n	8010412 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	015a      	lsls	r2, r3, #5
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	4413      	add	r3, r2
 80103da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103de:	691b      	ldr	r3, [r3, #16]
 80103e0:	69ba      	ldr	r2, [r7, #24]
 80103e2:	0151      	lsls	r1, r2, #5
 80103e4:	69fa      	ldr	r2, [r7, #28]
 80103e6:	440a      	add	r2, r1
 80103e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80103f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	015a      	lsls	r2, r3, #5
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	4413      	add	r3, r2
 80103fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103fe:	691b      	ldr	r3, [r3, #16]
 8010400:	69ba      	ldr	r2, [r7, #24]
 8010402:	0151      	lsls	r1, r2, #5
 8010404:	69fa      	ldr	r2, [r7, #28]
 8010406:	440a      	add	r2, r1
 8010408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801040c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010410:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010412:	79fb      	ldrb	r3, [r7, #7]
 8010414:	2b01      	cmp	r3, #1
 8010416:	d14b      	bne.n	80104b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	691b      	ldr	r3, [r3, #16]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d009      	beq.n	8010434 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	015a      	lsls	r2, r3, #5
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	4413      	add	r3, r2
 8010428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801042c:	461a      	mov	r2, r3
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	691b      	ldr	r3, [r3, #16]
 8010432:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	78db      	ldrb	r3, [r3, #3]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d128      	bne.n	801048e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010448:	2b00      	cmp	r3, #0
 801044a:	d110      	bne.n	801046e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	015a      	lsls	r2, r3, #5
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	4413      	add	r3, r2
 8010454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	69ba      	ldr	r2, [r7, #24]
 801045c:	0151      	lsls	r1, r2, #5
 801045e:	69fa      	ldr	r2, [r7, #28]
 8010460:	440a      	add	r2, r1
 8010462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801046a:	6013      	str	r3, [r2, #0]
 801046c:	e00f      	b.n	801048e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	015a      	lsls	r2, r3, #5
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	4413      	add	r3, r2
 8010476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	69ba      	ldr	r2, [r7, #24]
 801047e:	0151      	lsls	r1, r2, #5
 8010480:	69fa      	ldr	r2, [r7, #28]
 8010482:	440a      	add	r2, r1
 8010484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801048c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	015a      	lsls	r2, r3, #5
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	4413      	add	r3, r2
 8010496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	69ba      	ldr	r2, [r7, #24]
 801049e:	0151      	lsls	r1, r2, #5
 80104a0:	69fa      	ldr	r2, [r7, #28]
 80104a2:	440a      	add	r2, r1
 80104a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104ac:	6013      	str	r3, [r2, #0]
 80104ae:	e12f      	b.n	8010710 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	015a      	lsls	r2, r3, #5
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	4413      	add	r3, r2
 80104b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	69ba      	ldr	r2, [r7, #24]
 80104c0:	0151      	lsls	r1, r2, #5
 80104c2:	69fa      	ldr	r2, [r7, #28]
 80104c4:	440a      	add	r2, r1
 80104c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	78db      	ldrb	r3, [r3, #3]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d015      	beq.n	8010504 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	695b      	ldr	r3, [r3, #20]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f000 8117 	beq.w	8010710 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	f003 030f 	and.w	r3, r3, #15
 80104f2:	2101      	movs	r1, #1
 80104f4:	fa01 f303 	lsl.w	r3, r1, r3
 80104f8:	69f9      	ldr	r1, [r7, #28]
 80104fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104fe:	4313      	orrs	r3, r2
 8010500:	634b      	str	r3, [r1, #52]	; 0x34
 8010502:	e105      	b.n	8010710 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010510:	2b00      	cmp	r3, #0
 8010512:	d110      	bne.n	8010536 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010514:	69bb      	ldr	r3, [r7, #24]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	69ba      	ldr	r2, [r7, #24]
 8010524:	0151      	lsls	r1, r2, #5
 8010526:	69fa      	ldr	r2, [r7, #28]
 8010528:	440a      	add	r2, r1
 801052a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801052e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010532:	6013      	str	r3, [r2, #0]
 8010534:	e00f      	b.n	8010556 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	015a      	lsls	r2, r3, #5
 801053a:	69fb      	ldr	r3, [r7, #28]
 801053c:	4413      	add	r3, r2
 801053e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	69ba      	ldr	r2, [r7, #24]
 8010546:	0151      	lsls	r1, r2, #5
 8010548:	69fa      	ldr	r2, [r7, #28]
 801054a:	440a      	add	r2, r1
 801054c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010554:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	68d9      	ldr	r1, [r3, #12]
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	781a      	ldrb	r2, [r3, #0]
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	695b      	ldr	r3, [r3, #20]
 8010562:	b298      	uxth	r0, r3
 8010564:	79fb      	ldrb	r3, [r7, #7]
 8010566:	9300      	str	r3, [sp, #0]
 8010568:	4603      	mov	r3, r0
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f000 fa2b 	bl	80109c6 <USB_WritePacket>
 8010570:	e0ce      	b.n	8010710 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	015a      	lsls	r2, r3, #5
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	4413      	add	r3, r2
 801057a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	69ba      	ldr	r2, [r7, #24]
 8010582:	0151      	lsls	r1, r2, #5
 8010584:	69fa      	ldr	r2, [r7, #28]
 8010586:	440a      	add	r2, r1
 8010588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801058c:	0cdb      	lsrs	r3, r3, #19
 801058e:	04db      	lsls	r3, r3, #19
 8010590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	015a      	lsls	r2, r3, #5
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	4413      	add	r3, r2
 801059a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	69ba      	ldr	r2, [r7, #24]
 80105a2:	0151      	lsls	r1, r2, #5
 80105a4:	69fa      	ldr	r2, [r7, #28]
 80105a6:	440a      	add	r2, r1
 80105a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80105b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80105b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d126      	bne.n	801060c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	015a      	lsls	r2, r3, #5
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	4413      	add	r3, r2
 80105c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105ca:	691a      	ldr	r2, [r3, #16]
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105d4:	69b9      	ldr	r1, [r7, #24]
 80105d6:	0148      	lsls	r0, r1, #5
 80105d8:	69f9      	ldr	r1, [r7, #28]
 80105da:	4401      	add	r1, r0
 80105dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105e0:	4313      	orrs	r3, r2
 80105e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	015a      	lsls	r2, r3, #5
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	4413      	add	r3, r2
 80105ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	69ba      	ldr	r2, [r7, #24]
 80105f4:	0151      	lsls	r1, r2, #5
 80105f6:	69fa      	ldr	r2, [r7, #28]
 80105f8:	440a      	add	r2, r1
 80105fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010602:	6113      	str	r3, [r2, #16]
 8010604:	e036      	b.n	8010674 <USB_EPStartXfer+0x3dc>
 8010606:	bf00      	nop
 8010608:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	695a      	ldr	r2, [r3, #20]
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	689b      	ldr	r3, [r3, #8]
 8010614:	4413      	add	r3, r2
 8010616:	1e5a      	subs	r2, r3, #1
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010620:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	015a      	lsls	r2, r3, #5
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	4413      	add	r3, r2
 801062a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801062e:	691a      	ldr	r2, [r3, #16]
 8010630:	8afb      	ldrh	r3, [r7, #22]
 8010632:	04d9      	lsls	r1, r3, #19
 8010634:	4b39      	ldr	r3, [pc, #228]	; (801071c <USB_EPStartXfer+0x484>)
 8010636:	400b      	ands	r3, r1
 8010638:	69b9      	ldr	r1, [r7, #24]
 801063a:	0148      	lsls	r0, r1, #5
 801063c:	69f9      	ldr	r1, [r7, #28]
 801063e:	4401      	add	r1, r0
 8010640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010644:	4313      	orrs	r3, r2
 8010646:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	015a      	lsls	r2, r3, #5
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	4413      	add	r3, r2
 8010650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010654:	691a      	ldr	r2, [r3, #16]
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	689b      	ldr	r3, [r3, #8]
 801065a:	8af9      	ldrh	r1, [r7, #22]
 801065c:	fb01 f303 	mul.w	r3, r1, r3
 8010660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010664:	69b9      	ldr	r1, [r7, #24]
 8010666:	0148      	lsls	r0, r1, #5
 8010668:	69f9      	ldr	r1, [r7, #28]
 801066a:	4401      	add	r1, r0
 801066c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010670:	4313      	orrs	r3, r2
 8010672:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	2b01      	cmp	r3, #1
 8010678:	d10d      	bne.n	8010696 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d009      	beq.n	8010696 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	68d9      	ldr	r1, [r3, #12]
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	015a      	lsls	r2, r3, #5
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	4413      	add	r3, r2
 801068e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010692:	460a      	mov	r2, r1
 8010694:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	78db      	ldrb	r3, [r3, #3]
 801069a:	2b01      	cmp	r3, #1
 801069c:	d128      	bne.n	80106f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d110      	bne.n	80106d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	015a      	lsls	r2, r3, #5
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	4413      	add	r3, r2
 80106b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	69ba      	ldr	r2, [r7, #24]
 80106be:	0151      	lsls	r1, r2, #5
 80106c0:	69fa      	ldr	r2, [r7, #28]
 80106c2:	440a      	add	r2, r1
 80106c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	e00f      	b.n	80106f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	015a      	lsls	r2, r3, #5
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	4413      	add	r3, r2
 80106d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	69ba      	ldr	r2, [r7, #24]
 80106e0:	0151      	lsls	r1, r2, #5
 80106e2:	69fa      	ldr	r2, [r7, #28]
 80106e4:	440a      	add	r2, r1
 80106e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	015a      	lsls	r2, r3, #5
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	4413      	add	r3, r2
 80106f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	69ba      	ldr	r2, [r7, #24]
 8010700:	0151      	lsls	r1, r2, #5
 8010702:	69fa      	ldr	r2, [r7, #28]
 8010704:	440a      	add	r2, r1
 8010706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801070a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801070e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3720      	adds	r7, #32
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	1ff80000 	.word	0x1ff80000

08010720 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010720:	b480      	push	{r7}
 8010722:	b087      	sub	sp, #28
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	4613      	mov	r3, r2
 801072c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	785b      	ldrb	r3, [r3, #1]
 801073c:	2b01      	cmp	r3, #1
 801073e:	f040 80cd 	bne.w	80108dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	695b      	ldr	r3, [r3, #20]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d132      	bne.n	80107b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	015a      	lsls	r2, r3, #5
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	4413      	add	r3, r2
 8010752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	693a      	ldr	r2, [r7, #16]
 801075a:	0151      	lsls	r1, r2, #5
 801075c:	697a      	ldr	r2, [r7, #20]
 801075e:	440a      	add	r2, r1
 8010760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010764:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010768:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801076c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	015a      	lsls	r2, r3, #5
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	4413      	add	r3, r2
 8010776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	693a      	ldr	r2, [r7, #16]
 801077e:	0151      	lsls	r1, r2, #5
 8010780:	697a      	ldr	r2, [r7, #20]
 8010782:	440a      	add	r2, r1
 8010784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801078c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	015a      	lsls	r2, r3, #5
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	4413      	add	r3, r2
 8010796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801079a:	691b      	ldr	r3, [r3, #16]
 801079c:	693a      	ldr	r2, [r7, #16]
 801079e:	0151      	lsls	r1, r2, #5
 80107a0:	697a      	ldr	r2, [r7, #20]
 80107a2:	440a      	add	r2, r1
 80107a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107a8:	0cdb      	lsrs	r3, r3, #19
 80107aa:	04db      	lsls	r3, r3, #19
 80107ac:	6113      	str	r3, [r2, #16]
 80107ae:	e04e      	b.n	801084e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	015a      	lsls	r2, r3, #5
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	4413      	add	r3, r2
 80107b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107bc:	691b      	ldr	r3, [r3, #16]
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	0151      	lsls	r1, r2, #5
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	440a      	add	r2, r1
 80107c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107ca:	0cdb      	lsrs	r3, r3, #19
 80107cc:	04db      	lsls	r3, r3, #19
 80107ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	015a      	lsls	r2, r3, #5
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	4413      	add	r3, r2
 80107d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107dc:	691b      	ldr	r3, [r3, #16]
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	0151      	lsls	r1, r2, #5
 80107e2:	697a      	ldr	r2, [r7, #20]
 80107e4:	440a      	add	r2, r1
 80107e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80107ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80107f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	695a      	ldr	r2, [r3, #20]
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d903      	bls.n	8010808 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	689a      	ldr	r2, [r3, #8]
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	015a      	lsls	r2, r3, #5
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	4413      	add	r3, r2
 8010810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	693a      	ldr	r2, [r7, #16]
 8010818:	0151      	lsls	r1, r2, #5
 801081a:	697a      	ldr	r2, [r7, #20]
 801081c:	440a      	add	r2, r1
 801081e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	015a      	lsls	r2, r3, #5
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	4413      	add	r3, r2
 8010830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010834:	691a      	ldr	r2, [r3, #16]
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801083e:	6939      	ldr	r1, [r7, #16]
 8010840:	0148      	lsls	r0, r1, #5
 8010842:	6979      	ldr	r1, [r7, #20]
 8010844:	4401      	add	r1, r0
 8010846:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801084a:	4313      	orrs	r3, r2
 801084c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801084e:	79fb      	ldrb	r3, [r7, #7]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d11e      	bne.n	8010892 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	691b      	ldr	r3, [r3, #16]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d009      	beq.n	8010870 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	015a      	lsls	r2, r3, #5
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	4413      	add	r3, r2
 8010864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010868:	461a      	mov	r2, r3
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	691b      	ldr	r3, [r3, #16]
 801086e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	015a      	lsls	r2, r3, #5
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	4413      	add	r3, r2
 8010878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	693a      	ldr	r2, [r7, #16]
 8010880:	0151      	lsls	r1, r2, #5
 8010882:	697a      	ldr	r2, [r7, #20]
 8010884:	440a      	add	r2, r1
 8010886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801088a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801088e:	6013      	str	r3, [r2, #0]
 8010890:	e092      	b.n	80109b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	015a      	lsls	r2, r3, #5
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	4413      	add	r3, r2
 801089a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	693a      	ldr	r2, [r7, #16]
 80108a2:	0151      	lsls	r1, r2, #5
 80108a4:	697a      	ldr	r2, [r7, #20]
 80108a6:	440a      	add	r2, r1
 80108a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80108b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	695b      	ldr	r3, [r3, #20]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d07e      	beq.n	80109b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	f003 030f 	and.w	r3, r3, #15
 80108ca:	2101      	movs	r1, #1
 80108cc:	fa01 f303 	lsl.w	r3, r1, r3
 80108d0:	6979      	ldr	r1, [r7, #20]
 80108d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80108d6:	4313      	orrs	r3, r2
 80108d8:	634b      	str	r3, [r1, #52]	; 0x34
 80108da:	e06d      	b.n	80109b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	015a      	lsls	r2, r3, #5
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	4413      	add	r3, r2
 80108e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108e8:	691b      	ldr	r3, [r3, #16]
 80108ea:	693a      	ldr	r2, [r7, #16]
 80108ec:	0151      	lsls	r1, r2, #5
 80108ee:	697a      	ldr	r2, [r7, #20]
 80108f0:	440a      	add	r2, r1
 80108f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108f6:	0cdb      	lsrs	r3, r3, #19
 80108f8:	04db      	lsls	r3, r3, #19
 80108fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	015a      	lsls	r2, r3, #5
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	4413      	add	r3, r2
 8010904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010908:	691b      	ldr	r3, [r3, #16]
 801090a:	693a      	ldr	r2, [r7, #16]
 801090c:	0151      	lsls	r1, r2, #5
 801090e:	697a      	ldr	r2, [r7, #20]
 8010910:	440a      	add	r2, r1
 8010912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801091a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801091e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	695b      	ldr	r3, [r3, #20]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d003      	beq.n	8010930 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	689a      	ldr	r2, [r3, #8]
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	015a      	lsls	r2, r3, #5
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	4413      	add	r3, r2
 8010938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801093c:	691b      	ldr	r3, [r3, #16]
 801093e:	693a      	ldr	r2, [r7, #16]
 8010940:	0151      	lsls	r1, r2, #5
 8010942:	697a      	ldr	r2, [r7, #20]
 8010944:	440a      	add	r2, r1
 8010946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801094a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801094e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	015a      	lsls	r2, r3, #5
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	4413      	add	r3, r2
 8010958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801095c:	691a      	ldr	r2, [r3, #16]
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	689b      	ldr	r3, [r3, #8]
 8010962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010966:	6939      	ldr	r1, [r7, #16]
 8010968:	0148      	lsls	r0, r1, #5
 801096a:	6979      	ldr	r1, [r7, #20]
 801096c:	4401      	add	r1, r0
 801096e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010972:	4313      	orrs	r3, r2
 8010974:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010976:	79fb      	ldrb	r3, [r7, #7]
 8010978:	2b01      	cmp	r3, #1
 801097a:	d10d      	bne.n	8010998 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	68db      	ldr	r3, [r3, #12]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d009      	beq.n	8010998 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	68d9      	ldr	r1, [r3, #12]
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	015a      	lsls	r2, r3, #5
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	4413      	add	r3, r2
 8010990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010994:	460a      	mov	r2, r1
 8010996:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	015a      	lsls	r2, r3, #5
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	4413      	add	r3, r2
 80109a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	693a      	ldr	r2, [r7, #16]
 80109a8:	0151      	lsls	r1, r2, #5
 80109aa:	697a      	ldr	r2, [r7, #20]
 80109ac:	440a      	add	r2, r1
 80109ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80109b8:	2300      	movs	r3, #0
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	371c      	adds	r7, #28
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr

080109c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80109c6:	b480      	push	{r7}
 80109c8:	b089      	sub	sp, #36	; 0x24
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	60f8      	str	r0, [r7, #12]
 80109ce:	60b9      	str	r1, [r7, #8]
 80109d0:	4611      	mov	r1, r2
 80109d2:	461a      	mov	r2, r3
 80109d4:	460b      	mov	r3, r1
 80109d6:	71fb      	strb	r3, [r7, #7]
 80109d8:	4613      	mov	r3, r2
 80109da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80109e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d11a      	bne.n	8010a22 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80109ec:	88bb      	ldrh	r3, [r7, #4]
 80109ee:	3303      	adds	r3, #3
 80109f0:	089b      	lsrs	r3, r3, #2
 80109f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80109f4:	2300      	movs	r3, #0
 80109f6:	61bb      	str	r3, [r7, #24]
 80109f8:	e00f      	b.n	8010a1a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80109fa:	79fb      	ldrb	r3, [r7, #7]
 80109fc:	031a      	lsls	r2, r3, #12
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	4413      	add	r3, r2
 8010a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a06:	461a      	mov	r2, r3
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	3304      	adds	r3, #4
 8010a12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010a14:	69bb      	ldr	r3, [r7, #24]
 8010a16:	3301      	adds	r3, #1
 8010a18:	61bb      	str	r3, [r7, #24]
 8010a1a:	69ba      	ldr	r2, [r7, #24]
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d3eb      	bcc.n	80109fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3724      	adds	r7, #36	; 0x24
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b089      	sub	sp, #36	; 0x24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010a46:	88fb      	ldrh	r3, [r7, #6]
 8010a48:	3303      	adds	r3, #3
 8010a4a:	089b      	lsrs	r3, r3, #2
 8010a4c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010a4e:	2300      	movs	r3, #0
 8010a50:	61bb      	str	r3, [r7, #24]
 8010a52:	e00b      	b.n	8010a6c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010a60:	69fb      	ldr	r3, [r7, #28]
 8010a62:	3304      	adds	r3, #4
 8010a64:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010a66:	69bb      	ldr	r3, [r7, #24]
 8010a68:	3301      	adds	r3, #1
 8010a6a:	61bb      	str	r3, [r7, #24]
 8010a6c:	69ba      	ldr	r2, [r7, #24]
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d3ef      	bcc.n	8010a54 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010a74:	69fb      	ldr	r3, [r7, #28]
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3724      	adds	r7, #36	; 0x24
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010a82:	b480      	push	{r7}
 8010a84:	b085      	sub	sp, #20
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	785b      	ldrb	r3, [r3, #1]
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d12c      	bne.n	8010af8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	015a      	lsls	r2, r3, #5
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	db12      	blt.n	8010ad6 <USB_EPSetStall+0x54>
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d00f      	beq.n	8010ad6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	015a      	lsls	r2, r3, #5
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	4413      	add	r3, r2
 8010abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	68ba      	ldr	r2, [r7, #8]
 8010ac6:	0151      	lsls	r1, r2, #5
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	440a      	add	r2, r1
 8010acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ad0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010ad4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	015a      	lsls	r2, r3, #5
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	4413      	add	r3, r2
 8010ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	0151      	lsls	r1, r2, #5
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	440a      	add	r2, r1
 8010aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010af4:	6013      	str	r3, [r2, #0]
 8010af6:	e02b      	b.n	8010b50 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	015a      	lsls	r2, r3, #5
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	4413      	add	r3, r2
 8010b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	db12      	blt.n	8010b30 <USB_EPSetStall+0xae>
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d00f      	beq.n	8010b30 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	015a      	lsls	r2, r3, #5
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	4413      	add	r3, r2
 8010b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	0151      	lsls	r1, r2, #5
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	440a      	add	r2, r1
 8010b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010b2e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	015a      	lsls	r2, r3, #5
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	4413      	add	r3, r2
 8010b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	68ba      	ldr	r2, [r7, #8]
 8010b40:	0151      	lsls	r1, r2, #5
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	440a      	add	r2, r1
 8010b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b5e:	b480      	push	{r7}
 8010b60:	b085      	sub	sp, #20
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	785b      	ldrb	r3, [r3, #1]
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d128      	bne.n	8010bcc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	015a      	lsls	r2, r3, #5
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	4413      	add	r3, r2
 8010b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	0151      	lsls	r1, r2, #5
 8010b8c:	68fa      	ldr	r2, [r7, #12]
 8010b8e:	440a      	add	r2, r1
 8010b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	78db      	ldrb	r3, [r3, #3]
 8010b9e:	2b03      	cmp	r3, #3
 8010ba0:	d003      	beq.n	8010baa <USB_EPClearStall+0x4c>
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	78db      	ldrb	r3, [r3, #3]
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d138      	bne.n	8010c1c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	015a      	lsls	r2, r3, #5
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	0151      	lsls	r1, r2, #5
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	440a      	add	r2, r1
 8010bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bc8:	6013      	str	r3, [r2, #0]
 8010bca:	e027      	b.n	8010c1c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	015a      	lsls	r2, r3, #5
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	4413      	add	r3, r2
 8010bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	0151      	lsls	r1, r2, #5
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	440a      	add	r2, r1
 8010be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010bea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	78db      	ldrb	r3, [r3, #3]
 8010bf0:	2b03      	cmp	r3, #3
 8010bf2:	d003      	beq.n	8010bfc <USB_EPClearStall+0x9e>
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	78db      	ldrb	r3, [r3, #3]
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	d10f      	bne.n	8010c1c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	015a      	lsls	r2, r3, #5
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	4413      	add	r3, r2
 8010c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68ba      	ldr	r2, [r7, #8]
 8010c0c:	0151      	lsls	r1, r2, #5
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	440a      	add	r2, r1
 8010c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c1a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010c1c:	2300      	movs	r3, #0
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3714      	adds	r7, #20
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	b085      	sub	sp, #20
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	460b      	mov	r3, r1
 8010c34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	68fa      	ldr	r2, [r7, #12]
 8010c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010c4c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	78fb      	ldrb	r3, [r7, #3]
 8010c58:	011b      	lsls	r3, r3, #4
 8010c5a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010c5e:	68f9      	ldr	r1, [r7, #12]
 8010c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c64:	4313      	orrs	r3, r2
 8010c66:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010c68:	2300      	movs	r3, #0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3714      	adds	r7, #20
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr

08010c76 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c76:	b480      	push	{r7}
 8010c78:	b085      	sub	sp, #20
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c90:	f023 0303 	bic.w	r3, r3, #3
 8010c94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	68fa      	ldr	r2, [r7, #12]
 8010ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ca4:	f023 0302 	bic.w	r3, r3, #2
 8010ca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010caa:	2300      	movs	r3, #0
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3714      	adds	r7, #20
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	68fa      	ldr	r2, [r7, #12]
 8010cce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010cd2:	f023 0303 	bic.w	r3, r3, #3
 8010cd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ce6:	f043 0302 	orr.w	r3, r3, #2
 8010cea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010cfa:	b480      	push	{r7}
 8010cfc:	b085      	sub	sp, #20
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	699b      	ldr	r3, [r3, #24]
 8010d0c:	68fa      	ldr	r2, [r7, #12]
 8010d0e:	4013      	ands	r3, r2
 8010d10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010d12:	68fb      	ldr	r3, [r7, #12]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3714      	adds	r7, #20
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b085      	sub	sp, #20
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d3c:	69db      	ldr	r3, [r3, #28]
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	4013      	ands	r3, r2
 8010d42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	0c1b      	lsrs	r3, r3, #16
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3714      	adds	r7, #20
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d70:	69db      	ldr	r3, [r3, #28]
 8010d72:	68ba      	ldr	r2, [r7, #8]
 8010d74:	4013      	ands	r3, r2
 8010d76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	b29b      	uxth	r3, r3
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3714      	adds	r7, #20
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	460b      	mov	r3, r1
 8010d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010d98:	78fb      	ldrb	r3, [r7, #3]
 8010d9a:	015a      	lsls	r2, r3, #5
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	4413      	add	r3, r2
 8010da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010da4:	689b      	ldr	r3, [r3, #8]
 8010da6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dae:	695b      	ldr	r3, [r3, #20]
 8010db0:	68ba      	ldr	r2, [r7, #8]
 8010db2:	4013      	ands	r3, r2
 8010db4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010db6:	68bb      	ldr	r3, [r7, #8]
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3714      	adds	r7, #20
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b087      	sub	sp, #28
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	460b      	mov	r3, r1
 8010dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dda:	691b      	ldr	r3, [r3, #16]
 8010ddc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010de6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010de8:	78fb      	ldrb	r3, [r7, #3]
 8010dea:	f003 030f 	and.w	r3, r3, #15
 8010dee:	68fa      	ldr	r2, [r7, #12]
 8010df0:	fa22 f303 	lsr.w	r3, r2, r3
 8010df4:	01db      	lsls	r3, r3, #7
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	693a      	ldr	r2, [r7, #16]
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010dfe:	78fb      	ldrb	r3, [r7, #3]
 8010e00:	015a      	lsls	r2, r3, #5
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	4413      	add	r3, r2
 8010e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e0a:	689b      	ldr	r3, [r3, #8]
 8010e0c:	693a      	ldr	r2, [r7, #16]
 8010e0e:	4013      	ands	r3, r2
 8010e10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010e12:	68bb      	ldr	r3, [r7, #8]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	371c      	adds	r7, #28
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	f003 0301 	and.w	r3, r3, #1
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	68fa      	ldr	r2, [r7, #12]
 8010e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010e5a:	f023 0307 	bic.w	r3, r3, #7
 8010e5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	68fa      	ldr	r2, [r7, #12]
 8010e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e74:	2300      	movs	r3, #0
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3714      	adds	r7, #20
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
	...

08010e84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b087      	sub	sp, #28
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	333c      	adds	r3, #60	; 0x3c
 8010e9a:	3304      	adds	r3, #4
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	4a26      	ldr	r2, [pc, #152]	; (8010f3c <USB_EP0_OutStart+0xb8>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d90a      	bls.n	8010ebe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010eb8:	d101      	bne.n	8010ebe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	e037      	b.n	8010f2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ed0:	691b      	ldr	r3, [r3, #16]
 8010ed2:	697a      	ldr	r2, [r7, #20]
 8010ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ee4:	691b      	ldr	r3, [r3, #16]
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eec:	f043 0318 	orr.w	r3, r3, #24
 8010ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ef8:	691b      	ldr	r3, [r3, #16]
 8010efa:	697a      	ldr	r2, [r7, #20]
 8010efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010f04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010f06:	7afb      	ldrb	r3, [r7, #11]
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d10f      	bne.n	8010f2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f12:	461a      	mov	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	697a      	ldr	r2, [r7, #20]
 8010f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010f2c:	2300      	movs	r3, #0
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	371c      	adds	r7, #28
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop
 8010f3c:	4f54300a 	.word	0x4f54300a

08010f40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	3301      	adds	r3, #1
 8010f50:	60fb      	str	r3, [r7, #12]
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	4a13      	ldr	r2, [pc, #76]	; (8010fa4 <USB_CoreReset+0x64>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d901      	bls.n	8010f5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010f5a:	2303      	movs	r3, #3
 8010f5c:	e01b      	b.n	8010f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	691b      	ldr	r3, [r3, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	daf2      	bge.n	8010f4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010f66:	2300      	movs	r3, #0
 8010f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	691b      	ldr	r3, [r3, #16]
 8010f6e:	f043 0201 	orr.w	r2, r3, #1
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	60fb      	str	r3, [r7, #12]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	4a09      	ldr	r2, [pc, #36]	; (8010fa4 <USB_CoreReset+0x64>)
 8010f80:	4293      	cmp	r3, r2
 8010f82:	d901      	bls.n	8010f88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010f84:	2303      	movs	r3, #3
 8010f86:	e006      	b.n	8010f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	691b      	ldr	r3, [r3, #16]
 8010f8c:	f003 0301 	and.w	r3, r3, #1
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d0f0      	beq.n	8010f76 <USB_CoreReset+0x36>

  return HAL_OK;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3714      	adds	r7, #20
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop
 8010fa4:	00030d40 	.word	0x00030d40

08010fa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010fb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010fb8:	f004 ffd0 	bl	8015f5c <malloc>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d105      	bne.n	8010fd2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010fce:	2302      	movs	r3, #2
 8010fd0:	e066      	b.n	80110a0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	7c1b      	ldrb	r3, [r3, #16]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d119      	bne.n	8011016 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fe6:	2202      	movs	r2, #2
 8010fe8:	2181      	movs	r1, #129	; 0x81
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f004 fe3d 	bl	8015c6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ffa:	2202      	movs	r2, #2
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f004 fe33 	bl	8015c6a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2201      	movs	r2, #1
 8011008:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2210      	movs	r2, #16
 8011010:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011014:	e016      	b.n	8011044 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011016:	2340      	movs	r3, #64	; 0x40
 8011018:	2202      	movs	r2, #2
 801101a:	2181      	movs	r1, #129	; 0x81
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f004 fe24 	bl	8015c6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2201      	movs	r2, #1
 8011026:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011028:	2340      	movs	r3, #64	; 0x40
 801102a:	2202      	movs	r2, #2
 801102c:	2101      	movs	r1, #1
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f004 fe1b 	bl	8015c6a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2201      	movs	r2, #1
 8011038:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2210      	movs	r2, #16
 8011040:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011044:	2308      	movs	r3, #8
 8011046:	2203      	movs	r2, #3
 8011048:	2182      	movs	r1, #130	; 0x82
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f004 fe0d 	bl	8015c6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2201      	movs	r2, #1
 8011054:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2200      	movs	r2, #0
 8011066:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	2200      	movs	r2, #0
 801106e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	7c1b      	ldrb	r3, [r3, #16]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d109      	bne.n	801108e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011084:	2101      	movs	r1, #1
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f004 fede 	bl	8015e48 <USBD_LL_PrepareReceive>
 801108c:	e007      	b.n	801109e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011094:	2340      	movs	r3, #64	; 0x40
 8011096:	2101      	movs	r1, #1
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f004 fed5 	bl	8015e48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	460b      	mov	r3, r1
 80110b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80110b4:	2300      	movs	r3, #0
 80110b6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80110b8:	2181      	movs	r1, #129	; 0x81
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f004 fdfb 	bl	8015cb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80110c6:	2101      	movs	r1, #1
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f004 fdf4 	bl	8015cb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2200      	movs	r2, #0
 80110d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80110d6:	2182      	movs	r1, #130	; 0x82
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f004 fdec 	bl	8015cb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2200      	movs	r2, #0
 80110ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d00e      	beq.n	8011116 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011108:	4618      	mov	r0, r3
 801110a:	f004 ff2f 	bl	8015f6c <free>
    pdev->pClassData = NULL;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8011116:	7bfb      	ldrb	r3, [r7, #15]
}
 8011118:	4618      	mov	r0, r3
 801111a:	3710      	adds	r7, #16
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}

08011120 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011130:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011132:	2300      	movs	r3, #0
 8011134:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011136:	2300      	movs	r3, #0
 8011138:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801113a:	2300      	movs	r3, #0
 801113c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011146:	2b00      	cmp	r3, #0
 8011148:	d03a      	beq.n	80111c0 <USBD_CDC_Setup+0xa0>
 801114a:	2b20      	cmp	r3, #32
 801114c:	f040 8097 	bne.w	801127e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	88db      	ldrh	r3, [r3, #6]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d029      	beq.n	80111ac <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	b25b      	sxtb	r3, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	da11      	bge.n	8011186 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	683a      	ldr	r2, [r7, #0]
 801116c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 801116e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011170:	683a      	ldr	r2, [r7, #0]
 8011172:	88d2      	ldrh	r2, [r2, #6]
 8011174:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011176:	6939      	ldr	r1, [r7, #16]
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	88db      	ldrh	r3, [r3, #6]
 801117c:	461a      	mov	r2, r3
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f001 fa9d 	bl	80126be <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8011184:	e082      	b.n	801128c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	785a      	ldrb	r2, [r3, #1]
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	88db      	ldrh	r3, [r3, #6]
 8011194:	b2da      	uxtb	r2, r3
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801119c:	6939      	ldr	r1, [r7, #16]
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	88db      	ldrh	r3, [r3, #6]
 80111a2:	461a      	mov	r2, r3
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f001 fab6 	bl	8012716 <USBD_CtlPrepareRx>
    break;
 80111aa:	e06f      	b.n	801128c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	683a      	ldr	r2, [r7, #0]
 80111b6:	7850      	ldrb	r0, [r2, #1]
 80111b8:	2200      	movs	r2, #0
 80111ba:	6839      	ldr	r1, [r7, #0]
 80111bc:	4798      	blx	r3
    break;
 80111be:	e065      	b.n	801128c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	785b      	ldrb	r3, [r3, #1]
 80111c4:	2b0b      	cmp	r3, #11
 80111c6:	d84f      	bhi.n	8011268 <USBD_CDC_Setup+0x148>
 80111c8:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <USBD_CDC_Setup+0xb0>)
 80111ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ce:	bf00      	nop
 80111d0:	08011201 	.word	0x08011201
 80111d4:	08011277 	.word	0x08011277
 80111d8:	08011269 	.word	0x08011269
 80111dc:	08011269 	.word	0x08011269
 80111e0:	08011269 	.word	0x08011269
 80111e4:	08011269 	.word	0x08011269
 80111e8:	08011269 	.word	0x08011269
 80111ec:	08011269 	.word	0x08011269
 80111f0:	08011269 	.word	0x08011269
 80111f4:	08011269 	.word	0x08011269
 80111f8:	08011229 	.word	0x08011229
 80111fc:	08011251 	.word	0x08011251
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011206:	2b03      	cmp	r3, #3
 8011208:	d107      	bne.n	801121a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801120a:	f107 030c 	add.w	r3, r7, #12
 801120e:	2202      	movs	r2, #2
 8011210:	4619      	mov	r1, r3
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f001 fa53 	bl	80126be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011218:	e030      	b.n	801127c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801121a:	6839      	ldr	r1, [r7, #0]
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f001 f9dd 	bl	80125dc <USBD_CtlError>
        ret = USBD_FAIL;
 8011222:	2303      	movs	r3, #3
 8011224:	75fb      	strb	r3, [r7, #23]
      break;
 8011226:	e029      	b.n	801127c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801122e:	2b03      	cmp	r3, #3
 8011230:	d107      	bne.n	8011242 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011232:	f107 030f 	add.w	r3, r7, #15
 8011236:	2201      	movs	r2, #1
 8011238:	4619      	mov	r1, r3
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f001 fa3f 	bl	80126be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011240:	e01c      	b.n	801127c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011242:	6839      	ldr	r1, [r7, #0]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f001 f9c9 	bl	80125dc <USBD_CtlError>
        ret = USBD_FAIL;
 801124a:	2303      	movs	r3, #3
 801124c:	75fb      	strb	r3, [r7, #23]
      break;
 801124e:	e015      	b.n	801127c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011256:	2b03      	cmp	r3, #3
 8011258:	d00f      	beq.n	801127a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 801125a:	6839      	ldr	r1, [r7, #0]
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f001 f9bd 	bl	80125dc <USBD_CtlError>
        ret = USBD_FAIL;
 8011262:	2303      	movs	r3, #3
 8011264:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011266:	e008      	b.n	801127a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8011268:	6839      	ldr	r1, [r7, #0]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f001 f9b6 	bl	80125dc <USBD_CtlError>
      ret = USBD_FAIL;
 8011270:	2303      	movs	r3, #3
 8011272:	75fb      	strb	r3, [r7, #23]
      break;
 8011274:	e002      	b.n	801127c <USBD_CDC_Setup+0x15c>
      break;
 8011276:	bf00      	nop
 8011278:	e008      	b.n	801128c <USBD_CDC_Setup+0x16c>
      break;
 801127a:	bf00      	nop
    }
    break;
 801127c:	e006      	b.n	801128c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 801127e:	6839      	ldr	r1, [r7, #0]
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f001 f9ab 	bl	80125dc <USBD_CtlError>
    ret = USBD_FAIL;
 8011286:	2303      	movs	r3, #3
 8011288:	75fb      	strb	r3, [r7, #23]
    break;
 801128a:	bf00      	nop
  }

  return (uint8_t)ret;
 801128c:	7dfb      	ldrb	r3, [r7, #23]
}
 801128e:	4618      	mov	r0, r3
 8011290:	3718      	adds	r7, #24
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop

08011298 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	460b      	mov	r3, r1
 80112a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d101      	bne.n	80112ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80112b6:	2303      	movs	r3, #3
 80112b8:	e049      	b.n	801134e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80112c2:	78fa      	ldrb	r2, [r7, #3]
 80112c4:	6879      	ldr	r1, [r7, #4]
 80112c6:	4613      	mov	r3, r2
 80112c8:	009b      	lsls	r3, r3, #2
 80112ca:	4413      	add	r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	440b      	add	r3, r1
 80112d0:	3318      	adds	r3, #24
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d029      	beq.n	801132c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80112d8:	78fa      	ldrb	r2, [r7, #3]
 80112da:	6879      	ldr	r1, [r7, #4]
 80112dc:	4613      	mov	r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4413      	add	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	440b      	add	r3, r1
 80112e6:	3318      	adds	r3, #24
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	78f9      	ldrb	r1, [r7, #3]
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	460b      	mov	r3, r1
 80112f0:	00db      	lsls	r3, r3, #3
 80112f2:	1a5b      	subs	r3, r3, r1
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4403      	add	r3, r0
 80112f8:	3344      	adds	r3, #68	; 0x44
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8011300:	fb03 f301 	mul.w	r3, r3, r1
 8011304:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011306:	2b00      	cmp	r3, #0
 8011308:	d110      	bne.n	801132c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801130a:	78fa      	ldrb	r2, [r7, #3]
 801130c:	6879      	ldr	r1, [r7, #4]
 801130e:	4613      	mov	r3, r2
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	4413      	add	r3, r2
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	440b      	add	r3, r1
 8011318:	3318      	adds	r3, #24
 801131a:	2200      	movs	r2, #0
 801131c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801131e:	78f9      	ldrb	r1, [r7, #3]
 8011320:	2300      	movs	r3, #0
 8011322:	2200      	movs	r2, #0
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f004 fd6e 	bl	8015e06 <USBD_LL_Transmit>
 801132a:	e00f      	b.n	801134c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	2200      	movs	r2, #0
 8011330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	68ba      	ldr	r2, [r7, #8]
 801133e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011342:	68ba      	ldr	r2, [r7, #8]
 8011344:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011348:	78fa      	ldrb	r2, [r7, #3]
 801134a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 801134c:	2300      	movs	r3, #0
}
 801134e:	4618      	mov	r0, r3
 8011350:	3710      	adds	r7, #16
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b084      	sub	sp, #16
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
 801135e:	460b      	mov	r3, r1
 8011360:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011368:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011370:	2b00      	cmp	r3, #0
 8011372:	d101      	bne.n	8011378 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011374:	2303      	movs	r3, #3
 8011376:	e015      	b.n	80113a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011378:	78fb      	ldrb	r3, [r7, #3]
 801137a:	4619      	mov	r1, r3
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f004 fd84 	bl	8015e8a <USBD_LL_GetRxDataSize>
 8011382:	4602      	mov	r2, r0
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011398:	68fa      	ldr	r2, [r7, #12]
 801139a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801139e:	4611      	mov	r1, r2
 80113a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d015      	beq.n	80113f2 <USBD_CDC_EP0_RxReady+0x46>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80113cc:	2bff      	cmp	r3, #255	; 0xff
 80113ce:	d010      	beq.n	80113f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	68fa      	ldr	r2, [r7, #12]
 80113da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80113de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80113e6:	b292      	uxth	r2, r2
 80113e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	22ff      	movs	r2, #255	; 0xff
 80113ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80113f2:	2300      	movs	r3, #0
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3710      	adds	r7, #16
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2243      	movs	r2, #67	; 0x43
 8011408:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801140a:	4b03      	ldr	r3, [pc, #12]	; (8011418 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801140c:	4618      	mov	r0, r3
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr
 8011418:	200008bc 	.word	0x200008bc

0801141c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2243      	movs	r2, #67	; 0x43
 8011428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801142a:	4b03      	ldr	r3, [pc, #12]	; (8011438 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801142c:	4618      	mov	r0, r3
 801142e:	370c      	adds	r7, #12
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr
 8011438:	20000878 	.word	0x20000878

0801143c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2243      	movs	r2, #67	; 0x43
 8011448:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801144a:	4b03      	ldr	r3, [pc, #12]	; (8011458 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801144c:	4618      	mov	r0, r3
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr
 8011458:	20000900 	.word	0x20000900

0801145c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801145c:	b480      	push	{r7}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	220a      	movs	r2, #10
 8011468:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801146a:	4b03      	ldr	r3, [pc, #12]	; (8011478 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801146c:	4618      	mov	r0, r3
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr
 8011478:	20000834 	.word	0x20000834

0801147c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d101      	bne.n	8011490 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801148c:	2303      	movs	r3, #3
 801148e:	e004      	b.n	801149a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	683a      	ldr	r2, [r7, #0]
 8011494:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011498:	2300      	movs	r3, #0
}
 801149a:	4618      	mov	r0, r3
 801149c:	370c      	adds	r7, #12
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr

080114a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80114a6:	b480      	push	{r7}
 80114a8:	b087      	sub	sp, #28
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	60f8      	str	r0, [r7, #12]
 80114ae:	60b9      	str	r1, [r7, #8]
 80114b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80114ca:	2300      	movs	r3, #0
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	371c      	adds	r7, #28
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114e8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	683a      	ldr	r2, [r7, #0]
 80114ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80114f2:	2300      	movs	r3, #0
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3714      	adds	r7, #20
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr

08011500 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801150e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011510:	2301      	movs	r3, #1
 8011512:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801151a:	2b00      	cmp	r3, #0
 801151c:	d101      	bne.n	8011522 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801151e:	2303      	movs	r3, #3
 8011520:	e01a      	b.n	8011558 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011528:	2b00      	cmp	r3, #0
 801152a:	d114      	bne.n	8011556 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	2201      	movs	r2, #1
 8011530:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801154a:	2181      	movs	r1, #129	; 0x81
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f004 fc5a 	bl	8015e06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011552:	2300      	movs	r3, #0
 8011554:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011556:	7bfb      	ldrb	r3, [r7, #15]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801156e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011576:	2b00      	cmp	r3, #0
 8011578:	d101      	bne.n	801157e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801157a:	2303      	movs	r3, #3
 801157c:	e016      	b.n	80115ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	7c1b      	ldrb	r3, [r3, #16]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d109      	bne.n	801159a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011590:	2101      	movs	r1, #1
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f004 fc58 	bl	8015e48 <USBD_LL_PrepareReceive>
 8011598:	e007      	b.n	80115aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80115a0:	2340      	movs	r3, #64	; 0x40
 80115a2:	2101      	movs	r1, #1
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f004 fc4f 	bl	8015e48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80115aa:	2300      	movs	r3, #0
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3710      	adds	r7, #16
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	4613      	mov	r3, r2
 80115c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d101      	bne.n	80115cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80115c8:	2303      	movs	r3, #3
 80115ca:	e025      	b.n	8011618 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d003      	beq.n	80115de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d003      	beq.n	80115f0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2200      	movs	r2, #0
 80115ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d003      	beq.n	80115fe <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	68ba      	ldr	r2, [r7, #8]
 80115fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2201      	movs	r2, #1
 8011602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	79fa      	ldrb	r2, [r7, #7]
 801160a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f004 fac5 	bl	8015b9c <USBD_LL_Init>
 8011612:	4603      	mov	r3, r0
 8011614:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011616:	7dfb      	ldrb	r3, [r7, #23]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3718      	adds	r7, #24
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801162a:	2300      	movs	r3, #0
 801162c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d101      	bne.n	8011638 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011634:	2303      	movs	r3, #3
 8011636:	e010      	b.n	801165a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	683a      	ldr	r2, [r7, #0]
 801163c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011648:	f107 020e 	add.w	r2, r7, #14
 801164c:	4610      	mov	r0, r2
 801164e:	4798      	blx	r3
 8011650:	4602      	mov	r2, r0
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011658:	2300      	movs	r3, #0
}
 801165a:	4618      	mov	r0, r3
 801165c:	3710      	adds	r7, #16
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011662:	b580      	push	{r7, lr}
 8011664:	b082      	sub	sp, #8
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f004 fae2 	bl	8015c34 <USBD_LL_Start>
 8011670:	4603      	mov	r3, r0
}
 8011672:	4618      	mov	r0, r3
 8011674:	3708      	adds	r7, #8
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801167a:	b480      	push	{r7}
 801167c:	b083      	sub	sp, #12
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011682:	2300      	movs	r3, #0
}
 8011684:	4618      	mov	r0, r3
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	460b      	mov	r3, r1
 801169a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801169c:	2303      	movs	r3, #3
 801169e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d009      	beq.n	80116be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	78fa      	ldrb	r2, [r7, #3]
 80116b4:	4611      	mov	r1, r2
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	4798      	blx	r3
 80116ba:	4603      	mov	r3, r0
 80116bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80116be:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3710      	adds	r7, #16
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d007      	beq.n	80116ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	78fa      	ldrb	r2, [r7, #3]
 80116e8:	4611      	mov	r1, r2
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	4798      	blx	r3
  }

  return USBD_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3708      	adds	r7, #8
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	4618      	mov	r0, r3
 801170c:	f000 ff2c 	bl	8012568 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2201      	movs	r2, #1
 8011714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801171e:	461a      	mov	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801172c:	f003 031f 	and.w	r3, r3, #31
 8011730:	2b01      	cmp	r3, #1
 8011732:	d00e      	beq.n	8011752 <USBD_LL_SetupStage+0x5a>
 8011734:	2b01      	cmp	r3, #1
 8011736:	d302      	bcc.n	801173e <USBD_LL_SetupStage+0x46>
 8011738:	2b02      	cmp	r3, #2
 801173a:	d014      	beq.n	8011766 <USBD_LL_SetupStage+0x6e>
 801173c:	e01d      	b.n	801177a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011744:	4619      	mov	r1, r3
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 fa18 	bl	8011b7c <USBD_StdDevReq>
 801174c:	4603      	mov	r3, r0
 801174e:	73fb      	strb	r3, [r7, #15]
      break;
 8011750:	e020      	b.n	8011794 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011758:	4619      	mov	r1, r3
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 fa7c 	bl	8011c58 <USBD_StdItfReq>
 8011760:	4603      	mov	r3, r0
 8011762:	73fb      	strb	r3, [r7, #15]
      break;
 8011764:	e016      	b.n	8011794 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801176c:	4619      	mov	r1, r3
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 fab8 	bl	8011ce4 <USBD_StdEPReq>
 8011774:	4603      	mov	r3, r0
 8011776:	73fb      	strb	r3, [r7, #15]
      break;
 8011778:	e00c      	b.n	8011794 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011780:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011784:	b2db      	uxtb	r3, r3
 8011786:	4619      	mov	r1, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f004 fab3 	bl	8015cf4 <USBD_LL_StallEP>
 801178e:	4603      	mov	r3, r0
 8011790:	73fb      	strb	r3, [r7, #15]
      break;
 8011792:	bf00      	nop
  }

  return ret;
 8011794:	7bfb      	ldrb	r3, [r7, #15]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b086      	sub	sp, #24
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	60f8      	str	r0, [r7, #12]
 80117a6:	460b      	mov	r3, r1
 80117a8:	607a      	str	r2, [r7, #4]
 80117aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80117ac:	7afb      	ldrb	r3, [r7, #11]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d137      	bne.n	8011822 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80117b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80117c0:	2b03      	cmp	r3, #3
 80117c2:	d14a      	bne.n	801185a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	689a      	ldr	r2, [r3, #8]
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d913      	bls.n	80117f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	689a      	ldr	r2, [r3, #8]
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	1ad2      	subs	r2, r2, r3
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	68da      	ldr	r2, [r3, #12]
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	4293      	cmp	r3, r2
 80117e8:	bf28      	it	cs
 80117ea:	4613      	movcs	r3, r2
 80117ec:	461a      	mov	r2, r3
 80117ee:	6879      	ldr	r1, [r7, #4]
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f000 ffad 	bl	8012750 <USBD_CtlContinueRx>
 80117f6:	e030      	b.n	801185a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117fe:	691b      	ldr	r3, [r3, #16]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00a      	beq.n	801181a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801180a:	2b03      	cmp	r3, #3
 801180c:	d105      	bne.n	801181a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011814:	691b      	ldr	r3, [r3, #16]
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801181a:	68f8      	ldr	r0, [r7, #12]
 801181c:	f000 ffa9 	bl	8012772 <USBD_CtlSendStatus>
 8011820:	e01b      	b.n	801185a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011828:	699b      	ldr	r3, [r3, #24]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d013      	beq.n	8011856 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011834:	2b03      	cmp	r3, #3
 8011836:	d10e      	bne.n	8011856 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801183e:	699b      	ldr	r3, [r3, #24]
 8011840:	7afa      	ldrb	r2, [r7, #11]
 8011842:	4611      	mov	r1, r2
 8011844:	68f8      	ldr	r0, [r7, #12]
 8011846:	4798      	blx	r3
 8011848:	4603      	mov	r3, r0
 801184a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801184c:	7dfb      	ldrb	r3, [r7, #23]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d003      	beq.n	801185a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011852:	7dfb      	ldrb	r3, [r7, #23]
 8011854:	e002      	b.n	801185c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011856:	2303      	movs	r3, #3
 8011858:	e000      	b.n	801185c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801185a:	2300      	movs	r3, #0
}
 801185c:	4618      	mov	r0, r3
 801185e:	3718      	adds	r7, #24
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	460b      	mov	r3, r1
 801186e:	607a      	str	r2, [r7, #4]
 8011870:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011872:	7afb      	ldrb	r3, [r7, #11]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d16a      	bne.n	801194e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	3314      	adds	r3, #20
 801187c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011884:	2b02      	cmp	r3, #2
 8011886:	d155      	bne.n	8011934 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	689a      	ldr	r2, [r3, #8]
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	429a      	cmp	r2, r3
 8011892:	d914      	bls.n	80118be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	689a      	ldr	r2, [r3, #8]
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	1ad2      	subs	r2, r2, r3
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	461a      	mov	r2, r3
 80118a8:	6879      	ldr	r1, [r7, #4]
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f000 ff22 	bl	80126f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80118b0:	2300      	movs	r3, #0
 80118b2:	2200      	movs	r2, #0
 80118b4:	2100      	movs	r1, #0
 80118b6:	68f8      	ldr	r0, [r7, #12]
 80118b8:	f004 fac6 	bl	8015e48 <USBD_LL_PrepareReceive>
 80118bc:	e03a      	b.n	8011934 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	68da      	ldr	r2, [r3, #12]
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d11c      	bne.n	8011904 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	685a      	ldr	r2, [r3, #4]
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d316      	bcc.n	8011904 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	685a      	ldr	r2, [r3, #4]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d20f      	bcs.n	8011904 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80118e4:	2200      	movs	r2, #0
 80118e6:	2100      	movs	r1, #0
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	f000 ff03 	bl	80126f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2200      	movs	r2, #0
 80118f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80118f6:	2300      	movs	r3, #0
 80118f8:	2200      	movs	r2, #0
 80118fa:	2100      	movs	r1, #0
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f004 faa3 	bl	8015e48 <USBD_LL_PrepareReceive>
 8011902:	e017      	b.n	8011934 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801190a:	68db      	ldr	r3, [r3, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d00a      	beq.n	8011926 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011916:	2b03      	cmp	r3, #3
 8011918:	d105      	bne.n	8011926 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	68f8      	ldr	r0, [r7, #12]
 8011924:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011926:	2180      	movs	r1, #128	; 0x80
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f004 f9e3 	bl	8015cf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801192e:	68f8      	ldr	r0, [r7, #12]
 8011930:	f000 ff32 	bl	8012798 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801193a:	2b01      	cmp	r3, #1
 801193c:	d123      	bne.n	8011986 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f7ff fe9b 	bl	801167a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2200      	movs	r2, #0
 8011948:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801194c:	e01b      	b.n	8011986 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011954:	695b      	ldr	r3, [r3, #20]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d013      	beq.n	8011982 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011960:	2b03      	cmp	r3, #3
 8011962:	d10e      	bne.n	8011982 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801196a:	695b      	ldr	r3, [r3, #20]
 801196c:	7afa      	ldrb	r2, [r7, #11]
 801196e:	4611      	mov	r1, r2
 8011970:	68f8      	ldr	r0, [r7, #12]
 8011972:	4798      	blx	r3
 8011974:	4603      	mov	r3, r0
 8011976:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011978:	7dfb      	ldrb	r3, [r7, #23]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d003      	beq.n	8011986 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801197e:	7dfb      	ldrb	r3, [r7, #23]
 8011980:	e002      	b.n	8011988 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011982:	2303      	movs	r3, #3
 8011984:	e000      	b.n	8011988 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011986:	2300      	movs	r3, #0
}
 8011988:	4618      	mov	r0, r3
 801198a:	3718      	adds	r7, #24
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2201      	movs	r2, #1
 801199c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2200      	movs	r2, #0
 80119b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d009      	beq.n	80119d4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	6852      	ldr	r2, [r2, #4]
 80119cc:	b2d2      	uxtb	r2, r2
 80119ce:	4611      	mov	r1, r2
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80119d4:	2340      	movs	r3, #64	; 0x40
 80119d6:	2200      	movs	r2, #0
 80119d8:	2100      	movs	r1, #0
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f004 f945 	bl	8015c6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2201      	movs	r2, #1
 80119e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2240      	movs	r2, #64	; 0x40
 80119ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80119f0:	2340      	movs	r3, #64	; 0x40
 80119f2:	2200      	movs	r2, #0
 80119f4:	2180      	movs	r1, #128	; 0x80
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f004 f937 	bl	8015c6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2201      	movs	r2, #1
 8011a00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2240      	movs	r2, #64	; 0x40
 8011a06:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011a08:	2300      	movs	r3, #0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011a12:	b480      	push	{r7}
 8011a14:	b083      	sub	sp, #12
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	78fa      	ldrb	r2, [r7, #3]
 8011a22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	370c      	adds	r7, #12
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr

08011a32 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011a32:	b480      	push	{r7}
 8011a34:	b083      	sub	sp, #12
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2204      	movs	r2, #4
 8011a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011a4e:	2300      	movs	r3, #0
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a6a:	2b04      	cmp	r3, #4
 8011a6c:	d105      	bne.n	8011a7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011a7a:	2300      	movs	r3, #0
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	370c      	adds	r7, #12
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr

08011a88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a96:	2b03      	cmp	r3, #3
 8011a98:	d10b      	bne.n	8011ab2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aa0:	69db      	ldr	r3, [r3, #28]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d005      	beq.n	8011ab2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aac:	69db      	ldr	r3, [r3, #28]
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011ab2:	2300      	movs	r3, #0
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3708      	adds	r7, #8
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr

08011ad6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011ad6:	b480      	push	{r7}
 8011ad8:	b083      	sub	sp, #12
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
 8011ade:	460b      	mov	r3, r1
 8011ae0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011ae2:	2300      	movs	r3, #0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011af8:	2300      	movs	r3, #0
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b082      	sub	sp, #8
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d009      	beq.n	8011b34 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	6852      	ldr	r2, [r2, #4]
 8011b2c:	b2d2      	uxtb	r2, r2
 8011b2e:	4611      	mov	r1, r2
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	4798      	blx	r3
  }

  return USBD_OK;
 8011b34:	2300      	movs	r3, #0
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3708      	adds	r7, #8
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}

08011b3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011b3e:	b480      	push	{r7}
 8011b40:	b087      	sub	sp, #28
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	3301      	adds	r3, #1
 8011b54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011b5c:	8a3b      	ldrh	r3, [r7, #16]
 8011b5e:	021b      	lsls	r3, r3, #8
 8011b60:	b21a      	sxth	r2, r3
 8011b62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	b21b      	sxth	r3, r3
 8011b6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	371c      	adds	r7, #28
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr
	...

08011b7c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b86:	2300      	movs	r3, #0
 8011b88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b92:	2b20      	cmp	r3, #32
 8011b94:	d004      	beq.n	8011ba0 <USBD_StdDevReq+0x24>
 8011b96:	2b40      	cmp	r3, #64	; 0x40
 8011b98:	d002      	beq.n	8011ba0 <USBD_StdDevReq+0x24>
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00a      	beq.n	8011bb4 <USBD_StdDevReq+0x38>
 8011b9e:	e050      	b.n	8011c42 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ba6:	689b      	ldr	r3, [r3, #8]
 8011ba8:	6839      	ldr	r1, [r7, #0]
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	4798      	blx	r3
 8011bae:	4603      	mov	r3, r0
 8011bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8011bb2:	e04b      	b.n	8011c4c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	785b      	ldrb	r3, [r3, #1]
 8011bb8:	2b09      	cmp	r3, #9
 8011bba:	d83c      	bhi.n	8011c36 <USBD_StdDevReq+0xba>
 8011bbc:	a201      	add	r2, pc, #4	; (adr r2, 8011bc4 <USBD_StdDevReq+0x48>)
 8011bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc2:	bf00      	nop
 8011bc4:	08011c19 	.word	0x08011c19
 8011bc8:	08011c2d 	.word	0x08011c2d
 8011bcc:	08011c37 	.word	0x08011c37
 8011bd0:	08011c23 	.word	0x08011c23
 8011bd4:	08011c37 	.word	0x08011c37
 8011bd8:	08011bf7 	.word	0x08011bf7
 8011bdc:	08011bed 	.word	0x08011bed
 8011be0:	08011c37 	.word	0x08011c37
 8011be4:	08011c0f 	.word	0x08011c0f
 8011be8:	08011c01 	.word	0x08011c01
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011bec:	6839      	ldr	r1, [r7, #0]
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 f9ce 	bl	8011f90 <USBD_GetDescriptor>
      break;
 8011bf4:	e024      	b.n	8011c40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011bf6:	6839      	ldr	r1, [r7, #0]
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f000 fb33 	bl	8012264 <USBD_SetAddress>
      break;
 8011bfe:	e01f      	b.n	8011c40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011c00:	6839      	ldr	r1, [r7, #0]
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 fb70 	bl	80122e8 <USBD_SetConfig>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8011c0c:	e018      	b.n	8011c40 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011c0e:	6839      	ldr	r1, [r7, #0]
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 fc0d 	bl	8012430 <USBD_GetConfig>
      break;
 8011c16:	e013      	b.n	8011c40 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f000 fc3c 	bl	8012498 <USBD_GetStatus>
      break;
 8011c20:	e00e      	b.n	8011c40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011c22:	6839      	ldr	r1, [r7, #0]
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f000 fc6a 	bl	80124fe <USBD_SetFeature>
      break;
 8011c2a:	e009      	b.n	8011c40 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011c2c:	6839      	ldr	r1, [r7, #0]
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f000 fc79 	bl	8012526 <USBD_ClrFeature>
      break;
 8011c34:	e004      	b.n	8011c40 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011c36:	6839      	ldr	r1, [r7, #0]
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 fccf 	bl	80125dc <USBD_CtlError>
      break;
 8011c3e:	bf00      	nop
    }
    break;
 8011c40:	e004      	b.n	8011c4c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011c42:	6839      	ldr	r1, [r7, #0]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 fcc9 	bl	80125dc <USBD_CtlError>
    break;
 8011c4a:	bf00      	nop
  }

  return ret;
 8011c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop

08011c58 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c62:	2300      	movs	r3, #0
 8011c64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c6e:	2b20      	cmp	r3, #32
 8011c70:	d003      	beq.n	8011c7a <USBD_StdItfReq+0x22>
 8011c72:	2b40      	cmp	r3, #64	; 0x40
 8011c74:	d001      	beq.n	8011c7a <USBD_StdItfReq+0x22>
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d12a      	bne.n	8011cd0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c80:	3b01      	subs	r3, #1
 8011c82:	2b02      	cmp	r3, #2
 8011c84:	d81d      	bhi.n	8011cc2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	889b      	ldrh	r3, [r3, #4]
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d813      	bhi.n	8011cb8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	4798      	blx	r3
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	88db      	ldrh	r3, [r3, #6]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d110      	bne.n	8011ccc <USBD_StdItfReq+0x74>
 8011caa:	7bfb      	ldrb	r3, [r7, #15]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d10d      	bne.n	8011ccc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f000 fd5e 	bl	8012772 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011cb6:	e009      	b.n	8011ccc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011cb8:	6839      	ldr	r1, [r7, #0]
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fc8e 	bl	80125dc <USBD_CtlError>
      break;
 8011cc0:	e004      	b.n	8011ccc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011cc2:	6839      	ldr	r1, [r7, #0]
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f000 fc89 	bl	80125dc <USBD_CtlError>
      break;
 8011cca:	e000      	b.n	8011cce <USBD_StdItfReq+0x76>
      break;
 8011ccc:	bf00      	nop
    }
    break;
 8011cce:	e004      	b.n	8011cda <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011cd0:	6839      	ldr	r1, [r7, #0]
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 fc82 	bl	80125dc <USBD_CtlError>
    break;
 8011cd8:	bf00      	nop
  }

  return ret;
 8011cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3710      	adds	r7, #16
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	889b      	ldrh	r3, [r3, #4]
 8011cf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d00:	2b20      	cmp	r3, #32
 8011d02:	d004      	beq.n	8011d0e <USBD_StdEPReq+0x2a>
 8011d04:	2b40      	cmp	r3, #64	; 0x40
 8011d06:	d002      	beq.n	8011d0e <USBD_StdEPReq+0x2a>
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00a      	beq.n	8011d22 <USBD_StdEPReq+0x3e>
 8011d0c:	e135      	b.n	8011f7a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d14:	689b      	ldr	r3, [r3, #8]
 8011d16:	6839      	ldr	r1, [r7, #0]
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	4798      	blx	r3
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d20:	e130      	b.n	8011f84 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	785b      	ldrb	r3, [r3, #1]
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d03e      	beq.n	8011da8 <USBD_StdEPReq+0xc4>
 8011d2a:	2b03      	cmp	r3, #3
 8011d2c:	d002      	beq.n	8011d34 <USBD_StdEPReq+0x50>
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d077      	beq.n	8011e22 <USBD_StdEPReq+0x13e>
 8011d32:	e11c      	b.n	8011f6e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d3a:	2b02      	cmp	r3, #2
 8011d3c:	d002      	beq.n	8011d44 <USBD_StdEPReq+0x60>
 8011d3e:	2b03      	cmp	r3, #3
 8011d40:	d015      	beq.n	8011d6e <USBD_StdEPReq+0x8a>
 8011d42:	e02b      	b.n	8011d9c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d44:	7bbb      	ldrb	r3, [r7, #14]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d00c      	beq.n	8011d64 <USBD_StdEPReq+0x80>
 8011d4a:	7bbb      	ldrb	r3, [r7, #14]
 8011d4c:	2b80      	cmp	r3, #128	; 0x80
 8011d4e:	d009      	beq.n	8011d64 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d50:	7bbb      	ldrb	r3, [r7, #14]
 8011d52:	4619      	mov	r1, r3
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f003 ffcd 	bl	8015cf4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d5a:	2180      	movs	r1, #128	; 0x80
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f003 ffc9 	bl	8015cf4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011d62:	e020      	b.n	8011da6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011d64:	6839      	ldr	r1, [r7, #0]
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fc38 	bl	80125dc <USBD_CtlError>
        break;
 8011d6c:	e01b      	b.n	8011da6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	885b      	ldrh	r3, [r3, #2]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10e      	bne.n	8011d94 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011d76:	7bbb      	ldrb	r3, [r7, #14]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00b      	beq.n	8011d94 <USBD_StdEPReq+0xb0>
 8011d7c:	7bbb      	ldrb	r3, [r7, #14]
 8011d7e:	2b80      	cmp	r3, #128	; 0x80
 8011d80:	d008      	beq.n	8011d94 <USBD_StdEPReq+0xb0>
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	88db      	ldrh	r3, [r3, #6]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d104      	bne.n	8011d94 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d8a:	7bbb      	ldrb	r3, [r7, #14]
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f003 ffb0 	bl	8015cf4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 fcec 	bl	8012772 <USBD_CtlSendStatus>

        break;
 8011d9a:	e004      	b.n	8011da6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011d9c:	6839      	ldr	r1, [r7, #0]
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 fc1c 	bl	80125dc <USBD_CtlError>
        break;
 8011da4:	bf00      	nop
      }
      break;
 8011da6:	e0e7      	b.n	8011f78 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d002      	beq.n	8011db8 <USBD_StdEPReq+0xd4>
 8011db2:	2b03      	cmp	r3, #3
 8011db4:	d015      	beq.n	8011de2 <USBD_StdEPReq+0xfe>
 8011db6:	e02d      	b.n	8011e14 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011db8:	7bbb      	ldrb	r3, [r7, #14]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d00c      	beq.n	8011dd8 <USBD_StdEPReq+0xf4>
 8011dbe:	7bbb      	ldrb	r3, [r7, #14]
 8011dc0:	2b80      	cmp	r3, #128	; 0x80
 8011dc2:	d009      	beq.n	8011dd8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011dc4:	7bbb      	ldrb	r3, [r7, #14]
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f003 ff93 	bl	8015cf4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011dce:	2180      	movs	r1, #128	; 0x80
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f003 ff8f 	bl	8015cf4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011dd6:	e023      	b.n	8011e20 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011dd8:	6839      	ldr	r1, [r7, #0]
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 fbfe 	bl	80125dc <USBD_CtlError>
        break;
 8011de0:	e01e      	b.n	8011e20 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	885b      	ldrh	r3, [r3, #2]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d119      	bne.n	8011e1e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011dea:	7bbb      	ldrb	r3, [r7, #14]
 8011dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d004      	beq.n	8011dfe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011df4:	7bbb      	ldrb	r3, [r7, #14]
 8011df6:	4619      	mov	r1, r3
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f003 ff9a 	bl	8015d32 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 fcb7 	bl	8012772 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e0a:	689b      	ldr	r3, [r3, #8]
 8011e0c:	6839      	ldr	r1, [r7, #0]
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	4798      	blx	r3
        }
        break;
 8011e12:	e004      	b.n	8011e1e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 fbe0 	bl	80125dc <USBD_CtlError>
        break;
 8011e1c:	e000      	b.n	8011e20 <USBD_StdEPReq+0x13c>
        break;
 8011e1e:	bf00      	nop
      }
      break;
 8011e20:	e0aa      	b.n	8011f78 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e28:	2b02      	cmp	r3, #2
 8011e2a:	d002      	beq.n	8011e32 <USBD_StdEPReq+0x14e>
 8011e2c:	2b03      	cmp	r3, #3
 8011e2e:	d032      	beq.n	8011e96 <USBD_StdEPReq+0x1b2>
 8011e30:	e097      	b.n	8011f62 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e32:	7bbb      	ldrb	r3, [r7, #14]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d007      	beq.n	8011e48 <USBD_StdEPReq+0x164>
 8011e38:	7bbb      	ldrb	r3, [r7, #14]
 8011e3a:	2b80      	cmp	r3, #128	; 0x80
 8011e3c:	d004      	beq.n	8011e48 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011e3e:	6839      	ldr	r1, [r7, #0]
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f000 fbcb 	bl	80125dc <USBD_CtlError>
          break;
 8011e46:	e091      	b.n	8011f6c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	da0b      	bge.n	8011e68 <USBD_StdEPReq+0x184>
 8011e50:	7bbb      	ldrb	r3, [r7, #14]
 8011e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e56:	4613      	mov	r3, r2
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	4413      	add	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	3310      	adds	r3, #16
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	4413      	add	r3, r2
 8011e64:	3304      	adds	r3, #4
 8011e66:	e00b      	b.n	8011e80 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011e68:	7bbb      	ldrb	r3, [r7, #14]
 8011e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e6e:	4613      	mov	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	4413      	add	r3, r2
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	3304      	adds	r3, #4
 8011e80:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	2200      	movs	r2, #0
 8011e86:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	2202      	movs	r2, #2
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fc15 	bl	80126be <USBD_CtlSendData>
        break;
 8011e94:	e06a      	b.n	8011f6c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	da11      	bge.n	8011ec2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011e9e:	7bbb      	ldrb	r3, [r7, #14]
 8011ea0:	f003 020f 	and.w	r2, r3, #15
 8011ea4:	6879      	ldr	r1, [r7, #4]
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	009b      	lsls	r3, r3, #2
 8011eaa:	4413      	add	r3, r2
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	440b      	add	r3, r1
 8011eb0:	3324      	adds	r3, #36	; 0x24
 8011eb2:	881b      	ldrh	r3, [r3, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d117      	bne.n	8011ee8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 fb8e 	bl	80125dc <USBD_CtlError>
            break;
 8011ec0:	e054      	b.n	8011f6c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011ec2:	7bbb      	ldrb	r3, [r7, #14]
 8011ec4:	f003 020f 	and.w	r2, r3, #15
 8011ec8:	6879      	ldr	r1, [r7, #4]
 8011eca:	4613      	mov	r3, r2
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	4413      	add	r3, r2
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	440b      	add	r3, r1
 8011ed4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011ed8:	881b      	ldrh	r3, [r3, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d104      	bne.n	8011ee8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011ede:	6839      	ldr	r1, [r7, #0]
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 fb7b 	bl	80125dc <USBD_CtlError>
            break;
 8011ee6:	e041      	b.n	8011f6c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	da0b      	bge.n	8011f08 <USBD_StdEPReq+0x224>
 8011ef0:	7bbb      	ldrb	r3, [r7, #14]
 8011ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	4413      	add	r3, r2
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	3310      	adds	r3, #16
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	4413      	add	r3, r2
 8011f04:	3304      	adds	r3, #4
 8011f06:	e00b      	b.n	8011f20 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011f08:	7bbb      	ldrb	r3, [r7, #14]
 8011f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f0e:	4613      	mov	r3, r2
 8011f10:	009b      	lsls	r3, r3, #2
 8011f12:	4413      	add	r3, r2
 8011f14:	009b      	lsls	r3, r3, #2
 8011f16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	3304      	adds	r3, #4
 8011f20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011f22:	7bbb      	ldrb	r3, [r7, #14]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d002      	beq.n	8011f2e <USBD_StdEPReq+0x24a>
 8011f28:	7bbb      	ldrb	r3, [r7, #14]
 8011f2a:	2b80      	cmp	r3, #128	; 0x80
 8011f2c:	d103      	bne.n	8011f36 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	2200      	movs	r2, #0
 8011f32:	601a      	str	r2, [r3, #0]
 8011f34:	e00e      	b.n	8011f54 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011f36:	7bbb      	ldrb	r3, [r7, #14]
 8011f38:	4619      	mov	r1, r3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f003 ff18 	bl	8015d70 <USBD_LL_IsStallEP>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d003      	beq.n	8011f4e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	2201      	movs	r2, #1
 8011f4a:	601a      	str	r2, [r3, #0]
 8011f4c:	e002      	b.n	8011f54 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2200      	movs	r2, #0
 8011f52:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2202      	movs	r2, #2
 8011f58:	4619      	mov	r1, r3
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fbaf 	bl	80126be <USBD_CtlSendData>
          break;
 8011f60:	e004      	b.n	8011f6c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011f62:	6839      	ldr	r1, [r7, #0]
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f000 fb39 	bl	80125dc <USBD_CtlError>
        break;
 8011f6a:	bf00      	nop
      }
      break;
 8011f6c:	e004      	b.n	8011f78 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011f6e:	6839      	ldr	r1, [r7, #0]
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f000 fb33 	bl	80125dc <USBD_CtlError>
      break;
 8011f76:	bf00      	nop
    }
    break;
 8011f78:	e004      	b.n	8011f84 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011f7a:	6839      	ldr	r1, [r7, #0]
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 fb2d 	bl	80125dc <USBD_CtlError>
    break;
 8011f82:	bf00      	nop
  }

  return ret;
 8011f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
	...

08011f90 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	885b      	ldrh	r3, [r3, #2]
 8011faa:	0a1b      	lsrs	r3, r3, #8
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	3b01      	subs	r3, #1
 8011fb0:	2b06      	cmp	r3, #6
 8011fb2:	f200 8128 	bhi.w	8012206 <USBD_GetDescriptor+0x276>
 8011fb6:	a201      	add	r2, pc, #4	; (adr r2, 8011fbc <USBD_GetDescriptor+0x2c>)
 8011fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbc:	08011fd9 	.word	0x08011fd9
 8011fc0:	08011ff1 	.word	0x08011ff1
 8011fc4:	08012031 	.word	0x08012031
 8011fc8:	08012207 	.word	0x08012207
 8011fcc:	08012207 	.word	0x08012207
 8011fd0:	080121a7 	.word	0x080121a7
 8011fd4:	080121d3 	.word	0x080121d3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	7c12      	ldrb	r2, [r2, #16]
 8011fe4:	f107 0108 	add.w	r1, r7, #8
 8011fe8:	4610      	mov	r0, r2
 8011fea:	4798      	blx	r3
 8011fec:	60f8      	str	r0, [r7, #12]
    break;
 8011fee:	e112      	b.n	8012216 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	7c1b      	ldrb	r3, [r3, #16]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d10d      	bne.n	8012014 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012000:	f107 0208 	add.w	r2, r7, #8
 8012004:	4610      	mov	r0, r2
 8012006:	4798      	blx	r3
 8012008:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	3301      	adds	r3, #1
 801200e:	2202      	movs	r2, #2
 8012010:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8012012:	e100      	b.n	8012216 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801201c:	f107 0208 	add.w	r2, r7, #8
 8012020:	4610      	mov	r0, r2
 8012022:	4798      	blx	r3
 8012024:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	3301      	adds	r3, #1
 801202a:	2202      	movs	r2, #2
 801202c:	701a      	strb	r2, [r3, #0]
    break;
 801202e:	e0f2      	b.n	8012216 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	885b      	ldrh	r3, [r3, #2]
 8012034:	b2db      	uxtb	r3, r3
 8012036:	2b05      	cmp	r3, #5
 8012038:	f200 80ac 	bhi.w	8012194 <USBD_GetDescriptor+0x204>
 801203c:	a201      	add	r2, pc, #4	; (adr r2, 8012044 <USBD_GetDescriptor+0xb4>)
 801203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012042:	bf00      	nop
 8012044:	0801205d 	.word	0x0801205d
 8012048:	08012091 	.word	0x08012091
 801204c:	080120c5 	.word	0x080120c5
 8012050:	080120f9 	.word	0x080120f9
 8012054:	0801212d 	.word	0x0801212d
 8012058:	08012161 	.word	0x08012161
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00b      	beq.n	8012080 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	7c12      	ldrb	r2, [r2, #16]
 8012074:	f107 0108 	add.w	r1, r7, #8
 8012078:	4610      	mov	r0, r2
 801207a:	4798      	blx	r3
 801207c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801207e:	e091      	b.n	80121a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012080:	6839      	ldr	r1, [r7, #0]
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 faaa 	bl	80125dc <USBD_CtlError>
        err++;
 8012088:	7afb      	ldrb	r3, [r7, #11]
 801208a:	3301      	adds	r3, #1
 801208c:	72fb      	strb	r3, [r7, #11]
      break;
 801208e:	e089      	b.n	80121a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012096:	689b      	ldr	r3, [r3, #8]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00b      	beq.n	80120b4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120a2:	689b      	ldr	r3, [r3, #8]
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	7c12      	ldrb	r2, [r2, #16]
 80120a8:	f107 0108 	add.w	r1, r7, #8
 80120ac:	4610      	mov	r0, r2
 80120ae:	4798      	blx	r3
 80120b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120b2:	e077      	b.n	80121a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80120b4:	6839      	ldr	r1, [r7, #0]
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f000 fa90 	bl	80125dc <USBD_CtlError>
        err++;
 80120bc:	7afb      	ldrb	r3, [r7, #11]
 80120be:	3301      	adds	r3, #1
 80120c0:	72fb      	strb	r3, [r7, #11]
      break;
 80120c2:	e06f      	b.n	80121a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00b      	beq.n	80120e8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	7c12      	ldrb	r2, [r2, #16]
 80120dc:	f107 0108 	add.w	r1, r7, #8
 80120e0:	4610      	mov	r0, r2
 80120e2:	4798      	blx	r3
 80120e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120e6:	e05d      	b.n	80121a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80120e8:	6839      	ldr	r1, [r7, #0]
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f000 fa76 	bl	80125dc <USBD_CtlError>
        err++;
 80120f0:	7afb      	ldrb	r3, [r7, #11]
 80120f2:	3301      	adds	r3, #1
 80120f4:	72fb      	strb	r3, [r7, #11]
      break;
 80120f6:	e055      	b.n	80121a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120fe:	691b      	ldr	r3, [r3, #16]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00b      	beq.n	801211c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801210a:	691b      	ldr	r3, [r3, #16]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	7c12      	ldrb	r2, [r2, #16]
 8012110:	f107 0108 	add.w	r1, r7, #8
 8012114:	4610      	mov	r0, r2
 8012116:	4798      	blx	r3
 8012118:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801211a:	e043      	b.n	80121a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801211c:	6839      	ldr	r1, [r7, #0]
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 fa5c 	bl	80125dc <USBD_CtlError>
        err++;
 8012124:	7afb      	ldrb	r3, [r7, #11]
 8012126:	3301      	adds	r3, #1
 8012128:	72fb      	strb	r3, [r7, #11]
      break;
 801212a:	e03b      	b.n	80121a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012132:	695b      	ldr	r3, [r3, #20]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d00b      	beq.n	8012150 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801213e:	695b      	ldr	r3, [r3, #20]
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	7c12      	ldrb	r2, [r2, #16]
 8012144:	f107 0108 	add.w	r1, r7, #8
 8012148:	4610      	mov	r0, r2
 801214a:	4798      	blx	r3
 801214c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801214e:	e029      	b.n	80121a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012150:	6839      	ldr	r1, [r7, #0]
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 fa42 	bl	80125dc <USBD_CtlError>
        err++;
 8012158:	7afb      	ldrb	r3, [r7, #11]
 801215a:	3301      	adds	r3, #1
 801215c:	72fb      	strb	r3, [r7, #11]
      break;
 801215e:	e021      	b.n	80121a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012166:	699b      	ldr	r3, [r3, #24]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00b      	beq.n	8012184 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012172:	699b      	ldr	r3, [r3, #24]
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	7c12      	ldrb	r2, [r2, #16]
 8012178:	f107 0108 	add.w	r1, r7, #8
 801217c:	4610      	mov	r0, r2
 801217e:	4798      	blx	r3
 8012180:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012182:	e00f      	b.n	80121a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012184:	6839      	ldr	r1, [r7, #0]
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 fa28 	bl	80125dc <USBD_CtlError>
        err++;
 801218c:	7afb      	ldrb	r3, [r7, #11]
 801218e:	3301      	adds	r3, #1
 8012190:	72fb      	strb	r3, [r7, #11]
      break;
 8012192:	e007      	b.n	80121a4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012194:	6839      	ldr	r1, [r7, #0]
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 fa20 	bl	80125dc <USBD_CtlError>
      err++;
 801219c:	7afb      	ldrb	r3, [r7, #11]
 801219e:	3301      	adds	r3, #1
 80121a0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80121a2:	bf00      	nop
    }
    break;
 80121a4:	e037      	b.n	8012216 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	7c1b      	ldrb	r3, [r3, #16]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d109      	bne.n	80121c2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121b6:	f107 0208 	add.w	r2, r7, #8
 80121ba:	4610      	mov	r0, r2
 80121bc:	4798      	blx	r3
 80121be:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80121c0:	e029      	b.n	8012216 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80121c2:	6839      	ldr	r1, [r7, #0]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f000 fa09 	bl	80125dc <USBD_CtlError>
      err++;
 80121ca:	7afb      	ldrb	r3, [r7, #11]
 80121cc:	3301      	adds	r3, #1
 80121ce:	72fb      	strb	r3, [r7, #11]
    break;
 80121d0:	e021      	b.n	8012216 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	7c1b      	ldrb	r3, [r3, #16]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d10d      	bne.n	80121f6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121e2:	f107 0208 	add.w	r2, r7, #8
 80121e6:	4610      	mov	r0, r2
 80121e8:	4798      	blx	r3
 80121ea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	3301      	adds	r3, #1
 80121f0:	2207      	movs	r2, #7
 80121f2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80121f4:	e00f      	b.n	8012216 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80121f6:	6839      	ldr	r1, [r7, #0]
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 f9ef 	bl	80125dc <USBD_CtlError>
      err++;
 80121fe:	7afb      	ldrb	r3, [r7, #11]
 8012200:	3301      	adds	r3, #1
 8012202:	72fb      	strb	r3, [r7, #11]
    break;
 8012204:	e007      	b.n	8012216 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012206:	6839      	ldr	r1, [r7, #0]
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 f9e7 	bl	80125dc <USBD_CtlError>
    err++;
 801220e:	7afb      	ldrb	r3, [r7, #11]
 8012210:	3301      	adds	r3, #1
 8012212:	72fb      	strb	r3, [r7, #11]
    break;
 8012214:	bf00      	nop
  }

  if (err != 0U)
 8012216:	7afb      	ldrb	r3, [r7, #11]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d11e      	bne.n	801225a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	88db      	ldrh	r3, [r3, #6]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d016      	beq.n	8012252 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8012224:	893b      	ldrh	r3, [r7, #8]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00e      	beq.n	8012248 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	88da      	ldrh	r2, [r3, #6]
 801222e:	893b      	ldrh	r3, [r7, #8]
 8012230:	4293      	cmp	r3, r2
 8012232:	bf28      	it	cs
 8012234:	4613      	movcs	r3, r2
 8012236:	b29b      	uxth	r3, r3
 8012238:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801223a:	893b      	ldrh	r3, [r7, #8]
 801223c:	461a      	mov	r2, r3
 801223e:	68f9      	ldr	r1, [r7, #12]
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 fa3c 	bl	80126be <USBD_CtlSendData>
 8012246:	e009      	b.n	801225c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012248:	6839      	ldr	r1, [r7, #0]
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f000 f9c6 	bl	80125dc <USBD_CtlError>
 8012250:	e004      	b.n	801225c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 fa8d 	bl	8012772 <USBD_CtlSendStatus>
 8012258:	e000      	b.n	801225c <USBD_GetDescriptor+0x2cc>
    return;
 801225a:	bf00      	nop
    }
  }
}
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop

08012264 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	889b      	ldrh	r3, [r3, #4]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d130      	bne.n	80122d8 <USBD_SetAddress+0x74>
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	88db      	ldrh	r3, [r3, #6]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d12c      	bne.n	80122d8 <USBD_SetAddress+0x74>
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	885b      	ldrh	r3, [r3, #2]
 8012282:	2b7f      	cmp	r3, #127	; 0x7f
 8012284:	d828      	bhi.n	80122d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	885b      	ldrh	r3, [r3, #2]
 801228a:	b2db      	uxtb	r3, r3
 801228c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012290:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012298:	2b03      	cmp	r3, #3
 801229a:	d104      	bne.n	80122a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801229c:	6839      	ldr	r1, [r7, #0]
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 f99c 	bl	80125dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122a4:	e01c      	b.n	80122e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	7bfa      	ldrb	r2, [r7, #15]
 80122aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
 80122b0:	4619      	mov	r1, r3
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f003 fd88 	bl	8015dc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fa5a 	bl	8012772 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80122be:	7bfb      	ldrb	r3, [r7, #15]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d004      	beq.n	80122ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2202      	movs	r2, #2
 80122c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122cc:	e008      	b.n	80122e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2201      	movs	r2, #1
 80122d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122d6:	e003      	b.n	80122e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80122d8:	6839      	ldr	r1, [r7, #0]
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f000 f97e 	bl	80125dc <USBD_CtlError>
  }
}
 80122e0:	bf00      	nop
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	885b      	ldrh	r3, [r3, #2]
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	4b4b      	ldr	r3, [pc, #300]	; (801242c <USBD_SetConfig+0x144>)
 80122fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012300:	4b4a      	ldr	r3, [pc, #296]	; (801242c <USBD_SetConfig+0x144>)
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d905      	bls.n	8012314 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012308:	6839      	ldr	r1, [r7, #0]
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f966 	bl	80125dc <USBD_CtlError>
    return USBD_FAIL;
 8012310:	2303      	movs	r3, #3
 8012312:	e087      	b.n	8012424 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801231a:	2b02      	cmp	r3, #2
 801231c:	d002      	beq.n	8012324 <USBD_SetConfig+0x3c>
 801231e:	2b03      	cmp	r3, #3
 8012320:	d025      	beq.n	801236e <USBD_SetConfig+0x86>
 8012322:	e071      	b.n	8012408 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8012324:	4b41      	ldr	r3, [pc, #260]	; (801242c <USBD_SetConfig+0x144>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d01c      	beq.n	8012366 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801232c:	4b3f      	ldr	r3, [pc, #252]	; (801242c <USBD_SetConfig+0x144>)
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	461a      	mov	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012336:	4b3d      	ldr	r3, [pc, #244]	; (801242c <USBD_SetConfig+0x144>)
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	4619      	mov	r1, r3
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f7ff f9a7 	bl	8011690 <USBD_SetClassConfig>
 8012342:	4603      	mov	r3, r0
 8012344:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8012346:	7bfb      	ldrb	r3, [r7, #15]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d004      	beq.n	8012356 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f000 f944 	bl	80125dc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012354:	e065      	b.n	8012422 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 fa0b 	bl	8012772 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2203      	movs	r2, #3
 8012360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012364:	e05d      	b.n	8012422 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 fa03 	bl	8012772 <USBD_CtlSendStatus>
    break;
 801236c:	e059      	b.n	8012422 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801236e:	4b2f      	ldr	r3, [pc, #188]	; (801242c <USBD_SetConfig+0x144>)
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d112      	bne.n	801239c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2202      	movs	r2, #2
 801237a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801237e:	4b2b      	ldr	r3, [pc, #172]	; (801242c <USBD_SetConfig+0x144>)
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	461a      	mov	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012388:	4b28      	ldr	r3, [pc, #160]	; (801242c <USBD_SetConfig+0x144>)
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	4619      	mov	r1, r3
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f7ff f99a 	bl	80116c8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 f9ec 	bl	8012772 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801239a:	e042      	b.n	8012422 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801239c:	4b23      	ldr	r3, [pc, #140]	; (801242c <USBD_SetConfig+0x144>)
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	461a      	mov	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d02a      	beq.n	8012400 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	4619      	mov	r1, r3
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff f988 	bl	80116c8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80123b8:	4b1c      	ldr	r3, [pc, #112]	; (801242c <USBD_SetConfig+0x144>)
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	461a      	mov	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80123c2:	4b1a      	ldr	r3, [pc, #104]	; (801242c <USBD_SetConfig+0x144>)
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	4619      	mov	r1, r3
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7ff f961 	bl	8011690 <USBD_SetClassConfig>
 80123ce:	4603      	mov	r3, r0
 80123d0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80123d2:	7bfb      	ldrb	r3, [r7, #15]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d00f      	beq.n	80123f8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80123d8:	6839      	ldr	r1, [r7, #0]
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f000 f8fe 	bl	80125dc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	4619      	mov	r1, r3
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f7ff f96d 	bl	80116c8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2202      	movs	r2, #2
 80123f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80123f6:	e014      	b.n	8012422 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 f9ba 	bl	8012772 <USBD_CtlSendStatus>
    break;
 80123fe:	e010      	b.n	8012422 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 f9b6 	bl	8012772 <USBD_CtlSendStatus>
    break;
 8012406:	e00c      	b.n	8012422 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012408:	6839      	ldr	r1, [r7, #0]
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f000 f8e6 	bl	80125dc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012410:	4b06      	ldr	r3, [pc, #24]	; (801242c <USBD_SetConfig+0x144>)
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7ff f956 	bl	80116c8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801241c:	2303      	movs	r3, #3
 801241e:	73fb      	strb	r3, [r7, #15]
    break;
 8012420:	bf00      	nop
  }

  return ret;
 8012422:	7bfb      	ldrb	r3, [r7, #15]
}
 8012424:	4618      	mov	r0, r3
 8012426:	3710      	adds	r7, #16
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	20001008 	.word	0x20001008

08012430 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	88db      	ldrh	r3, [r3, #6]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d004      	beq.n	801244c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012442:	6839      	ldr	r1, [r7, #0]
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f8c9 	bl	80125dc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801244a:	e021      	b.n	8012490 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012452:	2b01      	cmp	r3, #1
 8012454:	db17      	blt.n	8012486 <USBD_GetConfig+0x56>
 8012456:	2b02      	cmp	r3, #2
 8012458:	dd02      	ble.n	8012460 <USBD_GetConfig+0x30>
 801245a:	2b03      	cmp	r3, #3
 801245c:	d00b      	beq.n	8012476 <USBD_GetConfig+0x46>
 801245e:	e012      	b.n	8012486 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2200      	movs	r2, #0
 8012464:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	3308      	adds	r3, #8
 801246a:	2201      	movs	r2, #1
 801246c:	4619      	mov	r1, r3
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 f925 	bl	80126be <USBD_CtlSendData>
      break;
 8012474:	e00c      	b.n	8012490 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3304      	adds	r3, #4
 801247a:	2201      	movs	r2, #1
 801247c:	4619      	mov	r1, r3
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 f91d 	bl	80126be <USBD_CtlSendData>
      break;
 8012484:	e004      	b.n	8012490 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012486:	6839      	ldr	r1, [r7, #0]
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 f8a7 	bl	80125dc <USBD_CtlError>
      break;
 801248e:	bf00      	nop
}
 8012490:	bf00      	nop
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124a8:	3b01      	subs	r3, #1
 80124aa:	2b02      	cmp	r3, #2
 80124ac:	d81e      	bhi.n	80124ec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	88db      	ldrh	r3, [r3, #6]
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d004      	beq.n	80124c0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80124b6:	6839      	ldr	r1, [r7, #0]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 f88f 	bl	80125dc <USBD_CtlError>
      break;
 80124be:	e01a      	b.n	80124f6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2201      	movs	r2, #1
 80124c4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d005      	beq.n	80124dc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	f043 0202 	orr.w	r2, r3, #2
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	330c      	adds	r3, #12
 80124e0:	2202      	movs	r2, #2
 80124e2:	4619      	mov	r1, r3
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f000 f8ea 	bl	80126be <USBD_CtlSendData>
    break;
 80124ea:	e004      	b.n	80124f6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80124ec:	6839      	ldr	r1, [r7, #0]
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 f874 	bl	80125dc <USBD_CtlError>
    break;
 80124f4:	bf00      	nop
  }
}
 80124f6:	bf00      	nop
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
 8012506:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	885b      	ldrh	r3, [r3, #2]
 801250c:	2b01      	cmp	r3, #1
 801250e:	d106      	bne.n	801251e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2201      	movs	r2, #1
 8012514:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 f92a 	bl	8012772 <USBD_CtlSendStatus>
  }
}
 801251e:	bf00      	nop
 8012520:	3708      	adds	r7, #8
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b082      	sub	sp, #8
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012536:	3b01      	subs	r3, #1
 8012538:	2b02      	cmp	r3, #2
 801253a:	d80b      	bhi.n	8012554 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	885b      	ldrh	r3, [r3, #2]
 8012540:	2b01      	cmp	r3, #1
 8012542:	d10c      	bne.n	801255e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2200      	movs	r2, #0
 8012548:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 f910 	bl	8012772 <USBD_CtlSendStatus>
      }
      break;
 8012552:	e004      	b.n	801255e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 f840 	bl	80125dc <USBD_CtlError>
      break;
 801255c:	e000      	b.n	8012560 <USBD_ClrFeature+0x3a>
      break;
 801255e:	bf00      	nop
  }
}
 8012560:	bf00      	nop
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	781a      	ldrb	r2, [r3, #0]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	3301      	adds	r3, #1
 8012582:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	781a      	ldrb	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	3301      	adds	r3, #1
 8012590:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012592:	68f8      	ldr	r0, [r7, #12]
 8012594:	f7ff fad3 	bl	8011b3e <SWAPBYTE>
 8012598:	4603      	mov	r3, r0
 801259a:	461a      	mov	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	3301      	adds	r3, #1
 80125a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	3301      	adds	r3, #1
 80125aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f7ff fac6 	bl	8011b3e <SWAPBYTE>
 80125b2:	4603      	mov	r3, r0
 80125b4:	461a      	mov	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	3301      	adds	r3, #1
 80125be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3301      	adds	r3, #1
 80125c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80125c6:	68f8      	ldr	r0, [r7, #12]
 80125c8:	f7ff fab9 	bl	8011b3e <SWAPBYTE>
 80125cc:	4603      	mov	r3, r0
 80125ce:	461a      	mov	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	80da      	strh	r2, [r3, #6]
}
 80125d4:	bf00      	nop
 80125d6:	3710      	adds	r7, #16
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80125e6:	2180      	movs	r1, #128	; 0x80
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f003 fb83 	bl	8015cf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80125ee:	2100      	movs	r1, #0
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f003 fb7f 	bl	8015cf4 <USBD_LL_StallEP>
}
 80125f6:	bf00      	nop
 80125f8:	3708      	adds	r7, #8
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}

080125fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80125fe:	b580      	push	{r7, lr}
 8012600:	b086      	sub	sp, #24
 8012602:	af00      	add	r7, sp, #0
 8012604:	60f8      	str	r0, [r7, #12]
 8012606:	60b9      	str	r1, [r7, #8]
 8012608:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801260a:	2300      	movs	r3, #0
 801260c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d036      	beq.n	8012682 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012618:	6938      	ldr	r0, [r7, #16]
 801261a:	f000 f836 	bl	801268a <USBD_GetLen>
 801261e:	4603      	mov	r3, r0
 8012620:	3301      	adds	r3, #1
 8012622:	b29b      	uxth	r3, r3
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	b29a      	uxth	r2, r3
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801262c:	7dfb      	ldrb	r3, [r7, #23]
 801262e:	68ba      	ldr	r2, [r7, #8]
 8012630:	4413      	add	r3, r2
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	7812      	ldrb	r2, [r2, #0]
 8012636:	701a      	strb	r2, [r3, #0]
  idx++;
 8012638:	7dfb      	ldrb	r3, [r7, #23]
 801263a:	3301      	adds	r3, #1
 801263c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801263e:	7dfb      	ldrb	r3, [r7, #23]
 8012640:	68ba      	ldr	r2, [r7, #8]
 8012642:	4413      	add	r3, r2
 8012644:	2203      	movs	r2, #3
 8012646:	701a      	strb	r2, [r3, #0]
  idx++;
 8012648:	7dfb      	ldrb	r3, [r7, #23]
 801264a:	3301      	adds	r3, #1
 801264c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801264e:	e013      	b.n	8012678 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012650:	7dfb      	ldrb	r3, [r7, #23]
 8012652:	68ba      	ldr	r2, [r7, #8]
 8012654:	4413      	add	r3, r2
 8012656:	693a      	ldr	r2, [r7, #16]
 8012658:	7812      	ldrb	r2, [r2, #0]
 801265a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	3301      	adds	r3, #1
 8012660:	613b      	str	r3, [r7, #16]
    idx++;
 8012662:	7dfb      	ldrb	r3, [r7, #23]
 8012664:	3301      	adds	r3, #1
 8012666:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012668:	7dfb      	ldrb	r3, [r7, #23]
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	4413      	add	r3, r2
 801266e:	2200      	movs	r2, #0
 8012670:	701a      	strb	r2, [r3, #0]
    idx++;
 8012672:	7dfb      	ldrb	r3, [r7, #23]
 8012674:	3301      	adds	r3, #1
 8012676:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d1e7      	bne.n	8012650 <USBD_GetString+0x52>
 8012680:	e000      	b.n	8012684 <USBD_GetString+0x86>
    return;
 8012682:	bf00      	nop
  }
}
 8012684:	3718      	adds	r7, #24
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801268a:	b480      	push	{r7}
 801268c:	b085      	sub	sp, #20
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012692:	2300      	movs	r3, #0
 8012694:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801269a:	e005      	b.n	80126a8 <USBD_GetLen+0x1e>
  {
    len++;
 801269c:	7bfb      	ldrb	r3, [r7, #15]
 801269e:	3301      	adds	r3, #1
 80126a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	3301      	adds	r3, #1
 80126a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1f5      	bne.n	801269c <USBD_GetLen+0x12>
  }

  return len;
 80126b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3714      	adds	r7, #20
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr

080126be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80126be:	b580      	push	{r7, lr}
 80126c0:	b084      	sub	sp, #16
 80126c2:	af00      	add	r7, sp, #0
 80126c4:	60f8      	str	r0, [r7, #12]
 80126c6:	60b9      	str	r1, [r7, #8]
 80126c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2202      	movs	r2, #2
 80126ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	2100      	movs	r1, #0
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f003 fb8e 	bl	8015e06 <USBD_LL_Transmit>

  return USBD_OK;
 80126ea:	2300      	movs	r3, #0
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3710      	adds	r7, #16
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}

080126f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b084      	sub	sp, #16
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	2100      	movs	r1, #0
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f003 fb7d 	bl	8015e06 <USBD_LL_Transmit>

  return USBD_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}

08012716 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012716:	b580      	push	{r7, lr}
 8012718:	b084      	sub	sp, #16
 801271a:	af00      	add	r7, sp, #0
 801271c:	60f8      	str	r0, [r7, #12]
 801271e:	60b9      	str	r1, [r7, #8]
 8012720:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2203      	movs	r2, #3
 8012726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	68ba      	ldr	r2, [r7, #8]
 801273e:	2100      	movs	r1, #0
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f003 fb81 	bl	8015e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	68ba      	ldr	r2, [r7, #8]
 8012760:	2100      	movs	r1, #0
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f003 fb70 	bl	8015e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012768:	2300      	movs	r3, #0
}
 801276a:	4618      	mov	r0, r3
 801276c:	3710      	adds	r7, #16
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b082      	sub	sp, #8
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2204      	movs	r2, #4
 801277e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012782:	2300      	movs	r3, #0
 8012784:	2200      	movs	r2, #0
 8012786:	2100      	movs	r1, #0
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f003 fb3c 	bl	8015e06 <USBD_LL_Transmit>

  return USBD_OK;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2205      	movs	r2, #5
 80127a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127a8:	2300      	movs	r3, #0
 80127aa:	2200      	movs	r2, #0
 80127ac:	2100      	movs	r1, #0
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f003 fb4a 	bl	8015e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80127b4:	2300      	movs	r3, #0
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3708      	adds	r7, #8
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}

080127be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80127be:	b480      	push	{r7}
 80127c0:	b085      	sub	sp, #20
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	4603      	mov	r3, r0
 80127c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80127c8:	2300      	movs	r3, #0
 80127ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80127cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127d0:	2b84      	cmp	r3, #132	; 0x84
 80127d2:	d005      	beq.n	80127e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80127d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	4413      	add	r3, r2
 80127dc:	3303      	adds	r3, #3
 80127de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80127e0:	68fb      	ldr	r3, [r7, #12]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3714      	adds	r7, #20
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr

080127ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80127ee:	b480      	push	{r7}
 80127f0:	b083      	sub	sp, #12
 80127f2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127f4:	f3ef 8305 	mrs	r3, IPSR
 80127f8:	607b      	str	r3, [r7, #4]
  return(result);
 80127fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	bf14      	ite	ne
 8012800:	2301      	movne	r3, #1
 8012802:	2300      	moveq	r3, #0
 8012804:	b2db      	uxtb	r3, r3
}
 8012806:	4618      	mov	r0, r3
 8012808:	370c      	adds	r7, #12
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr

08012812 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012812:	b580      	push	{r7, lr}
 8012814:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012816:	f001 fb31 	bl	8013e7c <vTaskStartScheduler>
  
  return osOK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	bd80      	pop	{r7, pc}

08012820 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012822:	b089      	sub	sp, #36	; 0x24
 8012824:	af04      	add	r7, sp, #16
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	695b      	ldr	r3, [r3, #20]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d020      	beq.n	8012874 <osThreadCreate+0x54>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	699b      	ldr	r3, [r3, #24]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d01c      	beq.n	8012874 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	685c      	ldr	r4, [r3, #4]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681d      	ldr	r5, [r3, #0]
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	691e      	ldr	r6, [r3, #16]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801284c:	4618      	mov	r0, r3
 801284e:	f7ff ffb6 	bl	80127be <makeFreeRtosPriority>
 8012852:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	695b      	ldr	r3, [r3, #20]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801285c:	9202      	str	r2, [sp, #8]
 801285e:	9301      	str	r3, [sp, #4]
 8012860:	9100      	str	r1, [sp, #0]
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	4632      	mov	r2, r6
 8012866:	4629      	mov	r1, r5
 8012868:	4620      	mov	r0, r4
 801286a:	f001 f944 	bl	8013af6 <xTaskCreateStatic>
 801286e:	4603      	mov	r3, r0
 8012870:	60fb      	str	r3, [r7, #12]
 8012872:	e01c      	b.n	80128ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	685c      	ldr	r4, [r3, #4]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012880:	b29e      	uxth	r6, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012888:	4618      	mov	r0, r3
 801288a:	f7ff ff98 	bl	80127be <makeFreeRtosPriority>
 801288e:	4602      	mov	r2, r0
 8012890:	f107 030c 	add.w	r3, r7, #12
 8012894:	9301      	str	r3, [sp, #4]
 8012896:	9200      	str	r2, [sp, #0]
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	4632      	mov	r2, r6
 801289c:	4629      	mov	r1, r5
 801289e:	4620      	mov	r0, r4
 80128a0:	f001 f983 	bl	8013baa <xTaskCreate>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d001      	beq.n	80128ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80128aa:	2300      	movs	r3, #0
 80128ac:	e000      	b.n	80128b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80128ae:	68fb      	ldr	r3, [r7, #12]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3714      	adds	r7, #20
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080128b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d001      	beq.n	80128ce <osDelay+0x16>
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	e000      	b.n	80128d0 <osDelay+0x18>
 80128ce:	2301      	movs	r3, #1
 80128d0:	4618      	mov	r0, r3
 80128d2:	f001 fa9f 	bl	8013e14 <vTaskDelay>
  
  return osOK;
 80128d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3710      	adds	r7, #16
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b086      	sub	sp, #24
 80128e4:	af02      	add	r7, sp, #8
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80128ea:	2300      	movs	r3, #0
 80128ec:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80128ee:	2300      	movs	r3, #0
 80128f0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80128f2:	f7ff ff7c 	bl	80127ee <inHandlerMode>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d01c      	beq.n	8012936 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80128fc:	6839      	ldr	r1, [r7, #0]
 80128fe:	f107 0208 	add.w	r2, r7, #8
 8012902:	f107 030c 	add.w	r3, r7, #12
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	4613      	mov	r3, r2
 801290a:	2201      	movs	r2, #1
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f002 f857 	bl	80149c0 <xTaskGenericNotifyFromISR>
 8012912:	4603      	mov	r3, r0
 8012914:	2b01      	cmp	r3, #1
 8012916:	d002      	beq.n	801291e <osSignalSet+0x3e>
      return 0x80000000;
 8012918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801291c:	e019      	b.n	8012952 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d015      	beq.n	8012950 <osSignalSet+0x70>
 8012924:	4b0d      	ldr	r3, [pc, #52]	; (801295c <osSignalSet+0x7c>)
 8012926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801292a:	601a      	str	r2, [r3, #0]
 801292c:	f3bf 8f4f 	dsb	sy
 8012930:	f3bf 8f6f 	isb	sy
 8012934:	e00c      	b.n	8012950 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012936:	6839      	ldr	r1, [r7, #0]
 8012938:	f107 0308 	add.w	r3, r7, #8
 801293c:	2201      	movs	r2, #1
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f001 ff8c 	bl	801485c <xTaskGenericNotify>
 8012944:	4603      	mov	r3, r0
 8012946:	2b01      	cmp	r3, #1
 8012948:	d002      	beq.n	8012950 <osSignalSet+0x70>
    return 0x80000000;
 801294a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801294e:	e000      	b.n	8012952 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012950:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012952:	4618      	mov	r0, r3
 8012954:	3710      	adds	r7, #16
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	e000ed04 	.word	0xe000ed04

08012960 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012960:	b590      	push	{r4, r7, lr}
 8012962:	b089      	sub	sp, #36	; 0x24
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 801296c:	2300      	movs	r3, #0
 801296e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012970:	2300      	movs	r3, #0
 8012972:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801297a:	d103      	bne.n	8012984 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 801297c:	f04f 33ff 	mov.w	r3, #4294967295
 8012980:	61fb      	str	r3, [r7, #28]
 8012982:	e009      	b.n	8012998 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d006      	beq.n	8012998 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d101      	bne.n	8012998 <osSignalWait+0x38>
      ticks = 1;
 8012994:	2301      	movs	r3, #1
 8012996:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012998:	f7ff ff29 	bl	80127ee <inHandlerMode>
 801299c:	4603      	mov	r3, r0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d002      	beq.n	80129a8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80129a2:	2382      	movs	r3, #130	; 0x82
 80129a4:	613b      	str	r3, [r7, #16]
 80129a6:	e01b      	b.n	80129e0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80129a8:	68b9      	ldr	r1, [r7, #8]
 80129aa:	f107 0310 	add.w	r3, r7, #16
 80129ae:	1d1a      	adds	r2, r3, #4
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	2000      	movs	r0, #0
 80129b4:	f001 fef8 	bl	80147a8 <xTaskNotifyWait>
 80129b8:	4603      	mov	r3, r0
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d008      	beq.n	80129d0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d102      	bne.n	80129ca <osSignalWait+0x6a>
 80129c4:	2300      	movs	r3, #0
 80129c6:	613b      	str	r3, [r7, #16]
 80129c8:	e00a      	b.n	80129e0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80129ca:	2340      	movs	r3, #64	; 0x40
 80129cc:	613b      	str	r3, [r7, #16]
 80129ce:	e007      	b.n	80129e0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	da02      	bge.n	80129dc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80129d6:	2386      	movs	r3, #134	; 0x86
 80129d8:	613b      	str	r3, [r7, #16]
 80129da:	e001      	b.n	80129e0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80129dc:	2308      	movs	r3, #8
 80129de:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	461c      	mov	r4, r3
 80129e4:	f107 0310 	add.w	r3, r7, #16
 80129e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80129ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	3724      	adds	r7, #36	; 0x24
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd90      	pop	{r4, r7, pc}

080129f8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d007      	beq.n	8012a18 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	2001      	movs	r0, #1
 8012a10:	f000 fc5f 	bl	80132d2 <xQueueCreateMutexStatic>
 8012a14:	4603      	mov	r3, r0
 8012a16:	e003      	b.n	8012a20 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012a18:	2001      	movs	r0, #1
 8012a1a:	f000 fc42 	bl	80132a2 <xQueueCreateMutex>
 8012a1e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b086      	sub	sp, #24
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	3303      	adds	r3, #3
 8012a36:	f023 0303 	bic.w	r3, r3, #3
 8012a3a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012a3c:	2014      	movs	r0, #20
 8012a3e:	f002 fb3f 	bl	80150c0 <pvPortMalloc>
 8012a42:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d046      	beq.n	8012ad8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012a52:	68fa      	ldr	r2, [r7, #12]
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f002 fb2c 	bl	80150c0 <pvPortMalloc>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d02b      	beq.n	8012ace <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	fb02 f303 	mul.w	r3, r2, r3
 8012a80:	4618      	mov	r0, r3
 8012a82:	f002 fb1d 	bl	80150c0 <pvPortMalloc>
 8012a86:	4602      	mov	r2, r0
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d011      	beq.n	8012ab8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012a94:	2300      	movs	r3, #0
 8012a96:	613b      	str	r3, [r7, #16]
 8012a98:	e008      	b.n	8012aac <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	685a      	ldr	r2, [r3, #4]
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	613b      	str	r3, [r7, #16]
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	693a      	ldr	r2, [r7, #16]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d3f1      	bcc.n	8012a9a <osPoolCreate+0x72>
 8012ab6:	e00f      	b.n	8012ad8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f002 fbc1 	bl	8015244 <vPortFree>
        vPortFree(thePool);
 8012ac2:	6978      	ldr	r0, [r7, #20]
 8012ac4:	f002 fbbe 	bl	8015244 <vPortFree>
        thePool = NULL;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	617b      	str	r3, [r7, #20]
 8012acc:	e004      	b.n	8012ad8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012ace:	6978      	ldr	r0, [r7, #20]
 8012ad0:	f002 fbb8 	bl	8015244 <vPortFree>
      thePool = NULL;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012ad8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3718      	adds	r7, #24
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012ae2:	b580      	push	{r7, lr}
 8012ae4:	b08a      	sub	sp, #40	; 0x28
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012aee:	2300      	movs	r3, #0
 8012af0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012af2:	f7ff fe7c 	bl	80127ee <inHandlerMode>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00e      	beq.n	8012b1a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012afc:	f3ef 8211 	mrs	r2, BASEPRI
 8012b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	617a      	str	r2, [r7, #20]
 8012b12:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012b14:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b16:	627b      	str	r3, [r7, #36]	; 0x24
 8012b18:	e001      	b.n	8012b1e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012b1a:	f002 f9b7 	bl	8014e8c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012b1e:	2300      	movs	r3, #0
 8012b20:	61fb      	str	r3, [r7, #28]
 8012b22:	e029      	b.n	8012b78 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	691a      	ldr	r2, [r3, #16]
 8012b28:	69fb      	ldr	r3, [r7, #28]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	6892      	ldr	r2, [r2, #8]
 8012b30:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b34:	fb02 f201 	mul.w	r2, r2, r1
 8012b38:	1a9b      	subs	r3, r3, r2
 8012b3a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	685a      	ldr	r2, [r3, #4]
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	4413      	add	r3, r2
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d113      	bne.n	8012b72 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	685a      	ldr	r2, [r3, #4]
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	4413      	add	r3, r2
 8012b52:	2201      	movs	r2, #1
 8012b54:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	69ba      	ldr	r2, [r7, #24]
 8012b62:	fb02 f303 	mul.w	r3, r2, r3
 8012b66:	440b      	add	r3, r1
 8012b68:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	69ba      	ldr	r2, [r7, #24]
 8012b6e:	611a      	str	r2, [r3, #16]
      break;
 8012b70:	e007      	b.n	8012b82 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012b72:	69fb      	ldr	r3, [r7, #28]
 8012b74:	3301      	adds	r3, #1
 8012b76:	61fb      	str	r3, [r7, #28]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	69fa      	ldr	r2, [r7, #28]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d3d0      	bcc.n	8012b24 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012b82:	f7ff fe34 	bl	80127ee <inHandlerMode>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d005      	beq.n	8012b98 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	f383 8811 	msr	BASEPRI, r3
 8012b96:	e001      	b.n	8012b9c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012b98:	f002 f9a6 	bl	8014ee8 <vPortExitCritical>
  }
  
  return p;
 8012b9c:	6a3b      	ldr	r3, [r7, #32]
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3728      	adds	r7, #40	; 0x28
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012ba6:	b480      	push	{r7}
 8012ba8:	b085      	sub	sp, #20
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d101      	bne.n	8012bba <osPoolFree+0x14>
    return osErrorParameter;
 8012bb6:	2380      	movs	r3, #128	; 0x80
 8012bb8:	e030      	b.n	8012c1c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d101      	bne.n	8012bc4 <osPoolFree+0x1e>
    return osErrorParameter;
 8012bc0:	2380      	movs	r3, #128	; 0x80
 8012bc2:	e02b      	b.n	8012c1c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	683a      	ldr	r2, [r7, #0]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d201      	bcs.n	8012bd2 <osPoolFree+0x2c>
    return osErrorParameter;
 8012bce:	2380      	movs	r3, #128	; 0x80
 8012bd0:	e024      	b.n	8012c1c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	6812      	ldr	r2, [r2, #0]
 8012bd8:	1a9b      	subs	r3, r3, r2
 8012bda:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	68da      	ldr	r2, [r3, #12]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012be6:	fb02 f201 	mul.w	r2, r2, r1
 8012bea:	1a9b      	subs	r3, r3, r2
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <osPoolFree+0x4e>
    return osErrorParameter;
 8012bf0:	2380      	movs	r3, #128	; 0x80
 8012bf2:	e013      	b.n	8012c1c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bfe:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	689b      	ldr	r3, [r3, #8]
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d301      	bcc.n	8012c0e <osPoolFree+0x68>
    return osErrorParameter;
 8012c0a:	2380      	movs	r3, #128	; 0x80
 8012c0c:	e006      	b.n	8012c1c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	685a      	ldr	r2, [r3, #4]
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	4413      	add	r3, r2
 8012c16:	2200      	movs	r2, #0
 8012c18:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012c1a:	2300      	movs	r3, #0
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3714      	adds	r7, #20
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012c28:	b590      	push	{r4, r7, lr}
 8012c2a:	b087      	sub	sp, #28
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	60fb      	str	r3, [r7, #12]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	613b      	str	r3, [r7, #16]
 8012c3e:	2300      	movs	r3, #0
 8012c40:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	689c      	ldr	r4, [r3, #8]
 8012c46:	200c      	movs	r0, #12
 8012c48:	f002 fa3a 	bl	80150c0 <pvPortMalloc>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	689b      	ldr	r3, [r3, #8]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d101      	bne.n	8012c5e <osMailCreate+0x36>
    return NULL;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	e038      	b.n	8012cd0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6818      	ldr	r0, [r3, #0]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	681c      	ldr	r4, [r3, #0]
 8012c72:	2200      	movs	r2, #0
 8012c74:	2104      	movs	r1, #4
 8012c76:	f000 fa9c 	bl	80131b2 <xQueueGenericCreate>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	689b      	ldr	r3, [r3, #8]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d107      	bne.n	8012c9a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	4618      	mov	r0, r3
 8012c92:	f002 fad7 	bl	8015244 <vPortFree>
    return NULL;
 8012c96:	2300      	movs	r3, #0
 8012c98:	e01a      	b.n	8012cd0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	681c      	ldr	r4, [r3, #0]
 8012ca0:	f107 030c 	add.w	r3, r7, #12
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ff febf 	bl	8012a28 <osPoolCreate>
 8012caa:	4603      	mov	r3, r0
 8012cac:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	689b      	ldr	r3, [r3, #8]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d107      	bne.n	8012cca <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f002 fabf 	bl	8015244 <vPortFree>
    return NULL;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	e002      	b.n	8012cd0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	689b      	ldr	r3, [r3, #8]
 8012cce:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	371c      	adds	r7, #28
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd90      	pop	{r4, r7, pc}

08012cd8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b084      	sub	sp, #16
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <osMailAlloc+0x14>
    return NULL;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	e006      	b.n	8012cfa <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7ff fef6 	bl	8012ae2 <osPoolAlloc>
 8012cf6:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
	...

08012d04 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d101      	bne.n	8012d18 <osMailPut+0x14>
    return osErrorParameter;
 8012d14:	2380      	movs	r3, #128	; 0x80
 8012d16:	e02c      	b.n	8012d72 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012d1c:	f7ff fd67 	bl	80127ee <inHandlerMode>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d018      	beq.n	8012d58 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6858      	ldr	r0, [r3, #4]
 8012d2a:	f107 020c 	add.w	r2, r7, #12
 8012d2e:	4639      	mov	r1, r7
 8012d30:	2300      	movs	r3, #0
 8012d32:	f000 fbe3 	bl	80134fc <xQueueGenericSendFromISR>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b01      	cmp	r3, #1
 8012d3a:	d001      	beq.n	8012d40 <osMailPut+0x3c>
      return osErrorOS;
 8012d3c:	23ff      	movs	r3, #255	; 0xff
 8012d3e:	e018      	b.n	8012d72 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d014      	beq.n	8012d70 <osMailPut+0x6c>
 8012d46:	4b0d      	ldr	r3, [pc, #52]	; (8012d7c <osMailPut+0x78>)
 8012d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d4c:	601a      	str	r2, [r3, #0]
 8012d4e:	f3bf 8f4f 	dsb	sy
 8012d52:	f3bf 8f6f 	isb	sy
 8012d56:	e00b      	b.n	8012d70 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6858      	ldr	r0, [r3, #4]
 8012d5c:	4639      	mov	r1, r7
 8012d5e:	2300      	movs	r3, #0
 8012d60:	2200      	movs	r2, #0
 8012d62:	f000 fad1 	bl	8013308 <xQueueGenericSend>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d001      	beq.n	8012d70 <osMailPut+0x6c>
      return osErrorOS;
 8012d6c:	23ff      	movs	r3, #255	; 0xff
 8012d6e:	e000      	b.n	8012d72 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012d70:	2300      	movs	r3, #0
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	e000ed04 	.word	0xe000ed04

08012d80 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012d80:	b590      	push	{r4, r7, lr}
 8012d82:	b08b      	sub	sp, #44	; 0x2c
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d10a      	bne.n	8012dac <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012d96:	2380      	movs	r3, #128	; 0x80
 8012d98:	617b      	str	r3, [r7, #20]
    return event;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	461c      	mov	r4, r3
 8012d9e:	f107 0314 	add.w	r3, r7, #20
 8012da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012daa:	e056      	b.n	8012e5a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012dac:	2300      	movs	r3, #0
 8012dae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012db0:	2300      	movs	r3, #0
 8012db2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dba:	d103      	bne.n	8012dc4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8012dc2:	e009      	b.n	8012dd8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d006      	beq.n	8012dd8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d101      	bne.n	8012dd8 <osMailGet+0x58>
      ticks = 1;
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012dd8:	f7ff fd09 	bl	80127ee <inHandlerMode>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d01d      	beq.n	8012e1e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	6858      	ldr	r0, [r3, #4]
 8012de6:	f107 0220 	add.w	r2, r7, #32
 8012dea:	f107 0314 	add.w	r3, r7, #20
 8012dee:	3304      	adds	r3, #4
 8012df0:	4619      	mov	r1, r3
 8012df2:	f000 fcf3 	bl	80137dc <xQueueReceiveFromISR>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d102      	bne.n	8012e02 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012dfc:	2320      	movs	r3, #32
 8012dfe:	617b      	str	r3, [r7, #20]
 8012e00:	e001      	b.n	8012e06 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012e02:	2300      	movs	r3, #0
 8012e04:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e06:	6a3b      	ldr	r3, [r7, #32]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d01e      	beq.n	8012e4a <osMailGet+0xca>
 8012e0c:	4b15      	ldr	r3, [pc, #84]	; (8012e64 <osMailGet+0xe4>)
 8012e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e12:	601a      	str	r2, [r3, #0]
 8012e14:	f3bf 8f4f 	dsb	sy
 8012e18:	f3bf 8f6f 	isb	sy
 8012e1c:	e015      	b.n	8012e4a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	6858      	ldr	r0, [r3, #4]
 8012e22:	f107 0314 	add.w	r3, r7, #20
 8012e26:	3304      	adds	r3, #4
 8012e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	f000 fbfa 	bl	8013624 <xQueueReceive>
 8012e30:	4603      	mov	r3, r0
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d102      	bne.n	8012e3c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012e36:	2320      	movs	r3, #32
 8012e38:	617b      	str	r3, [r7, #20]
 8012e3a:	e006      	b.n	8012e4a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d101      	bne.n	8012e46 <osMailGet+0xc6>
 8012e42:	2300      	movs	r3, #0
 8012e44:	e000      	b.n	8012e48 <osMailGet+0xc8>
 8012e46:	2340      	movs	r3, #64	; 0x40
 8012e48:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	461c      	mov	r4, r3
 8012e4e:	f107 0314 	add.w	r3, r7, #20
 8012e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	372c      	adds	r7, #44	; 0x2c
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd90      	pop	{r4, r7, pc}
 8012e62:	bf00      	nop
 8012e64:	e000ed04 	.word	0xe000ed04

08012e68 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d101      	bne.n	8012e7c <osMailFree+0x14>
    return osErrorParameter;
 8012e78:	2380      	movs	r3, #128	; 0x80
 8012e7a:	e006      	b.n	8012e8a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	6839      	ldr	r1, [r7, #0]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7ff fe8f 	bl	8012ba6 <osPoolFree>
 8012e88:	4603      	mov	r3, r0
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3708      	adds	r7, #8
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e92:	b480      	push	{r7}
 8012e94:	b083      	sub	sp, #12
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f103 0208 	add.w	r2, r3, #8
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8012eaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f103 0208 	add.w	r2, r3, #8
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f103 0208 	add.w	r2, r3, #8
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ec6:	bf00      	nop
 8012ec8:	370c      	adds	r7, #12
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr

08012ed2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ed2:	b480      	push	{r7}
 8012ed4:	b083      	sub	sp, #12
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012ee0:	bf00      	nop
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012eec:	b480      	push	{r7}
 8012eee:	b085      	sub	sp, #20
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	689a      	ldr	r2, [r3, #8]
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	689b      	ldr	r3, [r3, #8]
 8012f0e:	683a      	ldr	r2, [r7, #0]
 8012f10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	683a      	ldr	r2, [r7, #0]
 8012f16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	1c5a      	adds	r2, r3, #1
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	601a      	str	r2, [r3, #0]
}
 8012f28:	bf00      	nop
 8012f2a:	3714      	adds	r7, #20
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f32:	4770      	bx	lr

08012f34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f34:	b480      	push	{r7}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f4a:	d103      	bne.n	8012f54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	691b      	ldr	r3, [r3, #16]
 8012f50:	60fb      	str	r3, [r7, #12]
 8012f52:	e00c      	b.n	8012f6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	3308      	adds	r3, #8
 8012f58:	60fb      	str	r3, [r7, #12]
 8012f5a:	e002      	b.n	8012f62 <vListInsert+0x2e>
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	60fb      	str	r3, [r7, #12]
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d2f6      	bcs.n	8012f5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	685a      	ldr	r2, [r3, #4]
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	683a      	ldr	r2, [r7, #0]
 8012f7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	68fa      	ldr	r2, [r7, #12]
 8012f82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	683a      	ldr	r2, [r7, #0]
 8012f88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	1c5a      	adds	r2, r3, #1
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	601a      	str	r2, [r3, #0]
}
 8012f9a:	bf00      	nop
 8012f9c:	3714      	adds	r7, #20
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr

08012fa6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012fa6:	b480      	push	{r7}
 8012fa8:	b085      	sub	sp, #20
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	691b      	ldr	r3, [r3, #16]
 8012fb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	687a      	ldr	r2, [r7, #4]
 8012fba:	6892      	ldr	r2, [r2, #8]
 8012fbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	6852      	ldr	r2, [r2, #4]
 8012fc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d103      	bne.n	8012fda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	689a      	ldr	r2, [r3, #8]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	1e5a      	subs	r2, r3, #1
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3714      	adds	r7, #20
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
	...

08012ffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d109      	bne.n	8013024 <xQueueGenericReset+0x28>
	__asm volatile
 8013010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013014:	f383 8811 	msr	BASEPRI, r3
 8013018:	f3bf 8f6f 	isb	sy
 801301c:	f3bf 8f4f 	dsb	sy
 8013020:	60bb      	str	r3, [r7, #8]
 8013022:	e7fe      	b.n	8013022 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8013024:	f001 ff32 	bl	8014e8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	681a      	ldr	r2, [r3, #0]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013030:	68f9      	ldr	r1, [r7, #12]
 8013032:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013034:	fb01 f303 	mul.w	r3, r1, r3
 8013038:	441a      	add	r2, r3
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2200      	movs	r2, #0
 8013042:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013054:	3b01      	subs	r3, #1
 8013056:	68f9      	ldr	r1, [r7, #12]
 8013058:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801305a:	fb01 f303 	mul.w	r3, r1, r3
 801305e:	441a      	add	r2, r3
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	22ff      	movs	r2, #255	; 0xff
 8013068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	22ff      	movs	r2, #255	; 0xff
 8013070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d114      	bne.n	80130a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	691b      	ldr	r3, [r3, #16]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d01a      	beq.n	80130b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	3310      	adds	r3, #16
 8013086:	4618      	mov	r0, r3
 8013088:	f001 f936 	bl	80142f8 <xTaskRemoveFromEventList>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d012      	beq.n	80130b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013092:	4b0d      	ldr	r3, [pc, #52]	; (80130c8 <xQueueGenericReset+0xcc>)
 8013094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013098:	601a      	str	r2, [r3, #0]
 801309a:	f3bf 8f4f 	dsb	sy
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	e009      	b.n	80130b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	3310      	adds	r3, #16
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7ff fef2 	bl	8012e92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	3324      	adds	r3, #36	; 0x24
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7ff feed 	bl	8012e92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80130b8:	f001 ff16 	bl	8014ee8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80130bc:	2301      	movs	r3, #1
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3710      	adds	r7, #16
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	e000ed04 	.word	0xe000ed04

080130cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b08e      	sub	sp, #56	; 0x38
 80130d0:	af02      	add	r7, sp, #8
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
 80130d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d109      	bne.n	80130f4 <xQueueGenericCreateStatic+0x28>
 80130e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e4:	f383 8811 	msr	BASEPRI, r3
 80130e8:	f3bf 8f6f 	isb	sy
 80130ec:	f3bf 8f4f 	dsb	sy
 80130f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80130f2:	e7fe      	b.n	80130f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d109      	bne.n	801310e <xQueueGenericCreateStatic+0x42>
 80130fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fe:	f383 8811 	msr	BASEPRI, r3
 8013102:	f3bf 8f6f 	isb	sy
 8013106:	f3bf 8f4f 	dsb	sy
 801310a:	627b      	str	r3, [r7, #36]	; 0x24
 801310c:	e7fe      	b.n	801310c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d002      	beq.n	801311a <xQueueGenericCreateStatic+0x4e>
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d001      	beq.n	801311e <xQueueGenericCreateStatic+0x52>
 801311a:	2301      	movs	r3, #1
 801311c:	e000      	b.n	8013120 <xQueueGenericCreateStatic+0x54>
 801311e:	2300      	movs	r3, #0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d109      	bne.n	8013138 <xQueueGenericCreateStatic+0x6c>
 8013124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	623b      	str	r3, [r7, #32]
 8013136:	e7fe      	b.n	8013136 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d102      	bne.n	8013144 <xQueueGenericCreateStatic+0x78>
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d101      	bne.n	8013148 <xQueueGenericCreateStatic+0x7c>
 8013144:	2301      	movs	r3, #1
 8013146:	e000      	b.n	801314a <xQueueGenericCreateStatic+0x7e>
 8013148:	2300      	movs	r3, #0
 801314a:	2b00      	cmp	r3, #0
 801314c:	d109      	bne.n	8013162 <xQueueGenericCreateStatic+0x96>
 801314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013152:	f383 8811 	msr	BASEPRI, r3
 8013156:	f3bf 8f6f 	isb	sy
 801315a:	f3bf 8f4f 	dsb	sy
 801315e:	61fb      	str	r3, [r7, #28]
 8013160:	e7fe      	b.n	8013160 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013162:	2348      	movs	r3, #72	; 0x48
 8013164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	2b48      	cmp	r3, #72	; 0x48
 801316a:	d009      	beq.n	8013180 <xQueueGenericCreateStatic+0xb4>
 801316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013170:	f383 8811 	msr	BASEPRI, r3
 8013174:	f3bf 8f6f 	isb	sy
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	61bb      	str	r3, [r7, #24]
 801317e:	e7fe      	b.n	801317e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013180:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00d      	beq.n	80131a8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318e:	2201      	movs	r2, #1
 8013190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013194:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319a:	9300      	str	r3, [sp, #0]
 801319c:	4613      	mov	r3, r2
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	68b9      	ldr	r1, [r7, #8]
 80131a2:	68f8      	ldr	r0, [r7, #12]
 80131a4:	f000 f844 	bl	8013230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80131a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3730      	adds	r7, #48	; 0x30
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b08a      	sub	sp, #40	; 0x28
 80131b6:	af02      	add	r7, sp, #8
 80131b8:	60f8      	str	r0, [r7, #12]
 80131ba:	60b9      	str	r1, [r7, #8]
 80131bc:	4613      	mov	r3, r2
 80131be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d109      	bne.n	80131da <xQueueGenericCreate+0x28>
 80131c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ca:	f383 8811 	msr	BASEPRI, r3
 80131ce:	f3bf 8f6f 	isb	sy
 80131d2:	f3bf 8f4f 	dsb	sy
 80131d6:	613b      	str	r3, [r7, #16]
 80131d8:	e7fe      	b.n	80131d8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d102      	bne.n	80131e6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	61fb      	str	r3, [r7, #28]
 80131e4:	e004      	b.n	80131f0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	68ba      	ldr	r2, [r7, #8]
 80131ea:	fb02 f303 	mul.w	r3, r2, r3
 80131ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	3348      	adds	r3, #72	; 0x48
 80131f4:	4618      	mov	r0, r3
 80131f6:	f001 ff63 	bl	80150c0 <pvPortMalloc>
 80131fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80131fc:	69bb      	ldr	r3, [r7, #24]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d011      	beq.n	8013226 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013202:	69bb      	ldr	r3, [r7, #24]
 8013204:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	3348      	adds	r3, #72	; 0x48
 801320a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	2200      	movs	r2, #0
 8013210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013214:	79fa      	ldrb	r2, [r7, #7]
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	4613      	mov	r3, r2
 801321c:	697a      	ldr	r2, [r7, #20]
 801321e:	68b9      	ldr	r1, [r7, #8]
 8013220:	68f8      	ldr	r0, [r7, #12]
 8013222:	f000 f805 	bl	8013230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013226:	69bb      	ldr	r3, [r7, #24]
	}
 8013228:	4618      	mov	r0, r3
 801322a:	3720      	adds	r7, #32
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}

08013230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
 801323c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d103      	bne.n	801324c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013244:	69bb      	ldr	r3, [r7, #24]
 8013246:	69ba      	ldr	r2, [r7, #24]
 8013248:	601a      	str	r2, [r3, #0]
 801324a:	e002      	b.n	8013252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	68fa      	ldr	r2, [r7, #12]
 8013256:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	68ba      	ldr	r2, [r7, #8]
 801325c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801325e:	2101      	movs	r1, #1
 8013260:	69b8      	ldr	r0, [r7, #24]
 8013262:	f7ff fecb 	bl	8012ffc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013266:	bf00      	nop
 8013268:	3710      	adds	r7, #16
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801326e:	b580      	push	{r7, lr}
 8013270:	b082      	sub	sp, #8
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00e      	beq.n	801329a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2200      	movs	r2, #0
 8013286:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801328e:	2300      	movs	r3, #0
 8013290:	2200      	movs	r2, #0
 8013292:	2100      	movs	r1, #0
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f000 f837 	bl	8013308 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801329a:	bf00      	nop
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b086      	sub	sp, #24
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	4603      	mov	r3, r0
 80132aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80132ac:	2301      	movs	r3, #1
 80132ae:	617b      	str	r3, [r7, #20]
 80132b0:	2300      	movs	r3, #0
 80132b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80132b4:	79fb      	ldrb	r3, [r7, #7]
 80132b6:	461a      	mov	r2, r3
 80132b8:	6939      	ldr	r1, [r7, #16]
 80132ba:	6978      	ldr	r0, [r7, #20]
 80132bc:	f7ff ff79 	bl	80131b2 <xQueueGenericCreate>
 80132c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f7ff ffd3 	bl	801326e <prvInitialiseMutex>

		return xNewQueue;
 80132c8:	68fb      	ldr	r3, [r7, #12]
	}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3718      	adds	r7, #24
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80132d2:	b580      	push	{r7, lr}
 80132d4:	b088      	sub	sp, #32
 80132d6:	af02      	add	r7, sp, #8
 80132d8:	4603      	mov	r3, r0
 80132da:	6039      	str	r1, [r7, #0]
 80132dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80132de:	2301      	movs	r3, #1
 80132e0:	617b      	str	r3, [r7, #20]
 80132e2:	2300      	movs	r3, #0
 80132e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80132e6:	79fb      	ldrb	r3, [r7, #7]
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	2200      	movs	r2, #0
 80132ee:	6939      	ldr	r1, [r7, #16]
 80132f0:	6978      	ldr	r0, [r7, #20]
 80132f2:	f7ff feeb 	bl	80130cc <xQueueGenericCreateStatic>
 80132f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80132f8:	68f8      	ldr	r0, [r7, #12]
 80132fa:	f7ff ffb8 	bl	801326e <prvInitialiseMutex>

		return xNewQueue;
 80132fe:	68fb      	ldr	r3, [r7, #12]
	}
 8013300:	4618      	mov	r0, r3
 8013302:	3718      	adds	r7, #24
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b08e      	sub	sp, #56	; 0x38
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
 8013314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013316:	2300      	movs	r3, #0
 8013318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013320:	2b00      	cmp	r3, #0
 8013322:	d109      	bne.n	8013338 <xQueueGenericSend+0x30>
 8013324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013328:	f383 8811 	msr	BASEPRI, r3
 801332c:	f3bf 8f6f 	isb	sy
 8013330:	f3bf 8f4f 	dsb	sy
 8013334:	62bb      	str	r3, [r7, #40]	; 0x28
 8013336:	e7fe      	b.n	8013336 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d103      	bne.n	8013346 <xQueueGenericSend+0x3e>
 801333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <xQueueGenericSend+0x42>
 8013346:	2301      	movs	r3, #1
 8013348:	e000      	b.n	801334c <xQueueGenericSend+0x44>
 801334a:	2300      	movs	r3, #0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d109      	bne.n	8013364 <xQueueGenericSend+0x5c>
 8013350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013354:	f383 8811 	msr	BASEPRI, r3
 8013358:	f3bf 8f6f 	isb	sy
 801335c:	f3bf 8f4f 	dsb	sy
 8013360:	627b      	str	r3, [r7, #36]	; 0x24
 8013362:	e7fe      	b.n	8013362 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	2b02      	cmp	r3, #2
 8013368:	d103      	bne.n	8013372 <xQueueGenericSend+0x6a>
 801336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801336e:	2b01      	cmp	r3, #1
 8013370:	d101      	bne.n	8013376 <xQueueGenericSend+0x6e>
 8013372:	2301      	movs	r3, #1
 8013374:	e000      	b.n	8013378 <xQueueGenericSend+0x70>
 8013376:	2300      	movs	r3, #0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d109      	bne.n	8013390 <xQueueGenericSend+0x88>
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	623b      	str	r3, [r7, #32]
 801338e:	e7fe      	b.n	801338e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013390:	f001 f968 	bl	8014664 <xTaskGetSchedulerState>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d102      	bne.n	80133a0 <xQueueGenericSend+0x98>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d101      	bne.n	80133a4 <xQueueGenericSend+0x9c>
 80133a0:	2301      	movs	r3, #1
 80133a2:	e000      	b.n	80133a6 <xQueueGenericSend+0x9e>
 80133a4:	2300      	movs	r3, #0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d109      	bne.n	80133be <xQueueGenericSend+0xb6>
 80133aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	61fb      	str	r3, [r7, #28]
 80133bc:	e7fe      	b.n	80133bc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133be:	f001 fd65 	bl	8014e8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80133c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d302      	bcc.n	80133d4 <xQueueGenericSend+0xcc>
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b02      	cmp	r3, #2
 80133d2:	d129      	bne.n	8013428 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133d4:	683a      	ldr	r2, [r7, #0]
 80133d6:	68b9      	ldr	r1, [r7, #8]
 80133d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133da:	f000 fa7c 	bl	80138d6 <prvCopyDataToQueue>
 80133de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d010      	beq.n	801340a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ea:	3324      	adds	r3, #36	; 0x24
 80133ec:	4618      	mov	r0, r3
 80133ee:	f000 ff83 	bl	80142f8 <xTaskRemoveFromEventList>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d013      	beq.n	8013420 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80133f8:	4b3f      	ldr	r3, [pc, #252]	; (80134f8 <xQueueGenericSend+0x1f0>)
 80133fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133fe:	601a      	str	r2, [r3, #0]
 8013400:	f3bf 8f4f 	dsb	sy
 8013404:	f3bf 8f6f 	isb	sy
 8013408:	e00a      	b.n	8013420 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340c:	2b00      	cmp	r3, #0
 801340e:	d007      	beq.n	8013420 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013410:	4b39      	ldr	r3, [pc, #228]	; (80134f8 <xQueueGenericSend+0x1f0>)
 8013412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013416:	601a      	str	r2, [r3, #0]
 8013418:	f3bf 8f4f 	dsb	sy
 801341c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013420:	f001 fd62 	bl	8014ee8 <vPortExitCritical>
				return pdPASS;
 8013424:	2301      	movs	r3, #1
 8013426:	e063      	b.n	80134f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d103      	bne.n	8013436 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801342e:	f001 fd5b 	bl	8014ee8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013432:	2300      	movs	r3, #0
 8013434:	e05c      	b.n	80134f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013438:	2b00      	cmp	r3, #0
 801343a:	d106      	bne.n	801344a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801343c:	f107 0314 	add.w	r3, r7, #20
 8013440:	4618      	mov	r0, r3
 8013442:	f000 ffbb 	bl	80143bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013446:	2301      	movs	r3, #1
 8013448:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801344a:	f001 fd4d 	bl	8014ee8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801344e:	f000 fd73 	bl	8013f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013452:	f001 fd1b 	bl	8014e8c <vPortEnterCritical>
 8013456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801345c:	b25b      	sxtb	r3, r3
 801345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013462:	d103      	bne.n	801346c <xQueueGenericSend+0x164>
 8013464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013466:	2200      	movs	r2, #0
 8013468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801346e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013472:	b25b      	sxtb	r3, r3
 8013474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013478:	d103      	bne.n	8013482 <xQueueGenericSend+0x17a>
 801347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347c:	2200      	movs	r2, #0
 801347e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013482:	f001 fd31 	bl	8014ee8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013486:	1d3a      	adds	r2, r7, #4
 8013488:	f107 0314 	add.w	r3, r7, #20
 801348c:	4611      	mov	r1, r2
 801348e:	4618      	mov	r0, r3
 8013490:	f000 ffaa 	bl	80143e8 <xTaskCheckForTimeOut>
 8013494:	4603      	mov	r3, r0
 8013496:	2b00      	cmp	r3, #0
 8013498:	d124      	bne.n	80134e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801349a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801349c:	f000 fb13 	bl	8013ac6 <prvIsQueueFull>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d018      	beq.n	80134d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80134a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a8:	3310      	adds	r3, #16
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	4611      	mov	r1, r2
 80134ae:	4618      	mov	r0, r3
 80134b0:	f000 fefe 	bl	80142b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80134b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134b6:	f000 fa9e 	bl	80139f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80134ba:	f000 fd4b 	bl	8013f54 <xTaskResumeAll>
 80134be:	4603      	mov	r3, r0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	f47f af7c 	bne.w	80133be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80134c6:	4b0c      	ldr	r3, [pc, #48]	; (80134f8 <xQueueGenericSend+0x1f0>)
 80134c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	f3bf 8f4f 	dsb	sy
 80134d2:	f3bf 8f6f 	isb	sy
 80134d6:	e772      	b.n	80133be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80134d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134da:	f000 fa8c 	bl	80139f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134de:	f000 fd39 	bl	8013f54 <xTaskResumeAll>
 80134e2:	e76c      	b.n	80133be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80134e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134e6:	f000 fa86 	bl	80139f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134ea:	f000 fd33 	bl	8013f54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80134ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3738      	adds	r7, #56	; 0x38
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	e000ed04 	.word	0xe000ed04

080134fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b08e      	sub	sp, #56	; 0x38
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
 8013508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013510:	2b00      	cmp	r3, #0
 8013512:	d109      	bne.n	8013528 <xQueueGenericSendFromISR+0x2c>
 8013514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013518:	f383 8811 	msr	BASEPRI, r3
 801351c:	f3bf 8f6f 	isb	sy
 8013520:	f3bf 8f4f 	dsb	sy
 8013524:	627b      	str	r3, [r7, #36]	; 0x24
 8013526:	e7fe      	b.n	8013526 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d103      	bne.n	8013536 <xQueueGenericSendFromISR+0x3a>
 801352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013532:	2b00      	cmp	r3, #0
 8013534:	d101      	bne.n	801353a <xQueueGenericSendFromISR+0x3e>
 8013536:	2301      	movs	r3, #1
 8013538:	e000      	b.n	801353c <xQueueGenericSendFromISR+0x40>
 801353a:	2300      	movs	r3, #0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d109      	bne.n	8013554 <xQueueGenericSendFromISR+0x58>
 8013540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	623b      	str	r3, [r7, #32]
 8013552:	e7fe      	b.n	8013552 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	2b02      	cmp	r3, #2
 8013558:	d103      	bne.n	8013562 <xQueueGenericSendFromISR+0x66>
 801355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801355e:	2b01      	cmp	r3, #1
 8013560:	d101      	bne.n	8013566 <xQueueGenericSendFromISR+0x6a>
 8013562:	2301      	movs	r3, #1
 8013564:	e000      	b.n	8013568 <xQueueGenericSendFromISR+0x6c>
 8013566:	2300      	movs	r3, #0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d109      	bne.n	8013580 <xQueueGenericSendFromISR+0x84>
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	61fb      	str	r3, [r7, #28]
 801357e:	e7fe      	b.n	801357e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013580:	f001 fd60 	bl	8015044 <vPortValidateInterruptPriority>
	__asm volatile
 8013584:	f3ef 8211 	mrs	r2, BASEPRI
 8013588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358c:	f383 8811 	msr	BASEPRI, r3
 8013590:	f3bf 8f6f 	isb	sy
 8013594:	f3bf 8f4f 	dsb	sy
 8013598:	61ba      	str	r2, [r7, #24]
 801359a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801359c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801359e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80135a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80135a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d302      	bcc.n	80135b2 <xQueueGenericSendFromISR+0xb6>
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	2b02      	cmp	r3, #2
 80135b0:	d12c      	bne.n	801360c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80135bc:	683a      	ldr	r2, [r7, #0]
 80135be:	68b9      	ldr	r1, [r7, #8]
 80135c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135c2:	f000 f988 	bl	80138d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80135c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80135ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ce:	d112      	bne.n	80135f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d016      	beq.n	8013606 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135da:	3324      	adds	r3, #36	; 0x24
 80135dc:	4618      	mov	r0, r3
 80135de:	f000 fe8b 	bl	80142f8 <xTaskRemoveFromEventList>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d00e      	beq.n	8013606 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00b      	beq.n	8013606 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2201      	movs	r2, #1
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	e007      	b.n	8013606 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80135f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80135fa:	3301      	adds	r3, #1
 80135fc:	b2db      	uxtb	r3, r3
 80135fe:	b25a      	sxtb	r2, r3
 8013600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013606:	2301      	movs	r3, #1
 8013608:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801360a:	e001      	b.n	8013610 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801360c:	2300      	movs	r3, #0
 801360e:	637b      	str	r3, [r7, #52]	; 0x34
 8013610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013612:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801361a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801361c:	4618      	mov	r0, r3
 801361e:	3738      	adds	r7, #56	; 0x38
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b08c      	sub	sp, #48	; 0x30
 8013628:	af00      	add	r7, sp, #0
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013630:	2300      	movs	r3, #0
 8013632:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363a:	2b00      	cmp	r3, #0
 801363c:	d109      	bne.n	8013652 <xQueueReceive+0x2e>
	__asm volatile
 801363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013642:	f383 8811 	msr	BASEPRI, r3
 8013646:	f3bf 8f6f 	isb	sy
 801364a:	f3bf 8f4f 	dsb	sy
 801364e:	623b      	str	r3, [r7, #32]
 8013650:	e7fe      	b.n	8013650 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d103      	bne.n	8013660 <xQueueReceive+0x3c>
 8013658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801365c:	2b00      	cmp	r3, #0
 801365e:	d101      	bne.n	8013664 <xQueueReceive+0x40>
 8013660:	2301      	movs	r3, #1
 8013662:	e000      	b.n	8013666 <xQueueReceive+0x42>
 8013664:	2300      	movs	r3, #0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d109      	bne.n	801367e <xQueueReceive+0x5a>
 801366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	61fb      	str	r3, [r7, #28]
 801367c:	e7fe      	b.n	801367c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801367e:	f000 fff1 	bl	8014664 <xTaskGetSchedulerState>
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d102      	bne.n	801368e <xQueueReceive+0x6a>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d101      	bne.n	8013692 <xQueueReceive+0x6e>
 801368e:	2301      	movs	r3, #1
 8013690:	e000      	b.n	8013694 <xQueueReceive+0x70>
 8013692:	2300      	movs	r3, #0
 8013694:	2b00      	cmp	r3, #0
 8013696:	d109      	bne.n	80136ac <xQueueReceive+0x88>
 8013698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801369c:	f383 8811 	msr	BASEPRI, r3
 80136a0:	f3bf 8f6f 	isb	sy
 80136a4:	f3bf 8f4f 	dsb	sy
 80136a8:	61bb      	str	r3, [r7, #24]
 80136aa:	e7fe      	b.n	80136aa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80136ac:	f001 fbee 	bl	8014e8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d01f      	beq.n	80136fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80136bc:	68b9      	ldr	r1, [r7, #8]
 80136be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136c0:	f000 f973 	bl	80139aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80136c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c6:	1e5a      	subs	r2, r3, #1
 80136c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ce:	691b      	ldr	r3, [r3, #16]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d00f      	beq.n	80136f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d6:	3310      	adds	r3, #16
 80136d8:	4618      	mov	r0, r3
 80136da:	f000 fe0d 	bl	80142f8 <xTaskRemoveFromEventList>
 80136de:	4603      	mov	r3, r0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d007      	beq.n	80136f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80136e4:	4b3c      	ldr	r3, [pc, #240]	; (80137d8 <xQueueReceive+0x1b4>)
 80136e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136ea:	601a      	str	r2, [r3, #0]
 80136ec:	f3bf 8f4f 	dsb	sy
 80136f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80136f4:	f001 fbf8 	bl	8014ee8 <vPortExitCritical>
				return pdPASS;
 80136f8:	2301      	movs	r3, #1
 80136fa:	e069      	b.n	80137d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d103      	bne.n	801370a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013702:	f001 fbf1 	bl	8014ee8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013706:	2300      	movs	r3, #0
 8013708:	e062      	b.n	80137d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370c:	2b00      	cmp	r3, #0
 801370e:	d106      	bne.n	801371e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013710:	f107 0310 	add.w	r3, r7, #16
 8013714:	4618      	mov	r0, r3
 8013716:	f000 fe51 	bl	80143bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801371a:	2301      	movs	r3, #1
 801371c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801371e:	f001 fbe3 	bl	8014ee8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013722:	f000 fc09 	bl	8013f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013726:	f001 fbb1 	bl	8014e8c <vPortEnterCritical>
 801372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013730:	b25b      	sxtb	r3, r3
 8013732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013736:	d103      	bne.n	8013740 <xQueueReceive+0x11c>
 8013738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373a:	2200      	movs	r2, #0
 801373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013746:	b25b      	sxtb	r3, r3
 8013748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801374c:	d103      	bne.n	8013756 <xQueueReceive+0x132>
 801374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013750:	2200      	movs	r2, #0
 8013752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013756:	f001 fbc7 	bl	8014ee8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801375a:	1d3a      	adds	r2, r7, #4
 801375c:	f107 0310 	add.w	r3, r7, #16
 8013760:	4611      	mov	r1, r2
 8013762:	4618      	mov	r0, r3
 8013764:	f000 fe40 	bl	80143e8 <xTaskCheckForTimeOut>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	d123      	bne.n	80137b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801376e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013770:	f000 f993 	bl	8013a9a <prvIsQueueEmpty>
 8013774:	4603      	mov	r3, r0
 8013776:	2b00      	cmp	r3, #0
 8013778:	d017      	beq.n	80137aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377c:	3324      	adds	r3, #36	; 0x24
 801377e:	687a      	ldr	r2, [r7, #4]
 8013780:	4611      	mov	r1, r2
 8013782:	4618      	mov	r0, r3
 8013784:	f000 fd94 	bl	80142b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801378a:	f000 f934 	bl	80139f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801378e:	f000 fbe1 	bl	8013f54 <xTaskResumeAll>
 8013792:	4603      	mov	r3, r0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d189      	bne.n	80136ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013798:	4b0f      	ldr	r3, [pc, #60]	; (80137d8 <xQueueReceive+0x1b4>)
 801379a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801379e:	601a      	str	r2, [r3, #0]
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	f3bf 8f6f 	isb	sy
 80137a8:	e780      	b.n	80136ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80137aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137ac:	f000 f923 	bl	80139f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80137b0:	f000 fbd0 	bl	8013f54 <xTaskResumeAll>
 80137b4:	e77a      	b.n	80136ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80137b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137b8:	f000 f91d 	bl	80139f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80137bc:	f000 fbca 	bl	8013f54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80137c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137c2:	f000 f96a 	bl	8013a9a <prvIsQueueEmpty>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	f43f af6f 	beq.w	80136ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80137ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3730      	adds	r7, #48	; 0x30
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	e000ed04 	.word	0xe000ed04

080137dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b08e      	sub	sp, #56	; 0x38
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d109      	bne.n	8013806 <xQueueReceiveFromISR+0x2a>
 80137f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f6:	f383 8811 	msr	BASEPRI, r3
 80137fa:	f3bf 8f6f 	isb	sy
 80137fe:	f3bf 8f4f 	dsb	sy
 8013802:	623b      	str	r3, [r7, #32]
 8013804:	e7fe      	b.n	8013804 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d103      	bne.n	8013814 <xQueueReceiveFromISR+0x38>
 801380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013810:	2b00      	cmp	r3, #0
 8013812:	d101      	bne.n	8013818 <xQueueReceiveFromISR+0x3c>
 8013814:	2301      	movs	r3, #1
 8013816:	e000      	b.n	801381a <xQueueReceiveFromISR+0x3e>
 8013818:	2300      	movs	r3, #0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d109      	bne.n	8013832 <xQueueReceiveFromISR+0x56>
 801381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013822:	f383 8811 	msr	BASEPRI, r3
 8013826:	f3bf 8f6f 	isb	sy
 801382a:	f3bf 8f4f 	dsb	sy
 801382e:	61fb      	str	r3, [r7, #28]
 8013830:	e7fe      	b.n	8013830 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013832:	f001 fc07 	bl	8015044 <vPortValidateInterruptPriority>
	__asm volatile
 8013836:	f3ef 8211 	mrs	r2, BASEPRI
 801383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383e:	f383 8811 	msr	BASEPRI, r3
 8013842:	f3bf 8f6f 	isb	sy
 8013846:	f3bf 8f4f 	dsb	sy
 801384a:	61ba      	str	r2, [r7, #24]
 801384c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801384e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013856:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385a:	2b00      	cmp	r3, #0
 801385c:	d02f      	beq.n	80138be <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013868:	68b9      	ldr	r1, [r7, #8]
 801386a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801386c:	f000 f89d 	bl	80139aa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013872:	1e5a      	subs	r2, r3, #1
 8013874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013876:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013880:	d112      	bne.n	80138a8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013884:	691b      	ldr	r3, [r3, #16]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d016      	beq.n	80138b8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388c:	3310      	adds	r3, #16
 801388e:	4618      	mov	r0, r3
 8013890:	f000 fd32 	bl	80142f8 <xTaskRemoveFromEventList>
 8013894:	4603      	mov	r3, r0
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00e      	beq.n	80138b8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d00b      	beq.n	80138b8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2201      	movs	r2, #1
 80138a4:	601a      	str	r2, [r3, #0]
 80138a6:	e007      	b.n	80138b8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80138a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138ac:	3301      	adds	r3, #1
 80138ae:	b2db      	uxtb	r3, r3
 80138b0:	b25a      	sxtb	r2, r3
 80138b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80138b8:	2301      	movs	r3, #1
 80138ba:	637b      	str	r3, [r7, #52]	; 0x34
 80138bc:	e001      	b.n	80138c2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80138be:	2300      	movs	r3, #0
 80138c0:	637b      	str	r3, [r7, #52]	; 0x34
 80138c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3738      	adds	r7, #56	; 0x38
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b086      	sub	sp, #24
 80138da:	af00      	add	r7, sp, #0
 80138dc:	60f8      	str	r0, [r7, #12]
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80138e2:	2300      	movs	r3, #0
 80138e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d10d      	bne.n	8013910 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d14d      	bne.n	8013998 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	4618      	mov	r0, r3
 8013902:	f000 fecd 	bl	80146a0 <xTaskPriorityDisinherit>
 8013906:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2200      	movs	r2, #0
 801390c:	609a      	str	r2, [r3, #8]
 801390e:	e043      	b.n	8013998 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d119      	bne.n	801394a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	6858      	ldr	r0, [r3, #4]
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801391e:	461a      	mov	r2, r3
 8013920:	68b9      	ldr	r1, [r7, #8]
 8013922:	f002 fb2b 	bl	8015f7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801392e:	441a      	add	r2, r3
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	685a      	ldr	r2, [r3, #4]
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	429a      	cmp	r2, r3
 801393e:	d32b      	bcc.n	8013998 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	605a      	str	r2, [r3, #4]
 8013948:	e026      	b.n	8013998 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	68d8      	ldr	r0, [r3, #12]
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013952:	461a      	mov	r2, r3
 8013954:	68b9      	ldr	r1, [r7, #8]
 8013956:	f002 fb11 	bl	8015f7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	68da      	ldr	r2, [r3, #12]
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013962:	425b      	negs	r3, r3
 8013964:	441a      	add	r2, r3
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	68da      	ldr	r2, [r3, #12]
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	429a      	cmp	r2, r3
 8013974:	d207      	bcs.n	8013986 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	689a      	ldr	r2, [r3, #8]
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801397e:	425b      	negs	r3, r3
 8013980:	441a      	add	r2, r3
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2b02      	cmp	r3, #2
 801398a:	d105      	bne.n	8013998 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d002      	beq.n	8013998 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	3b01      	subs	r3, #1
 8013996:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	1c5a      	adds	r2, r3, #1
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80139a0:	697b      	ldr	r3, [r7, #20]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3718      	adds	r7, #24
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}

080139aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80139aa:	b580      	push	{r7, lr}
 80139ac:	b082      	sub	sp, #8
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	6078      	str	r0, [r7, #4]
 80139b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d018      	beq.n	80139ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	68da      	ldr	r2, [r3, #12]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139c4:	441a      	add	r2, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	68da      	ldr	r2, [r3, #12]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	689b      	ldr	r3, [r3, #8]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d303      	bcc.n	80139de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681a      	ldr	r2, [r3, #0]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	68d9      	ldr	r1, [r3, #12]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139e6:	461a      	mov	r2, r3
 80139e8:	6838      	ldr	r0, [r7, #0]
 80139ea:	f002 fac7 	bl	8015f7c <memcpy>
	}
}
 80139ee:	bf00      	nop
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80139f6:	b580      	push	{r7, lr}
 80139f8:	b084      	sub	sp, #16
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80139fe:	f001 fa45 	bl	8014e8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a0a:	e011      	b.n	8013a30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d012      	beq.n	8013a3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	3324      	adds	r3, #36	; 0x24
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f000 fc6d 	bl	80142f8 <xTaskRemoveFromEventList>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d001      	beq.n	8013a28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013a24:	f000 fd40 	bl	80144a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013a28:	7bfb      	ldrb	r3, [r7, #15]
 8013a2a:	3b01      	subs	r3, #1
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	dce9      	bgt.n	8013a0c <prvUnlockQueue+0x16>
 8013a38:	e000      	b.n	8013a3c <prvUnlockQueue+0x46>
					break;
 8013a3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	22ff      	movs	r2, #255	; 0xff
 8013a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013a44:	f001 fa50 	bl	8014ee8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013a48:	f001 fa20 	bl	8014e8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a54:	e011      	b.n	8013a7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	691b      	ldr	r3, [r3, #16]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d012      	beq.n	8013a84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	3310      	adds	r3, #16
 8013a62:	4618      	mov	r0, r3
 8013a64:	f000 fc48 	bl	80142f8 <xTaskRemoveFromEventList>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d001      	beq.n	8013a72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013a6e:	f000 fd1b 	bl	80144a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a72:	7bbb      	ldrb	r3, [r7, #14]
 8013a74:	3b01      	subs	r3, #1
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	dce9      	bgt.n	8013a56 <prvUnlockQueue+0x60>
 8013a82:	e000      	b.n	8013a86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	22ff      	movs	r2, #255	; 0xff
 8013a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013a8e:	f001 fa2b 	bl	8014ee8 <vPortExitCritical>
}
 8013a92:	bf00      	nop
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}

08013a9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013a9a:	b580      	push	{r7, lr}
 8013a9c:	b084      	sub	sp, #16
 8013a9e:	af00      	add	r7, sp, #0
 8013aa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013aa2:	f001 f9f3 	bl	8014e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d102      	bne.n	8013ab4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	60fb      	str	r3, [r7, #12]
 8013ab2:	e001      	b.n	8013ab8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ab8:	f001 fa16 	bl	8014ee8 <vPortExitCritical>

	return xReturn;
 8013abc:	68fb      	ldr	r3, [r7, #12]
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}

08013ac6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b084      	sub	sp, #16
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ace:	f001 f9dd 	bl	8014e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d102      	bne.n	8013ae4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	60fb      	str	r3, [r7, #12]
 8013ae2:	e001      	b.n	8013ae8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ae8:	f001 f9fe 	bl	8014ee8 <vPortExitCritical>

	return xReturn;
 8013aec:	68fb      	ldr	r3, [r7, #12]
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}

08013af6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013af6:	b580      	push	{r7, lr}
 8013af8:	b08e      	sub	sp, #56	; 0x38
 8013afa:	af04      	add	r7, sp, #16
 8013afc:	60f8      	str	r0, [r7, #12]
 8013afe:	60b9      	str	r1, [r7, #8]
 8013b00:	607a      	str	r2, [r7, #4]
 8013b02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d109      	bne.n	8013b1e <xTaskCreateStatic+0x28>
	__asm volatile
 8013b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b0e:	f383 8811 	msr	BASEPRI, r3
 8013b12:	f3bf 8f6f 	isb	sy
 8013b16:	f3bf 8f4f 	dsb	sy
 8013b1a:	623b      	str	r3, [r7, #32]
 8013b1c:	e7fe      	b.n	8013b1c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d109      	bne.n	8013b38 <xTaskCreateStatic+0x42>
 8013b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b28:	f383 8811 	msr	BASEPRI, r3
 8013b2c:	f3bf 8f6f 	isb	sy
 8013b30:	f3bf 8f4f 	dsb	sy
 8013b34:	61fb      	str	r3, [r7, #28]
 8013b36:	e7fe      	b.n	8013b36 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013b38:	2354      	movs	r3, #84	; 0x54
 8013b3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	2b54      	cmp	r3, #84	; 0x54
 8013b40:	d009      	beq.n	8013b56 <xTaskCreateStatic+0x60>
 8013b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b46:	f383 8811 	msr	BASEPRI, r3
 8013b4a:	f3bf 8f6f 	isb	sy
 8013b4e:	f3bf 8f4f 	dsb	sy
 8013b52:	61bb      	str	r3, [r7, #24]
 8013b54:	e7fe      	b.n	8013b54 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013b56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d01e      	beq.n	8013b9c <xTaskCreateStatic+0xa6>
 8013b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d01b      	beq.n	8013b9c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b70:	2202      	movs	r2, #2
 8013b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013b76:	2300      	movs	r3, #0
 8013b78:	9303      	str	r3, [sp, #12]
 8013b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7c:	9302      	str	r3, [sp, #8]
 8013b7e:	f107 0314 	add.w	r3, r7, #20
 8013b82:	9301      	str	r3, [sp, #4]
 8013b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	687a      	ldr	r2, [r7, #4]
 8013b8c:	68b9      	ldr	r1, [r7, #8]
 8013b8e:	68f8      	ldr	r0, [r7, #12]
 8013b90:	f000 f850 	bl	8013c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b96:	f000 f8d3 	bl	8013d40 <prvAddNewTaskToReadyList>
 8013b9a:	e001      	b.n	8013ba0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013ba0:	697b      	ldr	r3, [r7, #20]
	}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3728      	adds	r7, #40	; 0x28
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}

08013baa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013baa:	b580      	push	{r7, lr}
 8013bac:	b08c      	sub	sp, #48	; 0x30
 8013bae:	af04      	add	r7, sp, #16
 8013bb0:	60f8      	str	r0, [r7, #12]
 8013bb2:	60b9      	str	r1, [r7, #8]
 8013bb4:	603b      	str	r3, [r7, #0]
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013bba:	88fb      	ldrh	r3, [r7, #6]
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f001 fa7e 	bl	80150c0 <pvPortMalloc>
 8013bc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00e      	beq.n	8013bea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013bcc:	2054      	movs	r0, #84	; 0x54
 8013bce:	f001 fa77 	bl	80150c0 <pvPortMalloc>
 8013bd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d003      	beq.n	8013be2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013bda:	69fb      	ldr	r3, [r7, #28]
 8013bdc:	697a      	ldr	r2, [r7, #20]
 8013bde:	631a      	str	r2, [r3, #48]	; 0x30
 8013be0:	e005      	b.n	8013bee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013be2:	6978      	ldr	r0, [r7, #20]
 8013be4:	f001 fb2e 	bl	8015244 <vPortFree>
 8013be8:	e001      	b.n	8013bee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013bea:	2300      	movs	r3, #0
 8013bec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013bee:	69fb      	ldr	r3, [r7, #28]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d017      	beq.n	8013c24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013bfc:	88fa      	ldrh	r2, [r7, #6]
 8013bfe:	2300      	movs	r3, #0
 8013c00:	9303      	str	r3, [sp, #12]
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	9302      	str	r3, [sp, #8]
 8013c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c08:	9301      	str	r3, [sp, #4]
 8013c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	68b9      	ldr	r1, [r7, #8]
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f000 f80e 	bl	8013c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c18:	69f8      	ldr	r0, [r7, #28]
 8013c1a:	f000 f891 	bl	8013d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013c1e:	2301      	movs	r3, #1
 8013c20:	61bb      	str	r3, [r7, #24]
 8013c22:	e002      	b.n	8013c2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013c24:	f04f 33ff 	mov.w	r3, #4294967295
 8013c28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3720      	adds	r7, #32
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b088      	sub	sp, #32
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	607a      	str	r2, [r7, #4]
 8013c40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013c4c:	3b01      	subs	r3, #1
 8013c4e:	009b      	lsls	r3, r3, #2
 8013c50:	4413      	add	r3, r2
 8013c52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013c54:	69bb      	ldr	r3, [r7, #24]
 8013c56:	f023 0307 	bic.w	r3, r3, #7
 8013c5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013c5c:	69bb      	ldr	r3, [r7, #24]
 8013c5e:	f003 0307 	and.w	r3, r3, #7
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d009      	beq.n	8013c7a <prvInitialiseNewTask+0x46>
 8013c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c6a:	f383 8811 	msr	BASEPRI, r3
 8013c6e:	f3bf 8f6f 	isb	sy
 8013c72:	f3bf 8f4f 	dsb	sy
 8013c76:	617b      	str	r3, [r7, #20]
 8013c78:	e7fe      	b.n	8013c78 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d01f      	beq.n	8013cc0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c80:	2300      	movs	r3, #0
 8013c82:	61fb      	str	r3, [r7, #28]
 8013c84:	e012      	b.n	8013cac <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013c86:	68ba      	ldr	r2, [r7, #8]
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	4413      	add	r3, r2
 8013c8c:	7819      	ldrb	r1, [r3, #0]
 8013c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	4413      	add	r3, r2
 8013c94:	3334      	adds	r3, #52	; 0x34
 8013c96:	460a      	mov	r2, r1
 8013c98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013c9a:	68ba      	ldr	r2, [r7, #8]
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	4413      	add	r3, r2
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d006      	beq.n	8013cb4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	3301      	adds	r3, #1
 8013caa:	61fb      	str	r3, [r7, #28]
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	2b0f      	cmp	r3, #15
 8013cb0:	d9e9      	bls.n	8013c86 <prvInitialiseNewTask+0x52>
 8013cb2:	e000      	b.n	8013cb6 <prvInitialiseNewTask+0x82>
			{
				break;
 8013cb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb8:	2200      	movs	r2, #0
 8013cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013cbe:	e003      	b.n	8013cc8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cca:	2b06      	cmp	r3, #6
 8013ccc:	d901      	bls.n	8013cd2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013cce:	2306      	movs	r3, #6
 8013cd0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cdc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce6:	3304      	adds	r3, #4
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff f8f2 	bl	8012ed2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf0:	3318      	adds	r3, #24
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7ff f8ed 	bl	8012ed2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d00:	f1c3 0207 	rsb	r2, r3, #7
 8013d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d10:	2200      	movs	r2, #0
 8013d12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d16:	2200      	movs	r2, #0
 8013d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013d1c:	683a      	ldr	r2, [r7, #0]
 8013d1e:	68f9      	ldr	r1, [r7, #12]
 8013d20:	69b8      	ldr	r0, [r7, #24]
 8013d22:	f000 ff8b 	bl	8014c3c <pxPortInitialiseStack>
 8013d26:	4602      	mov	r2, r0
 8013d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d002      	beq.n	8013d38 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d38:	bf00      	nop
 8013d3a:	3720      	adds	r7, #32
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013d48:	f001 f8a0 	bl	8014e8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013d4c:	4b2a      	ldr	r3, [pc, #168]	; (8013df8 <prvAddNewTaskToReadyList+0xb8>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	3301      	adds	r3, #1
 8013d52:	4a29      	ldr	r2, [pc, #164]	; (8013df8 <prvAddNewTaskToReadyList+0xb8>)
 8013d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013d56:	4b29      	ldr	r3, [pc, #164]	; (8013dfc <prvAddNewTaskToReadyList+0xbc>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d109      	bne.n	8013d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013d5e:	4a27      	ldr	r2, [pc, #156]	; (8013dfc <prvAddNewTaskToReadyList+0xbc>)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013d64:	4b24      	ldr	r3, [pc, #144]	; (8013df8 <prvAddNewTaskToReadyList+0xb8>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d110      	bne.n	8013d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013d6c:	f000 fbc0 	bl	80144f0 <prvInitialiseTaskLists>
 8013d70:	e00d      	b.n	8013d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013d72:	4b23      	ldr	r3, [pc, #140]	; (8013e00 <prvAddNewTaskToReadyList+0xc0>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d109      	bne.n	8013d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013d7a:	4b20      	ldr	r3, [pc, #128]	; (8013dfc <prvAddNewTaskToReadyList+0xbc>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d802      	bhi.n	8013d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013d88:	4a1c      	ldr	r2, [pc, #112]	; (8013dfc <prvAddNewTaskToReadyList+0xbc>)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013d8e:	4b1d      	ldr	r3, [pc, #116]	; (8013e04 <prvAddNewTaskToReadyList+0xc4>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	3301      	adds	r3, #1
 8013d94:	4a1b      	ldr	r2, [pc, #108]	; (8013e04 <prvAddNewTaskToReadyList+0xc4>)
 8013d96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	409a      	lsls	r2, r3
 8013da0:	4b19      	ldr	r3, [pc, #100]	; (8013e08 <prvAddNewTaskToReadyList+0xc8>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4313      	orrs	r3, r2
 8013da6:	4a18      	ldr	r2, [pc, #96]	; (8013e08 <prvAddNewTaskToReadyList+0xc8>)
 8013da8:	6013      	str	r3, [r2, #0]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dae:	4613      	mov	r3, r2
 8013db0:	009b      	lsls	r3, r3, #2
 8013db2:	4413      	add	r3, r2
 8013db4:	009b      	lsls	r3, r3, #2
 8013db6:	4a15      	ldr	r2, [pc, #84]	; (8013e0c <prvAddNewTaskToReadyList+0xcc>)
 8013db8:	441a      	add	r2, r3
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	3304      	adds	r3, #4
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	4610      	mov	r0, r2
 8013dc2:	f7ff f893 	bl	8012eec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013dc6:	f001 f88f 	bl	8014ee8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013dca:	4b0d      	ldr	r3, [pc, #52]	; (8013e00 <prvAddNewTaskToReadyList+0xc0>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d00e      	beq.n	8013df0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013dd2:	4b0a      	ldr	r3, [pc, #40]	; (8013dfc <prvAddNewTaskToReadyList+0xbc>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d207      	bcs.n	8013df0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013de0:	4b0b      	ldr	r3, [pc, #44]	; (8013e10 <prvAddNewTaskToReadyList+0xd0>)
 8013de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013de6:	601a      	str	r2, [r3, #0]
 8013de8:	f3bf 8f4f 	dsb	sy
 8013dec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013df0:	bf00      	nop
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	2000110c 	.word	0x2000110c
 8013dfc:	2000100c 	.word	0x2000100c
 8013e00:	20001118 	.word	0x20001118
 8013e04:	20001128 	.word	0x20001128
 8013e08:	20001114 	.word	0x20001114
 8013e0c:	20001010 	.word	0x20001010
 8013e10:	e000ed04 	.word	0xe000ed04

08013e14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d016      	beq.n	8013e54 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013e26:	4b13      	ldr	r3, [pc, #76]	; (8013e74 <vTaskDelay+0x60>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d009      	beq.n	8013e42 <vTaskDelay+0x2e>
 8013e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e32:	f383 8811 	msr	BASEPRI, r3
 8013e36:	f3bf 8f6f 	isb	sy
 8013e3a:	f3bf 8f4f 	dsb	sy
 8013e3e:	60bb      	str	r3, [r7, #8]
 8013e40:	e7fe      	b.n	8013e40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013e42:	f000 f879 	bl	8013f38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013e46:	2100      	movs	r1, #0
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 fe91 	bl	8014b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013e4e:	f000 f881 	bl	8013f54 <xTaskResumeAll>
 8013e52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d107      	bne.n	8013e6a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013e5a:	4b07      	ldr	r3, [pc, #28]	; (8013e78 <vTaskDelay+0x64>)
 8013e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e60:	601a      	str	r2, [r3, #0]
 8013e62:	f3bf 8f4f 	dsb	sy
 8013e66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e6a:	bf00      	nop
 8013e6c:	3710      	adds	r7, #16
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
 8013e72:	bf00      	nop
 8013e74:	20001134 	.word	0x20001134
 8013e78:	e000ed04 	.word	0xe000ed04

08013e7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b08a      	sub	sp, #40	; 0x28
 8013e80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013e82:	2300      	movs	r3, #0
 8013e84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013e86:	2300      	movs	r3, #0
 8013e88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013e8a:	463a      	mov	r2, r7
 8013e8c:	1d39      	adds	r1, r7, #4
 8013e8e:	f107 0308 	add.w	r3, r7, #8
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ee fa1e 	bl	80022d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013e98:	6839      	ldr	r1, [r7, #0]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	68ba      	ldr	r2, [r7, #8]
 8013e9e:	9202      	str	r2, [sp, #8]
 8013ea0:	9301      	str	r3, [sp, #4]
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	9300      	str	r3, [sp, #0]
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	460a      	mov	r2, r1
 8013eaa:	491d      	ldr	r1, [pc, #116]	; (8013f20 <vTaskStartScheduler+0xa4>)
 8013eac:	481d      	ldr	r0, [pc, #116]	; (8013f24 <vTaskStartScheduler+0xa8>)
 8013eae:	f7ff fe22 	bl	8013af6 <xTaskCreateStatic>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	4b1c      	ldr	r3, [pc, #112]	; (8013f28 <vTaskStartScheduler+0xac>)
 8013eb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013eb8:	4b1b      	ldr	r3, [pc, #108]	; (8013f28 <vTaskStartScheduler+0xac>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d002      	beq.n	8013ec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	617b      	str	r3, [r7, #20]
 8013ec4:	e001      	b.n	8013eca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d115      	bne.n	8013efc <vTaskStartScheduler+0x80>
 8013ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed4:	f383 8811 	msr	BASEPRI, r3
 8013ed8:	f3bf 8f6f 	isb	sy
 8013edc:	f3bf 8f4f 	dsb	sy
 8013ee0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ee2:	4b12      	ldr	r3, [pc, #72]	; (8013f2c <vTaskStartScheduler+0xb0>)
 8013ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013eea:	4b11      	ldr	r3, [pc, #68]	; (8013f30 <vTaskStartScheduler+0xb4>)
 8013eec:	2201      	movs	r2, #1
 8013eee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013ef0:	4b10      	ldr	r3, [pc, #64]	; (8013f34 <vTaskStartScheduler+0xb8>)
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013ef6:	f000 ff2b 	bl	8014d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013efa:	e00d      	b.n	8013f18 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f02:	d109      	bne.n	8013f18 <vTaskStartScheduler+0x9c>
 8013f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f08:	f383 8811 	msr	BASEPRI, r3
 8013f0c:	f3bf 8f6f 	isb	sy
 8013f10:	f3bf 8f4f 	dsb	sy
 8013f14:	60fb      	str	r3, [r7, #12]
 8013f16:	e7fe      	b.n	8013f16 <vTaskStartScheduler+0x9a>
}
 8013f18:	bf00      	nop
 8013f1a:	3718      	adds	r7, #24
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	0801b6c4 	.word	0x0801b6c4
 8013f24:	080144c1 	.word	0x080144c1
 8013f28:	20001130 	.word	0x20001130
 8013f2c:	2000112c 	.word	0x2000112c
 8013f30:	20001118 	.word	0x20001118
 8013f34:	20001110 	.word	0x20001110

08013f38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013f38:	b480      	push	{r7}
 8013f3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013f3c:	4b04      	ldr	r3, [pc, #16]	; (8013f50 <vTaskSuspendAll+0x18>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	3301      	adds	r3, #1
 8013f42:	4a03      	ldr	r2, [pc, #12]	; (8013f50 <vTaskSuspendAll+0x18>)
 8013f44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013f46:	bf00      	nop
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr
 8013f50:	20001134 	.word	0x20001134

08013f54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013f62:	4b41      	ldr	r3, [pc, #260]	; (8014068 <xTaskResumeAll+0x114>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d109      	bne.n	8013f7e <xTaskResumeAll+0x2a>
 8013f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f6e:	f383 8811 	msr	BASEPRI, r3
 8013f72:	f3bf 8f6f 	isb	sy
 8013f76:	f3bf 8f4f 	dsb	sy
 8013f7a:	603b      	str	r3, [r7, #0]
 8013f7c:	e7fe      	b.n	8013f7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013f7e:	f000 ff85 	bl	8014e8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013f82:	4b39      	ldr	r3, [pc, #228]	; (8014068 <xTaskResumeAll+0x114>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	3b01      	subs	r3, #1
 8013f88:	4a37      	ldr	r2, [pc, #220]	; (8014068 <xTaskResumeAll+0x114>)
 8013f8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f8c:	4b36      	ldr	r3, [pc, #216]	; (8014068 <xTaskResumeAll+0x114>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d161      	bne.n	8014058 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013f94:	4b35      	ldr	r3, [pc, #212]	; (801406c <xTaskResumeAll+0x118>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d05d      	beq.n	8014058 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f9c:	e02e      	b.n	8013ffc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f9e:	4b34      	ldr	r3, [pc, #208]	; (8014070 <xTaskResumeAll+0x11c>)
 8013fa0:	68db      	ldr	r3, [r3, #12]
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	3318      	adds	r3, #24
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fe fffb 	bl	8012fa6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	3304      	adds	r3, #4
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fe fff6 	bl	8012fa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	409a      	lsls	r2, r3
 8013fc2:	4b2c      	ldr	r3, [pc, #176]	; (8014074 <xTaskResumeAll+0x120>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	4313      	orrs	r3, r2
 8013fc8:	4a2a      	ldr	r2, [pc, #168]	; (8014074 <xTaskResumeAll+0x120>)
 8013fca:	6013      	str	r3, [r2, #0]
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	009b      	lsls	r3, r3, #2
 8013fd4:	4413      	add	r3, r2
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	4a27      	ldr	r2, [pc, #156]	; (8014078 <xTaskResumeAll+0x124>)
 8013fda:	441a      	add	r2, r3
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	3304      	adds	r3, #4
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	4610      	mov	r0, r2
 8013fe4:	f7fe ff82 	bl	8012eec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fec:	4b23      	ldr	r3, [pc, #140]	; (801407c <xTaskResumeAll+0x128>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d302      	bcc.n	8013ffc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013ff6:	4b22      	ldr	r3, [pc, #136]	; (8014080 <xTaskResumeAll+0x12c>)
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ffc:	4b1c      	ldr	r3, [pc, #112]	; (8014070 <xTaskResumeAll+0x11c>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1cc      	bne.n	8013f9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d001      	beq.n	801400e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801400a:	f000 fb0b 	bl	8014624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801400e:	4b1d      	ldr	r3, [pc, #116]	; (8014084 <xTaskResumeAll+0x130>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d010      	beq.n	801403c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801401a:	f000 f837 	bl	801408c <xTaskIncrementTick>
 801401e:	4603      	mov	r3, r0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d002      	beq.n	801402a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8014024:	4b16      	ldr	r3, [pc, #88]	; (8014080 <xTaskResumeAll+0x12c>)
 8014026:	2201      	movs	r2, #1
 8014028:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	3b01      	subs	r3, #1
 801402e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d1f1      	bne.n	801401a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8014036:	4b13      	ldr	r3, [pc, #76]	; (8014084 <xTaskResumeAll+0x130>)
 8014038:	2200      	movs	r2, #0
 801403a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801403c:	4b10      	ldr	r3, [pc, #64]	; (8014080 <xTaskResumeAll+0x12c>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d009      	beq.n	8014058 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014044:	2301      	movs	r3, #1
 8014046:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014048:	4b0f      	ldr	r3, [pc, #60]	; (8014088 <xTaskResumeAll+0x134>)
 801404a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801404e:	601a      	str	r2, [r3, #0]
 8014050:	f3bf 8f4f 	dsb	sy
 8014054:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014058:	f000 ff46 	bl	8014ee8 <vPortExitCritical>

	return xAlreadyYielded;
 801405c:	68bb      	ldr	r3, [r7, #8]
}
 801405e:	4618      	mov	r0, r3
 8014060:	3710      	adds	r7, #16
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	20001134 	.word	0x20001134
 801406c:	2000110c 	.word	0x2000110c
 8014070:	200010cc 	.word	0x200010cc
 8014074:	20001114 	.word	0x20001114
 8014078:	20001010 	.word	0x20001010
 801407c:	2000100c 	.word	0x2000100c
 8014080:	20001120 	.word	0x20001120
 8014084:	2000111c 	.word	0x2000111c
 8014088:	e000ed04 	.word	0xe000ed04

0801408c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b086      	sub	sp, #24
 8014090:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014092:	2300      	movs	r3, #0
 8014094:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014096:	4b4e      	ldr	r3, [pc, #312]	; (80141d0 <xTaskIncrementTick+0x144>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	f040 8087 	bne.w	80141ae <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80140a0:	4b4c      	ldr	r3, [pc, #304]	; (80141d4 <xTaskIncrementTick+0x148>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	3301      	adds	r3, #1
 80140a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80140a8:	4a4a      	ldr	r2, [pc, #296]	; (80141d4 <xTaskIncrementTick+0x148>)
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d11f      	bne.n	80140f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80140b4:	4b48      	ldr	r3, [pc, #288]	; (80141d8 <xTaskIncrementTick+0x14c>)
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d009      	beq.n	80140d2 <xTaskIncrementTick+0x46>
 80140be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	603b      	str	r3, [r7, #0]
 80140d0:	e7fe      	b.n	80140d0 <xTaskIncrementTick+0x44>
 80140d2:	4b41      	ldr	r3, [pc, #260]	; (80141d8 <xTaskIncrementTick+0x14c>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	60fb      	str	r3, [r7, #12]
 80140d8:	4b40      	ldr	r3, [pc, #256]	; (80141dc <xTaskIncrementTick+0x150>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	4a3e      	ldr	r2, [pc, #248]	; (80141d8 <xTaskIncrementTick+0x14c>)
 80140de:	6013      	str	r3, [r2, #0]
 80140e0:	4a3e      	ldr	r2, [pc, #248]	; (80141dc <xTaskIncrementTick+0x150>)
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	6013      	str	r3, [r2, #0]
 80140e6:	4b3e      	ldr	r3, [pc, #248]	; (80141e0 <xTaskIncrementTick+0x154>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	3301      	adds	r3, #1
 80140ec:	4a3c      	ldr	r2, [pc, #240]	; (80141e0 <xTaskIncrementTick+0x154>)
 80140ee:	6013      	str	r3, [r2, #0]
 80140f0:	f000 fa98 	bl	8014624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80140f4:	4b3b      	ldr	r3, [pc, #236]	; (80141e4 <xTaskIncrementTick+0x158>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	693a      	ldr	r2, [r7, #16]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d348      	bcc.n	8014190 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140fe:	4b36      	ldr	r3, [pc, #216]	; (80141d8 <xTaskIncrementTick+0x14c>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d104      	bne.n	8014112 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014108:	4b36      	ldr	r3, [pc, #216]	; (80141e4 <xTaskIncrementTick+0x158>)
 801410a:	f04f 32ff 	mov.w	r2, #4294967295
 801410e:	601a      	str	r2, [r3, #0]
					break;
 8014110:	e03e      	b.n	8014190 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014112:	4b31      	ldr	r3, [pc, #196]	; (80141d8 <xTaskIncrementTick+0x14c>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	68db      	ldr	r3, [r3, #12]
 801411a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014122:	693a      	ldr	r2, [r7, #16]
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	429a      	cmp	r2, r3
 8014128:	d203      	bcs.n	8014132 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801412a:	4a2e      	ldr	r2, [pc, #184]	; (80141e4 <xTaskIncrementTick+0x158>)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014130:	e02e      	b.n	8014190 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	3304      	adds	r3, #4
 8014136:	4618      	mov	r0, r3
 8014138:	f7fe ff35 	bl	8012fa6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014140:	2b00      	cmp	r3, #0
 8014142:	d004      	beq.n	801414e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	3318      	adds	r3, #24
 8014148:	4618      	mov	r0, r3
 801414a:	f7fe ff2c 	bl	8012fa6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014152:	2201      	movs	r2, #1
 8014154:	409a      	lsls	r2, r3
 8014156:	4b24      	ldr	r3, [pc, #144]	; (80141e8 <xTaskIncrementTick+0x15c>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	4313      	orrs	r3, r2
 801415c:	4a22      	ldr	r2, [pc, #136]	; (80141e8 <xTaskIncrementTick+0x15c>)
 801415e:	6013      	str	r3, [r2, #0]
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014164:	4613      	mov	r3, r2
 8014166:	009b      	lsls	r3, r3, #2
 8014168:	4413      	add	r3, r2
 801416a:	009b      	lsls	r3, r3, #2
 801416c:	4a1f      	ldr	r2, [pc, #124]	; (80141ec <xTaskIncrementTick+0x160>)
 801416e:	441a      	add	r2, r3
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	3304      	adds	r3, #4
 8014174:	4619      	mov	r1, r3
 8014176:	4610      	mov	r0, r2
 8014178:	f7fe feb8 	bl	8012eec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014180:	4b1b      	ldr	r3, [pc, #108]	; (80141f0 <xTaskIncrementTick+0x164>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014186:	429a      	cmp	r2, r3
 8014188:	d3b9      	bcc.n	80140fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801418a:	2301      	movs	r3, #1
 801418c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801418e:	e7b6      	b.n	80140fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014190:	4b17      	ldr	r3, [pc, #92]	; (80141f0 <xTaskIncrementTick+0x164>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014196:	4915      	ldr	r1, [pc, #84]	; (80141ec <xTaskIncrementTick+0x160>)
 8014198:	4613      	mov	r3, r2
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4413      	add	r3, r2
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	440b      	add	r3, r1
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2b01      	cmp	r3, #1
 80141a6:	d907      	bls.n	80141b8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80141a8:	2301      	movs	r3, #1
 80141aa:	617b      	str	r3, [r7, #20]
 80141ac:	e004      	b.n	80141b8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80141ae:	4b11      	ldr	r3, [pc, #68]	; (80141f4 <xTaskIncrementTick+0x168>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	3301      	adds	r3, #1
 80141b4:	4a0f      	ldr	r2, [pc, #60]	; (80141f4 <xTaskIncrementTick+0x168>)
 80141b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80141b8:	4b0f      	ldr	r3, [pc, #60]	; (80141f8 <xTaskIncrementTick+0x16c>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d001      	beq.n	80141c4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80141c0:	2301      	movs	r3, #1
 80141c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80141c4:	697b      	ldr	r3, [r7, #20]
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3718      	adds	r7, #24
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
 80141ce:	bf00      	nop
 80141d0:	20001134 	.word	0x20001134
 80141d4:	20001110 	.word	0x20001110
 80141d8:	200010c4 	.word	0x200010c4
 80141dc:	200010c8 	.word	0x200010c8
 80141e0:	20001124 	.word	0x20001124
 80141e4:	2000112c 	.word	0x2000112c
 80141e8:	20001114 	.word	0x20001114
 80141ec:	20001010 	.word	0x20001010
 80141f0:	2000100c 	.word	0x2000100c
 80141f4:	2000111c 	.word	0x2000111c
 80141f8:	20001120 	.word	0x20001120

080141fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80141fc:	b480      	push	{r7}
 80141fe:	b087      	sub	sp, #28
 8014200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014202:	4b26      	ldr	r3, [pc, #152]	; (801429c <vTaskSwitchContext+0xa0>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d003      	beq.n	8014212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801420a:	4b25      	ldr	r3, [pc, #148]	; (80142a0 <vTaskSwitchContext+0xa4>)
 801420c:	2201      	movs	r2, #1
 801420e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014210:	e03e      	b.n	8014290 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8014212:	4b23      	ldr	r3, [pc, #140]	; (80142a0 <vTaskSwitchContext+0xa4>)
 8014214:	2200      	movs	r2, #0
 8014216:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014218:	4b22      	ldr	r3, [pc, #136]	; (80142a4 <vTaskSwitchContext+0xa8>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	fab3 f383 	clz	r3, r3
 8014224:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014226:	7afb      	ldrb	r3, [r7, #11]
 8014228:	f1c3 031f 	rsb	r3, r3, #31
 801422c:	617b      	str	r3, [r7, #20]
 801422e:	491e      	ldr	r1, [pc, #120]	; (80142a8 <vTaskSwitchContext+0xac>)
 8014230:	697a      	ldr	r2, [r7, #20]
 8014232:	4613      	mov	r3, r2
 8014234:	009b      	lsls	r3, r3, #2
 8014236:	4413      	add	r3, r2
 8014238:	009b      	lsls	r3, r3, #2
 801423a:	440b      	add	r3, r1
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d109      	bne.n	8014256 <vTaskSwitchContext+0x5a>
	__asm volatile
 8014242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014246:	f383 8811 	msr	BASEPRI, r3
 801424a:	f3bf 8f6f 	isb	sy
 801424e:	f3bf 8f4f 	dsb	sy
 8014252:	607b      	str	r3, [r7, #4]
 8014254:	e7fe      	b.n	8014254 <vTaskSwitchContext+0x58>
 8014256:	697a      	ldr	r2, [r7, #20]
 8014258:	4613      	mov	r3, r2
 801425a:	009b      	lsls	r3, r3, #2
 801425c:	4413      	add	r3, r2
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	4a11      	ldr	r2, [pc, #68]	; (80142a8 <vTaskSwitchContext+0xac>)
 8014262:	4413      	add	r3, r2
 8014264:	613b      	str	r3, [r7, #16]
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	685b      	ldr	r3, [r3, #4]
 801426a:	685a      	ldr	r2, [r3, #4]
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	605a      	str	r2, [r3, #4]
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	685a      	ldr	r2, [r3, #4]
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	3308      	adds	r3, #8
 8014278:	429a      	cmp	r2, r3
 801427a:	d104      	bne.n	8014286 <vTaskSwitchContext+0x8a>
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	685a      	ldr	r2, [r3, #4]
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	605a      	str	r2, [r3, #4]
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	4a07      	ldr	r2, [pc, #28]	; (80142ac <vTaskSwitchContext+0xb0>)
 801428e:	6013      	str	r3, [r2, #0]
}
 8014290:	bf00      	nop
 8014292:	371c      	adds	r7, #28
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr
 801429c:	20001134 	.word	0x20001134
 80142a0:	20001120 	.word	0x20001120
 80142a4:	20001114 	.word	0x20001114
 80142a8:	20001010 	.word	0x20001010
 80142ac:	2000100c 	.word	0x2000100c

080142b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d109      	bne.n	80142d4 <vTaskPlaceOnEventList+0x24>
 80142c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c4:	f383 8811 	msr	BASEPRI, r3
 80142c8:	f3bf 8f6f 	isb	sy
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	60fb      	str	r3, [r7, #12]
 80142d2:	e7fe      	b.n	80142d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142d4:	4b07      	ldr	r3, [pc, #28]	; (80142f4 <vTaskPlaceOnEventList+0x44>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	3318      	adds	r3, #24
 80142da:	4619      	mov	r1, r3
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f7fe fe29 	bl	8012f34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80142e2:	2101      	movs	r1, #1
 80142e4:	6838      	ldr	r0, [r7, #0]
 80142e6:	f000 fc43 	bl	8014b70 <prvAddCurrentTaskToDelayedList>
}
 80142ea:	bf00      	nop
 80142ec:	3710      	adds	r7, #16
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	2000100c 	.word	0x2000100c

080142f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b086      	sub	sp, #24
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	68db      	ldr	r3, [r3, #12]
 8014306:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d109      	bne.n	8014322 <xTaskRemoveFromEventList+0x2a>
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	60fb      	str	r3, [r7, #12]
 8014320:	e7fe      	b.n	8014320 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	3318      	adds	r3, #24
 8014326:	4618      	mov	r0, r3
 8014328:	f7fe fe3d 	bl	8012fa6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801432c:	4b1d      	ldr	r3, [pc, #116]	; (80143a4 <xTaskRemoveFromEventList+0xac>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d11c      	bne.n	801436e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	3304      	adds	r3, #4
 8014338:	4618      	mov	r0, r3
 801433a:	f7fe fe34 	bl	8012fa6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014342:	2201      	movs	r2, #1
 8014344:	409a      	lsls	r2, r3
 8014346:	4b18      	ldr	r3, [pc, #96]	; (80143a8 <xTaskRemoveFromEventList+0xb0>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	4313      	orrs	r3, r2
 801434c:	4a16      	ldr	r2, [pc, #88]	; (80143a8 <xTaskRemoveFromEventList+0xb0>)
 801434e:	6013      	str	r3, [r2, #0]
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014354:	4613      	mov	r3, r2
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	4413      	add	r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	4a13      	ldr	r2, [pc, #76]	; (80143ac <xTaskRemoveFromEventList+0xb4>)
 801435e:	441a      	add	r2, r3
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	3304      	adds	r3, #4
 8014364:	4619      	mov	r1, r3
 8014366:	4610      	mov	r0, r2
 8014368:	f7fe fdc0 	bl	8012eec <vListInsertEnd>
 801436c:	e005      	b.n	801437a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	3318      	adds	r3, #24
 8014372:	4619      	mov	r1, r3
 8014374:	480e      	ldr	r0, [pc, #56]	; (80143b0 <xTaskRemoveFromEventList+0xb8>)
 8014376:	f7fe fdb9 	bl	8012eec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801437e:	4b0d      	ldr	r3, [pc, #52]	; (80143b4 <xTaskRemoveFromEventList+0xbc>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014384:	429a      	cmp	r2, r3
 8014386:	d905      	bls.n	8014394 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014388:	2301      	movs	r3, #1
 801438a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801438c:	4b0a      	ldr	r3, [pc, #40]	; (80143b8 <xTaskRemoveFromEventList+0xc0>)
 801438e:	2201      	movs	r2, #1
 8014390:	601a      	str	r2, [r3, #0]
 8014392:	e001      	b.n	8014398 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8014394:	2300      	movs	r3, #0
 8014396:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014398:	697b      	ldr	r3, [r7, #20]
}
 801439a:	4618      	mov	r0, r3
 801439c:	3718      	adds	r7, #24
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}
 80143a2:	bf00      	nop
 80143a4:	20001134 	.word	0x20001134
 80143a8:	20001114 	.word	0x20001114
 80143ac:	20001010 	.word	0x20001010
 80143b0:	200010cc 	.word	0x200010cc
 80143b4:	2000100c 	.word	0x2000100c
 80143b8:	20001120 	.word	0x20001120

080143bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80143c4:	4b06      	ldr	r3, [pc, #24]	; (80143e0 <vTaskInternalSetTimeOutState+0x24>)
 80143c6:	681a      	ldr	r2, [r3, #0]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80143cc:	4b05      	ldr	r3, [pc, #20]	; (80143e4 <vTaskInternalSetTimeOutState+0x28>)
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	605a      	str	r2, [r3, #4]
}
 80143d4:	bf00      	nop
 80143d6:	370c      	adds	r7, #12
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr
 80143e0:	20001124 	.word	0x20001124
 80143e4:	20001110 	.word	0x20001110

080143e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b088      	sub	sp, #32
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d109      	bne.n	801440c <xTaskCheckForTimeOut+0x24>
 80143f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fc:	f383 8811 	msr	BASEPRI, r3
 8014400:	f3bf 8f6f 	isb	sy
 8014404:	f3bf 8f4f 	dsb	sy
 8014408:	613b      	str	r3, [r7, #16]
 801440a:	e7fe      	b.n	801440a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d109      	bne.n	8014426 <xTaskCheckForTimeOut+0x3e>
 8014412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014416:	f383 8811 	msr	BASEPRI, r3
 801441a:	f3bf 8f6f 	isb	sy
 801441e:	f3bf 8f4f 	dsb	sy
 8014422:	60fb      	str	r3, [r7, #12]
 8014424:	e7fe      	b.n	8014424 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8014426:	f000 fd31 	bl	8014e8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801442a:	4b1d      	ldr	r3, [pc, #116]	; (80144a0 <xTaskCheckForTimeOut+0xb8>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	69ba      	ldr	r2, [r7, #24]
 8014436:	1ad3      	subs	r3, r2, r3
 8014438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014442:	d102      	bne.n	801444a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014444:	2300      	movs	r3, #0
 8014446:	61fb      	str	r3, [r7, #28]
 8014448:	e023      	b.n	8014492 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	4b15      	ldr	r3, [pc, #84]	; (80144a4 <xTaskCheckForTimeOut+0xbc>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	429a      	cmp	r2, r3
 8014454:	d007      	beq.n	8014466 <xTaskCheckForTimeOut+0x7e>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	69ba      	ldr	r2, [r7, #24]
 801445c:	429a      	cmp	r2, r3
 801445e:	d302      	bcc.n	8014466 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014460:	2301      	movs	r3, #1
 8014462:	61fb      	str	r3, [r7, #28]
 8014464:	e015      	b.n	8014492 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	697a      	ldr	r2, [r7, #20]
 801446c:	429a      	cmp	r2, r3
 801446e:	d20b      	bcs.n	8014488 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	681a      	ldr	r2, [r3, #0]
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	1ad2      	subs	r2, r2, r3
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f7ff ff9d 	bl	80143bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014482:	2300      	movs	r3, #0
 8014484:	61fb      	str	r3, [r7, #28]
 8014486:	e004      	b.n	8014492 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	2200      	movs	r2, #0
 801448c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801448e:	2301      	movs	r3, #1
 8014490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014492:	f000 fd29 	bl	8014ee8 <vPortExitCritical>

	return xReturn;
 8014496:	69fb      	ldr	r3, [r7, #28]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3720      	adds	r7, #32
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	20001110 	.word	0x20001110
 80144a4:	20001124 	.word	0x20001124

080144a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80144a8:	b480      	push	{r7}
 80144aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80144ac:	4b03      	ldr	r3, [pc, #12]	; (80144bc <vTaskMissedYield+0x14>)
 80144ae:	2201      	movs	r2, #1
 80144b0:	601a      	str	r2, [r3, #0]
}
 80144b2:	bf00      	nop
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr
 80144bc:	20001120 	.word	0x20001120

080144c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80144c8:	f000 f852 	bl	8014570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80144cc:	4b06      	ldr	r3, [pc, #24]	; (80144e8 <prvIdleTask+0x28>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2b01      	cmp	r3, #1
 80144d2:	d9f9      	bls.n	80144c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80144d4:	4b05      	ldr	r3, [pc, #20]	; (80144ec <prvIdleTask+0x2c>)
 80144d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144da:	601a      	str	r2, [r3, #0]
 80144dc:	f3bf 8f4f 	dsb	sy
 80144e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80144e4:	e7f0      	b.n	80144c8 <prvIdleTask+0x8>
 80144e6:	bf00      	nop
 80144e8:	20001010 	.word	0x20001010
 80144ec:	e000ed04 	.word	0xe000ed04

080144f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144f6:	2300      	movs	r3, #0
 80144f8:	607b      	str	r3, [r7, #4]
 80144fa:	e00c      	b.n	8014516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	4613      	mov	r3, r2
 8014500:	009b      	lsls	r3, r3, #2
 8014502:	4413      	add	r3, r2
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	4a12      	ldr	r2, [pc, #72]	; (8014550 <prvInitialiseTaskLists+0x60>)
 8014508:	4413      	add	r3, r2
 801450a:	4618      	mov	r0, r3
 801450c:	f7fe fcc1 	bl	8012e92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	3301      	adds	r3, #1
 8014514:	607b      	str	r3, [r7, #4]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2b06      	cmp	r3, #6
 801451a:	d9ef      	bls.n	80144fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801451c:	480d      	ldr	r0, [pc, #52]	; (8014554 <prvInitialiseTaskLists+0x64>)
 801451e:	f7fe fcb8 	bl	8012e92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014522:	480d      	ldr	r0, [pc, #52]	; (8014558 <prvInitialiseTaskLists+0x68>)
 8014524:	f7fe fcb5 	bl	8012e92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014528:	480c      	ldr	r0, [pc, #48]	; (801455c <prvInitialiseTaskLists+0x6c>)
 801452a:	f7fe fcb2 	bl	8012e92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801452e:	480c      	ldr	r0, [pc, #48]	; (8014560 <prvInitialiseTaskLists+0x70>)
 8014530:	f7fe fcaf 	bl	8012e92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014534:	480b      	ldr	r0, [pc, #44]	; (8014564 <prvInitialiseTaskLists+0x74>)
 8014536:	f7fe fcac 	bl	8012e92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801453a:	4b0b      	ldr	r3, [pc, #44]	; (8014568 <prvInitialiseTaskLists+0x78>)
 801453c:	4a05      	ldr	r2, [pc, #20]	; (8014554 <prvInitialiseTaskLists+0x64>)
 801453e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014540:	4b0a      	ldr	r3, [pc, #40]	; (801456c <prvInitialiseTaskLists+0x7c>)
 8014542:	4a05      	ldr	r2, [pc, #20]	; (8014558 <prvInitialiseTaskLists+0x68>)
 8014544:	601a      	str	r2, [r3, #0]
}
 8014546:	bf00      	nop
 8014548:	3708      	adds	r7, #8
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	20001010 	.word	0x20001010
 8014554:	2000109c 	.word	0x2000109c
 8014558:	200010b0 	.word	0x200010b0
 801455c:	200010cc 	.word	0x200010cc
 8014560:	200010e0 	.word	0x200010e0
 8014564:	200010f8 	.word	0x200010f8
 8014568:	200010c4 	.word	0x200010c4
 801456c:	200010c8 	.word	0x200010c8

08014570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014576:	e019      	b.n	80145ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014578:	f000 fc88 	bl	8014e8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801457c:	4b0f      	ldr	r3, [pc, #60]	; (80145bc <prvCheckTasksWaitingTermination+0x4c>)
 801457e:	68db      	ldr	r3, [r3, #12]
 8014580:	68db      	ldr	r3, [r3, #12]
 8014582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	3304      	adds	r3, #4
 8014588:	4618      	mov	r0, r3
 801458a:	f7fe fd0c 	bl	8012fa6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801458e:	4b0c      	ldr	r3, [pc, #48]	; (80145c0 <prvCheckTasksWaitingTermination+0x50>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	3b01      	subs	r3, #1
 8014594:	4a0a      	ldr	r2, [pc, #40]	; (80145c0 <prvCheckTasksWaitingTermination+0x50>)
 8014596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014598:	4b0a      	ldr	r3, [pc, #40]	; (80145c4 <prvCheckTasksWaitingTermination+0x54>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	3b01      	subs	r3, #1
 801459e:	4a09      	ldr	r2, [pc, #36]	; (80145c4 <prvCheckTasksWaitingTermination+0x54>)
 80145a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80145a2:	f000 fca1 	bl	8014ee8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f000 f80e 	bl	80145c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80145ac:	4b05      	ldr	r3, [pc, #20]	; (80145c4 <prvCheckTasksWaitingTermination+0x54>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d1e1      	bne.n	8014578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80145b4:	bf00      	nop
 80145b6:	3708      	adds	r7, #8
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}
 80145bc:	200010e0 	.word	0x200010e0
 80145c0:	2000110c 	.word	0x2000110c
 80145c4:	200010f4 	.word	0x200010f4

080145c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b084      	sub	sp, #16
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d108      	bne.n	80145ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145de:	4618      	mov	r0, r3
 80145e0:	f000 fe30 	bl	8015244 <vPortFree>
				vPortFree( pxTCB );
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f000 fe2d 	bl	8015244 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80145ea:	e017      	b.n	801461c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	d103      	bne.n	80145fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 fe24 	bl	8015244 <vPortFree>
	}
 80145fc:	e00e      	b.n	801461c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014604:	2b02      	cmp	r3, #2
 8014606:	d009      	beq.n	801461c <prvDeleteTCB+0x54>
 8014608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460c:	f383 8811 	msr	BASEPRI, r3
 8014610:	f3bf 8f6f 	isb	sy
 8014614:	f3bf 8f4f 	dsb	sy
 8014618:	60fb      	str	r3, [r7, #12]
 801461a:	e7fe      	b.n	801461a <prvDeleteTCB+0x52>
	}
 801461c:	bf00      	nop
 801461e:	3710      	adds	r7, #16
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014624:	b480      	push	{r7}
 8014626:	b083      	sub	sp, #12
 8014628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801462a:	4b0c      	ldr	r3, [pc, #48]	; (801465c <prvResetNextTaskUnblockTime+0x38>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d104      	bne.n	801463e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014634:	4b0a      	ldr	r3, [pc, #40]	; (8014660 <prvResetNextTaskUnblockTime+0x3c>)
 8014636:	f04f 32ff 	mov.w	r2, #4294967295
 801463a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801463c:	e008      	b.n	8014650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801463e:	4b07      	ldr	r3, [pc, #28]	; (801465c <prvResetNextTaskUnblockTime+0x38>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	68db      	ldr	r3, [r3, #12]
 8014646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	685b      	ldr	r3, [r3, #4]
 801464c:	4a04      	ldr	r2, [pc, #16]	; (8014660 <prvResetNextTaskUnblockTime+0x3c>)
 801464e:	6013      	str	r3, [r2, #0]
}
 8014650:	bf00      	nop
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	200010c4 	.word	0x200010c4
 8014660:	2000112c 	.word	0x2000112c

08014664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014664:	b480      	push	{r7}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801466a:	4b0b      	ldr	r3, [pc, #44]	; (8014698 <xTaskGetSchedulerState+0x34>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d102      	bne.n	8014678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014672:	2301      	movs	r3, #1
 8014674:	607b      	str	r3, [r7, #4]
 8014676:	e008      	b.n	801468a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014678:	4b08      	ldr	r3, [pc, #32]	; (801469c <xTaskGetSchedulerState+0x38>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d102      	bne.n	8014686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014680:	2302      	movs	r3, #2
 8014682:	607b      	str	r3, [r7, #4]
 8014684:	e001      	b.n	801468a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014686:	2300      	movs	r3, #0
 8014688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801468a:	687b      	ldr	r3, [r7, #4]
	}
 801468c:	4618      	mov	r0, r3
 801468e:	370c      	adds	r7, #12
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr
 8014698:	20001118 	.word	0x20001118
 801469c:	20001134 	.word	0x20001134

080146a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b086      	sub	sp, #24
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80146ac:	2300      	movs	r3, #0
 80146ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d06c      	beq.n	8014790 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80146b6:	4b39      	ldr	r3, [pc, #228]	; (801479c <xTaskPriorityDisinherit+0xfc>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	693a      	ldr	r2, [r7, #16]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d009      	beq.n	80146d4 <xTaskPriorityDisinherit+0x34>
 80146c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c4:	f383 8811 	msr	BASEPRI, r3
 80146c8:	f3bf 8f6f 	isb	sy
 80146cc:	f3bf 8f4f 	dsb	sy
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	e7fe      	b.n	80146d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d109      	bne.n	80146f0 <xTaskPriorityDisinherit+0x50>
 80146dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e0:	f383 8811 	msr	BASEPRI, r3
 80146e4:	f3bf 8f6f 	isb	sy
 80146e8:	f3bf 8f4f 	dsb	sy
 80146ec:	60bb      	str	r3, [r7, #8]
 80146ee:	e7fe      	b.n	80146ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146f4:	1e5a      	subs	r2, r3, #1
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014702:	429a      	cmp	r2, r3
 8014704:	d044      	beq.n	8014790 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801470a:	2b00      	cmp	r3, #0
 801470c:	d140      	bne.n	8014790 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	3304      	adds	r3, #4
 8014712:	4618      	mov	r0, r3
 8014714:	f7fe fc47 	bl	8012fa6 <uxListRemove>
 8014718:	4603      	mov	r3, r0
 801471a:	2b00      	cmp	r3, #0
 801471c:	d115      	bne.n	801474a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014722:	491f      	ldr	r1, [pc, #124]	; (80147a0 <xTaskPriorityDisinherit+0x100>)
 8014724:	4613      	mov	r3, r2
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	4413      	add	r3, r2
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	440b      	add	r3, r1
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d10a      	bne.n	801474a <xTaskPriorityDisinherit+0xaa>
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014738:	2201      	movs	r2, #1
 801473a:	fa02 f303 	lsl.w	r3, r2, r3
 801473e:	43da      	mvns	r2, r3
 8014740:	4b18      	ldr	r3, [pc, #96]	; (80147a4 <xTaskPriorityDisinherit+0x104>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4013      	ands	r3, r2
 8014746:	4a17      	ldr	r2, [pc, #92]	; (80147a4 <xTaskPriorityDisinherit+0x104>)
 8014748:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014756:	f1c3 0207 	rsb	r2, r3, #7
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014762:	2201      	movs	r2, #1
 8014764:	409a      	lsls	r2, r3
 8014766:	4b0f      	ldr	r3, [pc, #60]	; (80147a4 <xTaskPriorityDisinherit+0x104>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4313      	orrs	r3, r2
 801476c:	4a0d      	ldr	r2, [pc, #52]	; (80147a4 <xTaskPriorityDisinherit+0x104>)
 801476e:	6013      	str	r3, [r2, #0]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014774:	4613      	mov	r3, r2
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	4413      	add	r3, r2
 801477a:	009b      	lsls	r3, r3, #2
 801477c:	4a08      	ldr	r2, [pc, #32]	; (80147a0 <xTaskPriorityDisinherit+0x100>)
 801477e:	441a      	add	r2, r3
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	3304      	adds	r3, #4
 8014784:	4619      	mov	r1, r3
 8014786:	4610      	mov	r0, r2
 8014788:	f7fe fbb0 	bl	8012eec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801478c:	2301      	movs	r3, #1
 801478e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014790:	697b      	ldr	r3, [r7, #20]
	}
 8014792:	4618      	mov	r0, r3
 8014794:	3718      	adds	r7, #24
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	2000100c 	.word	0x2000100c
 80147a0:	20001010 	.word	0x20001010
 80147a4:	20001114 	.word	0x20001114

080147a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b086      	sub	sp, #24
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
 80147b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80147b6:	f000 fb69 	bl	8014e8c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80147ba:	4b26      	ldr	r3, [pc, #152]	; (8014854 <xTaskNotifyWait+0xac>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	2b02      	cmp	r3, #2
 80147c6:	d01a      	beq.n	80147fe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80147c8:	4b22      	ldr	r3, [pc, #136]	; (8014854 <xTaskNotifyWait+0xac>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80147ce:	68fa      	ldr	r2, [r7, #12]
 80147d0:	43d2      	mvns	r2, r2
 80147d2:	400a      	ands	r2, r1
 80147d4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80147d6:	4b1f      	ldr	r3, [pc, #124]	; (8014854 <xTaskNotifyWait+0xac>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	2201      	movs	r2, #1
 80147dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d00b      	beq.n	80147fe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147e6:	2101      	movs	r1, #1
 80147e8:	6838      	ldr	r0, [r7, #0]
 80147ea:	f000 f9c1 	bl	8014b70 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80147ee:	4b1a      	ldr	r3, [pc, #104]	; (8014858 <xTaskNotifyWait+0xb0>)
 80147f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147f4:	601a      	str	r2, [r3, #0]
 80147f6:	f3bf 8f4f 	dsb	sy
 80147fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80147fe:	f000 fb73 	bl	8014ee8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014802:	f000 fb43 	bl	8014e8c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d004      	beq.n	8014816 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801480c:	4b11      	ldr	r3, [pc, #68]	; (8014854 <xTaskNotifyWait+0xac>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014816:	4b0f      	ldr	r3, [pc, #60]	; (8014854 <xTaskNotifyWait+0xac>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801481e:	b2db      	uxtb	r3, r3
 8014820:	2b02      	cmp	r3, #2
 8014822:	d002      	beq.n	801482a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014824:	2300      	movs	r3, #0
 8014826:	617b      	str	r3, [r7, #20]
 8014828:	e008      	b.n	801483c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801482a:	4b0a      	ldr	r3, [pc, #40]	; (8014854 <xTaskNotifyWait+0xac>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	43d2      	mvns	r2, r2
 8014834:	400a      	ands	r2, r1
 8014836:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014838:	2301      	movs	r3, #1
 801483a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801483c:	4b05      	ldr	r3, [pc, #20]	; (8014854 <xTaskNotifyWait+0xac>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	2200      	movs	r2, #0
 8014842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014846:	f000 fb4f 	bl	8014ee8 <vPortExitCritical>

		return xReturn;
 801484a:	697b      	ldr	r3, [r7, #20]
	}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	2000100c 	.word	0x2000100c
 8014858:	e000ed04 	.word	0xe000ed04

0801485c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801485c:	b580      	push	{r7, lr}
 801485e:	b08a      	sub	sp, #40	; 0x28
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	603b      	str	r3, [r7, #0]
 8014868:	4613      	mov	r3, r2
 801486a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801486c:	2301      	movs	r3, #1
 801486e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d109      	bne.n	801488a <xTaskGenericNotify+0x2e>
 8014876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801487a:	f383 8811 	msr	BASEPRI, r3
 801487e:	f3bf 8f6f 	isb	sy
 8014882:	f3bf 8f4f 	dsb	sy
 8014886:	61bb      	str	r3, [r7, #24]
 8014888:	e7fe      	b.n	8014888 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801488e:	f000 fafd 	bl	8014e8c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d003      	beq.n	80148a0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014898:	6a3b      	ldr	r3, [r7, #32]
 801489a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80148a0:	6a3b      	ldr	r3, [r7, #32]
 80148a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80148a6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80148a8:	6a3b      	ldr	r3, [r7, #32]
 80148aa:	2202      	movs	r2, #2
 80148ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	2b04      	cmp	r3, #4
 80148b4:	d827      	bhi.n	8014906 <xTaskGenericNotify+0xaa>
 80148b6:	a201      	add	r2, pc, #4	; (adr r2, 80148bc <xTaskGenericNotify+0x60>)
 80148b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148bc:	08014925 	.word	0x08014925
 80148c0:	080148d1 	.word	0x080148d1
 80148c4:	080148df 	.word	0x080148df
 80148c8:	080148eb 	.word	0x080148eb
 80148cc:	080148f3 	.word	0x080148f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80148d0:	6a3b      	ldr	r3, [r7, #32]
 80148d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	431a      	orrs	r2, r3
 80148d8:	6a3b      	ldr	r3, [r7, #32]
 80148da:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148dc:	e025      	b.n	801492a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80148de:	6a3b      	ldr	r3, [r7, #32]
 80148e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148e2:	1c5a      	adds	r2, r3, #1
 80148e4:	6a3b      	ldr	r3, [r7, #32]
 80148e6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148e8:	e01f      	b.n	801492a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80148ea:	6a3b      	ldr	r3, [r7, #32]
 80148ec:	68ba      	ldr	r2, [r7, #8]
 80148ee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148f0:	e01b      	b.n	801492a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80148f2:	7ffb      	ldrb	r3, [r7, #31]
 80148f4:	2b02      	cmp	r3, #2
 80148f6:	d003      	beq.n	8014900 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80148f8:	6a3b      	ldr	r3, [r7, #32]
 80148fa:	68ba      	ldr	r2, [r7, #8]
 80148fc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80148fe:	e014      	b.n	801492a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8014900:	2300      	movs	r3, #0
 8014902:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014904:	e011      	b.n	801492a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014906:	6a3b      	ldr	r3, [r7, #32]
 8014908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801490e:	d00b      	beq.n	8014928 <xTaskGenericNotify+0xcc>
 8014910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014914:	f383 8811 	msr	BASEPRI, r3
 8014918:	f3bf 8f6f 	isb	sy
 801491c:	f3bf 8f4f 	dsb	sy
 8014920:	617b      	str	r3, [r7, #20]
 8014922:	e7fe      	b.n	8014922 <xTaskGenericNotify+0xc6>
					break;
 8014924:	bf00      	nop
 8014926:	e000      	b.n	801492a <xTaskGenericNotify+0xce>

					break;
 8014928:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801492a:	7ffb      	ldrb	r3, [r7, #31]
 801492c:	2b01      	cmp	r3, #1
 801492e:	d138      	bne.n	80149a2 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014930:	6a3b      	ldr	r3, [r7, #32]
 8014932:	3304      	adds	r3, #4
 8014934:	4618      	mov	r0, r3
 8014936:	f7fe fb36 	bl	8012fa6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801493a:	6a3b      	ldr	r3, [r7, #32]
 801493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801493e:	2201      	movs	r2, #1
 8014940:	409a      	lsls	r2, r3
 8014942:	4b1b      	ldr	r3, [pc, #108]	; (80149b0 <xTaskGenericNotify+0x154>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	4313      	orrs	r3, r2
 8014948:	4a19      	ldr	r2, [pc, #100]	; (80149b0 <xTaskGenericNotify+0x154>)
 801494a:	6013      	str	r3, [r2, #0]
 801494c:	6a3b      	ldr	r3, [r7, #32]
 801494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014950:	4613      	mov	r3, r2
 8014952:	009b      	lsls	r3, r3, #2
 8014954:	4413      	add	r3, r2
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	4a16      	ldr	r2, [pc, #88]	; (80149b4 <xTaskGenericNotify+0x158>)
 801495a:	441a      	add	r2, r3
 801495c:	6a3b      	ldr	r3, [r7, #32]
 801495e:	3304      	adds	r3, #4
 8014960:	4619      	mov	r1, r3
 8014962:	4610      	mov	r0, r2
 8014964:	f7fe fac2 	bl	8012eec <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014968:	6a3b      	ldr	r3, [r7, #32]
 801496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801496c:	2b00      	cmp	r3, #0
 801496e:	d009      	beq.n	8014984 <xTaskGenericNotify+0x128>
 8014970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014974:	f383 8811 	msr	BASEPRI, r3
 8014978:	f3bf 8f6f 	isb	sy
 801497c:	f3bf 8f4f 	dsb	sy
 8014980:	613b      	str	r3, [r7, #16]
 8014982:	e7fe      	b.n	8014982 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014984:	6a3b      	ldr	r3, [r7, #32]
 8014986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014988:	4b0b      	ldr	r3, [pc, #44]	; (80149b8 <xTaskGenericNotify+0x15c>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801498e:	429a      	cmp	r2, r3
 8014990:	d907      	bls.n	80149a2 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014992:	4b0a      	ldr	r3, [pc, #40]	; (80149bc <xTaskGenericNotify+0x160>)
 8014994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	f3bf 8f4f 	dsb	sy
 801499e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80149a2:	f000 faa1 	bl	8014ee8 <vPortExitCritical>

		return xReturn;
 80149a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3728      	adds	r7, #40	; 0x28
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	20001114 	.word	0x20001114
 80149b4:	20001010 	.word	0x20001010
 80149b8:	2000100c 	.word	0x2000100c
 80149bc:	e000ed04 	.word	0xe000ed04

080149c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b08e      	sub	sp, #56	; 0x38
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	603b      	str	r3, [r7, #0]
 80149cc:	4613      	mov	r3, r2
 80149ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80149d0:	2301      	movs	r3, #1
 80149d2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d109      	bne.n	80149ee <xTaskGenericNotifyFromISR+0x2e>
 80149da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149de:	f383 8811 	msr	BASEPRI, r3
 80149e2:	f3bf 8f6f 	isb	sy
 80149e6:	f3bf 8f4f 	dsb	sy
 80149ea:	627b      	str	r3, [r7, #36]	; 0x24
 80149ec:	e7fe      	b.n	80149ec <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149ee:	f000 fb29 	bl	8015044 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80149f6:	f3ef 8211 	mrs	r2, BASEPRI
 80149fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	623a      	str	r2, [r7, #32]
 8014a0c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014a0e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a10:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d003      	beq.n	8014a20 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a2c:	2202      	movs	r2, #2
 8014a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014a32:	79fb      	ldrb	r3, [r7, #7]
 8014a34:	2b04      	cmp	r3, #4
 8014a36:	d829      	bhi.n	8014a8c <xTaskGenericNotifyFromISR+0xcc>
 8014a38:	a201      	add	r2, pc, #4	; (adr r2, 8014a40 <xTaskGenericNotifyFromISR+0x80>)
 8014a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a3e:	bf00      	nop
 8014a40:	08014aab 	.word	0x08014aab
 8014a44:	08014a55 	.word	0x08014a55
 8014a48:	08014a63 	.word	0x08014a63
 8014a4c:	08014a6f 	.word	0x08014a6f
 8014a50:	08014a77 	.word	0x08014a77
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	431a      	orrs	r2, r3
 8014a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014a60:	e026      	b.n	8014ab0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a66:	1c5a      	adds	r2, r3, #1
 8014a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014a6c:	e020      	b.n	8014ab0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a70:	68ba      	ldr	r2, [r7, #8]
 8014a72:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014a74:	e01c      	b.n	8014ab0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014a76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a7a:	2b02      	cmp	r3, #2
 8014a7c:	d003      	beq.n	8014a86 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a80:	68ba      	ldr	r2, [r7, #8]
 8014a82:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014a84:	e014      	b.n	8014ab0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8014a86:	2300      	movs	r3, #0
 8014a88:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014a8a:	e011      	b.n	8014ab0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a94:	d00b      	beq.n	8014aae <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8014a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9a:	f383 8811 	msr	BASEPRI, r3
 8014a9e:	f3bf 8f6f 	isb	sy
 8014aa2:	f3bf 8f4f 	dsb	sy
 8014aa6:	61bb      	str	r3, [r7, #24]
 8014aa8:	e7fe      	b.n	8014aa8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8014aaa:	bf00      	nop
 8014aac:	e000      	b.n	8014ab0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8014aae:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014ab0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d144      	bne.n	8014b42 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d009      	beq.n	8014ad4 <xTaskGenericNotifyFromISR+0x114>
 8014ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac4:	f383 8811 	msr	BASEPRI, r3
 8014ac8:	f3bf 8f6f 	isb	sy
 8014acc:	f3bf 8f4f 	dsb	sy
 8014ad0:	617b      	str	r3, [r7, #20]
 8014ad2:	e7fe      	b.n	8014ad2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ad4:	4b20      	ldr	r3, [pc, #128]	; (8014b58 <xTaskGenericNotifyFromISR+0x198>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d11c      	bne.n	8014b16 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ade:	3304      	adds	r3, #4
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7fe fa60 	bl	8012fa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aea:	2201      	movs	r2, #1
 8014aec:	409a      	lsls	r2, r3
 8014aee:	4b1b      	ldr	r3, [pc, #108]	; (8014b5c <xTaskGenericNotifyFromISR+0x19c>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	4313      	orrs	r3, r2
 8014af4:	4a19      	ldr	r2, [pc, #100]	; (8014b5c <xTaskGenericNotifyFromISR+0x19c>)
 8014af6:	6013      	str	r3, [r2, #0]
 8014af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014afc:	4613      	mov	r3, r2
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	4413      	add	r3, r2
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	4a16      	ldr	r2, [pc, #88]	; (8014b60 <xTaskGenericNotifyFromISR+0x1a0>)
 8014b06:	441a      	add	r2, r3
 8014b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b0a:	3304      	adds	r3, #4
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	4610      	mov	r0, r2
 8014b10:	f7fe f9ec 	bl	8012eec <vListInsertEnd>
 8014b14:	e005      	b.n	8014b22 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	3318      	adds	r3, #24
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	4811      	ldr	r0, [pc, #68]	; (8014b64 <xTaskGenericNotifyFromISR+0x1a4>)
 8014b1e:	f7fe f9e5 	bl	8012eec <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b26:	4b10      	ldr	r3, [pc, #64]	; (8014b68 <xTaskGenericNotifyFromISR+0x1a8>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d908      	bls.n	8014b42 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d002      	beq.n	8014b3c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b38:	2201      	movs	r2, #1
 8014b3a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014b3c:	4b0b      	ldr	r3, [pc, #44]	; (8014b6c <xTaskGenericNotifyFromISR+0x1ac>)
 8014b3e:	2201      	movs	r2, #1
 8014b40:	601a      	str	r2, [r3, #0]
 8014b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3738      	adds	r7, #56	; 0x38
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	20001134 	.word	0x20001134
 8014b5c:	20001114 	.word	0x20001114
 8014b60:	20001010 	.word	0x20001010
 8014b64:	200010cc 	.word	0x200010cc
 8014b68:	2000100c 	.word	0x2000100c
 8014b6c:	20001120 	.word	0x20001120

08014b70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b084      	sub	sp, #16
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014b7a:	4b29      	ldr	r3, [pc, #164]	; (8014c20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b80:	4b28      	ldr	r3, [pc, #160]	; (8014c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	3304      	adds	r3, #4
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7fe fa0d 	bl	8012fa6 <uxListRemove>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d10b      	bne.n	8014baa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014b92:	4b24      	ldr	r3, [pc, #144]	; (8014c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b98:	2201      	movs	r2, #1
 8014b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8014b9e:	43da      	mvns	r2, r3
 8014ba0:	4b21      	ldr	r3, [pc, #132]	; (8014c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	4013      	ands	r3, r2
 8014ba6:	4a20      	ldr	r2, [pc, #128]	; (8014c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014ba8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bb0:	d10a      	bne.n	8014bc8 <prvAddCurrentTaskToDelayedList+0x58>
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d007      	beq.n	8014bc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014bb8:	4b1a      	ldr	r3, [pc, #104]	; (8014c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	3304      	adds	r3, #4
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	481a      	ldr	r0, [pc, #104]	; (8014c2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8014bc2:	f7fe f993 	bl	8012eec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014bc6:	e026      	b.n	8014c16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014bc8:	68fa      	ldr	r2, [r7, #12]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	4413      	add	r3, r2
 8014bce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014bd0:	4b14      	ldr	r3, [pc, #80]	; (8014c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	68ba      	ldr	r2, [r7, #8]
 8014bd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014bd8:	68ba      	ldr	r2, [r7, #8]
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d209      	bcs.n	8014bf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014be0:	4b13      	ldr	r3, [pc, #76]	; (8014c30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	4b0f      	ldr	r3, [pc, #60]	; (8014c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	3304      	adds	r3, #4
 8014bea:	4619      	mov	r1, r3
 8014bec:	4610      	mov	r0, r2
 8014bee:	f7fe f9a1 	bl	8012f34 <vListInsert>
}
 8014bf2:	e010      	b.n	8014c16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014bf4:	4b0f      	ldr	r3, [pc, #60]	; (8014c34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014bf6:	681a      	ldr	r2, [r3, #0]
 8014bf8:	4b0a      	ldr	r3, [pc, #40]	; (8014c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	3304      	adds	r3, #4
 8014bfe:	4619      	mov	r1, r3
 8014c00:	4610      	mov	r0, r2
 8014c02:	f7fe f997 	bl	8012f34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014c06:	4b0c      	ldr	r3, [pc, #48]	; (8014c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	68ba      	ldr	r2, [r7, #8]
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d202      	bcs.n	8014c16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014c10:	4a09      	ldr	r2, [pc, #36]	; (8014c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	6013      	str	r3, [r2, #0]
}
 8014c16:	bf00      	nop
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	20001110 	.word	0x20001110
 8014c24:	2000100c 	.word	0x2000100c
 8014c28:	20001114 	.word	0x20001114
 8014c2c:	200010f8 	.word	0x200010f8
 8014c30:	200010c8 	.word	0x200010c8
 8014c34:	200010c4 	.word	0x200010c4
 8014c38:	2000112c 	.word	0x2000112c

08014c3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c3c:	b480      	push	{r7}
 8014c3e:	b085      	sub	sp, #20
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	3b04      	subs	r3, #4
 8014c4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	3b04      	subs	r3, #4
 8014c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	f023 0201 	bic.w	r2, r3, #1
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	3b04      	subs	r3, #4
 8014c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014c6c:	4a0c      	ldr	r2, [pc, #48]	; (8014ca0 <pxPortInitialiseStack+0x64>)
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	3b14      	subs	r3, #20
 8014c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014c78:	687a      	ldr	r2, [r7, #4]
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	3b04      	subs	r3, #4
 8014c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f06f 0202 	mvn.w	r2, #2
 8014c8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	3b20      	subs	r3, #32
 8014c90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014c92:	68fb      	ldr	r3, [r7, #12]
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3714      	adds	r7, #20
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	08014ca5 	.word	0x08014ca5

08014ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014caa:	2300      	movs	r3, #0
 8014cac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014cae:	4b11      	ldr	r3, [pc, #68]	; (8014cf4 <prvTaskExitError+0x50>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cb6:	d009      	beq.n	8014ccc <prvTaskExitError+0x28>
	__asm volatile
 8014cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cbc:	f383 8811 	msr	BASEPRI, r3
 8014cc0:	f3bf 8f6f 	isb	sy
 8014cc4:	f3bf 8f4f 	dsb	sy
 8014cc8:	60fb      	str	r3, [r7, #12]
 8014cca:	e7fe      	b.n	8014cca <prvTaskExitError+0x26>
 8014ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cd0:	f383 8811 	msr	BASEPRI, r3
 8014cd4:	f3bf 8f6f 	isb	sy
 8014cd8:	f3bf 8f4f 	dsb	sy
 8014cdc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014cde:	bf00      	nop
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d0fc      	beq.n	8014ce0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ce6:	bf00      	nop
 8014ce8:	3714      	adds	r7, #20
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr
 8014cf2:	bf00      	nop
 8014cf4:	20000944 	.word	0x20000944
	...

08014d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d00:	4b07      	ldr	r3, [pc, #28]	; (8014d20 <pxCurrentTCBConst2>)
 8014d02:	6819      	ldr	r1, [r3, #0]
 8014d04:	6808      	ldr	r0, [r1, #0]
 8014d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0a:	f380 8809 	msr	PSP, r0
 8014d0e:	f3bf 8f6f 	isb	sy
 8014d12:	f04f 0000 	mov.w	r0, #0
 8014d16:	f380 8811 	msr	BASEPRI, r0
 8014d1a:	4770      	bx	lr
 8014d1c:	f3af 8000 	nop.w

08014d20 <pxCurrentTCBConst2>:
 8014d20:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d24:	bf00      	nop
 8014d26:	bf00      	nop

08014d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d28:	4808      	ldr	r0, [pc, #32]	; (8014d4c <prvPortStartFirstTask+0x24>)
 8014d2a:	6800      	ldr	r0, [r0, #0]
 8014d2c:	6800      	ldr	r0, [r0, #0]
 8014d2e:	f380 8808 	msr	MSP, r0
 8014d32:	f04f 0000 	mov.w	r0, #0
 8014d36:	f380 8814 	msr	CONTROL, r0
 8014d3a:	b662      	cpsie	i
 8014d3c:	b661      	cpsie	f
 8014d3e:	f3bf 8f4f 	dsb	sy
 8014d42:	f3bf 8f6f 	isb	sy
 8014d46:	df00      	svc	0
 8014d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014d4a:	bf00      	nop
 8014d4c:	e000ed08 	.word	0xe000ed08

08014d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014d56:	4b44      	ldr	r3, [pc, #272]	; (8014e68 <xPortStartScheduler+0x118>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4a44      	ldr	r2, [pc, #272]	; (8014e6c <xPortStartScheduler+0x11c>)
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d109      	bne.n	8014d74 <xPortStartScheduler+0x24>
 8014d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d64:	f383 8811 	msr	BASEPRI, r3
 8014d68:	f3bf 8f6f 	isb	sy
 8014d6c:	f3bf 8f4f 	dsb	sy
 8014d70:	613b      	str	r3, [r7, #16]
 8014d72:	e7fe      	b.n	8014d72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014d74:	4b3c      	ldr	r3, [pc, #240]	; (8014e68 <xPortStartScheduler+0x118>)
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4a3d      	ldr	r2, [pc, #244]	; (8014e70 <xPortStartScheduler+0x120>)
 8014d7a:	4293      	cmp	r3, r2
 8014d7c:	d109      	bne.n	8014d92 <xPortStartScheduler+0x42>
 8014d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d82:	f383 8811 	msr	BASEPRI, r3
 8014d86:	f3bf 8f6f 	isb	sy
 8014d8a:	f3bf 8f4f 	dsb	sy
 8014d8e:	60fb      	str	r3, [r7, #12]
 8014d90:	e7fe      	b.n	8014d90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014d92:	4b38      	ldr	r3, [pc, #224]	; (8014e74 <xPortStartScheduler+0x124>)
 8014d94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	b2db      	uxtb	r3, r3
 8014d9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	22ff      	movs	r2, #255	; 0xff
 8014da2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014dac:	78fb      	ldrb	r3, [r7, #3]
 8014dae:	b2db      	uxtb	r3, r3
 8014db0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014db4:	b2da      	uxtb	r2, r3
 8014db6:	4b30      	ldr	r3, [pc, #192]	; (8014e78 <xPortStartScheduler+0x128>)
 8014db8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014dba:	4b30      	ldr	r3, [pc, #192]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014dbc:	2207      	movs	r2, #7
 8014dbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dc0:	e009      	b.n	8014dd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014dc2:	4b2e      	ldr	r3, [pc, #184]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	3b01      	subs	r3, #1
 8014dc8:	4a2c      	ldr	r2, [pc, #176]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014dca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014dcc:	78fb      	ldrb	r3, [r7, #3]
 8014dce:	b2db      	uxtb	r3, r3
 8014dd0:	005b      	lsls	r3, r3, #1
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dd6:	78fb      	ldrb	r3, [r7, #3]
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014dde:	2b80      	cmp	r3, #128	; 0x80
 8014de0:	d0ef      	beq.n	8014dc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014de2:	4b26      	ldr	r3, [pc, #152]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	f1c3 0307 	rsb	r3, r3, #7
 8014dea:	2b04      	cmp	r3, #4
 8014dec:	d009      	beq.n	8014e02 <xPortStartScheduler+0xb2>
 8014dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df2:	f383 8811 	msr	BASEPRI, r3
 8014df6:	f3bf 8f6f 	isb	sy
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	60bb      	str	r3, [r7, #8]
 8014e00:	e7fe      	b.n	8014e00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e02:	4b1e      	ldr	r3, [pc, #120]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	021b      	lsls	r3, r3, #8
 8014e08:	4a1c      	ldr	r2, [pc, #112]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014e0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e0c:	4b1b      	ldr	r3, [pc, #108]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e14:	4a19      	ldr	r2, [pc, #100]	; (8014e7c <xPortStartScheduler+0x12c>)
 8014e16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	b2da      	uxtb	r2, r3
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e20:	4b17      	ldr	r3, [pc, #92]	; (8014e80 <xPortStartScheduler+0x130>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	4a16      	ldr	r2, [pc, #88]	; (8014e80 <xPortStartScheduler+0x130>)
 8014e26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e2c:	4b14      	ldr	r3, [pc, #80]	; (8014e80 <xPortStartScheduler+0x130>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	4a13      	ldr	r2, [pc, #76]	; (8014e80 <xPortStartScheduler+0x130>)
 8014e32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e38:	f000 f8d6 	bl	8014fe8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e3c:	4b11      	ldr	r3, [pc, #68]	; (8014e84 <xPortStartScheduler+0x134>)
 8014e3e:	2200      	movs	r2, #0
 8014e40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e42:	f000 f8f5 	bl	8015030 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e46:	4b10      	ldr	r3, [pc, #64]	; (8014e88 <xPortStartScheduler+0x138>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	4a0f      	ldr	r2, [pc, #60]	; (8014e88 <xPortStartScheduler+0x138>)
 8014e4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014e50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014e52:	f7ff ff69 	bl	8014d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014e56:	f7ff f9d1 	bl	80141fc <vTaskSwitchContext>
	prvTaskExitError();
 8014e5a:	f7ff ff23 	bl	8014ca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014e5e:	2300      	movs	r3, #0
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	3718      	adds	r7, #24
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	e000ed00 	.word	0xe000ed00
 8014e6c:	410fc271 	.word	0x410fc271
 8014e70:	410fc270 	.word	0x410fc270
 8014e74:	e000e400 	.word	0xe000e400
 8014e78:	20001138 	.word	0x20001138
 8014e7c:	2000113c 	.word	0x2000113c
 8014e80:	e000ed20 	.word	0xe000ed20
 8014e84:	20000944 	.word	0x20000944
 8014e88:	e000ef34 	.word	0xe000ef34

08014e8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e96:	f383 8811 	msr	BASEPRI, r3
 8014e9a:	f3bf 8f6f 	isb	sy
 8014e9e:	f3bf 8f4f 	dsb	sy
 8014ea2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ea4:	4b0e      	ldr	r3, [pc, #56]	; (8014ee0 <vPortEnterCritical+0x54>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	4a0d      	ldr	r2, [pc, #52]	; (8014ee0 <vPortEnterCritical+0x54>)
 8014eac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014eae:	4b0c      	ldr	r3, [pc, #48]	; (8014ee0 <vPortEnterCritical+0x54>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	2b01      	cmp	r3, #1
 8014eb4:	d10e      	bne.n	8014ed4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014eb6:	4b0b      	ldr	r3, [pc, #44]	; (8014ee4 <vPortEnterCritical+0x58>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	b2db      	uxtb	r3, r3
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d009      	beq.n	8014ed4 <vPortEnterCritical+0x48>
 8014ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec4:	f383 8811 	msr	BASEPRI, r3
 8014ec8:	f3bf 8f6f 	isb	sy
 8014ecc:	f3bf 8f4f 	dsb	sy
 8014ed0:	603b      	str	r3, [r7, #0]
 8014ed2:	e7fe      	b.n	8014ed2 <vPortEnterCritical+0x46>
	}
}
 8014ed4:	bf00      	nop
 8014ed6:	370c      	adds	r7, #12
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ede:	4770      	bx	lr
 8014ee0:	20000944 	.word	0x20000944
 8014ee4:	e000ed04 	.word	0xe000ed04

08014ee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b083      	sub	sp, #12
 8014eec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014eee:	4b11      	ldr	r3, [pc, #68]	; (8014f34 <vPortExitCritical+0x4c>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d109      	bne.n	8014f0a <vPortExitCritical+0x22>
 8014ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efa:	f383 8811 	msr	BASEPRI, r3
 8014efe:	f3bf 8f6f 	isb	sy
 8014f02:	f3bf 8f4f 	dsb	sy
 8014f06:	607b      	str	r3, [r7, #4]
 8014f08:	e7fe      	b.n	8014f08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014f0a:	4b0a      	ldr	r3, [pc, #40]	; (8014f34 <vPortExitCritical+0x4c>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	3b01      	subs	r3, #1
 8014f10:	4a08      	ldr	r2, [pc, #32]	; (8014f34 <vPortExitCritical+0x4c>)
 8014f12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f14:	4b07      	ldr	r3, [pc, #28]	; (8014f34 <vPortExitCritical+0x4c>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d104      	bne.n	8014f26 <vPortExitCritical+0x3e>
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f26:	bf00      	nop
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f30:	4770      	bx	lr
 8014f32:	bf00      	nop
 8014f34:	20000944 	.word	0x20000944
	...

08014f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014f40:	f3ef 8009 	mrs	r0, PSP
 8014f44:	f3bf 8f6f 	isb	sy
 8014f48:	4b15      	ldr	r3, [pc, #84]	; (8014fa0 <pxCurrentTCBConst>)
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	f01e 0f10 	tst.w	lr, #16
 8014f50:	bf08      	it	eq
 8014f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5a:	6010      	str	r0, [r2, #0]
 8014f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014f64:	f380 8811 	msr	BASEPRI, r0
 8014f68:	f3bf 8f4f 	dsb	sy
 8014f6c:	f3bf 8f6f 	isb	sy
 8014f70:	f7ff f944 	bl	80141fc <vTaskSwitchContext>
 8014f74:	f04f 0000 	mov.w	r0, #0
 8014f78:	f380 8811 	msr	BASEPRI, r0
 8014f7c:	bc09      	pop	{r0, r3}
 8014f7e:	6819      	ldr	r1, [r3, #0]
 8014f80:	6808      	ldr	r0, [r1, #0]
 8014f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f86:	f01e 0f10 	tst.w	lr, #16
 8014f8a:	bf08      	it	eq
 8014f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014f90:	f380 8809 	msr	PSP, r0
 8014f94:	f3bf 8f6f 	isb	sy
 8014f98:	4770      	bx	lr
 8014f9a:	bf00      	nop
 8014f9c:	f3af 8000 	nop.w

08014fa0 <pxCurrentTCBConst>:
 8014fa0:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014fa4:	bf00      	nop
 8014fa6:	bf00      	nop

08014fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
	__asm volatile
 8014fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb2:	f383 8811 	msr	BASEPRI, r3
 8014fb6:	f3bf 8f6f 	isb	sy
 8014fba:	f3bf 8f4f 	dsb	sy
 8014fbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014fc0:	f7ff f864 	bl	801408c <xTaskIncrementTick>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d003      	beq.n	8014fd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014fca:	4b06      	ldr	r3, [pc, #24]	; (8014fe4 <SysTick_Handler+0x3c>)
 8014fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fd0:	601a      	str	r2, [r3, #0]
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014fdc:	bf00      	nop
 8014fde:	3708      	adds	r7, #8
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	e000ed04 	.word	0xe000ed04

08014fe8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014fe8:	b480      	push	{r7}
 8014fea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014fec:	4b0b      	ldr	r3, [pc, #44]	; (801501c <vPortSetupTimerInterrupt+0x34>)
 8014fee:	2200      	movs	r2, #0
 8014ff0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ff2:	4b0b      	ldr	r3, [pc, #44]	; (8015020 <vPortSetupTimerInterrupt+0x38>)
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014ff8:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <vPortSetupTimerInterrupt+0x3c>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4a0a      	ldr	r2, [pc, #40]	; (8015028 <vPortSetupTimerInterrupt+0x40>)
 8014ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8015002:	099b      	lsrs	r3, r3, #6
 8015004:	4a09      	ldr	r2, [pc, #36]	; (801502c <vPortSetupTimerInterrupt+0x44>)
 8015006:	3b01      	subs	r3, #1
 8015008:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801500a:	4b04      	ldr	r3, [pc, #16]	; (801501c <vPortSetupTimerInterrupt+0x34>)
 801500c:	2207      	movs	r2, #7
 801500e:	601a      	str	r2, [r3, #0]
}
 8015010:	bf00      	nop
 8015012:	46bd      	mov	sp, r7
 8015014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015018:	4770      	bx	lr
 801501a:	bf00      	nop
 801501c:	e000e010 	.word	0xe000e010
 8015020:	e000e018 	.word	0xe000e018
 8015024:	20000828 	.word	0x20000828
 8015028:	10624dd3 	.word	0x10624dd3
 801502c:	e000e014 	.word	0xe000e014

08015030 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015030:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015040 <vPortEnableVFP+0x10>
 8015034:	6801      	ldr	r1, [r0, #0]
 8015036:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801503a:	6001      	str	r1, [r0, #0]
 801503c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801503e:	bf00      	nop
 8015040:	e000ed88 	.word	0xe000ed88

08015044 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015044:	b480      	push	{r7}
 8015046:	b085      	sub	sp, #20
 8015048:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801504a:	f3ef 8305 	mrs	r3, IPSR
 801504e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2b0f      	cmp	r3, #15
 8015054:	d913      	bls.n	801507e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015056:	4a16      	ldr	r2, [pc, #88]	; (80150b0 <vPortValidateInterruptPriority+0x6c>)
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	4413      	add	r3, r2
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015060:	4b14      	ldr	r3, [pc, #80]	; (80150b4 <vPortValidateInterruptPriority+0x70>)
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	7afa      	ldrb	r2, [r7, #11]
 8015066:	429a      	cmp	r2, r3
 8015068:	d209      	bcs.n	801507e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801506e:	f383 8811 	msr	BASEPRI, r3
 8015072:	f3bf 8f6f 	isb	sy
 8015076:	f3bf 8f4f 	dsb	sy
 801507a:	607b      	str	r3, [r7, #4]
 801507c:	e7fe      	b.n	801507c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801507e:	4b0e      	ldr	r3, [pc, #56]	; (80150b8 <vPortValidateInterruptPriority+0x74>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015086:	4b0d      	ldr	r3, [pc, #52]	; (80150bc <vPortValidateInterruptPriority+0x78>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	429a      	cmp	r2, r3
 801508c:	d909      	bls.n	80150a2 <vPortValidateInterruptPriority+0x5e>
 801508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015092:	f383 8811 	msr	BASEPRI, r3
 8015096:	f3bf 8f6f 	isb	sy
 801509a:	f3bf 8f4f 	dsb	sy
 801509e:	603b      	str	r3, [r7, #0]
 80150a0:	e7fe      	b.n	80150a0 <vPortValidateInterruptPriority+0x5c>
	}
 80150a2:	bf00      	nop
 80150a4:	3714      	adds	r7, #20
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	e000e3f0 	.word	0xe000e3f0
 80150b4:	20001138 	.word	0x20001138
 80150b8:	e000ed0c 	.word	0xe000ed0c
 80150bc:	2000113c 	.word	0x2000113c

080150c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b08a      	sub	sp, #40	; 0x28
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80150c8:	2300      	movs	r3, #0
 80150ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80150cc:	f7fe ff34 	bl	8013f38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80150d0:	4b57      	ldr	r3, [pc, #348]	; (8015230 <pvPortMalloc+0x170>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d101      	bne.n	80150dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80150d8:	f000 f90c 	bl	80152f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80150dc:	4b55      	ldr	r3, [pc, #340]	; (8015234 <pvPortMalloc+0x174>)
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	4013      	ands	r3, r2
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	f040 808c 	bne.w	8015202 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d01c      	beq.n	801512a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80150f0:	2208      	movs	r2, #8
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4413      	add	r3, r2
 80150f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f003 0307 	and.w	r3, r3, #7
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d013      	beq.n	801512a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f023 0307 	bic.w	r3, r3, #7
 8015108:	3308      	adds	r3, #8
 801510a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f003 0307 	and.w	r3, r3, #7
 8015112:	2b00      	cmp	r3, #0
 8015114:	d009      	beq.n	801512a <pvPortMalloc+0x6a>
 8015116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801511a:	f383 8811 	msr	BASEPRI, r3
 801511e:	f3bf 8f6f 	isb	sy
 8015122:	f3bf 8f4f 	dsb	sy
 8015126:	617b      	str	r3, [r7, #20]
 8015128:	e7fe      	b.n	8015128 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d068      	beq.n	8015202 <pvPortMalloc+0x142>
 8015130:	4b41      	ldr	r3, [pc, #260]	; (8015238 <pvPortMalloc+0x178>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	429a      	cmp	r2, r3
 8015138:	d863      	bhi.n	8015202 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801513a:	4b40      	ldr	r3, [pc, #256]	; (801523c <pvPortMalloc+0x17c>)
 801513c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801513e:	4b3f      	ldr	r3, [pc, #252]	; (801523c <pvPortMalloc+0x17c>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015144:	e004      	b.n	8015150 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8015146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	687a      	ldr	r2, [r7, #4]
 8015156:	429a      	cmp	r2, r3
 8015158:	d903      	bls.n	8015162 <pvPortMalloc+0xa2>
 801515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d1f1      	bne.n	8015146 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015162:	4b33      	ldr	r3, [pc, #204]	; (8015230 <pvPortMalloc+0x170>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015168:	429a      	cmp	r2, r3
 801516a:	d04a      	beq.n	8015202 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801516c:	6a3b      	ldr	r3, [r7, #32]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	2208      	movs	r2, #8
 8015172:	4413      	add	r3, r2
 8015174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	6a3b      	ldr	r3, [r7, #32]
 801517c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	685a      	ldr	r2, [r3, #4]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	1ad2      	subs	r2, r2, r3
 8015186:	2308      	movs	r3, #8
 8015188:	005b      	lsls	r3, r3, #1
 801518a:	429a      	cmp	r2, r3
 801518c:	d91e      	bls.n	80151cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	4413      	add	r3, r2
 8015194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015196:	69bb      	ldr	r3, [r7, #24]
 8015198:	f003 0307 	and.w	r3, r3, #7
 801519c:	2b00      	cmp	r3, #0
 801519e:	d009      	beq.n	80151b4 <pvPortMalloc+0xf4>
 80151a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a4:	f383 8811 	msr	BASEPRI, r3
 80151a8:	f3bf 8f6f 	isb	sy
 80151ac:	f3bf 8f4f 	dsb	sy
 80151b0:	613b      	str	r3, [r7, #16]
 80151b2:	e7fe      	b.n	80151b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80151b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b6:	685a      	ldr	r2, [r3, #4]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	1ad2      	subs	r2, r2, r3
 80151bc:	69bb      	ldr	r3, [r7, #24]
 80151be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80151c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80151c6:	69b8      	ldr	r0, [r7, #24]
 80151c8:	f000 f8f6 	bl	80153b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80151cc:	4b1a      	ldr	r3, [pc, #104]	; (8015238 <pvPortMalloc+0x178>)
 80151ce:	681a      	ldr	r2, [r3, #0]
 80151d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	1ad3      	subs	r3, r2, r3
 80151d6:	4a18      	ldr	r2, [pc, #96]	; (8015238 <pvPortMalloc+0x178>)
 80151d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80151da:	4b17      	ldr	r3, [pc, #92]	; (8015238 <pvPortMalloc+0x178>)
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	4b18      	ldr	r3, [pc, #96]	; (8015240 <pvPortMalloc+0x180>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d203      	bcs.n	80151ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80151e6:	4b14      	ldr	r3, [pc, #80]	; (8015238 <pvPortMalloc+0x178>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	4a15      	ldr	r2, [pc, #84]	; (8015240 <pvPortMalloc+0x180>)
 80151ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80151ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f0:	685a      	ldr	r2, [r3, #4]
 80151f2:	4b10      	ldr	r3, [pc, #64]	; (8015234 <pvPortMalloc+0x174>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	431a      	orrs	r2, r3
 80151f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80151fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fe:	2200      	movs	r2, #0
 8015200:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015202:	f7fe fea7 	bl	8013f54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	f003 0307 	and.w	r3, r3, #7
 801520c:	2b00      	cmp	r3, #0
 801520e:	d009      	beq.n	8015224 <pvPortMalloc+0x164>
 8015210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015214:	f383 8811 	msr	BASEPRI, r3
 8015218:	f3bf 8f6f 	isb	sy
 801521c:	f3bf 8f4f 	dsb	sy
 8015220:	60fb      	str	r3, [r7, #12]
 8015222:	e7fe      	b.n	8015222 <pvPortMalloc+0x162>
	return pvReturn;
 8015224:	69fb      	ldr	r3, [r7, #28]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3728      	adds	r7, #40	; 0x28
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	20004d48 	.word	0x20004d48
 8015234:	20004d54 	.word	0x20004d54
 8015238:	20004d4c 	.word	0x20004d4c
 801523c:	20004d40 	.word	0x20004d40
 8015240:	20004d50 	.word	0x20004d50

08015244 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d046      	beq.n	80152e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015256:	2308      	movs	r3, #8
 8015258:	425b      	negs	r3, r3
 801525a:	697a      	ldr	r2, [r7, #20]
 801525c:	4413      	add	r3, r2
 801525e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015264:	693b      	ldr	r3, [r7, #16]
 8015266:	685a      	ldr	r2, [r3, #4]
 8015268:	4b20      	ldr	r3, [pc, #128]	; (80152ec <vPortFree+0xa8>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	4013      	ands	r3, r2
 801526e:	2b00      	cmp	r3, #0
 8015270:	d109      	bne.n	8015286 <vPortFree+0x42>
 8015272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015276:	f383 8811 	msr	BASEPRI, r3
 801527a:	f3bf 8f6f 	isb	sy
 801527e:	f3bf 8f4f 	dsb	sy
 8015282:	60fb      	str	r3, [r7, #12]
 8015284:	e7fe      	b.n	8015284 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d009      	beq.n	80152a2 <vPortFree+0x5e>
 801528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015292:	f383 8811 	msr	BASEPRI, r3
 8015296:	f3bf 8f6f 	isb	sy
 801529a:	f3bf 8f4f 	dsb	sy
 801529e:	60bb      	str	r3, [r7, #8]
 80152a0:	e7fe      	b.n	80152a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	685a      	ldr	r2, [r3, #4]
 80152a6:	4b11      	ldr	r3, [pc, #68]	; (80152ec <vPortFree+0xa8>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	4013      	ands	r3, r2
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d019      	beq.n	80152e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d115      	bne.n	80152e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80152b8:	693b      	ldr	r3, [r7, #16]
 80152ba:	685a      	ldr	r2, [r3, #4]
 80152bc:	4b0b      	ldr	r3, [pc, #44]	; (80152ec <vPortFree+0xa8>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	43db      	mvns	r3, r3
 80152c2:	401a      	ands	r2, r3
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80152c8:	f7fe fe36 	bl	8013f38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	685a      	ldr	r2, [r3, #4]
 80152d0:	4b07      	ldr	r3, [pc, #28]	; (80152f0 <vPortFree+0xac>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4413      	add	r3, r2
 80152d6:	4a06      	ldr	r2, [pc, #24]	; (80152f0 <vPortFree+0xac>)
 80152d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80152da:	6938      	ldr	r0, [r7, #16]
 80152dc:	f000 f86c 	bl	80153b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80152e0:	f7fe fe38 	bl	8013f54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80152e4:	bf00      	nop
 80152e6:	3718      	adds	r7, #24
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	20004d54 	.word	0x20004d54
 80152f0:	20004d4c 	.word	0x20004d4c

080152f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80152f4:	b480      	push	{r7}
 80152f6:	b085      	sub	sp, #20
 80152f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80152fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80152fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015300:	4b27      	ldr	r3, [pc, #156]	; (80153a0 <prvHeapInit+0xac>)
 8015302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f003 0307 	and.w	r3, r3, #7
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00c      	beq.n	8015328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	3307      	adds	r3, #7
 8015312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f023 0307 	bic.w	r3, r3, #7
 801531a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801531c:	68ba      	ldr	r2, [r7, #8]
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	4a1f      	ldr	r2, [pc, #124]	; (80153a0 <prvHeapInit+0xac>)
 8015324:	4413      	add	r3, r2
 8015326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801532c:	4a1d      	ldr	r2, [pc, #116]	; (80153a4 <prvHeapInit+0xb0>)
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015332:	4b1c      	ldr	r3, [pc, #112]	; (80153a4 <prvHeapInit+0xb0>)
 8015334:	2200      	movs	r2, #0
 8015336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	68ba      	ldr	r2, [r7, #8]
 801533c:	4413      	add	r3, r2
 801533e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015340:	2208      	movs	r2, #8
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	1a9b      	subs	r3, r3, r2
 8015346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f023 0307 	bic.w	r3, r3, #7
 801534e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	4a15      	ldr	r2, [pc, #84]	; (80153a8 <prvHeapInit+0xb4>)
 8015354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015356:	4b14      	ldr	r3, [pc, #80]	; (80153a8 <prvHeapInit+0xb4>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	2200      	movs	r2, #0
 801535c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801535e:	4b12      	ldr	r3, [pc, #72]	; (80153a8 <prvHeapInit+0xb4>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	2200      	movs	r2, #0
 8015364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	68fa      	ldr	r2, [r7, #12]
 801536e:	1ad2      	subs	r2, r2, r3
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015374:	4b0c      	ldr	r3, [pc, #48]	; (80153a8 <prvHeapInit+0xb4>)
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	685b      	ldr	r3, [r3, #4]
 8015380:	4a0a      	ldr	r2, [pc, #40]	; (80153ac <prvHeapInit+0xb8>)
 8015382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	4a09      	ldr	r2, [pc, #36]	; (80153b0 <prvHeapInit+0xbc>)
 801538a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801538c:	4b09      	ldr	r3, [pc, #36]	; (80153b4 <prvHeapInit+0xc0>)
 801538e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015392:	601a      	str	r2, [r3, #0]
}
 8015394:	bf00      	nop
 8015396:	3714      	adds	r7, #20
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr
 80153a0:	20001140 	.word	0x20001140
 80153a4:	20004d40 	.word	0x20004d40
 80153a8:	20004d48 	.word	0x20004d48
 80153ac:	20004d50 	.word	0x20004d50
 80153b0:	20004d4c 	.word	0x20004d4c
 80153b4:	20004d54 	.word	0x20004d54

080153b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80153b8:	b480      	push	{r7}
 80153ba:	b085      	sub	sp, #20
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80153c0:	4b28      	ldr	r3, [pc, #160]	; (8015464 <prvInsertBlockIntoFreeList+0xac>)
 80153c2:	60fb      	str	r3, [r7, #12]
 80153c4:	e002      	b.n	80153cc <prvInsertBlockIntoFreeList+0x14>
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	60fb      	str	r3, [r7, #12]
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d8f7      	bhi.n	80153c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	68ba      	ldr	r2, [r7, #8]
 80153e0:	4413      	add	r3, r2
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d108      	bne.n	80153fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	685a      	ldr	r2, [r3, #4]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	441a      	add	r2, r3
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	68ba      	ldr	r2, [r7, #8]
 8015404:	441a      	add	r2, r3
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	429a      	cmp	r2, r3
 801540c:	d118      	bne.n	8015440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	681a      	ldr	r2, [r3, #0]
 8015412:	4b15      	ldr	r3, [pc, #84]	; (8015468 <prvInsertBlockIntoFreeList+0xb0>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	429a      	cmp	r2, r3
 8015418:	d00d      	beq.n	8015436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	685a      	ldr	r2, [r3, #4]
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	441a      	add	r2, r3
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	601a      	str	r2, [r3, #0]
 8015434:	e008      	b.n	8015448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015436:	4b0c      	ldr	r3, [pc, #48]	; (8015468 <prvInsertBlockIntoFreeList+0xb0>)
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	601a      	str	r2, [r3, #0]
 801543e:	e003      	b.n	8015448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681a      	ldr	r2, [r3, #0]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015448:	68fa      	ldr	r2, [r7, #12]
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	429a      	cmp	r2, r3
 801544e:	d002      	beq.n	8015456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015456:	bf00      	nop
 8015458:	3714      	adds	r7, #20
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	20004d40 	.word	0x20004d40
 8015468:	20004d48 	.word	0x20004d48

0801546c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015470:	2200      	movs	r2, #0
 8015472:	4912      	ldr	r1, [pc, #72]	; (80154bc <MX_USB_DEVICE_Init+0x50>)
 8015474:	4812      	ldr	r0, [pc, #72]	; (80154c0 <MX_USB_DEVICE_Init+0x54>)
 8015476:	f7fc f89d 	bl	80115b4 <USBD_Init>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	d001      	beq.n	8015484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015480:	f7ef fa14 	bl	80048ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015484:	490f      	ldr	r1, [pc, #60]	; (80154c4 <MX_USB_DEVICE_Init+0x58>)
 8015486:	480e      	ldr	r0, [pc, #56]	; (80154c0 <MX_USB_DEVICE_Init+0x54>)
 8015488:	f7fc f8ca 	bl	8011620 <USBD_RegisterClass>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d001      	beq.n	8015496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015492:	f7ef fa0b 	bl	80048ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015496:	490c      	ldr	r1, [pc, #48]	; (80154c8 <MX_USB_DEVICE_Init+0x5c>)
 8015498:	4809      	ldr	r0, [pc, #36]	; (80154c0 <MX_USB_DEVICE_Init+0x54>)
 801549a:	f7fb ffef 	bl	801147c <USBD_CDC_RegisterInterface>
 801549e:	4603      	mov	r3, r0
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d001      	beq.n	80154a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80154a4:	f7ef fa02 	bl	80048ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80154a8:	4805      	ldr	r0, [pc, #20]	; (80154c0 <MX_USB_DEVICE_Init+0x54>)
 80154aa:	f7fc f8da 	bl	8011662 <USBD_Start>
 80154ae:	4603      	mov	r3, r0
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d001      	beq.n	80154b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80154b4:	f7ef f9fa 	bl	80048ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80154b8:	bf00      	nop
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	2000095c 	.word	0x2000095c
 80154c0:	2000bc8c 	.word	0x2000bc8c
 80154c4:	20000840 	.word	0x20000840
 80154c8:	20000948 	.word	0x20000948

080154cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80154d0:	2200      	movs	r2, #0
 80154d2:	4905      	ldr	r1, [pc, #20]	; (80154e8 <CDC_Init_FS+0x1c>)
 80154d4:	4805      	ldr	r0, [pc, #20]	; (80154ec <CDC_Init_FS+0x20>)
 80154d6:	f7fb ffe6 	bl	80114a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80154da:	4905      	ldr	r1, [pc, #20]	; (80154f0 <CDC_Init_FS+0x24>)
 80154dc:	4803      	ldr	r0, [pc, #12]	; (80154ec <CDC_Init_FS+0x20>)
 80154de:	f7fb fffb 	bl	80114d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80154e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	bd80      	pop	{r7, pc}
 80154e8:	2000c15c 	.word	0x2000c15c
 80154ec:	2000bc8c 	.word	0x2000bc8c
 80154f0:	2000bf5c 	.word	0x2000bf5c

080154f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80154f4:	b480      	push	{r7}
 80154f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80154f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	46bd      	mov	sp, r7
 80154fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015502:	4770      	bx	lr

08015504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015504:	b480      	push	{r7}
 8015506:	b083      	sub	sp, #12
 8015508:	af00      	add	r7, sp, #0
 801550a:	4603      	mov	r3, r0
 801550c:	6039      	str	r1, [r7, #0]
 801550e:	71fb      	strb	r3, [r7, #7]
 8015510:	4613      	mov	r3, r2
 8015512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015514:	79fb      	ldrb	r3, [r7, #7]
 8015516:	2b23      	cmp	r3, #35	; 0x23
 8015518:	f200 808c 	bhi.w	8015634 <CDC_Control_FS+0x130>
 801551c:	a201      	add	r2, pc, #4	; (adr r2, 8015524 <CDC_Control_FS+0x20>)
 801551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015522:	bf00      	nop
 8015524:	08015635 	.word	0x08015635
 8015528:	08015635 	.word	0x08015635
 801552c:	08015635 	.word	0x08015635
 8015530:	08015635 	.word	0x08015635
 8015534:	08015635 	.word	0x08015635
 8015538:	08015635 	.word	0x08015635
 801553c:	08015635 	.word	0x08015635
 8015540:	08015635 	.word	0x08015635
 8015544:	08015635 	.word	0x08015635
 8015548:	08015635 	.word	0x08015635
 801554c:	08015635 	.word	0x08015635
 8015550:	08015635 	.word	0x08015635
 8015554:	08015635 	.word	0x08015635
 8015558:	08015635 	.word	0x08015635
 801555c:	08015635 	.word	0x08015635
 8015560:	08015635 	.word	0x08015635
 8015564:	08015635 	.word	0x08015635
 8015568:	08015635 	.word	0x08015635
 801556c:	08015635 	.word	0x08015635
 8015570:	08015635 	.word	0x08015635
 8015574:	08015635 	.word	0x08015635
 8015578:	08015635 	.word	0x08015635
 801557c:	08015635 	.word	0x08015635
 8015580:	08015635 	.word	0x08015635
 8015584:	08015635 	.word	0x08015635
 8015588:	08015635 	.word	0x08015635
 801558c:	08015635 	.word	0x08015635
 8015590:	08015635 	.word	0x08015635
 8015594:	08015635 	.word	0x08015635
 8015598:	08015635 	.word	0x08015635
 801559c:	08015635 	.word	0x08015635
 80155a0:	08015635 	.word	0x08015635
 80155a4:	080155b5 	.word	0x080155b5
 80155a8:	080155ef 	.word	0x080155ef
 80155ac:	08015635 	.word	0x08015635
 80155b0:	08015635 	.word	0x08015635
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	781a      	ldrb	r2, [r3, #0]
 80155b8:	4b22      	ldr	r3, [pc, #136]	; (8015644 <CDC_Control_FS+0x140>)
 80155ba:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	785a      	ldrb	r2, [r3, #1]
 80155c0:	4b20      	ldr	r3, [pc, #128]	; (8015644 <CDC_Control_FS+0x140>)
 80155c2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	789a      	ldrb	r2, [r3, #2]
 80155c8:	4b1e      	ldr	r3, [pc, #120]	; (8015644 <CDC_Control_FS+0x140>)
 80155ca:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	78da      	ldrb	r2, [r3, #3]
 80155d0:	4b1c      	ldr	r3, [pc, #112]	; (8015644 <CDC_Control_FS+0x140>)
 80155d2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	791a      	ldrb	r2, [r3, #4]
 80155d8:	4b1a      	ldr	r3, [pc, #104]	; (8015644 <CDC_Control_FS+0x140>)
 80155da:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	795a      	ldrb	r2, [r3, #5]
 80155e0:	4b18      	ldr	r3, [pc, #96]	; (8015644 <CDC_Control_FS+0x140>)
 80155e2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	799a      	ldrb	r2, [r3, #6]
 80155e8:	4b16      	ldr	r3, [pc, #88]	; (8015644 <CDC_Control_FS+0x140>)
 80155ea:	719a      	strb	r2, [r3, #6]
    	break;
 80155ec:	e023      	b.n	8015636 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80155ee:	4b15      	ldr	r3, [pc, #84]	; (8015644 <CDC_Control_FS+0x140>)
 80155f0:	781a      	ldrb	r2, [r3, #0]
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	3301      	adds	r3, #1
 80155fa:	4a12      	ldr	r2, [pc, #72]	; (8015644 <CDC_Control_FS+0x140>)
 80155fc:	7852      	ldrb	r2, [r2, #1]
 80155fe:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	3302      	adds	r3, #2
 8015604:	4a0f      	ldr	r2, [pc, #60]	; (8015644 <CDC_Control_FS+0x140>)
 8015606:	7892      	ldrb	r2, [r2, #2]
 8015608:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	3303      	adds	r3, #3
 801560e:	4a0d      	ldr	r2, [pc, #52]	; (8015644 <CDC_Control_FS+0x140>)
 8015610:	78d2      	ldrb	r2, [r2, #3]
 8015612:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	3304      	adds	r3, #4
 8015618:	4a0a      	ldr	r2, [pc, #40]	; (8015644 <CDC_Control_FS+0x140>)
 801561a:	7912      	ldrb	r2, [r2, #4]
 801561c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	3305      	adds	r3, #5
 8015622:	4a08      	ldr	r2, [pc, #32]	; (8015644 <CDC_Control_FS+0x140>)
 8015624:	7952      	ldrb	r2, [r2, #5]
 8015626:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	3306      	adds	r3, #6
 801562c:	4a05      	ldr	r2, [pc, #20]	; (8015644 <CDC_Control_FS+0x140>)
 801562e:	7992      	ldrb	r2, [r2, #6]
 8015630:	701a      	strb	r2, [r3, #0]
    break;
 8015632:	e000      	b.n	8015636 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015634:	bf00      	nop
  }

  return (USBD_OK);
 8015636:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015638:	4618      	mov	r0, r3
 801563a:	370c      	adds	r7, #12
 801563c:	46bd      	mov	sp, r7
 801563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015642:	4770      	bx	lr
 8015644:	2000c35c 	.word	0x2000c35c

08015648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b082      	sub	sp, #8
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	b29b      	uxth	r3, r3
 8015658:	461a      	mov	r2, r3
 801565a:	6879      	ldr	r1, [r7, #4]
 801565c:	4807      	ldr	r0, [pc, #28]	; (801567c <CDC_Receive_FS+0x34>)
 801565e:	f7ef f99c 	bl	800499a <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015662:	6879      	ldr	r1, [r7, #4]
 8015664:	4806      	ldr	r0, [pc, #24]	; (8015680 <CDC_Receive_FS+0x38>)
 8015666:	f7fb ff37 	bl	80114d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801566a:	4805      	ldr	r0, [pc, #20]	; (8015680 <CDC_Receive_FS+0x38>)
 801566c:	f7fb ff78 	bl	8011560 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015670:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015672:	4618      	mov	r0, r3
 8015674:	3708      	adds	r7, #8
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop
 801567c:	20000004 	.word	0x20000004
 8015680:	2000bc8c 	.word	0x2000bc8c

08015684 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b084      	sub	sp, #16
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	460b      	mov	r3, r1
 801568e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015690:	2300      	movs	r3, #0
 8015692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015694:	4b0d      	ldr	r3, [pc, #52]	; (80156cc <CDC_Transmit_FS+0x48>)
 8015696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801569a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d001      	beq.n	80156aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80156a6:	2301      	movs	r3, #1
 80156a8:	e00b      	b.n	80156c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80156aa:	887b      	ldrh	r3, [r7, #2]
 80156ac:	461a      	mov	r2, r3
 80156ae:	6879      	ldr	r1, [r7, #4]
 80156b0:	4806      	ldr	r0, [pc, #24]	; (80156cc <CDC_Transmit_FS+0x48>)
 80156b2:	f7fb fef8 	bl	80114a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80156b6:	4805      	ldr	r0, [pc, #20]	; (80156cc <CDC_Transmit_FS+0x48>)
 80156b8:	f7fb ff22 	bl	8011500 <USBD_CDC_TransmitPacket>
 80156bc:	4603      	mov	r3, r0
 80156be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80156c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156c2:	4618      	mov	r0, r3
 80156c4:	3710      	adds	r7, #16
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}
 80156ca:	bf00      	nop
 80156cc:	2000bc8c 	.word	0x2000bc8c

080156d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b087      	sub	sp, #28
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60f8      	str	r0, [r7, #12]
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	4613      	mov	r3, r2
 80156dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80156de:	2300      	movs	r3, #0
 80156e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80156e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	371c      	adds	r7, #28
 80156ea:	46bd      	mov	sp, r7
 80156ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f0:	4770      	bx	lr
	...

080156f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156f4:	b480      	push	{r7}
 80156f6:	b083      	sub	sp, #12
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	4603      	mov	r3, r0
 80156fc:	6039      	str	r1, [r7, #0]
 80156fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	2212      	movs	r2, #18
 8015704:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015706:	4b03      	ldr	r3, [pc, #12]	; (8015714 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015708:	4618      	mov	r0, r3
 801570a:	370c      	adds	r7, #12
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr
 8015714:	20000978 	.word	0x20000978

08015718 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015718:	b480      	push	{r7}
 801571a:	b083      	sub	sp, #12
 801571c:	af00      	add	r7, sp, #0
 801571e:	4603      	mov	r3, r0
 8015720:	6039      	str	r1, [r7, #0]
 8015722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	2204      	movs	r2, #4
 8015728:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801572a:	4b03      	ldr	r3, [pc, #12]	; (8015738 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801572c:	4618      	mov	r0, r3
 801572e:	370c      	adds	r7, #12
 8015730:	46bd      	mov	sp, r7
 8015732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015736:	4770      	bx	lr
 8015738:	2000098c 	.word	0x2000098c

0801573c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b082      	sub	sp, #8
 8015740:	af00      	add	r7, sp, #0
 8015742:	4603      	mov	r3, r0
 8015744:	6039      	str	r1, [r7, #0]
 8015746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015748:	79fb      	ldrb	r3, [r7, #7]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d105      	bne.n	801575a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801574e:	683a      	ldr	r2, [r7, #0]
 8015750:	4907      	ldr	r1, [pc, #28]	; (8015770 <USBD_FS_ProductStrDescriptor+0x34>)
 8015752:	4808      	ldr	r0, [pc, #32]	; (8015774 <USBD_FS_ProductStrDescriptor+0x38>)
 8015754:	f7fc ff53 	bl	80125fe <USBD_GetString>
 8015758:	e004      	b.n	8015764 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801575a:	683a      	ldr	r2, [r7, #0]
 801575c:	4904      	ldr	r1, [pc, #16]	; (8015770 <USBD_FS_ProductStrDescriptor+0x34>)
 801575e:	4805      	ldr	r0, [pc, #20]	; (8015774 <USBD_FS_ProductStrDescriptor+0x38>)
 8015760:	f7fc ff4d 	bl	80125fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015764:	4b02      	ldr	r3, [pc, #8]	; (8015770 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015766:	4618      	mov	r0, r3
 8015768:	3708      	adds	r7, #8
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	2000c364 	.word	0x2000c364
 8015774:	0801b6cc 	.word	0x0801b6cc

08015778 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	4603      	mov	r3, r0
 8015780:	6039      	str	r1, [r7, #0]
 8015782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015784:	683a      	ldr	r2, [r7, #0]
 8015786:	4904      	ldr	r1, [pc, #16]	; (8015798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015788:	4804      	ldr	r0, [pc, #16]	; (801579c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801578a:	f7fc ff38 	bl	80125fe <USBD_GetString>
  return USBD_StrDesc;
 801578e:	4b02      	ldr	r3, [pc, #8]	; (8015798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015790:	4618      	mov	r0, r3
 8015792:	3708      	adds	r7, #8
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}
 8015798:	2000c364 	.word	0x2000c364
 801579c:	0801b6e4 	.word	0x0801b6e4

080157a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	4603      	mov	r3, r0
 80157a8:	6039      	str	r1, [r7, #0]
 80157aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	221a      	movs	r2, #26
 80157b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80157b2:	f000 f843 	bl	801583c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80157b6:	4b02      	ldr	r3, [pc, #8]	; (80157c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	20000990 	.word	0x20000990

080157c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	6039      	str	r1, [r7, #0]
 80157ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80157d0:	79fb      	ldrb	r3, [r7, #7]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d105      	bne.n	80157e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	4907      	ldr	r1, [pc, #28]	; (80157f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80157da:	4808      	ldr	r0, [pc, #32]	; (80157fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80157dc:	f7fc ff0f 	bl	80125fe <USBD_GetString>
 80157e0:	e004      	b.n	80157ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	4904      	ldr	r1, [pc, #16]	; (80157f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80157e6:	4805      	ldr	r0, [pc, #20]	; (80157fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80157e8:	f7fc ff09 	bl	80125fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80157ec:	4b02      	ldr	r3, [pc, #8]	; (80157f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}
 80157f6:	bf00      	nop
 80157f8:	2000c364 	.word	0x2000c364
 80157fc:	0801b6f8 	.word	0x0801b6f8

08015800 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	4603      	mov	r3, r0
 8015808:	6039      	str	r1, [r7, #0]
 801580a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801580c:	79fb      	ldrb	r3, [r7, #7]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d105      	bne.n	801581e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015812:	683a      	ldr	r2, [r7, #0]
 8015814:	4907      	ldr	r1, [pc, #28]	; (8015834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015816:	4808      	ldr	r0, [pc, #32]	; (8015838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015818:	f7fc fef1 	bl	80125fe <USBD_GetString>
 801581c:	e004      	b.n	8015828 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801581e:	683a      	ldr	r2, [r7, #0]
 8015820:	4904      	ldr	r1, [pc, #16]	; (8015834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015822:	4805      	ldr	r0, [pc, #20]	; (8015838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015824:	f7fc feeb 	bl	80125fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015828:	4b02      	ldr	r3, [pc, #8]	; (8015834 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801582a:	4618      	mov	r0, r3
 801582c:	3708      	adds	r7, #8
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	2000c364 	.word	0x2000c364
 8015838:	0801b704 	.word	0x0801b704

0801583c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015842:	4b0f      	ldr	r3, [pc, #60]	; (8015880 <Get_SerialNum+0x44>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015848:	4b0e      	ldr	r3, [pc, #56]	; (8015884 <Get_SerialNum+0x48>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801584e:	4b0e      	ldr	r3, [pc, #56]	; (8015888 <Get_SerialNum+0x4c>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015854:	68fa      	ldr	r2, [r7, #12]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	4413      	add	r3, r2
 801585a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d009      	beq.n	8015876 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015862:	2208      	movs	r2, #8
 8015864:	4909      	ldr	r1, [pc, #36]	; (801588c <Get_SerialNum+0x50>)
 8015866:	68f8      	ldr	r0, [r7, #12]
 8015868:	f000 f814 	bl	8015894 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801586c:	2204      	movs	r2, #4
 801586e:	4908      	ldr	r1, [pc, #32]	; (8015890 <Get_SerialNum+0x54>)
 8015870:	68b8      	ldr	r0, [r7, #8]
 8015872:	f000 f80f 	bl	8015894 <IntToUnicode>
  }
}
 8015876:	bf00      	nop
 8015878:	3710      	adds	r7, #16
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	1fff7a10 	.word	0x1fff7a10
 8015884:	1fff7a14 	.word	0x1fff7a14
 8015888:	1fff7a18 	.word	0x1fff7a18
 801588c:	20000992 	.word	0x20000992
 8015890:	200009a2 	.word	0x200009a2

08015894 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015894:	b480      	push	{r7}
 8015896:	b087      	sub	sp, #28
 8015898:	af00      	add	r7, sp, #0
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	60b9      	str	r1, [r7, #8]
 801589e:	4613      	mov	r3, r2
 80158a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80158a2:	2300      	movs	r3, #0
 80158a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80158a6:	2300      	movs	r3, #0
 80158a8:	75fb      	strb	r3, [r7, #23]
 80158aa:	e027      	b.n	80158fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	0f1b      	lsrs	r3, r3, #28
 80158b0:	2b09      	cmp	r3, #9
 80158b2:	d80b      	bhi.n	80158cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	0f1b      	lsrs	r3, r3, #28
 80158b8:	b2da      	uxtb	r2, r3
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
 80158bc:	005b      	lsls	r3, r3, #1
 80158be:	4619      	mov	r1, r3
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	440b      	add	r3, r1
 80158c4:	3230      	adds	r2, #48	; 0x30
 80158c6:	b2d2      	uxtb	r2, r2
 80158c8:	701a      	strb	r2, [r3, #0]
 80158ca:	e00a      	b.n	80158e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	0f1b      	lsrs	r3, r3, #28
 80158d0:	b2da      	uxtb	r2, r3
 80158d2:	7dfb      	ldrb	r3, [r7, #23]
 80158d4:	005b      	lsls	r3, r3, #1
 80158d6:	4619      	mov	r1, r3
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	440b      	add	r3, r1
 80158dc:	3237      	adds	r2, #55	; 0x37
 80158de:	b2d2      	uxtb	r2, r2
 80158e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	011b      	lsls	r3, r3, #4
 80158e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80158e8:	7dfb      	ldrb	r3, [r7, #23]
 80158ea:	005b      	lsls	r3, r3, #1
 80158ec:	3301      	adds	r3, #1
 80158ee:	68ba      	ldr	r2, [r7, #8]
 80158f0:	4413      	add	r3, r2
 80158f2:	2200      	movs	r2, #0
 80158f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80158f6:	7dfb      	ldrb	r3, [r7, #23]
 80158f8:	3301      	adds	r3, #1
 80158fa:	75fb      	strb	r3, [r7, #23]
 80158fc:	7dfa      	ldrb	r2, [r7, #23]
 80158fe:	79fb      	ldrb	r3, [r7, #7]
 8015900:	429a      	cmp	r2, r3
 8015902:	d3d3      	bcc.n	80158ac <IntToUnicode+0x18>
  }
}
 8015904:	bf00      	nop
 8015906:	371c      	adds	r7, #28
 8015908:	46bd      	mov	sp, r7
 801590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590e:	4770      	bx	lr

08015910 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b08a      	sub	sp, #40	; 0x28
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015918:	f107 0314 	add.w	r3, r7, #20
 801591c:	2200      	movs	r2, #0
 801591e:	601a      	str	r2, [r3, #0]
 8015920:	605a      	str	r2, [r3, #4]
 8015922:	609a      	str	r2, [r3, #8]
 8015924:	60da      	str	r2, [r3, #12]
 8015926:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015930:	d13a      	bne.n	80159a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015932:	2300      	movs	r3, #0
 8015934:	613b      	str	r3, [r7, #16]
 8015936:	4b1e      	ldr	r3, [pc, #120]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 8015938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801593a:	4a1d      	ldr	r2, [pc, #116]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 801593c:	f043 0301 	orr.w	r3, r3, #1
 8015940:	6313      	str	r3, [r2, #48]	; 0x30
 8015942:	4b1b      	ldr	r3, [pc, #108]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 8015944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015946:	f003 0301 	and.w	r3, r3, #1
 801594a:	613b      	str	r3, [r7, #16]
 801594c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801594e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015954:	2302      	movs	r3, #2
 8015956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015958:	2300      	movs	r3, #0
 801595a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801595c:	2303      	movs	r3, #3
 801595e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015960:	230a      	movs	r3, #10
 8015962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015964:	f107 0314 	add.w	r3, r7, #20
 8015968:	4619      	mov	r1, r3
 801596a:	4812      	ldr	r0, [pc, #72]	; (80159b4 <HAL_PCD_MspInit+0xa4>)
 801596c:	f7f6 fbd4 	bl	800c118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015970:	4b0f      	ldr	r3, [pc, #60]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 8015972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015974:	4a0e      	ldr	r2, [pc, #56]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 8015976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801597a:	6353      	str	r3, [r2, #52]	; 0x34
 801597c:	2300      	movs	r3, #0
 801597e:	60fb      	str	r3, [r7, #12]
 8015980:	4b0b      	ldr	r3, [pc, #44]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 8015982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015984:	4a0a      	ldr	r2, [pc, #40]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 8015986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801598a:	6453      	str	r3, [r2, #68]	; 0x44
 801598c:	4b08      	ldr	r3, [pc, #32]	; (80159b0 <HAL_PCD_MspInit+0xa0>)
 801598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015994:	60fb      	str	r3, [r7, #12]
 8015996:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015998:	2200      	movs	r2, #0
 801599a:	2105      	movs	r1, #5
 801599c:	2043      	movs	r0, #67	; 0x43
 801599e:	f7f5 fff3 	bl	800b988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80159a2:	2043      	movs	r0, #67	; 0x43
 80159a4:	f7f6 f80c 	bl	800b9c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80159a8:	bf00      	nop
 80159aa:	3728      	adds	r7, #40	; 0x28
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}
 80159b0:	40023800 	.word	0x40023800
 80159b4:	40020000 	.word	0x40020000

080159b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b082      	sub	sp, #8
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80159cc:	4619      	mov	r1, r3
 80159ce:	4610      	mov	r0, r2
 80159d0:	f7fb fe92 	bl	80116f8 <USBD_LL_SetupStage>
}
 80159d4:	bf00      	nop
 80159d6:	3708      	adds	r7, #8
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b082      	sub	sp, #8
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	460b      	mov	r3, r1
 80159e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80159ee:	78fa      	ldrb	r2, [r7, #3]
 80159f0:	6879      	ldr	r1, [r7, #4]
 80159f2:	4613      	mov	r3, r2
 80159f4:	00db      	lsls	r3, r3, #3
 80159f6:	1a9b      	subs	r3, r3, r2
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	440b      	add	r3, r1
 80159fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015a00:	681a      	ldr	r2, [r3, #0]
 8015a02:	78fb      	ldrb	r3, [r7, #3]
 8015a04:	4619      	mov	r1, r3
 8015a06:	f7fb feca 	bl	801179e <USBD_LL_DataOutStage>
}
 8015a0a:	bf00      	nop
 8015a0c:	3708      	adds	r7, #8
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}

08015a12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a12:	b580      	push	{r7, lr}
 8015a14:	b082      	sub	sp, #8
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
 8015a1a:	460b      	mov	r3, r1
 8015a1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015a24:	78fa      	ldrb	r2, [r7, #3]
 8015a26:	6879      	ldr	r1, [r7, #4]
 8015a28:	4613      	mov	r3, r2
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	1a9b      	subs	r3, r3, r2
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	440b      	add	r3, r1
 8015a32:	3348      	adds	r3, #72	; 0x48
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	78fb      	ldrb	r3, [r7, #3]
 8015a38:	4619      	mov	r1, r3
 8015a3a:	f7fb ff13 	bl	8011864 <USBD_LL_DataInStage>
}
 8015a3e:	bf00      	nop
 8015a40:	3708      	adds	r7, #8
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}

08015a46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a46:	b580      	push	{r7, lr}
 8015a48:	b082      	sub	sp, #8
 8015a4a:	af00      	add	r7, sp, #0
 8015a4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7fc f817 	bl	8011a88 <USBD_LL_SOF>
}
 8015a5a:	bf00      	nop
 8015a5c:	3708      	adds	r7, #8
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a62:	b580      	push	{r7, lr}
 8015a64:	b084      	sub	sp, #16
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	68db      	ldr	r3, [r3, #12]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d102      	bne.n	8015a7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015a76:	2300      	movs	r3, #0
 8015a78:	73fb      	strb	r3, [r7, #15]
 8015a7a:	e008      	b.n	8015a8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	2b02      	cmp	r3, #2
 8015a82:	d102      	bne.n	8015a8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015a84:	2301      	movs	r3, #1
 8015a86:	73fb      	strb	r3, [r7, #15]
 8015a88:	e001      	b.n	8015a8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015a8a:	f7ee ff0f 	bl	80048ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a94:	7bfa      	ldrb	r2, [r7, #15]
 8015a96:	4611      	mov	r1, r2
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7fb ffba 	bl	8011a12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fb ff73 	bl	8011990 <USBD_LL_Reset>
}
 8015aaa:	bf00      	nop
 8015aac:	3710      	adds	r7, #16
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
	...

08015ab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fb ffb5 	bl	8011a32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	6812      	ldr	r2, [r2, #0]
 8015ad6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015ada:	f043 0301 	orr.w	r3, r3, #1
 8015ade:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6a1b      	ldr	r3, [r3, #32]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d005      	beq.n	8015af4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ae8:	4b04      	ldr	r3, [pc, #16]	; (8015afc <HAL_PCD_SuspendCallback+0x48>)
 8015aea:	691b      	ldr	r3, [r3, #16]
 8015aec:	4a03      	ldr	r2, [pc, #12]	; (8015afc <HAL_PCD_SuspendCallback+0x48>)
 8015aee:	f043 0306 	orr.w	r3, r3, #6
 8015af2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015af4:	bf00      	nop
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	e000ed00 	.word	0xe000ed00

08015b00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b082      	sub	sp, #8
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7fb ffa4 	bl	8011a5c <USBD_LL_Resume>
}
 8015b14:	bf00      	nop
 8015b16:	3708      	adds	r7, #8
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}

08015b1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	460b      	mov	r3, r1
 8015b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b2e:	78fa      	ldrb	r2, [r7, #3]
 8015b30:	4611      	mov	r1, r2
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7fb ffcf 	bl	8011ad6 <USBD_LL_IsoOUTIncomplete>
}
 8015b38:	bf00      	nop
 8015b3a:	3708      	adds	r7, #8
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	460b      	mov	r3, r1
 8015b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b52:	78fa      	ldrb	r2, [r7, #3]
 8015b54:	4611      	mov	r1, r2
 8015b56:	4618      	mov	r0, r3
 8015b58:	f7fb ffb0 	bl	8011abc <USBD_LL_IsoINIncomplete>
}
 8015b5c:	bf00      	nop
 8015b5e:	3708      	adds	r7, #8
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7fb ffbc 	bl	8011af0 <USBD_LL_DevConnected>
}
 8015b78:	bf00      	nop
 8015b7a:	3708      	adds	r7, #8
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7fb ffb9 	bl	8011b06 <USBD_LL_DevDisconnected>
}
 8015b94:	bf00      	nop
 8015b96:	3708      	adds	r7, #8
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b082      	sub	sp, #8
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d13c      	bne.n	8015c26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015bac:	4a20      	ldr	r2, [pc, #128]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	4a1e      	ldr	r2, [pc, #120]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015bbc:	4b1c      	ldr	r3, [pc, #112]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015bc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015bc4:	4b1a      	ldr	r3, [pc, #104]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bc6:	2204      	movs	r2, #4
 8015bc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015bca:	4b19      	ldr	r3, [pc, #100]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bcc:	2202      	movs	r2, #2
 8015bce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015bd0:	4b17      	ldr	r3, [pc, #92]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015bd6:	4b16      	ldr	r3, [pc, #88]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bd8:	2202      	movs	r2, #2
 8015bda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015bdc:	4b14      	ldr	r3, [pc, #80]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bde:	2200      	movs	r2, #0
 8015be0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015be2:	4b13      	ldr	r3, [pc, #76]	; (8015c30 <USBD_LL_Init+0x94>)
 8015be4:	2200      	movs	r2, #0
 8015be6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015be8:	4b11      	ldr	r3, [pc, #68]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015bee:	4b10      	ldr	r3, [pc, #64]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015bf4:	4b0e      	ldr	r3, [pc, #56]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015bfa:	480d      	ldr	r0, [pc, #52]	; (8015c30 <USBD_LL_Init+0x94>)
 8015bfc:	f7f6 fc96 	bl	800c52c <HAL_PCD_Init>
 8015c00:	4603      	mov	r3, r0
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d001      	beq.n	8015c0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015c06:	f7ee fe51 	bl	80048ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015c0a:	2180      	movs	r1, #128	; 0x80
 8015c0c:	4808      	ldr	r0, [pc, #32]	; (8015c30 <USBD_LL_Init+0x94>)
 8015c0e:	f7f7 fdf4 	bl	800d7fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015c12:	2240      	movs	r2, #64	; 0x40
 8015c14:	2100      	movs	r1, #0
 8015c16:	4806      	ldr	r0, [pc, #24]	; (8015c30 <USBD_LL_Init+0x94>)
 8015c18:	f7f7 fda8 	bl	800d76c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015c1c:	2280      	movs	r2, #128	; 0x80
 8015c1e:	2101      	movs	r1, #1
 8015c20:	4803      	ldr	r0, [pc, #12]	; (8015c30 <USBD_LL_Init+0x94>)
 8015c22:	f7f7 fda3 	bl	800d76c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015c26:	2300      	movs	r3, #0
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	2000c564 	.word	0x2000c564

08015c34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b084      	sub	sp, #16
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c40:	2300      	movs	r3, #0
 8015c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7f6 fd8b 	bl	800c766 <HAL_PCD_Start>
 8015c50:	4603      	mov	r3, r0
 8015c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c54:	7bfb      	ldrb	r3, [r7, #15]
 8015c56:	4618      	mov	r0, r3
 8015c58:	f000 f92a 	bl	8015eb0 <USBD_Get_USB_Status>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3710      	adds	r7, #16
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b084      	sub	sp, #16
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	4608      	mov	r0, r1
 8015c74:	4611      	mov	r1, r2
 8015c76:	461a      	mov	r2, r3
 8015c78:	4603      	mov	r3, r0
 8015c7a:	70fb      	strb	r3, [r7, #3]
 8015c7c:	460b      	mov	r3, r1
 8015c7e:	70bb      	strb	r3, [r7, #2]
 8015c80:	4613      	mov	r3, r2
 8015c82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c84:	2300      	movs	r3, #0
 8015c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c92:	78bb      	ldrb	r3, [r7, #2]
 8015c94:	883a      	ldrh	r2, [r7, #0]
 8015c96:	78f9      	ldrb	r1, [r7, #3]
 8015c98:	f7f7 f96f 	bl	800cf7a <HAL_PCD_EP_Open>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f000 f904 	bl	8015eb0 <USBD_Get_USB_Status>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}

08015cb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b084      	sub	sp, #16
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	6078      	str	r0, [r7, #4]
 8015cbe:	460b      	mov	r3, r1
 8015cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cd0:	78fa      	ldrb	r2, [r7, #3]
 8015cd2:	4611      	mov	r1, r2
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7f7 f9b8 	bl	800d04a <HAL_PCD_EP_Close>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f000 f8e5 	bl	8015eb0 <USBD_Get_USB_Status>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cec:	4618      	mov	r0, r3
 8015cee:	3710      	adds	r7, #16
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}

08015cf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b084      	sub	sp, #16
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d00:	2300      	movs	r3, #0
 8015d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d04:	2300      	movs	r3, #0
 8015d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d0e:	78fa      	ldrb	r2, [r7, #3]
 8015d10:	4611      	mov	r1, r2
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f7 fa90 	bl	800d238 <HAL_PCD_EP_SetStall>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d1c:	7bfb      	ldrb	r3, [r7, #15]
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f000 f8c6 	bl	8015eb0 <USBD_Get_USB_Status>
 8015d24:	4603      	mov	r3, r0
 8015d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3710      	adds	r7, #16
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d32:	b580      	push	{r7, lr}
 8015d34:	b084      	sub	sp, #16
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
 8015d3a:	460b      	mov	r3, r1
 8015d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d42:	2300      	movs	r3, #0
 8015d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d4c:	78fa      	ldrb	r2, [r7, #3]
 8015d4e:	4611      	mov	r1, r2
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7f7 fad5 	bl	800d300 <HAL_PCD_EP_ClrStall>
 8015d56:	4603      	mov	r3, r0
 8015d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d5a:	7bfb      	ldrb	r3, [r7, #15]
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f000 f8a7 	bl	8015eb0 <USBD_Get_USB_Status>
 8015d62:	4603      	mov	r3, r0
 8015d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	3710      	adds	r7, #16
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d70:	b480      	push	{r7}
 8015d72:	b085      	sub	sp, #20
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	460b      	mov	r3, r1
 8015d7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	da0b      	bge.n	8015da4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015d8c:	78fb      	ldrb	r3, [r7, #3]
 8015d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d92:	68f9      	ldr	r1, [r7, #12]
 8015d94:	4613      	mov	r3, r2
 8015d96:	00db      	lsls	r3, r3, #3
 8015d98:	1a9b      	subs	r3, r3, r2
 8015d9a:	009b      	lsls	r3, r3, #2
 8015d9c:	440b      	add	r3, r1
 8015d9e:	333e      	adds	r3, #62	; 0x3e
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	e00b      	b.n	8015dbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015da4:	78fb      	ldrb	r3, [r7, #3]
 8015da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015daa:	68f9      	ldr	r1, [r7, #12]
 8015dac:	4613      	mov	r3, r2
 8015dae:	00db      	lsls	r3, r3, #3
 8015db0:	1a9b      	subs	r3, r3, r2
 8015db2:	009b      	lsls	r3, r3, #2
 8015db4:	440b      	add	r3, r1
 8015db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015dba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3714      	adds	r7, #20
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc6:	4770      	bx	lr

08015dc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	460b      	mov	r3, r1
 8015dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015de2:	78fa      	ldrb	r2, [r7, #3]
 8015de4:	4611      	mov	r1, r2
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f7 f8a2 	bl	800cf30 <HAL_PCD_SetAddress>
 8015dec:	4603      	mov	r3, r0
 8015dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015df0:	7bfb      	ldrb	r3, [r7, #15]
 8015df2:	4618      	mov	r0, r3
 8015df4:	f000 f85c 	bl	8015eb0 <USBD_Get_USB_Status>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3710      	adds	r7, #16
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b086      	sub	sp, #24
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	60f8      	str	r0, [r7, #12]
 8015e0e:	607a      	str	r2, [r7, #4]
 8015e10:	603b      	str	r3, [r7, #0]
 8015e12:	460b      	mov	r3, r1
 8015e14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e16:	2300      	movs	r3, #0
 8015e18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e24:	7af9      	ldrb	r1, [r7, #11]
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	f7f7 f9bb 	bl	800d1a4 <HAL_PCD_EP_Transmit>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e32:	7dfb      	ldrb	r3, [r7, #23]
 8015e34:	4618      	mov	r0, r3
 8015e36:	f000 f83b 	bl	8015eb0 <USBD_Get_USB_Status>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3718      	adds	r7, #24
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b086      	sub	sp, #24
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	60f8      	str	r0, [r7, #12]
 8015e50:	607a      	str	r2, [r7, #4]
 8015e52:	603b      	str	r3, [r7, #0]
 8015e54:	460b      	mov	r3, r1
 8015e56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e66:	7af9      	ldrb	r1, [r7, #11]
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	687a      	ldr	r2, [r7, #4]
 8015e6c:	f7f7 f937 	bl	800d0de <HAL_PCD_EP_Receive>
 8015e70:	4603      	mov	r3, r0
 8015e72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e74:	7dfb      	ldrb	r3, [r7, #23]
 8015e76:	4618      	mov	r0, r3
 8015e78:	f000 f81a 	bl	8015eb0 <USBD_Get_USB_Status>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e80:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3718      	adds	r7, #24
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}

08015e8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e8a:	b580      	push	{r7, lr}
 8015e8c:	b082      	sub	sp, #8
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	6078      	str	r0, [r7, #4]
 8015e92:	460b      	mov	r3, r1
 8015e94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e9c:	78fa      	ldrb	r2, [r7, #3]
 8015e9e:	4611      	mov	r1, r2
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7f7 f967 	bl	800d174 <HAL_PCD_EP_GetRxCount>
 8015ea6:	4603      	mov	r3, r0
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3708      	adds	r7, #8
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	b085      	sub	sp, #20
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015ebe:	79fb      	ldrb	r3, [r7, #7]
 8015ec0:	2b03      	cmp	r3, #3
 8015ec2:	d817      	bhi.n	8015ef4 <USBD_Get_USB_Status+0x44>
 8015ec4:	a201      	add	r2, pc, #4	; (adr r2, 8015ecc <USBD_Get_USB_Status+0x1c>)
 8015ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eca:	bf00      	nop
 8015ecc:	08015edd 	.word	0x08015edd
 8015ed0:	08015ee3 	.word	0x08015ee3
 8015ed4:	08015ee9 	.word	0x08015ee9
 8015ed8:	08015eef 	.word	0x08015eef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015edc:	2300      	movs	r3, #0
 8015ede:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee0:	e00b      	b.n	8015efa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ee2:	2303      	movs	r3, #3
 8015ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee6:	e008      	b.n	8015efa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ee8:	2301      	movs	r3, #1
 8015eea:	73fb      	strb	r3, [r7, #15]
    break;
 8015eec:	e005      	b.n	8015efa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015eee:	2303      	movs	r3, #3
 8015ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8015ef2:	e002      	b.n	8015efa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ef4:	2303      	movs	r3, #3
 8015ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8015ef8:	bf00      	nop
  }
  return usb_status;
 8015efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3714      	adds	r7, #20
 8015f00:	46bd      	mov	sp, r7
 8015f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f06:	4770      	bx	lr

08015f08 <__errno>:
 8015f08:	4b01      	ldr	r3, [pc, #4]	; (8015f10 <__errno+0x8>)
 8015f0a:	6818      	ldr	r0, [r3, #0]
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop
 8015f10:	200009ac 	.word	0x200009ac

08015f14 <__libc_init_array>:
 8015f14:	b570      	push	{r4, r5, r6, lr}
 8015f16:	4e0d      	ldr	r6, [pc, #52]	; (8015f4c <__libc_init_array+0x38>)
 8015f18:	4c0d      	ldr	r4, [pc, #52]	; (8015f50 <__libc_init_array+0x3c>)
 8015f1a:	1ba4      	subs	r4, r4, r6
 8015f1c:	10a4      	asrs	r4, r4, #2
 8015f1e:	2500      	movs	r5, #0
 8015f20:	42a5      	cmp	r5, r4
 8015f22:	d109      	bne.n	8015f38 <__libc_init_array+0x24>
 8015f24:	4e0b      	ldr	r6, [pc, #44]	; (8015f54 <__libc_init_array+0x40>)
 8015f26:	4c0c      	ldr	r4, [pc, #48]	; (8015f58 <__libc_init_array+0x44>)
 8015f28:	f005 fa8c 	bl	801b444 <_init>
 8015f2c:	1ba4      	subs	r4, r4, r6
 8015f2e:	10a4      	asrs	r4, r4, #2
 8015f30:	2500      	movs	r5, #0
 8015f32:	42a5      	cmp	r5, r4
 8015f34:	d105      	bne.n	8015f42 <__libc_init_array+0x2e>
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
 8015f38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f3c:	4798      	blx	r3
 8015f3e:	3501      	adds	r5, #1
 8015f40:	e7ee      	b.n	8015f20 <__libc_init_array+0xc>
 8015f42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f46:	4798      	blx	r3
 8015f48:	3501      	adds	r5, #1
 8015f4a:	e7f2      	b.n	8015f32 <__libc_init_array+0x1e>
 8015f4c:	0801bc18 	.word	0x0801bc18
 8015f50:	0801bc18 	.word	0x0801bc18
 8015f54:	0801bc18 	.word	0x0801bc18
 8015f58:	0801bc1c 	.word	0x0801bc1c

08015f5c <malloc>:
 8015f5c:	4b02      	ldr	r3, [pc, #8]	; (8015f68 <malloc+0xc>)
 8015f5e:	4601      	mov	r1, r0
 8015f60:	6818      	ldr	r0, [r3, #0]
 8015f62:	f000 b885 	b.w	8016070 <_malloc_r>
 8015f66:	bf00      	nop
 8015f68:	200009ac 	.word	0x200009ac

08015f6c <free>:
 8015f6c:	4b02      	ldr	r3, [pc, #8]	; (8015f78 <free+0xc>)
 8015f6e:	4601      	mov	r1, r0
 8015f70:	6818      	ldr	r0, [r3, #0]
 8015f72:	f000 b82f 	b.w	8015fd4 <_free_r>
 8015f76:	bf00      	nop
 8015f78:	200009ac 	.word	0x200009ac

08015f7c <memcpy>:
 8015f7c:	b510      	push	{r4, lr}
 8015f7e:	1e43      	subs	r3, r0, #1
 8015f80:	440a      	add	r2, r1
 8015f82:	4291      	cmp	r1, r2
 8015f84:	d100      	bne.n	8015f88 <memcpy+0xc>
 8015f86:	bd10      	pop	{r4, pc}
 8015f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f90:	e7f7      	b.n	8015f82 <memcpy+0x6>

08015f92 <memmove>:
 8015f92:	4288      	cmp	r0, r1
 8015f94:	b510      	push	{r4, lr}
 8015f96:	eb01 0302 	add.w	r3, r1, r2
 8015f9a:	d807      	bhi.n	8015fac <memmove+0x1a>
 8015f9c:	1e42      	subs	r2, r0, #1
 8015f9e:	4299      	cmp	r1, r3
 8015fa0:	d00a      	beq.n	8015fb8 <memmove+0x26>
 8015fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fa6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015faa:	e7f8      	b.n	8015f9e <memmove+0xc>
 8015fac:	4283      	cmp	r3, r0
 8015fae:	d9f5      	bls.n	8015f9c <memmove+0xa>
 8015fb0:	1881      	adds	r1, r0, r2
 8015fb2:	1ad2      	subs	r2, r2, r3
 8015fb4:	42d3      	cmn	r3, r2
 8015fb6:	d100      	bne.n	8015fba <memmove+0x28>
 8015fb8:	bd10      	pop	{r4, pc}
 8015fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015fbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015fc2:	e7f7      	b.n	8015fb4 <memmove+0x22>

08015fc4 <memset>:
 8015fc4:	4402      	add	r2, r0
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	4293      	cmp	r3, r2
 8015fca:	d100      	bne.n	8015fce <memset+0xa>
 8015fcc:	4770      	bx	lr
 8015fce:	f803 1b01 	strb.w	r1, [r3], #1
 8015fd2:	e7f9      	b.n	8015fc8 <memset+0x4>

08015fd4 <_free_r>:
 8015fd4:	b538      	push	{r3, r4, r5, lr}
 8015fd6:	4605      	mov	r5, r0
 8015fd8:	2900      	cmp	r1, #0
 8015fda:	d045      	beq.n	8016068 <_free_r+0x94>
 8015fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fe0:	1f0c      	subs	r4, r1, #4
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	bfb8      	it	lt
 8015fe6:	18e4      	addlt	r4, r4, r3
 8015fe8:	f002 ff86 	bl	8018ef8 <__malloc_lock>
 8015fec:	4a1f      	ldr	r2, [pc, #124]	; (801606c <_free_r+0x98>)
 8015fee:	6813      	ldr	r3, [r2, #0]
 8015ff0:	4610      	mov	r0, r2
 8015ff2:	b933      	cbnz	r3, 8016002 <_free_r+0x2e>
 8015ff4:	6063      	str	r3, [r4, #4]
 8015ff6:	6014      	str	r4, [r2, #0]
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ffe:	f002 bf7c 	b.w	8018efa <__malloc_unlock>
 8016002:	42a3      	cmp	r3, r4
 8016004:	d90c      	bls.n	8016020 <_free_r+0x4c>
 8016006:	6821      	ldr	r1, [r4, #0]
 8016008:	1862      	adds	r2, r4, r1
 801600a:	4293      	cmp	r3, r2
 801600c:	bf04      	itt	eq
 801600e:	681a      	ldreq	r2, [r3, #0]
 8016010:	685b      	ldreq	r3, [r3, #4]
 8016012:	6063      	str	r3, [r4, #4]
 8016014:	bf04      	itt	eq
 8016016:	1852      	addeq	r2, r2, r1
 8016018:	6022      	streq	r2, [r4, #0]
 801601a:	6004      	str	r4, [r0, #0]
 801601c:	e7ec      	b.n	8015ff8 <_free_r+0x24>
 801601e:	4613      	mov	r3, r2
 8016020:	685a      	ldr	r2, [r3, #4]
 8016022:	b10a      	cbz	r2, 8016028 <_free_r+0x54>
 8016024:	42a2      	cmp	r2, r4
 8016026:	d9fa      	bls.n	801601e <_free_r+0x4a>
 8016028:	6819      	ldr	r1, [r3, #0]
 801602a:	1858      	adds	r0, r3, r1
 801602c:	42a0      	cmp	r0, r4
 801602e:	d10b      	bne.n	8016048 <_free_r+0x74>
 8016030:	6820      	ldr	r0, [r4, #0]
 8016032:	4401      	add	r1, r0
 8016034:	1858      	adds	r0, r3, r1
 8016036:	4282      	cmp	r2, r0
 8016038:	6019      	str	r1, [r3, #0]
 801603a:	d1dd      	bne.n	8015ff8 <_free_r+0x24>
 801603c:	6810      	ldr	r0, [r2, #0]
 801603e:	6852      	ldr	r2, [r2, #4]
 8016040:	605a      	str	r2, [r3, #4]
 8016042:	4401      	add	r1, r0
 8016044:	6019      	str	r1, [r3, #0]
 8016046:	e7d7      	b.n	8015ff8 <_free_r+0x24>
 8016048:	d902      	bls.n	8016050 <_free_r+0x7c>
 801604a:	230c      	movs	r3, #12
 801604c:	602b      	str	r3, [r5, #0]
 801604e:	e7d3      	b.n	8015ff8 <_free_r+0x24>
 8016050:	6820      	ldr	r0, [r4, #0]
 8016052:	1821      	adds	r1, r4, r0
 8016054:	428a      	cmp	r2, r1
 8016056:	bf04      	itt	eq
 8016058:	6811      	ldreq	r1, [r2, #0]
 801605a:	6852      	ldreq	r2, [r2, #4]
 801605c:	6062      	str	r2, [r4, #4]
 801605e:	bf04      	itt	eq
 8016060:	1809      	addeq	r1, r1, r0
 8016062:	6021      	streq	r1, [r4, #0]
 8016064:	605c      	str	r4, [r3, #4]
 8016066:	e7c7      	b.n	8015ff8 <_free_r+0x24>
 8016068:	bd38      	pop	{r3, r4, r5, pc}
 801606a:	bf00      	nop
 801606c:	20004d58 	.word	0x20004d58

08016070 <_malloc_r>:
 8016070:	b570      	push	{r4, r5, r6, lr}
 8016072:	1ccd      	adds	r5, r1, #3
 8016074:	f025 0503 	bic.w	r5, r5, #3
 8016078:	3508      	adds	r5, #8
 801607a:	2d0c      	cmp	r5, #12
 801607c:	bf38      	it	cc
 801607e:	250c      	movcc	r5, #12
 8016080:	2d00      	cmp	r5, #0
 8016082:	4606      	mov	r6, r0
 8016084:	db01      	blt.n	801608a <_malloc_r+0x1a>
 8016086:	42a9      	cmp	r1, r5
 8016088:	d903      	bls.n	8016092 <_malloc_r+0x22>
 801608a:	230c      	movs	r3, #12
 801608c:	6033      	str	r3, [r6, #0]
 801608e:	2000      	movs	r0, #0
 8016090:	bd70      	pop	{r4, r5, r6, pc}
 8016092:	f002 ff31 	bl	8018ef8 <__malloc_lock>
 8016096:	4a21      	ldr	r2, [pc, #132]	; (801611c <_malloc_r+0xac>)
 8016098:	6814      	ldr	r4, [r2, #0]
 801609a:	4621      	mov	r1, r4
 801609c:	b991      	cbnz	r1, 80160c4 <_malloc_r+0x54>
 801609e:	4c20      	ldr	r4, [pc, #128]	; (8016120 <_malloc_r+0xb0>)
 80160a0:	6823      	ldr	r3, [r4, #0]
 80160a2:	b91b      	cbnz	r3, 80160ac <_malloc_r+0x3c>
 80160a4:	4630      	mov	r0, r6
 80160a6:	f000 fe7b 	bl	8016da0 <_sbrk_r>
 80160aa:	6020      	str	r0, [r4, #0]
 80160ac:	4629      	mov	r1, r5
 80160ae:	4630      	mov	r0, r6
 80160b0:	f000 fe76 	bl	8016da0 <_sbrk_r>
 80160b4:	1c43      	adds	r3, r0, #1
 80160b6:	d124      	bne.n	8016102 <_malloc_r+0x92>
 80160b8:	230c      	movs	r3, #12
 80160ba:	6033      	str	r3, [r6, #0]
 80160bc:	4630      	mov	r0, r6
 80160be:	f002 ff1c 	bl	8018efa <__malloc_unlock>
 80160c2:	e7e4      	b.n	801608e <_malloc_r+0x1e>
 80160c4:	680b      	ldr	r3, [r1, #0]
 80160c6:	1b5b      	subs	r3, r3, r5
 80160c8:	d418      	bmi.n	80160fc <_malloc_r+0x8c>
 80160ca:	2b0b      	cmp	r3, #11
 80160cc:	d90f      	bls.n	80160ee <_malloc_r+0x7e>
 80160ce:	600b      	str	r3, [r1, #0]
 80160d0:	50cd      	str	r5, [r1, r3]
 80160d2:	18cc      	adds	r4, r1, r3
 80160d4:	4630      	mov	r0, r6
 80160d6:	f002 ff10 	bl	8018efa <__malloc_unlock>
 80160da:	f104 000b 	add.w	r0, r4, #11
 80160de:	1d23      	adds	r3, r4, #4
 80160e0:	f020 0007 	bic.w	r0, r0, #7
 80160e4:	1ac3      	subs	r3, r0, r3
 80160e6:	d0d3      	beq.n	8016090 <_malloc_r+0x20>
 80160e8:	425a      	negs	r2, r3
 80160ea:	50e2      	str	r2, [r4, r3]
 80160ec:	e7d0      	b.n	8016090 <_malloc_r+0x20>
 80160ee:	428c      	cmp	r4, r1
 80160f0:	684b      	ldr	r3, [r1, #4]
 80160f2:	bf16      	itet	ne
 80160f4:	6063      	strne	r3, [r4, #4]
 80160f6:	6013      	streq	r3, [r2, #0]
 80160f8:	460c      	movne	r4, r1
 80160fa:	e7eb      	b.n	80160d4 <_malloc_r+0x64>
 80160fc:	460c      	mov	r4, r1
 80160fe:	6849      	ldr	r1, [r1, #4]
 8016100:	e7cc      	b.n	801609c <_malloc_r+0x2c>
 8016102:	1cc4      	adds	r4, r0, #3
 8016104:	f024 0403 	bic.w	r4, r4, #3
 8016108:	42a0      	cmp	r0, r4
 801610a:	d005      	beq.n	8016118 <_malloc_r+0xa8>
 801610c:	1a21      	subs	r1, r4, r0
 801610e:	4630      	mov	r0, r6
 8016110:	f000 fe46 	bl	8016da0 <_sbrk_r>
 8016114:	3001      	adds	r0, #1
 8016116:	d0cf      	beq.n	80160b8 <_malloc_r+0x48>
 8016118:	6025      	str	r5, [r4, #0]
 801611a:	e7db      	b.n	80160d4 <_malloc_r+0x64>
 801611c:	20004d58 	.word	0x20004d58
 8016120:	20004d5c 	.word	0x20004d5c

08016124 <__cvt>:
 8016124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016128:	ec55 4b10 	vmov	r4, r5, d0
 801612c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801612e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016132:	2d00      	cmp	r5, #0
 8016134:	460e      	mov	r6, r1
 8016136:	4691      	mov	r9, r2
 8016138:	4619      	mov	r1, r3
 801613a:	bfb8      	it	lt
 801613c:	4622      	movlt	r2, r4
 801613e:	462b      	mov	r3, r5
 8016140:	f027 0720 	bic.w	r7, r7, #32
 8016144:	bfbb      	ittet	lt
 8016146:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801614a:	461d      	movlt	r5, r3
 801614c:	2300      	movge	r3, #0
 801614e:	232d      	movlt	r3, #45	; 0x2d
 8016150:	bfb8      	it	lt
 8016152:	4614      	movlt	r4, r2
 8016154:	2f46      	cmp	r7, #70	; 0x46
 8016156:	700b      	strb	r3, [r1, #0]
 8016158:	d004      	beq.n	8016164 <__cvt+0x40>
 801615a:	2f45      	cmp	r7, #69	; 0x45
 801615c:	d100      	bne.n	8016160 <__cvt+0x3c>
 801615e:	3601      	adds	r6, #1
 8016160:	2102      	movs	r1, #2
 8016162:	e000      	b.n	8016166 <__cvt+0x42>
 8016164:	2103      	movs	r1, #3
 8016166:	ab03      	add	r3, sp, #12
 8016168:	9301      	str	r3, [sp, #4]
 801616a:	ab02      	add	r3, sp, #8
 801616c:	9300      	str	r3, [sp, #0]
 801616e:	4632      	mov	r2, r6
 8016170:	4653      	mov	r3, sl
 8016172:	ec45 4b10 	vmov	d0, r4, r5
 8016176:	f001 fdbb 	bl	8017cf0 <_dtoa_r>
 801617a:	2f47      	cmp	r7, #71	; 0x47
 801617c:	4680      	mov	r8, r0
 801617e:	d102      	bne.n	8016186 <__cvt+0x62>
 8016180:	f019 0f01 	tst.w	r9, #1
 8016184:	d026      	beq.n	80161d4 <__cvt+0xb0>
 8016186:	2f46      	cmp	r7, #70	; 0x46
 8016188:	eb08 0906 	add.w	r9, r8, r6
 801618c:	d111      	bne.n	80161b2 <__cvt+0x8e>
 801618e:	f898 3000 	ldrb.w	r3, [r8]
 8016192:	2b30      	cmp	r3, #48	; 0x30
 8016194:	d10a      	bne.n	80161ac <__cvt+0x88>
 8016196:	2200      	movs	r2, #0
 8016198:	2300      	movs	r3, #0
 801619a:	4620      	mov	r0, r4
 801619c:	4629      	mov	r1, r5
 801619e:	f7ea fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 80161a2:	b918      	cbnz	r0, 80161ac <__cvt+0x88>
 80161a4:	f1c6 0601 	rsb	r6, r6, #1
 80161a8:	f8ca 6000 	str.w	r6, [sl]
 80161ac:	f8da 3000 	ldr.w	r3, [sl]
 80161b0:	4499      	add	r9, r3
 80161b2:	2200      	movs	r2, #0
 80161b4:	2300      	movs	r3, #0
 80161b6:	4620      	mov	r0, r4
 80161b8:	4629      	mov	r1, r5
 80161ba:	f7ea fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80161be:	b938      	cbnz	r0, 80161d0 <__cvt+0xac>
 80161c0:	2230      	movs	r2, #48	; 0x30
 80161c2:	9b03      	ldr	r3, [sp, #12]
 80161c4:	454b      	cmp	r3, r9
 80161c6:	d205      	bcs.n	80161d4 <__cvt+0xb0>
 80161c8:	1c59      	adds	r1, r3, #1
 80161ca:	9103      	str	r1, [sp, #12]
 80161cc:	701a      	strb	r2, [r3, #0]
 80161ce:	e7f8      	b.n	80161c2 <__cvt+0x9e>
 80161d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80161d4:	9b03      	ldr	r3, [sp, #12]
 80161d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161d8:	eba3 0308 	sub.w	r3, r3, r8
 80161dc:	4640      	mov	r0, r8
 80161de:	6013      	str	r3, [r2, #0]
 80161e0:	b004      	add	sp, #16
 80161e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080161e6 <__exponent>:
 80161e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161e8:	2900      	cmp	r1, #0
 80161ea:	4604      	mov	r4, r0
 80161ec:	bfba      	itte	lt
 80161ee:	4249      	neglt	r1, r1
 80161f0:	232d      	movlt	r3, #45	; 0x2d
 80161f2:	232b      	movge	r3, #43	; 0x2b
 80161f4:	2909      	cmp	r1, #9
 80161f6:	f804 2b02 	strb.w	r2, [r4], #2
 80161fa:	7043      	strb	r3, [r0, #1]
 80161fc:	dd20      	ble.n	8016240 <__exponent+0x5a>
 80161fe:	f10d 0307 	add.w	r3, sp, #7
 8016202:	461f      	mov	r7, r3
 8016204:	260a      	movs	r6, #10
 8016206:	fb91 f5f6 	sdiv	r5, r1, r6
 801620a:	fb06 1115 	mls	r1, r6, r5, r1
 801620e:	3130      	adds	r1, #48	; 0x30
 8016210:	2d09      	cmp	r5, #9
 8016212:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016216:	f103 32ff 	add.w	r2, r3, #4294967295
 801621a:	4629      	mov	r1, r5
 801621c:	dc09      	bgt.n	8016232 <__exponent+0x4c>
 801621e:	3130      	adds	r1, #48	; 0x30
 8016220:	3b02      	subs	r3, #2
 8016222:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016226:	42bb      	cmp	r3, r7
 8016228:	4622      	mov	r2, r4
 801622a:	d304      	bcc.n	8016236 <__exponent+0x50>
 801622c:	1a10      	subs	r0, r2, r0
 801622e:	b003      	add	sp, #12
 8016230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016232:	4613      	mov	r3, r2
 8016234:	e7e7      	b.n	8016206 <__exponent+0x20>
 8016236:	f813 2b01 	ldrb.w	r2, [r3], #1
 801623a:	f804 2b01 	strb.w	r2, [r4], #1
 801623e:	e7f2      	b.n	8016226 <__exponent+0x40>
 8016240:	2330      	movs	r3, #48	; 0x30
 8016242:	4419      	add	r1, r3
 8016244:	7083      	strb	r3, [r0, #2]
 8016246:	1d02      	adds	r2, r0, #4
 8016248:	70c1      	strb	r1, [r0, #3]
 801624a:	e7ef      	b.n	801622c <__exponent+0x46>

0801624c <_printf_float>:
 801624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016250:	b08d      	sub	sp, #52	; 0x34
 8016252:	460c      	mov	r4, r1
 8016254:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016258:	4616      	mov	r6, r2
 801625a:	461f      	mov	r7, r3
 801625c:	4605      	mov	r5, r0
 801625e:	f002 fe2b 	bl	8018eb8 <_localeconv_r>
 8016262:	6803      	ldr	r3, [r0, #0]
 8016264:	9304      	str	r3, [sp, #16]
 8016266:	4618      	mov	r0, r3
 8016268:	f7e9 ffb2 	bl	80001d0 <strlen>
 801626c:	2300      	movs	r3, #0
 801626e:	930a      	str	r3, [sp, #40]	; 0x28
 8016270:	f8d8 3000 	ldr.w	r3, [r8]
 8016274:	9005      	str	r0, [sp, #20]
 8016276:	3307      	adds	r3, #7
 8016278:	f023 0307 	bic.w	r3, r3, #7
 801627c:	f103 0208 	add.w	r2, r3, #8
 8016280:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016284:	f8d4 b000 	ldr.w	fp, [r4]
 8016288:	f8c8 2000 	str.w	r2, [r8]
 801628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016290:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016294:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801629c:	9307      	str	r3, [sp, #28]
 801629e:	f8cd 8018 	str.w	r8, [sp, #24]
 80162a2:	f04f 32ff 	mov.w	r2, #4294967295
 80162a6:	4ba7      	ldr	r3, [pc, #668]	; (8016544 <_printf_float+0x2f8>)
 80162a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162ac:	f7ea fc3e 	bl	8000b2c <__aeabi_dcmpun>
 80162b0:	bb70      	cbnz	r0, 8016310 <_printf_float+0xc4>
 80162b2:	f04f 32ff 	mov.w	r2, #4294967295
 80162b6:	4ba3      	ldr	r3, [pc, #652]	; (8016544 <_printf_float+0x2f8>)
 80162b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162bc:	f7ea fc18 	bl	8000af0 <__aeabi_dcmple>
 80162c0:	bb30      	cbnz	r0, 8016310 <_printf_float+0xc4>
 80162c2:	2200      	movs	r2, #0
 80162c4:	2300      	movs	r3, #0
 80162c6:	4640      	mov	r0, r8
 80162c8:	4649      	mov	r1, r9
 80162ca:	f7ea fc07 	bl	8000adc <__aeabi_dcmplt>
 80162ce:	b110      	cbz	r0, 80162d6 <_printf_float+0x8a>
 80162d0:	232d      	movs	r3, #45	; 0x2d
 80162d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162d6:	4a9c      	ldr	r2, [pc, #624]	; (8016548 <_printf_float+0x2fc>)
 80162d8:	4b9c      	ldr	r3, [pc, #624]	; (801654c <_printf_float+0x300>)
 80162da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80162de:	bf8c      	ite	hi
 80162e0:	4690      	movhi	r8, r2
 80162e2:	4698      	movls	r8, r3
 80162e4:	2303      	movs	r3, #3
 80162e6:	f02b 0204 	bic.w	r2, fp, #4
 80162ea:	6123      	str	r3, [r4, #16]
 80162ec:	6022      	str	r2, [r4, #0]
 80162ee:	f04f 0900 	mov.w	r9, #0
 80162f2:	9700      	str	r7, [sp, #0]
 80162f4:	4633      	mov	r3, r6
 80162f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80162f8:	4621      	mov	r1, r4
 80162fa:	4628      	mov	r0, r5
 80162fc:	f000 f9e6 	bl	80166cc <_printf_common>
 8016300:	3001      	adds	r0, #1
 8016302:	f040 808d 	bne.w	8016420 <_printf_float+0x1d4>
 8016306:	f04f 30ff 	mov.w	r0, #4294967295
 801630a:	b00d      	add	sp, #52	; 0x34
 801630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016310:	4642      	mov	r2, r8
 8016312:	464b      	mov	r3, r9
 8016314:	4640      	mov	r0, r8
 8016316:	4649      	mov	r1, r9
 8016318:	f7ea fc08 	bl	8000b2c <__aeabi_dcmpun>
 801631c:	b110      	cbz	r0, 8016324 <_printf_float+0xd8>
 801631e:	4a8c      	ldr	r2, [pc, #560]	; (8016550 <_printf_float+0x304>)
 8016320:	4b8c      	ldr	r3, [pc, #560]	; (8016554 <_printf_float+0x308>)
 8016322:	e7da      	b.n	80162da <_printf_float+0x8e>
 8016324:	6861      	ldr	r1, [r4, #4]
 8016326:	1c4b      	adds	r3, r1, #1
 8016328:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801632c:	a80a      	add	r0, sp, #40	; 0x28
 801632e:	d13e      	bne.n	80163ae <_printf_float+0x162>
 8016330:	2306      	movs	r3, #6
 8016332:	6063      	str	r3, [r4, #4]
 8016334:	2300      	movs	r3, #0
 8016336:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801633a:	ab09      	add	r3, sp, #36	; 0x24
 801633c:	9300      	str	r3, [sp, #0]
 801633e:	ec49 8b10 	vmov	d0, r8, r9
 8016342:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016346:	6022      	str	r2, [r4, #0]
 8016348:	f8cd a004 	str.w	sl, [sp, #4]
 801634c:	6861      	ldr	r1, [r4, #4]
 801634e:	4628      	mov	r0, r5
 8016350:	f7ff fee8 	bl	8016124 <__cvt>
 8016354:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8016358:	2b47      	cmp	r3, #71	; 0x47
 801635a:	4680      	mov	r8, r0
 801635c:	d109      	bne.n	8016372 <_printf_float+0x126>
 801635e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016360:	1cd8      	adds	r0, r3, #3
 8016362:	db02      	blt.n	801636a <_printf_float+0x11e>
 8016364:	6862      	ldr	r2, [r4, #4]
 8016366:	4293      	cmp	r3, r2
 8016368:	dd47      	ble.n	80163fa <_printf_float+0x1ae>
 801636a:	f1aa 0a02 	sub.w	sl, sl, #2
 801636e:	fa5f fa8a 	uxtb.w	sl, sl
 8016372:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016376:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016378:	d824      	bhi.n	80163c4 <_printf_float+0x178>
 801637a:	3901      	subs	r1, #1
 801637c:	4652      	mov	r2, sl
 801637e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016382:	9109      	str	r1, [sp, #36]	; 0x24
 8016384:	f7ff ff2f 	bl	80161e6 <__exponent>
 8016388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801638a:	1813      	adds	r3, r2, r0
 801638c:	2a01      	cmp	r2, #1
 801638e:	4681      	mov	r9, r0
 8016390:	6123      	str	r3, [r4, #16]
 8016392:	dc02      	bgt.n	801639a <_printf_float+0x14e>
 8016394:	6822      	ldr	r2, [r4, #0]
 8016396:	07d1      	lsls	r1, r2, #31
 8016398:	d501      	bpl.n	801639e <_printf_float+0x152>
 801639a:	3301      	adds	r3, #1
 801639c:	6123      	str	r3, [r4, #16]
 801639e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d0a5      	beq.n	80162f2 <_printf_float+0xa6>
 80163a6:	232d      	movs	r3, #45	; 0x2d
 80163a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163ac:	e7a1      	b.n	80162f2 <_printf_float+0xa6>
 80163ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80163b2:	f000 8177 	beq.w	80166a4 <_printf_float+0x458>
 80163b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80163ba:	d1bb      	bne.n	8016334 <_printf_float+0xe8>
 80163bc:	2900      	cmp	r1, #0
 80163be:	d1b9      	bne.n	8016334 <_printf_float+0xe8>
 80163c0:	2301      	movs	r3, #1
 80163c2:	e7b6      	b.n	8016332 <_printf_float+0xe6>
 80163c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80163c8:	d119      	bne.n	80163fe <_printf_float+0x1b2>
 80163ca:	2900      	cmp	r1, #0
 80163cc:	6863      	ldr	r3, [r4, #4]
 80163ce:	dd0c      	ble.n	80163ea <_printf_float+0x19e>
 80163d0:	6121      	str	r1, [r4, #16]
 80163d2:	b913      	cbnz	r3, 80163da <_printf_float+0x18e>
 80163d4:	6822      	ldr	r2, [r4, #0]
 80163d6:	07d2      	lsls	r2, r2, #31
 80163d8:	d502      	bpl.n	80163e0 <_printf_float+0x194>
 80163da:	3301      	adds	r3, #1
 80163dc:	440b      	add	r3, r1
 80163de:	6123      	str	r3, [r4, #16]
 80163e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80163e4:	f04f 0900 	mov.w	r9, #0
 80163e8:	e7d9      	b.n	801639e <_printf_float+0x152>
 80163ea:	b913      	cbnz	r3, 80163f2 <_printf_float+0x1a6>
 80163ec:	6822      	ldr	r2, [r4, #0]
 80163ee:	07d0      	lsls	r0, r2, #31
 80163f0:	d501      	bpl.n	80163f6 <_printf_float+0x1aa>
 80163f2:	3302      	adds	r3, #2
 80163f4:	e7f3      	b.n	80163de <_printf_float+0x192>
 80163f6:	2301      	movs	r3, #1
 80163f8:	e7f1      	b.n	80163de <_printf_float+0x192>
 80163fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80163fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016402:	4293      	cmp	r3, r2
 8016404:	db05      	blt.n	8016412 <_printf_float+0x1c6>
 8016406:	6822      	ldr	r2, [r4, #0]
 8016408:	6123      	str	r3, [r4, #16]
 801640a:	07d1      	lsls	r1, r2, #31
 801640c:	d5e8      	bpl.n	80163e0 <_printf_float+0x194>
 801640e:	3301      	adds	r3, #1
 8016410:	e7e5      	b.n	80163de <_printf_float+0x192>
 8016412:	2b00      	cmp	r3, #0
 8016414:	bfd4      	ite	le
 8016416:	f1c3 0302 	rsble	r3, r3, #2
 801641a:	2301      	movgt	r3, #1
 801641c:	4413      	add	r3, r2
 801641e:	e7de      	b.n	80163de <_printf_float+0x192>
 8016420:	6823      	ldr	r3, [r4, #0]
 8016422:	055a      	lsls	r2, r3, #21
 8016424:	d407      	bmi.n	8016436 <_printf_float+0x1ea>
 8016426:	6923      	ldr	r3, [r4, #16]
 8016428:	4642      	mov	r2, r8
 801642a:	4631      	mov	r1, r6
 801642c:	4628      	mov	r0, r5
 801642e:	47b8      	blx	r7
 8016430:	3001      	adds	r0, #1
 8016432:	d12b      	bne.n	801648c <_printf_float+0x240>
 8016434:	e767      	b.n	8016306 <_printf_float+0xba>
 8016436:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801643a:	f240 80dc 	bls.w	80165f6 <_printf_float+0x3aa>
 801643e:	2200      	movs	r2, #0
 8016440:	2300      	movs	r3, #0
 8016442:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016446:	f7ea fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801644a:	2800      	cmp	r0, #0
 801644c:	d033      	beq.n	80164b6 <_printf_float+0x26a>
 801644e:	2301      	movs	r3, #1
 8016450:	4a41      	ldr	r2, [pc, #260]	; (8016558 <_printf_float+0x30c>)
 8016452:	4631      	mov	r1, r6
 8016454:	4628      	mov	r0, r5
 8016456:	47b8      	blx	r7
 8016458:	3001      	adds	r0, #1
 801645a:	f43f af54 	beq.w	8016306 <_printf_float+0xba>
 801645e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016462:	429a      	cmp	r2, r3
 8016464:	db02      	blt.n	801646c <_printf_float+0x220>
 8016466:	6823      	ldr	r3, [r4, #0]
 8016468:	07d8      	lsls	r0, r3, #31
 801646a:	d50f      	bpl.n	801648c <_printf_float+0x240>
 801646c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016470:	4631      	mov	r1, r6
 8016472:	4628      	mov	r0, r5
 8016474:	47b8      	blx	r7
 8016476:	3001      	adds	r0, #1
 8016478:	f43f af45 	beq.w	8016306 <_printf_float+0xba>
 801647c:	f04f 0800 	mov.w	r8, #0
 8016480:	f104 091a 	add.w	r9, r4, #26
 8016484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016486:	3b01      	subs	r3, #1
 8016488:	4543      	cmp	r3, r8
 801648a:	dc09      	bgt.n	80164a0 <_printf_float+0x254>
 801648c:	6823      	ldr	r3, [r4, #0]
 801648e:	079b      	lsls	r3, r3, #30
 8016490:	f100 8103 	bmi.w	801669a <_printf_float+0x44e>
 8016494:	68e0      	ldr	r0, [r4, #12]
 8016496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016498:	4298      	cmp	r0, r3
 801649a:	bfb8      	it	lt
 801649c:	4618      	movlt	r0, r3
 801649e:	e734      	b.n	801630a <_printf_float+0xbe>
 80164a0:	2301      	movs	r3, #1
 80164a2:	464a      	mov	r2, r9
 80164a4:	4631      	mov	r1, r6
 80164a6:	4628      	mov	r0, r5
 80164a8:	47b8      	blx	r7
 80164aa:	3001      	adds	r0, #1
 80164ac:	f43f af2b 	beq.w	8016306 <_printf_float+0xba>
 80164b0:	f108 0801 	add.w	r8, r8, #1
 80164b4:	e7e6      	b.n	8016484 <_printf_float+0x238>
 80164b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	dc2b      	bgt.n	8016514 <_printf_float+0x2c8>
 80164bc:	2301      	movs	r3, #1
 80164be:	4a26      	ldr	r2, [pc, #152]	; (8016558 <_printf_float+0x30c>)
 80164c0:	4631      	mov	r1, r6
 80164c2:	4628      	mov	r0, r5
 80164c4:	47b8      	blx	r7
 80164c6:	3001      	adds	r0, #1
 80164c8:	f43f af1d 	beq.w	8016306 <_printf_float+0xba>
 80164cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164ce:	b923      	cbnz	r3, 80164da <_printf_float+0x28e>
 80164d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164d2:	b913      	cbnz	r3, 80164da <_printf_float+0x28e>
 80164d4:	6823      	ldr	r3, [r4, #0]
 80164d6:	07d9      	lsls	r1, r3, #31
 80164d8:	d5d8      	bpl.n	801648c <_printf_float+0x240>
 80164da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164de:	4631      	mov	r1, r6
 80164e0:	4628      	mov	r0, r5
 80164e2:	47b8      	blx	r7
 80164e4:	3001      	adds	r0, #1
 80164e6:	f43f af0e 	beq.w	8016306 <_printf_float+0xba>
 80164ea:	f04f 0900 	mov.w	r9, #0
 80164ee:	f104 0a1a 	add.w	sl, r4, #26
 80164f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164f4:	425b      	negs	r3, r3
 80164f6:	454b      	cmp	r3, r9
 80164f8:	dc01      	bgt.n	80164fe <_printf_float+0x2b2>
 80164fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164fc:	e794      	b.n	8016428 <_printf_float+0x1dc>
 80164fe:	2301      	movs	r3, #1
 8016500:	4652      	mov	r2, sl
 8016502:	4631      	mov	r1, r6
 8016504:	4628      	mov	r0, r5
 8016506:	47b8      	blx	r7
 8016508:	3001      	adds	r0, #1
 801650a:	f43f aefc 	beq.w	8016306 <_printf_float+0xba>
 801650e:	f109 0901 	add.w	r9, r9, #1
 8016512:	e7ee      	b.n	80164f2 <_printf_float+0x2a6>
 8016514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016518:	429a      	cmp	r2, r3
 801651a:	bfa8      	it	ge
 801651c:	461a      	movge	r2, r3
 801651e:	2a00      	cmp	r2, #0
 8016520:	4691      	mov	r9, r2
 8016522:	dd07      	ble.n	8016534 <_printf_float+0x2e8>
 8016524:	4613      	mov	r3, r2
 8016526:	4631      	mov	r1, r6
 8016528:	4642      	mov	r2, r8
 801652a:	4628      	mov	r0, r5
 801652c:	47b8      	blx	r7
 801652e:	3001      	adds	r0, #1
 8016530:	f43f aee9 	beq.w	8016306 <_printf_float+0xba>
 8016534:	f104 031a 	add.w	r3, r4, #26
 8016538:	f04f 0b00 	mov.w	fp, #0
 801653c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016540:	9306      	str	r3, [sp, #24]
 8016542:	e015      	b.n	8016570 <_printf_float+0x324>
 8016544:	7fefffff 	.word	0x7fefffff
 8016548:	0801b73c 	.word	0x0801b73c
 801654c:	0801b738 	.word	0x0801b738
 8016550:	0801b744 	.word	0x0801b744
 8016554:	0801b740 	.word	0x0801b740
 8016558:	0801b748 	.word	0x0801b748
 801655c:	2301      	movs	r3, #1
 801655e:	9a06      	ldr	r2, [sp, #24]
 8016560:	4631      	mov	r1, r6
 8016562:	4628      	mov	r0, r5
 8016564:	47b8      	blx	r7
 8016566:	3001      	adds	r0, #1
 8016568:	f43f aecd 	beq.w	8016306 <_printf_float+0xba>
 801656c:	f10b 0b01 	add.w	fp, fp, #1
 8016570:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016574:	ebaa 0309 	sub.w	r3, sl, r9
 8016578:	455b      	cmp	r3, fp
 801657a:	dcef      	bgt.n	801655c <_printf_float+0x310>
 801657c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016580:	429a      	cmp	r2, r3
 8016582:	44d0      	add	r8, sl
 8016584:	db15      	blt.n	80165b2 <_printf_float+0x366>
 8016586:	6823      	ldr	r3, [r4, #0]
 8016588:	07da      	lsls	r2, r3, #31
 801658a:	d412      	bmi.n	80165b2 <_printf_float+0x366>
 801658c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801658e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016590:	eba3 020a 	sub.w	r2, r3, sl
 8016594:	eba3 0a01 	sub.w	sl, r3, r1
 8016598:	4592      	cmp	sl, r2
 801659a:	bfa8      	it	ge
 801659c:	4692      	movge	sl, r2
 801659e:	f1ba 0f00 	cmp.w	sl, #0
 80165a2:	dc0e      	bgt.n	80165c2 <_printf_float+0x376>
 80165a4:	f04f 0800 	mov.w	r8, #0
 80165a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80165ac:	f104 091a 	add.w	r9, r4, #26
 80165b0:	e019      	b.n	80165e6 <_printf_float+0x39a>
 80165b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165b6:	4631      	mov	r1, r6
 80165b8:	4628      	mov	r0, r5
 80165ba:	47b8      	blx	r7
 80165bc:	3001      	adds	r0, #1
 80165be:	d1e5      	bne.n	801658c <_printf_float+0x340>
 80165c0:	e6a1      	b.n	8016306 <_printf_float+0xba>
 80165c2:	4653      	mov	r3, sl
 80165c4:	4642      	mov	r2, r8
 80165c6:	4631      	mov	r1, r6
 80165c8:	4628      	mov	r0, r5
 80165ca:	47b8      	blx	r7
 80165cc:	3001      	adds	r0, #1
 80165ce:	d1e9      	bne.n	80165a4 <_printf_float+0x358>
 80165d0:	e699      	b.n	8016306 <_printf_float+0xba>
 80165d2:	2301      	movs	r3, #1
 80165d4:	464a      	mov	r2, r9
 80165d6:	4631      	mov	r1, r6
 80165d8:	4628      	mov	r0, r5
 80165da:	47b8      	blx	r7
 80165dc:	3001      	adds	r0, #1
 80165de:	f43f ae92 	beq.w	8016306 <_printf_float+0xba>
 80165e2:	f108 0801 	add.w	r8, r8, #1
 80165e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165ea:	1a9b      	subs	r3, r3, r2
 80165ec:	eba3 030a 	sub.w	r3, r3, sl
 80165f0:	4543      	cmp	r3, r8
 80165f2:	dcee      	bgt.n	80165d2 <_printf_float+0x386>
 80165f4:	e74a      	b.n	801648c <_printf_float+0x240>
 80165f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165f8:	2a01      	cmp	r2, #1
 80165fa:	dc01      	bgt.n	8016600 <_printf_float+0x3b4>
 80165fc:	07db      	lsls	r3, r3, #31
 80165fe:	d53a      	bpl.n	8016676 <_printf_float+0x42a>
 8016600:	2301      	movs	r3, #1
 8016602:	4642      	mov	r2, r8
 8016604:	4631      	mov	r1, r6
 8016606:	4628      	mov	r0, r5
 8016608:	47b8      	blx	r7
 801660a:	3001      	adds	r0, #1
 801660c:	f43f ae7b 	beq.w	8016306 <_printf_float+0xba>
 8016610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016614:	4631      	mov	r1, r6
 8016616:	4628      	mov	r0, r5
 8016618:	47b8      	blx	r7
 801661a:	3001      	adds	r0, #1
 801661c:	f108 0801 	add.w	r8, r8, #1
 8016620:	f43f ae71 	beq.w	8016306 <_printf_float+0xba>
 8016624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016626:	2200      	movs	r2, #0
 8016628:	f103 3aff 	add.w	sl, r3, #4294967295
 801662c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016630:	2300      	movs	r3, #0
 8016632:	f7ea fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 8016636:	b9c8      	cbnz	r0, 801666c <_printf_float+0x420>
 8016638:	4653      	mov	r3, sl
 801663a:	4642      	mov	r2, r8
 801663c:	4631      	mov	r1, r6
 801663e:	4628      	mov	r0, r5
 8016640:	47b8      	blx	r7
 8016642:	3001      	adds	r0, #1
 8016644:	d10e      	bne.n	8016664 <_printf_float+0x418>
 8016646:	e65e      	b.n	8016306 <_printf_float+0xba>
 8016648:	2301      	movs	r3, #1
 801664a:	4652      	mov	r2, sl
 801664c:	4631      	mov	r1, r6
 801664e:	4628      	mov	r0, r5
 8016650:	47b8      	blx	r7
 8016652:	3001      	adds	r0, #1
 8016654:	f43f ae57 	beq.w	8016306 <_printf_float+0xba>
 8016658:	f108 0801 	add.w	r8, r8, #1
 801665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801665e:	3b01      	subs	r3, #1
 8016660:	4543      	cmp	r3, r8
 8016662:	dcf1      	bgt.n	8016648 <_printf_float+0x3fc>
 8016664:	464b      	mov	r3, r9
 8016666:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801666a:	e6de      	b.n	801642a <_printf_float+0x1de>
 801666c:	f04f 0800 	mov.w	r8, #0
 8016670:	f104 0a1a 	add.w	sl, r4, #26
 8016674:	e7f2      	b.n	801665c <_printf_float+0x410>
 8016676:	2301      	movs	r3, #1
 8016678:	e7df      	b.n	801663a <_printf_float+0x3ee>
 801667a:	2301      	movs	r3, #1
 801667c:	464a      	mov	r2, r9
 801667e:	4631      	mov	r1, r6
 8016680:	4628      	mov	r0, r5
 8016682:	47b8      	blx	r7
 8016684:	3001      	adds	r0, #1
 8016686:	f43f ae3e 	beq.w	8016306 <_printf_float+0xba>
 801668a:	f108 0801 	add.w	r8, r8, #1
 801668e:	68e3      	ldr	r3, [r4, #12]
 8016690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016692:	1a9b      	subs	r3, r3, r2
 8016694:	4543      	cmp	r3, r8
 8016696:	dcf0      	bgt.n	801667a <_printf_float+0x42e>
 8016698:	e6fc      	b.n	8016494 <_printf_float+0x248>
 801669a:	f04f 0800 	mov.w	r8, #0
 801669e:	f104 0919 	add.w	r9, r4, #25
 80166a2:	e7f4      	b.n	801668e <_printf_float+0x442>
 80166a4:	2900      	cmp	r1, #0
 80166a6:	f43f ae8b 	beq.w	80163c0 <_printf_float+0x174>
 80166aa:	2300      	movs	r3, #0
 80166ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80166b0:	ab09      	add	r3, sp, #36	; 0x24
 80166b2:	9300      	str	r3, [sp, #0]
 80166b4:	ec49 8b10 	vmov	d0, r8, r9
 80166b8:	6022      	str	r2, [r4, #0]
 80166ba:	f8cd a004 	str.w	sl, [sp, #4]
 80166be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80166c2:	4628      	mov	r0, r5
 80166c4:	f7ff fd2e 	bl	8016124 <__cvt>
 80166c8:	4680      	mov	r8, r0
 80166ca:	e648      	b.n	801635e <_printf_float+0x112>

080166cc <_printf_common>:
 80166cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166d0:	4691      	mov	r9, r2
 80166d2:	461f      	mov	r7, r3
 80166d4:	688a      	ldr	r2, [r1, #8]
 80166d6:	690b      	ldr	r3, [r1, #16]
 80166d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80166dc:	4293      	cmp	r3, r2
 80166de:	bfb8      	it	lt
 80166e0:	4613      	movlt	r3, r2
 80166e2:	f8c9 3000 	str.w	r3, [r9]
 80166e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80166ea:	4606      	mov	r6, r0
 80166ec:	460c      	mov	r4, r1
 80166ee:	b112      	cbz	r2, 80166f6 <_printf_common+0x2a>
 80166f0:	3301      	adds	r3, #1
 80166f2:	f8c9 3000 	str.w	r3, [r9]
 80166f6:	6823      	ldr	r3, [r4, #0]
 80166f8:	0699      	lsls	r1, r3, #26
 80166fa:	bf42      	ittt	mi
 80166fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016700:	3302      	addmi	r3, #2
 8016702:	f8c9 3000 	strmi.w	r3, [r9]
 8016706:	6825      	ldr	r5, [r4, #0]
 8016708:	f015 0506 	ands.w	r5, r5, #6
 801670c:	d107      	bne.n	801671e <_printf_common+0x52>
 801670e:	f104 0a19 	add.w	sl, r4, #25
 8016712:	68e3      	ldr	r3, [r4, #12]
 8016714:	f8d9 2000 	ldr.w	r2, [r9]
 8016718:	1a9b      	subs	r3, r3, r2
 801671a:	42ab      	cmp	r3, r5
 801671c:	dc28      	bgt.n	8016770 <_printf_common+0xa4>
 801671e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016722:	6822      	ldr	r2, [r4, #0]
 8016724:	3300      	adds	r3, #0
 8016726:	bf18      	it	ne
 8016728:	2301      	movne	r3, #1
 801672a:	0692      	lsls	r2, r2, #26
 801672c:	d42d      	bmi.n	801678a <_printf_common+0xbe>
 801672e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016732:	4639      	mov	r1, r7
 8016734:	4630      	mov	r0, r6
 8016736:	47c0      	blx	r8
 8016738:	3001      	adds	r0, #1
 801673a:	d020      	beq.n	801677e <_printf_common+0xb2>
 801673c:	6823      	ldr	r3, [r4, #0]
 801673e:	68e5      	ldr	r5, [r4, #12]
 8016740:	f8d9 2000 	ldr.w	r2, [r9]
 8016744:	f003 0306 	and.w	r3, r3, #6
 8016748:	2b04      	cmp	r3, #4
 801674a:	bf08      	it	eq
 801674c:	1aad      	subeq	r5, r5, r2
 801674e:	68a3      	ldr	r3, [r4, #8]
 8016750:	6922      	ldr	r2, [r4, #16]
 8016752:	bf0c      	ite	eq
 8016754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016758:	2500      	movne	r5, #0
 801675a:	4293      	cmp	r3, r2
 801675c:	bfc4      	itt	gt
 801675e:	1a9b      	subgt	r3, r3, r2
 8016760:	18ed      	addgt	r5, r5, r3
 8016762:	f04f 0900 	mov.w	r9, #0
 8016766:	341a      	adds	r4, #26
 8016768:	454d      	cmp	r5, r9
 801676a:	d11a      	bne.n	80167a2 <_printf_common+0xd6>
 801676c:	2000      	movs	r0, #0
 801676e:	e008      	b.n	8016782 <_printf_common+0xb6>
 8016770:	2301      	movs	r3, #1
 8016772:	4652      	mov	r2, sl
 8016774:	4639      	mov	r1, r7
 8016776:	4630      	mov	r0, r6
 8016778:	47c0      	blx	r8
 801677a:	3001      	adds	r0, #1
 801677c:	d103      	bne.n	8016786 <_printf_common+0xba>
 801677e:	f04f 30ff 	mov.w	r0, #4294967295
 8016782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016786:	3501      	adds	r5, #1
 8016788:	e7c3      	b.n	8016712 <_printf_common+0x46>
 801678a:	18e1      	adds	r1, r4, r3
 801678c:	1c5a      	adds	r2, r3, #1
 801678e:	2030      	movs	r0, #48	; 0x30
 8016790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016794:	4422      	add	r2, r4
 8016796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801679a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801679e:	3302      	adds	r3, #2
 80167a0:	e7c5      	b.n	801672e <_printf_common+0x62>
 80167a2:	2301      	movs	r3, #1
 80167a4:	4622      	mov	r2, r4
 80167a6:	4639      	mov	r1, r7
 80167a8:	4630      	mov	r0, r6
 80167aa:	47c0      	blx	r8
 80167ac:	3001      	adds	r0, #1
 80167ae:	d0e6      	beq.n	801677e <_printf_common+0xb2>
 80167b0:	f109 0901 	add.w	r9, r9, #1
 80167b4:	e7d8      	b.n	8016768 <_printf_common+0x9c>
	...

080167b8 <_printf_i>:
 80167b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80167c0:	460c      	mov	r4, r1
 80167c2:	7e09      	ldrb	r1, [r1, #24]
 80167c4:	b085      	sub	sp, #20
 80167c6:	296e      	cmp	r1, #110	; 0x6e
 80167c8:	4617      	mov	r7, r2
 80167ca:	4606      	mov	r6, r0
 80167cc:	4698      	mov	r8, r3
 80167ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80167d0:	f000 80b3 	beq.w	801693a <_printf_i+0x182>
 80167d4:	d822      	bhi.n	801681c <_printf_i+0x64>
 80167d6:	2963      	cmp	r1, #99	; 0x63
 80167d8:	d036      	beq.n	8016848 <_printf_i+0x90>
 80167da:	d80a      	bhi.n	80167f2 <_printf_i+0x3a>
 80167dc:	2900      	cmp	r1, #0
 80167de:	f000 80b9 	beq.w	8016954 <_printf_i+0x19c>
 80167e2:	2958      	cmp	r1, #88	; 0x58
 80167e4:	f000 8083 	beq.w	80168ee <_printf_i+0x136>
 80167e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80167f0:	e032      	b.n	8016858 <_printf_i+0xa0>
 80167f2:	2964      	cmp	r1, #100	; 0x64
 80167f4:	d001      	beq.n	80167fa <_printf_i+0x42>
 80167f6:	2969      	cmp	r1, #105	; 0x69
 80167f8:	d1f6      	bne.n	80167e8 <_printf_i+0x30>
 80167fa:	6820      	ldr	r0, [r4, #0]
 80167fc:	6813      	ldr	r3, [r2, #0]
 80167fe:	0605      	lsls	r5, r0, #24
 8016800:	f103 0104 	add.w	r1, r3, #4
 8016804:	d52a      	bpl.n	801685c <_printf_i+0xa4>
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	6011      	str	r1, [r2, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	da03      	bge.n	8016816 <_printf_i+0x5e>
 801680e:	222d      	movs	r2, #45	; 0x2d
 8016810:	425b      	negs	r3, r3
 8016812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016816:	486f      	ldr	r0, [pc, #444]	; (80169d4 <_printf_i+0x21c>)
 8016818:	220a      	movs	r2, #10
 801681a:	e039      	b.n	8016890 <_printf_i+0xd8>
 801681c:	2973      	cmp	r1, #115	; 0x73
 801681e:	f000 809d 	beq.w	801695c <_printf_i+0x1a4>
 8016822:	d808      	bhi.n	8016836 <_printf_i+0x7e>
 8016824:	296f      	cmp	r1, #111	; 0x6f
 8016826:	d020      	beq.n	801686a <_printf_i+0xb2>
 8016828:	2970      	cmp	r1, #112	; 0x70
 801682a:	d1dd      	bne.n	80167e8 <_printf_i+0x30>
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	f043 0320 	orr.w	r3, r3, #32
 8016832:	6023      	str	r3, [r4, #0]
 8016834:	e003      	b.n	801683e <_printf_i+0x86>
 8016836:	2975      	cmp	r1, #117	; 0x75
 8016838:	d017      	beq.n	801686a <_printf_i+0xb2>
 801683a:	2978      	cmp	r1, #120	; 0x78
 801683c:	d1d4      	bne.n	80167e8 <_printf_i+0x30>
 801683e:	2378      	movs	r3, #120	; 0x78
 8016840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016844:	4864      	ldr	r0, [pc, #400]	; (80169d8 <_printf_i+0x220>)
 8016846:	e055      	b.n	80168f4 <_printf_i+0x13c>
 8016848:	6813      	ldr	r3, [r2, #0]
 801684a:	1d19      	adds	r1, r3, #4
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	6011      	str	r1, [r2, #0]
 8016850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016858:	2301      	movs	r3, #1
 801685a:	e08c      	b.n	8016976 <_printf_i+0x1be>
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	6011      	str	r1, [r2, #0]
 8016860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016864:	bf18      	it	ne
 8016866:	b21b      	sxthne	r3, r3
 8016868:	e7cf      	b.n	801680a <_printf_i+0x52>
 801686a:	6813      	ldr	r3, [r2, #0]
 801686c:	6825      	ldr	r5, [r4, #0]
 801686e:	1d18      	adds	r0, r3, #4
 8016870:	6010      	str	r0, [r2, #0]
 8016872:	0628      	lsls	r0, r5, #24
 8016874:	d501      	bpl.n	801687a <_printf_i+0xc2>
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	e002      	b.n	8016880 <_printf_i+0xc8>
 801687a:	0668      	lsls	r0, r5, #25
 801687c:	d5fb      	bpl.n	8016876 <_printf_i+0xbe>
 801687e:	881b      	ldrh	r3, [r3, #0]
 8016880:	4854      	ldr	r0, [pc, #336]	; (80169d4 <_printf_i+0x21c>)
 8016882:	296f      	cmp	r1, #111	; 0x6f
 8016884:	bf14      	ite	ne
 8016886:	220a      	movne	r2, #10
 8016888:	2208      	moveq	r2, #8
 801688a:	2100      	movs	r1, #0
 801688c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016890:	6865      	ldr	r5, [r4, #4]
 8016892:	60a5      	str	r5, [r4, #8]
 8016894:	2d00      	cmp	r5, #0
 8016896:	f2c0 8095 	blt.w	80169c4 <_printf_i+0x20c>
 801689a:	6821      	ldr	r1, [r4, #0]
 801689c:	f021 0104 	bic.w	r1, r1, #4
 80168a0:	6021      	str	r1, [r4, #0]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d13d      	bne.n	8016922 <_printf_i+0x16a>
 80168a6:	2d00      	cmp	r5, #0
 80168a8:	f040 808e 	bne.w	80169c8 <_printf_i+0x210>
 80168ac:	4665      	mov	r5, ip
 80168ae:	2a08      	cmp	r2, #8
 80168b0:	d10b      	bne.n	80168ca <_printf_i+0x112>
 80168b2:	6823      	ldr	r3, [r4, #0]
 80168b4:	07db      	lsls	r3, r3, #31
 80168b6:	d508      	bpl.n	80168ca <_printf_i+0x112>
 80168b8:	6923      	ldr	r3, [r4, #16]
 80168ba:	6862      	ldr	r2, [r4, #4]
 80168bc:	429a      	cmp	r2, r3
 80168be:	bfde      	ittt	le
 80168c0:	2330      	movle	r3, #48	; 0x30
 80168c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80168c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80168ca:	ebac 0305 	sub.w	r3, ip, r5
 80168ce:	6123      	str	r3, [r4, #16]
 80168d0:	f8cd 8000 	str.w	r8, [sp]
 80168d4:	463b      	mov	r3, r7
 80168d6:	aa03      	add	r2, sp, #12
 80168d8:	4621      	mov	r1, r4
 80168da:	4630      	mov	r0, r6
 80168dc:	f7ff fef6 	bl	80166cc <_printf_common>
 80168e0:	3001      	adds	r0, #1
 80168e2:	d14d      	bne.n	8016980 <_printf_i+0x1c8>
 80168e4:	f04f 30ff 	mov.w	r0, #4294967295
 80168e8:	b005      	add	sp, #20
 80168ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168ee:	4839      	ldr	r0, [pc, #228]	; (80169d4 <_printf_i+0x21c>)
 80168f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80168f4:	6813      	ldr	r3, [r2, #0]
 80168f6:	6821      	ldr	r1, [r4, #0]
 80168f8:	1d1d      	adds	r5, r3, #4
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	6015      	str	r5, [r2, #0]
 80168fe:	060a      	lsls	r2, r1, #24
 8016900:	d50b      	bpl.n	801691a <_printf_i+0x162>
 8016902:	07ca      	lsls	r2, r1, #31
 8016904:	bf44      	itt	mi
 8016906:	f041 0120 	orrmi.w	r1, r1, #32
 801690a:	6021      	strmi	r1, [r4, #0]
 801690c:	b91b      	cbnz	r3, 8016916 <_printf_i+0x15e>
 801690e:	6822      	ldr	r2, [r4, #0]
 8016910:	f022 0220 	bic.w	r2, r2, #32
 8016914:	6022      	str	r2, [r4, #0]
 8016916:	2210      	movs	r2, #16
 8016918:	e7b7      	b.n	801688a <_printf_i+0xd2>
 801691a:	064d      	lsls	r5, r1, #25
 801691c:	bf48      	it	mi
 801691e:	b29b      	uxthmi	r3, r3
 8016920:	e7ef      	b.n	8016902 <_printf_i+0x14a>
 8016922:	4665      	mov	r5, ip
 8016924:	fbb3 f1f2 	udiv	r1, r3, r2
 8016928:	fb02 3311 	mls	r3, r2, r1, r3
 801692c:	5cc3      	ldrb	r3, [r0, r3]
 801692e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016932:	460b      	mov	r3, r1
 8016934:	2900      	cmp	r1, #0
 8016936:	d1f5      	bne.n	8016924 <_printf_i+0x16c>
 8016938:	e7b9      	b.n	80168ae <_printf_i+0xf6>
 801693a:	6813      	ldr	r3, [r2, #0]
 801693c:	6825      	ldr	r5, [r4, #0]
 801693e:	6961      	ldr	r1, [r4, #20]
 8016940:	1d18      	adds	r0, r3, #4
 8016942:	6010      	str	r0, [r2, #0]
 8016944:	0628      	lsls	r0, r5, #24
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	d501      	bpl.n	801694e <_printf_i+0x196>
 801694a:	6019      	str	r1, [r3, #0]
 801694c:	e002      	b.n	8016954 <_printf_i+0x19c>
 801694e:	066a      	lsls	r2, r5, #25
 8016950:	d5fb      	bpl.n	801694a <_printf_i+0x192>
 8016952:	8019      	strh	r1, [r3, #0]
 8016954:	2300      	movs	r3, #0
 8016956:	6123      	str	r3, [r4, #16]
 8016958:	4665      	mov	r5, ip
 801695a:	e7b9      	b.n	80168d0 <_printf_i+0x118>
 801695c:	6813      	ldr	r3, [r2, #0]
 801695e:	1d19      	adds	r1, r3, #4
 8016960:	6011      	str	r1, [r2, #0]
 8016962:	681d      	ldr	r5, [r3, #0]
 8016964:	6862      	ldr	r2, [r4, #4]
 8016966:	2100      	movs	r1, #0
 8016968:	4628      	mov	r0, r5
 801696a:	f7e9 fc39 	bl	80001e0 <memchr>
 801696e:	b108      	cbz	r0, 8016974 <_printf_i+0x1bc>
 8016970:	1b40      	subs	r0, r0, r5
 8016972:	6060      	str	r0, [r4, #4]
 8016974:	6863      	ldr	r3, [r4, #4]
 8016976:	6123      	str	r3, [r4, #16]
 8016978:	2300      	movs	r3, #0
 801697a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801697e:	e7a7      	b.n	80168d0 <_printf_i+0x118>
 8016980:	6923      	ldr	r3, [r4, #16]
 8016982:	462a      	mov	r2, r5
 8016984:	4639      	mov	r1, r7
 8016986:	4630      	mov	r0, r6
 8016988:	47c0      	blx	r8
 801698a:	3001      	adds	r0, #1
 801698c:	d0aa      	beq.n	80168e4 <_printf_i+0x12c>
 801698e:	6823      	ldr	r3, [r4, #0]
 8016990:	079b      	lsls	r3, r3, #30
 8016992:	d413      	bmi.n	80169bc <_printf_i+0x204>
 8016994:	68e0      	ldr	r0, [r4, #12]
 8016996:	9b03      	ldr	r3, [sp, #12]
 8016998:	4298      	cmp	r0, r3
 801699a:	bfb8      	it	lt
 801699c:	4618      	movlt	r0, r3
 801699e:	e7a3      	b.n	80168e8 <_printf_i+0x130>
 80169a0:	2301      	movs	r3, #1
 80169a2:	464a      	mov	r2, r9
 80169a4:	4639      	mov	r1, r7
 80169a6:	4630      	mov	r0, r6
 80169a8:	47c0      	blx	r8
 80169aa:	3001      	adds	r0, #1
 80169ac:	d09a      	beq.n	80168e4 <_printf_i+0x12c>
 80169ae:	3501      	adds	r5, #1
 80169b0:	68e3      	ldr	r3, [r4, #12]
 80169b2:	9a03      	ldr	r2, [sp, #12]
 80169b4:	1a9b      	subs	r3, r3, r2
 80169b6:	42ab      	cmp	r3, r5
 80169b8:	dcf2      	bgt.n	80169a0 <_printf_i+0x1e8>
 80169ba:	e7eb      	b.n	8016994 <_printf_i+0x1dc>
 80169bc:	2500      	movs	r5, #0
 80169be:	f104 0919 	add.w	r9, r4, #25
 80169c2:	e7f5      	b.n	80169b0 <_printf_i+0x1f8>
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d1ac      	bne.n	8016922 <_printf_i+0x16a>
 80169c8:	7803      	ldrb	r3, [r0, #0]
 80169ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80169ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80169d2:	e76c      	b.n	80168ae <_printf_i+0xf6>
 80169d4:	0801b74a 	.word	0x0801b74a
 80169d8:	0801b75b 	.word	0x0801b75b

080169dc <_scanf_float>:
 80169dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e0:	469a      	mov	sl, r3
 80169e2:	688b      	ldr	r3, [r1, #8]
 80169e4:	4616      	mov	r6, r2
 80169e6:	1e5a      	subs	r2, r3, #1
 80169e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80169ec:	b087      	sub	sp, #28
 80169ee:	bf83      	ittte	hi
 80169f0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80169f4:	189b      	addhi	r3, r3, r2
 80169f6:	9301      	strhi	r3, [sp, #4]
 80169f8:	2300      	movls	r3, #0
 80169fa:	bf86      	itte	hi
 80169fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016a00:	608b      	strhi	r3, [r1, #8]
 8016a02:	9301      	strls	r3, [sp, #4]
 8016a04:	680b      	ldr	r3, [r1, #0]
 8016a06:	4688      	mov	r8, r1
 8016a08:	f04f 0b00 	mov.w	fp, #0
 8016a0c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016a10:	f848 3b1c 	str.w	r3, [r8], #28
 8016a14:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016a18:	4607      	mov	r7, r0
 8016a1a:	460c      	mov	r4, r1
 8016a1c:	4645      	mov	r5, r8
 8016a1e:	465a      	mov	r2, fp
 8016a20:	46d9      	mov	r9, fp
 8016a22:	f8cd b008 	str.w	fp, [sp, #8]
 8016a26:	68a1      	ldr	r1, [r4, #8]
 8016a28:	b181      	cbz	r1, 8016a4c <_scanf_float+0x70>
 8016a2a:	6833      	ldr	r3, [r6, #0]
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	2b49      	cmp	r3, #73	; 0x49
 8016a30:	d071      	beq.n	8016b16 <_scanf_float+0x13a>
 8016a32:	d84d      	bhi.n	8016ad0 <_scanf_float+0xf4>
 8016a34:	2b39      	cmp	r3, #57	; 0x39
 8016a36:	d840      	bhi.n	8016aba <_scanf_float+0xde>
 8016a38:	2b31      	cmp	r3, #49	; 0x31
 8016a3a:	f080 8088 	bcs.w	8016b4e <_scanf_float+0x172>
 8016a3e:	2b2d      	cmp	r3, #45	; 0x2d
 8016a40:	f000 8090 	beq.w	8016b64 <_scanf_float+0x188>
 8016a44:	d815      	bhi.n	8016a72 <_scanf_float+0x96>
 8016a46:	2b2b      	cmp	r3, #43	; 0x2b
 8016a48:	f000 808c 	beq.w	8016b64 <_scanf_float+0x188>
 8016a4c:	f1b9 0f00 	cmp.w	r9, #0
 8016a50:	d003      	beq.n	8016a5a <_scanf_float+0x7e>
 8016a52:	6823      	ldr	r3, [r4, #0]
 8016a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a58:	6023      	str	r3, [r4, #0]
 8016a5a:	3a01      	subs	r2, #1
 8016a5c:	2a01      	cmp	r2, #1
 8016a5e:	f200 80ea 	bhi.w	8016c36 <_scanf_float+0x25a>
 8016a62:	4545      	cmp	r5, r8
 8016a64:	f200 80dc 	bhi.w	8016c20 <_scanf_float+0x244>
 8016a68:	2601      	movs	r6, #1
 8016a6a:	4630      	mov	r0, r6
 8016a6c:	b007      	add	sp, #28
 8016a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a72:	2b2e      	cmp	r3, #46	; 0x2e
 8016a74:	f000 809f 	beq.w	8016bb6 <_scanf_float+0x1da>
 8016a78:	2b30      	cmp	r3, #48	; 0x30
 8016a7a:	d1e7      	bne.n	8016a4c <_scanf_float+0x70>
 8016a7c:	6820      	ldr	r0, [r4, #0]
 8016a7e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016a82:	d064      	beq.n	8016b4e <_scanf_float+0x172>
 8016a84:	9b01      	ldr	r3, [sp, #4]
 8016a86:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016a8a:	6020      	str	r0, [r4, #0]
 8016a8c:	f109 0901 	add.w	r9, r9, #1
 8016a90:	b11b      	cbz	r3, 8016a9a <_scanf_float+0xbe>
 8016a92:	3b01      	subs	r3, #1
 8016a94:	3101      	adds	r1, #1
 8016a96:	9301      	str	r3, [sp, #4]
 8016a98:	60a1      	str	r1, [r4, #8]
 8016a9a:	68a3      	ldr	r3, [r4, #8]
 8016a9c:	3b01      	subs	r3, #1
 8016a9e:	60a3      	str	r3, [r4, #8]
 8016aa0:	6923      	ldr	r3, [r4, #16]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	6123      	str	r3, [r4, #16]
 8016aa6:	6873      	ldr	r3, [r6, #4]
 8016aa8:	3b01      	subs	r3, #1
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	6073      	str	r3, [r6, #4]
 8016aae:	f340 80ac 	ble.w	8016c0a <_scanf_float+0x22e>
 8016ab2:	6833      	ldr	r3, [r6, #0]
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	6033      	str	r3, [r6, #0]
 8016ab8:	e7b5      	b.n	8016a26 <_scanf_float+0x4a>
 8016aba:	2b45      	cmp	r3, #69	; 0x45
 8016abc:	f000 8085 	beq.w	8016bca <_scanf_float+0x1ee>
 8016ac0:	2b46      	cmp	r3, #70	; 0x46
 8016ac2:	d06a      	beq.n	8016b9a <_scanf_float+0x1be>
 8016ac4:	2b41      	cmp	r3, #65	; 0x41
 8016ac6:	d1c1      	bne.n	8016a4c <_scanf_float+0x70>
 8016ac8:	2a01      	cmp	r2, #1
 8016aca:	d1bf      	bne.n	8016a4c <_scanf_float+0x70>
 8016acc:	2202      	movs	r2, #2
 8016ace:	e046      	b.n	8016b5e <_scanf_float+0x182>
 8016ad0:	2b65      	cmp	r3, #101	; 0x65
 8016ad2:	d07a      	beq.n	8016bca <_scanf_float+0x1ee>
 8016ad4:	d818      	bhi.n	8016b08 <_scanf_float+0x12c>
 8016ad6:	2b54      	cmp	r3, #84	; 0x54
 8016ad8:	d066      	beq.n	8016ba8 <_scanf_float+0x1cc>
 8016ada:	d811      	bhi.n	8016b00 <_scanf_float+0x124>
 8016adc:	2b4e      	cmp	r3, #78	; 0x4e
 8016ade:	d1b5      	bne.n	8016a4c <_scanf_float+0x70>
 8016ae0:	2a00      	cmp	r2, #0
 8016ae2:	d146      	bne.n	8016b72 <_scanf_float+0x196>
 8016ae4:	f1b9 0f00 	cmp.w	r9, #0
 8016ae8:	d145      	bne.n	8016b76 <_scanf_float+0x19a>
 8016aea:	6821      	ldr	r1, [r4, #0]
 8016aec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016af0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016af4:	d13f      	bne.n	8016b76 <_scanf_float+0x19a>
 8016af6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016afa:	6021      	str	r1, [r4, #0]
 8016afc:	2201      	movs	r2, #1
 8016afe:	e02e      	b.n	8016b5e <_scanf_float+0x182>
 8016b00:	2b59      	cmp	r3, #89	; 0x59
 8016b02:	d01e      	beq.n	8016b42 <_scanf_float+0x166>
 8016b04:	2b61      	cmp	r3, #97	; 0x61
 8016b06:	e7de      	b.n	8016ac6 <_scanf_float+0xea>
 8016b08:	2b6e      	cmp	r3, #110	; 0x6e
 8016b0a:	d0e9      	beq.n	8016ae0 <_scanf_float+0x104>
 8016b0c:	d815      	bhi.n	8016b3a <_scanf_float+0x15e>
 8016b0e:	2b66      	cmp	r3, #102	; 0x66
 8016b10:	d043      	beq.n	8016b9a <_scanf_float+0x1be>
 8016b12:	2b69      	cmp	r3, #105	; 0x69
 8016b14:	d19a      	bne.n	8016a4c <_scanf_float+0x70>
 8016b16:	f1bb 0f00 	cmp.w	fp, #0
 8016b1a:	d138      	bne.n	8016b8e <_scanf_float+0x1b2>
 8016b1c:	f1b9 0f00 	cmp.w	r9, #0
 8016b20:	d197      	bne.n	8016a52 <_scanf_float+0x76>
 8016b22:	6821      	ldr	r1, [r4, #0]
 8016b24:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016b28:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016b2c:	d195      	bne.n	8016a5a <_scanf_float+0x7e>
 8016b2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016b32:	6021      	str	r1, [r4, #0]
 8016b34:	f04f 0b01 	mov.w	fp, #1
 8016b38:	e011      	b.n	8016b5e <_scanf_float+0x182>
 8016b3a:	2b74      	cmp	r3, #116	; 0x74
 8016b3c:	d034      	beq.n	8016ba8 <_scanf_float+0x1cc>
 8016b3e:	2b79      	cmp	r3, #121	; 0x79
 8016b40:	d184      	bne.n	8016a4c <_scanf_float+0x70>
 8016b42:	f1bb 0f07 	cmp.w	fp, #7
 8016b46:	d181      	bne.n	8016a4c <_scanf_float+0x70>
 8016b48:	f04f 0b08 	mov.w	fp, #8
 8016b4c:	e007      	b.n	8016b5e <_scanf_float+0x182>
 8016b4e:	eb12 0f0b 	cmn.w	r2, fp
 8016b52:	f47f af7b 	bne.w	8016a4c <_scanf_float+0x70>
 8016b56:	6821      	ldr	r1, [r4, #0]
 8016b58:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016b5c:	6021      	str	r1, [r4, #0]
 8016b5e:	702b      	strb	r3, [r5, #0]
 8016b60:	3501      	adds	r5, #1
 8016b62:	e79a      	b.n	8016a9a <_scanf_float+0xbe>
 8016b64:	6821      	ldr	r1, [r4, #0]
 8016b66:	0608      	lsls	r0, r1, #24
 8016b68:	f57f af70 	bpl.w	8016a4c <_scanf_float+0x70>
 8016b6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016b70:	e7f4      	b.n	8016b5c <_scanf_float+0x180>
 8016b72:	2a02      	cmp	r2, #2
 8016b74:	d047      	beq.n	8016c06 <_scanf_float+0x22a>
 8016b76:	f1bb 0f01 	cmp.w	fp, #1
 8016b7a:	d003      	beq.n	8016b84 <_scanf_float+0x1a8>
 8016b7c:	f1bb 0f04 	cmp.w	fp, #4
 8016b80:	f47f af64 	bne.w	8016a4c <_scanf_float+0x70>
 8016b84:	f10b 0b01 	add.w	fp, fp, #1
 8016b88:	fa5f fb8b 	uxtb.w	fp, fp
 8016b8c:	e7e7      	b.n	8016b5e <_scanf_float+0x182>
 8016b8e:	f1bb 0f03 	cmp.w	fp, #3
 8016b92:	d0f7      	beq.n	8016b84 <_scanf_float+0x1a8>
 8016b94:	f1bb 0f05 	cmp.w	fp, #5
 8016b98:	e7f2      	b.n	8016b80 <_scanf_float+0x1a4>
 8016b9a:	f1bb 0f02 	cmp.w	fp, #2
 8016b9e:	f47f af55 	bne.w	8016a4c <_scanf_float+0x70>
 8016ba2:	f04f 0b03 	mov.w	fp, #3
 8016ba6:	e7da      	b.n	8016b5e <_scanf_float+0x182>
 8016ba8:	f1bb 0f06 	cmp.w	fp, #6
 8016bac:	f47f af4e 	bne.w	8016a4c <_scanf_float+0x70>
 8016bb0:	f04f 0b07 	mov.w	fp, #7
 8016bb4:	e7d3      	b.n	8016b5e <_scanf_float+0x182>
 8016bb6:	6821      	ldr	r1, [r4, #0]
 8016bb8:	0588      	lsls	r0, r1, #22
 8016bba:	f57f af47 	bpl.w	8016a4c <_scanf_float+0x70>
 8016bbe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016bc2:	6021      	str	r1, [r4, #0]
 8016bc4:	f8cd 9008 	str.w	r9, [sp, #8]
 8016bc8:	e7c9      	b.n	8016b5e <_scanf_float+0x182>
 8016bca:	6821      	ldr	r1, [r4, #0]
 8016bcc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016bd0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016bd4:	d006      	beq.n	8016be4 <_scanf_float+0x208>
 8016bd6:	0548      	lsls	r0, r1, #21
 8016bd8:	f57f af38 	bpl.w	8016a4c <_scanf_float+0x70>
 8016bdc:	f1b9 0f00 	cmp.w	r9, #0
 8016be0:	f43f af3b 	beq.w	8016a5a <_scanf_float+0x7e>
 8016be4:	0588      	lsls	r0, r1, #22
 8016be6:	bf58      	it	pl
 8016be8:	9802      	ldrpl	r0, [sp, #8]
 8016bea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016bee:	bf58      	it	pl
 8016bf0:	eba9 0000 	subpl.w	r0, r9, r0
 8016bf4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016bf8:	bf58      	it	pl
 8016bfa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016bfe:	6021      	str	r1, [r4, #0]
 8016c00:	f04f 0900 	mov.w	r9, #0
 8016c04:	e7ab      	b.n	8016b5e <_scanf_float+0x182>
 8016c06:	2203      	movs	r2, #3
 8016c08:	e7a9      	b.n	8016b5e <_scanf_float+0x182>
 8016c0a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c0e:	9205      	str	r2, [sp, #20]
 8016c10:	4631      	mov	r1, r6
 8016c12:	4638      	mov	r0, r7
 8016c14:	4798      	blx	r3
 8016c16:	9a05      	ldr	r2, [sp, #20]
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	f43f af04 	beq.w	8016a26 <_scanf_float+0x4a>
 8016c1e:	e715      	b.n	8016a4c <_scanf_float+0x70>
 8016c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c28:	4632      	mov	r2, r6
 8016c2a:	4638      	mov	r0, r7
 8016c2c:	4798      	blx	r3
 8016c2e:	6923      	ldr	r3, [r4, #16]
 8016c30:	3b01      	subs	r3, #1
 8016c32:	6123      	str	r3, [r4, #16]
 8016c34:	e715      	b.n	8016a62 <_scanf_float+0x86>
 8016c36:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016c3a:	2b06      	cmp	r3, #6
 8016c3c:	d80a      	bhi.n	8016c54 <_scanf_float+0x278>
 8016c3e:	f1bb 0f02 	cmp.w	fp, #2
 8016c42:	d968      	bls.n	8016d16 <_scanf_float+0x33a>
 8016c44:	f1ab 0b03 	sub.w	fp, fp, #3
 8016c48:	fa5f fb8b 	uxtb.w	fp, fp
 8016c4c:	eba5 0b0b 	sub.w	fp, r5, fp
 8016c50:	455d      	cmp	r5, fp
 8016c52:	d14b      	bne.n	8016cec <_scanf_float+0x310>
 8016c54:	6823      	ldr	r3, [r4, #0]
 8016c56:	05da      	lsls	r2, r3, #23
 8016c58:	d51f      	bpl.n	8016c9a <_scanf_float+0x2be>
 8016c5a:	055b      	lsls	r3, r3, #21
 8016c5c:	d468      	bmi.n	8016d30 <_scanf_float+0x354>
 8016c5e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016c62:	6923      	ldr	r3, [r4, #16]
 8016c64:	2965      	cmp	r1, #101	; 0x65
 8016c66:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c6a:	f105 3bff 	add.w	fp, r5, #4294967295
 8016c6e:	6123      	str	r3, [r4, #16]
 8016c70:	d00d      	beq.n	8016c8e <_scanf_float+0x2b2>
 8016c72:	2945      	cmp	r1, #69	; 0x45
 8016c74:	d00b      	beq.n	8016c8e <_scanf_float+0x2b2>
 8016c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c7a:	4632      	mov	r2, r6
 8016c7c:	4638      	mov	r0, r7
 8016c7e:	4798      	blx	r3
 8016c80:	6923      	ldr	r3, [r4, #16]
 8016c82:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016c86:	3b01      	subs	r3, #1
 8016c88:	f1a5 0b02 	sub.w	fp, r5, #2
 8016c8c:	6123      	str	r3, [r4, #16]
 8016c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c92:	4632      	mov	r2, r6
 8016c94:	4638      	mov	r0, r7
 8016c96:	4798      	blx	r3
 8016c98:	465d      	mov	r5, fp
 8016c9a:	6826      	ldr	r6, [r4, #0]
 8016c9c:	f016 0610 	ands.w	r6, r6, #16
 8016ca0:	d17a      	bne.n	8016d98 <_scanf_float+0x3bc>
 8016ca2:	702e      	strb	r6, [r5, #0]
 8016ca4:	6823      	ldr	r3, [r4, #0]
 8016ca6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016cae:	d142      	bne.n	8016d36 <_scanf_float+0x35a>
 8016cb0:	9b02      	ldr	r3, [sp, #8]
 8016cb2:	eba9 0303 	sub.w	r3, r9, r3
 8016cb6:	425a      	negs	r2, r3
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d149      	bne.n	8016d50 <_scanf_float+0x374>
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	4641      	mov	r1, r8
 8016cc0:	4638      	mov	r0, r7
 8016cc2:	f000 fee9 	bl	8017a98 <_strtod_r>
 8016cc6:	6825      	ldr	r5, [r4, #0]
 8016cc8:	f8da 3000 	ldr.w	r3, [sl]
 8016ccc:	f015 0f02 	tst.w	r5, #2
 8016cd0:	f103 0204 	add.w	r2, r3, #4
 8016cd4:	ec59 8b10 	vmov	r8, r9, d0
 8016cd8:	f8ca 2000 	str.w	r2, [sl]
 8016cdc:	d043      	beq.n	8016d66 <_scanf_float+0x38a>
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	e9c3 8900 	strd	r8, r9, [r3]
 8016ce4:	68e3      	ldr	r3, [r4, #12]
 8016ce6:	3301      	adds	r3, #1
 8016ce8:	60e3      	str	r3, [r4, #12]
 8016cea:	e6be      	b.n	8016a6a <_scanf_float+0x8e>
 8016cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016cf4:	4632      	mov	r2, r6
 8016cf6:	4638      	mov	r0, r7
 8016cf8:	4798      	blx	r3
 8016cfa:	6923      	ldr	r3, [r4, #16]
 8016cfc:	3b01      	subs	r3, #1
 8016cfe:	6123      	str	r3, [r4, #16]
 8016d00:	e7a6      	b.n	8016c50 <_scanf_float+0x274>
 8016d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d06:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016d0a:	4632      	mov	r2, r6
 8016d0c:	4638      	mov	r0, r7
 8016d0e:	4798      	blx	r3
 8016d10:	6923      	ldr	r3, [r4, #16]
 8016d12:	3b01      	subs	r3, #1
 8016d14:	6123      	str	r3, [r4, #16]
 8016d16:	4545      	cmp	r5, r8
 8016d18:	d8f3      	bhi.n	8016d02 <_scanf_float+0x326>
 8016d1a:	e6a5      	b.n	8016a68 <_scanf_float+0x8c>
 8016d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016d24:	4632      	mov	r2, r6
 8016d26:	4638      	mov	r0, r7
 8016d28:	4798      	blx	r3
 8016d2a:	6923      	ldr	r3, [r4, #16]
 8016d2c:	3b01      	subs	r3, #1
 8016d2e:	6123      	str	r3, [r4, #16]
 8016d30:	4545      	cmp	r5, r8
 8016d32:	d8f3      	bhi.n	8016d1c <_scanf_float+0x340>
 8016d34:	e698      	b.n	8016a68 <_scanf_float+0x8c>
 8016d36:	9b03      	ldr	r3, [sp, #12]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d0bf      	beq.n	8016cbc <_scanf_float+0x2e0>
 8016d3c:	9904      	ldr	r1, [sp, #16]
 8016d3e:	230a      	movs	r3, #10
 8016d40:	4632      	mov	r2, r6
 8016d42:	3101      	adds	r1, #1
 8016d44:	4638      	mov	r0, r7
 8016d46:	f000 ff33 	bl	8017bb0 <_strtol_r>
 8016d4a:	9b03      	ldr	r3, [sp, #12]
 8016d4c:	9d04      	ldr	r5, [sp, #16]
 8016d4e:	1ac2      	subs	r2, r0, r3
 8016d50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016d54:	429d      	cmp	r5, r3
 8016d56:	bf28      	it	cs
 8016d58:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016d5c:	490f      	ldr	r1, [pc, #60]	; (8016d9c <_scanf_float+0x3c0>)
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f000 f868 	bl	8016e34 <siprintf>
 8016d64:	e7aa      	b.n	8016cbc <_scanf_float+0x2e0>
 8016d66:	f015 0504 	ands.w	r5, r5, #4
 8016d6a:	d1b8      	bne.n	8016cde <_scanf_float+0x302>
 8016d6c:	681f      	ldr	r7, [r3, #0]
 8016d6e:	ee10 2a10 	vmov	r2, s0
 8016d72:	464b      	mov	r3, r9
 8016d74:	ee10 0a10 	vmov	r0, s0
 8016d78:	4649      	mov	r1, r9
 8016d7a:	f7e9 fed7 	bl	8000b2c <__aeabi_dcmpun>
 8016d7e:	b128      	cbz	r0, 8016d8c <_scanf_float+0x3b0>
 8016d80:	4628      	mov	r0, r5
 8016d82:	f000 f81d 	bl	8016dc0 <nanf>
 8016d86:	ed87 0a00 	vstr	s0, [r7]
 8016d8a:	e7ab      	b.n	8016ce4 <_scanf_float+0x308>
 8016d8c:	4640      	mov	r0, r8
 8016d8e:	4649      	mov	r1, r9
 8016d90:	f7e9 ff2a 	bl	8000be8 <__aeabi_d2f>
 8016d94:	6038      	str	r0, [r7, #0]
 8016d96:	e7a5      	b.n	8016ce4 <_scanf_float+0x308>
 8016d98:	2600      	movs	r6, #0
 8016d9a:	e666      	b.n	8016a6a <_scanf_float+0x8e>
 8016d9c:	0801b76c 	.word	0x0801b76c

08016da0 <_sbrk_r>:
 8016da0:	b538      	push	{r3, r4, r5, lr}
 8016da2:	4c06      	ldr	r4, [pc, #24]	; (8016dbc <_sbrk_r+0x1c>)
 8016da4:	2300      	movs	r3, #0
 8016da6:	4605      	mov	r5, r0
 8016da8:	4608      	mov	r0, r1
 8016daa:	6023      	str	r3, [r4, #0]
 8016dac:	f7f4 fad0 	bl	800b350 <_sbrk>
 8016db0:	1c43      	adds	r3, r0, #1
 8016db2:	d102      	bne.n	8016dba <_sbrk_r+0x1a>
 8016db4:	6823      	ldr	r3, [r4, #0]
 8016db6:	b103      	cbz	r3, 8016dba <_sbrk_r+0x1a>
 8016db8:	602b      	str	r3, [r5, #0]
 8016dba:	bd38      	pop	{r3, r4, r5, pc}
 8016dbc:	2000c96c 	.word	0x2000c96c

08016dc0 <nanf>:
 8016dc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016dc8 <nanf+0x8>
 8016dc4:	4770      	bx	lr
 8016dc6:	bf00      	nop
 8016dc8:	7fc00000 	.word	0x7fc00000

08016dcc <sniprintf>:
 8016dcc:	b40c      	push	{r2, r3}
 8016dce:	b530      	push	{r4, r5, lr}
 8016dd0:	4b17      	ldr	r3, [pc, #92]	; (8016e30 <sniprintf+0x64>)
 8016dd2:	1e0c      	subs	r4, r1, #0
 8016dd4:	b09d      	sub	sp, #116	; 0x74
 8016dd6:	681d      	ldr	r5, [r3, #0]
 8016dd8:	da08      	bge.n	8016dec <sniprintf+0x20>
 8016dda:	238b      	movs	r3, #139	; 0x8b
 8016ddc:	602b      	str	r3, [r5, #0]
 8016dde:	f04f 30ff 	mov.w	r0, #4294967295
 8016de2:	b01d      	add	sp, #116	; 0x74
 8016de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016de8:	b002      	add	sp, #8
 8016dea:	4770      	bx	lr
 8016dec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016df0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016df4:	bf14      	ite	ne
 8016df6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016dfa:	4623      	moveq	r3, r4
 8016dfc:	9304      	str	r3, [sp, #16]
 8016dfe:	9307      	str	r3, [sp, #28]
 8016e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e04:	9002      	str	r0, [sp, #8]
 8016e06:	9006      	str	r0, [sp, #24]
 8016e08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016e0e:	ab21      	add	r3, sp, #132	; 0x84
 8016e10:	a902      	add	r1, sp, #8
 8016e12:	4628      	mov	r0, r5
 8016e14:	9301      	str	r3, [sp, #4]
 8016e16:	f002 fcd9 	bl	80197cc <_svfiprintf_r>
 8016e1a:	1c43      	adds	r3, r0, #1
 8016e1c:	bfbc      	itt	lt
 8016e1e:	238b      	movlt	r3, #139	; 0x8b
 8016e20:	602b      	strlt	r3, [r5, #0]
 8016e22:	2c00      	cmp	r4, #0
 8016e24:	d0dd      	beq.n	8016de2 <sniprintf+0x16>
 8016e26:	9b02      	ldr	r3, [sp, #8]
 8016e28:	2200      	movs	r2, #0
 8016e2a:	701a      	strb	r2, [r3, #0]
 8016e2c:	e7d9      	b.n	8016de2 <sniprintf+0x16>
 8016e2e:	bf00      	nop
 8016e30:	200009ac 	.word	0x200009ac

08016e34 <siprintf>:
 8016e34:	b40e      	push	{r1, r2, r3}
 8016e36:	b500      	push	{lr}
 8016e38:	b09c      	sub	sp, #112	; 0x70
 8016e3a:	ab1d      	add	r3, sp, #116	; 0x74
 8016e3c:	9002      	str	r0, [sp, #8]
 8016e3e:	9006      	str	r0, [sp, #24]
 8016e40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e44:	4809      	ldr	r0, [pc, #36]	; (8016e6c <siprintf+0x38>)
 8016e46:	9107      	str	r1, [sp, #28]
 8016e48:	9104      	str	r1, [sp, #16]
 8016e4a:	4909      	ldr	r1, [pc, #36]	; (8016e70 <siprintf+0x3c>)
 8016e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e50:	9105      	str	r1, [sp, #20]
 8016e52:	6800      	ldr	r0, [r0, #0]
 8016e54:	9301      	str	r3, [sp, #4]
 8016e56:	a902      	add	r1, sp, #8
 8016e58:	f002 fcb8 	bl	80197cc <_svfiprintf_r>
 8016e5c:	9b02      	ldr	r3, [sp, #8]
 8016e5e:	2200      	movs	r2, #0
 8016e60:	701a      	strb	r2, [r3, #0]
 8016e62:	b01c      	add	sp, #112	; 0x70
 8016e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e68:	b003      	add	sp, #12
 8016e6a:	4770      	bx	lr
 8016e6c:	200009ac 	.word	0x200009ac
 8016e70:	ffff0208 	.word	0xffff0208

08016e74 <sulp>:
 8016e74:	b570      	push	{r4, r5, r6, lr}
 8016e76:	4604      	mov	r4, r0
 8016e78:	460d      	mov	r5, r1
 8016e7a:	ec45 4b10 	vmov	d0, r4, r5
 8016e7e:	4616      	mov	r6, r2
 8016e80:	f002 fb08 	bl	8019494 <__ulp>
 8016e84:	ec51 0b10 	vmov	r0, r1, d0
 8016e88:	b17e      	cbz	r6, 8016eaa <sulp+0x36>
 8016e8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	dd09      	ble.n	8016eaa <sulp+0x36>
 8016e96:	051b      	lsls	r3, r3, #20
 8016e98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016e9c:	2400      	movs	r4, #0
 8016e9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016ea2:	4622      	mov	r2, r4
 8016ea4:	462b      	mov	r3, r5
 8016ea6:	f7e9 fba7 	bl	80005f8 <__aeabi_dmul>
 8016eaa:	bd70      	pop	{r4, r5, r6, pc}
 8016eac:	0000      	movs	r0, r0
	...

08016eb0 <_strtod_l>:
 8016eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eb4:	461f      	mov	r7, r3
 8016eb6:	b0a1      	sub	sp, #132	; 0x84
 8016eb8:	2300      	movs	r3, #0
 8016eba:	4681      	mov	r9, r0
 8016ebc:	4638      	mov	r0, r7
 8016ebe:	460e      	mov	r6, r1
 8016ec0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ec2:	931c      	str	r3, [sp, #112]	; 0x70
 8016ec4:	f001 fff5 	bl	8018eb2 <__localeconv_l>
 8016ec8:	4680      	mov	r8, r0
 8016eca:	6800      	ldr	r0, [r0, #0]
 8016ecc:	f7e9 f980 	bl	80001d0 <strlen>
 8016ed0:	f04f 0a00 	mov.w	sl, #0
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	f04f 0b00 	mov.w	fp, #0
 8016eda:	961b      	str	r6, [sp, #108]	; 0x6c
 8016edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ede:	781a      	ldrb	r2, [r3, #0]
 8016ee0:	2a0d      	cmp	r2, #13
 8016ee2:	d832      	bhi.n	8016f4a <_strtod_l+0x9a>
 8016ee4:	2a09      	cmp	r2, #9
 8016ee6:	d236      	bcs.n	8016f56 <_strtod_l+0xa6>
 8016ee8:	2a00      	cmp	r2, #0
 8016eea:	d03e      	beq.n	8016f6a <_strtod_l+0xba>
 8016eec:	2300      	movs	r3, #0
 8016eee:	930d      	str	r3, [sp, #52]	; 0x34
 8016ef0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016ef2:	782b      	ldrb	r3, [r5, #0]
 8016ef4:	2b30      	cmp	r3, #48	; 0x30
 8016ef6:	f040 80ac 	bne.w	8017052 <_strtod_l+0x1a2>
 8016efa:	786b      	ldrb	r3, [r5, #1]
 8016efc:	2b58      	cmp	r3, #88	; 0x58
 8016efe:	d001      	beq.n	8016f04 <_strtod_l+0x54>
 8016f00:	2b78      	cmp	r3, #120	; 0x78
 8016f02:	d167      	bne.n	8016fd4 <_strtod_l+0x124>
 8016f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f06:	9301      	str	r3, [sp, #4]
 8016f08:	ab1c      	add	r3, sp, #112	; 0x70
 8016f0a:	9300      	str	r3, [sp, #0]
 8016f0c:	9702      	str	r7, [sp, #8]
 8016f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8016f10:	4a88      	ldr	r2, [pc, #544]	; (8017134 <_strtod_l+0x284>)
 8016f12:	a91b      	add	r1, sp, #108	; 0x6c
 8016f14:	4648      	mov	r0, r9
 8016f16:	f001 fcf2 	bl	80188fe <__gethex>
 8016f1a:	f010 0407 	ands.w	r4, r0, #7
 8016f1e:	4606      	mov	r6, r0
 8016f20:	d005      	beq.n	8016f2e <_strtod_l+0x7e>
 8016f22:	2c06      	cmp	r4, #6
 8016f24:	d12b      	bne.n	8016f7e <_strtod_l+0xce>
 8016f26:	3501      	adds	r5, #1
 8016f28:	2300      	movs	r3, #0
 8016f2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8016f2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	f040 859a 	bne.w	8017a6a <_strtod_l+0xbba>
 8016f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f38:	b1e3      	cbz	r3, 8016f74 <_strtod_l+0xc4>
 8016f3a:	4652      	mov	r2, sl
 8016f3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016f40:	ec43 2b10 	vmov	d0, r2, r3
 8016f44:	b021      	add	sp, #132	; 0x84
 8016f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f4a:	2a2b      	cmp	r2, #43	; 0x2b
 8016f4c:	d015      	beq.n	8016f7a <_strtod_l+0xca>
 8016f4e:	2a2d      	cmp	r2, #45	; 0x2d
 8016f50:	d004      	beq.n	8016f5c <_strtod_l+0xac>
 8016f52:	2a20      	cmp	r2, #32
 8016f54:	d1ca      	bne.n	8016eec <_strtod_l+0x3c>
 8016f56:	3301      	adds	r3, #1
 8016f58:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f5a:	e7bf      	b.n	8016edc <_strtod_l+0x2c>
 8016f5c:	2201      	movs	r2, #1
 8016f5e:	920d      	str	r2, [sp, #52]	; 0x34
 8016f60:	1c5a      	adds	r2, r3, #1
 8016f62:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f64:	785b      	ldrb	r3, [r3, #1]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d1c2      	bne.n	8016ef0 <_strtod_l+0x40>
 8016f6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	f040 8579 	bne.w	8017a66 <_strtod_l+0xbb6>
 8016f74:	4652      	mov	r2, sl
 8016f76:	465b      	mov	r3, fp
 8016f78:	e7e2      	b.n	8016f40 <_strtod_l+0x90>
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	e7ef      	b.n	8016f5e <_strtod_l+0xae>
 8016f7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016f80:	b13a      	cbz	r2, 8016f92 <_strtod_l+0xe2>
 8016f82:	2135      	movs	r1, #53	; 0x35
 8016f84:	a81e      	add	r0, sp, #120	; 0x78
 8016f86:	f002 fb7d 	bl	8019684 <__copybits>
 8016f8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f8c:	4648      	mov	r0, r9
 8016f8e:	f001 ffe9 	bl	8018f64 <_Bfree>
 8016f92:	3c01      	subs	r4, #1
 8016f94:	2c04      	cmp	r4, #4
 8016f96:	d806      	bhi.n	8016fa6 <_strtod_l+0xf6>
 8016f98:	e8df f004 	tbb	[pc, r4]
 8016f9c:	1714030a 	.word	0x1714030a
 8016fa0:	0a          	.byte	0x0a
 8016fa1:	00          	.byte	0x00
 8016fa2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016fa6:	0730      	lsls	r0, r6, #28
 8016fa8:	d5c1      	bpl.n	8016f2e <_strtod_l+0x7e>
 8016faa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016fae:	e7be      	b.n	8016f2e <_strtod_l+0x7e>
 8016fb0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016fb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016fb6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016fba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016fbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016fc2:	e7f0      	b.n	8016fa6 <_strtod_l+0xf6>
 8016fc4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017138 <_strtod_l+0x288>
 8016fc8:	e7ed      	b.n	8016fa6 <_strtod_l+0xf6>
 8016fca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016fce:	f04f 3aff 	mov.w	sl, #4294967295
 8016fd2:	e7e8      	b.n	8016fa6 <_strtod_l+0xf6>
 8016fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fd6:	1c5a      	adds	r2, r3, #1
 8016fd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016fda:	785b      	ldrb	r3, [r3, #1]
 8016fdc:	2b30      	cmp	r3, #48	; 0x30
 8016fde:	d0f9      	beq.n	8016fd4 <_strtod_l+0x124>
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d0a4      	beq.n	8016f2e <_strtod_l+0x7e>
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	2500      	movs	r5, #0
 8016fe8:	9306      	str	r3, [sp, #24]
 8016fea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fec:	9308      	str	r3, [sp, #32]
 8016fee:	9507      	str	r5, [sp, #28]
 8016ff0:	9505      	str	r5, [sp, #20]
 8016ff2:	220a      	movs	r2, #10
 8016ff4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016ff6:	7807      	ldrb	r7, [r0, #0]
 8016ff8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016ffc:	b2d9      	uxtb	r1, r3
 8016ffe:	2909      	cmp	r1, #9
 8017000:	d929      	bls.n	8017056 <_strtod_l+0x1a6>
 8017002:	4622      	mov	r2, r4
 8017004:	f8d8 1000 	ldr.w	r1, [r8]
 8017008:	f002 fcd8 	bl	80199bc <strncmp>
 801700c:	2800      	cmp	r0, #0
 801700e:	d031      	beq.n	8017074 <_strtod_l+0x1c4>
 8017010:	2000      	movs	r0, #0
 8017012:	9c05      	ldr	r4, [sp, #20]
 8017014:	9004      	str	r0, [sp, #16]
 8017016:	463b      	mov	r3, r7
 8017018:	4602      	mov	r2, r0
 801701a:	2b65      	cmp	r3, #101	; 0x65
 801701c:	d001      	beq.n	8017022 <_strtod_l+0x172>
 801701e:	2b45      	cmp	r3, #69	; 0x45
 8017020:	d114      	bne.n	801704c <_strtod_l+0x19c>
 8017022:	b924      	cbnz	r4, 801702e <_strtod_l+0x17e>
 8017024:	b910      	cbnz	r0, 801702c <_strtod_l+0x17c>
 8017026:	9b06      	ldr	r3, [sp, #24]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d09e      	beq.n	8016f6a <_strtod_l+0xba>
 801702c:	2400      	movs	r4, #0
 801702e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017030:	1c73      	adds	r3, r6, #1
 8017032:	931b      	str	r3, [sp, #108]	; 0x6c
 8017034:	7873      	ldrb	r3, [r6, #1]
 8017036:	2b2b      	cmp	r3, #43	; 0x2b
 8017038:	d078      	beq.n	801712c <_strtod_l+0x27c>
 801703a:	2b2d      	cmp	r3, #45	; 0x2d
 801703c:	d070      	beq.n	8017120 <_strtod_l+0x270>
 801703e:	f04f 0c00 	mov.w	ip, #0
 8017042:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8017046:	2f09      	cmp	r7, #9
 8017048:	d97c      	bls.n	8017144 <_strtod_l+0x294>
 801704a:	961b      	str	r6, [sp, #108]	; 0x6c
 801704c:	f04f 0e00 	mov.w	lr, #0
 8017050:	e09a      	b.n	8017188 <_strtod_l+0x2d8>
 8017052:	2300      	movs	r3, #0
 8017054:	e7c7      	b.n	8016fe6 <_strtod_l+0x136>
 8017056:	9905      	ldr	r1, [sp, #20]
 8017058:	2908      	cmp	r1, #8
 801705a:	bfdd      	ittte	le
 801705c:	9907      	ldrle	r1, [sp, #28]
 801705e:	fb02 3301 	mlale	r3, r2, r1, r3
 8017062:	9307      	strle	r3, [sp, #28]
 8017064:	fb02 3505 	mlagt	r5, r2, r5, r3
 8017068:	9b05      	ldr	r3, [sp, #20]
 801706a:	3001      	adds	r0, #1
 801706c:	3301      	adds	r3, #1
 801706e:	9305      	str	r3, [sp, #20]
 8017070:	901b      	str	r0, [sp, #108]	; 0x6c
 8017072:	e7bf      	b.n	8016ff4 <_strtod_l+0x144>
 8017074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017076:	191a      	adds	r2, r3, r4
 8017078:	921b      	str	r2, [sp, #108]	; 0x6c
 801707a:	9a05      	ldr	r2, [sp, #20]
 801707c:	5d1b      	ldrb	r3, [r3, r4]
 801707e:	2a00      	cmp	r2, #0
 8017080:	d037      	beq.n	80170f2 <_strtod_l+0x242>
 8017082:	9c05      	ldr	r4, [sp, #20]
 8017084:	4602      	mov	r2, r0
 8017086:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801708a:	2909      	cmp	r1, #9
 801708c:	d913      	bls.n	80170b6 <_strtod_l+0x206>
 801708e:	2101      	movs	r1, #1
 8017090:	9104      	str	r1, [sp, #16]
 8017092:	e7c2      	b.n	801701a <_strtod_l+0x16a>
 8017094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017096:	1c5a      	adds	r2, r3, #1
 8017098:	921b      	str	r2, [sp, #108]	; 0x6c
 801709a:	785b      	ldrb	r3, [r3, #1]
 801709c:	3001      	adds	r0, #1
 801709e:	2b30      	cmp	r3, #48	; 0x30
 80170a0:	d0f8      	beq.n	8017094 <_strtod_l+0x1e4>
 80170a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80170a6:	2a08      	cmp	r2, #8
 80170a8:	f200 84e4 	bhi.w	8017a74 <_strtod_l+0xbc4>
 80170ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80170ae:	9208      	str	r2, [sp, #32]
 80170b0:	4602      	mov	r2, r0
 80170b2:	2000      	movs	r0, #0
 80170b4:	4604      	mov	r4, r0
 80170b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80170ba:	f100 0101 	add.w	r1, r0, #1
 80170be:	d012      	beq.n	80170e6 <_strtod_l+0x236>
 80170c0:	440a      	add	r2, r1
 80170c2:	eb00 0c04 	add.w	ip, r0, r4
 80170c6:	4621      	mov	r1, r4
 80170c8:	270a      	movs	r7, #10
 80170ca:	458c      	cmp	ip, r1
 80170cc:	d113      	bne.n	80170f6 <_strtod_l+0x246>
 80170ce:	1821      	adds	r1, r4, r0
 80170d0:	2908      	cmp	r1, #8
 80170d2:	f104 0401 	add.w	r4, r4, #1
 80170d6:	4404      	add	r4, r0
 80170d8:	dc19      	bgt.n	801710e <_strtod_l+0x25e>
 80170da:	9b07      	ldr	r3, [sp, #28]
 80170dc:	210a      	movs	r1, #10
 80170de:	fb01 e303 	mla	r3, r1, r3, lr
 80170e2:	9307      	str	r3, [sp, #28]
 80170e4:	2100      	movs	r1, #0
 80170e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170e8:	1c58      	adds	r0, r3, #1
 80170ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80170ec:	785b      	ldrb	r3, [r3, #1]
 80170ee:	4608      	mov	r0, r1
 80170f0:	e7c9      	b.n	8017086 <_strtod_l+0x1d6>
 80170f2:	9805      	ldr	r0, [sp, #20]
 80170f4:	e7d3      	b.n	801709e <_strtod_l+0x1ee>
 80170f6:	2908      	cmp	r1, #8
 80170f8:	f101 0101 	add.w	r1, r1, #1
 80170fc:	dc03      	bgt.n	8017106 <_strtod_l+0x256>
 80170fe:	9b07      	ldr	r3, [sp, #28]
 8017100:	437b      	muls	r3, r7
 8017102:	9307      	str	r3, [sp, #28]
 8017104:	e7e1      	b.n	80170ca <_strtod_l+0x21a>
 8017106:	2910      	cmp	r1, #16
 8017108:	bfd8      	it	le
 801710a:	437d      	mulle	r5, r7
 801710c:	e7dd      	b.n	80170ca <_strtod_l+0x21a>
 801710e:	2c10      	cmp	r4, #16
 8017110:	bfdc      	itt	le
 8017112:	210a      	movle	r1, #10
 8017114:	fb01 e505 	mlale	r5, r1, r5, lr
 8017118:	e7e4      	b.n	80170e4 <_strtod_l+0x234>
 801711a:	2301      	movs	r3, #1
 801711c:	9304      	str	r3, [sp, #16]
 801711e:	e781      	b.n	8017024 <_strtod_l+0x174>
 8017120:	f04f 0c01 	mov.w	ip, #1
 8017124:	1cb3      	adds	r3, r6, #2
 8017126:	931b      	str	r3, [sp, #108]	; 0x6c
 8017128:	78b3      	ldrb	r3, [r6, #2]
 801712a:	e78a      	b.n	8017042 <_strtod_l+0x192>
 801712c:	f04f 0c00 	mov.w	ip, #0
 8017130:	e7f8      	b.n	8017124 <_strtod_l+0x274>
 8017132:	bf00      	nop
 8017134:	0801b774 	.word	0x0801b774
 8017138:	7ff00000 	.word	0x7ff00000
 801713c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801713e:	1c5f      	adds	r7, r3, #1
 8017140:	971b      	str	r7, [sp, #108]	; 0x6c
 8017142:	785b      	ldrb	r3, [r3, #1]
 8017144:	2b30      	cmp	r3, #48	; 0x30
 8017146:	d0f9      	beq.n	801713c <_strtod_l+0x28c>
 8017148:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801714c:	2f08      	cmp	r7, #8
 801714e:	f63f af7d 	bhi.w	801704c <_strtod_l+0x19c>
 8017152:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017156:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017158:	930a      	str	r3, [sp, #40]	; 0x28
 801715a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801715c:	1c5f      	adds	r7, r3, #1
 801715e:	971b      	str	r7, [sp, #108]	; 0x6c
 8017160:	785b      	ldrb	r3, [r3, #1]
 8017162:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8017166:	f1b8 0f09 	cmp.w	r8, #9
 801716a:	d937      	bls.n	80171dc <_strtod_l+0x32c>
 801716c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801716e:	1a7f      	subs	r7, r7, r1
 8017170:	2f08      	cmp	r7, #8
 8017172:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017176:	dc37      	bgt.n	80171e8 <_strtod_l+0x338>
 8017178:	45be      	cmp	lr, r7
 801717a:	bfa8      	it	ge
 801717c:	46be      	movge	lr, r7
 801717e:	f1bc 0f00 	cmp.w	ip, #0
 8017182:	d001      	beq.n	8017188 <_strtod_l+0x2d8>
 8017184:	f1ce 0e00 	rsb	lr, lr, #0
 8017188:	2c00      	cmp	r4, #0
 801718a:	d151      	bne.n	8017230 <_strtod_l+0x380>
 801718c:	2800      	cmp	r0, #0
 801718e:	f47f aece 	bne.w	8016f2e <_strtod_l+0x7e>
 8017192:	9a06      	ldr	r2, [sp, #24]
 8017194:	2a00      	cmp	r2, #0
 8017196:	f47f aeca 	bne.w	8016f2e <_strtod_l+0x7e>
 801719a:	9a04      	ldr	r2, [sp, #16]
 801719c:	2a00      	cmp	r2, #0
 801719e:	f47f aee4 	bne.w	8016f6a <_strtod_l+0xba>
 80171a2:	2b4e      	cmp	r3, #78	; 0x4e
 80171a4:	d027      	beq.n	80171f6 <_strtod_l+0x346>
 80171a6:	dc21      	bgt.n	80171ec <_strtod_l+0x33c>
 80171a8:	2b49      	cmp	r3, #73	; 0x49
 80171aa:	f47f aede 	bne.w	8016f6a <_strtod_l+0xba>
 80171ae:	49a0      	ldr	r1, [pc, #640]	; (8017430 <_strtod_l+0x580>)
 80171b0:	a81b      	add	r0, sp, #108	; 0x6c
 80171b2:	f001 fdd7 	bl	8018d64 <__match>
 80171b6:	2800      	cmp	r0, #0
 80171b8:	f43f aed7 	beq.w	8016f6a <_strtod_l+0xba>
 80171bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171be:	499d      	ldr	r1, [pc, #628]	; (8017434 <_strtod_l+0x584>)
 80171c0:	3b01      	subs	r3, #1
 80171c2:	a81b      	add	r0, sp, #108	; 0x6c
 80171c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80171c6:	f001 fdcd 	bl	8018d64 <__match>
 80171ca:	b910      	cbnz	r0, 80171d2 <_strtod_l+0x322>
 80171cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171ce:	3301      	adds	r3, #1
 80171d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80171d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017448 <_strtod_l+0x598>
 80171d6:	f04f 0a00 	mov.w	sl, #0
 80171da:	e6a8      	b.n	8016f2e <_strtod_l+0x7e>
 80171dc:	210a      	movs	r1, #10
 80171de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80171e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80171e6:	e7b8      	b.n	801715a <_strtod_l+0x2aa>
 80171e8:	46be      	mov	lr, r7
 80171ea:	e7c8      	b.n	801717e <_strtod_l+0x2ce>
 80171ec:	2b69      	cmp	r3, #105	; 0x69
 80171ee:	d0de      	beq.n	80171ae <_strtod_l+0x2fe>
 80171f0:	2b6e      	cmp	r3, #110	; 0x6e
 80171f2:	f47f aeba 	bne.w	8016f6a <_strtod_l+0xba>
 80171f6:	4990      	ldr	r1, [pc, #576]	; (8017438 <_strtod_l+0x588>)
 80171f8:	a81b      	add	r0, sp, #108	; 0x6c
 80171fa:	f001 fdb3 	bl	8018d64 <__match>
 80171fe:	2800      	cmp	r0, #0
 8017200:	f43f aeb3 	beq.w	8016f6a <_strtod_l+0xba>
 8017204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	2b28      	cmp	r3, #40	; 0x28
 801720a:	d10e      	bne.n	801722a <_strtod_l+0x37a>
 801720c:	aa1e      	add	r2, sp, #120	; 0x78
 801720e:	498b      	ldr	r1, [pc, #556]	; (801743c <_strtod_l+0x58c>)
 8017210:	a81b      	add	r0, sp, #108	; 0x6c
 8017212:	f001 fdbb 	bl	8018d8c <__hexnan>
 8017216:	2805      	cmp	r0, #5
 8017218:	d107      	bne.n	801722a <_strtod_l+0x37a>
 801721a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801721c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017220:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017224:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017228:	e681      	b.n	8016f2e <_strtod_l+0x7e>
 801722a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017450 <_strtod_l+0x5a0>
 801722e:	e7d2      	b.n	80171d6 <_strtod_l+0x326>
 8017230:	ebae 0302 	sub.w	r3, lr, r2
 8017234:	9306      	str	r3, [sp, #24]
 8017236:	9b05      	ldr	r3, [sp, #20]
 8017238:	9807      	ldr	r0, [sp, #28]
 801723a:	2b00      	cmp	r3, #0
 801723c:	bf08      	it	eq
 801723e:	4623      	moveq	r3, r4
 8017240:	2c10      	cmp	r4, #16
 8017242:	9305      	str	r3, [sp, #20]
 8017244:	46a0      	mov	r8, r4
 8017246:	bfa8      	it	ge
 8017248:	f04f 0810 	movge.w	r8, #16
 801724c:	f7e9 f95a 	bl	8000504 <__aeabi_ui2d>
 8017250:	2c09      	cmp	r4, #9
 8017252:	4682      	mov	sl, r0
 8017254:	468b      	mov	fp, r1
 8017256:	dc13      	bgt.n	8017280 <_strtod_l+0x3d0>
 8017258:	9b06      	ldr	r3, [sp, #24]
 801725a:	2b00      	cmp	r3, #0
 801725c:	f43f ae67 	beq.w	8016f2e <_strtod_l+0x7e>
 8017260:	9b06      	ldr	r3, [sp, #24]
 8017262:	dd7a      	ble.n	801735a <_strtod_l+0x4aa>
 8017264:	2b16      	cmp	r3, #22
 8017266:	dc61      	bgt.n	801732c <_strtod_l+0x47c>
 8017268:	4a75      	ldr	r2, [pc, #468]	; (8017440 <_strtod_l+0x590>)
 801726a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801726e:	e9de 0100 	ldrd	r0, r1, [lr]
 8017272:	4652      	mov	r2, sl
 8017274:	465b      	mov	r3, fp
 8017276:	f7e9 f9bf 	bl	80005f8 <__aeabi_dmul>
 801727a:	4682      	mov	sl, r0
 801727c:	468b      	mov	fp, r1
 801727e:	e656      	b.n	8016f2e <_strtod_l+0x7e>
 8017280:	4b6f      	ldr	r3, [pc, #444]	; (8017440 <_strtod_l+0x590>)
 8017282:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017286:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801728a:	f7e9 f9b5 	bl	80005f8 <__aeabi_dmul>
 801728e:	4606      	mov	r6, r0
 8017290:	4628      	mov	r0, r5
 8017292:	460f      	mov	r7, r1
 8017294:	f7e9 f936 	bl	8000504 <__aeabi_ui2d>
 8017298:	4602      	mov	r2, r0
 801729a:	460b      	mov	r3, r1
 801729c:	4630      	mov	r0, r6
 801729e:	4639      	mov	r1, r7
 80172a0:	f7e8 fff4 	bl	800028c <__adddf3>
 80172a4:	2c0f      	cmp	r4, #15
 80172a6:	4682      	mov	sl, r0
 80172a8:	468b      	mov	fp, r1
 80172aa:	ddd5      	ble.n	8017258 <_strtod_l+0x3a8>
 80172ac:	9b06      	ldr	r3, [sp, #24]
 80172ae:	eba4 0808 	sub.w	r8, r4, r8
 80172b2:	4498      	add	r8, r3
 80172b4:	f1b8 0f00 	cmp.w	r8, #0
 80172b8:	f340 8096 	ble.w	80173e8 <_strtod_l+0x538>
 80172bc:	f018 030f 	ands.w	r3, r8, #15
 80172c0:	d00a      	beq.n	80172d8 <_strtod_l+0x428>
 80172c2:	495f      	ldr	r1, [pc, #380]	; (8017440 <_strtod_l+0x590>)
 80172c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80172c8:	4652      	mov	r2, sl
 80172ca:	465b      	mov	r3, fp
 80172cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172d0:	f7e9 f992 	bl	80005f8 <__aeabi_dmul>
 80172d4:	4682      	mov	sl, r0
 80172d6:	468b      	mov	fp, r1
 80172d8:	f038 080f 	bics.w	r8, r8, #15
 80172dc:	d073      	beq.n	80173c6 <_strtod_l+0x516>
 80172de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80172e2:	dd47      	ble.n	8017374 <_strtod_l+0x4c4>
 80172e4:	2400      	movs	r4, #0
 80172e6:	46a0      	mov	r8, r4
 80172e8:	9407      	str	r4, [sp, #28]
 80172ea:	9405      	str	r4, [sp, #20]
 80172ec:	2322      	movs	r3, #34	; 0x22
 80172ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017448 <_strtod_l+0x598>
 80172f2:	f8c9 3000 	str.w	r3, [r9]
 80172f6:	f04f 0a00 	mov.w	sl, #0
 80172fa:	9b07      	ldr	r3, [sp, #28]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	f43f ae16 	beq.w	8016f2e <_strtod_l+0x7e>
 8017302:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017304:	4648      	mov	r0, r9
 8017306:	f001 fe2d 	bl	8018f64 <_Bfree>
 801730a:	9905      	ldr	r1, [sp, #20]
 801730c:	4648      	mov	r0, r9
 801730e:	f001 fe29 	bl	8018f64 <_Bfree>
 8017312:	4641      	mov	r1, r8
 8017314:	4648      	mov	r0, r9
 8017316:	f001 fe25 	bl	8018f64 <_Bfree>
 801731a:	9907      	ldr	r1, [sp, #28]
 801731c:	4648      	mov	r0, r9
 801731e:	f001 fe21 	bl	8018f64 <_Bfree>
 8017322:	4621      	mov	r1, r4
 8017324:	4648      	mov	r0, r9
 8017326:	f001 fe1d 	bl	8018f64 <_Bfree>
 801732a:	e600      	b.n	8016f2e <_strtod_l+0x7e>
 801732c:	9a06      	ldr	r2, [sp, #24]
 801732e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017332:	4293      	cmp	r3, r2
 8017334:	dbba      	blt.n	80172ac <_strtod_l+0x3fc>
 8017336:	4d42      	ldr	r5, [pc, #264]	; (8017440 <_strtod_l+0x590>)
 8017338:	f1c4 040f 	rsb	r4, r4, #15
 801733c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017340:	4652      	mov	r2, sl
 8017342:	465b      	mov	r3, fp
 8017344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017348:	f7e9 f956 	bl	80005f8 <__aeabi_dmul>
 801734c:	9b06      	ldr	r3, [sp, #24]
 801734e:	1b1c      	subs	r4, r3, r4
 8017350:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017354:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017358:	e78d      	b.n	8017276 <_strtod_l+0x3c6>
 801735a:	f113 0f16 	cmn.w	r3, #22
 801735e:	dba5      	blt.n	80172ac <_strtod_l+0x3fc>
 8017360:	4a37      	ldr	r2, [pc, #220]	; (8017440 <_strtod_l+0x590>)
 8017362:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8017366:	e9d2 2300 	ldrd	r2, r3, [r2]
 801736a:	4650      	mov	r0, sl
 801736c:	4659      	mov	r1, fp
 801736e:	f7e9 fa6d 	bl	800084c <__aeabi_ddiv>
 8017372:	e782      	b.n	801727a <_strtod_l+0x3ca>
 8017374:	2300      	movs	r3, #0
 8017376:	4e33      	ldr	r6, [pc, #204]	; (8017444 <_strtod_l+0x594>)
 8017378:	ea4f 1828 	mov.w	r8, r8, asr #4
 801737c:	4650      	mov	r0, sl
 801737e:	4659      	mov	r1, fp
 8017380:	461d      	mov	r5, r3
 8017382:	f1b8 0f01 	cmp.w	r8, #1
 8017386:	dc21      	bgt.n	80173cc <_strtod_l+0x51c>
 8017388:	b10b      	cbz	r3, 801738e <_strtod_l+0x4de>
 801738a:	4682      	mov	sl, r0
 801738c:	468b      	mov	fp, r1
 801738e:	4b2d      	ldr	r3, [pc, #180]	; (8017444 <_strtod_l+0x594>)
 8017390:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017394:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017398:	4652      	mov	r2, sl
 801739a:	465b      	mov	r3, fp
 801739c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80173a0:	f7e9 f92a 	bl	80005f8 <__aeabi_dmul>
 80173a4:	4b28      	ldr	r3, [pc, #160]	; (8017448 <_strtod_l+0x598>)
 80173a6:	460a      	mov	r2, r1
 80173a8:	400b      	ands	r3, r1
 80173aa:	4928      	ldr	r1, [pc, #160]	; (801744c <_strtod_l+0x59c>)
 80173ac:	428b      	cmp	r3, r1
 80173ae:	4682      	mov	sl, r0
 80173b0:	d898      	bhi.n	80172e4 <_strtod_l+0x434>
 80173b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80173b6:	428b      	cmp	r3, r1
 80173b8:	bf86      	itte	hi
 80173ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017454 <_strtod_l+0x5a4>
 80173be:	f04f 3aff 	movhi.w	sl, #4294967295
 80173c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80173c6:	2300      	movs	r3, #0
 80173c8:	9304      	str	r3, [sp, #16]
 80173ca:	e077      	b.n	80174bc <_strtod_l+0x60c>
 80173cc:	f018 0f01 	tst.w	r8, #1
 80173d0:	d006      	beq.n	80173e0 <_strtod_l+0x530>
 80173d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80173d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173da:	f7e9 f90d 	bl	80005f8 <__aeabi_dmul>
 80173de:	2301      	movs	r3, #1
 80173e0:	3501      	adds	r5, #1
 80173e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80173e6:	e7cc      	b.n	8017382 <_strtod_l+0x4d2>
 80173e8:	d0ed      	beq.n	80173c6 <_strtod_l+0x516>
 80173ea:	f1c8 0800 	rsb	r8, r8, #0
 80173ee:	f018 020f 	ands.w	r2, r8, #15
 80173f2:	d00a      	beq.n	801740a <_strtod_l+0x55a>
 80173f4:	4b12      	ldr	r3, [pc, #72]	; (8017440 <_strtod_l+0x590>)
 80173f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173fa:	4650      	mov	r0, sl
 80173fc:	4659      	mov	r1, fp
 80173fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017402:	f7e9 fa23 	bl	800084c <__aeabi_ddiv>
 8017406:	4682      	mov	sl, r0
 8017408:	468b      	mov	fp, r1
 801740a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801740e:	d0da      	beq.n	80173c6 <_strtod_l+0x516>
 8017410:	f1b8 0f1f 	cmp.w	r8, #31
 8017414:	dd20      	ble.n	8017458 <_strtod_l+0x5a8>
 8017416:	2400      	movs	r4, #0
 8017418:	46a0      	mov	r8, r4
 801741a:	9407      	str	r4, [sp, #28]
 801741c:	9405      	str	r4, [sp, #20]
 801741e:	2322      	movs	r3, #34	; 0x22
 8017420:	f04f 0a00 	mov.w	sl, #0
 8017424:	f04f 0b00 	mov.w	fp, #0
 8017428:	f8c9 3000 	str.w	r3, [r9]
 801742c:	e765      	b.n	80172fa <_strtod_l+0x44a>
 801742e:	bf00      	nop
 8017430:	0801b73d 	.word	0x0801b73d
 8017434:	0801b7cb 	.word	0x0801b7cb
 8017438:	0801b745 	.word	0x0801b745
 801743c:	0801b788 	.word	0x0801b788
 8017440:	0801b808 	.word	0x0801b808
 8017444:	0801b7e0 	.word	0x0801b7e0
 8017448:	7ff00000 	.word	0x7ff00000
 801744c:	7ca00000 	.word	0x7ca00000
 8017450:	fff80000 	.word	0xfff80000
 8017454:	7fefffff 	.word	0x7fefffff
 8017458:	f018 0310 	ands.w	r3, r8, #16
 801745c:	bf18      	it	ne
 801745e:	236a      	movne	r3, #106	; 0x6a
 8017460:	4da0      	ldr	r5, [pc, #640]	; (80176e4 <_strtod_l+0x834>)
 8017462:	9304      	str	r3, [sp, #16]
 8017464:	4650      	mov	r0, sl
 8017466:	4659      	mov	r1, fp
 8017468:	2300      	movs	r3, #0
 801746a:	f1b8 0f00 	cmp.w	r8, #0
 801746e:	f300 810a 	bgt.w	8017686 <_strtod_l+0x7d6>
 8017472:	b10b      	cbz	r3, 8017478 <_strtod_l+0x5c8>
 8017474:	4682      	mov	sl, r0
 8017476:	468b      	mov	fp, r1
 8017478:	9b04      	ldr	r3, [sp, #16]
 801747a:	b1bb      	cbz	r3, 80174ac <_strtod_l+0x5fc>
 801747c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017480:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017484:	2b00      	cmp	r3, #0
 8017486:	4659      	mov	r1, fp
 8017488:	dd10      	ble.n	80174ac <_strtod_l+0x5fc>
 801748a:	2b1f      	cmp	r3, #31
 801748c:	f340 8107 	ble.w	801769e <_strtod_l+0x7ee>
 8017490:	2b34      	cmp	r3, #52	; 0x34
 8017492:	bfde      	ittt	le
 8017494:	3b20      	suble	r3, #32
 8017496:	f04f 32ff 	movle.w	r2, #4294967295
 801749a:	fa02 f303 	lslle.w	r3, r2, r3
 801749e:	f04f 0a00 	mov.w	sl, #0
 80174a2:	bfcc      	ite	gt
 80174a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80174a8:	ea03 0b01 	andle.w	fp, r3, r1
 80174ac:	2200      	movs	r2, #0
 80174ae:	2300      	movs	r3, #0
 80174b0:	4650      	mov	r0, sl
 80174b2:	4659      	mov	r1, fp
 80174b4:	f7e9 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80174b8:	2800      	cmp	r0, #0
 80174ba:	d1ac      	bne.n	8017416 <_strtod_l+0x566>
 80174bc:	9b07      	ldr	r3, [sp, #28]
 80174be:	9300      	str	r3, [sp, #0]
 80174c0:	9a05      	ldr	r2, [sp, #20]
 80174c2:	9908      	ldr	r1, [sp, #32]
 80174c4:	4623      	mov	r3, r4
 80174c6:	4648      	mov	r0, r9
 80174c8:	f001 fd9e 	bl	8019008 <__s2b>
 80174cc:	9007      	str	r0, [sp, #28]
 80174ce:	2800      	cmp	r0, #0
 80174d0:	f43f af08 	beq.w	80172e4 <_strtod_l+0x434>
 80174d4:	9a06      	ldr	r2, [sp, #24]
 80174d6:	9b06      	ldr	r3, [sp, #24]
 80174d8:	2a00      	cmp	r2, #0
 80174da:	f1c3 0300 	rsb	r3, r3, #0
 80174de:	bfa8      	it	ge
 80174e0:	2300      	movge	r3, #0
 80174e2:	930e      	str	r3, [sp, #56]	; 0x38
 80174e4:	2400      	movs	r4, #0
 80174e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80174ea:	9316      	str	r3, [sp, #88]	; 0x58
 80174ec:	46a0      	mov	r8, r4
 80174ee:	9b07      	ldr	r3, [sp, #28]
 80174f0:	4648      	mov	r0, r9
 80174f2:	6859      	ldr	r1, [r3, #4]
 80174f4:	f001 fd02 	bl	8018efc <_Balloc>
 80174f8:	9005      	str	r0, [sp, #20]
 80174fa:	2800      	cmp	r0, #0
 80174fc:	f43f aef6 	beq.w	80172ec <_strtod_l+0x43c>
 8017500:	9b07      	ldr	r3, [sp, #28]
 8017502:	691a      	ldr	r2, [r3, #16]
 8017504:	3202      	adds	r2, #2
 8017506:	f103 010c 	add.w	r1, r3, #12
 801750a:	0092      	lsls	r2, r2, #2
 801750c:	300c      	adds	r0, #12
 801750e:	f7fe fd35 	bl	8015f7c <memcpy>
 8017512:	aa1e      	add	r2, sp, #120	; 0x78
 8017514:	a91d      	add	r1, sp, #116	; 0x74
 8017516:	ec4b ab10 	vmov	d0, sl, fp
 801751a:	4648      	mov	r0, r9
 801751c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017520:	f002 f82e 	bl	8019580 <__d2b>
 8017524:	901c      	str	r0, [sp, #112]	; 0x70
 8017526:	2800      	cmp	r0, #0
 8017528:	f43f aee0 	beq.w	80172ec <_strtod_l+0x43c>
 801752c:	2101      	movs	r1, #1
 801752e:	4648      	mov	r0, r9
 8017530:	f001 fdf6 	bl	8019120 <__i2b>
 8017534:	4680      	mov	r8, r0
 8017536:	2800      	cmp	r0, #0
 8017538:	f43f aed8 	beq.w	80172ec <_strtod_l+0x43c>
 801753c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801753e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017540:	2e00      	cmp	r6, #0
 8017542:	bfab      	itete	ge
 8017544:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017546:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017548:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801754a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801754c:	bfac      	ite	ge
 801754e:	18f7      	addge	r7, r6, r3
 8017550:	1b9d      	sublt	r5, r3, r6
 8017552:	9b04      	ldr	r3, [sp, #16]
 8017554:	1af6      	subs	r6, r6, r3
 8017556:	4416      	add	r6, r2
 8017558:	4b63      	ldr	r3, [pc, #396]	; (80176e8 <_strtod_l+0x838>)
 801755a:	3e01      	subs	r6, #1
 801755c:	429e      	cmp	r6, r3
 801755e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017562:	f280 80af 	bge.w	80176c4 <_strtod_l+0x814>
 8017566:	1b9b      	subs	r3, r3, r6
 8017568:	2b1f      	cmp	r3, #31
 801756a:	eba2 0203 	sub.w	r2, r2, r3
 801756e:	f04f 0101 	mov.w	r1, #1
 8017572:	f300 809b 	bgt.w	80176ac <_strtod_l+0x7fc>
 8017576:	fa01 f303 	lsl.w	r3, r1, r3
 801757a:	930f      	str	r3, [sp, #60]	; 0x3c
 801757c:	2300      	movs	r3, #0
 801757e:	930a      	str	r3, [sp, #40]	; 0x28
 8017580:	18be      	adds	r6, r7, r2
 8017582:	9b04      	ldr	r3, [sp, #16]
 8017584:	42b7      	cmp	r7, r6
 8017586:	4415      	add	r5, r2
 8017588:	441d      	add	r5, r3
 801758a:	463b      	mov	r3, r7
 801758c:	bfa8      	it	ge
 801758e:	4633      	movge	r3, r6
 8017590:	42ab      	cmp	r3, r5
 8017592:	bfa8      	it	ge
 8017594:	462b      	movge	r3, r5
 8017596:	2b00      	cmp	r3, #0
 8017598:	bfc2      	ittt	gt
 801759a:	1af6      	subgt	r6, r6, r3
 801759c:	1aed      	subgt	r5, r5, r3
 801759e:	1aff      	subgt	r7, r7, r3
 80175a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175a2:	b1bb      	cbz	r3, 80175d4 <_strtod_l+0x724>
 80175a4:	4641      	mov	r1, r8
 80175a6:	461a      	mov	r2, r3
 80175a8:	4648      	mov	r0, r9
 80175aa:	f001 fe59 	bl	8019260 <__pow5mult>
 80175ae:	4680      	mov	r8, r0
 80175b0:	2800      	cmp	r0, #0
 80175b2:	f43f ae9b 	beq.w	80172ec <_strtod_l+0x43c>
 80175b6:	4601      	mov	r1, r0
 80175b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80175ba:	4648      	mov	r0, r9
 80175bc:	f001 fdb9 	bl	8019132 <__multiply>
 80175c0:	900c      	str	r0, [sp, #48]	; 0x30
 80175c2:	2800      	cmp	r0, #0
 80175c4:	f43f ae92 	beq.w	80172ec <_strtod_l+0x43c>
 80175c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80175ca:	4648      	mov	r0, r9
 80175cc:	f001 fcca 	bl	8018f64 <_Bfree>
 80175d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175d2:	931c      	str	r3, [sp, #112]	; 0x70
 80175d4:	2e00      	cmp	r6, #0
 80175d6:	dc7a      	bgt.n	80176ce <_strtod_l+0x81e>
 80175d8:	9b06      	ldr	r3, [sp, #24]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	dd08      	ble.n	80175f0 <_strtod_l+0x740>
 80175de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80175e0:	9905      	ldr	r1, [sp, #20]
 80175e2:	4648      	mov	r0, r9
 80175e4:	f001 fe3c 	bl	8019260 <__pow5mult>
 80175e8:	9005      	str	r0, [sp, #20]
 80175ea:	2800      	cmp	r0, #0
 80175ec:	f43f ae7e 	beq.w	80172ec <_strtod_l+0x43c>
 80175f0:	2d00      	cmp	r5, #0
 80175f2:	dd08      	ble.n	8017606 <_strtod_l+0x756>
 80175f4:	462a      	mov	r2, r5
 80175f6:	9905      	ldr	r1, [sp, #20]
 80175f8:	4648      	mov	r0, r9
 80175fa:	f001 fe7f 	bl	80192fc <__lshift>
 80175fe:	9005      	str	r0, [sp, #20]
 8017600:	2800      	cmp	r0, #0
 8017602:	f43f ae73 	beq.w	80172ec <_strtod_l+0x43c>
 8017606:	2f00      	cmp	r7, #0
 8017608:	dd08      	ble.n	801761c <_strtod_l+0x76c>
 801760a:	4641      	mov	r1, r8
 801760c:	463a      	mov	r2, r7
 801760e:	4648      	mov	r0, r9
 8017610:	f001 fe74 	bl	80192fc <__lshift>
 8017614:	4680      	mov	r8, r0
 8017616:	2800      	cmp	r0, #0
 8017618:	f43f ae68 	beq.w	80172ec <_strtod_l+0x43c>
 801761c:	9a05      	ldr	r2, [sp, #20]
 801761e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017620:	4648      	mov	r0, r9
 8017622:	f001 fed9 	bl	80193d8 <__mdiff>
 8017626:	4604      	mov	r4, r0
 8017628:	2800      	cmp	r0, #0
 801762a:	f43f ae5f 	beq.w	80172ec <_strtod_l+0x43c>
 801762e:	68c3      	ldr	r3, [r0, #12]
 8017630:	930c      	str	r3, [sp, #48]	; 0x30
 8017632:	2300      	movs	r3, #0
 8017634:	60c3      	str	r3, [r0, #12]
 8017636:	4641      	mov	r1, r8
 8017638:	f001 feb4 	bl	80193a4 <__mcmp>
 801763c:	2800      	cmp	r0, #0
 801763e:	da55      	bge.n	80176ec <_strtod_l+0x83c>
 8017640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017642:	b9e3      	cbnz	r3, 801767e <_strtod_l+0x7ce>
 8017644:	f1ba 0f00 	cmp.w	sl, #0
 8017648:	d119      	bne.n	801767e <_strtod_l+0x7ce>
 801764a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801764e:	b9b3      	cbnz	r3, 801767e <_strtod_l+0x7ce>
 8017650:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017654:	0d1b      	lsrs	r3, r3, #20
 8017656:	051b      	lsls	r3, r3, #20
 8017658:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801765c:	d90f      	bls.n	801767e <_strtod_l+0x7ce>
 801765e:	6963      	ldr	r3, [r4, #20]
 8017660:	b913      	cbnz	r3, 8017668 <_strtod_l+0x7b8>
 8017662:	6923      	ldr	r3, [r4, #16]
 8017664:	2b01      	cmp	r3, #1
 8017666:	dd0a      	ble.n	801767e <_strtod_l+0x7ce>
 8017668:	4621      	mov	r1, r4
 801766a:	2201      	movs	r2, #1
 801766c:	4648      	mov	r0, r9
 801766e:	f001 fe45 	bl	80192fc <__lshift>
 8017672:	4641      	mov	r1, r8
 8017674:	4604      	mov	r4, r0
 8017676:	f001 fe95 	bl	80193a4 <__mcmp>
 801767a:	2800      	cmp	r0, #0
 801767c:	dc67      	bgt.n	801774e <_strtod_l+0x89e>
 801767e:	9b04      	ldr	r3, [sp, #16]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d171      	bne.n	8017768 <_strtod_l+0x8b8>
 8017684:	e63d      	b.n	8017302 <_strtod_l+0x452>
 8017686:	f018 0f01 	tst.w	r8, #1
 801768a:	d004      	beq.n	8017696 <_strtod_l+0x7e6>
 801768c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017690:	f7e8 ffb2 	bl	80005f8 <__aeabi_dmul>
 8017694:	2301      	movs	r3, #1
 8017696:	ea4f 0868 	mov.w	r8, r8, asr #1
 801769a:	3508      	adds	r5, #8
 801769c:	e6e5      	b.n	801746a <_strtod_l+0x5ba>
 801769e:	f04f 32ff 	mov.w	r2, #4294967295
 80176a2:	fa02 f303 	lsl.w	r3, r2, r3
 80176a6:	ea03 0a0a 	and.w	sl, r3, sl
 80176aa:	e6ff      	b.n	80174ac <_strtod_l+0x5fc>
 80176ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80176b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80176b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80176b8:	36e2      	adds	r6, #226	; 0xe2
 80176ba:	fa01 f306 	lsl.w	r3, r1, r6
 80176be:	930a      	str	r3, [sp, #40]	; 0x28
 80176c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80176c2:	e75d      	b.n	8017580 <_strtod_l+0x6d0>
 80176c4:	2300      	movs	r3, #0
 80176c6:	930a      	str	r3, [sp, #40]	; 0x28
 80176c8:	2301      	movs	r3, #1
 80176ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80176cc:	e758      	b.n	8017580 <_strtod_l+0x6d0>
 80176ce:	4632      	mov	r2, r6
 80176d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80176d2:	4648      	mov	r0, r9
 80176d4:	f001 fe12 	bl	80192fc <__lshift>
 80176d8:	901c      	str	r0, [sp, #112]	; 0x70
 80176da:	2800      	cmp	r0, #0
 80176dc:	f47f af7c 	bne.w	80175d8 <_strtod_l+0x728>
 80176e0:	e604      	b.n	80172ec <_strtod_l+0x43c>
 80176e2:	bf00      	nop
 80176e4:	0801b7a0 	.word	0x0801b7a0
 80176e8:	fffffc02 	.word	0xfffffc02
 80176ec:	465d      	mov	r5, fp
 80176ee:	f040 8086 	bne.w	80177fe <_strtod_l+0x94e>
 80176f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80176f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176f8:	b32a      	cbz	r2, 8017746 <_strtod_l+0x896>
 80176fa:	4aaf      	ldr	r2, [pc, #700]	; (80179b8 <_strtod_l+0xb08>)
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d153      	bne.n	80177a8 <_strtod_l+0x8f8>
 8017700:	9b04      	ldr	r3, [sp, #16]
 8017702:	4650      	mov	r0, sl
 8017704:	b1d3      	cbz	r3, 801773c <_strtod_l+0x88c>
 8017706:	4aad      	ldr	r2, [pc, #692]	; (80179bc <_strtod_l+0xb0c>)
 8017708:	402a      	ands	r2, r5
 801770a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801770e:	f04f 31ff 	mov.w	r1, #4294967295
 8017712:	d816      	bhi.n	8017742 <_strtod_l+0x892>
 8017714:	0d12      	lsrs	r2, r2, #20
 8017716:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801771a:	fa01 f303 	lsl.w	r3, r1, r3
 801771e:	4298      	cmp	r0, r3
 8017720:	d142      	bne.n	80177a8 <_strtod_l+0x8f8>
 8017722:	4ba7      	ldr	r3, [pc, #668]	; (80179c0 <_strtod_l+0xb10>)
 8017724:	429d      	cmp	r5, r3
 8017726:	d102      	bne.n	801772e <_strtod_l+0x87e>
 8017728:	3001      	adds	r0, #1
 801772a:	f43f addf 	beq.w	80172ec <_strtod_l+0x43c>
 801772e:	4ba3      	ldr	r3, [pc, #652]	; (80179bc <_strtod_l+0xb0c>)
 8017730:	402b      	ands	r3, r5
 8017732:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017736:	f04f 0a00 	mov.w	sl, #0
 801773a:	e7a0      	b.n	801767e <_strtod_l+0x7ce>
 801773c:	f04f 33ff 	mov.w	r3, #4294967295
 8017740:	e7ed      	b.n	801771e <_strtod_l+0x86e>
 8017742:	460b      	mov	r3, r1
 8017744:	e7eb      	b.n	801771e <_strtod_l+0x86e>
 8017746:	bb7b      	cbnz	r3, 80177a8 <_strtod_l+0x8f8>
 8017748:	f1ba 0f00 	cmp.w	sl, #0
 801774c:	d12c      	bne.n	80177a8 <_strtod_l+0x8f8>
 801774e:	9904      	ldr	r1, [sp, #16]
 8017750:	4a9a      	ldr	r2, [pc, #616]	; (80179bc <_strtod_l+0xb0c>)
 8017752:	465b      	mov	r3, fp
 8017754:	b1f1      	cbz	r1, 8017794 <_strtod_l+0x8e4>
 8017756:	ea02 010b 	and.w	r1, r2, fp
 801775a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801775e:	dc19      	bgt.n	8017794 <_strtod_l+0x8e4>
 8017760:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017764:	f77f ae5b 	ble.w	801741e <_strtod_l+0x56e>
 8017768:	4a96      	ldr	r2, [pc, #600]	; (80179c4 <_strtod_l+0xb14>)
 801776a:	2300      	movs	r3, #0
 801776c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017770:	4650      	mov	r0, sl
 8017772:	4659      	mov	r1, fp
 8017774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017778:	f7e8 ff3e 	bl	80005f8 <__aeabi_dmul>
 801777c:	4682      	mov	sl, r0
 801777e:	468b      	mov	fp, r1
 8017780:	2900      	cmp	r1, #0
 8017782:	f47f adbe 	bne.w	8017302 <_strtod_l+0x452>
 8017786:	2800      	cmp	r0, #0
 8017788:	f47f adbb 	bne.w	8017302 <_strtod_l+0x452>
 801778c:	2322      	movs	r3, #34	; 0x22
 801778e:	f8c9 3000 	str.w	r3, [r9]
 8017792:	e5b6      	b.n	8017302 <_strtod_l+0x452>
 8017794:	4013      	ands	r3, r2
 8017796:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801779a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801779e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80177a2:	f04f 3aff 	mov.w	sl, #4294967295
 80177a6:	e76a      	b.n	801767e <_strtod_l+0x7ce>
 80177a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177aa:	b193      	cbz	r3, 80177d2 <_strtod_l+0x922>
 80177ac:	422b      	tst	r3, r5
 80177ae:	f43f af66 	beq.w	801767e <_strtod_l+0x7ce>
 80177b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177b4:	9a04      	ldr	r2, [sp, #16]
 80177b6:	4650      	mov	r0, sl
 80177b8:	4659      	mov	r1, fp
 80177ba:	b173      	cbz	r3, 80177da <_strtod_l+0x92a>
 80177bc:	f7ff fb5a 	bl	8016e74 <sulp>
 80177c0:	4602      	mov	r2, r0
 80177c2:	460b      	mov	r3, r1
 80177c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177c8:	f7e8 fd60 	bl	800028c <__adddf3>
 80177cc:	4682      	mov	sl, r0
 80177ce:	468b      	mov	fp, r1
 80177d0:	e755      	b.n	801767e <_strtod_l+0x7ce>
 80177d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177d4:	ea13 0f0a 	tst.w	r3, sl
 80177d8:	e7e9      	b.n	80177ae <_strtod_l+0x8fe>
 80177da:	f7ff fb4b 	bl	8016e74 <sulp>
 80177de:	4602      	mov	r2, r0
 80177e0:	460b      	mov	r3, r1
 80177e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177e6:	f7e8 fd4f 	bl	8000288 <__aeabi_dsub>
 80177ea:	2200      	movs	r2, #0
 80177ec:	2300      	movs	r3, #0
 80177ee:	4682      	mov	sl, r0
 80177f0:	468b      	mov	fp, r1
 80177f2:	f7e9 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	f47f ae11 	bne.w	801741e <_strtod_l+0x56e>
 80177fc:	e73f      	b.n	801767e <_strtod_l+0x7ce>
 80177fe:	4641      	mov	r1, r8
 8017800:	4620      	mov	r0, r4
 8017802:	f001 ff0c 	bl	801961e <__ratio>
 8017806:	ec57 6b10 	vmov	r6, r7, d0
 801780a:	2200      	movs	r2, #0
 801780c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017810:	ee10 0a10 	vmov	r0, s0
 8017814:	4639      	mov	r1, r7
 8017816:	f7e9 f96b 	bl	8000af0 <__aeabi_dcmple>
 801781a:	2800      	cmp	r0, #0
 801781c:	d077      	beq.n	801790e <_strtod_l+0xa5e>
 801781e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017820:	2b00      	cmp	r3, #0
 8017822:	d04a      	beq.n	80178ba <_strtod_l+0xa0a>
 8017824:	4b68      	ldr	r3, [pc, #416]	; (80179c8 <_strtod_l+0xb18>)
 8017826:	2200      	movs	r2, #0
 8017828:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801782c:	4f66      	ldr	r7, [pc, #408]	; (80179c8 <_strtod_l+0xb18>)
 801782e:	2600      	movs	r6, #0
 8017830:	4b62      	ldr	r3, [pc, #392]	; (80179bc <_strtod_l+0xb0c>)
 8017832:	402b      	ands	r3, r5
 8017834:	930f      	str	r3, [sp, #60]	; 0x3c
 8017836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017838:	4b64      	ldr	r3, [pc, #400]	; (80179cc <_strtod_l+0xb1c>)
 801783a:	429a      	cmp	r2, r3
 801783c:	f040 80ce 	bne.w	80179dc <_strtod_l+0xb2c>
 8017840:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017844:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017848:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801784c:	ec4b ab10 	vmov	d0, sl, fp
 8017850:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017854:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017858:	f001 fe1c 	bl	8019494 <__ulp>
 801785c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017860:	ec53 2b10 	vmov	r2, r3, d0
 8017864:	f7e8 fec8 	bl	80005f8 <__aeabi_dmul>
 8017868:	4652      	mov	r2, sl
 801786a:	465b      	mov	r3, fp
 801786c:	f7e8 fd0e 	bl	800028c <__adddf3>
 8017870:	460b      	mov	r3, r1
 8017872:	4952      	ldr	r1, [pc, #328]	; (80179bc <_strtod_l+0xb0c>)
 8017874:	4a56      	ldr	r2, [pc, #344]	; (80179d0 <_strtod_l+0xb20>)
 8017876:	4019      	ands	r1, r3
 8017878:	4291      	cmp	r1, r2
 801787a:	4682      	mov	sl, r0
 801787c:	d95b      	bls.n	8017936 <_strtod_l+0xa86>
 801787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017880:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017884:	4293      	cmp	r3, r2
 8017886:	d103      	bne.n	8017890 <_strtod_l+0x9e0>
 8017888:	9b08      	ldr	r3, [sp, #32]
 801788a:	3301      	adds	r3, #1
 801788c:	f43f ad2e 	beq.w	80172ec <_strtod_l+0x43c>
 8017890:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80179c0 <_strtod_l+0xb10>
 8017894:	f04f 3aff 	mov.w	sl, #4294967295
 8017898:	991c      	ldr	r1, [sp, #112]	; 0x70
 801789a:	4648      	mov	r0, r9
 801789c:	f001 fb62 	bl	8018f64 <_Bfree>
 80178a0:	9905      	ldr	r1, [sp, #20]
 80178a2:	4648      	mov	r0, r9
 80178a4:	f001 fb5e 	bl	8018f64 <_Bfree>
 80178a8:	4641      	mov	r1, r8
 80178aa:	4648      	mov	r0, r9
 80178ac:	f001 fb5a 	bl	8018f64 <_Bfree>
 80178b0:	4621      	mov	r1, r4
 80178b2:	4648      	mov	r0, r9
 80178b4:	f001 fb56 	bl	8018f64 <_Bfree>
 80178b8:	e619      	b.n	80174ee <_strtod_l+0x63e>
 80178ba:	f1ba 0f00 	cmp.w	sl, #0
 80178be:	d11a      	bne.n	80178f6 <_strtod_l+0xa46>
 80178c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80178c4:	b9eb      	cbnz	r3, 8017902 <_strtod_l+0xa52>
 80178c6:	2200      	movs	r2, #0
 80178c8:	4b3f      	ldr	r3, [pc, #252]	; (80179c8 <_strtod_l+0xb18>)
 80178ca:	4630      	mov	r0, r6
 80178cc:	4639      	mov	r1, r7
 80178ce:	f7e9 f905 	bl	8000adc <__aeabi_dcmplt>
 80178d2:	b9c8      	cbnz	r0, 8017908 <_strtod_l+0xa58>
 80178d4:	4630      	mov	r0, r6
 80178d6:	4639      	mov	r1, r7
 80178d8:	2200      	movs	r2, #0
 80178da:	4b3e      	ldr	r3, [pc, #248]	; (80179d4 <_strtod_l+0xb24>)
 80178dc:	f7e8 fe8c 	bl	80005f8 <__aeabi_dmul>
 80178e0:	4606      	mov	r6, r0
 80178e2:	460f      	mov	r7, r1
 80178e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80178e8:	9618      	str	r6, [sp, #96]	; 0x60
 80178ea:	9319      	str	r3, [sp, #100]	; 0x64
 80178ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80178f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80178f4:	e79c      	b.n	8017830 <_strtod_l+0x980>
 80178f6:	f1ba 0f01 	cmp.w	sl, #1
 80178fa:	d102      	bne.n	8017902 <_strtod_l+0xa52>
 80178fc:	2d00      	cmp	r5, #0
 80178fe:	f43f ad8e 	beq.w	801741e <_strtod_l+0x56e>
 8017902:	2200      	movs	r2, #0
 8017904:	4b34      	ldr	r3, [pc, #208]	; (80179d8 <_strtod_l+0xb28>)
 8017906:	e78f      	b.n	8017828 <_strtod_l+0x978>
 8017908:	2600      	movs	r6, #0
 801790a:	4f32      	ldr	r7, [pc, #200]	; (80179d4 <_strtod_l+0xb24>)
 801790c:	e7ea      	b.n	80178e4 <_strtod_l+0xa34>
 801790e:	4b31      	ldr	r3, [pc, #196]	; (80179d4 <_strtod_l+0xb24>)
 8017910:	4630      	mov	r0, r6
 8017912:	4639      	mov	r1, r7
 8017914:	2200      	movs	r2, #0
 8017916:	f7e8 fe6f 	bl	80005f8 <__aeabi_dmul>
 801791a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801791c:	4606      	mov	r6, r0
 801791e:	460f      	mov	r7, r1
 8017920:	b933      	cbnz	r3, 8017930 <_strtod_l+0xa80>
 8017922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017926:	9010      	str	r0, [sp, #64]	; 0x40
 8017928:	9311      	str	r3, [sp, #68]	; 0x44
 801792a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801792e:	e7df      	b.n	80178f0 <_strtod_l+0xa40>
 8017930:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017934:	e7f9      	b.n	801792a <_strtod_l+0xa7a>
 8017936:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801793a:	9b04      	ldr	r3, [sp, #16]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d1ab      	bne.n	8017898 <_strtod_l+0x9e8>
 8017940:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017944:	0d1b      	lsrs	r3, r3, #20
 8017946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017948:	051b      	lsls	r3, r3, #20
 801794a:	429a      	cmp	r2, r3
 801794c:	465d      	mov	r5, fp
 801794e:	d1a3      	bne.n	8017898 <_strtod_l+0x9e8>
 8017950:	4639      	mov	r1, r7
 8017952:	4630      	mov	r0, r6
 8017954:	f7e9 f900 	bl	8000b58 <__aeabi_d2iz>
 8017958:	f7e8 fde4 	bl	8000524 <__aeabi_i2d>
 801795c:	460b      	mov	r3, r1
 801795e:	4602      	mov	r2, r0
 8017960:	4639      	mov	r1, r7
 8017962:	4630      	mov	r0, r6
 8017964:	f7e8 fc90 	bl	8000288 <__aeabi_dsub>
 8017968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801796a:	4606      	mov	r6, r0
 801796c:	460f      	mov	r7, r1
 801796e:	b933      	cbnz	r3, 801797e <_strtod_l+0xace>
 8017970:	f1ba 0f00 	cmp.w	sl, #0
 8017974:	d103      	bne.n	801797e <_strtod_l+0xace>
 8017976:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801797a:	2d00      	cmp	r5, #0
 801797c:	d06d      	beq.n	8017a5a <_strtod_l+0xbaa>
 801797e:	a30a      	add	r3, pc, #40	; (adr r3, 80179a8 <_strtod_l+0xaf8>)
 8017980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017984:	4630      	mov	r0, r6
 8017986:	4639      	mov	r1, r7
 8017988:	f7e9 f8a8 	bl	8000adc <__aeabi_dcmplt>
 801798c:	2800      	cmp	r0, #0
 801798e:	f47f acb8 	bne.w	8017302 <_strtod_l+0x452>
 8017992:	a307      	add	r3, pc, #28	; (adr r3, 80179b0 <_strtod_l+0xb00>)
 8017994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017998:	4630      	mov	r0, r6
 801799a:	4639      	mov	r1, r7
 801799c:	f7e9 f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 80179a0:	2800      	cmp	r0, #0
 80179a2:	f43f af79 	beq.w	8017898 <_strtod_l+0x9e8>
 80179a6:	e4ac      	b.n	8017302 <_strtod_l+0x452>
 80179a8:	94a03595 	.word	0x94a03595
 80179ac:	3fdfffff 	.word	0x3fdfffff
 80179b0:	35afe535 	.word	0x35afe535
 80179b4:	3fe00000 	.word	0x3fe00000
 80179b8:	000fffff 	.word	0x000fffff
 80179bc:	7ff00000 	.word	0x7ff00000
 80179c0:	7fefffff 	.word	0x7fefffff
 80179c4:	39500000 	.word	0x39500000
 80179c8:	3ff00000 	.word	0x3ff00000
 80179cc:	7fe00000 	.word	0x7fe00000
 80179d0:	7c9fffff 	.word	0x7c9fffff
 80179d4:	3fe00000 	.word	0x3fe00000
 80179d8:	bff00000 	.word	0xbff00000
 80179dc:	9b04      	ldr	r3, [sp, #16]
 80179de:	b333      	cbz	r3, 8017a2e <_strtod_l+0xb7e>
 80179e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80179e6:	d822      	bhi.n	8017a2e <_strtod_l+0xb7e>
 80179e8:	a327      	add	r3, pc, #156	; (adr r3, 8017a88 <_strtod_l+0xbd8>)
 80179ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ee:	4630      	mov	r0, r6
 80179f0:	4639      	mov	r1, r7
 80179f2:	f7e9 f87d 	bl	8000af0 <__aeabi_dcmple>
 80179f6:	b1a0      	cbz	r0, 8017a22 <_strtod_l+0xb72>
 80179f8:	4639      	mov	r1, r7
 80179fa:	4630      	mov	r0, r6
 80179fc:	f7e9 f8d4 	bl	8000ba8 <__aeabi_d2uiz>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	bf08      	it	eq
 8017a04:	2001      	moveq	r0, #1
 8017a06:	f7e8 fd7d 	bl	8000504 <__aeabi_ui2d>
 8017a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a0c:	4606      	mov	r6, r0
 8017a0e:	460f      	mov	r7, r1
 8017a10:	bb03      	cbnz	r3, 8017a54 <_strtod_l+0xba4>
 8017a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a16:	9012      	str	r0, [sp, #72]	; 0x48
 8017a18:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017a1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a26:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017a2a:	1a9b      	subs	r3, r3, r2
 8017a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a2e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017a32:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017a36:	f001 fd2d 	bl	8019494 <__ulp>
 8017a3a:	4650      	mov	r0, sl
 8017a3c:	ec53 2b10 	vmov	r2, r3, d0
 8017a40:	4659      	mov	r1, fp
 8017a42:	f7e8 fdd9 	bl	80005f8 <__aeabi_dmul>
 8017a46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017a4a:	f7e8 fc1f 	bl	800028c <__adddf3>
 8017a4e:	4682      	mov	sl, r0
 8017a50:	468b      	mov	fp, r1
 8017a52:	e772      	b.n	801793a <_strtod_l+0xa8a>
 8017a54:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017a58:	e7df      	b.n	8017a1a <_strtod_l+0xb6a>
 8017a5a:	a30d      	add	r3, pc, #52	; (adr r3, 8017a90 <_strtod_l+0xbe0>)
 8017a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a60:	f7e9 f83c 	bl	8000adc <__aeabi_dcmplt>
 8017a64:	e79c      	b.n	80179a0 <_strtod_l+0xaf0>
 8017a66:	2300      	movs	r3, #0
 8017a68:	930d      	str	r3, [sp, #52]	; 0x34
 8017a6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017a6e:	6013      	str	r3, [r2, #0]
 8017a70:	f7ff ba61 	b.w	8016f36 <_strtod_l+0x86>
 8017a74:	2b65      	cmp	r3, #101	; 0x65
 8017a76:	f04f 0200 	mov.w	r2, #0
 8017a7a:	f43f ab4e 	beq.w	801711a <_strtod_l+0x26a>
 8017a7e:	2101      	movs	r1, #1
 8017a80:	4614      	mov	r4, r2
 8017a82:	9104      	str	r1, [sp, #16]
 8017a84:	f7ff bacb 	b.w	801701e <_strtod_l+0x16e>
 8017a88:	ffc00000 	.word	0xffc00000
 8017a8c:	41dfffff 	.word	0x41dfffff
 8017a90:	94a03595 	.word	0x94a03595
 8017a94:	3fcfffff 	.word	0x3fcfffff

08017a98 <_strtod_r>:
 8017a98:	4b05      	ldr	r3, [pc, #20]	; (8017ab0 <_strtod_r+0x18>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	b410      	push	{r4}
 8017a9e:	6a1b      	ldr	r3, [r3, #32]
 8017aa0:	4c04      	ldr	r4, [pc, #16]	; (8017ab4 <_strtod_r+0x1c>)
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	bf08      	it	eq
 8017aa6:	4623      	moveq	r3, r4
 8017aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017aac:	f7ff ba00 	b.w	8016eb0 <_strtod_l>
 8017ab0:	200009ac 	.word	0x200009ac
 8017ab4:	20000a10 	.word	0x20000a10

08017ab8 <_strtol_l.isra.0>:
 8017ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017abc:	4680      	mov	r8, r0
 8017abe:	4689      	mov	r9, r1
 8017ac0:	4692      	mov	sl, r2
 8017ac2:	461e      	mov	r6, r3
 8017ac4:	460f      	mov	r7, r1
 8017ac6:	463d      	mov	r5, r7
 8017ac8:	9808      	ldr	r0, [sp, #32]
 8017aca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ace:	f001 f9ed 	bl	8018eac <__locale_ctype_ptr_l>
 8017ad2:	4420      	add	r0, r4
 8017ad4:	7843      	ldrb	r3, [r0, #1]
 8017ad6:	f013 0308 	ands.w	r3, r3, #8
 8017ada:	d132      	bne.n	8017b42 <_strtol_l.isra.0+0x8a>
 8017adc:	2c2d      	cmp	r4, #45	; 0x2d
 8017ade:	d132      	bne.n	8017b46 <_strtol_l.isra.0+0x8e>
 8017ae0:	787c      	ldrb	r4, [r7, #1]
 8017ae2:	1cbd      	adds	r5, r7, #2
 8017ae4:	2201      	movs	r2, #1
 8017ae6:	2e00      	cmp	r6, #0
 8017ae8:	d05d      	beq.n	8017ba6 <_strtol_l.isra.0+0xee>
 8017aea:	2e10      	cmp	r6, #16
 8017aec:	d109      	bne.n	8017b02 <_strtol_l.isra.0+0x4a>
 8017aee:	2c30      	cmp	r4, #48	; 0x30
 8017af0:	d107      	bne.n	8017b02 <_strtol_l.isra.0+0x4a>
 8017af2:	782b      	ldrb	r3, [r5, #0]
 8017af4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017af8:	2b58      	cmp	r3, #88	; 0x58
 8017afa:	d14f      	bne.n	8017b9c <_strtol_l.isra.0+0xe4>
 8017afc:	786c      	ldrb	r4, [r5, #1]
 8017afe:	2610      	movs	r6, #16
 8017b00:	3502      	adds	r5, #2
 8017b02:	2a00      	cmp	r2, #0
 8017b04:	bf14      	ite	ne
 8017b06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017b0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017b0e:	2700      	movs	r7, #0
 8017b10:	fbb1 fcf6 	udiv	ip, r1, r6
 8017b14:	4638      	mov	r0, r7
 8017b16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017b1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017b1e:	2b09      	cmp	r3, #9
 8017b20:	d817      	bhi.n	8017b52 <_strtol_l.isra.0+0x9a>
 8017b22:	461c      	mov	r4, r3
 8017b24:	42a6      	cmp	r6, r4
 8017b26:	dd23      	ble.n	8017b70 <_strtol_l.isra.0+0xb8>
 8017b28:	1c7b      	adds	r3, r7, #1
 8017b2a:	d007      	beq.n	8017b3c <_strtol_l.isra.0+0x84>
 8017b2c:	4584      	cmp	ip, r0
 8017b2e:	d31c      	bcc.n	8017b6a <_strtol_l.isra.0+0xb2>
 8017b30:	d101      	bne.n	8017b36 <_strtol_l.isra.0+0x7e>
 8017b32:	45a6      	cmp	lr, r4
 8017b34:	db19      	blt.n	8017b6a <_strtol_l.isra.0+0xb2>
 8017b36:	fb00 4006 	mla	r0, r0, r6, r4
 8017b3a:	2701      	movs	r7, #1
 8017b3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b40:	e7eb      	b.n	8017b1a <_strtol_l.isra.0+0x62>
 8017b42:	462f      	mov	r7, r5
 8017b44:	e7bf      	b.n	8017ac6 <_strtol_l.isra.0+0xe>
 8017b46:	2c2b      	cmp	r4, #43	; 0x2b
 8017b48:	bf04      	itt	eq
 8017b4a:	1cbd      	addeq	r5, r7, #2
 8017b4c:	787c      	ldrbeq	r4, [r7, #1]
 8017b4e:	461a      	mov	r2, r3
 8017b50:	e7c9      	b.n	8017ae6 <_strtol_l.isra.0+0x2e>
 8017b52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017b56:	2b19      	cmp	r3, #25
 8017b58:	d801      	bhi.n	8017b5e <_strtol_l.isra.0+0xa6>
 8017b5a:	3c37      	subs	r4, #55	; 0x37
 8017b5c:	e7e2      	b.n	8017b24 <_strtol_l.isra.0+0x6c>
 8017b5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017b62:	2b19      	cmp	r3, #25
 8017b64:	d804      	bhi.n	8017b70 <_strtol_l.isra.0+0xb8>
 8017b66:	3c57      	subs	r4, #87	; 0x57
 8017b68:	e7dc      	b.n	8017b24 <_strtol_l.isra.0+0x6c>
 8017b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8017b6e:	e7e5      	b.n	8017b3c <_strtol_l.isra.0+0x84>
 8017b70:	1c7b      	adds	r3, r7, #1
 8017b72:	d108      	bne.n	8017b86 <_strtol_l.isra.0+0xce>
 8017b74:	2322      	movs	r3, #34	; 0x22
 8017b76:	f8c8 3000 	str.w	r3, [r8]
 8017b7a:	4608      	mov	r0, r1
 8017b7c:	f1ba 0f00 	cmp.w	sl, #0
 8017b80:	d107      	bne.n	8017b92 <_strtol_l.isra.0+0xda>
 8017b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b86:	b102      	cbz	r2, 8017b8a <_strtol_l.isra.0+0xd2>
 8017b88:	4240      	negs	r0, r0
 8017b8a:	f1ba 0f00 	cmp.w	sl, #0
 8017b8e:	d0f8      	beq.n	8017b82 <_strtol_l.isra.0+0xca>
 8017b90:	b10f      	cbz	r7, 8017b96 <_strtol_l.isra.0+0xde>
 8017b92:	f105 39ff 	add.w	r9, r5, #4294967295
 8017b96:	f8ca 9000 	str.w	r9, [sl]
 8017b9a:	e7f2      	b.n	8017b82 <_strtol_l.isra.0+0xca>
 8017b9c:	2430      	movs	r4, #48	; 0x30
 8017b9e:	2e00      	cmp	r6, #0
 8017ba0:	d1af      	bne.n	8017b02 <_strtol_l.isra.0+0x4a>
 8017ba2:	2608      	movs	r6, #8
 8017ba4:	e7ad      	b.n	8017b02 <_strtol_l.isra.0+0x4a>
 8017ba6:	2c30      	cmp	r4, #48	; 0x30
 8017ba8:	d0a3      	beq.n	8017af2 <_strtol_l.isra.0+0x3a>
 8017baa:	260a      	movs	r6, #10
 8017bac:	e7a9      	b.n	8017b02 <_strtol_l.isra.0+0x4a>
	...

08017bb0 <_strtol_r>:
 8017bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bb2:	4c06      	ldr	r4, [pc, #24]	; (8017bcc <_strtol_r+0x1c>)
 8017bb4:	4d06      	ldr	r5, [pc, #24]	; (8017bd0 <_strtol_r+0x20>)
 8017bb6:	6824      	ldr	r4, [r4, #0]
 8017bb8:	6a24      	ldr	r4, [r4, #32]
 8017bba:	2c00      	cmp	r4, #0
 8017bbc:	bf08      	it	eq
 8017bbe:	462c      	moveq	r4, r5
 8017bc0:	9400      	str	r4, [sp, #0]
 8017bc2:	f7ff ff79 	bl	8017ab8 <_strtol_l.isra.0>
 8017bc6:	b003      	add	sp, #12
 8017bc8:	bd30      	pop	{r4, r5, pc}
 8017bca:	bf00      	nop
 8017bcc:	200009ac 	.word	0x200009ac
 8017bd0:	20000a10 	.word	0x20000a10

08017bd4 <quorem>:
 8017bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd8:	6903      	ldr	r3, [r0, #16]
 8017bda:	690c      	ldr	r4, [r1, #16]
 8017bdc:	42a3      	cmp	r3, r4
 8017bde:	4680      	mov	r8, r0
 8017be0:	f2c0 8082 	blt.w	8017ce8 <quorem+0x114>
 8017be4:	3c01      	subs	r4, #1
 8017be6:	f101 0714 	add.w	r7, r1, #20
 8017bea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017bee:	f100 0614 	add.w	r6, r0, #20
 8017bf2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017bf6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017bfa:	eb06 030c 	add.w	r3, r6, ip
 8017bfe:	3501      	adds	r5, #1
 8017c00:	eb07 090c 	add.w	r9, r7, ip
 8017c04:	9301      	str	r3, [sp, #4]
 8017c06:	fbb0 f5f5 	udiv	r5, r0, r5
 8017c0a:	b395      	cbz	r5, 8017c72 <quorem+0x9e>
 8017c0c:	f04f 0a00 	mov.w	sl, #0
 8017c10:	4638      	mov	r0, r7
 8017c12:	46b6      	mov	lr, r6
 8017c14:	46d3      	mov	fp, sl
 8017c16:	f850 2b04 	ldr.w	r2, [r0], #4
 8017c1a:	b293      	uxth	r3, r2
 8017c1c:	fb05 a303 	mla	r3, r5, r3, sl
 8017c20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	ebab 0303 	sub.w	r3, fp, r3
 8017c2a:	0c12      	lsrs	r2, r2, #16
 8017c2c:	f8de b000 	ldr.w	fp, [lr]
 8017c30:	fb05 a202 	mla	r2, r5, r2, sl
 8017c34:	fa13 f38b 	uxtah	r3, r3, fp
 8017c38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017c3c:	fa1f fb82 	uxth.w	fp, r2
 8017c40:	f8de 2000 	ldr.w	r2, [lr]
 8017c44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c52:	4581      	cmp	r9, r0
 8017c54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017c58:	f84e 3b04 	str.w	r3, [lr], #4
 8017c5c:	d2db      	bcs.n	8017c16 <quorem+0x42>
 8017c5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017c62:	b933      	cbnz	r3, 8017c72 <quorem+0x9e>
 8017c64:	9b01      	ldr	r3, [sp, #4]
 8017c66:	3b04      	subs	r3, #4
 8017c68:	429e      	cmp	r6, r3
 8017c6a:	461a      	mov	r2, r3
 8017c6c:	d330      	bcc.n	8017cd0 <quorem+0xfc>
 8017c6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017c72:	4640      	mov	r0, r8
 8017c74:	f001 fb96 	bl	80193a4 <__mcmp>
 8017c78:	2800      	cmp	r0, #0
 8017c7a:	db25      	blt.n	8017cc8 <quorem+0xf4>
 8017c7c:	3501      	adds	r5, #1
 8017c7e:	4630      	mov	r0, r6
 8017c80:	f04f 0c00 	mov.w	ip, #0
 8017c84:	f857 2b04 	ldr.w	r2, [r7], #4
 8017c88:	f8d0 e000 	ldr.w	lr, [r0]
 8017c8c:	b293      	uxth	r3, r2
 8017c8e:	ebac 0303 	sub.w	r3, ip, r3
 8017c92:	0c12      	lsrs	r2, r2, #16
 8017c94:	fa13 f38e 	uxtah	r3, r3, lr
 8017c98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ca6:	45b9      	cmp	r9, r7
 8017ca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017cac:	f840 3b04 	str.w	r3, [r0], #4
 8017cb0:	d2e8      	bcs.n	8017c84 <quorem+0xb0>
 8017cb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017cb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017cba:	b92a      	cbnz	r2, 8017cc8 <quorem+0xf4>
 8017cbc:	3b04      	subs	r3, #4
 8017cbe:	429e      	cmp	r6, r3
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	d30b      	bcc.n	8017cdc <quorem+0x108>
 8017cc4:	f8c8 4010 	str.w	r4, [r8, #16]
 8017cc8:	4628      	mov	r0, r5
 8017cca:	b003      	add	sp, #12
 8017ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd0:	6812      	ldr	r2, [r2, #0]
 8017cd2:	3b04      	subs	r3, #4
 8017cd4:	2a00      	cmp	r2, #0
 8017cd6:	d1ca      	bne.n	8017c6e <quorem+0x9a>
 8017cd8:	3c01      	subs	r4, #1
 8017cda:	e7c5      	b.n	8017c68 <quorem+0x94>
 8017cdc:	6812      	ldr	r2, [r2, #0]
 8017cde:	3b04      	subs	r3, #4
 8017ce0:	2a00      	cmp	r2, #0
 8017ce2:	d1ef      	bne.n	8017cc4 <quorem+0xf0>
 8017ce4:	3c01      	subs	r4, #1
 8017ce6:	e7ea      	b.n	8017cbe <quorem+0xea>
 8017ce8:	2000      	movs	r0, #0
 8017cea:	e7ee      	b.n	8017cca <quorem+0xf6>
 8017cec:	0000      	movs	r0, r0
	...

08017cf0 <_dtoa_r>:
 8017cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cf4:	ec57 6b10 	vmov	r6, r7, d0
 8017cf8:	b097      	sub	sp, #92	; 0x5c
 8017cfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017cfc:	9106      	str	r1, [sp, #24]
 8017cfe:	4604      	mov	r4, r0
 8017d00:	920b      	str	r2, [sp, #44]	; 0x2c
 8017d02:	9312      	str	r3, [sp, #72]	; 0x48
 8017d04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017d08:	e9cd 6700 	strd	r6, r7, [sp]
 8017d0c:	b93d      	cbnz	r5, 8017d1e <_dtoa_r+0x2e>
 8017d0e:	2010      	movs	r0, #16
 8017d10:	f7fe f924 	bl	8015f5c <malloc>
 8017d14:	6260      	str	r0, [r4, #36]	; 0x24
 8017d16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017d1a:	6005      	str	r5, [r0, #0]
 8017d1c:	60c5      	str	r5, [r0, #12]
 8017d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d20:	6819      	ldr	r1, [r3, #0]
 8017d22:	b151      	cbz	r1, 8017d3a <_dtoa_r+0x4a>
 8017d24:	685a      	ldr	r2, [r3, #4]
 8017d26:	604a      	str	r2, [r1, #4]
 8017d28:	2301      	movs	r3, #1
 8017d2a:	4093      	lsls	r3, r2
 8017d2c:	608b      	str	r3, [r1, #8]
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f001 f918 	bl	8018f64 <_Bfree>
 8017d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d36:	2200      	movs	r2, #0
 8017d38:	601a      	str	r2, [r3, #0]
 8017d3a:	1e3b      	subs	r3, r7, #0
 8017d3c:	bfbb      	ittet	lt
 8017d3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017d42:	9301      	strlt	r3, [sp, #4]
 8017d44:	2300      	movge	r3, #0
 8017d46:	2201      	movlt	r2, #1
 8017d48:	bfac      	ite	ge
 8017d4a:	f8c8 3000 	strge.w	r3, [r8]
 8017d4e:	f8c8 2000 	strlt.w	r2, [r8]
 8017d52:	4baf      	ldr	r3, [pc, #700]	; (8018010 <_dtoa_r+0x320>)
 8017d54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017d58:	ea33 0308 	bics.w	r3, r3, r8
 8017d5c:	d114      	bne.n	8017d88 <_dtoa_r+0x98>
 8017d5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d60:	f242 730f 	movw	r3, #9999	; 0x270f
 8017d64:	6013      	str	r3, [r2, #0]
 8017d66:	9b00      	ldr	r3, [sp, #0]
 8017d68:	b923      	cbnz	r3, 8017d74 <_dtoa_r+0x84>
 8017d6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017d6e:	2800      	cmp	r0, #0
 8017d70:	f000 8542 	beq.w	80187f8 <_dtoa_r+0xb08>
 8017d74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8018024 <_dtoa_r+0x334>
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f000 8544 	beq.w	8018808 <_dtoa_r+0xb18>
 8017d80:	f10b 0303 	add.w	r3, fp, #3
 8017d84:	f000 bd3e 	b.w	8018804 <_dtoa_r+0xb14>
 8017d88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	2300      	movs	r3, #0
 8017d90:	4630      	mov	r0, r6
 8017d92:	4639      	mov	r1, r7
 8017d94:	f7e8 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8017d98:	4681      	mov	r9, r0
 8017d9a:	b168      	cbz	r0, 8017db8 <_dtoa_r+0xc8>
 8017d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d9e:	2301      	movs	r3, #1
 8017da0:	6013      	str	r3, [r2, #0]
 8017da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	f000 8524 	beq.w	80187f2 <_dtoa_r+0xb02>
 8017daa:	4b9a      	ldr	r3, [pc, #616]	; (8018014 <_dtoa_r+0x324>)
 8017dac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017dae:	f103 3bff 	add.w	fp, r3, #4294967295
 8017db2:	6013      	str	r3, [r2, #0]
 8017db4:	f000 bd28 	b.w	8018808 <_dtoa_r+0xb18>
 8017db8:	aa14      	add	r2, sp, #80	; 0x50
 8017dba:	a915      	add	r1, sp, #84	; 0x54
 8017dbc:	ec47 6b10 	vmov	d0, r6, r7
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f001 fbdd 	bl	8019580 <__d2b>
 8017dc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017dca:	9004      	str	r0, [sp, #16]
 8017dcc:	2d00      	cmp	r5, #0
 8017dce:	d07c      	beq.n	8017eca <_dtoa_r+0x1da>
 8017dd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017dd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017dd8:	46b2      	mov	sl, r6
 8017dda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017de2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017de6:	2200      	movs	r2, #0
 8017de8:	4b8b      	ldr	r3, [pc, #556]	; (8018018 <_dtoa_r+0x328>)
 8017dea:	4650      	mov	r0, sl
 8017dec:	4659      	mov	r1, fp
 8017dee:	f7e8 fa4b 	bl	8000288 <__aeabi_dsub>
 8017df2:	a381      	add	r3, pc, #516	; (adr r3, 8017ff8 <_dtoa_r+0x308>)
 8017df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017df8:	f7e8 fbfe 	bl	80005f8 <__aeabi_dmul>
 8017dfc:	a380      	add	r3, pc, #512	; (adr r3, 8018000 <_dtoa_r+0x310>)
 8017dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e02:	f7e8 fa43 	bl	800028c <__adddf3>
 8017e06:	4606      	mov	r6, r0
 8017e08:	4628      	mov	r0, r5
 8017e0a:	460f      	mov	r7, r1
 8017e0c:	f7e8 fb8a 	bl	8000524 <__aeabi_i2d>
 8017e10:	a37d      	add	r3, pc, #500	; (adr r3, 8018008 <_dtoa_r+0x318>)
 8017e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e16:	f7e8 fbef 	bl	80005f8 <__aeabi_dmul>
 8017e1a:	4602      	mov	r2, r0
 8017e1c:	460b      	mov	r3, r1
 8017e1e:	4630      	mov	r0, r6
 8017e20:	4639      	mov	r1, r7
 8017e22:	f7e8 fa33 	bl	800028c <__adddf3>
 8017e26:	4606      	mov	r6, r0
 8017e28:	460f      	mov	r7, r1
 8017e2a:	f7e8 fe95 	bl	8000b58 <__aeabi_d2iz>
 8017e2e:	2200      	movs	r2, #0
 8017e30:	4682      	mov	sl, r0
 8017e32:	2300      	movs	r3, #0
 8017e34:	4630      	mov	r0, r6
 8017e36:	4639      	mov	r1, r7
 8017e38:	f7e8 fe50 	bl	8000adc <__aeabi_dcmplt>
 8017e3c:	b148      	cbz	r0, 8017e52 <_dtoa_r+0x162>
 8017e3e:	4650      	mov	r0, sl
 8017e40:	f7e8 fb70 	bl	8000524 <__aeabi_i2d>
 8017e44:	4632      	mov	r2, r6
 8017e46:	463b      	mov	r3, r7
 8017e48:	f7e8 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e4c:	b908      	cbnz	r0, 8017e52 <_dtoa_r+0x162>
 8017e4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e52:	f1ba 0f16 	cmp.w	sl, #22
 8017e56:	d859      	bhi.n	8017f0c <_dtoa_r+0x21c>
 8017e58:	4970      	ldr	r1, [pc, #448]	; (801801c <_dtoa_r+0x32c>)
 8017e5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e66:	f7e8 fe57 	bl	8000b18 <__aeabi_dcmpgt>
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	d050      	beq.n	8017f10 <_dtoa_r+0x220>
 8017e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e72:	2300      	movs	r3, #0
 8017e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e78:	1b5d      	subs	r5, r3, r5
 8017e7a:	f1b5 0801 	subs.w	r8, r5, #1
 8017e7e:	bf49      	itett	mi
 8017e80:	f1c5 0301 	rsbmi	r3, r5, #1
 8017e84:	2300      	movpl	r3, #0
 8017e86:	9305      	strmi	r3, [sp, #20]
 8017e88:	f04f 0800 	movmi.w	r8, #0
 8017e8c:	bf58      	it	pl
 8017e8e:	9305      	strpl	r3, [sp, #20]
 8017e90:	f1ba 0f00 	cmp.w	sl, #0
 8017e94:	db3e      	blt.n	8017f14 <_dtoa_r+0x224>
 8017e96:	2300      	movs	r3, #0
 8017e98:	44d0      	add	r8, sl
 8017e9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017e9e:	9307      	str	r3, [sp, #28]
 8017ea0:	9b06      	ldr	r3, [sp, #24]
 8017ea2:	2b09      	cmp	r3, #9
 8017ea4:	f200 8090 	bhi.w	8017fc8 <_dtoa_r+0x2d8>
 8017ea8:	2b05      	cmp	r3, #5
 8017eaa:	bfc4      	itt	gt
 8017eac:	3b04      	subgt	r3, #4
 8017eae:	9306      	strgt	r3, [sp, #24]
 8017eb0:	9b06      	ldr	r3, [sp, #24]
 8017eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8017eb6:	bfcc      	ite	gt
 8017eb8:	2500      	movgt	r5, #0
 8017eba:	2501      	movle	r5, #1
 8017ebc:	2b03      	cmp	r3, #3
 8017ebe:	f200 808f 	bhi.w	8017fe0 <_dtoa_r+0x2f0>
 8017ec2:	e8df f003 	tbb	[pc, r3]
 8017ec6:	7f7d      	.short	0x7f7d
 8017ec8:	7131      	.short	0x7131
 8017eca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017ece:	441d      	add	r5, r3
 8017ed0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017ed4:	2820      	cmp	r0, #32
 8017ed6:	dd13      	ble.n	8017f00 <_dtoa_r+0x210>
 8017ed8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017edc:	9b00      	ldr	r3, [sp, #0]
 8017ede:	fa08 f800 	lsl.w	r8, r8, r0
 8017ee2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017ee6:	fa23 f000 	lsr.w	r0, r3, r0
 8017eea:	ea48 0000 	orr.w	r0, r8, r0
 8017eee:	f7e8 fb09 	bl	8000504 <__aeabi_ui2d>
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	4682      	mov	sl, r0
 8017ef6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017efa:	3d01      	subs	r5, #1
 8017efc:	9313      	str	r3, [sp, #76]	; 0x4c
 8017efe:	e772      	b.n	8017de6 <_dtoa_r+0xf6>
 8017f00:	9b00      	ldr	r3, [sp, #0]
 8017f02:	f1c0 0020 	rsb	r0, r0, #32
 8017f06:	fa03 f000 	lsl.w	r0, r3, r0
 8017f0a:	e7f0      	b.n	8017eee <_dtoa_r+0x1fe>
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	e7b1      	b.n	8017e74 <_dtoa_r+0x184>
 8017f10:	900f      	str	r0, [sp, #60]	; 0x3c
 8017f12:	e7b0      	b.n	8017e76 <_dtoa_r+0x186>
 8017f14:	9b05      	ldr	r3, [sp, #20]
 8017f16:	eba3 030a 	sub.w	r3, r3, sl
 8017f1a:	9305      	str	r3, [sp, #20]
 8017f1c:	f1ca 0300 	rsb	r3, sl, #0
 8017f20:	9307      	str	r3, [sp, #28]
 8017f22:	2300      	movs	r3, #0
 8017f24:	930e      	str	r3, [sp, #56]	; 0x38
 8017f26:	e7bb      	b.n	8017ea0 <_dtoa_r+0x1b0>
 8017f28:	2301      	movs	r3, #1
 8017f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8017f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	dd59      	ble.n	8017fe6 <_dtoa_r+0x2f6>
 8017f32:	9302      	str	r3, [sp, #8]
 8017f34:	4699      	mov	r9, r3
 8017f36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017f38:	2200      	movs	r2, #0
 8017f3a:	6072      	str	r2, [r6, #4]
 8017f3c:	2204      	movs	r2, #4
 8017f3e:	f102 0014 	add.w	r0, r2, #20
 8017f42:	4298      	cmp	r0, r3
 8017f44:	6871      	ldr	r1, [r6, #4]
 8017f46:	d953      	bls.n	8017ff0 <_dtoa_r+0x300>
 8017f48:	4620      	mov	r0, r4
 8017f4a:	f000 ffd7 	bl	8018efc <_Balloc>
 8017f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f50:	6030      	str	r0, [r6, #0]
 8017f52:	f1b9 0f0e 	cmp.w	r9, #14
 8017f56:	f8d3 b000 	ldr.w	fp, [r3]
 8017f5a:	f200 80e6 	bhi.w	801812a <_dtoa_r+0x43a>
 8017f5e:	2d00      	cmp	r5, #0
 8017f60:	f000 80e3 	beq.w	801812a <_dtoa_r+0x43a>
 8017f64:	ed9d 7b00 	vldr	d7, [sp]
 8017f68:	f1ba 0f00 	cmp.w	sl, #0
 8017f6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017f70:	dd74      	ble.n	801805c <_dtoa_r+0x36c>
 8017f72:	4a2a      	ldr	r2, [pc, #168]	; (801801c <_dtoa_r+0x32c>)
 8017f74:	f00a 030f 	and.w	r3, sl, #15
 8017f78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017f7c:	ed93 7b00 	vldr	d7, [r3]
 8017f80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017f84:	06f0      	lsls	r0, r6, #27
 8017f86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017f8a:	d565      	bpl.n	8018058 <_dtoa_r+0x368>
 8017f8c:	4b24      	ldr	r3, [pc, #144]	; (8018020 <_dtoa_r+0x330>)
 8017f8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017f92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f96:	f7e8 fc59 	bl	800084c <__aeabi_ddiv>
 8017f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8017f9e:	f006 060f 	and.w	r6, r6, #15
 8017fa2:	2503      	movs	r5, #3
 8017fa4:	4f1e      	ldr	r7, [pc, #120]	; (8018020 <_dtoa_r+0x330>)
 8017fa6:	e04c      	b.n	8018042 <_dtoa_r+0x352>
 8017fa8:	2301      	movs	r3, #1
 8017faa:	930a      	str	r3, [sp, #40]	; 0x28
 8017fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fae:	4453      	add	r3, sl
 8017fb0:	f103 0901 	add.w	r9, r3, #1
 8017fb4:	9302      	str	r3, [sp, #8]
 8017fb6:	464b      	mov	r3, r9
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	bfb8      	it	lt
 8017fbc:	2301      	movlt	r3, #1
 8017fbe:	e7ba      	b.n	8017f36 <_dtoa_r+0x246>
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	e7b2      	b.n	8017f2a <_dtoa_r+0x23a>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	e7f0      	b.n	8017faa <_dtoa_r+0x2ba>
 8017fc8:	2501      	movs	r5, #1
 8017fca:	2300      	movs	r3, #0
 8017fcc:	9306      	str	r3, [sp, #24]
 8017fce:	950a      	str	r5, [sp, #40]	; 0x28
 8017fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fd4:	9302      	str	r3, [sp, #8]
 8017fd6:	4699      	mov	r9, r3
 8017fd8:	2200      	movs	r2, #0
 8017fda:	2312      	movs	r3, #18
 8017fdc:	920b      	str	r2, [sp, #44]	; 0x2c
 8017fde:	e7aa      	b.n	8017f36 <_dtoa_r+0x246>
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8017fe4:	e7f4      	b.n	8017fd0 <_dtoa_r+0x2e0>
 8017fe6:	2301      	movs	r3, #1
 8017fe8:	9302      	str	r3, [sp, #8]
 8017fea:	4699      	mov	r9, r3
 8017fec:	461a      	mov	r2, r3
 8017fee:	e7f5      	b.n	8017fdc <_dtoa_r+0x2ec>
 8017ff0:	3101      	adds	r1, #1
 8017ff2:	6071      	str	r1, [r6, #4]
 8017ff4:	0052      	lsls	r2, r2, #1
 8017ff6:	e7a2      	b.n	8017f3e <_dtoa_r+0x24e>
 8017ff8:	636f4361 	.word	0x636f4361
 8017ffc:	3fd287a7 	.word	0x3fd287a7
 8018000:	8b60c8b3 	.word	0x8b60c8b3
 8018004:	3fc68a28 	.word	0x3fc68a28
 8018008:	509f79fb 	.word	0x509f79fb
 801800c:	3fd34413 	.word	0x3fd34413
 8018010:	7ff00000 	.word	0x7ff00000
 8018014:	0801b749 	.word	0x0801b749
 8018018:	3ff80000 	.word	0x3ff80000
 801801c:	0801b808 	.word	0x0801b808
 8018020:	0801b7e0 	.word	0x0801b7e0
 8018024:	0801b7d1 	.word	0x0801b7d1
 8018028:	07f1      	lsls	r1, r6, #31
 801802a:	d508      	bpl.n	801803e <_dtoa_r+0x34e>
 801802c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018034:	f7e8 fae0 	bl	80005f8 <__aeabi_dmul>
 8018038:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801803c:	3501      	adds	r5, #1
 801803e:	1076      	asrs	r6, r6, #1
 8018040:	3708      	adds	r7, #8
 8018042:	2e00      	cmp	r6, #0
 8018044:	d1f0      	bne.n	8018028 <_dtoa_r+0x338>
 8018046:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801804a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801804e:	f7e8 fbfd 	bl	800084c <__aeabi_ddiv>
 8018052:	e9cd 0100 	strd	r0, r1, [sp]
 8018056:	e01a      	b.n	801808e <_dtoa_r+0x39e>
 8018058:	2502      	movs	r5, #2
 801805a:	e7a3      	b.n	8017fa4 <_dtoa_r+0x2b4>
 801805c:	f000 80a0 	beq.w	80181a0 <_dtoa_r+0x4b0>
 8018060:	f1ca 0600 	rsb	r6, sl, #0
 8018064:	4b9f      	ldr	r3, [pc, #636]	; (80182e4 <_dtoa_r+0x5f4>)
 8018066:	4fa0      	ldr	r7, [pc, #640]	; (80182e8 <_dtoa_r+0x5f8>)
 8018068:	f006 020f 	and.w	r2, r6, #15
 801806c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018074:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018078:	f7e8 fabe 	bl	80005f8 <__aeabi_dmul>
 801807c:	e9cd 0100 	strd	r0, r1, [sp]
 8018080:	1136      	asrs	r6, r6, #4
 8018082:	2300      	movs	r3, #0
 8018084:	2502      	movs	r5, #2
 8018086:	2e00      	cmp	r6, #0
 8018088:	d17f      	bne.n	801818a <_dtoa_r+0x49a>
 801808a:	2b00      	cmp	r3, #0
 801808c:	d1e1      	bne.n	8018052 <_dtoa_r+0x362>
 801808e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018090:	2b00      	cmp	r3, #0
 8018092:	f000 8087 	beq.w	80181a4 <_dtoa_r+0x4b4>
 8018096:	e9dd 6700 	ldrd	r6, r7, [sp]
 801809a:	2200      	movs	r2, #0
 801809c:	4b93      	ldr	r3, [pc, #588]	; (80182ec <_dtoa_r+0x5fc>)
 801809e:	4630      	mov	r0, r6
 80180a0:	4639      	mov	r1, r7
 80180a2:	f7e8 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80180a6:	2800      	cmp	r0, #0
 80180a8:	d07c      	beq.n	80181a4 <_dtoa_r+0x4b4>
 80180aa:	f1b9 0f00 	cmp.w	r9, #0
 80180ae:	d079      	beq.n	80181a4 <_dtoa_r+0x4b4>
 80180b0:	9b02      	ldr	r3, [sp, #8]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	dd35      	ble.n	8018122 <_dtoa_r+0x432>
 80180b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80180ba:	9308      	str	r3, [sp, #32]
 80180bc:	4639      	mov	r1, r7
 80180be:	2200      	movs	r2, #0
 80180c0:	4b8b      	ldr	r3, [pc, #556]	; (80182f0 <_dtoa_r+0x600>)
 80180c2:	4630      	mov	r0, r6
 80180c4:	f7e8 fa98 	bl	80005f8 <__aeabi_dmul>
 80180c8:	e9cd 0100 	strd	r0, r1, [sp]
 80180cc:	9f02      	ldr	r7, [sp, #8]
 80180ce:	3501      	adds	r5, #1
 80180d0:	4628      	mov	r0, r5
 80180d2:	f7e8 fa27 	bl	8000524 <__aeabi_i2d>
 80180d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180da:	f7e8 fa8d 	bl	80005f8 <__aeabi_dmul>
 80180de:	2200      	movs	r2, #0
 80180e0:	4b84      	ldr	r3, [pc, #528]	; (80182f4 <_dtoa_r+0x604>)
 80180e2:	f7e8 f8d3 	bl	800028c <__adddf3>
 80180e6:	4605      	mov	r5, r0
 80180e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80180ec:	2f00      	cmp	r7, #0
 80180ee:	d15d      	bne.n	80181ac <_dtoa_r+0x4bc>
 80180f0:	2200      	movs	r2, #0
 80180f2:	4b81      	ldr	r3, [pc, #516]	; (80182f8 <_dtoa_r+0x608>)
 80180f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180f8:	f7e8 f8c6 	bl	8000288 <__aeabi_dsub>
 80180fc:	462a      	mov	r2, r5
 80180fe:	4633      	mov	r3, r6
 8018100:	e9cd 0100 	strd	r0, r1, [sp]
 8018104:	f7e8 fd08 	bl	8000b18 <__aeabi_dcmpgt>
 8018108:	2800      	cmp	r0, #0
 801810a:	f040 8288 	bne.w	801861e <_dtoa_r+0x92e>
 801810e:	462a      	mov	r2, r5
 8018110:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018118:	f7e8 fce0 	bl	8000adc <__aeabi_dcmplt>
 801811c:	2800      	cmp	r0, #0
 801811e:	f040 827c 	bne.w	801861a <_dtoa_r+0x92a>
 8018122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018126:	e9cd 2300 	strd	r2, r3, [sp]
 801812a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801812c:	2b00      	cmp	r3, #0
 801812e:	f2c0 8150 	blt.w	80183d2 <_dtoa_r+0x6e2>
 8018132:	f1ba 0f0e 	cmp.w	sl, #14
 8018136:	f300 814c 	bgt.w	80183d2 <_dtoa_r+0x6e2>
 801813a:	4b6a      	ldr	r3, [pc, #424]	; (80182e4 <_dtoa_r+0x5f4>)
 801813c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018140:	ed93 7b00 	vldr	d7, [r3]
 8018144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018146:	2b00      	cmp	r3, #0
 8018148:	ed8d 7b02 	vstr	d7, [sp, #8]
 801814c:	f280 80d8 	bge.w	8018300 <_dtoa_r+0x610>
 8018150:	f1b9 0f00 	cmp.w	r9, #0
 8018154:	f300 80d4 	bgt.w	8018300 <_dtoa_r+0x610>
 8018158:	f040 825e 	bne.w	8018618 <_dtoa_r+0x928>
 801815c:	2200      	movs	r2, #0
 801815e:	4b66      	ldr	r3, [pc, #408]	; (80182f8 <_dtoa_r+0x608>)
 8018160:	ec51 0b17 	vmov	r0, r1, d7
 8018164:	f7e8 fa48 	bl	80005f8 <__aeabi_dmul>
 8018168:	e9dd 2300 	ldrd	r2, r3, [sp]
 801816c:	f7e8 fcca 	bl	8000b04 <__aeabi_dcmpge>
 8018170:	464f      	mov	r7, r9
 8018172:	464e      	mov	r6, r9
 8018174:	2800      	cmp	r0, #0
 8018176:	f040 8234 	bne.w	80185e2 <_dtoa_r+0x8f2>
 801817a:	2331      	movs	r3, #49	; 0x31
 801817c:	f10b 0501 	add.w	r5, fp, #1
 8018180:	f88b 3000 	strb.w	r3, [fp]
 8018184:	f10a 0a01 	add.w	sl, sl, #1
 8018188:	e22f      	b.n	80185ea <_dtoa_r+0x8fa>
 801818a:	07f2      	lsls	r2, r6, #31
 801818c:	d505      	bpl.n	801819a <_dtoa_r+0x4aa>
 801818e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018192:	f7e8 fa31 	bl	80005f8 <__aeabi_dmul>
 8018196:	3501      	adds	r5, #1
 8018198:	2301      	movs	r3, #1
 801819a:	1076      	asrs	r6, r6, #1
 801819c:	3708      	adds	r7, #8
 801819e:	e772      	b.n	8018086 <_dtoa_r+0x396>
 80181a0:	2502      	movs	r5, #2
 80181a2:	e774      	b.n	801808e <_dtoa_r+0x39e>
 80181a4:	f8cd a020 	str.w	sl, [sp, #32]
 80181a8:	464f      	mov	r7, r9
 80181aa:	e791      	b.n	80180d0 <_dtoa_r+0x3e0>
 80181ac:	4b4d      	ldr	r3, [pc, #308]	; (80182e4 <_dtoa_r+0x5f4>)
 80181ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80181b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80181b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d047      	beq.n	801824c <_dtoa_r+0x55c>
 80181bc:	4602      	mov	r2, r0
 80181be:	460b      	mov	r3, r1
 80181c0:	2000      	movs	r0, #0
 80181c2:	494e      	ldr	r1, [pc, #312]	; (80182fc <_dtoa_r+0x60c>)
 80181c4:	f7e8 fb42 	bl	800084c <__aeabi_ddiv>
 80181c8:	462a      	mov	r2, r5
 80181ca:	4633      	mov	r3, r6
 80181cc:	f7e8 f85c 	bl	8000288 <__aeabi_dsub>
 80181d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80181d4:	465d      	mov	r5, fp
 80181d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181da:	f7e8 fcbd 	bl	8000b58 <__aeabi_d2iz>
 80181de:	4606      	mov	r6, r0
 80181e0:	f7e8 f9a0 	bl	8000524 <__aeabi_i2d>
 80181e4:	4602      	mov	r2, r0
 80181e6:	460b      	mov	r3, r1
 80181e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181ec:	f7e8 f84c 	bl	8000288 <__aeabi_dsub>
 80181f0:	3630      	adds	r6, #48	; 0x30
 80181f2:	f805 6b01 	strb.w	r6, [r5], #1
 80181f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80181fa:	e9cd 0100 	strd	r0, r1, [sp]
 80181fe:	f7e8 fc6d 	bl	8000adc <__aeabi_dcmplt>
 8018202:	2800      	cmp	r0, #0
 8018204:	d163      	bne.n	80182ce <_dtoa_r+0x5de>
 8018206:	e9dd 2300 	ldrd	r2, r3, [sp]
 801820a:	2000      	movs	r0, #0
 801820c:	4937      	ldr	r1, [pc, #220]	; (80182ec <_dtoa_r+0x5fc>)
 801820e:	f7e8 f83b 	bl	8000288 <__aeabi_dsub>
 8018212:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018216:	f7e8 fc61 	bl	8000adc <__aeabi_dcmplt>
 801821a:	2800      	cmp	r0, #0
 801821c:	f040 80b7 	bne.w	801838e <_dtoa_r+0x69e>
 8018220:	eba5 030b 	sub.w	r3, r5, fp
 8018224:	429f      	cmp	r7, r3
 8018226:	f77f af7c 	ble.w	8018122 <_dtoa_r+0x432>
 801822a:	2200      	movs	r2, #0
 801822c:	4b30      	ldr	r3, [pc, #192]	; (80182f0 <_dtoa_r+0x600>)
 801822e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018232:	f7e8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8018236:	2200      	movs	r2, #0
 8018238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801823c:	4b2c      	ldr	r3, [pc, #176]	; (80182f0 <_dtoa_r+0x600>)
 801823e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018242:	f7e8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8018246:	e9cd 0100 	strd	r0, r1, [sp]
 801824a:	e7c4      	b.n	80181d6 <_dtoa_r+0x4e6>
 801824c:	462a      	mov	r2, r5
 801824e:	4633      	mov	r3, r6
 8018250:	f7e8 f9d2 	bl	80005f8 <__aeabi_dmul>
 8018254:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018258:	eb0b 0507 	add.w	r5, fp, r7
 801825c:	465e      	mov	r6, fp
 801825e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018262:	f7e8 fc79 	bl	8000b58 <__aeabi_d2iz>
 8018266:	4607      	mov	r7, r0
 8018268:	f7e8 f95c 	bl	8000524 <__aeabi_i2d>
 801826c:	3730      	adds	r7, #48	; 0x30
 801826e:	4602      	mov	r2, r0
 8018270:	460b      	mov	r3, r1
 8018272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018276:	f7e8 f807 	bl	8000288 <__aeabi_dsub>
 801827a:	f806 7b01 	strb.w	r7, [r6], #1
 801827e:	42ae      	cmp	r6, r5
 8018280:	e9cd 0100 	strd	r0, r1, [sp]
 8018284:	f04f 0200 	mov.w	r2, #0
 8018288:	d126      	bne.n	80182d8 <_dtoa_r+0x5e8>
 801828a:	4b1c      	ldr	r3, [pc, #112]	; (80182fc <_dtoa_r+0x60c>)
 801828c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018290:	f7e7 fffc 	bl	800028c <__adddf3>
 8018294:	4602      	mov	r2, r0
 8018296:	460b      	mov	r3, r1
 8018298:	e9dd 0100 	ldrd	r0, r1, [sp]
 801829c:	f7e8 fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d174      	bne.n	801838e <_dtoa_r+0x69e>
 80182a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80182a8:	2000      	movs	r0, #0
 80182aa:	4914      	ldr	r1, [pc, #80]	; (80182fc <_dtoa_r+0x60c>)
 80182ac:	f7e7 ffec 	bl	8000288 <__aeabi_dsub>
 80182b0:	4602      	mov	r2, r0
 80182b2:	460b      	mov	r3, r1
 80182b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80182b8:	f7e8 fc10 	bl	8000adc <__aeabi_dcmplt>
 80182bc:	2800      	cmp	r0, #0
 80182be:	f43f af30 	beq.w	8018122 <_dtoa_r+0x432>
 80182c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80182c6:	2b30      	cmp	r3, #48	; 0x30
 80182c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80182cc:	d002      	beq.n	80182d4 <_dtoa_r+0x5e4>
 80182ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80182d2:	e04a      	b.n	801836a <_dtoa_r+0x67a>
 80182d4:	4615      	mov	r5, r2
 80182d6:	e7f4      	b.n	80182c2 <_dtoa_r+0x5d2>
 80182d8:	4b05      	ldr	r3, [pc, #20]	; (80182f0 <_dtoa_r+0x600>)
 80182da:	f7e8 f98d 	bl	80005f8 <__aeabi_dmul>
 80182de:	e9cd 0100 	strd	r0, r1, [sp]
 80182e2:	e7bc      	b.n	801825e <_dtoa_r+0x56e>
 80182e4:	0801b808 	.word	0x0801b808
 80182e8:	0801b7e0 	.word	0x0801b7e0
 80182ec:	3ff00000 	.word	0x3ff00000
 80182f0:	40240000 	.word	0x40240000
 80182f4:	401c0000 	.word	0x401c0000
 80182f8:	40140000 	.word	0x40140000
 80182fc:	3fe00000 	.word	0x3fe00000
 8018300:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018304:	465d      	mov	r5, fp
 8018306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801830a:	4630      	mov	r0, r6
 801830c:	4639      	mov	r1, r7
 801830e:	f7e8 fa9d 	bl	800084c <__aeabi_ddiv>
 8018312:	f7e8 fc21 	bl	8000b58 <__aeabi_d2iz>
 8018316:	4680      	mov	r8, r0
 8018318:	f7e8 f904 	bl	8000524 <__aeabi_i2d>
 801831c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018320:	f7e8 f96a 	bl	80005f8 <__aeabi_dmul>
 8018324:	4602      	mov	r2, r0
 8018326:	460b      	mov	r3, r1
 8018328:	4630      	mov	r0, r6
 801832a:	4639      	mov	r1, r7
 801832c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018330:	f7e7 ffaa 	bl	8000288 <__aeabi_dsub>
 8018334:	f805 6b01 	strb.w	r6, [r5], #1
 8018338:	eba5 060b 	sub.w	r6, r5, fp
 801833c:	45b1      	cmp	r9, r6
 801833e:	4602      	mov	r2, r0
 8018340:	460b      	mov	r3, r1
 8018342:	d139      	bne.n	80183b8 <_dtoa_r+0x6c8>
 8018344:	f7e7 ffa2 	bl	800028c <__adddf3>
 8018348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801834c:	4606      	mov	r6, r0
 801834e:	460f      	mov	r7, r1
 8018350:	f7e8 fbe2 	bl	8000b18 <__aeabi_dcmpgt>
 8018354:	b9c8      	cbnz	r0, 801838a <_dtoa_r+0x69a>
 8018356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801835a:	4630      	mov	r0, r6
 801835c:	4639      	mov	r1, r7
 801835e:	f7e8 fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8018362:	b110      	cbz	r0, 801836a <_dtoa_r+0x67a>
 8018364:	f018 0f01 	tst.w	r8, #1
 8018368:	d10f      	bne.n	801838a <_dtoa_r+0x69a>
 801836a:	9904      	ldr	r1, [sp, #16]
 801836c:	4620      	mov	r0, r4
 801836e:	f000 fdf9 	bl	8018f64 <_Bfree>
 8018372:	2300      	movs	r3, #0
 8018374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018376:	702b      	strb	r3, [r5, #0]
 8018378:	f10a 0301 	add.w	r3, sl, #1
 801837c:	6013      	str	r3, [r2, #0]
 801837e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018380:	2b00      	cmp	r3, #0
 8018382:	f000 8241 	beq.w	8018808 <_dtoa_r+0xb18>
 8018386:	601d      	str	r5, [r3, #0]
 8018388:	e23e      	b.n	8018808 <_dtoa_r+0xb18>
 801838a:	f8cd a020 	str.w	sl, [sp, #32]
 801838e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018392:	2a39      	cmp	r2, #57	; 0x39
 8018394:	f105 33ff 	add.w	r3, r5, #4294967295
 8018398:	d108      	bne.n	80183ac <_dtoa_r+0x6bc>
 801839a:	459b      	cmp	fp, r3
 801839c:	d10a      	bne.n	80183b4 <_dtoa_r+0x6c4>
 801839e:	9b08      	ldr	r3, [sp, #32]
 80183a0:	3301      	adds	r3, #1
 80183a2:	9308      	str	r3, [sp, #32]
 80183a4:	2330      	movs	r3, #48	; 0x30
 80183a6:	f88b 3000 	strb.w	r3, [fp]
 80183aa:	465b      	mov	r3, fp
 80183ac:	781a      	ldrb	r2, [r3, #0]
 80183ae:	3201      	adds	r2, #1
 80183b0:	701a      	strb	r2, [r3, #0]
 80183b2:	e78c      	b.n	80182ce <_dtoa_r+0x5de>
 80183b4:	461d      	mov	r5, r3
 80183b6:	e7ea      	b.n	801838e <_dtoa_r+0x69e>
 80183b8:	2200      	movs	r2, #0
 80183ba:	4b9b      	ldr	r3, [pc, #620]	; (8018628 <_dtoa_r+0x938>)
 80183bc:	f7e8 f91c 	bl	80005f8 <__aeabi_dmul>
 80183c0:	2200      	movs	r2, #0
 80183c2:	2300      	movs	r3, #0
 80183c4:	4606      	mov	r6, r0
 80183c6:	460f      	mov	r7, r1
 80183c8:	f7e8 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80183cc:	2800      	cmp	r0, #0
 80183ce:	d09a      	beq.n	8018306 <_dtoa_r+0x616>
 80183d0:	e7cb      	b.n	801836a <_dtoa_r+0x67a>
 80183d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183d4:	2a00      	cmp	r2, #0
 80183d6:	f000 808b 	beq.w	80184f0 <_dtoa_r+0x800>
 80183da:	9a06      	ldr	r2, [sp, #24]
 80183dc:	2a01      	cmp	r2, #1
 80183de:	dc6e      	bgt.n	80184be <_dtoa_r+0x7ce>
 80183e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80183e2:	2a00      	cmp	r2, #0
 80183e4:	d067      	beq.n	80184b6 <_dtoa_r+0x7c6>
 80183e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80183ea:	9f07      	ldr	r7, [sp, #28]
 80183ec:	9d05      	ldr	r5, [sp, #20]
 80183ee:	9a05      	ldr	r2, [sp, #20]
 80183f0:	2101      	movs	r1, #1
 80183f2:	441a      	add	r2, r3
 80183f4:	4620      	mov	r0, r4
 80183f6:	9205      	str	r2, [sp, #20]
 80183f8:	4498      	add	r8, r3
 80183fa:	f000 fe91 	bl	8019120 <__i2b>
 80183fe:	4606      	mov	r6, r0
 8018400:	2d00      	cmp	r5, #0
 8018402:	dd0c      	ble.n	801841e <_dtoa_r+0x72e>
 8018404:	f1b8 0f00 	cmp.w	r8, #0
 8018408:	dd09      	ble.n	801841e <_dtoa_r+0x72e>
 801840a:	4545      	cmp	r5, r8
 801840c:	9a05      	ldr	r2, [sp, #20]
 801840e:	462b      	mov	r3, r5
 8018410:	bfa8      	it	ge
 8018412:	4643      	movge	r3, r8
 8018414:	1ad2      	subs	r2, r2, r3
 8018416:	9205      	str	r2, [sp, #20]
 8018418:	1aed      	subs	r5, r5, r3
 801841a:	eba8 0803 	sub.w	r8, r8, r3
 801841e:	9b07      	ldr	r3, [sp, #28]
 8018420:	b1eb      	cbz	r3, 801845e <_dtoa_r+0x76e>
 8018422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018424:	2b00      	cmp	r3, #0
 8018426:	d067      	beq.n	80184f8 <_dtoa_r+0x808>
 8018428:	b18f      	cbz	r7, 801844e <_dtoa_r+0x75e>
 801842a:	4631      	mov	r1, r6
 801842c:	463a      	mov	r2, r7
 801842e:	4620      	mov	r0, r4
 8018430:	f000 ff16 	bl	8019260 <__pow5mult>
 8018434:	9a04      	ldr	r2, [sp, #16]
 8018436:	4601      	mov	r1, r0
 8018438:	4606      	mov	r6, r0
 801843a:	4620      	mov	r0, r4
 801843c:	f000 fe79 	bl	8019132 <__multiply>
 8018440:	9904      	ldr	r1, [sp, #16]
 8018442:	9008      	str	r0, [sp, #32]
 8018444:	4620      	mov	r0, r4
 8018446:	f000 fd8d 	bl	8018f64 <_Bfree>
 801844a:	9b08      	ldr	r3, [sp, #32]
 801844c:	9304      	str	r3, [sp, #16]
 801844e:	9b07      	ldr	r3, [sp, #28]
 8018450:	1bda      	subs	r2, r3, r7
 8018452:	d004      	beq.n	801845e <_dtoa_r+0x76e>
 8018454:	9904      	ldr	r1, [sp, #16]
 8018456:	4620      	mov	r0, r4
 8018458:	f000 ff02 	bl	8019260 <__pow5mult>
 801845c:	9004      	str	r0, [sp, #16]
 801845e:	2101      	movs	r1, #1
 8018460:	4620      	mov	r0, r4
 8018462:	f000 fe5d 	bl	8019120 <__i2b>
 8018466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018468:	4607      	mov	r7, r0
 801846a:	2b00      	cmp	r3, #0
 801846c:	f000 81d0 	beq.w	8018810 <_dtoa_r+0xb20>
 8018470:	461a      	mov	r2, r3
 8018472:	4601      	mov	r1, r0
 8018474:	4620      	mov	r0, r4
 8018476:	f000 fef3 	bl	8019260 <__pow5mult>
 801847a:	9b06      	ldr	r3, [sp, #24]
 801847c:	2b01      	cmp	r3, #1
 801847e:	4607      	mov	r7, r0
 8018480:	dc40      	bgt.n	8018504 <_dtoa_r+0x814>
 8018482:	9b00      	ldr	r3, [sp, #0]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d139      	bne.n	80184fc <_dtoa_r+0x80c>
 8018488:	9b01      	ldr	r3, [sp, #4]
 801848a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801848e:	2b00      	cmp	r3, #0
 8018490:	d136      	bne.n	8018500 <_dtoa_r+0x810>
 8018492:	9b01      	ldr	r3, [sp, #4]
 8018494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018498:	0d1b      	lsrs	r3, r3, #20
 801849a:	051b      	lsls	r3, r3, #20
 801849c:	b12b      	cbz	r3, 80184aa <_dtoa_r+0x7ba>
 801849e:	9b05      	ldr	r3, [sp, #20]
 80184a0:	3301      	adds	r3, #1
 80184a2:	9305      	str	r3, [sp, #20]
 80184a4:	f108 0801 	add.w	r8, r8, #1
 80184a8:	2301      	movs	r3, #1
 80184aa:	9307      	str	r3, [sp, #28]
 80184ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d12a      	bne.n	8018508 <_dtoa_r+0x818>
 80184b2:	2001      	movs	r0, #1
 80184b4:	e030      	b.n	8018518 <_dtoa_r+0x828>
 80184b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80184bc:	e795      	b.n	80183ea <_dtoa_r+0x6fa>
 80184be:	9b07      	ldr	r3, [sp, #28]
 80184c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80184c4:	42bb      	cmp	r3, r7
 80184c6:	bfbf      	itttt	lt
 80184c8:	9b07      	ldrlt	r3, [sp, #28]
 80184ca:	9707      	strlt	r7, [sp, #28]
 80184cc:	1afa      	sublt	r2, r7, r3
 80184ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80184d0:	bfbb      	ittet	lt
 80184d2:	189b      	addlt	r3, r3, r2
 80184d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80184d6:	1bdf      	subge	r7, r3, r7
 80184d8:	2700      	movlt	r7, #0
 80184da:	f1b9 0f00 	cmp.w	r9, #0
 80184de:	bfb5      	itete	lt
 80184e0:	9b05      	ldrlt	r3, [sp, #20]
 80184e2:	9d05      	ldrge	r5, [sp, #20]
 80184e4:	eba3 0509 	sublt.w	r5, r3, r9
 80184e8:	464b      	movge	r3, r9
 80184ea:	bfb8      	it	lt
 80184ec:	2300      	movlt	r3, #0
 80184ee:	e77e      	b.n	80183ee <_dtoa_r+0x6fe>
 80184f0:	9f07      	ldr	r7, [sp, #28]
 80184f2:	9d05      	ldr	r5, [sp, #20]
 80184f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80184f6:	e783      	b.n	8018400 <_dtoa_r+0x710>
 80184f8:	9a07      	ldr	r2, [sp, #28]
 80184fa:	e7ab      	b.n	8018454 <_dtoa_r+0x764>
 80184fc:	2300      	movs	r3, #0
 80184fe:	e7d4      	b.n	80184aa <_dtoa_r+0x7ba>
 8018500:	9b00      	ldr	r3, [sp, #0]
 8018502:	e7d2      	b.n	80184aa <_dtoa_r+0x7ba>
 8018504:	2300      	movs	r3, #0
 8018506:	9307      	str	r3, [sp, #28]
 8018508:	693b      	ldr	r3, [r7, #16]
 801850a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801850e:	6918      	ldr	r0, [r3, #16]
 8018510:	f000 fdb8 	bl	8019084 <__hi0bits>
 8018514:	f1c0 0020 	rsb	r0, r0, #32
 8018518:	4440      	add	r0, r8
 801851a:	f010 001f 	ands.w	r0, r0, #31
 801851e:	d047      	beq.n	80185b0 <_dtoa_r+0x8c0>
 8018520:	f1c0 0320 	rsb	r3, r0, #32
 8018524:	2b04      	cmp	r3, #4
 8018526:	dd3b      	ble.n	80185a0 <_dtoa_r+0x8b0>
 8018528:	9b05      	ldr	r3, [sp, #20]
 801852a:	f1c0 001c 	rsb	r0, r0, #28
 801852e:	4403      	add	r3, r0
 8018530:	9305      	str	r3, [sp, #20]
 8018532:	4405      	add	r5, r0
 8018534:	4480      	add	r8, r0
 8018536:	9b05      	ldr	r3, [sp, #20]
 8018538:	2b00      	cmp	r3, #0
 801853a:	dd05      	ble.n	8018548 <_dtoa_r+0x858>
 801853c:	461a      	mov	r2, r3
 801853e:	9904      	ldr	r1, [sp, #16]
 8018540:	4620      	mov	r0, r4
 8018542:	f000 fedb 	bl	80192fc <__lshift>
 8018546:	9004      	str	r0, [sp, #16]
 8018548:	f1b8 0f00 	cmp.w	r8, #0
 801854c:	dd05      	ble.n	801855a <_dtoa_r+0x86a>
 801854e:	4639      	mov	r1, r7
 8018550:	4642      	mov	r2, r8
 8018552:	4620      	mov	r0, r4
 8018554:	f000 fed2 	bl	80192fc <__lshift>
 8018558:	4607      	mov	r7, r0
 801855a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801855c:	b353      	cbz	r3, 80185b4 <_dtoa_r+0x8c4>
 801855e:	4639      	mov	r1, r7
 8018560:	9804      	ldr	r0, [sp, #16]
 8018562:	f000 ff1f 	bl	80193a4 <__mcmp>
 8018566:	2800      	cmp	r0, #0
 8018568:	da24      	bge.n	80185b4 <_dtoa_r+0x8c4>
 801856a:	2300      	movs	r3, #0
 801856c:	220a      	movs	r2, #10
 801856e:	9904      	ldr	r1, [sp, #16]
 8018570:	4620      	mov	r0, r4
 8018572:	f000 fd0e 	bl	8018f92 <__multadd>
 8018576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018578:	9004      	str	r0, [sp, #16]
 801857a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801857e:	2b00      	cmp	r3, #0
 8018580:	f000 814d 	beq.w	801881e <_dtoa_r+0xb2e>
 8018584:	2300      	movs	r3, #0
 8018586:	4631      	mov	r1, r6
 8018588:	220a      	movs	r2, #10
 801858a:	4620      	mov	r0, r4
 801858c:	f000 fd01 	bl	8018f92 <__multadd>
 8018590:	9b02      	ldr	r3, [sp, #8]
 8018592:	2b00      	cmp	r3, #0
 8018594:	4606      	mov	r6, r0
 8018596:	dc4f      	bgt.n	8018638 <_dtoa_r+0x948>
 8018598:	9b06      	ldr	r3, [sp, #24]
 801859a:	2b02      	cmp	r3, #2
 801859c:	dd4c      	ble.n	8018638 <_dtoa_r+0x948>
 801859e:	e011      	b.n	80185c4 <_dtoa_r+0x8d4>
 80185a0:	d0c9      	beq.n	8018536 <_dtoa_r+0x846>
 80185a2:	9a05      	ldr	r2, [sp, #20]
 80185a4:	331c      	adds	r3, #28
 80185a6:	441a      	add	r2, r3
 80185a8:	9205      	str	r2, [sp, #20]
 80185aa:	441d      	add	r5, r3
 80185ac:	4498      	add	r8, r3
 80185ae:	e7c2      	b.n	8018536 <_dtoa_r+0x846>
 80185b0:	4603      	mov	r3, r0
 80185b2:	e7f6      	b.n	80185a2 <_dtoa_r+0x8b2>
 80185b4:	f1b9 0f00 	cmp.w	r9, #0
 80185b8:	dc38      	bgt.n	801862c <_dtoa_r+0x93c>
 80185ba:	9b06      	ldr	r3, [sp, #24]
 80185bc:	2b02      	cmp	r3, #2
 80185be:	dd35      	ble.n	801862c <_dtoa_r+0x93c>
 80185c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80185c4:	9b02      	ldr	r3, [sp, #8]
 80185c6:	b963      	cbnz	r3, 80185e2 <_dtoa_r+0x8f2>
 80185c8:	4639      	mov	r1, r7
 80185ca:	2205      	movs	r2, #5
 80185cc:	4620      	mov	r0, r4
 80185ce:	f000 fce0 	bl	8018f92 <__multadd>
 80185d2:	4601      	mov	r1, r0
 80185d4:	4607      	mov	r7, r0
 80185d6:	9804      	ldr	r0, [sp, #16]
 80185d8:	f000 fee4 	bl	80193a4 <__mcmp>
 80185dc:	2800      	cmp	r0, #0
 80185de:	f73f adcc 	bgt.w	801817a <_dtoa_r+0x48a>
 80185e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185e4:	465d      	mov	r5, fp
 80185e6:	ea6f 0a03 	mvn.w	sl, r3
 80185ea:	f04f 0900 	mov.w	r9, #0
 80185ee:	4639      	mov	r1, r7
 80185f0:	4620      	mov	r0, r4
 80185f2:	f000 fcb7 	bl	8018f64 <_Bfree>
 80185f6:	2e00      	cmp	r6, #0
 80185f8:	f43f aeb7 	beq.w	801836a <_dtoa_r+0x67a>
 80185fc:	f1b9 0f00 	cmp.w	r9, #0
 8018600:	d005      	beq.n	801860e <_dtoa_r+0x91e>
 8018602:	45b1      	cmp	r9, r6
 8018604:	d003      	beq.n	801860e <_dtoa_r+0x91e>
 8018606:	4649      	mov	r1, r9
 8018608:	4620      	mov	r0, r4
 801860a:	f000 fcab 	bl	8018f64 <_Bfree>
 801860e:	4631      	mov	r1, r6
 8018610:	4620      	mov	r0, r4
 8018612:	f000 fca7 	bl	8018f64 <_Bfree>
 8018616:	e6a8      	b.n	801836a <_dtoa_r+0x67a>
 8018618:	2700      	movs	r7, #0
 801861a:	463e      	mov	r6, r7
 801861c:	e7e1      	b.n	80185e2 <_dtoa_r+0x8f2>
 801861e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018622:	463e      	mov	r6, r7
 8018624:	e5a9      	b.n	801817a <_dtoa_r+0x48a>
 8018626:	bf00      	nop
 8018628:	40240000 	.word	0x40240000
 801862c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801862e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018632:	2b00      	cmp	r3, #0
 8018634:	f000 80fa 	beq.w	801882c <_dtoa_r+0xb3c>
 8018638:	2d00      	cmp	r5, #0
 801863a:	dd05      	ble.n	8018648 <_dtoa_r+0x958>
 801863c:	4631      	mov	r1, r6
 801863e:	462a      	mov	r2, r5
 8018640:	4620      	mov	r0, r4
 8018642:	f000 fe5b 	bl	80192fc <__lshift>
 8018646:	4606      	mov	r6, r0
 8018648:	9b07      	ldr	r3, [sp, #28]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d04c      	beq.n	80186e8 <_dtoa_r+0x9f8>
 801864e:	6871      	ldr	r1, [r6, #4]
 8018650:	4620      	mov	r0, r4
 8018652:	f000 fc53 	bl	8018efc <_Balloc>
 8018656:	6932      	ldr	r2, [r6, #16]
 8018658:	3202      	adds	r2, #2
 801865a:	4605      	mov	r5, r0
 801865c:	0092      	lsls	r2, r2, #2
 801865e:	f106 010c 	add.w	r1, r6, #12
 8018662:	300c      	adds	r0, #12
 8018664:	f7fd fc8a 	bl	8015f7c <memcpy>
 8018668:	2201      	movs	r2, #1
 801866a:	4629      	mov	r1, r5
 801866c:	4620      	mov	r0, r4
 801866e:	f000 fe45 	bl	80192fc <__lshift>
 8018672:	9b00      	ldr	r3, [sp, #0]
 8018674:	f8cd b014 	str.w	fp, [sp, #20]
 8018678:	f003 0301 	and.w	r3, r3, #1
 801867c:	46b1      	mov	r9, r6
 801867e:	9307      	str	r3, [sp, #28]
 8018680:	4606      	mov	r6, r0
 8018682:	4639      	mov	r1, r7
 8018684:	9804      	ldr	r0, [sp, #16]
 8018686:	f7ff faa5 	bl	8017bd4 <quorem>
 801868a:	4649      	mov	r1, r9
 801868c:	4605      	mov	r5, r0
 801868e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018692:	9804      	ldr	r0, [sp, #16]
 8018694:	f000 fe86 	bl	80193a4 <__mcmp>
 8018698:	4632      	mov	r2, r6
 801869a:	9000      	str	r0, [sp, #0]
 801869c:	4639      	mov	r1, r7
 801869e:	4620      	mov	r0, r4
 80186a0:	f000 fe9a 	bl	80193d8 <__mdiff>
 80186a4:	68c3      	ldr	r3, [r0, #12]
 80186a6:	4602      	mov	r2, r0
 80186a8:	bb03      	cbnz	r3, 80186ec <_dtoa_r+0x9fc>
 80186aa:	4601      	mov	r1, r0
 80186ac:	9008      	str	r0, [sp, #32]
 80186ae:	9804      	ldr	r0, [sp, #16]
 80186b0:	f000 fe78 	bl	80193a4 <__mcmp>
 80186b4:	9a08      	ldr	r2, [sp, #32]
 80186b6:	4603      	mov	r3, r0
 80186b8:	4611      	mov	r1, r2
 80186ba:	4620      	mov	r0, r4
 80186bc:	9308      	str	r3, [sp, #32]
 80186be:	f000 fc51 	bl	8018f64 <_Bfree>
 80186c2:	9b08      	ldr	r3, [sp, #32]
 80186c4:	b9a3      	cbnz	r3, 80186f0 <_dtoa_r+0xa00>
 80186c6:	9a06      	ldr	r2, [sp, #24]
 80186c8:	b992      	cbnz	r2, 80186f0 <_dtoa_r+0xa00>
 80186ca:	9a07      	ldr	r2, [sp, #28]
 80186cc:	b982      	cbnz	r2, 80186f0 <_dtoa_r+0xa00>
 80186ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80186d2:	d029      	beq.n	8018728 <_dtoa_r+0xa38>
 80186d4:	9b00      	ldr	r3, [sp, #0]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	dd01      	ble.n	80186de <_dtoa_r+0x9ee>
 80186da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80186de:	9b05      	ldr	r3, [sp, #20]
 80186e0:	1c5d      	adds	r5, r3, #1
 80186e2:	f883 8000 	strb.w	r8, [r3]
 80186e6:	e782      	b.n	80185ee <_dtoa_r+0x8fe>
 80186e8:	4630      	mov	r0, r6
 80186ea:	e7c2      	b.n	8018672 <_dtoa_r+0x982>
 80186ec:	2301      	movs	r3, #1
 80186ee:	e7e3      	b.n	80186b8 <_dtoa_r+0x9c8>
 80186f0:	9a00      	ldr	r2, [sp, #0]
 80186f2:	2a00      	cmp	r2, #0
 80186f4:	db04      	blt.n	8018700 <_dtoa_r+0xa10>
 80186f6:	d125      	bne.n	8018744 <_dtoa_r+0xa54>
 80186f8:	9a06      	ldr	r2, [sp, #24]
 80186fa:	bb1a      	cbnz	r2, 8018744 <_dtoa_r+0xa54>
 80186fc:	9a07      	ldr	r2, [sp, #28]
 80186fe:	bb0a      	cbnz	r2, 8018744 <_dtoa_r+0xa54>
 8018700:	2b00      	cmp	r3, #0
 8018702:	ddec      	ble.n	80186de <_dtoa_r+0x9ee>
 8018704:	2201      	movs	r2, #1
 8018706:	9904      	ldr	r1, [sp, #16]
 8018708:	4620      	mov	r0, r4
 801870a:	f000 fdf7 	bl	80192fc <__lshift>
 801870e:	4639      	mov	r1, r7
 8018710:	9004      	str	r0, [sp, #16]
 8018712:	f000 fe47 	bl	80193a4 <__mcmp>
 8018716:	2800      	cmp	r0, #0
 8018718:	dc03      	bgt.n	8018722 <_dtoa_r+0xa32>
 801871a:	d1e0      	bne.n	80186de <_dtoa_r+0x9ee>
 801871c:	f018 0f01 	tst.w	r8, #1
 8018720:	d0dd      	beq.n	80186de <_dtoa_r+0x9ee>
 8018722:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018726:	d1d8      	bne.n	80186da <_dtoa_r+0x9ea>
 8018728:	9b05      	ldr	r3, [sp, #20]
 801872a:	9a05      	ldr	r2, [sp, #20]
 801872c:	1c5d      	adds	r5, r3, #1
 801872e:	2339      	movs	r3, #57	; 0x39
 8018730:	7013      	strb	r3, [r2, #0]
 8018732:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018736:	2b39      	cmp	r3, #57	; 0x39
 8018738:	f105 32ff 	add.w	r2, r5, #4294967295
 801873c:	d04f      	beq.n	80187de <_dtoa_r+0xaee>
 801873e:	3301      	adds	r3, #1
 8018740:	7013      	strb	r3, [r2, #0]
 8018742:	e754      	b.n	80185ee <_dtoa_r+0x8fe>
 8018744:	9a05      	ldr	r2, [sp, #20]
 8018746:	2b00      	cmp	r3, #0
 8018748:	f102 0501 	add.w	r5, r2, #1
 801874c:	dd06      	ble.n	801875c <_dtoa_r+0xa6c>
 801874e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018752:	d0e9      	beq.n	8018728 <_dtoa_r+0xa38>
 8018754:	f108 0801 	add.w	r8, r8, #1
 8018758:	9b05      	ldr	r3, [sp, #20]
 801875a:	e7c2      	b.n	80186e2 <_dtoa_r+0x9f2>
 801875c:	9a02      	ldr	r2, [sp, #8]
 801875e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018762:	eba5 030b 	sub.w	r3, r5, fp
 8018766:	4293      	cmp	r3, r2
 8018768:	d021      	beq.n	80187ae <_dtoa_r+0xabe>
 801876a:	2300      	movs	r3, #0
 801876c:	220a      	movs	r2, #10
 801876e:	9904      	ldr	r1, [sp, #16]
 8018770:	4620      	mov	r0, r4
 8018772:	f000 fc0e 	bl	8018f92 <__multadd>
 8018776:	45b1      	cmp	r9, r6
 8018778:	9004      	str	r0, [sp, #16]
 801877a:	f04f 0300 	mov.w	r3, #0
 801877e:	f04f 020a 	mov.w	r2, #10
 8018782:	4649      	mov	r1, r9
 8018784:	4620      	mov	r0, r4
 8018786:	d105      	bne.n	8018794 <_dtoa_r+0xaa4>
 8018788:	f000 fc03 	bl	8018f92 <__multadd>
 801878c:	4681      	mov	r9, r0
 801878e:	4606      	mov	r6, r0
 8018790:	9505      	str	r5, [sp, #20]
 8018792:	e776      	b.n	8018682 <_dtoa_r+0x992>
 8018794:	f000 fbfd 	bl	8018f92 <__multadd>
 8018798:	4631      	mov	r1, r6
 801879a:	4681      	mov	r9, r0
 801879c:	2300      	movs	r3, #0
 801879e:	220a      	movs	r2, #10
 80187a0:	4620      	mov	r0, r4
 80187a2:	f000 fbf6 	bl	8018f92 <__multadd>
 80187a6:	4606      	mov	r6, r0
 80187a8:	e7f2      	b.n	8018790 <_dtoa_r+0xaa0>
 80187aa:	f04f 0900 	mov.w	r9, #0
 80187ae:	2201      	movs	r2, #1
 80187b0:	9904      	ldr	r1, [sp, #16]
 80187b2:	4620      	mov	r0, r4
 80187b4:	f000 fda2 	bl	80192fc <__lshift>
 80187b8:	4639      	mov	r1, r7
 80187ba:	9004      	str	r0, [sp, #16]
 80187bc:	f000 fdf2 	bl	80193a4 <__mcmp>
 80187c0:	2800      	cmp	r0, #0
 80187c2:	dcb6      	bgt.n	8018732 <_dtoa_r+0xa42>
 80187c4:	d102      	bne.n	80187cc <_dtoa_r+0xadc>
 80187c6:	f018 0f01 	tst.w	r8, #1
 80187ca:	d1b2      	bne.n	8018732 <_dtoa_r+0xa42>
 80187cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80187d0:	2b30      	cmp	r3, #48	; 0x30
 80187d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80187d6:	f47f af0a 	bne.w	80185ee <_dtoa_r+0x8fe>
 80187da:	4615      	mov	r5, r2
 80187dc:	e7f6      	b.n	80187cc <_dtoa_r+0xadc>
 80187de:	4593      	cmp	fp, r2
 80187e0:	d105      	bne.n	80187ee <_dtoa_r+0xafe>
 80187e2:	2331      	movs	r3, #49	; 0x31
 80187e4:	f10a 0a01 	add.w	sl, sl, #1
 80187e8:	f88b 3000 	strb.w	r3, [fp]
 80187ec:	e6ff      	b.n	80185ee <_dtoa_r+0x8fe>
 80187ee:	4615      	mov	r5, r2
 80187f0:	e79f      	b.n	8018732 <_dtoa_r+0xa42>
 80187f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018858 <_dtoa_r+0xb68>
 80187f6:	e007      	b.n	8018808 <_dtoa_r+0xb18>
 80187f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80187fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 801885c <_dtoa_r+0xb6c>
 80187fe:	b11b      	cbz	r3, 8018808 <_dtoa_r+0xb18>
 8018800:	f10b 0308 	add.w	r3, fp, #8
 8018804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018806:	6013      	str	r3, [r2, #0]
 8018808:	4658      	mov	r0, fp
 801880a:	b017      	add	sp, #92	; 0x5c
 801880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018810:	9b06      	ldr	r3, [sp, #24]
 8018812:	2b01      	cmp	r3, #1
 8018814:	f77f ae35 	ble.w	8018482 <_dtoa_r+0x792>
 8018818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801881a:	9307      	str	r3, [sp, #28]
 801881c:	e649      	b.n	80184b2 <_dtoa_r+0x7c2>
 801881e:	9b02      	ldr	r3, [sp, #8]
 8018820:	2b00      	cmp	r3, #0
 8018822:	dc03      	bgt.n	801882c <_dtoa_r+0xb3c>
 8018824:	9b06      	ldr	r3, [sp, #24]
 8018826:	2b02      	cmp	r3, #2
 8018828:	f73f aecc 	bgt.w	80185c4 <_dtoa_r+0x8d4>
 801882c:	465d      	mov	r5, fp
 801882e:	4639      	mov	r1, r7
 8018830:	9804      	ldr	r0, [sp, #16]
 8018832:	f7ff f9cf 	bl	8017bd4 <quorem>
 8018836:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801883a:	f805 8b01 	strb.w	r8, [r5], #1
 801883e:	9a02      	ldr	r2, [sp, #8]
 8018840:	eba5 030b 	sub.w	r3, r5, fp
 8018844:	429a      	cmp	r2, r3
 8018846:	ddb0      	ble.n	80187aa <_dtoa_r+0xaba>
 8018848:	2300      	movs	r3, #0
 801884a:	220a      	movs	r2, #10
 801884c:	9904      	ldr	r1, [sp, #16]
 801884e:	4620      	mov	r0, r4
 8018850:	f000 fb9f 	bl	8018f92 <__multadd>
 8018854:	9004      	str	r0, [sp, #16]
 8018856:	e7ea      	b.n	801882e <_dtoa_r+0xb3e>
 8018858:	0801b748 	.word	0x0801b748
 801885c:	0801b7c8 	.word	0x0801b7c8

08018860 <rshift>:
 8018860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018862:	6906      	ldr	r6, [r0, #16]
 8018864:	114b      	asrs	r3, r1, #5
 8018866:	429e      	cmp	r6, r3
 8018868:	f100 0414 	add.w	r4, r0, #20
 801886c:	dd30      	ble.n	80188d0 <rshift+0x70>
 801886e:	f011 011f 	ands.w	r1, r1, #31
 8018872:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018876:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801887a:	d108      	bne.n	801888e <rshift+0x2e>
 801887c:	4621      	mov	r1, r4
 801887e:	42b2      	cmp	r2, r6
 8018880:	460b      	mov	r3, r1
 8018882:	d211      	bcs.n	80188a8 <rshift+0x48>
 8018884:	f852 3b04 	ldr.w	r3, [r2], #4
 8018888:	f841 3b04 	str.w	r3, [r1], #4
 801888c:	e7f7      	b.n	801887e <rshift+0x1e>
 801888e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018892:	f1c1 0c20 	rsb	ip, r1, #32
 8018896:	40cd      	lsrs	r5, r1
 8018898:	3204      	adds	r2, #4
 801889a:	4623      	mov	r3, r4
 801889c:	42b2      	cmp	r2, r6
 801889e:	4617      	mov	r7, r2
 80188a0:	d30c      	bcc.n	80188bc <rshift+0x5c>
 80188a2:	601d      	str	r5, [r3, #0]
 80188a4:	b105      	cbz	r5, 80188a8 <rshift+0x48>
 80188a6:	3304      	adds	r3, #4
 80188a8:	1b1a      	subs	r2, r3, r4
 80188aa:	42a3      	cmp	r3, r4
 80188ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80188b0:	bf08      	it	eq
 80188b2:	2300      	moveq	r3, #0
 80188b4:	6102      	str	r2, [r0, #16]
 80188b6:	bf08      	it	eq
 80188b8:	6143      	streq	r3, [r0, #20]
 80188ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188bc:	683f      	ldr	r7, [r7, #0]
 80188be:	fa07 f70c 	lsl.w	r7, r7, ip
 80188c2:	433d      	orrs	r5, r7
 80188c4:	f843 5b04 	str.w	r5, [r3], #4
 80188c8:	f852 5b04 	ldr.w	r5, [r2], #4
 80188cc:	40cd      	lsrs	r5, r1
 80188ce:	e7e5      	b.n	801889c <rshift+0x3c>
 80188d0:	4623      	mov	r3, r4
 80188d2:	e7e9      	b.n	80188a8 <rshift+0x48>

080188d4 <__hexdig_fun>:
 80188d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80188d8:	2b09      	cmp	r3, #9
 80188da:	d802      	bhi.n	80188e2 <__hexdig_fun+0xe>
 80188dc:	3820      	subs	r0, #32
 80188de:	b2c0      	uxtb	r0, r0
 80188e0:	4770      	bx	lr
 80188e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80188e6:	2b05      	cmp	r3, #5
 80188e8:	d801      	bhi.n	80188ee <__hexdig_fun+0x1a>
 80188ea:	3847      	subs	r0, #71	; 0x47
 80188ec:	e7f7      	b.n	80188de <__hexdig_fun+0xa>
 80188ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80188f2:	2b05      	cmp	r3, #5
 80188f4:	d801      	bhi.n	80188fa <__hexdig_fun+0x26>
 80188f6:	3827      	subs	r0, #39	; 0x27
 80188f8:	e7f1      	b.n	80188de <__hexdig_fun+0xa>
 80188fa:	2000      	movs	r0, #0
 80188fc:	4770      	bx	lr

080188fe <__gethex>:
 80188fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018902:	b08b      	sub	sp, #44	; 0x2c
 8018904:	468a      	mov	sl, r1
 8018906:	9002      	str	r0, [sp, #8]
 8018908:	9816      	ldr	r0, [sp, #88]	; 0x58
 801890a:	9306      	str	r3, [sp, #24]
 801890c:	4690      	mov	r8, r2
 801890e:	f000 fad0 	bl	8018eb2 <__localeconv_l>
 8018912:	6803      	ldr	r3, [r0, #0]
 8018914:	9303      	str	r3, [sp, #12]
 8018916:	4618      	mov	r0, r3
 8018918:	f7e7 fc5a 	bl	80001d0 <strlen>
 801891c:	9b03      	ldr	r3, [sp, #12]
 801891e:	9001      	str	r0, [sp, #4]
 8018920:	4403      	add	r3, r0
 8018922:	f04f 0b00 	mov.w	fp, #0
 8018926:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801892a:	9307      	str	r3, [sp, #28]
 801892c:	f8da 3000 	ldr.w	r3, [sl]
 8018930:	3302      	adds	r3, #2
 8018932:	461f      	mov	r7, r3
 8018934:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018938:	2830      	cmp	r0, #48	; 0x30
 801893a:	d06c      	beq.n	8018a16 <__gethex+0x118>
 801893c:	f7ff ffca 	bl	80188d4 <__hexdig_fun>
 8018940:	4604      	mov	r4, r0
 8018942:	2800      	cmp	r0, #0
 8018944:	d16a      	bne.n	8018a1c <__gethex+0x11e>
 8018946:	9a01      	ldr	r2, [sp, #4]
 8018948:	9903      	ldr	r1, [sp, #12]
 801894a:	4638      	mov	r0, r7
 801894c:	f001 f836 	bl	80199bc <strncmp>
 8018950:	2800      	cmp	r0, #0
 8018952:	d166      	bne.n	8018a22 <__gethex+0x124>
 8018954:	9b01      	ldr	r3, [sp, #4]
 8018956:	5cf8      	ldrb	r0, [r7, r3]
 8018958:	18fe      	adds	r6, r7, r3
 801895a:	f7ff ffbb 	bl	80188d4 <__hexdig_fun>
 801895e:	2800      	cmp	r0, #0
 8018960:	d062      	beq.n	8018a28 <__gethex+0x12a>
 8018962:	4633      	mov	r3, r6
 8018964:	7818      	ldrb	r0, [r3, #0]
 8018966:	2830      	cmp	r0, #48	; 0x30
 8018968:	461f      	mov	r7, r3
 801896a:	f103 0301 	add.w	r3, r3, #1
 801896e:	d0f9      	beq.n	8018964 <__gethex+0x66>
 8018970:	f7ff ffb0 	bl	80188d4 <__hexdig_fun>
 8018974:	fab0 f580 	clz	r5, r0
 8018978:	096d      	lsrs	r5, r5, #5
 801897a:	4634      	mov	r4, r6
 801897c:	f04f 0b01 	mov.w	fp, #1
 8018980:	463a      	mov	r2, r7
 8018982:	4616      	mov	r6, r2
 8018984:	3201      	adds	r2, #1
 8018986:	7830      	ldrb	r0, [r6, #0]
 8018988:	f7ff ffa4 	bl	80188d4 <__hexdig_fun>
 801898c:	2800      	cmp	r0, #0
 801898e:	d1f8      	bne.n	8018982 <__gethex+0x84>
 8018990:	9a01      	ldr	r2, [sp, #4]
 8018992:	9903      	ldr	r1, [sp, #12]
 8018994:	4630      	mov	r0, r6
 8018996:	f001 f811 	bl	80199bc <strncmp>
 801899a:	b950      	cbnz	r0, 80189b2 <__gethex+0xb4>
 801899c:	b954      	cbnz	r4, 80189b4 <__gethex+0xb6>
 801899e:	9b01      	ldr	r3, [sp, #4]
 80189a0:	18f4      	adds	r4, r6, r3
 80189a2:	4622      	mov	r2, r4
 80189a4:	4616      	mov	r6, r2
 80189a6:	3201      	adds	r2, #1
 80189a8:	7830      	ldrb	r0, [r6, #0]
 80189aa:	f7ff ff93 	bl	80188d4 <__hexdig_fun>
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d1f8      	bne.n	80189a4 <__gethex+0xa6>
 80189b2:	b10c      	cbz	r4, 80189b8 <__gethex+0xba>
 80189b4:	1ba4      	subs	r4, r4, r6
 80189b6:	00a4      	lsls	r4, r4, #2
 80189b8:	7833      	ldrb	r3, [r6, #0]
 80189ba:	2b50      	cmp	r3, #80	; 0x50
 80189bc:	d001      	beq.n	80189c2 <__gethex+0xc4>
 80189be:	2b70      	cmp	r3, #112	; 0x70
 80189c0:	d140      	bne.n	8018a44 <__gethex+0x146>
 80189c2:	7873      	ldrb	r3, [r6, #1]
 80189c4:	2b2b      	cmp	r3, #43	; 0x2b
 80189c6:	d031      	beq.n	8018a2c <__gethex+0x12e>
 80189c8:	2b2d      	cmp	r3, #45	; 0x2d
 80189ca:	d033      	beq.n	8018a34 <__gethex+0x136>
 80189cc:	1c71      	adds	r1, r6, #1
 80189ce:	f04f 0900 	mov.w	r9, #0
 80189d2:	7808      	ldrb	r0, [r1, #0]
 80189d4:	f7ff ff7e 	bl	80188d4 <__hexdig_fun>
 80189d8:	1e43      	subs	r3, r0, #1
 80189da:	b2db      	uxtb	r3, r3
 80189dc:	2b18      	cmp	r3, #24
 80189de:	d831      	bhi.n	8018a44 <__gethex+0x146>
 80189e0:	f1a0 0210 	sub.w	r2, r0, #16
 80189e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80189e8:	f7ff ff74 	bl	80188d4 <__hexdig_fun>
 80189ec:	1e43      	subs	r3, r0, #1
 80189ee:	b2db      	uxtb	r3, r3
 80189f0:	2b18      	cmp	r3, #24
 80189f2:	d922      	bls.n	8018a3a <__gethex+0x13c>
 80189f4:	f1b9 0f00 	cmp.w	r9, #0
 80189f8:	d000      	beq.n	80189fc <__gethex+0xfe>
 80189fa:	4252      	negs	r2, r2
 80189fc:	4414      	add	r4, r2
 80189fe:	f8ca 1000 	str.w	r1, [sl]
 8018a02:	b30d      	cbz	r5, 8018a48 <__gethex+0x14a>
 8018a04:	f1bb 0f00 	cmp.w	fp, #0
 8018a08:	bf0c      	ite	eq
 8018a0a:	2706      	moveq	r7, #6
 8018a0c:	2700      	movne	r7, #0
 8018a0e:	4638      	mov	r0, r7
 8018a10:	b00b      	add	sp, #44	; 0x2c
 8018a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a16:	f10b 0b01 	add.w	fp, fp, #1
 8018a1a:	e78a      	b.n	8018932 <__gethex+0x34>
 8018a1c:	2500      	movs	r5, #0
 8018a1e:	462c      	mov	r4, r5
 8018a20:	e7ae      	b.n	8018980 <__gethex+0x82>
 8018a22:	463e      	mov	r6, r7
 8018a24:	2501      	movs	r5, #1
 8018a26:	e7c7      	b.n	80189b8 <__gethex+0xba>
 8018a28:	4604      	mov	r4, r0
 8018a2a:	e7fb      	b.n	8018a24 <__gethex+0x126>
 8018a2c:	f04f 0900 	mov.w	r9, #0
 8018a30:	1cb1      	adds	r1, r6, #2
 8018a32:	e7ce      	b.n	80189d2 <__gethex+0xd4>
 8018a34:	f04f 0901 	mov.w	r9, #1
 8018a38:	e7fa      	b.n	8018a30 <__gethex+0x132>
 8018a3a:	230a      	movs	r3, #10
 8018a3c:	fb03 0202 	mla	r2, r3, r2, r0
 8018a40:	3a10      	subs	r2, #16
 8018a42:	e7cf      	b.n	80189e4 <__gethex+0xe6>
 8018a44:	4631      	mov	r1, r6
 8018a46:	e7da      	b.n	80189fe <__gethex+0x100>
 8018a48:	1bf3      	subs	r3, r6, r7
 8018a4a:	3b01      	subs	r3, #1
 8018a4c:	4629      	mov	r1, r5
 8018a4e:	2b07      	cmp	r3, #7
 8018a50:	dc49      	bgt.n	8018ae6 <__gethex+0x1e8>
 8018a52:	9802      	ldr	r0, [sp, #8]
 8018a54:	f000 fa52 	bl	8018efc <_Balloc>
 8018a58:	9b01      	ldr	r3, [sp, #4]
 8018a5a:	f100 0914 	add.w	r9, r0, #20
 8018a5e:	f04f 0b00 	mov.w	fp, #0
 8018a62:	f1c3 0301 	rsb	r3, r3, #1
 8018a66:	4605      	mov	r5, r0
 8018a68:	f8cd 9010 	str.w	r9, [sp, #16]
 8018a6c:	46da      	mov	sl, fp
 8018a6e:	9308      	str	r3, [sp, #32]
 8018a70:	42b7      	cmp	r7, r6
 8018a72:	d33b      	bcc.n	8018aec <__gethex+0x1ee>
 8018a74:	9804      	ldr	r0, [sp, #16]
 8018a76:	f840 ab04 	str.w	sl, [r0], #4
 8018a7a:	eba0 0009 	sub.w	r0, r0, r9
 8018a7e:	1080      	asrs	r0, r0, #2
 8018a80:	6128      	str	r0, [r5, #16]
 8018a82:	0147      	lsls	r7, r0, #5
 8018a84:	4650      	mov	r0, sl
 8018a86:	f000 fafd 	bl	8019084 <__hi0bits>
 8018a8a:	f8d8 6000 	ldr.w	r6, [r8]
 8018a8e:	1a3f      	subs	r7, r7, r0
 8018a90:	42b7      	cmp	r7, r6
 8018a92:	dd64      	ble.n	8018b5e <__gethex+0x260>
 8018a94:	1bbf      	subs	r7, r7, r6
 8018a96:	4639      	mov	r1, r7
 8018a98:	4628      	mov	r0, r5
 8018a9a:	f000 fe0d 	bl	80196b8 <__any_on>
 8018a9e:	4682      	mov	sl, r0
 8018aa0:	b178      	cbz	r0, 8018ac2 <__gethex+0x1c4>
 8018aa2:	1e7b      	subs	r3, r7, #1
 8018aa4:	1159      	asrs	r1, r3, #5
 8018aa6:	f003 021f 	and.w	r2, r3, #31
 8018aaa:	f04f 0a01 	mov.w	sl, #1
 8018aae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018ab2:	fa0a f202 	lsl.w	r2, sl, r2
 8018ab6:	420a      	tst	r2, r1
 8018ab8:	d003      	beq.n	8018ac2 <__gethex+0x1c4>
 8018aba:	4553      	cmp	r3, sl
 8018abc:	dc46      	bgt.n	8018b4c <__gethex+0x24e>
 8018abe:	f04f 0a02 	mov.w	sl, #2
 8018ac2:	4639      	mov	r1, r7
 8018ac4:	4628      	mov	r0, r5
 8018ac6:	f7ff fecb 	bl	8018860 <rshift>
 8018aca:	443c      	add	r4, r7
 8018acc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018ad0:	42a3      	cmp	r3, r4
 8018ad2:	da52      	bge.n	8018b7a <__gethex+0x27c>
 8018ad4:	4629      	mov	r1, r5
 8018ad6:	9802      	ldr	r0, [sp, #8]
 8018ad8:	f000 fa44 	bl	8018f64 <_Bfree>
 8018adc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ade:	2300      	movs	r3, #0
 8018ae0:	6013      	str	r3, [r2, #0]
 8018ae2:	27a3      	movs	r7, #163	; 0xa3
 8018ae4:	e793      	b.n	8018a0e <__gethex+0x110>
 8018ae6:	3101      	adds	r1, #1
 8018ae8:	105b      	asrs	r3, r3, #1
 8018aea:	e7b0      	b.n	8018a4e <__gethex+0x150>
 8018aec:	1e73      	subs	r3, r6, #1
 8018aee:	9305      	str	r3, [sp, #20]
 8018af0:	9a07      	ldr	r2, [sp, #28]
 8018af2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018af6:	4293      	cmp	r3, r2
 8018af8:	d018      	beq.n	8018b2c <__gethex+0x22e>
 8018afa:	f1bb 0f20 	cmp.w	fp, #32
 8018afe:	d107      	bne.n	8018b10 <__gethex+0x212>
 8018b00:	9b04      	ldr	r3, [sp, #16]
 8018b02:	f8c3 a000 	str.w	sl, [r3]
 8018b06:	3304      	adds	r3, #4
 8018b08:	f04f 0a00 	mov.w	sl, #0
 8018b0c:	9304      	str	r3, [sp, #16]
 8018b0e:	46d3      	mov	fp, sl
 8018b10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018b14:	f7ff fede 	bl	80188d4 <__hexdig_fun>
 8018b18:	f000 000f 	and.w	r0, r0, #15
 8018b1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018b20:	ea4a 0a00 	orr.w	sl, sl, r0
 8018b24:	f10b 0b04 	add.w	fp, fp, #4
 8018b28:	9b05      	ldr	r3, [sp, #20]
 8018b2a:	e00d      	b.n	8018b48 <__gethex+0x24a>
 8018b2c:	9b05      	ldr	r3, [sp, #20]
 8018b2e:	9a08      	ldr	r2, [sp, #32]
 8018b30:	4413      	add	r3, r2
 8018b32:	42bb      	cmp	r3, r7
 8018b34:	d3e1      	bcc.n	8018afa <__gethex+0x1fc>
 8018b36:	4618      	mov	r0, r3
 8018b38:	9a01      	ldr	r2, [sp, #4]
 8018b3a:	9903      	ldr	r1, [sp, #12]
 8018b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b3e:	f000 ff3d 	bl	80199bc <strncmp>
 8018b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b44:	2800      	cmp	r0, #0
 8018b46:	d1d8      	bne.n	8018afa <__gethex+0x1fc>
 8018b48:	461e      	mov	r6, r3
 8018b4a:	e791      	b.n	8018a70 <__gethex+0x172>
 8018b4c:	1eb9      	subs	r1, r7, #2
 8018b4e:	4628      	mov	r0, r5
 8018b50:	f000 fdb2 	bl	80196b8 <__any_on>
 8018b54:	2800      	cmp	r0, #0
 8018b56:	d0b2      	beq.n	8018abe <__gethex+0x1c0>
 8018b58:	f04f 0a03 	mov.w	sl, #3
 8018b5c:	e7b1      	b.n	8018ac2 <__gethex+0x1c4>
 8018b5e:	da09      	bge.n	8018b74 <__gethex+0x276>
 8018b60:	1bf7      	subs	r7, r6, r7
 8018b62:	4629      	mov	r1, r5
 8018b64:	463a      	mov	r2, r7
 8018b66:	9802      	ldr	r0, [sp, #8]
 8018b68:	f000 fbc8 	bl	80192fc <__lshift>
 8018b6c:	1be4      	subs	r4, r4, r7
 8018b6e:	4605      	mov	r5, r0
 8018b70:	f100 0914 	add.w	r9, r0, #20
 8018b74:	f04f 0a00 	mov.w	sl, #0
 8018b78:	e7a8      	b.n	8018acc <__gethex+0x1ce>
 8018b7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018b7e:	42a0      	cmp	r0, r4
 8018b80:	dd6a      	ble.n	8018c58 <__gethex+0x35a>
 8018b82:	1b04      	subs	r4, r0, r4
 8018b84:	42a6      	cmp	r6, r4
 8018b86:	dc2e      	bgt.n	8018be6 <__gethex+0x2e8>
 8018b88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b8c:	2b02      	cmp	r3, #2
 8018b8e:	d022      	beq.n	8018bd6 <__gethex+0x2d8>
 8018b90:	2b03      	cmp	r3, #3
 8018b92:	d024      	beq.n	8018bde <__gethex+0x2e0>
 8018b94:	2b01      	cmp	r3, #1
 8018b96:	d115      	bne.n	8018bc4 <__gethex+0x2c6>
 8018b98:	42a6      	cmp	r6, r4
 8018b9a:	d113      	bne.n	8018bc4 <__gethex+0x2c6>
 8018b9c:	2e01      	cmp	r6, #1
 8018b9e:	dc0b      	bgt.n	8018bb8 <__gethex+0x2ba>
 8018ba0:	9a06      	ldr	r2, [sp, #24]
 8018ba2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018ba6:	6013      	str	r3, [r2, #0]
 8018ba8:	2301      	movs	r3, #1
 8018baa:	612b      	str	r3, [r5, #16]
 8018bac:	f8c9 3000 	str.w	r3, [r9]
 8018bb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018bb2:	2762      	movs	r7, #98	; 0x62
 8018bb4:	601d      	str	r5, [r3, #0]
 8018bb6:	e72a      	b.n	8018a0e <__gethex+0x110>
 8018bb8:	1e71      	subs	r1, r6, #1
 8018bba:	4628      	mov	r0, r5
 8018bbc:	f000 fd7c 	bl	80196b8 <__any_on>
 8018bc0:	2800      	cmp	r0, #0
 8018bc2:	d1ed      	bne.n	8018ba0 <__gethex+0x2a2>
 8018bc4:	4629      	mov	r1, r5
 8018bc6:	9802      	ldr	r0, [sp, #8]
 8018bc8:	f000 f9cc 	bl	8018f64 <_Bfree>
 8018bcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018bce:	2300      	movs	r3, #0
 8018bd0:	6013      	str	r3, [r2, #0]
 8018bd2:	2750      	movs	r7, #80	; 0x50
 8018bd4:	e71b      	b.n	8018a0e <__gethex+0x110>
 8018bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d0e1      	beq.n	8018ba0 <__gethex+0x2a2>
 8018bdc:	e7f2      	b.n	8018bc4 <__gethex+0x2c6>
 8018bde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d1dd      	bne.n	8018ba0 <__gethex+0x2a2>
 8018be4:	e7ee      	b.n	8018bc4 <__gethex+0x2c6>
 8018be6:	1e67      	subs	r7, r4, #1
 8018be8:	f1ba 0f00 	cmp.w	sl, #0
 8018bec:	d131      	bne.n	8018c52 <__gethex+0x354>
 8018bee:	b127      	cbz	r7, 8018bfa <__gethex+0x2fc>
 8018bf0:	4639      	mov	r1, r7
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	f000 fd60 	bl	80196b8 <__any_on>
 8018bf8:	4682      	mov	sl, r0
 8018bfa:	117a      	asrs	r2, r7, #5
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	f007 071f 	and.w	r7, r7, #31
 8018c02:	fa03 f707 	lsl.w	r7, r3, r7
 8018c06:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018c0a:	4621      	mov	r1, r4
 8018c0c:	421f      	tst	r7, r3
 8018c0e:	4628      	mov	r0, r5
 8018c10:	bf18      	it	ne
 8018c12:	f04a 0a02 	orrne.w	sl, sl, #2
 8018c16:	1b36      	subs	r6, r6, r4
 8018c18:	f7ff fe22 	bl	8018860 <rshift>
 8018c1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018c20:	2702      	movs	r7, #2
 8018c22:	f1ba 0f00 	cmp.w	sl, #0
 8018c26:	d048      	beq.n	8018cba <__gethex+0x3bc>
 8018c28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018c2c:	2b02      	cmp	r3, #2
 8018c2e:	d015      	beq.n	8018c5c <__gethex+0x35e>
 8018c30:	2b03      	cmp	r3, #3
 8018c32:	d017      	beq.n	8018c64 <__gethex+0x366>
 8018c34:	2b01      	cmp	r3, #1
 8018c36:	d109      	bne.n	8018c4c <__gethex+0x34e>
 8018c38:	f01a 0f02 	tst.w	sl, #2
 8018c3c:	d006      	beq.n	8018c4c <__gethex+0x34e>
 8018c3e:	f8d9 3000 	ldr.w	r3, [r9]
 8018c42:	ea4a 0a03 	orr.w	sl, sl, r3
 8018c46:	f01a 0f01 	tst.w	sl, #1
 8018c4a:	d10e      	bne.n	8018c6a <__gethex+0x36c>
 8018c4c:	f047 0710 	orr.w	r7, r7, #16
 8018c50:	e033      	b.n	8018cba <__gethex+0x3bc>
 8018c52:	f04f 0a01 	mov.w	sl, #1
 8018c56:	e7d0      	b.n	8018bfa <__gethex+0x2fc>
 8018c58:	2701      	movs	r7, #1
 8018c5a:	e7e2      	b.n	8018c22 <__gethex+0x324>
 8018c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c5e:	f1c3 0301 	rsb	r3, r3, #1
 8018c62:	9315      	str	r3, [sp, #84]	; 0x54
 8018c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d0f0      	beq.n	8018c4c <__gethex+0x34e>
 8018c6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018c6e:	f105 0314 	add.w	r3, r5, #20
 8018c72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018c76:	eb03 010a 	add.w	r1, r3, sl
 8018c7a:	f04f 0c00 	mov.w	ip, #0
 8018c7e:	4618      	mov	r0, r3
 8018c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018c88:	d01c      	beq.n	8018cc4 <__gethex+0x3c6>
 8018c8a:	3201      	adds	r2, #1
 8018c8c:	6002      	str	r2, [r0, #0]
 8018c8e:	2f02      	cmp	r7, #2
 8018c90:	f105 0314 	add.w	r3, r5, #20
 8018c94:	d138      	bne.n	8018d08 <__gethex+0x40a>
 8018c96:	f8d8 2000 	ldr.w	r2, [r8]
 8018c9a:	3a01      	subs	r2, #1
 8018c9c:	42b2      	cmp	r2, r6
 8018c9e:	d10a      	bne.n	8018cb6 <__gethex+0x3b8>
 8018ca0:	1171      	asrs	r1, r6, #5
 8018ca2:	2201      	movs	r2, #1
 8018ca4:	f006 061f 	and.w	r6, r6, #31
 8018ca8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018cac:	fa02 f606 	lsl.w	r6, r2, r6
 8018cb0:	421e      	tst	r6, r3
 8018cb2:	bf18      	it	ne
 8018cb4:	4617      	movne	r7, r2
 8018cb6:	f047 0720 	orr.w	r7, r7, #32
 8018cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018cbc:	601d      	str	r5, [r3, #0]
 8018cbe:	9b06      	ldr	r3, [sp, #24]
 8018cc0:	601c      	str	r4, [r3, #0]
 8018cc2:	e6a4      	b.n	8018a0e <__gethex+0x110>
 8018cc4:	4299      	cmp	r1, r3
 8018cc6:	f843 cc04 	str.w	ip, [r3, #-4]
 8018cca:	d8d8      	bhi.n	8018c7e <__gethex+0x380>
 8018ccc:	68ab      	ldr	r3, [r5, #8]
 8018cce:	4599      	cmp	r9, r3
 8018cd0:	db12      	blt.n	8018cf8 <__gethex+0x3fa>
 8018cd2:	6869      	ldr	r1, [r5, #4]
 8018cd4:	9802      	ldr	r0, [sp, #8]
 8018cd6:	3101      	adds	r1, #1
 8018cd8:	f000 f910 	bl	8018efc <_Balloc>
 8018cdc:	692a      	ldr	r2, [r5, #16]
 8018cde:	3202      	adds	r2, #2
 8018ce0:	f105 010c 	add.w	r1, r5, #12
 8018ce4:	4683      	mov	fp, r0
 8018ce6:	0092      	lsls	r2, r2, #2
 8018ce8:	300c      	adds	r0, #12
 8018cea:	f7fd f947 	bl	8015f7c <memcpy>
 8018cee:	4629      	mov	r1, r5
 8018cf0:	9802      	ldr	r0, [sp, #8]
 8018cf2:	f000 f937 	bl	8018f64 <_Bfree>
 8018cf6:	465d      	mov	r5, fp
 8018cf8:	692b      	ldr	r3, [r5, #16]
 8018cfa:	1c5a      	adds	r2, r3, #1
 8018cfc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018d00:	612a      	str	r2, [r5, #16]
 8018d02:	2201      	movs	r2, #1
 8018d04:	615a      	str	r2, [r3, #20]
 8018d06:	e7c2      	b.n	8018c8e <__gethex+0x390>
 8018d08:	692a      	ldr	r2, [r5, #16]
 8018d0a:	454a      	cmp	r2, r9
 8018d0c:	dd0b      	ble.n	8018d26 <__gethex+0x428>
 8018d0e:	2101      	movs	r1, #1
 8018d10:	4628      	mov	r0, r5
 8018d12:	f7ff fda5 	bl	8018860 <rshift>
 8018d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d1a:	3401      	adds	r4, #1
 8018d1c:	42a3      	cmp	r3, r4
 8018d1e:	f6ff aed9 	blt.w	8018ad4 <__gethex+0x1d6>
 8018d22:	2701      	movs	r7, #1
 8018d24:	e7c7      	b.n	8018cb6 <__gethex+0x3b8>
 8018d26:	f016 061f 	ands.w	r6, r6, #31
 8018d2a:	d0fa      	beq.n	8018d22 <__gethex+0x424>
 8018d2c:	449a      	add	sl, r3
 8018d2e:	f1c6 0620 	rsb	r6, r6, #32
 8018d32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018d36:	f000 f9a5 	bl	8019084 <__hi0bits>
 8018d3a:	42b0      	cmp	r0, r6
 8018d3c:	dbe7      	blt.n	8018d0e <__gethex+0x410>
 8018d3e:	e7f0      	b.n	8018d22 <__gethex+0x424>

08018d40 <L_shift>:
 8018d40:	f1c2 0208 	rsb	r2, r2, #8
 8018d44:	0092      	lsls	r2, r2, #2
 8018d46:	b570      	push	{r4, r5, r6, lr}
 8018d48:	f1c2 0620 	rsb	r6, r2, #32
 8018d4c:	6843      	ldr	r3, [r0, #4]
 8018d4e:	6804      	ldr	r4, [r0, #0]
 8018d50:	fa03 f506 	lsl.w	r5, r3, r6
 8018d54:	432c      	orrs	r4, r5
 8018d56:	40d3      	lsrs	r3, r2
 8018d58:	6004      	str	r4, [r0, #0]
 8018d5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8018d5e:	4288      	cmp	r0, r1
 8018d60:	d3f4      	bcc.n	8018d4c <L_shift+0xc>
 8018d62:	bd70      	pop	{r4, r5, r6, pc}

08018d64 <__match>:
 8018d64:	b530      	push	{r4, r5, lr}
 8018d66:	6803      	ldr	r3, [r0, #0]
 8018d68:	3301      	adds	r3, #1
 8018d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d6e:	b914      	cbnz	r4, 8018d76 <__match+0x12>
 8018d70:	6003      	str	r3, [r0, #0]
 8018d72:	2001      	movs	r0, #1
 8018d74:	bd30      	pop	{r4, r5, pc}
 8018d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018d7e:	2d19      	cmp	r5, #25
 8018d80:	bf98      	it	ls
 8018d82:	3220      	addls	r2, #32
 8018d84:	42a2      	cmp	r2, r4
 8018d86:	d0f0      	beq.n	8018d6a <__match+0x6>
 8018d88:	2000      	movs	r0, #0
 8018d8a:	e7f3      	b.n	8018d74 <__match+0x10>

08018d8c <__hexnan>:
 8018d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d90:	680b      	ldr	r3, [r1, #0]
 8018d92:	6801      	ldr	r1, [r0, #0]
 8018d94:	115f      	asrs	r7, r3, #5
 8018d96:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018d9a:	f013 031f 	ands.w	r3, r3, #31
 8018d9e:	b087      	sub	sp, #28
 8018da0:	bf18      	it	ne
 8018da2:	3704      	addne	r7, #4
 8018da4:	2500      	movs	r5, #0
 8018da6:	1f3e      	subs	r6, r7, #4
 8018da8:	4682      	mov	sl, r0
 8018daa:	4690      	mov	r8, r2
 8018dac:	9301      	str	r3, [sp, #4]
 8018dae:	f847 5c04 	str.w	r5, [r7, #-4]
 8018db2:	46b1      	mov	r9, r6
 8018db4:	4634      	mov	r4, r6
 8018db6:	9502      	str	r5, [sp, #8]
 8018db8:	46ab      	mov	fp, r5
 8018dba:	784a      	ldrb	r2, [r1, #1]
 8018dbc:	1c4b      	adds	r3, r1, #1
 8018dbe:	9303      	str	r3, [sp, #12]
 8018dc0:	b342      	cbz	r2, 8018e14 <__hexnan+0x88>
 8018dc2:	4610      	mov	r0, r2
 8018dc4:	9105      	str	r1, [sp, #20]
 8018dc6:	9204      	str	r2, [sp, #16]
 8018dc8:	f7ff fd84 	bl	80188d4 <__hexdig_fun>
 8018dcc:	2800      	cmp	r0, #0
 8018dce:	d143      	bne.n	8018e58 <__hexnan+0xcc>
 8018dd0:	9a04      	ldr	r2, [sp, #16]
 8018dd2:	9905      	ldr	r1, [sp, #20]
 8018dd4:	2a20      	cmp	r2, #32
 8018dd6:	d818      	bhi.n	8018e0a <__hexnan+0x7e>
 8018dd8:	9b02      	ldr	r3, [sp, #8]
 8018dda:	459b      	cmp	fp, r3
 8018ddc:	dd13      	ble.n	8018e06 <__hexnan+0x7a>
 8018dde:	454c      	cmp	r4, r9
 8018de0:	d206      	bcs.n	8018df0 <__hexnan+0x64>
 8018de2:	2d07      	cmp	r5, #7
 8018de4:	dc04      	bgt.n	8018df0 <__hexnan+0x64>
 8018de6:	462a      	mov	r2, r5
 8018de8:	4649      	mov	r1, r9
 8018dea:	4620      	mov	r0, r4
 8018dec:	f7ff ffa8 	bl	8018d40 <L_shift>
 8018df0:	4544      	cmp	r4, r8
 8018df2:	d944      	bls.n	8018e7e <__hexnan+0xf2>
 8018df4:	2300      	movs	r3, #0
 8018df6:	f1a4 0904 	sub.w	r9, r4, #4
 8018dfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8018dfe:	f8cd b008 	str.w	fp, [sp, #8]
 8018e02:	464c      	mov	r4, r9
 8018e04:	461d      	mov	r5, r3
 8018e06:	9903      	ldr	r1, [sp, #12]
 8018e08:	e7d7      	b.n	8018dba <__hexnan+0x2e>
 8018e0a:	2a29      	cmp	r2, #41	; 0x29
 8018e0c:	d14a      	bne.n	8018ea4 <__hexnan+0x118>
 8018e0e:	3102      	adds	r1, #2
 8018e10:	f8ca 1000 	str.w	r1, [sl]
 8018e14:	f1bb 0f00 	cmp.w	fp, #0
 8018e18:	d044      	beq.n	8018ea4 <__hexnan+0x118>
 8018e1a:	454c      	cmp	r4, r9
 8018e1c:	d206      	bcs.n	8018e2c <__hexnan+0xa0>
 8018e1e:	2d07      	cmp	r5, #7
 8018e20:	dc04      	bgt.n	8018e2c <__hexnan+0xa0>
 8018e22:	462a      	mov	r2, r5
 8018e24:	4649      	mov	r1, r9
 8018e26:	4620      	mov	r0, r4
 8018e28:	f7ff ff8a 	bl	8018d40 <L_shift>
 8018e2c:	4544      	cmp	r4, r8
 8018e2e:	d928      	bls.n	8018e82 <__hexnan+0xf6>
 8018e30:	4643      	mov	r3, r8
 8018e32:	f854 2b04 	ldr.w	r2, [r4], #4
 8018e36:	f843 2b04 	str.w	r2, [r3], #4
 8018e3a:	42a6      	cmp	r6, r4
 8018e3c:	d2f9      	bcs.n	8018e32 <__hexnan+0xa6>
 8018e3e:	2200      	movs	r2, #0
 8018e40:	f843 2b04 	str.w	r2, [r3], #4
 8018e44:	429e      	cmp	r6, r3
 8018e46:	d2fb      	bcs.n	8018e40 <__hexnan+0xb4>
 8018e48:	6833      	ldr	r3, [r6, #0]
 8018e4a:	b91b      	cbnz	r3, 8018e54 <__hexnan+0xc8>
 8018e4c:	4546      	cmp	r6, r8
 8018e4e:	d127      	bne.n	8018ea0 <__hexnan+0x114>
 8018e50:	2301      	movs	r3, #1
 8018e52:	6033      	str	r3, [r6, #0]
 8018e54:	2005      	movs	r0, #5
 8018e56:	e026      	b.n	8018ea6 <__hexnan+0x11a>
 8018e58:	3501      	adds	r5, #1
 8018e5a:	2d08      	cmp	r5, #8
 8018e5c:	f10b 0b01 	add.w	fp, fp, #1
 8018e60:	dd06      	ble.n	8018e70 <__hexnan+0xe4>
 8018e62:	4544      	cmp	r4, r8
 8018e64:	d9cf      	bls.n	8018e06 <__hexnan+0x7a>
 8018e66:	2300      	movs	r3, #0
 8018e68:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e6c:	2501      	movs	r5, #1
 8018e6e:	3c04      	subs	r4, #4
 8018e70:	6822      	ldr	r2, [r4, #0]
 8018e72:	f000 000f 	and.w	r0, r0, #15
 8018e76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018e7a:	6020      	str	r0, [r4, #0]
 8018e7c:	e7c3      	b.n	8018e06 <__hexnan+0x7a>
 8018e7e:	2508      	movs	r5, #8
 8018e80:	e7c1      	b.n	8018e06 <__hexnan+0x7a>
 8018e82:	9b01      	ldr	r3, [sp, #4]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d0df      	beq.n	8018e48 <__hexnan+0xbc>
 8018e88:	f04f 32ff 	mov.w	r2, #4294967295
 8018e8c:	f1c3 0320 	rsb	r3, r3, #32
 8018e90:	fa22 f303 	lsr.w	r3, r2, r3
 8018e94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018e98:	401a      	ands	r2, r3
 8018e9a:	f847 2c04 	str.w	r2, [r7, #-4]
 8018e9e:	e7d3      	b.n	8018e48 <__hexnan+0xbc>
 8018ea0:	3e04      	subs	r6, #4
 8018ea2:	e7d1      	b.n	8018e48 <__hexnan+0xbc>
 8018ea4:	2004      	movs	r0, #4
 8018ea6:	b007      	add	sp, #28
 8018ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018eac <__locale_ctype_ptr_l>:
 8018eac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018eb0:	4770      	bx	lr

08018eb2 <__localeconv_l>:
 8018eb2:	30f0      	adds	r0, #240	; 0xf0
 8018eb4:	4770      	bx	lr
	...

08018eb8 <_localeconv_r>:
 8018eb8:	4b04      	ldr	r3, [pc, #16]	; (8018ecc <_localeconv_r+0x14>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	6a18      	ldr	r0, [r3, #32]
 8018ebe:	4b04      	ldr	r3, [pc, #16]	; (8018ed0 <_localeconv_r+0x18>)
 8018ec0:	2800      	cmp	r0, #0
 8018ec2:	bf08      	it	eq
 8018ec4:	4618      	moveq	r0, r3
 8018ec6:	30f0      	adds	r0, #240	; 0xf0
 8018ec8:	4770      	bx	lr
 8018eca:	bf00      	nop
 8018ecc:	200009ac 	.word	0x200009ac
 8018ed0:	20000a10 	.word	0x20000a10

08018ed4 <__ascii_mbtowc>:
 8018ed4:	b082      	sub	sp, #8
 8018ed6:	b901      	cbnz	r1, 8018eda <__ascii_mbtowc+0x6>
 8018ed8:	a901      	add	r1, sp, #4
 8018eda:	b142      	cbz	r2, 8018eee <__ascii_mbtowc+0x1a>
 8018edc:	b14b      	cbz	r3, 8018ef2 <__ascii_mbtowc+0x1e>
 8018ede:	7813      	ldrb	r3, [r2, #0]
 8018ee0:	600b      	str	r3, [r1, #0]
 8018ee2:	7812      	ldrb	r2, [r2, #0]
 8018ee4:	1c10      	adds	r0, r2, #0
 8018ee6:	bf18      	it	ne
 8018ee8:	2001      	movne	r0, #1
 8018eea:	b002      	add	sp, #8
 8018eec:	4770      	bx	lr
 8018eee:	4610      	mov	r0, r2
 8018ef0:	e7fb      	b.n	8018eea <__ascii_mbtowc+0x16>
 8018ef2:	f06f 0001 	mvn.w	r0, #1
 8018ef6:	e7f8      	b.n	8018eea <__ascii_mbtowc+0x16>

08018ef8 <__malloc_lock>:
 8018ef8:	4770      	bx	lr

08018efa <__malloc_unlock>:
 8018efa:	4770      	bx	lr

08018efc <_Balloc>:
 8018efc:	b570      	push	{r4, r5, r6, lr}
 8018efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018f00:	4604      	mov	r4, r0
 8018f02:	460e      	mov	r6, r1
 8018f04:	b93d      	cbnz	r5, 8018f16 <_Balloc+0x1a>
 8018f06:	2010      	movs	r0, #16
 8018f08:	f7fd f828 	bl	8015f5c <malloc>
 8018f0c:	6260      	str	r0, [r4, #36]	; 0x24
 8018f0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018f12:	6005      	str	r5, [r0, #0]
 8018f14:	60c5      	str	r5, [r0, #12]
 8018f16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018f18:	68eb      	ldr	r3, [r5, #12]
 8018f1a:	b183      	cbz	r3, 8018f3e <_Balloc+0x42>
 8018f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f1e:	68db      	ldr	r3, [r3, #12]
 8018f20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018f24:	b9b8      	cbnz	r0, 8018f56 <_Balloc+0x5a>
 8018f26:	2101      	movs	r1, #1
 8018f28:	fa01 f506 	lsl.w	r5, r1, r6
 8018f2c:	1d6a      	adds	r2, r5, #5
 8018f2e:	0092      	lsls	r2, r2, #2
 8018f30:	4620      	mov	r0, r4
 8018f32:	f000 fbe2 	bl	80196fa <_calloc_r>
 8018f36:	b160      	cbz	r0, 8018f52 <_Balloc+0x56>
 8018f38:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018f3c:	e00e      	b.n	8018f5c <_Balloc+0x60>
 8018f3e:	2221      	movs	r2, #33	; 0x21
 8018f40:	2104      	movs	r1, #4
 8018f42:	4620      	mov	r0, r4
 8018f44:	f000 fbd9 	bl	80196fa <_calloc_r>
 8018f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f4a:	60e8      	str	r0, [r5, #12]
 8018f4c:	68db      	ldr	r3, [r3, #12]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d1e4      	bne.n	8018f1c <_Balloc+0x20>
 8018f52:	2000      	movs	r0, #0
 8018f54:	bd70      	pop	{r4, r5, r6, pc}
 8018f56:	6802      	ldr	r2, [r0, #0]
 8018f58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018f62:	e7f7      	b.n	8018f54 <_Balloc+0x58>

08018f64 <_Bfree>:
 8018f64:	b570      	push	{r4, r5, r6, lr}
 8018f66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018f68:	4606      	mov	r6, r0
 8018f6a:	460d      	mov	r5, r1
 8018f6c:	b93c      	cbnz	r4, 8018f7e <_Bfree+0x1a>
 8018f6e:	2010      	movs	r0, #16
 8018f70:	f7fc fff4 	bl	8015f5c <malloc>
 8018f74:	6270      	str	r0, [r6, #36]	; 0x24
 8018f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f7a:	6004      	str	r4, [r0, #0]
 8018f7c:	60c4      	str	r4, [r0, #12]
 8018f7e:	b13d      	cbz	r5, 8018f90 <_Bfree+0x2c>
 8018f80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018f82:	686a      	ldr	r2, [r5, #4]
 8018f84:	68db      	ldr	r3, [r3, #12]
 8018f86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f8a:	6029      	str	r1, [r5, #0]
 8018f8c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018f90:	bd70      	pop	{r4, r5, r6, pc}

08018f92 <__multadd>:
 8018f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f96:	690d      	ldr	r5, [r1, #16]
 8018f98:	461f      	mov	r7, r3
 8018f9a:	4606      	mov	r6, r0
 8018f9c:	460c      	mov	r4, r1
 8018f9e:	f101 0c14 	add.w	ip, r1, #20
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	f8dc 0000 	ldr.w	r0, [ip]
 8018fa8:	b281      	uxth	r1, r0
 8018faa:	fb02 7101 	mla	r1, r2, r1, r7
 8018fae:	0c0f      	lsrs	r7, r1, #16
 8018fb0:	0c00      	lsrs	r0, r0, #16
 8018fb2:	fb02 7000 	mla	r0, r2, r0, r7
 8018fb6:	b289      	uxth	r1, r1
 8018fb8:	3301      	adds	r3, #1
 8018fba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018fbe:	429d      	cmp	r5, r3
 8018fc0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018fc4:	f84c 1b04 	str.w	r1, [ip], #4
 8018fc8:	dcec      	bgt.n	8018fa4 <__multadd+0x12>
 8018fca:	b1d7      	cbz	r7, 8019002 <__multadd+0x70>
 8018fcc:	68a3      	ldr	r3, [r4, #8]
 8018fce:	42ab      	cmp	r3, r5
 8018fd0:	dc12      	bgt.n	8018ff8 <__multadd+0x66>
 8018fd2:	6861      	ldr	r1, [r4, #4]
 8018fd4:	4630      	mov	r0, r6
 8018fd6:	3101      	adds	r1, #1
 8018fd8:	f7ff ff90 	bl	8018efc <_Balloc>
 8018fdc:	6922      	ldr	r2, [r4, #16]
 8018fde:	3202      	adds	r2, #2
 8018fe0:	f104 010c 	add.w	r1, r4, #12
 8018fe4:	4680      	mov	r8, r0
 8018fe6:	0092      	lsls	r2, r2, #2
 8018fe8:	300c      	adds	r0, #12
 8018fea:	f7fc ffc7 	bl	8015f7c <memcpy>
 8018fee:	4621      	mov	r1, r4
 8018ff0:	4630      	mov	r0, r6
 8018ff2:	f7ff ffb7 	bl	8018f64 <_Bfree>
 8018ff6:	4644      	mov	r4, r8
 8018ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018ffc:	3501      	adds	r5, #1
 8018ffe:	615f      	str	r7, [r3, #20]
 8019000:	6125      	str	r5, [r4, #16]
 8019002:	4620      	mov	r0, r4
 8019004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019008 <__s2b>:
 8019008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801900c:	460c      	mov	r4, r1
 801900e:	4615      	mov	r5, r2
 8019010:	461f      	mov	r7, r3
 8019012:	2209      	movs	r2, #9
 8019014:	3308      	adds	r3, #8
 8019016:	4606      	mov	r6, r0
 8019018:	fb93 f3f2 	sdiv	r3, r3, r2
 801901c:	2100      	movs	r1, #0
 801901e:	2201      	movs	r2, #1
 8019020:	429a      	cmp	r2, r3
 8019022:	db20      	blt.n	8019066 <__s2b+0x5e>
 8019024:	4630      	mov	r0, r6
 8019026:	f7ff ff69 	bl	8018efc <_Balloc>
 801902a:	9b08      	ldr	r3, [sp, #32]
 801902c:	6143      	str	r3, [r0, #20]
 801902e:	2d09      	cmp	r5, #9
 8019030:	f04f 0301 	mov.w	r3, #1
 8019034:	6103      	str	r3, [r0, #16]
 8019036:	dd19      	ble.n	801906c <__s2b+0x64>
 8019038:	f104 0809 	add.w	r8, r4, #9
 801903c:	46c1      	mov	r9, r8
 801903e:	442c      	add	r4, r5
 8019040:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019044:	4601      	mov	r1, r0
 8019046:	3b30      	subs	r3, #48	; 0x30
 8019048:	220a      	movs	r2, #10
 801904a:	4630      	mov	r0, r6
 801904c:	f7ff ffa1 	bl	8018f92 <__multadd>
 8019050:	45a1      	cmp	r9, r4
 8019052:	d1f5      	bne.n	8019040 <__s2b+0x38>
 8019054:	eb08 0405 	add.w	r4, r8, r5
 8019058:	3c08      	subs	r4, #8
 801905a:	1b2d      	subs	r5, r5, r4
 801905c:	1963      	adds	r3, r4, r5
 801905e:	42bb      	cmp	r3, r7
 8019060:	db07      	blt.n	8019072 <__s2b+0x6a>
 8019062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019066:	0052      	lsls	r2, r2, #1
 8019068:	3101      	adds	r1, #1
 801906a:	e7d9      	b.n	8019020 <__s2b+0x18>
 801906c:	340a      	adds	r4, #10
 801906e:	2509      	movs	r5, #9
 8019070:	e7f3      	b.n	801905a <__s2b+0x52>
 8019072:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019076:	4601      	mov	r1, r0
 8019078:	3b30      	subs	r3, #48	; 0x30
 801907a:	220a      	movs	r2, #10
 801907c:	4630      	mov	r0, r6
 801907e:	f7ff ff88 	bl	8018f92 <__multadd>
 8019082:	e7eb      	b.n	801905c <__s2b+0x54>

08019084 <__hi0bits>:
 8019084:	0c02      	lsrs	r2, r0, #16
 8019086:	0412      	lsls	r2, r2, #16
 8019088:	4603      	mov	r3, r0
 801908a:	b9b2      	cbnz	r2, 80190ba <__hi0bits+0x36>
 801908c:	0403      	lsls	r3, r0, #16
 801908e:	2010      	movs	r0, #16
 8019090:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019094:	bf04      	itt	eq
 8019096:	021b      	lsleq	r3, r3, #8
 8019098:	3008      	addeq	r0, #8
 801909a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801909e:	bf04      	itt	eq
 80190a0:	011b      	lsleq	r3, r3, #4
 80190a2:	3004      	addeq	r0, #4
 80190a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80190a8:	bf04      	itt	eq
 80190aa:	009b      	lsleq	r3, r3, #2
 80190ac:	3002      	addeq	r0, #2
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	db06      	blt.n	80190c0 <__hi0bits+0x3c>
 80190b2:	005b      	lsls	r3, r3, #1
 80190b4:	d503      	bpl.n	80190be <__hi0bits+0x3a>
 80190b6:	3001      	adds	r0, #1
 80190b8:	4770      	bx	lr
 80190ba:	2000      	movs	r0, #0
 80190bc:	e7e8      	b.n	8019090 <__hi0bits+0xc>
 80190be:	2020      	movs	r0, #32
 80190c0:	4770      	bx	lr

080190c2 <__lo0bits>:
 80190c2:	6803      	ldr	r3, [r0, #0]
 80190c4:	f013 0207 	ands.w	r2, r3, #7
 80190c8:	4601      	mov	r1, r0
 80190ca:	d00b      	beq.n	80190e4 <__lo0bits+0x22>
 80190cc:	07da      	lsls	r2, r3, #31
 80190ce:	d423      	bmi.n	8019118 <__lo0bits+0x56>
 80190d0:	0798      	lsls	r0, r3, #30
 80190d2:	bf49      	itett	mi
 80190d4:	085b      	lsrmi	r3, r3, #1
 80190d6:	089b      	lsrpl	r3, r3, #2
 80190d8:	2001      	movmi	r0, #1
 80190da:	600b      	strmi	r3, [r1, #0]
 80190dc:	bf5c      	itt	pl
 80190de:	600b      	strpl	r3, [r1, #0]
 80190e0:	2002      	movpl	r0, #2
 80190e2:	4770      	bx	lr
 80190e4:	b298      	uxth	r0, r3
 80190e6:	b9a8      	cbnz	r0, 8019114 <__lo0bits+0x52>
 80190e8:	0c1b      	lsrs	r3, r3, #16
 80190ea:	2010      	movs	r0, #16
 80190ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80190f0:	bf04      	itt	eq
 80190f2:	0a1b      	lsreq	r3, r3, #8
 80190f4:	3008      	addeq	r0, #8
 80190f6:	071a      	lsls	r2, r3, #28
 80190f8:	bf04      	itt	eq
 80190fa:	091b      	lsreq	r3, r3, #4
 80190fc:	3004      	addeq	r0, #4
 80190fe:	079a      	lsls	r2, r3, #30
 8019100:	bf04      	itt	eq
 8019102:	089b      	lsreq	r3, r3, #2
 8019104:	3002      	addeq	r0, #2
 8019106:	07da      	lsls	r2, r3, #31
 8019108:	d402      	bmi.n	8019110 <__lo0bits+0x4e>
 801910a:	085b      	lsrs	r3, r3, #1
 801910c:	d006      	beq.n	801911c <__lo0bits+0x5a>
 801910e:	3001      	adds	r0, #1
 8019110:	600b      	str	r3, [r1, #0]
 8019112:	4770      	bx	lr
 8019114:	4610      	mov	r0, r2
 8019116:	e7e9      	b.n	80190ec <__lo0bits+0x2a>
 8019118:	2000      	movs	r0, #0
 801911a:	4770      	bx	lr
 801911c:	2020      	movs	r0, #32
 801911e:	4770      	bx	lr

08019120 <__i2b>:
 8019120:	b510      	push	{r4, lr}
 8019122:	460c      	mov	r4, r1
 8019124:	2101      	movs	r1, #1
 8019126:	f7ff fee9 	bl	8018efc <_Balloc>
 801912a:	2201      	movs	r2, #1
 801912c:	6144      	str	r4, [r0, #20]
 801912e:	6102      	str	r2, [r0, #16]
 8019130:	bd10      	pop	{r4, pc}

08019132 <__multiply>:
 8019132:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019136:	4614      	mov	r4, r2
 8019138:	690a      	ldr	r2, [r1, #16]
 801913a:	6923      	ldr	r3, [r4, #16]
 801913c:	429a      	cmp	r2, r3
 801913e:	bfb8      	it	lt
 8019140:	460b      	movlt	r3, r1
 8019142:	4688      	mov	r8, r1
 8019144:	bfbc      	itt	lt
 8019146:	46a0      	movlt	r8, r4
 8019148:	461c      	movlt	r4, r3
 801914a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801914e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019156:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801915a:	eb07 0609 	add.w	r6, r7, r9
 801915e:	42b3      	cmp	r3, r6
 8019160:	bfb8      	it	lt
 8019162:	3101      	addlt	r1, #1
 8019164:	f7ff feca 	bl	8018efc <_Balloc>
 8019168:	f100 0514 	add.w	r5, r0, #20
 801916c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019170:	462b      	mov	r3, r5
 8019172:	2200      	movs	r2, #0
 8019174:	4573      	cmp	r3, lr
 8019176:	d316      	bcc.n	80191a6 <__multiply+0x74>
 8019178:	f104 0214 	add.w	r2, r4, #20
 801917c:	f108 0114 	add.w	r1, r8, #20
 8019180:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8019184:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019188:	9300      	str	r3, [sp, #0]
 801918a:	9b00      	ldr	r3, [sp, #0]
 801918c:	9201      	str	r2, [sp, #4]
 801918e:	4293      	cmp	r3, r2
 8019190:	d80c      	bhi.n	80191ac <__multiply+0x7a>
 8019192:	2e00      	cmp	r6, #0
 8019194:	dd03      	ble.n	801919e <__multiply+0x6c>
 8019196:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801919a:	2b00      	cmp	r3, #0
 801919c:	d05d      	beq.n	801925a <__multiply+0x128>
 801919e:	6106      	str	r6, [r0, #16]
 80191a0:	b003      	add	sp, #12
 80191a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191a6:	f843 2b04 	str.w	r2, [r3], #4
 80191aa:	e7e3      	b.n	8019174 <__multiply+0x42>
 80191ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80191b0:	f1bb 0f00 	cmp.w	fp, #0
 80191b4:	d023      	beq.n	80191fe <__multiply+0xcc>
 80191b6:	4689      	mov	r9, r1
 80191b8:	46ac      	mov	ip, r5
 80191ba:	f04f 0800 	mov.w	r8, #0
 80191be:	f859 4b04 	ldr.w	r4, [r9], #4
 80191c2:	f8dc a000 	ldr.w	sl, [ip]
 80191c6:	b2a3      	uxth	r3, r4
 80191c8:	fa1f fa8a 	uxth.w	sl, sl
 80191cc:	fb0b a303 	mla	r3, fp, r3, sl
 80191d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80191d4:	f8dc 4000 	ldr.w	r4, [ip]
 80191d8:	4443      	add	r3, r8
 80191da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80191de:	fb0b 840a 	mla	r4, fp, sl, r8
 80191e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80191e6:	46e2      	mov	sl, ip
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80191ee:	454f      	cmp	r7, r9
 80191f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80191f4:	f84a 3b04 	str.w	r3, [sl], #4
 80191f8:	d82b      	bhi.n	8019252 <__multiply+0x120>
 80191fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80191fe:	9b01      	ldr	r3, [sp, #4]
 8019200:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019204:	3204      	adds	r2, #4
 8019206:	f1ba 0f00 	cmp.w	sl, #0
 801920a:	d020      	beq.n	801924e <__multiply+0x11c>
 801920c:	682b      	ldr	r3, [r5, #0]
 801920e:	4689      	mov	r9, r1
 8019210:	46a8      	mov	r8, r5
 8019212:	f04f 0b00 	mov.w	fp, #0
 8019216:	f8b9 c000 	ldrh.w	ip, [r9]
 801921a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801921e:	fb0a 440c 	mla	r4, sl, ip, r4
 8019222:	445c      	add	r4, fp
 8019224:	46c4      	mov	ip, r8
 8019226:	b29b      	uxth	r3, r3
 8019228:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801922c:	f84c 3b04 	str.w	r3, [ip], #4
 8019230:	f859 3b04 	ldr.w	r3, [r9], #4
 8019234:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8019238:	0c1b      	lsrs	r3, r3, #16
 801923a:	fb0a b303 	mla	r3, sl, r3, fp
 801923e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019242:	454f      	cmp	r7, r9
 8019244:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8019248:	d805      	bhi.n	8019256 <__multiply+0x124>
 801924a:	f8c8 3004 	str.w	r3, [r8, #4]
 801924e:	3504      	adds	r5, #4
 8019250:	e79b      	b.n	801918a <__multiply+0x58>
 8019252:	46d4      	mov	ip, sl
 8019254:	e7b3      	b.n	80191be <__multiply+0x8c>
 8019256:	46e0      	mov	r8, ip
 8019258:	e7dd      	b.n	8019216 <__multiply+0xe4>
 801925a:	3e01      	subs	r6, #1
 801925c:	e799      	b.n	8019192 <__multiply+0x60>
	...

08019260 <__pow5mult>:
 8019260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019264:	4615      	mov	r5, r2
 8019266:	f012 0203 	ands.w	r2, r2, #3
 801926a:	4606      	mov	r6, r0
 801926c:	460f      	mov	r7, r1
 801926e:	d007      	beq.n	8019280 <__pow5mult+0x20>
 8019270:	3a01      	subs	r2, #1
 8019272:	4c21      	ldr	r4, [pc, #132]	; (80192f8 <__pow5mult+0x98>)
 8019274:	2300      	movs	r3, #0
 8019276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801927a:	f7ff fe8a 	bl	8018f92 <__multadd>
 801927e:	4607      	mov	r7, r0
 8019280:	10ad      	asrs	r5, r5, #2
 8019282:	d035      	beq.n	80192f0 <__pow5mult+0x90>
 8019284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019286:	b93c      	cbnz	r4, 8019298 <__pow5mult+0x38>
 8019288:	2010      	movs	r0, #16
 801928a:	f7fc fe67 	bl	8015f5c <malloc>
 801928e:	6270      	str	r0, [r6, #36]	; 0x24
 8019290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019294:	6004      	str	r4, [r0, #0]
 8019296:	60c4      	str	r4, [r0, #12]
 8019298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801929c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80192a0:	b94c      	cbnz	r4, 80192b6 <__pow5mult+0x56>
 80192a2:	f240 2171 	movw	r1, #625	; 0x271
 80192a6:	4630      	mov	r0, r6
 80192a8:	f7ff ff3a 	bl	8019120 <__i2b>
 80192ac:	2300      	movs	r3, #0
 80192ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80192b2:	4604      	mov	r4, r0
 80192b4:	6003      	str	r3, [r0, #0]
 80192b6:	f04f 0800 	mov.w	r8, #0
 80192ba:	07eb      	lsls	r3, r5, #31
 80192bc:	d50a      	bpl.n	80192d4 <__pow5mult+0x74>
 80192be:	4639      	mov	r1, r7
 80192c0:	4622      	mov	r2, r4
 80192c2:	4630      	mov	r0, r6
 80192c4:	f7ff ff35 	bl	8019132 <__multiply>
 80192c8:	4639      	mov	r1, r7
 80192ca:	4681      	mov	r9, r0
 80192cc:	4630      	mov	r0, r6
 80192ce:	f7ff fe49 	bl	8018f64 <_Bfree>
 80192d2:	464f      	mov	r7, r9
 80192d4:	106d      	asrs	r5, r5, #1
 80192d6:	d00b      	beq.n	80192f0 <__pow5mult+0x90>
 80192d8:	6820      	ldr	r0, [r4, #0]
 80192da:	b938      	cbnz	r0, 80192ec <__pow5mult+0x8c>
 80192dc:	4622      	mov	r2, r4
 80192de:	4621      	mov	r1, r4
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7ff ff26 	bl	8019132 <__multiply>
 80192e6:	6020      	str	r0, [r4, #0]
 80192e8:	f8c0 8000 	str.w	r8, [r0]
 80192ec:	4604      	mov	r4, r0
 80192ee:	e7e4      	b.n	80192ba <__pow5mult+0x5a>
 80192f0:	4638      	mov	r0, r7
 80192f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192f6:	bf00      	nop
 80192f8:	0801b8d0 	.word	0x0801b8d0

080192fc <__lshift>:
 80192fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019300:	460c      	mov	r4, r1
 8019302:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019306:	6923      	ldr	r3, [r4, #16]
 8019308:	6849      	ldr	r1, [r1, #4]
 801930a:	eb0a 0903 	add.w	r9, sl, r3
 801930e:	68a3      	ldr	r3, [r4, #8]
 8019310:	4607      	mov	r7, r0
 8019312:	4616      	mov	r6, r2
 8019314:	f109 0501 	add.w	r5, r9, #1
 8019318:	42ab      	cmp	r3, r5
 801931a:	db32      	blt.n	8019382 <__lshift+0x86>
 801931c:	4638      	mov	r0, r7
 801931e:	f7ff fded 	bl	8018efc <_Balloc>
 8019322:	2300      	movs	r3, #0
 8019324:	4680      	mov	r8, r0
 8019326:	f100 0114 	add.w	r1, r0, #20
 801932a:	461a      	mov	r2, r3
 801932c:	4553      	cmp	r3, sl
 801932e:	db2b      	blt.n	8019388 <__lshift+0x8c>
 8019330:	6920      	ldr	r0, [r4, #16]
 8019332:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019336:	f104 0314 	add.w	r3, r4, #20
 801933a:	f016 021f 	ands.w	r2, r6, #31
 801933e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019342:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019346:	d025      	beq.n	8019394 <__lshift+0x98>
 8019348:	f1c2 0e20 	rsb	lr, r2, #32
 801934c:	2000      	movs	r0, #0
 801934e:	681e      	ldr	r6, [r3, #0]
 8019350:	468a      	mov	sl, r1
 8019352:	4096      	lsls	r6, r2
 8019354:	4330      	orrs	r0, r6
 8019356:	f84a 0b04 	str.w	r0, [sl], #4
 801935a:	f853 0b04 	ldr.w	r0, [r3], #4
 801935e:	459c      	cmp	ip, r3
 8019360:	fa20 f00e 	lsr.w	r0, r0, lr
 8019364:	d814      	bhi.n	8019390 <__lshift+0x94>
 8019366:	6048      	str	r0, [r1, #4]
 8019368:	b108      	cbz	r0, 801936e <__lshift+0x72>
 801936a:	f109 0502 	add.w	r5, r9, #2
 801936e:	3d01      	subs	r5, #1
 8019370:	4638      	mov	r0, r7
 8019372:	f8c8 5010 	str.w	r5, [r8, #16]
 8019376:	4621      	mov	r1, r4
 8019378:	f7ff fdf4 	bl	8018f64 <_Bfree>
 801937c:	4640      	mov	r0, r8
 801937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019382:	3101      	adds	r1, #1
 8019384:	005b      	lsls	r3, r3, #1
 8019386:	e7c7      	b.n	8019318 <__lshift+0x1c>
 8019388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801938c:	3301      	adds	r3, #1
 801938e:	e7cd      	b.n	801932c <__lshift+0x30>
 8019390:	4651      	mov	r1, sl
 8019392:	e7dc      	b.n	801934e <__lshift+0x52>
 8019394:	3904      	subs	r1, #4
 8019396:	f853 2b04 	ldr.w	r2, [r3], #4
 801939a:	f841 2f04 	str.w	r2, [r1, #4]!
 801939e:	459c      	cmp	ip, r3
 80193a0:	d8f9      	bhi.n	8019396 <__lshift+0x9a>
 80193a2:	e7e4      	b.n	801936e <__lshift+0x72>

080193a4 <__mcmp>:
 80193a4:	6903      	ldr	r3, [r0, #16]
 80193a6:	690a      	ldr	r2, [r1, #16]
 80193a8:	1a9b      	subs	r3, r3, r2
 80193aa:	b530      	push	{r4, r5, lr}
 80193ac:	d10c      	bne.n	80193c8 <__mcmp+0x24>
 80193ae:	0092      	lsls	r2, r2, #2
 80193b0:	3014      	adds	r0, #20
 80193b2:	3114      	adds	r1, #20
 80193b4:	1884      	adds	r4, r0, r2
 80193b6:	4411      	add	r1, r2
 80193b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80193bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80193c0:	4295      	cmp	r5, r2
 80193c2:	d003      	beq.n	80193cc <__mcmp+0x28>
 80193c4:	d305      	bcc.n	80193d2 <__mcmp+0x2e>
 80193c6:	2301      	movs	r3, #1
 80193c8:	4618      	mov	r0, r3
 80193ca:	bd30      	pop	{r4, r5, pc}
 80193cc:	42a0      	cmp	r0, r4
 80193ce:	d3f3      	bcc.n	80193b8 <__mcmp+0x14>
 80193d0:	e7fa      	b.n	80193c8 <__mcmp+0x24>
 80193d2:	f04f 33ff 	mov.w	r3, #4294967295
 80193d6:	e7f7      	b.n	80193c8 <__mcmp+0x24>

080193d8 <__mdiff>:
 80193d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193dc:	460d      	mov	r5, r1
 80193de:	4607      	mov	r7, r0
 80193e0:	4611      	mov	r1, r2
 80193e2:	4628      	mov	r0, r5
 80193e4:	4614      	mov	r4, r2
 80193e6:	f7ff ffdd 	bl	80193a4 <__mcmp>
 80193ea:	1e06      	subs	r6, r0, #0
 80193ec:	d108      	bne.n	8019400 <__mdiff+0x28>
 80193ee:	4631      	mov	r1, r6
 80193f0:	4638      	mov	r0, r7
 80193f2:	f7ff fd83 	bl	8018efc <_Balloc>
 80193f6:	2301      	movs	r3, #1
 80193f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80193fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019400:	bfa4      	itt	ge
 8019402:	4623      	movge	r3, r4
 8019404:	462c      	movge	r4, r5
 8019406:	4638      	mov	r0, r7
 8019408:	6861      	ldr	r1, [r4, #4]
 801940a:	bfa6      	itte	ge
 801940c:	461d      	movge	r5, r3
 801940e:	2600      	movge	r6, #0
 8019410:	2601      	movlt	r6, #1
 8019412:	f7ff fd73 	bl	8018efc <_Balloc>
 8019416:	692b      	ldr	r3, [r5, #16]
 8019418:	60c6      	str	r6, [r0, #12]
 801941a:	6926      	ldr	r6, [r4, #16]
 801941c:	f105 0914 	add.w	r9, r5, #20
 8019420:	f104 0214 	add.w	r2, r4, #20
 8019424:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019428:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801942c:	f100 0514 	add.w	r5, r0, #20
 8019430:	f04f 0e00 	mov.w	lr, #0
 8019434:	f852 ab04 	ldr.w	sl, [r2], #4
 8019438:	f859 4b04 	ldr.w	r4, [r9], #4
 801943c:	fa1e f18a 	uxtah	r1, lr, sl
 8019440:	b2a3      	uxth	r3, r4
 8019442:	1ac9      	subs	r1, r1, r3
 8019444:	0c23      	lsrs	r3, r4, #16
 8019446:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801944a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801944e:	b289      	uxth	r1, r1
 8019450:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019454:	45c8      	cmp	r8, r9
 8019456:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801945a:	4694      	mov	ip, r2
 801945c:	f845 3b04 	str.w	r3, [r5], #4
 8019460:	d8e8      	bhi.n	8019434 <__mdiff+0x5c>
 8019462:	45bc      	cmp	ip, r7
 8019464:	d304      	bcc.n	8019470 <__mdiff+0x98>
 8019466:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801946a:	b183      	cbz	r3, 801948e <__mdiff+0xb6>
 801946c:	6106      	str	r6, [r0, #16]
 801946e:	e7c5      	b.n	80193fc <__mdiff+0x24>
 8019470:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019474:	fa1e f381 	uxtah	r3, lr, r1
 8019478:	141a      	asrs	r2, r3, #16
 801947a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801947e:	b29b      	uxth	r3, r3
 8019480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019484:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019488:	f845 3b04 	str.w	r3, [r5], #4
 801948c:	e7e9      	b.n	8019462 <__mdiff+0x8a>
 801948e:	3e01      	subs	r6, #1
 8019490:	e7e9      	b.n	8019466 <__mdiff+0x8e>
	...

08019494 <__ulp>:
 8019494:	4b12      	ldr	r3, [pc, #72]	; (80194e0 <__ulp+0x4c>)
 8019496:	ee10 2a90 	vmov	r2, s1
 801949a:	401a      	ands	r2, r3
 801949c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	dd04      	ble.n	80194ae <__ulp+0x1a>
 80194a4:	2000      	movs	r0, #0
 80194a6:	4619      	mov	r1, r3
 80194a8:	ec41 0b10 	vmov	d0, r0, r1
 80194ac:	4770      	bx	lr
 80194ae:	425b      	negs	r3, r3
 80194b0:	151b      	asrs	r3, r3, #20
 80194b2:	2b13      	cmp	r3, #19
 80194b4:	f04f 0000 	mov.w	r0, #0
 80194b8:	f04f 0100 	mov.w	r1, #0
 80194bc:	dc04      	bgt.n	80194c8 <__ulp+0x34>
 80194be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80194c2:	fa42 f103 	asr.w	r1, r2, r3
 80194c6:	e7ef      	b.n	80194a8 <__ulp+0x14>
 80194c8:	3b14      	subs	r3, #20
 80194ca:	2b1e      	cmp	r3, #30
 80194cc:	f04f 0201 	mov.w	r2, #1
 80194d0:	bfda      	itte	le
 80194d2:	f1c3 031f 	rsble	r3, r3, #31
 80194d6:	fa02 f303 	lslle.w	r3, r2, r3
 80194da:	4613      	movgt	r3, r2
 80194dc:	4618      	mov	r0, r3
 80194de:	e7e3      	b.n	80194a8 <__ulp+0x14>
 80194e0:	7ff00000 	.word	0x7ff00000

080194e4 <__b2d>:
 80194e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194e6:	6905      	ldr	r5, [r0, #16]
 80194e8:	f100 0714 	add.w	r7, r0, #20
 80194ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80194f0:	1f2e      	subs	r6, r5, #4
 80194f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80194f6:	4620      	mov	r0, r4
 80194f8:	f7ff fdc4 	bl	8019084 <__hi0bits>
 80194fc:	f1c0 0320 	rsb	r3, r0, #32
 8019500:	280a      	cmp	r0, #10
 8019502:	600b      	str	r3, [r1, #0]
 8019504:	f8df c074 	ldr.w	ip, [pc, #116]	; 801957c <__b2d+0x98>
 8019508:	dc14      	bgt.n	8019534 <__b2d+0x50>
 801950a:	f1c0 0e0b 	rsb	lr, r0, #11
 801950e:	fa24 f10e 	lsr.w	r1, r4, lr
 8019512:	42b7      	cmp	r7, r6
 8019514:	ea41 030c 	orr.w	r3, r1, ip
 8019518:	bf34      	ite	cc
 801951a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801951e:	2100      	movcs	r1, #0
 8019520:	3015      	adds	r0, #21
 8019522:	fa04 f000 	lsl.w	r0, r4, r0
 8019526:	fa21 f10e 	lsr.w	r1, r1, lr
 801952a:	ea40 0201 	orr.w	r2, r0, r1
 801952e:	ec43 2b10 	vmov	d0, r2, r3
 8019532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019534:	42b7      	cmp	r7, r6
 8019536:	bf3a      	itte	cc
 8019538:	f1a5 0608 	subcc.w	r6, r5, #8
 801953c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019540:	2100      	movcs	r1, #0
 8019542:	380b      	subs	r0, #11
 8019544:	d015      	beq.n	8019572 <__b2d+0x8e>
 8019546:	4084      	lsls	r4, r0
 8019548:	f1c0 0520 	rsb	r5, r0, #32
 801954c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019550:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019554:	42be      	cmp	r6, r7
 8019556:	fa21 fc05 	lsr.w	ip, r1, r5
 801955a:	ea44 030c 	orr.w	r3, r4, ip
 801955e:	bf8c      	ite	hi
 8019560:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019564:	2400      	movls	r4, #0
 8019566:	fa01 f000 	lsl.w	r0, r1, r0
 801956a:	40ec      	lsrs	r4, r5
 801956c:	ea40 0204 	orr.w	r2, r0, r4
 8019570:	e7dd      	b.n	801952e <__b2d+0x4a>
 8019572:	ea44 030c 	orr.w	r3, r4, ip
 8019576:	460a      	mov	r2, r1
 8019578:	e7d9      	b.n	801952e <__b2d+0x4a>
 801957a:	bf00      	nop
 801957c:	3ff00000 	.word	0x3ff00000

08019580 <__d2b>:
 8019580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019584:	460e      	mov	r6, r1
 8019586:	2101      	movs	r1, #1
 8019588:	ec59 8b10 	vmov	r8, r9, d0
 801958c:	4615      	mov	r5, r2
 801958e:	f7ff fcb5 	bl	8018efc <_Balloc>
 8019592:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019596:	4607      	mov	r7, r0
 8019598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801959c:	bb34      	cbnz	r4, 80195ec <__d2b+0x6c>
 801959e:	9301      	str	r3, [sp, #4]
 80195a0:	f1b8 0300 	subs.w	r3, r8, #0
 80195a4:	d027      	beq.n	80195f6 <__d2b+0x76>
 80195a6:	a802      	add	r0, sp, #8
 80195a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80195ac:	f7ff fd89 	bl	80190c2 <__lo0bits>
 80195b0:	9900      	ldr	r1, [sp, #0]
 80195b2:	b1f0      	cbz	r0, 80195f2 <__d2b+0x72>
 80195b4:	9a01      	ldr	r2, [sp, #4]
 80195b6:	f1c0 0320 	rsb	r3, r0, #32
 80195ba:	fa02 f303 	lsl.w	r3, r2, r3
 80195be:	430b      	orrs	r3, r1
 80195c0:	40c2      	lsrs	r2, r0
 80195c2:	617b      	str	r3, [r7, #20]
 80195c4:	9201      	str	r2, [sp, #4]
 80195c6:	9b01      	ldr	r3, [sp, #4]
 80195c8:	61bb      	str	r3, [r7, #24]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	bf14      	ite	ne
 80195ce:	2102      	movne	r1, #2
 80195d0:	2101      	moveq	r1, #1
 80195d2:	6139      	str	r1, [r7, #16]
 80195d4:	b1c4      	cbz	r4, 8019608 <__d2b+0x88>
 80195d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80195da:	4404      	add	r4, r0
 80195dc:	6034      	str	r4, [r6, #0]
 80195de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80195e2:	6028      	str	r0, [r5, #0]
 80195e4:	4638      	mov	r0, r7
 80195e6:	b003      	add	sp, #12
 80195e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80195f0:	e7d5      	b.n	801959e <__d2b+0x1e>
 80195f2:	6179      	str	r1, [r7, #20]
 80195f4:	e7e7      	b.n	80195c6 <__d2b+0x46>
 80195f6:	a801      	add	r0, sp, #4
 80195f8:	f7ff fd63 	bl	80190c2 <__lo0bits>
 80195fc:	9b01      	ldr	r3, [sp, #4]
 80195fe:	617b      	str	r3, [r7, #20]
 8019600:	2101      	movs	r1, #1
 8019602:	6139      	str	r1, [r7, #16]
 8019604:	3020      	adds	r0, #32
 8019606:	e7e5      	b.n	80195d4 <__d2b+0x54>
 8019608:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801960c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019610:	6030      	str	r0, [r6, #0]
 8019612:	6918      	ldr	r0, [r3, #16]
 8019614:	f7ff fd36 	bl	8019084 <__hi0bits>
 8019618:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801961c:	e7e1      	b.n	80195e2 <__d2b+0x62>

0801961e <__ratio>:
 801961e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019622:	4688      	mov	r8, r1
 8019624:	4669      	mov	r1, sp
 8019626:	4681      	mov	r9, r0
 8019628:	f7ff ff5c 	bl	80194e4 <__b2d>
 801962c:	a901      	add	r1, sp, #4
 801962e:	4640      	mov	r0, r8
 8019630:	ec57 6b10 	vmov	r6, r7, d0
 8019634:	f7ff ff56 	bl	80194e4 <__b2d>
 8019638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801963c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019640:	eba3 0c02 	sub.w	ip, r3, r2
 8019644:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019648:	1a9b      	subs	r3, r3, r2
 801964a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801964e:	ec5b ab10 	vmov	sl, fp, d0
 8019652:	2b00      	cmp	r3, #0
 8019654:	bfce      	itee	gt
 8019656:	463a      	movgt	r2, r7
 8019658:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801965c:	465a      	movle	r2, fp
 801965e:	4659      	mov	r1, fp
 8019660:	463d      	mov	r5, r7
 8019662:	bfd4      	ite	le
 8019664:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019668:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801966c:	4630      	mov	r0, r6
 801966e:	ee10 2a10 	vmov	r2, s0
 8019672:	460b      	mov	r3, r1
 8019674:	4629      	mov	r1, r5
 8019676:	f7e7 f8e9 	bl	800084c <__aeabi_ddiv>
 801967a:	ec41 0b10 	vmov	d0, r0, r1
 801967e:	b003      	add	sp, #12
 8019680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019684 <__copybits>:
 8019684:	3901      	subs	r1, #1
 8019686:	b510      	push	{r4, lr}
 8019688:	1149      	asrs	r1, r1, #5
 801968a:	6914      	ldr	r4, [r2, #16]
 801968c:	3101      	adds	r1, #1
 801968e:	f102 0314 	add.w	r3, r2, #20
 8019692:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019696:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801969a:	42a3      	cmp	r3, r4
 801969c:	4602      	mov	r2, r0
 801969e:	d303      	bcc.n	80196a8 <__copybits+0x24>
 80196a0:	2300      	movs	r3, #0
 80196a2:	428a      	cmp	r2, r1
 80196a4:	d305      	bcc.n	80196b2 <__copybits+0x2e>
 80196a6:	bd10      	pop	{r4, pc}
 80196a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80196ac:	f840 2b04 	str.w	r2, [r0], #4
 80196b0:	e7f3      	b.n	801969a <__copybits+0x16>
 80196b2:	f842 3b04 	str.w	r3, [r2], #4
 80196b6:	e7f4      	b.n	80196a2 <__copybits+0x1e>

080196b8 <__any_on>:
 80196b8:	f100 0214 	add.w	r2, r0, #20
 80196bc:	6900      	ldr	r0, [r0, #16]
 80196be:	114b      	asrs	r3, r1, #5
 80196c0:	4298      	cmp	r0, r3
 80196c2:	b510      	push	{r4, lr}
 80196c4:	db11      	blt.n	80196ea <__any_on+0x32>
 80196c6:	dd0a      	ble.n	80196de <__any_on+0x26>
 80196c8:	f011 011f 	ands.w	r1, r1, #31
 80196cc:	d007      	beq.n	80196de <__any_on+0x26>
 80196ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80196d2:	fa24 f001 	lsr.w	r0, r4, r1
 80196d6:	fa00 f101 	lsl.w	r1, r0, r1
 80196da:	428c      	cmp	r4, r1
 80196dc:	d10b      	bne.n	80196f6 <__any_on+0x3e>
 80196de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80196e2:	4293      	cmp	r3, r2
 80196e4:	d803      	bhi.n	80196ee <__any_on+0x36>
 80196e6:	2000      	movs	r0, #0
 80196e8:	bd10      	pop	{r4, pc}
 80196ea:	4603      	mov	r3, r0
 80196ec:	e7f7      	b.n	80196de <__any_on+0x26>
 80196ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80196f2:	2900      	cmp	r1, #0
 80196f4:	d0f5      	beq.n	80196e2 <__any_on+0x2a>
 80196f6:	2001      	movs	r0, #1
 80196f8:	e7f6      	b.n	80196e8 <__any_on+0x30>

080196fa <_calloc_r>:
 80196fa:	b538      	push	{r3, r4, r5, lr}
 80196fc:	fb02 f401 	mul.w	r4, r2, r1
 8019700:	4621      	mov	r1, r4
 8019702:	f7fc fcb5 	bl	8016070 <_malloc_r>
 8019706:	4605      	mov	r5, r0
 8019708:	b118      	cbz	r0, 8019712 <_calloc_r+0x18>
 801970a:	4622      	mov	r2, r4
 801970c:	2100      	movs	r1, #0
 801970e:	f7fc fc59 	bl	8015fc4 <memset>
 8019712:	4628      	mov	r0, r5
 8019714:	bd38      	pop	{r3, r4, r5, pc}

08019716 <__ssputs_r>:
 8019716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801971a:	688e      	ldr	r6, [r1, #8]
 801971c:	429e      	cmp	r6, r3
 801971e:	4682      	mov	sl, r0
 8019720:	460c      	mov	r4, r1
 8019722:	4690      	mov	r8, r2
 8019724:	4699      	mov	r9, r3
 8019726:	d837      	bhi.n	8019798 <__ssputs_r+0x82>
 8019728:	898a      	ldrh	r2, [r1, #12]
 801972a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801972e:	d031      	beq.n	8019794 <__ssputs_r+0x7e>
 8019730:	6825      	ldr	r5, [r4, #0]
 8019732:	6909      	ldr	r1, [r1, #16]
 8019734:	1a6f      	subs	r7, r5, r1
 8019736:	6965      	ldr	r5, [r4, #20]
 8019738:	2302      	movs	r3, #2
 801973a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801973e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019742:	f109 0301 	add.w	r3, r9, #1
 8019746:	443b      	add	r3, r7
 8019748:	429d      	cmp	r5, r3
 801974a:	bf38      	it	cc
 801974c:	461d      	movcc	r5, r3
 801974e:	0553      	lsls	r3, r2, #21
 8019750:	d530      	bpl.n	80197b4 <__ssputs_r+0x9e>
 8019752:	4629      	mov	r1, r5
 8019754:	f7fc fc8c 	bl	8016070 <_malloc_r>
 8019758:	4606      	mov	r6, r0
 801975a:	b950      	cbnz	r0, 8019772 <__ssputs_r+0x5c>
 801975c:	230c      	movs	r3, #12
 801975e:	f8ca 3000 	str.w	r3, [sl]
 8019762:	89a3      	ldrh	r3, [r4, #12]
 8019764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019768:	81a3      	strh	r3, [r4, #12]
 801976a:	f04f 30ff 	mov.w	r0, #4294967295
 801976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019772:	463a      	mov	r2, r7
 8019774:	6921      	ldr	r1, [r4, #16]
 8019776:	f7fc fc01 	bl	8015f7c <memcpy>
 801977a:	89a3      	ldrh	r3, [r4, #12]
 801977c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019784:	81a3      	strh	r3, [r4, #12]
 8019786:	6126      	str	r6, [r4, #16]
 8019788:	6165      	str	r5, [r4, #20]
 801978a:	443e      	add	r6, r7
 801978c:	1bed      	subs	r5, r5, r7
 801978e:	6026      	str	r6, [r4, #0]
 8019790:	60a5      	str	r5, [r4, #8]
 8019792:	464e      	mov	r6, r9
 8019794:	454e      	cmp	r6, r9
 8019796:	d900      	bls.n	801979a <__ssputs_r+0x84>
 8019798:	464e      	mov	r6, r9
 801979a:	4632      	mov	r2, r6
 801979c:	4641      	mov	r1, r8
 801979e:	6820      	ldr	r0, [r4, #0]
 80197a0:	f7fc fbf7 	bl	8015f92 <memmove>
 80197a4:	68a3      	ldr	r3, [r4, #8]
 80197a6:	1b9b      	subs	r3, r3, r6
 80197a8:	60a3      	str	r3, [r4, #8]
 80197aa:	6823      	ldr	r3, [r4, #0]
 80197ac:	441e      	add	r6, r3
 80197ae:	6026      	str	r6, [r4, #0]
 80197b0:	2000      	movs	r0, #0
 80197b2:	e7dc      	b.n	801976e <__ssputs_r+0x58>
 80197b4:	462a      	mov	r2, r5
 80197b6:	f000 f920 	bl	80199fa <_realloc_r>
 80197ba:	4606      	mov	r6, r0
 80197bc:	2800      	cmp	r0, #0
 80197be:	d1e2      	bne.n	8019786 <__ssputs_r+0x70>
 80197c0:	6921      	ldr	r1, [r4, #16]
 80197c2:	4650      	mov	r0, sl
 80197c4:	f7fc fc06 	bl	8015fd4 <_free_r>
 80197c8:	e7c8      	b.n	801975c <__ssputs_r+0x46>
	...

080197cc <_svfiprintf_r>:
 80197cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197d0:	461d      	mov	r5, r3
 80197d2:	898b      	ldrh	r3, [r1, #12]
 80197d4:	061f      	lsls	r7, r3, #24
 80197d6:	b09d      	sub	sp, #116	; 0x74
 80197d8:	4680      	mov	r8, r0
 80197da:	460c      	mov	r4, r1
 80197dc:	4616      	mov	r6, r2
 80197de:	d50f      	bpl.n	8019800 <_svfiprintf_r+0x34>
 80197e0:	690b      	ldr	r3, [r1, #16]
 80197e2:	b96b      	cbnz	r3, 8019800 <_svfiprintf_r+0x34>
 80197e4:	2140      	movs	r1, #64	; 0x40
 80197e6:	f7fc fc43 	bl	8016070 <_malloc_r>
 80197ea:	6020      	str	r0, [r4, #0]
 80197ec:	6120      	str	r0, [r4, #16]
 80197ee:	b928      	cbnz	r0, 80197fc <_svfiprintf_r+0x30>
 80197f0:	230c      	movs	r3, #12
 80197f2:	f8c8 3000 	str.w	r3, [r8]
 80197f6:	f04f 30ff 	mov.w	r0, #4294967295
 80197fa:	e0c8      	b.n	801998e <_svfiprintf_r+0x1c2>
 80197fc:	2340      	movs	r3, #64	; 0x40
 80197fe:	6163      	str	r3, [r4, #20]
 8019800:	2300      	movs	r3, #0
 8019802:	9309      	str	r3, [sp, #36]	; 0x24
 8019804:	2320      	movs	r3, #32
 8019806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801980a:	2330      	movs	r3, #48	; 0x30
 801980c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019810:	9503      	str	r5, [sp, #12]
 8019812:	f04f 0b01 	mov.w	fp, #1
 8019816:	4637      	mov	r7, r6
 8019818:	463d      	mov	r5, r7
 801981a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801981e:	b10b      	cbz	r3, 8019824 <_svfiprintf_r+0x58>
 8019820:	2b25      	cmp	r3, #37	; 0x25
 8019822:	d13e      	bne.n	80198a2 <_svfiprintf_r+0xd6>
 8019824:	ebb7 0a06 	subs.w	sl, r7, r6
 8019828:	d00b      	beq.n	8019842 <_svfiprintf_r+0x76>
 801982a:	4653      	mov	r3, sl
 801982c:	4632      	mov	r2, r6
 801982e:	4621      	mov	r1, r4
 8019830:	4640      	mov	r0, r8
 8019832:	f7ff ff70 	bl	8019716 <__ssputs_r>
 8019836:	3001      	adds	r0, #1
 8019838:	f000 80a4 	beq.w	8019984 <_svfiprintf_r+0x1b8>
 801983c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801983e:	4453      	add	r3, sl
 8019840:	9309      	str	r3, [sp, #36]	; 0x24
 8019842:	783b      	ldrb	r3, [r7, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	f000 809d 	beq.w	8019984 <_svfiprintf_r+0x1b8>
 801984a:	2300      	movs	r3, #0
 801984c:	f04f 32ff 	mov.w	r2, #4294967295
 8019850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019854:	9304      	str	r3, [sp, #16]
 8019856:	9307      	str	r3, [sp, #28]
 8019858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801985c:	931a      	str	r3, [sp, #104]	; 0x68
 801985e:	462f      	mov	r7, r5
 8019860:	2205      	movs	r2, #5
 8019862:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019866:	4850      	ldr	r0, [pc, #320]	; (80199a8 <_svfiprintf_r+0x1dc>)
 8019868:	f7e6 fcba 	bl	80001e0 <memchr>
 801986c:	9b04      	ldr	r3, [sp, #16]
 801986e:	b9d0      	cbnz	r0, 80198a6 <_svfiprintf_r+0xda>
 8019870:	06d9      	lsls	r1, r3, #27
 8019872:	bf44      	itt	mi
 8019874:	2220      	movmi	r2, #32
 8019876:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801987a:	071a      	lsls	r2, r3, #28
 801987c:	bf44      	itt	mi
 801987e:	222b      	movmi	r2, #43	; 0x2b
 8019880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019884:	782a      	ldrb	r2, [r5, #0]
 8019886:	2a2a      	cmp	r2, #42	; 0x2a
 8019888:	d015      	beq.n	80198b6 <_svfiprintf_r+0xea>
 801988a:	9a07      	ldr	r2, [sp, #28]
 801988c:	462f      	mov	r7, r5
 801988e:	2000      	movs	r0, #0
 8019890:	250a      	movs	r5, #10
 8019892:	4639      	mov	r1, r7
 8019894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019898:	3b30      	subs	r3, #48	; 0x30
 801989a:	2b09      	cmp	r3, #9
 801989c:	d94d      	bls.n	801993a <_svfiprintf_r+0x16e>
 801989e:	b1b8      	cbz	r0, 80198d0 <_svfiprintf_r+0x104>
 80198a0:	e00f      	b.n	80198c2 <_svfiprintf_r+0xf6>
 80198a2:	462f      	mov	r7, r5
 80198a4:	e7b8      	b.n	8019818 <_svfiprintf_r+0x4c>
 80198a6:	4a40      	ldr	r2, [pc, #256]	; (80199a8 <_svfiprintf_r+0x1dc>)
 80198a8:	1a80      	subs	r0, r0, r2
 80198aa:	fa0b f000 	lsl.w	r0, fp, r0
 80198ae:	4318      	orrs	r0, r3
 80198b0:	9004      	str	r0, [sp, #16]
 80198b2:	463d      	mov	r5, r7
 80198b4:	e7d3      	b.n	801985e <_svfiprintf_r+0x92>
 80198b6:	9a03      	ldr	r2, [sp, #12]
 80198b8:	1d11      	adds	r1, r2, #4
 80198ba:	6812      	ldr	r2, [r2, #0]
 80198bc:	9103      	str	r1, [sp, #12]
 80198be:	2a00      	cmp	r2, #0
 80198c0:	db01      	blt.n	80198c6 <_svfiprintf_r+0xfa>
 80198c2:	9207      	str	r2, [sp, #28]
 80198c4:	e004      	b.n	80198d0 <_svfiprintf_r+0x104>
 80198c6:	4252      	negs	r2, r2
 80198c8:	f043 0302 	orr.w	r3, r3, #2
 80198cc:	9207      	str	r2, [sp, #28]
 80198ce:	9304      	str	r3, [sp, #16]
 80198d0:	783b      	ldrb	r3, [r7, #0]
 80198d2:	2b2e      	cmp	r3, #46	; 0x2e
 80198d4:	d10c      	bne.n	80198f0 <_svfiprintf_r+0x124>
 80198d6:	787b      	ldrb	r3, [r7, #1]
 80198d8:	2b2a      	cmp	r3, #42	; 0x2a
 80198da:	d133      	bne.n	8019944 <_svfiprintf_r+0x178>
 80198dc:	9b03      	ldr	r3, [sp, #12]
 80198de:	1d1a      	adds	r2, r3, #4
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	9203      	str	r2, [sp, #12]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	bfb8      	it	lt
 80198e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80198ec:	3702      	adds	r7, #2
 80198ee:	9305      	str	r3, [sp, #20]
 80198f0:	4d2e      	ldr	r5, [pc, #184]	; (80199ac <_svfiprintf_r+0x1e0>)
 80198f2:	7839      	ldrb	r1, [r7, #0]
 80198f4:	2203      	movs	r2, #3
 80198f6:	4628      	mov	r0, r5
 80198f8:	f7e6 fc72 	bl	80001e0 <memchr>
 80198fc:	b138      	cbz	r0, 801990e <_svfiprintf_r+0x142>
 80198fe:	2340      	movs	r3, #64	; 0x40
 8019900:	1b40      	subs	r0, r0, r5
 8019902:	fa03 f000 	lsl.w	r0, r3, r0
 8019906:	9b04      	ldr	r3, [sp, #16]
 8019908:	4303      	orrs	r3, r0
 801990a:	3701      	adds	r7, #1
 801990c:	9304      	str	r3, [sp, #16]
 801990e:	7839      	ldrb	r1, [r7, #0]
 8019910:	4827      	ldr	r0, [pc, #156]	; (80199b0 <_svfiprintf_r+0x1e4>)
 8019912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019916:	2206      	movs	r2, #6
 8019918:	1c7e      	adds	r6, r7, #1
 801991a:	f7e6 fc61 	bl	80001e0 <memchr>
 801991e:	2800      	cmp	r0, #0
 8019920:	d038      	beq.n	8019994 <_svfiprintf_r+0x1c8>
 8019922:	4b24      	ldr	r3, [pc, #144]	; (80199b4 <_svfiprintf_r+0x1e8>)
 8019924:	bb13      	cbnz	r3, 801996c <_svfiprintf_r+0x1a0>
 8019926:	9b03      	ldr	r3, [sp, #12]
 8019928:	3307      	adds	r3, #7
 801992a:	f023 0307 	bic.w	r3, r3, #7
 801992e:	3308      	adds	r3, #8
 8019930:	9303      	str	r3, [sp, #12]
 8019932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019934:	444b      	add	r3, r9
 8019936:	9309      	str	r3, [sp, #36]	; 0x24
 8019938:	e76d      	b.n	8019816 <_svfiprintf_r+0x4a>
 801993a:	fb05 3202 	mla	r2, r5, r2, r3
 801993e:	2001      	movs	r0, #1
 8019940:	460f      	mov	r7, r1
 8019942:	e7a6      	b.n	8019892 <_svfiprintf_r+0xc6>
 8019944:	2300      	movs	r3, #0
 8019946:	3701      	adds	r7, #1
 8019948:	9305      	str	r3, [sp, #20]
 801994a:	4619      	mov	r1, r3
 801994c:	250a      	movs	r5, #10
 801994e:	4638      	mov	r0, r7
 8019950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019954:	3a30      	subs	r2, #48	; 0x30
 8019956:	2a09      	cmp	r2, #9
 8019958:	d903      	bls.n	8019962 <_svfiprintf_r+0x196>
 801995a:	2b00      	cmp	r3, #0
 801995c:	d0c8      	beq.n	80198f0 <_svfiprintf_r+0x124>
 801995e:	9105      	str	r1, [sp, #20]
 8019960:	e7c6      	b.n	80198f0 <_svfiprintf_r+0x124>
 8019962:	fb05 2101 	mla	r1, r5, r1, r2
 8019966:	2301      	movs	r3, #1
 8019968:	4607      	mov	r7, r0
 801996a:	e7f0      	b.n	801994e <_svfiprintf_r+0x182>
 801996c:	ab03      	add	r3, sp, #12
 801996e:	9300      	str	r3, [sp, #0]
 8019970:	4622      	mov	r2, r4
 8019972:	4b11      	ldr	r3, [pc, #68]	; (80199b8 <_svfiprintf_r+0x1ec>)
 8019974:	a904      	add	r1, sp, #16
 8019976:	4640      	mov	r0, r8
 8019978:	f7fc fc68 	bl	801624c <_printf_float>
 801997c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019980:	4681      	mov	r9, r0
 8019982:	d1d6      	bne.n	8019932 <_svfiprintf_r+0x166>
 8019984:	89a3      	ldrh	r3, [r4, #12]
 8019986:	065b      	lsls	r3, r3, #25
 8019988:	f53f af35 	bmi.w	80197f6 <_svfiprintf_r+0x2a>
 801998c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801998e:	b01d      	add	sp, #116	; 0x74
 8019990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019994:	ab03      	add	r3, sp, #12
 8019996:	9300      	str	r3, [sp, #0]
 8019998:	4622      	mov	r2, r4
 801999a:	4b07      	ldr	r3, [pc, #28]	; (80199b8 <_svfiprintf_r+0x1ec>)
 801999c:	a904      	add	r1, sp, #16
 801999e:	4640      	mov	r0, r8
 80199a0:	f7fc ff0a 	bl	80167b8 <_printf_i>
 80199a4:	e7ea      	b.n	801997c <_svfiprintf_r+0x1b0>
 80199a6:	bf00      	nop
 80199a8:	0801b8dc 	.word	0x0801b8dc
 80199ac:	0801b8e2 	.word	0x0801b8e2
 80199b0:	0801b8e6 	.word	0x0801b8e6
 80199b4:	0801624d 	.word	0x0801624d
 80199b8:	08019717 	.word	0x08019717

080199bc <strncmp>:
 80199bc:	b510      	push	{r4, lr}
 80199be:	b16a      	cbz	r2, 80199dc <strncmp+0x20>
 80199c0:	3901      	subs	r1, #1
 80199c2:	1884      	adds	r4, r0, r2
 80199c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80199c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80199cc:	4293      	cmp	r3, r2
 80199ce:	d103      	bne.n	80199d8 <strncmp+0x1c>
 80199d0:	42a0      	cmp	r0, r4
 80199d2:	d001      	beq.n	80199d8 <strncmp+0x1c>
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d1f5      	bne.n	80199c4 <strncmp+0x8>
 80199d8:	1a98      	subs	r0, r3, r2
 80199da:	bd10      	pop	{r4, pc}
 80199dc:	4610      	mov	r0, r2
 80199de:	e7fc      	b.n	80199da <strncmp+0x1e>

080199e0 <__ascii_wctomb>:
 80199e0:	b149      	cbz	r1, 80199f6 <__ascii_wctomb+0x16>
 80199e2:	2aff      	cmp	r2, #255	; 0xff
 80199e4:	bf85      	ittet	hi
 80199e6:	238a      	movhi	r3, #138	; 0x8a
 80199e8:	6003      	strhi	r3, [r0, #0]
 80199ea:	700a      	strbls	r2, [r1, #0]
 80199ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80199f0:	bf98      	it	ls
 80199f2:	2001      	movls	r0, #1
 80199f4:	4770      	bx	lr
 80199f6:	4608      	mov	r0, r1
 80199f8:	4770      	bx	lr

080199fa <_realloc_r>:
 80199fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199fc:	4607      	mov	r7, r0
 80199fe:	4614      	mov	r4, r2
 8019a00:	460e      	mov	r6, r1
 8019a02:	b921      	cbnz	r1, 8019a0e <_realloc_r+0x14>
 8019a04:	4611      	mov	r1, r2
 8019a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019a0a:	f7fc bb31 	b.w	8016070 <_malloc_r>
 8019a0e:	b922      	cbnz	r2, 8019a1a <_realloc_r+0x20>
 8019a10:	f7fc fae0 	bl	8015fd4 <_free_r>
 8019a14:	4625      	mov	r5, r4
 8019a16:	4628      	mov	r0, r5
 8019a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a1a:	f000 f814 	bl	8019a46 <_malloc_usable_size_r>
 8019a1e:	42a0      	cmp	r0, r4
 8019a20:	d20f      	bcs.n	8019a42 <_realloc_r+0x48>
 8019a22:	4621      	mov	r1, r4
 8019a24:	4638      	mov	r0, r7
 8019a26:	f7fc fb23 	bl	8016070 <_malloc_r>
 8019a2a:	4605      	mov	r5, r0
 8019a2c:	2800      	cmp	r0, #0
 8019a2e:	d0f2      	beq.n	8019a16 <_realloc_r+0x1c>
 8019a30:	4631      	mov	r1, r6
 8019a32:	4622      	mov	r2, r4
 8019a34:	f7fc faa2 	bl	8015f7c <memcpy>
 8019a38:	4631      	mov	r1, r6
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	f7fc faca 	bl	8015fd4 <_free_r>
 8019a40:	e7e9      	b.n	8019a16 <_realloc_r+0x1c>
 8019a42:	4635      	mov	r5, r6
 8019a44:	e7e7      	b.n	8019a16 <_realloc_r+0x1c>

08019a46 <_malloc_usable_size_r>:
 8019a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a4a:	1f18      	subs	r0, r3, #4
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	bfbc      	itt	lt
 8019a50:	580b      	ldrlt	r3, [r1, r0]
 8019a52:	18c0      	addlt	r0, r0, r3
 8019a54:	4770      	bx	lr
	...

08019a58 <ceil>:
 8019a58:	ec51 0b10 	vmov	r0, r1, d0
 8019a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019a64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019a68:	2e13      	cmp	r6, #19
 8019a6a:	460c      	mov	r4, r1
 8019a6c:	ee10 5a10 	vmov	r5, s0
 8019a70:	4680      	mov	r8, r0
 8019a72:	dc30      	bgt.n	8019ad6 <ceil+0x7e>
 8019a74:	2e00      	cmp	r6, #0
 8019a76:	da12      	bge.n	8019a9e <ceil+0x46>
 8019a78:	a333      	add	r3, pc, #204	; (adr r3, 8019b48 <ceil+0xf0>)
 8019a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a7e:	f7e6 fc05 	bl	800028c <__adddf3>
 8019a82:	2200      	movs	r2, #0
 8019a84:	2300      	movs	r3, #0
 8019a86:	f7e7 f847 	bl	8000b18 <__aeabi_dcmpgt>
 8019a8a:	b128      	cbz	r0, 8019a98 <ceil+0x40>
 8019a8c:	2c00      	cmp	r4, #0
 8019a8e:	db55      	blt.n	8019b3c <ceil+0xe4>
 8019a90:	432c      	orrs	r4, r5
 8019a92:	d057      	beq.n	8019b44 <ceil+0xec>
 8019a94:	4c2e      	ldr	r4, [pc, #184]	; (8019b50 <ceil+0xf8>)
 8019a96:	2500      	movs	r5, #0
 8019a98:	4621      	mov	r1, r4
 8019a9a:	4628      	mov	r0, r5
 8019a9c:	e025      	b.n	8019aea <ceil+0x92>
 8019a9e:	4f2d      	ldr	r7, [pc, #180]	; (8019b54 <ceil+0xfc>)
 8019aa0:	4137      	asrs	r7, r6
 8019aa2:	ea01 0307 	and.w	r3, r1, r7
 8019aa6:	4303      	orrs	r3, r0
 8019aa8:	d01f      	beq.n	8019aea <ceil+0x92>
 8019aaa:	a327      	add	r3, pc, #156	; (adr r3, 8019b48 <ceil+0xf0>)
 8019aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ab0:	f7e6 fbec 	bl	800028c <__adddf3>
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	f7e7 f82e 	bl	8000b18 <__aeabi_dcmpgt>
 8019abc:	2800      	cmp	r0, #0
 8019abe:	d0eb      	beq.n	8019a98 <ceil+0x40>
 8019ac0:	2c00      	cmp	r4, #0
 8019ac2:	bfc2      	ittt	gt
 8019ac4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019ac8:	fa43 f606 	asrgt.w	r6, r3, r6
 8019acc:	19a4      	addgt	r4, r4, r6
 8019ace:	ea24 0407 	bic.w	r4, r4, r7
 8019ad2:	2500      	movs	r5, #0
 8019ad4:	e7e0      	b.n	8019a98 <ceil+0x40>
 8019ad6:	2e33      	cmp	r6, #51	; 0x33
 8019ad8:	dd0b      	ble.n	8019af2 <ceil+0x9a>
 8019ada:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019ade:	d104      	bne.n	8019aea <ceil+0x92>
 8019ae0:	ee10 2a10 	vmov	r2, s0
 8019ae4:	460b      	mov	r3, r1
 8019ae6:	f7e6 fbd1 	bl	800028c <__adddf3>
 8019aea:	ec41 0b10 	vmov	d0, r0, r1
 8019aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019af2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019af6:	f04f 33ff 	mov.w	r3, #4294967295
 8019afa:	fa23 f707 	lsr.w	r7, r3, r7
 8019afe:	4207      	tst	r7, r0
 8019b00:	d0f3      	beq.n	8019aea <ceil+0x92>
 8019b02:	a311      	add	r3, pc, #68	; (adr r3, 8019b48 <ceil+0xf0>)
 8019b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b08:	f7e6 fbc0 	bl	800028c <__adddf3>
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	2300      	movs	r3, #0
 8019b10:	f7e7 f802 	bl	8000b18 <__aeabi_dcmpgt>
 8019b14:	2800      	cmp	r0, #0
 8019b16:	d0bf      	beq.n	8019a98 <ceil+0x40>
 8019b18:	2c00      	cmp	r4, #0
 8019b1a:	dd02      	ble.n	8019b22 <ceil+0xca>
 8019b1c:	2e14      	cmp	r6, #20
 8019b1e:	d103      	bne.n	8019b28 <ceil+0xd0>
 8019b20:	3401      	adds	r4, #1
 8019b22:	ea25 0507 	bic.w	r5, r5, r7
 8019b26:	e7b7      	b.n	8019a98 <ceil+0x40>
 8019b28:	2301      	movs	r3, #1
 8019b2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019b2e:	fa03 f606 	lsl.w	r6, r3, r6
 8019b32:	4435      	add	r5, r6
 8019b34:	4545      	cmp	r5, r8
 8019b36:	bf38      	it	cc
 8019b38:	18e4      	addcc	r4, r4, r3
 8019b3a:	e7f2      	b.n	8019b22 <ceil+0xca>
 8019b3c:	2500      	movs	r5, #0
 8019b3e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019b42:	e7a9      	b.n	8019a98 <ceil+0x40>
 8019b44:	4625      	mov	r5, r4
 8019b46:	e7a7      	b.n	8019a98 <ceil+0x40>
 8019b48:	8800759c 	.word	0x8800759c
 8019b4c:	7e37e43c 	.word	0x7e37e43c
 8019b50:	3ff00000 	.word	0x3ff00000
 8019b54:	000fffff 	.word	0x000fffff

08019b58 <cos>:
 8019b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b5a:	ec51 0b10 	vmov	r0, r1, d0
 8019b5e:	4a1e      	ldr	r2, [pc, #120]	; (8019bd8 <cos+0x80>)
 8019b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019b64:	4293      	cmp	r3, r2
 8019b66:	dc06      	bgt.n	8019b76 <cos+0x1e>
 8019b68:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019bd0 <cos+0x78>
 8019b6c:	f000 fcec 	bl	801a548 <__kernel_cos>
 8019b70:	ec51 0b10 	vmov	r0, r1, d0
 8019b74:	e007      	b.n	8019b86 <cos+0x2e>
 8019b76:	4a19      	ldr	r2, [pc, #100]	; (8019bdc <cos+0x84>)
 8019b78:	4293      	cmp	r3, r2
 8019b7a:	dd09      	ble.n	8019b90 <cos+0x38>
 8019b7c:	ee10 2a10 	vmov	r2, s0
 8019b80:	460b      	mov	r3, r1
 8019b82:	f7e6 fb81 	bl	8000288 <__aeabi_dsub>
 8019b86:	ec41 0b10 	vmov	d0, r0, r1
 8019b8a:	b005      	add	sp, #20
 8019b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b90:	4668      	mov	r0, sp
 8019b92:	f000 fa35 	bl	801a000 <__ieee754_rem_pio2>
 8019b96:	f000 0003 	and.w	r0, r0, #3
 8019b9a:	2801      	cmp	r0, #1
 8019b9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ba0:	ed9d 0b00 	vldr	d0, [sp]
 8019ba4:	d007      	beq.n	8019bb6 <cos+0x5e>
 8019ba6:	2802      	cmp	r0, #2
 8019ba8:	d00e      	beq.n	8019bc8 <cos+0x70>
 8019baa:	2800      	cmp	r0, #0
 8019bac:	d0de      	beq.n	8019b6c <cos+0x14>
 8019bae:	2001      	movs	r0, #1
 8019bb0:	f001 f8d2 	bl	801ad58 <__kernel_sin>
 8019bb4:	e7dc      	b.n	8019b70 <cos+0x18>
 8019bb6:	f001 f8cf 	bl	801ad58 <__kernel_sin>
 8019bba:	ec53 2b10 	vmov	r2, r3, d0
 8019bbe:	ee10 0a10 	vmov	r0, s0
 8019bc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019bc6:	e7de      	b.n	8019b86 <cos+0x2e>
 8019bc8:	f000 fcbe 	bl	801a548 <__kernel_cos>
 8019bcc:	e7f5      	b.n	8019bba <cos+0x62>
 8019bce:	bf00      	nop
	...
 8019bd8:	3fe921fb 	.word	0x3fe921fb
 8019bdc:	7fefffff 	.word	0x7fefffff

08019be0 <round>:
 8019be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019be2:	ec57 6b10 	vmov	r6, r7, d0
 8019be6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8019bea:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8019bee:	2c13      	cmp	r4, #19
 8019bf0:	463b      	mov	r3, r7
 8019bf2:	463d      	mov	r5, r7
 8019bf4:	dc17      	bgt.n	8019c26 <round+0x46>
 8019bf6:	2c00      	cmp	r4, #0
 8019bf8:	da09      	bge.n	8019c0e <round+0x2e>
 8019bfa:	3401      	adds	r4, #1
 8019bfc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019c00:	d103      	bne.n	8019c0a <round+0x2a>
 8019c02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019c06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019c0a:	2100      	movs	r1, #0
 8019c0c:	e02c      	b.n	8019c68 <round+0x88>
 8019c0e:	4a18      	ldr	r2, [pc, #96]	; (8019c70 <round+0x90>)
 8019c10:	4122      	asrs	r2, r4
 8019c12:	4217      	tst	r7, r2
 8019c14:	d100      	bne.n	8019c18 <round+0x38>
 8019c16:	b19e      	cbz	r6, 8019c40 <round+0x60>
 8019c18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019c1c:	4123      	asrs	r3, r4
 8019c1e:	442b      	add	r3, r5
 8019c20:	ea23 0302 	bic.w	r3, r3, r2
 8019c24:	e7f1      	b.n	8019c0a <round+0x2a>
 8019c26:	2c33      	cmp	r4, #51	; 0x33
 8019c28:	dd0d      	ble.n	8019c46 <round+0x66>
 8019c2a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019c2e:	d107      	bne.n	8019c40 <round+0x60>
 8019c30:	4630      	mov	r0, r6
 8019c32:	4639      	mov	r1, r7
 8019c34:	ee10 2a10 	vmov	r2, s0
 8019c38:	f7e6 fb28 	bl	800028c <__adddf3>
 8019c3c:	4606      	mov	r6, r0
 8019c3e:	460f      	mov	r7, r1
 8019c40:	ec47 6b10 	vmov	d0, r6, r7
 8019c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c46:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8019c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8019c4e:	40d0      	lsrs	r0, r2
 8019c50:	4206      	tst	r6, r0
 8019c52:	d0f5      	beq.n	8019c40 <round+0x60>
 8019c54:	2201      	movs	r2, #1
 8019c56:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019c5a:	fa02 f404 	lsl.w	r4, r2, r4
 8019c5e:	1931      	adds	r1, r6, r4
 8019c60:	bf28      	it	cs
 8019c62:	189b      	addcs	r3, r3, r2
 8019c64:	ea21 0100 	bic.w	r1, r1, r0
 8019c68:	461f      	mov	r7, r3
 8019c6a:	460e      	mov	r6, r1
 8019c6c:	e7e8      	b.n	8019c40 <round+0x60>
 8019c6e:	bf00      	nop
 8019c70:	000fffff 	.word	0x000fffff
 8019c74:	00000000 	.word	0x00000000

08019c78 <sin>:
 8019c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c7a:	ec51 0b10 	vmov	r0, r1, d0
 8019c7e:	4a20      	ldr	r2, [pc, #128]	; (8019d00 <sin+0x88>)
 8019c80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019c84:	4293      	cmp	r3, r2
 8019c86:	dc07      	bgt.n	8019c98 <sin+0x20>
 8019c88:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019cf8 <sin+0x80>
 8019c8c:	2000      	movs	r0, #0
 8019c8e:	f001 f863 	bl	801ad58 <__kernel_sin>
 8019c92:	ec51 0b10 	vmov	r0, r1, d0
 8019c96:	e007      	b.n	8019ca8 <sin+0x30>
 8019c98:	4a1a      	ldr	r2, [pc, #104]	; (8019d04 <sin+0x8c>)
 8019c9a:	4293      	cmp	r3, r2
 8019c9c:	dd09      	ble.n	8019cb2 <sin+0x3a>
 8019c9e:	ee10 2a10 	vmov	r2, s0
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	f7e6 faf0 	bl	8000288 <__aeabi_dsub>
 8019ca8:	ec41 0b10 	vmov	d0, r0, r1
 8019cac:	b005      	add	sp, #20
 8019cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8019cb2:	4668      	mov	r0, sp
 8019cb4:	f000 f9a4 	bl	801a000 <__ieee754_rem_pio2>
 8019cb8:	f000 0003 	and.w	r0, r0, #3
 8019cbc:	2801      	cmp	r0, #1
 8019cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019cc2:	ed9d 0b00 	vldr	d0, [sp]
 8019cc6:	d004      	beq.n	8019cd2 <sin+0x5a>
 8019cc8:	2802      	cmp	r0, #2
 8019cca:	d005      	beq.n	8019cd8 <sin+0x60>
 8019ccc:	b970      	cbnz	r0, 8019cec <sin+0x74>
 8019cce:	2001      	movs	r0, #1
 8019cd0:	e7dd      	b.n	8019c8e <sin+0x16>
 8019cd2:	f000 fc39 	bl	801a548 <__kernel_cos>
 8019cd6:	e7dc      	b.n	8019c92 <sin+0x1a>
 8019cd8:	2001      	movs	r0, #1
 8019cda:	f001 f83d 	bl	801ad58 <__kernel_sin>
 8019cde:	ec53 2b10 	vmov	r2, r3, d0
 8019ce2:	ee10 0a10 	vmov	r0, s0
 8019ce6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019cea:	e7dd      	b.n	8019ca8 <sin+0x30>
 8019cec:	f000 fc2c 	bl	801a548 <__kernel_cos>
 8019cf0:	e7f5      	b.n	8019cde <sin+0x66>
 8019cf2:	bf00      	nop
 8019cf4:	f3af 8000 	nop.w
	...
 8019d00:	3fe921fb 	.word	0x3fe921fb
 8019d04:	7fefffff 	.word	0x7fefffff

08019d08 <ceilf>:
 8019d08:	ee10 3a10 	vmov	r3, s0
 8019d0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019d10:	0dca      	lsrs	r2, r1, #23
 8019d12:	3a7f      	subs	r2, #127	; 0x7f
 8019d14:	2a16      	cmp	r2, #22
 8019d16:	dc2a      	bgt.n	8019d6e <ceilf+0x66>
 8019d18:	2a00      	cmp	r2, #0
 8019d1a:	da11      	bge.n	8019d40 <ceilf+0x38>
 8019d1c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019d80 <ceilf+0x78>
 8019d20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019d24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d2c:	dd05      	ble.n	8019d3a <ceilf+0x32>
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	db23      	blt.n	8019d7a <ceilf+0x72>
 8019d32:	2900      	cmp	r1, #0
 8019d34:	bf18      	it	ne
 8019d36:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019d3a:	ee00 3a10 	vmov	s0, r3
 8019d3e:	4770      	bx	lr
 8019d40:	4910      	ldr	r1, [pc, #64]	; (8019d84 <ceilf+0x7c>)
 8019d42:	4111      	asrs	r1, r2
 8019d44:	420b      	tst	r3, r1
 8019d46:	d0fa      	beq.n	8019d3e <ceilf+0x36>
 8019d48:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019d80 <ceilf+0x78>
 8019d4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019d50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d58:	ddef      	ble.n	8019d3a <ceilf+0x32>
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	bfc2      	ittt	gt
 8019d5e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019d62:	fa40 f202 	asrgt.w	r2, r0, r2
 8019d66:	189b      	addgt	r3, r3, r2
 8019d68:	ea23 0301 	bic.w	r3, r3, r1
 8019d6c:	e7e5      	b.n	8019d3a <ceilf+0x32>
 8019d6e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019d72:	d3e4      	bcc.n	8019d3e <ceilf+0x36>
 8019d74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019d78:	4770      	bx	lr
 8019d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019d7e:	e7dc      	b.n	8019d3a <ceilf+0x32>
 8019d80:	7149f2ca 	.word	0x7149f2ca
 8019d84:	007fffff 	.word	0x007fffff

08019d88 <atan2>:
 8019d88:	f000 b85a 	b.w	8019e40 <__ieee754_atan2>

08019d8c <sqrt>:
 8019d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d90:	ed2d 8b02 	vpush	{d8}
 8019d94:	b08b      	sub	sp, #44	; 0x2c
 8019d96:	ec55 4b10 	vmov	r4, r5, d0
 8019d9a:	f000 fb23 	bl	801a3e4 <__ieee754_sqrt>
 8019d9e:	4b26      	ldr	r3, [pc, #152]	; (8019e38 <sqrt+0xac>)
 8019da0:	eeb0 8a40 	vmov.f32	s16, s0
 8019da4:	eef0 8a60 	vmov.f32	s17, s1
 8019da8:	f993 6000 	ldrsb.w	r6, [r3]
 8019dac:	1c73      	adds	r3, r6, #1
 8019dae:	d02a      	beq.n	8019e06 <sqrt+0x7a>
 8019db0:	4622      	mov	r2, r4
 8019db2:	462b      	mov	r3, r5
 8019db4:	4620      	mov	r0, r4
 8019db6:	4629      	mov	r1, r5
 8019db8:	f7e6 feb8 	bl	8000b2c <__aeabi_dcmpun>
 8019dbc:	4607      	mov	r7, r0
 8019dbe:	bb10      	cbnz	r0, 8019e06 <sqrt+0x7a>
 8019dc0:	f04f 0800 	mov.w	r8, #0
 8019dc4:	f04f 0900 	mov.w	r9, #0
 8019dc8:	4642      	mov	r2, r8
 8019dca:	464b      	mov	r3, r9
 8019dcc:	4620      	mov	r0, r4
 8019dce:	4629      	mov	r1, r5
 8019dd0:	f7e6 fe84 	bl	8000adc <__aeabi_dcmplt>
 8019dd4:	b1b8      	cbz	r0, 8019e06 <sqrt+0x7a>
 8019dd6:	2301      	movs	r3, #1
 8019dd8:	9300      	str	r3, [sp, #0]
 8019dda:	4b18      	ldr	r3, [pc, #96]	; (8019e3c <sqrt+0xb0>)
 8019ddc:	9301      	str	r3, [sp, #4]
 8019dde:	9708      	str	r7, [sp, #32]
 8019de0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019de4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019de8:	b9b6      	cbnz	r6, 8019e18 <sqrt+0x8c>
 8019dea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019dee:	4668      	mov	r0, sp
 8019df0:	f001 fa9e 	bl	801b330 <matherr>
 8019df4:	b1d0      	cbz	r0, 8019e2c <sqrt+0xa0>
 8019df6:	9b08      	ldr	r3, [sp, #32]
 8019df8:	b11b      	cbz	r3, 8019e02 <sqrt+0x76>
 8019dfa:	f7fc f885 	bl	8015f08 <__errno>
 8019dfe:	9b08      	ldr	r3, [sp, #32]
 8019e00:	6003      	str	r3, [r0, #0]
 8019e02:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019e06:	eeb0 0a48 	vmov.f32	s0, s16
 8019e0a:	eef0 0a68 	vmov.f32	s1, s17
 8019e0e:	b00b      	add	sp, #44	; 0x2c
 8019e10:	ecbd 8b02 	vpop	{d8}
 8019e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e18:	4642      	mov	r2, r8
 8019e1a:	464b      	mov	r3, r9
 8019e1c:	4640      	mov	r0, r8
 8019e1e:	4649      	mov	r1, r9
 8019e20:	f7e6 fd14 	bl	800084c <__aeabi_ddiv>
 8019e24:	2e02      	cmp	r6, #2
 8019e26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019e2a:	d1e0      	bne.n	8019dee <sqrt+0x62>
 8019e2c:	f7fc f86c 	bl	8015f08 <__errno>
 8019e30:	2321      	movs	r3, #33	; 0x21
 8019e32:	6003      	str	r3, [r0, #0]
 8019e34:	e7df      	b.n	8019df6 <sqrt+0x6a>
 8019e36:	bf00      	nop
 8019e38:	20000b7c 	.word	0x20000b7c
 8019e3c:	0801b9ee 	.word	0x0801b9ee

08019e40 <__ieee754_atan2>:
 8019e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e44:	ec57 6b11 	vmov	r6, r7, d1
 8019e48:	4273      	negs	r3, r6
 8019e4a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019e4e:	4333      	orrs	r3, r6
 8019e50:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019ff8 <__ieee754_atan2+0x1b8>
 8019e54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019e58:	4573      	cmp	r3, lr
 8019e5a:	ec51 0b10 	vmov	r0, r1, d0
 8019e5e:	ee11 8a10 	vmov	r8, s2
 8019e62:	d80a      	bhi.n	8019e7a <__ieee754_atan2+0x3a>
 8019e64:	4244      	negs	r4, r0
 8019e66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019e6a:	4304      	orrs	r4, r0
 8019e6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019e70:	4574      	cmp	r4, lr
 8019e72:	468c      	mov	ip, r1
 8019e74:	ee10 9a10 	vmov	r9, s0
 8019e78:	d907      	bls.n	8019e8a <__ieee754_atan2+0x4a>
 8019e7a:	4632      	mov	r2, r6
 8019e7c:	463b      	mov	r3, r7
 8019e7e:	f7e6 fa05 	bl	800028c <__adddf3>
 8019e82:	ec41 0b10 	vmov	d0, r0, r1
 8019e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019e8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019e92:	4334      	orrs	r4, r6
 8019e94:	d103      	bne.n	8019e9e <__ieee754_atan2+0x5e>
 8019e96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e9a:	f001 b819 	b.w	801aed0 <atan>
 8019e9e:	17bc      	asrs	r4, r7, #30
 8019ea0:	f004 0402 	and.w	r4, r4, #2
 8019ea4:	ea53 0909 	orrs.w	r9, r3, r9
 8019ea8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019eac:	d107      	bne.n	8019ebe <__ieee754_atan2+0x7e>
 8019eae:	2c02      	cmp	r4, #2
 8019eb0:	d073      	beq.n	8019f9a <__ieee754_atan2+0x15a>
 8019eb2:	2c03      	cmp	r4, #3
 8019eb4:	d1e5      	bne.n	8019e82 <__ieee754_atan2+0x42>
 8019eb6:	a13e      	add	r1, pc, #248	; (adr r1, 8019fb0 <__ieee754_atan2+0x170>)
 8019eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ebc:	e7e1      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019ebe:	ea52 0808 	orrs.w	r8, r2, r8
 8019ec2:	d106      	bne.n	8019ed2 <__ieee754_atan2+0x92>
 8019ec4:	f1bc 0f00 	cmp.w	ip, #0
 8019ec8:	da6b      	bge.n	8019fa2 <__ieee754_atan2+0x162>
 8019eca:	a13b      	add	r1, pc, #236	; (adr r1, 8019fb8 <__ieee754_atan2+0x178>)
 8019ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ed0:	e7d7      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019ed2:	4572      	cmp	r2, lr
 8019ed4:	d120      	bne.n	8019f18 <__ieee754_atan2+0xd8>
 8019ed6:	4293      	cmp	r3, r2
 8019ed8:	d111      	bne.n	8019efe <__ieee754_atan2+0xbe>
 8019eda:	2c02      	cmp	r4, #2
 8019edc:	d007      	beq.n	8019eee <__ieee754_atan2+0xae>
 8019ede:	2c03      	cmp	r4, #3
 8019ee0:	d009      	beq.n	8019ef6 <__ieee754_atan2+0xb6>
 8019ee2:	2c01      	cmp	r4, #1
 8019ee4:	d155      	bne.n	8019f92 <__ieee754_atan2+0x152>
 8019ee6:	a136      	add	r1, pc, #216	; (adr r1, 8019fc0 <__ieee754_atan2+0x180>)
 8019ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019eec:	e7c9      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019eee:	a136      	add	r1, pc, #216	; (adr r1, 8019fc8 <__ieee754_atan2+0x188>)
 8019ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ef4:	e7c5      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019ef6:	a136      	add	r1, pc, #216	; (adr r1, 8019fd0 <__ieee754_atan2+0x190>)
 8019ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019efc:	e7c1      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019efe:	2c02      	cmp	r4, #2
 8019f00:	d04b      	beq.n	8019f9a <__ieee754_atan2+0x15a>
 8019f02:	2c03      	cmp	r4, #3
 8019f04:	d0d7      	beq.n	8019eb6 <__ieee754_atan2+0x76>
 8019f06:	2c01      	cmp	r4, #1
 8019f08:	f04f 0000 	mov.w	r0, #0
 8019f0c:	d102      	bne.n	8019f14 <__ieee754_atan2+0xd4>
 8019f0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019f12:	e7b6      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019f14:	2100      	movs	r1, #0
 8019f16:	e7b4      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019f18:	4573      	cmp	r3, lr
 8019f1a:	d0d3      	beq.n	8019ec4 <__ieee754_atan2+0x84>
 8019f1c:	1a9b      	subs	r3, r3, r2
 8019f1e:	151b      	asrs	r3, r3, #20
 8019f20:	2b3c      	cmp	r3, #60	; 0x3c
 8019f22:	dc1e      	bgt.n	8019f62 <__ieee754_atan2+0x122>
 8019f24:	2f00      	cmp	r7, #0
 8019f26:	da01      	bge.n	8019f2c <__ieee754_atan2+0xec>
 8019f28:	333c      	adds	r3, #60	; 0x3c
 8019f2a:	db1e      	blt.n	8019f6a <__ieee754_atan2+0x12a>
 8019f2c:	4632      	mov	r2, r6
 8019f2e:	463b      	mov	r3, r7
 8019f30:	f7e6 fc8c 	bl	800084c <__aeabi_ddiv>
 8019f34:	ec41 0b10 	vmov	d0, r0, r1
 8019f38:	f001 f96a 	bl	801b210 <fabs>
 8019f3c:	f000 ffc8 	bl	801aed0 <atan>
 8019f40:	ec51 0b10 	vmov	r0, r1, d0
 8019f44:	2c01      	cmp	r4, #1
 8019f46:	d013      	beq.n	8019f70 <__ieee754_atan2+0x130>
 8019f48:	2c02      	cmp	r4, #2
 8019f4a:	d015      	beq.n	8019f78 <__ieee754_atan2+0x138>
 8019f4c:	2c00      	cmp	r4, #0
 8019f4e:	d098      	beq.n	8019e82 <__ieee754_atan2+0x42>
 8019f50:	a321      	add	r3, pc, #132	; (adr r3, 8019fd8 <__ieee754_atan2+0x198>)
 8019f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f56:	f7e6 f997 	bl	8000288 <__aeabi_dsub>
 8019f5a:	a321      	add	r3, pc, #132	; (adr r3, 8019fe0 <__ieee754_atan2+0x1a0>)
 8019f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f60:	e014      	b.n	8019f8c <__ieee754_atan2+0x14c>
 8019f62:	a121      	add	r1, pc, #132	; (adr r1, 8019fe8 <__ieee754_atan2+0x1a8>)
 8019f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f68:	e7ec      	b.n	8019f44 <__ieee754_atan2+0x104>
 8019f6a:	2000      	movs	r0, #0
 8019f6c:	2100      	movs	r1, #0
 8019f6e:	e7e9      	b.n	8019f44 <__ieee754_atan2+0x104>
 8019f70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f74:	4619      	mov	r1, r3
 8019f76:	e784      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019f78:	a317      	add	r3, pc, #92	; (adr r3, 8019fd8 <__ieee754_atan2+0x198>)
 8019f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f7e:	f7e6 f983 	bl	8000288 <__aeabi_dsub>
 8019f82:	4602      	mov	r2, r0
 8019f84:	460b      	mov	r3, r1
 8019f86:	a116      	add	r1, pc, #88	; (adr r1, 8019fe0 <__ieee754_atan2+0x1a0>)
 8019f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f8c:	f7e6 f97c 	bl	8000288 <__aeabi_dsub>
 8019f90:	e777      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019f92:	a117      	add	r1, pc, #92	; (adr r1, 8019ff0 <__ieee754_atan2+0x1b0>)
 8019f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f98:	e773      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019f9a:	a111      	add	r1, pc, #68	; (adr r1, 8019fe0 <__ieee754_atan2+0x1a0>)
 8019f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fa0:	e76f      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019fa2:	a111      	add	r1, pc, #68	; (adr r1, 8019fe8 <__ieee754_atan2+0x1a8>)
 8019fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fa8:	e76b      	b.n	8019e82 <__ieee754_atan2+0x42>
 8019faa:	bf00      	nop
 8019fac:	f3af 8000 	nop.w
 8019fb0:	54442d18 	.word	0x54442d18
 8019fb4:	c00921fb 	.word	0xc00921fb
 8019fb8:	54442d18 	.word	0x54442d18
 8019fbc:	bff921fb 	.word	0xbff921fb
 8019fc0:	54442d18 	.word	0x54442d18
 8019fc4:	bfe921fb 	.word	0xbfe921fb
 8019fc8:	7f3321d2 	.word	0x7f3321d2
 8019fcc:	4002d97c 	.word	0x4002d97c
 8019fd0:	7f3321d2 	.word	0x7f3321d2
 8019fd4:	c002d97c 	.word	0xc002d97c
 8019fd8:	33145c07 	.word	0x33145c07
 8019fdc:	3ca1a626 	.word	0x3ca1a626
 8019fe0:	54442d18 	.word	0x54442d18
 8019fe4:	400921fb 	.word	0x400921fb
 8019fe8:	54442d18 	.word	0x54442d18
 8019fec:	3ff921fb 	.word	0x3ff921fb
 8019ff0:	54442d18 	.word	0x54442d18
 8019ff4:	3fe921fb 	.word	0x3fe921fb
 8019ff8:	7ff00000 	.word	0x7ff00000
 8019ffc:	00000000 	.word	0x00000000

0801a000 <__ieee754_rem_pio2>:
 801a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a004:	ec57 6b10 	vmov	r6, r7, d0
 801a008:	4bc3      	ldr	r3, [pc, #780]	; (801a318 <__ieee754_rem_pio2+0x318>)
 801a00a:	b08d      	sub	sp, #52	; 0x34
 801a00c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a010:	4598      	cmp	r8, r3
 801a012:	4604      	mov	r4, r0
 801a014:	9704      	str	r7, [sp, #16]
 801a016:	dc07      	bgt.n	801a028 <__ieee754_rem_pio2+0x28>
 801a018:	2200      	movs	r2, #0
 801a01a:	2300      	movs	r3, #0
 801a01c:	ed84 0b00 	vstr	d0, [r4]
 801a020:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a024:	2500      	movs	r5, #0
 801a026:	e027      	b.n	801a078 <__ieee754_rem_pio2+0x78>
 801a028:	4bbc      	ldr	r3, [pc, #752]	; (801a31c <__ieee754_rem_pio2+0x31c>)
 801a02a:	4598      	cmp	r8, r3
 801a02c:	dc75      	bgt.n	801a11a <__ieee754_rem_pio2+0x11a>
 801a02e:	9b04      	ldr	r3, [sp, #16]
 801a030:	4dbb      	ldr	r5, [pc, #748]	; (801a320 <__ieee754_rem_pio2+0x320>)
 801a032:	2b00      	cmp	r3, #0
 801a034:	ee10 0a10 	vmov	r0, s0
 801a038:	a3a9      	add	r3, pc, #676	; (adr r3, 801a2e0 <__ieee754_rem_pio2+0x2e0>)
 801a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a03e:	4639      	mov	r1, r7
 801a040:	dd36      	ble.n	801a0b0 <__ieee754_rem_pio2+0xb0>
 801a042:	f7e6 f921 	bl	8000288 <__aeabi_dsub>
 801a046:	45a8      	cmp	r8, r5
 801a048:	4606      	mov	r6, r0
 801a04a:	460f      	mov	r7, r1
 801a04c:	d018      	beq.n	801a080 <__ieee754_rem_pio2+0x80>
 801a04e:	a3a6      	add	r3, pc, #664	; (adr r3, 801a2e8 <__ieee754_rem_pio2+0x2e8>)
 801a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a054:	f7e6 f918 	bl	8000288 <__aeabi_dsub>
 801a058:	4602      	mov	r2, r0
 801a05a:	460b      	mov	r3, r1
 801a05c:	e9c4 2300 	strd	r2, r3, [r4]
 801a060:	4630      	mov	r0, r6
 801a062:	4639      	mov	r1, r7
 801a064:	f7e6 f910 	bl	8000288 <__aeabi_dsub>
 801a068:	a39f      	add	r3, pc, #636	; (adr r3, 801a2e8 <__ieee754_rem_pio2+0x2e8>)
 801a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a06e:	f7e6 f90b 	bl	8000288 <__aeabi_dsub>
 801a072:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a076:	2501      	movs	r5, #1
 801a078:	4628      	mov	r0, r5
 801a07a:	b00d      	add	sp, #52	; 0x34
 801a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a080:	a39b      	add	r3, pc, #620	; (adr r3, 801a2f0 <__ieee754_rem_pio2+0x2f0>)
 801a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a086:	f7e6 f8ff 	bl	8000288 <__aeabi_dsub>
 801a08a:	a39b      	add	r3, pc, #620	; (adr r3, 801a2f8 <__ieee754_rem_pio2+0x2f8>)
 801a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a090:	4606      	mov	r6, r0
 801a092:	460f      	mov	r7, r1
 801a094:	f7e6 f8f8 	bl	8000288 <__aeabi_dsub>
 801a098:	4602      	mov	r2, r0
 801a09a:	460b      	mov	r3, r1
 801a09c:	e9c4 2300 	strd	r2, r3, [r4]
 801a0a0:	4630      	mov	r0, r6
 801a0a2:	4639      	mov	r1, r7
 801a0a4:	f7e6 f8f0 	bl	8000288 <__aeabi_dsub>
 801a0a8:	a393      	add	r3, pc, #588	; (adr r3, 801a2f8 <__ieee754_rem_pio2+0x2f8>)
 801a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ae:	e7de      	b.n	801a06e <__ieee754_rem_pio2+0x6e>
 801a0b0:	f7e6 f8ec 	bl	800028c <__adddf3>
 801a0b4:	45a8      	cmp	r8, r5
 801a0b6:	4606      	mov	r6, r0
 801a0b8:	460f      	mov	r7, r1
 801a0ba:	d016      	beq.n	801a0ea <__ieee754_rem_pio2+0xea>
 801a0bc:	a38a      	add	r3, pc, #552	; (adr r3, 801a2e8 <__ieee754_rem_pio2+0x2e8>)
 801a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0c2:	f7e6 f8e3 	bl	800028c <__adddf3>
 801a0c6:	4602      	mov	r2, r0
 801a0c8:	460b      	mov	r3, r1
 801a0ca:	e9c4 2300 	strd	r2, r3, [r4]
 801a0ce:	4630      	mov	r0, r6
 801a0d0:	4639      	mov	r1, r7
 801a0d2:	f7e6 f8d9 	bl	8000288 <__aeabi_dsub>
 801a0d6:	a384      	add	r3, pc, #528	; (adr r3, 801a2e8 <__ieee754_rem_pio2+0x2e8>)
 801a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0dc:	f7e6 f8d6 	bl	800028c <__adddf3>
 801a0e0:	f04f 35ff 	mov.w	r5, #4294967295
 801a0e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a0e8:	e7c6      	b.n	801a078 <__ieee754_rem_pio2+0x78>
 801a0ea:	a381      	add	r3, pc, #516	; (adr r3, 801a2f0 <__ieee754_rem_pio2+0x2f0>)
 801a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f0:	f7e6 f8cc 	bl	800028c <__adddf3>
 801a0f4:	a380      	add	r3, pc, #512	; (adr r3, 801a2f8 <__ieee754_rem_pio2+0x2f8>)
 801a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0fa:	4606      	mov	r6, r0
 801a0fc:	460f      	mov	r7, r1
 801a0fe:	f7e6 f8c5 	bl	800028c <__adddf3>
 801a102:	4602      	mov	r2, r0
 801a104:	460b      	mov	r3, r1
 801a106:	e9c4 2300 	strd	r2, r3, [r4]
 801a10a:	4630      	mov	r0, r6
 801a10c:	4639      	mov	r1, r7
 801a10e:	f7e6 f8bb 	bl	8000288 <__aeabi_dsub>
 801a112:	a379      	add	r3, pc, #484	; (adr r3, 801a2f8 <__ieee754_rem_pio2+0x2f8>)
 801a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a118:	e7e0      	b.n	801a0dc <__ieee754_rem_pio2+0xdc>
 801a11a:	4b82      	ldr	r3, [pc, #520]	; (801a324 <__ieee754_rem_pio2+0x324>)
 801a11c:	4598      	cmp	r8, r3
 801a11e:	f300 80d0 	bgt.w	801a2c2 <__ieee754_rem_pio2+0x2c2>
 801a122:	f001 f875 	bl	801b210 <fabs>
 801a126:	ec57 6b10 	vmov	r6, r7, d0
 801a12a:	ee10 0a10 	vmov	r0, s0
 801a12e:	a374      	add	r3, pc, #464	; (adr r3, 801a300 <__ieee754_rem_pio2+0x300>)
 801a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a134:	4639      	mov	r1, r7
 801a136:	f7e6 fa5f 	bl	80005f8 <__aeabi_dmul>
 801a13a:	2200      	movs	r2, #0
 801a13c:	4b7a      	ldr	r3, [pc, #488]	; (801a328 <__ieee754_rem_pio2+0x328>)
 801a13e:	f7e6 f8a5 	bl	800028c <__adddf3>
 801a142:	f7e6 fd09 	bl	8000b58 <__aeabi_d2iz>
 801a146:	4605      	mov	r5, r0
 801a148:	f7e6 f9ec 	bl	8000524 <__aeabi_i2d>
 801a14c:	a364      	add	r3, pc, #400	; (adr r3, 801a2e0 <__ieee754_rem_pio2+0x2e0>)
 801a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a156:	f7e6 fa4f 	bl	80005f8 <__aeabi_dmul>
 801a15a:	4602      	mov	r2, r0
 801a15c:	460b      	mov	r3, r1
 801a15e:	4630      	mov	r0, r6
 801a160:	4639      	mov	r1, r7
 801a162:	f7e6 f891 	bl	8000288 <__aeabi_dsub>
 801a166:	a360      	add	r3, pc, #384	; (adr r3, 801a2e8 <__ieee754_rem_pio2+0x2e8>)
 801a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a16c:	4682      	mov	sl, r0
 801a16e:	468b      	mov	fp, r1
 801a170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a174:	f7e6 fa40 	bl	80005f8 <__aeabi_dmul>
 801a178:	2d1f      	cmp	r5, #31
 801a17a:	4606      	mov	r6, r0
 801a17c:	460f      	mov	r7, r1
 801a17e:	dc0c      	bgt.n	801a19a <__ieee754_rem_pio2+0x19a>
 801a180:	1e6a      	subs	r2, r5, #1
 801a182:	4b6a      	ldr	r3, [pc, #424]	; (801a32c <__ieee754_rem_pio2+0x32c>)
 801a184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a188:	4543      	cmp	r3, r8
 801a18a:	d006      	beq.n	801a19a <__ieee754_rem_pio2+0x19a>
 801a18c:	4632      	mov	r2, r6
 801a18e:	463b      	mov	r3, r7
 801a190:	4650      	mov	r0, sl
 801a192:	4659      	mov	r1, fp
 801a194:	f7e6 f878 	bl	8000288 <__aeabi_dsub>
 801a198:	e00e      	b.n	801a1b8 <__ieee754_rem_pio2+0x1b8>
 801a19a:	4632      	mov	r2, r6
 801a19c:	463b      	mov	r3, r7
 801a19e:	4650      	mov	r0, sl
 801a1a0:	4659      	mov	r1, fp
 801a1a2:	f7e6 f871 	bl	8000288 <__aeabi_dsub>
 801a1a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a1aa:	9305      	str	r3, [sp, #20]
 801a1ac:	9a05      	ldr	r2, [sp, #20]
 801a1ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a1b2:	1ad3      	subs	r3, r2, r3
 801a1b4:	2b10      	cmp	r3, #16
 801a1b6:	dc02      	bgt.n	801a1be <__ieee754_rem_pio2+0x1be>
 801a1b8:	e9c4 0100 	strd	r0, r1, [r4]
 801a1bc:	e039      	b.n	801a232 <__ieee754_rem_pio2+0x232>
 801a1be:	a34c      	add	r3, pc, #304	; (adr r3, 801a2f0 <__ieee754_rem_pio2+0x2f0>)
 801a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a1c8:	f7e6 fa16 	bl	80005f8 <__aeabi_dmul>
 801a1cc:	4606      	mov	r6, r0
 801a1ce:	460f      	mov	r7, r1
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	460b      	mov	r3, r1
 801a1d4:	4650      	mov	r0, sl
 801a1d6:	4659      	mov	r1, fp
 801a1d8:	f7e6 f856 	bl	8000288 <__aeabi_dsub>
 801a1dc:	4602      	mov	r2, r0
 801a1de:	460b      	mov	r3, r1
 801a1e0:	4680      	mov	r8, r0
 801a1e2:	4689      	mov	r9, r1
 801a1e4:	4650      	mov	r0, sl
 801a1e6:	4659      	mov	r1, fp
 801a1e8:	f7e6 f84e 	bl	8000288 <__aeabi_dsub>
 801a1ec:	4632      	mov	r2, r6
 801a1ee:	463b      	mov	r3, r7
 801a1f0:	f7e6 f84a 	bl	8000288 <__aeabi_dsub>
 801a1f4:	a340      	add	r3, pc, #256	; (adr r3, 801a2f8 <__ieee754_rem_pio2+0x2f8>)
 801a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1fa:	4606      	mov	r6, r0
 801a1fc:	460f      	mov	r7, r1
 801a1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a202:	f7e6 f9f9 	bl	80005f8 <__aeabi_dmul>
 801a206:	4632      	mov	r2, r6
 801a208:	463b      	mov	r3, r7
 801a20a:	f7e6 f83d 	bl	8000288 <__aeabi_dsub>
 801a20e:	4602      	mov	r2, r0
 801a210:	460b      	mov	r3, r1
 801a212:	4606      	mov	r6, r0
 801a214:	460f      	mov	r7, r1
 801a216:	4640      	mov	r0, r8
 801a218:	4649      	mov	r1, r9
 801a21a:	f7e6 f835 	bl	8000288 <__aeabi_dsub>
 801a21e:	9a05      	ldr	r2, [sp, #20]
 801a220:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a224:	1ad3      	subs	r3, r2, r3
 801a226:	2b31      	cmp	r3, #49	; 0x31
 801a228:	dc20      	bgt.n	801a26c <__ieee754_rem_pio2+0x26c>
 801a22a:	e9c4 0100 	strd	r0, r1, [r4]
 801a22e:	46c2      	mov	sl, r8
 801a230:	46cb      	mov	fp, r9
 801a232:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a236:	4650      	mov	r0, sl
 801a238:	4642      	mov	r2, r8
 801a23a:	464b      	mov	r3, r9
 801a23c:	4659      	mov	r1, fp
 801a23e:	f7e6 f823 	bl	8000288 <__aeabi_dsub>
 801a242:	463b      	mov	r3, r7
 801a244:	4632      	mov	r2, r6
 801a246:	f7e6 f81f 	bl	8000288 <__aeabi_dsub>
 801a24a:	9b04      	ldr	r3, [sp, #16]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a252:	f6bf af11 	bge.w	801a078 <__ieee754_rem_pio2+0x78>
 801a256:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a25a:	6063      	str	r3, [r4, #4]
 801a25c:	f8c4 8000 	str.w	r8, [r4]
 801a260:	60a0      	str	r0, [r4, #8]
 801a262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a266:	60e3      	str	r3, [r4, #12]
 801a268:	426d      	negs	r5, r5
 801a26a:	e705      	b.n	801a078 <__ieee754_rem_pio2+0x78>
 801a26c:	a326      	add	r3, pc, #152	; (adr r3, 801a308 <__ieee754_rem_pio2+0x308>)
 801a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a276:	f7e6 f9bf 	bl	80005f8 <__aeabi_dmul>
 801a27a:	4606      	mov	r6, r0
 801a27c:	460f      	mov	r7, r1
 801a27e:	4602      	mov	r2, r0
 801a280:	460b      	mov	r3, r1
 801a282:	4640      	mov	r0, r8
 801a284:	4649      	mov	r1, r9
 801a286:	f7e5 ffff 	bl	8000288 <__aeabi_dsub>
 801a28a:	4602      	mov	r2, r0
 801a28c:	460b      	mov	r3, r1
 801a28e:	4682      	mov	sl, r0
 801a290:	468b      	mov	fp, r1
 801a292:	4640      	mov	r0, r8
 801a294:	4649      	mov	r1, r9
 801a296:	f7e5 fff7 	bl	8000288 <__aeabi_dsub>
 801a29a:	4632      	mov	r2, r6
 801a29c:	463b      	mov	r3, r7
 801a29e:	f7e5 fff3 	bl	8000288 <__aeabi_dsub>
 801a2a2:	a31b      	add	r3, pc, #108	; (adr r3, 801a310 <__ieee754_rem_pio2+0x310>)
 801a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a8:	4606      	mov	r6, r0
 801a2aa:	460f      	mov	r7, r1
 801a2ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a2b0:	f7e6 f9a2 	bl	80005f8 <__aeabi_dmul>
 801a2b4:	4632      	mov	r2, r6
 801a2b6:	463b      	mov	r3, r7
 801a2b8:	f7e5 ffe6 	bl	8000288 <__aeabi_dsub>
 801a2bc:	4606      	mov	r6, r0
 801a2be:	460f      	mov	r7, r1
 801a2c0:	e764      	b.n	801a18c <__ieee754_rem_pio2+0x18c>
 801a2c2:	4b1b      	ldr	r3, [pc, #108]	; (801a330 <__ieee754_rem_pio2+0x330>)
 801a2c4:	4598      	cmp	r8, r3
 801a2c6:	dd35      	ble.n	801a334 <__ieee754_rem_pio2+0x334>
 801a2c8:	ee10 2a10 	vmov	r2, s0
 801a2cc:	463b      	mov	r3, r7
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	4639      	mov	r1, r7
 801a2d2:	f7e5 ffd9 	bl	8000288 <__aeabi_dsub>
 801a2d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a2da:	e9c4 0100 	strd	r0, r1, [r4]
 801a2de:	e6a1      	b.n	801a024 <__ieee754_rem_pio2+0x24>
 801a2e0:	54400000 	.word	0x54400000
 801a2e4:	3ff921fb 	.word	0x3ff921fb
 801a2e8:	1a626331 	.word	0x1a626331
 801a2ec:	3dd0b461 	.word	0x3dd0b461
 801a2f0:	1a600000 	.word	0x1a600000
 801a2f4:	3dd0b461 	.word	0x3dd0b461
 801a2f8:	2e037073 	.word	0x2e037073
 801a2fc:	3ba3198a 	.word	0x3ba3198a
 801a300:	6dc9c883 	.word	0x6dc9c883
 801a304:	3fe45f30 	.word	0x3fe45f30
 801a308:	2e000000 	.word	0x2e000000
 801a30c:	3ba3198a 	.word	0x3ba3198a
 801a310:	252049c1 	.word	0x252049c1
 801a314:	397b839a 	.word	0x397b839a
 801a318:	3fe921fb 	.word	0x3fe921fb
 801a31c:	4002d97b 	.word	0x4002d97b
 801a320:	3ff921fb 	.word	0x3ff921fb
 801a324:	413921fb 	.word	0x413921fb
 801a328:	3fe00000 	.word	0x3fe00000
 801a32c:	0801b9f4 	.word	0x0801b9f4
 801a330:	7fefffff 	.word	0x7fefffff
 801a334:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a338:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a33c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a340:	4630      	mov	r0, r6
 801a342:	460f      	mov	r7, r1
 801a344:	f7e6 fc08 	bl	8000b58 <__aeabi_d2iz>
 801a348:	f7e6 f8ec 	bl	8000524 <__aeabi_i2d>
 801a34c:	4602      	mov	r2, r0
 801a34e:	460b      	mov	r3, r1
 801a350:	4630      	mov	r0, r6
 801a352:	4639      	mov	r1, r7
 801a354:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a358:	f7e5 ff96 	bl	8000288 <__aeabi_dsub>
 801a35c:	2200      	movs	r2, #0
 801a35e:	4b1f      	ldr	r3, [pc, #124]	; (801a3dc <__ieee754_rem_pio2+0x3dc>)
 801a360:	f7e6 f94a 	bl	80005f8 <__aeabi_dmul>
 801a364:	460f      	mov	r7, r1
 801a366:	4606      	mov	r6, r0
 801a368:	f7e6 fbf6 	bl	8000b58 <__aeabi_d2iz>
 801a36c:	f7e6 f8da 	bl	8000524 <__aeabi_i2d>
 801a370:	4602      	mov	r2, r0
 801a372:	460b      	mov	r3, r1
 801a374:	4630      	mov	r0, r6
 801a376:	4639      	mov	r1, r7
 801a378:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a37c:	f7e5 ff84 	bl	8000288 <__aeabi_dsub>
 801a380:	2200      	movs	r2, #0
 801a382:	4b16      	ldr	r3, [pc, #88]	; (801a3dc <__ieee754_rem_pio2+0x3dc>)
 801a384:	f7e6 f938 	bl	80005f8 <__aeabi_dmul>
 801a388:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a38c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a390:	f04f 0803 	mov.w	r8, #3
 801a394:	2600      	movs	r6, #0
 801a396:	2700      	movs	r7, #0
 801a398:	4632      	mov	r2, r6
 801a39a:	463b      	mov	r3, r7
 801a39c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a3a0:	f108 3aff 	add.w	sl, r8, #4294967295
 801a3a4:	f7e6 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 801a3a8:	b9b0      	cbnz	r0, 801a3d8 <__ieee754_rem_pio2+0x3d8>
 801a3aa:	4b0d      	ldr	r3, [pc, #52]	; (801a3e0 <__ieee754_rem_pio2+0x3e0>)
 801a3ac:	9301      	str	r3, [sp, #4]
 801a3ae:	2302      	movs	r3, #2
 801a3b0:	9300      	str	r3, [sp, #0]
 801a3b2:	462a      	mov	r2, r5
 801a3b4:	4643      	mov	r3, r8
 801a3b6:	4621      	mov	r1, r4
 801a3b8:	a806      	add	r0, sp, #24
 801a3ba:	f000 f98d 	bl	801a6d8 <__kernel_rem_pio2>
 801a3be:	9b04      	ldr	r3, [sp, #16]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	4605      	mov	r5, r0
 801a3c4:	f6bf ae58 	bge.w	801a078 <__ieee754_rem_pio2+0x78>
 801a3c8:	6863      	ldr	r3, [r4, #4]
 801a3ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a3ce:	6063      	str	r3, [r4, #4]
 801a3d0:	68e3      	ldr	r3, [r4, #12]
 801a3d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a3d6:	e746      	b.n	801a266 <__ieee754_rem_pio2+0x266>
 801a3d8:	46d0      	mov	r8, sl
 801a3da:	e7dd      	b.n	801a398 <__ieee754_rem_pio2+0x398>
 801a3dc:	41700000 	.word	0x41700000
 801a3e0:	0801ba74 	.word	0x0801ba74

0801a3e4 <__ieee754_sqrt>:
 801a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3e8:	4955      	ldr	r1, [pc, #340]	; (801a540 <__ieee754_sqrt+0x15c>)
 801a3ea:	ec55 4b10 	vmov	r4, r5, d0
 801a3ee:	43a9      	bics	r1, r5
 801a3f0:	462b      	mov	r3, r5
 801a3f2:	462a      	mov	r2, r5
 801a3f4:	d112      	bne.n	801a41c <__ieee754_sqrt+0x38>
 801a3f6:	ee10 2a10 	vmov	r2, s0
 801a3fa:	ee10 0a10 	vmov	r0, s0
 801a3fe:	4629      	mov	r1, r5
 801a400:	f7e6 f8fa 	bl	80005f8 <__aeabi_dmul>
 801a404:	4602      	mov	r2, r0
 801a406:	460b      	mov	r3, r1
 801a408:	4620      	mov	r0, r4
 801a40a:	4629      	mov	r1, r5
 801a40c:	f7e5 ff3e 	bl	800028c <__adddf3>
 801a410:	4604      	mov	r4, r0
 801a412:	460d      	mov	r5, r1
 801a414:	ec45 4b10 	vmov	d0, r4, r5
 801a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a41c:	2d00      	cmp	r5, #0
 801a41e:	ee10 0a10 	vmov	r0, s0
 801a422:	4621      	mov	r1, r4
 801a424:	dc0f      	bgt.n	801a446 <__ieee754_sqrt+0x62>
 801a426:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a42a:	4330      	orrs	r0, r6
 801a42c:	d0f2      	beq.n	801a414 <__ieee754_sqrt+0x30>
 801a42e:	b155      	cbz	r5, 801a446 <__ieee754_sqrt+0x62>
 801a430:	ee10 2a10 	vmov	r2, s0
 801a434:	4620      	mov	r0, r4
 801a436:	4629      	mov	r1, r5
 801a438:	f7e5 ff26 	bl	8000288 <__aeabi_dsub>
 801a43c:	4602      	mov	r2, r0
 801a43e:	460b      	mov	r3, r1
 801a440:	f7e6 fa04 	bl	800084c <__aeabi_ddiv>
 801a444:	e7e4      	b.n	801a410 <__ieee754_sqrt+0x2c>
 801a446:	151b      	asrs	r3, r3, #20
 801a448:	d073      	beq.n	801a532 <__ieee754_sqrt+0x14e>
 801a44a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a44e:	07dd      	lsls	r5, r3, #31
 801a450:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a454:	bf48      	it	mi
 801a456:	0fc8      	lsrmi	r0, r1, #31
 801a458:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a45c:	bf44      	itt	mi
 801a45e:	0049      	lslmi	r1, r1, #1
 801a460:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a464:	2500      	movs	r5, #0
 801a466:	1058      	asrs	r0, r3, #1
 801a468:	0fcb      	lsrs	r3, r1, #31
 801a46a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a46e:	0049      	lsls	r1, r1, #1
 801a470:	2316      	movs	r3, #22
 801a472:	462c      	mov	r4, r5
 801a474:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a478:	19a7      	adds	r7, r4, r6
 801a47a:	4297      	cmp	r7, r2
 801a47c:	bfde      	ittt	le
 801a47e:	19bc      	addle	r4, r7, r6
 801a480:	1bd2      	suble	r2, r2, r7
 801a482:	19ad      	addle	r5, r5, r6
 801a484:	0fcf      	lsrs	r7, r1, #31
 801a486:	3b01      	subs	r3, #1
 801a488:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a48c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a490:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a494:	d1f0      	bne.n	801a478 <__ieee754_sqrt+0x94>
 801a496:	f04f 0c20 	mov.w	ip, #32
 801a49a:	469e      	mov	lr, r3
 801a49c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a4a0:	42a2      	cmp	r2, r4
 801a4a2:	eb06 070e 	add.w	r7, r6, lr
 801a4a6:	dc02      	bgt.n	801a4ae <__ieee754_sqrt+0xca>
 801a4a8:	d112      	bne.n	801a4d0 <__ieee754_sqrt+0xec>
 801a4aa:	428f      	cmp	r7, r1
 801a4ac:	d810      	bhi.n	801a4d0 <__ieee754_sqrt+0xec>
 801a4ae:	2f00      	cmp	r7, #0
 801a4b0:	eb07 0e06 	add.w	lr, r7, r6
 801a4b4:	da42      	bge.n	801a53c <__ieee754_sqrt+0x158>
 801a4b6:	f1be 0f00 	cmp.w	lr, #0
 801a4ba:	db3f      	blt.n	801a53c <__ieee754_sqrt+0x158>
 801a4bc:	f104 0801 	add.w	r8, r4, #1
 801a4c0:	1b12      	subs	r2, r2, r4
 801a4c2:	428f      	cmp	r7, r1
 801a4c4:	bf88      	it	hi
 801a4c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a4ca:	1bc9      	subs	r1, r1, r7
 801a4cc:	4433      	add	r3, r6
 801a4ce:	4644      	mov	r4, r8
 801a4d0:	0052      	lsls	r2, r2, #1
 801a4d2:	f1bc 0c01 	subs.w	ip, ip, #1
 801a4d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a4da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a4de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a4e2:	d1dd      	bne.n	801a4a0 <__ieee754_sqrt+0xbc>
 801a4e4:	430a      	orrs	r2, r1
 801a4e6:	d006      	beq.n	801a4f6 <__ieee754_sqrt+0x112>
 801a4e8:	1c5c      	adds	r4, r3, #1
 801a4ea:	bf13      	iteet	ne
 801a4ec:	3301      	addne	r3, #1
 801a4ee:	3501      	addeq	r5, #1
 801a4f0:	4663      	moveq	r3, ip
 801a4f2:	f023 0301 	bicne.w	r3, r3, #1
 801a4f6:	106a      	asrs	r2, r5, #1
 801a4f8:	085b      	lsrs	r3, r3, #1
 801a4fa:	07e9      	lsls	r1, r5, #31
 801a4fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a500:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a504:	bf48      	it	mi
 801a506:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a50a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a50e:	461c      	mov	r4, r3
 801a510:	e780      	b.n	801a414 <__ieee754_sqrt+0x30>
 801a512:	0aca      	lsrs	r2, r1, #11
 801a514:	3815      	subs	r0, #21
 801a516:	0549      	lsls	r1, r1, #21
 801a518:	2a00      	cmp	r2, #0
 801a51a:	d0fa      	beq.n	801a512 <__ieee754_sqrt+0x12e>
 801a51c:	02d6      	lsls	r6, r2, #11
 801a51e:	d50a      	bpl.n	801a536 <__ieee754_sqrt+0x152>
 801a520:	f1c3 0420 	rsb	r4, r3, #32
 801a524:	fa21 f404 	lsr.w	r4, r1, r4
 801a528:	1e5d      	subs	r5, r3, #1
 801a52a:	4099      	lsls	r1, r3
 801a52c:	4322      	orrs	r2, r4
 801a52e:	1b43      	subs	r3, r0, r5
 801a530:	e78b      	b.n	801a44a <__ieee754_sqrt+0x66>
 801a532:	4618      	mov	r0, r3
 801a534:	e7f0      	b.n	801a518 <__ieee754_sqrt+0x134>
 801a536:	0052      	lsls	r2, r2, #1
 801a538:	3301      	adds	r3, #1
 801a53a:	e7ef      	b.n	801a51c <__ieee754_sqrt+0x138>
 801a53c:	46a0      	mov	r8, r4
 801a53e:	e7bf      	b.n	801a4c0 <__ieee754_sqrt+0xdc>
 801a540:	7ff00000 	.word	0x7ff00000
 801a544:	00000000 	.word	0x00000000

0801a548 <__kernel_cos>:
 801a548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a54c:	ec59 8b10 	vmov	r8, r9, d0
 801a550:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a554:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a558:	ed2d 8b02 	vpush	{d8}
 801a55c:	eeb0 8a41 	vmov.f32	s16, s2
 801a560:	eef0 8a61 	vmov.f32	s17, s3
 801a564:	da07      	bge.n	801a576 <__kernel_cos+0x2e>
 801a566:	ee10 0a10 	vmov	r0, s0
 801a56a:	4649      	mov	r1, r9
 801a56c:	f7e6 faf4 	bl	8000b58 <__aeabi_d2iz>
 801a570:	2800      	cmp	r0, #0
 801a572:	f000 8089 	beq.w	801a688 <__kernel_cos+0x140>
 801a576:	4642      	mov	r2, r8
 801a578:	464b      	mov	r3, r9
 801a57a:	4640      	mov	r0, r8
 801a57c:	4649      	mov	r1, r9
 801a57e:	f7e6 f83b 	bl	80005f8 <__aeabi_dmul>
 801a582:	2200      	movs	r2, #0
 801a584:	4b4e      	ldr	r3, [pc, #312]	; (801a6c0 <__kernel_cos+0x178>)
 801a586:	4604      	mov	r4, r0
 801a588:	460d      	mov	r5, r1
 801a58a:	f7e6 f835 	bl	80005f8 <__aeabi_dmul>
 801a58e:	a340      	add	r3, pc, #256	; (adr r3, 801a690 <__kernel_cos+0x148>)
 801a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a594:	4682      	mov	sl, r0
 801a596:	468b      	mov	fp, r1
 801a598:	4620      	mov	r0, r4
 801a59a:	4629      	mov	r1, r5
 801a59c:	f7e6 f82c 	bl	80005f8 <__aeabi_dmul>
 801a5a0:	a33d      	add	r3, pc, #244	; (adr r3, 801a698 <__kernel_cos+0x150>)
 801a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a6:	f7e5 fe71 	bl	800028c <__adddf3>
 801a5aa:	4622      	mov	r2, r4
 801a5ac:	462b      	mov	r3, r5
 801a5ae:	f7e6 f823 	bl	80005f8 <__aeabi_dmul>
 801a5b2:	a33b      	add	r3, pc, #236	; (adr r3, 801a6a0 <__kernel_cos+0x158>)
 801a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b8:	f7e5 fe66 	bl	8000288 <__aeabi_dsub>
 801a5bc:	4622      	mov	r2, r4
 801a5be:	462b      	mov	r3, r5
 801a5c0:	f7e6 f81a 	bl	80005f8 <__aeabi_dmul>
 801a5c4:	a338      	add	r3, pc, #224	; (adr r3, 801a6a8 <__kernel_cos+0x160>)
 801a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ca:	f7e5 fe5f 	bl	800028c <__adddf3>
 801a5ce:	4622      	mov	r2, r4
 801a5d0:	462b      	mov	r3, r5
 801a5d2:	f7e6 f811 	bl	80005f8 <__aeabi_dmul>
 801a5d6:	a336      	add	r3, pc, #216	; (adr r3, 801a6b0 <__kernel_cos+0x168>)
 801a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5dc:	f7e5 fe54 	bl	8000288 <__aeabi_dsub>
 801a5e0:	4622      	mov	r2, r4
 801a5e2:	462b      	mov	r3, r5
 801a5e4:	f7e6 f808 	bl	80005f8 <__aeabi_dmul>
 801a5e8:	a333      	add	r3, pc, #204	; (adr r3, 801a6b8 <__kernel_cos+0x170>)
 801a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ee:	f7e5 fe4d 	bl	800028c <__adddf3>
 801a5f2:	4622      	mov	r2, r4
 801a5f4:	462b      	mov	r3, r5
 801a5f6:	f7e5 ffff 	bl	80005f8 <__aeabi_dmul>
 801a5fa:	4622      	mov	r2, r4
 801a5fc:	462b      	mov	r3, r5
 801a5fe:	f7e5 fffb 	bl	80005f8 <__aeabi_dmul>
 801a602:	ec53 2b18 	vmov	r2, r3, d8
 801a606:	4604      	mov	r4, r0
 801a608:	460d      	mov	r5, r1
 801a60a:	4640      	mov	r0, r8
 801a60c:	4649      	mov	r1, r9
 801a60e:	f7e5 fff3 	bl	80005f8 <__aeabi_dmul>
 801a612:	460b      	mov	r3, r1
 801a614:	4602      	mov	r2, r0
 801a616:	4629      	mov	r1, r5
 801a618:	4620      	mov	r0, r4
 801a61a:	f7e5 fe35 	bl	8000288 <__aeabi_dsub>
 801a61e:	4b29      	ldr	r3, [pc, #164]	; (801a6c4 <__kernel_cos+0x17c>)
 801a620:	429e      	cmp	r6, r3
 801a622:	4680      	mov	r8, r0
 801a624:	4689      	mov	r9, r1
 801a626:	dc11      	bgt.n	801a64c <__kernel_cos+0x104>
 801a628:	4602      	mov	r2, r0
 801a62a:	460b      	mov	r3, r1
 801a62c:	4650      	mov	r0, sl
 801a62e:	4659      	mov	r1, fp
 801a630:	f7e5 fe2a 	bl	8000288 <__aeabi_dsub>
 801a634:	460b      	mov	r3, r1
 801a636:	4924      	ldr	r1, [pc, #144]	; (801a6c8 <__kernel_cos+0x180>)
 801a638:	4602      	mov	r2, r0
 801a63a:	2000      	movs	r0, #0
 801a63c:	f7e5 fe24 	bl	8000288 <__aeabi_dsub>
 801a640:	ecbd 8b02 	vpop	{d8}
 801a644:	ec41 0b10 	vmov	d0, r0, r1
 801a648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a64c:	4b1f      	ldr	r3, [pc, #124]	; (801a6cc <__kernel_cos+0x184>)
 801a64e:	491e      	ldr	r1, [pc, #120]	; (801a6c8 <__kernel_cos+0x180>)
 801a650:	429e      	cmp	r6, r3
 801a652:	bfcc      	ite	gt
 801a654:	4d1e      	ldrgt	r5, [pc, #120]	; (801a6d0 <__kernel_cos+0x188>)
 801a656:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a65a:	2400      	movs	r4, #0
 801a65c:	4622      	mov	r2, r4
 801a65e:	462b      	mov	r3, r5
 801a660:	2000      	movs	r0, #0
 801a662:	f7e5 fe11 	bl	8000288 <__aeabi_dsub>
 801a666:	4622      	mov	r2, r4
 801a668:	4606      	mov	r6, r0
 801a66a:	460f      	mov	r7, r1
 801a66c:	462b      	mov	r3, r5
 801a66e:	4650      	mov	r0, sl
 801a670:	4659      	mov	r1, fp
 801a672:	f7e5 fe09 	bl	8000288 <__aeabi_dsub>
 801a676:	4642      	mov	r2, r8
 801a678:	464b      	mov	r3, r9
 801a67a:	f7e5 fe05 	bl	8000288 <__aeabi_dsub>
 801a67e:	4602      	mov	r2, r0
 801a680:	460b      	mov	r3, r1
 801a682:	4630      	mov	r0, r6
 801a684:	4639      	mov	r1, r7
 801a686:	e7d9      	b.n	801a63c <__kernel_cos+0xf4>
 801a688:	2000      	movs	r0, #0
 801a68a:	490f      	ldr	r1, [pc, #60]	; (801a6c8 <__kernel_cos+0x180>)
 801a68c:	e7d8      	b.n	801a640 <__kernel_cos+0xf8>
 801a68e:	bf00      	nop
 801a690:	be8838d4 	.word	0xbe8838d4
 801a694:	bda8fae9 	.word	0xbda8fae9
 801a698:	bdb4b1c4 	.word	0xbdb4b1c4
 801a69c:	3e21ee9e 	.word	0x3e21ee9e
 801a6a0:	809c52ad 	.word	0x809c52ad
 801a6a4:	3e927e4f 	.word	0x3e927e4f
 801a6a8:	19cb1590 	.word	0x19cb1590
 801a6ac:	3efa01a0 	.word	0x3efa01a0
 801a6b0:	16c15177 	.word	0x16c15177
 801a6b4:	3f56c16c 	.word	0x3f56c16c
 801a6b8:	5555554c 	.word	0x5555554c
 801a6bc:	3fa55555 	.word	0x3fa55555
 801a6c0:	3fe00000 	.word	0x3fe00000
 801a6c4:	3fd33332 	.word	0x3fd33332
 801a6c8:	3ff00000 	.word	0x3ff00000
 801a6cc:	3fe90000 	.word	0x3fe90000
 801a6d0:	3fd20000 	.word	0x3fd20000
 801a6d4:	00000000 	.word	0x00000000

0801a6d8 <__kernel_rem_pio2>:
 801a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6dc:	ed2d 8b02 	vpush	{d8}
 801a6e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a6e4:	1ed4      	subs	r4, r2, #3
 801a6e6:	9308      	str	r3, [sp, #32]
 801a6e8:	9101      	str	r1, [sp, #4]
 801a6ea:	4bc5      	ldr	r3, [pc, #788]	; (801aa00 <__kernel_rem_pio2+0x328>)
 801a6ec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a6ee:	9009      	str	r0, [sp, #36]	; 0x24
 801a6f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a6f4:	9304      	str	r3, [sp, #16]
 801a6f6:	9b08      	ldr	r3, [sp, #32]
 801a6f8:	3b01      	subs	r3, #1
 801a6fa:	9307      	str	r3, [sp, #28]
 801a6fc:	2318      	movs	r3, #24
 801a6fe:	fb94 f4f3 	sdiv	r4, r4, r3
 801a702:	f06f 0317 	mvn.w	r3, #23
 801a706:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a70a:	fb04 3303 	mla	r3, r4, r3, r3
 801a70e:	eb03 0a02 	add.w	sl, r3, r2
 801a712:	9b04      	ldr	r3, [sp, #16]
 801a714:	9a07      	ldr	r2, [sp, #28]
 801a716:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a9f0 <__kernel_rem_pio2+0x318>
 801a71a:	eb03 0802 	add.w	r8, r3, r2
 801a71e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a720:	1aa7      	subs	r7, r4, r2
 801a722:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a726:	ae22      	add	r6, sp, #136	; 0x88
 801a728:	2500      	movs	r5, #0
 801a72a:	4545      	cmp	r5, r8
 801a72c:	dd13      	ble.n	801a756 <__kernel_rem_pio2+0x7e>
 801a72e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a9f0 <__kernel_rem_pio2+0x318>
 801a732:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a736:	2600      	movs	r6, #0
 801a738:	9b04      	ldr	r3, [sp, #16]
 801a73a:	429e      	cmp	r6, r3
 801a73c:	dc32      	bgt.n	801a7a4 <__kernel_rem_pio2+0xcc>
 801a73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a740:	9302      	str	r3, [sp, #8]
 801a742:	9b08      	ldr	r3, [sp, #32]
 801a744:	199d      	adds	r5, r3, r6
 801a746:	ab22      	add	r3, sp, #136	; 0x88
 801a748:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a74c:	9306      	str	r3, [sp, #24]
 801a74e:	ec59 8b18 	vmov	r8, r9, d8
 801a752:	2700      	movs	r7, #0
 801a754:	e01f      	b.n	801a796 <__kernel_rem_pio2+0xbe>
 801a756:	42ef      	cmn	r7, r5
 801a758:	d407      	bmi.n	801a76a <__kernel_rem_pio2+0x92>
 801a75a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a75e:	f7e5 fee1 	bl	8000524 <__aeabi_i2d>
 801a762:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a766:	3501      	adds	r5, #1
 801a768:	e7df      	b.n	801a72a <__kernel_rem_pio2+0x52>
 801a76a:	ec51 0b18 	vmov	r0, r1, d8
 801a76e:	e7f8      	b.n	801a762 <__kernel_rem_pio2+0x8a>
 801a770:	9906      	ldr	r1, [sp, #24]
 801a772:	9d02      	ldr	r5, [sp, #8]
 801a774:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a778:	9106      	str	r1, [sp, #24]
 801a77a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a77e:	9502      	str	r5, [sp, #8]
 801a780:	f7e5 ff3a 	bl	80005f8 <__aeabi_dmul>
 801a784:	4602      	mov	r2, r0
 801a786:	460b      	mov	r3, r1
 801a788:	4640      	mov	r0, r8
 801a78a:	4649      	mov	r1, r9
 801a78c:	f7e5 fd7e 	bl	800028c <__adddf3>
 801a790:	3701      	adds	r7, #1
 801a792:	4680      	mov	r8, r0
 801a794:	4689      	mov	r9, r1
 801a796:	9b07      	ldr	r3, [sp, #28]
 801a798:	429f      	cmp	r7, r3
 801a79a:	dde9      	ble.n	801a770 <__kernel_rem_pio2+0x98>
 801a79c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a7a0:	3601      	adds	r6, #1
 801a7a2:	e7c9      	b.n	801a738 <__kernel_rem_pio2+0x60>
 801a7a4:	9b04      	ldr	r3, [sp, #16]
 801a7a6:	aa0e      	add	r2, sp, #56	; 0x38
 801a7a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7ac:	930c      	str	r3, [sp, #48]	; 0x30
 801a7ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a7b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a7b4:	9c04      	ldr	r4, [sp, #16]
 801a7b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a7b8:	ab9a      	add	r3, sp, #616	; 0x268
 801a7ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a7be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a7c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a7c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a7ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a7ce:	ab9a      	add	r3, sp, #616	; 0x268
 801a7d0:	445b      	add	r3, fp
 801a7d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a7d6:	2500      	movs	r5, #0
 801a7d8:	1b63      	subs	r3, r4, r5
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	dc78      	bgt.n	801a8d0 <__kernel_rem_pio2+0x1f8>
 801a7de:	4650      	mov	r0, sl
 801a7e0:	ec49 8b10 	vmov	d0, r8, r9
 801a7e4:	f000 fda8 	bl	801b338 <scalbn>
 801a7e8:	ec57 6b10 	vmov	r6, r7, d0
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a7f2:	ee10 0a10 	vmov	r0, s0
 801a7f6:	4639      	mov	r1, r7
 801a7f8:	f7e5 fefe 	bl	80005f8 <__aeabi_dmul>
 801a7fc:	ec41 0b10 	vmov	d0, r0, r1
 801a800:	f000 fd12 	bl	801b228 <floor>
 801a804:	2200      	movs	r2, #0
 801a806:	ec51 0b10 	vmov	r0, r1, d0
 801a80a:	4b7e      	ldr	r3, [pc, #504]	; (801aa04 <__kernel_rem_pio2+0x32c>)
 801a80c:	f7e5 fef4 	bl	80005f8 <__aeabi_dmul>
 801a810:	4602      	mov	r2, r0
 801a812:	460b      	mov	r3, r1
 801a814:	4630      	mov	r0, r6
 801a816:	4639      	mov	r1, r7
 801a818:	f7e5 fd36 	bl	8000288 <__aeabi_dsub>
 801a81c:	460f      	mov	r7, r1
 801a81e:	4606      	mov	r6, r0
 801a820:	f7e6 f99a 	bl	8000b58 <__aeabi_d2iz>
 801a824:	9006      	str	r0, [sp, #24]
 801a826:	f7e5 fe7d 	bl	8000524 <__aeabi_i2d>
 801a82a:	4602      	mov	r2, r0
 801a82c:	460b      	mov	r3, r1
 801a82e:	4630      	mov	r0, r6
 801a830:	4639      	mov	r1, r7
 801a832:	f7e5 fd29 	bl	8000288 <__aeabi_dsub>
 801a836:	f1ba 0f00 	cmp.w	sl, #0
 801a83a:	4606      	mov	r6, r0
 801a83c:	460f      	mov	r7, r1
 801a83e:	dd6c      	ble.n	801a91a <__kernel_rem_pio2+0x242>
 801a840:	1e62      	subs	r2, r4, #1
 801a842:	ab0e      	add	r3, sp, #56	; 0x38
 801a844:	f1ca 0118 	rsb	r1, sl, #24
 801a848:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a84c:	9d06      	ldr	r5, [sp, #24]
 801a84e:	fa40 f301 	asr.w	r3, r0, r1
 801a852:	441d      	add	r5, r3
 801a854:	408b      	lsls	r3, r1
 801a856:	1ac0      	subs	r0, r0, r3
 801a858:	ab0e      	add	r3, sp, #56	; 0x38
 801a85a:	9506      	str	r5, [sp, #24]
 801a85c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a860:	f1ca 0317 	rsb	r3, sl, #23
 801a864:	fa40 f303 	asr.w	r3, r0, r3
 801a868:	9302      	str	r3, [sp, #8]
 801a86a:	9b02      	ldr	r3, [sp, #8]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	dd62      	ble.n	801a936 <__kernel_rem_pio2+0x25e>
 801a870:	9b06      	ldr	r3, [sp, #24]
 801a872:	2200      	movs	r2, #0
 801a874:	3301      	adds	r3, #1
 801a876:	9306      	str	r3, [sp, #24]
 801a878:	4615      	mov	r5, r2
 801a87a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a87e:	4294      	cmp	r4, r2
 801a880:	f300 8095 	bgt.w	801a9ae <__kernel_rem_pio2+0x2d6>
 801a884:	f1ba 0f00 	cmp.w	sl, #0
 801a888:	dd07      	ble.n	801a89a <__kernel_rem_pio2+0x1c2>
 801a88a:	f1ba 0f01 	cmp.w	sl, #1
 801a88e:	f000 80a2 	beq.w	801a9d6 <__kernel_rem_pio2+0x2fe>
 801a892:	f1ba 0f02 	cmp.w	sl, #2
 801a896:	f000 80c1 	beq.w	801aa1c <__kernel_rem_pio2+0x344>
 801a89a:	9b02      	ldr	r3, [sp, #8]
 801a89c:	2b02      	cmp	r3, #2
 801a89e:	d14a      	bne.n	801a936 <__kernel_rem_pio2+0x25e>
 801a8a0:	4632      	mov	r2, r6
 801a8a2:	463b      	mov	r3, r7
 801a8a4:	2000      	movs	r0, #0
 801a8a6:	4958      	ldr	r1, [pc, #352]	; (801aa08 <__kernel_rem_pio2+0x330>)
 801a8a8:	f7e5 fcee 	bl	8000288 <__aeabi_dsub>
 801a8ac:	4606      	mov	r6, r0
 801a8ae:	460f      	mov	r7, r1
 801a8b0:	2d00      	cmp	r5, #0
 801a8b2:	d040      	beq.n	801a936 <__kernel_rem_pio2+0x25e>
 801a8b4:	4650      	mov	r0, sl
 801a8b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a9f8 <__kernel_rem_pio2+0x320>
 801a8ba:	f000 fd3d 	bl	801b338 <scalbn>
 801a8be:	4630      	mov	r0, r6
 801a8c0:	4639      	mov	r1, r7
 801a8c2:	ec53 2b10 	vmov	r2, r3, d0
 801a8c6:	f7e5 fcdf 	bl	8000288 <__aeabi_dsub>
 801a8ca:	4606      	mov	r6, r0
 801a8cc:	460f      	mov	r7, r1
 801a8ce:	e032      	b.n	801a936 <__kernel_rem_pio2+0x25e>
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	4b4e      	ldr	r3, [pc, #312]	; (801aa0c <__kernel_rem_pio2+0x334>)
 801a8d4:	4640      	mov	r0, r8
 801a8d6:	4649      	mov	r1, r9
 801a8d8:	f7e5 fe8e 	bl	80005f8 <__aeabi_dmul>
 801a8dc:	f7e6 f93c 	bl	8000b58 <__aeabi_d2iz>
 801a8e0:	f7e5 fe20 	bl	8000524 <__aeabi_i2d>
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	4b4a      	ldr	r3, [pc, #296]	; (801aa10 <__kernel_rem_pio2+0x338>)
 801a8e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a8ec:	f7e5 fe84 	bl	80005f8 <__aeabi_dmul>
 801a8f0:	4602      	mov	r2, r0
 801a8f2:	460b      	mov	r3, r1
 801a8f4:	4640      	mov	r0, r8
 801a8f6:	4649      	mov	r1, r9
 801a8f8:	f7e5 fcc6 	bl	8000288 <__aeabi_dsub>
 801a8fc:	f7e6 f92c 	bl	8000b58 <__aeabi_d2iz>
 801a900:	ab0e      	add	r3, sp, #56	; 0x38
 801a902:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a906:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a90e:	f7e5 fcbd 	bl	800028c <__adddf3>
 801a912:	3501      	adds	r5, #1
 801a914:	4680      	mov	r8, r0
 801a916:	4689      	mov	r9, r1
 801a918:	e75e      	b.n	801a7d8 <__kernel_rem_pio2+0x100>
 801a91a:	d105      	bne.n	801a928 <__kernel_rem_pio2+0x250>
 801a91c:	1e63      	subs	r3, r4, #1
 801a91e:	aa0e      	add	r2, sp, #56	; 0x38
 801a920:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a924:	15c3      	asrs	r3, r0, #23
 801a926:	e79f      	b.n	801a868 <__kernel_rem_pio2+0x190>
 801a928:	2200      	movs	r2, #0
 801a92a:	4b3a      	ldr	r3, [pc, #232]	; (801aa14 <__kernel_rem_pio2+0x33c>)
 801a92c:	f7e6 f8ea 	bl	8000b04 <__aeabi_dcmpge>
 801a930:	2800      	cmp	r0, #0
 801a932:	d139      	bne.n	801a9a8 <__kernel_rem_pio2+0x2d0>
 801a934:	9002      	str	r0, [sp, #8]
 801a936:	2200      	movs	r2, #0
 801a938:	2300      	movs	r3, #0
 801a93a:	4630      	mov	r0, r6
 801a93c:	4639      	mov	r1, r7
 801a93e:	f7e6 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 801a942:	2800      	cmp	r0, #0
 801a944:	f000 80c7 	beq.w	801aad6 <__kernel_rem_pio2+0x3fe>
 801a948:	1e65      	subs	r5, r4, #1
 801a94a:	462b      	mov	r3, r5
 801a94c:	2200      	movs	r2, #0
 801a94e:	9904      	ldr	r1, [sp, #16]
 801a950:	428b      	cmp	r3, r1
 801a952:	da6a      	bge.n	801aa2a <__kernel_rem_pio2+0x352>
 801a954:	2a00      	cmp	r2, #0
 801a956:	f000 8088 	beq.w	801aa6a <__kernel_rem_pio2+0x392>
 801a95a:	ab0e      	add	r3, sp, #56	; 0x38
 801a95c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a960:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a964:	2b00      	cmp	r3, #0
 801a966:	f000 80b4 	beq.w	801aad2 <__kernel_rem_pio2+0x3fa>
 801a96a:	4650      	mov	r0, sl
 801a96c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a9f8 <__kernel_rem_pio2+0x320>
 801a970:	f000 fce2 	bl	801b338 <scalbn>
 801a974:	00ec      	lsls	r4, r5, #3
 801a976:	ab72      	add	r3, sp, #456	; 0x1c8
 801a978:	191e      	adds	r6, r3, r4
 801a97a:	ec59 8b10 	vmov	r8, r9, d0
 801a97e:	f106 0a08 	add.w	sl, r6, #8
 801a982:	462f      	mov	r7, r5
 801a984:	2f00      	cmp	r7, #0
 801a986:	f280 80df 	bge.w	801ab48 <__kernel_rem_pio2+0x470>
 801a98a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a9f0 <__kernel_rem_pio2+0x318>
 801a98e:	f04f 0a00 	mov.w	sl, #0
 801a992:	eba5 030a 	sub.w	r3, r5, sl
 801a996:	2b00      	cmp	r3, #0
 801a998:	f2c0 810a 	blt.w	801abb0 <__kernel_rem_pio2+0x4d8>
 801a99c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801aa18 <__kernel_rem_pio2+0x340>
 801a9a0:	ec59 8b18 	vmov	r8, r9, d8
 801a9a4:	2700      	movs	r7, #0
 801a9a6:	e0f5      	b.n	801ab94 <__kernel_rem_pio2+0x4bc>
 801a9a8:	2302      	movs	r3, #2
 801a9aa:	9302      	str	r3, [sp, #8]
 801a9ac:	e760      	b.n	801a870 <__kernel_rem_pio2+0x198>
 801a9ae:	ab0e      	add	r3, sp, #56	; 0x38
 801a9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9b4:	b94d      	cbnz	r5, 801a9ca <__kernel_rem_pio2+0x2f2>
 801a9b6:	b12b      	cbz	r3, 801a9c4 <__kernel_rem_pio2+0x2ec>
 801a9b8:	a80e      	add	r0, sp, #56	; 0x38
 801a9ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a9be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a9c2:	2301      	movs	r3, #1
 801a9c4:	3201      	adds	r2, #1
 801a9c6:	461d      	mov	r5, r3
 801a9c8:	e759      	b.n	801a87e <__kernel_rem_pio2+0x1a6>
 801a9ca:	a80e      	add	r0, sp, #56	; 0x38
 801a9cc:	1acb      	subs	r3, r1, r3
 801a9ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a9d2:	462b      	mov	r3, r5
 801a9d4:	e7f6      	b.n	801a9c4 <__kernel_rem_pio2+0x2ec>
 801a9d6:	1e62      	subs	r2, r4, #1
 801a9d8:	ab0e      	add	r3, sp, #56	; 0x38
 801a9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a9e2:	a90e      	add	r1, sp, #56	; 0x38
 801a9e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a9e8:	e757      	b.n	801a89a <__kernel_rem_pio2+0x1c2>
 801a9ea:	bf00      	nop
 801a9ec:	f3af 8000 	nop.w
	...
 801a9fc:	3ff00000 	.word	0x3ff00000
 801aa00:	0801bbc0 	.word	0x0801bbc0
 801aa04:	40200000 	.word	0x40200000
 801aa08:	3ff00000 	.word	0x3ff00000
 801aa0c:	3e700000 	.word	0x3e700000
 801aa10:	41700000 	.word	0x41700000
 801aa14:	3fe00000 	.word	0x3fe00000
 801aa18:	0801bb80 	.word	0x0801bb80
 801aa1c:	1e62      	subs	r2, r4, #1
 801aa1e:	ab0e      	add	r3, sp, #56	; 0x38
 801aa20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aa24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801aa28:	e7db      	b.n	801a9e2 <__kernel_rem_pio2+0x30a>
 801aa2a:	a90e      	add	r1, sp, #56	; 0x38
 801aa2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801aa30:	3b01      	subs	r3, #1
 801aa32:	430a      	orrs	r2, r1
 801aa34:	e78b      	b.n	801a94e <__kernel_rem_pio2+0x276>
 801aa36:	3301      	adds	r3, #1
 801aa38:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801aa3c:	2900      	cmp	r1, #0
 801aa3e:	d0fa      	beq.n	801aa36 <__kernel_rem_pio2+0x35e>
 801aa40:	9a08      	ldr	r2, [sp, #32]
 801aa42:	4422      	add	r2, r4
 801aa44:	00d2      	lsls	r2, r2, #3
 801aa46:	a922      	add	r1, sp, #136	; 0x88
 801aa48:	18e3      	adds	r3, r4, r3
 801aa4a:	9206      	str	r2, [sp, #24]
 801aa4c:	440a      	add	r2, r1
 801aa4e:	9302      	str	r3, [sp, #8]
 801aa50:	f10b 0108 	add.w	r1, fp, #8
 801aa54:	f102 0308 	add.w	r3, r2, #8
 801aa58:	1c66      	adds	r6, r4, #1
 801aa5a:	910a      	str	r1, [sp, #40]	; 0x28
 801aa5c:	2500      	movs	r5, #0
 801aa5e:	930d      	str	r3, [sp, #52]	; 0x34
 801aa60:	9b02      	ldr	r3, [sp, #8]
 801aa62:	42b3      	cmp	r3, r6
 801aa64:	da04      	bge.n	801aa70 <__kernel_rem_pio2+0x398>
 801aa66:	461c      	mov	r4, r3
 801aa68:	e6a6      	b.n	801a7b8 <__kernel_rem_pio2+0xe0>
 801aa6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa6c:	2301      	movs	r3, #1
 801aa6e:	e7e3      	b.n	801aa38 <__kernel_rem_pio2+0x360>
 801aa70:	9b06      	ldr	r3, [sp, #24]
 801aa72:	18ef      	adds	r7, r5, r3
 801aa74:	ab22      	add	r3, sp, #136	; 0x88
 801aa76:	441f      	add	r7, r3
 801aa78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801aa7e:	f7e5 fd51 	bl	8000524 <__aeabi_i2d>
 801aa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa84:	461c      	mov	r4, r3
 801aa86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa88:	e9c7 0100 	strd	r0, r1, [r7]
 801aa8c:	eb03 0b05 	add.w	fp, r3, r5
 801aa90:	2700      	movs	r7, #0
 801aa92:	f04f 0800 	mov.w	r8, #0
 801aa96:	f04f 0900 	mov.w	r9, #0
 801aa9a:	9b07      	ldr	r3, [sp, #28]
 801aa9c:	429f      	cmp	r7, r3
 801aa9e:	dd08      	ble.n	801aab2 <__kernel_rem_pio2+0x3da>
 801aaa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaa2:	aa72      	add	r2, sp, #456	; 0x1c8
 801aaa4:	18eb      	adds	r3, r5, r3
 801aaa6:	4413      	add	r3, r2
 801aaa8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801aaac:	3601      	adds	r6, #1
 801aaae:	3508      	adds	r5, #8
 801aab0:	e7d6      	b.n	801aa60 <__kernel_rem_pio2+0x388>
 801aab2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801aab6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801aaba:	f7e5 fd9d 	bl	80005f8 <__aeabi_dmul>
 801aabe:	4602      	mov	r2, r0
 801aac0:	460b      	mov	r3, r1
 801aac2:	4640      	mov	r0, r8
 801aac4:	4649      	mov	r1, r9
 801aac6:	f7e5 fbe1 	bl	800028c <__adddf3>
 801aaca:	3701      	adds	r7, #1
 801aacc:	4680      	mov	r8, r0
 801aace:	4689      	mov	r9, r1
 801aad0:	e7e3      	b.n	801aa9a <__kernel_rem_pio2+0x3c2>
 801aad2:	3d01      	subs	r5, #1
 801aad4:	e741      	b.n	801a95a <__kernel_rem_pio2+0x282>
 801aad6:	f1ca 0000 	rsb	r0, sl, #0
 801aada:	ec47 6b10 	vmov	d0, r6, r7
 801aade:	f000 fc2b 	bl	801b338 <scalbn>
 801aae2:	ec57 6b10 	vmov	r6, r7, d0
 801aae6:	2200      	movs	r2, #0
 801aae8:	4b99      	ldr	r3, [pc, #612]	; (801ad50 <__kernel_rem_pio2+0x678>)
 801aaea:	ee10 0a10 	vmov	r0, s0
 801aaee:	4639      	mov	r1, r7
 801aaf0:	f7e6 f808 	bl	8000b04 <__aeabi_dcmpge>
 801aaf4:	b1f8      	cbz	r0, 801ab36 <__kernel_rem_pio2+0x45e>
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	4b96      	ldr	r3, [pc, #600]	; (801ad54 <__kernel_rem_pio2+0x67c>)
 801aafa:	4630      	mov	r0, r6
 801aafc:	4639      	mov	r1, r7
 801aafe:	f7e5 fd7b 	bl	80005f8 <__aeabi_dmul>
 801ab02:	f7e6 f829 	bl	8000b58 <__aeabi_d2iz>
 801ab06:	4680      	mov	r8, r0
 801ab08:	f7e5 fd0c 	bl	8000524 <__aeabi_i2d>
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	4b90      	ldr	r3, [pc, #576]	; (801ad50 <__kernel_rem_pio2+0x678>)
 801ab10:	f7e5 fd72 	bl	80005f8 <__aeabi_dmul>
 801ab14:	460b      	mov	r3, r1
 801ab16:	4602      	mov	r2, r0
 801ab18:	4639      	mov	r1, r7
 801ab1a:	4630      	mov	r0, r6
 801ab1c:	f7e5 fbb4 	bl	8000288 <__aeabi_dsub>
 801ab20:	f7e6 f81a 	bl	8000b58 <__aeabi_d2iz>
 801ab24:	1c65      	adds	r5, r4, #1
 801ab26:	ab0e      	add	r3, sp, #56	; 0x38
 801ab28:	f10a 0a18 	add.w	sl, sl, #24
 801ab2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ab30:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801ab34:	e719      	b.n	801a96a <__kernel_rem_pio2+0x292>
 801ab36:	4630      	mov	r0, r6
 801ab38:	4639      	mov	r1, r7
 801ab3a:	f7e6 f80d 	bl	8000b58 <__aeabi_d2iz>
 801ab3e:	ab0e      	add	r3, sp, #56	; 0x38
 801ab40:	4625      	mov	r5, r4
 801ab42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ab46:	e710      	b.n	801a96a <__kernel_rem_pio2+0x292>
 801ab48:	ab0e      	add	r3, sp, #56	; 0x38
 801ab4a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ab4e:	f7e5 fce9 	bl	8000524 <__aeabi_i2d>
 801ab52:	4642      	mov	r2, r8
 801ab54:	464b      	mov	r3, r9
 801ab56:	f7e5 fd4f 	bl	80005f8 <__aeabi_dmul>
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801ab60:	4b7c      	ldr	r3, [pc, #496]	; (801ad54 <__kernel_rem_pio2+0x67c>)
 801ab62:	4640      	mov	r0, r8
 801ab64:	4649      	mov	r1, r9
 801ab66:	f7e5 fd47 	bl	80005f8 <__aeabi_dmul>
 801ab6a:	3f01      	subs	r7, #1
 801ab6c:	4680      	mov	r8, r0
 801ab6e:	4689      	mov	r9, r1
 801ab70:	e708      	b.n	801a984 <__kernel_rem_pio2+0x2ac>
 801ab72:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab7a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801ab7e:	f7e5 fd3b 	bl	80005f8 <__aeabi_dmul>
 801ab82:	4602      	mov	r2, r0
 801ab84:	460b      	mov	r3, r1
 801ab86:	4640      	mov	r0, r8
 801ab88:	4649      	mov	r1, r9
 801ab8a:	f7e5 fb7f 	bl	800028c <__adddf3>
 801ab8e:	3701      	adds	r7, #1
 801ab90:	4680      	mov	r8, r0
 801ab92:	4689      	mov	r9, r1
 801ab94:	9b04      	ldr	r3, [sp, #16]
 801ab96:	429f      	cmp	r7, r3
 801ab98:	dc01      	bgt.n	801ab9e <__kernel_rem_pio2+0x4c6>
 801ab9a:	45ba      	cmp	sl, r7
 801ab9c:	dae9      	bge.n	801ab72 <__kernel_rem_pio2+0x49a>
 801ab9e:	ab4a      	add	r3, sp, #296	; 0x128
 801aba0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801aba4:	e9c3 8900 	strd	r8, r9, [r3]
 801aba8:	f10a 0a01 	add.w	sl, sl, #1
 801abac:	3e08      	subs	r6, #8
 801abae:	e6f0      	b.n	801a992 <__kernel_rem_pio2+0x2ba>
 801abb0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801abb2:	2b03      	cmp	r3, #3
 801abb4:	d85b      	bhi.n	801ac6e <__kernel_rem_pio2+0x596>
 801abb6:	e8df f003 	tbb	[pc, r3]
 801abba:	264a      	.short	0x264a
 801abbc:	0226      	.short	0x0226
 801abbe:	ab9a      	add	r3, sp, #616	; 0x268
 801abc0:	441c      	add	r4, r3
 801abc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801abc6:	46a2      	mov	sl, r4
 801abc8:	46ab      	mov	fp, r5
 801abca:	f1bb 0f00 	cmp.w	fp, #0
 801abce:	dc6c      	bgt.n	801acaa <__kernel_rem_pio2+0x5d2>
 801abd0:	46a2      	mov	sl, r4
 801abd2:	46ab      	mov	fp, r5
 801abd4:	f1bb 0f01 	cmp.w	fp, #1
 801abd8:	f300 8086 	bgt.w	801ace8 <__kernel_rem_pio2+0x610>
 801abdc:	2000      	movs	r0, #0
 801abde:	2100      	movs	r1, #0
 801abe0:	2d01      	cmp	r5, #1
 801abe2:	f300 80a0 	bgt.w	801ad26 <__kernel_rem_pio2+0x64e>
 801abe6:	9b02      	ldr	r3, [sp, #8]
 801abe8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801abec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	f040 809e 	bne.w	801ad32 <__kernel_rem_pio2+0x65a>
 801abf6:	9b01      	ldr	r3, [sp, #4]
 801abf8:	e9c3 7800 	strd	r7, r8, [r3]
 801abfc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ac00:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ac04:	e033      	b.n	801ac6e <__kernel_rem_pio2+0x596>
 801ac06:	3408      	adds	r4, #8
 801ac08:	ab4a      	add	r3, sp, #296	; 0x128
 801ac0a:	441c      	add	r4, r3
 801ac0c:	462e      	mov	r6, r5
 801ac0e:	2000      	movs	r0, #0
 801ac10:	2100      	movs	r1, #0
 801ac12:	2e00      	cmp	r6, #0
 801ac14:	da3a      	bge.n	801ac8c <__kernel_rem_pio2+0x5b4>
 801ac16:	9b02      	ldr	r3, [sp, #8]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d03d      	beq.n	801ac98 <__kernel_rem_pio2+0x5c0>
 801ac1c:	4602      	mov	r2, r0
 801ac1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac22:	9c01      	ldr	r4, [sp, #4]
 801ac24:	e9c4 2300 	strd	r2, r3, [r4]
 801ac28:	4602      	mov	r2, r0
 801ac2a:	460b      	mov	r3, r1
 801ac2c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801ac30:	f7e5 fb2a 	bl	8000288 <__aeabi_dsub>
 801ac34:	ae4c      	add	r6, sp, #304	; 0x130
 801ac36:	2401      	movs	r4, #1
 801ac38:	42a5      	cmp	r5, r4
 801ac3a:	da30      	bge.n	801ac9e <__kernel_rem_pio2+0x5c6>
 801ac3c:	9b02      	ldr	r3, [sp, #8]
 801ac3e:	b113      	cbz	r3, 801ac46 <__kernel_rem_pio2+0x56e>
 801ac40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac44:	4619      	mov	r1, r3
 801ac46:	9b01      	ldr	r3, [sp, #4]
 801ac48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ac4c:	e00f      	b.n	801ac6e <__kernel_rem_pio2+0x596>
 801ac4e:	ab9a      	add	r3, sp, #616	; 0x268
 801ac50:	441c      	add	r4, r3
 801ac52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ac56:	2000      	movs	r0, #0
 801ac58:	2100      	movs	r1, #0
 801ac5a:	2d00      	cmp	r5, #0
 801ac5c:	da10      	bge.n	801ac80 <__kernel_rem_pio2+0x5a8>
 801ac5e:	9b02      	ldr	r3, [sp, #8]
 801ac60:	b113      	cbz	r3, 801ac68 <__kernel_rem_pio2+0x590>
 801ac62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac66:	4619      	mov	r1, r3
 801ac68:	9b01      	ldr	r3, [sp, #4]
 801ac6a:	e9c3 0100 	strd	r0, r1, [r3]
 801ac6e:	9b06      	ldr	r3, [sp, #24]
 801ac70:	f003 0007 	and.w	r0, r3, #7
 801ac74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801ac78:	ecbd 8b02 	vpop	{d8}
 801ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac80:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ac84:	f7e5 fb02 	bl	800028c <__adddf3>
 801ac88:	3d01      	subs	r5, #1
 801ac8a:	e7e6      	b.n	801ac5a <__kernel_rem_pio2+0x582>
 801ac8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ac90:	f7e5 fafc 	bl	800028c <__adddf3>
 801ac94:	3e01      	subs	r6, #1
 801ac96:	e7bc      	b.n	801ac12 <__kernel_rem_pio2+0x53a>
 801ac98:	4602      	mov	r2, r0
 801ac9a:	460b      	mov	r3, r1
 801ac9c:	e7c1      	b.n	801ac22 <__kernel_rem_pio2+0x54a>
 801ac9e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801aca2:	f7e5 faf3 	bl	800028c <__adddf3>
 801aca6:	3401      	adds	r4, #1
 801aca8:	e7c6      	b.n	801ac38 <__kernel_rem_pio2+0x560>
 801acaa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801acae:	ed3a 7b02 	vldmdb	sl!, {d7}
 801acb2:	4640      	mov	r0, r8
 801acb4:	ec53 2b17 	vmov	r2, r3, d7
 801acb8:	4649      	mov	r1, r9
 801acba:	ed8d 7b04 	vstr	d7, [sp, #16]
 801acbe:	f7e5 fae5 	bl	800028c <__adddf3>
 801acc2:	4602      	mov	r2, r0
 801acc4:	460b      	mov	r3, r1
 801acc6:	4606      	mov	r6, r0
 801acc8:	460f      	mov	r7, r1
 801acca:	4640      	mov	r0, r8
 801accc:	4649      	mov	r1, r9
 801acce:	f7e5 fadb 	bl	8000288 <__aeabi_dsub>
 801acd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801acd6:	f7e5 fad9 	bl	800028c <__adddf3>
 801acda:	f10b 3bff 	add.w	fp, fp, #4294967295
 801acde:	e9ca 0100 	strd	r0, r1, [sl]
 801ace2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801ace6:	e770      	b.n	801abca <__kernel_rem_pio2+0x4f2>
 801ace8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801acec:	ed3a 7b02 	vldmdb	sl!, {d7}
 801acf0:	4630      	mov	r0, r6
 801acf2:	ec53 2b17 	vmov	r2, r3, d7
 801acf6:	4639      	mov	r1, r7
 801acf8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801acfc:	f7e5 fac6 	bl	800028c <__adddf3>
 801ad00:	4602      	mov	r2, r0
 801ad02:	460b      	mov	r3, r1
 801ad04:	4680      	mov	r8, r0
 801ad06:	4689      	mov	r9, r1
 801ad08:	4630      	mov	r0, r6
 801ad0a:	4639      	mov	r1, r7
 801ad0c:	f7e5 fabc 	bl	8000288 <__aeabi_dsub>
 801ad10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad14:	f7e5 faba 	bl	800028c <__adddf3>
 801ad18:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ad1c:	e9ca 0100 	strd	r0, r1, [sl]
 801ad20:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801ad24:	e756      	b.n	801abd4 <__kernel_rem_pio2+0x4fc>
 801ad26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ad2a:	f7e5 faaf 	bl	800028c <__adddf3>
 801ad2e:	3d01      	subs	r5, #1
 801ad30:	e756      	b.n	801abe0 <__kernel_rem_pio2+0x508>
 801ad32:	9b01      	ldr	r3, [sp, #4]
 801ad34:	9a01      	ldr	r2, [sp, #4]
 801ad36:	601f      	str	r7, [r3, #0]
 801ad38:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801ad3c:	605c      	str	r4, [r3, #4]
 801ad3e:	609d      	str	r5, [r3, #8]
 801ad40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ad44:	60d3      	str	r3, [r2, #12]
 801ad46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad4a:	6110      	str	r0, [r2, #16]
 801ad4c:	6153      	str	r3, [r2, #20]
 801ad4e:	e78e      	b.n	801ac6e <__kernel_rem_pio2+0x596>
 801ad50:	41700000 	.word	0x41700000
 801ad54:	3e700000 	.word	0x3e700000

0801ad58 <__kernel_sin>:
 801ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad5c:	ec55 4b10 	vmov	r4, r5, d0
 801ad60:	b085      	sub	sp, #20
 801ad62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ad66:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ad6a:	ed8d 1b00 	vstr	d1, [sp]
 801ad6e:	9002      	str	r0, [sp, #8]
 801ad70:	da06      	bge.n	801ad80 <__kernel_sin+0x28>
 801ad72:	ee10 0a10 	vmov	r0, s0
 801ad76:	4629      	mov	r1, r5
 801ad78:	f7e5 feee 	bl	8000b58 <__aeabi_d2iz>
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	d051      	beq.n	801ae24 <__kernel_sin+0xcc>
 801ad80:	4622      	mov	r2, r4
 801ad82:	462b      	mov	r3, r5
 801ad84:	4620      	mov	r0, r4
 801ad86:	4629      	mov	r1, r5
 801ad88:	f7e5 fc36 	bl	80005f8 <__aeabi_dmul>
 801ad8c:	4682      	mov	sl, r0
 801ad8e:	468b      	mov	fp, r1
 801ad90:	4602      	mov	r2, r0
 801ad92:	460b      	mov	r3, r1
 801ad94:	4620      	mov	r0, r4
 801ad96:	4629      	mov	r1, r5
 801ad98:	f7e5 fc2e 	bl	80005f8 <__aeabi_dmul>
 801ad9c:	a341      	add	r3, pc, #260	; (adr r3, 801aea4 <__kernel_sin+0x14c>)
 801ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada2:	4680      	mov	r8, r0
 801ada4:	4689      	mov	r9, r1
 801ada6:	4650      	mov	r0, sl
 801ada8:	4659      	mov	r1, fp
 801adaa:	f7e5 fc25 	bl	80005f8 <__aeabi_dmul>
 801adae:	a33f      	add	r3, pc, #252	; (adr r3, 801aeac <__kernel_sin+0x154>)
 801adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adb4:	f7e5 fa68 	bl	8000288 <__aeabi_dsub>
 801adb8:	4652      	mov	r2, sl
 801adba:	465b      	mov	r3, fp
 801adbc:	f7e5 fc1c 	bl	80005f8 <__aeabi_dmul>
 801adc0:	a33c      	add	r3, pc, #240	; (adr r3, 801aeb4 <__kernel_sin+0x15c>)
 801adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adc6:	f7e5 fa61 	bl	800028c <__adddf3>
 801adca:	4652      	mov	r2, sl
 801adcc:	465b      	mov	r3, fp
 801adce:	f7e5 fc13 	bl	80005f8 <__aeabi_dmul>
 801add2:	a33a      	add	r3, pc, #232	; (adr r3, 801aebc <__kernel_sin+0x164>)
 801add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add8:	f7e5 fa56 	bl	8000288 <__aeabi_dsub>
 801addc:	4652      	mov	r2, sl
 801adde:	465b      	mov	r3, fp
 801ade0:	f7e5 fc0a 	bl	80005f8 <__aeabi_dmul>
 801ade4:	a337      	add	r3, pc, #220	; (adr r3, 801aec4 <__kernel_sin+0x16c>)
 801ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adea:	f7e5 fa4f 	bl	800028c <__adddf3>
 801adee:	9b02      	ldr	r3, [sp, #8]
 801adf0:	4606      	mov	r6, r0
 801adf2:	460f      	mov	r7, r1
 801adf4:	b9db      	cbnz	r3, 801ae2e <__kernel_sin+0xd6>
 801adf6:	4602      	mov	r2, r0
 801adf8:	460b      	mov	r3, r1
 801adfa:	4650      	mov	r0, sl
 801adfc:	4659      	mov	r1, fp
 801adfe:	f7e5 fbfb 	bl	80005f8 <__aeabi_dmul>
 801ae02:	a325      	add	r3, pc, #148	; (adr r3, 801ae98 <__kernel_sin+0x140>)
 801ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae08:	f7e5 fa3e 	bl	8000288 <__aeabi_dsub>
 801ae0c:	4642      	mov	r2, r8
 801ae0e:	464b      	mov	r3, r9
 801ae10:	f7e5 fbf2 	bl	80005f8 <__aeabi_dmul>
 801ae14:	4602      	mov	r2, r0
 801ae16:	460b      	mov	r3, r1
 801ae18:	4620      	mov	r0, r4
 801ae1a:	4629      	mov	r1, r5
 801ae1c:	f7e5 fa36 	bl	800028c <__adddf3>
 801ae20:	4604      	mov	r4, r0
 801ae22:	460d      	mov	r5, r1
 801ae24:	ec45 4b10 	vmov	d0, r4, r5
 801ae28:	b005      	add	sp, #20
 801ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae2e:	2200      	movs	r2, #0
 801ae30:	4b1b      	ldr	r3, [pc, #108]	; (801aea0 <__kernel_sin+0x148>)
 801ae32:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae36:	f7e5 fbdf 	bl	80005f8 <__aeabi_dmul>
 801ae3a:	4632      	mov	r2, r6
 801ae3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae40:	463b      	mov	r3, r7
 801ae42:	4640      	mov	r0, r8
 801ae44:	4649      	mov	r1, r9
 801ae46:	f7e5 fbd7 	bl	80005f8 <__aeabi_dmul>
 801ae4a:	4602      	mov	r2, r0
 801ae4c:	460b      	mov	r3, r1
 801ae4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae52:	f7e5 fa19 	bl	8000288 <__aeabi_dsub>
 801ae56:	4652      	mov	r2, sl
 801ae58:	465b      	mov	r3, fp
 801ae5a:	f7e5 fbcd 	bl	80005f8 <__aeabi_dmul>
 801ae5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae62:	f7e5 fa11 	bl	8000288 <__aeabi_dsub>
 801ae66:	a30c      	add	r3, pc, #48	; (adr r3, 801ae98 <__kernel_sin+0x140>)
 801ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae6c:	4606      	mov	r6, r0
 801ae6e:	460f      	mov	r7, r1
 801ae70:	4640      	mov	r0, r8
 801ae72:	4649      	mov	r1, r9
 801ae74:	f7e5 fbc0 	bl	80005f8 <__aeabi_dmul>
 801ae78:	4602      	mov	r2, r0
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	4630      	mov	r0, r6
 801ae7e:	4639      	mov	r1, r7
 801ae80:	f7e5 fa04 	bl	800028c <__adddf3>
 801ae84:	4602      	mov	r2, r0
 801ae86:	460b      	mov	r3, r1
 801ae88:	4620      	mov	r0, r4
 801ae8a:	4629      	mov	r1, r5
 801ae8c:	f7e5 f9fc 	bl	8000288 <__aeabi_dsub>
 801ae90:	e7c6      	b.n	801ae20 <__kernel_sin+0xc8>
 801ae92:	bf00      	nop
 801ae94:	f3af 8000 	nop.w
 801ae98:	55555549 	.word	0x55555549
 801ae9c:	3fc55555 	.word	0x3fc55555
 801aea0:	3fe00000 	.word	0x3fe00000
 801aea4:	5acfd57c 	.word	0x5acfd57c
 801aea8:	3de5d93a 	.word	0x3de5d93a
 801aeac:	8a2b9ceb 	.word	0x8a2b9ceb
 801aeb0:	3e5ae5e6 	.word	0x3e5ae5e6
 801aeb4:	57b1fe7d 	.word	0x57b1fe7d
 801aeb8:	3ec71de3 	.word	0x3ec71de3
 801aebc:	19c161d5 	.word	0x19c161d5
 801aec0:	3f2a01a0 	.word	0x3f2a01a0
 801aec4:	1110f8a6 	.word	0x1110f8a6
 801aec8:	3f811111 	.word	0x3f811111
 801aecc:	00000000 	.word	0x00000000

0801aed0 <atan>:
 801aed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed4:	ec55 4b10 	vmov	r4, r5, d0
 801aed8:	4bc3      	ldr	r3, [pc, #780]	; (801b1e8 <atan+0x318>)
 801aeda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801aede:	429e      	cmp	r6, r3
 801aee0:	46ab      	mov	fp, r5
 801aee2:	dd18      	ble.n	801af16 <atan+0x46>
 801aee4:	4bc1      	ldr	r3, [pc, #772]	; (801b1ec <atan+0x31c>)
 801aee6:	429e      	cmp	r6, r3
 801aee8:	dc01      	bgt.n	801aeee <atan+0x1e>
 801aeea:	d109      	bne.n	801af00 <atan+0x30>
 801aeec:	b144      	cbz	r4, 801af00 <atan+0x30>
 801aeee:	4622      	mov	r2, r4
 801aef0:	462b      	mov	r3, r5
 801aef2:	4620      	mov	r0, r4
 801aef4:	4629      	mov	r1, r5
 801aef6:	f7e5 f9c9 	bl	800028c <__adddf3>
 801aefa:	4604      	mov	r4, r0
 801aefc:	460d      	mov	r5, r1
 801aefe:	e006      	b.n	801af0e <atan+0x3e>
 801af00:	f1bb 0f00 	cmp.w	fp, #0
 801af04:	f340 8131 	ble.w	801b16a <atan+0x29a>
 801af08:	a59b      	add	r5, pc, #620	; (adr r5, 801b178 <atan+0x2a8>)
 801af0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801af0e:	ec45 4b10 	vmov	d0, r4, r5
 801af12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af16:	4bb6      	ldr	r3, [pc, #728]	; (801b1f0 <atan+0x320>)
 801af18:	429e      	cmp	r6, r3
 801af1a:	dc14      	bgt.n	801af46 <atan+0x76>
 801af1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801af20:	429e      	cmp	r6, r3
 801af22:	dc0d      	bgt.n	801af40 <atan+0x70>
 801af24:	a396      	add	r3, pc, #600	; (adr r3, 801b180 <atan+0x2b0>)
 801af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2a:	ee10 0a10 	vmov	r0, s0
 801af2e:	4629      	mov	r1, r5
 801af30:	f7e5 f9ac 	bl	800028c <__adddf3>
 801af34:	2200      	movs	r2, #0
 801af36:	4baf      	ldr	r3, [pc, #700]	; (801b1f4 <atan+0x324>)
 801af38:	f7e5 fdee 	bl	8000b18 <__aeabi_dcmpgt>
 801af3c:	2800      	cmp	r0, #0
 801af3e:	d1e6      	bne.n	801af0e <atan+0x3e>
 801af40:	f04f 3aff 	mov.w	sl, #4294967295
 801af44:	e02b      	b.n	801af9e <atan+0xce>
 801af46:	f000 f963 	bl	801b210 <fabs>
 801af4a:	4bab      	ldr	r3, [pc, #684]	; (801b1f8 <atan+0x328>)
 801af4c:	429e      	cmp	r6, r3
 801af4e:	ec55 4b10 	vmov	r4, r5, d0
 801af52:	f300 80bf 	bgt.w	801b0d4 <atan+0x204>
 801af56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801af5a:	429e      	cmp	r6, r3
 801af5c:	f300 80a0 	bgt.w	801b0a0 <atan+0x1d0>
 801af60:	ee10 2a10 	vmov	r2, s0
 801af64:	ee10 0a10 	vmov	r0, s0
 801af68:	462b      	mov	r3, r5
 801af6a:	4629      	mov	r1, r5
 801af6c:	f7e5 f98e 	bl	800028c <__adddf3>
 801af70:	2200      	movs	r2, #0
 801af72:	4ba0      	ldr	r3, [pc, #640]	; (801b1f4 <atan+0x324>)
 801af74:	f7e5 f988 	bl	8000288 <__aeabi_dsub>
 801af78:	2200      	movs	r2, #0
 801af7a:	4606      	mov	r6, r0
 801af7c:	460f      	mov	r7, r1
 801af7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801af82:	4620      	mov	r0, r4
 801af84:	4629      	mov	r1, r5
 801af86:	f7e5 f981 	bl	800028c <__adddf3>
 801af8a:	4602      	mov	r2, r0
 801af8c:	460b      	mov	r3, r1
 801af8e:	4630      	mov	r0, r6
 801af90:	4639      	mov	r1, r7
 801af92:	f7e5 fc5b 	bl	800084c <__aeabi_ddiv>
 801af96:	f04f 0a00 	mov.w	sl, #0
 801af9a:	4604      	mov	r4, r0
 801af9c:	460d      	mov	r5, r1
 801af9e:	4622      	mov	r2, r4
 801afa0:	462b      	mov	r3, r5
 801afa2:	4620      	mov	r0, r4
 801afa4:	4629      	mov	r1, r5
 801afa6:	f7e5 fb27 	bl	80005f8 <__aeabi_dmul>
 801afaa:	4602      	mov	r2, r0
 801afac:	460b      	mov	r3, r1
 801afae:	4680      	mov	r8, r0
 801afb0:	4689      	mov	r9, r1
 801afb2:	f7e5 fb21 	bl	80005f8 <__aeabi_dmul>
 801afb6:	a374      	add	r3, pc, #464	; (adr r3, 801b188 <atan+0x2b8>)
 801afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afbc:	4606      	mov	r6, r0
 801afbe:	460f      	mov	r7, r1
 801afc0:	f7e5 fb1a 	bl	80005f8 <__aeabi_dmul>
 801afc4:	a372      	add	r3, pc, #456	; (adr r3, 801b190 <atan+0x2c0>)
 801afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afca:	f7e5 f95f 	bl	800028c <__adddf3>
 801afce:	4632      	mov	r2, r6
 801afd0:	463b      	mov	r3, r7
 801afd2:	f7e5 fb11 	bl	80005f8 <__aeabi_dmul>
 801afd6:	a370      	add	r3, pc, #448	; (adr r3, 801b198 <atan+0x2c8>)
 801afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afdc:	f7e5 f956 	bl	800028c <__adddf3>
 801afe0:	4632      	mov	r2, r6
 801afe2:	463b      	mov	r3, r7
 801afe4:	f7e5 fb08 	bl	80005f8 <__aeabi_dmul>
 801afe8:	a36d      	add	r3, pc, #436	; (adr r3, 801b1a0 <atan+0x2d0>)
 801afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afee:	f7e5 f94d 	bl	800028c <__adddf3>
 801aff2:	4632      	mov	r2, r6
 801aff4:	463b      	mov	r3, r7
 801aff6:	f7e5 faff 	bl	80005f8 <__aeabi_dmul>
 801affa:	a36b      	add	r3, pc, #428	; (adr r3, 801b1a8 <atan+0x2d8>)
 801affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b000:	f7e5 f944 	bl	800028c <__adddf3>
 801b004:	4632      	mov	r2, r6
 801b006:	463b      	mov	r3, r7
 801b008:	f7e5 faf6 	bl	80005f8 <__aeabi_dmul>
 801b00c:	a368      	add	r3, pc, #416	; (adr r3, 801b1b0 <atan+0x2e0>)
 801b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b012:	f7e5 f93b 	bl	800028c <__adddf3>
 801b016:	4642      	mov	r2, r8
 801b018:	464b      	mov	r3, r9
 801b01a:	f7e5 faed 	bl	80005f8 <__aeabi_dmul>
 801b01e:	a366      	add	r3, pc, #408	; (adr r3, 801b1b8 <atan+0x2e8>)
 801b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b024:	4680      	mov	r8, r0
 801b026:	4689      	mov	r9, r1
 801b028:	4630      	mov	r0, r6
 801b02a:	4639      	mov	r1, r7
 801b02c:	f7e5 fae4 	bl	80005f8 <__aeabi_dmul>
 801b030:	a363      	add	r3, pc, #396	; (adr r3, 801b1c0 <atan+0x2f0>)
 801b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b036:	f7e5 f927 	bl	8000288 <__aeabi_dsub>
 801b03a:	4632      	mov	r2, r6
 801b03c:	463b      	mov	r3, r7
 801b03e:	f7e5 fadb 	bl	80005f8 <__aeabi_dmul>
 801b042:	a361      	add	r3, pc, #388	; (adr r3, 801b1c8 <atan+0x2f8>)
 801b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b048:	f7e5 f91e 	bl	8000288 <__aeabi_dsub>
 801b04c:	4632      	mov	r2, r6
 801b04e:	463b      	mov	r3, r7
 801b050:	f7e5 fad2 	bl	80005f8 <__aeabi_dmul>
 801b054:	a35e      	add	r3, pc, #376	; (adr r3, 801b1d0 <atan+0x300>)
 801b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b05a:	f7e5 f915 	bl	8000288 <__aeabi_dsub>
 801b05e:	4632      	mov	r2, r6
 801b060:	463b      	mov	r3, r7
 801b062:	f7e5 fac9 	bl	80005f8 <__aeabi_dmul>
 801b066:	a35c      	add	r3, pc, #368	; (adr r3, 801b1d8 <atan+0x308>)
 801b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b06c:	f7e5 f90c 	bl	8000288 <__aeabi_dsub>
 801b070:	4632      	mov	r2, r6
 801b072:	463b      	mov	r3, r7
 801b074:	f7e5 fac0 	bl	80005f8 <__aeabi_dmul>
 801b078:	4602      	mov	r2, r0
 801b07a:	460b      	mov	r3, r1
 801b07c:	4640      	mov	r0, r8
 801b07e:	4649      	mov	r1, r9
 801b080:	f7e5 f904 	bl	800028c <__adddf3>
 801b084:	4622      	mov	r2, r4
 801b086:	462b      	mov	r3, r5
 801b088:	f7e5 fab6 	bl	80005f8 <__aeabi_dmul>
 801b08c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b090:	4602      	mov	r2, r0
 801b092:	460b      	mov	r3, r1
 801b094:	d14b      	bne.n	801b12e <atan+0x25e>
 801b096:	4620      	mov	r0, r4
 801b098:	4629      	mov	r1, r5
 801b09a:	f7e5 f8f5 	bl	8000288 <__aeabi_dsub>
 801b09e:	e72c      	b.n	801aefa <atan+0x2a>
 801b0a0:	ee10 0a10 	vmov	r0, s0
 801b0a4:	2200      	movs	r2, #0
 801b0a6:	4b53      	ldr	r3, [pc, #332]	; (801b1f4 <atan+0x324>)
 801b0a8:	4629      	mov	r1, r5
 801b0aa:	f7e5 f8ed 	bl	8000288 <__aeabi_dsub>
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	4606      	mov	r6, r0
 801b0b2:	460f      	mov	r7, r1
 801b0b4:	4b4f      	ldr	r3, [pc, #316]	; (801b1f4 <atan+0x324>)
 801b0b6:	4620      	mov	r0, r4
 801b0b8:	4629      	mov	r1, r5
 801b0ba:	f7e5 f8e7 	bl	800028c <__adddf3>
 801b0be:	4602      	mov	r2, r0
 801b0c0:	460b      	mov	r3, r1
 801b0c2:	4630      	mov	r0, r6
 801b0c4:	4639      	mov	r1, r7
 801b0c6:	f7e5 fbc1 	bl	800084c <__aeabi_ddiv>
 801b0ca:	f04f 0a01 	mov.w	sl, #1
 801b0ce:	4604      	mov	r4, r0
 801b0d0:	460d      	mov	r5, r1
 801b0d2:	e764      	b.n	801af9e <atan+0xce>
 801b0d4:	4b49      	ldr	r3, [pc, #292]	; (801b1fc <atan+0x32c>)
 801b0d6:	429e      	cmp	r6, r3
 801b0d8:	dc1d      	bgt.n	801b116 <atan+0x246>
 801b0da:	ee10 0a10 	vmov	r0, s0
 801b0de:	2200      	movs	r2, #0
 801b0e0:	4b47      	ldr	r3, [pc, #284]	; (801b200 <atan+0x330>)
 801b0e2:	4629      	mov	r1, r5
 801b0e4:	f7e5 f8d0 	bl	8000288 <__aeabi_dsub>
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	4606      	mov	r6, r0
 801b0ec:	460f      	mov	r7, r1
 801b0ee:	4b44      	ldr	r3, [pc, #272]	; (801b200 <atan+0x330>)
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	4629      	mov	r1, r5
 801b0f4:	f7e5 fa80 	bl	80005f8 <__aeabi_dmul>
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	4b3e      	ldr	r3, [pc, #248]	; (801b1f4 <atan+0x324>)
 801b0fc:	f7e5 f8c6 	bl	800028c <__adddf3>
 801b100:	4602      	mov	r2, r0
 801b102:	460b      	mov	r3, r1
 801b104:	4630      	mov	r0, r6
 801b106:	4639      	mov	r1, r7
 801b108:	f7e5 fba0 	bl	800084c <__aeabi_ddiv>
 801b10c:	f04f 0a02 	mov.w	sl, #2
 801b110:	4604      	mov	r4, r0
 801b112:	460d      	mov	r5, r1
 801b114:	e743      	b.n	801af9e <atan+0xce>
 801b116:	462b      	mov	r3, r5
 801b118:	ee10 2a10 	vmov	r2, s0
 801b11c:	2000      	movs	r0, #0
 801b11e:	4939      	ldr	r1, [pc, #228]	; (801b204 <atan+0x334>)
 801b120:	f7e5 fb94 	bl	800084c <__aeabi_ddiv>
 801b124:	f04f 0a03 	mov.w	sl, #3
 801b128:	4604      	mov	r4, r0
 801b12a:	460d      	mov	r5, r1
 801b12c:	e737      	b.n	801af9e <atan+0xce>
 801b12e:	4b36      	ldr	r3, [pc, #216]	; (801b208 <atan+0x338>)
 801b130:	4e36      	ldr	r6, [pc, #216]	; (801b20c <atan+0x33c>)
 801b132:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801b136:	4456      	add	r6, sl
 801b138:	449a      	add	sl, r3
 801b13a:	e9da 2300 	ldrd	r2, r3, [sl]
 801b13e:	f7e5 f8a3 	bl	8000288 <__aeabi_dsub>
 801b142:	4622      	mov	r2, r4
 801b144:	462b      	mov	r3, r5
 801b146:	f7e5 f89f 	bl	8000288 <__aeabi_dsub>
 801b14a:	4602      	mov	r2, r0
 801b14c:	460b      	mov	r3, r1
 801b14e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b152:	f7e5 f899 	bl	8000288 <__aeabi_dsub>
 801b156:	f1bb 0f00 	cmp.w	fp, #0
 801b15a:	4604      	mov	r4, r0
 801b15c:	460d      	mov	r5, r1
 801b15e:	f6bf aed6 	bge.w	801af0e <atan+0x3e>
 801b162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b166:	461d      	mov	r5, r3
 801b168:	e6d1      	b.n	801af0e <atan+0x3e>
 801b16a:	a51d      	add	r5, pc, #116	; (adr r5, 801b1e0 <atan+0x310>)
 801b16c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b170:	e6cd      	b.n	801af0e <atan+0x3e>
 801b172:	bf00      	nop
 801b174:	f3af 8000 	nop.w
 801b178:	54442d18 	.word	0x54442d18
 801b17c:	3ff921fb 	.word	0x3ff921fb
 801b180:	8800759c 	.word	0x8800759c
 801b184:	7e37e43c 	.word	0x7e37e43c
 801b188:	e322da11 	.word	0xe322da11
 801b18c:	3f90ad3a 	.word	0x3f90ad3a
 801b190:	24760deb 	.word	0x24760deb
 801b194:	3fa97b4b 	.word	0x3fa97b4b
 801b198:	a0d03d51 	.word	0xa0d03d51
 801b19c:	3fb10d66 	.word	0x3fb10d66
 801b1a0:	c54c206e 	.word	0xc54c206e
 801b1a4:	3fb745cd 	.word	0x3fb745cd
 801b1a8:	920083ff 	.word	0x920083ff
 801b1ac:	3fc24924 	.word	0x3fc24924
 801b1b0:	5555550d 	.word	0x5555550d
 801b1b4:	3fd55555 	.word	0x3fd55555
 801b1b8:	2c6a6c2f 	.word	0x2c6a6c2f
 801b1bc:	bfa2b444 	.word	0xbfa2b444
 801b1c0:	52defd9a 	.word	0x52defd9a
 801b1c4:	3fadde2d 	.word	0x3fadde2d
 801b1c8:	af749a6d 	.word	0xaf749a6d
 801b1cc:	3fb3b0f2 	.word	0x3fb3b0f2
 801b1d0:	fe231671 	.word	0xfe231671
 801b1d4:	3fbc71c6 	.word	0x3fbc71c6
 801b1d8:	9998ebc4 	.word	0x9998ebc4
 801b1dc:	3fc99999 	.word	0x3fc99999
 801b1e0:	54442d18 	.word	0x54442d18
 801b1e4:	bff921fb 	.word	0xbff921fb
 801b1e8:	440fffff 	.word	0x440fffff
 801b1ec:	7ff00000 	.word	0x7ff00000
 801b1f0:	3fdbffff 	.word	0x3fdbffff
 801b1f4:	3ff00000 	.word	0x3ff00000
 801b1f8:	3ff2ffff 	.word	0x3ff2ffff
 801b1fc:	40037fff 	.word	0x40037fff
 801b200:	3ff80000 	.word	0x3ff80000
 801b204:	bff00000 	.word	0xbff00000
 801b208:	0801bbf0 	.word	0x0801bbf0
 801b20c:	0801bbd0 	.word	0x0801bbd0

0801b210 <fabs>:
 801b210:	ec51 0b10 	vmov	r0, r1, d0
 801b214:	ee10 2a10 	vmov	r2, s0
 801b218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b21c:	ec43 2b10 	vmov	d0, r2, r3
 801b220:	4770      	bx	lr
 801b222:	0000      	movs	r0, r0
 801b224:	0000      	movs	r0, r0
	...

0801b228 <floor>:
 801b228:	ec51 0b10 	vmov	r0, r1, d0
 801b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b230:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b234:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b238:	2e13      	cmp	r6, #19
 801b23a:	460c      	mov	r4, r1
 801b23c:	ee10 5a10 	vmov	r5, s0
 801b240:	4680      	mov	r8, r0
 801b242:	dc34      	bgt.n	801b2ae <floor+0x86>
 801b244:	2e00      	cmp	r6, #0
 801b246:	da16      	bge.n	801b276 <floor+0x4e>
 801b248:	a335      	add	r3, pc, #212	; (adr r3, 801b320 <floor+0xf8>)
 801b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b24e:	f7e5 f81d 	bl	800028c <__adddf3>
 801b252:	2200      	movs	r2, #0
 801b254:	2300      	movs	r3, #0
 801b256:	f7e5 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 801b25a:	b148      	cbz	r0, 801b270 <floor+0x48>
 801b25c:	2c00      	cmp	r4, #0
 801b25e:	da59      	bge.n	801b314 <floor+0xec>
 801b260:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b264:	4a30      	ldr	r2, [pc, #192]	; (801b328 <floor+0x100>)
 801b266:	432b      	orrs	r3, r5
 801b268:	2500      	movs	r5, #0
 801b26a:	42ab      	cmp	r3, r5
 801b26c:	bf18      	it	ne
 801b26e:	4614      	movne	r4, r2
 801b270:	4621      	mov	r1, r4
 801b272:	4628      	mov	r0, r5
 801b274:	e025      	b.n	801b2c2 <floor+0x9a>
 801b276:	4f2d      	ldr	r7, [pc, #180]	; (801b32c <floor+0x104>)
 801b278:	4137      	asrs	r7, r6
 801b27a:	ea01 0307 	and.w	r3, r1, r7
 801b27e:	4303      	orrs	r3, r0
 801b280:	d01f      	beq.n	801b2c2 <floor+0x9a>
 801b282:	a327      	add	r3, pc, #156	; (adr r3, 801b320 <floor+0xf8>)
 801b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b288:	f7e5 f800 	bl	800028c <__adddf3>
 801b28c:	2200      	movs	r2, #0
 801b28e:	2300      	movs	r3, #0
 801b290:	f7e5 fc42 	bl	8000b18 <__aeabi_dcmpgt>
 801b294:	2800      	cmp	r0, #0
 801b296:	d0eb      	beq.n	801b270 <floor+0x48>
 801b298:	2c00      	cmp	r4, #0
 801b29a:	bfbe      	ittt	lt
 801b29c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b2a0:	fa43 f606 	asrlt.w	r6, r3, r6
 801b2a4:	19a4      	addlt	r4, r4, r6
 801b2a6:	ea24 0407 	bic.w	r4, r4, r7
 801b2aa:	2500      	movs	r5, #0
 801b2ac:	e7e0      	b.n	801b270 <floor+0x48>
 801b2ae:	2e33      	cmp	r6, #51	; 0x33
 801b2b0:	dd0b      	ble.n	801b2ca <floor+0xa2>
 801b2b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b2b6:	d104      	bne.n	801b2c2 <floor+0x9a>
 801b2b8:	ee10 2a10 	vmov	r2, s0
 801b2bc:	460b      	mov	r3, r1
 801b2be:	f7e4 ffe5 	bl	800028c <__adddf3>
 801b2c2:	ec41 0b10 	vmov	d0, r0, r1
 801b2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b2ce:	f04f 33ff 	mov.w	r3, #4294967295
 801b2d2:	fa23 f707 	lsr.w	r7, r3, r7
 801b2d6:	4207      	tst	r7, r0
 801b2d8:	d0f3      	beq.n	801b2c2 <floor+0x9a>
 801b2da:	a311      	add	r3, pc, #68	; (adr r3, 801b320 <floor+0xf8>)
 801b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2e0:	f7e4 ffd4 	bl	800028c <__adddf3>
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	f7e5 fc16 	bl	8000b18 <__aeabi_dcmpgt>
 801b2ec:	2800      	cmp	r0, #0
 801b2ee:	d0bf      	beq.n	801b270 <floor+0x48>
 801b2f0:	2c00      	cmp	r4, #0
 801b2f2:	da02      	bge.n	801b2fa <floor+0xd2>
 801b2f4:	2e14      	cmp	r6, #20
 801b2f6:	d103      	bne.n	801b300 <floor+0xd8>
 801b2f8:	3401      	adds	r4, #1
 801b2fa:	ea25 0507 	bic.w	r5, r5, r7
 801b2fe:	e7b7      	b.n	801b270 <floor+0x48>
 801b300:	2301      	movs	r3, #1
 801b302:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b306:	fa03 f606 	lsl.w	r6, r3, r6
 801b30a:	4435      	add	r5, r6
 801b30c:	4545      	cmp	r5, r8
 801b30e:	bf38      	it	cc
 801b310:	18e4      	addcc	r4, r4, r3
 801b312:	e7f2      	b.n	801b2fa <floor+0xd2>
 801b314:	2500      	movs	r5, #0
 801b316:	462c      	mov	r4, r5
 801b318:	e7aa      	b.n	801b270 <floor+0x48>
 801b31a:	bf00      	nop
 801b31c:	f3af 8000 	nop.w
 801b320:	8800759c 	.word	0x8800759c
 801b324:	7e37e43c 	.word	0x7e37e43c
 801b328:	bff00000 	.word	0xbff00000
 801b32c:	000fffff 	.word	0x000fffff

0801b330 <matherr>:
 801b330:	2000      	movs	r0, #0
 801b332:	4770      	bx	lr
 801b334:	0000      	movs	r0, r0
	...

0801b338 <scalbn>:
 801b338:	b570      	push	{r4, r5, r6, lr}
 801b33a:	ec55 4b10 	vmov	r4, r5, d0
 801b33e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b342:	4606      	mov	r6, r0
 801b344:	462b      	mov	r3, r5
 801b346:	b9aa      	cbnz	r2, 801b374 <scalbn+0x3c>
 801b348:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b34c:	4323      	orrs	r3, r4
 801b34e:	d03b      	beq.n	801b3c8 <scalbn+0x90>
 801b350:	4b31      	ldr	r3, [pc, #196]	; (801b418 <scalbn+0xe0>)
 801b352:	4629      	mov	r1, r5
 801b354:	2200      	movs	r2, #0
 801b356:	ee10 0a10 	vmov	r0, s0
 801b35a:	f7e5 f94d 	bl	80005f8 <__aeabi_dmul>
 801b35e:	4b2f      	ldr	r3, [pc, #188]	; (801b41c <scalbn+0xe4>)
 801b360:	429e      	cmp	r6, r3
 801b362:	4604      	mov	r4, r0
 801b364:	460d      	mov	r5, r1
 801b366:	da12      	bge.n	801b38e <scalbn+0x56>
 801b368:	a327      	add	r3, pc, #156	; (adr r3, 801b408 <scalbn+0xd0>)
 801b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b36e:	f7e5 f943 	bl	80005f8 <__aeabi_dmul>
 801b372:	e009      	b.n	801b388 <scalbn+0x50>
 801b374:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b378:	428a      	cmp	r2, r1
 801b37a:	d10c      	bne.n	801b396 <scalbn+0x5e>
 801b37c:	ee10 2a10 	vmov	r2, s0
 801b380:	4620      	mov	r0, r4
 801b382:	4629      	mov	r1, r5
 801b384:	f7e4 ff82 	bl	800028c <__adddf3>
 801b388:	4604      	mov	r4, r0
 801b38a:	460d      	mov	r5, r1
 801b38c:	e01c      	b.n	801b3c8 <scalbn+0x90>
 801b38e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b392:	460b      	mov	r3, r1
 801b394:	3a36      	subs	r2, #54	; 0x36
 801b396:	4432      	add	r2, r6
 801b398:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b39c:	428a      	cmp	r2, r1
 801b39e:	dd0b      	ble.n	801b3b8 <scalbn+0x80>
 801b3a0:	ec45 4b11 	vmov	d1, r4, r5
 801b3a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b410 <scalbn+0xd8>
 801b3a8:	f000 f83c 	bl	801b424 <copysign>
 801b3ac:	a318      	add	r3, pc, #96	; (adr r3, 801b410 <scalbn+0xd8>)
 801b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b2:	ec51 0b10 	vmov	r0, r1, d0
 801b3b6:	e7da      	b.n	801b36e <scalbn+0x36>
 801b3b8:	2a00      	cmp	r2, #0
 801b3ba:	dd08      	ble.n	801b3ce <scalbn+0x96>
 801b3bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b3c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b3c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b3c8:	ec45 4b10 	vmov	d0, r4, r5
 801b3cc:	bd70      	pop	{r4, r5, r6, pc}
 801b3ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b3d2:	da0d      	bge.n	801b3f0 <scalbn+0xb8>
 801b3d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b3d8:	429e      	cmp	r6, r3
 801b3da:	ec45 4b11 	vmov	d1, r4, r5
 801b3de:	dce1      	bgt.n	801b3a4 <scalbn+0x6c>
 801b3e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b408 <scalbn+0xd0>
 801b3e4:	f000 f81e 	bl	801b424 <copysign>
 801b3e8:	a307      	add	r3, pc, #28	; (adr r3, 801b408 <scalbn+0xd0>)
 801b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ee:	e7e0      	b.n	801b3b2 <scalbn+0x7a>
 801b3f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b3f4:	3236      	adds	r2, #54	; 0x36
 801b3f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b3fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b3fe:	4620      	mov	r0, r4
 801b400:	4629      	mov	r1, r5
 801b402:	2200      	movs	r2, #0
 801b404:	4b06      	ldr	r3, [pc, #24]	; (801b420 <scalbn+0xe8>)
 801b406:	e7b2      	b.n	801b36e <scalbn+0x36>
 801b408:	c2f8f359 	.word	0xc2f8f359
 801b40c:	01a56e1f 	.word	0x01a56e1f
 801b410:	8800759c 	.word	0x8800759c
 801b414:	7e37e43c 	.word	0x7e37e43c
 801b418:	43500000 	.word	0x43500000
 801b41c:	ffff3cb0 	.word	0xffff3cb0
 801b420:	3c900000 	.word	0x3c900000

0801b424 <copysign>:
 801b424:	ec51 0b10 	vmov	r0, r1, d0
 801b428:	ee11 0a90 	vmov	r0, s3
 801b42c:	ee10 2a10 	vmov	r2, s0
 801b430:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b434:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b438:	ea41 0300 	orr.w	r3, r1, r0
 801b43c:	ec43 2b10 	vmov	d0, r2, r3
 801b440:	4770      	bx	lr
	...

0801b444 <_init>:
 801b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b446:	bf00      	nop
 801b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b44a:	bc08      	pop	{r3}
 801b44c:	469e      	mov	lr, r3
 801b44e:	4770      	bx	lr

0801b450 <_fini>:
 801b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b452:	bf00      	nop
 801b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b456:	bc08      	pop	{r3}
 801b458:	469e      	mov	lr, r3
 801b45a:	4770      	bx	lr
