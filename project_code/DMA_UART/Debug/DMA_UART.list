
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bd3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  0801bed0  0801bed0  0002bed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c8b8  0801c8b8  000323e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c8b8  0801c8b8  0002c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c8c0  0801c8c0  000323e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c8c0  0801c8c0  0002c8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8c4  0801c8c4  0002c8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000023e8  20000000  0801c8c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d764  200023e8  0801ecb0  000323e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  2000fb4c  0801ecb0  0003fb4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000323e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000356a9  00000000  00000000  00032418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000713d  00000000  00000000  00067ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  0006ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c30  00000000  00000000  00070a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aef0  00000000  00000000  000726b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002916b  00000000  00000000  0009d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df0a8  00000000  00000000  000c6713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a57bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000969c  00000000  00000000  001a5810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200023e8 	.word	0x200023e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801beb4 	.word	0x0801beb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023ec 	.word	0x200023ec
 80001cc:	0801beb4 	.word	0x0801beb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
extern SCARA_LSPB_Clutch_TypeDef  gcode_clutch_configure[200];
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8001016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8205 	beq.w	800142e <packetRead+0x43e>
 8001024:	f000 bfda 	b.w	8001fdc <packetRead+0xfec>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 800103a:	7cbb      	ldrb	r3, [r7, #18]
 800103c:	2b04      	cmp	r3, #4
 800103e:	f200 81ee 	bhi.w	800141e <packetRead+0x42e>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <packetRead+0x58>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	0800105d 	.word	0x0800105d
 800104c:	08001175 	.word	0x08001175
 8001050:	080012c1 	.word	0x080012c1
 8001054:	080012c1 	.word	0x080012c1
 8001058:	080010f7 	.word	0x080010f7
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b88      	ldr	r3, [pc, #544]	; (8001298 <packetRead+0x2a8>)
 8001076:	701a      	strb	r2, [r3, #0]
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	a382      	add	r3, pc, #520	; (adr r3, 8001290 <packetRead+0x2a0>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fab4 	bl	80005f8 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4981      	ldr	r1, [pc, #516]	; (800129c <packetRead+0x2ac>)
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	3304      	adds	r3, #4
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa3b 	bl	8000524 <__aeabi_i2d>
 80010ae:	a378      	add	r3, pc, #480	; (adr r3, 8001290 <packetRead+0x2a0>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff faa0 	bl	80005f8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4978      	ldr	r1, [pc, #480]	; (80012a0 <packetRead+0x2b0>)
 80010be:	e9c1 2300 	strd	r2, r3, [r1]
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	3304      	adds	r3, #4
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a74      	ldr	r2, [pc, #464]	; (80012a4 <packetRead+0x2b4>)
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	3304      	adds	r3, #4
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <packetRead+0x2b8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 80010e0:	4b72      	ldr	r3, [pc, #456]	; (80012ac <packetRead+0x2bc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 80010e6:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <packetRead+0x2c0>)
 80010e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ec:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 80010ee:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <packetRead+0x2c4>)
 80010f0:	2205      	movs	r2, #5
 80010f2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010f4:	e193      	b.n	800141e <packetRead+0x42e>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 80010f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f8:	3301      	adds	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 80010fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	4a6a      	ldr	r2, [pc, #424]	; (80012ac <packetRead+0x2bc>)
 8001104:	8812      	ldrh	r2, [r2, #0]
 8001106:	4610      	mov	r0, r2
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	496b      	ldr	r1, [pc, #428]	; (80012b8 <packetRead+0x2c8>)
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	3304      	adds	r3, #4
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	4a61      	ldr	r2, [pc, #388]	; (80012ac <packetRead+0x2bc>)
 8001126:	8812      	ldrh	r2, [r2, #0]
 8001128:	4610      	mov	r0, r2
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4962      	ldr	r1, [pc, #392]	; (80012b8 <packetRead+0x2c8>)
 800112e:	4603      	mov	r3, r0
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4403      	add	r3, r0
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3304      	adds	r3, #4
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	3304      	adds	r3, #4
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	4a58      	ldr	r2, [pc, #352]	; (80012ac <packetRead+0x2bc>)
 800114a:	8812      	ldrh	r2, [r2, #0]
 800114c:	4610      	mov	r0, r2
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4959      	ldr	r1, [pc, #356]	; (80012b8 <packetRead+0x2c8>)
 8001152:	4603      	mov	r3, r0
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4403      	add	r3, r0
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	3308      	adds	r3, #8
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	3304      	adds	r3, #4
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
					current_clutch_index++;
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <packetRead+0x2bc>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <packetRead+0x2bc>)
 8001170:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001172:	e154      	b.n	800141e <packetRead+0x42e>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <packetRead+0x2b8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	4a50      	ldr	r2, [pc, #320]	; (80012bc <packetRead+0x2cc>)
 800117c:	460b      	mov	r3, r1
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	1a5b      	subs	r3, r3, r1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	331a      	adds	r3, #26
 8001188:	7cba      	ldrb	r2, [r7, #18]
 800118a:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <packetRead+0x2b8>)
 80011a0:	8812      	ldrh	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	4a44      	ldr	r2, [pc, #272]	; (80012bc <packetRead+0x2cc>)
 80011ac:	460b      	mov	r3, r1
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a5b      	subs	r3, r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	331b      	adds	r3, #27
 80011b8:	4602      	mov	r2, r0
 80011ba:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <packetRead+0x2b8>)
 80011c4:	8812      	ldrh	r2, [r2, #0]
 80011c6:	4610      	mov	r0, r2
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	493c      	ldr	r1, [pc, #240]	; (80012bc <packetRead+0x2cc>)
 80011cc:	4603      	mov	r3, r0
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a1b      	subs	r3, r3, r0
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	3304      	adds	r3, #4
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <packetRead+0x2b8>)
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	4610      	mov	r0, r2
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4933      	ldr	r1, [pc, #204]	; (80012bc <packetRead+0x2cc>)
 80011ee:	4603      	mov	r3, r0
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	1a1b      	subs	r3, r3, r0
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	3304      	adds	r3, #4
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	3304      	adds	r3, #4
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <packetRead+0x2a8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b07      	cmp	r3, #7
 8001208:	d112      	bne.n	8001230 <packetRead+0x240>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <packetRead+0x2b8>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	4610      	mov	r0, r2
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4928      	ldr	r1, [pc, #160]	; (80012bc <packetRead+0x2cc>)
 800121a:	4603      	mov	r3, r0
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a1b      	subs	r3, r3, r0
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3308      	adds	r3, #8
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	3304      	adds	r3, #4
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	e025      	b.n	800127c <packetRead+0x28c>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <packetRead+0x2a8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b08      	cmp	r3, #8
 8001236:	d121      	bne.n	800127c <packetRead+0x28c>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <packetRead+0x2bc>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <packetRead+0x2b8>)
 800123e:	8812      	ldrh	r2, [r2, #0]
 8001240:	4611      	mov	r1, r2
 8001242:	3b01      	subs	r3, #1
 8001244:	b298      	uxth	r0, r3
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <packetRead+0x2cc>)
 8001248:	460b      	mov	r3, r1
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3318      	adds	r3, #24
 8001254:	4602      	mov	r2, r0
 8001256:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <packetRead+0x2b8>)
 8001260:	8812      	ldrh	r2, [r2, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4915      	ldr	r1, [pc, #84]	; (80012bc <packetRead+0x2cc>)
 8001268:	4603      	mov	r3, r0
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a1b      	subs	r3, r3, r0
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3314      	adds	r3, #20
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	3304      	adds	r3, #4
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					point_counter++;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <packetRead+0x2b8>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <packetRead+0x2b8>)
 8001286:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001288:	e0c9      	b.n	800141e <packetRead+0x42e>
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	a0000000 	.word	0xa0000000
 8001294:	3eb0c6f7 	.word	0x3eb0c6f7
 8001298:	200065c8 	.word	0x200065c8
 800129c:	20006f38 	.word	0x20006f38
 80012a0:	200065c0 	.word	0x200065c0
 80012a4:	20006f90 	.word	0x20006f90
 80012a8:	20002404 	.word	0x20002404
 80012ac:	20002406 	.word	0x20002406
 80012b0:	2000dd0a 	.word	0x2000dd0a
 80012b4:	20006f68 	.word	0x20006f68
 80012b8:	200065d8 	.word	0x200065d8
 80012bc:	20006fa0 	.word	0x20006fa0
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80012c0:	4bb9      	ldr	r3, [pc, #740]	; (80015a8 <packetRead+0x5b8>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4ab9      	ldr	r2, [pc, #740]	; (80015ac <packetRead+0x5bc>)
 80012c8:	460b      	mov	r3, r1
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	1a5b      	subs	r3, r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	331a      	adds	r3, #26
 80012d4:	7cba      	ldrb	r2, [r7, #18]
 80012d6:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4aaf      	ldr	r2, [pc, #700]	; (80015a8 <packetRead+0x5b8>)
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	4611      	mov	r1, r2
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	b2d8      	uxtb	r0, r3
 80012f6:	4aad      	ldr	r2, [pc, #692]	; (80015ac <packetRead+0x5bc>)
 80012f8:	460b      	mov	r3, r1
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	1a5b      	subs	r3, r3, r1
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	331b      	adds	r3, #27
 8001304:	4602      	mov	r2, r0
 8001306:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	4aa6      	ldr	r2, [pc, #664]	; (80015a8 <packetRead+0x5b8>)
 8001310:	8812      	ldrh	r2, [r2, #0]
 8001312:	4610      	mov	r0, r2
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	49a5      	ldr	r1, [pc, #660]	; (80015ac <packetRead+0x5bc>)
 8001318:	4603      	mov	r3, r0
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a1b      	subs	r3, r3, r0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	3304      	adds	r3, #4
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	4a9d      	ldr	r2, [pc, #628]	; (80015a8 <packetRead+0x5b8>)
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	4610      	mov	r0, r2
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	499c      	ldr	r1, [pc, #624]	; (80015ac <packetRead+0x5bc>)
 800133a:	4603      	mov	r3, r0
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a1b      	subs	r3, r3, r0
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	3304      	adds	r3, #4
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 800134e:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <packetRead+0x5c0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b07      	cmp	r3, #7
 8001354:	d112      	bne.n	800137c <packetRead+0x38c>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	4a92      	ldr	r2, [pc, #584]	; (80015a8 <packetRead+0x5b8>)
 800135e:	8812      	ldrh	r2, [r2, #0]
 8001360:	4610      	mov	r0, r2
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4991      	ldr	r1, [pc, #580]	; (80015ac <packetRead+0x5bc>)
 8001366:	4603      	mov	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	1a1b      	subs	r3, r3, r0
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001376:	3304      	adds	r3, #4
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800137a:	e025      	b.n	80013c8 <packetRead+0x3d8>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <packetRead+0x5c0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b08      	cmp	r3, #8
 8001382:	d121      	bne.n	80013c8 <packetRead+0x3d8>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001384:	4b8b      	ldr	r3, [pc, #556]	; (80015b4 <packetRead+0x5c4>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4a87      	ldr	r2, [pc, #540]	; (80015a8 <packetRead+0x5b8>)
 800138a:	8812      	ldrh	r2, [r2, #0]
 800138c:	4611      	mov	r1, r2
 800138e:	3b01      	subs	r3, #1
 8001390:	b298      	uxth	r0, r3
 8001392:	4a86      	ldr	r2, [pc, #536]	; (80015ac <packetRead+0x5bc>)
 8001394:	460b      	mov	r3, r1
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a5b      	subs	r3, r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3318      	adds	r3, #24
 80013a0:	4602      	mov	r2, r0
 80013a2:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a7f      	ldr	r2, [pc, #508]	; (80015a8 <packetRead+0x5b8>)
 80013ac:	8812      	ldrh	r2, [r2, #0]
 80013ae:	4610      	mov	r0, r2
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	497e      	ldr	r1, [pc, #504]	; (80015ac <packetRead+0x5bc>)
 80013b4:	4603      	mov	r3, r0
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	1a1b      	subs	r3, r3, r0
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3314      	adds	r3, #20
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	3304      	adds	r3, #4
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a76      	ldr	r2, [pc, #472]	; (80015a8 <packetRead+0x5b8>)
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	4610      	mov	r0, r2
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4975      	ldr	r1, [pc, #468]	; (80015ac <packetRead+0x5bc>)
 80013d8:	4603      	mov	r3, r0
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a1b      	subs	r3, r3, r0
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	330c      	adds	r3, #12
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	3304      	adds	r3, #4
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a6d      	ldr	r2, [pc, #436]	; (80015a8 <packetRead+0x5b8>)
 80013f4:	8812      	ldrh	r2, [r2, #0]
 80013f6:	4610      	mov	r0, r2
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	496c      	ldr	r1, [pc, #432]	; (80015ac <packetRead+0x5bc>)
 80013fc:	4603      	mov	r3, r0
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a1b      	subs	r3, r3, r0
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3310      	adds	r3, #16
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	3304      	adds	r3, #4
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001410:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <packetRead+0x5b8>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <packetRead+0x5b8>)
 800141a:	801a      	strh	r2, [r3, #0]
				}
				break;
 800141c:	bf00      	nop
				}
        	}while(temp_pointer < length);
 800141e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	f6ff ae02 	blt.w	800102c <packetRead+0x3c>
        	return CMD_GCODE;
 8001428:	231a      	movs	r3, #26
 800142a:	f000 bdd8 	b.w	8001fde <packetRead+0xfee>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 8001436:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800143a:	2b19      	cmp	r3, #25
 800143c:	f200 85cc 	bhi.w	8001fd8 <packetRead+0xfe8>
 8001440:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <packetRead+0x458>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	080014b1 	.word	0x080014b1
 800144c:	080014c9 	.word	0x080014c9
 8001450:	080014e1 	.word	0x080014e1
 8001454:	080015c9 	.word	0x080015c9
 8001458:	0800180f 	.word	0x0800180f
 800145c:	080015c9 	.word	0x080015c9
 8001460:	08001a7f 	.word	0x08001a7f
 8001464:	08001a83 	.word	0x08001a83
 8001468:	08001fd9 	.word	0x08001fd9
 800146c:	08001aa3 	.word	0x08001aa3
 8001470:	08001ac1 	.word	0x08001ac1
 8001474:	08001b23 	.word	0x08001b23
 8001478:	08001bf1 	.word	0x08001bf1
 800147c:	08001fa9 	.word	0x08001fa9
 8001480:	08001fb9 	.word	0x08001fb9
 8001484:	08001fd9 	.word	0x08001fd9
 8001488:	08001fd9 	.word	0x08001fd9
 800148c:	08001ee5 	.word	0x08001ee5
 8001490:	08001fc9 	.word	0x08001fc9
 8001494:	08001f99 	.word	0x08001f99
 8001498:	08001b8f 	.word	0x08001b8f
 800149c:	08001bb9 	.word	0x08001bb9
 80014a0:	08001fd9 	.word	0x08001fd9
 80014a4:	08001fd9 	.word	0x08001fd9
 80014a8:	08001c2b 	.word	0x08001c2b
 80014ac:	08001d05 	.word	0x08001d05
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f000 bd8b 	b.w	8001fde <packetRead+0xfee>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80014da:	2301      	movs	r3, #1
 80014dc:	f000 bd7f 	b.w	8001fde <packetRead+0xfee>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b0a      	cmp	r3, #10
 80014e4:	d15d      	bne.n	80015a2 <packetRead+0x5b2>
						temp_pointer = -2;
 80014e6:	f06f 0301 	mvn.w	r3, #1
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	3304      	adds	r3, #4
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80015b8 <packetRead+0x5c8>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	ee17 0a90 	vmov	r0, s15
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80015b8 <packetRead+0x5c8>
 8001530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001534:	ee17 0a90 	vmov	r0, s15
 8001538:	f7ff f806 	bl	8000548 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <packetRead+0x5cc>)
 800154e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <packetRead+0x5d0>)
 800155a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <packetRead+0x5d4>)
 8001566:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2202      	movs	r2, #2
 800158e:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 800159c:	2302      	movs	r3, #2
 800159e:	f000 bd1e 	b.w	8001fde <packetRead+0xfee>
                        return CMD_ERROR;
 80015a2:	2316      	movs	r3, #22
 80015a4:	f000 bd1b 	b.w	8001fde <packetRead+0xfee>
 80015a8:	20002404 	.word	0x20002404
 80015ac:	20006fa0 	.word	0x20006fa0
 80015b0:	200065c8 	.word	0x200065c8
 80015b4:	20002406 	.word	0x20002406
 80015b8:	358637bd 	.word	0x358637bd
 80015bc:	406f4000 	.word	0x406f4000
 80015c0:	c0690000 	.word	0xc0690000
 80015c4:	405e0000 	.word	0x405e0000

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b1d      	cmp	r3, #29
 80015cc:	f040 8111 	bne.w	80017f2 <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80015d0:	f06f 0301 	mvn.w	r3, #1
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d8:	3304      	adds	r3, #4
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff9d 	bl	8000524 <__aeabi_i2d>
 80015ea:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f801 	bl	80005f8 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	3304      	adds	r3, #4
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff88 	bl	8000524 <__aeabi_i2d>
 8001614:	f20f 63d8 	addw	r3, pc, #1752	; 0x6d8
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe ffec 	bl	80005f8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	3304      	adds	r3, #4
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_i2d>
 800163e:	f20f 63b0 	addw	r3, pc, #1712	; 0x6b0
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	6839      	ldr	r1, [r7, #0]
 8001650:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	3304      	adds	r3, #4
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f20f 6384 	addw	r3, pc, #1668	; 0x684
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	3304      	adds	r3, #4
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff49 	bl	8000524 <__aeabi_i2d>
 8001692:	f20f 635c 	addw	r3, pc, #1628	; 0x65c
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	3304      	adds	r3, #4
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80016b8:	7cfb      	ldrb	r3, [r7, #19]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <packetRead+0x700>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	3301      	adds	r3, #1
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff26 	bl	8000524 <__aeabi_i2d>
 80016d8:	f20f 6314 	addw	r3, pc, #1556	; 0x614
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff8a 	bl	80005f8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80016ee:	e056      	b.n	800179e <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80016f0:	7cfb      	ldrb	r3, [r7, #19]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d118      	bne.n	8001728 <packetRead+0x738>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	3301      	adds	r3, #1
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff0a 	bl	8000524 <__aeabi_i2d>
 8001710:	f20f 53dc 	addw	r3, pc, #1500	; 0x5dc
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff6e 	bl	80005f8 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001726:	e03a      	b.n	800179e <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001728:	7cfb      	ldrb	r3, [r7, #19]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d118      	bne.n	8001760 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2203      	movs	r2, #3
 8001732:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	3301      	adds	r3, #1
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feee 	bl	8000524 <__aeabi_i2d>
 8001748:	f20f 53a4 	addw	r3, pc, #1444	; 0x5a4
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800175e:	e01e      	b.n	800179e <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001760:	7cfb      	ldrb	r3, [r7, #19]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d118      	bne.n	8001798 <packetRead+0x7a8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	3301      	adds	r3, #1
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	f20f 536c 	addw	r3, pc, #1388	; 0x56c
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff36 	bl	80005f8 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001796:	e002      	b.n	800179e <packetRead+0x7ae>
						}else{
							return CMD_ERROR;
 8001798:	2316      	movs	r3, #22
 800179a:	f000 bc20 	b.w	8001fde <packetRead+0xfee>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	3304      	adds	r3, #4
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	3301      	adds	r3, #1
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80017c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d106      	bne.n	80017d8 <packetRead+0x7e8>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	735a      	strb	r2, [r3, #13]
 80017d6:	e00e      	b.n	80017f6 <packetRead+0x806>
						}else if(command_id == CMD_MOVE_JOINT){
 80017d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d106      	bne.n	80017ee <packetRead+0x7fe>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	735a      	strb	r2, [r3, #13]
 80017ec:	e003      	b.n	80017f6 <packetRead+0x806>
						}else{
							return CMD_ERROR;
 80017ee:	2316      	movs	r3, #22
 80017f0:	e3f5      	b.n	8001fde <packetRead+0xfee>
						}

					}else{
						return CMD_ERROR;
 80017f2:	2316      	movs	r3, #22
 80017f4:	e3f3      	b.n	8001fde <packetRead+0xfee>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2202      	movs	r2, #2
 80017fa:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
					return command_id;
 8001808:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800180c:	e3e7      	b.n	8001fde <packetRead+0xfee>
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b22      	cmp	r3, #34	; 0x22
 8001812:	f040 8132 	bne.w	8001a7a <packetRead+0xa8a>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001816:	f06f 0301 	mvn.w	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	3304      	adds	r3, #4
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe7a 	bl	8000524 <__aeabi_i2d>
 8001830:	f20f 43bc 	addw	r3, pc, #1212	; 0x4bc
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fede 	bl	80005f8 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	3304      	adds	r3, #4
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4413      	add	r3, r2
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe65 	bl	8000524 <__aeabi_i2d>
 800185a:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001872:	3304      	adds	r3, #4
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe50 	bl	8000524 <__aeabi_i2d>
 8001884:	f20f 4368 	addw	r3, pc, #1128	; 0x468
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe feb4 	bl	80005f8 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	3304      	adds	r3, #4
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe3b 	bl	8000524 <__aeabi_i2d>
 80018ae:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe9f 	bl	80005f8 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	3304      	adds	r3, #4
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe26 	bl	8000524 <__aeabi_i2d>
 80018d8:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe8a 	bl	80005f8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	3304      	adds	r3, #4
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe11 	bl	8000524 <__aeabi_i2d>
 8001902:	a3fb      	add	r3, pc, #1004	; (adr r3, 8001cf0 <packetRead+0xd00>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	3304      	adds	r3, #4
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 8001926:	7d7b      	ldrb	r3, [r7, #21]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d103      	bne.n	8001934 <packetRead+0x944>
                			duty_cmd->arc_dir = 1;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	e009      	b.n	8001948 <packetRead+0x958>
                		}else if(arc_type == ARC_CW_TYPE){
 8001934:	7d7b      	ldrb	r3, [r7, #21]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d104      	bne.n	8001944 <packetRead+0x954>
                			duty_cmd->arc_dir = -1;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	e001      	b.n	8001948 <packetRead+0x958>
                		}else{
                			return CMD_ERROR;
 8001944:	2316      	movs	r3, #22
 8001946:	e34a      	b.n	8001fde <packetRead+0xfee>
                		}
                		mode_init = message[temp_pointer+=1];
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	3301      	adds	r3, #1
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001958:	7d3b      	ldrb	r3, [r7, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d117      	bne.n	800198e <packetRead+0x99e>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	3301      	adds	r3, #1
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdd6 	bl	8000524 <__aeabi_i2d>
 8001978:	a3dd      	add	r3, pc, #884	; (adr r3, 8001cf0 <packetRead+0xd00>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fe3b 	bl	80005f8 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 800198c:	e052      	b.n	8001a34 <packetRead+0xa44>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d117      	bne.n	80019c4 <packetRead+0x9d4>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	3301      	adds	r3, #1
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdbb 	bl	8000524 <__aeabi_i2d>
 80019ae:	a3d0      	add	r3, pc, #832	; (adr r3, 8001cf0 <packetRead+0xd00>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fe20 	bl	80005f8 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019c2:	e037      	b.n	8001a34 <packetRead+0xa44>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80019c4:	7d3b      	ldrb	r3, [r7, #20]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d117      	bne.n	80019fa <packetRead+0xa0a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2203      	movs	r2, #3
 80019ce:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	3301      	adds	r3, #1
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fda0 	bl	8000524 <__aeabi_i2d>
 80019e4:	a3c2      	add	r3, pc, #776	; (adr r3, 8001cf0 <packetRead+0xd00>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fe05 	bl	80005f8 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019f8:	e01c      	b.n	8001a34 <packetRead+0xa44>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 80019fa:	7d3b      	ldrb	r3, [r7, #20]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d117      	bne.n	8001a30 <packetRead+0xa40>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2202      	movs	r2, #2
 8001a04:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	3301      	adds	r3, #1
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd85 	bl	8000524 <__aeabi_i2d>
 8001a1a:	a3b5      	add	r3, pc, #724	; (adr r3, 8001cf0 <packetRead+0xd00>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fdea 	bl	80005f8 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001a2e:	e001      	b.n	8001a34 <packetRead+0xa44>
						}else{
							return CMD_ERROR;
 8001a30:	2316      	movs	r3, #22
 8001a32:	e2d4      	b.n	8001fde <packetRead+0xfee>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	3304      	adds	r3, #4
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	3301      	adds	r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a76:	2304      	movs	r3, #4
 8001a78:	e2b1      	b.n	8001fde <packetRead+0xfee>
                		return CMD_ERROR;
 8001a7a:	2316      	movs	r3, #22
 8001a7c:	e2af      	b.n	8001fde <packetRead+0xfee>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e2ad      	b.n	8001fde <packetRead+0xfee>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d10a      	bne.n	8001a9e <packetRead+0xaae>
						temp_pointer = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e29f      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001a9e:	2316      	movs	r3, #22
 8001aa0:	e29d      	b.n	8001fde <packetRead+0xfee>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d109      	bne.n	8001abc <packetRead+0xacc>
						temp_pointer = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b90      	ldr	r3, [pc, #576]	; (8001cf8 <packetRead+0xd08>)
 8001ab6:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001ab8:	2309      	movs	r3, #9
 8001aba:	e290      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001abc:	2316      	movs	r3, #22
 8001abe:	e28e      	b.n	8001fde <packetRead+0xfee>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d12b      	bne.n	8001b1e <packetRead+0xb2e>
						temp_pointer = 2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <packetRead+0xd0c>)
 8001adc:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <packetRead+0xd0c>)
 8001af0:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af8:	461a      	mov	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b25a      	sxtb	r2, r3
 8001b02:	4b7e      	ldr	r3, [pc, #504]	; (8001cfc <packetRead+0xd0c>)
 8001b04:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b25a      	sxtb	r2, r3
 8001b16:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <packetRead+0xd0c>)
 8001b18:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	e25f      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001b1e:	2316      	movs	r3, #22
 8001b20:	e25d      	b.n	8001fde <packetRead+0xfee>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d130      	bne.n	8001b8a <packetRead+0xb9a>
						uint8_t method;
						temp_pointer = 2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001b36:	7dbb      	ldrb	r3, [r7, #22]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <packetRead+0xb54>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
 8001b42:	e01d      	b.n	8001b80 <packetRead+0xb90>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001b44:	7dbb      	ldrb	r3, [r7, #22]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d103      	bne.n	8001b52 <packetRead+0xb62>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	705a      	strb	r2, [r3, #1]
 8001b50:	e016      	b.n	8001b80 <packetRead+0xb90>
						} else if (SCARA_METHOD_GCODE == method) {
 8001b52:	7dbb      	ldrb	r3, [r7, #22]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d103      	bne.n	8001b60 <packetRead+0xb70>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	705a      	strb	r2, [r3, #1]
 8001b5e:	e00f      	b.n	8001b80 <packetRead+0xb90>
						}else if(SCARA_METHOD_TEST == method){
 8001b60:	7dbb      	ldrb	r3, [r7, #22]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d103      	bne.n	8001b6e <packetRead+0xb7e>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	705a      	strb	r2, [r3, #1]
 8001b6c:	e008      	b.n	8001b80 <packetRead+0xb90>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b6e:	7dbb      	ldrb	r3, [r7, #22]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d103      	bne.n	8001b7c <packetRead+0xb8c>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	705a      	strb	r2, [r3, #1]
 8001b7a:	e001      	b.n	8001b80 <packetRead+0xb90>
						}else {
							return CMD_ERROR;
 8001b7c:	2316      	movs	r3, #22
 8001b7e:	e22e      	b.n	8001fde <packetRead+0xfee>
						}
						duty_cmd->change_method = TRUE;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001b86:	230b      	movs	r3, #11
 8001b88:	e229      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001b8a:	2316      	movs	r3, #22
 8001b8c:	e227      	b.n	8001fde <packetRead+0xfee>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d10f      	bne.n	8001bb4 <packetRead+0xbc4>
						int temp_pointer = 2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001bb0:	2314      	movs	r3, #20
 8001bb2:	e214      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001bb4:	2316      	movs	r3, #22
 8001bb6:	e212      	b.n	8001fde <packetRead+0xfee>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d116      	bne.n	8001bec <packetRead+0xbfc>
						int temp_pointer = 2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	dd02      	ble.n	8001bd8 <packetRead+0xbe8>
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b0e      	cmp	r3, #14
 8001bd6:	dd01      	ble.n	8001bdc <packetRead+0xbec>
							return CMD_ERROR;
 8001bd8:	2316      	movs	r3, #22
 8001bda:	e200      	b.n	8001fde <packetRead+0xfee>
						}
						duty_cmd->key_speed = speed;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6a3a      	ldr	r2, [r7, #32]
 8001be0:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001be2:	4a47      	ldr	r2, [pc, #284]	; (8001d00 <packetRead+0xd10>)
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001be8:	2315      	movs	r3, #21
 8001bea:	e1f8      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001bec:	2316      	movs	r3, #22
 8001bee:	e1f6      	b.n	8001fde <packetRead+0xfee>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d117      	bne.n	8001c26 <packetRead+0xc36>
						int temp_pointer = 2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d901      	bls.n	8001c0e <packetRead+0xc1e>
							return CMD_ERROR;
 8001c0a:	2316      	movs	r3, #22
 8001c0c:	e1e7      	b.n	8001fde <packetRead+0xfee>
						}
						duty_cmd->test_key = test_key;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	7dfa      	ldrb	r2, [r7, #23]
 8001c12:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c22:	230c      	movs	r3, #12
 8001c24:	e1db      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001c26:	2316      	movs	r3, #22
 8001c28:	e1d9      	b.n	8001fde <packetRead+0xfee>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d15b      	bne.n	8001ce8 <packetRead+0xcf8>
						temp_pointer = -2;
 8001c30:	f06f 0301 	mvn.w	r3, #1
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	3304      	adds	r3, #4
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc6d 	bl	8000524 <__aeabi_i2d>
 8001c4a:	a329      	add	r3, pc, #164	; (adr r3, 8001cf0 <packetRead+0xd00>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fcd2 	bl	80005f8 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	3304      	adds	r3, #4
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc59 	bl	8000524 <__aeabi_i2d>
 8001c72:	a31f      	add	r3, pc, #124	; (adr r3, 8001cf0 <packetRead+0xd00>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fcbe 	bl	80005f8 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	3304      	adds	r3, #4
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc45 	bl	8000524 <__aeabi_i2d>
 8001c9a:	a315      	add	r3, pc, #84	; (adr r3, 8001cf0 <packetRead+0xd00>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcaa 	bl	80005f8 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc1b 	bl	8000504 <__aeabi_ui2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001ce4:	2318      	movs	r3, #24
 8001ce6:	e17a      	b.n	8001fde <packetRead+0xfee>
						return CMD_ERROR;
 8001ce8:	2316      	movs	r3, #22
 8001cea:	e178      	b.n	8001fde <packetRead+0xfee>
 8001cec:	f3af 8000 	nop.w
 8001cf0:	a0000000 	.word	0xa0000000
 8001cf4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cf8:	2000dd08 	.word	0x2000dd08
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000060 	.word	0x20000060
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 47) { // 11 int32_t number + 1 byte move type + 2 define byte
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b2f      	cmp	r3, #47	; 0x2f
 8001d08:	f040 80ea 	bne.w	8001ee0 <packetRead+0xef0>
						temp_pointer = -2;
 8001d0c:	f06f 0301 	mvn.w	r3, #1
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	3304      	adds	r3, #4
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fbff 	bl	8000524 <__aeabi_i2d>
 8001d26:	a3b0      	add	r3, pc, #704	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fc64 	bl	80005f8 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	49ae      	ldr	r1, [pc, #696]	; (8001ff0 <packetRead+0x1000>)
 8001d36:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fbeb 	bl	8000524 <__aeabi_i2d>
 8001d4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fc50 	bl	80005f8 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	49a5      	ldr	r1, [pc, #660]	; (8001ff4 <packetRead+0x1004>)
 8001d5e:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	3304      	adds	r3, #4
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbd7 	bl	8000524 <__aeabi_i2d>
 8001d76:	a39c      	add	r3, pc, #624	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc3c 	bl	80005f8 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	499c      	ldr	r1, [pc, #624]	; (8001ff8 <packetRead+0x1008>)
 8001d86:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbc3 	bl	8000524 <__aeabi_i2d>
 8001d9e:	a392      	add	r3, pc, #584	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc28 	bl	80005f8 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4993      	ldr	r1, [pc, #588]	; (8001ffc <packetRead+0x100c>)
 8001dae:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	3304      	adds	r3, #4
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	a388      	add	r3, pc, #544	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc14 	bl	80005f8 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	498a      	ldr	r1, [pc, #552]	; (8002000 <packetRead+0x1010>)
 8001dd6:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	3304      	adds	r3, #4
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb9b 	bl	8000524 <__aeabi_i2d>
 8001dee:	a37e      	add	r3, pc, #504	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fc00 	bl	80005f8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4981      	ldr	r1, [pc, #516]	; (8002004 <packetRead+0x1014>)
 8001dfe:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	3304      	adds	r3, #4
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb87 	bl	8000524 <__aeabi_i2d>
 8001e16:	a374      	add	r3, pc, #464	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fbec 	bl	80005f8 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4978      	ldr	r1, [pc, #480]	; (8002008 <packetRead+0x1018>)
 8001e26:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb73 	bl	8000524 <__aeabi_i2d>
 8001e3e:	a36a      	add	r3, pc, #424	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbd8 	bl	80005f8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	496f      	ldr	r1, [pc, #444]	; (800200c <packetRead+0x101c>)
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	3304      	adds	r3, #4
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb5f 	bl	8000524 <__aeabi_i2d>
 8001e66:	a360      	add	r3, pc, #384	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4966      	ldr	r1, [pc, #408]	; (8002010 <packetRead+0x1020>)
 8001e76:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb4b 	bl	8000524 <__aeabi_i2d>
 8001e8e:	a356      	add	r3, pc, #344	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fbb0 	bl	80005f8 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	495d      	ldr	r1, [pc, #372]	; (8002014 <packetRead+0x1024>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb37 	bl	8000524 <__aeabi_i2d>
 8001eb6:	a34c      	add	r3, pc, #304	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb9c 	bl	80005f8 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4954      	ldr	r1, [pc, #336]	; (8002018 <packetRead+0x1028>)
 8001ec6:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	3304      	adds	r3, #4
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <packetRead+0x102c>)
 8001eda:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001edc:	2319      	movs	r3, #25
 8001ede:	e07e      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001ee0:	2316      	movs	r3, #22
 8001ee2:	e07c      	b.n	8001fde <packetRead+0xfee>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d154      	bne.n	8001f94 <packetRead+0xfa4>
						temp_pointer = -2;
 8001eea:	f06f 0301 	mvn.w	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb10 	bl	8000524 <__aeabi_i2d>
 8001f04:	a338      	add	r3, pc, #224	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fb75 	bl	80005f8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4943      	ldr	r1, [pc, #268]	; (8002020 <packetRead+0x1030>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fafc 	bl	8000524 <__aeabi_i2d>
 8001f2c:	a32e      	add	r3, pc, #184	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb61 	bl	80005f8 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	493a      	ldr	r1, [pc, #232]	; (8002024 <packetRead+0x1034>)
 8001f3c:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	3304      	adds	r3, #4
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fae8 	bl	8000524 <__aeabi_i2d>
 8001f54:	a324      	add	r3, pc, #144	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb4d 	bl	80005f8 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4931      	ldr	r1, [pc, #196]	; (8002028 <packetRead+0x1038>)
 8001f64:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fad4 	bl	8000524 <__aeabi_i2d>
 8001f7c:	a31a      	add	r3, pc, #104	; (adr r3, 8001fe8 <packetRead+0xff8>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb39 	bl	80005f8 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4928      	ldr	r1, [pc, #160]	; (800202c <packetRead+0x103c>)
 8001f8c:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8001f90:	2311      	movs	r3, #17
 8001f92:	e024      	b.n	8001fde <packetRead+0xfee>
					}else{
						return CMD_ERROR;
 8001f94:	2316      	movs	r3, #22
 8001f96:	e022      	b.n	8001fde <packetRead+0xfee>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001fa4:	2313      	movs	r3, #19
 8001fa6:	e01a      	b.n	8001fde <packetRead+0xfee>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2202      	movs	r2, #2
 8001fac:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001fb4:	230d      	movs	r3, #13
 8001fb6:	e012      	b.n	8001fde <packetRead+0xfee>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001fc4:	230e      	movs	r3, #14
 8001fc6:	e00a      	b.n	8001fde <packetRead+0xfee>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	e002      	b.n	8001fde <packetRead+0xfee>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001fd8:	2316      	movs	r3, #22
 8001fda:	e000      	b.n	8001fde <packetRead+0xfee>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001fdc:	2317      	movs	r3, #23
        }
    }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3730      	adds	r7, #48	; 0x30
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	a0000000 	.word	0xa0000000
 8001fec:	3eb0c6f7 	.word	0x3eb0c6f7
 8001ff0:	20000058 	.word	0x20000058
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	20000018 	.word	0x20000018
 8002000:	20000020 	.word	0x20000020
 8002004:	20000028 	.word	0x20000028
 8002008:	20000030 	.word	0x20000030
 800200c:	20000038 	.word	0x20000038
 8002010:	20000040 	.word	0x20000040
 8002014:	20000048 	.word	0x20000048
 8002018:	20000050 	.word	0x20000050
 800201c:	20000064 	.word	0x20000064
 8002020:	20006f88 	.word	0x20006f88
 8002024:	2000dd20 	.word	0x2000dd20
 8002028:	2000dd10 	.word	0x2000dd10
 800202c:	20006f80 	.word	0x20006f80

08002030 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8002030:	b082      	sub	sp, #8
 8002032:	b580      	push	{r7, lr}
 8002034:	b0e2      	sub	sp, #392	; 0x188
 8002036:	af2e      	add	r7, sp, #184	; 0xb8
 8002038:	4601      	mov	r1, r0
 800203a:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800203e:	e880 000c 	stmia.w	r0, {r2, r3}
 8002042:	460b      	mov	r3, r1
 8002044:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b1a      	cmp	r3, #26
 800204a:	f200 815e 	bhi.w	800230a <commandReply+0x2da>
 800204e:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <commandReply+0x24>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	080020c1 	.word	0x080020c1
 8002058:	080020c1 	.word	0x080020c1
 800205c:	080020c1 	.word	0x080020c1
 8002060:	080020c1 	.word	0x080020c1
 8002064:	080020c1 	.word	0x080020c1
 8002068:	080020c1 	.word	0x080020c1
 800206c:	080020c1 	.word	0x080020c1
 8002070:	080020c9 	.word	0x080020c9
 8002074:	08002143 	.word	0x08002143
 8002078:	08002177 	.word	0x08002177
 800207c:	0800220d 	.word	0x0800220d
 8002080:	08002237 	.word	0x08002237
 8002084:	080020c1 	.word	0x080020c1
 8002088:	08002299 	.word	0x08002299
 800208c:	08002299 	.word	0x08002299
 8002090:	08002299 	.word	0x08002299
 8002094:	08002299 	.word	0x08002299
 8002098:	08002277 	.word	0x08002277
 800209c:	08002299 	.word	0x08002299
 80020a0:	08002299 	.word	0x08002299
 80020a4:	080022a1 	.word	0x080022a1
 80020a8:	080022a9 	.word	0x080022a9
 80020ac:	080022e9 	.word	0x080022e9
 80020b0:	0800230b 	.word	0x0800230b
 80020b4:	080020c1 	.word	0x080020c1
 80020b8:	0800222f 	.word	0x0800222f
 80020bc:	0800223f 	.word	0x0800223f
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80020c0:	2309      	movs	r3, #9
 80020c2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80020c6:	e130      	b.n	800232a <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 80020c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d110      	bne.n	80020f2 <commandReply+0xc2>
				scaraSetOutput(1);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f008 f8f1 	bl	800a2b8 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 80020d6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	1c59      	adds	r1, r3, #1
 80020de:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020e2:	6011      	str	r1, [r2, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020ea:	4413      	add	r3, r2
 80020ec:	220d      	movs	r2, #13
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e023      	b.n	800213a <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 80020f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d110      	bne.n	800211c <commandReply+0xec>
				scaraSetOutput(0);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f008 f8dc 	bl	800a2b8 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8002100:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800210c:	6011      	str	r1, [r2, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002114:	4413      	add	r3, r2
 8002116:	220e      	movs	r2, #14
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e00e      	b.n	800213a <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 800211c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1c59      	adds	r1, r3, #1
 8002124:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002128:	6011      	str	r1, [r2, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002130:	4413      	add	r3, r2
 8002132:	220f      	movs	r2, #15
 8002134:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002136:	2307      	movs	r3, #7
 8002138:	e0f9      	b.n	800232e <commandReply+0x2fe>
			}
			ret = RPD_OK;
 800213a:	2308      	movs	r3, #8
 800213c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8002140:	e0f3      	b.n	800232a <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8002142:	f008 f91b 	bl	800a37c <scaraGetMode>
 8002146:	4603      	mov	r3, r0
 8002148:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 800214c:	f008 f92e 	bl	800a3ac <scaraGetDutyState>
 8002150:	4603      	mov	r3, r0
 8002152:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002156:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <commandReply+0x13e>
 800215e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <commandReply+0x13e>
				ret = RPD_IDLE;
 8002166:	2300      	movs	r3, #0
 8002168:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800216c:	e0dd      	b.n	800232a <commandReply+0x2fa>
				ret = RPD_BUSY;
 800216e:	2301      	movs	r3, #1
 8002170:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002174:	e0d9      	b.n	800232a <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002176:	4b71      	ldr	r3, [pc, #452]	; (800233c <commandReply+0x30c>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <commandReply+0x156>
 800217e:	4b6f      	ldr	r3, [pc, #444]	; (800233c <commandReply+0x30c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d113      	bne.n	80021ae <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fdc0 	bl	8005d10 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fe97 	bl	8004ec8 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800219a:	4b68      	ldr	r3, [pc, #416]	; (800233c <commandReply+0x30c>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d11e      	bne.n	80021e0 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4618      	mov	r0, r3
 80021a8:	f008 f8d8 	bl	800a35c <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80021ac:	e018      	b.n	80021e0 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <commandReply+0x30c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d105      	bne.n	80021c2 <commandReply+0x192>
				scaraGetPosition(&position);
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4618      	mov	r0, r3
 80021bc:	f008 f8be 	bl	800a33c <scaraGetPosition>
 80021c0:	e00e      	b.n	80021e0 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80021c2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c59      	adds	r1, r3, #1
 80021ca:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021ce:	6011      	str	r1, [r2, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021d6:	4413      	add	r3, r2
 80021d8:	2210      	movs	r2, #16
 80021da:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021dc:	2307      	movs	r3, #7
 80021de:	e0a6      	b.n	800232e <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 80021e0:	4668      	mov	r0, sp
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	22b8      	movs	r2, #184	; 0xb8
 80021e8:	4619      	mov	r1, r3
 80021ea:	f013 fd19 	bl	8015c20 <memcpy>
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	cb0c      	ldmia	r3, {r2, r3}
 80021f4:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 80021f8:	f008 f90a 	bl	800a410 <scaraPosition_packaging>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002202:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8002204:	2302      	movs	r3, #2
 8002206:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 800220a:	e08e      	b.n	800232a <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 800220c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002218:	6011      	str	r1, [r2, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002220:	4413      	add	r3, r2
 8002222:	2211      	movs	r2, #17
 8002224:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002226:	2308      	movs	r3, #8
 8002228:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800222c:	e07d      	b.n	800232a <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 800222e:	2308      	movs	r3, #8
 8002230:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002234:	e079      	b.n	800232a <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8002236:	2309      	movs	r3, #9
 8002238:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800223c:	e075      	b.n	800232a <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 800223e:	4b40      	ldr	r3, [pc, #256]	; (8002340 <commandReply+0x310>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <commandReply+0x314>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d110      	bne.n	800226e <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 800224c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002260:	4413      	add	r3, r2
 8002262:	221e      	movs	r2, #30
 8002264:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002266:	2308      	movs	r3, #8
 8002268:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 800226c:	e05d      	b.n	800232a <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 800226e:	230a      	movs	r3, #10
 8002270:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002274:	e059      	b.n	800232a <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8002276:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1c59      	adds	r1, r3, #1
 800227e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002282:	6011      	str	r1, [r2, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800228a:	4413      	add	r3, r2
 800228c:	221f      	movs	r2, #31
 800228e:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002290:	2308      	movs	r3, #8
 8002292:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 8002296:	e048      	b.n	800232a <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 8002298:	2309      	movs	r3, #9
 800229a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800229e:	e044      	b.n	800232a <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80022a0:	2309      	movs	r3, #9
 80022a2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022a6:	e040      	b.n	800232a <commandReply+0x2fa>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 80022a8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1c59      	adds	r1, r3, #1
 80022b0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022b4:	6011      	str	r1, [r2, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022bc:	4413      	add	r3, r2
 80022be:	2216      	movs	r2, #22
 80022c0:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80022c2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80022c6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c59      	adds	r1, r3, #1
 80022ce:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022d2:	6011      	str	r1, [r2, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022da:	4413      	add	r3, r2
 80022dc:	b2c2      	uxtb	r2, r0
 80022de:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80022e0:	2308      	movs	r3, #8
 80022e2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 80022e6:	e020      	b.n	800232a <commandReply+0x2fa>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 80022e8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1c59      	adds	r1, r3, #1
 80022f0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022f4:	6011      	str	r1, [r2, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022fc:	4413      	add	r3, r2
 80022fe:	2215      	movs	r2, #21
 8002300:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002302:	2307      	movs	r3, #7
 8002304:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 8002308:	e00f      	b.n	800232a <commandReply+0x2fa>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 800230a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	1c59      	adds	r1, r3, #1
 8002312:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002316:	6011      	str	r1, [r2, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800231e:	4413      	add	r3, r2
 8002320:	2217      	movs	r2, #23
 8002322:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002324:	2307      	movs	r3, #7
 8002326:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 800232a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800232e:	4618      	mov	r0, r3
 8002330:	37d0      	adds	r7, #208	; 0xd0
 8002332:	46bd      	mov	sp, r7
 8002334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002338:	b002      	add	sp, #8
 800233a:	4770      	bx	lr
 800233c:	2000dd08 	.word	0x2000dd08
 8002340:	20002404 	.word	0x20002404
 8002344:	20006f90 	.word	0x20006f90

08002348 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	617a      	str	r2, [r7, #20]
 8002362:	461a      	mov	r2, r3
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	4413      	add	r3, r2
 8002368:	2228      	movs	r2, #40	; 0x28
 800236a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	617a      	str	r2, [r7, #20]
 8002372:	461a      	mov	r2, r3
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	4413      	add	r3, r2
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	617a      	str	r2, [r7, #20]
 8002382:	461a      	mov	r2, r3
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	4413      	add	r3, r2
 8002388:	2202      	movs	r2, #2
 800238a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	617a      	str	r2, [r7, #20]
 8002392:	461a      	mov	r2, r3
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	4413      	add	r3, r2
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	617a      	str	r2, [r7, #20]
 80023a2:	461a      	mov	r2, r3
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	4413      	add	r3, r2
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	6a3a      	ldr	r2, [r7, #32]
 80023b8:	4413      	add	r3, r2
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f013 fc2e 	bl	8015c20 <memcpy>
		out_length += detail_length;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e007      	b.n	80023de <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	617a      	str	r2, [r7, #20]
 80023d4:	461a      	mov	r2, r3
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	4413      	add	r3, r2
 80023da:	2225      	movs	r2, #37	; 0x25
 80023dc:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	617a      	str	r2, [r7, #20]
 80023e4:	461a      	mov	r2, r3
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	4413      	add	r3, r2
 80023ea:	227d      	movs	r2, #125	; 0x7d
 80023ec:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	617a      	str	r2, [r7, #20]
 80023f4:	461a      	mov	r2, r3
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	4413      	add	r3, r2
 80023fa:	2229      	movs	r2, #41	; 0x29
 80023fc:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	3301      	adds	r3, #1
 8002406:	3a02      	subs	r2, #2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]
	return out_length;
 800240c:	697b      	ldr	r3, [r7, #20]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b096      	sub	sp, #88	; 0x58
 800241c:	af02      	add	r7, sp, #8
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	f107 0008 	add.w	r0, r7, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <LOG_REPORT+0x78>)
 8002432:	213f      	movs	r1, #63	; 0x3f
 8002434:	f014 fb5e 	bl	8016af4 <sniprintf>
 8002438:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 800243a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d101      	bne.n	8002446 <LOG_REPORT+0x2e>
		return FALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	e01f      	b.n	8002486 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800244c:	4619      	mov	r1, r3
 800244e:	4811      	ldr	r0, [pc, #68]	; (8002494 <LOG_REPORT+0x7c>)
 8002450:	f003 f97e 	bl	8005750 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8002454:	4810      	ldr	r0, [pc, #64]	; (8002498 <LOG_REPORT+0x80>)
 8002456:	f009 fb39 	bl	800bacc <HAL_DMA_GetState>
 800245a:	4603      	mov	r3, r0
 800245c:	2b02      	cmp	r3, #2
 800245e:	d101      	bne.n	8002464 <LOG_REPORT+0x4c>
		return TRUE;
 8002460:	2301      	movs	r3, #1
 8002462:	e010      	b.n	8002486 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <LOG_REPORT+0x84>)
 800246a:	480a      	ldr	r0, [pc, #40]	; (8002494 <LOG_REPORT+0x7c>)
 800246c:	f003 f998 	bl	80057a0 <ringBuff_PopArray>
 8002470:	4603      	mov	r3, r0
 8002472:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8002476:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800247a:	461a      	mov	r2, r3
 800247c:	4907      	ldr	r1, [pc, #28]	; (800249c <LOG_REPORT+0x84>)
 800247e:	4808      	ldr	r0, [pc, #32]	; (80024a0 <LOG_REPORT+0x88>)
 8002480:	f00c f8c0 	bl	800e604 <HAL_UART_Transmit_DMA>
	return TRUE;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	3750      	adds	r7, #80	; 0x50
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	0801bed0 	.word	0x0801bed0
 8002494:	20001074 	.word	0x20001074
 8002498:	2000edf8 	.word	0x2000edf8
 800249c:	2000dd28 	.word	0x2000dd28
 80024a0:	2000edb8 	.word	0x2000edb8

080024a4 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	3b02      	subs	r3, #2
 80024b4:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d119      	bne.n	80024f8 <unPackPayload+0x54>
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <unPackPayload+0xdc>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d115      	bne.n	80024f8 <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	dc02      	bgt.n	80024d8 <unPackPayload+0x34>
			return -1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	e04f      	b.n	8002578 <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b28      	cmp	r3, #40	; 0x28
 80024de:	d002      	beq.n	80024e6 <unPackPayload+0x42>
			return -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	e048      	b.n	8002578 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1c99      	adds	r1, r3, #2
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3b02      	subs	r3, #2
 80024ee:	461a      	mov	r2, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f013 fb95 	bl	8015c20 <memcpy>
 80024f6:	e03d      	b.n	8002574 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4293      	cmp	r3, r2
 8002504:	d01b      	beq.n	800253e <unPackPayload+0x9a>
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <unPackPayload+0xdc>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d117      	bne.n	800253e <unPackPayload+0x9a>
		backup_available = 1;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <unPackPayload+0xdc>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b28      	cmp	r3, #40	; 0x28
 800251a:	d002      	beq.n	8002522 <unPackPayload+0x7e>
			return -1;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
 8002520:	e02a      	b.n	8002578 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3302      	adds	r3, #2
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f013 fb78 	bl	8015c20 <memcpy>
		backup_length = data_length;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <unPackPayload+0xe0>)
 8002536:	701a      	strb	r2, [r3, #0]
		return - 1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	e01c      	b.n	8002578 <unPackPayload+0xd4>
	}else if(backup_available == 1){
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <unPackPayload+0xdc>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d113      	bne.n	800256e <unPackPayload+0xca>
		backup_available = 0;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <unPackPayload+0xdc>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <unPackPayload+0xe0>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	68f9      	ldr	r1, [r7, #12]
 800255a:	4618      	mov	r0, r3
 800255c:	f013 fb60 	bl	8015c20 <memcpy>
		data_length = backup_length + in_length;
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <unPackPayload+0xe0>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	e002      	b.n	8002574 <unPackPayload+0xd0>
	}else{
		return - 1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e001      	b.n	8002578 <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3b02      	subs	r3, #2
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000de28 	.word	0x2000de28
 8002584:	2000de29 	.word	0x2000de29

08002588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_DMA_Init+0x3c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <MX_DMA_Init+0x3c>)
 8002598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_DMA_Init+0x3c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2105      	movs	r1, #5
 80025ae:	200f      	movs	r0, #15
 80025b0:	f008 ffb0 	bl	800b514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025b4:	200f      	movs	r0, #15
 80025b6:	f008 ffc9 	bl	800b54c <HAL_NVIC_EnableIRQ>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80025d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <vApplicationGetIdleTaskMemory+0x30>)
 80025de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	20002408 	.word	0x20002408
 80025f8:	2000245c 	.word	0x2000245c

080025fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025fc:	b5b0      	push	{r4, r5, r7, lr}
 80025fe:	b094      	sub	sp, #80	; 0x50
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8002602:	2300      	movs	r3, #0
 8002604:	64bb      	str	r3, [r7, #72]	; 0x48
 8002606:	2300      	movs	r3, #0
 8002608:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 800260a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800260e:	4618      	mov	r0, r3
 8002610:	f010 f804 	bl	801261c <osMutexCreate>
 8002614:	4603      	mov	r3, r0
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <MX_FREERTOS_Init+0x90>)
 8002618:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 800261a:	2301      	movs	r3, #1
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
 800261e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002624:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002628:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 800262a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f010 f90b 	bl	801284c <osMailCreate>
 8002636:	4603      	mov	r3, r0
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <MX_FREERTOS_Init+0x94>)
 800263a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_FREERTOS_Init+0x98>)
 800263e:	f107 041c 	add.w	r4, r7, #28
 8002642:	461d      	mov	r5, r3
 8002644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800264c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f00f fef3 	bl	8012442 <osThreadCreate>
 800265c:	4603      	mov	r3, r0
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <MX_FREERTOS_Init+0x9c>)
 8002660:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_FREERTOS_Init+0xa0>)
 8002664:	463c      	mov	r4, r7
 8002666:	461d      	mov	r5, r3
 8002668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002674:	463b      	mov	r3, r7
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f00f fee2 	bl	8012442 <osThreadCreate>
 800267e:	4603      	mov	r3, r0
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <MX_FREERTOS_Init+0xa4>)
 8002682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002684:	bf00      	nop
 8002686:	3750      	adds	r7, #80	; 0x50
 8002688:	46bd      	mov	sp, r7
 800268a:	bdb0      	pop	{r4, r5, r7, pc}
 800268c:	2000de30 	.word	0x2000de30
 8002690:	2000de34 	.word	0x2000de34
 8002694:	0801bf0c 	.word	0x0801bf0c
 8002698:	2000de2c 	.word	0x2000de2c
 800269c:	0801bf28 	.word	0x0801bf28
 80026a0:	2000de38 	.word	0x2000de38
 80026a4:	00000000 	.word	0x00000000

080026a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	f5ad 5d8f 	sub.w	sp, sp, #4576	; 0x11e0
 80026ae:	b081      	sub	sp, #4
 80026b0:	af6c      	add	r7, sp, #432	; 0x1b0
 80026b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b6:	3b14      	subs	r3, #20
 80026b8:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80026ba:	f012 fd27 	bl	801510c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80026be:	2201      	movs	r2, #1
 80026c0:	2110      	movs	r1, #16
 80026c2:	48c7      	ldr	r0, [pc, #796]	; (80029e0 <StartDefaultTask+0x338>)
 80026c4:	f009 fc8c 	bl	800bfe0 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026ce:	f102 020f 	add.w	r2, r2, #15
 80026d2:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80026da:	f102 020e 	add.w	r2, r2, #14
 80026de:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80026e6:	f102 020d 	add.w	r2, r2, #13
 80026ea:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80026f8:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8002702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002706:	3b10      	subs	r3, #16
 8002708:	4ab6      	ldr	r2, [pc, #728]	; (80029e4 <StartDefaultTask+0x33c>)
 800270a:	4618      	mov	r0, r3
 800270c:	4611      	mov	r1, r2
 800270e:	2390      	movs	r3, #144	; 0x90
 8002710:	461a      	mov	r2, r3
 8002712:	f013 fa85 	bl	8015c20 <memcpy>
  		{259.568f, -45.056f, 0.0f} ,
		{262.279f, -14.61f, 0.0f} ,
		{264.560f, 15.48f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002716:	21e7      	movs	r1, #231	; 0xe7
 8002718:	48b3      	ldr	r0, [pc, #716]	; (80029e8 <StartDefaultTask+0x340>)
 800271a:	f7ff fe7d 	bl	8002418 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800271e:	f007 fe39 	bl	800a394 <scaraGetMethod>
 8002722:	4603      	mov	r3, r0
 8002724:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002728:	f102 0207 	add.w	r2, r2, #7
 800272c:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 800272e:	f007 fe25 	bl	800a37c <scaraGetMode>
 8002732:	4603      	mov	r3, r0
 8002734:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002738:	f102 0206 	add.w	r2, r2, #6
 800273c:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 800273e:	f007 fe35 	bl	800a3ac <scaraGetDutyState>
 8002742:	4603      	mov	r3, r0
 8002744:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002748:	f102 0205 	add.w	r2, r2, #5
 800274c:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 800274e:	f003 fffb 	bl	8006748 <scaraStartup>
  osDelay(10);
 8002752:	200a      	movs	r0, #10
 8002754:	f00f fec1 	bl	80124da <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8002758:	49a4      	ldr	r1, [pc, #656]	; (80029ec <StartDefaultTask+0x344>)
 800275a:	a399      	add	r3, pc, #612	; (adr r3, 80029c0 <StartDefaultTask+0x318>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002764:	49a1      	ldr	r1, [pc, #644]	; (80029ec <StartDefaultTask+0x344>)
 8002766:	a398      	add	r3, pc, #608	; (adr r3, 80029c8 <StartDefaultTask+0x320>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8002770:	499e      	ldr	r1, [pc, #632]	; (80029ec <StartDefaultTask+0x344>)
 8002772:	a397      	add	r3, pc, #604	; (adr r3, 80029d0 <StartDefaultTask+0x328>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 800277c:	499b      	ldr	r1, [pc, #620]	; (80029ec <StartDefaultTask+0x344>)
 800277e:	a396      	add	r3, pc, #600	; (adr r3, 80029d8 <StartDefaultTask+0x330>)
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 8002788:	4998      	ldr	r1, [pc, #608]	; (80029ec <StartDefaultTask+0x344>)
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 8002796:	4895      	ldr	r0, [pc, #596]	; (80029ec <StartDefaultTask+0x344>)
 8002798:	f002 fb96 	bl	8004ec8 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800279c:	4894      	ldr	r0, [pc, #592]	; (80029f0 <StartDefaultTask+0x348>)
 800279e:	f00b fb00 	bl	800dda2 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	3b08      	subs	r3, #8
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f00f fee8 	bl	8012584 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
	  respond_packed_lenght = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
	  infor_lenght			= 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
	  infor_packed_lenght	= 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
	  task_usb_lenght		= 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
	  usb_lenght			= 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
	  total_respond_length  = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027de:	f102 0208 	add.w	r2, r2, #8
 80027e2:	6013      	str	r3, [r2, #0]
	  detail_ptr 			= 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80027ea:	4a82      	ldr	r2, [pc, #520]	; (80029f4 <StartDefaultTask+0x34c>)
 80027ec:	4b82      	ldr	r3, [pc, #520]	; (80029f8 <StartDefaultTask+0x350>)
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	461a      	mov	r2, r3
 80027f6:	f013 fa13 	bl	8015c20 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 80027fa:	4a7f      	ldr	r2, [pc, #508]	; (80029f8 <StartDefaultTask+0x350>)
 80027fc:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <StartDefaultTask+0x344>)
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	23c0      	movs	r3, #192	; 0xc0
 8002804:	461a      	mov	r2, r3
 8002806:	f013 fa0b 	bl	8015c20 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 800280a:	4b7c      	ldr	r3, [pc, #496]	; (80029fc <StartDefaultTask+0x354>)
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 8002812:	2200      	movs	r2, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f010 f8c5 	bl	80129a4 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 800281a:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 800281e:	2b20      	cmp	r3, #32
 8002820:	d119      	bne.n	8002856 <StartDefaultTask+0x1ae>
		   dataMail = ret_mail.value.p;
 8002822:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 8002826:	f8c7 3fd8 	str.w	r3, [r7, #4056]	; 0xfd8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 800282a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800282e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002832:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 8002836:	4618      	mov	r0, r3
 8002838:	f013 f9f2 	bl	8015c20 <memcpy>
		   isNewDuty = TRUE;
 800283c:	2301      	movs	r3, #1
 800283e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002842:	f102 020f 	add.w	r2, r2, #15
 8002846:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <StartDefaultTask+0x354>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 8002850:	4618      	mov	r0, r3
 8002852:	f010 f91b 	bl	8012a8c <osMailFree>
	  }
	  if(isNewDuty) {
 8002856:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800285a:	f103 030f 	add.w	r3, r3, #15
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 847a 	beq.w	800315a <StartDefaultTask+0xab2>
		  if (duty_cmd.change_method == TRUE) {
 8002866:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	f040 8140 	bne.w	8002af2 <StartDefaultTask+0x44a>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002872:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d132      	bne.n	80028e2 <StartDefaultTask+0x23a>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 800287c:	2300      	movs	r3, #0
 800287e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002882:	f102 0207 	add.w	r2, r2, #7
 8002886:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002888:	2300      	movs	r3, #0
 800288a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800288e:	f102 0205 	add.w	r2, r2, #5
 8002892:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 8002894:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002898:	2218      	movs	r2, #24
 800289a:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800289c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80028a6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028aa:	f103 0308 	add.w	r3, r3, #8
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	2008      	movs	r0, #8
 80028bc:	f7ff fd44 	bl	8002348 <commandRespond1>
 80028c0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 80028c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028c8:	f103 0308 	add.w	r3, r3, #8
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80028d2:	4413      	add	r3, r2
 80028d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80028d8:	f102 0208 	add.w	r2, r2, #8
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	f000 bc36 	b.w	800314e <StartDefaultTask+0xaa6>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80028e2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d131      	bne.n	8002950 <StartDefaultTask+0x2a8>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80028f2:	f102 0207 	add.w	r2, r2, #7
 80028f6:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80028fe:	f102 0205 	add.w	r2, r2, #5
 8002902:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 8002904:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002908:	2219      	movs	r2, #25
 800290a:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800290c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002916:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800291a:	f103 0308 	add.w	r3, r3, #8
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4413      	add	r3, r2
 8002922:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	2008      	movs	r0, #8
 800292c:	f7ff fd0c 	bl	8002348 <commandRespond1>
 8002930:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 8002934:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002938:	f103 0308 	add.w	r3, r3, #8
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002942:	4413      	add	r3, r2
 8002944:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002948:	f102 0208 	add.w	r2, r2, #8
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e3fe      	b.n	800314e <StartDefaultTask+0xaa6>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002950:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d152      	bne.n	8002a00 <StartDefaultTask+0x358>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800295a:	2300      	movs	r3, #0
 800295c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002960:	f102 0205 	add.w	r2, r2, #5
 8002964:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002966:	2302      	movs	r3, #2
 8002968:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800296c:	f102 0207 	add.w	r2, r2, #7
 8002970:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002972:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002976:	221a      	movs	r2, #26
 8002978:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800297a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002984:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002988:	f103 0308 	add.w	r3, r3, #8
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4413      	add	r3, r2
 8002990:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2301      	movs	r3, #1
 8002998:	2008      	movs	r0, #8
 800299a:	f7ff fcd5 	bl	8002348 <commandRespond1>
 800299e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 80029a2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029a6:	f103 0308 	add.w	r3, r3, #8
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80029b0:	4413      	add	r3, r2
 80029b2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029b6:	f102 0208 	add.w	r2, r2, #8
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e3c7      	b.n	800314e <StartDefaultTask+0xaa6>
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000
 80029c4:	bff7b904 	.word	0xbff7b904
 80029c8:	80000000 	.word	0x80000000
 80029cc:	4002d893 	.word	0x4002d893
 80029d0:	90c91080 	.word	0x90c91080
 80029d4:	3fa1eb63 	.word	0x3fa1eb63
 80029d8:	cec41dd2 	.word	0xcec41dd2
 80029dc:	4007ba14 	.word	0x4007ba14
 80029e0:	40020400 	.word	0x40020400
 80029e4:	0801c028 	.word	0x0801c028
 80029e8:	0801bf44 	.word	0x0801bf44
 80029ec:	2000ec38 	.word	0x2000ec38
 80029f0:	2000ed78 	.word	0x2000ed78
 80029f4:	2000e938 	.word	0x2000e938
 80029f8:	2000eab8 	.word	0x2000eab8
 80029fc:	2000de34 	.word	0x2000de34
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002a00:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d13b      	bne.n	8002a82 <StartDefaultTask+0x3da>
				  test_value[0] = 0;
 8002a0a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002a12:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a16:	2200      	movs	r2, #0
 8002a18:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002a1a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a1e:	2200      	movs	r2, #0
 8002a20:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002a22:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a26:	2200      	movs	r2, #0
 8002a28:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a30:	f102 0207 	add.w	r2, r2, #7
 8002a34:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 8002a36:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002a3a:	221b      	movs	r2, #27
 8002a3c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a3e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002a48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a4c:	f103 0308 	add.w	r3, r3, #8
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	2008      	movs	r0, #8
 8002a5e:	f7ff fc73 	bl	8002348 <commandRespond1>
 8002a62:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002a66:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a6a:	f103 0308 	add.w	r3, r3, #8
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002a74:	4413      	add	r3, r2
 8002a76:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a7a:	f102 0208 	add.w	r2, r2, #8
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e365      	b.n	800314e <StartDefaultTask+0xaa6>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002a82:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	f040 8360 	bne.w	800314e <StartDefaultTask+0xaa6>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a94:	f102 0207 	add.w	r2, r2, #7
 8002a98:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002aa0:	f102 0205 	add.w	r2, r2, #5
 8002aa4:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002aa6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002aaa:	221c      	movs	r2, #28
 8002aac:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002aae:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002ab8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002abc:	f103 0308 	add.w	r3, r3, #8
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2301      	movs	r3, #1
 8002acc:	2008      	movs	r0, #8
 8002ace:	f7ff fc3b 	bl	8002348 <commandRespond1>
 8002ad2:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002ad6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ada:	f103 0308 	add.w	r3, r3, #8
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002aea:	f102 0208 	add.w	r2, r2, #8
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	e32d      	b.n	800314e <StartDefaultTask+0xaa6>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002af2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002af6:	785b      	ldrb	r3, [r3, #1]
 8002af8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002afc:	f102 0207 	add.w	r2, r2, #7
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	f040 82fa 	bne.w	80030fc <StartDefaultTask+0xa54>
				  	  switch( duty_cmd.robot_method) {
 8002b08:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	f200 82ee 	bhi.w	80030f0 <StartDefaultTask+0xa48>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <StartDefaultTask+0x474>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b31 	.word	0x08002b31
 8002b20:	08002bb7 	.word	0x08002bb7
 8002b24:	08002f7d 	.word	0x08002f7d
 8002b28:	08002e0b 	.word	0x08002e0b
 8002b2c:	08003027 	.word	0x08003027
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002b30:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b34:	f103 0303 	add.w	r3, r3, #3
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <StartDefaultTask+0x4c4>
				  			  current_key = duty_cmd.keyboard;
 8002b3e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b42:	78db      	ldrb	r3, [r3, #3]
 8002b44:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b48:	f102 0202 	add.w	r2, r2, #2
 8002b4c:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b54:	f102 0203 	add.w	r2, r2, #3
 8002b58:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002b5a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b64:	f102 021c 	add.w	r2, r2, #28
 8002b68:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002b6a:	e2ed      	b.n	8003148 <StartDefaultTask+0xaa0>
				  		  } else if (current_key == duty_cmd.keyboard
 8002b6c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b70:	78db      	ldrb	r3, [r3, #3]
 8002b72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b76:	f102 0202 	add.w	r2, r2, #2
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f040 82e3 	bne.w	8003148 <StartDefaultTask+0xaa0>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002b82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b86:	f103 0303 	add.w	r3, r3, #3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	f040 82db 	bne.w	8003148 <StartDefaultTask+0xaa0>
									  && current_key_speed == duty_cmd.key_speed) {
 8002b92:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b9c:	f102 021c 	add.w	r2, r2, #28
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	f040 82d0 	bne.w	8003148 <StartDefaultTask+0xaa0>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bae:	f102 0203 	add.w	r2, r2, #3
 8002bb2:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002bb4:	e2c8      	b.n	8003148 <StartDefaultTask+0xaa0>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002bb6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002bba:	789b      	ldrb	r3, [r3, #2]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	f000 80a4 	beq.w	8002d0a <StartDefaultTask+0x662>
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	f300 811a 	bgt.w	8002dfc <StartDefaultTask+0x754>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <StartDefaultTask+0x52a>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d031      	beq.n	8002c34 <StartDefaultTask+0x58c>
 8002bd0:	e114      	b.n	8002dfc <StartDefaultTask+0x754>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bd8:	f102 0206 	add.w	r2, r2, #6
 8002bdc:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002bde:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002be2:	2220      	movs	r2, #32
 8002be4:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002be6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002bf0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002bf4:	f103 0308 	add.w	r3, r3, #8
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2301      	movs	r3, #1
 8002c04:	2008      	movs	r0, #8
 8002c06:	f7ff fb9f 	bl	8002348 <commandRespond1>
 8002c0a:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 8002c0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c12:	f103 0308 	add.w	r3, r3, #8
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c22:	f102 0208 	add.w	r2, r2, #8
 8002c26:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002c28:	f240 1161 	movw	r1, #353	; 0x161
 8002c2c:	48cd      	ldr	r0, [pc, #820]	; (8002f64 <StartDefaultTask+0x8bc>)
 8002c2e:	f7ff fbf3 	bl	8002418 <LOG_REPORT>
							  }
							  break;
 8002c32:	e0e9      	b.n	8002e08 <StartDefaultTask+0x760>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002c34:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c38:	f103 0306 	add.w	r3, r3, #6
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d138      	bne.n	8002cb4 <StartDefaultTask+0x60c>
 8002c42:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c46:	f103 0305 	add.w	r3, r3, #5
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d131      	bne.n	8002cb4 <StartDefaultTask+0x60c>
									  current_mode = SCARA_MODE_SCAN;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c56:	f102 0206 	add.w	r2, r2, #6
 8002c5a:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c62:	f102 0204 	add.w	r2, r2, #4
 8002c66:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002c68:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c70:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002c7a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c7e:	f103 0308 	add.w	r3, r3, #8
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	2008      	movs	r0, #8
 8002c90:	f7ff fb5a 	bl	8002348 <commandRespond1>
 8002c94:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002c98:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c9c:	f103 0308 	add.w	r3, r3, #8
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cac:	f102 0208 	add.w	r2, r2, #8
 8002cb0:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002cb2:	e0a9      	b.n	8002e08 <StartDefaultTask+0x760>
									detail_array[0] = BUSY;
 8002cb4:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002cb8:	2222      	movs	r2, #34	; 0x22
 8002cba:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cbc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002cc6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cca:	f103 0308 	add.w	r3, r3, #8
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	2007      	movs	r0, #7
 8002cdc:	f7ff fb34 	bl	8002348 <commandRespond1>
 8002ce0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002ce4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ce8:	f103 0308 	add.w	r3, r3, #8
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cf8:	f102 0208 	add.w	r2, r2, #8
 8002cfc:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002cfe:	f240 1175 	movw	r1, #373	; 0x175
 8002d02:	4899      	ldr	r0, [pc, #612]	; (8002f68 <StartDefaultTask+0x8c0>)
 8002d04:	f7ff fb88 	bl	8002418 <LOG_REPORT>
							  break;
 8002d08:	e07e      	b.n	8002e08 <StartDefaultTask+0x760>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002d0a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d0e:	f103 0306 	add.w	r3, r3, #6
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d145      	bne.n	8002da4 <StartDefaultTask+0x6fc>
 8002d18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d1c:	f103 0305 	add.w	r3, r3, #5
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d13e      	bne.n	8002da4 <StartDefaultTask+0x6fc>
									  scaraSetScanFlag();
 8002d26:	f007 fabb 	bl	800a2a0 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002d2a:	f007 fb4b 	bl	800a3c4 <scaraIsScanLimit>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <StartDefaultTask+0x6a6>
										  current_mode	 = SCARA_MODE_DUTY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d3a:	f102 0206 	add.w	r2, r2, #6
 8002d3e:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d46:	f102 0205 	add.w	r2, r2, #5
 8002d4a:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002d4c:	e055      	b.n	8002dfa <StartDefaultTask+0x752>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002d4e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002d52:	2223      	movs	r2, #35	; 0x23
 8002d54:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d56:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002d5a:	6899      	ldr	r1, [r3, #8]
 8002d5c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002d60:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d64:	f103 0308 	add.w	r3, r3, #8
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2301      	movs	r3, #1
 8002d74:	2007      	movs	r0, #7
 8002d76:	f7ff fae7 	bl	8002348 <commandRespond1>
 8002d7a:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
										total_respond_length += respond_lenght;
 8002d7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d82:	f103 0308 	add.w	r3, r3, #8
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d92:	f102 0208 	add.w	r2, r2, #8
 8002d96:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002d98:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002d9c:	4873      	ldr	r0, [pc, #460]	; (8002f6c <StartDefaultTask+0x8c4>)
 8002d9e:	f7ff fb3b 	bl	8002418 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002da2:	e02a      	b.n	8002dfa <StartDefaultTask+0x752>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002da4:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002da8:	2222      	movs	r2, #34	; 0x22
 8002daa:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002dac:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002db6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002dba:	f103 0308 	add.w	r3, r3, #8
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	2007      	movs	r0, #7
 8002dcc:	f7ff fabc 	bl	8002348 <commandRespond1>
 8002dd0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002dd4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002dd8:	f103 0308 	add.w	r3, r3, #8
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002de2:	4413      	add	r3, r2
 8002de4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002de8:	f102 0208 	add.w	r2, r2, #8
 8002dec:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002dee:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002df2:	485f      	ldr	r0, [pc, #380]	; (8002f70 <StartDefaultTask+0x8c8>)
 8002df4:	f7ff fb10 	bl	8002418 <LOG_REPORT>
								  }
							  }
							  break;
 8002df8:	e006      	b.n	8002e08 <StartDefaultTask+0x760>
 8002dfa:	e005      	b.n	8002e08 <StartDefaultTask+0x760>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002dfc:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002e00:	485c      	ldr	r0, [pc, #368]	; (8002f74 <StartDefaultTask+0x8cc>)
 8002e02:	f7ff fb09 	bl	8002418 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002e06:	e1a2      	b.n	800314e <StartDefaultTask+0xaa6>
 8002e08:	e1a1      	b.n	800314e <StartDefaultTask+0xaa6>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002e0a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002e12:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e16:	2200      	movs	r2, #0
 8002e18:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002e1a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e1e:	2200      	movs	r2, #0
 8002e20:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002e22:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e26:	2200      	movs	r2, #0
 8002e28:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002e2a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e2e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	f200 8094 	bhi.w	8002f60 <StartDefaultTask+0x8b8>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <StartDefaultTask+0x798>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e61 	.word	0x08002e61
 8002e44:	08002e7d 	.word	0x08002e7d
 8002e48:	08002ea1 	.word	0x08002ea1
 8002e4c:	08002ebd 	.word	0x08002ebd
 8002e50:	08002ee1 	.word	0x08002ee1
 8002e54:	08002efd 	.word	0x08002efd
 8002e58:	08002f21 	.word	0x08002f21
 8002e5c:	08002f3d 	.word	0x08002f3d
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002e60:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e64:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002e70:	f993 1000 	ldrsb.w	r1, [r3]
 8002e74:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e78:	5499      	strb	r1, [r3, r2]
						  break;
 8002e7a:	e072      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	425b      	negs	r3, r3
 8002e86:	b2d9      	uxtb	r1, r3
 8002e88:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e8c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	b249      	sxtb	r1, r1
 8002e98:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e9c:	5499      	strb	r1, [r3, r2]
						  break;
 8002e9e:	e060      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002ea0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ea4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002eb0:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002eb4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002eb8:	5499      	strb	r1, [r3, r2]
						  break;
 8002eba:	e052      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002ebc:	4b2e      	ldr	r3, [pc, #184]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002ebe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	425b      	negs	r3, r3
 8002ec6:	b2d9      	uxtb	r1, r3
 8002ec8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ecc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	b249      	sxtb	r1, r1
 8002ed8:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002edc:	5499      	strb	r1, [r3, r2]
						  break;
 8002ede:	e040      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002ee0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ee4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002ef0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002ef4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ef8:	5499      	strb	r1, [r3, r2]
						  break;
 8002efa:	e032      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002efc:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002efe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	425b      	negs	r3, r3
 8002f06:	b2d9      	uxtb	r1, r3
 8002f08:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f0c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	b249      	sxtb	r1, r1
 8002f18:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002f1c:	5499      	strb	r1, [r3, r2]
						  break;
 8002f1e:	e020      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002f20:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f24:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002f30:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002f34:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002f38:	5499      	strb	r1, [r3, r2]
						  break;
 8002f3a:	e012      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <StartDefaultTask+0x8d0>)
 8002f3e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	425b      	negs	r3, r3
 8002f46:	b2d9      	uxtb	r1, r3
 8002f48:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f4c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	b249      	sxtb	r1, r1
 8002f58:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002f5c:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002f5e:	e000      	b.n	8002f62 <StartDefaultTask+0x8ba>
						  default:
							  break;
 8002f60:	bf00      	nop
						  }
					  }
					  break;
 8002f62:	e0f4      	b.n	800314e <StartDefaultTask+0xaa6>
 8002f64:	0801bf64 	.word	0x0801bf64
 8002f68:	0801bf74 	.word	0x0801bf74
 8002f6c:	0801bf84 	.word	0x0801bf84
 8002f70:	0801bf98 	.word	0x0801bf98
 8002f74:	0801bfa8 	.word	0x0801bfa8
 8002f78:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002f7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002f80:	f103 0305 	add.w	r3, r3, #5
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11a      	bne.n	8002fc0 <StartDefaultTask+0x918>
 8002f8a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b13      	cmp	r3, #19
 8002f92:	d115      	bne.n	8002fc0 <StartDefaultTask+0x918>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 8002f94:	4bc0      	ldr	r3, [pc, #768]	; (8003298 <StartDefaultTask+0xbf0>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b07      	cmp	r3, #7
 8002f9a:	d103      	bne.n	8002fa4 <StartDefaultTask+0x8fc>
				  				run_point = 1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
 8002fa2:	e006      	b.n	8002fb2 <StartDefaultTask+0x90a>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8002fa4:	4bbc      	ldr	r3, [pc, #752]	; (8003298 <StartDefaultTask+0xbf0>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d102      	bne.n	8002fb2 <StartDefaultTask+0x90a>
				  				run_point = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002fb8:	f102 0205 	add.w	r2, r2, #5
 8002fbc:	7013      	strb	r3, [r2, #0]
 8002fbe:	e031      	b.n	8003024 <StartDefaultTask+0x97c>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002fc0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002fc4:	f103 0305 	add.w	r3, r3, #5
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d111      	bne.n	8002ff2 <StartDefaultTask+0x94a>
 8002fce:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b12      	cmp	r3, #18
 8002fd6:	d10c      	bne.n	8002ff2 <StartDefaultTask+0x94a>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002fd8:	48b0      	ldr	r0, [pc, #704]	; (800329c <StartDefaultTask+0xbf4>)
 8002fda:	f002 fe99 	bl	8005d10 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002fde:	48af      	ldr	r0, [pc, #700]	; (800329c <StartDefaultTask+0xbf4>)
 8002fe0:	f001 ff72 	bl	8004ec8 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002fea:	f102 0205 	add.w	r2, r2, #5
 8002fee:	7013      	strb	r3, [r2, #0]
 8002ff0:	e018      	b.n	8003024 <StartDefaultTask+0x97c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002ff2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b0d      	cmp	r3, #13
 8002ffa:	d106      	bne.n	800300a <StartDefaultTask+0x962>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003002:	f102 0205 	add.w	r2, r2, #5
 8003006:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8003008:	e0a0      	b.n	800314c <StartDefaultTask+0xaa4>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 800300a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b0e      	cmp	r3, #14
 8003012:	f040 809b 	bne.w	800314c <StartDefaultTask+0xaa4>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8003016:	2301      	movs	r3, #1
 8003018:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800301c:	f102 0205 	add.w	r2, r2, #5
 8003020:	7013      	strb	r3, [r2, #0]
				  	  break;
 8003022:	e093      	b.n	800314c <StartDefaultTask+0xaa4>
 8003024:	e092      	b.n	800314c <StartDefaultTask+0xaa4>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003026:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800302a:	f103 030d 	add.w	r3, r3, #13
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003034:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	18d0      	adds	r0, r2, r3
 800303e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003042:	3328      	adds	r3, #40	; 0x28
 8003044:	22c0      	movs	r2, #192	; 0xc0
 8003046:	4619      	mov	r1, r3
 8003048:	f012 fdea 	bl	8015c20 <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 800304c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003050:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003054:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003058:	f101 010d 	add.w	r1, r1, #13
 800305c:	780c      	ldrb	r4, [r1, #0]
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f7fd fda1 	bl	8000ba8 <__aeabi_d2uiz>
 8003066:	4603      	mov	r3, r0
 8003068:	b299      	uxth	r1, r3
 800306a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800306e:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8003072:	fb03 f304 	mul.w	r3, r3, r4
 8003076:	4413      	add	r3, r2
 8003078:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800307c:	460a      	mov	r2, r1
 800307e:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8003080:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003084:	f103 030d 	add.w	r3, r3, #13
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	425a      	negs	r2, r3
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	f002 0207 	and.w	r2, r2, #7
 8003096:	bf58      	it	pl
 8003098:	4253      	negpl	r3, r2
 800309a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800309e:	f102 020d 	add.w	r2, r2, #13
 80030a2:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 80030a4:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80030a8:	221d      	movs	r2, #29
 80030aa:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030ac:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80030b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030ba:	f103 0308 	add.w	r3, r3, #8
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2301      	movs	r3, #1
 80030ca:	2008      	movs	r0, #8
 80030cc:	f7ff f93c 	bl	8002348 <commandRespond1>
 80030d0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						  total_respond_length += respond_lenght;
 80030d4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030d8:	f103 0308 	add.w	r3, r3, #8
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80030e2:	4413      	add	r3, r2
 80030e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030e8:	f102 0208 	add.w	r2, r2, #8
 80030ec:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 80030ee:	e02e      	b.n	800314e <StartDefaultTask+0xaa6>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80030f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80030f4:	486a      	ldr	r0, [pc, #424]	; (80032a0 <StartDefaultTask+0xbf8>)
 80030f6:	f7ff f98f 	bl	8002418 <LOG_REPORT>
 80030fa:	e028      	b.n	800314e <StartDefaultTask+0xaa6>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 80030fc:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003100:	2224      	movs	r2, #36	; 0x24
 8003102:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003104:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800310e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003112:	f103 0308 	add.w	r3, r3, #8
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4413      	add	r3, r2
 800311a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	2007      	movs	r0, #7
 8003124:	f7ff f910 	bl	8002348 <commandRespond1>
 8003128:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 800312c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003130:	f103 0308 	add.w	r3, r3, #8
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800313a:	4413      	add	r3, r2
 800313c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003140:	f102 0208 	add.w	r2, r2, #8
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e002      	b.n	800314e <StartDefaultTask+0xaa6>
				  	  break;
 8003148:	bf00      	nop
 800314a:	e000      	b.n	800314e <StartDefaultTask+0xaa6>
				  	  break;
 800314c:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003154:	f102 020f 	add.w	r2, r2, #15
 8003158:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 800315a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800315e:	f103 0307 	add.w	r3, r3, #7
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b04      	cmp	r3, #4
 8003166:	f201 8139 	bhi.w	80043dc <StartDefaultTask+0x1d34>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <StartDefaultTask+0xac8>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003185 	.word	0x08003185
 8003174:	080033b3 	.word	0x080033b3
 8003178:	0800388d 	.word	0x0800388d
 800317c:	08003bc9 	.word	0x08003bc9
 8003180:	08003bef 	.word	0x08003bef
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8003184:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003188:	f103 0303 	add.w	r3, r3, #3
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b03      	cmp	r3, #3
 8003190:	f201 8121 	bhi.w	80043d6 <StartDefaultTask+0x1d2e>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <StartDefaultTask+0xaf4>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080033ad 	.word	0x080033ad
 80031a0:	080031ad 	.word	0x080031ad
 80031a4:	08003243 	.word	0x08003243
 80031a8:	08003369 	.word	0x08003369
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 80031ac:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <StartDefaultTask+0xbfc>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031b4:	f103 0302 	add.w	r3, r3, #2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f007 fa17 	bl	800a5f0 <scaraKeyInit1>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d135      	bne.n	8003234 <StartDefaultTask+0xb8c>
				  run_time = 0;
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80031d4:	f101 0110 	add.w	r1, r1, #16
 80031d8:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80031dc:	2302      	movs	r3, #2
 80031de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031e2:	f102 0203 	add.w	r2, r2, #3
 80031e6:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 80031e8:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80031ec:	2225      	movs	r2, #37	; 0x25
 80031ee:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031f0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80031fa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031fe:	f103 0308 	add.w	r3, r3, #8
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4413      	add	r3, r2
 8003206:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2301      	movs	r3, #1
 800320e:	2003      	movs	r0, #3
 8003210:	f7ff f89a 	bl	8002348 <commandRespond1>
 8003214:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8003218:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800321c:	f103 0308 	add.w	r3, r3, #8
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003226:	4413      	add	r3, r2
 8003228:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800322c:	f102 0208 	add.w	r2, r2, #8
 8003230:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8003232:	e0bc      	b.n	80033ae <StartDefaultTask+0xd06>
				  current_key_state = SCARA_KEY_STATE_READY;
 8003234:	2300      	movs	r3, #0
 8003236:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800323a:	f102 0203 	add.w	r2, r2, #3
 800323e:	7013      	strb	r3, [r2, #0]
		  break;
 8003240:	e0b5      	b.n	80033ae <StartDefaultTask+0xd06>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003242:	a313      	add	r3, pc, #76	; (adr r3, 8003290 <StartDefaultTask+0xbe8>)
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800324c:	f101 0110 	add.w	r1, r1, #16
 8003250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003254:	f7fd f81a 	bl	800028c <__adddf3>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003260:	f101 0110 	add.w	r1, r1, #16
 8003264:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003268:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800326c:	f103 0310 	add.w	r3, r3, #16
 8003270:	ed93 0b00 	vldr	d0, [r3]
 8003274:	f007 f8b2 	bl	800a3dc <scaraIsFinish>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d014      	beq.n	80032a8 <StartDefaultTask+0xc00>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 800327e:	2303      	movs	r3, #3
 8003280:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003284:	f102 0203 	add.w	r2, r2, #3
 8003288:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 800328a:	e090      	b.n	80033ae <StartDefaultTask+0xd06>
 800328c:	f3af 8000 	nop.w
 8003290:	40000000 	.word	0x40000000
 8003294:	3f847ae1 	.word	0x3f847ae1
 8003298:	200065c8 	.word	0x200065c8
 800329c:	2000eab8 	.word	0x2000eab8
 80032a0:	0801bfbc 	.word	0x0801bfbc
 80032a4:	20000060 	.word	0x20000060
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 80032a8:	4cd4      	ldr	r4, [pc, #848]	; (80035fc <StartDefaultTask+0xf54>)
 80032aa:	4668      	mov	r0, sp
 80032ac:	f104 0308 	add.w	r3, r4, #8
 80032b0:	22b8      	movs	r2, #184	; 0xb8
 80032b2:	4619      	mov	r1, r3
 80032b4:	f012 fcb4 	bl	8015c20 <memcpy>
 80032b8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80032bc:	48d0      	ldr	r0, [pc, #832]	; (8003600 <StartDefaultTask+0xf58>)
 80032be:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80032c2:	f101 0110 	add.w	r1, r1, #16
 80032c6:	ed91 0b00 	vldr	d0, [r1]
 80032ca:	f006 fa21 	bl	8009710 <scaraFlowDuty>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 3fc9 	strb.w	r3, [r7, #4041]	; 0xfc9
				  if ( SCARA_STATUS_OK == status) {
 80032d4:	f897 3fc9 	ldrb.w	r3, [r7, #4041]	; 0xfc9
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d113      	bne.n	8003304 <StartDefaultTask+0xc5c>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80032dc:	4cc7      	ldr	r4, [pc, #796]	; (80035fc <StartDefaultTask+0xf54>)
 80032de:	4ac8      	ldr	r2, [pc, #800]	; (8003600 <StartDefaultTask+0xf58>)
 80032e0:	ab2c      	add	r3, sp, #176	; 0xb0
 80032e2:	4611      	mov	r1, r2
 80032e4:	22c0      	movs	r2, #192	; 0xc0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f012 fc9a 	bl	8015c20 <memcpy>
 80032ec:	4668      	mov	r0, sp
 80032ee:	f104 0310 	add.w	r3, r4, #16
 80032f2:	22b0      	movs	r2, #176	; 0xb0
 80032f4:	4619      	mov	r1, r3
 80032f6:	f012 fc93 	bl	8015c20 <memcpy>
 80032fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032fe:	f002 fe97 	bl	8006030 <lowlayer_computeAndWritePulse>
		  break;
 8003302:	e054      	b.n	80033ae <StartDefaultTask+0xd06>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8003304:	2303      	movs	r3, #3
 8003306:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800330a:	f102 0203 	add.w	r2, r2, #3
 800330e:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 8003310:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003314:	f897 2fc9 	ldrb.w	r2, [r7, #4041]	; 0xfc9
 8003318:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800331a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800331e:	6899      	ldr	r1, [r3, #8]
 8003320:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003324:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003328:	f103 0308 	add.w	r3, r3, #8
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	2006      	movs	r0, #6
 800333a:	f7ff f805 	bl	8002348 <commandRespond1>
 800333e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8003342:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003346:	f103 0308 	add.w	r3, r3, #8
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003350:	4413      	add	r3, r2
 8003352:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003356:	f102 0208 	add.w	r2, r2, #8
 800335a:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 800335c:	f240 2112 	movw	r1, #530	; 0x212
 8003360:	48a8      	ldr	r0, [pc, #672]	; (8003604 <StartDefaultTask+0xf5c>)
 8003362:	f7ff f859 	bl	8002418 <LOG_REPORT>
		  break;
 8003366:	e022      	b.n	80033ae <StartDefaultTask+0xd06>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8003368:	48a5      	ldr	r0, [pc, #660]	; (8003600 <StartDefaultTask+0xf58>)
 800336a:	f002 fcd1 	bl	8005d10 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 800336e:	48a4      	ldr	r0, [pc, #656]	; (8003600 <StartDefaultTask+0xf58>)
 8003370:	f001 fdaa 	bl	8004ec8 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8003374:	2300      	movs	r3, #0
 8003376:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800337a:	f102 0203 	add.w	r2, r2, #3
 800337e:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 8003380:	499f      	ldr	r1, [pc, #636]	; (8003600 <StartDefaultTask+0xf58>)
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 800338e:	499c      	ldr	r1, [pc, #624]	; (8003600 <StartDefaultTask+0xf58>)
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 800339c:	4998      	ldr	r1, [pc, #608]	; (8003600 <StartDefaultTask+0xf58>)
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 80033aa:	e000      	b.n	80033ae <StartDefaultTask+0xd06>
		  break;
 80033ac:	bf00      	nop
		  }
	  }
	  break;
 80033ae:	f001 b812 	b.w	80043d6 <StartDefaultTask+0x1d2e>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80033b2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033b6:	f103 0306 	add.w	r3, r3, #6
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f000 808d 	beq.w	80034dc <StartDefaultTask+0xe34>
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f300 825a 	bgt.w	800387c <StartDefaultTask+0x11d4>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <StartDefaultTask+0xd2a>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d00d      	beq.n	80033ec <StartDefaultTask+0xd44>
 80033d0:	e254      	b.n	800387c <StartDefaultTask+0x11d4>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033d8:	f102 0206 	add.w	r2, r2, #6
 80033dc:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80033de:	2300      	movs	r3, #0
 80033e0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033e4:	f102 0205 	add.w	r2, r2, #5
 80033e8:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80033ea:	e24d      	b.n	8003888 <StartDefaultTask+0x11e0>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 80033ec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033f0:	f103 0304 	add.w	r3, r3, #4
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d866      	bhi.n	80034c8 <StartDefaultTask+0xe20>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <StartDefaultTask+0xd58>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003411 	.word	0x08003411
 8003404:	08003423 	.word	0x08003423
 8003408:	0800343b 	.word	0x0800343b
 800340c:	08003455 	.word	0x08003455
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8003410:	f002 fa78 	bl	8005904 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8003414:	2301      	movs	r3, #1
 8003416:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800341a:	f102 0204 	add.w	r2, r2, #4
 800341e:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 8003420:	e05b      	b.n	80034da <StartDefaultTask+0xe32>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8003422:	f002 faa1 	bl	8005968 <lowlayer_scanFlow>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d053      	beq.n	80034d4 <StartDefaultTask+0xe2c>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 800342c:	2302      	movs	r3, #2
 800342e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003432:	f102 0204 	add.w	r2, r2, #4
 8003436:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 8003438:	e04c      	b.n	80034d4 <StartDefaultTask+0xe2c>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 800343a:	4871      	ldr	r0, [pc, #452]	; (8003600 <StartDefaultTask+0xf58>)
 800343c:	f002 fbec 	bl	8005c18 <lowlayer_goToSoftLimit>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d048      	beq.n	80034d8 <StartDefaultTask+0xe30>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8003446:	2303      	movs	r3, #3
 8003448:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800344c:	f102 0204 	add.w	r2, r2, #4
 8003450:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 8003452:	e041      	b.n	80034d8 <StartDefaultTask+0xe30>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8003454:	486a      	ldr	r0, [pc, #424]	; (8003600 <StartDefaultTask+0xf58>)
 8003456:	f002 fc5b 	bl	8005d10 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 800345a:	4869      	ldr	r0, [pc, #420]	; (8003600 <StartDefaultTask+0xf58>)
 800345c:	f001 fd34 	bl	8004ec8 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8003460:	2302      	movs	r3, #2
 8003462:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003466:	f102 0206 	add.w	r2, r2, #6
 800346a:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800346c:	2300      	movs	r3, #0
 800346e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003472:	f102 0205 	add.w	r2, r2, #5
 8003476:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 8003478:	f006 ff12 	bl	800a2a0 <scaraSetScanFlag>

						detail_array[0] = NONE;
 800347c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003480:	2225      	movs	r2, #37	; 0x25
 8003482:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003484:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800348e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003492:	f103 0308 	add.w	r3, r3, #8
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4413      	add	r3, r2
 800349a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2301      	movs	r3, #1
 80034a2:	2005      	movs	r0, #5
 80034a4:	f7fe ff50 	bl	8002348 <commandRespond1>
 80034a8:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						total_respond_length += respond_lenght;
 80034ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80034b0:	f103 0308 	add.w	r3, r3, #8
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80034ba:	4413      	add	r3, r2
 80034bc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034c0:	f102 0208 	add.w	r2, r2, #8
 80034c4:	6013      	str	r3, [r2, #0]
					  }
					  break;
 80034c6:	e008      	b.n	80034da <StartDefaultTask+0xe32>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80034c8:	f240 2156 	movw	r1, #598	; 0x256
 80034cc:	484e      	ldr	r0, [pc, #312]	; (8003608 <StartDefaultTask+0xf60>)
 80034ce:	f7fe ffa3 	bl	8002418 <LOG_REPORT>
						  while(1);
 80034d2:	e7fe      	b.n	80034d2 <StartDefaultTask+0xe2a>
					  break;
 80034d4:	bf00      	nop
 80034d6:	e1d7      	b.n	8003888 <StartDefaultTask+0x11e0>
					  break;
 80034d8:	bf00      	nop
					  }
				  }

			  }
			  break;
 80034da:	e1d5      	b.n	8003888 <StartDefaultTask+0x11e0>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 80034dc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80034e0:	f103 0305 	add.w	r3, r3, #5
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	f200 81c0 	bhi.w	800386c <StartDefaultTask+0x11c4>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <StartDefaultTask+0xe4c>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003879 	.word	0x08003879
 80034f8:	08003505 	.word	0x08003505
 80034fc:	080036d5 	.word	0x080036d5
 8003500:	080037df 	.word	0x080037df

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8003504:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 8003508:	4668      	mov	r0, sp
 800350a:	f104 0310 	add.w	r3, r4, #16
 800350e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003512:	4619      	mov	r1, r3
 8003514:	f012 fb84 	bl	8015c20 <memcpy>
 8003518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800351c:	f003 f920 	bl	8006760 <scaraInitDuty>
 8003520:	4603      	mov	r3, r0
 8003522:	f887 3fcb 	strb.w	r3, [r7, #4043]	; 0xfcb
						  if ( SCARA_STATUS_OK == status1) {
 8003526:	f897 3fcb 	ldrb.w	r3, [r7, #4043]	; 0xfcb
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 80a0 	bne.w	8003670 <StartDefaultTask+0xfc8>
							  status2 = scaraTestDuty();
 8003530:	f006 fe3a 	bl	800a1a8 <scaraTestDuty>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 3fca 	strb.w	r3, [r7, #4042]	; 0xfca
							  if (SCARA_STATUS_OK == status2) {
 800353a:	f897 3fca 	ldrb.w	r3, [r7, #4042]	; 0xfca
 800353e:	2b00      	cmp	r3, #0
 8003540:	d164      	bne.n	800360c <StartDefaultTask+0xf64>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003542:	2302      	movs	r3, #2
 8003544:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003548:	f102 0205 	add.w	r2, r2, #5
 800354c:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800355a:	f101 0110 	add.w	r1, r1, #16
 800355e:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 8003562:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003566:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 800356a:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800356c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003576:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800357a:	f103 0308 	add.w	r3, r3, #8
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4413      	add	r3, r2
 8003582:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	2008      	movs	r0, #8
 800358c:	f7fe fedc 	bl	8002348 <commandRespond1>
 8003590:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 8003594:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003598:	f103 0308 	add.w	r3, r3, #8
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80035a2:	4413      	add	r3, r2
 80035a4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035a8:	f102 0208 	add.w	r2, r2, #8
 80035ac:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 80035ae:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80035b2:	2225      	movs	r2, #37	; 0x25
 80035b4:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035b6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80035ba:	6899      	ldr	r1, [r3, #8]
 80035bc:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80035c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035c4:	f103 0308 	add.w	r3, r3, #8
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2301      	movs	r3, #1
 80035d4:	2003      	movs	r0, #3
 80035d6:	f7fe feb7 	bl	8002348 <commandRespond1>
 80035da:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 80035de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035e2:	f103 0308 	add.w	r3, r3, #8
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80035ec:	4413      	add	r3, r2
 80035ee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035f2:	f102 0208 	add.w	r2, r2, #8
 80035f6:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80035f8:	e13f      	b.n	800387a <StartDefaultTask+0x11d2>
 80035fa:	bf00      	nop
 80035fc:	2000eab8 	.word	0x2000eab8
 8003600:	2000ec38 	.word	0x2000ec38
 8003604:	0801bfd4 	.word	0x0801bfd4
 8003608:	0801bfe0 	.word	0x0801bfe0
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 800360c:	2300      	movs	r3, #0
 800360e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003612:	f102 0205 	add.w	r2, r2, #5
 8003616:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 8003618:	f240 217e 	movw	r1, #638	; 0x27e
 800361c:	48c8      	ldr	r0, [pc, #800]	; (8003940 <StartDefaultTask+0x1298>)
 800361e:	f7fe fefb 	bl	8002418 <LOG_REPORT>
								detail_array[0] = status2;
 8003622:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003626:	f897 2fca 	ldrb.w	r2, [r7, #4042]	; 0xfca
 800362a:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800362c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003630:	6899      	ldr	r1, [r3, #8]
 8003632:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003636:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800363a:	f103 0308 	add.w	r3, r3, #8
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4413      	add	r3, r2
 8003642:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2301      	movs	r3, #1
 800364a:	2007      	movs	r0, #7
 800364c:	f7fe fe7c 	bl	8002348 <commandRespond1>
 8003650:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 8003654:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003658:	f103 0308 	add.w	r3, r3, #8
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003662:	4413      	add	r3, r2
 8003664:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003668:	f102 0208 	add.w	r2, r2, #8
 800366c:	6013      	str	r3, [r2, #0]
				  break;
 800366e:	e104      	b.n	800387a <StartDefaultTask+0x11d2>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003670:	2300      	movs	r3, #0
 8003672:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003676:	f102 0205 	add.w	r2, r2, #5
 800367a:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 800367c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003680:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 8003684:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003686:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800368a:	6899      	ldr	r1, [r3, #8]
 800368c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003690:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003694:	f103 0308 	add.w	r3, r3, #8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4413      	add	r3, r2
 800369c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2301      	movs	r3, #1
 80036a4:	2007      	movs	r0, #7
 80036a6:	f7fe fe4f 	bl	8002348 <commandRespond1>
 80036aa:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							total_respond_length += respond_lenght;
 80036ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80036b2:	f103 0308 	add.w	r3, r3, #8
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80036bc:	4413      	add	r3, r2
 80036be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036c2:	f102 0208 	add.w	r2, r2, #8
 80036c6:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 80036c8:	f240 2189 	movw	r1, #649	; 0x289
 80036cc:	489d      	ldr	r0, [pc, #628]	; (8003944 <StartDefaultTask+0x129c>)
 80036ce:	f7fe fea3 	bl	8002418 <LOG_REPORT>
				  break;
 80036d2:	e0d2      	b.n	800387a <StartDefaultTask+0x11d2>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80036d4:	a398      	add	r3, pc, #608	; (adr r3, 8003938 <StartDefaultTask+0x1290>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80036de:	f101 0110 	add.w	r1, r1, #16
 80036e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036e6:	f7fc fdd1 	bl	800028c <__adddf3>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80036f2:	f101 0110 	add.w	r1, r1, #16
 80036f6:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80036fa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036fe:	f103 0310 	add.w	r3, r3, #16
 8003702:	ed93 0b00 	vldr	d0, [r3]
 8003706:	f006 fe69 	bl	800a3dc <scaraIsFinish>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <StartDefaultTask+0x1076>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8003710:	2303      	movs	r3, #3
 8003712:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003716:	f102 0205 	add.w	r2, r2, #5
 800371a:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 800371c:	e0ad      	b.n	800387a <StartDefaultTask+0x11d2>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800371e:	4c8a      	ldr	r4, [pc, #552]	; (8003948 <StartDefaultTask+0x12a0>)
 8003720:	4668      	mov	r0, sp
 8003722:	f104 0308 	add.w	r3, r4, #8
 8003726:	22b8      	movs	r2, #184	; 0xb8
 8003728:	4619      	mov	r1, r3
 800372a:	f012 fa79 	bl	8015c20 <memcpy>
 800372e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003732:	4886      	ldr	r0, [pc, #536]	; (800394c <StartDefaultTask+0x12a4>)
 8003734:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003738:	f101 0110 	add.w	r1, r1, #16
 800373c:	ed91 0b00 	vldr	d0, [r1]
 8003740:	f005 ffe6 	bl	8009710 <scaraFlowDuty>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3fcc 	strb.w	r3, [r7, #4044]	; 0xfcc
							  if ( SCARA_STATUS_OK == status) {
 800374a:	f897 3fcc 	ldrb.w	r3, [r7, #4044]	; 0xfcc
 800374e:	2b00      	cmp	r3, #0
 8003750:	d113      	bne.n	800377a <StartDefaultTask+0x10d2>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003752:	4c7d      	ldr	r4, [pc, #500]	; (8003948 <StartDefaultTask+0x12a0>)
 8003754:	4a7d      	ldr	r2, [pc, #500]	; (800394c <StartDefaultTask+0x12a4>)
 8003756:	ab2c      	add	r3, sp, #176	; 0xb0
 8003758:	4611      	mov	r1, r2
 800375a:	22c0      	movs	r2, #192	; 0xc0
 800375c:	4618      	mov	r0, r3
 800375e:	f012 fa5f 	bl	8015c20 <memcpy>
 8003762:	4668      	mov	r0, sp
 8003764:	f104 0310 	add.w	r3, r4, #16
 8003768:	22b0      	movs	r2, #176	; 0xb0
 800376a:	4619      	mov	r1, r3
 800376c:	f012 fa58 	bl	8015c20 <memcpy>
 8003770:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003774:	f002 fc5c 	bl	8006030 <lowlayer_computeAndWritePulse>
				  break;
 8003778:	e07f      	b.n	800387a <StartDefaultTask+0x11d2>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800377a:	2303      	movs	r3, #3
 800377c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003780:	f102 0205 	add.w	r2, r2, #5
 8003784:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 8003786:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800378a:	f897 2fcc 	ldrb.w	r2, [r7, #4044]	; 0xfcc
 800378e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003790:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800379a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800379e:	f103 0308 	add.w	r3, r3, #8
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4413      	add	r3, r2
 80037a6:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2301      	movs	r3, #1
 80037ae:	2006      	movs	r0, #6
 80037b0:	f7fe fdca 	bl	8002348 <commandRespond1>
 80037b4:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 80037b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037bc:	f103 0308 	add.w	r3, r3, #8
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80037c6:	4413      	add	r3, r2
 80037c8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037cc:	f102 0208 	add.w	r2, r2, #8
 80037d0:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 80037d2:	f240 21a1 	movw	r1, #673	; 0x2a1
 80037d6:	485e      	ldr	r0, [pc, #376]	; (8003950 <StartDefaultTask+0x12a8>)
 80037d8:	f7fe fe1e 	bl	8002418 <LOG_REPORT>
				  break;
 80037dc:	e04d      	b.n	800387a <StartDefaultTask+0x11d2>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 80037de:	485b      	ldr	r0, [pc, #364]	; (800394c <StartDefaultTask+0x12a4>)
 80037e0:	f002 fa96 	bl	8005d10 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80037e4:	4859      	ldr	r0, [pc, #356]	; (800394c <StartDefaultTask+0x12a4>)
 80037e6:	f001 fb6f 	bl	8004ec8 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037f0:	f102 0205 	add.w	r2, r2, #5
 80037f4:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 80037f6:	4955      	ldr	r1, [pc, #340]	; (800394c <StartDefaultTask+0x12a4>)
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 8003804:	4951      	ldr	r1, [pc, #324]	; (800394c <StartDefaultTask+0x12a4>)
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 8003812:	494e      	ldr	r1, [pc, #312]	; (800394c <StartDefaultTask+0x12a4>)
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 8003820:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003824:	2225      	movs	r2, #37	; 0x25
 8003826:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003828:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003832:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003836:	f103 0308 	add.w	r3, r3, #8
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4413      	add	r3, r2
 800383e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2301      	movs	r3, #1
 8003846:	2005      	movs	r0, #5
 8003848:	f7fe fd7e 	bl	8002348 <commandRespond1>
 800384c:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8003850:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003854:	f103 0308 	add.w	r3, r3, #8
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800385e:	4413      	add	r3, r2
 8003860:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003864:	f102 0208 	add.w	r2, r2, #8
 8003868:	6013      	str	r3, [r2, #0]
					  }
				  break;
 800386a:	e006      	b.n	800387a <StartDefaultTask+0x11d2>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800386c:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003870:	4838      	ldr	r0, [pc, #224]	; (8003954 <StartDefaultTask+0x12ac>)
 8003872:	f7fe fdd1 	bl	8002418 <LOG_REPORT>
						  while(1);
 8003876:	e7fe      	b.n	8003876 <StartDefaultTask+0x11ce>
				  break;
 8003878:	bf00      	nop
					  }
				  }

			  }
			  break;
 800387a:	e005      	b.n	8003888 <StartDefaultTask+0x11e0>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 800387c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003880:	4835      	ldr	r0, [pc, #212]	; (8003958 <StartDefaultTask+0x12b0>)
 8003882:	f7fe fdc9 	bl	8002418 <LOG_REPORT>
				  while(1);
 8003886:	e7fe      	b.n	8003886 <StartDefaultTask+0x11de>
			  }
		  }
	  }
	  break;
 8003888:	f000 bda8 	b.w	80043dc <StartDefaultTask+0x1d34>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 800388c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003890:	f103 0305 	add.w	r3, r3, #5
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b04      	cmp	r3, #4
 8003898:	f200 8193 	bhi.w	8003bc2 <StartDefaultTask+0x151a>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <StartDefaultTask+0x11fc>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	08003bc3 	.word	0x08003bc3
 80038a8:	08003bc3 	.word	0x08003bc3
 80038ac:	08003a5d 	.word	0x08003a5d
 80038b0:	08003bc3 	.word	0x08003bc3
 80038b4:	080038b9 	.word	0x080038b9
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point], run_point);
 80038b8:	4928      	ldr	r1, [pc, #160]	; (800395c <StartDefaultTask+0x12b4>)
 80038ba:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	18cc      	adds	r4, r1, r3
 80038c8:	f607 56f8 	addw	r6, r7, #3576	; 0xdf8
 80038cc:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 80038d0:	9304      	str	r3, [sp, #16]
 80038d2:	466d      	mov	r5, sp
 80038d4:	f104 030c 	add.w	r3, r4, #12
 80038d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80038de:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 ff68 	bl	80047b8 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 80038e8:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 80038ec:	4668      	mov	r0, sp
 80038ee:	f104 0310 	add.w	r3, r4, #16
 80038f2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80038f6:	4619      	mov	r1, r3
 80038f8:	f012 f992 	bl	8015c20 <memcpy>
 80038fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003900:	f002 ff2e 	bl	8006760 <scaraInitDuty>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 3fce 	strb.w	r3, [r7, #4046]	; 0xfce
			  if(status == SCARA_STATUS_OK){
 800390a:	f897 3fce 	ldrb.w	r3, [r7, #4046]	; 0xfce
 800390e:	2b00      	cmp	r3, #0
 8003910:	d177      	bne.n	8003a02 <StartDefaultTask+0x135a>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR){
 8003912:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003916:	7c1b      	ldrb	r3, [r3, #16]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d121      	bne.n	8003960 <StartDefaultTask+0x12b8>
					  run_time = 0;
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003928:	f101 0110 	add.w	r1, r1, #16
 800392c:	e9c1 2300 	strd	r2, r3, [r1]
 8003930:	e024      	b.n	800397c <StartDefaultTask+0x12d4>
 8003932:	bf00      	nop
 8003934:	f3af 8000 	nop.w
 8003938:	40000000 	.word	0x40000000
 800393c:	3f847ae1 	.word	0x3f847ae1
 8003940:	0801bff0 	.word	0x0801bff0
 8003944:	0801bffc 	.word	0x0801bffc
 8003948:	2000eab8 	.word	0x2000eab8
 800394c:	2000ec38 	.word	0x2000ec38
 8003950:	0801c008 	.word	0x0801c008
 8003954:	0801bfe0 	.word	0x0801bfe0
 8003958:	0801c014 	.word	0x0801c014
 800395c:	20006fa0 	.word	0x20006fa0
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 8003960:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003964:	7c1b      	ldrb	r3, [r3, #16]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d108      	bne.n	800397c <StartDefaultTask+0x12d4>
					  run_time = last_T;
 800396a:	4bd5      	ldr	r3, [pc, #852]	; (8003cc0 <StartDefaultTask+0x1618>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003974:	f101 0110 	add.w	r1, r1, #16
 8003978:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800397c:	2302      	movs	r3, #2
 800397e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003982:	f102 0205 	add.w	r2, r2, #5
 8003986:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 8003988:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003994:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8003cc4 <StartDefaultTask+0x161c>
 8003998:	ee67 6a87 	vmul.f32	s13, s15, s14
 800399c:	4bca      	ldr	r3, [pc, #808]	; (8003cc8 <StartDefaultTask+0x1620>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80039b4:	793b      	ldrb	r3, [r7, #4]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80039bc:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80039be:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80039c2:	6899      	ldr	r1, [r3, #8]
 80039c4:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80039c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039cc:	f103 0308 	add.w	r3, r3, #8
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2301      	movs	r3, #1
 80039dc:	200b      	movs	r0, #11
 80039de:	f7fe fcb3 	bl	8002348 <commandRespond1>
 80039e2:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 80039e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039ea:	f103 0308 	add.w	r3, r3, #8
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80039f4:	4413      	add	r3, r2
 80039f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80039fa:	f102 0208 	add.w	r2, r2, #8
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e02c      	b.n	8003a5c <StartDefaultTask+0x13b4>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003a02:	2303      	movs	r3, #3
 8003a04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a08:	f102 0205 	add.w	r2, r2, #5
 8003a0c:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 8003a0e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003a12:	f897 2fce 	ldrb.w	r2, [r7, #4046]	; 0xfce
 8003a16:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a18:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003a1c:	6899      	ldr	r1, [r3, #8]
 8003a1e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003a22:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003a26:	f103 0308 	add.w	r3, r3, #8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	2301      	movs	r3, #1
 8003a36:	2007      	movs	r0, #7
 8003a38:	f7fe fc86 	bl	8002348 <commandRespond1>
 8003a3c:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8003a40:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003a44:	f103 0308 	add.w	r3, r3, #8
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003a4e:	4413      	add	r3, r2
 8003a50:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a54:	f102 0208 	add.w	r2, r2, #8
 8003a58:	6013      	str	r3, [r2, #0]
				  break;
 8003a5a:	e0b3      	b.n	8003bc4 <StartDefaultTask+0x151c>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003a5c:	a396      	add	r3, pc, #600	; (adr r3, 8003cb8 <StartDefaultTask+0x1610>)
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003a66:	f101 0110 	add.w	r1, r1, #16
 8003a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a6e:	f7fc fc0d 	bl	800028c <__adddf3>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003a7a:	f101 0110 	add.w	r1, r1, #16
 8003a7e:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003a82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a86:	f103 0310 	add.w	r3, r3, #16
 8003a8a:	ed93 0b00 	vldr	d0, [r3]
 8003a8e:	f006 fca5 	bl	800a3dc <scaraIsFinish>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d039      	beq.n	8003b0c <StartDefaultTask+0x1464>
				if(run_point >= total_num_of_point-1){
 8003a98:	4b8b      	ldr	r3, [pc, #556]	; (8003cc8 <StartDefaultTask+0x1620>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	db0c      	blt.n	8003ac0 <StartDefaultTask+0x1418>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003aac:	f102 0205 	add.w	r2, r2, #5
 8003ab0:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003ab2:	4886      	ldr	r0, [pc, #536]	; (8003ccc <StartDefaultTask+0x1624>)
 8003ab4:	f002 f92c 	bl	8005d10 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003ab8:	4884      	ldr	r0, [pc, #528]	; (8003ccc <StartDefaultTask+0x1624>)
 8003aba:	f001 fa05 	bl	8004ec8 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003abe:	e081      	b.n	8003bc4 <StartDefaultTask+0x151c>
					accumulate_update(Gcode_Cor[run_point]);
 8003ac0:	4983      	ldr	r1, [pc, #524]	; (8003cd0 <StartDefaultTask+0x1628>)
 8003ac2:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	466c      	mov	r4, sp
 8003ad2:	f103 0210 	add.w	r2, r3, #16
 8003ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003adc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ade:	f001 f903 	bl	8004ce8 <accumulate_update>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003ae8:	f102 0205 	add.w	r2, r2, #5
 8003aec:	7013      	strb	r3, [r2, #0]
					run_point++;
 8003aee:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 8003af2:	3301      	adds	r3, #1
 8003af4:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003af8:	4a74      	ldr	r2, [pc, #464]	; (8003ccc <StartDefaultTask+0x1624>)
 8003afa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003afe:	4610      	mov	r0, r2
 8003b00:	3328      	adds	r3, #40	; 0x28
 8003b02:	22c0      	movs	r2, #192	; 0xc0
 8003b04:	4619      	mov	r1, r3
 8003b06:	f012 f88b 	bl	8015c20 <memcpy>
		  break;
 8003b0a:	e05b      	b.n	8003bc4 <StartDefaultTask+0x151c>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003b0c:	4c71      	ldr	r4, [pc, #452]	; (8003cd4 <StartDefaultTask+0x162c>)
 8003b0e:	4668      	mov	r0, sp
 8003b10:	f104 0308 	add.w	r3, r4, #8
 8003b14:	22b8      	movs	r2, #184	; 0xb8
 8003b16:	4619      	mov	r1, r3
 8003b18:	f012 f882 	bl	8015c20 <memcpy>
 8003b1c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003b20:	486a      	ldr	r0, [pc, #424]	; (8003ccc <StartDefaultTask+0x1624>)
 8003b22:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003b26:	f101 0110 	add.w	r1, r1, #16
 8003b2a:	ed91 0b00 	vldr	d0, [r1]
 8003b2e:	f005 fdef 	bl	8009710 <scaraFlowDuty>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 3fcd 	strb.w	r3, [r7, #4045]	; 0xfcd
				if ( SCARA_STATUS_OK == status) {
 8003b38:	f897 3fcd 	ldrb.w	r3, [r7, #4045]	; 0xfcd
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d113      	bne.n	8003b68 <StartDefaultTask+0x14c0>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003b40:	4c64      	ldr	r4, [pc, #400]	; (8003cd4 <StartDefaultTask+0x162c>)
 8003b42:	4a62      	ldr	r2, [pc, #392]	; (8003ccc <StartDefaultTask+0x1624>)
 8003b44:	ab2c      	add	r3, sp, #176	; 0xb0
 8003b46:	4611      	mov	r1, r2
 8003b48:	22c0      	movs	r2, #192	; 0xc0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f012 f868 	bl	8015c20 <memcpy>
 8003b50:	4668      	mov	r0, sp
 8003b52:	f104 0310 	add.w	r3, r4, #16
 8003b56:	22b0      	movs	r2, #176	; 0xb0
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f012 f861 	bl	8015c20 <memcpy>
 8003b5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b62:	f002 fa65 	bl	8006030 <lowlayer_computeAndWritePulse>
		  break;
 8003b66:	e02d      	b.n	8003bc4 <StartDefaultTask+0x151c>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003b6e:	f102 0205 	add.w	r2, r2, #5
 8003b72:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003b74:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003b78:	f897 2fcd 	ldrb.w	r2, [r7, #4045]	; 0xfcd
 8003b7c:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b7e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003b88:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b8c:	f103 0308 	add.w	r3, r3, #8
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2007      	movs	r0, #7
 8003b9e:	f7fe fbd3 	bl	8002348 <commandRespond1>
 8003ba2:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 8003ba6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003baa:	f103 0308 	add.w	r3, r3, #8
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003bba:	f102 0208 	add.w	r2, r2, #8
 8003bbe:	6013      	str	r3, [r2, #0]
		  break;
 8003bc0:	e000      	b.n	8003bc4 <StartDefaultTask+0x151c>

		  }
		  break;
		  
		  default:
			  break;
 8003bc2:	bf00      	nop
		  }
	  }

	  break;
 8003bc4:	f000 bc0a 	b.w	80043dc <StartDefaultTask+0x1d34>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003bc8:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003bcc:	f993 0000 	ldrsb.w	r0, [r3]
 8003bd0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003bd4:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003bd8:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003bdc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003be0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003be4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003be8:	f002 fbca 	bl	8006380 <lowlayer_writePulse>
	  }
	  break;
 8003bec:	e3f6      	b.n	80043dc <StartDefaultTask+0x1d34>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003bee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003bf2:	f103 0305 	add.w	r3, r3, #5
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	f200 83ed 	bhi.w	80043da <StartDefaultTask+0x1d32>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <StartDefaultTask+0x1560>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08004227 	.word	0x08004227
 8003c10:	080043cb 	.word	0x080043cb
 8003c14:	08003c69 	.word	0x08003c69
		  case SCARA_DUTY_STATE_INIT:{
			  HAL_TIM_Base_Start(&htim2);
 8003c18:	482f      	ldr	r0, [pc, #188]	; (8003cd8 <StartDefaultTask+0x1630>)
 8003c1a:	f00a f89e 	bl	800dd5a <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c24:	f102 020e 	add.w	r2, r2, #14
 8003c28:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c30:	f102 020d 	add.w	r2, r2, #13
 8003c34:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c3c:	f102 020f 	add.w	r2, r2, #15
 8003c40:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003c42:	2304      	movs	r3, #4
 8003c44:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003c48:	f102 0205 	add.w	r2, r2, #5
 8003c4c:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003c4e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003c52:	2204      	movs	r2, #4
 8003c54:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003c56:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003c5e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003c62:	2200      	movs	r2, #0
 8003c64:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8003c66:	e3b5      	b.n	80043d4 <StartDefaultTask+0x1d2c>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003c68:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c6c:	f103 030e 	add.w	r3, r3, #14
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c76:	f103 030d 	add.w	r3, r3, #13
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f000 83a6 	beq.w	80043ce <StartDefaultTask+0x1d26>
				  switch(operation_state){
 8003c82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c86:	f103 030f 	add.w	r3, r3, #15
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b07      	cmp	r3, #7
 8003c8e:	f200 81d5 	bhi.w	800403c <StartDefaultTask+0x1994>
 8003c92:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <StartDefaultTask+0x15f0>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003def 	.word	0x08003def
 8003ca0:	08003e23 	.word	0x08003e23
 8003ca4:	08003e39 	.word	0x08003e39
 8003ca8:	08003e6d 	.word	0x08003e6d
 8003cac:	08003f95 	.word	0x08003f95
 8003cb0:	08003fc9 	.word	0x08003fc9
 8003cb4:	08004009 	.word	0x08004009
 8003cb8:	40000000 	.word	0x40000000
 8003cbc:	3f847ae1 	.word	0x3f847ae1
 8003cc0:	2000dd18 	.word	0x2000dd18
 8003cc4:	42c80000 	.word	0x42c80000
 8003cc8:	20006f90 	.word	0x20006f90
 8003ccc:	2000ec38 	.word	0x2000ec38
 8003cd0:	20006fa0 	.word	0x20006fa0
 8003cd4:	2000eab8 	.word	0x2000eab8
 8003cd8:	2000ed38 	.word	0x2000ed38
 8003cdc:	399c09bf 	.word	0x399c09bf
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 8003ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003cec:	f103 030e 	add.w	r3, r3, #14
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003cf6:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003cfa:	fb00 f303 	mul.w	r3, r0, r3
 8003cfe:	440b      	add	r3, r1
 8003d00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d12:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8003cdc <StartDefaultTask+0x1634>
 8003d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d1a:	ee17 0a90 	vmov	r0, s15
 8003d1e:	f7fc fc13 	bl	8000548 <__aeabi_f2d>
 8003d22:	4baf      	ldr	r3, [pc, #700]	; (8003fe0 <StartDefaultTask+0x1938>)
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f7fc fab0 	bl	800028c <__adddf3>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	4bab      	ldr	r3, [pc, #684]	; (8003fe4 <StartDefaultTask+0x193c>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f7fc faa7 	bl	800028c <__adddf3>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	4ba8      	ldr	r3, [pc, #672]	; (8003fe8 <StartDefaultTask+0x1940>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fa9e 	bl	800028c <__adddf3>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 8003d58:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003d5c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d60:	f103 030e 	add.w	r3, r3, #14
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003d6a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3350      	adds	r3, #80	; 0x50
 8003d76:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d7a:	4b9c      	ldr	r3, [pc, #624]	; (8003fec <StartDefaultTask+0x1944>)
 8003d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d80:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc fc36 	bl	80005f8 <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003d94:	f101 010e 	add.w	r1, r1, #14
 8003d98:	780e      	ldrb	r6, [r1, #0]
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	f7fc fa73 	bl	8000288 <__aeabi_dsub>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003daa:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003dae:	fb01 f106 	mul.w	r1, r1, r6
 8003db2:	4401      	add	r1, r0
 8003db4:	3150      	adds	r1, #80	; 0x50
 8003db6:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003dba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003dbe:	f103 030e 	add.w	r3, r3, #14
 8003dc2:	7819      	ldrb	r1, [r3, #0]
 8003dc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <StartDefaultTask+0x1948>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003dce:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003dd2:	fb04 f101 	mul.w	r1, r4, r1
 8003dd6:	4401      	add	r1, r0
 8003dd8:	3158      	adds	r1, #88	; 0x58
 8003dda:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003dde:	4b80      	ldr	r3, [pc, #512]	; (8003fe0 <StartDefaultTask+0x1938>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003de8:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003dec:	e126      	b.n	800403c <StartDefaultTask+0x1994>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003dee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003df2:	f103 030e 	add.w	r3, r3, #14
 8003df6:	7819      	ldrb	r1, [r3, #0]
 8003df8:	4b7e      	ldr	r3, [pc, #504]	; (8003ff4 <StartDefaultTask+0x194c>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003e02:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003e06:	fb04 f101 	mul.w	r1, r4, r1
 8003e0a:	4401      	add	r1, r0
 8003e0c:	3158      	adds	r1, #88	; 0x58
 8003e0e:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003e12:	4b74      	ldr	r3, [pc, #464]	; (8003fe4 <StartDefaultTask+0x193c>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003e1c:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003e20:	e10c      	b.n	800403c <StartDefaultTask+0x1994>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003e22:	4b71      	ldr	r3, [pc, #452]	; (8003fe8 <StartDefaultTask+0x1940>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003e2c:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8003e30:	2001      	movs	r0, #1
 8003e32:	f006 fa41 	bl	800a2b8 <scaraSetOutput>
					  }
					  break;
 8003e36:	e101      	b.n	800403c <StartDefaultTask+0x1994>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003e38:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e3c:	f103 030e 	add.w	r3, r3, #14
 8003e40:	7819      	ldrb	r1, [r3, #0]
 8003e42:	4b6b      	ldr	r3, [pc, #428]	; (8003ff0 <StartDefaultTask+0x1948>)
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003e4c:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003e50:	fb04 f101 	mul.w	r1, r4, r1
 8003e54:	4401      	add	r1, r0
 8003e56:	3158      	adds	r1, #88	; 0x58
 8003e58:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003e5c:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <StartDefaultTask+0x1950>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003e66:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003e6a:	e0e7      	b.n	800403c <StartDefaultTask+0x1994>
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8003e6c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e70:	f103 030e 	add.w	r3, r3, #14
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003e7a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	33b8      	adds	r3, #184	; 0xb8
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e8e:	f103 030e 	add.w	r3, r3, #14
 8003e92:	7819      	ldrb	r1, [r3, #0]
 8003e94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e98:	3a10      	subs	r2, #16
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4403      	add	r3, r0
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003eac:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003eb0:	fb04 f101 	mul.w	r1, r4, r1
 8003eb4:	4401      	add	r1, r0
 8003eb6:	3148      	adds	r1, #72	; 0x48
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003ebc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ec0:	f103 030e 	add.w	r3, r3, #14
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003eca:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	33b8      	adds	r3, #184	; 0xb8
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ede:	f103 030e 	add.w	r3, r3, #14
 8003ee2:	7819      	ldrb	r1, [r3, #0]
 8003ee4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ee8:	3a10      	subs	r2, #16
 8003eea:	4603      	mov	r3, r0
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4403      	add	r3, r0
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003efe:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003f02:	fb04 f101 	mul.w	r1, r4, r1
 8003f06:	4401      	add	r1, r0
 8003f08:	3150      	adds	r1, #80	; 0x50
 8003f0a:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003f0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f12:	f103 030e 	add.w	r3, r3, #14
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003f1c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	33b8      	adds	r3, #184	; 0xb8
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f30:	f103 030e 	add.w	r3, r3, #14
 8003f34:	7819      	ldrb	r1, [r3, #0]
 8003f36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003f3a:	3a10      	subs	r2, #16
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4403      	add	r3, r0
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	3310      	adds	r3, #16
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003f50:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003f54:	fb04 f101 	mul.w	r1, r4, r1
 8003f58:	4401      	add	r1, r0
 8003f5a:	3160      	adds	r1, #96	; 0x60
 8003f5c:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f64:	f103 030e 	add.w	r3, r3, #14
 8003f68:	7819      	ldrb	r1, [r3, #0]
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <StartDefaultTask+0x1948>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003f74:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003f78:	fb04 f101 	mul.w	r1, r4, r1
 8003f7c:	4401      	add	r1, r0
 8003f7e:	3158      	adds	r1, #88	; 0x58
 8003f80:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003f84:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <StartDefaultTask+0x1938>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f8e:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f92:	e053      	b.n	800403c <StartDefaultTask+0x1994>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003f94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f98:	f103 030e 	add.w	r3, r3, #14
 8003f9c:	7819      	ldrb	r1, [r3, #0]
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <StartDefaultTask+0x1954>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003fa8:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003fac:	fb04 f101 	mul.w	r1, r4, r1
 8003fb0:	4401      	add	r1, r0
 8003fb2:	3158      	adds	r1, #88	; 0x58
 8003fb4:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <StartDefaultTask+0x1958>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003fc2:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003fc6:	e039      	b.n	800403c <StartDefaultTask+0x1994>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <StartDefaultTask+0x195c>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003fd2:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f006 f96e 	bl	800a2b8 <scaraSetOutput>
					  }
					  break;
 8003fdc:	e02e      	b.n	800403c <StartDefaultTask+0x1994>
 8003fde:	bf00      	nop
 8003fe0:	20000028 	.word	0x20000028
 8003fe4:	20000010 	.word	0x20000010
 8003fe8:	20000030 	.word	0x20000030
 8003fec:	20000058 	.word	0x20000058
 8003ff0:	20000040 	.word	0x20000040
 8003ff4:	20000048 	.word	0x20000048
 8003ff8:	20000018 	.word	0x20000018
 8003ffc:	20000050 	.word	0x20000050
 8004000:	20000008 	.word	0x20000008
 8004004:	20000038 	.word	0x20000038
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8004008:	4bd3      	ldr	r3, [pc, #844]	; (8004358 <StartDefaultTask+0x1cb0>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004012:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8004016:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800401a:	f103 030e 	add.w	r3, r3, #14
 800401e:	7819      	ldrb	r1, [r3, #0]
 8004020:	4bce      	ldr	r3, [pc, #824]	; (800435c <StartDefaultTask+0x1cb4>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800402a:	f44f 74c4 	mov.w	r4, #392	; 0x188
 800402e:	fb04 f101 	mul.w	r1, r4, r1
 8004032:	4401      	add	r1, r0
 8004034:	3158      	adds	r1, #88	; 0x58
 8004036:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800403a:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 800403c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004040:	f103 030e 	add.w	r3, r3, #14
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800404a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	18d1      	adds	r1, r2, r3
 8004054:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004058:	3328      	adds	r3, #40	; 0x28
 800405a:	22c0      	movs	r2, #192	; 0xc0
 800405c:	4618      	mov	r0, r3
 800405e:	f011 fddf 	bl	8015c20 <memcpy>
				  duty_cmd.time_total = state_time;
 8004062:	f607 51f8 	addw	r1, r7, #3576	; 0xdf8
 8004066:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8004072:	f607 51f8 	addw	r1, r7, #3576	; 0xdf8
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 8004082:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004086:	2200      	movs	r2, #0
 8004088:	731a      	strb	r2, [r3, #12]
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 800408a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800408e:	f103 030f 	add.w	r3, r3, #15
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d006      	beq.n	80040a6 <StartDefaultTask+0x19fe>
 8004098:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800409c:	f103 030f 	add.w	r3, r3, #15
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d103      	bne.n	80040ae <StartDefaultTask+0x1a06>
					  status1 = SCARA_STATUS_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
 80040ac:	e062      	b.n	8004174 <StartDefaultTask+0x1acc>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80040ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040b2:	f103 030f 	add.w	r3, r3, #15
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d014      	beq.n	80040e6 <StartDefaultTask+0x1a3e>
 80040bc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040c0:	f103 030f 	add.w	r3, r3, #15
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d00d      	beq.n	80040e6 <StartDefaultTask+0x1a3e>
 80040ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040ce:	f103 030f 	add.w	r3, r3, #15
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d006      	beq.n	80040e6 <StartDefaultTask+0x1a3e>
 80040d8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040dc:	f103 030f 	add.w	r3, r3, #15
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b07      	cmp	r3, #7
 80040e4:	d110      	bne.n	8004108 <StartDefaultTask+0x1a60>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 80040e6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80040ea:	2200      	movs	r2, #0
 80040ec:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 80040ee:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80040f2:	2200      	movs	r2, #0
 80040f4:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80040f6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80040fa:	2202      	movs	r2, #2
 80040fc:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80040fe:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004102:	2203      	movs	r2, #3
 8004104:	745a      	strb	r2, [r3, #17]
 8004106:	e024      	b.n	8004152 <StartDefaultTask+0x1aaa>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8004108:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800410c:	2201      	movs	r2, #1
 800410e:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 8004110:	4b93      	ldr	r3, [pc, #588]	; (8004360 <StartDefaultTask+0x1cb8>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d10c      	bne.n	8004132 <StartDefaultTask+0x1a8a>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 8004118:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800411c:	2200      	movs	r2, #0
 800411e:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004120:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004124:	2200      	movs	r2, #0
 8004126:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 8004128:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800412c:	2201      	movs	r2, #1
 800412e:	741a      	strb	r2, [r3, #16]
 8004130:	e00f      	b.n	8004152 <StartDefaultTask+0x1aaa>
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 8004132:	4b8b      	ldr	r3, [pc, #556]	; (8004360 <StartDefaultTask+0x1cb8>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b05      	cmp	r3, #5
 8004138:	d10b      	bne.n	8004152 <StartDefaultTask+0x1aaa>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 800413a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800413e:	2201      	movs	r2, #1
 8004140:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 8004142:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004146:	2201      	movs	r2, #1
 8004148:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800414a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800414e:	2200      	movs	r2, #0
 8004150:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 8004152:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 8004156:	4668      	mov	r0, sp
 8004158:	f104 0310 	add.w	r3, r4, #16
 800415c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004160:	4619      	mov	r1, r3
 8004162:	f011 fd5d 	bl	8015c20 <memcpy>
 8004166:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800416a:	f002 faf9 	bl	8006760 <scaraInitDuty>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
				  }
				  if ( SCARA_STATUS_OK == status1) {
 8004174:	f897 3ffb 	ldrb.w	r3, [r7, #4091]	; 0xffb
 8004178:	2b00      	cmp	r3, #0
 800417a:	d110      	bne.n	800419e <StartDefaultTask+0x1af6>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 800417c:	2302      	movs	r3, #2
 800417e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004182:	f102 0205 	add.w	r2, r2, #5
 8004186:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004194:	f101 0110 	add.w	r1, r1, #16
 8004198:	e9c1 2300 	strd	r2, r3, [r1]
 800419c:	e043      	b.n	8004226 <StartDefaultTask+0x1b7e>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800419e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041a2:	f103 030e 	add.w	r3, r3, #14
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	425a      	negs	r2, r3
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	f002 0207 	and.w	r2, r2, #7
 80041b4:	bf58      	it	pl
 80041b6:	4253      	negpl	r3, r2
 80041b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041bc:	f102 020e 	add.w	r2, r2, #14
 80041c0:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041c8:	f102 020f 	add.w	r2, r2, #15
 80041cc:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 80041ce:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80041d2:	f897 2ffb 	ldrb.w	r2, [r7, #4091]	; 0xffb
 80041d6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80041d8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80041e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80041e6:	f103 0308 	add.w	r3, r3, #8
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4413      	add	r3, r2
 80041ee:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2301      	movs	r3, #1
 80041f6:	2007      	movs	r0, #7
 80041f8:	f7fe f8a6 	bl	8002348 <commandRespond1>
 80041fc:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8004200:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004204:	f103 0308 	add.w	r3, r3, #8
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800420e:	4413      	add	r3, r2
 8004210:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004214:	f102 0208 	add.w	r2, r2, #8
 8004218:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 800421a:	f240 3186 	movw	r1, #902	; 0x386
 800421e:	4851      	ldr	r0, [pc, #324]	; (8004364 <StartDefaultTask+0x1cbc>)
 8004220:	f7fe f8fa 	bl	8002418 <LOG_REPORT>
					break;
 8004224:	e0d6      	b.n	80043d4 <StartDefaultTask+0x1d2c>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8004226:	a34a      	add	r3, pc, #296	; (adr r3, 8004350 <StartDefaultTask+0x1ca8>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004230:	f101 0110 	add.w	r1, r1, #16
 8004234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004238:	f7fc f828 	bl	800028c <__adddf3>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004244:	f101 0110 	add.w	r1, r1, #16
 8004248:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 800424c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004250:	f103 0310 	add.w	r3, r3, #16
 8004254:	ed93 0b00 	vldr	d0, [r3]
 8004258:	f006 f8c0 	bl	800a3dc <scaraIsFinish>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d037      	beq.n	80042d2 <StartDefaultTask+0x1c2a>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004262:	2304      	movs	r3, #4
 8004264:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004268:	f102 0205 	add.w	r2, r2, #5
 800426c:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 800426e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004272:	f103 030f 	add.w	r3, r3, #15
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b07      	cmp	r3, #7
 800427a:	d118      	bne.n	80042ae <StartDefaultTask+0x1c06>
					operation_state = SCARA_MOVE_TO_TARGET;
 800427c:	2300      	movs	r3, #0
 800427e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004282:	f102 020f 	add.w	r2, r2, #15
 8004286:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 8004288:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800428c:	f103 030e 	add.w	r3, r3, #14
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	425a      	negs	r2, r3
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	f002 0207 	and.w	r2, r2, #7
 800429e:	bf58      	it	pl
 80042a0:	4253      	negpl	r3, r2
 80042a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80042a6:	f102 020e 	add.w	r2, r2, #14
 80042aa:	7013      	strb	r3, [r2, #0]
 80042ac:	e00a      	b.n	80042c4 <StartDefaultTask+0x1c1c>
				}else{
					operation_state += 1; //next state
 80042ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80042b2:	f103 030f 	add.w	r3, r3, #15
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80042be:	f102 020f 	add.w	r2, r2, #15
 80042c2:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 80042c4:	4828      	ldr	r0, [pc, #160]	; (8004368 <StartDefaultTask+0x1cc0>)
 80042c6:	f001 fd23 	bl	8005d10 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 80042ca:	4827      	ldr	r0, [pc, #156]	; (8004368 <StartDefaultTask+0x1cc0>)
 80042cc:	f000 fdfc 	bl	8004ec8 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 80042d0:	e07f      	b.n	80043d2 <StartDefaultTask+0x1d2a>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 80042d2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80042d6:	f103 030f 	add.w	r3, r3, #15
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d078      	beq.n	80043d2 <StartDefaultTask+0x1d2a>
 80042e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80042e4:	f103 030f 	add.w	r3, r3, #15
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d071      	beq.n	80043d2 <StartDefaultTask+0x1d2a>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80042ee:	4c1f      	ldr	r4, [pc, #124]	; (800436c <StartDefaultTask+0x1cc4>)
 80042f0:	4668      	mov	r0, sp
 80042f2:	f104 0308 	add.w	r3, r4, #8
 80042f6:	22b8      	movs	r2, #184	; 0xb8
 80042f8:	4619      	mov	r1, r3
 80042fa:	f011 fc91 	bl	8015c20 <memcpy>
 80042fe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004302:	4819      	ldr	r0, [pc, #100]	; (8004368 <StartDefaultTask+0x1cc0>)
 8004304:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004308:	f101 0110 	add.w	r1, r1, #16
 800430c:	ed91 0b00 	vldr	d0, [r1]
 8004310:	f005 f9fe 	bl	8009710 <scaraFlowDuty>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 3fcf 	strb.w	r3, [r7, #4047]	; 0xfcf
				if ( SCARA_STATUS_OK == status) {
 800431a:	f897 3fcf 	ldrb.w	r3, [r7, #4047]	; 0xfcf
 800431e:	2b00      	cmp	r3, #0
 8004320:	d126      	bne.n	8004370 <StartDefaultTask+0x1cc8>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8004322:	4c12      	ldr	r4, [pc, #72]	; (800436c <StartDefaultTask+0x1cc4>)
 8004324:	4a10      	ldr	r2, [pc, #64]	; (8004368 <StartDefaultTask+0x1cc0>)
 8004326:	ab2c      	add	r3, sp, #176	; 0xb0
 8004328:	4611      	mov	r1, r2
 800432a:	22c0      	movs	r2, #192	; 0xc0
 800432c:	4618      	mov	r0, r3
 800432e:	f011 fc77 	bl	8015c20 <memcpy>
 8004332:	4668      	mov	r0, sp
 8004334:	f104 0310 	add.w	r3, r4, #16
 8004338:	22b0      	movs	r2, #176	; 0xb0
 800433a:	4619      	mov	r1, r3
 800433c:	f011 fc70 	bl	8015c20 <memcpy>
 8004340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004344:	f001 fe74 	bl	8006030 <lowlayer_computeAndWritePulse>
		  break;
 8004348:	e043      	b.n	80043d2 <StartDefaultTask+0x1d2a>
 800434a:	bf00      	nop
 800434c:	f3af 8000 	nop.w
 8004350:	40000000 	.word	0x40000000
 8004354:	3f847ae1 	.word	0x3f847ae1
 8004358:	20000020 	.word	0x20000020
 800435c:	20000040 	.word	0x20000040
 8004360:	20000064 	.word	0x20000064
 8004364:	0801bffc 	.word	0x0801bffc
 8004368:	2000ec38 	.word	0x2000ec38
 800436c:	2000eab8 	.word	0x2000eab8
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8004370:	2303      	movs	r3, #3
 8004372:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004376:	f102 0205 	add.w	r2, r2, #5
 800437a:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 800437c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8004380:	f897 2fcf 	ldrb.w	r2, [r7, #4047]	; 0xfcf
 8004384:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004386:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8004390:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004394:	f103 0308 	add.w	r3, r3, #8
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4413      	add	r3, r2
 800439c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2301      	movs	r3, #1
 80043a4:	2007      	movs	r0, #7
 80043a6:	f7fd ffcf 	bl	8002348 <commandRespond1>
 80043aa:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 80043ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043b2:	f103 0308 	add.w	r3, r3, #8
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80043bc:	4413      	add	r3, r2
 80043be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80043c2:	f102 0208 	add.w	r2, r2, #8
 80043c6:	6013      	str	r3, [r2, #0]
		  break;
 80043c8:	e003      	b.n	80043d2 <StartDefaultTask+0x1d2a>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 80043ca:	bf00      	nop
 80043cc:	e005      	b.n	80043da <StartDefaultTask+0x1d32>
				  break;
 80043ce:	bf00      	nop
 80043d0:	e003      	b.n	80043da <StartDefaultTask+0x1d32>
		  break;
 80043d2:	bf00      	nop
		  }
	  }
	  break;
 80043d4:	e001      	b.n	80043da <StartDefaultTask+0x1d32>
	  break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <StartDefaultTask+0x1d34>
	  break;
 80043da:	bf00      	nop

	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 80043dc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043e0:	f103 0308 	add.w	r3, r3, #8
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	dd0b      	ble.n	8004402 <StartDefaultTask+0x1d5a>
		CDC_Transmit_FS(respond, total_respond_length);
 80043ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043ee:	f103 0308 	add.w	r3, r3, #8
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	f607 53cc 	addw	r3, r7, #3532	; 0xdcc
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f010 ff91 	bl	8015324 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8004402:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004406:	f103 0307 	add.w	r3, r3, #7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f005 ff85 	bl	800a31c <scaraSetMethod>
	  scaraSetMode(current_mode);
 8004412:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004416:	f103 0306 	add.w	r3, r3, #6
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f005 ff6d 	bl	800a2fc <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8004422:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004426:	f103 0305 	add.w	r3, r3, #5
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f005 ff55 	bl	800a2dc <scaraSetDutyState>

    osDelay(1);
 8004432:	2001      	movs	r0, #1
 8004434:	f00e f851 	bl	80124da <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8004438:	f7fe b9b3 	b.w	80027a2 <StartDefaultTask+0xfa>

0800443c <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 800443c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443e:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8004442:	af70      	add	r7, sp, #448	; 0x1c0
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8004448:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800444c:	2201      	movs	r2, #1
 800444e:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004450:	4964      	ldr	r1, [pc, #400]	; (80045e4 <Start_USB_RX_Task+0x1a8>)
 8004452:	4865      	ldr	r0, [pc, #404]	; (80045e8 <Start_USB_RX_Task+0x1ac>)
 8004454:	f001 f9c5 	bl	80057e2 <ringBuff_DistanceOf>
 8004458:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 800445c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d0f4      	beq.n	8004450 <Start_USB_RX_Task+0x14>
 8004466:	466b      	mov	r3, sp
 8004468:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 800446a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800446e:	1c5c      	adds	r4, r3, #1
 8004470:	1e63      	subs	r3, r4, #1
 8004472:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8004476:	4623      	mov	r3, r4
 8004478:	4618      	mov	r0, r3
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800448c:	00c2      	lsls	r2, r0, #3
 800448e:	4623      	mov	r3, r4
 8004490:	4618      	mov	r0, r3
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80044a4:	00c2      	lsls	r2, r0, #3
 80044a6:	4623      	mov	r3, r4
 80044a8:	3307      	adds	r3, #7
 80044aa:	08db      	lsrs	r3, r3, #3
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	ebad 0d03 	sub.w	sp, sp, r3
 80044b2:	ab70      	add	r3, sp, #448	; 0x1c0
 80044b4:	3300      	adds	r3, #0
 80044b6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80044ba:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80044be:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80044c2:	3301      	adds	r3, #1
 80044c4:	461a      	mov	r2, r3
 80044c6:	4848      	ldr	r0, [pc, #288]	; (80045e8 <Start_USB_RX_Task+0x1ac>)
 80044c8:	f001 f96a 	bl	80057a0 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80044cc:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 80044d0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80044d4:	3301      	adds	r3, #1
 80044d6:	f107 020c 	add.w	r2, r7, #12
 80044da:	4619      	mov	r1, r3
 80044dc:	f7fd ffe2 	bl	80024a4 <unPackPayload>
 80044e0:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 80044e4:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d077      	beq.n	80045de <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 80044ee:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80044f2:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80044f6:	f107 000c 	add.w	r0, r7, #12
 80044fa:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 80044fe:	f7fc fd77 	bl	8000ff0 <packetRead>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8004508:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800450c:	2287      	movs	r2, #135	; 0x87
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f011 fbad 	bl	8015c70 <memset>
				  detail_length = 0;
 8004516:	f107 0308 	add.w	r3, r7, #8
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 800451e:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004522:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800452c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004530:	936e      	str	r3, [sp, #440]	; 0x1b8
 8004532:	4668      	mov	r0, sp
 8004534:	f104 0308 	add.w	r3, r4, #8
 8004538:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800453c:	4619      	mov	r1, r3
 800453e:	f011 fb6f 	bl	8015c20 <memcpy>
 8004542:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004546:	4628      	mov	r0, r5
 8004548:	f7fd fd72 	bl	8002030 <commandReply>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8004552:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004556:	2b09      	cmp	r3, #9
 8004558:	d123      	bne.n	80045a2 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8004560:	e008      	b.n	8004574 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <Start_USB_RX_Task+0x1b0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f04f 31ff 	mov.w	r1, #4294967295
 800456a:	4618      	mov	r0, r3
 800456c:	f00e f9c6 	bl	80128fc <osMailAlloc>
 8004570:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8004574:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f2      	beq.n	8004562 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 800457c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004580:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004584:	4619      	mov	r1, r3
 8004586:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 800458a:	f011 fb49 	bl	8015c20 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 800458e:	4b17      	ldr	r3, [pc, #92]	; (80045ec <Start_USB_RX_Task+0x1b0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8004596:	4618      	mov	r0, r3
 8004598:	f00e f9c6 	bl	8012928 <osMailPut>
 800459c:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 80045a0:	e01d      	b.n	80045de <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 80045a2:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80045a6:	2b0a      	cmp	r3, #10
 80045a8:	d019      	beq.n	80045de <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 80045aa:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 80045ae:	f107 0308 	add.w	r3, r7, #8
 80045b2:	681c      	ldr	r4, [r3, #0]
 80045b4:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80045b8:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 80045bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	4623      	mov	r3, r4
 80045c4:	f7fd fec0 	bl	8002348 <commandRespond1>
 80045c8:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 80045cc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f010 fea3 	bl	8015324 <CDC_Transmit_FS>
 80045de:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 80045e0:	e736      	b.n	8004450 <Start_USB_RX_Task+0x14>
 80045e2:	bf00      	nop
 80045e4:	0801c0b8 	.word	0x0801c0b8
 80045e8:	20000068 	.word	0x20000068
 80045ec:	2000de34 	.word	0x2000de34

080045f0 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	b292      	uxth	r2, r2
 8004600:	801a      	strh	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
 800463c:	615a      	str	r2, [r3, #20]
 800463e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004642:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004646:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <MX_FSMC_Init+0xb8>)
 800464a:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <MX_FSMC_Init+0xbc>)
 800464c:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800464e:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004654:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004656:	2202      	movs	r2, #2
 8004658:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800465a:	4b21      	ldr	r3, [pc, #132]	; (80046e0 <MX_FSMC_Init+0xb8>)
 800465c:	2208      	movs	r2, #8
 800465e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004660:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004662:	2210      	movs	r2, #16
 8004664:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004668:	2200      	movs	r2, #0
 800466a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <MX_FSMC_Init+0xb8>)
 800466e:	2200      	movs	r2, #0
 8004670:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004674:	2200      	movs	r2, #0
 8004676:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <MX_FSMC_Init+0xb8>)
 800467a:	2200      	movs	r2, #0
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004684:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004688:	2200      	movs	r2, #0
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <MX_FSMC_Init+0xb8>)
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <MX_FSMC_Init+0xb8>)
 8004694:	2200      	movs	r2, #0
 8004696:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <MX_FSMC_Init+0xb8>)
 800469a:	2200      	movs	r2, #0
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <MX_FSMC_Init+0xb8>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80046a4:	230f      	movs	r3, #15
 80046a6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80046a8:	230f      	movs	r3, #15
 80046aa:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80046ac:	23ff      	movs	r3, #255	; 0xff
 80046ae:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80046b0:	230f      	movs	r3, #15
 80046b2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80046b4:	2310      	movs	r3, #16
 80046b6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80046b8:	2311      	movs	r3, #17
 80046ba:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	2200      	movs	r2, #0
 80046c4:	4619      	mov	r1, r3
 80046c6:	4806      	ldr	r0, [pc, #24]	; (80046e0 <MX_FSMC_Init+0xb8>)
 80046c8:	f007 fca4 	bl	800c014 <HAL_NOR_Init>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80046d2:	f000 ffab 	bl	800562c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80046d6:	bf00      	nop
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000de40 	.word	0x2000de40
 80046e4:	a0000104 	.word	0xa0000104

080046e8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_FSMC_MspInit+0xa8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d140      	bne.n	8004786 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004704:	4b22      	ldr	r3, [pc, #136]	; (8004790 <HAL_FSMC_MspInit+0xa8>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_FSMC_MspInit+0xac>)
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	4a20      	ldr	r2, [pc, #128]	; (8004794 <HAL_FSMC_MspInit+0xac>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6393      	str	r3, [r2, #56]	; 0x38
 800471a:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <HAL_FSMC_MspInit+0xac>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004726:	f64f 7380 	movw	r3, #65408	; 0xff80
 800472a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004734:	2303      	movs	r3, #3
 8004736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004738:	230c      	movs	r3, #12
 800473a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4815      	ldr	r0, [pc, #84]	; (8004798 <HAL_FSMC_MspInit+0xb0>)
 8004742:	f007 fab1 	bl	800bca8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004746:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800474a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474c:	2302      	movs	r3, #2
 800474e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004754:	2303      	movs	r3, #3
 8004756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004758:	230c      	movs	r3, #12
 800475a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800475c:	1d3b      	adds	r3, r7, #4
 800475e:	4619      	mov	r1, r3
 8004760:	480e      	ldr	r0, [pc, #56]	; (800479c <HAL_FSMC_MspInit+0xb4>)
 8004762:	f007 faa1 	bl	800bca8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	2302      	movs	r3, #2
 800476c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004772:	2303      	movs	r3, #3
 8004774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004776:	230c      	movs	r3, #12
 8004778:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4808      	ldr	r0, [pc, #32]	; (80047a0 <HAL_FSMC_MspInit+0xb8>)
 8004780:	f007 fa92 	bl	800bca8 <HAL_GPIO_Init>
 8004784:	e000      	b.n	8004788 <HAL_FSMC_MspInit+0xa0>
    return;
 8004786:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2000285c 	.word	0x2000285c
 8004794:	40023800 	.word	0x40023800
 8004798:	40021000 	.word	0x40021000
 800479c:	40020c00 	.word	0x40020c00
 80047a0:	40020400 	.word	0x40020400

080047a4 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80047ac:	f7ff ff9c 	bl	80046e8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point, int32_t run_point)
{
 80047b8:	b084      	sub	sp, #16
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	f107 0014 	add.w	r0, r7, #20
 80047c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fb fea9 	bl	8000524 <__aeabi_i2d>
 80047d2:	a3a3      	add	r3, pc, #652	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb ff0e 	bl	80005f8 <__aeabi_dmul>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	4ba0      	ldr	r3, [pc, #640]	; (8004a68 <update_gcode_point+0x2b0>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f7fb fd4f 	bl	800028c <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fe92 	bl	8000524 <__aeabi_i2d>
 8004800:	a397      	add	r3, pc, #604	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f7fb fef7 	bl	80005f8 <__aeabi_dmul>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	4b96      	ldr	r3, [pc, #600]	; (8004a6c <update_gcode_point+0x2b4>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f7fb fd38 	bl	800028c <__adddf3>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	if(gcode_point.configure.type_define[1] == UP_Z){
 8004826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800482a:	2b05      	cmp	r3, #5
 800482c:	d10d      	bne.n	800484a <update_gcode_point+0x92>
	  duty_cmd->target_point.z = up_z_height + offset_z;
 800482e:	4b90      	ldr	r3, [pc, #576]	; (8004a70 <update_gcode_point+0x2b8>)
 8004830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004834:	4b8f      	ldr	r3, [pc, #572]	; (8004a74 <update_gcode_point+0x2bc>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fd27 	bl	800028c <__adddf3>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004848:	e00c      	b.n	8004864 <update_gcode_point+0xac>
	}else{
	  duty_cmd->target_point.z = down_z_height + offset_z;
 800484a:	4b8b      	ldr	r3, [pc, #556]	; (8004a78 <update_gcode_point+0x2c0>)
 800484c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004850:	4b88      	ldr	r3, [pc, #544]	; (8004a74 <update_gcode_point+0x2bc>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f7fb fd19 	bl	800028c <__adddf3>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	}
	duty_cmd->target_point.roll = roll_angle;
 8004864:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <update_gcode_point+0x2c4>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	duty_cmd->space_type = DUTY_SPACE_TASK;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	735a      	strb	r2, [r3, #13]
	duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	731a      	strb	r2, [r3, #12]
	if(gcode_point.configure.type_define[0] == LINEAR_TYPE){
 800487c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004880:	2b01      	cmp	r3, #1
 8004882:	d103      	bne.n	800488c <update_gcode_point+0xd4>
	  duty_cmd->path_type = DUTY_PATH_LINE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	739a      	strb	r2, [r3, #14]
 800488a:	e04d      	b.n	8004928 <update_gcode_point+0x170>
	}else if(gcode_point.configure.type_define[0] == ARC_AW_TYPE){
 800488c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004890:	2b03      	cmp	r3, #3
 8004892:	d122      	bne.n	80048da <update_gcode_point+0x122>
	  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fb fe44 	bl	8000524 <__aeabi_i2d>
 800489c:	a370      	add	r3, pc, #448	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fea9 	bl	80005f8 <__aeabi_dmul>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fb fe36 	bl	8000524 <__aeabi_i2d>
 80048b8:	a369      	add	r3, pc, #420	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fb fe9b 	bl	80005f8 <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = 1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	615a      	str	r2, [r3, #20]
 80048d8:	e026      	b.n	8004928 <update_gcode_point+0x170>
	}else if(gcode_point.configure.type_define[0] == ARC_CW_TYPE){
 80048da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d122      	bne.n	8004928 <update_gcode_point+0x170>
	  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fb fe1d 	bl	8000524 <__aeabi_i2d>
 80048ea:	a35d      	add	r3, pc, #372	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fb fe82 	bl	80005f8 <__aeabi_dmul>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fe0f 	bl	8000524 <__aeabi_i2d>
 8004906:	a356      	add	r3, pc, #344	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f7fb fe74 	bl	80005f8 <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = -1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f04f 32ff 	mov.w	r2, #4294967295
 8004926:	615a      	str	r2, [r3, #20]
	}

	if(Gcode_Mode == GCODE_LINEAR){
 8004928:	4b55      	ldr	r3, [pc, #340]	; (8004a80 <update_gcode_point+0x2c8>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b07      	cmp	r3, #7
 800492e:	d12e      	bne.n	800498e <update_gcode_point+0x1d6>
		duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fb fdf6 	bl	8000524 <__aeabi_i2d>
 8004938:	a349      	add	r3, pc, #292	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fe5b 	bl	80005f8 <__aeabi_dmul>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <update_gcode_point+0x2cc>)
 8004950:	f7fb ff7c 	bl	800084c <__aeabi_ddiv>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
		if(run_point == 1){
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10d      	bne.n	8004980 <update_gcode_point+0x1c8>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = gcode_point.configure.type_define[1];
		}
	}

}
 800497e:	e067      	b.n	8004a50 <update_gcode_point+0x298>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	745a      	strb	r2, [r3, #17]
}
 800498c:	e060      	b.n	8004a50 <update_gcode_point+0x298>
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 800498e:	4b3c      	ldr	r3, [pc, #240]	; (8004a80 <update_gcode_point+0x2c8>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d15c      	bne.n	8004a50 <update_gcode_point+0x298>
		if(gcode_point.configure.type_define[1] == pre_height){
 8004996:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800499a:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <update_gcode_point+0x2d0>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d12c      	bne.n	80049fc <update_gcode_point+0x244>
			if(gcode_point.configure.clutch_index != pre_clutch_index){
 80049a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <update_gcode_point+0x2d4>)
 80049a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d00f      	beq.n	80049d0 <update_gcode_point+0x218>
				LSPB_calculation(gcode_clutch_configure[gcode_point.configure.clutch_index]);
 80049b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049b2:	4619      	mov	r1, r3
 80049b4:	4a36      	ldr	r2, [pc, #216]	; (8004a90 <update_gcode_point+0x2d8>)
 80049b6:	460b      	mov	r3, r1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	440b      	add	r3, r1
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049c4:	f000 f868 	bl	8004a98 <LSPB_calculation>
				pre_clutch_index = gcode_point.configure.clutch_index;
 80049c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049ca:	b21a      	sxth	r2, r3
 80049cc:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <update_gcode_point+0x2d4>)
 80049ce:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2203      	movs	r2, #3
 80049d4:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(gcode_point.T*COR_INVERSE_SCALE);
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004a94 <update_gcode_point+0x2dc>
 80049e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049e8:	ee17 0a90 	vmov	r0, s15
 80049ec:	f7fb fdac 	bl	8000548 <__aeabi_f2d>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80049fa:	e029      	b.n	8004a50 <update_gcode_point+0x298>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
 8004a08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4a20      	ldr	r2, [pc, #128]	; (8004a90 <update_gcode_point+0x2d8>)
 8004a0e:	460b      	mov	r3, r1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	440b      	add	r3, r1
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	3308      	adds	r3, #8
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fb fd81 	bl	8000524 <__aeabi_i2d>
 8004a22:	a30f      	add	r3, pc, #60	; (adr r3, 8004a60 <update_gcode_point+0x2a8>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f7fb fde6 	bl	80005f8 <__aeabi_dmul>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <update_gcode_point+0x2cc>)
 8004a3a:	f7fb ff07 	bl	800084c <__aeabi_ddiv>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			pre_height = gcode_point.configure.type_define[1];
 8004a48:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <update_gcode_point+0x2d0>)
 8004a4e:	701a      	strb	r2, [r3, #0]
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5a:	b004      	add	sp, #16
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	a0000000 	.word	0xa0000000
 8004a64:	3eb0c6f7 	.word	0x3eb0c6f7
 8004a68:	20006f88 	.word	0x20006f88
 8004a6c:	2000dd20 	.word	0x2000dd20
 8004a70:	200065c0 	.word	0x200065c0
 8004a74:	2000dd10 	.word	0x2000dd10
 8004a78:	20006f38 	.word	0x20006f38
 8004a7c:	20006f80 	.word	0x20006f80
 8004a80:	200065c8 	.word	0x200065c8
 8004a84:	40877000 	.word	0x40877000
 8004a88:	20006f68 	.word	0x20006f68
 8004a8c:	2000dd0a 	.word	0x2000dd0a
 8004a90:	200065d8 	.word	0x200065d8
 8004a94:	358637bd 	.word	0x358637bd

08004a98 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8004a98:	b5b0      	push	{r4, r5, r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fb fd36 	bl	8000524 <__aeabi_i2d>
 8004ab8:	a388      	add	r3, pc, #544	; (adr r3, 8004cdc <LSPB_calculation+0x244>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fd9b 	bl	80005f8 <__aeabi_dmul>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fb fd29 	bl	8000524 <__aeabi_i2d>
 8004ad2:	a382      	add	r3, pc, #520	; (adr r3, 8004cdc <LSPB_calculation+0x244>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fd8e 	bl	80005f8 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8004ae4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004ae8:	4b71      	ldr	r3, [pc, #452]	; (8004cb0 <LSPB_calculation+0x218>)
 8004aea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004aee:	f7fb fd83 	bl	80005f8 <__aeabi_dmul>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004afe:	f7fb fea5 	bl	800084c <__aeabi_ddiv>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	496b      	ldr	r1, [pc, #428]	; (8004cb4 <LSPB_calculation+0x21c>)
 8004b08:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 8004b0c:	4b69      	ldr	r3, [pc, #420]	; (8004cb4 <LSPB_calculation+0x21c>)
 8004b0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b1a:	f7fb fe97 	bl	800084c <__aeabi_ddiv>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb fbaf 	bl	8000288 <__aeabi_dsub>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4962      	ldr	r1, [pc, #392]	; (8004cb8 <LSPB_calculation+0x220>)
 8004b30:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 8004b34:	4b5f      	ldr	r3, [pc, #380]	; (8004cb4 <LSPB_calculation+0x21c>)
 8004b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b3a:	4b5f      	ldr	r3, [pc, #380]	; (8004cb8 <LSPB_calculation+0x220>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fba2 	bl	8000288 <__aeabi_dsub>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	495c      	ldr	r1, [pc, #368]	; (8004cbc <LSPB_calculation+0x224>)
 8004b4a:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 8004b4e:	4b5a      	ldr	r3, [pc, #360]	; (8004cb8 <LSPB_calculation+0x220>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b58:	f7fb fe78 	bl	800084c <__aeabi_ddiv>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	4b55      	ldr	r3, [pc, #340]	; (8004cc0 <LSPB_calculation+0x228>)
 8004b6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b6e:	f7fb fd43 	bl	80005f8 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4953      	ldr	r1, [pc, #332]	; (8004cc4 <LSPB_calculation+0x22c>)
 8004b78:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 8004b7c:	4952      	ldr	r1, [pc, #328]	; (8004cc8 <LSPB_calculation+0x230>)
 8004b7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b82:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 8004b86:	4b4c      	ldr	r3, [pc, #304]	; (8004cb8 <LSPB_calculation+0x220>)
 8004b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	4b4e      	ldr	r3, [pc, #312]	; (8004ccc <LSPB_calculation+0x234>)
 8004b92:	f7fb fd31 	bl	80005f8 <__aeabi_dmul>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ba2:	f7fb fd29 	bl	80005f8 <__aeabi_dmul>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4947      	ldr	r1, [pc, #284]	; (8004cc8 <LSPB_calculation+0x230>)
 8004bac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b45      	ldr	r3, [pc, #276]	; (8004ccc <LSPB_calculation+0x234>)
 8004bb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bba:	f7fb fd1d 	bl	80005f8 <__aeabi_dmul>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4943      	ldr	r1, [pc, #268]	; (8004cd0 <LSPB_calculation+0x238>)
 8004bc4:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8004bc8:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <LSPB_calculation+0x224>)
 8004bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd2:	f7fb fd11 	bl	80005f8 <__aeabi_dmul>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004be2:	f7fb fb53 	bl	800028c <__adddf3>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4939      	ldr	r1, [pc, #228]	; (8004cd0 <LSPB_calculation+0x238>)
 8004bec:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8004bf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	f7fb fb48 	bl	800028c <__adddf3>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4614      	mov	r4, r2
 8004c02:	461d      	mov	r5, r3
 8004c04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	f7fb fb3e 	bl	800028c <__adddf3>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <LSPB_calculation+0x224>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fceb 	bl	80005f8 <__aeabi_dmul>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4620      	mov	r0, r4
 8004c28:	4629      	mov	r1, r5
 8004c2a:	f7fb fb2f 	bl	800028c <__adddf3>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4614      	mov	r4, r2
 8004c34:	461d      	mov	r5, r3
 8004c36:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <LSPB_calculation+0x21c>)
 8004c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c40:	f7fb fcda 	bl	80005f8 <__aeabi_dmul>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4620      	mov	r0, r4
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	f7fb fb1c 	bl	8000288 <__aeabi_dsub>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <LSPB_calculation+0x21c>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fccb 	bl	80005f8 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c72:	f7fb fdeb 	bl	800084c <__aeabi_ddiv>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c7e:	f7fb fb03 	bl	8000288 <__aeabi_dsub>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4912      	ldr	r1, [pc, #72]	; (8004cd0 <LSPB_calculation+0x238>)
 8004c88:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 8004c8c:	4911      	ldr	r1, [pc, #68]	; (8004cd4 <LSPB_calculation+0x23c>)
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 8004c9a:	490f      	ldr	r1, [pc, #60]	; (8004cd8 <LSPB_calculation+0x240>)
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004ca8:	bf00      	nop
 8004caa:	3728      	adds	r7, #40	; 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb0:	3ff33333 	.word	0x3ff33333
 8004cb4:	20006f98 	.word	0x20006f98
 8004cb8:	20006f40 	.word	0x20006f40
 8004cbc:	20006f60 	.word	0x20006f60
 8004cc0:	3fe00000 	.word	0x3fe00000
 8004cc4:	2000dd00 	.word	0x2000dd00
 8004cc8:	20006f70 	.word	0x20006f70
 8004ccc:	bfe00000 	.word	0xbfe00000
 8004cd0:	20006f48 	.word	0x20006f48
 8004cd4:	200065d0 	.word	0x200065d0
 8004cd8:	2000dd18 	.word	0x2000dd18
 8004cdc:	a0000000 	.word	0xa0000000
 8004ce0:	3eb0c6f7 	.word	0x3eb0c6f7
 8004ce4:	00000000 	.word	0x00000000

08004ce8 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8004ce8:	b084      	sub	sp, #16
 8004cea:	b580      	push	{r7, lr}
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	f107 0c08 	add.w	ip, r7, #8
 8004cf2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fc13 	bl	8000524 <__aeabi_i2d>
 8004cfe:	a312      	add	r3, pc, #72	; (adr r3, 8004d48 <accumulate_update+0x60>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f7fb fc78 	bl	80005f8 <__aeabi_dmul>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	ec43 2b17 	vmov	d7, r2, r3
 8004d10:	eeb0 0a47 	vmov.f32	s0, s14
 8004d14:	eef0 0a67 	vmov.f32	s1, s15
 8004d18:	480d      	ldr	r0, [pc, #52]	; (8004d50 <accumulate_update+0x68>)
 8004d1a:	f003 fe61 	bl	80089e0 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb fbff 	bl	8000524 <__aeabi_i2d>
 8004d26:	a308      	add	r3, pc, #32	; (adr r3, 8004d48 <accumulate_update+0x60>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f7fb fc64 	bl	80005f8 <__aeabi_dmul>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4907      	ldr	r1, [pc, #28]	; (8004d54 <accumulate_update+0x6c>)
 8004d36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d42:	b004      	add	sp, #16
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	a0000000 	.word	0xa0000000
 8004d4c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004d50:	200065d0 	.word	0x200065d0
 8004d54:	2000dd18 	.word	0x2000dd18

08004d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	4b51      	ldr	r3, [pc, #324]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	4a50      	ldr	r2, [pc, #320]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7e:	4b4e      	ldr	r3, [pc, #312]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	4a49      	ldr	r2, [pc, #292]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	4b43      	ldr	r3, [pc, #268]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	4a42      	ldr	r2, [pc, #264]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004db0:	f043 0310 	orr.w	r3, r3, #16
 8004db4:	6313      	str	r3, [r2, #48]	; 0x30
 8004db6:	4b40      	ldr	r3, [pc, #256]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	4b3c      	ldr	r3, [pc, #240]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	4a3b      	ldr	r2, [pc, #236]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004dcc:	f043 0302 	orr.w	r3, r3, #2
 8004dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd2:	4b39      	ldr	r3, [pc, #228]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4b35      	ldr	r3, [pc, #212]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	4a34      	ldr	r2, [pc, #208]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004de8:	f043 0308 	orr.w	r3, r3, #8
 8004dec:	6313      	str	r3, [r2, #48]	; 0x30
 8004dee:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <MX_GPIO_Init+0x160>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8004e00:	482e      	ldr	r0, [pc, #184]	; (8004ebc <MX_GPIO_Init+0x164>)
 8004e02:	f007 f8ed 	bl	800bfe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8004e06:	2200      	movs	r2, #0
 8004e08:	f641 0148 	movw	r1, #6216	; 0x1848
 8004e0c:	482c      	ldr	r0, [pc, #176]	; (8004ec0 <MX_GPIO_Init+0x168>)
 8004e0e:	f007 f8e7 	bl	800bfe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004e12:	2200      	movs	r2, #0
 8004e14:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e18:	482a      	ldr	r0, [pc, #168]	; (8004ec4 <MX_GPIO_Init+0x16c>)
 8004e1a:	f007 f8e1 	bl	800bfe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8004e1e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8004e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e24:	2301      	movs	r3, #1
 8004e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	4619      	mov	r1, r3
 8004e36:	4821      	ldr	r0, [pc, #132]	; (8004ebc <MX_GPIO_Init+0x164>)
 8004e38:	f006 ff36 	bl	800bca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004e3c:	f640 0348 	movw	r3, #2120	; 0x848
 8004e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e42:	2301      	movs	r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e4e:	f107 0314 	add.w	r3, r7, #20
 8004e52:	4619      	mov	r1, r3
 8004e54:	481a      	ldr	r0, [pc, #104]	; (8004ec0 <MX_GPIO_Init+0x168>)
 8004e56:	f006 ff27 	bl	800bca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8004e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e60:	2301      	movs	r3, #1
 8004e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	4619      	mov	r1, r3
 8004e72:	4813      	ldr	r0, [pc, #76]	; (8004ec0 <MX_GPIO_Init+0x168>)
 8004e74:	f006 ff18 	bl	800bca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8004e78:	f242 0304 	movw	r3, #8196	; 0x2004
 8004e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	480c      	ldr	r0, [pc, #48]	; (8004ec0 <MX_GPIO_Init+0x168>)
 8004e8e:	f006 ff0b 	bl	800bca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8004e92:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea4:	f107 0314 	add.w	r3, r7, #20
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4806      	ldr	r0, [pc, #24]	; (8004ec4 <MX_GPIO_Init+0x16c>)
 8004eac:	f006 fefc 	bl	800bca8 <HAL_GPIO_Init>

}
 8004eb0:	bf00      	nop
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40020400 	.word	0x40020400
 8004ec0:	40020c00 	.word	0x40020c00
 8004ec4:	40020000 	.word	0x40020000

08004ec8 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8004ec8:	b5b0      	push	{r4, r5, r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8004eda:	eef0 0a67 	vmov.f32	s1, s15
 8004ede:	f015 fb7f 	bl	801a5e0 <cos>
 8004ee2:	ec51 0b10 	vmov	r0, r1, d0
 8004ee6:	a382      	add	r3, pc, #520	; (adr r3, 80050f0 <kinematicForward+0x228>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb fb84 	bl	80005f8 <__aeabi_dmul>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004f04:	f7fb f9c2 	bl	800028c <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	ec43 2b17 	vmov	d7, r2, r3
 8004f10:	eeb0 0a47 	vmov.f32	s0, s14
 8004f14:	eef0 0a67 	vmov.f32	s1, s15
 8004f18:	f015 fb62 	bl	801a5e0 <cos>
 8004f1c:	ec51 0b10 	vmov	r0, r1, d0
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	4b78      	ldr	r3, [pc, #480]	; (8005108 <kinematicForward+0x240>)
 8004f26:	f7fb fb67 	bl	80005f8 <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	f7fb f9ab 	bl	800028c <__adddf3>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004f4a:	f7fb f99f 	bl	800028c <__adddf3>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4610      	mov	r0, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004f5c:	f7fb f994 	bl	8000288 <__aeabi_dsub>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	ec43 2b17 	vmov	d7, r2, r3
 8004f68:	eeb0 0a47 	vmov.f32	s0, s14
 8004f6c:	eef0 0a67 	vmov.f32	s1, s15
 8004f70:	f015 fb36 	bl	801a5e0 <cos>
 8004f74:	ec51 0b10 	vmov	r0, r1, d0
 8004f78:	a35b      	add	r3, pc, #364	; (adr r3, 80050e8 <kinematicForward+0x220>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb fb3b 	bl	80005f8 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 8004f86:	4620      	mov	r0, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f7fb f97f 	bl	800028c <__adddf3>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8004fa0:	eef0 0a67 	vmov.f32	s1, s15
 8004fa4:	f015 fbb4 	bl	801a710 <sin>
 8004fa8:	ec51 0b10 	vmov	r0, r1, d0
 8004fac:	a350      	add	r3, pc, #320	; (adr r3, 80050f0 <kinematicForward+0x228>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb fb21 	bl	80005f8 <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4614      	mov	r4, r2
 8004fbc:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004fca:	f7fb f95f 	bl	800028c <__adddf3>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	ec43 2b17 	vmov	d7, r2, r3
 8004fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8004fda:	eef0 0a67 	vmov.f32	s1, s15
 8004fde:	f015 fb97 	bl	801a710 <sin>
 8004fe2:	ec51 0b10 	vmov	r0, r1, d0
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <kinematicForward+0x240>)
 8004fec:	f7fb fb04 	bl	80005f8 <__aeabi_dmul>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7fb f948 	bl	800028c <__adddf3>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005010:	f7fb f93c 	bl	800028c <__adddf3>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005022:	f7fb f931 	bl	8000288 <__aeabi_dsub>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	ec43 2b17 	vmov	d7, r2, r3
 800502e:	eeb0 0a47 	vmov.f32	s0, s14
 8005032:	eef0 0a67 	vmov.f32	s1, s15
 8005036:	f015 fb6b 	bl	801a710 <sin>
 800503a:	ec51 0b10 	vmov	r0, r1, d0
 800503e:	a32a      	add	r3, pc, #168	; (adr r3, 80050e8 <kinematicForward+0x220>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fad8 	bl	80005f8 <__aeabi_dmul>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 800504c:	4620      	mov	r0, r4
 800504e:	4629      	mov	r1, r5
 8005050:	f7fb f91c 	bl	800028c <__adddf3>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005062:	a125      	add	r1, pc, #148	; (adr r1, 80050f8 <kinematicForward+0x230>)
 8005064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005068:	f7fb f90e 	bl	8000288 <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	a322      	add	r3, pc, #136	; (adr r3, 8005100 <kinematicForward+0x238>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb f905 	bl	8000288 <__aeabi_dsub>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005092:	f7fb f8fb 	bl	800028c <__adddf3>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80050a4:	f7fb f8f0 	bl	8000288 <__aeabi_dsub>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050ca:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 80050d8:	2301      	movs	r3, #1
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bdb0      	pop	{r4, r5, r7, pc}
 80050e2:	bf00      	nop
 80050e4:	f3af 8000 	nop.w
 80050e8:	80000000 	.word	0x80000000
 80050ec:	40402e14 	.word	0x40402e14
 80050f0:	00000000 	.word	0x00000000
 80050f4:	4068a000 	.word	0x4068a000
 80050f8:	00000000 	.word	0x00000000
 80050fc:	406a6000 	.word	0x406a6000
 8005100:	e0000000 	.word	0xe0000000
 8005104:	40536b22 	.word	0x40536b22
 8005108:	40640000 	.word	0x40640000
 800510c:	00000000 	.word	0x00000000

08005110 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005110:	b082      	sub	sp, #8
 8005112:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005116:	b0a0      	sub	sp, #128	; 0x80
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005120:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800512a:	a1f0      	add	r1, pc, #960	; (adr r1, 80054ec <kinematicInverse+0x3dc>)
 800512c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005130:	f7fb f8aa 	bl	8000288 <__aeabi_dsub>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005148:	eeb0 0a47 	vmov.f32	s0, s14
 800514c:	eef0 0a67 	vmov.f32	s1, s15
 8005150:	f015 fa46 	bl	801a5e0 <cos>
 8005154:	ec51 0b10 	vmov	r0, r1, d0
 8005158:	a3e6      	add	r3, pc, #920	; (adr r3, 80054f4 <kinematicInverse+0x3e4>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb fa4b 	bl	80005f8 <__aeabi_dmul>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4650      	mov	r0, sl
 8005168:	4659      	mov	r1, fp
 800516a:	f7fb f88d 	bl	8000288 <__aeabi_dsub>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005182:	eeb0 0a47 	vmov.f32	s0, s14
 8005186:	eef0 0a67 	vmov.f32	s1, s15
 800518a:	f015 fac1 	bl	801a710 <sin>
 800518e:	ec51 0b10 	vmov	r0, r1, d0
 8005192:	a3d8      	add	r3, pc, #864	; (adr r3, 80054f4 <kinematicInverse+0x3e4>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f7fb fa2e 	bl	80005f8 <__aeabi_dmul>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4650      	mov	r0, sl
 80051a2:	4659      	mov	r1, fp
 80051a4:	f7fb f870 	bl	8000288 <__aeabi_dsub>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80051b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80051b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4692      	mov	sl, r2
 80051c2:	469b      	mov	fp, r3
 80051c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051c8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051cc:	f7fb fa14 	bl	80005f8 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4650      	mov	r0, sl
 80051d6:	4659      	mov	r1, fp
 80051d8:	f7fb f858 	bl	800028c <__adddf3>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	a3c5      	add	r3, pc, #788	; (adr r3, 80054fc <kinematicInverse+0x3ec>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fb f84d 	bl	8000288 <__aeabi_dsub>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4610      	mov	r0, r2
 80051f4:	4619      	mov	r1, r3
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	4bb9      	ldr	r3, [pc, #740]	; (80054e0 <kinematicInverse+0x3d0>)
 80051fc:	f7fb f844 	bl	8000288 <__aeabi_dsub>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	a3b1      	add	r3, pc, #708	; (adr r3, 80054d0 <kinematicInverse+0x3c0>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fb fb1d 	bl	800084c <__aeabi_ddiv>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800521a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800521e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005222:	f7fb f9e9 	bl	80005f8 <__aeabi_dmul>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	f04f 0000 	mov.w	r0, #0
 800522e:	49ad      	ldr	r1, [pc, #692]	; (80054e4 <kinematicInverse+0x3d4>)
 8005230:	f7fb f82a 	bl	8000288 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005248:	f7fb fc48 	bl	8000adc <__aeabi_dcmplt>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <kinematicInverse+0x146>
		return FALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	e134      	b.n	80054c0 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8005256:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800525a:	f015 faf1 	bl	801a840 <sqrt>
 800525e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8005262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
 8005266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 800526e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005272:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8005276:	f015 fae1 	bl	801a83c <atan2>
 800527a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 800527e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005282:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005286:	f015 fad9 	bl	801a83c <atan2>
 800528a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 800528e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005292:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005296:	f7fa fff7 	bl	8000288 <__aeabi_dsub>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4614      	mov	r4, r2
 80052a0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80052a4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80052a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052ac:	f7fa ffec 	bl	8000288 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4690      	mov	r8, r2
 80052b6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	4620      	mov	r0, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7fb fc15 	bl	8000af0 <__aeabi_dcmple>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80052cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052d0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80052d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052d8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80052dc:	e007      	b.n	80052ee <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80052de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80052e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ea:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	4b7d      	ldr	r3, [pc, #500]	; (80054e8 <kinematicInverse+0x3d8>)
 80052f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052f8:	f7fb f97e 	bl	80005f8 <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4610      	mov	r0, r2
 8005302:	4619      	mov	r1, r3
 8005304:	a374      	add	r3, pc, #464	; (adr r3, 80054d8 <kinematicInverse+0x3c8>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fa ffbf 	bl	800028c <__adddf3>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800531a:	f7fb f96d 	bl	80005f8 <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4614      	mov	r4, r2
 8005324:	461d      	mov	r5, r3
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	4b6f      	ldr	r3, [pc, #444]	; (80054e8 <kinematicInverse+0x3d8>)
 800532c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005330:	f7fb f962 	bl	80005f8 <__aeabi_dmul>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005340:	f7fb f95a 	bl	80005f8 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fa ff9c 	bl	8000288 <__aeabi_dsub>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4614      	mov	r4, r2
 8005356:	461d      	mov	r5, r3
 8005358:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800535c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005360:	f7fb f94a 	bl	80005f8 <__aeabi_dmul>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4690      	mov	r8, r2
 800536a:	4699      	mov	r9, r3
 800536c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005370:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005374:	f7fb f940 	bl	80005f8 <__aeabi_dmul>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4640      	mov	r0, r8
 800537e:	4649      	mov	r1, r9
 8005380:	f7fa ff84 	bl	800028c <__adddf3>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4620      	mov	r0, r4
 800538a:	4629      	mov	r1, r5
 800538c:	f7fb fa5e 	bl	800084c <__aeabi_ddiv>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	4b52      	ldr	r3, [pc, #328]	; (80054e8 <kinematicInverse+0x3d8>)
 800539e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053a2:	f7fb f929 	bl	80005f8 <__aeabi_dmul>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	a34a      	add	r3, pc, #296	; (adr r3, 80054d8 <kinematicInverse+0x3c8>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f7fa ff6a 	bl	800028c <__adddf3>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4610      	mov	r0, r2
 80053be:	4619      	mov	r1, r3
 80053c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80053c4:	f7fb f918 	bl	80005f8 <__aeabi_dmul>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4614      	mov	r4, r2
 80053ce:	461d      	mov	r5, r3
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	4b44      	ldr	r3, [pc, #272]	; (80054e8 <kinematicInverse+0x3d8>)
 80053d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80053da:	f7fb f90d 	bl	80005f8 <__aeabi_dmul>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4610      	mov	r0, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053ea:	f7fb f905 	bl	80005f8 <__aeabi_dmul>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4620      	mov	r0, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	f7fa ff49 	bl	800028c <__adddf3>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4614      	mov	r4, r2
 8005400:	461d      	mov	r5, r3
 8005402:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005406:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800540a:	f7fb f8f5 	bl	80005f8 <__aeabi_dmul>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4690      	mov	r8, r2
 8005414:	4699      	mov	r9, r3
 8005416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800541a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800541e:	f7fb f8eb 	bl	80005f8 <__aeabi_dmul>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4640      	mov	r0, r8
 8005428:	4649      	mov	r1, r9
 800542a:	f7fa ff2f 	bl	800028c <__adddf3>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4620      	mov	r0, r4
 8005434:	4629      	mov	r1, r5
 8005436:	f7fb fa09 	bl	800084c <__aeabi_ddiv>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 8005442:	ed97 1b06 	vldr	d1, [r7, #24]
 8005446:	ed97 0b08 	vldr	d0, [r7, #32]
 800544a:	f015 f9f7 	bl	801a83c <atan2>
 800544e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8005452:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005456:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800545a:	f7fa ff17 	bl	800028c <__adddf3>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800546c:	f7fa ff0c 	bl	8000288 <__aeabi_dsub>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8005478:	ed97 3b02 	vldr	d3, [r7, #8]
 800547c:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8005480:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005484:	ed97 0b04 	vldr	d0, [r7, #16]
 8005488:	f004 fe06 	bl	800a098 <scaraCheckWorkSpace4>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8005492:	2300      	movs	r3, #0
 8005494:	e014      	b.n	80054c0 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800549c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80054a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80054b0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ba:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 80054be:	2301      	movs	r3, #1
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3780      	adds	r7, #128	; 0x80
 80054c4:	46bd      	mov	sp, r7
 80054c6:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ca:	b002      	add	sp, #8
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	00000000 	.word	0x00000000
 80054d4:	40eec800 	.word	0x40eec800
 80054d8:	00000000 	.word	0x00000000
 80054dc:	4068a000 	.word	0x4068a000
 80054e0:	40d90000 	.word	0x40d90000
 80054e4:	3ff00000 	.word	0x3ff00000
 80054e8:	40640000 	.word	0x40640000
 80054ec:	80000000 	.word	0x80000000
 80054f0:	4060aa6e 	.word	0x4060aa6e
 80054f4:	80000000 	.word	0x80000000
 80054f8:	40402e14 	.word	0x40402e14
 80054fc:	00000000 	.word	0x00000000
 8005500:	40e2f320 	.word	0x40e2f320

08005504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005508:	f005 fee6 	bl	800b2d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800550c:	f000 f812 	bl	8005534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005510:	f7ff fc22 	bl	8004d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8005514:	f7fd f838 	bl	8002588 <MX_DMA_Init>
  MX_UART4_Init();
 8005518:	f005 fde0 	bl	800b0dc <MX_UART4_Init>
  MX_FSMC_Init();
 800551c:	f7ff f884 	bl	8004628 <MX_FSMC_Init>
  MX_TIM7_Init();
 8005520:	f005 fd6a 	bl	800aff8 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005524:	f005 fd1a 	bl	800af5c <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005528:	f7fd f868 	bl	80025fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800552c:	f00c ff82 	bl	8012434 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005530:	e7fe      	b.n	8005530 <main+0x2c>
	...

08005534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b094      	sub	sp, #80	; 0x50
 8005538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800553a:	f107 0320 	add.w	r3, r7, #32
 800553e:	2230      	movs	r2, #48	; 0x30
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f010 fb94 	bl	8015c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005548:	f107 030c 	add.w	r3, r7, #12
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005558:	2300      	movs	r3, #0
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	4b28      	ldr	r3, [pc, #160]	; (8005600 <SystemClock_Config+0xcc>)
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	4a27      	ldr	r2, [pc, #156]	; (8005600 <SystemClock_Config+0xcc>)
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005566:	6413      	str	r3, [r2, #64]	; 0x40
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <SystemClock_Config+0xcc>)
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005574:	2300      	movs	r3, #0
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	4b22      	ldr	r3, [pc, #136]	; (8005604 <SystemClock_Config+0xd0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a21      	ldr	r2, [pc, #132]	; (8005604 <SystemClock_Config+0xd0>)
 800557e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <SystemClock_Config+0xd0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005590:	2301      	movs	r3, #1
 8005592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800559a:	2302      	movs	r3, #2
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800559e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80055a4:	2308      	movs	r3, #8
 80055a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80055a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80055ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80055ae:	2302      	movs	r3, #2
 80055b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80055b2:	2307      	movs	r3, #7
 80055b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055b6:	f107 0320 	add.w	r3, r7, #32
 80055ba:	4618      	mov	r0, r3
 80055bc:	f007 ff04 	bl	800d3c8 <HAL_RCC_OscConfig>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80055c6:	f000 f831 	bl	800562c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055ca:	230f      	movs	r3, #15
 80055cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055ce:	2302      	movs	r3, #2
 80055d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80055d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80055da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80055dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80055e2:	f107 030c 	add.w	r3, r7, #12
 80055e6:	2105      	movs	r1, #5
 80055e8:	4618      	mov	r0, r3
 80055ea:	f008 f95d 	bl	800d8a8 <HAL_RCC_ClockConfig>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80055f4:	f000 f81a 	bl	800562c <Error_Handler>
  }
}
 80055f8:	bf00      	nop
 80055fa:	3750      	adds	r7, #80	; 0x50
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	40007000 	.word	0x40007000

08005608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d101      	bne.n	800561e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800561a:	f005 fe7f 	bl	800b31c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40001000 	.word	0x40001000

0800562c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564c:	3308      	adds	r3, #8
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <ringBuff_PushChar+0x1e>
		return FALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	e02e      	b.n	80056b6 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	78f9      	ldrb	r1, [r7, #3]
 8005664:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3301      	adds	r3, #1
 8005670:	425a      	negs	r2, r3
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800567a:	bf58      	it	pl
 800567c:	4253      	negpl	r3, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005684:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005694:	3304      	adds	r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d105      	bne.n	80056a8 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a2:	3308      	adds	r3, #8
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ae:	3309      	adds	r3, #9
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
			return TRUE;
 80056b4:	2301      	movs	r3, #1
	}
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d2:	3309      	adds	r3, #9
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <ringBuff_PopChar+0x1c>
		return FALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	e032      	b.n	8005744 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e4:	3304      	adds	r3, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	5cd2      	ldrb	r2, [r2, r3]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f6:	3304      	adds	r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4259      	negs	r1, r3
 80056fe:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8005702:	f3c1 030b 	ubfx	r3, r1, #0, #12
 8005706:	bf58      	it	pl
 8005708:	425a      	negpl	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005710:	3304      	adds	r3, #4
 8005712:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005722:	3304      	adds	r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d105      	bne.n	8005736 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005730:	3309      	adds	r3, #9
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573c:	3308      	adds	r3, #8
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005742:	2301      	movs	r3, #1
	}
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800575c:	2300      	movs	r3, #0
 800575e:	82fb      	strh	r3, [r7, #22]
 8005760:	e011      	b.n	8005786 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005762:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4413      	add	r3, r2
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff63 	bl	800563a <ringBuff_PushChar>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 800577a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800577e:	b29b      	uxth	r3, r3
 8005780:	3301      	adds	r3, #1
 8005782:	b29b      	uxth	r3, r3
 8005784:	82fb      	strh	r3, [r7, #22]
 8005786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	dce8      	bgt.n	8005762 <ringBuff_PushArray+0x12>
 8005790:	e000      	b.n	8005794 <ringBuff_PushArray+0x44>
			break;
 8005792:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005794:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e00c      	b.n	80057cc <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4413      	add	r3, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff ff81 	bl	80056c2 <ringBuff_PopChar>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3301      	adds	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	dbee      	blt.n	80057b2 <ringBuff_PopArray+0x12>
 80057d4:	e000      	b.n	80057d8 <ringBuff_PopArray+0x38>
			break;
 80057d6:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80057d8:	697b      	ldr	r3, [r7, #20]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b088      	sub	sp, #32
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f2:	3304      	adds	r3, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 800580a:	6838      	ldr	r0, [r7, #0]
 800580c:	f7fa fce0 	bl	80001d0 <strlen>
 8005810:	4603      	mov	r3, r0
 8005812:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581a:	3308      	adds	r3, #8
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d066      	beq.n	80058f0 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e030      	b.n	800588a <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	781a      	ldrb	r2, [r3, #0]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	440b      	add	r3, r1
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d103      	bne.n	8005844 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3301      	adds	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e00c      	b.n	800585e <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d102      	bne.n	800585a <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e001      	b.n	800585e <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	d101      	bne.n	800586a <ringBuff_DistanceOf+0x88>
	                return distance;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	e048      	b.n	80058fc <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	3301      	adds	r3, #1
 800586e:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	3301      	adds	r3, #1
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	425a      	negs	r2, r3
 800587c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005880:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005884:	bf58      	it	pl
 8005886:	4253      	negpl	r3, r2
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005890:	dbca      	blt.n	8005828 <ringBuff_DistanceOf+0x46>
 8005892:	e031      	b.n	80058f8 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	440b      	add	r3, r1
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d103      	bne.n	80058b0 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3301      	adds	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e00c      	b.n	80058ca <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d102      	bne.n	80058c6 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 80058c0:	2301      	movs	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e001      	b.n	80058ca <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d101      	bne.n	80058d6 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	e012      	b.n	80058fc <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3301      	adds	r3, #1
 80058da:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	425a      	negs	r2, r3
 80058e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80058ea:	bf58      	it	pl
 80058ec:	4253      	negpl	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d1cd      	bne.n	8005894 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005908:	f000 fdfe 	bl	8006508 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <lowlayer_scanReset+0x4c>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <lowlayer_scanReset+0x4c>)
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005918:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <lowlayer_scanReset+0x4c>)
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <lowlayer_scanReset+0x4c>)
 8005920:	2200      	movs	r2, #0
 8005922:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <lowlayer_scanReset+0x50>)
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 800592a:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <lowlayer_scanReset+0x50>)
 800592c:	2200      	movs	r2, #0
 800592e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <lowlayer_scanReset+0x50>)
 8005932:	2200      	movs	r2, #0
 8005934:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <lowlayer_scanReset+0x54>)
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <lowlayer_scanReset+0x58>)
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005942:	2200      	movs	r2, #0
 8005944:	2108      	movs	r1, #8
 8005946:	4806      	ldr	r0, [pc, #24]	; (8005960 <lowlayer_scanReset+0x5c>)
 8005948:	f006 fb4a 	bl	800bfe0 <HAL_GPIO_WritePin>
}
 800594c:	bf00      	nop
 800594e:	bd80      	pop	{r7, pc}
 8005950:	2000de90 	.word	0x2000de90
 8005954:	2000dea4 	.word	0x2000dea4
 8005958:	2000dea0 	.word	0x2000dea0
 800595c:	2000dec0 	.word	0x2000dec0
 8005960:	40020c00 	.word	0x40020c00
 8005964:	00000000 	.word	0x00000000

08005968 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005972:	f000 fe87 	bl	8006684 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005976:	4b96      	ldr	r3, [pc, #600]	; (8005bd0 <lowlayer_scanFlow+0x268>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d837      	bhi.n	80059ee <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 800597e:	4b94      	ldr	r3, [pc, #592]	; (8005bd0 <lowlayer_scanFlow+0x268>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f1c3 0303 	rsb	r3, r3, #3
 8005986:	4a93      	ldr	r2, [pc, #588]	; (8005bd4 <lowlayer_scanFlow+0x26c>)
 8005988:	5cd3      	ldrb	r3, [r2, r3]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d121      	bne.n	80059d2 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 800598e:	4b90      	ldr	r3, [pc, #576]	; (8005bd0 <lowlayer_scanFlow+0x268>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f1c3 0203 	rsb	r2, r3, #3
 8005996:	4b8e      	ldr	r3, [pc, #568]	; (8005bd0 <lowlayer_scanFlow+0x268>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	f1c3 0303 	rsb	r3, r3, #3
 800599e:	498e      	ldr	r1, [pc, #568]	; (8005bd8 <lowlayer_scanFlow+0x270>)
 80059a0:	568a      	ldrsb	r2, [r1, r2]
 80059a2:	f107 0108 	add.w	r1, r7, #8
 80059a6:	440b      	add	r3, r1
 80059a8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 80059ac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	425b      	negs	r3, r3
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	b258      	sxtb	r0, r3
 80059b8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80059bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	425b      	negs	r3, r3
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	b25a      	sxtb	r2, r3
 80059c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059cc:	f000 fcd8 	bl	8006380 <lowlayer_writePulse>
 80059d0:	e00b      	b.n	80059ea <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 80059d2:	4b7f      	ldr	r3, [pc, #508]	; (8005bd0 <lowlayer_scanFlow+0x268>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	4b7d      	ldr	r3, [pc, #500]	; (8005bd0 <lowlayer_scanFlow+0x268>)
 80059dc:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 80059de:	2300      	movs	r3, #0
 80059e0:	2200      	movs	r2, #0
 80059e2:	2100      	movs	r1, #0
 80059e4:	2000      	movs	r0, #0
 80059e6:	f000 fccb 	bl	8006380 <lowlayer_writePulse>
		}

		return FALSE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e0d2      	b.n	8005b94 <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 80059ee:	2201      	movs	r2, #1
 80059f0:	2108      	movs	r1, #8
 80059f2:	487a      	ldr	r0, [pc, #488]	; (8005bdc <lowlayer_scanFlow+0x274>)
 80059f4:	f006 faf4 	bl	800bfe0 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 80059f8:	f000 fe28 	bl	800664c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 80059fc:	2300      	movs	r3, #0
 80059fe:	2200      	movs	r2, #0
 8005a00:	2100      	movs	r1, #0
 8005a02:	2000      	movs	r0, #0
 8005a04:	f000 fcbc 	bl	8006380 <lowlayer_writePulse>
		scan_flag = 1;
 8005a08:	4b75      	ldr	r3, [pc, #468]	; (8005be0 <lowlayer_scanFlow+0x278>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8005a0e:	4b75      	ldr	r3, [pc, #468]	; (8005be4 <lowlayer_scanFlow+0x27c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a75      	ldr	r2, [pc, #468]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005a14:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8005a16:	4b73      	ldr	r3, [pc, #460]	; (8005be4 <lowlayer_scanFlow+0x27c>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4a73      	ldr	r2, [pc, #460]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005a1c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8005a1e:	4b71      	ldr	r3, [pc, #452]	; (8005be4 <lowlayer_scanFlow+0x27c>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4a71      	ldr	r2, [pc, #452]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005a24:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8005a26:	4b71      	ldr	r3, [pc, #452]	; (8005bec <lowlayer_scanFlow+0x284>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4a71      	ldr	r2, [pc, #452]	; (8005bf0 <lowlayer_scanFlow+0x288>)
 8005a2c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8005a2e:	4b6e      	ldr	r3, [pc, #440]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	4619      	mov	r1, r3
 8005a36:	486f      	ldr	r0, [pc, #444]	; (8005bf4 <lowlayer_scanFlow+0x28c>)
 8005a38:	f7fc fcee 	bl	8002418 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8005a3c:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	486c      	ldr	r0, [pc, #432]	; (8005bf8 <lowlayer_scanFlow+0x290>)
 8005a46:	f7fc fce7 	bl	8002418 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8005a4a:	4b67      	ldr	r3, [pc, #412]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	486a      	ldr	r0, [pc, #424]	; (8005bfc <lowlayer_scanFlow+0x294>)
 8005a54:	f7fc fce0 	bl	8002418 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8005a58:	4b65      	ldr	r3, [pc, #404]	; (8005bf0 <lowlayer_scanFlow+0x288>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4867      	ldr	r0, [pc, #412]	; (8005c00 <lowlayer_scanFlow+0x298>)
 8005a62:	f7fc fcd9 	bl	8002418 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005a66:	4b60      	ldr	r3, [pc, #384]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a72:	ee17 0a90 	vmov	r0, s15
 8005a76:	f7fa fd67 	bl	8000548 <__aeabi_f2d>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	f7fa fc05 	bl	800028c <__adddf3>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	a345      	add	r3, pc, #276	; (adr r3, 8005ba0 <lowlayer_scanFlow+0x238>)
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f7fa fdb2 	bl	80005f8 <__aeabi_dmul>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	a342      	add	r3, pc, #264	; (adr r3, 8005ba8 <lowlayer_scanFlow+0x240>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f7fa fed3 	bl	800084c <__aeabi_ddiv>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	a141      	add	r1, pc, #260	; (adr r1, 8005bb0 <lowlayer_scanFlow+0x248>)
 8005aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ab0:	f7fa fbea 	bl	8000288 <__aeabi_dsub>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8005ab8:	4952      	ldr	r1, [pc, #328]	; (8005c04 <lowlayer_scanFlow+0x29c>)
 8005aba:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8005abe:	4b4a      	ldr	r3, [pc, #296]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aca:	ee17 0a90 	vmov	r0, s15
 8005ace:	f7fa fd3b 	bl	8000548 <__aeabi_f2d>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	f7fa fbd9 	bl	800028c <__adddf3>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	a32f      	add	r3, pc, #188	; (adr r3, 8005ba0 <lowlayer_scanFlow+0x238>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f7fa fd86 	bl	80005f8 <__aeabi_dmul>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4610      	mov	r0, r2
 8005af2:	4619      	mov	r1, r3
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <lowlayer_scanFlow+0x2a0>)
 8005afa:	f7fa fea7 	bl	800084c <__aeabi_ddiv>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	a12d      	add	r1, pc, #180	; (adr r1, 8005bb8 <lowlayer_scanFlow+0x250>)
 8005b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b08:	f7fa fbbe 	bl	8000288 <__aeabi_dsub>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8005b10:	493c      	ldr	r1, [pc, #240]	; (8005c04 <lowlayer_scanFlow+0x29c>)
 8005b12:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8005b16:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <lowlayer_scanFlow+0x280>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b22:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005c0c <lowlayer_scanFlow+0x2a4>
 8005b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b2a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005c10 <lowlayer_scanFlow+0x2a8>
 8005b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b32:	ee17 0a90 	vmov	r0, s15
 8005b36:	f7fa fd07 	bl	8000548 <__aeabi_f2d>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8005b3e:	4931      	ldr	r1, [pc, #196]	; (8005c04 <lowlayer_scanFlow+0x29c>)
 8005b40:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8005b44:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <lowlayer_scanFlow+0x288>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fa fceb 	bl	8000524 <__aeabi_i2d>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	f7fa fb9b 	bl	800028c <__adddf3>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	a310      	add	r3, pc, #64	; (adr r3, 8005ba0 <lowlayer_scanFlow+0x238>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f7fa fd48 	bl	80005f8 <__aeabi_dmul>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	a313      	add	r3, pc, #76	; (adr r3, 8005bc0 <lowlayer_scanFlow+0x258>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa fe69 	bl	800084c <__aeabi_ddiv>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	a112      	add	r1, pc, #72	; (adr r1, 8005bc8 <lowlayer_scanFlow+0x260>)
 8005b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b84:	f7fa fb80 	bl	8000288 <__aeabi_dsub>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8005b8c:	491d      	ldr	r1, [pc, #116]	; (8005c04 <lowlayer_scanFlow+0x29c>)
 8005b8e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 8005b92:	2301      	movs	r3, #1
	}
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	60000000 	.word	0x60000000
 8005ba4:	400921fb 	.word	0x400921fb
 8005ba8:	00000000 	.word	0x00000000
 8005bac:	40f38800 	.word	0x40f38800
 8005bb0:	40000000 	.word	0x40000000
 8005bb4:	bff9f17a 	.word	0xbff9f17a
 8005bb8:	80000000 	.word	0x80000000
 8005bbc:	40039716 	.word	0x40039716
 8005bc0:	a0000000 	.word	0xa0000000
 8005bc4:	40d3bca1 	.word	0x40d3bca1
 8005bc8:	a0000000 	.word	0xa0000000
 8005bcc:	4008330d 	.word	0x4008330d
 8005bd0:	2000dec0 	.word	0x2000dec0
 8005bd4:	2000deb0 	.word	0x2000deb0
 8005bd8:	0801c194 	.word	0x0801c194
 8005bdc:	40020c00 	.word	0x40020c00
 8005be0:	2000dea0 	.word	0x2000dea0
 8005be4:	2000deb4 	.word	0x2000deb4
 8005be8:	2000dee8 	.word	0x2000dee8
 8005bec:	2000de90 	.word	0x2000de90
 8005bf0:	2000dec4 	.word	0x2000dec4
 8005bf4:	0801c0bc 	.word	0x0801c0bc
 8005bf8:	0801c0d0 	.word	0x0801c0d0
 8005bfc:	0801c0e4 	.word	0x0801c0e4
 8005c00:	0801c0f8 	.word	0x0801c0f8
 8005c04:	2000dec8 	.word	0x2000dec8
 8005c08:	40ff4000 	.word	0x40ff4000
 8005c0c:	4426aaab 	.word	0x4426aaab
 8005c10:	400f1aa0 	.word	0x400f1aa0
 8005c14:	00000000 	.word	0x00000000

08005c18 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005c20:	2300      	movs	r3, #0
 8005c22:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f94d 	bl	8005ec8 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005c34:	a330      	add	r3, pc, #192	; (adr r3, 8005cf8 <lowlayer_goToSoftLimit+0xe0>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa ff4f 	bl	8000adc <__aeabi_dcmplt>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8005c44:	2303      	movs	r3, #3
 8005c46:	723b      	strb	r3, [r7, #8]
		check++;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8005c54:	a32a      	add	r3, pc, #168	; (adr r3, 8005d00 <lowlayer_goToSoftLimit+0xe8>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f7fa ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8005c64:	2305      	movs	r3, #5
 8005c66:	727b      	strb	r3, [r7, #9]
		check++;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	f7fa ff2e 	bl	8000adc <__aeabi_dcmplt>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8005c86:	2305      	movs	r3, #5
 8005c88:	72bb      	strb	r3, [r7, #10]
		check++;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8005c96:	a31c      	add	r3, pc, #112	; (adr r3, 8005d08 <lowlayer_goToSoftLimit+0xf0>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8005ca6:	230a      	movs	r3, #10
 8005ca8:	72fb      	strb	r3, [r7, #11]
		check++;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	3301      	adds	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d013      	beq.n	8005cde <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8005cb6:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8005cba:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	425b      	negs	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	b259      	sxtb	r1, r3
 8005cc6:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8005cca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	b25b      	sxtb	r3, r3
 8005cd6:	f000 fb53 	bl	8006380 <lowlayer_writePulse>
		return FALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e006      	b.n	8005cec <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f000 fb4b 	bl	8006380 <lowlayer_writePulse>
		return TRUE;
 8005cea:	2301      	movs	r3, #1
	}
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	f3af 8000 	nop.w
 8005cf8:	daaaaaab 	.word	0xdaaaaaab
 8005cfc:	bff7bc89 	.word	0xbff7bc89
 8005d00:	88000000 	.word	0x88000000
 8005d04:	4002d97c 	.word	0x4002d97c
 8005d08:	daaaaaab 	.word	0xdaaaaaab
 8005d0c:	4007bc89 	.word	0x4007bc89

08005d10 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8005d18:	f000 fc7c 	bl	8006614 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8005d1c:	4b62      	ldr	r3, [pc, #392]	; (8005ea8 <lowlayer_readTruePosition+0x198>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4b62      	ldr	r3, [pc, #392]	; (8005eac <lowlayer_readTruePosition+0x19c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d2e:	ee17 0a90 	vmov	r0, s15
 8005d32:	f7fa fc09 	bl	8000548 <__aeabi_f2d>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	f7fa faa7 	bl	800028c <__adddf3>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	a34c      	add	r3, pc, #304	; (adr r3, 8005e78 <lowlayer_readTruePosition+0x168>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fc54 	bl	80005f8 <__aeabi_dmul>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	a349      	add	r3, pc, #292	; (adr r3, 8005e80 <lowlayer_readTruePosition+0x170>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fd75 	bl	800084c <__aeabi_ddiv>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	a347      	add	r3, pc, #284	; (adr r3, 8005e88 <lowlayer_readTruePosition+0x178>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f7fa fa8a 	bl	8000288 <__aeabi_dsub>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8005d7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ea8 <lowlayer_readTruePosition+0x198>)
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	4b4a      	ldr	r3, [pc, #296]	; (8005eac <lowlayer_readTruePosition+0x19c>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d90:	ee17 0a90 	vmov	r0, s15
 8005d94:	f7fa fbd8 	bl	8000548 <__aeabi_f2d>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	f7fa fa76 	bl	800028c <__adddf3>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	a333      	add	r3, pc, #204	; (adr r3, 8005e78 <lowlayer_readTruePosition+0x168>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fc23 	bl	80005f8 <__aeabi_dmul>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4610      	mov	r0, r2
 8005db8:	4619      	mov	r1, r3
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	4b3c      	ldr	r3, [pc, #240]	; (8005eb0 <lowlayer_readTruePosition+0x1a0>)
 8005dc0:	f7fa fd44 	bl	800084c <__aeabi_ddiv>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4619      	mov	r1, r3
 8005dcc:	a330      	add	r3, pc, #192	; (adr r3, 8005e90 <lowlayer_readTruePosition+0x180>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fa5b 	bl	800028c <__adddf3>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005de0:	4b31      	ldr	r3, [pc, #196]	; (8005ea8 <lowlayer_readTruePosition+0x198>)
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	4b31      	ldr	r3, [pc, #196]	; (8005eac <lowlayer_readTruePosition+0x19c>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df2:	eeb1 7a67 	vneg.f32	s14, s15
 8005df6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005eb4 <lowlayer_readTruePosition+0x1a4>
 8005dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dfe:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005eb8 <lowlayer_readTruePosition+0x1a8>
 8005e02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e06:	ee17 0a90 	vmov	r0, s15
 8005e0a:	f7fa fb9d 	bl	8000548 <__aeabi_f2d>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005e18:	4b28      	ldr	r3, [pc, #160]	; (8005ebc <lowlayer_readTruePosition+0x1ac>)
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	4b28      	ldr	r3, [pc, #160]	; (8005ec0 <lowlayer_readTruePosition+0x1b0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fb7e 	bl	8000524 <__aeabi_i2d>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	f7fa fa2e 	bl	800028c <__adddf3>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	a30f      	add	r3, pc, #60	; (adr r3, 8005e78 <lowlayer_readTruePosition+0x168>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fbdb 	bl	80005f8 <__aeabi_dmul>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	a313      	add	r3, pc, #76	; (adr r3, 8005e98 <lowlayer_readTruePosition+0x188>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa fcfc 	bl	800084c <__aeabi_ddiv>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	a310      	add	r3, pc, #64	; (adr r3, 8005ea0 <lowlayer_readTruePosition+0x190>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa fa13 	bl	800028c <__adddf3>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	60000000 	.word	0x60000000
 8005e7c:	400921fb 	.word	0x400921fb
 8005e80:	00000000 	.word	0x00000000
 8005e84:	40f38800 	.word	0x40f38800
 8005e88:	40000000 	.word	0x40000000
 8005e8c:	3ff9f17a 	.word	0x3ff9f17a
 8005e90:	80000000 	.word	0x80000000
 8005e94:	40039716 	.word	0x40039716
 8005e98:	a0000000 	.word	0xa0000000
 8005e9c:	40d3bca1 	.word	0x40d3bca1
 8005ea0:	a0000000 	.word	0xa0000000
 8005ea4:	4008330d 	.word	0x4008330d
 8005ea8:	2000dea4 	.word	0x2000dea4
 8005eac:	2000dee8 	.word	0x2000dee8
 8005eb0:	40ff4000 	.word	0x40ff4000
 8005eb4:	4426aaab 	.word	0x4426aaab
 8005eb8:	400f1aa0 	.word	0x400f1aa0
 8005ebc:	2000de90 	.word	0x2000de90
 8005ec0:	2000dec4 	.word	0x2000dec4
 8005ec4:	00000000 	.word	0x00000000

08005ec8 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005ec8:	b5b0      	push	{r4, r5, r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005ed0:	4b53      	ldr	r3, [pc, #332]	; (8006020 <lowlayer_readSetPosition+0x158>)
 8005ed2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ed6:	4b53      	ldr	r3, [pc, #332]	; (8006024 <lowlayer_readSetPosition+0x15c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fa fb22 	bl	8000524 <__aeabi_i2d>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	f7fa f9d2 	bl	800028c <__adddf3>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	a345      	add	r3, pc, #276	; (adr r3, 8006008 <lowlayer_readSetPosition+0x140>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa fb7f 	bl	80005f8 <__aeabi_dmul>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	a343      	add	r3, pc, #268	; (adr r3, 8006010 <lowlayer_readSetPosition+0x148>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa fca0 	bl	800084c <__aeabi_ddiv>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa f9ba 	bl	800028c <__adddf3>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8005f22:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <lowlayer_readSetPosition+0x158>)
 8005f24:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005f28:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <lowlayer_readSetPosition+0x15c>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa faf9 	bl	8000524 <__aeabi_i2d>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	f7fa f9a9 	bl	800028c <__adddf3>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	a331      	add	r3, pc, #196	; (adr r3, 8006008 <lowlayer_readSetPosition+0x140>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa fb56 	bl	80005f8 <__aeabi_dmul>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4610      	mov	r0, r2
 8005f52:	4619      	mov	r1, r3
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	4b33      	ldr	r3, [pc, #204]	; (8006028 <lowlayer_readSetPosition+0x160>)
 8005f5a:	f7fa fc77 	bl	800084c <__aeabi_ddiv>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4620      	mov	r0, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7fa f991 	bl	800028c <__adddf3>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <lowlayer_readSetPosition+0x158>)
 8005f76:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005f7a:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <lowlayer_readSetPosition+0x15c>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f86:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800602c <lowlayer_readSetPosition+0x164>
 8005f8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f8e:	ee16 0a90 	vmov	r0, s13
 8005f92:	f7fa fad9 	bl	8000548 <__aeabi_f2d>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f7fa f975 	bl	800028c <__adddf3>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <lowlayer_readSetPosition+0x158>)
 8005fae:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005fb2:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <lowlayer_readSetPosition+0x15c>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fa fab4 	bl	8000524 <__aeabi_i2d>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	f7fa f964 	bl	800028c <__adddf3>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	a30e      	add	r3, pc, #56	; (adr r3, 8006008 <lowlayer_readSetPosition+0x140>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa fb11 	bl	80005f8 <__aeabi_dmul>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	a30e      	add	r3, pc, #56	; (adr r3, 8006018 <lowlayer_readSetPosition+0x150>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa fc32 	bl	800084c <__aeabi_ddiv>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa f94c 	bl	800028c <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bdb0      	pop	{r4, r5, r7, pc}
 8006006:	bf00      	nop
 8006008:	60000000 	.word	0x60000000
 800600c:	400921fb 	.word	0x400921fb
 8006010:	00000000 	.word	0x00000000
 8006014:	40d38800 	.word	0x40d38800
 8006018:	a0000000 	.word	0xa0000000
 800601c:	40d3bca1 	.word	0x40d3bca1
 8006020:	2000dec8 	.word	0x2000dec8
 8006024:	2000de90 	.word	0x2000de90
 8006028:	40df4000 	.word	0x40df4000
 800602c:	42c80000 	.word	0x42c80000

08006030 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8006030:	b084      	sub	sp, #16
 8006032:	b580      	push	{r7, lr}
 8006034:	b092      	sub	sp, #72	; 0x48
 8006036:	af00      	add	r7, sp, #0
 8006038:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 800603c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006040:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006044:	a3c6      	add	r3, pc, #792	; (adr r3, 8006360 <lowlayer_computeAndWritePulse+0x330>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f91f 	bl	800028c <__adddf3>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	a3c4      	add	r3, pc, #784	; (adr r3, 8006368 <lowlayer_computeAndWritePulse+0x338>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa facc 	bl	80005f8 <__aeabi_dmul>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	a3b7      	add	r3, pc, #732	; (adr r3, 8006348 <lowlayer_computeAndWritePulse+0x318>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa fbed 	bl	800084c <__aeabi_ddiv>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	ec43 2b17 	vmov	d7, r2, r3
 800607a:	eeb0 0a47 	vmov.f32	s0, s14
 800607e:	eef0 0a67 	vmov.f32	s1, s15
 8006082:	f014 fafd 	bl	801a680 <round>
 8006086:	ec53 2b10 	vmov	r2, r3, d0
 800608a:	4610      	mov	r0, r2
 800608c:	4619      	mov	r1, r3
 800608e:	f7fa fd8b 	bl	8000ba8 <__aeabi_d2uiz>
 8006092:	4603      	mov	r3, r0
 8006094:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8006096:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800609a:	a3b5      	add	r3, pc, #724	; (adr r3, 8006370 <lowlayer_computeAndWritePulse+0x340>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f8f4 	bl	800028c <__adddf3>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	4bb1      	ldr	r3, [pc, #708]	; (8006378 <lowlayer_computeAndWritePulse+0x348>)
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	a3a2      	add	r3, pc, #648	; (adr r3, 8006348 <lowlayer_computeAndWritePulse+0x318>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa fbc2 	bl	800084c <__aeabi_ddiv>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	ec43 2b17 	vmov	d7, r2, r3
 80060d0:	eeb0 0a47 	vmov.f32	s0, s14
 80060d4:	eef0 0a67 	vmov.f32	s1, s15
 80060d8:	f014 fad2 	bl	801a680 <round>
 80060dc:	ec53 2b10 	vmov	r2, r3, d0
 80060e0:	4610      	mov	r0, r2
 80060e2:	4619      	mov	r1, r3
 80060e4:	f7fa fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80060e8:	4603      	mov	r3, r0
 80060ea:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 80060ec:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	4ba1      	ldr	r3, [pc, #644]	; (800637c <lowlayer_computeAndWritePulse+0x34c>)
 80060f6:	f7fa fa7f 	bl	80005f8 <__aeabi_dmul>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	ec43 2b17 	vmov	d7, r2, r3
 8006102:	eeb0 0a47 	vmov.f32	s0, s14
 8006106:	eef0 0a67 	vmov.f32	s1, s15
 800610a:	f014 fab9 	bl	801a680 <round>
 800610e:	ec53 2b10 	vmov	r2, r3, d0
 8006112:	4610      	mov	r0, r2
 8006114:	4619      	mov	r1, r3
 8006116:	f7fa fd47 	bl	8000ba8 <__aeabi_d2uiz>
 800611a:	4603      	mov	r3, r0
 800611c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800611e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006122:	a38b      	add	r3, pc, #556	; (adr r3, 8006350 <lowlayer_computeAndWritePulse+0x320>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa f8b0 	bl	800028c <__adddf3>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4610      	mov	r0, r2
 8006132:	4619      	mov	r1, r3
 8006134:	a388      	add	r3, pc, #544	; (adr r3, 8006358 <lowlayer_computeAndWritePulse+0x328>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	a380      	add	r3, pc, #512	; (adr r3, 8006348 <lowlayer_computeAndWritePulse+0x318>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa fb7e 	bl	800084c <__aeabi_ddiv>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	ec43 2b17 	vmov	d7, r2, r3
 8006158:	eeb0 0a47 	vmov.f32	s0, s14
 800615c:	eef0 0a67 	vmov.f32	s1, s15
 8006160:	f014 fa8e 	bl	801a680 <round>
 8006164:	ec53 2b10 	vmov	r2, r3, d0
 8006168:	4610      	mov	r0, r2
 800616a:	4619      	mov	r1, r3
 800616c:	f7fa fd1c 	bl	8000ba8 <__aeabi_d2uiz>
 8006170:	4603      	mov	r3, r0
 8006172:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006174:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006178:	a379      	add	r3, pc, #484	; (adr r3, 8006360 <lowlayer_computeAndWritePulse+0x330>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa f885 	bl	800028c <__adddf3>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4610      	mov	r0, r2
 8006188:	4619      	mov	r1, r3
 800618a:	a377      	add	r3, pc, #476	; (adr r3, 8006368 <lowlayer_computeAndWritePulse+0x338>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa fa32 	bl	80005f8 <__aeabi_dmul>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	a36a      	add	r3, pc, #424	; (adr r3, 8006348 <lowlayer_computeAndWritePulse+0x318>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa fb53 	bl	800084c <__aeabi_ddiv>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	ec43 2b17 	vmov	d7, r2, r3
 80061ae:	eeb0 0a47 	vmov.f32	s0, s14
 80061b2:	eef0 0a67 	vmov.f32	s1, s15
 80061b6:	f014 fa63 	bl	801a680 <round>
 80061ba:	ec53 2b10 	vmov	r2, r3, d0
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	f7fa fcf1 	bl	8000ba8 <__aeabi_d2uiz>
 80061c6:	4603      	mov	r3, r0
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80061ca:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80061ce:	a368      	add	r3, pc, #416	; (adr r3, 8006370 <lowlayer_computeAndWritePulse+0x340>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f7fa f85a 	bl	800028c <__adddf3>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	4b64      	ldr	r3, [pc, #400]	; (8006378 <lowlayer_computeAndWritePulse+0x348>)
 80061e6:	f7fa fa07 	bl	80005f8 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	a355      	add	r3, pc, #340	; (adr r3, 8006348 <lowlayer_computeAndWritePulse+0x318>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa fb28 	bl	800084c <__aeabi_ddiv>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	ec43 2b17 	vmov	d7, r2, r3
 8006204:	eeb0 0a47 	vmov.f32	s0, s14
 8006208:	eef0 0a67 	vmov.f32	s1, s15
 800620c:	f014 fa38 	bl	801a680 <round>
 8006210:	ec53 2b10 	vmov	r2, r3, d0
 8006214:	4610      	mov	r0, r2
 8006216:	4619      	mov	r1, r3
 8006218:	f7fa fcc6 	bl	8000ba8 <__aeabi_d2uiz>
 800621c:	4603      	mov	r3, r0
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8006220:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	4b54      	ldr	r3, [pc, #336]	; (800637c <lowlayer_computeAndWritePulse+0x34c>)
 800622a:	f7fa f9e5 	bl	80005f8 <__aeabi_dmul>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	ec43 2b17 	vmov	d7, r2, r3
 8006236:	eeb0 0a47 	vmov.f32	s0, s14
 800623a:	eef0 0a67 	vmov.f32	s1, s15
 800623e:	f014 fa1f 	bl	801a680 <round>
 8006242:	ec53 2b10 	vmov	r2, r3, d0
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	f7fa fcad 	bl	8000ba8 <__aeabi_d2uiz>
 800624e:	4603      	mov	r3, r0
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8006252:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006256:	a33e      	add	r3, pc, #248	; (adr r3, 8006350 <lowlayer_computeAndWritePulse+0x320>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f816 	bl	800028c <__adddf3>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4610      	mov	r0, r2
 8006266:	4619      	mov	r1, r3
 8006268:	a33b      	add	r3, pc, #236	; (adr r3, 8006358 <lowlayer_computeAndWritePulse+0x328>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f9c3 	bl	80005f8 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4610      	mov	r0, r2
 8006278:	4619      	mov	r1, r3
 800627a:	a333      	add	r3, pc, #204	; (adr r3, 8006348 <lowlayer_computeAndWritePulse+0x318>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7fa fae4 	bl	800084c <__aeabi_ddiv>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	ec43 2b17 	vmov	d7, r2, r3
 800628c:	eeb0 0a47 	vmov.f32	s0, s14
 8006290:	eef0 0a67 	vmov.f32	s1, s15
 8006294:	f014 f9f4 	bl	801a680 <round>
 8006298:	ec53 2b10 	vmov	r2, r3, d0
 800629c:	4610      	mov	r0, r2
 800629e:	4619      	mov	r1, r3
 80062a0:	f7fa fc82 	bl	8000ba8 <__aeabi_d2uiz>
 80062a4:	4603      	mov	r3, r0
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 80062a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 80062b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 80062c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80062d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfb8      	it	lt
 80062ee:	425b      	neglt	r3, r3
 80062f0:	2b7f      	cmp	r3, #127	; 0x7f
 80062f2:	dc11      	bgt.n	8006318 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bfb8      	it	lt
 80062fa:	425b      	neglt	r3, r3
 80062fc:	2b7f      	cmp	r3, #127	; 0x7f
 80062fe:	dc0b      	bgt.n	8006318 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfb8      	it	lt
 8006306:	425b      	neglt	r3, r3
 8006308:	2b7f      	cmp	r3, #127	; 0x7f
 800630a:	dc05      	bgt.n	8006318 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfb8      	it	lt
 8006312:	425b      	neglt	r3, r3
 8006314:	2b7f      	cmp	r3, #127	; 0x7f
 8006316:	dd01      	ble.n	800631c <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	e00c      	b.n	8006336 <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800631c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8006320:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8006324:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006328:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800632c:	f000 f828 	bl	8006380 <lowlayer_writePulse>
 8006330:	4603      	mov	r3, r0
 8006332:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8006334:	79fb      	ldrb	r3, [r7, #7]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3748      	adds	r7, #72	; 0x48
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006340:	b004      	add	sp, #16
 8006342:	4770      	bx	lr
 8006344:	f3af 8000 	nop.w
 8006348:	60000000 	.word	0x60000000
 800634c:	401921fb 	.word	0x401921fb
 8006350:	daaaaaab 	.word	0xdaaaaaab
 8006354:	4007bc89 	.word	0x4007bc89
 8006358:	a0000000 	.word	0xa0000000
 800635c:	40d3bca1 	.word	0x40d3bca1
 8006360:	daaaaaab 	.word	0xdaaaaaab
 8006364:	3ff7bc89 	.word	0x3ff7bc89
 8006368:	00000000 	.word	0x00000000
 800636c:	40d38800 	.word	0x40d38800
 8006370:	88000000 	.word	0x88000000
 8006374:	4002d97c 	.word	0x4002d97c
 8006378:	40df4000 	.word	0x40df4000
 800637c:	40590000 	.word	0x40590000

08006380 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4623      	mov	r3, r4
 8006390:	71fb      	strb	r3, [r7, #7]
 8006392:	4603      	mov	r3, r0
 8006394:	71bb      	strb	r3, [r7, #6]
 8006396:	460b      	mov	r3, r1
 8006398:	717b      	strb	r3, [r7, #5]
 800639a:	4613      	mov	r3, r2
 800639c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800639e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da06      	bge.n	80063b4 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	425b      	negs	r3, r3
 80063aa:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	425b      	negs	r3, r3
 80063b0:	75fb      	strb	r3, [r7, #23]
 80063b2:	e006      	b.n	80063c2 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 80063c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da06      	bge.n	80063d8 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 80063ca:	79bb      	ldrb	r3, [r7, #6]
 80063cc:	425b      	negs	r3, r3
 80063ce:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 80063d0:	79bb      	ldrb	r3, [r7, #6]
 80063d2:	425b      	negs	r3, r3
 80063d4:	75bb      	strb	r3, [r7, #22]
 80063d6:	e006      	b.n	80063e6 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80063d8:	79bb      	ldrb	r3, [r7, #6]
 80063da:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80063dc:	79bb      	ldrb	r3, [r7, #6]
 80063de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063e2:	b25b      	sxtb	r3, r3
 80063e4:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 80063e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da0b      	bge.n	8006406 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 80063ee:	797b      	ldrb	r3, [r7, #5]
 80063f0:	425b      	negs	r3, r3
 80063f2:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 80063f4:	797b      	ldrb	r3, [r7, #5]
 80063f6:	425b      	negs	r3, r3
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006400:	b25b      	sxtb	r3, r3
 8006402:	757b      	strb	r3, [r7, #21]
 8006404:	e003      	b.n	800640e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8006406:	797b      	ldrb	r3, [r7, #5]
 8006408:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800640a:	797b      	ldrb	r3, [r7, #5]
 800640c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800640e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	da06      	bge.n	8006424 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8006416:	793b      	ldrb	r3, [r7, #4]
 8006418:	425b      	negs	r3, r3
 800641a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800641c:	793b      	ldrb	r3, [r7, #4]
 800641e:	425b      	negs	r3, r3
 8006420:	753b      	strb	r3, [r7, #20]
 8006422:	e006      	b.n	8006432 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8006424:	793b      	ldrb	r3, [r7, #4]
 8006426:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8006428:	793b      	ldrb	r3, [r7, #4]
 800642a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800642e:	b25b      	sxtb	r3, r3
 8006430:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b4b      	cmp	r3, #75	; 0x4b
 8006436:	d808      	bhi.n	800644a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8006438:	7cbb      	ldrb	r3, [r7, #18]
 800643a:	2b78      	cmp	r3, #120	; 0x78
 800643c:	d805      	bhi.n	800644a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 800643e:	7c7b      	ldrb	r3, [r7, #17]
 8006440:	2b7d      	cmp	r3, #125	; 0x7d
 8006442:	d802      	bhi.n	800644a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8006444:	7c3b      	ldrb	r3, [r7, #16]
 8006446:	2b65      	cmp	r3, #101	; 0x65
 8006448:	d901      	bls.n	800644e <lowlayer_writePulse+0xce>
		return FALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	e04b      	b.n	80064e6 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800644e:	2200      	movs	r2, #0
 8006450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006454:	4826      	ldr	r0, [pc, #152]	; (80064f0 <lowlayer_writePulse+0x170>)
 8006456:	f005 fdc3 	bl	800bfe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 800645a:	2200      	movs	r2, #0
 800645c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006460:	4824      	ldr	r0, [pc, #144]	; (80064f4 <lowlayer_writePulse+0x174>)
 8006462:	f005 fdbd 	bl	800bfe0 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	4619      	mov	r1, r3
 800646a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800646e:	f7fe f8bf 	bl	80045f0 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8006472:	7dbb      	ldrb	r3, [r7, #22]
 8006474:	4619      	mov	r1, r3
 8006476:	4820      	ldr	r0, [pc, #128]	; (80064f8 <lowlayer_writePulse+0x178>)
 8006478:	f7fe f8ba 	bl	80045f0 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 800647c:	7d7b      	ldrb	r3, [r7, #21]
 800647e:	4619      	mov	r1, r3
 8006480:	481e      	ldr	r0, [pc, #120]	; (80064fc <lowlayer_writePulse+0x17c>)
 8006482:	f7fe f8b5 	bl	80045f0 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006486:	7d3b      	ldrb	r3, [r7, #20]
 8006488:	4619      	mov	r1, r3
 800648a:	481d      	ldr	r0, [pc, #116]	; (8006500 <lowlayer_writePulse+0x180>)
 800648c:	f7fe f8b0 	bl	80045f0 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006490:	2364      	movs	r3, #100	; 0x64
 8006492:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006494:	bf00      	nop
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	1e5a      	subs	r2, r3, #1
 800649a:	73fa      	strb	r2, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1fa      	bne.n	8006496 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 80064a0:	2201      	movs	r2, #1
 80064a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064a6:	4813      	ldr	r0, [pc, #76]	; (80064f4 <lowlayer_writePulse+0x174>)
 80064a8:	f005 fd9a 	bl	800bfe0 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 80064ac:	4b15      	ldr	r3, [pc, #84]	; (8006504 <lowlayer_writePulse+0x184>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b4:	4413      	add	r3, r2
 80064b6:	4a13      	ldr	r2, [pc, #76]	; (8006504 <lowlayer_writePulse+0x184>)
 80064b8:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <lowlayer_writePulse+0x184>)
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80064c2:	4413      	add	r3, r2
 80064c4:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <lowlayer_writePulse+0x184>)
 80064c6:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 80064c8:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <lowlayer_writePulse+0x184>)
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80064d0:	4413      	add	r3, r2
 80064d2:	4a0c      	ldr	r2, [pc, #48]	; (8006504 <lowlayer_writePulse+0x184>)
 80064d4:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <lowlayer_writePulse+0x184>)
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <lowlayer_writePulse+0x184>)
 80064e2:	60d3      	str	r3, [r2, #12]

	return TRUE;
 80064e4:	2301      	movs	r3, #1
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd90      	pop	{r4, r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40020000 	.word	0x40020000
 80064f4:	40020c00 	.word	0x40020c00
 80064f8:	60000002 	.word	0x60000002
 80064fc:	60000004 	.word	0x60000004
 8006500:	60000006 	.word	0x60000006
 8006504:	2000de90 	.word	0x2000de90

08006508 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800650e:	2364      	movs	r3, #100	; 0x64
 8006510:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006512:	2201      	movs	r2, #1
 8006514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006518:	4809      	ldr	r0, [pc, #36]	; (8006540 <lowlayer_resetEncoder+0x38>)
 800651a:	f005 fd61 	bl	800bfe0 <HAL_GPIO_WritePin>
	while (delay--);
 800651e:	bf00      	nop
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	1e5a      	subs	r2, r3, #1
 8006524:	71fa      	strb	r2, [r7, #7]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1fa      	bne.n	8006520 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800652a:	2200      	movs	r2, #0
 800652c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006530:	4803      	ldr	r0, [pc, #12]	; (8006540 <lowlayer_resetEncoder+0x38>)
 8006532:	f005 fd55 	bl	800bfe0 <HAL_GPIO_WritePin>
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40020c00 	.word	0x40020c00

08006544 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 800654a:	4805      	ldr	r0, [pc, #20]	; (8006560 <lowlayer_readLimitSwitch+0x1c>)
 800654c:	f7fe f85f 	bl	800460e <FSMC_Read>
 8006550:	4603      	mov	r3, r0
 8006552:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	b2db      	uxtb	r3, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	60000020 	.word	0x60000020

08006564 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d81c      	bhi.n	80065ae <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800657a:	3310      	adds	r3, #16
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe f845 	bl	800460e <FSMC_Read>
 8006584:	4603      	mov	r3, r0
 8006586:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800658e:	3310      	adds	r3, #16
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	3302      	adds	r3, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe f83a 	bl	800460e <FSMC_Read>
 800659a:	4603      	mov	r3, r0
 800659c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800659e:	893b      	ldrh	r3, [r7, #8]
 80065a0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	041a      	lsls	r2, r3, #16
 80065a6:	897b      	ldrh	r3, [r7, #10]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e001      	b.n	80065b2 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d81c      	bhi.n	8006606 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80065d2:	3318      	adds	r3, #24
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe f819 	bl	800460e <FSMC_Read>
 80065dc:	4603      	mov	r3, r0
 80065de:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80065e6:	3318      	adds	r3, #24
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	3302      	adds	r3, #2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe f80e 	bl	800460e <FSMC_Read>
 80065f2:	4603      	mov	r3, r0
 80065f4:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80065f6:	893b      	ldrh	r3, [r7, #8]
 80065f8:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	041a      	lsls	r2, r3, #16
 80065fe:	897b      	ldrh	r3, [r7, #10]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e001      	b.n	800660a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006614:	b590      	push	{r4, r7, lr}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800661a:	2300      	movs	r3, #0
 800661c:	71fb      	strb	r3, [r7, #7]
 800661e:	e00b      	b.n	8006638 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006620:	79fc      	ldrb	r4, [r7, #7]
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ff9d 	bl	8006564 <lowlayer_readEncoder>
 800662a:	4603      	mov	r3, r0
 800662c:	4a06      	ldr	r2, [pc, #24]	; (8006648 <lowlayer_updateEncoder+0x34>)
 800662e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	3301      	adds	r3, #1
 8006636:	71fb      	strb	r3, [r7, #7]
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d9f0      	bls.n	8006620 <lowlayer_updateEncoder+0xc>
	}
}
 800663e:	bf00      	nop
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bd90      	pop	{r4, r7, pc}
 8006648:	2000dea4 	.word	0x2000dea4

0800664c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006652:	2300      	movs	r3, #0
 8006654:	71fb      	strb	r3, [r7, #7]
 8006656:	e00b      	b.n	8006670 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8006658:	79fc      	ldrb	r4, [r7, #7]
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff ffad 	bl	80065bc <lowlayer_readCapture>
 8006662:	4603      	mov	r3, r0
 8006664:	4a06      	ldr	r2, [pc, #24]	; (8006680 <lowlayer_updateCapture+0x34>)
 8006666:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	3301      	adds	r3, #1
 800666e:	71fb      	strb	r3, [r7, #7]
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d9f0      	bls.n	8006658 <lowlayer_updateCapture+0xc>
	}
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bd90      	pop	{r4, r7, pc}
 8006680:	2000deb4 	.word	0x2000deb4

08006684 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 800668a:	f7ff ff5b 	bl	8006544 <lowlayer_readLimitSwitch>
 800668e:	4603      	mov	r3, r0
 8006690:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006692:	2300      	movs	r3, #0
 8006694:	71fb      	strb	r3, [r7, #7]
 8006696:	e00d      	b.n	80066b4 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006698:	79ba      	ldrb	r2, [r7, #6]
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	fa42 f303 	asr.w	r3, r2, r3
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	f002 0201 	and.w	r2, r2, #1
 80066a8:	b2d1      	uxtb	r1, r2
 80066aa:	4a06      	ldr	r2, [pc, #24]	; (80066c4 <lowlayer_updateLimit+0x40>)
 80066ac:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	3301      	adds	r3, #1
 80066b2:	71fb      	strb	r3, [r7, #7]
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d9ee      	bls.n	8006698 <lowlayer_updateLimit+0x14>
	}
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	2000deb0 	.word	0x2000deb0

080066c8 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 80066d8:	2201      	movs	r2, #1
 80066da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066de:	4807      	ldr	r0, [pc, #28]	; (80066fc <lowlayer_setOutput+0x34>)
 80066e0:	f005 fc7e 	bl	800bfe0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 80066e4:	e005      	b.n	80066f2 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 80066e6:	2200      	movs	r2, #0
 80066e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066ec:	4803      	ldr	r0, [pc, #12]	; (80066fc <lowlayer_setOutput+0x34>)
 80066ee:	f005 fc77 	bl	800bfe0 <HAL_GPIO_WritePin>
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40020400 	.word	0x40020400

08006700 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006704:	2201      	movs	r2, #1
 8006706:	2140      	movs	r1, #64	; 0x40
 8006708:	4802      	ldr	r0, [pc, #8]	; (8006714 <lowlayer_CPLD_Init+0x14>)
 800670a:	f005 fc69 	bl	800bfe0 <HAL_GPIO_WritePin>
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40020c00 	.word	0x40020c00

08006718 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800671c:	2201      	movs	r2, #1
 800671e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006722:	4808      	ldr	r0, [pc, #32]	; (8006744 <lowlayer_stepMotorInit+0x2c>)
 8006724:	f005 fc5c 	bl	800bfe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006728:	2201      	movs	r2, #1
 800672a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800672e:	4805      	ldr	r0, [pc, #20]	; (8006744 <lowlayer_stepMotorInit+0x2c>)
 8006730:	f005 fc56 	bl	800bfe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006734:	2201      	movs	r2, #1
 8006736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800673a:	4802      	ldr	r0, [pc, #8]	; (8006744 <lowlayer_stepMotorInit+0x2c>)
 800673c:	f005 fc50 	bl	800bfe0 <HAL_GPIO_WritePin>
}
 8006740:	bf00      	nop
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40020000 	.word	0x40020000

08006748 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 800674c:	f7ff ffd8 	bl	8006700 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006750:	f7ff ffe2 	bl	8006718 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006754:	f7ff fed8 	bl	8006508 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006758:	bf00      	nop
 800675a:	bd80      	pop	{r7, pc}
 800675c:	0000      	movs	r0, r0
	...

08006760 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006760:	b084      	sub	sp, #16
 8006762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006764:	ed2d 8b02 	vpush	{d8}
 8006768:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 800676c:	af90      	add	r7, sp, #576	; 0x240
 800676e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006776:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 8359 	bne.w	8006e32 <scaraInitDuty+0x6d2>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006780:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006784:	a3bd      	add	r3, pc, #756	; (adr r3, 8006a7c <scaraInitDuty+0x31c>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 ff35 	bl	80005f8 <__aeabi_dmul>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	4bb1      	ldr	r3, [pc, #708]	; (8006a60 <scaraInitDuty+0x300>)
 800679c:	f7fa f856 	bl	800084c <__aeabi_ddiv>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80067a8:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d134      	bne.n	800681a <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80067b0:	4bac      	ldr	r3, [pc, #688]	; (8006a64 <scaraInitDuty+0x304>)
 80067b2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80067b6:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80067ba:	f7f9 fd67 	bl	800028c <__adddf3>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	f107 0108 	add.w	r1, r7, #8
 80067c6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80067ca:	4ba6      	ldr	r3, [pc, #664]	; (8006a64 <scaraInitDuty+0x304>)
 80067cc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80067d0:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80067d4:	f7f9 fd5a 	bl	800028c <__adddf3>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	f107 0108 	add.w	r1, r7, #8
 80067e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80067e4:	4b9f      	ldr	r3, [pc, #636]	; (8006a64 <scaraInitDuty+0x304>)
 80067e6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80067ea:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80067ee:	f7f9 fd4d 	bl	800028c <__adddf3>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	f107 0108 	add.w	r1, r7, #8
 80067fa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80067fe:	4b99      	ldr	r3, [pc, #612]	; (8006a64 <scaraInitDuty+0x304>)
 8006800:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006804:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006808:	f7f9 fd40 	bl	800028c <__adddf3>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	f107 0108 	add.w	r1, r7, #8
 8006814:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006818:	e01f      	b.n	800685a <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800681a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800681e:	2b00      	cmp	r3, #0
 8006820:	d118      	bne.n	8006854 <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 8006822:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006826:	f107 0108 	add.w	r1, r7, #8
 800682a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 800682e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006832:	f107 0108 	add.w	r1, r7, #8
 8006836:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 800683a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800683e:	f107 0108 	add.w	r1, r7, #8
 8006842:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8006846:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800684a:	f107 0108 	add.w	r1, r7, #8
 800684e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006852:	e002      	b.n	800685a <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006854:	230c      	movs	r3, #12
 8006856:	f000 be95 	b.w	8007584 <scaraInitDuty+0xe24>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 800685a:	f107 0308 	add.w	r3, r7, #8
 800685e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006862:	4b80      	ldr	r3, [pc, #512]	; (8006a64 <scaraInitDuty+0x304>)
 8006864:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006868:	f7f9 fd0e 	bl	8000288 <__aeabi_dsub>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		dir_angle = 1;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006886:	f7fa f929 	bl	8000adc <__aeabi_dcmplt>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <scaraInitDuty+0x136>
			dir_angle = -1;
 8006890:	23ff      	movs	r3, #255	; 0xff
 8006892:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006896:	4b74      	ldr	r3, [pc, #464]	; (8006a68 <scaraInitDuty+0x308>)
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800689c:	4b71      	ldr	r3, [pc, #452]	; (8006a64 <scaraInitDuty+0x304>)
 800689e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80068a2:	4971      	ldr	r1, [pc, #452]	; (8006a68 <scaraInitDuty+0x308>)
 80068a4:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 80068a8:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 80068ac:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d120      	bne.n	80068f6 <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80068b4:	4b6c      	ldr	r3, [pc, #432]	; (8006a68 <scaraInitDuty+0x308>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80068ba:	4c6a      	ldr	r4, [pc, #424]	; (8006a64 <scaraInitDuty+0x304>)
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	ab2e      	add	r3, sp, #184	; 0xb8
 80068c2:	4611      	mov	r1, r2
 80068c4:	22c0      	movs	r2, #192	; 0xc0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f00f f9aa 	bl	8015c20 <memcpy>
 80068cc:	4668      	mov	r0, sp
 80068ce:	f104 0308 	add.w	r3, r4, #8
 80068d2:	22b8      	movs	r2, #184	; 0xb8
 80068d4:	4619      	mov	r1, r3
 80068d6:	f00f f9a3 	bl	8015c20 <memcpy>
 80068da:	e894 000c 	ldmia.w	r4, {r2, r3}
 80068de:	4863      	ldr	r0, [pc, #396]	; (8006a6c <scaraInitDuty+0x30c>)
 80068e0:	f000 fe64 	bl	80075ac <scaraInitLine>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 80068ea:	4b5f      	ldr	r3, [pc, #380]	; (8006a68 <scaraInitDuty+0x308>)
 80068ec:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80068f0:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 80068f4:	e053      	b.n	800699e <scaraInitDuty+0x23e>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 80068f6:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d14c      	bne.n	8006998 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 80068fe:	4b59      	ldr	r3, [pc, #356]	; (8006a64 <scaraInitDuty+0x304>)
 8006900:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006904:	f107 0108 	add.w	r1, r7, #8
 8006908:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 800690c:	4b55      	ldr	r3, [pc, #340]	; (8006a64 <scaraInitDuty+0x304>)
 800690e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006912:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006916:	f7f9 fcb9 	bl	800028c <__adddf3>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006922:	4b50      	ldr	r3, [pc, #320]	; (8006a64 <scaraInitDuty+0x304>)
 8006924:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006928:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800692c:	f7f9 fcae 	bl	800028c <__adddf3>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8006938:	4b4a      	ldr	r3, [pc, #296]	; (8006a64 <scaraInitDuty+0x304>)
 800693a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800693e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006942:	4b49      	ldr	r3, [pc, #292]	; (8006a68 <scaraInitDuty+0x308>)
 8006944:	2201      	movs	r2, #1
 8006946:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006948:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800694c:	4c45      	ldr	r4, [pc, #276]	; (8006a64 <scaraInitDuty+0x304>)
 800694e:	938e      	str	r3, [sp, #568]	; 0x238
 8006950:	a85e      	add	r0, sp, #376	; 0x178
 8006952:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006956:	22c0      	movs	r2, #192	; 0xc0
 8006958:	4619      	mov	r1, r3
 800695a:	f00f f961 	bl	8015c20 <memcpy>
 800695e:	f107 0208 	add.w	r2, r7, #8
 8006962:	ab2e      	add	r3, sp, #184	; 0xb8
 8006964:	4611      	mov	r1, r2
 8006966:	22c0      	movs	r2, #192	; 0xc0
 8006968:	4618      	mov	r0, r3
 800696a:	f00f f959 	bl	8015c20 <memcpy>
 800696e:	4668      	mov	r0, sp
 8006970:	f104 0308 	add.w	r3, r4, #8
 8006974:	22b8      	movs	r2, #184	; 0xb8
 8006976:	4619      	mov	r1, r3
 8006978:	f00f f952 	bl	8015c20 <memcpy>
 800697c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006980:	483b      	ldr	r0, [pc, #236]	; (8006a70 <scaraInitDuty+0x310>)
 8006982:	f000 fec9 	bl	8007718 <scaraInitCircle>
 8006986:	4603      	mov	r3, r0
 8006988:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 800698c:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <scaraInitDuty+0x308>)
 800698e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8006992:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006996:	e002      	b.n	800699e <scaraInitDuty+0x23e>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8006998:	2303      	movs	r3, #3
 800699a:	f000 bdf3 	b.w	8007584 <scaraInitDuty+0xe24>
		}

		if ( SCARA_STATUS_OK != status) {
 800699e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <scaraInitDuty+0x24e>
			return status;
 80069a6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80069aa:	f000 bdeb 	b.w	8007584 <scaraInitDuty+0xe24>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80069ae:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 80bb 	bne.w	8006b2e <scaraInitDuty+0x3ce>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80069b8:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d161      	bne.n	8006a84 <scaraInitDuty+0x324>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80069c0:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <scaraInitDuty+0x308>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80069c8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80069cc:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 80069d0:	eeb0 2a46 	vmov.f32	s4, s12
 80069d4:	eef0 2a66 	vmov.f32	s5, s13
 80069d8:	eeb0 1a47 	vmov.f32	s2, s14
 80069dc:	eef0 1a67 	vmov.f32	s3, s15
 80069e0:	2201      	movs	r2, #1
 80069e2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80069e6:	2104      	movs	r1, #4
 80069e8:	4822      	ldr	r0, [pc, #136]	; (8006a74 <scaraInitDuty+0x314>)
 80069ea:	f001 f891 	bl	8007b10 <scaraInitLSPB1>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80069f4:	4a1c      	ldr	r2, [pc, #112]	; (8006a68 <scaraInitDuty+0x308>)
 80069f6:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80069fa:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80069fe:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <scaraInitDuty+0x308>)
 8006a00:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006a04:	4918      	ldr	r1, [pc, #96]	; (8006a68 <scaraInitDuty+0x308>)
 8006a06:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006a0a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006a0e:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <scaraInitDuty+0x308>)
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006a16:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7f9 fd82 	bl	8000524 <__aeabi_i2d>
 8006a20:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006a24:	f7f9 fde8 	bl	80005f8 <__aeabi_dmul>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	ec43 2b16 	vmov	d6, r2, r3
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <scaraInitDuty+0x308>)
 8006a32:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006a36:	ed93 7b00 	vldr	d7, [r3]
 8006a3a:	eeb0 1a47 	vmov.f32	s2, s14
 8006a3e:	eef0 1a67 	vmov.f32	s3, s15
 8006a42:	2203      	movs	r2, #3
 8006a44:	eeb0 0a46 	vmov.f32	s0, s12
 8006a48:	eef0 0a66 	vmov.f32	s1, s13
 8006a4c:	2105      	movs	r1, #5
 8006a4e:	480a      	ldr	r0, [pc, #40]	; (8006a78 <scaraInitDuty+0x318>)
 8006a50:	f001 f810 	bl	8007a74 <scaraInitLinear>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006a5a:	e1db      	b.n	8006e14 <scaraInitDuty+0x6b4>
 8006a5c:	f3af 8000 	nop.w
 8006a60:	40668000 	.word	0x40668000
 8006a64:	2000eab8 	.word	0x2000eab8
 8006a68:	2000def8 	.word	0x2000def8
 8006a6c:	2000df08 	.word	0x2000df08
 8006a70:	2000df78 	.word	0x2000df78
 8006a74:	2000e010 	.word	0x2000e010
 8006a78:	2000e2e0 	.word	0x2000e2e0
 8006a7c:	60000000 	.word	0x60000000
 8006a80:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006a84:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d14d      	bne.n	8006b28 <scaraInitDuty+0x3c8>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006a8c:	4bb9      	ldr	r3, [pc, #740]	; (8006d74 <scaraInitDuty+0x614>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006a94:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006a98:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006a9c:	eeb0 2a46 	vmov.f32	s4, s12
 8006aa0:	eef0 2a66 	vmov.f32	s5, s13
 8006aa4:	eeb0 1a47 	vmov.f32	s2, s14
 8006aa8:	eef0 1a67 	vmov.f32	s3, s15
 8006aac:	2200      	movs	r2, #0
 8006aae:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006ab2:	2104      	movs	r1, #4
 8006ab4:	48b0      	ldr	r0, [pc, #704]	; (8006d78 <scaraInitDuty+0x618>)
 8006ab6:	f001 f82b 	bl	8007b10 <scaraInitLSPB1>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006ac0:	4aac      	ldr	r2, [pc, #688]	; (8006d74 <scaraInitDuty+0x614>)
 8006ac2:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006ac6:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006aca:	4baa      	ldr	r3, [pc, #680]	; (8006d74 <scaraInitDuty+0x614>)
 8006acc:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006ad0:	49a8      	ldr	r1, [pc, #672]	; (8006d74 <scaraInitDuty+0x614>)
 8006ad2:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006ad6:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ada:	4ba6      	ldr	r3, [pc, #664]	; (8006d74 <scaraInitDuty+0x614>)
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006ae2:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7f9 fd1c 	bl	8000524 <__aeabi_i2d>
 8006aec:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006af0:	f7f9 fd82 	bl	80005f8 <__aeabi_dmul>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	ec43 2b16 	vmov	d6, r2, r3
 8006afc:	4b9d      	ldr	r3, [pc, #628]	; (8006d74 <scaraInitDuty+0x614>)
 8006afe:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006b02:	ed93 7b00 	vldr	d7, [r3]
 8006b06:	eeb0 1a47 	vmov.f32	s2, s14
 8006b0a:	eef0 1a67 	vmov.f32	s3, s15
 8006b0e:	2203      	movs	r2, #3
 8006b10:	eeb0 0a46 	vmov.f32	s0, s12
 8006b14:	eef0 0a66 	vmov.f32	s1, s13
 8006b18:	2105      	movs	r1, #5
 8006b1a:	4898      	ldr	r0, [pc, #608]	; (8006d7c <scaraInitDuty+0x61c>)
 8006b1c:	f000 ffaa 	bl	8007a74 <scaraInitLinear>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006b26:	e175      	b.n	8006e14 <scaraInitDuty+0x6b4>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006b28:	2308      	movs	r3, #8
 8006b2a:	f000 bd2b 	b.w	8007584 <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006b2e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	f040 80a7 	bne.w	8006c86 <scaraInitDuty+0x526>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006b38:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d14d      	bne.n	8006bdc <scaraInitDuty+0x47c>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006b40:	4b8c      	ldr	r3, [pc, #560]	; (8006d74 <scaraInitDuty+0x614>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006b48:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006b4c:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006b50:	eeb0 2a46 	vmov.f32	s4, s12
 8006b54:	eef0 2a66 	vmov.f32	s5, s13
 8006b58:	eeb0 1a47 	vmov.f32	s2, s14
 8006b5c:	eef0 1a67 	vmov.f32	s3, s15
 8006b60:	2201      	movs	r2, #1
 8006b62:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006b66:	2104      	movs	r1, #4
 8006b68:	4885      	ldr	r0, [pc, #532]	; (8006d80 <scaraInitDuty+0x620>)
 8006b6a:	f001 fa95 	bl	8008098 <scaraInitScurve1>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006b74:	4a7f      	ldr	r2, [pc, #508]	; (8006d74 <scaraInitDuty+0x614>)
 8006b76:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006b7a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006b7e:	4b7d      	ldr	r3, [pc, #500]	; (8006d74 <scaraInitDuty+0x614>)
 8006b80:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006b84:	497b      	ldr	r1, [pc, #492]	; (8006d74 <scaraInitDuty+0x614>)
 8006b86:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006b8a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006b8e:	4b79      	ldr	r3, [pc, #484]	; (8006d74 <scaraInitDuty+0x614>)
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006b96:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7f9 fcc2 	bl	8000524 <__aeabi_i2d>
 8006ba0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006ba4:	f7f9 fd28 	bl	80005f8 <__aeabi_dmul>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	ec43 2b16 	vmov	d6, r2, r3
 8006bb0:	4b70      	ldr	r3, [pc, #448]	; (8006d74 <scaraInitDuty+0x614>)
 8006bb2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006bb6:	ed93 7b00 	vldr	d7, [r3]
 8006bba:	eeb0 1a47 	vmov.f32	s2, s14
 8006bbe:	eef0 1a67 	vmov.f32	s3, s15
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	eeb0 0a46 	vmov.f32	s0, s12
 8006bc8:	eef0 0a66 	vmov.f32	s1, s13
 8006bcc:	2105      	movs	r1, #5
 8006bce:	486b      	ldr	r0, [pc, #428]	; (8006d7c <scaraInitDuty+0x61c>)
 8006bd0:	f000 ff50 	bl	8007a74 <scaraInitLinear>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006bda:	e11b      	b.n	8006e14 <scaraInitDuty+0x6b4>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006bdc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d14d      	bne.n	8006c80 <scaraInitDuty+0x520>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006be4:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <scaraInitDuty+0x614>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006bec:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006bf0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006bf4:	eeb0 2a46 	vmov.f32	s4, s12
 8006bf8:	eef0 2a66 	vmov.f32	s5, s13
 8006bfc:	eeb0 1a47 	vmov.f32	s2, s14
 8006c00:	eef0 1a67 	vmov.f32	s3, s15
 8006c04:	2200      	movs	r2, #0
 8006c06:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006c0a:	2104      	movs	r1, #4
 8006c0c:	485c      	ldr	r0, [pc, #368]	; (8006d80 <scaraInitDuty+0x620>)
 8006c0e:	f001 fa43 	bl	8008098 <scaraInitScurve1>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006c18:	4a56      	ldr	r2, [pc, #344]	; (8006d74 <scaraInitDuty+0x614>)
 8006c1a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006c1e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006c22:	4b54      	ldr	r3, [pc, #336]	; (8006d74 <scaraInitDuty+0x614>)
 8006c24:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006c28:	4952      	ldr	r1, [pc, #328]	; (8006d74 <scaraInitDuty+0x614>)
 8006c2a:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006c2e:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006c32:	4b50      	ldr	r3, [pc, #320]	; (8006d74 <scaraInitDuty+0x614>)
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006c3a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7f9 fc70 	bl	8000524 <__aeabi_i2d>
 8006c44:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006c48:	f7f9 fcd6 	bl	80005f8 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	ec43 2b16 	vmov	d6, r2, r3
 8006c54:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <scaraInitDuty+0x614>)
 8006c56:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006c5a:	ed93 7b00 	vldr	d7, [r3]
 8006c5e:	eeb0 1a47 	vmov.f32	s2, s14
 8006c62:	eef0 1a67 	vmov.f32	s3, s15
 8006c66:	2203      	movs	r2, #3
 8006c68:	eeb0 0a46 	vmov.f32	s0, s12
 8006c6c:	eef0 0a66 	vmov.f32	s1, s13
 8006c70:	2105      	movs	r1, #5
 8006c72:	4842      	ldr	r0, [pc, #264]	; (8006d7c <scaraInitDuty+0x61c>)
 8006c74:	f000 fefe 	bl	8007a74 <scaraInitLinear>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006c7e:	e0c9      	b.n	8006e14 <scaraInitDuty+0x6b4>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006c80:	2308      	movs	r3, #8
 8006c82:	f000 bc7f 	b.w	8007584 <scaraInitDuty+0xe24>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8006c86:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d17c      	bne.n	8006d88 <scaraInitDuty+0x628>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006c8e:	4a39      	ldr	r2, [pc, #228]	; (8006d74 <scaraInitDuty+0x614>)
 8006c90:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006c94:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006c98:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <scaraInitDuty+0x614>)
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ca0:	4b34      	ldr	r3, [pc, #208]	; (8006d74 <scaraInitDuty+0x614>)
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8006ca8:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d118      	bne.n	8006ce2 <scaraInitDuty+0x582>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8006cb0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cbe:	607b      	str	r3, [r7, #4]
 8006cc0:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8006cc4:	eeb0 1a47 	vmov.f32	s2, s14
 8006cc8:	eef0 1a67 	vmov.f32	s3, s15
 8006ccc:	2203      	movs	r2, #3
 8006cce:	ed97 0b00 	vldr	d0, [r7]
 8006cd2:	2104      	movs	r1, #4
 8006cd4:	482b      	ldr	r0, [pc, #172]	; (8006d84 <scaraInitDuty+0x624>)
 8006cd6:	f000 fecd 	bl	8007a74 <scaraInitLinear>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006ce0:	e01d      	b.n	8006d1e <scaraInitDuty+0x5be>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8006ce2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d116      	bne.n	8006d18 <scaraInitDuty+0x5b8>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8006cea:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 8006cee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006cf2:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006cf6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006cfa:	eeb0 1a47 	vmov.f32	s2, s14
 8006cfe:	eef0 1a67 	vmov.f32	s3, s15
 8006d02:	2202      	movs	r2, #2
 8006d04:	ec46 5b10 	vmov	d0, r5, r6
 8006d08:	2104      	movs	r1, #4
 8006d0a:	481e      	ldr	r0, [pc, #120]	; (8006d84 <scaraInitDuty+0x624>)
 8006d0c:	f000 feb2 	bl	8007a74 <scaraInitLinear>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006d16:	e002      	b.n	8006d1e <scaraInitDuty+0x5be>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f000 bc33 	b.w	8007584 <scaraInitDuty+0xe24>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <scaraInitDuty+0x614>)
 8006d20:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 8006d24:	4913      	ldr	r1, [pc, #76]	; (8006d74 <scaraInitDuty+0x614>)
 8006d26:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006d2a:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006d2e:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7f9 fbf6 	bl	8000524 <__aeabi_i2d>
 8006d38:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006d3c:	f7f9 fc5c 	bl	80005f8 <__aeabi_dmul>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	ec43 2b16 	vmov	d6, r2, r3
 8006d48:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <scaraInitDuty+0x614>)
 8006d4a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006d4e:	ed93 7b00 	vldr	d7, [r3]
 8006d52:	eeb0 1a47 	vmov.f32	s2, s14
 8006d56:	eef0 1a67 	vmov.f32	s3, s15
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	eeb0 0a46 	vmov.f32	s0, s12
 8006d60:	eef0 0a66 	vmov.f32	s1, s13
 8006d64:	2105      	movs	r1, #5
 8006d66:	4805      	ldr	r0, [pc, #20]	; (8006d7c <scaraInitDuty+0x61c>)
 8006d68:	f000 fe84 	bl	8007a74 <scaraInitLinear>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006d72:	e04f      	b.n	8006e14 <scaraInitDuty+0x6b4>
 8006d74:	2000def8 	.word	0x2000def8
 8006d78:	2000e010 	.word	0x2000e010
 8006d7c:	2000e2e0 	.word	0x2000e2e0
 8006d80:	2000e090 	.word	0x2000e090
 8006d84:	2000e160 	.word	0x2000e160
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8006d88:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d13f      	bne.n	8006e10 <scaraInitDuty+0x6b0>
			status1 = SCARA_STATUS_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006d96:	4a96      	ldr	r2, [pc, #600]	; (8006ff0 <scaraInitDuty+0x890>)
 8006d98:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006d9c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8006da0:	4b93      	ldr	r3, [pc, #588]	; (8006ff0 <scaraInitDuty+0x890>)
 8006da2:	2203      	movs	r2, #3
 8006da4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006da8:	4b91      	ldr	r3, [pc, #580]	; (8006ff0 <scaraInitDuty+0x890>)
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8006db0:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8006db4:	498e      	ldr	r1, [pc, #568]	; (8006ff0 <scaraInitDuty+0x890>)
 8006db6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006dba:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8006dbe:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7f9 fbae 	bl	8000524 <__aeabi_i2d>
 8006dc8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006dcc:	f7f9 fc14 	bl	80005f8 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	ec43 2b18 	vmov	d8, r2, r3
 8006dd8:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006ddc:	4b85      	ldr	r3, [pc, #532]	; (8006ff4 <scaraInitDuty+0x894>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 fa51 	bl	8000288 <__aeabi_dsub>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	ec43 2b17 	vmov	d7, r2, r3
 8006dee:	eeb0 1a47 	vmov.f32	s2, s14
 8006df2:	eef0 1a67 	vmov.f32	s3, s15
 8006df6:	2203      	movs	r2, #3
 8006df8:	eeb0 0a48 	vmov.f32	s0, s16
 8006dfc:	eef0 0a68 	vmov.f32	s1, s17
 8006e00:	2105      	movs	r1, #5
 8006e02:	487d      	ldr	r0, [pc, #500]	; (8006ff8 <scaraInitDuty+0x898>)
 8006e04:	f000 fe36 	bl	8007a74 <scaraInitLinear>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006e0e:	e001      	b.n	8006e14 <scaraInitDuty+0x6b4>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006e10:	2305      	movs	r3, #5
 8006e12:	e3b7      	b.n	8007584 <scaraInitDuty+0xe24>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8006e14:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <scaraInitDuty+0x6c2>
			return status1;
 8006e1c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006e20:	e3b0      	b.n	8007584 <scaraInitDuty+0xe24>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006e22:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 837e 	beq.w	8007528 <scaraInitDuty+0xdc8>
			return status2;
 8006e2c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006e30:	e3a8      	b.n	8007584 <scaraInitDuty+0xe24>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8006e32:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	f040 8374 	bne.w	8007524 <scaraInitDuty+0xdc4>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8006e3c:	4b6c      	ldr	r3, [pc, #432]	; (8006ff0 <scaraInitDuty+0x890>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8006e42:	4b6e      	ldr	r3, [pc, #440]	; (8006ffc <scaraInitDuty+0x89c>)
 8006e44:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006e48:	4969      	ldr	r1, [pc, #420]	; (8006ff0 <scaraInitDuty+0x890>)
 8006e4a:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8006e4e:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8006e52:	4b6a      	ldr	r3, [pc, #424]	; (8006ffc <scaraInitDuty+0x89c>)
 8006e54:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8006e58:	4965      	ldr	r1, [pc, #404]	; (8006ff0 <scaraInitDuty+0x890>)
 8006e5a:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8006e5e:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8006e62:	4b66      	ldr	r3, [pc, #408]	; (8006ffc <scaraInitDuty+0x89c>)
 8006e64:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8006e68:	4961      	ldr	r1, [pc, #388]	; (8006ff0 <scaraInitDuty+0x890>)
 8006e6a:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8006e6e:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8006e72:	4b62      	ldr	r3, [pc, #392]	; (8006ffc <scaraInitDuty+0x89c>)
 8006e74:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8006e78:	495d      	ldr	r1, [pc, #372]	; (8006ff0 <scaraInitDuty+0x890>)
 8006e7a:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8006e7e:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006e82:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006e86:	a358      	add	r3, pc, #352	; (adr r3, 8006fe8 <scaraInitDuty+0x888>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	4b58      	ldr	r3, [pc, #352]	; (8007000 <scaraInitDuty+0x8a0>)
 8006e9e:	f7f9 fcd5 	bl	800084c <__aeabi_ddiv>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006eaa:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d12c      	bne.n	8006f0c <scaraInitDuty+0x7ac>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006eb2:	4b52      	ldr	r3, [pc, #328]	; (8006ffc <scaraInitDuty+0x89c>)
 8006eb4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006eb8:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006ebc:	f7f9 f9e6 	bl	800028c <__adddf3>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006ec8:	4b4c      	ldr	r3, [pc, #304]	; (8006ffc <scaraInitDuty+0x89c>)
 8006eca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006ece:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006ed2:	f7f9 f9db 	bl	800028c <__adddf3>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006ede:	4b47      	ldr	r3, [pc, #284]	; (8006ffc <scaraInitDuty+0x89c>)
 8006ee0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006ee4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006ee8:	f7f9 f9d0 	bl	800028c <__adddf3>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006ef4:	4b41      	ldr	r3, [pc, #260]	; (8006ffc <scaraInitDuty+0x89c>)
 8006ef6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006efa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006efe:	f7f9 f9c5 	bl	800028c <__adddf3>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 8006f0a:	e016      	b.n	8006f3a <scaraInitDuty+0x7da>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006f0c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d110      	bne.n	8006f36 <scaraInitDuty+0x7d6>
			target_point.x 		= command.target_point.x;
 8006f14:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006f18:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 8006f1c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006f20:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 8006f24:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006f28:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 8006f2c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006f30:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 8006f34:	e001      	b.n	8006f3a <scaraInitDuty+0x7da>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006f36:	230c      	movs	r3, #12
 8006f38:	e324      	b.n	8007584 <scaraInitDuty+0xe24>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006f3a:	4c30      	ldr	r4, [pc, #192]	; (8006ffc <scaraInitDuty+0x89c>)
 8006f3c:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8006f40:	4668      	mov	r0, sp
 8006f42:	f104 0308 	add.w	r3, r4, #8
 8006f46:	22b8      	movs	r2, #184	; 0xb8
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f00e fe69 	bl	8015c20 <memcpy>
 8006f4e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006f52:	4628      	mov	r0, r5
 8006f54:	f7fe f8dc 	bl	8005110 <kinematicInverse>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <scaraInitDuty+0x802>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8006f5e:	2307      	movs	r3, #7
 8006f60:	e310      	b.n	8007584 <scaraInitDuty+0xe24>
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8006f62:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006f66:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <scaraInitDuty+0x89c>)
 8006f68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006f6c:	f7f9 f98c 	bl	8000288 <__aeabi_dsub>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	f107 0108 	add.w	r1, r7, #8
 8006f78:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8006f7c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8006f80:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <scaraInitDuty+0x89c>)
 8006f82:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8006f86:	f7f9 f97f 	bl	8000288 <__aeabi_dsub>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	f107 0108 	add.w	r1, r7, #8
 8006f92:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 8006f96:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006f9a:	4b18      	ldr	r3, [pc, #96]	; (8006ffc <scaraInitDuty+0x89c>)
 8006f9c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8006fa0:	f7f9 f972 	bl	8000288 <__aeabi_dsub>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	f107 0108 	add.w	r1, r7, #8
 8006fac:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8006fb0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <scaraInitDuty+0x89c>)
 8006fb6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8006fba:	f7f9 f965 	bl	8000288 <__aeabi_dsub>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	f107 0108 	add.w	r1, r7, #8
 8006fc6:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8006fca:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 8156 	bne.w	8007280 <scaraInitDuty+0xb20>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006fd4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d171      	bne.n	80070c0 <scaraInitDuty+0x960>
				for ( uint8_t i = 0; i < 4; i++) {
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8006fe2:	e061      	b.n	80070a8 <scaraInitDuty+0x948>
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	60000000 	.word	0x60000000
 8006fec:	400921fb 	.word	0x400921fb
 8006ff0:	2000def8 	.word	0x2000def8
 8006ff4:	2000dd18 	.word	0x2000dd18
 8006ff8:	2000e2e0 	.word	0x2000e2e0
 8006ffc:	2000eab8 	.word	0x2000eab8
 8007000:	40668000 	.word	0x40668000
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007004:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007008:	49d3      	ldr	r1, [pc, #844]	; (8007358 <scaraInitDuty+0xbf8>)
 800700a:	4613      	mov	r3, r2
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	4413      	add	r3, r2
 8007010:	01db      	lsls	r3, r3, #7
 8007012:	440b      	add	r3, r1
 8007014:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007018:	2200      	movs	r2, #0
 800701a:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800701c:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007020:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8007024:	4ccc      	ldr	r4, [pc, #816]	; (8007358 <scaraInitDuty+0xbf8>)
 8007026:	4613      	mov	r3, r2
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4413      	add	r3, r2
 800702c:	01db      	lsls	r3, r3, #7
 800702e:	4423      	add	r3, r4
 8007030:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007034:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007038:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 800703c:	4613      	mov	r3, r2
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	4413      	add	r3, r2
 8007042:	01db      	lsls	r3, r3, #7
 8007044:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007048:	4ac3      	ldr	r2, [pc, #780]	; (8007358 <scaraInitDuty+0xbf8>)
 800704a:	1898      	adds	r0, r3, r2
 800704c:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007050:	4ac2      	ldr	r2, [pc, #776]	; (800735c <scaraInitDuty+0xbfc>)
 8007052:	5cd1      	ldrb	r1, [r2, r3]
 8007054:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007058:	f107 0208 	add.w	r2, r7, #8
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	4413      	add	r3, r2
 8007060:	ed93 7b00 	vldr	d7, [r3]
 8007064:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007068:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 800706c:	eeb0 2a45 	vmov.f32	s4, s10
 8007070:	eef0 2a65 	vmov.f32	s5, s11
 8007074:	eeb0 1a46 	vmov.f32	s2, s12
 8007078:	eef0 1a66 	vmov.f32	s3, s13
 800707c:	2201      	movs	r2, #1
 800707e:	eeb0 0a47 	vmov.f32	s0, s14
 8007082:	eef0 0a67 	vmov.f32	s1, s15
 8007086:	f000 fd43 	bl	8007b10 <scaraInitLSPB1>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007090:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <scaraInitDuty+0x93e>
						return status1;
 8007098:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800709c:	e272      	b.n	8007584 <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 800709e:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80070a2:	3301      	adds	r3, #1
 80070a4:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80070a8:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d9a9      	bls.n	8007004 <scaraInitDuty+0x8a4>
					}
				}
				myDUTY.time_total = command.time_total;
 80070b0:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80070b4:	49a8      	ldr	r1, [pc, #672]	; (8007358 <scaraInitDuty+0xbf8>)
 80070b6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80070ba:	e9c1 2300 	strd	r2, r3, [r1]
 80070be:	e233      	b.n	8007528 <scaraInitDuty+0xdc8>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80070c0:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f040 80d9 	bne.w	800727c <scaraInitDuty+0xb1c>
				for ( uint8_t i = 0; i < 4; i++) {
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80070d0:	e03c      	b.n	800714c <scaraInitDuty+0x9ec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80070d2:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 80070d6:	49a0      	ldr	r1, [pc, #640]	; (8007358 <scaraInitDuty+0xbf8>)
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	01db      	lsls	r3, r3, #7
 80070e0:	440b      	add	r3, r1
 80070e2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80070ea:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 80070ee:	4613      	mov	r3, r2
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
 80070f4:	01db      	lsls	r3, r3, #7
 80070f6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80070fa:	4a97      	ldr	r2, [pc, #604]	; (8007358 <scaraInitDuty+0xbf8>)
 80070fc:	1898      	adds	r0, r3, r2
 80070fe:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007102:	4a96      	ldr	r2, [pc, #600]	; (800735c <scaraInitDuty+0xbfc>)
 8007104:	5cd1      	ldrb	r1, [r2, r3]
 8007106:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800710a:	f107 0208 	add.w	r2, r7, #8
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4413      	add	r3, r2
 8007112:	ed93 7b00 	vldr	d7, [r3]
 8007116:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800711a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800711e:	eeb0 2a45 	vmov.f32	s4, s10
 8007122:	eef0 2a65 	vmov.f32	s5, s11
 8007126:	eeb0 1a46 	vmov.f32	s2, s12
 800712a:	eef0 1a66 	vmov.f32	s3, s13
 800712e:	2200      	movs	r2, #0
 8007130:	eeb0 0a47 	vmov.f32	s0, s14
 8007134:	eef0 0a67 	vmov.f32	s1, s15
 8007138:	f001 ff02 	bl	8008f40 <scaraInitLSPB>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007142:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007146:	3301      	adds	r3, #1
 8007148:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 800714c:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007150:	2b03      	cmp	r3, #3
 8007152:	d9be      	bls.n	80070d2 <scaraInitDuty+0x972>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007154:	4b80      	ldr	r3, [pc, #512]	; (8007358 <scaraInitDuty+0xbf8>)
 8007156:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007166:	2300      	movs	r3, #0
 8007168:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 800716c:	e02b      	b.n	80071c6 <scaraInitDuty+0xa66>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 800716e:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 8007172:	4979      	ldr	r1, [pc, #484]	; (8007358 <scaraInitDuty+0xbf8>)
 8007174:	4613      	mov	r3, r2
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	4413      	add	r3, r2
 800717a:	01db      	lsls	r3, r3, #7
 800717c:	440b      	add	r3, r1
 800717e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007186:	4b74      	ldr	r3, [pc, #464]	; (8007358 <scaraInitDuty+0xbf8>)
 8007188:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f7f9 fcc2 	bl	8000b18 <__aeabi_dcmpgt>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d010      	beq.n	80071bc <scaraInitDuty+0xa5c>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800719a:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 800719e:	496e      	ldr	r1, [pc, #440]	; (8007358 <scaraInitDuty+0xbf8>)
 80071a0:	4613      	mov	r3, r2
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	4413      	add	r3, r2
 80071a6:	01db      	lsls	r3, r3, #7
 80071a8:	440b      	add	r3, r1
 80071aa:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	4969      	ldr	r1, [pc, #420]	; (8007358 <scaraInitDuty+0xbf8>)
 80071b4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80071b8:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80071bc:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80071c0:	3301      	adds	r3, #1
 80071c2:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 80071c6:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d9cf      	bls.n	800716e <scaraInitDuty+0xa0e>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80071d4:	e04d      	b.n	8007272 <scaraInitDuty+0xb12>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80071d6:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80071da:	495f      	ldr	r1, [pc, #380]	; (8007358 <scaraInitDuty+0xbf8>)
 80071dc:	4613      	mov	r3, r2
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	4413      	add	r3, r2
 80071e2:	01db      	lsls	r3, r3, #7
 80071e4:	440b      	add	r3, r1
 80071e6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80071ee:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80071f2:	4b59      	ldr	r3, [pc, #356]	; (8007358 <scaraInitDuty+0xbf8>)
 80071f4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80071f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071fc:	4c56      	ldr	r4, [pc, #344]	; (8007358 <scaraInitDuty+0xbf8>)
 80071fe:	4613      	mov	r3, r2
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	01db      	lsls	r3, r3, #7
 8007206:	4423      	add	r3, r4
 8007208:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800720c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007210:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007214:	4613      	mov	r3, r2
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	4413      	add	r3, r2
 800721a:	01db      	lsls	r3, r3, #7
 800721c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007220:	4a4d      	ldr	r2, [pc, #308]	; (8007358 <scaraInitDuty+0xbf8>)
 8007222:	1898      	adds	r0, r3, r2
 8007224:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007228:	4a4c      	ldr	r2, [pc, #304]	; (800735c <scaraInitDuty+0xbfc>)
 800722a:	5cd1      	ldrb	r1, [r2, r3]
 800722c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007230:	f107 0208 	add.w	r2, r7, #8
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	4413      	add	r3, r2
 8007238:	ed93 7b00 	vldr	d7, [r3]
 800723c:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007240:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007244:	eeb0 2a45 	vmov.f32	s4, s10
 8007248:	eef0 2a65 	vmov.f32	s5, s11
 800724c:	eeb0 1a46 	vmov.f32	s2, s12
 8007250:	eef0 1a66 	vmov.f32	s3, s13
 8007254:	2201      	movs	r2, #1
 8007256:	eeb0 0a47 	vmov.f32	s0, s14
 800725a:	eef0 0a67 	vmov.f32	s1, s15
 800725e:	f001 fe6f 	bl	8008f40 <scaraInitLSPB>
 8007262:	4603      	mov	r3, r0
 8007264:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007268:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800726c:	3301      	adds	r3, #1
 800726e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007272:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007276:	2b03      	cmp	r3, #3
 8007278:	d9ad      	bls.n	80071d6 <scaraInitDuty+0xa76>
 800727a:	e155      	b.n	8007528 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800727c:	2308      	movs	r3, #8
 800727e:	e181      	b.n	8007584 <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8007280:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007284:	2b01      	cmp	r3, #1
 8007286:	f040 814b 	bne.w	8007520 <scaraInitDuty+0xdc0>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800728a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800728e:	2b01      	cmp	r3, #1
 8007290:	d166      	bne.n	8007360 <scaraInitDuty+0xc00>
				for ( uint8_t i = 0; i < 4; i++) {
 8007292:	2300      	movs	r3, #0
 8007294:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007298:	e051      	b.n	800733e <scaraInitDuty+0xbde>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800729a:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 800729e:	492e      	ldr	r1, [pc, #184]	; (8007358 <scaraInitDuty+0xbf8>)
 80072a0:	4613      	mov	r3, r2
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	4413      	add	r3, r2
 80072a6:	01db      	lsls	r3, r3, #7
 80072a8:	440b      	add	r3, r1
 80072aa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80072ae:	2201      	movs	r2, #1
 80072b0:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80072b2:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80072b6:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80072ba:	4c27      	ldr	r4, [pc, #156]	; (8007358 <scaraInitDuty+0xbf8>)
 80072bc:	4613      	mov	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	4413      	add	r3, r2
 80072c2:	01db      	lsls	r3, r3, #7
 80072c4:	4423      	add	r3, r4
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80072ce:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80072d2:	4613      	mov	r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80072de:	4a1e      	ldr	r2, [pc, #120]	; (8007358 <scaraInitDuty+0xbf8>)
 80072e0:	1898      	adds	r0, r3, r2
 80072e2:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80072e6:	4a1d      	ldr	r2, [pc, #116]	; (800735c <scaraInitDuty+0xbfc>)
 80072e8:	5cd1      	ldrb	r1, [r2, r3]
 80072ea:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80072ee:	f107 0208 	add.w	r2, r7, #8
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	ed93 7b00 	vldr	d7, [r3]
 80072fa:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80072fe:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 8007302:	eeb0 2a45 	vmov.f32	s4, s10
 8007306:	eef0 2a65 	vmov.f32	s5, s11
 800730a:	eeb0 1a46 	vmov.f32	s2, s12
 800730e:	eef0 1a66 	vmov.f32	s3, s13
 8007312:	2201      	movs	r2, #1
 8007314:	eeb0 0a47 	vmov.f32	s0, s14
 8007318:	eef0 0a67 	vmov.f32	s1, s15
 800731c:	f000 febc 	bl	8008098 <scaraInitScurve1>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007326:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <scaraInitDuty+0xbd4>
						return status1;
 800732e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007332:	e127      	b.n	8007584 <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 8007334:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007338:	3301      	adds	r3, #1
 800733a:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 800733e:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007342:	2b03      	cmp	r3, #3
 8007344:	d9a9      	bls.n	800729a <scaraInitDuty+0xb3a>
					}
				}
				myDUTY.time_total = command.time_total;
 8007346:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800734a:	4903      	ldr	r1, [pc, #12]	; (8007358 <scaraInitDuty+0xbf8>)
 800734c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007350:	e9c1 2300 	strd	r2, r3, [r1]
 8007354:	e0e8      	b.n	8007528 <scaraInitDuty+0xdc8>
 8007356:	bf00      	nop
 8007358:	2000def8 	.word	0x2000def8
 800735c:	20002088 	.word	0x20002088
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007360:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 80d9 	bne.w	800751c <scaraInitDuty+0xdbc>
				for ( uint8_t i = 0; i < 4; i++) {
 800736a:	2300      	movs	r3, #0
 800736c:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007370:	e03c      	b.n	80073ec <scaraInitDuty+0xc8c>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007372:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007376:	4988      	ldr	r1, [pc, #544]	; (8007598 <scaraInitDuty+0xe38>)
 8007378:	4613      	mov	r3, r2
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	4413      	add	r3, r2
 800737e:	01db      	lsls	r3, r3, #7
 8007380:	440b      	add	r3, r1
 8007382:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007386:	2201      	movs	r2, #1
 8007388:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800738a:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 800738e:	4613      	mov	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4413      	add	r3, r2
 8007394:	01db      	lsls	r3, r3, #7
 8007396:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800739a:	4a7f      	ldr	r2, [pc, #508]	; (8007598 <scaraInitDuty+0xe38>)
 800739c:	1898      	adds	r0, r3, r2
 800739e:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80073a2:	4a7e      	ldr	r2, [pc, #504]	; (800759c <scaraInitDuty+0xe3c>)
 80073a4:	5cd1      	ldrb	r1, [r2, r3]
 80073a6:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80073aa:	f107 0208 	add.w	r2, r7, #8
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	ed93 7b00 	vldr	d7, [r3]
 80073b6:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80073ba:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80073be:	eeb0 2a45 	vmov.f32	s4, s10
 80073c2:	eef0 2a65 	vmov.f32	s5, s11
 80073c6:	eeb0 1a46 	vmov.f32	s2, s12
 80073ca:	eef0 1a66 	vmov.f32	s3, s13
 80073ce:	2200      	movs	r2, #0
 80073d0:	eeb0 0a47 	vmov.f32	s0, s14
 80073d4:	eef0 0a67 	vmov.f32	s1, s15
 80073d8:	f002 f984 	bl	80096e4 <scaraInitScurve>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80073e2:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80073e6:	3301      	adds	r3, #1
 80073e8:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80073ec:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d9be      	bls.n	8007372 <scaraInitDuty+0xc12>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80073f4:	4b68      	ldr	r3, [pc, #416]	; (8007598 <scaraInitDuty+0xe38>)
 80073f6:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007406:	2300      	movs	r3, #0
 8007408:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 800740c:	e02b      	b.n	8007466 <scaraInitDuty+0xd06>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 800740e:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007412:	4961      	ldr	r1, [pc, #388]	; (8007598 <scaraInitDuty+0xe38>)
 8007414:	4613      	mov	r3, r2
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	4413      	add	r3, r2
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	440b      	add	r3, r1
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007426:	4b5c      	ldr	r3, [pc, #368]	; (8007598 <scaraInitDuty+0xe38>)
 8007428:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f7f9 fb72 	bl	8000b18 <__aeabi_dcmpgt>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d010      	beq.n	800745c <scaraInitDuty+0xcfc>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800743a:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 800743e:	4956      	ldr	r1, [pc, #344]	; (8007598 <scaraInitDuty+0xe38>)
 8007440:	4613      	mov	r3, r2
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	4413      	add	r3, r2
 8007446:	01db      	lsls	r3, r3, #7
 8007448:	440b      	add	r3, r1
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	4951      	ldr	r1, [pc, #324]	; (8007598 <scaraInitDuty+0xe38>)
 8007454:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007458:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 800745c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007460:	3301      	adds	r3, #1
 8007462:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007466:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800746a:	2b03      	cmp	r3, #3
 800746c:	d9cf      	bls.n	800740e <scaraInitDuty+0xcae>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 800746e:	2300      	movs	r3, #0
 8007470:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007474:	e04d      	b.n	8007512 <scaraInitDuty+0xdb2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007476:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 800747a:	4947      	ldr	r1, [pc, #284]	; (8007598 <scaraInitDuty+0xe38>)
 800747c:	4613      	mov	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4413      	add	r3, r2
 8007482:	01db      	lsls	r3, r3, #7
 8007484:	440b      	add	r3, r1
 8007486:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 800748e:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007492:	4b41      	ldr	r3, [pc, #260]	; (8007598 <scaraInitDuty+0xe38>)
 8007494:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800749c:	4c3e      	ldr	r4, [pc, #248]	; (8007598 <scaraInitDuty+0xe38>)
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	01db      	lsls	r3, r3, #7
 80074a6:	4423      	add	r3, r4
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ac:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80074b0:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80074b4:	4613      	mov	r3, r2
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	4413      	add	r3, r2
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80074c0:	4a35      	ldr	r2, [pc, #212]	; (8007598 <scaraInitDuty+0xe38>)
 80074c2:	1898      	adds	r0, r3, r2
 80074c4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80074c8:	4a34      	ldr	r2, [pc, #208]	; (800759c <scaraInitDuty+0xe3c>)
 80074ca:	5cd1      	ldrb	r1, [r2, r3]
 80074cc:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80074d0:	f107 0208 	add.w	r2, r7, #8
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4413      	add	r3, r2
 80074d8:	ed93 7b00 	vldr	d7, [r3]
 80074dc:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80074e0:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80074e4:	eeb0 2a45 	vmov.f32	s4, s10
 80074e8:	eef0 2a65 	vmov.f32	s5, s11
 80074ec:	eeb0 1a46 	vmov.f32	s2, s12
 80074f0:	eef0 1a66 	vmov.f32	s3, s13
 80074f4:	2201      	movs	r2, #1
 80074f6:	eeb0 0a47 	vmov.f32	s0, s14
 80074fa:	eef0 0a67 	vmov.f32	s1, s15
 80074fe:	f002 f8f1 	bl	80096e4 <scaraInitScurve>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007508:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800750c:	3301      	adds	r3, #1
 800750e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007512:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007516:	2b03      	cmp	r3, #3
 8007518:	d9ad      	bls.n	8007476 <scaraInitDuty+0xd16>
 800751a:	e005      	b.n	8007528 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800751c:	2308      	movs	r3, #8
 800751e:	e031      	b.n	8007584 <scaraInitDuty+0xe24>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8007520:	2305      	movs	r3, #5
 8007522:	e02f      	b.n	8007584 <scaraInitDuty+0xe24>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007524:	2302      	movs	r3, #2
 8007526:	e02d      	b.n	8007584 <scaraInitDuty+0xe24>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8007528:	491d      	ldr	r1, [pc, #116]	; (80075a0 <scaraInitDuty+0xe40>)
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <scaraInitDuty+0xe38>)
 8007538:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	4917      	ldr	r1, [pc, #92]	; (80075a0 <scaraInitDuty+0xe40>)
 8007542:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 8007546:	4917      	ldr	r1, [pc, #92]	; (80075a4 <scaraInitDuty+0xe44>)
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8007554:	4b10      	ldr	r3, [pc, #64]	; (8007598 <scaraInitDuty+0xe38>)
 8007556:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	4911      	ldr	r1, [pc, #68]	; (80075a4 <scaraInitDuty+0xe44>)
 8007560:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 8007564:	4910      	ldr	r1, [pc, #64]	; (80075a8 <scaraInitDuty+0xe48>)
 8007566:	f04f 0200 	mov.w	r2, #0
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <scaraInitDuty+0xe38>)
 8007574:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	490a      	ldr	r1, [pc, #40]	; (80075a8 <scaraInitDuty+0xe48>)
 800757e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800758a:	46bd      	mov	sp, r7
 800758c:	ecbd 8b02 	vpop	{d8}
 8007590:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007594:	b004      	add	sp, #16
 8007596:	4770      	bx	lr
 8007598:	2000def8 	.word	0x2000def8
 800759c:	20002088 	.word	0x20002088
 80075a0:	2000eab8 	.word	0x2000eab8
 80075a4:	2000ec38 	.word	0x2000ec38
 80075a8:	2000eb78 	.word	0x2000eb78

080075ac <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80075ac:	b082      	sub	sp, #8
 80075ae:	b5b0      	push	{r4, r5, r7, lr}
 80075b0:	b0b0      	sub	sp, #192	; 0xc0
 80075b2:	af2e      	add	r7, sp, #184	; 0xb8
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	f107 0118 	add.w	r1, r7, #24
 80075ba:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80075be:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80075c2:	4668      	mov	r0, sp
 80075c4:	f107 0320 	add.w	r3, r7, #32
 80075c8:	22b8      	movs	r2, #184	; 0xb8
 80075ca:	4619      	mov	r1, r3
 80075cc:	f00e fb28 	bl	8015c20 <memcpy>
 80075d0:	f107 0318 	add.w	r3, r7, #24
 80075d4:	cb0c      	ldmia	r3, {r2, r3}
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7fd fd9a 	bl	8005110 <kinematicInverse>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80075e2:	2307      	movs	r3, #7
 80075e4:	e08e      	b.n	8007704 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 80075e6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 80075f0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 80075fa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007604:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 800760e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007618:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 8007622:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8007626:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800762a:	f7f8 fe2d 	bl	8000288 <__aeabi_dsub>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007638:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800763c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007640:	f7f8 fe22 	bl	8000288 <__aeabi_dsub>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 800764e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007652:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007656:	f7f8 fe17 	bl	8000288 <__aeabi_dsub>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007670:	f7f8 ffc2 	bl	80005f8 <__aeabi_dmul>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4614      	mov	r4, r2
 800767a:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007688:	f7f8 ffb6 	bl	80005f8 <__aeabi_dmul>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4620      	mov	r0, r4
 8007692:	4629      	mov	r1, r5
 8007694:	f7f8 fdfa 	bl	800028c <__adddf3>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4614      	mov	r4, r2
 800769e:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80076ac:	f7f8 ffa4 	bl	80005f8 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7f8 fde8 	bl	800028c <__adddf3>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	ec43 2b17 	vmov	d7, r2, r3
 80076c4:	eeb0 0a47 	vmov.f32	s0, s14
 80076c8:	eef0 0a67 	vmov.f32	s1, s15
 80076cc:	f013 f8b8 	bl	801a840 <sqrt>
 80076d0:	eeb0 7a40 	vmov.f32	s14, s0
 80076d4:	eef0 7a60 	vmov.f32	s15, s1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800770e:	b002      	add	sp, #8
 8007710:	4770      	bx	lr
 8007712:	0000      	movs	r0, r0
 8007714:	0000      	movs	r0, r0
	...

08007718 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007718:	b082      	sub	sp, #8
 800771a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771e:	b0c5      	sub	sp, #276	; 0x114
 8007720:	af2e      	add	r7, sp, #184	; 0xb8
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007728:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 800772c:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8007730:	4668      	mov	r0, sp
 8007732:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007736:	22b8      	movs	r2, #184	; 0xb8
 8007738:	4619      	mov	r1, r3
 800773a:	f00e fa71 	bl	8015c20 <memcpy>
 800773e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007742:	cb0c      	ldmia	r3, {r2, r3}
 8007744:	4630      	mov	r0, r6
 8007746:	f7fd fce3 	bl	8005110 <kinematicInverse>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007750:	2307      	movs	r3, #7
 8007752:	e17b      	b.n	8007a4c <scaraInitCircle+0x334>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8007754:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007758:	2b01      	cmp	r3, #1
 800775a:	d006      	beq.n	800776a <scaraInitCircle+0x52>
 800775c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d001      	beq.n	800776a <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8007766:	2306      	movs	r3, #6
 8007768:	e170      	b.n	8007a4c <scaraInitCircle+0x334>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 800776a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800776e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007772:	f7f8 fd89 	bl	8000288 <__aeabi_dsub>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 800777e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007782:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007786:	f7f8 fd7f 	bl	8000288 <__aeabi_dsub>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007792:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007796:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800779a:	f7f8 fd75 	bl	8000288 <__aeabi_dsub>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 80077a6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80077aa:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80077ae:	f7f8 fd6b 	bl	8000288 <__aeabi_dsub>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 80077ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4692      	mov	sl, r2
 80077cc:	469b      	mov	fp, r3
 80077ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80077d6:	f7f8 ff0f 	bl	80005f8 <__aeabi_dmul>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4650      	mov	r0, sl
 80077e0:	4659      	mov	r1, fp
 80077e2:	f7f8 fd53 	bl	800028c <__adddf3>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	ec43 2b17 	vmov	d7, r2, r3
 80077ee:	eeb0 0a47 	vmov.f32	s0, s14
 80077f2:	eef0 0a67 	vmov.f32	s1, s15
 80077f6:	f013 f823 	bl	801a840 <sqrt>
 80077fa:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 80077fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007802:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007806:	f7f8 fef7 	bl	80005f8 <__aeabi_dmul>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4692      	mov	sl, r2
 8007810:	469b      	mov	fp, r3
 8007812:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007816:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800781a:	f7f8 feed 	bl	80005f8 <__aeabi_dmul>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4650      	mov	r0, sl
 8007824:	4659      	mov	r1, fp
 8007826:	f7f8 fd31 	bl	800028c <__adddf3>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	ec43 2b17 	vmov	d7, r2, r3
 8007832:	eeb0 0a47 	vmov.f32	s0, s14
 8007836:	eef0 0a67 	vmov.f32	s1, s15
 800783a:	f013 f801 	bl	801a840 <sqrt>
 800783e:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007846:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800784a:	f7f8 fd1d 	bl	8000288 <__aeabi_dsub>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4690      	mov	r8, r2
 8007854:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	4b84      	ldr	r3, [pc, #528]	; (8007a70 <scaraInitCircle+0x358>)
 800785e:	4640      	mov	r0, r8
 8007860:	4649      	mov	r1, r9
 8007862:	f7f9 f959 	bl	8000b18 <__aeabi_dcmpgt>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 800786c:	2306      	movs	r3, #6
 800786e:	e0ed      	b.n	8007a4c <scaraInitCircle+0x334>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007870:	a37b      	add	r3, pc, #492	; (adr r3, 8007a60 <scaraInitCircle+0x348>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800787a:	f7f9 f92f 	bl	8000adc <__aeabi_dcmplt>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <scaraInitCircle+0x180>
 8007884:	a376      	add	r3, pc, #472	; (adr r3, 8007a60 <scaraInitCircle+0x348>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800788e:	f7f9 f925 	bl	8000adc <__aeabi_dcmplt>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007898:	2306      	movs	r3, #6
 800789a:	e0d7      	b.n	8007a4c <scaraInitCircle+0x334>
	}

	angle_start = atan2(y_start, x_start);
 800789c:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 80078a0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80078a4:	f012 ffca 	bl	801a83c <atan2>
 80078a8:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 80078ac:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 80078b0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80078b4:	f012 ffc2 	bl	801a83c <atan2>
 80078b8:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 80078bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078c4:	f7f8 fce0 	bl	8000288 <__aeabi_dsub>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80078dc:	f7f9 f8fe 	bl	8000adc <__aeabi_dcmplt>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d015      	beq.n	8007912 <scaraInitCircle+0x1fa>
 80078e6:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dd11      	ble.n	8007912 <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 80078ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f0:	603b      	str	r3, [r7, #0]
 80078f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078f8:	607b      	str	r3, [r7, #4]
 80078fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fe:	a15a      	add	r1, pc, #360	; (adr r1, 8007a68 <scaraInitCircle+0x350>)
 8007900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007904:	f7f8 fcc0 	bl	8000288 <__aeabi_dsub>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007910:	e01d      	b.n	800794e <scaraInitCircle+0x236>
	}else if(delta_angle > 0 && dir < 0){
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	f04f 0300 	mov.w	r3, #0
 800791a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800791e:	f7f9 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d012      	beq.n	800794e <scaraInitCircle+0x236>
 8007928:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800792c:	2b00      	cmp	r3, #0
 800792e:	da0e      	bge.n	800794e <scaraInitCircle+0x236>
		delta_angle = 2*PI - fabs(delta_angle);
 8007930:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8007932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007934:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007938:	4622      	mov	r2, r4
 800793a:	462b      	mov	r3, r5
 800793c:	a14a      	add	r1, pc, #296	; (adr r1, 8007a68 <scaraInitCircle+0x350>)
 800793e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007942:	f7f8 fca1 	bl	8000288 <__aeabi_dsub>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 800794e:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8007952:	f7f8 fde7 	bl	8000524 <__aeabi_i2d>
 8007956:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800795a:	f7f8 fe4d 	bl	80005f8 <__aeabi_dmul>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4610      	mov	r0, r2
 8007964:	4619      	mov	r1, r3
 8007966:	f04f 0200 	mov.w	r2, #0
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	f7f9 f8b5 	bl	8000adc <__aeabi_dcmplt>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <scaraInitCircle+0x26c>
		delta_angle = fabs(delta_angle);
 8007978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797a:	653b      	str	r3, [r7, #80]	; 0x50
 800797c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007982:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007984:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007988:	b25a      	sxtb	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800798e:	68f9      	ldr	r1, [r7, #12]
 8007990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007994:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8007998:	68f9      	ldr	r1, [r7, #12]
 800799a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800799e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 80079ac:	68f9      	ldr	r1, [r7, #12]
 80079ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079b2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 80079b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079be:	f7f8 fe1b 	bl	80005f8 <__aeabi_dmul>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 80079cc:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80079d0:	68f9      	ldr	r1, [r7, #12]
 80079d2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 80079d6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80079da:	68f9      	ldr	r1, [r7, #12]
 80079dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 80079e0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80079e4:	68f9      	ldr	r1, [r7, #12]
 80079e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 80079ea:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80079ee:	68f9      	ldr	r1, [r7, #12]
 80079f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 80079f4:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80079f8:	68f9      	ldr	r1, [r7, #12]
 80079fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 80079fe:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8007a08:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007a0c:	68f9      	ldr	r1, [r7, #12]
 8007a0e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 8007a12:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8007a1c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a2c:	68f9      	ldr	r1, [r7, #12]
 8007a2e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007a38:	68f9      	ldr	r1, [r7, #12]
 8007a3a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007a44:	68f9      	ldr	r1, [r7, #12]
 8007a46:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	375c      	adds	r7, #92	; 0x5c
 8007a50:	46bd      	mov	sp, r7
 8007a52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a56:	b002      	add	sp, #8
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w
 8007a60:	9999999a 	.word	0x9999999a
 8007a64:	3fb99999 	.word	0x3fb99999
 8007a68:	60000000 	.word	0x60000000
 8007a6c:	401921fb 	.word	0x401921fb
 8007a70:	3ff00000 	.word	0x3ff00000

08007a74 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6178      	str	r0, [r7, #20]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	ed87 0b02 	vstr	d0, [r7, #8]
 8007a82:	ed87 1b00 	vstr	d1, [r7]
 8007a86:	74fb      	strb	r3, [r7, #19]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007a8c:	7cfb      	ldrb	r3, [r7, #19]
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d004      	beq.n	8007a9c <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	d001      	beq.n	8007a9c <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007a98:	2306      	movs	r3, #6
 8007a9a:	e032      	b.n	8007b02 <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007a9c:	7cbb      	ldrb	r3, [r7, #18]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d110      	bne.n	8007ac4 <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8007aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007aaa:	f7f8 fecf 	bl	800084c <__aeabi_ddiv>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	6979      	ldr	r1, [r7, #20]
 8007ab4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007abe:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007ac2:	e01d      	b.n	8007b00 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007ac4:	7cbb      	ldrb	r3, [r7, #18]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d118      	bne.n	8007afc <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <scaraInitLinear+0x98>)
 8007ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ad4:	f7f8 fd90 	bl	80005f8 <__aeabi_dmul>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	6979      	ldr	r1, [r7, #20]
 8007ade:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007ae8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007aec:	f7f8 feae 	bl	800084c <__aeabi_ddiv>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	6979      	ldr	r1, [r7, #20]
 8007af6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007afa:	e001      	b.n	8007b00 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007afc:	2306      	movs	r3, #6
 8007afe:	e000      	b.n	8007b02 <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40877000 	.word	0x40877000

08007b10 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007b10:	b5b0      	push	{r4, r5, r7, lr}
 8007b12:	b096      	sub	sp, #88	; 0x58
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	61f8      	str	r0, [r7, #28]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	ed87 0b04 	vstr	d0, [r7, #16]
 8007b1e:	ed87 1b02 	vstr	d1, [r7, #8]
 8007b22:	ed87 2b00 	vstr	d2, [r7]
 8007b26:	76fb      	strb	r3, [r7, #27]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b38:	f7f8 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d009      	beq.n	8007b56 <scaraInitLSPB1+0x46>
		total_s = -total_s;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007b4c:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	22ff      	movs	r2, #255	; 0xff
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e002      	b.n	8007b5c <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007b5c:	7efb      	ldrb	r3, [r7, #27]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d12c      	bne.n	8007bbc <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007b62:	7ebb      	ldrb	r3, [r7, #26]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d10f      	bne.n	8007b88 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	4b98      	ldr	r3, [pc, #608]	; (8007dd0 <scaraInitLSPB1+0x2c0>)
 8007b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b72:	f7f8 fd41 	bl	80005f8 <__aeabi_dmul>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007b86:	e073      	b.n	8007c70 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007b88:	7ebb      	ldrb	r3, [r7, #26]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d170      	bne.n	8007c70 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	4b90      	ldr	r3, [pc, #576]	; (8007dd4 <scaraInitLSPB1+0x2c4>)
 8007b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b98:	f7f8 fd2e 	bl	80005f8 <__aeabi_dmul>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	4b89      	ldr	r3, [pc, #548]	; (8007dd0 <scaraInitLSPB1+0x2c0>)
 8007baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bae:	f7f8 fd23 	bl	80005f8 <__aeabi_dmul>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007bba:	e059      	b.n	8007c70 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007bbc:	7efb      	ldrb	r3, [r7, #27]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d112      	bne.n	8007be8 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007bc2:	7ebb      	ldrb	r3, [r7, #26]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d153      	bne.n	8007c70 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007bc8:	a373      	add	r3, pc, #460	; (adr r3, 8007d98 <scaraInitLSPB1+0x288>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bd2:	f7f8 fd11 	bl	80005f8 <__aeabi_dmul>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007be6:	e043      	b.n	8007c70 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007be8:	7efb      	ldrb	r3, [r7, #27]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d112      	bne.n	8007c14 <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007bee:	7ebb      	ldrb	r3, [r7, #26]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d13d      	bne.n	8007c70 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007bf4:	a368      	add	r3, pc, #416	; (adr r3, 8007d98 <scaraInitLSPB1+0x288>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c12:	e02d      	b.n	8007c70 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8007c14:	7efb      	ldrb	r3, [r7, #27]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d112      	bne.n	8007c40 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c1a:	7ebb      	ldrb	r3, [r7, #26]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d127      	bne.n	8007c70 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007c20:	a35f      	add	r3, pc, #380	; (adr r3, 8007da0 <scaraInitLSPB1+0x290>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c2a:	f7f8 fce5 	bl	80005f8 <__aeabi_dmul>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c3e:	e017      	b.n	8007c70 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007c40:	7efb      	ldrb	r3, [r7, #27]
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d112      	bne.n	8007c6c <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c46:	7ebb      	ldrb	r3, [r7, #26]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d111      	bne.n	8007c70 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007c4c:	a356      	add	r3, pc, #344	; (adr r3, 8007da8 <scaraInitLSPB1+0x298>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c56:	f7f8 fccf 	bl	80005f8 <__aeabi_dmul>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c6a:	e001      	b.n	8007c70 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007c6c:	2306      	movs	r3, #6
 8007c6e:	e201      	b.n	8008074 <scaraInitLSPB1+0x564>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007c70:	7ebb      	ldrb	r3, [r7, #26]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	f040 80f2 	bne.w	8007e5c <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8007c78:	a34d      	add	r3, pc, #308	; (adr r3, 8007db0 <scaraInitLSPB1+0x2a0>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007c82:	f7f8 ff2b 	bl	8000adc <__aeabi_dcmplt>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01d      	beq.n	8007cc8 <scaraInitLSPB1+0x1b8>
 8007c8c:	f04f 0200 	mov.w	r2, #0
 8007c90:	4b51      	ldr	r3, [pc, #324]	; (8007dd8 <scaraInitLSPB1+0x2c8>)
 8007c92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c96:	f7f8 ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d013      	beq.n	8007cc8 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	4b4d      	ldr	r3, [pc, #308]	; (8007ddc <scaraInitLSPB1+0x2cc>)
 8007ca6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007caa:	f7f8 fca5 	bl	80005f8 <__aeabi_dmul>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cba:	f7f8 fdc7 	bl	800084c <__aeabi_ddiv>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007cc6:	e0a4      	b.n	8007e12 <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8007cc8:	a339      	add	r3, pc, #228	; (adr r3, 8007db0 <scaraInitLSPB1+0x2a0>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cd2:	f7f8 ff03 	bl	8000adc <__aeabi_dcmplt>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01d      	beq.n	8007d18 <scaraInitLSPB1+0x208>
 8007cdc:	a336      	add	r3, pc, #216	; (adr r3, 8007db8 <scaraInitLSPB1+0x2a8>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007ce6:	f7f8 ff17 	bl	8000b18 <__aeabi_dcmpgt>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d013      	beq.n	8007d18 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <scaraInitLSPB1+0x2cc>)
 8007cf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cfa:	f7f8 fc7d 	bl	80005f8 <__aeabi_dmul>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4610      	mov	r0, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d0a:	f7f8 fd9f 	bl	800084c <__aeabi_ddiv>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007d16:	e07c      	b.n	8007e12 <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 8007d18:	a325      	add	r3, pc, #148	; (adr r3, 8007db0 <scaraInitLSPB1+0x2a0>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d22:	f7f8 fedb 	bl	8000adc <__aeabi_dcmplt>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <scaraInitLSPB1+0x234>
 8007d2c:	a320      	add	r3, pc, #128	; (adr r3, 8007db0 <scaraInitLSPB1+0x2a0>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d36:	f7f8 fed1 	bl	8000adc <__aeabi_dcmplt>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8007d40:	2309      	movs	r3, #9
 8007d42:	e197      	b.n	8008074 <scaraInitLSPB1+0x564>
		}
		else{
			if(tf < 0.001){
 8007d44:	a31e      	add	r3, pc, #120	; (adr r3, 8007dc0 <scaraInitLSPB1+0x2b0>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d4e:	f7f8 fec5 	bl	8000adc <__aeabi_dcmplt>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007d58:	2309      	movs	r3, #9
 8007d5a:	e18b      	b.n	8008074 <scaraInitLSPB1+0x564>
			}else{
				v_lim = total_s/tf;
 8007d5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d64:	f7f8 fd72 	bl	800084c <__aeabi_ddiv>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8007d70:	a315      	add	r3, pc, #84	; (adr r3, 8007dc8 <scaraInitLSPB1+0x2b8>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007d7a:	f7f8 fc3d 	bl	80005f8 <__aeabi_dmul>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d86:	f7f8 fea9 	bl	8000adc <__aeabi_dcmplt>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d027      	beq.n	8007de0 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007d90:	230a      	movs	r3, #10
 8007d92:	e16f      	b.n	8008074 <scaraInitLSPB1+0x564>
 8007d94:	f3af 8000 	nop.w
 8007d98:	14000000 	.word	0x14000000
 8007d9c:	4000f6f0 	.word	0x4000f6f0
 8007da0:	00000000 	.word	0x00000000
 8007da4:	405c2000 	.word	0x405c2000
 8007da8:	6b259425 	.word	0x6b259425
 8007dac:	40069b91 	.word	0x40069b91
 8007db0:	9999999a 	.word	0x9999999a
 8007db4:	3fb99999 	.word	0x3fb99999
 8007db8:	33333333 	.word	0x33333333
 8007dbc:	3fc33333 	.word	0x3fc33333
 8007dc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007dc4:	3f50624d 	.word	0x3f50624d
 8007dc8:	9999999a 	.word	0x9999999a
 8007dcc:	3ff19999 	.word	0x3ff19999
 8007dd0:	40877000 	.word	0x40877000
 8007dd4:	407f4000 	.word	0x407f4000
 8007dd8:	40080000 	.word	0x40080000
 8007ddc:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8007de0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	f7f8 fa50 	bl	800028c <__adddf3>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007df4:	f7f8 fe90 	bl	8000b18 <__aeabi_dcmpgt>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 8007dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	f7f8 fa41 	bl	800028c <__adddf3>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8007e12:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e1a:	f7f8 fd17 	bl	800084c <__aeabi_ddiv>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e26:	f7f8 fa2f 	bl	8000288 <__aeabi_dsub>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e3a:	f7f8 fd07 	bl	800084c <__aeabi_ddiv>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 8007e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e4e:	f7f8 fa1b 	bl	8000288 <__aeabi_dsub>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007e5a:	e0a9      	b.n	8007fb0 <scaraInitLSPB1+0x4a0>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007e5c:	7ebb      	ldrb	r3, [r7, #26]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 80a6 	bne.w	8007fb0 <scaraInitLSPB1+0x4a0>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 8007e64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e6c:	f7f8 fbc4 	bl	80005f8 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4614      	mov	r4, r2
 8007e76:	461d      	mov	r5, r3
 8007e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e7c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e80:	f7f8 fbba 	bl	80005f8 <__aeabi_dmul>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4620      	mov	r0, r4
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7f8 fe44 	bl	8000b18 <__aeabi_dcmpgt>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d058      	beq.n	8007f48 <scaraInitLSPB1+0x438>
			if(total_s/v_design < 0.3){ //td too small
 8007e96:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e9e:	f7f8 fcd5 	bl	800084c <__aeabi_ddiv>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	a375      	add	r3, pc, #468	; (adr r3, 8008080 <scaraInitLSPB1+0x570>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 fe14 	bl	8000adc <__aeabi_dcmplt>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <scaraInitLSPB1+0x3c0>
				//recalculate v_design
				v_design = total_s/0.3;
 8007eba:	a371      	add	r3, pc, #452	; (adr r3, 8008080 <scaraInitLSPB1+0x570>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ec4:	f7f8 fcc2 	bl	800084c <__aeabi_ddiv>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8007ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ed4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ed8:	f7f8 fcb8 	bl	800084c <__aeabi_ddiv>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	a368      	add	r3, pc, #416	; (adr r3, 8008088 <scaraInitLSPB1+0x578>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 fdf7 	bl	8000adc <__aeabi_dcmplt>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <scaraInitLSPB1+0x3fa>
				//recalculate a_design
				a_design = v_design/0.1;
 8007ef4:	a364      	add	r3, pc, #400	; (adr r3, 8008088 <scaraInitLSPB1+0x578>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007efe:	f7f8 fca5 	bl	800084c <__aeabi_ddiv>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8007f0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f12:	f7f8 fc9b 	bl	800084c <__aeabi_ddiv>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007f1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f26:	f7f8 fc91 	bl	800084c <__aeabi_ddiv>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 8007f32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f36:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f3a:	f7f8 f9a7 	bl	800028c <__adddf3>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007f46:	e033      	b.n	8007fb0 <scaraInitLSPB1+0x4a0>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 8007f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	f7f8 f99c 	bl	800028c <__adddf3>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f60:	f7f8 fc74 	bl	800084c <__aeabi_ddiv>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f78:	f7f8 fc68 	bl	800084c <__aeabi_ddiv>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 8007f84:	f04f 0200 	mov.w	r2, #0
 8007f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f8c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f90:	f7f8 fc5c 	bl	800084c <__aeabi_ddiv>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8007f9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fa0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fa4:	f7f8 fc52 	bl	800084c <__aeabi_ddiv>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007fb0:	a337      	add	r3, pc, #220	; (adr r3, 8008090 <scaraInitLSPB1+0x580>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fba:	f7f8 fc47 	bl	800084c <__aeabi_ddiv>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	f7f8 fe0f 	bl	8000be8 <__aeabi_d2f>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	ee00 3a10 	vmov	s0, r3
 8007fd0:	f012 fbf2 	bl	801a7b8 <ceilf>
 8007fd4:	eef0 7a40 	vmov.f32	s15, s0
 8007fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fdc:	ee17 3a90 	vmov	r3, s15
 8007fe0:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8007fe2:	69f9      	ldr	r1, [r7, #28]
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8007ff0:	69f9      	ldr	r1, [r7, #28]
 8007ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ff6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8007ffa:	69f9      	ldr	r1, [r7, #28]
 8007ffc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008000:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8008004:	69f9      	ldr	r1, [r7, #28]
 8008006:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800800a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 800800e:	69f9      	ldr	r1, [r7, #28]
 8008010:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008014:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8008018:	69f9      	ldr	r1, [r7, #28]
 800801a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800801e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8008022:	69f9      	ldr	r1, [r7, #28]
 8008024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008028:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 800802c:	69f9      	ldr	r1, [r7, #28]
 800802e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008032:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 8008036:	69f9      	ldr	r1, [r7, #28]
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 8008044:	69f9      	ldr	r1, [r7, #28]
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008064:	f7f8 f910 	bl	8000288 <__aeabi_dsub>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	69f9      	ldr	r1, [r7, #28]
 800806e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3758      	adds	r7, #88	; 0x58
 8008078:	46bd      	mov	sp, r7
 800807a:	bdb0      	pop	{r4, r5, r7, pc}
 800807c:	f3af 8000 	nop.w
 8008080:	33333333 	.word	0x33333333
 8008084:	3fd33333 	.word	0x3fd33333
 8008088:	9999999a 	.word	0x9999999a
 800808c:	3fb99999 	.word	0x3fb99999
 8008090:	40000000 	.word	0x40000000
 8008094:	3f847ae1 	.word	0x3f847ae1

08008098 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 8008098:	b5b0      	push	{r4, r5, r7, lr}
 800809a:	b094      	sub	sp, #80	; 0x50
 800809c:	af00      	add	r7, sp, #0
 800809e:	61f8      	str	r0, [r7, #28]
 80080a0:	460b      	mov	r3, r1
 80080a2:	ed87 0b04 	vstr	d0, [r7, #16]
 80080a6:	ed87 1b02 	vstr	d1, [r7, #8]
 80080aa:	ed87 2b00 	vstr	d2, [r7]
 80080ae:	76fb      	strb	r3, [r7, #27]
 80080b0:	4613      	mov	r3, r2
 80080b2:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 80080b4:	f04f 0200 	mov.w	r2, #0
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080c0:	f7f8 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d009      	beq.n	80080de <scaraInitScurve1+0x46>
		total_s = -total_s;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80080d4:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e002      	b.n	80080e4 <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	2201      	movs	r2, #1
 80080e2:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 80080e4:	7efb      	ldrb	r3, [r7, #27]
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d12c      	bne.n	8008144 <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80080ea:	7ebb      	ldrb	r3, [r7, #26]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10f      	bne.n	8008110 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	4b90      	ldr	r3, [pc, #576]	; (8008338 <scaraInitScurve1+0x2a0>)
 80080f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080fa:	f7f8 fa7d 	bl	80005f8 <__aeabi_dmul>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800810e:	e073      	b.n	80081f8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008110:	7ebb      	ldrb	r3, [r7, #26]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d170      	bne.n	80081f8 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	4b88      	ldr	r3, [pc, #544]	; (800833c <scaraInitScurve1+0x2a4>)
 800811c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008120:	f7f8 fa6a 	bl	80005f8 <__aeabi_dmul>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	4b81      	ldr	r3, [pc, #516]	; (8008338 <scaraInitScurve1+0x2a0>)
 8008132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008136:	f7f8 fa5f 	bl	80005f8 <__aeabi_dmul>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008142:	e059      	b.n	80081f8 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8008144:	7efb      	ldrb	r3, [r7, #27]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d112      	bne.n	8008170 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800814a:	7ebb      	ldrb	r3, [r7, #26]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d153      	bne.n	80081f8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8008150:	a36d      	add	r3, pc, #436	; (adr r3, 8008308 <scaraInitScurve1+0x270>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800815a:	f7f8 fa4d 	bl	80005f8 <__aeabi_dmul>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800816e:	e043      	b.n	80081f8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 8008170:	7efb      	ldrb	r3, [r7, #27]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d112      	bne.n	800819c <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008176:	7ebb      	ldrb	r3, [r7, #26]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d13d      	bne.n	80081f8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 800817c:	a362      	add	r3, pc, #392	; (adr r3, 8008308 <scaraInitScurve1+0x270>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008186:	f7f8 fa37 	bl	80005f8 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008196:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800819a:	e02d      	b.n	80081f8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 800819c:	7efb      	ldrb	r3, [r7, #27]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d112      	bne.n	80081c8 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80081a2:	7ebb      	ldrb	r3, [r7, #26]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d127      	bne.n	80081f8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80081a8:	a359      	add	r3, pc, #356	; (adr r3, 8008310 <scaraInitScurve1+0x278>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081b2:	f7f8 fa21 	bl	80005f8 <__aeabi_dmul>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80081be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80081c6:	e017      	b.n	80081f8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 80081c8:	7efb      	ldrb	r3, [r7, #27]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d112      	bne.n	80081f4 <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80081ce:	7ebb      	ldrb	r3, [r7, #26]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d111      	bne.n	80081f8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 80081d4:	a350      	add	r3, pc, #320	; (adr r3, 8008318 <scaraInitScurve1+0x280>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081de:	f7f8 fa0b 	bl	80005f8 <__aeabi_dmul>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80081ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80081f2:	e001      	b.n	80081f8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80081f4:	2306      	movs	r3, #6
 80081f6:	e24c      	b.n	8008692 <scaraInitScurve1+0x5fa>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 80081f8:	7ebb      	ldrb	r3, [r7, #26]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	f040 80fc 	bne.w	80083f8 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008200:	a347      	add	r3, pc, #284	; (adr r3, 8008320 <scaraInitScurve1+0x288>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800820a:	f7f8 fc67 	bl	8000adc <__aeabi_dcmplt>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01d      	beq.n	8008250 <scaraInitScurve1+0x1b8>
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	4b49      	ldr	r3, [pc, #292]	; (8008340 <scaraInitScurve1+0x2a8>)
 800821a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800821e:	f7f8 fc7b 	bl	8000b18 <__aeabi_dcmpgt>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d013      	beq.n	8008250 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 8008228:	f04f 0200 	mov.w	r2, #0
 800822c:	4b45      	ldr	r3, [pc, #276]	; (8008344 <scaraInitScurve1+0x2ac>)
 800822e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008242:	f7f8 fb03 	bl	800084c <__aeabi_ddiv>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800824e:	e094      	b.n	800837a <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8008250:	a333      	add	r3, pc, #204	; (adr r3, 8008320 <scaraInitScurve1+0x288>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800825a:	f7f8 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01d      	beq.n	80082a0 <scaraInitScurve1+0x208>
 8008264:	a330      	add	r3, pc, #192	; (adr r3, 8008328 <scaraInitScurve1+0x290>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800826e:	f7f8 fc53 	bl	8000b18 <__aeabi_dcmpgt>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d013      	beq.n	80082a0 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 8008278:	f04f 0200 	mov.w	r2, #0
 800827c:	4b31      	ldr	r3, [pc, #196]	; (8008344 <scaraInitScurve1+0x2ac>)
 800827e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008282:	f7f8 f9b9 	bl	80005f8 <__aeabi_dmul>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4610      	mov	r0, r2
 800828c:	4619      	mov	r1, r3
 800828e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008292:	f7f8 fadb 	bl	800084c <__aeabi_ddiv>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800829e:	e06c      	b.n	800837a <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 80082a0:	a31f      	add	r3, pc, #124	; (adr r3, 8008320 <scaraInitScurve1+0x288>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80082aa:	f7f8 fc17 	bl	8000adc <__aeabi_dcmplt>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <scaraInitScurve1+0x234>
 80082b4:	a31a      	add	r3, pc, #104	; (adr r3, 8008320 <scaraInitScurve1+0x288>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082be:	f7f8 fc0d 	bl	8000adc <__aeabi_dcmplt>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 80082c8:	2309      	movs	r3, #9
 80082ca:	e1e2      	b.n	8008692 <scaraInitScurve1+0x5fa>
		}else{
			v_lim = total_s/tf;
 80082cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082d4:	f7f8 faba 	bl	800084c <__aeabi_ddiv>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 80082e0:	a313      	add	r3, pc, #76	; (adr r3, 8008330 <scaraInitScurve1+0x298>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80082ea:	f7f8 f985 	bl	80005f8 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082f6:	f7f8 fbf1 	bl	8000adc <__aeabi_dcmplt>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d023      	beq.n	8008348 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008300:	230a      	movs	r3, #10
 8008302:	e1c6      	b.n	8008692 <scaraInitScurve1+0x5fa>
 8008304:	f3af 8000 	nop.w
 8008308:	14000000 	.word	0x14000000
 800830c:	4000f6f0 	.word	0x4000f6f0
 8008310:	00000000 	.word	0x00000000
 8008314:	405c2000 	.word	0x405c2000
 8008318:	6b259425 	.word	0x6b259425
 800831c:	40069b91 	.word	0x40069b91
 8008320:	9999999a 	.word	0x9999999a
 8008324:	3fb99999 	.word	0x3fb99999
 8008328:	33333333 	.word	0x33333333
 800832c:	3fc33333 	.word	0x3fc33333
 8008330:	9999999a 	.word	0x9999999a
 8008334:	3ff19999 	.word	0x3ff19999
 8008338:	40877000 	.word	0x40877000
 800833c:	407f4000 	.word	0x407f4000
 8008340:	401e0000 	.word	0x401e0000
 8008344:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008348:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	f7f7 ff9c 	bl	800028c <__adddf3>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800835c:	f7f8 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 8008366:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	f7f7 ff8d 	bl	800028c <__adddf3>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 800837a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	f7f7 ff83 	bl	800028c <__adddf3>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008392:	f7f8 f931 	bl	80005f8 <__aeabi_dmul>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4614      	mov	r4, r2
 800839c:	461d      	mov	r5, r3
 800839e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083a6:	f7f8 f927 	bl	80005f8 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4610      	mov	r0, r2
 80083b0:	4619      	mov	r1, r3
 80083b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80083b6:	f7f7 ff67 	bl	8000288 <__aeabi_dsub>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f8 fa43 	bl	800084c <__aeabi_ddiv>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 80083ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083d6:	f7f8 fa39 	bl	800084c <__aeabi_ddiv>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 80083e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80083ea:	f7f7 ff4d 	bl	8000288 <__aeabi_dsub>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80083f6:	e0be      	b.n	8008576 <scaraInitScurve1+0x4de>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80083f8:	7ebb      	ldrb	r3, [r7, #26]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 80bb 	bne.w	8008576 <scaraInitScurve1+0x4de>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 8008400:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008408:	f7f8 f8f6 	bl	80005f8 <__aeabi_dmul>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4614      	mov	r4, r2
 8008412:	461d      	mov	r5, r3
 8008414:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	f7f7 ff36 	bl	800028c <__adddf3>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4610      	mov	r0, r2
 8008426:	4619      	mov	r1, r3
 8008428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800842c:	f7f8 f8e4 	bl	80005f8 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f8 fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d05e      	beq.n	8008500 <scaraInitScurve1+0x468>
			if(total_s/v_design < 0.3){ //tc too small
 8008442:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008446:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800844a:	f7f8 f9ff 	bl	800084c <__aeabi_ddiv>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4610      	mov	r0, r2
 8008454:	4619      	mov	r1, r3
 8008456:	a395      	add	r3, pc, #596	; (adr r3, 80086ac <scaraInitScurve1+0x614>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f8 fb3e 	bl	8000adc <__aeabi_dcmplt>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <scaraInitScurve1+0x3e4>
				//recalculate v_design
				v_design = total_s/0.3;
 8008466:	a391      	add	r3, pc, #580	; (adr r3, 80086ac <scaraInitScurve1+0x614>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008470:	f7f8 f9ec 	bl	800084c <__aeabi_ddiv>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 800847c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008480:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008484:	f7f8 f9e2 	bl	800084c <__aeabi_ddiv>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4610      	mov	r0, r2
 800848e:	4619      	mov	r1, r3
 8008490:	a388      	add	r3, pc, #544	; (adr r3, 80086b4 <scaraInitScurve1+0x61c>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 fb21 	bl	8000adc <__aeabi_dcmplt>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <scaraInitScurve1+0x41e>
				//recalculate a_design
				a_design = v_design/0.1;
 80084a0:	a384      	add	r3, pc, #528	; (adr r3, 80086b4 <scaraInitScurve1+0x61c>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084aa:	f7f8 f9cf 	bl	800084c <__aeabi_ddiv>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 80084b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084be:	f7f8 f9c5 	bl	800084c <__aeabi_ddiv>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 80084ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084d2:	f7f8 f9bb 	bl	800084c <__aeabi_ddiv>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80084de:	f7f7 fed5 	bl	800028c <__adddf3>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 80084ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80084f2:	f7f7 fecb 	bl	800028c <__adddf3>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80084fe:	e03a      	b.n	8008576 <scaraInitScurve1+0x4de>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008500:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	f7f7 fec0 	bl	800028c <__adddf3>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008518:	f7f8 f998 	bl	800084c <__aeabi_ddiv>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	4b5d      	ldr	r3, [pc, #372]	; (80086a0 <scaraInitScurve1+0x608>)
 800852a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800852e:	f7f8 f98d 	bl	800084c <__aeabi_ddiv>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	4b59      	ldr	r3, [pc, #356]	; (80086a4 <scaraInitScurve1+0x60c>)
 8008540:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4610      	mov	r0, r2
 800854e:	4619      	mov	r1, r3
 8008550:	f04f 0200 	mov.w	r2, #0
 8008554:	4b52      	ldr	r3, [pc, #328]	; (80086a0 <scaraInitScurve1+0x608>)
 8008556:	f7f8 f979 	bl	800084c <__aeabi_ddiv>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 8008562:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008566:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800856a:	f7f8 f96f 	bl	800084c <__aeabi_ddiv>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 8008576:	69f9      	ldr	r1, [r7, #28]
 8008578:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800857c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008586:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 800858a:	69f9      	ldr	r1, [r7, #28]
 800858c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008590:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 8008594:	69f9      	ldr	r1, [r7, #28]
 8008596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800859a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 800859e:	69f9      	ldr	r1, [r7, #28]
 80085a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 80085b2:	69f9      	ldr	r1, [r7, #28]
 80085b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085b8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 80085bc:	69f9      	ldr	r1, [r7, #28]
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 80085ca:	69f9      	ldr	r1, [r7, #28]
 80085cc:	f04f 0200 	mov.w	r2, #0
 80085d0:	f04f 0300 	mov.w	r3, #0
 80085d4:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	4b2f      	ldr	r3, [pc, #188]	; (80086a8 <scaraInitScurve1+0x610>)
 80085ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085f0:	f7f8 f802 	bl	80005f8 <__aeabi_dmul>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4610      	mov	r0, r2
 80085fa:	4619      	mov	r1, r3
 80085fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008600:	f7f7 fffa 	bl	80005f8 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800860c:	f7f8 f91e 	bl	800084c <__aeabi_ddiv>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	69f9      	ldr	r1, [r7, #28]
 8008616:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 800861a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	f7f7 fe33 	bl	800028c <__adddf3>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4610      	mov	r0, r2
 800862c:	4619      	mov	r1, r3
 800862e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008632:	f7f7 ffe1 	bl	80005f8 <__aeabi_dmul>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4610      	mov	r0, r2
 800863c:	4619      	mov	r1, r3
 800863e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008642:	f7f7 ffd9 	bl	80005f8 <__aeabi_dmul>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	69f9      	ldr	r1, [r7, #28]
 800864c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <scaraInitScurve1+0x610>)
 8008656:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800865a:	f7f7 ffcd 	bl	80005f8 <__aeabi_dmul>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	69f9      	ldr	r1, [r7, #28]
 8008664:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 8008668:	f04f 0200 	mov.w	r2, #0
 800866c:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <scaraInitScurve1+0x610>)
 800866e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008672:	f7f7 ffc1 	bl	80005f8 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4610      	mov	r0, r2
 800867c:	4619      	mov	r1, r3
 800867e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008682:	f7f7 ffb9 	bl	80005f8 <__aeabi_dmul>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	69f9      	ldr	r1, [r7, #28]
 800868c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3750      	adds	r7, #80	; 0x50
 8008696:	46bd      	mov	sp, r7
 8008698:	bdb0      	pop	{r4, r5, r7, pc}
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w
 80086a0:	40100000 	.word	0x40100000
 80086a4:	40080000 	.word	0x40080000
 80086a8:	40180000 	.word	0x40180000
 80086ac:	33333333 	.word	0x33333333
 80086b0:	3fd33333 	.word	0x3fd33333
 80086b4:	9999999a 	.word	0x9999999a
 80086b8:	3fb99999 	.word	0x3fb99999

080086bc <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 80086bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80086c0:	b08a      	sub	sp, #40	; 0x28
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80086d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80086da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80086e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	f04f 0300 	mov.w	r3, #0
 80086f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086f4:	f7f8 fa06 	bl	8000b04 <__aeabi_dcmpge>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d05b      	beq.n	80087b6 <scaraFlowLSPB1+0xfa>
 80086fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008706:	f7f8 f9f3 	bl	8000af0 <__aeabi_dcmple>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d052      	beq.n	80087b6 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 fda8 	bl	800028c <__adddf3>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	68f9      	ldr	r1, [r7, #12]
 8008742:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008756:	f7f7 ff4f 	bl	80005f8 <__aeabi_dmul>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4620      	mov	r0, r4
 8008760:	4629      	mov	r1, r5
 8008762:	f7f7 fd93 	bl	800028c <__adddf3>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4614      	mov	r4, r2
 800876c:	461d      	mov	r5, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	4b98      	ldr	r3, [pc, #608]	; (80089dc <scaraFlowLSPB1+0x320>)
 800877a:	f7f7 ff3d 	bl	80005f8 <__aeabi_dmul>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4610      	mov	r0, r2
 8008784:	4619      	mov	r1, r3
 8008786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878a:	f7f7 ff35 	bl	80005f8 <__aeabi_dmul>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4610      	mov	r0, r2
 8008794:	4619      	mov	r1, r3
 8008796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4620      	mov	r0, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	f7f7 fd71 	bl	800028c <__adddf3>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	68f9      	ldr	r1, [r7, #12]
 80087b0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80087b4:	e10b      	b.n	80089ce <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 80087b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087be:	f7f8 f98d 	bl	8000adc <__aeabi_dcmplt>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d054      	beq.n	8008872 <scaraFlowLSPB1+0x1b6>
 80087c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087d0:	f7f8 f98e 	bl	8000af0 <__aeabi_dcmple>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d04b      	beq.n	8008872 <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008800:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008804:	f7f7 fef8 	bl	80005f8 <__aeabi_dmul>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4610      	mov	r0, r2
 800880e:	4619      	mov	r1, r3
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	4b71      	ldr	r3, [pc, #452]	; (80089dc <scaraFlowLSPB1+0x320>)
 8008816:	f7f7 feef 	bl	80005f8 <__aeabi_dmul>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f7f7 fd33 	bl	800028c <__adddf3>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4690      	mov	r8, r2
 800882c:	4699      	mov	r9, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	4b68      	ldr	r3, [pc, #416]	; (80089dc <scaraFlowLSPB1+0x320>)
 800883a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800883e:	f7f7 fedb 	bl	80005f8 <__aeabi_dmul>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	e9d7 0100 	ldrd	r0, r1, [r7]
 800884a:	f7f7 fd1d 	bl	8000288 <__aeabi_dsub>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4620      	mov	r0, r4
 8008854:	4629      	mov	r1, r5
 8008856:	f7f7 fecf 	bl	80005f8 <__aeabi_dmul>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f7f7 fd13 	bl	800028c <__adddf3>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008870:	e0ad      	b.n	80089ce <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008876:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800887a:	f7f8 f92f 	bl	8000adc <__aeabi_dcmplt>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8090 	beq.w	80089a6 <scaraFlowLSPB1+0x2ea>
 8008886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800888a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800888e:	f7f8 f92f 	bl	8000af0 <__aeabi_dcmple>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 8086 	beq.w	80089a6 <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80088a0:	4614      	mov	r4, r2
 80088a2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80088b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80088c0:	f7f7 fce2 	bl	8000288 <__aeabi_dsub>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4640      	mov	r0, r8
 80088ca:	4649      	mov	r1, r9
 80088cc:	f7f7 fe94 	bl	80005f8 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 fcd8 	bl	800028c <__adddf3>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80088f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80088fa:	f7f7 fcc5 	bl	8000288 <__aeabi_dsub>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f7 fe77 	bl	80005f8 <__aeabi_dmul>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f7 fcb9 	bl	8000288 <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4614      	mov	r4, r2
 800891c:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800892a:	f7f7 fcad 	bl	8000288 <__aeabi_dsub>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4690      	mov	r8, r2
 8008934:	4699      	mov	r9, r3
 8008936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800893a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800893e:	f7f7 fca3 	bl	8000288 <__aeabi_dsub>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4640      	mov	r0, r8
 8008948:	4649      	mov	r1, r9
 800894a:	f7f7 fe55 	bl	80005f8 <__aeabi_dmul>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4690      	mov	r8, r2
 8008954:	4699      	mov	r9, r3
 8008956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800895a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800895e:	f7f7 fc93 	bl	8000288 <__aeabi_dsub>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4640      	mov	r0, r8
 8008968:	4649      	mov	r1, r9
 800896a:	f7f7 fe45 	bl	80005f8 <__aeabi_dmul>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4690      	mov	r8, r2
 8008974:	4699      	mov	r9, r3
 8008976:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	f7f7 fc85 	bl	800028c <__adddf3>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4640      	mov	r0, r8
 8008988:	4649      	mov	r1, r9
 800898a:	f7f7 ff5f 	bl	800084c <__aeabi_ddiv>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f7 fc77 	bl	8000288 <__aeabi_dsub>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80089a4:	e013      	b.n	80089ce <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 80089a6:	68f9      	ldr	r1, [r7, #12]
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	f04f 0300 	mov.w	r3, #0
 80089b0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 80089b4:	68f9      	ldr	r1, [r7, #12]
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3728      	adds	r7, #40	; 0x28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80089da:	bf00      	nop
 80089dc:	3fe00000 	.word	0x3fe00000

080089e0 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 80089e0:	b5b0      	push	{r4, r5, r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089f8:	f7f8 f884 	bl	8000b04 <__aeabi_dcmpge>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01e      	beq.n	8008a40 <scaraFlowGCODE+0x60>
 8008a02:	4b5f      	ldr	r3, [pc, #380]	; (8008b80 <scaraFlowGCODE+0x1a0>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a0c:	f7f8 f870 	bl	8000af0 <__aeabi_dcmple>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d014      	beq.n	8008a40 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 8008a16:	4b5b      	ldr	r3, [pc, #364]	; (8008b84 <scaraFlowGCODE+0x1a4>)
 8008a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a20:	f7f7 fdea 	bl	80005f8 <__aeabi_dmul>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a30:	f7f7 fde2 	bl	80005f8 <__aeabi_dmul>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	68f9      	ldr	r1, [r7, #12]
 8008a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8008a3e:	e09a      	b.n	8008b76 <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8008a40:	4b4f      	ldr	r3, [pc, #316]	; (8008b80 <scaraFlowGCODE+0x1a0>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a4a:	f7f8 f865 	bl	8000b18 <__aeabi_dcmpgt>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01f      	beq.n	8008a94 <scaraFlowGCODE+0xb4>
 8008a54:	4b4c      	ldr	r3, [pc, #304]	; (8008b88 <scaraFlowGCODE+0x1a8>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a5e:	f7f8 f847 	bl	8000af0 <__aeabi_dcmple>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d015      	beq.n	8008a94 <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 8008a68:	4b48      	ldr	r3, [pc, #288]	; (8008b8c <scaraFlowGCODE+0x1ac>)
 8008a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a72:	f7f7 fdc1 	bl	80005f8 <__aeabi_dmul>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4b43      	ldr	r3, [pc, #268]	; (8008b8c <scaraFlowGCODE+0x1ac>)
 8008a80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008a84:	f7f7 fc02 	bl	800028c <__adddf3>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	68f9      	ldr	r1, [r7, #12]
 8008a8e:	e9c1 2300 	strd	r2, r3, [r1]
 8008a92:	e070      	b.n	8008b76 <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8008a94:	4b3c      	ldr	r3, [pc, #240]	; (8008b88 <scaraFlowGCODE+0x1a8>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a9e:	f7f8 f83b 	bl	8000b18 <__aeabi_dcmpgt>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d038      	beq.n	8008b1a <scaraFlowGCODE+0x13a>
 8008aa8:	4b39      	ldr	r3, [pc, #228]	; (8008b90 <scaraFlowGCODE+0x1b0>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab2:	f7f8 f81d 	bl	8000af0 <__aeabi_dcmple>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d02e      	beq.n	8008b1a <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008abc:	4b35      	ldr	r3, [pc, #212]	; (8008b94 <scaraFlowGCODE+0x1b4>)
 8008abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac6:	f7f7 fd97 	bl	80005f8 <__aeabi_dmul>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4610      	mov	r0, r2
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ad6:	f7f7 fd8f 	bl	80005f8 <__aeabi_dmul>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4614      	mov	r4, r2
 8008ae0:	461d      	mov	r5, r3
 8008ae2:	4b2c      	ldr	r3, [pc, #176]	; (8008b94 <scaraFlowGCODE+0x1b4>)
 8008ae4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aec:	f7f7 fd84 	bl	80005f8 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 fbc8 	bl	800028c <__adddf3>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4610      	mov	r0, r2
 8008b02:	4619      	mov	r1, r3
 8008b04:	4b23      	ldr	r3, [pc, #140]	; (8008b94 <scaraFlowGCODE+0x1b4>)
 8008b06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008b0a:	f7f7 fbbf 	bl	800028c <__adddf3>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	e9c1 2300 	strd	r2, r3, [r1]
 8008b18:	e02d      	b.n	8008b76 <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <scaraFlowGCODE+0x1b4>)
 8008b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b24:	f7f7 fd68 	bl	80005f8 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	f7f7 fd60 	bl	80005f8 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	461d      	mov	r5, r3
 8008b40:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <scaraFlowGCODE+0x1b4>)
 8008b42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4620      	mov	r0, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 fb99 	bl	800028c <__adddf3>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4610      	mov	r0, r2
 8008b60:	4619      	mov	r1, r3
 8008b62:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <scaraFlowGCODE+0x1b4>)
 8008b64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008b68:	f7f7 fb90 	bl	800028c <__adddf3>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b80:	20006f40 	.word	0x20006f40
 8008b84:	2000dd00 	.word	0x2000dd00
 8008b88:	20006f60 	.word	0x20006f60
 8008b8c:	20006f70 	.word	0x20006f70
 8008b90:	20006f98 	.word	0x20006f98
 8008b94:	20006f48 	.word	0x20006f48

08008b98 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8008b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008b9c:	b08c      	sub	sp, #48	; 0x30
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008bac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008bb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008bca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8008bce:	f04f 0200 	mov.w	r2, #0
 8008bd2:	f04f 0300 	mov.w	r3, #0
 8008bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bda:	f7f7 ff93 	bl	8000b04 <__aeabi_dcmpge>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d025      	beq.n	8008c30 <scaraFLowScurve1+0x98>
 8008be4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bec:	f7f7 ff80 	bl	8000af0 <__aeabi_dcmple>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01c      	beq.n	8008c30 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8008bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bfe:	f7f7 fcfb 	bl	80005f8 <__aeabi_dmul>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4610      	mov	r0, r2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008c20:	f7f7 fcea 	bl	80005f8 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	68f9      	ldr	r1, [r7, #12]
 8008c2a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008c2e:	e17c      	b.n	8008f2a <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8008c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c38:	f7f7 ff50 	bl	8000adc <__aeabi_dcmplt>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d061      	beq.n	8008d06 <scaraFLowScurve1+0x16e>
 8008c42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	f7f7 fb1f 	bl	800028c <__adddf3>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c56:	f7f7 ff4b 	bl	8000af0 <__aeabi_dcmple>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d052      	beq.n	8008d06 <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c68:	f7f7 fcc6 	bl	80005f8 <__aeabi_dmul>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4610      	mov	r0, r2
 8008c72:	4619      	mov	r1, r3
 8008c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c78:	f7f7 fcbe 	bl	80005f8 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4690      	mov	r8, r2
 8008c82:	4699      	mov	r9, r3
 8008c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c8c:	f7f7 fcb4 	bl	80005f8 <__aeabi_dmul>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4610      	mov	r0, r2
 8008c96:	4619      	mov	r1, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8008c9e:	f7f7 fcab 	bl	80005f8 <__aeabi_dmul>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	4649      	mov	r1, r9
 8008caa:	f7f7 faed 	bl	8000288 <__aeabi_dsub>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4690      	mov	r8, r2
 8008cb4:	4699      	mov	r9, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8008cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc0:	f7f7 fc9a 	bl	80005f8 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4649      	mov	r1, r9
 8008ccc:	f7f7 fade 	bl	800028c <__adddf3>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008cde:	f7f7 fad3 	bl	8000288 <__aeabi_dsub>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 fc7f 	bl	80005f8 <__aeabi_dmul>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008d04:	e111      	b.n	8008f2a <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 8008d06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	f7f7 fabd 	bl	800028c <__adddf3>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d1a:	f7f7 fefd 	bl	8000b18 <__aeabi_dcmpgt>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d022      	beq.n	8008d6a <scaraFLowScurve1+0x1d2>
 8008d24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d2c:	f7f7 faac 	bl	8000288 <__aeabi_dsub>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d38:	f7f7 feda 	bl	8000af0 <__aeabi_dcmple>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d013      	beq.n	8008d6a <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 8008d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d4a:	f7f7 fa9d 	bl	8000288 <__aeabi_dsub>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4610      	mov	r0, r2
 8008d54:	4619      	mov	r1, r3
 8008d56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d5a:	f7f7 fc4d 	bl	80005f8 <__aeabi_dmul>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008d68:	e0df      	b.n	8008f2a <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 8008d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d72:	f7f7 fa89 	bl	8000288 <__aeabi_dsub>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d7e:	f7f7 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8081 	beq.w	8008e8c <scaraFLowScurve1+0x2f4>
 8008d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d92:	f7f7 fead 	bl	8000af0 <__aeabi_dcmple>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d077      	beq.n	8008e8c <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008da2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008da6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008daa:	f7f7 fc25 	bl	80005f8 <__aeabi_dmul>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4610      	mov	r0, r2
 8008db4:	4619      	mov	r1, r3
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	4b5f      	ldr	r3, [pc, #380]	; (8008f38 <scaraFLowScurve1+0x3a0>)
 8008dbc:	f7f7 fd46 	bl	800084c <__aeabi_ddiv>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7f7 fa5e 	bl	8000288 <__aeabi_dsub>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	461d      	mov	r5, r3
 8008dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ddc:	f7f7 fa54 	bl	8000288 <__aeabi_dsub>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4610      	mov	r0, r2
 8008de6:	4619      	mov	r1, r3
 8008de8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008dec:	f7f7 fc04 	bl	80005f8 <__aeabi_dmul>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fa46 	bl	8000288 <__aeabi_dsub>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4614      	mov	r4, r2
 8008e02:	461d      	mov	r5, r3
 8008e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e0c:	f7f7 fa3c 	bl	8000288 <__aeabi_dsub>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4690      	mov	r8, r2
 8008e16:	4699      	mov	r9, r3
 8008e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e20:	f7f7 fa32 	bl	8000288 <__aeabi_dsub>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	f7f7 fbe4 	bl	80005f8 <__aeabi_dmul>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4690      	mov	r8, r2
 8008e36:	4699      	mov	r9, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e42:	f7f7 fa23 	bl	800028c <__adddf3>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e52:	f7f7 fa19 	bl	8000288 <__aeabi_dsub>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fbcb 	bl	80005f8 <__aeabi_dmul>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4610      	mov	r0, r2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008e70:	f7f7 fbc2 	bl	80005f8 <__aeabi_dmul>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	f7f7 fa04 	bl	8000288 <__aeabi_dsub>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	68f9      	ldr	r1, [r7, #12]
 8008e86:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008e8a:	e04e      	b.n	8008f2a <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 8008e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e94:	f7f7 fe22 	bl	8000adc <__aeabi_dcmplt>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d045      	beq.n	8008f2a <scaraFLowScurve1+0x392>
 8008e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ea2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ea6:	f7f7 fe23 	bl	8000af0 <__aeabi_dcmple>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d03c      	beq.n	8008f2a <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ebe:	f7f7 f9e3 	bl	8000288 <__aeabi_dsub>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4690      	mov	r8, r2
 8008ec8:	4699      	mov	r9, r3
 8008eca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ece:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ed2:	f7f7 f9d9 	bl	8000288 <__aeabi_dsub>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 fb8b 	bl	80005f8 <__aeabi_dmul>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4690      	mov	r8, r2
 8008ee8:	4699      	mov	r9, r3
 8008eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ef2:	f7f7 f9c9 	bl	8000288 <__aeabi_dsub>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 fb7b 	bl	80005f8 <__aeabi_dmul>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008f10:	f7f7 fb72 	bl	80005f8 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7f7 f9b6 	bl	800028c <__adddf3>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	68f9      	ldr	r1, [r7, #12]
 8008f26:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3730      	adds	r7, #48	; 0x30
 8008f30:	46bd      	mov	sp, r7
 8008f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008f36:	bf00      	nop
 8008f38:	40080000 	.word	0x40080000
 8008f3c:	00000000 	.word	0x00000000

08008f40 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8008f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f44:	b0ac      	sub	sp, #176	; 0xb0
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	ed87 0b08 	vstr	d0, [r7, #32]
 8008f50:	ed87 1b06 	vstr	d1, [r7, #24]
 8008f54:	ed87 2b04 	vstr	d2, [r7, #16]
 8008f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8008f62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d118      	bne.n	8008f9c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8008f6a:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f76:	f7f7 fb3f 	bl	80005f8 <__aeabi_dmul>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8008f82:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f8e:	f7f7 fb33 	bl	80005f8 <__aeabi_dmul>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8008f9a:	e092      	b.n	80090c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8008f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	d118      	bne.n	8008fd6 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8008fa4:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8008fbc:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008fc8:	f7f7 fb16 	bl	80005f8 <__aeabi_dmul>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8008fd4:	e075      	b.n	80090c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8008fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d118      	bne.n	8009010 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8008fde:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008fea:	f7f7 fb05 	bl	80005f8 <__aeabi_dmul>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8008ff6:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009002:	f7f7 faf9 	bl	80005f8 <__aeabi_dmul>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800900e:	e058      	b.n	80090c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8009010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009014:	2b01      	cmp	r3, #1
 8009016:	d118      	bne.n	800904a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8009018:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009024:	f7f7 fae8 	bl	80005f8 <__aeabi_dmul>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8009030:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800903c:	f7f7 fadc 	bl	80005f8 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009048:	e03b      	b.n	80090c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800904a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800904e:	2b02      	cmp	r3, #2
 8009050:	d118      	bne.n	8009084 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8009052:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800905e:	f7f7 facb 	bl	80005f8 <__aeabi_dmul>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800906a:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009076:	f7f7 fabf 	bl	80005f8 <__aeabi_dmul>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009082:	e01e      	b.n	80090c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8009084:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009088:	2b03      	cmp	r3, #3
 800908a:	d118      	bne.n	80090be <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800908c:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80090a4:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80090b0:	f7f7 faa2 	bl	80005f8 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80090bc:	e001      	b.n	80090c2 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80090be:	2306      	movs	r3, #6
 80090c0:	e2ef      	b.n	80096a2 <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 80090ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090d2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	f04f 0300 	mov.w	r3, #0
 80090de:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80090ee:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80090f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80090f6:	f7f7 fcfb 	bl	8000af0 <__aeabi_dcmple>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8009100:	2301      	movs	r3, #1
 8009102:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009106:	e00c      	b.n	8009122 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8009108:	23ff      	movs	r3, #255	; 0xff
 800910a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800910e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800911a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800911e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8009122:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009126:	2b01      	cmp	r3, #1
 8009128:	f040 809b 	bne.w	8009262 <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009132:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8009136:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009142:	f7f7 fce9 	bl	8000b18 <__aeabi_dcmpgt>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d07e      	beq.n	800924a <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 800914c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009150:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009154:	f7f7 f898 	bl	8000288 <__aeabi_dsub>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009164:	f7f7 fb72 	bl	800084c <__aeabi_ddiv>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8009170:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009174:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009178:	f7f7 f886 	bl	8000288 <__aeabi_dsub>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4610      	mov	r0, r2
 8009182:	4619      	mov	r1, r3
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	f7f7 f880 	bl	800028c <__adddf3>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4610      	mov	r0, r2
 8009192:	4619      	mov	r1, r3
 8009194:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009198:	f7f7 fb58 	bl	800084c <__aeabi_ddiv>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80091a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80091a8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80091ac:	f7f7 fc96 	bl	8000adc <__aeabi_dcmplt>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80091b6:	2309      	movs	r3, #9
 80091b8:	e273      	b.n	80096a2 <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 80091ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80091be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80091c2:	f7f7 fc95 	bl	8000af0 <__aeabi_dcmple>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <scaraInitLSPB+0x294>
					 v_design = v_upper;
 80091cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091d0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80091d4:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80091e0:	f7f7 fc9a 	bl	8000b18 <__aeabi_dcmpgt>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d018      	beq.n	800921c <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80091ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80091ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80091f2:	f7f7 f849 	bl	8000288 <__aeabi_dsub>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4610      	mov	r0, r2
 80091fc:	4619      	mov	r1, r3
 80091fe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009202:	f7f7 fb23 	bl	800084c <__aeabi_ddiv>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800920e:	f7f7 f83b 	bl	8000288 <__aeabi_dsub>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800921a:	e00b      	b.n	8009234 <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009224:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009228:	f7f7 fb10 	bl	800084c <__aeabi_ddiv>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8009234:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009238:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800923c:	f7f7 fb06 	bl	800084c <__aeabi_ddiv>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8009248:	e00b      	b.n	8009262 <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8009262:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800926e:	f7f7 fc53 	bl	8000b18 <__aeabi_dcmpgt>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 8196 	beq.w	80095a6 <scaraInitLSPB+0x666>
 800927a:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009286:	f7f7 fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 818a 	beq.w	80095a6 <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009292:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009296:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800929a:	f7f6 fff5 	bl	8000288 <__aeabi_dsub>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	4614      	mov	r4, r2
 80092a4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80092a8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80092ac:	4620      	mov	r0, r4
 80092ae:	4629      	mov	r1, r5
 80092b0:	f7f7 f9a2 	bl	80005f8 <__aeabi_dmul>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80092bc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80092c0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80092c4:	f7f7 f998 	bl	80005f8 <__aeabi_dmul>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	e9c7 2300 	strd	r2, r3, [r7]
 80092d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80092d4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4614      	mov	r4, r2
 80092e2:	461d      	mov	r5, r3
 80092e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80092ec:	f7f7 f984 	bl	80005f8 <__aeabi_dmul>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4620      	mov	r0, r4
 80092f6:	4629      	mov	r1, r5
 80092f8:	f7f6 ffc8 	bl	800028c <__adddf3>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4610      	mov	r0, r2
 8009302:	4619      	mov	r1, r3
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800930c:	f7f7 fa9e 	bl	800084c <__aeabi_ddiv>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009318:	f7f6 ffb6 	bl	8000288 <__aeabi_dsub>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009324:	f7f7 fbe4 	bl	8000af0 <__aeabi_dcmple>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d075      	beq.n	800941a <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 800932e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009332:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009336:	f7f6 ffa7 	bl	8000288 <__aeabi_dsub>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4692      	mov	sl, r2
 8009340:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8009344:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009348:	4650      	mov	r0, sl
 800934a:	4659      	mov	r1, fp
 800934c:	f7f7 f954 	bl	80005f8 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4614      	mov	r4, r2
 8009356:	461d      	mov	r5, r3
 8009358:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800935c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4690      	mov	r8, r2
 800936a:	4699      	mov	r9, r3
 800936c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009370:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009374:	f7f7 f940 	bl	80005f8 <__aeabi_dmul>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4640      	mov	r0, r8
 800937e:	4649      	mov	r1, r9
 8009380:	f7f6 ff84 	bl	800028c <__adddf3>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4610      	mov	r0, r2
 800938a:	4619      	mov	r1, r3
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009394:	f7f7 fa5a 	bl	800084c <__aeabi_ddiv>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f6 ff74 	bl	800028c <__adddf3>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	ec43 2b17 	vmov	d7, r2, r3
 80093ac:	eeb0 0a47 	vmov.f32	s0, s14
 80093b0:	eef0 0a67 	vmov.f32	s1, s15
 80093b4:	f011 fa44 	bl	801a840 <sqrt>
 80093b8:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80093bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80093c4:	f7f6 ff60 	bl	8000288 <__aeabi_dsub>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4610      	mov	r0, r2
 80093ce:	4619      	mov	r1, r3
 80093d0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80093d4:	f7f7 fa3a 	bl	800084c <__aeabi_ddiv>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80093e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80093e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80093e8:	f7f6 ff4e 	bl	8000288 <__aeabi_dsub>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4610      	mov	r0, r2
 80093f2:	4619      	mov	r1, r3
 80093f4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80093f8:	f7f7 fa28 	bl	800084c <__aeabi_ddiv>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 8009404:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009408:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800940c:	f7f6 ff3e 	bl	800028c <__adddf3>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009418:	e0e3      	b.n	80095e2 <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 800941a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800941e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009426:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800942a:	f7f6 ff2d 	bl	8000288 <__aeabi_dsub>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800943a:	f7f7 fa07 	bl	800084c <__aeabi_ddiv>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009446:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800944a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800944e:	f7f6 ff1b 	bl	8000288 <__aeabi_dsub>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800945e:	f7f7 f9f5 	bl	800084c <__aeabi_ddiv>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800946a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800946e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009472:	f7f6 ff09 	bl	8000288 <__aeabi_dsub>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4690      	mov	r8, r2
 800947c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009480:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009484:	4640      	mov	r0, r8
 8009486:	4649      	mov	r1, r9
 8009488:	f7f7 f9e0 	bl	800084c <__aeabi_ddiv>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4614      	mov	r4, r2
 8009492:	461d      	mov	r5, r3
 8009494:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	f7f6 fef6 	bl	800028c <__adddf3>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094a8:	f7f7 f9d0 	bl	800084c <__aeabi_ddiv>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4690      	mov	r8, r2
 80094b2:	4699      	mov	r9, r3
 80094b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80094b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80094bc:	f7f7 f9c6 	bl	800084c <__aeabi_ddiv>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	f04f 0000 	mov.w	r0, #0
 80094c8:	497b      	ldr	r1, [pc, #492]	; (80096b8 <scaraInitLSPB+0x778>)
 80094ca:	f7f6 fedd 	bl	8000288 <__aeabi_dsub>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	f7f7 f88f 	bl	80005f8 <__aeabi_dmul>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4690      	mov	r8, r2
 80094e0:	4699      	mov	r9, r3
 80094e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80094e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80094ea:	f7f7 f9af 	bl	800084c <__aeabi_ddiv>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	f04f 0000 	mov.w	r0, #0
 80094f6:	4970      	ldr	r1, [pc, #448]	; (80096b8 <scaraInitLSPB+0x778>)
 80094f8:	f7f6 fec6 	bl	8000288 <__aeabi_dsub>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4640      	mov	r0, r8
 8009502:	4649      	mov	r1, r9
 8009504:	f7f7 f878 	bl	80005f8 <__aeabi_dmul>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	f7f6 febc 	bl	800028c <__adddf3>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4614      	mov	r4, r2
 800951a:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800951c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	f7f6 feb2 	bl	800028c <__adddf3>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009530:	f7f7 f98c 	bl	800084c <__aeabi_ddiv>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4690      	mov	r8, r2
 800953a:	4699      	mov	r9, r3
 800953c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009540:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009544:	f7f7 f982 	bl	800084c <__aeabi_ddiv>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	f04f 0000 	mov.w	r0, #0
 8009550:	4959      	ldr	r1, [pc, #356]	; (80096b8 <scaraInitLSPB+0x778>)
 8009552:	f7f6 fe99 	bl	8000288 <__aeabi_dsub>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4640      	mov	r0, r8
 800955c:	4649      	mov	r1, r9
 800955e:	f7f7 f84b 	bl	80005f8 <__aeabi_dmul>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4690      	mov	r8, r2
 8009568:	4699      	mov	r9, r3
 800956a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800956e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009572:	f7f7 f96b 	bl	800084c <__aeabi_ddiv>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	f04f 0000 	mov.w	r0, #0
 800957e:	494e      	ldr	r1, [pc, #312]	; (80096b8 <scaraInitLSPB+0x778>)
 8009580:	f7f6 fe82 	bl	8000288 <__aeabi_dsub>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	f7f7 f834 	bl	80005f8 <__aeabi_dmul>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 fe78 	bl	800028c <__adddf3>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80095a4:	e01d      	b.n	80095e2 <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	f04f 0300 	mov.w	r3, #0
 80095ae:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 80095b2:	f04f 0200 	mov.w	r2, #0
 80095b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095ba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80095be:	f7f7 f945 	bl	800084c <__aeabi_ddiv>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095d2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80095d6:	f7f7 f939 	bl	800084c <__aeabi_ddiv>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80095e2:	a333      	add	r3, pc, #204	; (adr r3, 80096b0 <scaraInitLSPB+0x770>)
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80095ec:	f7f7 f92e 	bl	800084c <__aeabi_ddiv>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4610      	mov	r0, r2
 80095f6:	4619      	mov	r1, r3
 80095f8:	f7f7 faf6 	bl	8000be8 <__aeabi_d2f>
 80095fc:	4603      	mov	r3, r0
 80095fe:	ee00 3a10 	vmov	s0, r3
 8009602:	f011 f8d9 	bl	801a7b8 <ceilf>
 8009606:	eef0 7a40 	vmov.f32	s15, s0
 800960a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800960e:	ee17 3a90 	vmov	r3, s15
 8009612:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800961a:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800961c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800961e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009622:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 8009626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009628:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800962c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8009630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009632:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009636:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 800963a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800963c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009640:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8009644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009646:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800964a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 800964e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009650:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009654:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8009658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800965a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800965e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8009662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009664:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009668:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 800966c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800966e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009672:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 8009676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800967c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009684:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009692:	f7f6 fdf9 	bl	8000288 <__aeabi_dsub>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800969c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	37b0      	adds	r7, #176	; 0xb0
 80096a6:	46bd      	mov	sp, r7
 80096a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096ac:	f3af 8000 	nop.w
 80096b0:	40000000 	.word	0x40000000
 80096b4:	3f847ae1 	.word	0x3f847ae1
 80096b8:	3ff00000 	.word	0x3ff00000
 80096bc:	00000000 	.word	0x00000000
 80096c0:	405c2000 	.word	0x405c2000
 80096c4:	14000000 	.word	0x14000000
 80096c8:	4000f6f0 	.word	0x4000f6f0
 80096cc:	6b259425 	.word	0x6b259425
 80096d0:	40069b91 	.word	0x40069b91
 80096d4:	d2f1a9fc 	.word	0xd2f1a9fc
 80096d8:	3f50624d 	.word	0x3f50624d
 80096dc:	9abcaf48 	.word	0x9abcaf48
 80096e0:	3e7ad7f2 	.word	0x3e7ad7f2

080096e4 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80096e4:	b480      	push	{r7}
 80096e6:	b089      	sub	sp, #36	; 0x24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	61f8      	str	r0, [r7, #28]
 80096ec:	460b      	mov	r3, r1
 80096ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80096f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80096f6:	ed87 2b00 	vstr	d2, [r7]
 80096fa:	76fb      	strb	r3, [r7, #27]
 80096fc:	4613      	mov	r3, r2
 80096fe:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3724      	adds	r7, #36	; 0x24
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
	...

08009710 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009710:	b082      	sub	sp, #8
 8009712:	b5b0      	push	{r4, r5, r7, lr}
 8009714:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009718:	af2e      	add	r7, sp, #184	; 0xb8
 800971a:	f107 0108 	add.w	r1, r7, #8
 800971e:	ed81 0b00 	vstr	d0, [r1]
 8009722:	1d39      	adds	r1, r7, #4
 8009724:	6008      	str	r0, [r1, #0]
 8009726:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800972a:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800972e:	f107 0118 	add.w	r1, r7, #24
 8009732:	f107 0308 	add.w	r3, r7, #8
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800973e:	4b92      	ldr	r3, [pc, #584]	; (8009988 <scaraFlowDuty+0x278>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f040 81a1 	bne.w	8009a8a <scaraFlowDuty+0x37a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009748:	4b8f      	ldr	r3, [pc, #572]	; (8009988 <scaraFlowDuty+0x278>)
 800974a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800974e:	2b00      	cmp	r3, #0
 8009750:	d12b      	bne.n	80097aa <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	ed93 0b00 	vldr	d0, [r3]
 800975a:	488c      	ldr	r0, [pc, #560]	; (800998c <scaraFlowDuty+0x27c>)
 800975c:	f7fe ffae 	bl	80086bc <scaraFlowLSPB1>
 8009760:	4603      	mov	r3, r0
 8009762:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009766:	4b88      	ldr	r3, [pc, #544]	; (8009988 <scaraFlowDuty+0x278>)
 8009768:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 800976c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009770:	4b85      	ldr	r3, [pc, #532]	; (8009988 <scaraFlowDuty+0x278>)
 8009772:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8009776:	f107 0110 	add.w	r1, r7, #16
 800977a:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800977e:	4b82      	ldr	r3, [pc, #520]	; (8009988 <scaraFlowDuty+0x278>)
 8009780:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009798:	4b7b      	ldr	r3, [pc, #492]	; (8009988 <scaraFlowDuty+0x278>)
 800979a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800979e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80097a8:	e099      	b.n	80098de <scaraFlowDuty+0x1ce>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80097aa:	4b77      	ldr	r3, [pc, #476]	; (8009988 <scaraFlowDuty+0x278>)
 80097ac:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d126      	bne.n	8009802 <scaraFlowDuty+0xf2>
//			s = myDUTY.task.trajectory_3d.scurve.s_current;
//			v = myDUTY.task.trajectory_3d.scurve.v_current;
//			angle = myDUTY.task.trajectory_roll.scurve.s_current;
//			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 80097b4:	f107 0308 	add.w	r3, r7, #8
 80097b8:	ed93 0b00 	vldr	d0, [r3]
 80097bc:	4874      	ldr	r0, [pc, #464]	; (8009990 <scaraFlowDuty+0x280>)
 80097be:	f7ff f9eb 	bl	8008b98 <scaraFLowScurve1>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 80097c8:	4b6f      	ldr	r3, [pc, #444]	; (8009988 <scaraFlowDuty+0x278>)
 80097ca:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 80097ce:	f107 0110 	add.w	r1, r7, #16
 80097d2:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80097d6:	4b6c      	ldr	r3, [pc, #432]	; (8009988 <scaraFlowDuty+0x278>)
 80097d8:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 80097dc:	f107 0108 	add.w	r1, r7, #8
 80097e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097e4:	f7f6 ff08 	bl	80005f8 <__aeabi_dmul>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80097f0:	4b65      	ldr	r3, [pc, #404]	; (8009988 <scaraFlowDuty+0x278>)
 80097f2:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80097f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009800:	e06d      	b.n	80098de <scaraFlowDuty+0x1ce>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009802:	4b61      	ldr	r3, [pc, #388]	; (8009988 <scaraFlowDuty+0x278>)
 8009804:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009808:	2b02      	cmp	r3, #2
 800980a:	d127      	bne.n	800985c <scaraFlowDuty+0x14c>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 800980c:	4b5e      	ldr	r3, [pc, #376]	; (8009988 <scaraFlowDuty+0x278>)
 800980e:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009812:	f107 0308 	add.w	r3, r7, #8
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 feed 	bl	80005f8 <__aeabi_dmul>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	f107 0110 	add.w	r1, r7, #16
 8009826:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800982a:	4b57      	ldr	r3, [pc, #348]	; (8009988 <scaraFlowDuty+0x278>)
 800982c:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009838:	f7f6 fede 	bl	80005f8 <__aeabi_dmul>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009844:	4b50      	ldr	r3, [pc, #320]	; (8009988 <scaraFlowDuty+0x278>)
 8009846:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800984a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 800985a:	e040      	b.n	80098de <scaraFlowDuty+0x1ce>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 800985c:	4b4a      	ldr	r3, [pc, #296]	; (8009988 <scaraFlowDuty+0x278>)
 800985e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009862:	2b03      	cmp	r3, #3
 8009864:	d139      	bne.n	80098da <scaraFlowDuty+0x1ca>
			scaraFlowGCODE(&s, time);
 8009866:	f107 0308 	add.w	r3, r7, #8
 800986a:	f107 0210 	add.w	r2, r7, #16
 800986e:	ed93 0b00 	vldr	d0, [r3]
 8009872:	4610      	mov	r0, r2
 8009874:	f7ff f8b4 	bl	80089e0 <scaraFlowGCODE>
			s -= accumulate_s;
 8009878:	f107 0310 	add.w	r3, r7, #16
 800987c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009880:	4b44      	ldr	r3, [pc, #272]	; (8009994 <scaraFlowDuty+0x284>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f7f6 fcff 	bl	8000288 <__aeabi_dsub>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	f107 0110 	add.w	r1, r7, #16
 8009892:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009896:	4b3c      	ldr	r3, [pc, #240]	; (8009988 <scaraFlowDuty+0x278>)
 8009898:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 800989c:	4b3e      	ldr	r3, [pc, #248]	; (8009998 <scaraFlowDuty+0x288>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f107 0108 	add.w	r1, r7, #8
 80098a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098aa:	f7f6 fced 	bl	8000288 <__aeabi_dsub>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7f6 fe9f 	bl	80005f8 <__aeabi_dmul>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80098c2:	4b31      	ldr	r3, [pc, #196]	; (8009988 <scaraFlowDuty+0x278>)
 80098c4:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80098c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80098d8:	e001      	b.n	80098de <scaraFlowDuty+0x1ce>

		}else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80098da:	2305      	movs	r3, #5
 80098dc:	e2c1      	b.n	8009e62 <scaraFlowDuty+0x752>
		}

		if ( SCARA_STATUS_OK != status1) {
 80098de:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <scaraFlowDuty+0x1dc>
			return status1;
 80098e6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80098ea:	e2ba      	b.n	8009e62 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 80098ec:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <scaraFlowDuty+0x1ea>
			return status2;
 80098f4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80098f8:	e2b3      	b.n	8009e62 <scaraFlowDuty+0x752>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80098fa:	4b23      	ldr	r3, [pc, #140]	; (8009988 <scaraFlowDuty+0x278>)
 80098fc:	7a1b      	ldrb	r3, [r3, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d11d      	bne.n	800993e <scaraFlowDuty+0x22e>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009902:	f107 0310 	add.w	r3, r7, #16
 8009906:	ed93 7b00 	vldr	d7, [r3]
 800990a:	eeb0 0a47 	vmov.f32	s0, s14
 800990e:	eef0 0a67 	vmov.f32	s1, s15
 8009912:	4822      	ldr	r0, [pc, #136]	; (800999c <scaraFlowDuty+0x28c>)
 8009914:	f000 fab0 	bl	8009e78 <scaraFlowLine>
 8009918:	4603      	mov	r3, r0
 800991a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 800991e:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <scaraFlowDuty+0x278>)
 8009920:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009924:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 8009928:	4b17      	ldr	r3, [pc, #92]	; (8009988 <scaraFlowDuty+0x278>)
 800992a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800992e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 8009932:	4b15      	ldr	r3, [pc, #84]	; (8009988 <scaraFlowDuty+0x278>)
 8009934:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009938:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 800993c:	e032      	b.n	80099a4 <scaraFlowDuty+0x294>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 800993e:	4b12      	ldr	r3, [pc, #72]	; (8009988 <scaraFlowDuty+0x278>)
 8009940:	7a1b      	ldrb	r3, [r3, #8]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d11d      	bne.n	8009982 <scaraFlowDuty+0x272>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009946:	f107 0310 	add.w	r3, r7, #16
 800994a:	ed93 7b00 	vldr	d7, [r3]
 800994e:	eeb0 0a47 	vmov.f32	s0, s14
 8009952:	eef0 0a67 	vmov.f32	s1, s15
 8009956:	4812      	ldr	r0, [pc, #72]	; (80099a0 <scaraFlowDuty+0x290>)
 8009958:	f000 fb16 	bl	8009f88 <scaraFlowCircle>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <scaraFlowDuty+0x278>)
 8009964:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8009968:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <scaraFlowDuty+0x278>)
 800996e:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8009972:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 8009976:	4b04      	ldr	r3, [pc, #16]	; (8009988 <scaraFlowDuty+0x278>)
 8009978:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 800997c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009980:	e010      	b.n	80099a4 <scaraFlowDuty+0x294>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8009982:	2303      	movs	r3, #3
 8009984:	e26d      	b.n	8009e62 <scaraFlowDuty+0x752>
 8009986:	bf00      	nop
 8009988:	2000def8 	.word	0x2000def8
 800998c:	2000e010 	.word	0x2000e010
 8009990:	2000e090 	.word	0x2000e090
 8009994:	200065d0 	.word	0x200065d0
 8009998:	2000dd18 	.word	0x2000dd18
 800999c:	2000df08 	.word	0x2000df08
 80099a0:	2000df78 	.word	0x2000df78
		}

		positionCompute.x 		= x;
 80099a4:	f107 0118 	add.w	r1, r7, #24
 80099a8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80099ac:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 80099b0:	f107 0118 	add.w	r1, r7, #24
 80099b4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80099b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 80099bc:	f107 0118 	add.w	r1, r7, #24
 80099c0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80099c4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80099c8:	4bad      	ldr	r3, [pc, #692]	; (8009c80 <scaraFlowDuty+0x570>)
 80099ca:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80099ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80099d2:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7f6 fda4 	bl	8000524 <__aeabi_i2d>
 80099dc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80099e0:	f7f6 fe0a 	bl	80005f8 <__aeabi_dmul>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4620      	mov	r0, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7f6 fc4e 	bl	800028c <__adddf3>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	f107 0118 	add.w	r1, r7, #24
 80099f8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 80099fc:	f107 0310 	add.w	r3, r7, #16
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f107 0118 	add.w	r1, r7, #24
 8009a08:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 8009a0c:	f107 0118 	add.w	r1, r7, #24
 8009a10:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009a14:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 8009a18:	f107 0118 	add.w	r1, r7, #24
 8009a1c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8009a20:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8009a24:	f107 0118 	add.w	r1, r7, #24
 8009a28:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009a2c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8009a30:	4b93      	ldr	r3, [pc, #588]	; (8009c80 <scaraFlowDuty+0x570>)
 8009a32:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f107 0118 	add.w	r1, r7, #24
 8009a3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 8009a42:	f107 0118 	add.w	r1, r7, #24
 8009a46:	f107 0308 	add.w	r3, r7, #8
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8009a52:	f107 0418 	add.w	r4, r7, #24
 8009a56:	4668      	mov	r0, sp
 8009a58:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009a5c:	22b8      	movs	r2, #184	; 0xb8
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f00c f8de 	bl	8015c20 <memcpy>
 8009a64:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009a68:	cb0c      	ldmia	r3, {r2, r3}
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f7fb fb50 	bl	8005110 <kinematicInverse>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <scaraFlowDuty+0x36a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009a76:	2307      	movs	r3, #7
 8009a78:	e1f3      	b.n	8009e62 <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009a7a:	f107 0118 	add.w	r1, r7, #24
 8009a7e:	1d3b      	adds	r3, r7, #4
 8009a80:	22c0      	movs	r2, #192	; 0xc0
 8009a82:	6818      	ldr	r0, [r3, #0]
 8009a84:	f00c f8cc 	bl	8015c20 <memcpy>
 8009a88:	e1ea      	b.n	8009e60 <scaraFlowDuty+0x750>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8009a8a:	4b7d      	ldr	r3, [pc, #500]	; (8009c80 <scaraFlowDuty+0x570>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	f040 81e4 	bne.w	8009e5c <scaraFlowDuty+0x74c>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8009a94:	4b7a      	ldr	r3, [pc, #488]	; (8009c80 <scaraFlowDuty+0x570>)
 8009a96:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d174      	bne.n	8009b88 <scaraFlowDuty+0x478>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	ed93 0b00 	vldr	d0, [r3]
 8009aa6:	4877      	ldr	r0, [pc, #476]	; (8009c84 <scaraFlowDuty+0x574>)
 8009aa8:	f7fe fe08 	bl	80086bc <scaraFlowLSPB1>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8009ab2:	f107 0308 	add.w	r3, r7, #8
 8009ab6:	ed93 0b00 	vldr	d0, [r3]
 8009aba:	4873      	ldr	r0, [pc, #460]	; (8009c88 <scaraFlowDuty+0x578>)
 8009abc:	f7fe fdfe 	bl	80086bc <scaraFlowLSPB1>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8009ac6:	f107 0308 	add.w	r3, r7, #8
 8009aca:	ed93 0b00 	vldr	d0, [r3]
 8009ace:	486f      	ldr	r0, [pc, #444]	; (8009c8c <scaraFlowDuty+0x57c>)
 8009ad0:	f7fe fdf4 	bl	80086bc <scaraFlowLSPB1>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8009ada:	f107 0308 	add.w	r3, r7, #8
 8009ade:	ed93 0b00 	vldr	d0, [r3]
 8009ae2:	486b      	ldr	r0, [pc, #428]	; (8009c90 <scaraFlowDuty+0x580>)
 8009ae4:	f7fe fdea 	bl	80086bc <scaraFlowLSPB1>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009aee:	4b64      	ldr	r3, [pc, #400]	; (8009c80 <scaraFlowDuty+0x570>)
 8009af0:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8009af4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8009af8:	4b61      	ldr	r3, [pc, #388]	; (8009c80 <scaraFlowDuty+0x570>)
 8009afa:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8009afe:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8009b02:	4b5f      	ldr	r3, [pc, #380]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b04:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8009b08:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8009b0c:	4b5c      	ldr	r3, [pc, #368]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b0e:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8009b12:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8009b16:	4b5a      	ldr	r3, [pc, #360]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b18:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8009b24:	4b56      	ldr	r3, [pc, #344]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b26:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8009b32:	4b53      	ldr	r3, [pc, #332]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b34:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8009b40:	4b4f      	ldr	r3, [pc, #316]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b42:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8009b4e:	4b4c      	ldr	r3, [pc, #304]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b50:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009b5c:	4b48      	ldr	r3, [pc, #288]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b5e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009b6a:	4b45      	ldr	r3, [pc, #276]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b6c:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8009b78:	4b41      	ldr	r3, [pc, #260]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b7a:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8009b86:	e05f      	b.n	8009c48 <scaraFlowDuty+0x538>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8009b88:	4b3d      	ldr	r3, [pc, #244]	; (8009c80 <scaraFlowDuty+0x570>)
 8009b8a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d158      	bne.n	8009c44 <scaraFlowDuty+0x534>
			status1 = scaraFLowScurve1(&(myDUTY.joint.trajectory[0].scurve), time);
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	ed93 0b00 	vldr	d0, [r3]
 8009b9a:	483e      	ldr	r0, [pc, #248]	; (8009c94 <scaraFlowDuty+0x584>)
 8009b9c:	f7fe fffc 	bl	8008b98 <scaraFLowScurve1>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve1(&(myDUTY.joint.trajectory[1].scurve), time);
 8009ba6:	f107 0308 	add.w	r3, r7, #8
 8009baa:	ed93 0b00 	vldr	d0, [r3]
 8009bae:	483a      	ldr	r0, [pc, #232]	; (8009c98 <scaraFlowDuty+0x588>)
 8009bb0:	f7fe fff2 	bl	8008b98 <scaraFLowScurve1>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve1(&(myDUTY.joint.trajectory[2].scurve), time);
 8009bba:	f107 0308 	add.w	r3, r7, #8
 8009bbe:	ed93 0b00 	vldr	d0, [r3]
 8009bc2:	4836      	ldr	r0, [pc, #216]	; (8009c9c <scaraFlowDuty+0x58c>)
 8009bc4:	f7fe ffe8 	bl	8008b98 <scaraFLowScurve1>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve1(&(myDUTY.joint.trajectory[3].scurve), time);
 8009bce:	f107 0308 	add.w	r3, r7, #8
 8009bd2:	ed93 0b00 	vldr	d0, [r3]
 8009bd6:	4832      	ldr	r0, [pc, #200]	; (8009ca0 <scaraFlowDuty+0x590>)
 8009bd8:	f7fe ffde 	bl	8008b98 <scaraFLowScurve1>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8009be2:	4b27      	ldr	r3, [pc, #156]	; (8009c80 <scaraFlowDuty+0x570>)
 8009be4:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8009be8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8009bec:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <scaraFlowDuty+0x570>)
 8009bee:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8009bf2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8009bf6:	4b22      	ldr	r3, [pc, #136]	; (8009c80 <scaraFlowDuty+0x570>)
 8009bf8:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8009bfc:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8009c00:	4b1f      	ldr	r3, [pc, #124]	; (8009c80 <scaraFlowDuty+0x570>)
 8009c02:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8009c06:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8009c0a:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <scaraFlowDuty+0x570>)
 8009c0c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8009c18:	4b19      	ldr	r3, [pc, #100]	; (8009c80 <scaraFlowDuty+0x570>)
 8009c1a:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8009c26:	4b16      	ldr	r3, [pc, #88]	; (8009c80 <scaraFlowDuty+0x570>)
 8009c28:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8009c34:	4b12      	ldr	r3, [pc, #72]	; (8009c80 <scaraFlowDuty+0x570>)
 8009c36:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 8009c42:	e001      	b.n	8009c48 <scaraFlowDuty+0x538>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009c44:	2305      	movs	r3, #5
 8009c46:	e10c      	b.n	8009e62 <scaraFlowDuty+0x752>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8009c48:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <scaraFlowDuty+0x546>
			return status1;
 8009c50:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c54:	e105      	b.n	8009e62 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009c56:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <scaraFlowDuty+0x554>
			return status2;
 8009c5e:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c62:	e0fe      	b.n	8009e62 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status3) {
 8009c64:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <scaraFlowDuty+0x562>
			return status3;
 8009c6c:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009c70:	e0f7      	b.n	8009e62 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status4) {
 8009c72:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d014      	beq.n	8009ca4 <scaraFlowDuty+0x594>
			return status4;
 8009c7a:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009c7e:	e0f0      	b.n	8009e62 <scaraFlowDuty+0x752>
 8009c80:	2000def8 	.word	0x2000def8
 8009c84:	2000e318 	.word	0x2000e318
 8009c88:	2000e498 	.word	0x2000e498
 8009c8c:	2000e618 	.word	0x2000e618
 8009c90:	2000e798 	.word	0x2000e798
 8009c94:	2000e398 	.word	0x2000e398
 8009c98:	2000e518 	.word	0x2000e518
 8009c9c:	2000e698 	.word	0x2000e698
 8009ca0:	2000e818 	.word	0x2000e818
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8009ca4:	4b73      	ldr	r3, [pc, #460]	; (8009e74 <scaraFlowDuty+0x764>)
 8009ca6:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009caa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009cae:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7f6 fc36 	bl	8000524 <__aeabi_i2d>
 8009cb8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 fae0 	bl	800028c <__adddf3>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	f107 0118 	add.w	r1, r7, #24
 8009cd4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8009cd8:	4b66      	ldr	r3, [pc, #408]	; (8009e74 <scaraFlowDuty+0x764>)
 8009cda:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8009cde:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009ce2:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f6 fc1c 	bl	8000524 <__aeabi_i2d>
 8009cec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8009cf0:	f7f6 fc82 	bl	80005f8 <__aeabi_dmul>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f7f6 fac6 	bl	800028c <__adddf3>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	f107 0118 	add.w	r1, r7, #24
 8009d08:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8009d0c:	4b59      	ldr	r3, [pc, #356]	; (8009e74 <scaraFlowDuty+0x764>)
 8009d0e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8009d12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d16:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7f6 fc02 	bl	8000524 <__aeabi_i2d>
 8009d20:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009d24:	f7f6 fc68 	bl	80005f8 <__aeabi_dmul>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	f7f6 faac 	bl	800028c <__adddf3>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	f107 0118 	add.w	r1, r7, #24
 8009d3c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8009d40:	4b4c      	ldr	r3, [pc, #304]	; (8009e74 <scaraFlowDuty+0x764>)
 8009d42:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8009d46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d4a:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7f6 fbe8 	bl	8000524 <__aeabi_i2d>
 8009d54:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8009d58:	f7f6 fc4e 	bl	80005f8 <__aeabi_dmul>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fa92 	bl	800028c <__adddf3>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	f107 0118 	add.w	r1, r7, #24
 8009d70:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8009d74:	f107 0118 	add.w	r1, r7, #24
 8009d78:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009d7c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8009d80:	f107 0118 	add.w	r1, r7, #24
 8009d84:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8009d88:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8009d8c:	f107 0118 	add.w	r1, r7, #24
 8009d90:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8009d94:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8009d98:	f107 0118 	add.w	r1, r7, #24
 8009d9c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009da0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8009da4:	f107 0118 	add.w	r1, r7, #24
 8009da8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009dac:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 8009db0:	f107 0118 	add.w	r1, r7, #24
 8009db4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8009db8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 8009dbc:	f107 0118 	add.w	r1, r7, #24
 8009dc0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009dc4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 8009dc8:	f107 0118 	add.w	r1, r7, #24
 8009dcc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8009dd0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8009dd4:	4b27      	ldr	r3, [pc, #156]	; (8009e74 <scaraFlowDuty+0x764>)
 8009dd6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f107 0118 	add.w	r1, r7, #24
 8009de2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 8009de6:	f107 0118 	add.w	r1, r7, #24
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8009df6:	f107 0318 	add.w	r3, r7, #24
 8009dfa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8009dfe:	f107 0318 	add.w	r3, r7, #24
 8009e02:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8009e06:	f107 0318 	add.w	r3, r7, #24
 8009e0a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8009e0e:	f107 0318 	add.w	r3, r7, #24
 8009e12:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8009e16:	eeb0 3a44 	vmov.f32	s6, s8
 8009e1a:	eef0 3a64 	vmov.f32	s7, s9
 8009e1e:	eeb0 2a45 	vmov.f32	s4, s10
 8009e22:	eef0 2a65 	vmov.f32	s5, s11
 8009e26:	eeb0 1a46 	vmov.f32	s2, s12
 8009e2a:	eef0 1a66 	vmov.f32	s3, s13
 8009e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8009e32:	eef0 0a67 	vmov.f32	s1, s15
 8009e36:	f000 f92f 	bl	800a098 <scaraCheckWorkSpace4>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <scaraFlowDuty+0x734>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009e40:	2307      	movs	r3, #7
 8009e42:	e00e      	b.n	8009e62 <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009e44:	f107 0118 	add.w	r1, r7, #24
 8009e48:	1d3b      	adds	r3, r7, #4
 8009e4a:	22c0      	movs	r2, #192	; 0xc0
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	f00b fee7 	bl	8015c20 <memcpy>
		}
		kinematicForward(pos_Next);
 8009e52:	1d3b      	adds	r3, r7, #4
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f7fb f837 	bl	8004ec8 <kinematicForward>
 8009e5a:	e001      	b.n	8009e60 <scaraFlowDuty+0x750>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e000      	b.n	8009e62 <scaraFlowDuty+0x752>
	}

	return SCARA_STATUS_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009e6e:	b002      	add	sp, #8
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	2000def8 	.word	0x2000def8

08009e78 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8009e78:	b5b0      	push	{r4, r5, r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009e8a:	a33d      	add	r3, pc, #244	; (adr r3, 8009f80 <scaraFlowLine+0x108>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 fe42 	bl	8000b18 <__aeabi_dcmpgt>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d05a      	beq.n	8009f50 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eaa:	f7f6 fba5 	bl	80005f8 <__aeabi_dmul>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009ebc:	f7f6 fcc6 	bl	800084c <__aeabi_ddiv>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	f7f6 f9e0 	bl	800028c <__adddf3>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	68f9      	ldr	r1, [r7, #12]
 8009ed2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8009ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee6:	f7f6 fb87 	bl	80005f8 <__aeabi_dmul>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009ef8:	f7f6 fca8 	bl	800084c <__aeabi_ddiv>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4620      	mov	r0, r4
 8009f02:	4629      	mov	r1, r5
 8009f04:	f7f6 f9c2 	bl	800028c <__adddf3>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	68f9      	ldr	r1, [r7, #12]
 8009f0e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8009f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f22:	f7f6 fb69 	bl	80005f8 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009f34:	f7f6 fc8a 	bl	800084c <__aeabi_ddiv>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 f9a4 	bl	800028c <__adddf3>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	68f9      	ldr	r1, [r7, #12]
 8009f4a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8009f4e:	e011      	b.n	8009f74 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009f56:	68f9      	ldr	r1, [r7, #12]
 8009f58:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	47ae147b 	.word	0x47ae147b
 8009f84:	3f847ae1 	.word	0x3f847ae1

08009f88 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8009f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f8c:	b086      	sub	sp, #24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fa0:	f7f6 fc54 	bl	800084c <__aeabi_ddiv>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7f6 faad 	bl	8000524 <__aeabi_i2d>
 8009fca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fce:	f7f6 fb13 	bl	80005f8 <__aeabi_dmul>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4650      	mov	r0, sl
 8009fd8:	4659      	mov	r1, fp
 8009fda:	f7f6 f957 	bl	800028c <__adddf3>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	ec43 2b17 	vmov	d7, r2, r3
 8009fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8009fea:	eef0 0a67 	vmov.f32	s1, s15
 8009fee:	f010 faf7 	bl	801a5e0 <cos>
 8009ff2:	ec53 2b10 	vmov	r2, r3, d0
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	f7f6 fafd 	bl	80005f8 <__aeabi_dmul>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f7f6 f941 	bl	800028c <__adddf3>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f993 3000 	ldrsb.w	r3, [r3]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7f6 fa79 	bl	8000524 <__aeabi_i2d>
 800a032:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a036:	f7f6 fadf 	bl	80005f8 <__aeabi_dmul>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4650      	mov	r0, sl
 800a040:	4659      	mov	r1, fp
 800a042:	f7f6 f923 	bl	800028c <__adddf3>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	ec43 2b17 	vmov	d7, r2, r3
 800a04e:	eeb0 0a47 	vmov.f32	s0, s14
 800a052:	eef0 0a67 	vmov.f32	s1, s15
 800a056:	f010 fb5b 	bl	801a710 <sin>
 800a05a:	ec53 2b10 	vmov	r2, r3, d0
 800a05e:	4640      	mov	r0, r8
 800a060:	4649      	mov	r1, r9
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4620      	mov	r0, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	f7f6 f90d 	bl	800028c <__adddf3>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a082:	68f9      	ldr	r1, [r7, #12]
 800a084:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a094:	0000      	movs	r0, r0
	...

0800a098 <scaraCheckWorkSpace4>:

	 return SCARA_STATUS_OK;
}

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	ed87 0b06 	vstr	d0, [r7, #24]
 800a0a2:	ed87 1b04 	vstr	d1, [r7, #16]
 800a0a6:	ed87 2b02 	vstr	d2, [r7, #8]
 800a0aa:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a0ae:	a335      	add	r3, pc, #212	; (adr r3, 800a184 <scaraCheckWorkSpace4+0xec>)
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a0b8:	f7f6 fd10 	bl	8000adc <__aeabi_dcmplt>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d109      	bne.n	800a0d6 <scaraCheckWorkSpace4+0x3e>
 800a0c2:	a332      	add	r3, pc, #200	; (adr r3, 800a18c <scaraCheckWorkSpace4+0xf4>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a0cc:	f7f6 fd24 	bl	8000b18 <__aeabi_dcmpgt>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a0d6:	2307      	movs	r3, #7
 800a0d8:	e043      	b.n	800a162 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a0da:	a32e      	add	r3, pc, #184	; (adr r3, 800a194 <scaraCheckWorkSpace4+0xfc>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a0e4:	f7f6 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <scaraCheckWorkSpace4+0x6a>
 800a0ee:	a32b      	add	r3, pc, #172	; (adr r3, 800a19c <scaraCheckWorkSpace4+0x104>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a0f8:	f7f6 fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a102:	2307      	movs	r3, #7
 800a104:	e02d      	b.n	800a162 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a106:	f04f 0200 	mov.w	r2, #0
 800a10a:	f04f 0300 	mov.w	r3, #0
 800a10e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a112:	f7f6 fce3 	bl	8000adc <__aeabi_dcmplt>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <scaraCheckWorkSpace4+0x98>
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	4b17      	ldr	r3, [pc, #92]	; (800a180 <scaraCheckWorkSpace4+0xe8>)
 800a122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a126:	f7f6 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a130:	2307      	movs	r3, #7
 800a132:	e016      	b.n	800a162 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a134:	a30e      	add	r3, pc, #56	; (adr r3, 800a170 <scaraCheckWorkSpace4+0xd8>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a13e:	f7f6 fccd 	bl	8000adc <__aeabi_dcmplt>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <scaraCheckWorkSpace4+0xc4>
 800a148:	a30b      	add	r3, pc, #44	; (adr r3, 800a178 <scaraCheckWorkSpace4+0xe0>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a152:	f7f6 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a15c:	2307      	movs	r3, #7
 800a15e:	e000      	b.n	800a162 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	f3af 8000 	nop.w
 800a170:	a7777778 	.word	0xa7777778
 800a174:	c0088956 	.word	0xc0088956
 800a178:	a7777778 	.word	0xa7777778
 800a17c:	40088956 	.word	0x40088956
 800a180:	40590000 	.word	0x40590000
 800a184:	74444445 	.word	0x74444445
 800a188:	bff95623 	.word	0xbff95623
 800a18c:	74444445 	.word	0x74444445
 800a190:	3ff95623 	.word	0x3ff95623
 800a194:	54cccccd 	.word	0x54cccccd
 800a198:	c003a649 	.word	0xc003a649
 800a19c:	54cccccd 	.word	0x54cccccd
 800a1a0:	4003a649 	.word	0x4003a649
 800a1a4:	00000000 	.word	0x00000000

0800a1a8 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a1a8:	b5b0      	push	{r4, r5, r7, lr}
 800a1aa:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a1ae:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a1b0:	f04f 0200 	mov.w	r2, #0
 800a1b4:	f04f 0300 	mov.w	r3, #0
 800a1b8:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a1bc:	463b      	mov	r3, r7
 800a1be:	4a36      	ldr	r2, [pc, #216]	; (800a298 <scaraTestDuty+0xf0>)
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	23c0      	movs	r3, #192	; 0xc0
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f00b fd2a 	bl	8015c20 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a1cc:	4b33      	ldr	r3, [pc, #204]	; (800a29c <scaraTestDuty+0xf4>)
 800a1ce:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a1d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1d6:	a32e      	add	r3, pc, #184	; (adr r3, 800a290 <scaraTestDuty+0xe8>)
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	f7f6 fb36 	bl	800084c <__aeabi_ddiv>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	ec43 2b17 	vmov	d7, r2, r3
 800a1e8:	eeb0 0a47 	vmov.f32	s0, s14
 800a1ec:	eef0 0a67 	vmov.f32	s1, s15
 800a1f0:	f010 f972 	bl	801a4d8 <ceil>
 800a1f4:	ec53 2b10 	vmov	r2, r3, d0
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	f7f6 fcac 	bl	8000b58 <__aeabi_d2iz>
 800a200:	4603      	mov	r3, r0
 800a202:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a206:	2301      	movs	r3, #1
 800a208:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a20c:	e032      	b.n	800a274 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a20e:	a320      	add	r3, pc, #128	; (adr r3, 800a290 <scaraTestDuty+0xe8>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a218:	f7f6 f838 	bl	800028c <__adddf3>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a224:	463c      	mov	r4, r7
 800a226:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a22a:	4668      	mov	r0, sp
 800a22c:	f104 0308 	add.w	r3, r4, #8
 800a230:	22b8      	movs	r2, #184	; 0xb8
 800a232:	4619      	mov	r1, r3
 800a234:	f00b fcf4 	bl	8015c20 <memcpy>
 800a238:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a23c:	4628      	mov	r0, r5
 800a23e:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a242:	f7ff fa65 	bl	8009710 <scaraFlowDuty>
 800a246:	4603      	mov	r3, r0
 800a248:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a24c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <scaraTestDuty+0xb2>
			return status;
 800a254:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a258:	e013      	b.n	800a282 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a25a:	463a      	mov	r2, r7
 800a25c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a260:	4611      	mov	r1, r2
 800a262:	22c0      	movs	r2, #192	; 0xc0
 800a264:	4618      	mov	r0, r3
 800a266:	f00b fcdb 	bl	8015c20 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a26a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a26e:	3301      	adds	r3, #1
 800a270:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a274:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a278:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a27c:	429a      	cmp	r2, r3
 800a27e:	dbc6      	blt.n	800a20e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a288:	46bd      	mov	sp, r7
 800a28a:	bdb0      	pop	{r4, r5, r7, pc}
 800a28c:	f3af 8000 	nop.w
 800a290:	40000000 	.word	0x40000000
 800a294:	3f847ae1 	.word	0x3f847ae1
 800a298:	2000eab8 	.word	0x2000eab8
 800a29c:	2000def8 	.word	0x2000def8

0800a2a0 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a2a0:	b480      	push	{r7}
 800a2a2:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a2a4:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <scaraSetScanFlag+0x14>)
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	70da      	strb	r2, [r3, #3]
}
 800a2aa:	bf00      	nop
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	20002080 	.word	0x20002080

0800a2b8 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a2c2:	4a05      	ldr	r2, [pc, #20]	; (800a2d8 <scaraSetOutput+0x20>)
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fc f9fc 	bl	80066c8 <lowlayer_setOutput>
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20002080 	.word	0x20002080

0800a2dc <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a2e6:	4a04      	ldr	r2, [pc, #16]	; (800a2f8 <scaraSetDutyState+0x1c>)
 800a2e8:	79fb      	ldrb	r3, [r7, #7]
 800a2ea:	7093      	strb	r3, [r2, #2]
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20002080 	.word	0x20002080

0800a2fc <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a306:	4a04      	ldr	r2, [pc, #16]	; (800a318 <scaraSetMode+0x1c>)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	7053      	strb	r3, [r2, #1]
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	20002080 	.word	0x20002080

0800a31c <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a326:	4a04      	ldr	r2, [pc, #16]	; (800a338 <scaraSetMethod+0x1c>)
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	7013      	strb	r3, [r2, #0]
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	20002080 	.word	0x20002080

0800a33c <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a344:	22c0      	movs	r2, #192	; 0xc0
 800a346:	4904      	ldr	r1, [pc, #16]	; (800a358 <scaraGetPosition+0x1c>)
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f00b fc69 	bl	8015c20 <memcpy>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	2000eab8 	.word	0x2000eab8

0800a35c <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a364:	22c0      	movs	r2, #192	; 0xc0
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4803      	ldr	r0, [pc, #12]	; (800a378 <scaraUpdatePosition+0x1c>)
 800a36a:	f00b fc59 	bl	8015c20 <memcpy>
}
 800a36e:	bf00      	nop
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	2000ec38 	.word	0x2000ec38

0800a37c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a380:	4b03      	ldr	r3, [pc, #12]	; (800a390 <scaraGetMode+0x14>)
 800a382:	785b      	ldrb	r3, [r3, #1]
}
 800a384:	4618      	mov	r0, r3
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	20002080 	.word	0x20002080

0800a394 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a394:	b480      	push	{r7}
 800a396:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a398:	4b03      	ldr	r3, [pc, #12]	; (800a3a8 <scaraGetMethod+0x14>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20002080 	.word	0x20002080

0800a3ac <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a3b0:	4b03      	ldr	r3, [pc, #12]	; (800a3c0 <scaraGetDutyState+0x14>)
 800a3b2:	789b      	ldrb	r3, [r3, #2]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	20002080 	.word	0x20002080

0800a3c4 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a3c8:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <scaraIsScanLimit+0x14>)
 800a3ca:	78db      	ldrb	r3, [r3, #3]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	20002080 	.word	0x20002080

0800a3dc <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a3e6:	4b09      	ldr	r3, [pc, #36]	; (800a40c <scaraIsFinish+0x30>)
 800a3e8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3f4:	f7f6 fb90 	bl	8000b18 <__aeabi_dcmpgt>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <scaraIsFinish+0x26>
		return TRUE;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800a402:	2300      	movs	r3, #0
	}
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	2000def8 	.word	0x2000def8

0800a410 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a410:	b082      	sub	sp, #8
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	f107 0118 	add.w	r1, r7, #24
 800a41e:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a422:	f06f 0303 	mvn.w	r3, #3
 800a426:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a428:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a42c:	a35c      	add	r3, pc, #368	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	f7f6 f8e1 	bl	80005f8 <__aeabi_dmul>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4610      	mov	r0, r2
 800a43c:	4619      	mov	r1, r3
 800a43e:	f7f6 fb8b 	bl	8000b58 <__aeabi_d2iz>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3304      	adds	r3, #4
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	4413      	add	r3, r2
 800a44e:	4619      	mov	r1, r3
 800a450:	f000 f8aa 	bl	800a5a8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a454:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a458:	a351      	add	r3, pc, #324	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f7f6 f8cb 	bl	80005f8 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4610      	mov	r0, r2
 800a468:	4619      	mov	r1, r3
 800a46a:	f7f6 fb75 	bl	8000b58 <__aeabi_d2iz>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3304      	adds	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	4619      	mov	r1, r3
 800a47c:	f000 f894 	bl	800a5a8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a480:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a484:	a346      	add	r3, pc, #280	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	f7f6 f8b5 	bl	80005f8 <__aeabi_dmul>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4610      	mov	r0, r2
 800a494:	4619      	mov	r1, r3
 800a496:	f7f6 fb5f 	bl	8000b58 <__aeabi_d2iz>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3304      	adds	r3, #4
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	f000 f87e 	bl	800a5a8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a4ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a4b0:	a33b      	add	r3, pc, #236	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f7f6 f89f 	bl	80005f8 <__aeabi_dmul>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4610      	mov	r0, r2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	f7f6 fb49 	bl	8000b58 <__aeabi_d2iz>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	f000 f868 	bl	800a5a8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a4d8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a4dc:	a330      	add	r3, pc, #192	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e2:	f7f6 f889 	bl	80005f8 <__aeabi_dmul>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	f7f6 fb33 	bl	8000b58 <__aeabi_d2iz>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	4619      	mov	r1, r3
 800a500:	f000 f852 	bl	800a5a8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a504:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a508:	a325      	add	r3, pc, #148	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f7f6 f873 	bl	80005f8 <__aeabi_dmul>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4610      	mov	r0, r2
 800a518:	4619      	mov	r1, r3
 800a51a:	f7f6 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3304      	adds	r3, #4
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	4413      	add	r3, r2
 800a52a:	4619      	mov	r1, r3
 800a52c:	f000 f83c 	bl	800a5a8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a530:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a534:	a31a      	add	r3, pc, #104	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f6 f85d 	bl	80005f8 <__aeabi_dmul>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4610      	mov	r0, r2
 800a544:	4619      	mov	r1, r3
 800a546:	f7f6 fb07 	bl	8000b58 <__aeabi_d2iz>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3304      	adds	r3, #4
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	4413      	add	r3, r2
 800a556:	4619      	mov	r1, r3
 800a558:	f000 f826 	bl	800a5a8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a55c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a560:	a30f      	add	r3, pc, #60	; (adr r3, 800a5a0 <scaraPosition_packaging+0x190>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f6 f847 	bl	80005f8 <__aeabi_dmul>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4610      	mov	r0, r2
 800a570:	4619      	mov	r1, r3
 800a572:	f7f6 faf1 	bl	8000b58 <__aeabi_d2iz>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3304      	adds	r3, #4
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	4413      	add	r3, r2
 800a582:	4619      	mov	r1, r3
 800a584:	f000 f810 	bl	800a5a8 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3304      	adds	r3, #4
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a596:	b002      	add	sp, #8
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w
 800a5a0:	00000000 	.word	0x00000000
 800a5a4:	412e8480 	.word	0x412e8480

0800a5a8 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	121a      	asrs	r2, r3, #8
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	b2d2      	uxtb	r2, r2
 800a5c4:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	141a      	asrs	r2, r3, #16
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	3302      	adds	r3, #2
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	161a      	asrs	r2, r3, #24
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	3303      	adds	r3, #3
 800a5da:	b2d2      	uxtb	r2, r2
 800a5dc:	701a      	strb	r2, [r3, #0]
}
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	0000      	movs	r0, r0
 800a5ec:	0000      	movs	r0, r0
	...

0800a5f0 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a5f0:	b590      	push	{r4, r7, lr}
 800a5f2:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a5f6:	af6c      	add	r7, sp, #432	; 0x1b0
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	6019      	str	r1, [r3, #0]
 800a5fe:	1dfb      	adds	r3, r7, #7
 800a600:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a602:	f107 0308 	add.w	r3, r7, #8
 800a606:	2201      	movs	r2, #1
 800a608:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a60a:	f107 0308 	add.w	r3, r7, #8
 800a60e:	2200      	movs	r2, #0
 800a610:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	2201      	movs	r2, #1
 800a618:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a61a:	f04f 0200 	mov.w	r2, #0
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a626:	463b      	mov	r3, r7
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dd03      	ble.n	800a636 <scaraKeyInit1+0x46>
 800a62e:	463b      	mov	r3, r7
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b0e      	cmp	r3, #14
 800a634:	dd01      	ble.n	800a63a <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a636:	2306      	movs	r3, #6
 800a638:	e2c0      	b.n	800abbc <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a63a:	1dfb      	adds	r3, r7, #7
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	2b07      	cmp	r3, #7
 800a640:	f200 8298 	bhi.w	800ab74 <scaraKeyInit1+0x584>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <scaraKeyInit1+0x5c>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a66d 	.word	0x0800a66d
 800a650:	0800a70f 	.word	0x0800a70f
 800a654:	0800a7b5 	.word	0x0800a7b5
 800a658:	0800a853 	.word	0x0800a853
 800a65c:	0800a8f5 	.word	0x0800a8f5
 800a660:	0800a993 	.word	0x0800a993
 800a664:	0800aa35 	.word	0x0800aa35
 800a668:	0800aad3 	.word	0x0800aad3
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a66c:	f107 0108 	add.w	r1, r7, #8
 800a670:	f04f 0200 	mov.w	r2, #0
 800a674:	f04f 0300 	mov.w	r3, #0
 800a678:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	2200      	movs	r2, #0
 800a682:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a684:	f107 0308 	add.w	r3, r7, #8
 800a688:	2200      	movs	r2, #0
 800a68a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800a68c:	463b      	mov	r3, r7
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	4613      	mov	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	4618      	mov	r0, r3
 800a698:	f7f5 ff44 	bl	8000524 <__aeabi_i2d>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	f107 0108 	add.w	r1, r7, #8
 800a6a4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a6a8:	f107 0108 	add.w	r1, r7, #8
 800a6ac:	f04f 0200 	mov.w	r2, #0
 800a6b0:	f04f 0300 	mov.w	r3, #0
 800a6b4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a6b8:	f107 0108 	add.w	r1, r7, #8
 800a6bc:	f04f 0200 	mov.w	r2, #0
 800a6c0:	f04f 0300 	mov.w	r3, #0
 800a6c4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a6c8:	f107 0108 	add.w	r1, r7, #8
 800a6cc:	f04f 0200 	mov.w	r2, #0
 800a6d0:	f04f 0300 	mov.w	r3, #0
 800a6d4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a6d8:	463b      	mov	r3, r7
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	f7f5 ff22 	bl	8000524 <__aeabi_i2d>
 800a6e0:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 ff86 	bl	80005f8 <__aeabi_dmul>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f5 fdc6 	bl	800028c <__adddf3>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	f107 0108 	add.w	r1, r7, #8
 800a708:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a70c:	e232      	b.n	800ab74 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800a70e:	f107 0108 	add.w	r1, r7, #8
 800a712:	f04f 0200 	mov.w	r2, #0
 800a716:	f04f 0300 	mov.w	r3, #0
 800a71a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a71e:	f107 0308 	add.w	r3, r7, #8
 800a722:	2200      	movs	r2, #0
 800a724:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	2200      	movs	r2, #0
 800a72c:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800a72e:	463b      	mov	r3, r7
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4613      	mov	r3, r2
 800a734:	079b      	lsls	r3, r3, #30
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	1a9b      	subs	r3, r3, r2
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7f5 fef1 	bl	8000524 <__aeabi_i2d>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	f107 0108 	add.w	r1, r7, #8
 800a74a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a74e:	f107 0108 	add.w	r1, r7, #8
 800a752:	f04f 0200 	mov.w	r2, #0
 800a756:	f04f 0300 	mov.w	r3, #0
 800a75a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a75e:	f107 0108 	add.w	r1, r7, #8
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a76e:	f107 0108 	add.w	r1, r7, #8
 800a772:	f04f 0200 	mov.w	r2, #0
 800a776:	f04f 0300 	mov.w	r3, #0
 800a77a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a77e:	463b      	mov	r3, r7
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f7f5 fecf 	bl	8000524 <__aeabi_i2d>
 800a786:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f7f5 ff33 	bl	80005f8 <__aeabi_dmul>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4610      	mov	r0, r2
 800a798:	4619      	mov	r1, r3
 800a79a:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fd73 	bl	800028c <__adddf3>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	f107 0108 	add.w	r1, r7, #8
 800a7ae:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a7b2:	e1df      	b.n	800ab74 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800a7b4:	f107 0108 	add.w	r1, r7, #8
 800a7b8:	f04f 0200 	mov.w	r2, #0
 800a7bc:	f04f 0300 	mov.w	r3, #0
 800a7c0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a7c4:	f107 0308 	add.w	r3, r7, #8
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a7cc:	f107 0308 	add.w	r3, r7, #8
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a7d4:	f107 0108 	add.w	r1, r7, #8
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800a7e4:	463b      	mov	r3, r7
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7f5 fe98 	bl	8000524 <__aeabi_i2d>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	f107 0108 	add.w	r1, r7, #8
 800a7fc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a800:	f107 0108 	add.w	r1, r7, #8
 800a804:	f04f 0200 	mov.w	r2, #0
 800a808:	f04f 0300 	mov.w	r3, #0
 800a80c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a820:	463b      	mov	r3, r7
 800a822:	6818      	ldr	r0, [r3, #0]
 800a824:	f7f5 fe7e 	bl	8000524 <__aeabi_i2d>
 800a828:	a3e7      	add	r3, pc, #924	; (adr r3, 800abc8 <scaraKeyInit1+0x5d8>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f5 fee3 	bl	80005f8 <__aeabi_dmul>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4610      	mov	r0, r2
 800a838:	4619      	mov	r1, r3
 800a83a:	a3e5      	add	r3, pc, #916	; (adr r3, 800abd0 <scaraKeyInit1+0x5e0>)
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	f7f5 fd24 	bl	800028c <__adddf3>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	f107 0108 	add.w	r1, r7, #8
 800a84c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a850:	e190      	b.n	800ab74 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800a852:	f107 0108 	add.w	r1, r7, #8
 800a856:	f04f 0200 	mov.w	r2, #0
 800a85a:	f04f 0300 	mov.w	r3, #0
 800a85e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a862:	f107 0308 	add.w	r3, r7, #8
 800a866:	2200      	movs	r2, #0
 800a868:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a86a:	f107 0308 	add.w	r3, r7, #8
 800a86e:	2200      	movs	r2, #0
 800a870:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a872:	f107 0108 	add.w	r1, r7, #8
 800a876:	f04f 0200 	mov.w	r2, #0
 800a87a:	f04f 0300 	mov.w	r3, #0
 800a87e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800a882:	463b      	mov	r3, r7
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	4613      	mov	r3, r2
 800a888:	079b      	lsls	r3, r3, #30
 800a88a:	1a9b      	subs	r3, r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f7f5 fe47 	bl	8000524 <__aeabi_i2d>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	f107 0108 	add.w	r1, r7, #8
 800a89e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a8a2:	f107 0108 	add.w	r1, r7, #8
 800a8a6:	f04f 0200 	mov.w	r2, #0
 800a8aa:	f04f 0300 	mov.w	r3, #0
 800a8ae:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a8b2:	f107 0108 	add.w	r1, r7, #8
 800a8b6:	f04f 0200 	mov.w	r2, #0
 800a8ba:	f04f 0300 	mov.w	r3, #0
 800a8be:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a8c2:	463b      	mov	r3, r7
 800a8c4:	6818      	ldr	r0, [r3, #0]
 800a8c6:	f7f5 fe2d 	bl	8000524 <__aeabi_i2d>
 800a8ca:	a3bf      	add	r3, pc, #764	; (adr r3, 800abc8 <scaraKeyInit1+0x5d8>)
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f7f5 fe92 	bl	80005f8 <__aeabi_dmul>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4619      	mov	r1, r3
 800a8dc:	a3bc      	add	r3, pc, #752	; (adr r3, 800abd0 <scaraKeyInit1+0x5e0>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fcd3 	bl	800028c <__adddf3>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	f107 0108 	add.w	r1, r7, #8
 800a8ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a8f2:	e13f      	b.n	800ab74 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800a8f4:	f107 0108 	add.w	r1, r7, #8
 800a8f8:	f04f 0200 	mov.w	r2, #0
 800a8fc:	f04f 0300 	mov.w	r3, #0
 800a900:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	2200      	movs	r2, #0
 800a90a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a90c:	f107 0308 	add.w	r3, r7, #8
 800a910:	2200      	movs	r2, #0
 800a912:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a914:	f107 0108 	add.w	r1, r7, #8
 800a918:	f04f 0200 	mov.w	r2, #0
 800a91c:	f04f 0300 	mov.w	r3, #0
 800a920:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a924:	f107 0108 	add.w	r1, r7, #8
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800a934:	463b      	mov	r3, r7
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4613      	mov	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7f5 fdf0 	bl	8000524 <__aeabi_i2d>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	f107 0108 	add.w	r1, r7, #8
 800a94c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a950:	f107 0108 	add.w	r1, r7, #8
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a960:	463b      	mov	r3, r7
 800a962:	6818      	ldr	r0, [r3, #0]
 800a964:	f7f5 fdde 	bl	8000524 <__aeabi_i2d>
 800a968:	a397      	add	r3, pc, #604	; (adr r3, 800abc8 <scaraKeyInit1+0x5d8>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4610      	mov	r0, r2
 800a978:	4619      	mov	r1, r3
 800a97a:	a395      	add	r3, pc, #596	; (adr r3, 800abd0 <scaraKeyInit1+0x5e0>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f7f5 fc84 	bl	800028c <__adddf3>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	f107 0108 	add.w	r1, r7, #8
 800a98c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a990:	e0f0      	b.n	800ab74 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800a992:	f107 0108 	add.w	r1, r7, #8
 800a996:	f04f 0200 	mov.w	r2, #0
 800a99a:	f04f 0300 	mov.w	r3, #0
 800a99e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a9b2:	f107 0108 	add.w	r1, r7, #8
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	f04f 0300 	mov.w	r3, #0
 800a9be:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a9c2:	f107 0108 	add.w	r1, r7, #8
 800a9c6:	f04f 0200 	mov.w	r2, #0
 800a9ca:	f04f 0300 	mov.w	r3, #0
 800a9ce:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	079b      	lsls	r3, r3, #30
 800a9da:	1a9b      	subs	r3, r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	1a9b      	subs	r3, r3, r2
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f5 fd9f 	bl	8000524 <__aeabi_i2d>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	f107 0108 	add.w	r1, r7, #8
 800a9ee:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a9f2:	f107 0108 	add.w	r1, r7, #8
 800a9f6:	f04f 0200 	mov.w	r2, #0
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa02:	463b      	mov	r3, r7
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	f7f5 fd8d 	bl	8000524 <__aeabi_i2d>
 800aa0a:	a36f      	add	r3, pc, #444	; (adr r3, 800abc8 <scaraKeyInit1+0x5d8>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fdf2 	bl	80005f8 <__aeabi_dmul>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	a36c      	add	r3, pc, #432	; (adr r3, 800abd0 <scaraKeyInit1+0x5e0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fc33 	bl	800028c <__adddf3>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	f107 0108 	add.w	r1, r7, #8
 800aa2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aa32:	e09f      	b.n	800ab74 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800aa34:	f107 0108 	add.w	r1, r7, #8
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	2200      	movs	r2, #0
 800aa4a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	2200      	movs	r2, #0
 800aa52:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aa54:	f107 0108 	add.w	r1, r7, #8
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	f04f 0200 	mov.w	r2, #0
 800aa6c:	f04f 0300 	mov.w	r3, #0
 800aa70:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aa74:	f107 0108 	add.w	r1, r7, #8
 800aa78:	f04f 0200 	mov.w	r2, #0
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800aa84:	463b      	mov	r3, r7
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7f5 fd48 	bl	8000524 <__aeabi_i2d>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	f107 0108 	add.w	r1, r7, #8
 800aa9c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	f7f5 fd3e 	bl	8000524 <__aeabi_i2d>
 800aaa8:	a347      	add	r3, pc, #284	; (adr r3, 800abc8 <scaraKeyInit1+0x5d8>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4610      	mov	r0, r2
 800aab8:	4619      	mov	r1, r3
 800aaba:	a345      	add	r3, pc, #276	; (adr r3, 800abd0 <scaraKeyInit1+0x5e0>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fbe4 	bl	800028c <__adddf3>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	f107 0108 	add.w	r1, r7, #8
 800aacc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aad0:	e050      	b.n	800ab74 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800aad2:	f107 0108 	add.w	r1, r7, #8
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	f04f 0300 	mov.w	r3, #0
 800aade:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	2200      	movs	r2, #0
 800aae8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aaea:	f107 0308 	add.w	r3, r7, #8
 800aaee:	2200      	movs	r2, #0
 800aaf0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aaf2:	f107 0108 	add.w	r1, r7, #8
 800aaf6:	f04f 0200 	mov.w	r2, #0
 800aafa:	f04f 0300 	mov.w	r3, #0
 800aafe:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab02:	f107 0108 	add.w	r1, r7, #8
 800ab06:	f04f 0200 	mov.w	r2, #0
 800ab0a:	f04f 0300 	mov.w	r3, #0
 800ab0e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab12:	f107 0108 	add.w	r1, r7, #8
 800ab16:	f04f 0200 	mov.w	r2, #0
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800ab22:	463b      	mov	r3, r7
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	4613      	mov	r3, r2
 800ab28:	079b      	lsls	r3, r3, #30
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	1a9b      	subs	r3, r3, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f5 fcf7 	bl	8000524 <__aeabi_i2d>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	f107 0108 	add.w	r1, r7, #8
 800ab3e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab42:	463b      	mov	r3, r7
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f7f5 fced 	bl	8000524 <__aeabi_i2d>
 800ab4a:	a31f      	add	r3, pc, #124	; (adr r3, 800abc8 <scaraKeyInit1+0x5d8>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	a31c      	add	r3, pc, #112	; (adr r3, 800abd0 <scaraKeyInit1+0x5e0>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f7f5 fb93 	bl	800028c <__adddf3>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	f107 0108 	add.w	r1, r7, #8
 800ab6e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ab72:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800ab74:	f107 0408 	add.w	r4, r7, #8
 800ab78:	4668      	mov	r0, sp
 800ab7a:	f104 0310 	add.w	r3, r4, #16
 800ab7e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ab82:	4619      	mov	r1, r3
 800ab84:	f00b f84c 	bl	8015c20 <memcpy>
 800ab88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ab8c:	f7fb fde8 	bl	8006760 <scaraInitDuty>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800ab96:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10b      	bne.n	800abb6 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800ab9e:	f7ff fb03 	bl	800a1a8 <scaraTestDuty>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800aba8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800abac:	2b00      	cmp	r3, #0
 800abae:	d005      	beq.n	800abbc <scaraKeyInit1+0x5cc>
			return status;
 800abb0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800abb4:	e002      	b.n	800abbc <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800abb6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800abba:	e7ff      	b.n	800abbc <scaraKeyInit1+0x5cc>
	}
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd90      	pop	{r4, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	9999999a 	.word	0x9999999a
 800abcc:	3fa99999 	.word	0x3fa99999
 800abd0:	9999999a 	.word	0x9999999a
 800abd4:	3fe99999 	.word	0x3fe99999

0800abd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
 800abe2:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <HAL_MspInit+0x54>)
 800abe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe6:	4a11      	ldr	r2, [pc, #68]	; (800ac2c <HAL_MspInit+0x54>)
 800abe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abec:	6453      	str	r3, [r2, #68]	; 0x44
 800abee:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <HAL_MspInit+0x54>)
 800abf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf6:	607b      	str	r3, [r7, #4]
 800abf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800abfa:	2300      	movs	r3, #0
 800abfc:	603b      	str	r3, [r7, #0]
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <HAL_MspInit+0x54>)
 800ac00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac02:	4a0a      	ldr	r2, [pc, #40]	; (800ac2c <HAL_MspInit+0x54>)
 800ac04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac08:	6413      	str	r3, [r2, #64]	; 0x40
 800ac0a:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <HAL_MspInit+0x54>)
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ac16:	2200      	movs	r2, #0
 800ac18:	210f      	movs	r1, #15
 800ac1a:	f06f 0001 	mvn.w	r0, #1
 800ac1e:	f000 fc79 	bl	800b514 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac22:	bf00      	nop
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	40023800 	.word	0x40023800

0800ac30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08c      	sub	sp, #48	; 0x30
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800ac40:	2200      	movs	r2, #0
 800ac42:	6879      	ldr	r1, [r7, #4]
 800ac44:	2036      	movs	r0, #54	; 0x36
 800ac46:	f000 fc65 	bl	800b514 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ac4a:	2036      	movs	r0, #54	; 0x36
 800ac4c:	f000 fc7e 	bl	800b54c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ac50:	2300      	movs	r3, #0
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	4b1f      	ldr	r3, [pc, #124]	; (800acd4 <HAL_InitTick+0xa4>)
 800ac56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac58:	4a1e      	ldr	r2, [pc, #120]	; (800acd4 <HAL_InitTick+0xa4>)
 800ac5a:	f043 0310 	orr.w	r3, r3, #16
 800ac5e:	6413      	str	r3, [r2, #64]	; 0x40
 800ac60:	4b1c      	ldr	r3, [pc, #112]	; (800acd4 <HAL_InitTick+0xa4>)
 800ac62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac64:	f003 0310 	and.w	r3, r3, #16
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ac6c:	f107 0210 	add.w	r2, r7, #16
 800ac70:	f107 0314 	add.w	r3, r7, #20
 800ac74:	4611      	mov	r1, r2
 800ac76:	4618      	mov	r0, r3
 800ac78:	f003 f812 	bl	800dca0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ac7c:	f002 ffe8 	bl	800dc50 <HAL_RCC_GetPCLK1Freq>
 800ac80:	4603      	mov	r3, r0
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	4a13      	ldr	r2, [pc, #76]	; (800acd8 <HAL_InitTick+0xa8>)
 800ac8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac8e:	0c9b      	lsrs	r3, r3, #18
 800ac90:	3b01      	subs	r3, #1
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ac94:	4b11      	ldr	r3, [pc, #68]	; (800acdc <HAL_InitTick+0xac>)
 800ac96:	4a12      	ldr	r2, [pc, #72]	; (800ace0 <HAL_InitTick+0xb0>)
 800ac98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ac9a:	4b10      	ldr	r3, [pc, #64]	; (800acdc <HAL_InitTick+0xac>)
 800ac9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aca0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800aca2:	4a0e      	ldr	r2, [pc, #56]	; (800acdc <HAL_InitTick+0xac>)
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800aca8:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <HAL_InitTick+0xac>)
 800acaa:	2200      	movs	r2, #0
 800acac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acae:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <HAL_InitTick+0xac>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800acb4:	4809      	ldr	r0, [pc, #36]	; (800acdc <HAL_InitTick+0xac>)
 800acb6:	f003 f825 	bl	800dd04 <HAL_TIM_Base_Init>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d104      	bne.n	800acca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800acc0:	4806      	ldr	r0, [pc, #24]	; (800acdc <HAL_InitTick+0xac>)
 800acc2:	f003 f86e 	bl	800dda2 <HAL_TIM_Base_Start_IT>
 800acc6:	4603      	mov	r3, r0
 800acc8:	e000      	b.n	800accc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
}
 800accc:	4618      	mov	r0, r3
 800acce:	3730      	adds	r7, #48	; 0x30
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	40023800 	.word	0x40023800
 800acd8:	431bde83 	.word	0x431bde83
 800acdc:	2000ecf8 	.word	0x2000ecf8
 800ace0:	40001000 	.word	0x40001000

0800ace4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ace8:	bf00      	nop
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800acf8:	2162      	movs	r1, #98	; 0x62
 800acfa:	4802      	ldr	r0, [pc, #8]	; (800ad04 <HardFault_Handler+0x10>)
 800acfc:	f7f7 fb8c 	bl	8002418 <LOG_REPORT>
 800ad00:	e7fa      	b.n	800acf8 <HardFault_Handler+0x4>
 800ad02:	bf00      	nop
 800ad04:	0801c108 	.word	0x0801c108

0800ad08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800ad0c:	2172      	movs	r1, #114	; 0x72
 800ad0e:	4802      	ldr	r0, [pc, #8]	; (800ad18 <MemManage_Handler+0x10>)
 800ad10:	f7f7 fb82 	bl	8002418 <LOG_REPORT>
 800ad14:	e7fa      	b.n	800ad0c <MemManage_Handler+0x4>
 800ad16:	bf00      	nop
 800ad18:	0801c120 	.word	0x0801c120

0800ad1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800ad20:	2182      	movs	r1, #130	; 0x82
 800ad22:	4802      	ldr	r0, [pc, #8]	; (800ad2c <BusFault_Handler+0x10>)
 800ad24:	f7f7 fb78 	bl	8002418 <LOG_REPORT>
 800ad28:	e7fa      	b.n	800ad20 <BusFault_Handler+0x4>
 800ad2a:	bf00      	nop
 800ad2c:	0801c134 	.word	0x0801c134

0800ad30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ad34:	e7fe      	b.n	800ad34 <UsageFault_Handler+0x4>

0800ad36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ad36:	b480      	push	{r7}
 800ad38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ad3a:	bf00      	nop
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ad48:	4802      	ldr	r0, [pc, #8]	; (800ad54 <DMA1_Stream4_IRQHandler+0x10>)
 800ad4a:	f000 fd35 	bl	800b7b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ad4e:	bf00      	nop
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	2000edf8 	.word	0x2000edf8

0800ad58 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ad5c:	4802      	ldr	r0, [pc, #8]	; (800ad68 <UART4_IRQHandler+0x10>)
 800ad5e:	f003 fcbd 	bl	800e6dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ad62:	bf00      	nop
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	2000edb8 	.word	0x2000edb8

0800ad6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ad70:	4802      	ldr	r0, [pc, #8]	; (800ad7c <TIM6_DAC_IRQHandler+0x10>)
 800ad72:	f003 f83a 	bl	800ddea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ad76:	bf00      	nop
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	2000ecf8 	.word	0x2000ecf8

0800ad80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800ad84:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <TIM7_IRQHandler+0x1c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2101      	movs	r1, #1
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f007 fbba 	bl	8012504 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ad90:	4803      	ldr	r0, [pc, #12]	; (800ada0 <TIM7_IRQHandler+0x20>)
 800ad92:	f003 f82a 	bl	800ddea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800ad96:	bf00      	nop
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	2000de2c 	.word	0x2000de2c
 800ada0:	2000ed78 	.word	0x2000ed78

0800ada4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ada8:	4802      	ldr	r0, [pc, #8]	; (800adb4 <OTG_FS_IRQHandler+0x10>)
 800adaa:	f001 fad9 	bl	800c360 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800adae:	bf00      	nop
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	2000f734 	.word	0x2000f734

0800adb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800adb8:	b480      	push	{r7}
 800adba:	af00      	add	r7, sp, #0
	return 1;
 800adbc:	2301      	movs	r3, #1
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <_kill>:

int _kill(int pid, int sig)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800add2:	f00a feeb 	bl	8015bac <__errno>
 800add6:	4603      	mov	r3, r0
 800add8:	2216      	movs	r2, #22
 800adda:	601a      	str	r2, [r3, #0]
	return -1;
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <_exit>:

void _exit (int status)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800adf0:	f04f 31ff 	mov.w	r1, #4294967295
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7ff ffe7 	bl	800adc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800adfa:	e7fe      	b.n	800adfa <_exit+0x12>

0800adfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e00a      	b.n	800ae24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ae0e:	f3af 8000 	nop.w
 800ae12:	4601      	mov	r1, r0
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	60ba      	str	r2, [r7, #8]
 800ae1a:	b2ca      	uxtb	r2, r1
 800ae1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	3301      	adds	r3, #1
 800ae22:	617b      	str	r3, [r7, #20]
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	dbf0      	blt.n	800ae0e <_read+0x12>
	}

return len;
 800ae2c:	687b      	ldr	r3, [r7, #4]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b086      	sub	sp, #24
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae42:	2300      	movs	r3, #0
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	e009      	b.n	800ae5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	60ba      	str	r2, [r7, #8]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	617b      	str	r3, [r7, #20]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	dbf1      	blt.n	800ae48 <_write+0x12>
	}
	return len;
 800ae64:	687b      	ldr	r3, [r7, #4]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <_close>:

int _close(int file)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
	return -1;
 800ae76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae96:	605a      	str	r2, [r3, #4]
	return 0;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <_isatty>:

int _isatty(int file)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
	return 1;
 800aeae:	2301      	movs	r3, #1
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
	return 0;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800aee0:	4b11      	ldr	r3, [pc, #68]	; (800af28 <_sbrk+0x50>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <_sbrk+0x16>
		heap_end = &end;
 800aee8:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <_sbrk+0x50>)
 800aeea:	4a10      	ldr	r2, [pc, #64]	; (800af2c <_sbrk+0x54>)
 800aeec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aeee:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <_sbrk+0x50>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800aef4:	4b0c      	ldr	r3, [pc, #48]	; (800af28 <_sbrk+0x50>)
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4413      	add	r3, r2
 800aefc:	466a      	mov	r2, sp
 800aefe:	4293      	cmp	r3, r2
 800af00:	d907      	bls.n	800af12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800af02:	f00a fe53 	bl	8015bac <__errno>
 800af06:	4603      	mov	r3, r0
 800af08:	220c      	movs	r2, #12
 800af0a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800af0c:	f04f 33ff 	mov.w	r3, #4294967295
 800af10:	e006      	b.n	800af20 <_sbrk+0x48>
	}

	heap_end += incr;
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <_sbrk+0x50>)
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4413      	add	r3, r2
 800af1a:	4a03      	ldr	r2, [pc, #12]	; (800af28 <_sbrk+0x50>)
 800af1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800af1e:	68fb      	ldr	r3, [r7, #12]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20002860 	.word	0x20002860
 800af2c:	2000fb50 	.word	0x2000fb50

0800af30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af34:	4b08      	ldr	r3, [pc, #32]	; (800af58 <SystemInit+0x28>)
 800af36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3a:	4a07      	ldr	r2, [pc, #28]	; (800af58 <SystemInit+0x28>)
 800af3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800af44:	4b04      	ldr	r3, [pc, #16]	; (800af58 <SystemInit+0x28>)
 800af46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af4a:	609a      	str	r2, [r3, #8]
#endif
}
 800af4c:	bf00      	nop
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	e000ed00 	.word	0xe000ed00

0800af5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	605a      	str	r2, [r3, #4]
 800af6c:	609a      	str	r2, [r3, #8]
 800af6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af70:	463b      	mov	r3, r7
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800af78:	4b1e      	ldr	r3, [pc, #120]	; (800aff4 <MX_TIM2_Init+0x98>)
 800af7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800af7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800af80:	4b1c      	ldr	r3, [pc, #112]	; (800aff4 <MX_TIM2_Init+0x98>)
 800af82:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800af86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af88:	4b1a      	ldr	r3, [pc, #104]	; (800aff4 <MX_TIM2_Init+0x98>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800af8e:	4b19      	ldr	r3, [pc, #100]	; (800aff4 <MX_TIM2_Init+0x98>)
 800af90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af96:	4b17      	ldr	r3, [pc, #92]	; (800aff4 <MX_TIM2_Init+0x98>)
 800af98:	2200      	movs	r2, #0
 800af9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af9c:	4b15      	ldr	r3, [pc, #84]	; (800aff4 <MX_TIM2_Init+0x98>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800afa2:	4814      	ldr	r0, [pc, #80]	; (800aff4 <MX_TIM2_Init+0x98>)
 800afa4:	f002 feae 	bl	800dd04 <HAL_TIM_Base_Init>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800afae:	f7fa fb3d 	bl	800562c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800afb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800afb8:	f107 0308 	add.w	r3, r7, #8
 800afbc:	4619      	mov	r1, r3
 800afbe:	480d      	ldr	r0, [pc, #52]	; (800aff4 <MX_TIM2_Init+0x98>)
 800afc0:	f003 f81b 	bl	800dffa <HAL_TIM_ConfigClockSource>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800afca:	f7fa fb2f 	bl	800562c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afce:	2300      	movs	r3, #0
 800afd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800afd6:	463b      	mov	r3, r7
 800afd8:	4619      	mov	r1, r3
 800afda:	4806      	ldr	r0, [pc, #24]	; (800aff4 <MX_TIM2_Init+0x98>)
 800afdc:	f003 fa34 	bl	800e448 <HAL_TIMEx_MasterConfigSynchronization>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800afe6:	f7fa fb21 	bl	800562c <Error_Handler>
  }

}
 800afea:	bf00      	nop
 800afec:	3718      	adds	r7, #24
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	2000ed38 	.word	0x2000ed38

0800aff8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800affe:	463b      	mov	r3, r7
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b006:	4b15      	ldr	r3, [pc, #84]	; (800b05c <MX_TIM7_Init+0x64>)
 800b008:	4a15      	ldr	r2, [pc, #84]	; (800b060 <MX_TIM7_Init+0x68>)
 800b00a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b00c:	4b13      	ldr	r3, [pc, #76]	; (800b05c <MX_TIM7_Init+0x64>)
 800b00e:	2253      	movs	r2, #83	; 0x53
 800b010:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b012:	4b12      	ldr	r3, [pc, #72]	; (800b05c <MX_TIM7_Init+0x64>)
 800b014:	2200      	movs	r2, #0
 800b016:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b018:	4b10      	ldr	r3, [pc, #64]	; (800b05c <MX_TIM7_Init+0x64>)
 800b01a:	f242 720f 	movw	r2, #9999	; 0x270f
 800b01e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b020:	4b0e      	ldr	r3, [pc, #56]	; (800b05c <MX_TIM7_Init+0x64>)
 800b022:	2200      	movs	r2, #0
 800b024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b026:	480d      	ldr	r0, [pc, #52]	; (800b05c <MX_TIM7_Init+0x64>)
 800b028:	f002 fe6c 	bl	800dd04 <HAL_TIM_Base_Init>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b032:	f7fa fafb 	bl	800562c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b036:	2300      	movs	r3, #0
 800b038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b03e:	463b      	mov	r3, r7
 800b040:	4619      	mov	r1, r3
 800b042:	4806      	ldr	r0, [pc, #24]	; (800b05c <MX_TIM7_Init+0x64>)
 800b044:	f003 fa00 	bl	800e448 <HAL_TIMEx_MasterConfigSynchronization>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b04e:	f7fa faed 	bl	800562c <Error_Handler>
  }

}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	2000ed78 	.word	0x2000ed78
 800b060:	40001400 	.word	0x40001400

0800b064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b074:	d10e      	bne.n	800b094 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	4b16      	ldr	r3, [pc, #88]	; (800b0d4 <HAL_TIM_Base_MspInit+0x70>)
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <HAL_TIM_Base_MspInit+0x70>)
 800b080:	f043 0301 	orr.w	r3, r3, #1
 800b084:	6413      	str	r3, [r2, #64]	; 0x40
 800b086:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <HAL_TIM_Base_MspInit+0x70>)
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b092:	e01a      	b.n	800b0ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a0f      	ldr	r2, [pc, #60]	; (800b0d8 <HAL_TIM_Base_MspInit+0x74>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d115      	bne.n	800b0ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60bb      	str	r3, [r7, #8]
 800b0a2:	4b0c      	ldr	r3, [pc, #48]	; (800b0d4 <HAL_TIM_Base_MspInit+0x70>)
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	4a0b      	ldr	r2, [pc, #44]	; (800b0d4 <HAL_TIM_Base_MspInit+0x70>)
 800b0a8:	f043 0320 	orr.w	r3, r3, #32
 800b0ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b0ae:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <HAL_TIM_Base_MspInit+0x70>)
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	60bb      	str	r3, [r7, #8]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2105      	movs	r1, #5
 800b0be:	2037      	movs	r0, #55	; 0x37
 800b0c0:	f000 fa28 	bl	800b514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b0c4:	2037      	movs	r0, #55	; 0x37
 800b0c6:	f000 fa41 	bl	800b54c <HAL_NVIC_EnableIRQ>
}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	40023800 	.word	0x40023800
 800b0d8:	40001400 	.word	0x40001400

0800b0dc <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b0e0:	4b11      	ldr	r3, [pc, #68]	; (800b128 <MX_UART4_Init+0x4c>)
 800b0e2:	4a12      	ldr	r2, [pc, #72]	; (800b12c <MX_UART4_Init+0x50>)
 800b0e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b0e6:	4b10      	ldr	r3, [pc, #64]	; (800b128 <MX_UART4_Init+0x4c>)
 800b0e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b0ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b0ee:	4b0e      	ldr	r3, [pc, #56]	; (800b128 <MX_UART4_Init+0x4c>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <MX_UART4_Init+0x4c>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b0fa:	4b0b      	ldr	r3, [pc, #44]	; (800b128 <MX_UART4_Init+0x4c>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b100:	4b09      	ldr	r3, [pc, #36]	; (800b128 <MX_UART4_Init+0x4c>)
 800b102:	220c      	movs	r2, #12
 800b104:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b106:	4b08      	ldr	r3, [pc, #32]	; (800b128 <MX_UART4_Init+0x4c>)
 800b108:	2200      	movs	r2, #0
 800b10a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b10c:	4b06      	ldr	r3, [pc, #24]	; (800b128 <MX_UART4_Init+0x4c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b112:	4805      	ldr	r0, [pc, #20]	; (800b128 <MX_UART4_Init+0x4c>)
 800b114:	f003 fa28 	bl	800e568 <HAL_UART_Init>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b11e:	f7fa fa85 	bl	800562c <Error_Handler>
  }

}
 800b122:	bf00      	nop
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	2000edb8 	.word	0x2000edb8
 800b12c:	40004c00 	.word	0x40004c00

0800b130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08a      	sub	sp, #40	; 0x28
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b138:	f107 0314 	add.w	r3, r7, #20
 800b13c:	2200      	movs	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	605a      	str	r2, [r3, #4]
 800b142:	609a      	str	r2, [r3, #8]
 800b144:	60da      	str	r2, [r3, #12]
 800b146:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a34      	ldr	r2, [pc, #208]	; (800b220 <HAL_UART_MspInit+0xf0>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d161      	bne.n	800b216 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b152:	2300      	movs	r3, #0
 800b154:	613b      	str	r3, [r7, #16]
 800b156:	4b33      	ldr	r3, [pc, #204]	; (800b224 <HAL_UART_MspInit+0xf4>)
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	4a32      	ldr	r2, [pc, #200]	; (800b224 <HAL_UART_MspInit+0xf4>)
 800b15c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b160:	6413      	str	r3, [r2, #64]	; 0x40
 800b162:	4b30      	ldr	r3, [pc, #192]	; (800b224 <HAL_UART_MspInit+0xf4>)
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	4b2c      	ldr	r3, [pc, #176]	; (800b224 <HAL_UART_MspInit+0xf4>)
 800b174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b176:	4a2b      	ldr	r2, [pc, #172]	; (800b224 <HAL_UART_MspInit+0xf4>)
 800b178:	f043 0301 	orr.w	r3, r3, #1
 800b17c:	6313      	str	r3, [r2, #48]	; 0x30
 800b17e:	4b29      	ldr	r3, [pc, #164]	; (800b224 <HAL_UART_MspInit+0xf4>)
 800b180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b18a:	2303      	movs	r3, #3
 800b18c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b18e:	2302      	movs	r3, #2
 800b190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b192:	2301      	movs	r3, #1
 800b194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b196:	2303      	movs	r3, #3
 800b198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b19a:	2308      	movs	r3, #8
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b19e:	f107 0314 	add.w	r3, r7, #20
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4820      	ldr	r0, [pc, #128]	; (800b228 <HAL_UART_MspInit+0xf8>)
 800b1a6:	f000 fd7f 	bl	800bca8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b1aa:	4b20      	ldr	r3, [pc, #128]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1ac:	4a20      	ldr	r2, [pc, #128]	; (800b230 <HAL_UART_MspInit+0x100>)
 800b1ae:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b1b0:	4b1e      	ldr	r3, [pc, #120]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b1b6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1b8:	4b1c      	ldr	r3, [pc, #112]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1ba:	2240      	movs	r2, #64	; 0x40
 800b1bc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1be:	4b1b      	ldr	r3, [pc, #108]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b1c4:	4b19      	ldr	r3, [pc, #100]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1ca:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b1cc:	4b17      	ldr	r3, [pc, #92]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b1d2:	4b16      	ldr	r3, [pc, #88]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b1d8:	4b14      	ldr	r3, [pc, #80]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b1de:	4b13      	ldr	r3, [pc, #76]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b1e4:	4b11      	ldr	r3, [pc, #68]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b1ea:	4810      	ldr	r0, [pc, #64]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1ec:	f000 f9bc 	bl	800b568 <HAL_DMA_Init>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b1f6:	f7fa fa19 	bl	800562c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a0b      	ldr	r2, [pc, #44]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <HAL_UART_MspInit+0xfc>)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b206:	2200      	movs	r2, #0
 800b208:	2105      	movs	r1, #5
 800b20a:	2034      	movs	r0, #52	; 0x34
 800b20c:	f000 f982 	bl	800b514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b210:	2034      	movs	r0, #52	; 0x34
 800b212:	f000 f99b 	bl	800b54c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b216:	bf00      	nop
 800b218:	3728      	adds	r7, #40	; 0x28
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	40004c00 	.word	0x40004c00
 800b224:	40023800 	.word	0x40023800
 800b228:	40020000 	.word	0x40020000
 800b22c:	2000edf8 	.word	0x2000edf8
 800b230:	40026070 	.word	0x40026070

0800b234 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a0c      	ldr	r2, [pc, #48]	; (800b274 <HAL_UART_TxCpltCallback+0x40>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d112      	bne.n	800b26c <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b24a:	490b      	ldr	r1, [pc, #44]	; (800b278 <HAL_UART_TxCpltCallback+0x44>)
 800b24c:	480b      	ldr	r0, [pc, #44]	; (800b27c <HAL_UART_TxCpltCallback+0x48>)
 800b24e:	f7fa faa7 	bl	80057a0 <ringBuff_PopArray>
 800b252:	4603      	mov	r3, r0
 800b254:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b256:	89fb      	ldrh	r3, [r7, #14]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b25c:	89fb      	ldrh	r3, [r7, #14]
 800b25e:	461a      	mov	r2, r3
 800b260:	4905      	ldr	r1, [pc, #20]	; (800b278 <HAL_UART_TxCpltCallback+0x44>)
 800b262:	4807      	ldr	r0, [pc, #28]	; (800b280 <HAL_UART_TxCpltCallback+0x4c>)
 800b264:	f003 f9ce 	bl	800e604 <HAL_UART_Transmit_DMA>
 800b268:	e000      	b.n	800b26c <HAL_UART_TxCpltCallback+0x38>
			return;
 800b26a:	bf00      	nop
	}
}
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	40004c00 	.word	0x40004c00
 800b278:	2000dd28 	.word	0x2000dd28
 800b27c:	20001074 	.word	0x20001074
 800b280:	2000edb8 	.word	0x2000edb8

0800b284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b284:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b2bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b288:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b28a:	e003      	b.n	800b294 <LoopCopyDataInit>

0800b28c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b28c:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b28e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b290:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b292:	3104      	adds	r1, #4

0800b294 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b294:	480b      	ldr	r0, [pc, #44]	; (800b2c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b296:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b298:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b29a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b29c:	d3f6      	bcc.n	800b28c <CopyDataInit>
  ldr  r2, =_sbss
 800b29e:	4a0b      	ldr	r2, [pc, #44]	; (800b2cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b2a0:	e002      	b.n	800b2a8 <LoopFillZerobss>

0800b2a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b2a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b2a4:	f842 3b04 	str.w	r3, [r2], #4

0800b2a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b2a8:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b2aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b2ac:	d3f9      	bcc.n	800b2a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b2ae:	f7ff fe3f 	bl	800af30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b2b2:	f00a fc81 	bl	8015bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b2b6:	f7fa f925 	bl	8005504 <main>
  bx  lr    
 800b2ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b2bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b2c0:	0801c8c8 	.word	0x0801c8c8
  ldr  r0, =_sdata
 800b2c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b2c8:	200023e8 	.word	0x200023e8
  ldr  r2, =_sbss
 800b2cc:	200023e8 	.word	0x200023e8
  ldr  r3, = _ebss
 800b2d0:	2000fb4c 	.word	0x2000fb4c

0800b2d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b2d4:	e7fe      	b.n	800b2d4 <ADC_IRQHandler>
	...

0800b2d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b2dc:	4b0e      	ldr	r3, [pc, #56]	; (800b318 <HAL_Init+0x40>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a0d      	ldr	r2, [pc, #52]	; (800b318 <HAL_Init+0x40>)
 800b2e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b2e8:	4b0b      	ldr	r3, [pc, #44]	; (800b318 <HAL_Init+0x40>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a0a      	ldr	r2, [pc, #40]	; (800b318 <HAL_Init+0x40>)
 800b2ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b2f4:	4b08      	ldr	r3, [pc, #32]	; (800b318 <HAL_Init+0x40>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a07      	ldr	r2, [pc, #28]	; (800b318 <HAL_Init+0x40>)
 800b2fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b300:	2003      	movs	r0, #3
 800b302:	f000 f8fc 	bl	800b4fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b306:	2000      	movs	r0, #0
 800b308:	f7ff fc92 	bl	800ac30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b30c:	f7ff fc64 	bl	800abd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	40023c00 	.word	0x40023c00

0800b31c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <HAL_IncTick+0x20>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	461a      	mov	r2, r3
 800b326:	4b06      	ldr	r3, [pc, #24]	; (800b340 <HAL_IncTick+0x24>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4413      	add	r3, r2
 800b32c:	4a04      	ldr	r2, [pc, #16]	; (800b340 <HAL_IncTick+0x24>)
 800b32e:	6013      	str	r3, [r2, #0]
}
 800b330:	bf00      	nop
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	20002094 	.word	0x20002094
 800b340:	2000ee58 	.word	0x2000ee58

0800b344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0
  return uwTick;
 800b348:	4b03      	ldr	r3, [pc, #12]	; (800b358 <HAL_GetTick+0x14>)
 800b34a:	681b      	ldr	r3, [r3, #0]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	2000ee58 	.word	0x2000ee58

0800b35c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b364:	f7ff ffee 	bl	800b344 <HAL_GetTick>
 800b368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b374:	d005      	beq.n	800b382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b376:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <HAL_Delay+0x44>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	461a      	mov	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b382:	bf00      	nop
 800b384:	f7ff ffde 	bl	800b344 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	429a      	cmp	r2, r3
 800b392:	d8f7      	bhi.n	800b384 <HAL_Delay+0x28>
  {
  }
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20002094 	.word	0x20002094

0800b3a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b3b4:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <__NVIC_SetPriorityGrouping+0x44>)
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b3cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b3d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b3d6:	4a04      	ldr	r2, [pc, #16]	; (800b3e8 <__NVIC_SetPriorityGrouping+0x44>)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	60d3      	str	r3, [r2, #12]
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	e000ed00 	.word	0xe000ed00

0800b3ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b3f0:	4b04      	ldr	r3, [pc, #16]	; (800b404 <__NVIC_GetPriorityGrouping+0x18>)
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	0a1b      	lsrs	r3, r3, #8
 800b3f6:	f003 0307 	and.w	r3, r3, #7
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	e000ed00 	.word	0xe000ed00

0800b408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b416:	2b00      	cmp	r3, #0
 800b418:	db0b      	blt.n	800b432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	f003 021f 	and.w	r2, r3, #31
 800b420:	4907      	ldr	r1, [pc, #28]	; (800b440 <__NVIC_EnableIRQ+0x38>)
 800b422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b426:	095b      	lsrs	r3, r3, #5
 800b428:	2001      	movs	r0, #1
 800b42a:	fa00 f202 	lsl.w	r2, r0, r2
 800b42e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b432:	bf00      	nop
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	e000e100 	.word	0xe000e100

0800b444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b454:	2b00      	cmp	r3, #0
 800b456:	db0a      	blt.n	800b46e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	490c      	ldr	r1, [pc, #48]	; (800b490 <__NVIC_SetPriority+0x4c>)
 800b45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b462:	0112      	lsls	r2, r2, #4
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	440b      	add	r3, r1
 800b468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b46c:	e00a      	b.n	800b484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	b2da      	uxtb	r2, r3
 800b472:	4908      	ldr	r1, [pc, #32]	; (800b494 <__NVIC_SetPriority+0x50>)
 800b474:	79fb      	ldrb	r3, [r7, #7]
 800b476:	f003 030f 	and.w	r3, r3, #15
 800b47a:	3b04      	subs	r3, #4
 800b47c:	0112      	lsls	r2, r2, #4
 800b47e:	b2d2      	uxtb	r2, r2
 800b480:	440b      	add	r3, r1
 800b482:	761a      	strb	r2, [r3, #24]
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	e000e100 	.word	0xe000e100
 800b494:	e000ed00 	.word	0xe000ed00

0800b498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b498:	b480      	push	{r7}
 800b49a:	b089      	sub	sp, #36	; 0x24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	f1c3 0307 	rsb	r3, r3, #7
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	bf28      	it	cs
 800b4b6:	2304      	movcs	r3, #4
 800b4b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	2b06      	cmp	r3, #6
 800b4c0:	d902      	bls.n	800b4c8 <NVIC_EncodePriority+0x30>
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	3b03      	subs	r3, #3
 800b4c6:	e000      	b.n	800b4ca <NVIC_EncodePriority+0x32>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d6:	43da      	mvns	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	401a      	ands	r2, r3
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b4e0:	f04f 31ff 	mov.w	r1, #4294967295
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ea:	43d9      	mvns	r1, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b4f0:	4313      	orrs	r3, r2
         );
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3724      	adds	r7, #36	; 0x24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff ff4c 	bl	800b3a4 <__NVIC_SetPriorityGrouping>
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b526:	f7ff ff61 	bl	800b3ec <__NVIC_GetPriorityGrouping>
 800b52a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	6978      	ldr	r0, [r7, #20]
 800b532:	f7ff ffb1 	bl	800b498 <NVIC_EncodePriority>
 800b536:	4602      	mov	r2, r0
 800b538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff ff80 	bl	800b444 <__NVIC_SetPriority>
}
 800b544:	bf00      	nop
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff ff54 	bl	800b408 <__NVIC_EnableIRQ>
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b574:	f7ff fee6 	bl	800b344 <HAL_GetTick>
 800b578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e099      	b.n	800b6b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f022 0201 	bic.w	r2, r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5a4:	e00f      	b.n	800b5c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b5a6:	f7ff fecd 	bl	800b344 <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	2b05      	cmp	r3, #5
 800b5b2:	d908      	bls.n	800b5c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2203      	movs	r2, #3
 800b5be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e078      	b.n	800b6b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e8      	bne.n	800b5a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	4b38      	ldr	r3, [pc, #224]	; (800b6c0 <HAL_DMA_Init+0x158>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b60a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	4313      	orrs	r3, r2
 800b616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d107      	bne.n	800b630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b628:	4313      	orrs	r3, r2
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f023 0307 	bic.w	r3, r3, #7
 800b646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	4313      	orrs	r3, r2
 800b650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b656:	2b04      	cmp	r3, #4
 800b658:	d117      	bne.n	800b68a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	4313      	orrs	r3, r2
 800b662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00e      	beq.n	800b68a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fa9f 	bl	800bbb0 <DMA_CheckFifoParam>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d008      	beq.n	800b68a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2240      	movs	r2, #64	; 0x40
 800b67c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b686:	2301      	movs	r3, #1
 800b688:	e016      	b.n	800b6b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fa56 	bl	800bb44 <DMA_CalcBaseAndBitshift>
 800b698:	4603      	mov	r3, r0
 800b69a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a0:	223f      	movs	r2, #63	; 0x3f
 800b6a2:	409a      	lsls	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	f010803f 	.word	0xf010803f

0800b6c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d101      	bne.n	800b6ea <HAL_DMA_Start_IT+0x26>
 800b6e6:	2302      	movs	r3, #2
 800b6e8:	e040      	b.n	800b76c <HAL_DMA_Start_IT+0xa8>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d12f      	bne.n	800b75e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2202      	movs	r2, #2
 800b702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 f9e8 	bl	800bae8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b71c:	223f      	movs	r2, #63	; 0x3f
 800b71e:	409a      	lsls	r2, r3
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0216 	orr.w	r2, r2, #22
 800b732:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d007      	beq.n	800b74c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0208 	orr.w	r2, r2, #8
 800b74a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f042 0201 	orr.w	r2, r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e005      	b.n	800b76a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b766:	2302      	movs	r3, #2
 800b768:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b02      	cmp	r3, #2
 800b786:	d004      	beq.n	800b792 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2280      	movs	r2, #128	; 0x80
 800b78c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e00c      	b.n	800b7ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2205      	movs	r2, #5
 800b796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f022 0201 	bic.w	r2, r2, #1
 800b7a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b7c4:	4b92      	ldr	r3, [pc, #584]	; (800ba10 <HAL_DMA_IRQHandler+0x258>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a92      	ldr	r2, [pc, #584]	; (800ba14 <HAL_DMA_IRQHandler+0x25c>)
 800b7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ce:	0a9b      	lsrs	r3, r3, #10
 800b7d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e2:	2208      	movs	r2, #8
 800b7e4:	409a      	lsls	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d01a      	beq.n	800b824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d013      	beq.n	800b824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 0204 	bic.w	r2, r2, #4
 800b80a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b810:	2208      	movs	r2, #8
 800b812:	409a      	lsls	r2, r3
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81c:	f043 0201 	orr.w	r2, r3, #1
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b828:	2201      	movs	r2, #1
 800b82a:	409a      	lsls	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4013      	ands	r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	d012      	beq.n	800b85a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b846:	2201      	movs	r2, #1
 800b848:	409a      	lsls	r2, r3
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	f043 0202 	orr.w	r2, r3, #2
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85e:	2204      	movs	r2, #4
 800b860:	409a      	lsls	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4013      	ands	r3, r2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d012      	beq.n	800b890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b87c:	2204      	movs	r2, #4
 800b87e:	409a      	lsls	r2, r3
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b888:	f043 0204 	orr.w	r2, r3, #4
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b894:	2210      	movs	r2, #16
 800b896:	409a      	lsls	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4013      	ands	r3, r2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d043      	beq.n	800b928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d03c      	beq.n	800b928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b2:	2210      	movs	r2, #16
 800b8b4:	409a      	lsls	r2, r3
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d018      	beq.n	800b8fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d108      	bne.n	800b8e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d024      	beq.n	800b928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	4798      	blx	r3
 800b8e6:	e01f      	b.n	800b928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d01b      	beq.n	800b928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
 800b8f8:	e016      	b.n	800b928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b904:	2b00      	cmp	r3, #0
 800b906:	d107      	bne.n	800b918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f022 0208 	bic.w	r2, r2, #8
 800b916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d003      	beq.n	800b928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b92c:	2220      	movs	r2, #32
 800b92e:	409a      	lsls	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4013      	ands	r3, r2
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 808e 	beq.w	800ba56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0310 	and.w	r3, r3, #16
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8086 	beq.w	800ba56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b94e:	2220      	movs	r2, #32
 800b950:	409a      	lsls	r2, r3
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b05      	cmp	r3, #5
 800b960:	d136      	bne.n	800b9d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f022 0216 	bic.w	r2, r2, #22
 800b970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	695a      	ldr	r2, [r3, #20]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d103      	bne.n	800b992 <HAL_DMA_IRQHandler+0x1da>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d007      	beq.n	800b9a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f022 0208 	bic.w	r2, r2, #8
 800b9a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9a6:	223f      	movs	r2, #63	; 0x3f
 800b9a8:	409a      	lsls	r2, r3
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d07d      	beq.n	800bac2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	4798      	blx	r3
        }
        return;
 800b9ce:	e078      	b.n	800bac2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d01c      	beq.n	800ba18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d108      	bne.n	800b9fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d030      	beq.n	800ba56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	4798      	blx	r3
 800b9fc:	e02b      	b.n	800ba56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d027      	beq.n	800ba56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	4798      	blx	r3
 800ba0e:	e022      	b.n	800ba56 <HAL_DMA_IRQHandler+0x29e>
 800ba10:	2000208c 	.word	0x2000208c
 800ba14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10f      	bne.n	800ba46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f022 0210 	bic.w	r2, r2, #16
 800ba34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d032      	beq.n	800bac4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d022      	beq.n	800bab0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2205      	movs	r2, #5
 800ba6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0201 	bic.w	r2, r2, #1
 800ba80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	3301      	adds	r3, #1
 800ba86:	60bb      	str	r3, [r7, #8]
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d307      	bcc.n	800ba9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1f2      	bne.n	800ba82 <HAL_DMA_IRQHandler+0x2ca>
 800ba9c:	e000      	b.n	800baa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ba9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d005      	beq.n	800bac4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3
 800bac0:	e000      	b.n	800bac4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bac2:	bf00      	nop
    }
  }
}
 800bac4:	3718      	adds	r7, #24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop

0800bacc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bada:	b2db      	uxtb	r3, r3
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bb04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	2b40      	cmp	r3, #64	; 0x40
 800bb14:	d108      	bne.n	800bb28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bb26:	e007      	b.n	800bb38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	60da      	str	r2, [r3, #12]
}
 800bb38:	bf00      	nop
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	3b10      	subs	r3, #16
 800bb54:	4a14      	ldr	r2, [pc, #80]	; (800bba8 <DMA_CalcBaseAndBitshift+0x64>)
 800bb56:	fba2 2303 	umull	r2, r3, r2, r3
 800bb5a:	091b      	lsrs	r3, r3, #4
 800bb5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bb5e:	4a13      	ldr	r2, [pc, #76]	; (800bbac <DMA_CalcBaseAndBitshift+0x68>)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	461a      	mov	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d909      	bls.n	800bb86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	1d1a      	adds	r2, r3, #4
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	659a      	str	r2, [r3, #88]	; 0x58
 800bb84:	e007      	b.n	800bb96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	aaaaaaab 	.word	0xaaaaaaab
 800bbac:	0801c1b0 	.word	0x0801c1b0

0800bbb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d11f      	bne.n	800bc0a <DMA_CheckFifoParam+0x5a>
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	d856      	bhi.n	800bc7e <DMA_CheckFifoParam+0xce>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <DMA_CheckFifoParam+0x28>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bbfb 	.word	0x0800bbfb
 800bbe0:	0800bbe9 	.word	0x0800bbe9
 800bbe4:	0800bc7f 	.word	0x0800bc7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d046      	beq.n	800bc82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bbf8:	e043      	b.n	800bc82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc02:	d140      	bne.n	800bc86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc08:	e03d      	b.n	800bc86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc12:	d121      	bne.n	800bc58 <DMA_CheckFifoParam+0xa8>
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d837      	bhi.n	800bc8a <DMA_CheckFifoParam+0xda>
 800bc1a:	a201      	add	r2, pc, #4	; (adr r2, 800bc20 <DMA_CheckFifoParam+0x70>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bc31 	.word	0x0800bc31
 800bc24:	0800bc37 	.word	0x0800bc37
 800bc28:	0800bc31 	.word	0x0800bc31
 800bc2c:	0800bc49 	.word	0x0800bc49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	73fb      	strb	r3, [r7, #15]
      break;
 800bc34:	e030      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d025      	beq.n	800bc8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc46:	e022      	b.n	800bc8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc50:	d11f      	bne.n	800bc92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bc56:	e01c      	b.n	800bc92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d903      	bls.n	800bc66 <DMA_CheckFifoParam+0xb6>
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d003      	beq.n	800bc6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bc64:	e018      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6a:	e015      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00e      	beq.n	800bc96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc7c:	e00b      	b.n	800bc96 <DMA_CheckFifoParam+0xe6>
      break;
 800bc7e:	bf00      	nop
 800bc80:	e00a      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      break;
 800bc82:	bf00      	nop
 800bc84:	e008      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      break;
 800bc86:	bf00      	nop
 800bc88:	e006      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      break;
 800bc8a:	bf00      	nop
 800bc8c:	e004      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      break;
 800bc8e:	bf00      	nop
 800bc90:	e002      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      break;   
 800bc92:	bf00      	nop
 800bc94:	e000      	b.n	800bc98 <DMA_CheckFifoParam+0xe8>
      break;
 800bc96:	bf00      	nop
    }
  } 
  
  return status; 
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop

0800bca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b089      	sub	sp, #36	; 0x24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	61fb      	str	r3, [r7, #28]
 800bcc2:	e16b      	b.n	800bf9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	f040 815a 	bne.w	800bf96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d00b      	beq.n	800bd02 <HAL_GPIO_Init+0x5a>
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d007      	beq.n	800bd02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bcf6:	2b11      	cmp	r3, #17
 800bcf8:	d003      	beq.n	800bd02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2b12      	cmp	r3, #18
 800bd00:	d130      	bne.n	800bd64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	2203      	movs	r2, #3
 800bd0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd12:	43db      	mvns	r3, r3
 800bd14:	69ba      	ldr	r2, [r7, #24]
 800bd16:	4013      	ands	r3, r2
 800bd18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	68da      	ldr	r2, [r3, #12]
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	fa02 f303 	lsl.w	r3, r2, r3
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd38:	2201      	movs	r2, #1
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd40:	43db      	mvns	r3, r3
 800bd42:	69ba      	ldr	r2, [r7, #24]
 800bd44:	4013      	ands	r3, r2
 800bd46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	091b      	lsrs	r3, r3, #4
 800bd4e:	f003 0201 	and.w	r2, r3, #1
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	fa02 f303 	lsl.w	r3, r2, r3
 800bd58:	69ba      	ldr	r2, [r7, #24]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	69ba      	ldr	r2, [r7, #24]
 800bd62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	2203      	movs	r2, #3
 800bd70:	fa02 f303 	lsl.w	r3, r2, r3
 800bd74:	43db      	mvns	r3, r3
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	689a      	ldr	r2, [r3, #8]
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	fa02 f303 	lsl.w	r3, r2, r3
 800bd88:	69ba      	ldr	r2, [r7, #24]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	69ba      	ldr	r2, [r7, #24]
 800bd92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d003      	beq.n	800bda4 <HAL_GPIO_Init+0xfc>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	2b12      	cmp	r3, #18
 800bda2:	d123      	bne.n	800bdec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	08da      	lsrs	r2, r3, #3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3208      	adds	r2, #8
 800bdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	f003 0307 	and.w	r3, r3, #7
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	220f      	movs	r2, #15
 800bdbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc0:	43db      	mvns	r3, r3
 800bdc2:	69ba      	ldr	r2, [r7, #24]
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	f003 0307 	and.w	r3, r3, #7
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd8:	69ba      	ldr	r2, [r7, #24]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	08da      	lsrs	r2, r3, #3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3208      	adds	r2, #8
 800bde6:	69b9      	ldr	r1, [r7, #24]
 800bde8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	2203      	movs	r2, #3
 800bdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfc:	43db      	mvns	r3, r3
 800bdfe:	69ba      	ldr	r2, [r7, #24]
 800be00:	4013      	ands	r3, r2
 800be02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	f003 0203 	and.w	r2, r3, #3
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	fa02 f303 	lsl.w	r3, r2, r3
 800be14:	69ba      	ldr	r2, [r7, #24]
 800be16:	4313      	orrs	r3, r2
 800be18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	69ba      	ldr	r2, [r7, #24]
 800be1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f000 80b4 	beq.w	800bf96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	4b60      	ldr	r3, [pc, #384]	; (800bfb4 <HAL_GPIO_Init+0x30c>)
 800be34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be36:	4a5f      	ldr	r2, [pc, #380]	; (800bfb4 <HAL_GPIO_Init+0x30c>)
 800be38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be3c:	6453      	str	r3, [r2, #68]	; 0x44
 800be3e:	4b5d      	ldr	r3, [pc, #372]	; (800bfb4 <HAL_GPIO_Init+0x30c>)
 800be40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be4a:	4a5b      	ldr	r2, [pc, #364]	; (800bfb8 <HAL_GPIO_Init+0x310>)
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	089b      	lsrs	r3, r3, #2
 800be50:	3302      	adds	r3, #2
 800be52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	220f      	movs	r2, #15
 800be62:	fa02 f303 	lsl.w	r3, r2, r3
 800be66:	43db      	mvns	r3, r3
 800be68:	69ba      	ldr	r2, [r7, #24]
 800be6a:	4013      	ands	r3, r2
 800be6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a52      	ldr	r2, [pc, #328]	; (800bfbc <HAL_GPIO_Init+0x314>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d02b      	beq.n	800bece <HAL_GPIO_Init+0x226>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a51      	ldr	r2, [pc, #324]	; (800bfc0 <HAL_GPIO_Init+0x318>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d025      	beq.n	800beca <HAL_GPIO_Init+0x222>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a50      	ldr	r2, [pc, #320]	; (800bfc4 <HAL_GPIO_Init+0x31c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d01f      	beq.n	800bec6 <HAL_GPIO_Init+0x21e>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a4f      	ldr	r2, [pc, #316]	; (800bfc8 <HAL_GPIO_Init+0x320>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d019      	beq.n	800bec2 <HAL_GPIO_Init+0x21a>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a4e      	ldr	r2, [pc, #312]	; (800bfcc <HAL_GPIO_Init+0x324>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d013      	beq.n	800bebe <HAL_GPIO_Init+0x216>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a4d      	ldr	r2, [pc, #308]	; (800bfd0 <HAL_GPIO_Init+0x328>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d00d      	beq.n	800beba <HAL_GPIO_Init+0x212>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a4c      	ldr	r2, [pc, #304]	; (800bfd4 <HAL_GPIO_Init+0x32c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d007      	beq.n	800beb6 <HAL_GPIO_Init+0x20e>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a4b      	ldr	r2, [pc, #300]	; (800bfd8 <HAL_GPIO_Init+0x330>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d101      	bne.n	800beb2 <HAL_GPIO_Init+0x20a>
 800beae:	2307      	movs	r3, #7
 800beb0:	e00e      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800beb2:	2308      	movs	r3, #8
 800beb4:	e00c      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800beb6:	2306      	movs	r3, #6
 800beb8:	e00a      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800beba:	2305      	movs	r3, #5
 800bebc:	e008      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800bebe:	2304      	movs	r3, #4
 800bec0:	e006      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800bec2:	2303      	movs	r3, #3
 800bec4:	e004      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800bec6:	2302      	movs	r3, #2
 800bec8:	e002      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800beca:	2301      	movs	r3, #1
 800becc:	e000      	b.n	800bed0 <HAL_GPIO_Init+0x228>
 800bece:	2300      	movs	r3, #0
 800bed0:	69fa      	ldr	r2, [r7, #28]
 800bed2:	f002 0203 	and.w	r2, r2, #3
 800bed6:	0092      	lsls	r2, r2, #2
 800bed8:	4093      	lsls	r3, r2
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	4313      	orrs	r3, r2
 800bede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bee0:	4935      	ldr	r1, [pc, #212]	; (800bfb8 <HAL_GPIO_Init+0x310>)
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	089b      	lsrs	r3, r3, #2
 800bee6:	3302      	adds	r3, #2
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800beee:	4b3b      	ldr	r3, [pc, #236]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	43db      	mvns	r3, r3
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	4013      	ands	r3, r2
 800befc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf12:	4a32      	ldr	r2, [pc, #200]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bf18:	4b30      	ldr	r3, [pc, #192]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	43db      	mvns	r3, r3
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	4013      	ands	r3, r2
 800bf26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf3c:	4a27      	ldr	r2, [pc, #156]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf42:	4b26      	ldr	r3, [pc, #152]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	43db      	mvns	r3, r3
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	4013      	ands	r3, r2
 800bf50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf66:	4a1d      	ldr	r2, [pc, #116]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf6c:	4b1b      	ldr	r3, [pc, #108]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	43db      	mvns	r3, r3
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	4013      	ands	r3, r2
 800bf7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bf90:	4a12      	ldr	r2, [pc, #72]	; (800bfdc <HAL_GPIO_Init+0x334>)
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	61fb      	str	r3, [r7, #28]
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	2b0f      	cmp	r3, #15
 800bfa0:	f67f ae90 	bls.w	800bcc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop
 800bfa8:	3724      	adds	r7, #36	; 0x24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	40023800 	.word	0x40023800
 800bfb8:	40013800 	.word	0x40013800
 800bfbc:	40020000 	.word	0x40020000
 800bfc0:	40020400 	.word	0x40020400
 800bfc4:	40020800 	.word	0x40020800
 800bfc8:	40020c00 	.word	0x40020c00
 800bfcc:	40021000 	.word	0x40021000
 800bfd0:	40021400 	.word	0x40021400
 800bfd4:	40021800 	.word	0x40021800
 800bfd8:	40021c00 	.word	0x40021c00
 800bfdc:	40013c00 	.word	0x40013c00

0800bfe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	807b      	strh	r3, [r7, #2]
 800bfec:	4613      	mov	r3, r2
 800bfee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bff0:	787b      	ldrb	r3, [r7, #1]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bff6:	887a      	ldrh	r2, [r7, #2]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bffc:	e003      	b.n	800c006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bffe:	887b      	ldrh	r3, [r7, #2]
 800c000:	041a      	lsls	r2, r3, #16
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	619a      	str	r2, [r3, #24]
}
 800c006:	bf00      	nop
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
	...

0800c014 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e043      	b.n	800c0b2 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7f8 fbb0 	bl	80047a4 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	3308      	adds	r3, #8
 800c04c:	4619      	mov	r1, r3
 800c04e:	4610      	mov	r0, r2
 800c050:	f003 f9b6 	bl	800f3c0 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	461a      	mov	r2, r3
 800c05e:	68b9      	ldr	r1, [r7, #8]
 800c060:	f003 fa00 	bl	800f464 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6858      	ldr	r0, [r3, #4]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	689a      	ldr	r2, [r3, #8]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	f003 fa35 	bl	800f4e0 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	6892      	ldr	r2, [r2, #8]
 800c07e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	6892      	ldr	r2, [r2, #8]
 800c08a:	f041 0101 	orr.w	r1, r1, #1
 800c08e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d103      	bne.n	800c0a2 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c09a:	4b08      	ldr	r3, [pc, #32]	; (800c0bc <HAL_NOR_Init+0xa8>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	e002      	b.n	800c0a8 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c0a2:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <HAL_NOR_Init+0xa8>)
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20002864 	.word	0x20002864

0800c0c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0c2:	b08f      	sub	sp, #60	; 0x3c
 800c0c4:	af0a      	add	r7, sp, #40	; 0x28
 800c0c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e10f      	b.n	800c2f2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d106      	bne.n	800c0f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f009 fa61 	bl	80155b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2203      	movs	r2, #3
 800c0f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c102:	2b00      	cmp	r3, #0
 800c104:	d102      	bne.n	800c10c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f003 fb3a 	bl	800f78a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	687e      	ldr	r6, [r7, #4]
 800c11e:	466d      	mov	r5, sp
 800c120:	f106 0410 	add.w	r4, r6, #16
 800c124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c12a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c12c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c130:	e885 0003 	stmia.w	r5, {r0, r1}
 800c134:	1d33      	adds	r3, r6, #4
 800c136:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c138:	6838      	ldr	r0, [r7, #0]
 800c13a:	f003 fa11 	bl	800f560 <USB_CoreInit>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2202      	movs	r2, #2
 800c148:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e0d0      	b.n	800c2f2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2100      	movs	r1, #0
 800c156:	4618      	mov	r0, r3
 800c158:	f003 fb28 	bl	800f7ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c15c:	2300      	movs	r3, #0
 800c15e:	73fb      	strb	r3, [r7, #15]
 800c160:	e04a      	b.n	800c1f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c162:	7bfa      	ldrb	r2, [r7, #15]
 800c164:	6879      	ldr	r1, [r7, #4]
 800c166:	4613      	mov	r3, r2
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	1a9b      	subs	r3, r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	440b      	add	r3, r1
 800c170:	333d      	adds	r3, #61	; 0x3d
 800c172:	2201      	movs	r2, #1
 800c174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c176:	7bfa      	ldrb	r2, [r7, #15]
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	4613      	mov	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	333c      	adds	r3, #60	; 0x3c
 800c186:	7bfa      	ldrb	r2, [r7, #15]
 800c188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c18a:	7bfa      	ldrb	r2, [r7, #15]
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	b298      	uxth	r0, r3
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	4613      	mov	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	1a9b      	subs	r3, r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	440b      	add	r3, r1
 800c19c:	3342      	adds	r3, #66	; 0x42
 800c19e:	4602      	mov	r2, r0
 800c1a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c1a2:	7bfa      	ldrb	r2, [r7, #15]
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	1a9b      	subs	r3, r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	440b      	add	r3, r1
 800c1b0:	333f      	adds	r3, #63	; 0x3f
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c1b6:	7bfa      	ldrb	r2, [r7, #15]
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	1a9b      	subs	r3, r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	440b      	add	r3, r1
 800c1c4:	3344      	adds	r3, #68	; 0x44
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	1a9b      	subs	r3, r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	440b      	add	r3, r1
 800c1d8:	3348      	adds	r3, #72	; 0x48
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c1de:	7bfa      	ldrb	r2, [r7, #15]
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	1a9b      	subs	r3, r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	440b      	add	r3, r1
 800c1ec:	3350      	adds	r3, #80	; 0x50
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	73fb      	strb	r3, [r7, #15]
 800c1f8:	7bfa      	ldrb	r2, [r7, #15]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d3af      	bcc.n	800c162 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c202:	2300      	movs	r3, #0
 800c204:	73fb      	strb	r3, [r7, #15]
 800c206:	e044      	b.n	800c292 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c208:	7bfa      	ldrb	r2, [r7, #15]
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	4613      	mov	r3, r2
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	1a9b      	subs	r3, r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	440b      	add	r3, r1
 800c216:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c21a:	2200      	movs	r2, #0
 800c21c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c21e:	7bfa      	ldrb	r2, [r7, #15]
 800c220:	6879      	ldr	r1, [r7, #4]
 800c222:	4613      	mov	r3, r2
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	1a9b      	subs	r3, r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	440b      	add	r3, r1
 800c22c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c230:	7bfa      	ldrb	r2, [r7, #15]
 800c232:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c234:	7bfa      	ldrb	r2, [r7, #15]
 800c236:	6879      	ldr	r1, [r7, #4]
 800c238:	4613      	mov	r3, r2
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	1a9b      	subs	r3, r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	440b      	add	r3, r1
 800c242:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c246:	2200      	movs	r2, #0
 800c248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c24a:	7bfa      	ldrb	r2, [r7, #15]
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	4613      	mov	r3, r2
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	1a9b      	subs	r3, r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	440b      	add	r3, r1
 800c258:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c25c:	2200      	movs	r2, #0
 800c25e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c260:	7bfa      	ldrb	r2, [r7, #15]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	4613      	mov	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	440b      	add	r3, r1
 800c26e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c276:	7bfa      	ldrb	r2, [r7, #15]
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	4613      	mov	r3, r2
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	1a9b      	subs	r3, r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	440b      	add	r3, r1
 800c284:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c288:	2200      	movs	r2, #0
 800c28a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	3301      	adds	r3, #1
 800c290:	73fb      	strb	r3, [r7, #15]
 800c292:	7bfa      	ldrb	r2, [r7, #15]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d3b5      	bcc.n	800c208 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	603b      	str	r3, [r7, #0]
 800c2a2:	687e      	ldr	r6, [r7, #4]
 800c2a4:	466d      	mov	r5, sp
 800c2a6:	f106 0410 	add.w	r4, r6, #16
 800c2aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c2b6:	e885 0003 	stmia.w	r5, {r0, r1}
 800c2ba:	1d33      	adds	r3, r6, #4
 800c2bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2be:	6838      	ldr	r0, [r7, #0]
 800c2c0:	f003 fa9e 	bl	800f800 <USB_DevInit>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d005      	beq.n	800c2d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2202      	movs	r2, #2
 800c2ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e00d      	b.n	800c2f2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f004 fae6 	bl	80108bc <USB_DevDisconnect>

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <HAL_PCD_Start+0x1c>
 800c312:	2302      	movs	r3, #2
 800c314:	e020      	b.n	800c358 <HAL_PCD_Start+0x5e>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c322:	2b01      	cmp	r3, #1
 800c324:	d109      	bne.n	800c33a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d005      	beq.n	800c33a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4618      	mov	r0, r3
 800c340:	f003 fa12 	bl	800f768 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4618      	mov	r0, r3
 800c34a:	f004 fa96 	bl	801087a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c360:	b590      	push	{r4, r7, lr}
 800c362:	b08d      	sub	sp, #52	; 0x34
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4618      	mov	r0, r3
 800c378:	f004 fb54 	bl	8010a24 <USB_GetMode>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f040 839d 	bne.w	800cabe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f004 fab8 	bl	80108fe <USB_ReadInterrupts>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 8393 	beq.w	800cabc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f004 faaf 	bl	80108fe <USB_ReadInterrupts>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f003 0302 	and.w	r3, r3, #2
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d107      	bne.n	800c3ba <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	695a      	ldr	r2, [r3, #20]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f002 0202 	and.w	r2, r2, #2
 800c3b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f004 fa9d 	bl	80108fe <USB_ReadInterrupts>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f003 0310 	and.w	r3, r3, #16
 800c3ca:	2b10      	cmp	r3, #16
 800c3cc:	d161      	bne.n	800c492 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	699a      	ldr	r2, [r3, #24]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f022 0210 	bic.w	r2, r2, #16
 800c3dc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	f003 020f 	and.w	r2, r3, #15
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	00db      	lsls	r3, r3, #3
 800c3ee:	1a9b      	subs	r3, r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	3304      	adds	r3, #4
 800c3fc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	0c5b      	lsrs	r3, r3, #17
 800c402:	f003 030f 	and.w	r3, r3, #15
 800c406:	2b02      	cmp	r3, #2
 800c408:	d124      	bne.n	800c454 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c40a:	69ba      	ldr	r2, [r7, #24]
 800c40c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c410:	4013      	ands	r3, r2
 800c412:	2b00      	cmp	r3, #0
 800c414:	d035      	beq.n	800c482 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	091b      	lsrs	r3, r3, #4
 800c41e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c424:	b29b      	uxth	r3, r3
 800c426:	461a      	mov	r2, r3
 800c428:	6a38      	ldr	r0, [r7, #32]
 800c42a:	f004 f903 	bl	8010634 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	68da      	ldr	r2, [r3, #12]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	091b      	lsrs	r3, r3, #4
 800c436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c43a:	441a      	add	r2, r3
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	699a      	ldr	r2, [r3, #24]
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	091b      	lsrs	r3, r3, #4
 800c448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c44c:	441a      	add	r2, r3
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	619a      	str	r2, [r3, #24]
 800c452:	e016      	b.n	800c482 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	0c5b      	lsrs	r3, r3, #17
 800c458:	f003 030f 	and.w	r3, r3, #15
 800c45c:	2b06      	cmp	r3, #6
 800c45e:	d110      	bne.n	800c482 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c466:	2208      	movs	r2, #8
 800c468:	4619      	mov	r1, r3
 800c46a:	6a38      	ldr	r0, [r7, #32]
 800c46c:	f004 f8e2 	bl	8010634 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	699a      	ldr	r2, [r3, #24]
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	091b      	lsrs	r3, r3, #4
 800c478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c47c:	441a      	add	r2, r3
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	699a      	ldr	r2, [r3, #24]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f042 0210 	orr.w	r2, r2, #16
 800c490:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4618      	mov	r0, r3
 800c498:	f004 fa31 	bl	80108fe <USB_ReadInterrupts>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c4a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c4a6:	d16e      	bne.n	800c586 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f004 fa37 	bl	8010924 <USB_ReadDevAllOutEpInterrupt>
 800c4b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c4b8:	e062      	b.n	800c580 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4bc:	f003 0301 	and.w	r3, r3, #1
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d057      	beq.n	800c574 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ca:	b2d2      	uxtb	r2, r2
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f004 fa5c 	bl	801098c <USB_ReadDevOutEPInterrupt>
 800c4d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00c      	beq.n	800c4fa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	015a      	lsls	r2, r3, #5
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c4f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fdb1 	bl	800d05c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	f003 0308 	and.w	r3, r3, #8
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00c      	beq.n	800c51e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c510:	461a      	mov	r2, r3
 800c512:	2308      	movs	r3, #8
 800c514:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 feab 	bl	800d274 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	f003 0310 	and.w	r3, r3, #16
 800c524:	2b00      	cmp	r3, #0
 800c526:	d008      	beq.n	800c53a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c534:	461a      	mov	r2, r3
 800c536:	2310      	movs	r3, #16
 800c538:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f003 0320 	and.w	r3, r3, #32
 800c540:	2b00      	cmp	r3, #0
 800c542:	d008      	beq.n	800c556 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	015a      	lsls	r2, r3, #5
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c550:	461a      	mov	r2, r3
 800c552:	2320      	movs	r3, #32
 800c554:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d009      	beq.n	800c574 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	4413      	add	r3, r2
 800c568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c56c:	461a      	mov	r2, r3
 800c56e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c572:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	3301      	adds	r3, #1
 800c578:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	085b      	lsrs	r3, r3, #1
 800c57e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	2b00      	cmp	r3, #0
 800c584:	d199      	bne.n	800c4ba <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f004 f9b7 	bl	80108fe <USB_ReadInterrupts>
 800c590:	4603      	mov	r3, r0
 800c592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c59a:	f040 80c0 	bne.w	800c71e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f004 f9d8 	bl	8010958 <USB_ReadDevAllInEpInterrupt>
 800c5a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c5ae:	e0b2      	b.n	800c716 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 80a7 	beq.w	800c70a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f004 f9fe 	bl	80109c8 <USB_ReadDevInEPInterrupt>
 800c5cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f003 0301 	and.w	r3, r3, #1
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d057      	beq.n	800c688 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	f003 030f 	and.w	r3, r3, #15
 800c5de:	2201      	movs	r2, #1
 800c5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	43db      	mvns	r3, r3
 800c5f2:	69f9      	ldr	r1, [r7, #28]
 800c5f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	015a      	lsls	r2, r3, #5
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	4413      	add	r3, r2
 800c604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c608:	461a      	mov	r2, r3
 800c60a:	2301      	movs	r3, #1
 800c60c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d132      	bne.n	800c67c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c616:	6879      	ldr	r1, [r7, #4]
 800c618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c61a:	4613      	mov	r3, r2
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	1a9b      	subs	r3, r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	440b      	add	r3, r1
 800c624:	3348      	adds	r3, #72	; 0x48
 800c626:	6819      	ldr	r1, [r3, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62c:	4613      	mov	r3, r2
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	1a9b      	subs	r3, r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4403      	add	r3, r0
 800c636:	3344      	adds	r3, #68	; 0x44
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4419      	add	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c640:	4613      	mov	r3, r2
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	1a9b      	subs	r3, r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4403      	add	r3, r0
 800c64a:	3348      	adds	r3, #72	; 0x48
 800c64c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	2b00      	cmp	r3, #0
 800c652:	d113      	bne.n	800c67c <HAL_PCD_IRQHandler+0x31c>
 800c654:	6879      	ldr	r1, [r7, #4]
 800c656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c658:	4613      	mov	r3, r2
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	1a9b      	subs	r3, r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	440b      	add	r3, r1
 800c662:	3350      	adds	r3, #80	; 0x50
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d108      	bne.n	800c67c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c674:	461a      	mov	r2, r3
 800c676:	2101      	movs	r1, #1
 800c678:	f004 fa06 	bl	8010a88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f009 f817 	bl	80156b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f003 0308 	and.w	r3, r3, #8
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d008      	beq.n	800c6a4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	015a      	lsls	r2, r3, #5
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	4413      	add	r3, r2
 800c69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2308      	movs	r3, #8
 800c6a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f003 0310 	and.w	r3, r3, #16
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d008      	beq.n	800c6c0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	015a      	lsls	r2, r3, #5
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	2310      	movs	r3, #16
 800c6be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d008      	beq.n	800c6dc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6cc:	015a      	lsls	r2, r3, #5
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	2340      	movs	r3, #64	; 0x40
 800c6da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	f003 0302 	and.w	r3, r3, #2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d008      	beq.n	800c6f8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e8:	015a      	lsls	r2, r3, #5
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fc1b 	bl	800cf40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70c:	3301      	adds	r3, #1
 800c70e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c712:	085b      	lsrs	r3, r3, #1
 800c714:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f47f af49 	bne.w	800c5b0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4618      	mov	r0, r3
 800c724:	f004 f8eb 	bl	80108fe <USB_ReadInterrupts>
 800c728:	4603      	mov	r3, r0
 800c72a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c72e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c732:	d122      	bne.n	800c77a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	69fa      	ldr	r2, [r7, #28]
 800c73e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c742:	f023 0301 	bic.w	r3, r3, #1
 800c746:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d108      	bne.n	800c764 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c75a:	2100      	movs	r1, #0
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fe27 	bl	800d3b0 <HAL_PCDEx_LPM_Callback>
 800c762:	e002      	b.n	800c76a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f009 f81d 	bl	80157a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	695a      	ldr	r2, [r3, #20]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4618      	mov	r0, r3
 800c780:	f004 f8bd 	bl	80108fe <USB_ReadInterrupts>
 800c784:	4603      	mov	r3, r0
 800c786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c78a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c78e:	d112      	bne.n	800c7b6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d102      	bne.n	800c7a6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f008 ffd9 	bl	8015758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	695a      	ldr	r2, [r3, #20]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c7b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f004 f89f 	bl	80108fe <USB_ReadInterrupts>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7ca:	f040 80c7 	bne.w	800c95c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7dc:	f023 0301 	bic.w	r3, r3, #1
 800c7e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2110      	movs	r1, #16
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f003 f96d 	bl	800fac8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7f2:	e056      	b.n	800c8a2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	015a      	lsls	r2, r3, #5
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c800:	461a      	mov	r2, r3
 800c802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c806:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c818:	0151      	lsls	r1, r2, #5
 800c81a:	69fa      	ldr	r2, [r7, #28]
 800c81c:	440a      	add	r2, r1
 800c81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c826:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c838:	0151      	lsls	r1, r2, #5
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	440a      	add	r2, r1
 800c83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c846:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c854:	461a      	mov	r2, r3
 800c856:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c85a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	4413      	add	r3, r2
 800c864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c86c:	0151      	lsls	r1, r2, #5
 800c86e:	69fa      	ldr	r2, [r7, #28]
 800c870:	440a      	add	r2, r1
 800c872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c87a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	015a      	lsls	r2, r3, #5
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	4413      	add	r3, r2
 800c884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c88c:	0151      	lsls	r1, r2, #5
 800c88e:	69fa      	ldr	r2, [r7, #28]
 800c890:	440a      	add	r2, r1
 800c892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c89a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	3301      	adds	r3, #1
 800c8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d3a3      	bcc.n	800c7f4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b2:	69db      	ldr	r3, [r3, #28]
 800c8b4:	69fa      	ldr	r2, [r7, #28]
 800c8b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c8be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d016      	beq.n	800c8f6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8d2:	69fa      	ldr	r2, [r7, #28]
 800c8d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8d8:	f043 030b 	orr.w	r3, r3, #11
 800c8dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ee:	f043 030b 	orr.w	r3, r3, #11
 800c8f2:	6453      	str	r3, [r2, #68]	; 0x44
 800c8f4:	e015      	b.n	800c922 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	69fa      	ldr	r2, [r7, #28]
 800c900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c908:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c90c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	69fa      	ldr	r2, [r7, #28]
 800c918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c91c:	f043 030b 	orr.w	r3, r3, #11
 800c920:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	69fa      	ldr	r2, [r7, #28]
 800c92c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c930:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c934:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6818      	ldr	r0, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c946:	461a      	mov	r2, r3
 800c948:	f004 f89e 	bl	8010a88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	695a      	ldr	r2, [r3, #20]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c95a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4618      	mov	r0, r3
 800c962:	f003 ffcc 	bl	80108fe <USB_ReadInterrupts>
 800c966:	4603      	mov	r3, r0
 800c968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c96c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c970:	d124      	bne.n	800c9bc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4618      	mov	r0, r3
 800c978:	f004 f862 	bl	8010a40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4618      	mov	r0, r3
 800c982:	f003 f902 	bl	800fb8a <USB_GetDevSpeed>
 800c986:	4603      	mov	r3, r0
 800c988:	461a      	mov	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681c      	ldr	r4, [r3, #0]
 800c992:	f001 f951 	bl	800dc38 <HAL_RCC_GetHCLKFreq>
 800c996:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	461a      	mov	r2, r3
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f002 fe3f 	bl	800f624 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f008 fead 	bl	8015706 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	695a      	ldr	r2, [r3, #20]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c9ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f003 ff9c 	bl	80108fe <USB_ReadInterrupts>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f003 0308 	and.w	r3, r3, #8
 800c9cc:	2b08      	cmp	r3, #8
 800c9ce:	d10a      	bne.n	800c9e6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f008 fe8a 	bl	80156ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	695a      	ldr	r2, [r3, #20]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f002 0208 	and.w	r2, r2, #8
 800c9e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f003 ff87 	bl	80108fe <USB_ReadInterrupts>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9fa:	d10f      	bne.n	800ca1c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f008 feec 	bl	80157e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	695a      	ldr	r2, [r3, #20]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ca1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f003 ff6c 	bl	80108fe <USB_ReadInterrupts>
 800ca26:	4603      	mov	r3, r0
 800ca28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca30:	d10f      	bne.n	800ca52 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ca32:	2300      	movs	r3, #0
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f008 febf 	bl	80157c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	695a      	ldr	r2, [r3, #20]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ca50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f003 ff51 	bl	80108fe <USB_ReadInterrupts>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca66:	d10a      	bne.n	800ca7e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f008 fecd 	bl	8015808 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	695a      	ldr	r2, [r3, #20]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ca7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f003 ff3b 	bl	80108fe <USB_ReadInterrupts>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f003 0304 	and.w	r3, r3, #4
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	d115      	bne.n	800cabe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	f003 0304 	and.w	r3, r3, #4
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f008 febd 	bl	8015824 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	6859      	ldr	r1, [r3, #4]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	605a      	str	r2, [r3, #4]
 800caba:	e000      	b.n	800cabe <HAL_PCD_IRQHandler+0x75e>
      return;
 800cabc:	bf00      	nop
    }
  }
}
 800cabe:	3734      	adds	r7, #52	; 0x34
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd90      	pop	{r4, r7, pc}

0800cac4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d101      	bne.n	800cade <HAL_PCD_SetAddress+0x1a>
 800cada:	2302      	movs	r3, #2
 800cadc:	e013      	b.n	800cb06 <HAL_PCD_SetAddress+0x42>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	78fa      	ldrb	r2, [r7, #3]
 800caea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	78fa      	ldrb	r2, [r7, #3]
 800caf4:	4611      	mov	r1, r2
 800caf6:	4618      	mov	r0, r3
 800caf8:	f003 fe99 	bl	801082e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b084      	sub	sp, #16
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	4608      	mov	r0, r1
 800cb18:	4611      	mov	r1, r2
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	70fb      	strb	r3, [r7, #3]
 800cb20:	460b      	mov	r3, r1
 800cb22:	803b      	strh	r3, [r7, #0]
 800cb24:	4613      	mov	r3, r2
 800cb26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cb2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	da0f      	bge.n	800cb54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb34:	78fb      	ldrb	r3, [r7, #3]
 800cb36:	f003 020f 	and.w	r2, r3, #15
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	1a9b      	subs	r3, r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	3338      	adds	r3, #56	; 0x38
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	4413      	add	r3, r2
 800cb48:	3304      	adds	r3, #4
 800cb4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	705a      	strb	r2, [r3, #1]
 800cb52:	e00f      	b.n	800cb74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb54:	78fb      	ldrb	r3, [r7, #3]
 800cb56:	f003 020f 	and.w	r2, r3, #15
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	1a9b      	subs	r3, r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4413      	add	r3, r2
 800cb6a:	3304      	adds	r3, #4
 800cb6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cb74:	78fb      	ldrb	r3, [r7, #3]
 800cb76:	f003 030f 	and.w	r3, r3, #15
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cb80:	883a      	ldrh	r2, [r7, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	78ba      	ldrb	r2, [r7, #2]
 800cb8a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	785b      	ldrb	r3, [r3, #1]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cb9e:	78bb      	ldrb	r3, [r7, #2]
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d102      	bne.n	800cbaa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2200      	movs	r2, #0
 800cba8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d101      	bne.n	800cbb8 <HAL_PCD_EP_Open+0xaa>
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	e00e      	b.n	800cbd6 <HAL_PCD_EP_Open+0xc8>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68f9      	ldr	r1, [r7, #12]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f003 f804 	bl	800fbd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cbd4:	7afb      	ldrb	r3, [r7, #11]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cbea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	da0f      	bge.n	800cc12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbf2:	78fb      	ldrb	r3, [r7, #3]
 800cbf4:	f003 020f 	and.w	r2, r3, #15
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	1a9b      	subs	r3, r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	3338      	adds	r3, #56	; 0x38
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	3304      	adds	r3, #4
 800cc08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	705a      	strb	r2, [r3, #1]
 800cc10:	e00f      	b.n	800cc32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc12:	78fb      	ldrb	r3, [r7, #3]
 800cc14:	f003 020f 	and.w	r2, r3, #15
 800cc18:	4613      	mov	r3, r2
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	1a9b      	subs	r3, r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	4413      	add	r3, r2
 800cc28:	3304      	adds	r3, #4
 800cc2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cc32:	78fb      	ldrb	r3, [r7, #3]
 800cc34:	f003 030f 	and.w	r3, r3, #15
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d101      	bne.n	800cc4c <HAL_PCD_EP_Close+0x6e>
 800cc48:	2302      	movs	r3, #2
 800cc4a:	e00e      	b.n	800cc6a <HAL_PCD_EP_Close+0x8c>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68f9      	ldr	r1, [r7, #12]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f003 f842 	bl	800fce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b086      	sub	sp, #24
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc82:	7afb      	ldrb	r3, [r7, #11]
 800cc84:	f003 020f 	and.w	r2, r3, #15
 800cc88:	4613      	mov	r3, r2
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	1a9b      	subs	r3, r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	4413      	add	r3, r2
 800cc98:	3304      	adds	r3, #4
 800cc9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ccb4:	7afb      	ldrb	r3, [r7, #11]
 800ccb6:	f003 030f 	and.w	r3, r3, #15
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d102      	bne.n	800ccce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ccce:	7afb      	ldrb	r3, [r7, #11]
 800ccd0:	f003 030f 	and.w	r3, r3, #15
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d109      	bne.n	800ccec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6818      	ldr	r0, [r3, #0]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	461a      	mov	r2, r3
 800cce4:	6979      	ldr	r1, [r7, #20]
 800cce6:	f003 fb1d 	bl	8010324 <USB_EP0StartXfer>
 800ccea:	e008      	b.n	800ccfe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6818      	ldr	r0, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	6979      	ldr	r1, [r7, #20]
 800ccfa:	f003 f8cf 	bl	800fe9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cd14:	78fb      	ldrb	r3, [r7, #3]
 800cd16:	f003 020f 	and.w	r2, r3, #15
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	1a9b      	subs	r3, r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	440b      	add	r3, r1
 800cd26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cd2a:	681b      	ldr	r3, [r3, #0]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	607a      	str	r2, [r7, #4]
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	460b      	mov	r3, r1
 800cd46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd48:	7afb      	ldrb	r3, [r7, #11]
 800cd4a:	f003 020f 	and.w	r2, r3, #15
 800cd4e:	4613      	mov	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	1a9b      	subs	r3, r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	3338      	adds	r3, #56	; 0x38
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	2201      	movs	r2, #1
 800cd76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd78:	7afb      	ldrb	r3, [r7, #11]
 800cd7a:	f003 030f 	and.w	r3, r3, #15
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d102      	bne.n	800cd92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cd92:	7afb      	ldrb	r3, [r7, #11]
 800cd94:	f003 030f 	and.w	r3, r3, #15
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d109      	bne.n	800cdb0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6818      	ldr	r0, [r3, #0]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	461a      	mov	r2, r3
 800cda8:	6979      	ldr	r1, [r7, #20]
 800cdaa:	f003 fabb 	bl	8010324 <USB_EP0StartXfer>
 800cdae:	e008      	b.n	800cdc2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6979      	ldr	r1, [r7, #20]
 800cdbe:	f003 f86d 	bl	800fe9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3718      	adds	r7, #24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cdd8:	78fb      	ldrb	r3, [r7, #3]
 800cdda:	f003 020f 	and.w	r2, r3, #15
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d901      	bls.n	800cdea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e050      	b.n	800ce8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cdea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	da0f      	bge.n	800ce12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdf2:	78fb      	ldrb	r3, [r7, #3]
 800cdf4:	f003 020f 	and.w	r2, r3, #15
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	1a9b      	subs	r3, r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	3338      	adds	r3, #56	; 0x38
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	4413      	add	r3, r2
 800ce06:	3304      	adds	r3, #4
 800ce08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	705a      	strb	r2, [r3, #1]
 800ce10:	e00d      	b.n	800ce2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	4613      	mov	r3, r2
 800ce16:	00db      	lsls	r3, r3, #3
 800ce18:	1a9b      	subs	r3, r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	4413      	add	r3, r2
 800ce24:	3304      	adds	r3, #4
 800ce26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2201      	movs	r2, #1
 800ce32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d101      	bne.n	800ce4e <HAL_PCD_EP_SetStall+0x82>
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	e01e      	b.n	800ce8c <HAL_PCD_EP_SetStall+0xc0>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f003 fc12 	bl	8010686 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce62:	78fb      	ldrb	r3, [r7, #3]
 800ce64:	f003 030f 	and.w	r3, r3, #15
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6818      	ldr	r0, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	b2d9      	uxtb	r1, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	f003 fe03 	bl	8010a88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	f003 020f 	and.w	r2, r3, #15
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d901      	bls.n	800ceb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e042      	b.n	800cf38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ceb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	da0f      	bge.n	800ceda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	f003 020f 	and.w	r2, r3, #15
 800cec0:	4613      	mov	r3, r2
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	1a9b      	subs	r3, r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	3338      	adds	r3, #56	; 0x38
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	3304      	adds	r3, #4
 800ced0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2201      	movs	r2, #1
 800ced6:	705a      	strb	r2, [r3, #1]
 800ced8:	e00f      	b.n	800cefa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ceda:	78fb      	ldrb	r3, [r7, #3]
 800cedc:	f003 020f 	and.w	r2, r3, #15
 800cee0:	4613      	mov	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	1a9b      	subs	r3, r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	4413      	add	r3, r2
 800cef0:	3304      	adds	r3, #4
 800cef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf00:	78fb      	ldrb	r3, [r7, #3]
 800cf02:	f003 030f 	and.w	r3, r3, #15
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d101      	bne.n	800cf1a <HAL_PCD_EP_ClrStall+0x86>
 800cf16:	2302      	movs	r3, #2
 800cf18:	e00e      	b.n	800cf38 <HAL_PCD_EP_ClrStall+0xa4>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68f9      	ldr	r1, [r7, #12]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f003 fc1a 	bl	8010762 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b08a      	sub	sp, #40	; 0x28
 800cf44:	af02      	add	r7, sp, #8
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	4613      	mov	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	1a9b      	subs	r3, r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	3338      	adds	r3, #56	; 0x38
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	4413      	add	r3, r2
 800cf64:	3304      	adds	r3, #4
 800cf66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	699a      	ldr	r2, [r3, #24]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d901      	bls.n	800cf78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cf74:	2301      	movs	r3, #1
 800cf76:	e06c      	b.n	800d052 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	695a      	ldr	r2, [r3, #20]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	699b      	ldr	r3, [r3, #24]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	69fa      	ldr	r2, [r7, #28]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d902      	bls.n	800cf94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	3303      	adds	r3, #3
 800cf98:	089b      	lsrs	r3, r3, #2
 800cf9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf9c:	e02b      	b.n	800cff6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	695a      	ldr	r2, [r3, #20]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	69fa      	ldr	r2, [r7, #28]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d902      	bls.n	800cfba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	3303      	adds	r3, #3
 800cfbe:	089b      	lsrs	r3, r3, #2
 800cfc0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	68d9      	ldr	r1, [r3, #12]
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	6978      	ldr	r0, [r7, #20]
 800cfda:	f003 faf6 	bl	80105ca <USB_WritePacket>

    ep->xfer_buff  += len;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	68da      	ldr	r2, [r3, #12]
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	441a      	add	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	699a      	ldr	r2, [r3, #24]
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	441a      	add	r2, r3
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	015a      	lsls	r2, r3, #5
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	4413      	add	r3, r2
 800cffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	b29b      	uxth	r3, r3
 800d006:	69ba      	ldr	r2, [r7, #24]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d809      	bhi.n	800d020 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	699a      	ldr	r2, [r3, #24]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d014:	429a      	cmp	r2, r3
 800d016:	d203      	bcs.n	800d020 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	695b      	ldr	r3, [r3, #20]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1be      	bne.n	800cf9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	695a      	ldr	r2, [r3, #20]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d811      	bhi.n	800d050 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	f003 030f 	and.w	r3, r3, #15
 800d032:	2201      	movs	r2, #1
 800d034:	fa02 f303 	lsl.w	r3, r2, r3
 800d038:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	43db      	mvns	r3, r3
 800d046:	6939      	ldr	r1, [r7, #16]
 800d048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d04c:	4013      	ands	r3, r2
 800d04e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3720      	adds	r7, #32
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	333c      	adds	r3, #60	; 0x3c
 800d074:	3304      	adds	r3, #4
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	015a      	lsls	r2, r3, #5
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	4413      	add	r3, r2
 800d082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	f040 80a0 	bne.w	800d1d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f003 0308 	and.w	r3, r3, #8
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d015      	beq.n	800d0ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	4a72      	ldr	r2, [pc, #456]	; (800d26c <PCD_EP_OutXfrComplete_int+0x210>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	f240 80dd 	bls.w	800d262 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f000 80d7 	beq.w	800d262 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	015a      	lsls	r2, r3, #5
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0c6:	6093      	str	r3, [r2, #8]
 800d0c8:	e0cb      	b.n	800d262 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	015a      	lsls	r2, r3, #5
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	4413      	add	r3, r2
 800d0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	2320      	movs	r3, #32
 800d0e4:	6093      	str	r3, [r2, #8]
 800d0e6:	e0bc      	b.n	800d262 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f040 80b7 	bne.w	800d262 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4a5d      	ldr	r2, [pc, #372]	; (800d26c <PCD_EP_OutXfrComplete_int+0x210>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d90f      	bls.n	800d11c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00a      	beq.n	800d11c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	015a      	lsls	r2, r3, #5
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d112:	461a      	mov	r2, r3
 800d114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d118:	6093      	str	r3, [r2, #8]
 800d11a:	e0a2      	b.n	800d262 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d11c:	6879      	ldr	r1, [r7, #4]
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	4613      	mov	r3, r2
 800d122:	00db      	lsls	r3, r3, #3
 800d124:	1a9b      	subs	r3, r3, r2
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	440b      	add	r3, r1
 800d12a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d12e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	0159      	lsls	r1, r3, #5
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	440b      	add	r3, r1
 800d138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d142:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	4613      	mov	r3, r2
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	1a9b      	subs	r3, r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4403      	add	r3, r0
 800d152:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d156:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d158:	6879      	ldr	r1, [r7, #4]
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	4613      	mov	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	1a9b      	subs	r3, r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	440b      	add	r3, r1
 800d166:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d16a:	6819      	ldr	r1, [r3, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	4613      	mov	r3, r2
 800d172:	00db      	lsls	r3, r3, #3
 800d174:	1a9b      	subs	r3, r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4403      	add	r3, r0
 800d17a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4419      	add	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	683a      	ldr	r2, [r7, #0]
 800d186:	4613      	mov	r3, r2
 800d188:	00db      	lsls	r3, r3, #3
 800d18a:	1a9b      	subs	r3, r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4403      	add	r3, r0
 800d190:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d194:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d114      	bne.n	800d1c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	440b      	add	r3, r1
 800d1aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d108      	bne.n	800d1c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6818      	ldr	r0, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d1be:	461a      	mov	r2, r3
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	f003 fc61 	bl	8010a88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f008 fa57 	bl	8015680 <HAL_PCD_DataOutStageCallback>
 800d1d2:	e046      	b.n	800d262 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4a26      	ldr	r2, [pc, #152]	; (800d270 <PCD_EP_OutXfrComplete_int+0x214>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d124      	bne.n	800d226 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00a      	beq.n	800d1fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	015a      	lsls	r2, r3, #5
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1f8:	6093      	str	r3, [r2, #8]
 800d1fa:	e032      	b.n	800d262 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f003 0320 	and.w	r3, r3, #32
 800d202:	2b00      	cmp	r3, #0
 800d204:	d008      	beq.n	800d218 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	015a      	lsls	r2, r3, #5
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	4413      	add	r3, r2
 800d20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d212:	461a      	mov	r2, r3
 800d214:	2320      	movs	r3, #32
 800d216:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f008 fa2e 	bl	8015680 <HAL_PCD_DataOutStageCallback>
 800d224:	e01d      	b.n	800d262 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d114      	bne.n	800d256 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	683a      	ldr	r2, [r7, #0]
 800d230:	4613      	mov	r3, r2
 800d232:	00db      	lsls	r3, r3, #3
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	440b      	add	r3, r1
 800d23a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d108      	bne.n	800d256 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6818      	ldr	r0, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d24e:	461a      	mov	r2, r3
 800d250:	2100      	movs	r1, #0
 800d252:	f003 fc19 	bl	8010a88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f008 fa0f 	bl	8015680 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	4f54300a 	.word	0x4f54300a
 800d270:	4f54310a 	.word	0x4f54310a

0800d274 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	333c      	adds	r3, #60	; 0x3c
 800d28c:	3304      	adds	r3, #4
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	015a      	lsls	r2, r3, #5
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	4413      	add	r3, r2
 800d29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	4a15      	ldr	r2, [pc, #84]	; (800d2fc <PCD_EP_OutSetupPacket_int+0x88>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d90e      	bls.n	800d2c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d009      	beq.n	800d2c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f008 f9c7 	bl	801565c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4a0a      	ldr	r2, [pc, #40]	; (800d2fc <PCD_EP_OutSetupPacket_int+0x88>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d90c      	bls.n	800d2f0 <PCD_EP_OutSetupPacket_int+0x7c>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d108      	bne.n	800d2f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6818      	ldr	r0, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	2101      	movs	r1, #1
 800d2ec:	f003 fbcc 	bl	8010a88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	4f54300a 	.word	0x4f54300a

0800d300 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
 800d30c:	4613      	mov	r3, r2
 800d30e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d316:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d318:	78fb      	ldrb	r3, [r7, #3]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d107      	bne.n	800d32e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d31e:	883b      	ldrh	r3, [r7, #0]
 800d320:	0419      	lsls	r1, r3, #16
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	430a      	orrs	r2, r1
 800d32a:	629a      	str	r2, [r3, #40]	; 0x28
 800d32c:	e028      	b.n	800d380 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d334:	0c1b      	lsrs	r3, r3, #16
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	4413      	add	r3, r2
 800d33a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d33c:	2300      	movs	r3, #0
 800d33e:	73fb      	strb	r3, [r7, #15]
 800d340:	e00d      	b.n	800d35e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	3340      	adds	r3, #64	; 0x40
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	4413      	add	r3, r2
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	0c1b      	lsrs	r3, r3, #16
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	4413      	add	r3, r2
 800d356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d358:	7bfb      	ldrb	r3, [r7, #15]
 800d35a:	3301      	adds	r3, #1
 800d35c:	73fb      	strb	r3, [r7, #15]
 800d35e:	7bfa      	ldrb	r2, [r7, #15]
 800d360:	78fb      	ldrb	r3, [r7, #3]
 800d362:	3b01      	subs	r3, #1
 800d364:	429a      	cmp	r2, r3
 800d366:	d3ec      	bcc.n	800d342 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d368:	883b      	ldrh	r3, [r7, #0]
 800d36a:	0418      	lsls	r0, r3, #16
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6819      	ldr	r1, [r3, #0]
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	3b01      	subs	r3, #1
 800d374:	68ba      	ldr	r2, [r7, #8]
 800d376:	4302      	orrs	r2, r0
 800d378:	3340      	adds	r3, #64	; 0x40
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	440b      	add	r3, r1
 800d37e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3714      	adds	r7, #20
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr

0800d38e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d38e:	b480      	push	{r7}
 800d390:	b083      	sub	sp, #12
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	460b      	mov	r3, r1
 800d398:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	887a      	ldrh	r2, [r7, #2]
 800d3a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d3bc:	bf00      	nop
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e25b      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d075      	beq.n	800d4d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d3e6:	4ba3      	ldr	r3, [pc, #652]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f003 030c 	and.w	r3, r3, #12
 800d3ee:	2b04      	cmp	r3, #4
 800d3f0:	d00c      	beq.n	800d40c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d3f2:	4ba0      	ldr	r3, [pc, #640]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d3fa:	2b08      	cmp	r3, #8
 800d3fc:	d112      	bne.n	800d424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d3fe:	4b9d      	ldr	r3, [pc, #628]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d40a:	d10b      	bne.n	800d424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d40c:	4b99      	ldr	r3, [pc, #612]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d414:	2b00      	cmp	r3, #0
 800d416:	d05b      	beq.n	800d4d0 <HAL_RCC_OscConfig+0x108>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d157      	bne.n	800d4d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e236      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d42c:	d106      	bne.n	800d43c <HAL_RCC_OscConfig+0x74>
 800d42e:	4b91      	ldr	r3, [pc, #580]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a90      	ldr	r2, [pc, #576]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d438:	6013      	str	r3, [r2, #0]
 800d43a:	e01d      	b.n	800d478 <HAL_RCC_OscConfig+0xb0>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d444:	d10c      	bne.n	800d460 <HAL_RCC_OscConfig+0x98>
 800d446:	4b8b      	ldr	r3, [pc, #556]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a8a      	ldr	r2, [pc, #552]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d44c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	4b88      	ldr	r3, [pc, #544]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a87      	ldr	r2, [pc, #540]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d45c:	6013      	str	r3, [r2, #0]
 800d45e:	e00b      	b.n	800d478 <HAL_RCC_OscConfig+0xb0>
 800d460:	4b84      	ldr	r3, [pc, #528]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a83      	ldr	r2, [pc, #524]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d46a:	6013      	str	r3, [r2, #0]
 800d46c:	4b81      	ldr	r3, [pc, #516]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a80      	ldr	r2, [pc, #512]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d013      	beq.n	800d4a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d480:	f7fd ff60 	bl	800b344 <HAL_GetTick>
 800d484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d486:	e008      	b.n	800d49a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d488:	f7fd ff5c 	bl	800b344 <HAL_GetTick>
 800d48c:	4602      	mov	r2, r0
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	2b64      	cmp	r3, #100	; 0x64
 800d494:	d901      	bls.n	800d49a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d496:	2303      	movs	r3, #3
 800d498:	e1fb      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d49a:	4b76      	ldr	r3, [pc, #472]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d0f0      	beq.n	800d488 <HAL_RCC_OscConfig+0xc0>
 800d4a6:	e014      	b.n	800d4d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4a8:	f7fd ff4c 	bl	800b344 <HAL_GetTick>
 800d4ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d4ae:	e008      	b.n	800d4c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d4b0:	f7fd ff48 	bl	800b344 <HAL_GetTick>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	2b64      	cmp	r3, #100	; 0x64
 800d4bc:	d901      	bls.n	800d4c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e1e7      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d4c2:	4b6c      	ldr	r3, [pc, #432]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1f0      	bne.n	800d4b0 <HAL_RCC_OscConfig+0xe8>
 800d4ce:	e000      	b.n	800d4d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d063      	beq.n	800d5a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d4de:	4b65      	ldr	r3, [pc, #404]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	f003 030c 	and.w	r3, r3, #12
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00b      	beq.n	800d502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d4ea:	4b62      	ldr	r3, [pc, #392]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d4f2:	2b08      	cmp	r3, #8
 800d4f4:	d11c      	bne.n	800d530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d4f6:	4b5f      	ldr	r3, [pc, #380]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d116      	bne.n	800d530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d502:	4b5c      	ldr	r3, [pc, #368]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d005      	beq.n	800d51a <HAL_RCC_OscConfig+0x152>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	2b01      	cmp	r3, #1
 800d514:	d001      	beq.n	800d51a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e1bb      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d51a:	4b56      	ldr	r3, [pc, #344]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	4952      	ldr	r1, [pc, #328]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d52a:	4313      	orrs	r3, r2
 800d52c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d52e:	e03a      	b.n	800d5a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d020      	beq.n	800d57a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d538:	4b4f      	ldr	r3, [pc, #316]	; (800d678 <HAL_RCC_OscConfig+0x2b0>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d53e:	f7fd ff01 	bl	800b344 <HAL_GetTick>
 800d542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d544:	e008      	b.n	800d558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d546:	f7fd fefd 	bl	800b344 <HAL_GetTick>
 800d54a:	4602      	mov	r2, r0
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	2b02      	cmp	r3, #2
 800d552:	d901      	bls.n	800d558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d554:	2303      	movs	r3, #3
 800d556:	e19c      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d558:	4b46      	ldr	r3, [pc, #280]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 0302 	and.w	r3, r3, #2
 800d560:	2b00      	cmp	r3, #0
 800d562:	d0f0      	beq.n	800d546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d564:	4b43      	ldr	r3, [pc, #268]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	00db      	lsls	r3, r3, #3
 800d572:	4940      	ldr	r1, [pc, #256]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d574:	4313      	orrs	r3, r2
 800d576:	600b      	str	r3, [r1, #0]
 800d578:	e015      	b.n	800d5a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d57a:	4b3f      	ldr	r3, [pc, #252]	; (800d678 <HAL_RCC_OscConfig+0x2b0>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d580:	f7fd fee0 	bl	800b344 <HAL_GetTick>
 800d584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d586:	e008      	b.n	800d59a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d588:	f7fd fedc 	bl	800b344 <HAL_GetTick>
 800d58c:	4602      	mov	r2, r0
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	2b02      	cmp	r3, #2
 800d594:	d901      	bls.n	800d59a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d596:	2303      	movs	r3, #3
 800d598:	e17b      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d59a:	4b36      	ldr	r3, [pc, #216]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 0302 	and.w	r3, r3, #2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1f0      	bne.n	800d588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 0308 	and.w	r3, r3, #8
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d030      	beq.n	800d614 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d016      	beq.n	800d5e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5ba:	4b30      	ldr	r3, [pc, #192]	; (800d67c <HAL_RCC_OscConfig+0x2b4>)
 800d5bc:	2201      	movs	r2, #1
 800d5be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5c0:	f7fd fec0 	bl	800b344 <HAL_GetTick>
 800d5c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5c6:	e008      	b.n	800d5da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d5c8:	f7fd febc 	bl	800b344 <HAL_GetTick>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d901      	bls.n	800d5da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	e15b      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5da:	4b26      	ldr	r3, [pc, #152]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5de:	f003 0302 	and.w	r3, r3, #2
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f0      	beq.n	800d5c8 <HAL_RCC_OscConfig+0x200>
 800d5e6:	e015      	b.n	800d614 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d5e8:	4b24      	ldr	r3, [pc, #144]	; (800d67c <HAL_RCC_OscConfig+0x2b4>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d5ee:	f7fd fea9 	bl	800b344 <HAL_GetTick>
 800d5f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d5f4:	e008      	b.n	800d608 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d5f6:	f7fd fea5 	bl	800b344 <HAL_GetTick>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	2b02      	cmp	r3, #2
 800d602:	d901      	bls.n	800d608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d604:	2303      	movs	r3, #3
 800d606:	e144      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d608:	4b1a      	ldr	r3, [pc, #104]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60c:	f003 0302 	and.w	r3, r3, #2
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1f0      	bne.n	800d5f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 0304 	and.w	r3, r3, #4
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f000 80a0 	beq.w	800d762 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d622:	2300      	movs	r3, #0
 800d624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d626:	4b13      	ldr	r3, [pc, #76]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d10f      	bne.n	800d652 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d632:	2300      	movs	r3, #0
 800d634:	60bb      	str	r3, [r7, #8]
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63a:	4a0e      	ldr	r2, [pc, #56]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d63c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d640:	6413      	str	r3, [r2, #64]	; 0x40
 800d642:	4b0c      	ldr	r3, [pc, #48]	; (800d674 <HAL_RCC_OscConfig+0x2ac>)
 800d644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d64a:	60bb      	str	r3, [r7, #8]
 800d64c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d64e:	2301      	movs	r3, #1
 800d650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d652:	4b0b      	ldr	r3, [pc, #44]	; (800d680 <HAL_RCC_OscConfig+0x2b8>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d121      	bne.n	800d6a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d65e:	4b08      	ldr	r3, [pc, #32]	; (800d680 <HAL_RCC_OscConfig+0x2b8>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a07      	ldr	r2, [pc, #28]	; (800d680 <HAL_RCC_OscConfig+0x2b8>)
 800d664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d66a:	f7fd fe6b 	bl	800b344 <HAL_GetTick>
 800d66e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d670:	e011      	b.n	800d696 <HAL_RCC_OscConfig+0x2ce>
 800d672:	bf00      	nop
 800d674:	40023800 	.word	0x40023800
 800d678:	42470000 	.word	0x42470000
 800d67c:	42470e80 	.word	0x42470e80
 800d680:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d684:	f7fd fe5e 	bl	800b344 <HAL_GetTick>
 800d688:	4602      	mov	r2, r0
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d901      	bls.n	800d696 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d692:	2303      	movs	r3, #3
 800d694:	e0fd      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d696:	4b81      	ldr	r3, [pc, #516]	; (800d89c <HAL_RCC_OscConfig+0x4d4>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0f0      	beq.n	800d684 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d106      	bne.n	800d6b8 <HAL_RCC_OscConfig+0x2f0>
 800d6aa:	4b7d      	ldr	r3, [pc, #500]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ae:	4a7c      	ldr	r2, [pc, #496]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6b0:	f043 0301 	orr.w	r3, r3, #1
 800d6b4:	6713      	str	r3, [r2, #112]	; 0x70
 800d6b6:	e01c      	b.n	800d6f2 <HAL_RCC_OscConfig+0x32a>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	2b05      	cmp	r3, #5
 800d6be:	d10c      	bne.n	800d6da <HAL_RCC_OscConfig+0x312>
 800d6c0:	4b77      	ldr	r3, [pc, #476]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c4:	4a76      	ldr	r2, [pc, #472]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6c6:	f043 0304 	orr.w	r3, r3, #4
 800d6ca:	6713      	str	r3, [r2, #112]	; 0x70
 800d6cc:	4b74      	ldr	r3, [pc, #464]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d0:	4a73      	ldr	r2, [pc, #460]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6d2:	f043 0301 	orr.w	r3, r3, #1
 800d6d6:	6713      	str	r3, [r2, #112]	; 0x70
 800d6d8:	e00b      	b.n	800d6f2 <HAL_RCC_OscConfig+0x32a>
 800d6da:	4b71      	ldr	r3, [pc, #452]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6de:	4a70      	ldr	r2, [pc, #448]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6e0:	f023 0301 	bic.w	r3, r3, #1
 800d6e4:	6713      	str	r3, [r2, #112]	; 0x70
 800d6e6:	4b6e      	ldr	r3, [pc, #440]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ea:	4a6d      	ldr	r2, [pc, #436]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d6ec:	f023 0304 	bic.w	r3, r3, #4
 800d6f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d015      	beq.n	800d726 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6fa:	f7fd fe23 	bl	800b344 <HAL_GetTick>
 800d6fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d700:	e00a      	b.n	800d718 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d702:	f7fd fe1f 	bl	800b344 <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d710:	4293      	cmp	r3, r2
 800d712:	d901      	bls.n	800d718 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	e0bc      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d718:	4b61      	ldr	r3, [pc, #388]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d71c:	f003 0302 	and.w	r3, r3, #2
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0ee      	beq.n	800d702 <HAL_RCC_OscConfig+0x33a>
 800d724:	e014      	b.n	800d750 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d726:	f7fd fe0d 	bl	800b344 <HAL_GetTick>
 800d72a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d72c:	e00a      	b.n	800d744 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d72e:	f7fd fe09 	bl	800b344 <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	f241 3288 	movw	r2, #5000	; 0x1388
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d901      	bls.n	800d744 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d740:	2303      	movs	r3, #3
 800d742:	e0a6      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d744:	4b56      	ldr	r3, [pc, #344]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d748:	f003 0302 	and.w	r3, r3, #2
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1ee      	bne.n	800d72e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d750:	7dfb      	ldrb	r3, [r7, #23]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d105      	bne.n	800d762 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d756:	4b52      	ldr	r3, [pc, #328]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75a:	4a51      	ldr	r2, [pc, #324]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d75c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 8092 	beq.w	800d890 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d76c:	4b4c      	ldr	r3, [pc, #304]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	f003 030c 	and.w	r3, r3, #12
 800d774:	2b08      	cmp	r3, #8
 800d776:	d05c      	beq.n	800d832 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d141      	bne.n	800d804 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d780:	4b48      	ldr	r3, [pc, #288]	; (800d8a4 <HAL_RCC_OscConfig+0x4dc>)
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d786:	f7fd fddd 	bl	800b344 <HAL_GetTick>
 800d78a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d78c:	e008      	b.n	800d7a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d78e:	f7fd fdd9 	bl	800b344 <HAL_GetTick>
 800d792:	4602      	mov	r2, r0
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d901      	bls.n	800d7a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d79c:	2303      	movs	r3, #3
 800d79e:	e078      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7a0:	4b3f      	ldr	r3, [pc, #252]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d1f0      	bne.n	800d78e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	69da      	ldr	r2, [r3, #28]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a1b      	ldr	r3, [r3, #32]
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ba:	019b      	lsls	r3, r3, #6
 800d7bc:	431a      	orrs	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c2:	085b      	lsrs	r3, r3, #1
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	041b      	lsls	r3, r3, #16
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ce:	061b      	lsls	r3, r3, #24
 800d7d0:	4933      	ldr	r1, [pc, #204]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d7d6:	4b33      	ldr	r3, [pc, #204]	; (800d8a4 <HAL_RCC_OscConfig+0x4dc>)
 800d7d8:	2201      	movs	r2, #1
 800d7da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7dc:	f7fd fdb2 	bl	800b344 <HAL_GetTick>
 800d7e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7e2:	e008      	b.n	800d7f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d7e4:	f7fd fdae 	bl	800b344 <HAL_GetTick>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	1ad3      	subs	r3, r2, r3
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	d901      	bls.n	800d7f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	e04d      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7f6:	4b2a      	ldr	r3, [pc, #168]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0f0      	beq.n	800d7e4 <HAL_RCC_OscConfig+0x41c>
 800d802:	e045      	b.n	800d890 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d804:	4b27      	ldr	r3, [pc, #156]	; (800d8a4 <HAL_RCC_OscConfig+0x4dc>)
 800d806:	2200      	movs	r2, #0
 800d808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d80a:	f7fd fd9b 	bl	800b344 <HAL_GetTick>
 800d80e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d810:	e008      	b.n	800d824 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d812:	f7fd fd97 	bl	800b344 <HAL_GetTick>
 800d816:	4602      	mov	r2, r0
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d901      	bls.n	800d824 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e036      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d824:	4b1e      	ldr	r3, [pc, #120]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1f0      	bne.n	800d812 <HAL_RCC_OscConfig+0x44a>
 800d830:	e02e      	b.n	800d890 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	2b01      	cmp	r3, #1
 800d838:	d101      	bne.n	800d83e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	e029      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d83e:	4b18      	ldr	r3, [pc, #96]	; (800d8a0 <HAL_RCC_OscConfig+0x4d8>)
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	69db      	ldr	r3, [r3, #28]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d11c      	bne.n	800d88c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d115      	bne.n	800d88c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d866:	4013      	ands	r3, r2
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d10d      	bne.n	800d88c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d106      	bne.n	800d88c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d888:	429a      	cmp	r2, r3
 800d88a:	d001      	beq.n	800d890 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e000      	b.n	800d892 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3718      	adds	r7, #24
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	40007000 	.word	0x40007000
 800d8a0:	40023800 	.word	0x40023800
 800d8a4:	42470060 	.word	0x42470060

0800d8a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	e0cc      	b.n	800da56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d8bc:	4b68      	ldr	r3, [pc, #416]	; (800da60 <HAL_RCC_ClockConfig+0x1b8>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f003 030f 	and.w	r3, r3, #15
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d90c      	bls.n	800d8e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8ca:	4b65      	ldr	r3, [pc, #404]	; (800da60 <HAL_RCC_ClockConfig+0x1b8>)
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	b2d2      	uxtb	r2, r2
 800d8d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8d2:	4b63      	ldr	r3, [pc, #396]	; (800da60 <HAL_RCC_ClockConfig+0x1b8>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 030f 	and.w	r3, r3, #15
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d001      	beq.n	800d8e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e0b8      	b.n	800da56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f003 0302 	and.w	r3, r3, #2
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d020      	beq.n	800d932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0304 	and.w	r3, r3, #4
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d005      	beq.n	800d908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d8fc:	4b59      	ldr	r3, [pc, #356]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	4a58      	ldr	r2, [pc, #352]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f003 0308 	and.w	r3, r3, #8
 800d910:	2b00      	cmp	r3, #0
 800d912:	d005      	beq.n	800d920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d914:	4b53      	ldr	r3, [pc, #332]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	4a52      	ldr	r2, [pc, #328]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d91a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d91e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d920:	4b50      	ldr	r3, [pc, #320]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	494d      	ldr	r1, [pc, #308]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d92e:	4313      	orrs	r3, r2
 800d930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d044      	beq.n	800d9c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	2b01      	cmp	r3, #1
 800d944:	d107      	bne.n	800d956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d946:	4b47      	ldr	r3, [pc, #284]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d119      	bne.n	800d986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	e07f      	b.n	800da56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d003      	beq.n	800d966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d962:	2b03      	cmp	r3, #3
 800d964:	d107      	bne.n	800d976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d966:	4b3f      	ldr	r3, [pc, #252]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d109      	bne.n	800d986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e06f      	b.n	800da56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d976:	4b3b      	ldr	r3, [pc, #236]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f003 0302 	and.w	r3, r3, #2
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d101      	bne.n	800d986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	e067      	b.n	800da56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d986:	4b37      	ldr	r3, [pc, #220]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	f023 0203 	bic.w	r2, r3, #3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	4934      	ldr	r1, [pc, #208]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d994:	4313      	orrs	r3, r2
 800d996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d998:	f7fd fcd4 	bl	800b344 <HAL_GetTick>
 800d99c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d99e:	e00a      	b.n	800d9b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d9a0:	f7fd fcd0 	bl	800b344 <HAL_GetTick>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d901      	bls.n	800d9b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	e04f      	b.n	800da56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9b6:	4b2b      	ldr	r3, [pc, #172]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	f003 020c 	and.w	r2, r3, #12
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d1eb      	bne.n	800d9a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d9c8:	4b25      	ldr	r3, [pc, #148]	; (800da60 <HAL_RCC_ClockConfig+0x1b8>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 030f 	and.w	r3, r3, #15
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d20c      	bcs.n	800d9f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9d6:	4b22      	ldr	r3, [pc, #136]	; (800da60 <HAL_RCC_ClockConfig+0x1b8>)
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	b2d2      	uxtb	r2, r2
 800d9dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9de:	4b20      	ldr	r3, [pc, #128]	; (800da60 <HAL_RCC_ClockConfig+0x1b8>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f003 030f 	and.w	r3, r3, #15
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d001      	beq.n	800d9f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e032      	b.n	800da56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f003 0304 	and.w	r3, r3, #4
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d008      	beq.n	800da0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d9fc:	4b19      	ldr	r3, [pc, #100]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	4916      	ldr	r1, [pc, #88]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800da0a:	4313      	orrs	r3, r2
 800da0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0308 	and.w	r3, r3, #8
 800da16:	2b00      	cmp	r3, #0
 800da18:	d009      	beq.n	800da2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800da1a:	4b12      	ldr	r3, [pc, #72]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	00db      	lsls	r3, r3, #3
 800da28:	490e      	ldr	r1, [pc, #56]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800da2a:	4313      	orrs	r3, r2
 800da2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800da2e:	f000 f821 	bl	800da74 <HAL_RCC_GetSysClockFreq>
 800da32:	4602      	mov	r2, r0
 800da34:	4b0b      	ldr	r3, [pc, #44]	; (800da64 <HAL_RCC_ClockConfig+0x1bc>)
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	091b      	lsrs	r3, r3, #4
 800da3a:	f003 030f 	and.w	r3, r3, #15
 800da3e:	490a      	ldr	r1, [pc, #40]	; (800da68 <HAL_RCC_ClockConfig+0x1c0>)
 800da40:	5ccb      	ldrb	r3, [r1, r3]
 800da42:	fa22 f303 	lsr.w	r3, r2, r3
 800da46:	4a09      	ldr	r2, [pc, #36]	; (800da6c <HAL_RCC_ClockConfig+0x1c4>)
 800da48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800da4a:	4b09      	ldr	r3, [pc, #36]	; (800da70 <HAL_RCC_ClockConfig+0x1c8>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fd f8ee 	bl	800ac30 <HAL_InitTick>

  return HAL_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	40023c00 	.word	0x40023c00
 800da64:	40023800 	.word	0x40023800
 800da68:	0801c198 	.word	0x0801c198
 800da6c:	2000208c 	.word	0x2000208c
 800da70:	20002090 	.word	0x20002090

0800da74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800da7c:	2300      	movs	r3, #0
 800da7e:	607b      	str	r3, [r7, #4]
 800da80:	2300      	movs	r3, #0
 800da82:	60fb      	str	r3, [r7, #12]
 800da84:	2300      	movs	r3, #0
 800da86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800da88:	2300      	movs	r3, #0
 800da8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da8c:	4b67      	ldr	r3, [pc, #412]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	f003 030c 	and.w	r3, r3, #12
 800da94:	2b08      	cmp	r3, #8
 800da96:	d00d      	beq.n	800dab4 <HAL_RCC_GetSysClockFreq+0x40>
 800da98:	2b08      	cmp	r3, #8
 800da9a:	f200 80bd 	bhi.w	800dc18 <HAL_RCC_GetSysClockFreq+0x1a4>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <HAL_RCC_GetSysClockFreq+0x34>
 800daa2:	2b04      	cmp	r3, #4
 800daa4:	d003      	beq.n	800daae <HAL_RCC_GetSysClockFreq+0x3a>
 800daa6:	e0b7      	b.n	800dc18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800daa8:	4b61      	ldr	r3, [pc, #388]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800daaa:	60bb      	str	r3, [r7, #8]
       break;
 800daac:	e0b7      	b.n	800dc1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800daae:	4b61      	ldr	r3, [pc, #388]	; (800dc34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800dab0:	60bb      	str	r3, [r7, #8]
      break;
 800dab2:	e0b4      	b.n	800dc1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dab4:	4b5d      	ldr	r3, [pc, #372]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dabc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dabe:	4b5b      	ldr	r3, [pc, #364]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d04d      	beq.n	800db66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800daca:	4b58      	ldr	r3, [pc, #352]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	099b      	lsrs	r3, r3, #6
 800dad0:	461a      	mov	r2, r3
 800dad2:	f04f 0300 	mov.w	r3, #0
 800dad6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dada:	f04f 0100 	mov.w	r1, #0
 800dade:	ea02 0800 	and.w	r8, r2, r0
 800dae2:	ea03 0901 	and.w	r9, r3, r1
 800dae6:	4640      	mov	r0, r8
 800dae8:	4649      	mov	r1, r9
 800daea:	f04f 0200 	mov.w	r2, #0
 800daee:	f04f 0300 	mov.w	r3, #0
 800daf2:	014b      	lsls	r3, r1, #5
 800daf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800daf8:	0142      	lsls	r2, r0, #5
 800dafa:	4610      	mov	r0, r2
 800dafc:	4619      	mov	r1, r3
 800dafe:	ebb0 0008 	subs.w	r0, r0, r8
 800db02:	eb61 0109 	sbc.w	r1, r1, r9
 800db06:	f04f 0200 	mov.w	r2, #0
 800db0a:	f04f 0300 	mov.w	r3, #0
 800db0e:	018b      	lsls	r3, r1, #6
 800db10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800db14:	0182      	lsls	r2, r0, #6
 800db16:	1a12      	subs	r2, r2, r0
 800db18:	eb63 0301 	sbc.w	r3, r3, r1
 800db1c:	f04f 0000 	mov.w	r0, #0
 800db20:	f04f 0100 	mov.w	r1, #0
 800db24:	00d9      	lsls	r1, r3, #3
 800db26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800db2a:	00d0      	lsls	r0, r2, #3
 800db2c:	4602      	mov	r2, r0
 800db2e:	460b      	mov	r3, r1
 800db30:	eb12 0208 	adds.w	r2, r2, r8
 800db34:	eb43 0309 	adc.w	r3, r3, r9
 800db38:	f04f 0000 	mov.w	r0, #0
 800db3c:	f04f 0100 	mov.w	r1, #0
 800db40:	0259      	lsls	r1, r3, #9
 800db42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800db46:	0250      	lsls	r0, r2, #9
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4610      	mov	r0, r2
 800db4e:	4619      	mov	r1, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	461a      	mov	r2, r3
 800db54:	f04f 0300 	mov.w	r3, #0
 800db58:	f7f3 f896 	bl	8000c88 <__aeabi_uldivmod>
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	4613      	mov	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	e04a      	b.n	800dbfc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db66:	4b31      	ldr	r3, [pc, #196]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	099b      	lsrs	r3, r3, #6
 800db6c:	461a      	mov	r2, r3
 800db6e:	f04f 0300 	mov.w	r3, #0
 800db72:	f240 10ff 	movw	r0, #511	; 0x1ff
 800db76:	f04f 0100 	mov.w	r1, #0
 800db7a:	ea02 0400 	and.w	r4, r2, r0
 800db7e:	ea03 0501 	and.w	r5, r3, r1
 800db82:	4620      	mov	r0, r4
 800db84:	4629      	mov	r1, r5
 800db86:	f04f 0200 	mov.w	r2, #0
 800db8a:	f04f 0300 	mov.w	r3, #0
 800db8e:	014b      	lsls	r3, r1, #5
 800db90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800db94:	0142      	lsls	r2, r0, #5
 800db96:	4610      	mov	r0, r2
 800db98:	4619      	mov	r1, r3
 800db9a:	1b00      	subs	r0, r0, r4
 800db9c:	eb61 0105 	sbc.w	r1, r1, r5
 800dba0:	f04f 0200 	mov.w	r2, #0
 800dba4:	f04f 0300 	mov.w	r3, #0
 800dba8:	018b      	lsls	r3, r1, #6
 800dbaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800dbae:	0182      	lsls	r2, r0, #6
 800dbb0:	1a12      	subs	r2, r2, r0
 800dbb2:	eb63 0301 	sbc.w	r3, r3, r1
 800dbb6:	f04f 0000 	mov.w	r0, #0
 800dbba:	f04f 0100 	mov.w	r1, #0
 800dbbe:	00d9      	lsls	r1, r3, #3
 800dbc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dbc4:	00d0      	lsls	r0, r2, #3
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	1912      	adds	r2, r2, r4
 800dbcc:	eb45 0303 	adc.w	r3, r5, r3
 800dbd0:	f04f 0000 	mov.w	r0, #0
 800dbd4:	f04f 0100 	mov.w	r1, #0
 800dbd8:	0299      	lsls	r1, r3, #10
 800dbda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800dbde:	0290      	lsls	r0, r2, #10
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	461a      	mov	r2, r3
 800dbec:	f04f 0300 	mov.w	r3, #0
 800dbf0:	f7f3 f84a 	bl	8000c88 <__aeabi_uldivmod>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dbfc:	4b0b      	ldr	r3, [pc, #44]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	0c1b      	lsrs	r3, r3, #16
 800dc02:	f003 0303 	and.w	r3, r3, #3
 800dc06:	3301      	adds	r3, #1
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc14:	60bb      	str	r3, [r7, #8]
      break;
 800dc16:	e002      	b.n	800dc1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800dc1a:	60bb      	str	r3, [r7, #8]
      break;
 800dc1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dc2a:	bf00      	nop
 800dc2c:	40023800 	.word	0x40023800
 800dc30:	00f42400 	.word	0x00f42400
 800dc34:	007a1200 	.word	0x007a1200

0800dc38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dc3c:	4b03      	ldr	r3, [pc, #12]	; (800dc4c <HAL_RCC_GetHCLKFreq+0x14>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	2000208c 	.word	0x2000208c

0800dc50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dc54:	f7ff fff0 	bl	800dc38 <HAL_RCC_GetHCLKFreq>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	0a9b      	lsrs	r3, r3, #10
 800dc60:	f003 0307 	and.w	r3, r3, #7
 800dc64:	4903      	ldr	r1, [pc, #12]	; (800dc74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc66:	5ccb      	ldrb	r3, [r1, r3]
 800dc68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	40023800 	.word	0x40023800
 800dc74:	0801c1a8 	.word	0x0801c1a8

0800dc78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dc7c:	f7ff ffdc 	bl	800dc38 <HAL_RCC_GetHCLKFreq>
 800dc80:	4602      	mov	r2, r0
 800dc82:	4b05      	ldr	r3, [pc, #20]	; (800dc98 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	0b5b      	lsrs	r3, r3, #13
 800dc88:	f003 0307 	and.w	r3, r3, #7
 800dc8c:	4903      	ldr	r1, [pc, #12]	; (800dc9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc8e:	5ccb      	ldrb	r3, [r1, r3]
 800dc90:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	40023800 	.word	0x40023800
 800dc9c:	0801c1a8 	.word	0x0801c1a8

0800dca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	220f      	movs	r2, #15
 800dcae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dcb0:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f003 0203 	and.w	r2, r3, #3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dcbc:	4b0f      	ldr	r3, [pc, #60]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dcc8:	4b0c      	ldr	r3, [pc, #48]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dcd4:	4b09      	ldr	r3, [pc, #36]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	08db      	lsrs	r3, r3, #3
 800dcda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dce2:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <HAL_RCC_GetClockConfig+0x60>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 020f 	and.w	r2, r3, #15
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	601a      	str	r2, [r3, #0]
}
 800dcee:	bf00      	nop
 800dcf0:	370c      	adds	r7, #12
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	40023800 	.word	0x40023800
 800dd00:	40023c00 	.word	0x40023c00

0800dd04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d101      	bne.n	800dd16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e01d      	b.n	800dd52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7fd f99a 	bl	800b064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2202      	movs	r2, #2
 800dd34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4619      	mov	r1, r3
 800dd42:	4610      	mov	r0, r2
 800dd44:	f000 fa46 	bl	800e1d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b085      	sub	sp, #20
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2202      	movs	r2, #2
 800dd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f003 0307 	and.w	r3, r3, #7
 800dd74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2b06      	cmp	r3, #6
 800dd7a:	d007      	beq.n	800dd8c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f042 0201 	orr.w	r2, r2, #1
 800dd8a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dda2:	b480      	push	{r7}
 800dda4:	b085      	sub	sp, #20
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68da      	ldr	r2, [r3, #12]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f042 0201 	orr.w	r2, r2, #1
 800ddb8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f003 0307 	and.w	r3, r3, #7
 800ddc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b06      	cmp	r3, #6
 800ddca:	d007      	beq.n	800dddc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f042 0201 	orr.w	r2, r2, #1
 800ddda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b082      	sub	sp, #8
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	f003 0302 	and.w	r3, r3, #2
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d122      	bne.n	800de46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	f003 0302 	and.w	r3, r3, #2
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d11b      	bne.n	800de46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f06f 0202 	mvn.w	r2, #2
 800de16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	f003 0303 	and.w	r3, r3, #3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d003      	beq.n	800de34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 f9b2 	bl	800e196 <HAL_TIM_IC_CaptureCallback>
 800de32:	e005      	b.n	800de40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 f9a4 	bl	800e182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f9b5 	bl	800e1aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	f003 0304 	and.w	r3, r3, #4
 800de50:	2b04      	cmp	r3, #4
 800de52:	d122      	bne.n	800de9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	f003 0304 	and.w	r3, r3, #4
 800de5e:	2b04      	cmp	r3, #4
 800de60:	d11b      	bne.n	800de9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f06f 0204 	mvn.w	r2, #4
 800de6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2202      	movs	r2, #2
 800de70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d003      	beq.n	800de88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f988 	bl	800e196 <HAL_TIM_IC_CaptureCallback>
 800de86:	e005      	b.n	800de94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f97a 	bl	800e182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f98b 	bl	800e1aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	f003 0308 	and.w	r3, r3, #8
 800dea4:	2b08      	cmp	r3, #8
 800dea6:	d122      	bne.n	800deee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	f003 0308 	and.w	r3, r3, #8
 800deb2:	2b08      	cmp	r3, #8
 800deb4:	d11b      	bne.n	800deee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f06f 0208 	mvn.w	r2, #8
 800debe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2204      	movs	r2, #4
 800dec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	69db      	ldr	r3, [r3, #28]
 800decc:	f003 0303 	and.w	r3, r3, #3
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f95e 	bl	800e196 <HAL_TIM_IC_CaptureCallback>
 800deda:	e005      	b.n	800dee8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f950 	bl	800e182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 f961 	bl	800e1aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	f003 0310 	and.w	r3, r3, #16
 800def8:	2b10      	cmp	r3, #16
 800defa:	d122      	bne.n	800df42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	f003 0310 	and.w	r3, r3, #16
 800df06:	2b10      	cmp	r3, #16
 800df08:	d11b      	bne.n	800df42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f06f 0210 	mvn.w	r2, #16
 800df12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2208      	movs	r2, #8
 800df18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	69db      	ldr	r3, [r3, #28]
 800df20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 f934 	bl	800e196 <HAL_TIM_IC_CaptureCallback>
 800df2e:	e005      	b.n	800df3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 f926 	bl	800e182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 f937 	bl	800e1aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	f003 0301 	and.w	r3, r3, #1
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d10e      	bne.n	800df6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d107      	bne.n	800df6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f06f 0201 	mvn.w	r2, #1
 800df66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7f7 fb4d 	bl	8005608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df78:	2b80      	cmp	r3, #128	; 0x80
 800df7a:	d10e      	bne.n	800df9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df86:	2b80      	cmp	r3, #128	; 0x80
 800df88:	d107      	bne.n	800df9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 fadd 	bl	800e554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfa4:	2b40      	cmp	r3, #64	; 0x40
 800dfa6:	d10e      	bne.n	800dfc6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfb2:	2b40      	cmp	r3, #64	; 0x40
 800dfb4:	d107      	bne.n	800dfc6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dfbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 f8fc 	bl	800e1be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	f003 0320 	and.w	r3, r3, #32
 800dfd0:	2b20      	cmp	r3, #32
 800dfd2:	d10e      	bne.n	800dff2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	f003 0320 	and.w	r3, r3, #32
 800dfde:	2b20      	cmp	r3, #32
 800dfe0:	d107      	bne.n	800dff2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f06f 0220 	mvn.w	r2, #32
 800dfea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 faa7 	bl	800e540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dff2:	bf00      	nop
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b084      	sub	sp, #16
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d101      	bne.n	800e012 <HAL_TIM_ConfigClockSource+0x18>
 800e00e:	2302      	movs	r3, #2
 800e010:	e0b3      	b.n	800e17a <HAL_TIM_ConfigClockSource+0x180>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2202      	movs	r2, #2
 800e01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e030:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e038:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e04a:	d03e      	beq.n	800e0ca <HAL_TIM_ConfigClockSource+0xd0>
 800e04c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e050:	f200 8087 	bhi.w	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e058:	f000 8085 	beq.w	800e166 <HAL_TIM_ConfigClockSource+0x16c>
 800e05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e060:	d87f      	bhi.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e062:	2b70      	cmp	r3, #112	; 0x70
 800e064:	d01a      	beq.n	800e09c <HAL_TIM_ConfigClockSource+0xa2>
 800e066:	2b70      	cmp	r3, #112	; 0x70
 800e068:	d87b      	bhi.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e06a:	2b60      	cmp	r3, #96	; 0x60
 800e06c:	d050      	beq.n	800e110 <HAL_TIM_ConfigClockSource+0x116>
 800e06e:	2b60      	cmp	r3, #96	; 0x60
 800e070:	d877      	bhi.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e072:	2b50      	cmp	r3, #80	; 0x50
 800e074:	d03c      	beq.n	800e0f0 <HAL_TIM_ConfigClockSource+0xf6>
 800e076:	2b50      	cmp	r3, #80	; 0x50
 800e078:	d873      	bhi.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e07a:	2b40      	cmp	r3, #64	; 0x40
 800e07c:	d058      	beq.n	800e130 <HAL_TIM_ConfigClockSource+0x136>
 800e07e:	2b40      	cmp	r3, #64	; 0x40
 800e080:	d86f      	bhi.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e082:	2b30      	cmp	r3, #48	; 0x30
 800e084:	d064      	beq.n	800e150 <HAL_TIM_ConfigClockSource+0x156>
 800e086:	2b30      	cmp	r3, #48	; 0x30
 800e088:	d86b      	bhi.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e08a:	2b20      	cmp	r3, #32
 800e08c:	d060      	beq.n	800e150 <HAL_TIM_ConfigClockSource+0x156>
 800e08e:	2b20      	cmp	r3, #32
 800e090:	d867      	bhi.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
 800e092:	2b00      	cmp	r3, #0
 800e094:	d05c      	beq.n	800e150 <HAL_TIM_ConfigClockSource+0x156>
 800e096:	2b10      	cmp	r3, #16
 800e098:	d05a      	beq.n	800e150 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e09a:	e062      	b.n	800e162 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6818      	ldr	r0, [r3, #0]
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	6899      	ldr	r1, [r3, #8]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	f000 f9ac 	bl	800e408 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e0be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	609a      	str	r2, [r3, #8]
      break;
 800e0c8:	e04e      	b.n	800e168 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6818      	ldr	r0, [r3, #0]
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	6899      	ldr	r1, [r3, #8]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	f000 f995 	bl	800e408 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689a      	ldr	r2, [r3, #8]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e0ec:	609a      	str	r2, [r3, #8]
      break;
 800e0ee:	e03b      	b.n	800e168 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6818      	ldr	r0, [r3, #0]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	6859      	ldr	r1, [r3, #4]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	f000 f909 	bl	800e314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2150      	movs	r1, #80	; 0x50
 800e108:	4618      	mov	r0, r3
 800e10a:	f000 f962 	bl	800e3d2 <TIM_ITRx_SetConfig>
      break;
 800e10e:	e02b      	b.n	800e168 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6818      	ldr	r0, [r3, #0]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	6859      	ldr	r1, [r3, #4]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	461a      	mov	r2, r3
 800e11e:	f000 f928 	bl	800e372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2160      	movs	r1, #96	; 0x60
 800e128:	4618      	mov	r0, r3
 800e12a:	f000 f952 	bl	800e3d2 <TIM_ITRx_SetConfig>
      break;
 800e12e:	e01b      	b.n	800e168 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6818      	ldr	r0, [r3, #0]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	6859      	ldr	r1, [r3, #4]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	461a      	mov	r2, r3
 800e13e:	f000 f8e9 	bl	800e314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2140      	movs	r1, #64	; 0x40
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 f942 	bl	800e3d2 <TIM_ITRx_SetConfig>
      break;
 800e14e:	e00b      	b.n	800e168 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4619      	mov	r1, r3
 800e15a:	4610      	mov	r0, r2
 800e15c:	f000 f939 	bl	800e3d2 <TIM_ITRx_SetConfig>
      break;
 800e160:	e002      	b.n	800e168 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e162:	bf00      	nop
 800e164:	e000      	b.n	800e168 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e182:	b480      	push	{r7}
 800e184:	b083      	sub	sp, #12
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e18a:	bf00      	nop
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e196:	b480      	push	{r7}
 800e198:	b083      	sub	sp, #12
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e19e:	bf00      	nop
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1aa:	b480      	push	{r7}
 800e1ac:	b083      	sub	sp, #12
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1b2:	bf00      	nop
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1be:	b480      	push	{r7}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1c6:	bf00      	nop
 800e1c8:	370c      	adds	r7, #12
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
	...

0800e1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a40      	ldr	r2, [pc, #256]	; (800e2e8 <TIM_Base_SetConfig+0x114>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d013      	beq.n	800e214 <TIM_Base_SetConfig+0x40>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1f2:	d00f      	beq.n	800e214 <TIM_Base_SetConfig+0x40>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a3d      	ldr	r2, [pc, #244]	; (800e2ec <TIM_Base_SetConfig+0x118>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d00b      	beq.n	800e214 <TIM_Base_SetConfig+0x40>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a3c      	ldr	r2, [pc, #240]	; (800e2f0 <TIM_Base_SetConfig+0x11c>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d007      	beq.n	800e214 <TIM_Base_SetConfig+0x40>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a3b      	ldr	r2, [pc, #236]	; (800e2f4 <TIM_Base_SetConfig+0x120>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d003      	beq.n	800e214 <TIM_Base_SetConfig+0x40>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a3a      	ldr	r2, [pc, #232]	; (800e2f8 <TIM_Base_SetConfig+0x124>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d108      	bne.n	800e226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	4313      	orrs	r3, r2
 800e224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a2f      	ldr	r2, [pc, #188]	; (800e2e8 <TIM_Base_SetConfig+0x114>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d02b      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e234:	d027      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4a2c      	ldr	r2, [pc, #176]	; (800e2ec <TIM_Base_SetConfig+0x118>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d023      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4a2b      	ldr	r2, [pc, #172]	; (800e2f0 <TIM_Base_SetConfig+0x11c>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d01f      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4a2a      	ldr	r2, [pc, #168]	; (800e2f4 <TIM_Base_SetConfig+0x120>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d01b      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	4a29      	ldr	r2, [pc, #164]	; (800e2f8 <TIM_Base_SetConfig+0x124>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d017      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	4a28      	ldr	r2, [pc, #160]	; (800e2fc <TIM_Base_SetConfig+0x128>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d013      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4a27      	ldr	r2, [pc, #156]	; (800e300 <TIM_Base_SetConfig+0x12c>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d00f      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4a26      	ldr	r2, [pc, #152]	; (800e304 <TIM_Base_SetConfig+0x130>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d00b      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4a25      	ldr	r2, [pc, #148]	; (800e308 <TIM_Base_SetConfig+0x134>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d007      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4a24      	ldr	r2, [pc, #144]	; (800e30c <TIM_Base_SetConfig+0x138>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d003      	beq.n	800e286 <TIM_Base_SetConfig+0xb2>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4a23      	ldr	r2, [pc, #140]	; (800e310 <TIM_Base_SetConfig+0x13c>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d108      	bne.n	800e298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e28c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	4313      	orrs	r3, r2
 800e296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	695b      	ldr	r3, [r3, #20]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	689a      	ldr	r2, [r3, #8]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a0a      	ldr	r2, [pc, #40]	; (800e2e8 <TIM_Base_SetConfig+0x114>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d003      	beq.n	800e2cc <TIM_Base_SetConfig+0xf8>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a0c      	ldr	r2, [pc, #48]	; (800e2f8 <TIM_Base_SetConfig+0x124>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d103      	bne.n	800e2d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	691a      	ldr	r2, [r3, #16]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	615a      	str	r2, [r3, #20]
}
 800e2da:	bf00      	nop
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	40010000 	.word	0x40010000
 800e2ec:	40000400 	.word	0x40000400
 800e2f0:	40000800 	.word	0x40000800
 800e2f4:	40000c00 	.word	0x40000c00
 800e2f8:	40010400 	.word	0x40010400
 800e2fc:	40014000 	.word	0x40014000
 800e300:	40014400 	.word	0x40014400
 800e304:	40014800 	.word	0x40014800
 800e308:	40001800 	.word	0x40001800
 800e30c:	40001c00 	.word	0x40001c00
 800e310:	40002000 	.word	0x40002000

0800e314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e314:	b480      	push	{r7}
 800e316:	b087      	sub	sp, #28
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6a1b      	ldr	r3, [r3, #32]
 800e324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	f023 0201 	bic.w	r2, r3, #1
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	699b      	ldr	r3, [r3, #24]
 800e336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e33e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	011b      	lsls	r3, r3, #4
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	4313      	orrs	r3, r2
 800e348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f023 030a 	bic.w	r3, r3, #10
 800e350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	4313      	orrs	r3, r2
 800e358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	697a      	ldr	r2, [r7, #20]
 800e364:	621a      	str	r2, [r3, #32]
}
 800e366:	bf00      	nop
 800e368:	371c      	adds	r7, #28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e372:	b480      	push	{r7}
 800e374:	b087      	sub	sp, #28
 800e376:	af00      	add	r7, sp, #0
 800e378:	60f8      	str	r0, [r7, #12]
 800e37a:	60b9      	str	r1, [r7, #8]
 800e37c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6a1b      	ldr	r3, [r3, #32]
 800e382:	f023 0210 	bic.w	r2, r3, #16
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6a1b      	ldr	r3, [r3, #32]
 800e394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e39c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	031b      	lsls	r3, r3, #12
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	011b      	lsls	r3, r3, #4
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	621a      	str	r2, [r3, #32]
}
 800e3c6:	bf00      	nop
 800e3c8:	371c      	adds	r7, #28
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3d2:	b480      	push	{r7}
 800e3d4:	b085      	sub	sp, #20
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
 800e3da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e3ea:	683a      	ldr	r2, [r7, #0]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	f043 0307 	orr.w	r3, r3, #7
 800e3f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	609a      	str	r2, [r3, #8]
}
 800e3fc:	bf00      	nop
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e408:	b480      	push	{r7}
 800e40a:	b087      	sub	sp, #28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	021a      	lsls	r2, r3, #8
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	431a      	orrs	r2, r3
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	4313      	orrs	r3, r2
 800e430:	697a      	ldr	r2, [r7, #20]
 800e432:	4313      	orrs	r3, r2
 800e434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	609a      	str	r2, [r3, #8]
}
 800e43c:	bf00      	nop
 800e43e:	371c      	adds	r7, #28
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d101      	bne.n	800e460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e45c:	2302      	movs	r3, #2
 800e45e:	e05a      	b.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2201      	movs	r2, #1
 800e464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2202      	movs	r2, #2
 800e46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	4313      	orrs	r3, r2
 800e490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a21      	ldr	r2, [pc, #132]	; (800e524 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d022      	beq.n	800e4ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4ac:	d01d      	beq.n	800e4ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4a1d      	ldr	r2, [pc, #116]	; (800e528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d018      	beq.n	800e4ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a1b      	ldr	r2, [pc, #108]	; (800e52c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d013      	beq.n	800e4ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a1a      	ldr	r2, [pc, #104]	; (800e530 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d00e      	beq.n	800e4ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a18      	ldr	r2, [pc, #96]	; (800e534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d009      	beq.n	800e4ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a17      	ldr	r2, [pc, #92]	; (800e538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d004      	beq.n	800e4ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a15      	ldr	r2, [pc, #84]	; (800e53c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d10c      	bne.n	800e504 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	68ba      	ldr	r2, [r7, #8]
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68ba      	ldr	r2, [r7, #8]
 800e502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3714      	adds	r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	40010000 	.word	0x40010000
 800e528:	40000400 	.word	0x40000400
 800e52c:	40000800 	.word	0x40000800
 800e530:	40000c00 	.word	0x40000c00
 800e534:	40010400 	.word	0x40010400
 800e538:	40014000 	.word	0x40014000
 800e53c:	40001800 	.word	0x40001800

0800e540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d101      	bne.n	800e57a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	e03f      	b.n	800e5fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d106      	bne.n	800e594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7fc fdce 	bl	800b130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2224      	movs	r2, #36	; 0x24
 800e598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	68da      	ldr	r2, [r3, #12]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fb6b 	bl	800ec88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	691a      	ldr	r2, [r3, #16]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e5c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	695a      	ldr	r2, [r3, #20]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e5d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68da      	ldr	r2, [r3, #12]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2220      	movs	r2, #32
 800e5ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2220      	movs	r2, #32
 800e5f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
	...

0800e604 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	4613      	mov	r3, r2
 800e610:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b20      	cmp	r3, #32
 800e61c:	d153      	bne.n	800e6c6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <HAL_UART_Transmit_DMA+0x26>
 800e624:	88fb      	ldrh	r3, [r7, #6]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d101      	bne.n	800e62e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e04c      	b.n	800e6c8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e634:	2b01      	cmp	r3, #1
 800e636:	d101      	bne.n	800e63c <HAL_UART_Transmit_DMA+0x38>
 800e638:	2302      	movs	r3, #2
 800e63a:	e045      	b.n	800e6c8 <HAL_UART_Transmit_DMA+0xc4>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e644:	68ba      	ldr	r2, [r7, #8]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	88fa      	ldrh	r2, [r7, #6]
 800e64e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	88fa      	ldrh	r2, [r7, #6]
 800e654:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2221      	movs	r2, #33	; 0x21
 800e660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e668:	4a19      	ldr	r2, [pc, #100]	; (800e6d0 <HAL_UART_Transmit_DMA+0xcc>)
 800e66a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e670:	4a18      	ldr	r2, [pc, #96]	; (800e6d4 <HAL_UART_Transmit_DMA+0xd0>)
 800e672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e678:	4a17      	ldr	r2, [pc, #92]	; (800e6d8 <HAL_UART_Transmit_DMA+0xd4>)
 800e67a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e680:	2200      	movs	r2, #0
 800e682:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e684:	f107 0308 	add.w	r3, r7, #8
 800e688:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	6819      	ldr	r1, [r3, #0]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3304      	adds	r3, #4
 800e698:	461a      	mov	r2, r3
 800e69a:	88fb      	ldrh	r3, [r7, #6]
 800e69c:	f7fd f812 	bl	800b6c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	695a      	ldr	r2, [r3, #20]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e6c0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e000      	b.n	800e6c8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e6c6:	2302      	movs	r3, #2
  }
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	0800e919 	.word	0x0800e919
 800e6d4:	0800e96b 	.word	0x0800e96b
 800e6d8:	0800e987 	.word	0x0800e987

0800e6dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b088      	sub	sp, #32
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	695b      	ldr	r3, [r3, #20]
 800e6fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e700:	2300      	movs	r3, #0
 800e702:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	f003 030f 	and.w	r3, r3, #15
 800e70a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10d      	bne.n	800e72e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	f003 0320 	and.w	r3, r3, #32
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d008      	beq.n	800e72e <HAL_UART_IRQHandler+0x52>
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fa2d 	bl	800eb86 <UART_Receive_IT>
      return;
 800e72c:	e0d0      	b.n	800e8d0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 80b0 	beq.w	800e896 <HAL_UART_IRQHandler+0x1ba>
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d105      	bne.n	800e74c <HAL_UART_IRQHandler+0x70>
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 80a5 	beq.w	800e896 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00a      	beq.n	800e76c <HAL_UART_IRQHandler+0x90>
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d005      	beq.n	800e76c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e764:	f043 0201 	orr.w	r2, r3, #1
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	f003 0304 	and.w	r3, r3, #4
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <HAL_UART_IRQHandler+0xb0>
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f003 0301 	and.w	r3, r3, #1
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d005      	beq.n	800e78c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e784:	f043 0202 	orr.w	r2, r3, #2
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	f003 0302 	and.w	r3, r3, #2
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00a      	beq.n	800e7ac <HAL_UART_IRQHandler+0xd0>
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	f003 0301 	and.w	r3, r3, #1
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d005      	beq.n	800e7ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7a4:	f043 0204 	orr.w	r2, r3, #4
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	f003 0308 	and.w	r3, r3, #8
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00f      	beq.n	800e7d6 <HAL_UART_IRQHandler+0xfa>
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	f003 0320 	and.w	r3, r3, #32
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d104      	bne.n	800e7ca <HAL_UART_IRQHandler+0xee>
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	f003 0301 	and.w	r3, r3, #1
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d005      	beq.n	800e7d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ce:	f043 0208 	orr.w	r2, r3, #8
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d077      	beq.n	800e8ce <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	f003 0320 	and.w	r3, r3, #32
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d007      	beq.n	800e7f8 <HAL_UART_IRQHandler+0x11c>
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	f003 0320 	and.w	r3, r3, #32
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f9c7 	bl	800eb86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e802:	2b40      	cmp	r3, #64	; 0x40
 800e804:	bf0c      	ite	eq
 800e806:	2301      	moveq	r3, #1
 800e808:	2300      	movne	r3, #0
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e812:	f003 0308 	and.w	r3, r3, #8
 800e816:	2b00      	cmp	r3, #0
 800e818:	d102      	bne.n	800e820 <HAL_UART_IRQHandler+0x144>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d031      	beq.n	800e884 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f910 	bl	800ea46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	695b      	ldr	r3, [r3, #20]
 800e82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e830:	2b40      	cmp	r3, #64	; 0x40
 800e832:	d123      	bne.n	800e87c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	695a      	ldr	r2, [r3, #20]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e842:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d013      	beq.n	800e874 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e850:	4a21      	ldr	r2, [pc, #132]	; (800e8d8 <HAL_UART_IRQHandler+0x1fc>)
 800e852:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fc ff8b 	bl	800b774 <HAL_DMA_Abort_IT>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d016      	beq.n	800e892 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e86e:	4610      	mov	r0, r2
 800e870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e872:	e00e      	b.n	800e892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f845 	bl	800e904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e87a:	e00a      	b.n	800e892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f841 	bl	800e904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e882:	e006      	b.n	800e892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 f83d 	bl	800e904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e890:	e01d      	b.n	800e8ce <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e892:	bf00      	nop
    return;
 800e894:	e01b      	b.n	800e8ce <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d008      	beq.n	800e8b2 <HAL_UART_IRQHandler+0x1d6>
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d003      	beq.n	800e8b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f8fd 	bl	800eaaa <UART_Transmit_IT>
    return;
 800e8b0:	e00e      	b.n	800e8d0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d009      	beq.n	800e8d0 <HAL_UART_IRQHandler+0x1f4>
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d004      	beq.n	800e8d0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f945 	bl	800eb56 <UART_EndTransmit_IT>
    return;
 800e8cc:	e000      	b.n	800e8d0 <HAL_UART_IRQHandler+0x1f4>
    return;
 800e8ce:	bf00      	nop
  }
}
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	0800ea83 	.word	0x0800ea83

0800e8dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e8f8:	bf00      	nop
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e90c:	bf00      	nop
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e924:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e930:	2b00      	cmp	r3, #0
 800e932:	d113      	bne.n	800e95c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2200      	movs	r2, #0
 800e938:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	695a      	ldr	r2, [r3, #20]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e948:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68da      	ldr	r2, [r3, #12]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e958:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e95a:	e002      	b.n	800e962 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7fc fc69 	bl	800b234 <HAL_UART_TxCpltCallback>
}
 800e962:	bf00      	nop
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b084      	sub	sp, #16
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e976:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f7ff ffaf 	bl	800e8dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e97e:	bf00      	nop
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e98e:	2300      	movs	r3, #0
 800e990:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e996:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	695b      	ldr	r3, [r3, #20]
 800e99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9a2:	2b80      	cmp	r3, #128	; 0x80
 800e9a4:	bf0c      	ite	eq
 800e9a6:	2301      	moveq	r3, #1
 800e9a8:	2300      	movne	r3, #0
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b21      	cmp	r3, #33	; 0x21
 800e9b8:	d108      	bne.n	800e9cc <UART_DMAError+0x46>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d005      	beq.n	800e9cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e9c6:	68b8      	ldr	r0, [r7, #8]
 800e9c8:	f000 f827 	bl	800ea1a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9d6:	2b40      	cmp	r3, #64	; 0x40
 800e9d8:	bf0c      	ite	eq
 800e9da:	2301      	moveq	r3, #1
 800e9dc:	2300      	movne	r3, #0
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b22      	cmp	r3, #34	; 0x22
 800e9ec:	d108      	bne.n	800ea00 <UART_DMAError+0x7a>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d005      	beq.n	800ea00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e9fa:	68b8      	ldr	r0, [r7, #8]
 800e9fc:	f000 f823 	bl	800ea46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea04:	f043 0210 	orr.w	r2, r3, #16
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea0c:	68b8      	ldr	r0, [r7, #8]
 800ea0e:	f7ff ff79 	bl	800e904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea12:	bf00      	nop
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68da      	ldr	r2, [r3, #12]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ea30:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2220      	movs	r2, #32
 800ea36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ea3a:	bf00      	nop
 800ea3c:	370c      	adds	r7, #12
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr

0800ea46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea46:	b480      	push	{r7}
 800ea48:	b083      	sub	sp, #12
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	68da      	ldr	r2, [r3, #12]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ea5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	695a      	ldr	r2, [r3, #20]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f022 0201 	bic.w	r2, r2, #1
 800ea6c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2220      	movs	r2, #32
 800ea72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ea76:	bf00      	nop
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b084      	sub	sp, #16
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2200      	movs	r2, #0
 800ea94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f7ff ff31 	bl	800e904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eaa2:	bf00      	nop
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	b085      	sub	sp, #20
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b21      	cmp	r3, #33	; 0x21
 800eabc:	d144      	bne.n	800eb48 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac6:	d11a      	bne.n	800eafe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a1b      	ldr	r3, [r3, #32]
 800eacc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	461a      	mov	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eadc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d105      	bne.n	800eaf2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a1b      	ldr	r3, [r3, #32]
 800eaea:	1c9a      	adds	r2, r3, #2
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	621a      	str	r2, [r3, #32]
 800eaf0:	e00e      	b.n	800eb10 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6a1b      	ldr	r3, [r3, #32]
 800eaf6:	1c5a      	adds	r2, r3, #1
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	621a      	str	r2, [r3, #32]
 800eafc:	e008      	b.n	800eb10 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	1c59      	adds	r1, r3, #1
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	6211      	str	r1, [r2, #32]
 800eb08:	781a      	ldrb	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	3b01      	subs	r3, #1
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10f      	bne.n	800eb44 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68da      	ldr	r2, [r3, #12]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	e000      	b.n	800eb4a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800eb48:	2302      	movs	r3, #2
  }
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3714      	adds	r7, #20
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr

0800eb56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b082      	sub	sp, #8
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	68da      	ldr	r2, [r3, #12]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2220      	movs	r2, #32
 800eb72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7fc fb5c 	bl	800b234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	2b22      	cmp	r3, #34	; 0x22
 800eb98:	d171      	bne.n	800ec7e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eba2:	d123      	bne.n	800ebec <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d10e      	bne.n	800ebd0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc8:	1c9a      	adds	r2, r3, #2
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	629a      	str	r2, [r3, #40]	; 0x28
 800ebce:	e029      	b.n	800ec24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	629a      	str	r2, [r3, #40]	; 0x28
 800ebea:	e01b      	b.n	800ec24 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	691b      	ldr	r3, [r3, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10a      	bne.n	800ec0a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6858      	ldr	r0, [r3, #4]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfe:	1c59      	adds	r1, r3, #1
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	6291      	str	r1, [r2, #40]	; 0x28
 800ec04:	b2c2      	uxtb	r2, r0
 800ec06:	701a      	strb	r2, [r3, #0]
 800ec08:	e00c      	b.n	800ec24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	b2da      	uxtb	r2, r3
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec16:	1c58      	adds	r0, r3, #1
 800ec18:	6879      	ldr	r1, [r7, #4]
 800ec1a:	6288      	str	r0, [r1, #40]	; 0x28
 800ec1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ec20:	b2d2      	uxtb	r2, r2
 800ec22:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	4619      	mov	r1, r3
 800ec32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d120      	bne.n	800ec7a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68da      	ldr	r2, [r3, #12]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f022 0220 	bic.w	r2, r2, #32
 800ec46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68da      	ldr	r2, [r3, #12]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ec56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	695a      	ldr	r2, [r3, #20]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f022 0201 	bic.w	r2, r2, #1
 800ec66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff fe3d 	bl	800e8f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e002      	b.n	800ec80 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	e000      	b.n	800ec80 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ec7e:	2302      	movs	r3, #2
  }
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	b0bd      	sub	sp, #244	; 0xf4
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800eca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eca4:	68d9      	ldr	r1, [r3, #12]
 800eca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	ea40 0301 	orr.w	r3, r0, r1
 800ecb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ecb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecb6:	689a      	ldr	r2, [r3, #8]
 800ecb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecbc:	691b      	ldr	r3, [r3, #16]
 800ecbe:	431a      	orrs	r2, r3
 800ecc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	431a      	orrs	r2, r3
 800ecc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eccc:	69db      	ldr	r3, [r3, #28]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800ecd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ece0:	f021 010c 	bic.w	r1, r1, #12
 800ece4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ecee:	430b      	orrs	r3, r1
 800ecf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ecf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ecfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed02:	6999      	ldr	r1, [r3, #24]
 800ed04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	ea40 0301 	orr.w	r3, r0, r1
 800ed0e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed14:	69db      	ldr	r3, [r3, #28]
 800ed16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed1a:	f040 81a5 	bne.w	800f068 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ed1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	4bcd      	ldr	r3, [pc, #820]	; (800f05c <UART_SetConfig+0x3d4>)
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d006      	beq.n	800ed38 <UART_SetConfig+0xb0>
 800ed2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	4bcb      	ldr	r3, [pc, #812]	; (800f060 <UART_SetConfig+0x3d8>)
 800ed32:	429a      	cmp	r2, r3
 800ed34:	f040 80cb 	bne.w	800eece <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ed38:	f7fe ff9e 	bl	800dc78 <HAL_RCC_GetPCLK2Freq>
 800ed3c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ed40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed44:	461c      	mov	r4, r3
 800ed46:	f04f 0500 	mov.w	r5, #0
 800ed4a:	4622      	mov	r2, r4
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	1891      	adds	r1, r2, r2
 800ed50:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800ed54:	415b      	adcs	r3, r3
 800ed56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ed5a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ed5e:	1912      	adds	r2, r2, r4
 800ed60:	eb45 0303 	adc.w	r3, r5, r3
 800ed64:	f04f 0000 	mov.w	r0, #0
 800ed68:	f04f 0100 	mov.w	r1, #0
 800ed6c:	00d9      	lsls	r1, r3, #3
 800ed6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ed72:	00d0      	lsls	r0, r2, #3
 800ed74:	4602      	mov	r2, r0
 800ed76:	460b      	mov	r3, r1
 800ed78:	1911      	adds	r1, r2, r4
 800ed7a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800ed7e:	416b      	adcs	r3, r5
 800ed80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ed84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	f04f 0300 	mov.w	r3, #0
 800ed90:	1891      	adds	r1, r2, r2
 800ed92:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ed96:	415b      	adcs	r3, r3
 800ed98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ed9c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800eda0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800eda4:	f7f1 ff70 	bl	8000c88 <__aeabi_uldivmod>
 800eda8:	4602      	mov	r2, r0
 800edaa:	460b      	mov	r3, r1
 800edac:	4bad      	ldr	r3, [pc, #692]	; (800f064 <UART_SetConfig+0x3dc>)
 800edae:	fba3 2302 	umull	r2, r3, r3, r2
 800edb2:	095b      	lsrs	r3, r3, #5
 800edb4:	011e      	lsls	r6, r3, #4
 800edb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800edba:	461c      	mov	r4, r3
 800edbc:	f04f 0500 	mov.w	r5, #0
 800edc0:	4622      	mov	r2, r4
 800edc2:	462b      	mov	r3, r5
 800edc4:	1891      	adds	r1, r2, r2
 800edc6:	67b9      	str	r1, [r7, #120]	; 0x78
 800edc8:	415b      	adcs	r3, r3
 800edca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800edcc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800edd0:	1912      	adds	r2, r2, r4
 800edd2:	eb45 0303 	adc.w	r3, r5, r3
 800edd6:	f04f 0000 	mov.w	r0, #0
 800edda:	f04f 0100 	mov.w	r1, #0
 800edde:	00d9      	lsls	r1, r3, #3
 800ede0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ede4:	00d0      	lsls	r0, r2, #3
 800ede6:	4602      	mov	r2, r0
 800ede8:	460b      	mov	r3, r1
 800edea:	1911      	adds	r1, r2, r4
 800edec:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800edf0:	416b      	adcs	r3, r5
 800edf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800edf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	461a      	mov	r2, r3
 800edfe:	f04f 0300 	mov.w	r3, #0
 800ee02:	1891      	adds	r1, r2, r2
 800ee04:	6739      	str	r1, [r7, #112]	; 0x70
 800ee06:	415b      	adcs	r3, r3
 800ee08:	677b      	str	r3, [r7, #116]	; 0x74
 800ee0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ee0e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ee12:	f7f1 ff39 	bl	8000c88 <__aeabi_uldivmod>
 800ee16:	4602      	mov	r2, r0
 800ee18:	460b      	mov	r3, r1
 800ee1a:	4b92      	ldr	r3, [pc, #584]	; (800f064 <UART_SetConfig+0x3dc>)
 800ee1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ee20:	095b      	lsrs	r3, r3, #5
 800ee22:	2164      	movs	r1, #100	; 0x64
 800ee24:	fb01 f303 	mul.w	r3, r1, r3
 800ee28:	1ad3      	subs	r3, r2, r3
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	3332      	adds	r3, #50	; 0x32
 800ee2e:	4a8d      	ldr	r2, [pc, #564]	; (800f064 <UART_SetConfig+0x3dc>)
 800ee30:	fba2 2303 	umull	r2, r3, r2, r3
 800ee34:	095b      	lsrs	r3, r3, #5
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee3c:	441e      	add	r6, r3
 800ee3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ee42:	4618      	mov	r0, r3
 800ee44:	f04f 0100 	mov.w	r1, #0
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	1894      	adds	r4, r2, r2
 800ee4e:	66bc      	str	r4, [r7, #104]	; 0x68
 800ee50:	415b      	adcs	r3, r3
 800ee52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ee58:	1812      	adds	r2, r2, r0
 800ee5a:	eb41 0303 	adc.w	r3, r1, r3
 800ee5e:	f04f 0400 	mov.w	r4, #0
 800ee62:	f04f 0500 	mov.w	r5, #0
 800ee66:	00dd      	lsls	r5, r3, #3
 800ee68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ee6c:	00d4      	lsls	r4, r2, #3
 800ee6e:	4622      	mov	r2, r4
 800ee70:	462b      	mov	r3, r5
 800ee72:	1814      	adds	r4, r2, r0
 800ee74:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800ee78:	414b      	adcs	r3, r1
 800ee7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ee7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	461a      	mov	r2, r3
 800ee86:	f04f 0300 	mov.w	r3, #0
 800ee8a:	1891      	adds	r1, r2, r2
 800ee8c:	6639      	str	r1, [r7, #96]	; 0x60
 800ee8e:	415b      	adcs	r3, r3
 800ee90:	667b      	str	r3, [r7, #100]	; 0x64
 800ee92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ee96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ee9a:	f7f1 fef5 	bl	8000c88 <__aeabi_uldivmod>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	460b      	mov	r3, r1
 800eea2:	4b70      	ldr	r3, [pc, #448]	; (800f064 <UART_SetConfig+0x3dc>)
 800eea4:	fba3 1302 	umull	r1, r3, r3, r2
 800eea8:	095b      	lsrs	r3, r3, #5
 800eeaa:	2164      	movs	r1, #100	; 0x64
 800eeac:	fb01 f303 	mul.w	r3, r1, r3
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	3332      	adds	r3, #50	; 0x32
 800eeb6:	4a6b      	ldr	r2, [pc, #428]	; (800f064 <UART_SetConfig+0x3dc>)
 800eeb8:	fba2 2303 	umull	r2, r3, r2, r3
 800eebc:	095b      	lsrs	r3, r3, #5
 800eebe:	f003 0207 	and.w	r2, r3, #7
 800eec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4432      	add	r2, r6
 800eeca:	609a      	str	r2, [r3, #8]
 800eecc:	e26d      	b.n	800f3aa <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eece:	f7fe febf 	bl	800dc50 <HAL_RCC_GetPCLK1Freq>
 800eed2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eed6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eeda:	461c      	mov	r4, r3
 800eedc:	f04f 0500 	mov.w	r5, #0
 800eee0:	4622      	mov	r2, r4
 800eee2:	462b      	mov	r3, r5
 800eee4:	1891      	adds	r1, r2, r2
 800eee6:	65b9      	str	r1, [r7, #88]	; 0x58
 800eee8:	415b      	adcs	r3, r3
 800eeea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eeec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800eef0:	1912      	adds	r2, r2, r4
 800eef2:	eb45 0303 	adc.w	r3, r5, r3
 800eef6:	f04f 0000 	mov.w	r0, #0
 800eefa:	f04f 0100 	mov.w	r1, #0
 800eefe:	00d9      	lsls	r1, r3, #3
 800ef00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ef04:	00d0      	lsls	r0, r2, #3
 800ef06:	4602      	mov	r2, r0
 800ef08:	460b      	mov	r3, r1
 800ef0a:	1911      	adds	r1, r2, r4
 800ef0c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800ef10:	416b      	adcs	r3, r5
 800ef12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ef16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	f04f 0300 	mov.w	r3, #0
 800ef22:	1891      	adds	r1, r2, r2
 800ef24:	6539      	str	r1, [r7, #80]	; 0x50
 800ef26:	415b      	adcs	r3, r3
 800ef28:	657b      	str	r3, [r7, #84]	; 0x54
 800ef2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ef2e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800ef32:	f7f1 fea9 	bl	8000c88 <__aeabi_uldivmod>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	4b4a      	ldr	r3, [pc, #296]	; (800f064 <UART_SetConfig+0x3dc>)
 800ef3c:	fba3 2302 	umull	r2, r3, r3, r2
 800ef40:	095b      	lsrs	r3, r3, #5
 800ef42:	011e      	lsls	r6, r3, #4
 800ef44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ef48:	461c      	mov	r4, r3
 800ef4a:	f04f 0500 	mov.w	r5, #0
 800ef4e:	4622      	mov	r2, r4
 800ef50:	462b      	mov	r3, r5
 800ef52:	1891      	adds	r1, r2, r2
 800ef54:	64b9      	str	r1, [r7, #72]	; 0x48
 800ef56:	415b      	adcs	r3, r3
 800ef58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef5e:	1912      	adds	r2, r2, r4
 800ef60:	eb45 0303 	adc.w	r3, r5, r3
 800ef64:	f04f 0000 	mov.w	r0, #0
 800ef68:	f04f 0100 	mov.w	r1, #0
 800ef6c:	00d9      	lsls	r1, r3, #3
 800ef6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ef72:	00d0      	lsls	r0, r2, #3
 800ef74:	4602      	mov	r2, r0
 800ef76:	460b      	mov	r3, r1
 800ef78:	1911      	adds	r1, r2, r4
 800ef7a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800ef7e:	416b      	adcs	r3, r5
 800ef80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ef84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	f04f 0300 	mov.w	r3, #0
 800ef90:	1891      	adds	r1, r2, r2
 800ef92:	6439      	str	r1, [r7, #64]	; 0x40
 800ef94:	415b      	adcs	r3, r3
 800ef96:	647b      	str	r3, [r7, #68]	; 0x44
 800ef98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ef9c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800efa0:	f7f1 fe72 	bl	8000c88 <__aeabi_uldivmod>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4b2e      	ldr	r3, [pc, #184]	; (800f064 <UART_SetConfig+0x3dc>)
 800efaa:	fba3 1302 	umull	r1, r3, r3, r2
 800efae:	095b      	lsrs	r3, r3, #5
 800efb0:	2164      	movs	r1, #100	; 0x64
 800efb2:	fb01 f303 	mul.w	r3, r1, r3
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	00db      	lsls	r3, r3, #3
 800efba:	3332      	adds	r3, #50	; 0x32
 800efbc:	4a29      	ldr	r2, [pc, #164]	; (800f064 <UART_SetConfig+0x3dc>)
 800efbe:	fba2 2303 	umull	r2, r3, r2, r3
 800efc2:	095b      	lsrs	r3, r3, #5
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800efca:	441e      	add	r6, r3
 800efcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800efd0:	4618      	mov	r0, r3
 800efd2:	f04f 0100 	mov.w	r1, #0
 800efd6:	4602      	mov	r2, r0
 800efd8:	460b      	mov	r3, r1
 800efda:	1894      	adds	r4, r2, r2
 800efdc:	63bc      	str	r4, [r7, #56]	; 0x38
 800efde:	415b      	adcs	r3, r3
 800efe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efe2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800efe6:	1812      	adds	r2, r2, r0
 800efe8:	eb41 0303 	adc.w	r3, r1, r3
 800efec:	f04f 0400 	mov.w	r4, #0
 800eff0:	f04f 0500 	mov.w	r5, #0
 800eff4:	00dd      	lsls	r5, r3, #3
 800eff6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800effa:	00d4      	lsls	r4, r2, #3
 800effc:	4622      	mov	r2, r4
 800effe:	462b      	mov	r3, r5
 800f000:	1814      	adds	r4, r2, r0
 800f002:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f006:	414b      	adcs	r3, r1
 800f008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	461a      	mov	r2, r3
 800f014:	f04f 0300 	mov.w	r3, #0
 800f018:	1891      	adds	r1, r2, r2
 800f01a:	6339      	str	r1, [r7, #48]	; 0x30
 800f01c:	415b      	adcs	r3, r3
 800f01e:	637b      	str	r3, [r7, #52]	; 0x34
 800f020:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f024:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f028:	f7f1 fe2e 	bl	8000c88 <__aeabi_uldivmod>
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	4b0c      	ldr	r3, [pc, #48]	; (800f064 <UART_SetConfig+0x3dc>)
 800f032:	fba3 1302 	umull	r1, r3, r3, r2
 800f036:	095b      	lsrs	r3, r3, #5
 800f038:	2164      	movs	r1, #100	; 0x64
 800f03a:	fb01 f303 	mul.w	r3, r1, r3
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	00db      	lsls	r3, r3, #3
 800f042:	3332      	adds	r3, #50	; 0x32
 800f044:	4a07      	ldr	r2, [pc, #28]	; (800f064 <UART_SetConfig+0x3dc>)
 800f046:	fba2 2303 	umull	r2, r3, r2, r3
 800f04a:	095b      	lsrs	r3, r3, #5
 800f04c:	f003 0207 	and.w	r2, r3, #7
 800f050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4432      	add	r2, r6
 800f058:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f05a:	e1a6      	b.n	800f3aa <UART_SetConfig+0x722>
 800f05c:	40011000 	.word	0x40011000
 800f060:	40011400 	.word	0x40011400
 800f064:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	4bd1      	ldr	r3, [pc, #836]	; (800f3b4 <UART_SetConfig+0x72c>)
 800f070:	429a      	cmp	r2, r3
 800f072:	d006      	beq.n	800f082 <UART_SetConfig+0x3fa>
 800f074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	4bcf      	ldr	r3, [pc, #828]	; (800f3b8 <UART_SetConfig+0x730>)
 800f07c:	429a      	cmp	r2, r3
 800f07e:	f040 80ca 	bne.w	800f216 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f082:	f7fe fdf9 	bl	800dc78 <HAL_RCC_GetPCLK2Freq>
 800f086:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f08a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f08e:	461c      	mov	r4, r3
 800f090:	f04f 0500 	mov.w	r5, #0
 800f094:	4622      	mov	r2, r4
 800f096:	462b      	mov	r3, r5
 800f098:	1891      	adds	r1, r2, r2
 800f09a:	62b9      	str	r1, [r7, #40]	; 0x28
 800f09c:	415b      	adcs	r3, r3
 800f09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f0a4:	1912      	adds	r2, r2, r4
 800f0a6:	eb45 0303 	adc.w	r3, r5, r3
 800f0aa:	f04f 0000 	mov.w	r0, #0
 800f0ae:	f04f 0100 	mov.w	r1, #0
 800f0b2:	00d9      	lsls	r1, r3, #3
 800f0b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f0b8:	00d0      	lsls	r0, r2, #3
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	eb12 0a04 	adds.w	sl, r2, r4
 800f0c2:	eb43 0b05 	adc.w	fp, r3, r5
 800f0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f04f 0100 	mov.w	r1, #0
 800f0d2:	f04f 0200 	mov.w	r2, #0
 800f0d6:	f04f 0300 	mov.w	r3, #0
 800f0da:	008b      	lsls	r3, r1, #2
 800f0dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f0e0:	0082      	lsls	r2, r0, #2
 800f0e2:	4650      	mov	r0, sl
 800f0e4:	4659      	mov	r1, fp
 800f0e6:	f7f1 fdcf 	bl	8000c88 <__aeabi_uldivmod>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	4bb3      	ldr	r3, [pc, #716]	; (800f3bc <UART_SetConfig+0x734>)
 800f0f0:	fba3 2302 	umull	r2, r3, r3, r2
 800f0f4:	095b      	lsrs	r3, r3, #5
 800f0f6:	011e      	lsls	r6, r3, #4
 800f0f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f04f 0100 	mov.w	r1, #0
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	1894      	adds	r4, r2, r2
 800f108:	623c      	str	r4, [r7, #32]
 800f10a:	415b      	adcs	r3, r3
 800f10c:	627b      	str	r3, [r7, #36]	; 0x24
 800f10e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f112:	1812      	adds	r2, r2, r0
 800f114:	eb41 0303 	adc.w	r3, r1, r3
 800f118:	f04f 0400 	mov.w	r4, #0
 800f11c:	f04f 0500 	mov.w	r5, #0
 800f120:	00dd      	lsls	r5, r3, #3
 800f122:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f126:	00d4      	lsls	r4, r2, #3
 800f128:	4622      	mov	r2, r4
 800f12a:	462b      	mov	r3, r5
 800f12c:	1814      	adds	r4, r2, r0
 800f12e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f132:	414b      	adcs	r3, r1
 800f134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	4618      	mov	r0, r3
 800f140:	f04f 0100 	mov.w	r1, #0
 800f144:	f04f 0200 	mov.w	r2, #0
 800f148:	f04f 0300 	mov.w	r3, #0
 800f14c:	008b      	lsls	r3, r1, #2
 800f14e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f152:	0082      	lsls	r2, r0, #2
 800f154:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f158:	f7f1 fd96 	bl	8000c88 <__aeabi_uldivmod>
 800f15c:	4602      	mov	r2, r0
 800f15e:	460b      	mov	r3, r1
 800f160:	4b96      	ldr	r3, [pc, #600]	; (800f3bc <UART_SetConfig+0x734>)
 800f162:	fba3 1302 	umull	r1, r3, r3, r2
 800f166:	095b      	lsrs	r3, r3, #5
 800f168:	2164      	movs	r1, #100	; 0x64
 800f16a:	fb01 f303 	mul.w	r3, r1, r3
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	011b      	lsls	r3, r3, #4
 800f172:	3332      	adds	r3, #50	; 0x32
 800f174:	4a91      	ldr	r2, [pc, #580]	; (800f3bc <UART_SetConfig+0x734>)
 800f176:	fba2 2303 	umull	r2, r3, r2, r3
 800f17a:	095b      	lsrs	r3, r3, #5
 800f17c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f180:	441e      	add	r6, r3
 800f182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f186:	4618      	mov	r0, r3
 800f188:	f04f 0100 	mov.w	r1, #0
 800f18c:	4602      	mov	r2, r0
 800f18e:	460b      	mov	r3, r1
 800f190:	1894      	adds	r4, r2, r2
 800f192:	61bc      	str	r4, [r7, #24]
 800f194:	415b      	adcs	r3, r3
 800f196:	61fb      	str	r3, [r7, #28]
 800f198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f19c:	1812      	adds	r2, r2, r0
 800f19e:	eb41 0303 	adc.w	r3, r1, r3
 800f1a2:	f04f 0400 	mov.w	r4, #0
 800f1a6:	f04f 0500 	mov.w	r5, #0
 800f1aa:	00dd      	lsls	r5, r3, #3
 800f1ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f1b0:	00d4      	lsls	r4, r2, #3
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	462b      	mov	r3, r5
 800f1b6:	1814      	adds	r4, r2, r0
 800f1b8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800f1bc:	414b      	adcs	r3, r1
 800f1be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f04f 0100 	mov.w	r1, #0
 800f1ce:	f04f 0200 	mov.w	r2, #0
 800f1d2:	f04f 0300 	mov.w	r3, #0
 800f1d6:	008b      	lsls	r3, r1, #2
 800f1d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f1dc:	0082      	lsls	r2, r0, #2
 800f1de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800f1e2:	f7f1 fd51 	bl	8000c88 <__aeabi_uldivmod>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	4b74      	ldr	r3, [pc, #464]	; (800f3bc <UART_SetConfig+0x734>)
 800f1ec:	fba3 1302 	umull	r1, r3, r3, r2
 800f1f0:	095b      	lsrs	r3, r3, #5
 800f1f2:	2164      	movs	r1, #100	; 0x64
 800f1f4:	fb01 f303 	mul.w	r3, r1, r3
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	011b      	lsls	r3, r3, #4
 800f1fc:	3332      	adds	r3, #50	; 0x32
 800f1fe:	4a6f      	ldr	r2, [pc, #444]	; (800f3bc <UART_SetConfig+0x734>)
 800f200:	fba2 2303 	umull	r2, r3, r2, r3
 800f204:	095b      	lsrs	r3, r3, #5
 800f206:	f003 020f 	and.w	r2, r3, #15
 800f20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4432      	add	r2, r6
 800f212:	609a      	str	r2, [r3, #8]
 800f214:	e0c9      	b.n	800f3aa <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f216:	f7fe fd1b 	bl	800dc50 <HAL_RCC_GetPCLK1Freq>
 800f21a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f21e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f222:	461c      	mov	r4, r3
 800f224:	f04f 0500 	mov.w	r5, #0
 800f228:	4622      	mov	r2, r4
 800f22a:	462b      	mov	r3, r5
 800f22c:	1891      	adds	r1, r2, r2
 800f22e:	6139      	str	r1, [r7, #16]
 800f230:	415b      	adcs	r3, r3
 800f232:	617b      	str	r3, [r7, #20]
 800f234:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f238:	1912      	adds	r2, r2, r4
 800f23a:	eb45 0303 	adc.w	r3, r5, r3
 800f23e:	f04f 0000 	mov.w	r0, #0
 800f242:	f04f 0100 	mov.w	r1, #0
 800f246:	00d9      	lsls	r1, r3, #3
 800f248:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f24c:	00d0      	lsls	r0, r2, #3
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	eb12 0804 	adds.w	r8, r2, r4
 800f256:	eb43 0905 	adc.w	r9, r3, r5
 800f25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	f04f 0100 	mov.w	r1, #0
 800f266:	f04f 0200 	mov.w	r2, #0
 800f26a:	f04f 0300 	mov.w	r3, #0
 800f26e:	008b      	lsls	r3, r1, #2
 800f270:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f274:	0082      	lsls	r2, r0, #2
 800f276:	4640      	mov	r0, r8
 800f278:	4649      	mov	r1, r9
 800f27a:	f7f1 fd05 	bl	8000c88 <__aeabi_uldivmod>
 800f27e:	4602      	mov	r2, r0
 800f280:	460b      	mov	r3, r1
 800f282:	4b4e      	ldr	r3, [pc, #312]	; (800f3bc <UART_SetConfig+0x734>)
 800f284:	fba3 2302 	umull	r2, r3, r3, r2
 800f288:	095b      	lsrs	r3, r3, #5
 800f28a:	011e      	lsls	r6, r3, #4
 800f28c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f290:	4618      	mov	r0, r3
 800f292:	f04f 0100 	mov.w	r1, #0
 800f296:	4602      	mov	r2, r0
 800f298:	460b      	mov	r3, r1
 800f29a:	1894      	adds	r4, r2, r2
 800f29c:	60bc      	str	r4, [r7, #8]
 800f29e:	415b      	adcs	r3, r3
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f2a6:	1812      	adds	r2, r2, r0
 800f2a8:	eb41 0303 	adc.w	r3, r1, r3
 800f2ac:	f04f 0400 	mov.w	r4, #0
 800f2b0:	f04f 0500 	mov.w	r5, #0
 800f2b4:	00dd      	lsls	r5, r3, #3
 800f2b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f2ba:	00d4      	lsls	r4, r2, #3
 800f2bc:	4622      	mov	r2, r4
 800f2be:	462b      	mov	r3, r5
 800f2c0:	1814      	adds	r4, r2, r0
 800f2c2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f2c6:	414b      	adcs	r3, r1
 800f2c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f04f 0100 	mov.w	r1, #0
 800f2d8:	f04f 0200 	mov.w	r2, #0
 800f2dc:	f04f 0300 	mov.w	r3, #0
 800f2e0:	008b      	lsls	r3, r1, #2
 800f2e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f2e6:	0082      	lsls	r2, r0, #2
 800f2e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f2ec:	f7f1 fccc 	bl	8000c88 <__aeabi_uldivmod>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4b31      	ldr	r3, [pc, #196]	; (800f3bc <UART_SetConfig+0x734>)
 800f2f6:	fba3 1302 	umull	r1, r3, r3, r2
 800f2fa:	095b      	lsrs	r3, r3, #5
 800f2fc:	2164      	movs	r1, #100	; 0x64
 800f2fe:	fb01 f303 	mul.w	r3, r1, r3
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	011b      	lsls	r3, r3, #4
 800f306:	3332      	adds	r3, #50	; 0x32
 800f308:	4a2c      	ldr	r2, [pc, #176]	; (800f3bc <UART_SetConfig+0x734>)
 800f30a:	fba2 2303 	umull	r2, r3, r2, r3
 800f30e:	095b      	lsrs	r3, r3, #5
 800f310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f314:	441e      	add	r6, r3
 800f316:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f31a:	4618      	mov	r0, r3
 800f31c:	f04f 0100 	mov.w	r1, #0
 800f320:	4602      	mov	r2, r0
 800f322:	460b      	mov	r3, r1
 800f324:	1894      	adds	r4, r2, r2
 800f326:	603c      	str	r4, [r7, #0]
 800f328:	415b      	adcs	r3, r3
 800f32a:	607b      	str	r3, [r7, #4]
 800f32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f330:	1812      	adds	r2, r2, r0
 800f332:	eb41 0303 	adc.w	r3, r1, r3
 800f336:	f04f 0400 	mov.w	r4, #0
 800f33a:	f04f 0500 	mov.w	r5, #0
 800f33e:	00dd      	lsls	r5, r3, #3
 800f340:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f344:	00d4      	lsls	r4, r2, #3
 800f346:	4622      	mov	r2, r4
 800f348:	462b      	mov	r3, r5
 800f34a:	1814      	adds	r4, r2, r0
 800f34c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800f350:	414b      	adcs	r3, r1
 800f352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f04f 0100 	mov.w	r1, #0
 800f362:	f04f 0200 	mov.w	r2, #0
 800f366:	f04f 0300 	mov.w	r3, #0
 800f36a:	008b      	lsls	r3, r1, #2
 800f36c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f370:	0082      	lsls	r2, r0, #2
 800f372:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f376:	f7f1 fc87 	bl	8000c88 <__aeabi_uldivmod>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4b0f      	ldr	r3, [pc, #60]	; (800f3bc <UART_SetConfig+0x734>)
 800f380:	fba3 1302 	umull	r1, r3, r3, r2
 800f384:	095b      	lsrs	r3, r3, #5
 800f386:	2164      	movs	r1, #100	; 0x64
 800f388:	fb01 f303 	mul.w	r3, r1, r3
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	011b      	lsls	r3, r3, #4
 800f390:	3332      	adds	r3, #50	; 0x32
 800f392:	4a0a      	ldr	r2, [pc, #40]	; (800f3bc <UART_SetConfig+0x734>)
 800f394:	fba2 2303 	umull	r2, r3, r2, r3
 800f398:	095b      	lsrs	r3, r3, #5
 800f39a:	f003 020f 	and.w	r2, r3, #15
 800f39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4432      	add	r2, r6
 800f3a6:	609a      	str	r2, [r3, #8]
}
 800f3a8:	e7ff      	b.n	800f3aa <UART_SetConfig+0x722>
 800f3aa:	bf00      	nop
 800f3ac:	37f4      	adds	r7, #244	; 0xf4
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b4:	40011000 	.word	0x40011000
 800f3b8:	40011400 	.word	0x40011400
 800f3bc:	51eb851f 	.word	0x51eb851f

0800f3c0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3d8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	4b20      	ldr	r3, [pc, #128]	; (800f460 <FSMC_NORSRAM_Init+0xa0>)
 800f3de:	4013      	ands	r3, r2
 800f3e0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f3ea:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f3f0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f3f6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f3fc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f402:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f408:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f40e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f414:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f41a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f420:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f426:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f42c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	4313      	orrs	r3, r2
 800f432:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	2b08      	cmp	r3, #8
 800f43a:	d103      	bne.n	800f444 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f442:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	68f9      	ldr	r1, [r7, #12]
 800f44c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	3714      	adds	r7, #20
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	fff00080 	.word	0xfff00080

0800f464 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f470:	2300      	movs	r3, #0
 800f472:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	1c5a      	adds	r2, r3, #1
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f47e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f486:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f492:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f49a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f4a2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	691b      	ldr	r3, [r3, #16]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f4ac:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	695b      	ldr	r3, [r3, #20]
 800f4b2:	3b02      	subs	r3, #2
 800f4b4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f4b6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	1c5a      	adds	r2, r3, #1
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6979      	ldr	r1, [r7, #20]
 800f4cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	371c      	adds	r7, #28
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
	...

0800f4e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b087      	sub	sp, #28
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4f8:	d122      	bne.n	800f540 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f502:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f504:	697a      	ldr	r2, [r7, #20]
 800f506:	4b15      	ldr	r3, [pc, #84]	; (800f55c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f508:	4013      	ands	r3, r2
 800f50a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f516:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f51e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f526:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f52c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f52e:	697a      	ldr	r2, [r7, #20]
 800f530:	4313      	orrs	r3, r2
 800f532:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	6979      	ldr	r1, [r7, #20]
 800f53a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f53e:	e005      	b.n	800f54c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	371c      	adds	r7, #28
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	cff00000 	.word	0xcff00000

0800f560 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f560:	b084      	sub	sp, #16
 800f562:	b580      	push	{r7, lr}
 800f564:	b084      	sub	sp, #16
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	f107 001c 	add.w	r0, r7, #28
 800f56e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f574:	2b01      	cmp	r3, #1
 800f576:	d122      	bne.n	800f5be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f57c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f58c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f5a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d105      	bne.n	800f5b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f001 fac6 	bl	8010b44 <USB_CoreReset>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]
 800f5bc:	e01a      	b.n	800f5f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f001 faba 	bl	8010b44 <USB_CoreReset>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d106      	bne.n	800f5e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	639a      	str	r2, [r3, #56]	; 0x38
 800f5e6:	e005      	b.n	800f5f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d10b      	bne.n	800f612 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	689b      	ldr	r3, [r3, #8]
 800f5fe:	f043 0206 	orr.w	r2, r3, #6
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f043 0220 	orr.w	r2, r3, #32
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f612:	7bfb      	ldrb	r3, [r7, #15]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f61e:	b004      	add	sp, #16
 800f620:	4770      	bx	lr
	...

0800f624 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f624:	b480      	push	{r7}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	4613      	mov	r3, r2
 800f630:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f632:	79fb      	ldrb	r3, [r7, #7]
 800f634:	2b02      	cmp	r3, #2
 800f636:	d165      	bne.n	800f704 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	4a41      	ldr	r2, [pc, #260]	; (800f740 <USB_SetTurnaroundTime+0x11c>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d906      	bls.n	800f64e <USB_SetTurnaroundTime+0x2a>
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	4a40      	ldr	r2, [pc, #256]	; (800f744 <USB_SetTurnaroundTime+0x120>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d202      	bcs.n	800f64e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f648:	230f      	movs	r3, #15
 800f64a:	617b      	str	r3, [r7, #20]
 800f64c:	e062      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	4a3c      	ldr	r2, [pc, #240]	; (800f744 <USB_SetTurnaroundTime+0x120>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d306      	bcc.n	800f664 <USB_SetTurnaroundTime+0x40>
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	4a3b      	ldr	r2, [pc, #236]	; (800f748 <USB_SetTurnaroundTime+0x124>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d202      	bcs.n	800f664 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f65e:	230e      	movs	r3, #14
 800f660:	617b      	str	r3, [r7, #20]
 800f662:	e057      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	4a38      	ldr	r2, [pc, #224]	; (800f748 <USB_SetTurnaroundTime+0x124>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d306      	bcc.n	800f67a <USB_SetTurnaroundTime+0x56>
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	4a37      	ldr	r2, [pc, #220]	; (800f74c <USB_SetTurnaroundTime+0x128>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d202      	bcs.n	800f67a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f674:	230d      	movs	r3, #13
 800f676:	617b      	str	r3, [r7, #20]
 800f678:	e04c      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	4a33      	ldr	r2, [pc, #204]	; (800f74c <USB_SetTurnaroundTime+0x128>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d306      	bcc.n	800f690 <USB_SetTurnaroundTime+0x6c>
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	4a32      	ldr	r2, [pc, #200]	; (800f750 <USB_SetTurnaroundTime+0x12c>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d802      	bhi.n	800f690 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f68a:	230c      	movs	r3, #12
 800f68c:	617b      	str	r3, [r7, #20]
 800f68e:	e041      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	4a2f      	ldr	r2, [pc, #188]	; (800f750 <USB_SetTurnaroundTime+0x12c>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d906      	bls.n	800f6a6 <USB_SetTurnaroundTime+0x82>
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	4a2e      	ldr	r2, [pc, #184]	; (800f754 <USB_SetTurnaroundTime+0x130>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d802      	bhi.n	800f6a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f6a0:	230b      	movs	r3, #11
 800f6a2:	617b      	str	r3, [r7, #20]
 800f6a4:	e036      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	4a2a      	ldr	r2, [pc, #168]	; (800f754 <USB_SetTurnaroundTime+0x130>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d906      	bls.n	800f6bc <USB_SetTurnaroundTime+0x98>
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	4a29      	ldr	r2, [pc, #164]	; (800f758 <USB_SetTurnaroundTime+0x134>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d802      	bhi.n	800f6bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f6b6:	230a      	movs	r3, #10
 800f6b8:	617b      	str	r3, [r7, #20]
 800f6ba:	e02b      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	4a26      	ldr	r2, [pc, #152]	; (800f758 <USB_SetTurnaroundTime+0x134>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d906      	bls.n	800f6d2 <USB_SetTurnaroundTime+0xae>
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	4a25      	ldr	r2, [pc, #148]	; (800f75c <USB_SetTurnaroundTime+0x138>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d202      	bcs.n	800f6d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f6cc:	2309      	movs	r3, #9
 800f6ce:	617b      	str	r3, [r7, #20]
 800f6d0:	e020      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	4a21      	ldr	r2, [pc, #132]	; (800f75c <USB_SetTurnaroundTime+0x138>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d306      	bcc.n	800f6e8 <USB_SetTurnaroundTime+0xc4>
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	4a20      	ldr	r2, [pc, #128]	; (800f760 <USB_SetTurnaroundTime+0x13c>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d802      	bhi.n	800f6e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f6e2:	2308      	movs	r3, #8
 800f6e4:	617b      	str	r3, [r7, #20]
 800f6e6:	e015      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	4a1d      	ldr	r2, [pc, #116]	; (800f760 <USB_SetTurnaroundTime+0x13c>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d906      	bls.n	800f6fe <USB_SetTurnaroundTime+0xda>
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	4a1c      	ldr	r2, [pc, #112]	; (800f764 <USB_SetTurnaroundTime+0x140>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d202      	bcs.n	800f6fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f6f8:	2307      	movs	r3, #7
 800f6fa:	617b      	str	r3, [r7, #20]
 800f6fc:	e00a      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f6fe:	2306      	movs	r3, #6
 800f700:	617b      	str	r3, [r7, #20]
 800f702:	e007      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d102      	bne.n	800f710 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f70a:	2309      	movs	r3, #9
 800f70c:	617b      	str	r3, [r7, #20]
 800f70e:	e001      	b.n	800f714 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f710:	2309      	movs	r3, #9
 800f712:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	68da      	ldr	r2, [r3, #12]
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	029b      	lsls	r3, r3, #10
 800f728:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f72c:	431a      	orrs	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f732:	2300      	movs	r3, #0
}
 800f734:	4618      	mov	r0, r3
 800f736:	371c      	adds	r7, #28
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	00d8acbf 	.word	0x00d8acbf
 800f744:	00e4e1c0 	.word	0x00e4e1c0
 800f748:	00f42400 	.word	0x00f42400
 800f74c:	01067380 	.word	0x01067380
 800f750:	011a499f 	.word	0x011a499f
 800f754:	01312cff 	.word	0x01312cff
 800f758:	014ca43f 	.word	0x014ca43f
 800f75c:	016e3600 	.word	0x016e3600
 800f760:	01a6ab1f 	.word	0x01a6ab1f
 800f764:	01e84800 	.word	0x01e84800

0800f768 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	f043 0201 	orr.w	r2, r3, #1
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f78a:	b480      	push	{r7}
 800f78c:	b083      	sub	sp, #12
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	f023 0201 	bic.w	r2, r3, #1
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f7c4:	78fb      	ldrb	r3, [r7, #3]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d106      	bne.n	800f7d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	60da      	str	r2, [r3, #12]
 800f7d6:	e00b      	b.n	800f7f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f7d8:	78fb      	ldrb	r3, [r7, #3]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d106      	bne.n	800f7ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	60da      	str	r2, [r3, #12]
 800f7ea:	e001      	b.n	800f7f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e003      	b.n	800f7f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f7f0:	2032      	movs	r0, #50	; 0x32
 800f7f2:	f7fb fdb3 	bl	800b35c <HAL_Delay>

  return HAL_OK;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f800:	b084      	sub	sp, #16
 800f802:	b580      	push	{r7, lr}
 800f804:	b086      	sub	sp, #24
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f80e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f812:	2300      	movs	r3, #0
 800f814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f81a:	2300      	movs	r3, #0
 800f81c:	613b      	str	r3, [r7, #16]
 800f81e:	e009      	b.n	800f834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	3340      	adds	r3, #64	; 0x40
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	4413      	add	r3, r2
 800f82a:	2200      	movs	r2, #0
 800f82c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	3301      	adds	r3, #1
 800f832:	613b      	str	r3, [r7, #16]
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	2b0e      	cmp	r3, #14
 800f838:	d9f2      	bls.n	800f820 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d11c      	bne.n	800f87a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f84e:	f043 0302 	orr.w	r3, r3, #2
 800f852:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f864:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f870:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	639a      	str	r2, [r3, #56]	; 0x38
 800f878:	e00b      	b.n	800f892 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f87e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f898:	461a      	mov	r2, r3
 800f89a:	2300      	movs	r3, #0
 800f89c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	680b      	ldr	r3, [r1, #0]
 800f8b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d10c      	bne.n	800f8d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d104      	bne.n	800f8c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f8be:	2100      	movs	r1, #0
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f949 	bl	800fb58 <USB_SetDevSpeed>
 800f8c6:	e008      	b.n	800f8da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f8c8:	2101      	movs	r1, #1
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 f944 	bl	800fb58 <USB_SetDevSpeed>
 800f8d0:	e003      	b.n	800f8da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f8d2:	2103      	movs	r1, #3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f93f 	bl	800fb58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f8da:	2110      	movs	r1, #16
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 f8f3 	bl	800fac8 <USB_FlushTxFifo>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 f911 	bl	800fb14 <USB_FlushRxFifo>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d001      	beq.n	800f8fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f902:	461a      	mov	r2, r3
 800f904:	2300      	movs	r3, #0
 800f906:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f90e:	461a      	mov	r2, r3
 800f910:	2300      	movs	r3, #0
 800f912:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f91a:	461a      	mov	r2, r3
 800f91c:	2300      	movs	r3, #0
 800f91e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f920:	2300      	movs	r3, #0
 800f922:	613b      	str	r3, [r7, #16]
 800f924:	e043      	b.n	800f9ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	015a      	lsls	r2, r3, #5
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	4413      	add	r3, r2
 800f92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f93c:	d118      	bne.n	800f970 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d10a      	bne.n	800f95a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	015a      	lsls	r2, r3, #5
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	4413      	add	r3, r2
 800f94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f950:	461a      	mov	r2, r3
 800f952:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	e013      	b.n	800f982 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	015a      	lsls	r2, r3, #5
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	4413      	add	r3, r2
 800f962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f966:	461a      	mov	r2, r3
 800f968:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f96c:	6013      	str	r3, [r2, #0]
 800f96e:	e008      	b.n	800f982 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	015a      	lsls	r2, r3, #5
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4413      	add	r3, r2
 800f978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f97c:	461a      	mov	r2, r3
 800f97e:	2300      	movs	r3, #0
 800f980:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	015a      	lsls	r2, r3, #5
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	4413      	add	r3, r2
 800f98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f98e:	461a      	mov	r2, r3
 800f990:	2300      	movs	r3, #0
 800f992:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	015a      	lsls	r2, r3, #5
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	4413      	add	r3, r2
 800f99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f9a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	613b      	str	r3, [r7, #16]
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b0:	693a      	ldr	r2, [r7, #16]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d3b7      	bcc.n	800f926 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	613b      	str	r3, [r7, #16]
 800f9ba:	e043      	b.n	800fa44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9d2:	d118      	bne.n	800fa06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10a      	bne.n	800f9f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	015a      	lsls	r2, r3, #5
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f9ec:	6013      	str	r3, [r2, #0]
 800f9ee:	e013      	b.n	800fa18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	015a      	lsls	r2, r3, #5
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa02:	6013      	str	r3, [r2, #0]
 800fa04:	e008      	b.n	800fa18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	015a      	lsls	r2, r3, #5
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa12:	461a      	mov	r2, r3
 800fa14:	2300      	movs	r3, #0
 800fa16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	015a      	lsls	r2, r3, #5
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4413      	add	r3, r2
 800fa20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa24:	461a      	mov	r2, r3
 800fa26:	2300      	movs	r3, #0
 800fa28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	015a      	lsls	r2, r3, #5
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	4413      	add	r3, r2
 800fa32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa36:	461a      	mov	r2, r3
 800fa38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	3301      	adds	r3, #1
 800fa42:	613b      	str	r3, [r7, #16]
 800fa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa46:	693a      	ldr	r2, [r7, #16]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d3b7      	bcc.n	800f9bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa52:	691b      	ldr	r3, [r3, #16]
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fa6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d105      	bne.n	800fa80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	699b      	ldr	r3, [r3, #24]
 800fa78:	f043 0210 	orr.w	r2, r3, #16
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	699a      	ldr	r2, [r3, #24]
 800fa84:	4b0f      	ldr	r3, [pc, #60]	; (800fac4 <USB_DevInit+0x2c4>)
 800fa86:	4313      	orrs	r3, r2
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fa8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d005      	beq.n	800fa9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	699b      	ldr	r3, [r3, #24]
 800fa96:	f043 0208 	orr.w	r2, r3, #8
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fa9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d107      	bne.n	800fab4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800faac:	f043 0304 	orr.w	r3, r3, #4
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3718      	adds	r7, #24
 800faba:	46bd      	mov	sp, r7
 800fabc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fac0:	b004      	add	sp, #16
 800fac2:	4770      	bx	lr
 800fac4:	803c3800 	.word	0x803c3800

0800fac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fad2:	2300      	movs	r3, #0
 800fad4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	019b      	lsls	r3, r3, #6
 800fada:	f043 0220 	orr.w	r2, r3, #32
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3301      	adds	r3, #1
 800fae6:	60fb      	str	r3, [r7, #12]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	4a09      	ldr	r2, [pc, #36]	; (800fb10 <USB_FlushTxFifo+0x48>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d901      	bls.n	800faf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800faf0:	2303      	movs	r3, #3
 800faf2:	e006      	b.n	800fb02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	f003 0320 	and.w	r3, r3, #32
 800fafc:	2b20      	cmp	r3, #32
 800fafe:	d0f0      	beq.n	800fae2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3714      	adds	r7, #20
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	00030d40 	.word	0x00030d40

0800fb14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b085      	sub	sp, #20
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2210      	movs	r2, #16
 800fb24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	60fb      	str	r3, [r7, #12]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	4a09      	ldr	r2, [pc, #36]	; (800fb54 <USB_FlushRxFifo+0x40>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d901      	bls.n	800fb38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fb34:	2303      	movs	r3, #3
 800fb36:	e006      	b.n	800fb46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	691b      	ldr	r3, [r3, #16]
 800fb3c:	f003 0310 	and.w	r3, r3, #16
 800fb40:	2b10      	cmp	r3, #16
 800fb42:	d0f0      	beq.n	800fb26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fb44:	2300      	movs	r3, #0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	00030d40 	.word	0x00030d40

0800fb58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	460b      	mov	r3, r1
 800fb62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	78fb      	ldrb	r3, [r7, #3]
 800fb72:	68f9      	ldr	r1, [r7, #12]
 800fb74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3714      	adds	r7, #20
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b087      	sub	sp, #28
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	f003 0306 	and.w	r3, r3, #6
 800fba2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d102      	bne.n	800fbb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	75fb      	strb	r3, [r7, #23]
 800fbae:	e00a      	b.n	800fbc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	d002      	beq.n	800fbbc <USB_GetDevSpeed+0x32>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2b06      	cmp	r3, #6
 800fbba:	d102      	bne.n	800fbc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	75fb      	strb	r3, [r7, #23]
 800fbc0:	e001      	b.n	800fbc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fbc2:	230f      	movs	r3, #15
 800fbc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	371c      	adds	r7, #28
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	785b      	ldrb	r3, [r3, #1]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d13a      	bne.n	800fc66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbf6:	69da      	ldr	r2, [r3, #28]
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	f003 030f 	and.w	r3, r3, #15
 800fc00:	2101      	movs	r1, #1
 800fc02:	fa01 f303 	lsl.w	r3, r1, r3
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	68f9      	ldr	r1, [r7, #12]
 800fc0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	015a      	lsls	r2, r3, #5
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	4413      	add	r3, r2
 800fc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d155      	bne.n	800fcd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	015a      	lsls	r2, r3, #5
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4413      	add	r3, r2
 800fc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	689b      	ldr	r3, [r3, #8]
 800fc3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	78db      	ldrb	r3, [r3, #3]
 800fc42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	059b      	lsls	r3, r3, #22
 800fc4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	68ba      	ldr	r2, [r7, #8]
 800fc50:	0151      	lsls	r1, r2, #5
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	440a      	add	r2, r1
 800fc56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc62:	6013      	str	r3, [r2, #0]
 800fc64:	e036      	b.n	800fcd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc6c:	69da      	ldr	r2, [r3, #28]
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	f003 030f 	and.w	r3, r3, #15
 800fc76:	2101      	movs	r1, #1
 800fc78:	fa01 f303 	lsl.w	r3, r1, r3
 800fc7c:	041b      	lsls	r3, r3, #16
 800fc7e:	68f9      	ldr	r1, [r7, #12]
 800fc80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc84:	4313      	orrs	r3, r2
 800fc86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	015a      	lsls	r2, r3, #5
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	4413      	add	r3, r2
 800fc90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d11a      	bne.n	800fcd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	015a      	lsls	r2, r3, #5
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	4413      	add	r3, r2
 800fca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	78db      	ldrb	r3, [r3, #3]
 800fcb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fcba:	430b      	orrs	r3, r1
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	0151      	lsls	r1, r2, #5
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	440a      	add	r2, r1
 800fcc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fcd4:	2300      	movs	r3, #0
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
	...

0800fce4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	785b      	ldrb	r3, [r3, #1]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d161      	bne.n	800fdc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	015a      	lsls	r2, r3, #5
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	4413      	add	r3, r2
 800fd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd16:	d11f      	bne.n	800fd58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	015a      	lsls	r2, r3, #5
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	4413      	add	r3, r2
 800fd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	0151      	lsls	r1, r2, #5
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	440a      	add	r2, r1
 800fd2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	015a      	lsls	r2, r3, #5
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	4413      	add	r3, r2
 800fd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	0151      	lsls	r1, r2, #5
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	440a      	add	r2, r1
 800fd4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	f003 030f 	and.w	r3, r3, #15
 800fd68:	2101      	movs	r1, #1
 800fd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	43db      	mvns	r3, r3
 800fd72:	68f9      	ldr	r1, [r7, #12]
 800fd74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd78:	4013      	ands	r3, r2
 800fd7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd82:	69da      	ldr	r2, [r3, #28]
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	f003 030f 	and.w	r3, r3, #15
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	43db      	mvns	r3, r3
 800fd96:	68f9      	ldr	r1, [r7, #12]
 800fd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd9c:	4013      	ands	r3, r2
 800fd9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	015a      	lsls	r2, r3, #5
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	4413      	add	r3, r2
 800fda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	0159      	lsls	r1, r3, #5
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	440b      	add	r3, r1
 800fdb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4b35      	ldr	r3, [pc, #212]	; (800fe94 <USB_DeactivateEndpoint+0x1b0>)
 800fdbe:	4013      	ands	r3, r2
 800fdc0:	600b      	str	r3, [r1, #0]
 800fdc2:	e060      	b.n	800fe86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	015a      	lsls	r2, r3, #5
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	4413      	add	r3, r2
 800fdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdda:	d11f      	bne.n	800fe1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	015a      	lsls	r2, r3, #5
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4413      	add	r3, r2
 800fde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	0151      	lsls	r1, r2, #5
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	440a      	add	r2, r1
 800fdf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fdfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	015a      	lsls	r2, r3, #5
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	4413      	add	r3, r2
 800fe04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	0151      	lsls	r1, r2, #5
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	440a      	add	r2, r1
 800fe12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	f003 030f 	and.w	r3, r3, #15
 800fe2c:	2101      	movs	r1, #1
 800fe2e:	fa01 f303 	lsl.w	r3, r1, r3
 800fe32:	041b      	lsls	r3, r3, #16
 800fe34:	43db      	mvns	r3, r3
 800fe36:	68f9      	ldr	r1, [r7, #12]
 800fe38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe3c:	4013      	ands	r3, r2
 800fe3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe46:	69da      	ldr	r2, [r3, #28]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	f003 030f 	and.w	r3, r3, #15
 800fe50:	2101      	movs	r1, #1
 800fe52:	fa01 f303 	lsl.w	r3, r1, r3
 800fe56:	041b      	lsls	r3, r3, #16
 800fe58:	43db      	mvns	r3, r3
 800fe5a:	68f9      	ldr	r1, [r7, #12]
 800fe5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe60:	4013      	ands	r3, r2
 800fe62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	015a      	lsls	r2, r3, #5
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	0159      	lsls	r1, r3, #5
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	440b      	add	r3, r1
 800fe7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe7e:	4619      	mov	r1, r3
 800fe80:	4b05      	ldr	r3, [pc, #20]	; (800fe98 <USB_DeactivateEndpoint+0x1b4>)
 800fe82:	4013      	ands	r3, r2
 800fe84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3714      	adds	r7, #20
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr
 800fe94:	ec337800 	.word	0xec337800
 800fe98:	eff37800 	.word	0xeff37800

0800fe9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b08a      	sub	sp, #40	; 0x28
 800fea0:	af02      	add	r7, sp, #8
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	4613      	mov	r3, r2
 800fea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	785b      	ldrb	r3, [r3, #1]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	f040 815c 	bne.w	8010176 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d132      	bne.n	800ff2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fec6:	69bb      	ldr	r3, [r7, #24]
 800fec8:	015a      	lsls	r2, r3, #5
 800feca:	69fb      	ldr	r3, [r7, #28]
 800fecc:	4413      	add	r3, r2
 800fece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fed2:	691b      	ldr	r3, [r3, #16]
 800fed4:	69ba      	ldr	r2, [r7, #24]
 800fed6:	0151      	lsls	r1, r2, #5
 800fed8:	69fa      	ldr	r2, [r7, #28]
 800feda:	440a      	add	r2, r1
 800fedc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fee0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fee4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	015a      	lsls	r2, r3, #5
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	4413      	add	r3, r2
 800fef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	69ba      	ldr	r2, [r7, #24]
 800fefa:	0151      	lsls	r1, r2, #5
 800fefc:	69fa      	ldr	r2, [r7, #28]
 800fefe:	440a      	add	r2, r1
 800ff00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	015a      	lsls	r2, r3, #5
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	4413      	add	r3, r2
 800ff12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff16:	691b      	ldr	r3, [r3, #16]
 800ff18:	69ba      	ldr	r2, [r7, #24]
 800ff1a:	0151      	lsls	r1, r2, #5
 800ff1c:	69fa      	ldr	r2, [r7, #28]
 800ff1e:	440a      	add	r2, r1
 800ff20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff24:	0cdb      	lsrs	r3, r3, #19
 800ff26:	04db      	lsls	r3, r3, #19
 800ff28:	6113      	str	r3, [r2, #16]
 800ff2a:	e074      	b.n	8010016 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	015a      	lsls	r2, r3, #5
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	4413      	add	r3, r2
 800ff34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff38:	691b      	ldr	r3, [r3, #16]
 800ff3a:	69ba      	ldr	r2, [r7, #24]
 800ff3c:	0151      	lsls	r1, r2, #5
 800ff3e:	69fa      	ldr	r2, [r7, #28]
 800ff40:	440a      	add	r2, r1
 800ff42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff46:	0cdb      	lsrs	r3, r3, #19
 800ff48:	04db      	lsls	r3, r3, #19
 800ff4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff4c:	69bb      	ldr	r3, [r7, #24]
 800ff4e:	015a      	lsls	r2, r3, #5
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	4413      	add	r3, r2
 800ff54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff58:	691b      	ldr	r3, [r3, #16]
 800ff5a:	69ba      	ldr	r2, [r7, #24]
 800ff5c:	0151      	lsls	r1, r2, #5
 800ff5e:	69fa      	ldr	r2, [r7, #28]
 800ff60:	440a      	add	r2, r1
 800ff62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ff6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ff6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ff70:	69bb      	ldr	r3, [r7, #24]
 800ff72:	015a      	lsls	r2, r3, #5
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	4413      	add	r3, r2
 800ff78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff7c:	691a      	ldr	r2, [r3, #16]
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	6959      	ldr	r1, [r3, #20]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	440b      	add	r3, r1
 800ff88:	1e59      	subs	r1, r3, #1
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ff92:	04d9      	lsls	r1, r3, #19
 800ff94:	4b9d      	ldr	r3, [pc, #628]	; (801020c <USB_EPStartXfer+0x370>)
 800ff96:	400b      	ands	r3, r1
 800ff98:	69b9      	ldr	r1, [r7, #24]
 800ff9a:	0148      	lsls	r0, r1, #5
 800ff9c:	69f9      	ldr	r1, [r7, #28]
 800ff9e:	4401      	add	r1, r0
 800ffa0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	015a      	lsls	r2, r3, #5
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	4413      	add	r3, r2
 800ffb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb4:	691a      	ldr	r2, [r3, #16]
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	695b      	ldr	r3, [r3, #20]
 800ffba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffbe:	69b9      	ldr	r1, [r7, #24]
 800ffc0:	0148      	lsls	r0, r1, #5
 800ffc2:	69f9      	ldr	r1, [r7, #28]
 800ffc4:	4401      	add	r1, r0
 800ffc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ffca:	4313      	orrs	r3, r2
 800ffcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	78db      	ldrb	r3, [r3, #3]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d11f      	bne.n	8010016 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	015a      	lsls	r2, r3, #5
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	4413      	add	r3, r2
 800ffde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	0151      	lsls	r1, r2, #5
 800ffe8:	69fa      	ldr	r2, [r7, #28]
 800ffea:	440a      	add	r2, r1
 800ffec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fff0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fff4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fff6:	69bb      	ldr	r3, [r7, #24]
 800fff8:	015a      	lsls	r2, r3, #5
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	4413      	add	r3, r2
 800fffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	69ba      	ldr	r2, [r7, #24]
 8010006:	0151      	lsls	r1, r2, #5
 8010008:	69fa      	ldr	r2, [r7, #28]
 801000a:	440a      	add	r2, r1
 801000c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010014:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d14b      	bne.n	80100b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	691b      	ldr	r3, [r3, #16]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d009      	beq.n	8010038 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	015a      	lsls	r2, r3, #5
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	4413      	add	r3, r2
 801002c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010030:	461a      	mov	r2, r3
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	691b      	ldr	r3, [r3, #16]
 8010036:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	78db      	ldrb	r3, [r3, #3]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d128      	bne.n	8010092 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801004c:	2b00      	cmp	r3, #0
 801004e:	d110      	bne.n	8010072 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	015a      	lsls	r2, r3, #5
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	4413      	add	r3, r2
 8010058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	69ba      	ldr	r2, [r7, #24]
 8010060:	0151      	lsls	r1, r2, #5
 8010062:	69fa      	ldr	r2, [r7, #28]
 8010064:	440a      	add	r2, r1
 8010066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801006a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801006e:	6013      	str	r3, [r2, #0]
 8010070:	e00f      	b.n	8010092 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010072:	69bb      	ldr	r3, [r7, #24]
 8010074:	015a      	lsls	r2, r3, #5
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	4413      	add	r3, r2
 801007a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	0151      	lsls	r1, r2, #5
 8010084:	69fa      	ldr	r2, [r7, #28]
 8010086:	440a      	add	r2, r1
 8010088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801008c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010090:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010092:	69bb      	ldr	r3, [r7, #24]
 8010094:	015a      	lsls	r2, r3, #5
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	4413      	add	r3, r2
 801009a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	69ba      	ldr	r2, [r7, #24]
 80100a2:	0151      	lsls	r1, r2, #5
 80100a4:	69fa      	ldr	r2, [r7, #28]
 80100a6:	440a      	add	r2, r1
 80100a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	e12f      	b.n	8010314 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	015a      	lsls	r2, r3, #5
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	4413      	add	r3, r2
 80100bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	69ba      	ldr	r2, [r7, #24]
 80100c4:	0151      	lsls	r1, r2, #5
 80100c6:	69fa      	ldr	r2, [r7, #28]
 80100c8:	440a      	add	r2, r1
 80100ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	78db      	ldrb	r3, [r3, #3]
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d015      	beq.n	8010108 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f000 8117 	beq.w	8010314 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f003 030f 	and.w	r3, r3, #15
 80100f6:	2101      	movs	r1, #1
 80100f8:	fa01 f303 	lsl.w	r3, r1, r3
 80100fc:	69f9      	ldr	r1, [r7, #28]
 80100fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010102:	4313      	orrs	r3, r2
 8010104:	634b      	str	r3, [r1, #52]	; 0x34
 8010106:	e105      	b.n	8010314 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010114:	2b00      	cmp	r3, #0
 8010116:	d110      	bne.n	801013a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	015a      	lsls	r2, r3, #5
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	4413      	add	r3, r2
 8010120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	69ba      	ldr	r2, [r7, #24]
 8010128:	0151      	lsls	r1, r2, #5
 801012a:	69fa      	ldr	r2, [r7, #28]
 801012c:	440a      	add	r2, r1
 801012e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	e00f      	b.n	801015a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	015a      	lsls	r2, r3, #5
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	4413      	add	r3, r2
 8010142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	69ba      	ldr	r2, [r7, #24]
 801014a:	0151      	lsls	r1, r2, #5
 801014c:	69fa      	ldr	r2, [r7, #28]
 801014e:	440a      	add	r2, r1
 8010150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010158:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	68d9      	ldr	r1, [r3, #12]
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	781a      	ldrb	r2, [r3, #0]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	b298      	uxth	r0, r3
 8010168:	79fb      	ldrb	r3, [r7, #7]
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	4603      	mov	r3, r0
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f000 fa2b 	bl	80105ca <USB_WritePacket>
 8010174:	e0ce      	b.n	8010314 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	015a      	lsls	r2, r3, #5
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	4413      	add	r3, r2
 801017e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010182:	691b      	ldr	r3, [r3, #16]
 8010184:	69ba      	ldr	r2, [r7, #24]
 8010186:	0151      	lsls	r1, r2, #5
 8010188:	69fa      	ldr	r2, [r7, #28]
 801018a:	440a      	add	r2, r1
 801018c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010190:	0cdb      	lsrs	r3, r3, #19
 8010192:	04db      	lsls	r3, r3, #19
 8010194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010196:	69bb      	ldr	r3, [r7, #24]
 8010198:	015a      	lsls	r2, r3, #5
 801019a:	69fb      	ldr	r3, [r7, #28]
 801019c:	4413      	add	r3, r2
 801019e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a2:	691b      	ldr	r3, [r3, #16]
 80101a4:	69ba      	ldr	r2, [r7, #24]
 80101a6:	0151      	lsls	r1, r2, #5
 80101a8:	69fa      	ldr	r2, [r7, #28]
 80101aa:	440a      	add	r2, r1
 80101ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80101b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80101b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	695b      	ldr	r3, [r3, #20]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d126      	bne.n	8010210 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	015a      	lsls	r2, r3, #5
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	4413      	add	r3, r2
 80101ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ce:	691a      	ldr	r2, [r3, #16]
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101d8:	69b9      	ldr	r1, [r7, #24]
 80101da:	0148      	lsls	r0, r1, #5
 80101dc:	69f9      	ldr	r1, [r7, #28]
 80101de:	4401      	add	r1, r0
 80101e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80101e4:	4313      	orrs	r3, r2
 80101e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	015a      	lsls	r2, r3, #5
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	4413      	add	r3, r2
 80101f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f4:	691b      	ldr	r3, [r3, #16]
 80101f6:	69ba      	ldr	r2, [r7, #24]
 80101f8:	0151      	lsls	r1, r2, #5
 80101fa:	69fa      	ldr	r2, [r7, #28]
 80101fc:	440a      	add	r2, r1
 80101fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010206:	6113      	str	r3, [r2, #16]
 8010208:	e036      	b.n	8010278 <USB_EPStartXfer+0x3dc>
 801020a:	bf00      	nop
 801020c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	695a      	ldr	r2, [r3, #20]
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	4413      	add	r3, r2
 801021a:	1e5a      	subs	r2, r3, #1
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	fbb2 f3f3 	udiv	r3, r2, r3
 8010224:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	015a      	lsls	r2, r3, #5
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	4413      	add	r3, r2
 801022e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010232:	691a      	ldr	r2, [r3, #16]
 8010234:	8afb      	ldrh	r3, [r7, #22]
 8010236:	04d9      	lsls	r1, r3, #19
 8010238:	4b39      	ldr	r3, [pc, #228]	; (8010320 <USB_EPStartXfer+0x484>)
 801023a:	400b      	ands	r3, r1
 801023c:	69b9      	ldr	r1, [r7, #24]
 801023e:	0148      	lsls	r0, r1, #5
 8010240:	69f9      	ldr	r1, [r7, #28]
 8010242:	4401      	add	r1, r0
 8010244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010248:	4313      	orrs	r3, r2
 801024a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801024c:	69bb      	ldr	r3, [r7, #24]
 801024e:	015a      	lsls	r2, r3, #5
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	4413      	add	r3, r2
 8010254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010258:	691a      	ldr	r2, [r3, #16]
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	8af9      	ldrh	r1, [r7, #22]
 8010260:	fb01 f303 	mul.w	r3, r1, r3
 8010264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010268:	69b9      	ldr	r1, [r7, #24]
 801026a:	0148      	lsls	r0, r1, #5
 801026c:	69f9      	ldr	r1, [r7, #28]
 801026e:	4401      	add	r1, r0
 8010270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010274:	4313      	orrs	r3, r2
 8010276:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d10d      	bne.n	801029a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	68d9      	ldr	r1, [r3, #12]
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	015a      	lsls	r2, r3, #5
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	4413      	add	r3, r2
 8010292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010296:	460a      	mov	r2, r1
 8010298:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	78db      	ldrb	r3, [r3, #3]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d128      	bne.n	80102f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d110      	bne.n	80102d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	015a      	lsls	r2, r3, #5
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	4413      	add	r3, r2
 80102ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	69ba      	ldr	r2, [r7, #24]
 80102c2:	0151      	lsls	r1, r2, #5
 80102c4:	69fa      	ldr	r2, [r7, #28]
 80102c6:	440a      	add	r2, r1
 80102c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102d0:	6013      	str	r3, [r2, #0]
 80102d2:	e00f      	b.n	80102f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	015a      	lsls	r2, r3, #5
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	4413      	add	r3, r2
 80102dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	69ba      	ldr	r2, [r7, #24]
 80102e4:	0151      	lsls	r1, r2, #5
 80102e6:	69fa      	ldr	r2, [r7, #28]
 80102e8:	440a      	add	r2, r1
 80102ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	69ba      	ldr	r2, [r7, #24]
 8010304:	0151      	lsls	r1, r2, #5
 8010306:	69fa      	ldr	r2, [r7, #28]
 8010308:	440a      	add	r2, r1
 801030a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801030e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010312:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010314:	2300      	movs	r3, #0
}
 8010316:	4618      	mov	r0, r3
 8010318:	3720      	adds	r7, #32
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	1ff80000 	.word	0x1ff80000

08010324 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010324:	b480      	push	{r7}
 8010326:	b087      	sub	sp, #28
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	4613      	mov	r3, r2
 8010330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	785b      	ldrb	r3, [r3, #1]
 8010340:	2b01      	cmp	r3, #1
 8010342:	f040 80cd 	bne.w	80104e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	695b      	ldr	r3, [r3, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d132      	bne.n	80103b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	015a      	lsls	r2, r3, #5
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	4413      	add	r3, r2
 8010356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801035a:	691b      	ldr	r3, [r3, #16]
 801035c:	693a      	ldr	r2, [r7, #16]
 801035e:	0151      	lsls	r1, r2, #5
 8010360:	697a      	ldr	r2, [r7, #20]
 8010362:	440a      	add	r2, r1
 8010364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801036c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	4413      	add	r3, r2
 801037a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	0151      	lsls	r1, r2, #5
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	440a      	add	r2, r1
 8010388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801038c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	015a      	lsls	r2, r3, #5
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	4413      	add	r3, r2
 801039a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801039e:	691b      	ldr	r3, [r3, #16]
 80103a0:	693a      	ldr	r2, [r7, #16]
 80103a2:	0151      	lsls	r1, r2, #5
 80103a4:	697a      	ldr	r2, [r7, #20]
 80103a6:	440a      	add	r2, r1
 80103a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ac:	0cdb      	lsrs	r3, r3, #19
 80103ae:	04db      	lsls	r3, r3, #19
 80103b0:	6113      	str	r3, [r2, #16]
 80103b2:	e04e      	b.n	8010452 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	015a      	lsls	r2, r3, #5
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	4413      	add	r3, r2
 80103bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	0151      	lsls	r1, r2, #5
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	440a      	add	r2, r1
 80103ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ce:	0cdb      	lsrs	r3, r3, #19
 80103d0:	04db      	lsls	r3, r3, #19
 80103d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	015a      	lsls	r2, r3, #5
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	4413      	add	r3, r2
 80103dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	0151      	lsls	r1, r2, #5
 80103e6:	697a      	ldr	r2, [r7, #20]
 80103e8:	440a      	add	r2, r1
 80103ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	695a      	ldr	r2, [r3, #20]
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	429a      	cmp	r2, r3
 8010402:	d903      	bls.n	801040c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	689a      	ldr	r2, [r3, #8]
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	015a      	lsls	r2, r3, #5
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	4413      	add	r3, r2
 8010414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	693a      	ldr	r2, [r7, #16]
 801041c:	0151      	lsls	r1, r2, #5
 801041e:	697a      	ldr	r2, [r7, #20]
 8010420:	440a      	add	r2, r1
 8010422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801042a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	015a      	lsls	r2, r3, #5
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	4413      	add	r3, r2
 8010434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010438:	691a      	ldr	r2, [r3, #16]
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010442:	6939      	ldr	r1, [r7, #16]
 8010444:	0148      	lsls	r0, r1, #5
 8010446:	6979      	ldr	r1, [r7, #20]
 8010448:	4401      	add	r1, r0
 801044a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801044e:	4313      	orrs	r3, r2
 8010450:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010452:	79fb      	ldrb	r3, [r7, #7]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d11e      	bne.n	8010496 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	691b      	ldr	r3, [r3, #16]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d009      	beq.n	8010474 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	015a      	lsls	r2, r3, #5
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	4413      	add	r3, r2
 8010468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801046c:	461a      	mov	r2, r3
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	015a      	lsls	r2, r3, #5
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	4413      	add	r3, r2
 801047c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	693a      	ldr	r2, [r7, #16]
 8010484:	0151      	lsls	r1, r2, #5
 8010486:	697a      	ldr	r2, [r7, #20]
 8010488:	440a      	add	r2, r1
 801048a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801048e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010492:	6013      	str	r3, [r2, #0]
 8010494:	e092      	b.n	80105bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	015a      	lsls	r2, r3, #5
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	4413      	add	r3, r2
 801049e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	693a      	ldr	r2, [r7, #16]
 80104a6:	0151      	lsls	r1, r2, #5
 80104a8:	697a      	ldr	r2, [r7, #20]
 80104aa:	440a      	add	r2, r1
 80104ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	695b      	ldr	r3, [r3, #20]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d07e      	beq.n	80105bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	f003 030f 	and.w	r3, r3, #15
 80104ce:	2101      	movs	r1, #1
 80104d0:	fa01 f303 	lsl.w	r3, r1, r3
 80104d4:	6979      	ldr	r1, [r7, #20]
 80104d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104da:	4313      	orrs	r3, r2
 80104dc:	634b      	str	r3, [r1, #52]	; 0x34
 80104de:	e06d      	b.n	80105bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	015a      	lsls	r2, r3, #5
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	4413      	add	r3, r2
 80104e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ec:	691b      	ldr	r3, [r3, #16]
 80104ee:	693a      	ldr	r2, [r7, #16]
 80104f0:	0151      	lsls	r1, r2, #5
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	440a      	add	r2, r1
 80104f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104fa:	0cdb      	lsrs	r3, r3, #19
 80104fc:	04db      	lsls	r3, r3, #19
 80104fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	015a      	lsls	r2, r3, #5
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	4413      	add	r3, r2
 8010508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801050c:	691b      	ldr	r3, [r3, #16]
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	0151      	lsls	r1, r2, #5
 8010512:	697a      	ldr	r2, [r7, #20]
 8010514:	440a      	add	r2, r1
 8010516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801051a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801051e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010522:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	695b      	ldr	r3, [r3, #20]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d003      	beq.n	8010534 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	689a      	ldr	r2, [r3, #8]
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	015a      	lsls	r2, r3, #5
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	4413      	add	r3, r2
 801053c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	0151      	lsls	r1, r2, #5
 8010546:	697a      	ldr	r2, [r7, #20]
 8010548:	440a      	add	r2, r1
 801054a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801054e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010552:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	015a      	lsls	r2, r3, #5
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	4413      	add	r3, r2
 801055c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010560:	691a      	ldr	r2, [r3, #16]
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	689b      	ldr	r3, [r3, #8]
 8010566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801056a:	6939      	ldr	r1, [r7, #16]
 801056c:	0148      	lsls	r0, r1, #5
 801056e:	6979      	ldr	r1, [r7, #20]
 8010570:	4401      	add	r1, r0
 8010572:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010576:	4313      	orrs	r3, r2
 8010578:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d10d      	bne.n	801059c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d009      	beq.n	801059c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	68d9      	ldr	r1, [r3, #12]
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	015a      	lsls	r2, r3, #5
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	4413      	add	r3, r2
 8010594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010598:	460a      	mov	r2, r1
 801059a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	015a      	lsls	r2, r3, #5
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	4413      	add	r3, r2
 80105a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	693a      	ldr	r2, [r7, #16]
 80105ac:	0151      	lsls	r1, r2, #5
 80105ae:	697a      	ldr	r2, [r7, #20]
 80105b0:	440a      	add	r2, r1
 80105b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	371c      	adds	r7, #28
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr

080105ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80105ca:	b480      	push	{r7}
 80105cc:	b089      	sub	sp, #36	; 0x24
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	60f8      	str	r0, [r7, #12]
 80105d2:	60b9      	str	r1, [r7, #8]
 80105d4:	4611      	mov	r1, r2
 80105d6:	461a      	mov	r2, r3
 80105d8:	460b      	mov	r3, r1
 80105da:	71fb      	strb	r3, [r7, #7]
 80105dc:	4613      	mov	r3, r2
 80105de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80105e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d11a      	bne.n	8010626 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80105f0:	88bb      	ldrh	r3, [r7, #4]
 80105f2:	3303      	adds	r3, #3
 80105f4:	089b      	lsrs	r3, r3, #2
 80105f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80105f8:	2300      	movs	r3, #0
 80105fa:	61bb      	str	r3, [r7, #24]
 80105fc:	e00f      	b.n	801061e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80105fe:	79fb      	ldrb	r3, [r7, #7]
 8010600:	031a      	lsls	r2, r3, #12
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	4413      	add	r3, r2
 8010606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801060a:	461a      	mov	r2, r3
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	3304      	adds	r3, #4
 8010616:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	3301      	adds	r3, #1
 801061c:	61bb      	str	r3, [r7, #24]
 801061e:	69ba      	ldr	r2, [r7, #24]
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	429a      	cmp	r2, r3
 8010624:	d3eb      	bcc.n	80105fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010626:	2300      	movs	r3, #0
}
 8010628:	4618      	mov	r0, r3
 801062a:	3724      	adds	r7, #36	; 0x24
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010634:	b480      	push	{r7}
 8010636:	b089      	sub	sp, #36	; 0x24
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	4613      	mov	r3, r2
 8010640:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801064a:	88fb      	ldrh	r3, [r7, #6]
 801064c:	3303      	adds	r3, #3
 801064e:	089b      	lsrs	r3, r3, #2
 8010650:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010652:	2300      	movs	r3, #0
 8010654:	61bb      	str	r3, [r7, #24]
 8010656:	e00b      	b.n	8010670 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	601a      	str	r2, [r3, #0]
    pDest++;
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	3304      	adds	r3, #4
 8010668:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	3301      	adds	r3, #1
 801066e:	61bb      	str	r3, [r7, #24]
 8010670:	69ba      	ldr	r2, [r7, #24]
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	429a      	cmp	r2, r3
 8010676:	d3ef      	bcc.n	8010658 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010678:	69fb      	ldr	r3, [r7, #28]
}
 801067a:	4618      	mov	r0, r3
 801067c:	3724      	adds	r7, #36	; 0x24
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010686:	b480      	push	{r7}
 8010688:	b085      	sub	sp, #20
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	785b      	ldrb	r3, [r3, #1]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d12c      	bne.n	80106fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	015a      	lsls	r2, r3, #5
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	4413      	add	r3, r2
 80106aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	db12      	blt.n	80106da <USB_EPSetStall+0x54>
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d00f      	beq.n	80106da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	015a      	lsls	r2, r3, #5
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	4413      	add	r3, r2
 80106c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	0151      	lsls	r1, r2, #5
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	440a      	add	r2, r1
 80106d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80106d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	015a      	lsls	r2, r3, #5
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	4413      	add	r3, r2
 80106e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	0151      	lsls	r1, r2, #5
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	440a      	add	r2, r1
 80106f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80106f8:	6013      	str	r3, [r2, #0]
 80106fa:	e02b      	b.n	8010754 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	015a      	lsls	r2, r3, #5
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	4413      	add	r3, r2
 8010704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	db12      	blt.n	8010734 <USB_EPSetStall+0xae>
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00f      	beq.n	8010734 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	015a      	lsls	r2, r3, #5
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	4413      	add	r3, r2
 801071c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	68ba      	ldr	r2, [r7, #8]
 8010724:	0151      	lsls	r1, r2, #5
 8010726:	68fa      	ldr	r2, [r7, #12]
 8010728:	440a      	add	r2, r1
 801072a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801072e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010732:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	015a      	lsls	r2, r3, #5
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	4413      	add	r3, r2
 801073c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	0151      	lsls	r1, r2, #5
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	440a      	add	r2, r1
 801074a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801074e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010762:	b480      	push	{r7}
 8010764:	b085      	sub	sp, #20
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	785b      	ldrb	r3, [r3, #1]
 801077a:	2b01      	cmp	r3, #1
 801077c:	d128      	bne.n	80107d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	015a      	lsls	r2, r3, #5
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	4413      	add	r3, r2
 8010786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	68ba      	ldr	r2, [r7, #8]
 801078e:	0151      	lsls	r1, r2, #5
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	440a      	add	r2, r1
 8010794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801079c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	78db      	ldrb	r3, [r3, #3]
 80107a2:	2b03      	cmp	r3, #3
 80107a4:	d003      	beq.n	80107ae <USB_EPClearStall+0x4c>
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	78db      	ldrb	r3, [r3, #3]
 80107aa:	2b02      	cmp	r3, #2
 80107ac:	d138      	bne.n	8010820 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	015a      	lsls	r2, r3, #5
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	4413      	add	r3, r2
 80107b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	0151      	lsls	r1, r2, #5
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	440a      	add	r2, r1
 80107c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107cc:	6013      	str	r3, [r2, #0]
 80107ce:	e027      	b.n	8010820 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	015a      	lsls	r2, r3, #5
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	4413      	add	r3, r2
 80107d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	68ba      	ldr	r2, [r7, #8]
 80107e0:	0151      	lsls	r1, r2, #5
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	440a      	add	r2, r1
 80107e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80107ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	78db      	ldrb	r3, [r3, #3]
 80107f4:	2b03      	cmp	r3, #3
 80107f6:	d003      	beq.n	8010800 <USB_EPClearStall+0x9e>
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	78db      	ldrb	r3, [r3, #3]
 80107fc:	2b02      	cmp	r3, #2
 80107fe:	d10f      	bne.n	8010820 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	4413      	add	r3, r2
 8010808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	0151      	lsls	r1, r2, #5
 8010812:	68fa      	ldr	r2, [r7, #12]
 8010814:	440a      	add	r2, r1
 8010816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801081e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3714      	adds	r7, #20
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr

0801082e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801082e:	b480      	push	{r7}
 8010830:	b085      	sub	sp, #20
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
 8010836:	460b      	mov	r3, r1
 8010838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801084c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010850:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	78fb      	ldrb	r3, [r7, #3]
 801085c:	011b      	lsls	r3, r3, #4
 801085e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010862:	68f9      	ldr	r1, [r7, #12]
 8010864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010868:	4313      	orrs	r3, r2
 801086a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801086c:	2300      	movs	r3, #0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3714      	adds	r7, #20
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr

0801087a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801087a:	b480      	push	{r7}
 801087c:	b085      	sub	sp, #20
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010894:	f023 0303 	bic.w	r3, r3, #3
 8010898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108a8:	f023 0302 	bic.w	r3, r3, #2
 80108ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3714      	adds	r7, #20
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80108d6:	f023 0303 	bic.w	r3, r3, #3
 80108da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108ea:	f043 0302 	orr.w	r3, r3, #2
 80108ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3714      	adds	r7, #20
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80108fe:	b480      	push	{r7}
 8010900:	b085      	sub	sp, #20
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	4013      	ands	r3, r2
 8010914:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010916:	68fb      	ldr	r3, [r7, #12]
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010924:	b480      	push	{r7}
 8010926:	b085      	sub	sp, #20
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010936:	699b      	ldr	r3, [r3, #24]
 8010938:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010940:	69db      	ldr	r3, [r3, #28]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	4013      	ands	r3, r2
 8010946:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	0c1b      	lsrs	r3, r3, #16
}
 801094c:	4618      	mov	r0, r3
 801094e:	3714      	adds	r7, #20
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr

08010958 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010958:	b480      	push	{r7}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010974:	69db      	ldr	r3, [r3, #28]
 8010976:	68ba      	ldr	r2, [r7, #8]
 8010978:	4013      	ands	r3, r2
 801097a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	b29b      	uxth	r3, r3
}
 8010980:	4618      	mov	r0, r3
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	460b      	mov	r3, r1
 8010996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801099c:	78fb      	ldrb	r3, [r7, #3]
 801099e:	015a      	lsls	r2, r3, #5
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	4413      	add	r3, r2
 80109a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109a8:	689b      	ldr	r3, [r3, #8]
 80109aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109b2:	695b      	ldr	r3, [r3, #20]
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	4013      	ands	r3, r2
 80109b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80109ba:	68bb      	ldr	r3, [r7, #8]
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3714      	adds	r7, #20
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b087      	sub	sp, #28
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	460b      	mov	r3, r1
 80109d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109de:	691b      	ldr	r3, [r3, #16]
 80109e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80109ec:	78fb      	ldrb	r3, [r7, #3]
 80109ee:	f003 030f 	and.w	r3, r3, #15
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	fa22 f303 	lsr.w	r3, r2, r3
 80109f8:	01db      	lsls	r3, r3, #7
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	693a      	ldr	r2, [r7, #16]
 80109fe:	4313      	orrs	r3, r2
 8010a00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010a02:	78fb      	ldrb	r3, [r7, #3]
 8010a04:	015a      	lsls	r2, r3, #5
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	4413      	add	r3, r2
 8010a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	693a      	ldr	r2, [r7, #16]
 8010a12:	4013      	ands	r3, r2
 8010a14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a16:	68bb      	ldr	r3, [r7, #8]
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	371c      	adds	r7, #28
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	695b      	ldr	r3, [r3, #20]
 8010a30:	f003 0301 	and.w	r3, r3, #1
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010a5e:	f023 0307 	bic.w	r3, r3, #7
 8010a62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr
	...

08010a88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	460b      	mov	r3, r1
 8010a92:	607a      	str	r2, [r7, #4]
 8010a94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	333c      	adds	r3, #60	; 0x3c
 8010a9e:	3304      	adds	r3, #4
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	4a26      	ldr	r2, [pc, #152]	; (8010b40 <USB_EP0_OutStart+0xb8>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d90a      	bls.n	8010ac2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010abc:	d101      	bne.n	8010ac2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	e037      	b.n	8010b32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ac8:	461a      	mov	r2, r3
 8010aca:	2300      	movs	r3, #0
 8010acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad4:	691b      	ldr	r3, [r3, #16]
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae8:	691b      	ldr	r3, [r3, #16]
 8010aea:	697a      	ldr	r2, [r7, #20]
 8010aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010af0:	f043 0318 	orr.w	r3, r3, #24
 8010af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010afc:	691b      	ldr	r3, [r3, #16]
 8010afe:	697a      	ldr	r2, [r7, #20]
 8010b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010b08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010b0a:	7afb      	ldrb	r3, [r7, #11]
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d10f      	bne.n	8010b30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b16:	461a      	mov	r2, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	697a      	ldr	r2, [r7, #20]
 8010b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	371c      	adds	r7, #28
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr
 8010b3e:	bf00      	nop
 8010b40:	4f54300a 	.word	0x4f54300a

08010b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b085      	sub	sp, #20
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	3301      	adds	r3, #1
 8010b54:	60fb      	str	r3, [r7, #12]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	4a13      	ldr	r2, [pc, #76]	; (8010ba8 <USB_CoreReset+0x64>)
 8010b5a:	4293      	cmp	r3, r2
 8010b5c:	d901      	bls.n	8010b62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	e01b      	b.n	8010b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	691b      	ldr	r3, [r3, #16]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	daf2      	bge.n	8010b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	f043 0201 	orr.w	r2, r3, #1
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	4a09      	ldr	r2, [pc, #36]	; (8010ba8 <USB_CoreReset+0x64>)
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d901      	bls.n	8010b8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010b88:	2303      	movs	r3, #3
 8010b8a:	e006      	b.n	8010b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	691b      	ldr	r3, [r3, #16]
 8010b90:	f003 0301 	and.w	r3, r3, #1
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	d0f0      	beq.n	8010b7a <USB_CoreReset+0x36>

  return HAL_OK;
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3714      	adds	r7, #20
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	00030d40 	.word	0x00030d40

08010bac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010bb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010bbc:	f005 f820 	bl	8015c00 <malloc>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d105      	bne.n	8010bd6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010bd2:	2302      	movs	r3, #2
 8010bd4:	e066      	b.n	8010ca4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	68fa      	ldr	r2, [r7, #12]
 8010bda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	7c1b      	ldrb	r3, [r3, #16]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d119      	bne.n	8010c1a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bea:	2202      	movs	r2, #2
 8010bec:	2181      	movs	r1, #129	; 0x81
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f004 fe8d 	bl	801590e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bfe:	2202      	movs	r2, #2
 8010c00:	2101      	movs	r1, #1
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f004 fe83 	bl	801590e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2210      	movs	r2, #16
 8010c14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010c18:	e016      	b.n	8010c48 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010c1a:	2340      	movs	r3, #64	; 0x40
 8010c1c:	2202      	movs	r2, #2
 8010c1e:	2181      	movs	r1, #129	; 0x81
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f004 fe74 	bl	801590e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2201      	movs	r2, #1
 8010c2a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010c2c:	2340      	movs	r3, #64	; 0x40
 8010c2e:	2202      	movs	r2, #2
 8010c30:	2101      	movs	r1, #1
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f004 fe6b 	bl	801590e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2210      	movs	r2, #16
 8010c44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010c48:	2308      	movs	r3, #8
 8010c4a:	2203      	movs	r2, #3
 8010c4c:	2182      	movs	r1, #130	; 0x82
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f004 fe5d 	bl	801590e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2201      	movs	r2, #1
 8010c58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	7c1b      	ldrb	r3, [r3, #16]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d109      	bne.n	8010c92 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c88:	2101      	movs	r1, #1
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f004 ff2e 	bl	8015aec <USBD_LL_PrepareReceive>
 8010c90:	e007      	b.n	8010ca2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c98:	2340      	movs	r3, #64	; 0x40
 8010c9a:	2101      	movs	r1, #1
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f004 ff25 	bl	8015aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010ca2:	2300      	movs	r3, #0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010cbc:	2181      	movs	r1, #129	; 0x81
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f004 fe4b 	bl	801595a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010cca:	2101      	movs	r1, #1
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f004 fe44 	bl	801595a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010cda:	2182      	movs	r1, #130	; 0x82
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f004 fe3c 	bl	801595a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00e      	beq.n	8010d1a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f004 ff7f 	bl	8015c10 <free>
    pdev->pClassData = NULL;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b086      	sub	sp, #24
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010d36:	2300      	movs	r3, #0
 8010d38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d03a      	beq.n	8010dc4 <USBD_CDC_Setup+0xa0>
 8010d4e:	2b20      	cmp	r3, #32
 8010d50:	f040 8097 	bne.w	8010e82 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	88db      	ldrh	r3, [r3, #6]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d029      	beq.n	8010db0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	b25b      	sxtb	r3, r3
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	da11      	bge.n	8010d8a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	683a      	ldr	r2, [r7, #0]
 8010d70:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010d72:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	88d2      	ldrh	r2, [r2, #6]
 8010d78:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010d7a:	6939      	ldr	r1, [r7, #16]
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	88db      	ldrh	r3, [r3, #6]
 8010d80:	461a      	mov	r2, r3
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f001 faac 	bl	80122e0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010d88:	e082      	b.n	8010e90 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	785a      	ldrb	r2, [r3, #1]
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	88db      	ldrh	r3, [r3, #6]
 8010d98:	b2da      	uxtb	r2, r3
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010da0:	6939      	ldr	r1, [r7, #16]
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	88db      	ldrh	r3, [r3, #6]
 8010da6:	461a      	mov	r2, r3
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f001 fac5 	bl	8012338 <USBD_CtlPrepareRx>
    break;
 8010dae:	e06f      	b.n	8010e90 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010db6:	689b      	ldr	r3, [r3, #8]
 8010db8:	683a      	ldr	r2, [r7, #0]
 8010dba:	7850      	ldrb	r0, [r2, #1]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	6839      	ldr	r1, [r7, #0]
 8010dc0:	4798      	blx	r3
    break;
 8010dc2:	e065      	b.n	8010e90 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	785b      	ldrb	r3, [r3, #1]
 8010dc8:	2b0b      	cmp	r3, #11
 8010dca:	d84f      	bhi.n	8010e6c <USBD_CDC_Setup+0x148>
 8010dcc:	a201      	add	r2, pc, #4	; (adr r2, 8010dd4 <USBD_CDC_Setup+0xb0>)
 8010dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd2:	bf00      	nop
 8010dd4:	08010e05 	.word	0x08010e05
 8010dd8:	08010e7b 	.word	0x08010e7b
 8010ddc:	08010e6d 	.word	0x08010e6d
 8010de0:	08010e6d 	.word	0x08010e6d
 8010de4:	08010e6d 	.word	0x08010e6d
 8010de8:	08010e6d 	.word	0x08010e6d
 8010dec:	08010e6d 	.word	0x08010e6d
 8010df0:	08010e6d 	.word	0x08010e6d
 8010df4:	08010e6d 	.word	0x08010e6d
 8010df8:	08010e6d 	.word	0x08010e6d
 8010dfc:	08010e2d 	.word	0x08010e2d
 8010e00:	08010e55 	.word	0x08010e55
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d107      	bne.n	8010e1e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010e0e:	f107 030c 	add.w	r3, r7, #12
 8010e12:	2202      	movs	r2, #2
 8010e14:	4619      	mov	r1, r3
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 fa62 	bl	80122e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010e1c:	e030      	b.n	8010e80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010e1e:	6839      	ldr	r1, [r7, #0]
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f001 f9ec 	bl	80121fe <USBD_CtlError>
        ret = USBD_FAIL;
 8010e26:	2303      	movs	r3, #3
 8010e28:	75fb      	strb	r3, [r7, #23]
      break;
 8010e2a:	e029      	b.n	8010e80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e32:	2b03      	cmp	r3, #3
 8010e34:	d107      	bne.n	8010e46 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010e36:	f107 030f 	add.w	r3, r7, #15
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f001 fa4e 	bl	80122e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010e44:	e01c      	b.n	8010e80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f001 f9d8 	bl	80121fe <USBD_CtlError>
        ret = USBD_FAIL;
 8010e4e:	2303      	movs	r3, #3
 8010e50:	75fb      	strb	r3, [r7, #23]
      break;
 8010e52:	e015      	b.n	8010e80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e5a:	2b03      	cmp	r3, #3
 8010e5c:	d00f      	beq.n	8010e7e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010e5e:	6839      	ldr	r1, [r7, #0]
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f001 f9cc 	bl	80121fe <USBD_CtlError>
        ret = USBD_FAIL;
 8010e66:	2303      	movs	r3, #3
 8010e68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010e6a:	e008      	b.n	8010e7e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010e6c:	6839      	ldr	r1, [r7, #0]
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f001 f9c5 	bl	80121fe <USBD_CtlError>
      ret = USBD_FAIL;
 8010e74:	2303      	movs	r3, #3
 8010e76:	75fb      	strb	r3, [r7, #23]
      break;
 8010e78:	e002      	b.n	8010e80 <USBD_CDC_Setup+0x15c>
      break;
 8010e7a:	bf00      	nop
 8010e7c:	e008      	b.n	8010e90 <USBD_CDC_Setup+0x16c>
      break;
 8010e7e:	bf00      	nop
    }
    break;
 8010e80:	e006      	b.n	8010e90 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010e82:	6839      	ldr	r1, [r7, #0]
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f001 f9ba 	bl	80121fe <USBD_CtlError>
    ret = USBD_FAIL;
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	75fb      	strb	r3, [r7, #23]
    break;
 8010e8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8010e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3718      	adds	r7, #24
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop

08010e9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010eae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d101      	bne.n	8010ebe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010eba:	2303      	movs	r3, #3
 8010ebc:	e049      	b.n	8010f52 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ec4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010ec6:	78fa      	ldrb	r2, [r7, #3]
 8010ec8:	6879      	ldr	r1, [r7, #4]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	4413      	add	r3, r2
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	440b      	add	r3, r1
 8010ed4:	3318      	adds	r3, #24
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d029      	beq.n	8010f30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010edc:	78fa      	ldrb	r2, [r7, #3]
 8010ede:	6879      	ldr	r1, [r7, #4]
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	4413      	add	r3, r2
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	440b      	add	r3, r1
 8010eea:	3318      	adds	r3, #24
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	78f9      	ldrb	r1, [r7, #3]
 8010ef0:	68f8      	ldr	r0, [r7, #12]
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	00db      	lsls	r3, r3, #3
 8010ef6:	1a5b      	subs	r3, r3, r1
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	4403      	add	r3, r0
 8010efc:	3344      	adds	r3, #68	; 0x44
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	fbb2 f1f3 	udiv	r1, r2, r3
 8010f04:	fb03 f301 	mul.w	r3, r3, r1
 8010f08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d110      	bne.n	8010f30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010f0e:	78fa      	ldrb	r2, [r7, #3]
 8010f10:	6879      	ldr	r1, [r7, #4]
 8010f12:	4613      	mov	r3, r2
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	4413      	add	r3, r2
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	440b      	add	r3, r1
 8010f1c:	3318      	adds	r3, #24
 8010f1e:	2200      	movs	r2, #0
 8010f20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010f22:	78f9      	ldrb	r1, [r7, #3]
 8010f24:	2300      	movs	r3, #0
 8010f26:	2200      	movs	r2, #0
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f004 fdbe 	bl	8015aaa <USBD_LL_Transmit>
 8010f2e:	e00f      	b.n	8010f50 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f3e:	691b      	ldr	r3, [r3, #16]
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010f4c:	78fa      	ldrb	r2, [r7, #3]
 8010f4e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}

08010f5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b084      	sub	sp, #16
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
 8010f62:	460b      	mov	r3, r1
 8010f64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010f78:	2303      	movs	r3, #3
 8010f7a:	e015      	b.n	8010fa8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010f7c:	78fb      	ldrb	r3, [r7, #3]
 8010f7e:	4619      	mov	r1, r3
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f004 fdd4 	bl	8015b2e <USBD_LL_GetRxDataSize>
 8010f86:	4602      	mov	r2, r0
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010fa2:	4611      	mov	r1, r2
 8010fa4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fbe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d015      	beq.n	8010ff6 <USBD_CDC_EP0_RxReady+0x46>
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010fd0:	2bff      	cmp	r3, #255	; 0xff
 8010fd2:	d010      	beq.n	8010ff6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fda:	689b      	ldr	r3, [r3, #8]
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010fe2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010fe4:	68fa      	ldr	r2, [r7, #12]
 8010fe6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010fea:	b292      	uxth	r2, r2
 8010fec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	22ff      	movs	r2, #255	; 0xff
 8010ff2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2243      	movs	r2, #67	; 0x43
 801100c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801100e:	4b03      	ldr	r3, [pc, #12]	; (801101c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011010:	4618      	mov	r0, r3
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	20002120 	.word	0x20002120

08011020 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2243      	movs	r2, #67	; 0x43
 801102c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801102e:	4b03      	ldr	r3, [pc, #12]	; (801103c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011030:	4618      	mov	r0, r3
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	200020dc 	.word	0x200020dc

08011040 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2243      	movs	r2, #67	; 0x43
 801104c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801104e:	4b03      	ldr	r3, [pc, #12]	; (801105c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011050:	4618      	mov	r0, r3
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	20002164 	.word	0x20002164

08011060 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	220a      	movs	r2, #10
 801106c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801106e:	4b03      	ldr	r3, [pc, #12]	; (801107c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011070:	4618      	mov	r0, r3
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr
 801107c:	20002098 	.word	0x20002098

08011080 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d101      	bne.n	8011094 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011090:	2303      	movs	r3, #3
 8011092:	e004      	b.n	801109e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	683a      	ldr	r2, [r7, #0]
 8011098:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801109c:	2300      	movs	r3, #0
}
 801109e:	4618      	mov	r0, r3
 80110a0:	370c      	adds	r7, #12
 80110a2:	46bd      	mov	sp, r7
 80110a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a8:	4770      	bx	lr

080110aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80110aa:	b480      	push	{r7}
 80110ac:	b087      	sub	sp, #28
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	60f8      	str	r0, [r7, #12]
 80110b2:	60b9      	str	r1, [r7, #8]
 80110b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	68ba      	ldr	r2, [r7, #8]
 80110c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	371c      	adds	r7, #28
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110ec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	683a      	ldr	r2, [r7, #0]
 80110f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80110f6:	2300      	movs	r3, #0
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr

08011104 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011112:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011114:	2301      	movs	r3, #1
 8011116:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011122:	2303      	movs	r3, #3
 8011124:	e01a      	b.n	801115c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801112c:	2b00      	cmp	r3, #0
 801112e:	d114      	bne.n	801115a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	2201      	movs	r2, #1
 8011134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801114e:	2181      	movs	r1, #129	; 0x81
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f004 fcaa 	bl	8015aaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8011156:	2300      	movs	r3, #0
 8011158:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801115a:	7bfb      	ldrb	r3, [r7, #15]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011172:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801117a:	2b00      	cmp	r3, #0
 801117c:	d101      	bne.n	8011182 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801117e:	2303      	movs	r3, #3
 8011180:	e016      	b.n	80111b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	7c1b      	ldrb	r3, [r3, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d109      	bne.n	801119e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011194:	2101      	movs	r1, #1
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f004 fca8 	bl	8015aec <USBD_LL_PrepareReceive>
 801119c:	e007      	b.n	80111ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80111a4:	2340      	movs	r3, #64	; 0x40
 80111a6:	2101      	movs	r1, #1
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f004 fc9f 	bl	8015aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3710      	adds	r7, #16
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	4613      	mov	r3, r2
 80111c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d101      	bne.n	80111d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80111cc:	2303      	movs	r3, #3
 80111ce:	e025      	b.n	801121c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d003      	beq.n	80111e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d003      	beq.n	80111f4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2200      	movs	r2, #0
 80111f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d003      	beq.n	8011202 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	68ba      	ldr	r2, [r7, #8]
 80111fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2201      	movs	r2, #1
 8011206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	79fa      	ldrb	r2, [r7, #7]
 801120e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f004 fb15 	bl	8015840 <USBD_LL_Init>
 8011216:	4603      	mov	r3, r0
 8011218:	75fb      	strb	r3, [r7, #23]

  return ret;
 801121a:	7dfb      	ldrb	r3, [r7, #23]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3718      	adds	r7, #24
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801122e:	2300      	movs	r3, #0
 8011230:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d101      	bne.n	801123c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011238:	2303      	movs	r3, #3
 801123a:	e010      	b.n	801125e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124c:	f107 020e 	add.w	r2, r7, #14
 8011250:	4610      	mov	r0, r2
 8011252:	4798      	blx	r3
 8011254:	4602      	mov	r2, r0
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 801125c:	2300      	movs	r3, #0
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b082      	sub	sp, #8
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f004 fb32 	bl	80158d8 <USBD_LL_Start>
 8011274:	4603      	mov	r3, r0
}
 8011276:	4618      	mov	r0, r3
 8011278:	3708      	adds	r7, #8
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801127e:	b480      	push	{r7}
 8011280:	b083      	sub	sp, #12
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011286:	2300      	movs	r3, #0
}
 8011288:	4618      	mov	r0, r3
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	460b      	mov	r3, r1
 801129e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80112a0:	2303      	movs	r3, #3
 80112a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d009      	beq.n	80112c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	78fa      	ldrb	r2, [r7, #3]
 80112b8:	4611      	mov	r1, r2
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	4798      	blx	r3
 80112be:	4603      	mov	r3, r0
 80112c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80112c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	460b      	mov	r3, r1
 80112d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d007      	beq.n	80112f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	78fa      	ldrb	r2, [r7, #3]
 80112ec:	4611      	mov	r1, r2
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	4798      	blx	r3
  }

  return USBD_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801130c:	6839      	ldr	r1, [r7, #0]
 801130e:	4618      	mov	r0, r3
 8011310:	f000 ff3b 	bl	801218a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2201      	movs	r2, #1
 8011318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011322:	461a      	mov	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011330:	f003 031f 	and.w	r3, r3, #31
 8011334:	2b02      	cmp	r3, #2
 8011336:	d01a      	beq.n	801136e <USBD_LL_SetupStage+0x72>
 8011338:	2b02      	cmp	r3, #2
 801133a:	d822      	bhi.n	8011382 <USBD_LL_SetupStage+0x86>
 801133c:	2b00      	cmp	r3, #0
 801133e:	d002      	beq.n	8011346 <USBD_LL_SetupStage+0x4a>
 8011340:	2b01      	cmp	r3, #1
 8011342:	d00a      	beq.n	801135a <USBD_LL_SetupStage+0x5e>
 8011344:	e01d      	b.n	8011382 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801134c:	4619      	mov	r1, r3
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fa18 	bl	8011784 <USBD_StdDevReq>
 8011354:	4603      	mov	r3, r0
 8011356:	73fb      	strb	r3, [r7, #15]
      break;
 8011358:	e020      	b.n	801139c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011360:	4619      	mov	r1, r3
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fa7c 	bl	8011860 <USBD_StdItfReq>
 8011368:	4603      	mov	r3, r0
 801136a:	73fb      	strb	r3, [r7, #15]
      break;
 801136c:	e016      	b.n	801139c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011374:	4619      	mov	r1, r3
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 faba 	bl	80118f0 <USBD_StdEPReq>
 801137c:	4603      	mov	r3, r0
 801137e:	73fb      	strb	r3, [r7, #15]
      break;
 8011380:	e00c      	b.n	801139c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801138c:	b2db      	uxtb	r3, r3
 801138e:	4619      	mov	r1, r3
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f004 fb01 	bl	8015998 <USBD_LL_StallEP>
 8011396:	4603      	mov	r3, r0
 8011398:	73fb      	strb	r3, [r7, #15]
      break;
 801139a:	bf00      	nop
  }

  return ret;
 801139c:	7bfb      	ldrb	r3, [r7, #15]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3710      	adds	r7, #16
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}

080113a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80113a6:	b580      	push	{r7, lr}
 80113a8:	b086      	sub	sp, #24
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	60f8      	str	r0, [r7, #12]
 80113ae:	460b      	mov	r3, r1
 80113b0:	607a      	str	r2, [r7, #4]
 80113b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80113b4:	7afb      	ldrb	r3, [r7, #11]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d137      	bne.n	801142a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80113c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80113c8:	2b03      	cmp	r3, #3
 80113ca:	d14a      	bne.n	8011462 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	689a      	ldr	r2, [r3, #8]
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d913      	bls.n	8011400 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	689a      	ldr	r2, [r3, #8]
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	1ad2      	subs	r2, r2, r3
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	68da      	ldr	r2, [r3, #12]
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	4293      	cmp	r3, r2
 80113f0:	bf28      	it	cs
 80113f2:	4613      	movcs	r3, r2
 80113f4:	461a      	mov	r2, r3
 80113f6:	6879      	ldr	r1, [r7, #4]
 80113f8:	68f8      	ldr	r0, [r7, #12]
 80113fa:	f000 ffba 	bl	8012372 <USBD_CtlContinueRx>
 80113fe:	e030      	b.n	8011462 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011406:	691b      	ldr	r3, [r3, #16]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00a      	beq.n	8011422 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011412:	2b03      	cmp	r3, #3
 8011414:	d105      	bne.n	8011422 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801141c:	691b      	ldr	r3, [r3, #16]
 801141e:	68f8      	ldr	r0, [r7, #12]
 8011420:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f000 ffb6 	bl	8012394 <USBD_CtlSendStatus>
 8011428:	e01b      	b.n	8011462 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011430:	699b      	ldr	r3, [r3, #24]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d013      	beq.n	801145e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801143c:	2b03      	cmp	r3, #3
 801143e:	d10e      	bne.n	801145e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011446:	699b      	ldr	r3, [r3, #24]
 8011448:	7afa      	ldrb	r2, [r7, #11]
 801144a:	4611      	mov	r1, r2
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	4798      	blx	r3
 8011450:	4603      	mov	r3, r0
 8011452:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011454:	7dfb      	ldrb	r3, [r7, #23]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d003      	beq.n	8011462 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	e002      	b.n	8011464 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801145e:	2303      	movs	r3, #3
 8011460:	e000      	b.n	8011464 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011462:	2300      	movs	r3, #0
}
 8011464:	4618      	mov	r0, r3
 8011466:	3718      	adds	r7, #24
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	460b      	mov	r3, r1
 8011476:	607a      	str	r2, [r7, #4]
 8011478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801147a:	7afb      	ldrb	r3, [r7, #11]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d16a      	bne.n	8011556 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	3314      	adds	r3, #20
 8011484:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801148c:	2b02      	cmp	r3, #2
 801148e:	d155      	bne.n	801153c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	689a      	ldr	r2, [r3, #8]
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	429a      	cmp	r2, r3
 801149a:	d914      	bls.n	80114c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	689a      	ldr	r2, [r3, #8]
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	1ad2      	subs	r2, r2, r3
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	689b      	ldr	r3, [r3, #8]
 80114ae:	461a      	mov	r2, r3
 80114b0:	6879      	ldr	r1, [r7, #4]
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f000 ff2f 	bl	8012316 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114b8:	2300      	movs	r3, #0
 80114ba:	2200      	movs	r2, #0
 80114bc:	2100      	movs	r1, #0
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	f004 fb14 	bl	8015aec <USBD_LL_PrepareReceive>
 80114c4:	e03a      	b.n	801153c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	68da      	ldr	r2, [r3, #12]
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	689b      	ldr	r3, [r3, #8]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d11c      	bne.n	801150c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	685a      	ldr	r2, [r3, #4]
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80114da:	429a      	cmp	r2, r3
 80114dc:	d316      	bcc.n	801150c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d20f      	bcs.n	801150c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80114ec:	2200      	movs	r2, #0
 80114ee:	2100      	movs	r1, #0
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f000 ff10 	bl	8012316 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2200      	movs	r2, #0
 80114fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114fe:	2300      	movs	r3, #0
 8011500:	2200      	movs	r2, #0
 8011502:	2100      	movs	r1, #0
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f004 faf1 	bl	8015aec <USBD_LL_PrepareReceive>
 801150a:	e017      	b.n	801153c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011512:	68db      	ldr	r3, [r3, #12]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00a      	beq.n	801152e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801151e:	2b03      	cmp	r3, #3
 8011520:	d105      	bne.n	801152e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801152e:	2180      	movs	r1, #128	; 0x80
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f004 fa31 	bl	8015998 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f000 ff3f 	bl	80123ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011542:	2b01      	cmp	r3, #1
 8011544:	d123      	bne.n	801158e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f7ff fe99 	bl	801127e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2200      	movs	r2, #0
 8011550:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011554:	e01b      	b.n	801158e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801155c:	695b      	ldr	r3, [r3, #20]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d013      	beq.n	801158a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011568:	2b03      	cmp	r3, #3
 801156a:	d10e      	bne.n	801158a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011572:	695b      	ldr	r3, [r3, #20]
 8011574:	7afa      	ldrb	r2, [r7, #11]
 8011576:	4611      	mov	r1, r2
 8011578:	68f8      	ldr	r0, [r7, #12]
 801157a:	4798      	blx	r3
 801157c:	4603      	mov	r3, r0
 801157e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011580:	7dfb      	ldrb	r3, [r7, #23]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d003      	beq.n	801158e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011586:	7dfb      	ldrb	r3, [r7, #23]
 8011588:	e002      	b.n	8011590 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801158a:	2303      	movs	r3, #3
 801158c:	e000      	b.n	8011590 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 801158e:	2300      	movs	r3, #0
}
 8011590:	4618      	mov	r0, r3
 8011592:	3718      	adds	r7, #24
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}

08011598 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2201      	movs	r2, #1
 80115a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2200      	movs	r2, #0
 80115ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2200      	movs	r2, #0
 80115b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2200      	movs	r2, #0
 80115ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d009      	beq.n	80115dc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	6852      	ldr	r2, [r2, #4]
 80115d4:	b2d2      	uxtb	r2, r2
 80115d6:	4611      	mov	r1, r2
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115dc:	2340      	movs	r3, #64	; 0x40
 80115de:	2200      	movs	r2, #0
 80115e0:	2100      	movs	r1, #0
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f004 f993 	bl	801590e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2240      	movs	r2, #64	; 0x40
 80115f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115f8:	2340      	movs	r3, #64	; 0x40
 80115fa:	2200      	movs	r2, #0
 80115fc:	2180      	movs	r1, #128	; 0x80
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f004 f985 	bl	801590e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2201      	movs	r2, #1
 8011608:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2240      	movs	r2, #64	; 0x40
 801160e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}

0801161a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801161a:	b480      	push	{r7}
 801161c:	b083      	sub	sp, #12
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
 8011622:	460b      	mov	r3, r1
 8011624:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	78fa      	ldrb	r2, [r7, #3]
 801162a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	370c      	adds	r7, #12
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr

0801163a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801163a:	b480      	push	{r7}
 801163c:	b083      	sub	sp, #12
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2204      	movs	r2, #4
 8011652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011672:	2b04      	cmp	r3, #4
 8011674:	d105      	bne.n	8011682 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011682:	2300      	movs	r3, #0
}
 8011684:	4618      	mov	r0, r3
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801169e:	2b03      	cmp	r3, #3
 80116a0:	d10b      	bne.n	80116ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a8:	69db      	ldr	r3, [r3, #28]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d005      	beq.n	80116ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116b4:	69db      	ldr	r3, [r3, #28]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3708      	adds	r7, #8
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b083      	sub	sp, #12
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	460b      	mov	r3, r1
 80116ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80116d0:	2300      	movs	r3, #0
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	370c      	adds	r7, #12
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr

080116de <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80116de:	b480      	push	{r7}
 80116e0:	b083      	sub	sp, #12
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
 80116e6:	460b      	mov	r3, r1
 80116e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80116ea:	2300      	movs	r3, #0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	370c      	adds	r7, #12
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	370c      	adds	r7, #12
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b082      	sub	sp, #8
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2201      	movs	r2, #1
 801171a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011724:	2b00      	cmp	r3, #0
 8011726:	d009      	beq.n	801173c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	6852      	ldr	r2, [r2, #4]
 8011734:	b2d2      	uxtb	r2, r2
 8011736:	4611      	mov	r1, r2
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	4798      	blx	r3
  }

  return USBD_OK;
 801173c:	2300      	movs	r3, #0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011746:	b480      	push	{r7}
 8011748:	b087      	sub	sp, #28
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	3301      	adds	r3, #1
 801175c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011764:	8a3b      	ldrh	r3, [r7, #16]
 8011766:	021b      	lsls	r3, r3, #8
 8011768:	b21a      	sxth	r2, r3
 801176a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801176e:	4313      	orrs	r3, r2
 8011770:	b21b      	sxth	r3, r3
 8011772:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011774:	89fb      	ldrh	r3, [r7, #14]
}
 8011776:	4618      	mov	r0, r3
 8011778:	371c      	adds	r7, #28
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr
	...

08011784 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801178e:	2300      	movs	r3, #0
 8011790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801179a:	2b40      	cmp	r3, #64	; 0x40
 801179c:	d005      	beq.n	80117aa <USBD_StdDevReq+0x26>
 801179e:	2b40      	cmp	r3, #64	; 0x40
 80117a0:	d853      	bhi.n	801184a <USBD_StdDevReq+0xc6>
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00b      	beq.n	80117be <USBD_StdDevReq+0x3a>
 80117a6:	2b20      	cmp	r3, #32
 80117a8:	d14f      	bne.n	801184a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	6839      	ldr	r1, [r7, #0]
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	4798      	blx	r3
 80117b8:	4603      	mov	r3, r0
 80117ba:	73fb      	strb	r3, [r7, #15]
    break;
 80117bc:	e04a      	b.n	8011854 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	785b      	ldrb	r3, [r3, #1]
 80117c2:	2b09      	cmp	r3, #9
 80117c4:	d83b      	bhi.n	801183e <USBD_StdDevReq+0xba>
 80117c6:	a201      	add	r2, pc, #4	; (adr r2, 80117cc <USBD_StdDevReq+0x48>)
 80117c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117cc:	08011821 	.word	0x08011821
 80117d0:	08011835 	.word	0x08011835
 80117d4:	0801183f 	.word	0x0801183f
 80117d8:	0801182b 	.word	0x0801182b
 80117dc:	0801183f 	.word	0x0801183f
 80117e0:	080117ff 	.word	0x080117ff
 80117e4:	080117f5 	.word	0x080117f5
 80117e8:	0801183f 	.word	0x0801183f
 80117ec:	08011817 	.word	0x08011817
 80117f0:	08011809 	.word	0x08011809
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 f9d8 	bl	8011bac <USBD_GetDescriptor>
      break;
 80117fc:	e024      	b.n	8011848 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80117fe:	6839      	ldr	r1, [r7, #0]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fb3d 	bl	8011e80 <USBD_SetAddress>
      break;
 8011806:	e01f      	b.n	8011848 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fb7c 	bl	8011f08 <USBD_SetConfig>
 8011810:	4603      	mov	r3, r0
 8011812:	73fb      	strb	r3, [r7, #15]
      break;
 8011814:	e018      	b.n	8011848 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011816:	6839      	ldr	r1, [r7, #0]
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f000 fc19 	bl	8012050 <USBD_GetConfig>
      break;
 801181e:	e013      	b.n	8011848 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011820:	6839      	ldr	r1, [r7, #0]
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f000 fc49 	bl	80120ba <USBD_GetStatus>
      break;
 8011828:	e00e      	b.n	8011848 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801182a:	6839      	ldr	r1, [r7, #0]
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 fc77 	bl	8012120 <USBD_SetFeature>
      break;
 8011832:	e009      	b.n	8011848 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011834:	6839      	ldr	r1, [r7, #0]
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 fc86 	bl	8012148 <USBD_ClrFeature>
      break;
 801183c:	e004      	b.n	8011848 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801183e:	6839      	ldr	r1, [r7, #0]
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 fcdc 	bl	80121fe <USBD_CtlError>
      break;
 8011846:	bf00      	nop
    }
    break;
 8011848:	e004      	b.n	8011854 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801184a:	6839      	ldr	r1, [r7, #0]
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f000 fcd6 	bl	80121fe <USBD_CtlError>
    break;
 8011852:	bf00      	nop
  }

  return ret;
 8011854:	7bfb      	ldrb	r3, [r7, #15]
}
 8011856:	4618      	mov	r0, r3
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop

08011860 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011876:	2b40      	cmp	r3, #64	; 0x40
 8011878:	d005      	beq.n	8011886 <USBD_StdItfReq+0x26>
 801187a:	2b40      	cmp	r3, #64	; 0x40
 801187c:	d82e      	bhi.n	80118dc <USBD_StdItfReq+0x7c>
 801187e:	2b00      	cmp	r3, #0
 8011880:	d001      	beq.n	8011886 <USBD_StdItfReq+0x26>
 8011882:	2b20      	cmp	r3, #32
 8011884:	d12a      	bne.n	80118dc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801188c:	3b01      	subs	r3, #1
 801188e:	2b02      	cmp	r3, #2
 8011890:	d81d      	bhi.n	80118ce <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	889b      	ldrh	r3, [r3, #4]
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b01      	cmp	r3, #1
 801189a:	d813      	bhi.n	80118c4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	6839      	ldr	r1, [r7, #0]
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	4798      	blx	r3
 80118aa:	4603      	mov	r3, r0
 80118ac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	88db      	ldrh	r3, [r3, #6]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d110      	bne.n	80118d8 <USBD_StdItfReq+0x78>
 80118b6:	7bfb      	ldrb	r3, [r7, #15]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d10d      	bne.n	80118d8 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 fd69 	bl	8012394 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80118c2:	e009      	b.n	80118d8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80118c4:	6839      	ldr	r1, [r7, #0]
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f000 fc99 	bl	80121fe <USBD_CtlError>
      break;
 80118cc:	e004      	b.n	80118d8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80118ce:	6839      	ldr	r1, [r7, #0]
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 fc94 	bl	80121fe <USBD_CtlError>
      break;
 80118d6:	e000      	b.n	80118da <USBD_StdItfReq+0x7a>
      break;
 80118d8:	bf00      	nop
    }
    break;
 80118da:	e004      	b.n	80118e6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 fc8d 	bl	80121fe <USBD_CtlError>
    break;
 80118e4:	bf00      	nop
  }

  return ret;
 80118e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3710      	adds	r7, #16
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	889b      	ldrh	r3, [r3, #4]
 8011902:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801190c:	2b40      	cmp	r3, #64	; 0x40
 801190e:	d007      	beq.n	8011920 <USBD_StdEPReq+0x30>
 8011910:	2b40      	cmp	r3, #64	; 0x40
 8011912:	f200 8140 	bhi.w	8011b96 <USBD_StdEPReq+0x2a6>
 8011916:	2b00      	cmp	r3, #0
 8011918:	d00c      	beq.n	8011934 <USBD_StdEPReq+0x44>
 801191a:	2b20      	cmp	r3, #32
 801191c:	f040 813b 	bne.w	8011b96 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	6839      	ldr	r1, [r7, #0]
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	4798      	blx	r3
 801192e:	4603      	mov	r3, r0
 8011930:	73fb      	strb	r3, [r7, #15]
    break;
 8011932:	e135      	b.n	8011ba0 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	785b      	ldrb	r3, [r3, #1]
 8011938:	2b03      	cmp	r3, #3
 801193a:	d007      	beq.n	801194c <USBD_StdEPReq+0x5c>
 801193c:	2b03      	cmp	r3, #3
 801193e:	f300 8124 	bgt.w	8011b8a <USBD_StdEPReq+0x29a>
 8011942:	2b00      	cmp	r3, #0
 8011944:	d07b      	beq.n	8011a3e <USBD_StdEPReq+0x14e>
 8011946:	2b01      	cmp	r3, #1
 8011948:	d03b      	beq.n	80119c2 <USBD_StdEPReq+0xd2>
 801194a:	e11e      	b.n	8011b8a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011952:	2b02      	cmp	r3, #2
 8011954:	d002      	beq.n	801195c <USBD_StdEPReq+0x6c>
 8011956:	2b03      	cmp	r3, #3
 8011958:	d016      	beq.n	8011988 <USBD_StdEPReq+0x98>
 801195a:	e02c      	b.n	80119b6 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801195c:	7bbb      	ldrb	r3, [r7, #14]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00d      	beq.n	801197e <USBD_StdEPReq+0x8e>
 8011962:	7bbb      	ldrb	r3, [r7, #14]
 8011964:	2b80      	cmp	r3, #128	; 0x80
 8011966:	d00a      	beq.n	801197e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011968:	7bbb      	ldrb	r3, [r7, #14]
 801196a:	4619      	mov	r1, r3
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f004 f813 	bl	8015998 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011972:	2180      	movs	r1, #128	; 0x80
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f004 f80f 	bl	8015998 <USBD_LL_StallEP>
 801197a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801197c:	e020      	b.n	80119c0 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f000 fc3c 	bl	80121fe <USBD_CtlError>
        break;
 8011986:	e01b      	b.n	80119c0 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	885b      	ldrh	r3, [r3, #2]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d10e      	bne.n	80119ae <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011990:	7bbb      	ldrb	r3, [r7, #14]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00b      	beq.n	80119ae <USBD_StdEPReq+0xbe>
 8011996:	7bbb      	ldrb	r3, [r7, #14]
 8011998:	2b80      	cmp	r3, #128	; 0x80
 801199a:	d008      	beq.n	80119ae <USBD_StdEPReq+0xbe>
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	88db      	ldrh	r3, [r3, #6]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d104      	bne.n	80119ae <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80119a4:	7bbb      	ldrb	r3, [r7, #14]
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f003 fff5 	bl	8015998 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 fcf0 	bl	8012394 <USBD_CtlSendStatus>

        break;
 80119b4:	e004      	b.n	80119c0 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80119b6:	6839      	ldr	r1, [r7, #0]
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f000 fc20 	bl	80121fe <USBD_CtlError>
        break;
 80119be:	bf00      	nop
      }
      break;
 80119c0:	e0e8      	b.n	8011b94 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d002      	beq.n	80119d2 <USBD_StdEPReq+0xe2>
 80119cc:	2b03      	cmp	r3, #3
 80119ce:	d016      	beq.n	80119fe <USBD_StdEPReq+0x10e>
 80119d0:	e02e      	b.n	8011a30 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80119d2:	7bbb      	ldrb	r3, [r7, #14]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d00d      	beq.n	80119f4 <USBD_StdEPReq+0x104>
 80119d8:	7bbb      	ldrb	r3, [r7, #14]
 80119da:	2b80      	cmp	r3, #128	; 0x80
 80119dc:	d00a      	beq.n	80119f4 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80119de:	7bbb      	ldrb	r3, [r7, #14]
 80119e0:	4619      	mov	r1, r3
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f003 ffd8 	bl	8015998 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119e8:	2180      	movs	r1, #128	; 0x80
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f003 ffd4 	bl	8015998 <USBD_LL_StallEP>
 80119f0:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80119f2:	e023      	b.n	8011a3c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80119f4:	6839      	ldr	r1, [r7, #0]
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 fc01 	bl	80121fe <USBD_CtlError>
        break;
 80119fc:	e01e      	b.n	8011a3c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	885b      	ldrh	r3, [r3, #2]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d119      	bne.n	8011a3a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011a06:	7bbb      	ldrb	r3, [r7, #14]
 8011a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d004      	beq.n	8011a1a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011a10:	7bbb      	ldrb	r3, [r7, #14]
 8011a12:	4619      	mov	r1, r3
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f003 ffde 	bl	80159d6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 fcba 	bl	8012394 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	4798      	blx	r3
        }
        break;
 8011a2e:	e004      	b.n	8011a3a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 fbe3 	bl	80121fe <USBD_CtlError>
        break;
 8011a38:	e000      	b.n	8011a3c <USBD_StdEPReq+0x14c>
        break;
 8011a3a:	bf00      	nop
      }
      break;
 8011a3c:	e0aa      	b.n	8011b94 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	d002      	beq.n	8011a4e <USBD_StdEPReq+0x15e>
 8011a48:	2b03      	cmp	r3, #3
 8011a4a:	d032      	beq.n	8011ab2 <USBD_StdEPReq+0x1c2>
 8011a4c:	e097      	b.n	8011b7e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a4e:	7bbb      	ldrb	r3, [r7, #14]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d007      	beq.n	8011a64 <USBD_StdEPReq+0x174>
 8011a54:	7bbb      	ldrb	r3, [r7, #14]
 8011a56:	2b80      	cmp	r3, #128	; 0x80
 8011a58:	d004      	beq.n	8011a64 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011a5a:	6839      	ldr	r1, [r7, #0]
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f000 fbce 	bl	80121fe <USBD_CtlError>
          break;
 8011a62:	e091      	b.n	8011b88 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	da0b      	bge.n	8011a84 <USBD_StdEPReq+0x194>
 8011a6c:	7bbb      	ldrb	r3, [r7, #14]
 8011a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a72:	4613      	mov	r3, r2
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	4413      	add	r3, r2
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	3310      	adds	r3, #16
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	4413      	add	r3, r2
 8011a80:	3304      	adds	r3, #4
 8011a82:	e00b      	b.n	8011a9c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011a84:	7bbb      	ldrb	r3, [r7, #14]
 8011a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	4413      	add	r3, r2
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	4413      	add	r3, r2
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	2202      	movs	r2, #2
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fc18 	bl	80122e0 <USBD_CtlSendData>
        break;
 8011ab0:	e06a      	b.n	8011b88 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	da11      	bge.n	8011ade <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011aba:	7bbb      	ldrb	r3, [r7, #14]
 8011abc:	f003 020f 	and.w	r2, r3, #15
 8011ac0:	6879      	ldr	r1, [r7, #4]
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	4413      	add	r3, r2
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	440b      	add	r3, r1
 8011acc:	3324      	adds	r3, #36	; 0x24
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d117      	bne.n	8011b04 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011ad4:	6839      	ldr	r1, [r7, #0]
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 fb91 	bl	80121fe <USBD_CtlError>
            break;
 8011adc:	e054      	b.n	8011b88 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011ade:	7bbb      	ldrb	r3, [r7, #14]
 8011ae0:	f003 020f 	and.w	r2, r3, #15
 8011ae4:	6879      	ldr	r1, [r7, #4]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	4413      	add	r3, r2
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	440b      	add	r3, r1
 8011af0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d104      	bne.n	8011b04 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011afa:	6839      	ldr	r1, [r7, #0]
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 fb7e 	bl	80121fe <USBD_CtlError>
            break;
 8011b02:	e041      	b.n	8011b88 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	da0b      	bge.n	8011b24 <USBD_StdEPReq+0x234>
 8011b0c:	7bbb      	ldrb	r3, [r7, #14]
 8011b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b12:	4613      	mov	r3, r2
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	4413      	add	r3, r2
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	3310      	adds	r3, #16
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	4413      	add	r3, r2
 8011b20:	3304      	adds	r3, #4
 8011b22:	e00b      	b.n	8011b3c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011b24:	7bbb      	ldrb	r3, [r7, #14]
 8011b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	4413      	add	r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	4413      	add	r3, r2
 8011b3a:	3304      	adds	r3, #4
 8011b3c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d002      	beq.n	8011b4a <USBD_StdEPReq+0x25a>
 8011b44:	7bbb      	ldrb	r3, [r7, #14]
 8011b46:	2b80      	cmp	r3, #128	; 0x80
 8011b48:	d103      	bne.n	8011b52 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	601a      	str	r2, [r3, #0]
 8011b50:	e00e      	b.n	8011b70 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011b52:	7bbb      	ldrb	r3, [r7, #14]
 8011b54:	4619      	mov	r1, r3
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f003 ff5c 	bl	8015a14 <USBD_LL_IsStallEP>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d003      	beq.n	8011b6a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	2201      	movs	r2, #1
 8011b66:	601a      	str	r2, [r3, #0]
 8011b68:	e002      	b.n	8011b70 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	2202      	movs	r2, #2
 8011b74:	4619      	mov	r1, r3
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 fbb2 	bl	80122e0 <USBD_CtlSendData>
          break;
 8011b7c:	e004      	b.n	8011b88 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8011b7e:	6839      	ldr	r1, [r7, #0]
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 fb3c 	bl	80121fe <USBD_CtlError>
        break;
 8011b86:	bf00      	nop
      }
      break;
 8011b88:	e004      	b.n	8011b94 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8011b8a:	6839      	ldr	r1, [r7, #0]
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f000 fb36 	bl	80121fe <USBD_CtlError>
      break;
 8011b92:	bf00      	nop
    }
    break;
 8011b94:	e004      	b.n	8011ba0 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f000 fb30 	bl	80121fe <USBD_CtlError>
    break;
 8011b9e:	bf00      	nop
  }

  return ret;
 8011ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
	...

08011bac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	885b      	ldrh	r3, [r3, #2]
 8011bc6:	0a1b      	lsrs	r3, r3, #8
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	3b01      	subs	r3, #1
 8011bcc:	2b06      	cmp	r3, #6
 8011bce:	f200 8128 	bhi.w	8011e22 <USBD_GetDescriptor+0x276>
 8011bd2:	a201      	add	r2, pc, #4	; (adr r2, 8011bd8 <USBD_GetDescriptor+0x2c>)
 8011bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd8:	08011bf5 	.word	0x08011bf5
 8011bdc:	08011c0d 	.word	0x08011c0d
 8011be0:	08011c4d 	.word	0x08011c4d
 8011be4:	08011e23 	.word	0x08011e23
 8011be8:	08011e23 	.word	0x08011e23
 8011bec:	08011dc3 	.word	0x08011dc3
 8011bf0:	08011def 	.word	0x08011def
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	7c12      	ldrb	r2, [r2, #16]
 8011c00:	f107 0108 	add.w	r1, r7, #8
 8011c04:	4610      	mov	r0, r2
 8011c06:	4798      	blx	r3
 8011c08:	60f8      	str	r0, [r7, #12]
    break;
 8011c0a:	e112      	b.n	8011e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	7c1b      	ldrb	r3, [r3, #16]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10d      	bne.n	8011c30 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c1c:	f107 0208 	add.w	r2, r7, #8
 8011c20:	4610      	mov	r0, r2
 8011c22:	4798      	blx	r3
 8011c24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	3301      	adds	r3, #1
 8011c2a:	2202      	movs	r2, #2
 8011c2c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011c2e:	e100      	b.n	8011e32 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c38:	f107 0208 	add.w	r2, r7, #8
 8011c3c:	4610      	mov	r0, r2
 8011c3e:	4798      	blx	r3
 8011c40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	3301      	adds	r3, #1
 8011c46:	2202      	movs	r2, #2
 8011c48:	701a      	strb	r2, [r3, #0]
    break;
 8011c4a:	e0f2      	b.n	8011e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	885b      	ldrh	r3, [r3, #2]
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	2b05      	cmp	r3, #5
 8011c54:	f200 80ac 	bhi.w	8011db0 <USBD_GetDescriptor+0x204>
 8011c58:	a201      	add	r2, pc, #4	; (adr r2, 8011c60 <USBD_GetDescriptor+0xb4>)
 8011c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c5e:	bf00      	nop
 8011c60:	08011c79 	.word	0x08011c79
 8011c64:	08011cad 	.word	0x08011cad
 8011c68:	08011ce1 	.word	0x08011ce1
 8011c6c:	08011d15 	.word	0x08011d15
 8011c70:	08011d49 	.word	0x08011d49
 8011c74:	08011d7d 	.word	0x08011d7d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00b      	beq.n	8011c9c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	7c12      	ldrb	r2, [r2, #16]
 8011c90:	f107 0108 	add.w	r1, r7, #8
 8011c94:	4610      	mov	r0, r2
 8011c96:	4798      	blx	r3
 8011c98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c9a:	e091      	b.n	8011dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c9c:	6839      	ldr	r1, [r7, #0]
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 faad 	bl	80121fe <USBD_CtlError>
        err++;
 8011ca4:	7afb      	ldrb	r3, [r7, #11]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	72fb      	strb	r3, [r7, #11]
      break;
 8011caa:	e089      	b.n	8011dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d00b      	beq.n	8011cd0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	7c12      	ldrb	r2, [r2, #16]
 8011cc4:	f107 0108 	add.w	r1, r7, #8
 8011cc8:	4610      	mov	r0, r2
 8011cca:	4798      	blx	r3
 8011ccc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011cce:	e077      	b.n	8011dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011cd0:	6839      	ldr	r1, [r7, #0]
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 fa93 	bl	80121fe <USBD_CtlError>
        err++;
 8011cd8:	7afb      	ldrb	r3, [r7, #11]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	72fb      	strb	r3, [r7, #11]
      break;
 8011cde:	e06f      	b.n	8011dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00b      	beq.n	8011d04 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	7c12      	ldrb	r2, [r2, #16]
 8011cf8:	f107 0108 	add.w	r1, r7, #8
 8011cfc:	4610      	mov	r0, r2
 8011cfe:	4798      	blx	r3
 8011d00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d02:	e05d      	b.n	8011dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d04:	6839      	ldr	r1, [r7, #0]
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 fa79 	bl	80121fe <USBD_CtlError>
        err++;
 8011d0c:	7afb      	ldrb	r3, [r7, #11]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	72fb      	strb	r3, [r7, #11]
      break;
 8011d12:	e055      	b.n	8011dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d1a:	691b      	ldr	r3, [r3, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00b      	beq.n	8011d38 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d26:	691b      	ldr	r3, [r3, #16]
 8011d28:	687a      	ldr	r2, [r7, #4]
 8011d2a:	7c12      	ldrb	r2, [r2, #16]
 8011d2c:	f107 0108 	add.w	r1, r7, #8
 8011d30:	4610      	mov	r0, r2
 8011d32:	4798      	blx	r3
 8011d34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d36:	e043      	b.n	8011dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d38:	6839      	ldr	r1, [r7, #0]
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f000 fa5f 	bl	80121fe <USBD_CtlError>
        err++;
 8011d40:	7afb      	ldrb	r3, [r7, #11]
 8011d42:	3301      	adds	r3, #1
 8011d44:	72fb      	strb	r3, [r7, #11]
      break;
 8011d46:	e03b      	b.n	8011dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d4e:	695b      	ldr	r3, [r3, #20]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d00b      	beq.n	8011d6c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d5a:	695b      	ldr	r3, [r3, #20]
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	7c12      	ldrb	r2, [r2, #16]
 8011d60:	f107 0108 	add.w	r1, r7, #8
 8011d64:	4610      	mov	r0, r2
 8011d66:	4798      	blx	r3
 8011d68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d6a:	e029      	b.n	8011dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d6c:	6839      	ldr	r1, [r7, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 fa45 	bl	80121fe <USBD_CtlError>
        err++;
 8011d74:	7afb      	ldrb	r3, [r7, #11]
 8011d76:	3301      	adds	r3, #1
 8011d78:	72fb      	strb	r3, [r7, #11]
      break;
 8011d7a:	e021      	b.n	8011dc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00b      	beq.n	8011da0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d8e:	699b      	ldr	r3, [r3, #24]
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	7c12      	ldrb	r2, [r2, #16]
 8011d94:	f107 0108 	add.w	r1, r7, #8
 8011d98:	4610      	mov	r0, r2
 8011d9a:	4798      	blx	r3
 8011d9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d9e:	e00f      	b.n	8011dc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011da0:	6839      	ldr	r1, [r7, #0]
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 fa2b 	bl	80121fe <USBD_CtlError>
        err++;
 8011da8:	7afb      	ldrb	r3, [r7, #11]
 8011daa:	3301      	adds	r3, #1
 8011dac:	72fb      	strb	r3, [r7, #11]
      break;
 8011dae:	e007      	b.n	8011dc0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011db0:	6839      	ldr	r1, [r7, #0]
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fa23 	bl	80121fe <USBD_CtlError>
      err++;
 8011db8:	7afb      	ldrb	r3, [r7, #11]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011dbe:	bf00      	nop
    }
    break;
 8011dc0:	e037      	b.n	8011e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	7c1b      	ldrb	r3, [r3, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d109      	bne.n	8011dde <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dd2:	f107 0208 	add.w	r2, r7, #8
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	4798      	blx	r3
 8011dda:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011ddc:	e029      	b.n	8011e32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011dde:	6839      	ldr	r1, [r7, #0]
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fa0c 	bl	80121fe <USBD_CtlError>
      err++;
 8011de6:	7afb      	ldrb	r3, [r7, #11]
 8011de8:	3301      	adds	r3, #1
 8011dea:	72fb      	strb	r3, [r7, #11]
    break;
 8011dec:	e021      	b.n	8011e32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	7c1b      	ldrb	r3, [r3, #16]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d10d      	bne.n	8011e12 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dfe:	f107 0208 	add.w	r2, r7, #8
 8011e02:	4610      	mov	r0, r2
 8011e04:	4798      	blx	r3
 8011e06:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	2207      	movs	r2, #7
 8011e0e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011e10:	e00f      	b.n	8011e32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f000 f9f2 	bl	80121fe <USBD_CtlError>
      err++;
 8011e1a:	7afb      	ldrb	r3, [r7, #11]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	72fb      	strb	r3, [r7, #11]
    break;
 8011e20:	e007      	b.n	8011e32 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011e22:	6839      	ldr	r1, [r7, #0]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 f9ea 	bl	80121fe <USBD_CtlError>
    err++;
 8011e2a:	7afb      	ldrb	r3, [r7, #11]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	72fb      	strb	r3, [r7, #11]
    break;
 8011e30:	bf00      	nop
  }

  if (err != 0U)
 8011e32:	7afb      	ldrb	r3, [r7, #11]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d11e      	bne.n	8011e76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	88db      	ldrh	r3, [r3, #6]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d016      	beq.n	8011e6e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011e40:	893b      	ldrh	r3, [r7, #8]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00e      	beq.n	8011e64 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	88da      	ldrh	r2, [r3, #6]
 8011e4a:	893b      	ldrh	r3, [r7, #8]
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	bf28      	it	cs
 8011e50:	4613      	movcs	r3, r2
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011e56:	893b      	ldrh	r3, [r7, #8]
 8011e58:	461a      	mov	r2, r3
 8011e5a:	68f9      	ldr	r1, [r7, #12]
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f000 fa3f 	bl	80122e0 <USBD_CtlSendData>
 8011e62:	e009      	b.n	8011e78 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011e64:	6839      	ldr	r1, [r7, #0]
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 f9c9 	bl	80121fe <USBD_CtlError>
 8011e6c:	e004      	b.n	8011e78 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f000 fa90 	bl	8012394 <USBD_CtlSendStatus>
 8011e74:	e000      	b.n	8011e78 <USBD_GetDescriptor+0x2cc>
    return;
 8011e76:	bf00      	nop
    }
  }
}
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop

08011e80 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	889b      	ldrh	r3, [r3, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d130      	bne.n	8011ef4 <USBD_SetAddress+0x74>
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	88db      	ldrh	r3, [r3, #6]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d12c      	bne.n	8011ef4 <USBD_SetAddress+0x74>
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	885b      	ldrh	r3, [r3, #2]
 8011e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8011ea0:	d828      	bhi.n	8011ef4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	885b      	ldrh	r3, [r3, #2]
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011eac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eb4:	2b03      	cmp	r3, #3
 8011eb6:	d104      	bne.n	8011ec2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 f99f 	bl	80121fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ec0:	e01d      	b.n	8011efe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	7bfa      	ldrb	r2, [r7, #15]
 8011ec6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	4619      	mov	r1, r3
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f003 fdcc 	bl	8015a6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 fa5d 	bl	8012394 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011eda:	7bfb      	ldrb	r3, [r7, #15]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d004      	beq.n	8011eea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2202      	movs	r2, #2
 8011ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ee8:	e009      	b.n	8011efe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2201      	movs	r2, #1
 8011eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ef2:	e004      	b.n	8011efe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011ef4:	6839      	ldr	r1, [r7, #0]
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 f981 	bl	80121fe <USBD_CtlError>
  }
}
 8011efc:	bf00      	nop
 8011efe:	bf00      	nop
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
	...

08011f08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f12:	2300      	movs	r3, #0
 8011f14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	885b      	ldrh	r3, [r3, #2]
 8011f1a:	b2da      	uxtb	r2, r3
 8011f1c:	4b4b      	ldr	r3, [pc, #300]	; (801204c <USBD_SetConfig+0x144>)
 8011f1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011f20:	4b4a      	ldr	r3, [pc, #296]	; (801204c <USBD_SetConfig+0x144>)
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d905      	bls.n	8011f34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011f28:	6839      	ldr	r1, [r7, #0]
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 f967 	bl	80121fe <USBD_CtlError>
    return USBD_FAIL;
 8011f30:	2303      	movs	r3, #3
 8011f32:	e087      	b.n	8012044 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d002      	beq.n	8011f44 <USBD_SetConfig+0x3c>
 8011f3e:	2b03      	cmp	r3, #3
 8011f40:	d025      	beq.n	8011f8e <USBD_SetConfig+0x86>
 8011f42:	e071      	b.n	8012028 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011f44:	4b41      	ldr	r3, [pc, #260]	; (801204c <USBD_SetConfig+0x144>)
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d01c      	beq.n	8011f86 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8011f4c:	4b3f      	ldr	r3, [pc, #252]	; (801204c <USBD_SetConfig+0x144>)
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	461a      	mov	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011f56:	4b3d      	ldr	r3, [pc, #244]	; (801204c <USBD_SetConfig+0x144>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff f999 	bl	8011294 <USBD_SetClassConfig>
 8011f62:	4603      	mov	r3, r0
 8011f64:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011f66:	7bfb      	ldrb	r3, [r7, #15]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d004      	beq.n	8011f76 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 f945 	bl	80121fe <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011f74:	e065      	b.n	8012042 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 fa0c 	bl	8012394 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2203      	movs	r2, #3
 8011f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011f84:	e05d      	b.n	8012042 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 fa04 	bl	8012394 <USBD_CtlSendStatus>
    break;
 8011f8c:	e059      	b.n	8012042 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011f8e:	4b2f      	ldr	r3, [pc, #188]	; (801204c <USBD_SetConfig+0x144>)
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d112      	bne.n	8011fbc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2202      	movs	r2, #2
 8011f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011f9e:	4b2b      	ldr	r3, [pc, #172]	; (801204c <USBD_SetConfig+0x144>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011fa8:	4b28      	ldr	r3, [pc, #160]	; (801204c <USBD_SetConfig+0x144>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	4619      	mov	r1, r3
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff f98c 	bl	80112cc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f000 f9ed 	bl	8012394 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011fba:	e042      	b.n	8012042 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8011fbc:	4b23      	ldr	r3, [pc, #140]	; (801204c <USBD_SetConfig+0x144>)
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d02a      	beq.n	8012020 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f7ff f97a 	bl	80112cc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011fd8:	4b1c      	ldr	r3, [pc, #112]	; (801204c <USBD_SetConfig+0x144>)
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	461a      	mov	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011fe2:	4b1a      	ldr	r3, [pc, #104]	; (801204c <USBD_SetConfig+0x144>)
 8011fe4:	781b      	ldrb	r3, [r3, #0]
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7ff f953 	bl	8011294 <USBD_SetClassConfig>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011ff2:	7bfb      	ldrb	r3, [r7, #15]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d00f      	beq.n	8012018 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011ff8:	6839      	ldr	r1, [r7, #0]
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 f8ff 	bl	80121fe <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	b2db      	uxtb	r3, r3
 8012006:	4619      	mov	r1, r3
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7ff f95f 	bl	80112cc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2202      	movs	r2, #2
 8012012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012016:	e014      	b.n	8012042 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 f9bb 	bl	8012394 <USBD_CtlSendStatus>
    break;
 801201e:	e010      	b.n	8012042 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f000 f9b7 	bl	8012394 <USBD_CtlSendStatus>
    break;
 8012026:	e00c      	b.n	8012042 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012028:	6839      	ldr	r1, [r7, #0]
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f000 f8e7 	bl	80121fe <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012030:	4b06      	ldr	r3, [pc, #24]	; (801204c <USBD_SetConfig+0x144>)
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	4619      	mov	r1, r3
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7ff f948 	bl	80112cc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801203c:	2303      	movs	r3, #3
 801203e:	73fb      	strb	r3, [r7, #15]
    break;
 8012040:	bf00      	nop
  }

  return ret;
 8012042:	7bfb      	ldrb	r3, [r7, #15]
}
 8012044:	4618      	mov	r0, r3
 8012046:	3710      	adds	r7, #16
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20002868 	.word	0x20002868

08012050 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	88db      	ldrh	r3, [r3, #6]
 801205e:	2b01      	cmp	r3, #1
 8012060:	d004      	beq.n	801206c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012062:	6839      	ldr	r1, [r7, #0]
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f000 f8ca 	bl	80121fe <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801206a:	e022      	b.n	80120b2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012072:	2b02      	cmp	r3, #2
 8012074:	dc02      	bgt.n	801207c <USBD_GetConfig+0x2c>
 8012076:	2b00      	cmp	r3, #0
 8012078:	dc03      	bgt.n	8012082 <USBD_GetConfig+0x32>
 801207a:	e015      	b.n	80120a8 <USBD_GetConfig+0x58>
 801207c:	2b03      	cmp	r3, #3
 801207e:	d00b      	beq.n	8012098 <USBD_GetConfig+0x48>
 8012080:	e012      	b.n	80120a8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2200      	movs	r2, #0
 8012086:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	3308      	adds	r3, #8
 801208c:	2201      	movs	r2, #1
 801208e:	4619      	mov	r1, r3
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f000 f925 	bl	80122e0 <USBD_CtlSendData>
      break;
 8012096:	e00c      	b.n	80120b2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	3304      	adds	r3, #4
 801209c:	2201      	movs	r2, #1
 801209e:	4619      	mov	r1, r3
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f000 f91d 	bl	80122e0 <USBD_CtlSendData>
      break;
 80120a6:	e004      	b.n	80120b2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80120a8:	6839      	ldr	r1, [r7, #0]
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 f8a7 	bl	80121fe <USBD_CtlError>
      break;
 80120b0:	bf00      	nop
}
 80120b2:	bf00      	nop
 80120b4:	3708      	adds	r7, #8
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b082      	sub	sp, #8
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120ca:	3b01      	subs	r3, #1
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	d81e      	bhi.n	801210e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	88db      	ldrh	r3, [r3, #6]
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	d004      	beq.n	80120e2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 f88f 	bl	80121fe <USBD_CtlError>
      break;
 80120e0:	e01a      	b.n	8012118 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2201      	movs	r2, #1
 80120e6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d005      	beq.n	80120fe <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	68db      	ldr	r3, [r3, #12]
 80120f6:	f043 0202 	orr.w	r2, r3, #2
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	330c      	adds	r3, #12
 8012102:	2202      	movs	r2, #2
 8012104:	4619      	mov	r1, r3
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f000 f8ea 	bl	80122e0 <USBD_CtlSendData>
    break;
 801210c:	e004      	b.n	8012118 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801210e:	6839      	ldr	r1, [r7, #0]
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 f874 	bl	80121fe <USBD_CtlError>
    break;
 8012116:	bf00      	nop
  }
}
 8012118:	bf00      	nop
 801211a:	3708      	adds	r7, #8
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	885b      	ldrh	r3, [r3, #2]
 801212e:	2b01      	cmp	r3, #1
 8012130:	d106      	bne.n	8012140 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2201      	movs	r2, #1
 8012136:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f000 f92a 	bl	8012394 <USBD_CtlSendStatus>
  }
}
 8012140:	bf00      	nop
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012158:	3b01      	subs	r3, #1
 801215a:	2b02      	cmp	r3, #2
 801215c:	d80b      	bhi.n	8012176 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	885b      	ldrh	r3, [r3, #2]
 8012162:	2b01      	cmp	r3, #1
 8012164:	d10c      	bne.n	8012180 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f000 f910 	bl	8012394 <USBD_CtlSendStatus>
      }
      break;
 8012174:	e004      	b.n	8012180 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012176:	6839      	ldr	r1, [r7, #0]
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 f840 	bl	80121fe <USBD_CtlError>
      break;
 801217e:	e000      	b.n	8012182 <USBD_ClrFeature+0x3a>
      break;
 8012180:	bf00      	nop
  }
}
 8012182:	bf00      	nop
 8012184:	3708      	adds	r7, #8
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801218a:	b580      	push	{r7, lr}
 801218c:	b084      	sub	sp, #16
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
 8012192:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	781a      	ldrb	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	3301      	adds	r3, #1
 80121a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	781a      	ldrb	r2, [r3, #0]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	3301      	adds	r3, #1
 80121b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	f7ff fac6 	bl	8011746 <SWAPBYTE>
 80121ba:	4603      	mov	r3, r0
 80121bc:	461a      	mov	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	3301      	adds	r3, #1
 80121c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	3301      	adds	r3, #1
 80121cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f7ff fab9 	bl	8011746 <SWAPBYTE>
 80121d4:	4603      	mov	r3, r0
 80121d6:	461a      	mov	r2, r3
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	3301      	adds	r3, #1
 80121e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	3301      	adds	r3, #1
 80121e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f7ff faac 	bl	8011746 <SWAPBYTE>
 80121ee:	4603      	mov	r3, r0
 80121f0:	461a      	mov	r2, r3
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	80da      	strh	r2, [r3, #6]
}
 80121f6:	bf00      	nop
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b082      	sub	sp, #8
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012208:	2180      	movs	r1, #128	; 0x80
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f003 fbc4 	bl	8015998 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012210:	2100      	movs	r1, #0
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f003 fbc0 	bl	8015998 <USBD_LL_StallEP>
}
 8012218:	bf00      	nop
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b086      	sub	sp, #24
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801222c:	2300      	movs	r3, #0
 801222e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d036      	beq.n	80122a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801223a:	6938      	ldr	r0, [r7, #16]
 801223c:	f000 f836 	bl	80122ac <USBD_GetLen>
 8012240:	4603      	mov	r3, r0
 8012242:	3301      	adds	r3, #1
 8012244:	b29b      	uxth	r3, r3
 8012246:	005b      	lsls	r3, r3, #1
 8012248:	b29a      	uxth	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801224e:	7dfb      	ldrb	r3, [r7, #23]
 8012250:	68ba      	ldr	r2, [r7, #8]
 8012252:	4413      	add	r3, r2
 8012254:	687a      	ldr	r2, [r7, #4]
 8012256:	7812      	ldrb	r2, [r2, #0]
 8012258:	701a      	strb	r2, [r3, #0]
  idx++;
 801225a:	7dfb      	ldrb	r3, [r7, #23]
 801225c:	3301      	adds	r3, #1
 801225e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012260:	7dfb      	ldrb	r3, [r7, #23]
 8012262:	68ba      	ldr	r2, [r7, #8]
 8012264:	4413      	add	r3, r2
 8012266:	2203      	movs	r2, #3
 8012268:	701a      	strb	r2, [r3, #0]
  idx++;
 801226a:	7dfb      	ldrb	r3, [r7, #23]
 801226c:	3301      	adds	r3, #1
 801226e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012270:	e013      	b.n	801229a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012272:	7dfb      	ldrb	r3, [r7, #23]
 8012274:	68ba      	ldr	r2, [r7, #8]
 8012276:	4413      	add	r3, r2
 8012278:	693a      	ldr	r2, [r7, #16]
 801227a:	7812      	ldrb	r2, [r2, #0]
 801227c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	3301      	adds	r3, #1
 8012282:	613b      	str	r3, [r7, #16]
    idx++;
 8012284:	7dfb      	ldrb	r3, [r7, #23]
 8012286:	3301      	adds	r3, #1
 8012288:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801228a:	7dfb      	ldrb	r3, [r7, #23]
 801228c:	68ba      	ldr	r2, [r7, #8]
 801228e:	4413      	add	r3, r2
 8012290:	2200      	movs	r2, #0
 8012292:	701a      	strb	r2, [r3, #0]
    idx++;
 8012294:	7dfb      	ldrb	r3, [r7, #23]
 8012296:	3301      	adds	r3, #1
 8012298:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1e7      	bne.n	8012272 <USBD_GetString+0x52>
 80122a2:	e000      	b.n	80122a6 <USBD_GetString+0x86>
    return;
 80122a4:	bf00      	nop
  }
}
 80122a6:	3718      	adds	r7, #24
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b085      	sub	sp, #20
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80122b4:	2300      	movs	r3, #0
 80122b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80122bc:	e005      	b.n	80122ca <USBD_GetLen+0x1e>
  {
    len++;
 80122be:	7bfb      	ldrb	r3, [r7, #15]
 80122c0:	3301      	adds	r3, #1
 80122c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	3301      	adds	r3, #1
 80122c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d1f5      	bne.n	80122be <USBD_GetLen+0x12>
  }

  return len;
 80122d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3714      	adds	r7, #20
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2202      	movs	r2, #2
 80122f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	68ba      	ldr	r2, [r7, #8]
 8012304:	2100      	movs	r1, #0
 8012306:	68f8      	ldr	r0, [r7, #12]
 8012308:	f003 fbcf 	bl	8015aaa <USBD_LL_Transmit>

  return USBD_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012316:	b580      	push	{r7, lr}
 8012318:	b084      	sub	sp, #16
 801231a:	af00      	add	r7, sp, #0
 801231c:	60f8      	str	r0, [r7, #12]
 801231e:	60b9      	str	r1, [r7, #8]
 8012320:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	2100      	movs	r1, #0
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f003 fbbe 	bl	8015aaa <USBD_LL_Transmit>

  return USBD_OK;
 801232e:	2300      	movs	r3, #0
}
 8012330:	4618      	mov	r0, r3
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	60f8      	str	r0, [r7, #12]
 8012340:	60b9      	str	r1, [r7, #8]
 8012342:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2203      	movs	r2, #3
 8012348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	687a      	ldr	r2, [r7, #4]
 8012358:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	68ba      	ldr	r2, [r7, #8]
 8012360:	2100      	movs	r1, #0
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f003 fbc2 	bl	8015aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012368:	2300      	movs	r3, #0
}
 801236a:	4618      	mov	r0, r3
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}

08012372 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012372:	b580      	push	{r7, lr}
 8012374:	b084      	sub	sp, #16
 8012376:	af00      	add	r7, sp, #0
 8012378:	60f8      	str	r0, [r7, #12]
 801237a:	60b9      	str	r1, [r7, #8]
 801237c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	2100      	movs	r1, #0
 8012384:	68f8      	ldr	r0, [r7, #12]
 8012386:	f003 fbb1 	bl	8015aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 801238a:	2300      	movs	r3, #0
}
 801238c:	4618      	mov	r0, r3
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2204      	movs	r2, #4
 80123a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80123a4:	2300      	movs	r3, #0
 80123a6:	2200      	movs	r2, #0
 80123a8:	2100      	movs	r1, #0
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f003 fb7d 	bl	8015aaa <USBD_LL_Transmit>

  return USBD_OK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b082      	sub	sp, #8
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2205      	movs	r2, #5
 80123c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80123ca:	2300      	movs	r3, #0
 80123cc:	2200      	movs	r2, #0
 80123ce:	2100      	movs	r1, #0
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f003 fb8b 	bl	8015aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80123d6:	2300      	movs	r3, #0
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3708      	adds	r7, #8
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	4603      	mov	r3, r0
 80123e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80123ea:	2300      	movs	r3, #0
 80123ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80123ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123f2:	2b84      	cmp	r3, #132	; 0x84
 80123f4:	d005      	beq.n	8012402 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80123f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	4413      	add	r3, r2
 80123fe:	3303      	adds	r3, #3
 8012400:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012402:	68fb      	ldr	r3, [r7, #12]
}
 8012404:	4618      	mov	r0, r3
 8012406:	3714      	adds	r7, #20
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr

08012410 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012416:	f3ef 8305 	mrs	r3, IPSR
 801241a:	607b      	str	r3, [r7, #4]
  return(result);
 801241c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801241e:	2b00      	cmp	r3, #0
 8012420:	bf14      	ite	ne
 8012422:	2301      	movne	r3, #1
 8012424:	2300      	moveq	r3, #0
 8012426:	b2db      	uxtb	r3, r3
}
 8012428:	4618      	mov	r0, r3
 801242a:	370c      	adds	r7, #12
 801242c:	46bd      	mov	sp, r7
 801242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012432:	4770      	bx	lr

08012434 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012438:	f001 fb4c 	bl	8013ad4 <vTaskStartScheduler>
  
  return osOK;
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	bd80      	pop	{r7, pc}

08012442 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012444:	b089      	sub	sp, #36	; 0x24
 8012446:	af04      	add	r7, sp, #16
 8012448:	6078      	str	r0, [r7, #4]
 801244a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	695b      	ldr	r3, [r3, #20]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d020      	beq.n	8012496 <osThreadCreate+0x54>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	699b      	ldr	r3, [r3, #24]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d01c      	beq.n	8012496 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	685c      	ldr	r4, [r3, #4]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681d      	ldr	r5, [r3, #0]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	691e      	ldr	r6, [r3, #16]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801246e:	4618      	mov	r0, r3
 8012470:	f7ff ffb6 	bl	80123e0 <makeFreeRtosPriority>
 8012474:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	695b      	ldr	r3, [r3, #20]
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801247e:	9202      	str	r2, [sp, #8]
 8012480:	9301      	str	r3, [sp, #4]
 8012482:	9100      	str	r1, [sp, #0]
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	4632      	mov	r2, r6
 8012488:	4629      	mov	r1, r5
 801248a:	4620      	mov	r0, r4
 801248c:	f001 f95a 	bl	8013744 <xTaskCreateStatic>
 8012490:	4603      	mov	r3, r0
 8012492:	60fb      	str	r3, [r7, #12]
 8012494:	e01c      	b.n	80124d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	685c      	ldr	r4, [r3, #4]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80124a2:	b29e      	uxth	r6, r3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7ff ff98 	bl	80123e0 <makeFreeRtosPriority>
 80124b0:	4602      	mov	r2, r0
 80124b2:	f107 030c 	add.w	r3, r7, #12
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	9200      	str	r2, [sp, #0]
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	4632      	mov	r2, r6
 80124be:	4629      	mov	r1, r5
 80124c0:	4620      	mov	r0, r4
 80124c2:	f001 f99c 	bl	80137fe <xTaskCreate>
 80124c6:	4603      	mov	r3, r0
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d001      	beq.n	80124d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80124cc:	2300      	movs	r3, #0
 80124ce:	e000      	b.n	80124d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80124d0:	68fb      	ldr	r3, [r7, #12]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3714      	adds	r7, #20
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80124da:	b580      	push	{r7, lr}
 80124dc:	b084      	sub	sp, #16
 80124de:	af00      	add	r7, sp, #0
 80124e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d001      	beq.n	80124f0 <osDelay+0x16>
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	e000      	b.n	80124f2 <osDelay+0x18>
 80124f0:	2301      	movs	r3, #1
 80124f2:	4618      	mov	r0, r3
 80124f4:	f001 faba 	bl	8013a6c <vTaskDelay>
  
  return osOK;
 80124f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3710      	adds	r7, #16
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}
	...

08012504 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b086      	sub	sp, #24
 8012508:	af02      	add	r7, sp, #8
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801250e:	2300      	movs	r3, #0
 8012510:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8012512:	2300      	movs	r3, #0
 8012514:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8012516:	f7ff ff7b 	bl	8012410 <inHandlerMode>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d01c      	beq.n	801255a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012520:	6839      	ldr	r1, [r7, #0]
 8012522:	f107 0208 	add.w	r2, r7, #8
 8012526:	f107 030c 	add.w	r3, r7, #12
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	4613      	mov	r3, r2
 801252e:	2201      	movs	r2, #1
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f002 f881 	bl	8014638 <xTaskGenericNotifyFromISR>
 8012536:	4603      	mov	r3, r0
 8012538:	2b01      	cmp	r3, #1
 801253a:	d002      	beq.n	8012542 <osSignalSet+0x3e>
      return 0x80000000;
 801253c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012540:	e019      	b.n	8012576 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d015      	beq.n	8012574 <osSignalSet+0x70>
 8012548:	4b0d      	ldr	r3, [pc, #52]	; (8012580 <osSignalSet+0x7c>)
 801254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801254e:	601a      	str	r2, [r3, #0]
 8012550:	f3bf 8f4f 	dsb	sy
 8012554:	f3bf 8f6f 	isb	sy
 8012558:	e00c      	b.n	8012574 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 801255a:	6839      	ldr	r1, [r7, #0]
 801255c:	f107 0308 	add.w	r3, r7, #8
 8012560:	2201      	movs	r2, #1
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f001 ffb2 	bl	80144cc <xTaskGenericNotify>
 8012568:	4603      	mov	r3, r0
 801256a:	2b01      	cmp	r3, #1
 801256c:	d002      	beq.n	8012574 <osSignalSet+0x70>
    return 0x80000000;
 801256e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012572:	e000      	b.n	8012576 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012574:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	e000ed04 	.word	0xe000ed04

08012584 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012584:	b590      	push	{r4, r7, lr}
 8012586:	b089      	sub	sp, #36	; 0x24
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012590:	2300      	movs	r3, #0
 8012592:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012594:	2300      	movs	r3, #0
 8012596:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801259e:	d103      	bne.n	80125a8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80125a0:	f04f 33ff 	mov.w	r3, #4294967295
 80125a4:	61fb      	str	r3, [r7, #28]
 80125a6:	e009      	b.n	80125bc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d006      	beq.n	80125bc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d101      	bne.n	80125bc <osSignalWait+0x38>
      ticks = 1;
 80125b8:	2301      	movs	r3, #1
 80125ba:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80125bc:	f7ff ff28 	bl	8012410 <inHandlerMode>
 80125c0:	4603      	mov	r3, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d002      	beq.n	80125cc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80125c6:	2382      	movs	r3, #130	; 0x82
 80125c8:	613b      	str	r3, [r7, #16]
 80125ca:	e01b      	b.n	8012604 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80125cc:	68b9      	ldr	r1, [r7, #8]
 80125ce:	f107 0310 	add.w	r3, r7, #16
 80125d2:	1d1a      	adds	r2, r3, #4
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	2000      	movs	r0, #0
 80125d8:	f001 ff1e 	bl	8014418 <xTaskNotifyWait>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d008      	beq.n	80125f4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d102      	bne.n	80125ee <osSignalWait+0x6a>
 80125e8:	2300      	movs	r3, #0
 80125ea:	613b      	str	r3, [r7, #16]
 80125ec:	e00a      	b.n	8012604 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80125ee:	2340      	movs	r3, #64	; 0x40
 80125f0:	613b      	str	r3, [r7, #16]
 80125f2:	e007      	b.n	8012604 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	da02      	bge.n	8012600 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80125fa:	2386      	movs	r3, #134	; 0x86
 80125fc:	613b      	str	r3, [r7, #16]
 80125fe:	e001      	b.n	8012604 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012600:	2308      	movs	r3, #8
 8012602:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	461c      	mov	r4, r3
 8012608:	f107 0310 	add.w	r3, r7, #16
 801260c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	3724      	adds	r7, #36	; 0x24
 8012618:	46bd      	mov	sp, r7
 801261a:	bd90      	pop	{r4, r7, pc}

0801261c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d007      	beq.n	801263c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	4619      	mov	r1, r3
 8012632:	2001      	movs	r0, #1
 8012634:	f000 fc65 	bl	8012f02 <xQueueCreateMutexStatic>
 8012638:	4603      	mov	r3, r0
 801263a:	e003      	b.n	8012644 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801263c:	2001      	movs	r0, #1
 801263e:	f000 fc48 	bl	8012ed2 <xQueueCreateMutex>
 8012642:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012644:	4618      	mov	r0, r3
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	3303      	adds	r3, #3
 801265a:	f023 0303 	bic.w	r3, r3, #3
 801265e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012660:	2014      	movs	r0, #20
 8012662:	f002 fb79 	bl	8014d58 <pvPortMalloc>
 8012666:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d046      	beq.n	80126fc <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	2200      	movs	r2, #0
 8012680:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	4618      	mov	r0, r3
 8012688:	f002 fb66 	bl	8014d58 <pvPortMalloc>
 801268c:	4602      	mov	r2, r0
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d02b      	beq.n	80126f2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	68fa      	ldr	r2, [r7, #12]
 80126a0:	fb02 f303 	mul.w	r3, r2, r3
 80126a4:	4618      	mov	r0, r3
 80126a6:	f002 fb57 	bl	8014d58 <pvPortMalloc>
 80126aa:	4602      	mov	r2, r0
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d011      	beq.n	80126dc <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80126b8:	2300      	movs	r3, #0
 80126ba:	613b      	str	r3, [r7, #16]
 80126bc:	e008      	b.n	80126d0 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	685a      	ldr	r2, [r3, #4]
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	4413      	add	r3, r2
 80126c6:	2200      	movs	r2, #0
 80126c8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	3301      	adds	r3, #1
 80126ce:	613b      	str	r3, [r7, #16]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	693a      	ldr	r2, [r7, #16]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d3f1      	bcc.n	80126be <osPoolCreate+0x72>
 80126da:	e00f      	b.n	80126fc <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	f002 fbfd 	bl	8014ee0 <vPortFree>
        vPortFree(thePool);
 80126e6:	6978      	ldr	r0, [r7, #20]
 80126e8:	f002 fbfa 	bl	8014ee0 <vPortFree>
        thePool = NULL;
 80126ec:	2300      	movs	r3, #0
 80126ee:	617b      	str	r3, [r7, #20]
 80126f0:	e004      	b.n	80126fc <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80126f2:	6978      	ldr	r0, [r7, #20]
 80126f4:	f002 fbf4 	bl	8014ee0 <vPortFree>
      thePool = NULL;
 80126f8:	2300      	movs	r3, #0
 80126fa:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80126fc:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3718      	adds	r7, #24
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012706:	b580      	push	{r7, lr}
 8012708:	b08a      	sub	sp, #40	; 0x28
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012712:	2300      	movs	r3, #0
 8012714:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012716:	f7ff fe7b 	bl	8012410 <inHandlerMode>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00e      	beq.n	801273e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012720:	f3ef 8211 	mrs	r2, BASEPRI
 8012724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012728:	f383 8811 	msr	BASEPRI, r3
 801272c:	f3bf 8f6f 	isb	sy
 8012730:	f3bf 8f4f 	dsb	sy
 8012734:	617a      	str	r2, [r7, #20]
 8012736:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012738:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 801273a:	627b      	str	r3, [r7, #36]	; 0x24
 801273c:	e001      	b.n	8012742 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801273e:	f002 f9e9 	bl	8014b14 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012742:	2300      	movs	r3, #0
 8012744:	61fb      	str	r3, [r7, #28]
 8012746:	e029      	b.n	801279c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	691a      	ldr	r2, [r3, #16]
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	4413      	add	r3, r2
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	6892      	ldr	r2, [r2, #8]
 8012754:	fbb3 f1f2 	udiv	r1, r3, r2
 8012758:	fb02 f201 	mul.w	r2, r2, r1
 801275c:	1a9b      	subs	r3, r3, r2
 801275e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	685a      	ldr	r2, [r3, #4]
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	4413      	add	r3, r2
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d113      	bne.n	8012796 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	685a      	ldr	r2, [r3, #4]
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	4413      	add	r3, r2
 8012776:	2201      	movs	r2, #1
 8012778:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4619      	mov	r1, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	69ba      	ldr	r2, [r7, #24]
 8012786:	fb02 f303 	mul.w	r3, r2, r3
 801278a:	440b      	add	r3, r1
 801278c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	69ba      	ldr	r2, [r7, #24]
 8012792:	611a      	str	r2, [r3, #16]
      break;
 8012794:	e007      	b.n	80127a6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	3301      	adds	r3, #1
 801279a:	61fb      	str	r3, [r7, #28]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	69fa      	ldr	r2, [r7, #28]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d3d0      	bcc.n	8012748 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80127a6:	f7ff fe33 	bl	8012410 <inHandlerMode>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d005      	beq.n	80127bc <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80127b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80127ba:	e001      	b.n	80127c0 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80127bc:	f002 f9da 	bl	8014b74 <vPortExitCritical>
  }
  
  return p;
 80127c0:	6a3b      	ldr	r3, [r7, #32]
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3728      	adds	r7, #40	; 0x28
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}

080127ca <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80127ca:	b480      	push	{r7}
 80127cc:	b085      	sub	sp, #20
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
 80127d2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <osPoolFree+0x14>
    return osErrorParameter;
 80127da:	2380      	movs	r3, #128	; 0x80
 80127dc:	e030      	b.n	8012840 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d101      	bne.n	80127e8 <osPoolFree+0x1e>
    return osErrorParameter;
 80127e4:	2380      	movs	r3, #128	; 0x80
 80127e6:	e02b      	b.n	8012840 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d201      	bcs.n	80127f6 <osPoolFree+0x2c>
    return osErrorParameter;
 80127f2:	2380      	movs	r3, #128	; 0x80
 80127f4:	e024      	b.n	8012840 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	687a      	ldr	r2, [r7, #4]
 80127fa:	6812      	ldr	r2, [r2, #0]
 80127fc:	1a9b      	subs	r3, r3, r2
 80127fe:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	68da      	ldr	r2, [r3, #12]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	fbb3 f1f2 	udiv	r1, r3, r2
 801280a:	fb02 f201 	mul.w	r2, r2, r1
 801280e:	1a9b      	subs	r3, r3, r2
 8012810:	2b00      	cmp	r3, #0
 8012812:	d001      	beq.n	8012818 <osPoolFree+0x4e>
    return osErrorParameter;
 8012814:	2380      	movs	r3, #128	; 0x80
 8012816:	e013      	b.n	8012840 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	68db      	ldr	r3, [r3, #12]
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012822:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	689b      	ldr	r3, [r3, #8]
 8012828:	68fa      	ldr	r2, [r7, #12]
 801282a:	429a      	cmp	r2, r3
 801282c:	d301      	bcc.n	8012832 <osPoolFree+0x68>
    return osErrorParameter;
 801282e:	2380      	movs	r3, #128	; 0x80
 8012830:	e006      	b.n	8012840 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	685a      	ldr	r2, [r3, #4]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	4413      	add	r3, r2
 801283a:	2200      	movs	r2, #0
 801283c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	3714      	adds	r7, #20
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 801284c:	b590      	push	{r4, r7, lr}
 801284e:	b087      	sub	sp, #28
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	613b      	str	r3, [r7, #16]
 8012862:	2300      	movs	r3, #0
 8012864:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	689c      	ldr	r4, [r3, #8]
 801286a:	200c      	movs	r0, #12
 801286c:	f002 fa74 	bl	8014d58 <pvPortMalloc>
 8012870:	4603      	mov	r3, r0
 8012872:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d101      	bne.n	8012882 <osMailCreate+0x36>
    return NULL;
 801287e:	2300      	movs	r3, #0
 8012880:	e038      	b.n	80128f4 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	689b      	ldr	r3, [r3, #8]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6818      	ldr	r0, [r3, #0]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	689b      	ldr	r3, [r3, #8]
 8012894:	681c      	ldr	r4, [r3, #0]
 8012896:	2200      	movs	r2, #0
 8012898:	2104      	movs	r1, #4
 801289a:	f000 faa1 	bl	8012de0 <xQueueGenericCreate>
 801289e:	4603      	mov	r3, r0
 80128a0:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	689b      	ldr	r3, [r3, #8]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d107      	bne.n	80128be <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	4618      	mov	r0, r3
 80128b6:	f002 fb13 	bl	8014ee0 <vPortFree>
    return NULL;
 80128ba:	2300      	movs	r3, #0
 80128bc:	e01a      	b.n	80128f4 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	689b      	ldr	r3, [r3, #8]
 80128c2:	681c      	ldr	r4, [r3, #0]
 80128c4:	f107 030c 	add.w	r3, r7, #12
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7ff febf 	bl	801264c <osPoolCreate>
 80128ce:	4603      	mov	r3, r0
 80128d0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	689b      	ldr	r3, [r3, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d107      	bne.n	80128ee <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	689b      	ldr	r3, [r3, #8]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f002 fafb 	bl	8014ee0 <vPortFree>
    return NULL;
 80128ea:	2300      	movs	r3, #0
 80128ec:	e002      	b.n	80128f4 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	689b      	ldr	r3, [r3, #8]
 80128f2:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	371c      	adds	r7, #28
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd90      	pop	{r4, r7, pc}

080128fc <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d101      	bne.n	8012910 <osMailAlloc+0x14>
    return NULL;
 801290c:	2300      	movs	r3, #0
 801290e:	e006      	b.n	801291e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	4618      	mov	r0, r3
 8012916:	f7ff fef6 	bl	8012706 <osPoolAlloc>
 801291a:	60f8      	str	r0, [r7, #12]
  
  return p;
 801291c:	68fb      	ldr	r3, [r7, #12]
}
 801291e:	4618      	mov	r0, r3
 8012920:	3710      	adds	r7, #16
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
	...

08012928 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d101      	bne.n	801293c <osMailPut+0x14>
    return osErrorParameter;
 8012938:	2380      	movs	r3, #128	; 0x80
 801293a:	e02c      	b.n	8012996 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 801293c:	2300      	movs	r3, #0
 801293e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012940:	f7ff fd66 	bl	8012410 <inHandlerMode>
 8012944:	4603      	mov	r3, r0
 8012946:	2b00      	cmp	r3, #0
 8012948:	d018      	beq.n	801297c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6858      	ldr	r0, [r3, #4]
 801294e:	f107 020c 	add.w	r2, r7, #12
 8012952:	4639      	mov	r1, r7
 8012954:	2300      	movs	r3, #0
 8012956:	f000 fbed 	bl	8013134 <xQueueGenericSendFromISR>
 801295a:	4603      	mov	r3, r0
 801295c:	2b01      	cmp	r3, #1
 801295e:	d001      	beq.n	8012964 <osMailPut+0x3c>
      return osErrorOS;
 8012960:	23ff      	movs	r3, #255	; 0xff
 8012962:	e018      	b.n	8012996 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d014      	beq.n	8012994 <osMailPut+0x6c>
 801296a:	4b0d      	ldr	r3, [pc, #52]	; (80129a0 <osMailPut+0x78>)
 801296c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012970:	601a      	str	r2, [r3, #0]
 8012972:	f3bf 8f4f 	dsb	sy
 8012976:	f3bf 8f6f 	isb	sy
 801297a:	e00b      	b.n	8012994 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6858      	ldr	r0, [r3, #4]
 8012980:	4639      	mov	r1, r7
 8012982:	2300      	movs	r3, #0
 8012984:	2200      	movs	r2, #0
 8012986:	f000 fad7 	bl	8012f38 <xQueueGenericSend>
 801298a:	4603      	mov	r3, r0
 801298c:	2b01      	cmp	r3, #1
 801298e:	d001      	beq.n	8012994 <osMailPut+0x6c>
      return osErrorOS;
 8012990:	23ff      	movs	r3, #255	; 0xff
 8012992:	e000      	b.n	8012996 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012994:	2300      	movs	r3, #0
}
 8012996:	4618      	mov	r0, r3
 8012998:	3710      	adds	r7, #16
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	e000ed04 	.word	0xe000ed04

080129a4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80129a4:	b590      	push	{r4, r7, lr}
 80129a6:	b08b      	sub	sp, #44	; 0x2c
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	60b9      	str	r1, [r7, #8]
 80129ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d10a      	bne.n	80129d0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80129ba:	2380      	movs	r3, #128	; 0x80
 80129bc:	617b      	str	r3, [r7, #20]
    return event;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	461c      	mov	r4, r3
 80129c2:	f107 0314 	add.w	r3, r7, #20
 80129c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80129ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80129ce:	e056      	b.n	8012a7e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80129d0:	2300      	movs	r3, #0
 80129d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80129d4:	2300      	movs	r3, #0
 80129d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129de:	d103      	bne.n	80129e8 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80129e0:	f04f 33ff 	mov.w	r3, #4294967295
 80129e4:	627b      	str	r3, [r7, #36]	; 0x24
 80129e6:	e009      	b.n	80129fc <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d006      	beq.n	80129fc <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d101      	bne.n	80129fc <osMailGet+0x58>
      ticks = 1;
 80129f8:	2301      	movs	r3, #1
 80129fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80129fc:	f7ff fd08 	bl	8012410 <inHandlerMode>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d01d      	beq.n	8012a42 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	6858      	ldr	r0, [r3, #4]
 8012a0a:	f107 0220 	add.w	r2, r7, #32
 8012a0e:	f107 0314 	add.w	r3, r7, #20
 8012a12:	3304      	adds	r3, #4
 8012a14:	4619      	mov	r1, r3
 8012a16:	f000 fd05 	bl	8013424 <xQueueReceiveFromISR>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d102      	bne.n	8012a26 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012a20:	2320      	movs	r3, #32
 8012a22:	617b      	str	r3, [r7, #20]
 8012a24:	e001      	b.n	8012a2a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012a26:	2300      	movs	r3, #0
 8012a28:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012a2a:	6a3b      	ldr	r3, [r7, #32]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d01e      	beq.n	8012a6e <osMailGet+0xca>
 8012a30:	4b15      	ldr	r3, [pc, #84]	; (8012a88 <osMailGet+0xe4>)
 8012a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a36:	601a      	str	r2, [r3, #0]
 8012a38:	f3bf 8f4f 	dsb	sy
 8012a3c:	f3bf 8f6f 	isb	sy
 8012a40:	e015      	b.n	8012a6e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	6858      	ldr	r0, [r3, #4]
 8012a46:	f107 0314 	add.w	r3, r7, #20
 8012a4a:	3304      	adds	r3, #4
 8012a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a4e:	4619      	mov	r1, r3
 8012a50:	f000 fc08 	bl	8013264 <xQueueReceive>
 8012a54:	4603      	mov	r3, r0
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d102      	bne.n	8012a60 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012a5a:	2320      	movs	r3, #32
 8012a5c:	617b      	str	r3, [r7, #20]
 8012a5e:	e006      	b.n	8012a6e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d101      	bne.n	8012a6a <osMailGet+0xc6>
 8012a66:	2300      	movs	r3, #0
 8012a68:	e000      	b.n	8012a6c <osMailGet+0xc8>
 8012a6a:	2340      	movs	r3, #64	; 0x40
 8012a6c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	461c      	mov	r4, r3
 8012a72:	f107 0314 	add.w	r3, r7, #20
 8012a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012a7e:	68f8      	ldr	r0, [r7, #12]
 8012a80:	372c      	adds	r7, #44	; 0x2c
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd90      	pop	{r4, r7, pc}
 8012a86:	bf00      	nop
 8012a88:	e000ed04 	.word	0xe000ed04

08012a8c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d101      	bne.n	8012aa0 <osMailFree+0x14>
    return osErrorParameter;
 8012a9c:	2380      	movs	r3, #128	; 0x80
 8012a9e:	e006      	b.n	8012aae <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	689b      	ldr	r3, [r3, #8]
 8012aa4:	6839      	ldr	r1, [r7, #0]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7ff fe8f 	bl	80127ca <osPoolFree>
 8012aac:	4603      	mov	r3, r0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3708      	adds	r7, #8
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}

08012ab6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012ab6:	b480      	push	{r7}
 8012ab8:	b083      	sub	sp, #12
 8012aba:	af00      	add	r7, sp, #0
 8012abc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f103 0208 	add.w	r2, r3, #8
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f04f 32ff 	mov.w	r2, #4294967295
 8012ace:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f103 0208 	add.w	r2, r3, #8
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f103 0208 	add.w	r2, r3, #8
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012aea:	bf00      	nop
 8012aec:	370c      	adds	r7, #12
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr

08012af6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012af6:	b480      	push	{r7}
 8012af8:	b083      	sub	sp, #12
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2200      	movs	r2, #0
 8012b02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012b04:	bf00      	nop
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b10:	b480      	push	{r7}
 8012b12:	b085      	sub	sp, #20
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	689a      	ldr	r2, [r3, #8]
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	689b      	ldr	r3, [r3, #8]
 8012b32:	683a      	ldr	r2, [r7, #0]
 8012b34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	683a      	ldr	r2, [r7, #0]
 8012b3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	1c5a      	adds	r2, r3, #1
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	601a      	str	r2, [r3, #0]
}
 8012b4c:	bf00      	nop
 8012b4e:	3714      	adds	r7, #20
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b085      	sub	sp, #20
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b6e:	d103      	bne.n	8012b78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	60fb      	str	r3, [r7, #12]
 8012b76:	e00c      	b.n	8012b92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	3308      	adds	r3, #8
 8012b7c:	60fb      	str	r3, [r7, #12]
 8012b7e:	e002      	b.n	8012b86 <vListInsert+0x2e>
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	60fb      	str	r3, [r7, #12]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	68ba      	ldr	r2, [r7, #8]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d2f6      	bcs.n	8012b80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	685a      	ldr	r2, [r3, #4]
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	683a      	ldr	r2, [r7, #0]
 8012ba0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	683a      	ldr	r2, [r7, #0]
 8012bac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	1c5a      	adds	r2, r3, #1
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	601a      	str	r2, [r3, #0]
}
 8012bbe:	bf00      	nop
 8012bc0:	3714      	adds	r7, #20
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc8:	4770      	bx	lr

08012bca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012bca:	b480      	push	{r7}
 8012bcc:	b085      	sub	sp, #20
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	691b      	ldr	r3, [r3, #16]
 8012bd6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	6892      	ldr	r2, [r2, #8]
 8012be0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	689b      	ldr	r3, [r3, #8]
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	6852      	ldr	r2, [r2, #4]
 8012bea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d103      	bne.n	8012bfe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	689a      	ldr	r2, [r3, #8]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2200      	movs	r2, #0
 8012c02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	1e5a      	subs	r2, r3, #1
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	681b      	ldr	r3, [r3, #0]
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3714      	adds	r7, #20
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr
	...

08012c20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d10a      	bne.n	8012c4a <xQueueGenericReset+0x2a>
	__asm volatile
 8012c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c38:	f383 8811 	msr	BASEPRI, r3
 8012c3c:	f3bf 8f6f 	isb	sy
 8012c40:	f3bf 8f4f 	dsb	sy
 8012c44:	60bb      	str	r3, [r7, #8]
}
 8012c46:	bf00      	nop
 8012c48:	e7fe      	b.n	8012c48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012c4a:	f001 ff63 	bl	8014b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c56:	68f9      	ldr	r1, [r7, #12]
 8012c58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012c5a:	fb01 f303 	mul.w	r3, r1, r3
 8012c5e:	441a      	add	r2, r3
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2200      	movs	r2, #0
 8012c68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c7a:	3b01      	subs	r3, #1
 8012c7c:	68f9      	ldr	r1, [r7, #12]
 8012c7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012c80:	fb01 f303 	mul.w	r3, r1, r3
 8012c84:	441a      	add	r2, r3
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	22ff      	movs	r2, #255	; 0xff
 8012c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	22ff      	movs	r2, #255	; 0xff
 8012c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d114      	bne.n	8012cca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	691b      	ldr	r3, [r3, #16]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d01a      	beq.n	8012cde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	3310      	adds	r3, #16
 8012cac:	4618      	mov	r0, r3
 8012cae:	f001 f953 	bl	8013f58 <xTaskRemoveFromEventList>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d012      	beq.n	8012cde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012cb8:	4b0c      	ldr	r3, [pc, #48]	; (8012cec <xQueueGenericReset+0xcc>)
 8012cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cbe:	601a      	str	r2, [r3, #0]
 8012cc0:	f3bf 8f4f 	dsb	sy
 8012cc4:	f3bf 8f6f 	isb	sy
 8012cc8:	e009      	b.n	8012cde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	3310      	adds	r3, #16
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7ff fef1 	bl	8012ab6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	3324      	adds	r3, #36	; 0x24
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7ff feec 	bl	8012ab6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012cde:	f001 ff49 	bl	8014b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012ce2:	2301      	movs	r3, #1
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3710      	adds	r7, #16
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	e000ed04 	.word	0xe000ed04

08012cf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b08e      	sub	sp, #56	; 0x38
 8012cf4:	af02      	add	r7, sp, #8
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d10a      	bne.n	8012d1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d08:	f383 8811 	msr	BASEPRI, r3
 8012d0c:	f3bf 8f6f 	isb	sy
 8012d10:	f3bf 8f4f 	dsb	sy
 8012d14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012d16:	bf00      	nop
 8012d18:	e7fe      	b.n	8012d18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d10a      	bne.n	8012d36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012d32:	bf00      	nop
 8012d34:	e7fe      	b.n	8012d34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d002      	beq.n	8012d42 <xQueueGenericCreateStatic+0x52>
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <xQueueGenericCreateStatic+0x56>
 8012d42:	2301      	movs	r3, #1
 8012d44:	e000      	b.n	8012d48 <xQueueGenericCreateStatic+0x58>
 8012d46:	2300      	movs	r3, #0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d10a      	bne.n	8012d62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d50:	f383 8811 	msr	BASEPRI, r3
 8012d54:	f3bf 8f6f 	isb	sy
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	623b      	str	r3, [r7, #32]
}
 8012d5e:	bf00      	nop
 8012d60:	e7fe      	b.n	8012d60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d102      	bne.n	8012d6e <xQueueGenericCreateStatic+0x7e>
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d101      	bne.n	8012d72 <xQueueGenericCreateStatic+0x82>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e000      	b.n	8012d74 <xQueueGenericCreateStatic+0x84>
 8012d72:	2300      	movs	r3, #0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d10a      	bne.n	8012d8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d7c:	f383 8811 	msr	BASEPRI, r3
 8012d80:	f3bf 8f6f 	isb	sy
 8012d84:	f3bf 8f4f 	dsb	sy
 8012d88:	61fb      	str	r3, [r7, #28]
}
 8012d8a:	bf00      	nop
 8012d8c:	e7fe      	b.n	8012d8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012d8e:	2348      	movs	r3, #72	; 0x48
 8012d90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	2b48      	cmp	r3, #72	; 0x48
 8012d96:	d00a      	beq.n	8012dae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9c:	f383 8811 	msr	BASEPRI, r3
 8012da0:	f3bf 8f6f 	isb	sy
 8012da4:	f3bf 8f4f 	dsb	sy
 8012da8:	61bb      	str	r3, [r7, #24]
}
 8012daa:	bf00      	nop
 8012dac:	e7fe      	b.n	8012dac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012dae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d00d      	beq.n	8012dd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012dc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	4613      	mov	r3, r2
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	68b9      	ldr	r1, [r7, #8]
 8012dd0:	68f8      	ldr	r0, [r7, #12]
 8012dd2:	f000 f845 	bl	8012e60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3730      	adds	r7, #48	; 0x30
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b08a      	sub	sp, #40	; 0x28
 8012de4:	af02      	add	r7, sp, #8
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	4613      	mov	r3, r2
 8012dec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d10a      	bne.n	8012e0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df8:	f383 8811 	msr	BASEPRI, r3
 8012dfc:	f3bf 8f6f 	isb	sy
 8012e00:	f3bf 8f4f 	dsb	sy
 8012e04:	613b      	str	r3, [r7, #16]
}
 8012e06:	bf00      	nop
 8012e08:	e7fe      	b.n	8012e08 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d102      	bne.n	8012e16 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012e10:	2300      	movs	r3, #0
 8012e12:	61fb      	str	r3, [r7, #28]
 8012e14:	e004      	b.n	8012e20 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	68ba      	ldr	r2, [r7, #8]
 8012e1a:	fb02 f303 	mul.w	r3, r2, r3
 8012e1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012e20:	69fb      	ldr	r3, [r7, #28]
 8012e22:	3348      	adds	r3, #72	; 0x48
 8012e24:	4618      	mov	r0, r3
 8012e26:	f001 ff97 	bl	8014d58 <pvPortMalloc>
 8012e2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012e2c:	69bb      	ldr	r3, [r7, #24]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d011      	beq.n	8012e56 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	3348      	adds	r3, #72	; 0x48
 8012e3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e44:	79fa      	ldrb	r2, [r7, #7]
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	4613      	mov	r3, r2
 8012e4c:	697a      	ldr	r2, [r7, #20]
 8012e4e:	68b9      	ldr	r1, [r7, #8]
 8012e50:	68f8      	ldr	r0, [r7, #12]
 8012e52:	f000 f805 	bl	8012e60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012e56:	69bb      	ldr	r3, [r7, #24]
	}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3720      	adds	r7, #32
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
 8012e6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d103      	bne.n	8012e7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	69ba      	ldr	r2, [r7, #24]
 8012e78:	601a      	str	r2, [r3, #0]
 8012e7a:	e002      	b.n	8012e82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	68fa      	ldr	r2, [r7, #12]
 8012e86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e8e:	2101      	movs	r1, #1
 8012e90:	69b8      	ldr	r0, [r7, #24]
 8012e92:	f7ff fec5 	bl	8012c20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e96:	bf00      	nop
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}

08012e9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b082      	sub	sp, #8
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d00e      	beq.n	8012eca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f000 f837 	bl	8012f38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012eca:	bf00      	nop
 8012ecc:	3708      	adds	r7, #8
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b086      	sub	sp, #24
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	4603      	mov	r3, r0
 8012eda:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012edc:	2301      	movs	r3, #1
 8012ede:	617b      	str	r3, [r7, #20]
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012ee4:	79fb      	ldrb	r3, [r7, #7]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	6939      	ldr	r1, [r7, #16]
 8012eea:	6978      	ldr	r0, [r7, #20]
 8012eec:	f7ff ff78 	bl	8012de0 <xQueueGenericCreate>
 8012ef0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012ef2:	68f8      	ldr	r0, [r7, #12]
 8012ef4:	f7ff ffd3 	bl	8012e9e <prvInitialiseMutex>

		return xNewQueue;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
	}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3718      	adds	r7, #24
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}

08012f02 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012f02:	b580      	push	{r7, lr}
 8012f04:	b088      	sub	sp, #32
 8012f06:	af02      	add	r7, sp, #8
 8012f08:	4603      	mov	r3, r0
 8012f0a:	6039      	str	r1, [r7, #0]
 8012f0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012f0e:	2301      	movs	r3, #1
 8012f10:	617b      	str	r3, [r7, #20]
 8012f12:	2300      	movs	r3, #0
 8012f14:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012f16:	79fb      	ldrb	r3, [r7, #7]
 8012f18:	9300      	str	r3, [sp, #0]
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	6939      	ldr	r1, [r7, #16]
 8012f20:	6978      	ldr	r0, [r7, #20]
 8012f22:	f7ff fee5 	bl	8012cf0 <xQueueGenericCreateStatic>
 8012f26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f7ff ffb8 	bl	8012e9e <prvInitialiseMutex>

		return xNewQueue;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
	}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3718      	adds	r7, #24
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b08e      	sub	sp, #56	; 0x38
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	607a      	str	r2, [r7, #4]
 8012f44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012f46:	2300      	movs	r3, #0
 8012f48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d10a      	bne.n	8012f6a <xQueueGenericSend+0x32>
	__asm volatile
 8012f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f58:	f383 8811 	msr	BASEPRI, r3
 8012f5c:	f3bf 8f6f 	isb	sy
 8012f60:	f3bf 8f4f 	dsb	sy
 8012f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012f66:	bf00      	nop
 8012f68:	e7fe      	b.n	8012f68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d103      	bne.n	8012f78 <xQueueGenericSend+0x40>
 8012f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d101      	bne.n	8012f7c <xQueueGenericSend+0x44>
 8012f78:	2301      	movs	r3, #1
 8012f7a:	e000      	b.n	8012f7e <xQueueGenericSend+0x46>
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d10a      	bne.n	8012f98 <xQueueGenericSend+0x60>
	__asm volatile
 8012f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f86:	f383 8811 	msr	BASEPRI, r3
 8012f8a:	f3bf 8f6f 	isb	sy
 8012f8e:	f3bf 8f4f 	dsb	sy
 8012f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012f94:	bf00      	nop
 8012f96:	e7fe      	b.n	8012f96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d103      	bne.n	8012fa6 <xQueueGenericSend+0x6e>
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d101      	bne.n	8012faa <xQueueGenericSend+0x72>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	e000      	b.n	8012fac <xQueueGenericSend+0x74>
 8012faa:	2300      	movs	r3, #0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10a      	bne.n	8012fc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8012fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	623b      	str	r3, [r7, #32]
}
 8012fc2:	bf00      	nop
 8012fc4:	e7fe      	b.n	8012fc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fc6:	f001 f983 	bl	80142d0 <xTaskGetSchedulerState>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d102      	bne.n	8012fd6 <xQueueGenericSend+0x9e>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d101      	bne.n	8012fda <xQueueGenericSend+0xa2>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	e000      	b.n	8012fdc <xQueueGenericSend+0xa4>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10a      	bne.n	8012ff6 <xQueueGenericSend+0xbe>
	__asm volatile
 8012fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe4:	f383 8811 	msr	BASEPRI, r3
 8012fe8:	f3bf 8f6f 	isb	sy
 8012fec:	f3bf 8f4f 	dsb	sy
 8012ff0:	61fb      	str	r3, [r7, #28]
}
 8012ff2:	bf00      	nop
 8012ff4:	e7fe      	b.n	8012ff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ff6:	f001 fd8d 	bl	8014b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013002:	429a      	cmp	r2, r3
 8013004:	d302      	bcc.n	801300c <xQueueGenericSend+0xd4>
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	2b02      	cmp	r3, #2
 801300a:	d129      	bne.n	8013060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	68b9      	ldr	r1, [r7, #8]
 8013010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013012:	f000 fa87 	bl	8013524 <prvCopyDataToQueue>
 8013016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301c:	2b00      	cmp	r3, #0
 801301e:	d010      	beq.n	8013042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013022:	3324      	adds	r3, #36	; 0x24
 8013024:	4618      	mov	r0, r3
 8013026:	f000 ff97 	bl	8013f58 <xTaskRemoveFromEventList>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d013      	beq.n	8013058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013030:	4b3f      	ldr	r3, [pc, #252]	; (8013130 <xQueueGenericSend+0x1f8>)
 8013032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013036:	601a      	str	r2, [r3, #0]
 8013038:	f3bf 8f4f 	dsb	sy
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	e00a      	b.n	8013058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013044:	2b00      	cmp	r3, #0
 8013046:	d007      	beq.n	8013058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013048:	4b39      	ldr	r3, [pc, #228]	; (8013130 <xQueueGenericSend+0x1f8>)
 801304a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801304e:	601a      	str	r2, [r3, #0]
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013058:	f001 fd8c 	bl	8014b74 <vPortExitCritical>
				return pdPASS;
 801305c:	2301      	movs	r3, #1
 801305e:	e063      	b.n	8013128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d103      	bne.n	801306e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013066:	f001 fd85 	bl	8014b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801306a:	2300      	movs	r3, #0
 801306c:	e05c      	b.n	8013128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013070:	2b00      	cmp	r3, #0
 8013072:	d106      	bne.n	8013082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013074:	f107 0314 	add.w	r3, r7, #20
 8013078:	4618      	mov	r0, r3
 801307a:	f000 ffcf 	bl	801401c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801307e:	2301      	movs	r3, #1
 8013080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013082:	f001 fd77 	bl	8014b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013086:	f000 fd85 	bl	8013b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801308a:	f001 fd43 	bl	8014b14 <vPortEnterCritical>
 801308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013094:	b25b      	sxtb	r3, r3
 8013096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801309a:	d103      	bne.n	80130a4 <xQueueGenericSend+0x16c>
 801309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309e:	2200      	movs	r2, #0
 80130a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130aa:	b25b      	sxtb	r3, r3
 80130ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130b0:	d103      	bne.n	80130ba <xQueueGenericSend+0x182>
 80130b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b4:	2200      	movs	r2, #0
 80130b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130ba:	f001 fd5b 	bl	8014b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130be:	1d3a      	adds	r2, r7, #4
 80130c0:	f107 0314 	add.w	r3, r7, #20
 80130c4:	4611      	mov	r1, r2
 80130c6:	4618      	mov	r0, r3
 80130c8:	f000 ffbe 	bl	8014048 <xTaskCheckForTimeOut>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d124      	bne.n	801311c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80130d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130d4:	f000 fb1e 	bl	8013714 <prvIsQueueFull>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d018      	beq.n	8013110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80130de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e0:	3310      	adds	r3, #16
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	4611      	mov	r1, r2
 80130e6:	4618      	mov	r0, r3
 80130e8:	f000 ff12 	bl	8013f10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80130ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130ee:	f000 faa9 	bl	8013644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80130f2:	f000 fd5d 	bl	8013bb0 <xTaskResumeAll>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f47f af7c 	bne.w	8012ff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80130fe:	4b0c      	ldr	r3, [pc, #48]	; (8013130 <xQueueGenericSend+0x1f8>)
 8013100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013104:	601a      	str	r2, [r3, #0]
 8013106:	f3bf 8f4f 	dsb	sy
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	e772      	b.n	8012ff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013112:	f000 fa97 	bl	8013644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013116:	f000 fd4b 	bl	8013bb0 <xTaskResumeAll>
 801311a:	e76c      	b.n	8012ff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801311c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801311e:	f000 fa91 	bl	8013644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013122:	f000 fd45 	bl	8013bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013128:	4618      	mov	r0, r3
 801312a:	3738      	adds	r7, #56	; 0x38
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}
 8013130:	e000ed04 	.word	0xe000ed04

08013134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b08e      	sub	sp, #56	; 0x38
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	607a      	str	r2, [r7, #4]
 8013140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013148:	2b00      	cmp	r3, #0
 801314a:	d10a      	bne.n	8013162 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013150:	f383 8811 	msr	BASEPRI, r3
 8013154:	f3bf 8f6f 	isb	sy
 8013158:	f3bf 8f4f 	dsb	sy
 801315c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801315e:	bf00      	nop
 8013160:	e7fe      	b.n	8013160 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d103      	bne.n	8013170 <xQueueGenericSendFromISR+0x3c>
 8013168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801316c:	2b00      	cmp	r3, #0
 801316e:	d101      	bne.n	8013174 <xQueueGenericSendFromISR+0x40>
 8013170:	2301      	movs	r3, #1
 8013172:	e000      	b.n	8013176 <xQueueGenericSendFromISR+0x42>
 8013174:	2300      	movs	r3, #0
 8013176:	2b00      	cmp	r3, #0
 8013178:	d10a      	bne.n	8013190 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317e:	f383 8811 	msr	BASEPRI, r3
 8013182:	f3bf 8f6f 	isb	sy
 8013186:	f3bf 8f4f 	dsb	sy
 801318a:	623b      	str	r3, [r7, #32]
}
 801318c:	bf00      	nop
 801318e:	e7fe      	b.n	801318e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	2b02      	cmp	r3, #2
 8013194:	d103      	bne.n	801319e <xQueueGenericSendFromISR+0x6a>
 8013196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801319a:	2b01      	cmp	r3, #1
 801319c:	d101      	bne.n	80131a2 <xQueueGenericSendFromISR+0x6e>
 801319e:	2301      	movs	r3, #1
 80131a0:	e000      	b.n	80131a4 <xQueueGenericSendFromISR+0x70>
 80131a2:	2300      	movs	r3, #0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d10a      	bne.n	80131be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80131a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ac:	f383 8811 	msr	BASEPRI, r3
 80131b0:	f3bf 8f6f 	isb	sy
 80131b4:	f3bf 8f4f 	dsb	sy
 80131b8:	61fb      	str	r3, [r7, #28]
}
 80131ba:	bf00      	nop
 80131bc:	e7fe      	b.n	80131bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80131be:	f001 fd8b 	bl	8014cd8 <vPortValidateInterruptPriority>
	__asm volatile
 80131c2:	f3ef 8211 	mrs	r2, BASEPRI
 80131c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ca:	f383 8811 	msr	BASEPRI, r3
 80131ce:	f3bf 8f6f 	isb	sy
 80131d2:	f3bf 8f4f 	dsb	sy
 80131d6:	61ba      	str	r2, [r7, #24]
 80131d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80131da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80131dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d302      	bcc.n	80131f0 <xQueueGenericSendFromISR+0xbc>
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2b02      	cmp	r3, #2
 80131ee:	d12c      	bne.n	801324a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80131f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80131fa:	683a      	ldr	r2, [r7, #0]
 80131fc:	68b9      	ldr	r1, [r7, #8]
 80131fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013200:	f000 f990 	bl	8013524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013204:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801320c:	d112      	bne.n	8013234 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013212:	2b00      	cmp	r3, #0
 8013214:	d016      	beq.n	8013244 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013218:	3324      	adds	r3, #36	; 0x24
 801321a:	4618      	mov	r0, r3
 801321c:	f000 fe9c 	bl	8013f58 <xTaskRemoveFromEventList>
 8013220:	4603      	mov	r3, r0
 8013222:	2b00      	cmp	r3, #0
 8013224:	d00e      	beq.n	8013244 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d00b      	beq.n	8013244 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2201      	movs	r2, #1
 8013230:	601a      	str	r2, [r3, #0]
 8013232:	e007      	b.n	8013244 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013234:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013238:	3301      	adds	r3, #1
 801323a:	b2db      	uxtb	r3, r3
 801323c:	b25a      	sxtb	r2, r3
 801323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013244:	2301      	movs	r3, #1
 8013246:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013248:	e001      	b.n	801324e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801324a:	2300      	movs	r3, #0
 801324c:	637b      	str	r3, [r7, #52]	; 0x34
 801324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013250:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	f383 8811 	msr	BASEPRI, r3
}
 8013258:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801325c:	4618      	mov	r0, r3
 801325e:	3738      	adds	r7, #56	; 0x38
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b08c      	sub	sp, #48	; 0x30
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013270:	2300      	movs	r3, #0
 8013272:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327a:	2b00      	cmp	r3, #0
 801327c:	d10a      	bne.n	8013294 <xQueueReceive+0x30>
	__asm volatile
 801327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013282:	f383 8811 	msr	BASEPRI, r3
 8013286:	f3bf 8f6f 	isb	sy
 801328a:	f3bf 8f4f 	dsb	sy
 801328e:	623b      	str	r3, [r7, #32]
}
 8013290:	bf00      	nop
 8013292:	e7fe      	b.n	8013292 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d103      	bne.n	80132a2 <xQueueReceive+0x3e>
 801329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d101      	bne.n	80132a6 <xQueueReceive+0x42>
 80132a2:	2301      	movs	r3, #1
 80132a4:	e000      	b.n	80132a8 <xQueueReceive+0x44>
 80132a6:	2300      	movs	r3, #0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d10a      	bne.n	80132c2 <xQueueReceive+0x5e>
	__asm volatile
 80132ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b0:	f383 8811 	msr	BASEPRI, r3
 80132b4:	f3bf 8f6f 	isb	sy
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	61fb      	str	r3, [r7, #28]
}
 80132be:	bf00      	nop
 80132c0:	e7fe      	b.n	80132c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80132c2:	f001 f805 	bl	80142d0 <xTaskGetSchedulerState>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d102      	bne.n	80132d2 <xQueueReceive+0x6e>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d101      	bne.n	80132d6 <xQueueReceive+0x72>
 80132d2:	2301      	movs	r3, #1
 80132d4:	e000      	b.n	80132d8 <xQueueReceive+0x74>
 80132d6:	2300      	movs	r3, #0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d10a      	bne.n	80132f2 <xQueueReceive+0x8e>
	__asm volatile
 80132dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e0:	f383 8811 	msr	BASEPRI, r3
 80132e4:	f3bf 8f6f 	isb	sy
 80132e8:	f3bf 8f4f 	dsb	sy
 80132ec:	61bb      	str	r3, [r7, #24]
}
 80132ee:	bf00      	nop
 80132f0:	e7fe      	b.n	80132f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80132f2:	f001 fc0f 	bl	8014b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d01f      	beq.n	8013342 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013302:	68b9      	ldr	r1, [r7, #8]
 8013304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013306:	f000 f977 	bl	80135f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330c:	1e5a      	subs	r2, r3, #1
 801330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013310:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013314:	691b      	ldr	r3, [r3, #16]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00f      	beq.n	801333a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331c:	3310      	adds	r3, #16
 801331e:	4618      	mov	r0, r3
 8013320:	f000 fe1a 	bl	8013f58 <xTaskRemoveFromEventList>
 8013324:	4603      	mov	r3, r0
 8013326:	2b00      	cmp	r3, #0
 8013328:	d007      	beq.n	801333a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801332a:	4b3d      	ldr	r3, [pc, #244]	; (8013420 <xQueueReceive+0x1bc>)
 801332c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013330:	601a      	str	r2, [r3, #0]
 8013332:	f3bf 8f4f 	dsb	sy
 8013336:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801333a:	f001 fc1b 	bl	8014b74 <vPortExitCritical>
				return pdPASS;
 801333e:	2301      	movs	r3, #1
 8013340:	e069      	b.n	8013416 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d103      	bne.n	8013350 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013348:	f001 fc14 	bl	8014b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801334c:	2300      	movs	r3, #0
 801334e:	e062      	b.n	8013416 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013352:	2b00      	cmp	r3, #0
 8013354:	d106      	bne.n	8013364 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013356:	f107 0310 	add.w	r3, r7, #16
 801335a:	4618      	mov	r0, r3
 801335c:	f000 fe5e 	bl	801401c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013360:	2301      	movs	r3, #1
 8013362:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013364:	f001 fc06 	bl	8014b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013368:	f000 fc14 	bl	8013b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801336c:	f001 fbd2 	bl	8014b14 <vPortEnterCritical>
 8013370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013376:	b25b      	sxtb	r3, r3
 8013378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801337c:	d103      	bne.n	8013386 <xQueueReceive+0x122>
 801337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013380:	2200      	movs	r2, #0
 8013382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801338c:	b25b      	sxtb	r3, r3
 801338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013392:	d103      	bne.n	801339c <xQueueReceive+0x138>
 8013394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013396:	2200      	movs	r2, #0
 8013398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801339c:	f001 fbea 	bl	8014b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80133a0:	1d3a      	adds	r2, r7, #4
 80133a2:	f107 0310 	add.w	r3, r7, #16
 80133a6:	4611      	mov	r1, r2
 80133a8:	4618      	mov	r0, r3
 80133aa:	f000 fe4d 	bl	8014048 <xTaskCheckForTimeOut>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d123      	bne.n	80133fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80133b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133b6:	f000 f997 	bl	80136e8 <prvIsQueueEmpty>
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d017      	beq.n	80133f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80133c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c2:	3324      	adds	r3, #36	; 0x24
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	4611      	mov	r1, r2
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 fda1 	bl	8013f10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80133ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133d0:	f000 f938 	bl	8013644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80133d4:	f000 fbec 	bl	8013bb0 <xTaskResumeAll>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d189      	bne.n	80132f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80133de:	4b10      	ldr	r3, [pc, #64]	; (8013420 <xQueueReceive+0x1bc>)
 80133e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133e4:	601a      	str	r2, [r3, #0]
 80133e6:	f3bf 8f4f 	dsb	sy
 80133ea:	f3bf 8f6f 	isb	sy
 80133ee:	e780      	b.n	80132f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80133f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133f2:	f000 f927 	bl	8013644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80133f6:	f000 fbdb 	bl	8013bb0 <xTaskResumeAll>
 80133fa:	e77a      	b.n	80132f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80133fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133fe:	f000 f921 	bl	8013644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013402:	f000 fbd5 	bl	8013bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013408:	f000 f96e 	bl	80136e8 <prvIsQueueEmpty>
 801340c:	4603      	mov	r3, r0
 801340e:	2b00      	cmp	r3, #0
 8013410:	f43f af6f 	beq.w	80132f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013414:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013416:	4618      	mov	r0, r3
 8013418:	3730      	adds	r7, #48	; 0x30
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	e000ed04 	.word	0xe000ed04

08013424 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b08e      	sub	sp, #56	; 0x38
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013436:	2b00      	cmp	r3, #0
 8013438:	d10a      	bne.n	8013450 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343e:	f383 8811 	msr	BASEPRI, r3
 8013442:	f3bf 8f6f 	isb	sy
 8013446:	f3bf 8f4f 	dsb	sy
 801344a:	623b      	str	r3, [r7, #32]
}
 801344c:	bf00      	nop
 801344e:	e7fe      	b.n	801344e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d103      	bne.n	801345e <xQueueReceiveFromISR+0x3a>
 8013456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801345a:	2b00      	cmp	r3, #0
 801345c:	d101      	bne.n	8013462 <xQueueReceiveFromISR+0x3e>
 801345e:	2301      	movs	r3, #1
 8013460:	e000      	b.n	8013464 <xQueueReceiveFromISR+0x40>
 8013462:	2300      	movs	r3, #0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d10a      	bne.n	801347e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	61fb      	str	r3, [r7, #28]
}
 801347a:	bf00      	nop
 801347c:	e7fe      	b.n	801347c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801347e:	f001 fc2b 	bl	8014cd8 <vPortValidateInterruptPriority>
	__asm volatile
 8013482:	f3ef 8211 	mrs	r2, BASEPRI
 8013486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801348a:	f383 8811 	msr	BASEPRI, r3
 801348e:	f3bf 8f6f 	isb	sy
 8013492:	f3bf 8f4f 	dsb	sy
 8013496:	61ba      	str	r2, [r7, #24]
 8013498:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801349a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801349c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d02f      	beq.n	801350a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80134aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80134b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80134b4:	68b9      	ldr	r1, [r7, #8]
 80134b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134b8:	f000 f89e 	bl	80135f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80134bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134be:	1e5a      	subs	r2, r3, #1
 80134c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80134c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80134c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134cc:	d112      	bne.n	80134f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d0:	691b      	ldr	r3, [r3, #16]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d016      	beq.n	8013504 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d8:	3310      	adds	r3, #16
 80134da:	4618      	mov	r0, r3
 80134dc:	f000 fd3c 	bl	8013f58 <xTaskRemoveFromEventList>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d00e      	beq.n	8013504 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d00b      	beq.n	8013504 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2201      	movs	r2, #1
 80134f0:	601a      	str	r2, [r3, #0]
 80134f2:	e007      	b.n	8013504 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80134f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134f8:	3301      	adds	r3, #1
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	b25a      	sxtb	r2, r3
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013504:	2301      	movs	r3, #1
 8013506:	637b      	str	r3, [r7, #52]	; 0x34
 8013508:	e001      	b.n	801350e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801350a:	2300      	movs	r3, #0
 801350c:	637b      	str	r3, [r7, #52]	; 0x34
 801350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013510:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	f383 8811 	msr	BASEPRI, r3
}
 8013518:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801351c:	4618      	mov	r0, r3
 801351e:	3738      	adds	r7, #56	; 0x38
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b086      	sub	sp, #24
 8013528:	af00      	add	r7, sp, #0
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013530:	2300      	movs	r3, #0
 8013532:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013538:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801353e:	2b00      	cmp	r3, #0
 8013540:	d10d      	bne.n	801355e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d14d      	bne.n	80135e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	689b      	ldr	r3, [r3, #8]
 801354e:	4618      	mov	r0, r3
 8013550:	f000 fedc 	bl	801430c <xTaskPriorityDisinherit>
 8013554:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2200      	movs	r2, #0
 801355a:	609a      	str	r2, [r3, #8]
 801355c:	e043      	b.n	80135e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d119      	bne.n	8013598 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	6858      	ldr	r0, [r3, #4]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801356c:	461a      	mov	r2, r3
 801356e:	68b9      	ldr	r1, [r7, #8]
 8013570:	f002 fb56 	bl	8015c20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	685a      	ldr	r2, [r3, #4]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801357c:	441a      	add	r2, r3
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	685a      	ldr	r2, [r3, #4]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	689b      	ldr	r3, [r3, #8]
 801358a:	429a      	cmp	r2, r3
 801358c:	d32b      	bcc.n	80135e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	605a      	str	r2, [r3, #4]
 8013596:	e026      	b.n	80135e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	68d8      	ldr	r0, [r3, #12]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a0:	461a      	mov	r2, r3
 80135a2:	68b9      	ldr	r1, [r7, #8]
 80135a4:	f002 fb3c 	bl	8015c20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	68da      	ldr	r2, [r3, #12]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b0:	425b      	negs	r3, r3
 80135b2:	441a      	add	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	68da      	ldr	r2, [r3, #12]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d207      	bcs.n	80135d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	689a      	ldr	r2, [r3, #8]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135cc:	425b      	negs	r3, r3
 80135ce:	441a      	add	r2, r3
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b02      	cmp	r3, #2
 80135d8:	d105      	bne.n	80135e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d002      	beq.n	80135e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	3b01      	subs	r3, #1
 80135e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	1c5a      	adds	r2, r3, #1
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80135ee:	697b      	ldr	r3, [r7, #20]
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3718      	adds	r7, #24
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013606:	2b00      	cmp	r3, #0
 8013608:	d018      	beq.n	801363c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	68da      	ldr	r2, [r3, #12]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013612:	441a      	add	r2, r3
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	68da      	ldr	r2, [r3, #12]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	689b      	ldr	r3, [r3, #8]
 8013620:	429a      	cmp	r2, r3
 8013622:	d303      	bcc.n	801362c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	68d9      	ldr	r1, [r3, #12]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013634:	461a      	mov	r2, r3
 8013636:	6838      	ldr	r0, [r7, #0]
 8013638:	f002 faf2 	bl	8015c20 <memcpy>
	}
}
 801363c:	bf00      	nop
 801363e:	3708      	adds	r7, #8
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b084      	sub	sp, #16
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801364c:	f001 fa62 	bl	8014b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013658:	e011      	b.n	801367e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801365e:	2b00      	cmp	r3, #0
 8013660:	d012      	beq.n	8013688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	3324      	adds	r3, #36	; 0x24
 8013666:	4618      	mov	r0, r3
 8013668:	f000 fc76 	bl	8013f58 <xTaskRemoveFromEventList>
 801366c:	4603      	mov	r3, r0
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013672:	f000 fd4b 	bl	801410c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013676:	7bfb      	ldrb	r3, [r7, #15]
 8013678:	3b01      	subs	r3, #1
 801367a:	b2db      	uxtb	r3, r3
 801367c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013682:	2b00      	cmp	r3, #0
 8013684:	dce9      	bgt.n	801365a <prvUnlockQueue+0x16>
 8013686:	e000      	b.n	801368a <prvUnlockQueue+0x46>
					break;
 8013688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	22ff      	movs	r2, #255	; 0xff
 801368e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013692:	f001 fa6f 	bl	8014b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013696:	f001 fa3d 	bl	8014b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136a2:	e011      	b.n	80136c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	691b      	ldr	r3, [r3, #16]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d012      	beq.n	80136d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	3310      	adds	r3, #16
 80136b0:	4618      	mov	r0, r3
 80136b2:	f000 fc51 	bl	8013f58 <xTaskRemoveFromEventList>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d001      	beq.n	80136c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80136bc:	f000 fd26 	bl	801410c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80136c0:	7bbb      	ldrb	r3, [r7, #14]
 80136c2:	3b01      	subs	r3, #1
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	dce9      	bgt.n	80136a4 <prvUnlockQueue+0x60>
 80136d0:	e000      	b.n	80136d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80136d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	22ff      	movs	r2, #255	; 0xff
 80136d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80136dc:	f001 fa4a 	bl	8014b74 <vPortExitCritical>
}
 80136e0:	bf00      	nop
 80136e2:	3710      	adds	r7, #16
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b084      	sub	sp, #16
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136f0:	f001 fa10 	bl	8014b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d102      	bne.n	8013702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80136fc:	2301      	movs	r3, #1
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	e001      	b.n	8013706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013702:	2300      	movs	r3, #0
 8013704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013706:	f001 fa35 	bl	8014b74 <vPortExitCritical>

	return xReturn;
 801370a:	68fb      	ldr	r3, [r7, #12]
}
 801370c:	4618      	mov	r0, r3
 801370e:	3710      	adds	r7, #16
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801371c:	f001 f9fa 	bl	8014b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013728:	429a      	cmp	r2, r3
 801372a:	d102      	bne.n	8013732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801372c:	2301      	movs	r3, #1
 801372e:	60fb      	str	r3, [r7, #12]
 8013730:	e001      	b.n	8013736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013732:	2300      	movs	r3, #0
 8013734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013736:	f001 fa1d 	bl	8014b74 <vPortExitCritical>

	return xReturn;
 801373a:	68fb      	ldr	r3, [r7, #12]
}
 801373c:	4618      	mov	r0, r3
 801373e:	3710      	adds	r7, #16
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013744:	b580      	push	{r7, lr}
 8013746:	b08e      	sub	sp, #56	; 0x38
 8013748:	af04      	add	r7, sp, #16
 801374a:	60f8      	str	r0, [r7, #12]
 801374c:	60b9      	str	r1, [r7, #8]
 801374e:	607a      	str	r2, [r7, #4]
 8013750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013754:	2b00      	cmp	r3, #0
 8013756:	d10a      	bne.n	801376e <xTaskCreateStatic+0x2a>
	__asm volatile
 8013758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801375c:	f383 8811 	msr	BASEPRI, r3
 8013760:	f3bf 8f6f 	isb	sy
 8013764:	f3bf 8f4f 	dsb	sy
 8013768:	623b      	str	r3, [r7, #32]
}
 801376a:	bf00      	nop
 801376c:	e7fe      	b.n	801376c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013770:	2b00      	cmp	r3, #0
 8013772:	d10a      	bne.n	801378a <xTaskCreateStatic+0x46>
	__asm volatile
 8013774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013778:	f383 8811 	msr	BASEPRI, r3
 801377c:	f3bf 8f6f 	isb	sy
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	61fb      	str	r3, [r7, #28]
}
 8013786:	bf00      	nop
 8013788:	e7fe      	b.n	8013788 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801378a:	2354      	movs	r3, #84	; 0x54
 801378c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	2b54      	cmp	r3, #84	; 0x54
 8013792:	d00a      	beq.n	80137aa <xTaskCreateStatic+0x66>
	__asm volatile
 8013794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013798:	f383 8811 	msr	BASEPRI, r3
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	61bb      	str	r3, [r7, #24]
}
 80137a6:	bf00      	nop
 80137a8:	e7fe      	b.n	80137a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80137aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80137ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d01e      	beq.n	80137f0 <xTaskCreateStatic+0xac>
 80137b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d01b      	beq.n	80137f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80137b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80137bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80137c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c4:	2202      	movs	r2, #2
 80137c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80137ca:	2300      	movs	r3, #0
 80137cc:	9303      	str	r3, [sp, #12]
 80137ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d0:	9302      	str	r3, [sp, #8]
 80137d2:	f107 0314 	add.w	r3, r7, #20
 80137d6:	9301      	str	r3, [sp, #4]
 80137d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	68b9      	ldr	r1, [r7, #8]
 80137e2:	68f8      	ldr	r0, [r7, #12]
 80137e4:	f000 f850 	bl	8013888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80137e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137ea:	f000 f8d5 	bl	8013998 <prvAddNewTaskToReadyList>
 80137ee:	e001      	b.n	80137f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80137f0:	2300      	movs	r3, #0
 80137f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80137f4:	697b      	ldr	r3, [r7, #20]
	}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3728      	adds	r7, #40	; 0x28
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}

080137fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80137fe:	b580      	push	{r7, lr}
 8013800:	b08c      	sub	sp, #48	; 0x30
 8013802:	af04      	add	r7, sp, #16
 8013804:	60f8      	str	r0, [r7, #12]
 8013806:	60b9      	str	r1, [r7, #8]
 8013808:	603b      	str	r3, [r7, #0]
 801380a:	4613      	mov	r3, r2
 801380c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801380e:	88fb      	ldrh	r3, [r7, #6]
 8013810:	009b      	lsls	r3, r3, #2
 8013812:	4618      	mov	r0, r3
 8013814:	f001 faa0 	bl	8014d58 <pvPortMalloc>
 8013818:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00e      	beq.n	801383e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013820:	2054      	movs	r0, #84	; 0x54
 8013822:	f001 fa99 	bl	8014d58 <pvPortMalloc>
 8013826:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d003      	beq.n	8013836 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	697a      	ldr	r2, [r7, #20]
 8013832:	631a      	str	r2, [r3, #48]	; 0x30
 8013834:	e005      	b.n	8013842 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013836:	6978      	ldr	r0, [r7, #20]
 8013838:	f001 fb52 	bl	8014ee0 <vPortFree>
 801383c:	e001      	b.n	8013842 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801383e:	2300      	movs	r3, #0
 8013840:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d017      	beq.n	8013878 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	2200      	movs	r2, #0
 801384c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013850:	88fa      	ldrh	r2, [r7, #6]
 8013852:	2300      	movs	r3, #0
 8013854:	9303      	str	r3, [sp, #12]
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	9302      	str	r3, [sp, #8]
 801385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013860:	9300      	str	r3, [sp, #0]
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	68b9      	ldr	r1, [r7, #8]
 8013866:	68f8      	ldr	r0, [r7, #12]
 8013868:	f000 f80e 	bl	8013888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801386c:	69f8      	ldr	r0, [r7, #28]
 801386e:	f000 f893 	bl	8013998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013872:	2301      	movs	r3, #1
 8013874:	61bb      	str	r3, [r7, #24]
 8013876:	e002      	b.n	801387e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013878:	f04f 33ff 	mov.w	r3, #4294967295
 801387c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801387e:	69bb      	ldr	r3, [r7, #24]
	}
 8013880:	4618      	mov	r0, r3
 8013882:	3720      	adds	r7, #32
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b088      	sub	sp, #32
 801388c:	af00      	add	r7, sp, #0
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80138a0:	3b01      	subs	r3, #1
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	4413      	add	r3, r2
 80138a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	f023 0307 	bic.w	r3, r3, #7
 80138ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	f003 0307 	and.w	r3, r3, #7
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00a      	beq.n	80138d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80138ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	617b      	str	r3, [r7, #20]
}
 80138cc:	bf00      	nop
 80138ce:	e7fe      	b.n	80138ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d01f      	beq.n	8013916 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138d6:	2300      	movs	r3, #0
 80138d8:	61fb      	str	r3, [r7, #28]
 80138da:	e012      	b.n	8013902 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138dc:	68ba      	ldr	r2, [r7, #8]
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	4413      	add	r3, r2
 80138e2:	7819      	ldrb	r1, [r3, #0]
 80138e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	4413      	add	r3, r2
 80138ea:	3334      	adds	r3, #52	; 0x34
 80138ec:	460a      	mov	r2, r1
 80138ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80138f0:	68ba      	ldr	r2, [r7, #8]
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	4413      	add	r3, r2
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d006      	beq.n	801390a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	3301      	adds	r3, #1
 8013900:	61fb      	str	r3, [r7, #28]
 8013902:	69fb      	ldr	r3, [r7, #28]
 8013904:	2b0f      	cmp	r3, #15
 8013906:	d9e9      	bls.n	80138dc <prvInitialiseNewTask+0x54>
 8013908:	e000      	b.n	801390c <prvInitialiseNewTask+0x84>
			{
				break;
 801390a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801390e:	2200      	movs	r2, #0
 8013910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013914:	e003      	b.n	801391e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013918:	2200      	movs	r2, #0
 801391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013920:	2b06      	cmp	r3, #6
 8013922:	d901      	bls.n	8013928 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013924:	2306      	movs	r3, #6
 8013926:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801392c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013932:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013936:	2200      	movs	r2, #0
 8013938:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	3304      	adds	r3, #4
 801393e:	4618      	mov	r0, r3
 8013940:	f7ff f8d9 	bl	8012af6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013946:	3318      	adds	r3, #24
 8013948:	4618      	mov	r0, r3
 801394a:	f7ff f8d4 	bl	8012af6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013952:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013956:	f1c3 0207 	rsb	r2, r3, #7
 801395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013962:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013966:	2200      	movs	r2, #0
 8013968:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	2200      	movs	r2, #0
 801396e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013972:	683a      	ldr	r2, [r7, #0]
 8013974:	68f9      	ldr	r1, [r7, #12]
 8013976:	69b8      	ldr	r0, [r7, #24]
 8013978:	f000 ff9e 	bl	80148b8 <pxPortInitialiseStack>
 801397c:	4602      	mov	r2, r0
 801397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013980:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013984:	2b00      	cmp	r3, #0
 8013986:	d002      	beq.n	801398e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801398c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801398e:	bf00      	nop
 8013990:	3720      	adds	r7, #32
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
	...

08013998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80139a0:	f001 f8b8 	bl	8014b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80139a4:	4b2a      	ldr	r3, [pc, #168]	; (8013a50 <prvAddNewTaskToReadyList+0xb8>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	3301      	adds	r3, #1
 80139aa:	4a29      	ldr	r2, [pc, #164]	; (8013a50 <prvAddNewTaskToReadyList+0xb8>)
 80139ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80139ae:	4b29      	ldr	r3, [pc, #164]	; (8013a54 <prvAddNewTaskToReadyList+0xbc>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d109      	bne.n	80139ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80139b6:	4a27      	ldr	r2, [pc, #156]	; (8013a54 <prvAddNewTaskToReadyList+0xbc>)
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80139bc:	4b24      	ldr	r3, [pc, #144]	; (8013a50 <prvAddNewTaskToReadyList+0xb8>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2b01      	cmp	r3, #1
 80139c2:	d110      	bne.n	80139e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80139c4:	f000 fbc6 	bl	8014154 <prvInitialiseTaskLists>
 80139c8:	e00d      	b.n	80139e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80139ca:	4b23      	ldr	r3, [pc, #140]	; (8013a58 <prvAddNewTaskToReadyList+0xc0>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d109      	bne.n	80139e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80139d2:	4b20      	ldr	r3, [pc, #128]	; (8013a54 <prvAddNewTaskToReadyList+0xbc>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139dc:	429a      	cmp	r2, r3
 80139de:	d802      	bhi.n	80139e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80139e0:	4a1c      	ldr	r2, [pc, #112]	; (8013a54 <prvAddNewTaskToReadyList+0xbc>)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80139e6:	4b1d      	ldr	r3, [pc, #116]	; (8013a5c <prvAddNewTaskToReadyList+0xc4>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	3301      	adds	r3, #1
 80139ec:	4a1b      	ldr	r2, [pc, #108]	; (8013a5c <prvAddNewTaskToReadyList+0xc4>)
 80139ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f4:	2201      	movs	r2, #1
 80139f6:	409a      	lsls	r2, r3
 80139f8:	4b19      	ldr	r3, [pc, #100]	; (8013a60 <prvAddNewTaskToReadyList+0xc8>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4313      	orrs	r3, r2
 80139fe:	4a18      	ldr	r2, [pc, #96]	; (8013a60 <prvAddNewTaskToReadyList+0xc8>)
 8013a00:	6013      	str	r3, [r2, #0]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a06:	4613      	mov	r3, r2
 8013a08:	009b      	lsls	r3, r3, #2
 8013a0a:	4413      	add	r3, r2
 8013a0c:	009b      	lsls	r3, r3, #2
 8013a0e:	4a15      	ldr	r2, [pc, #84]	; (8013a64 <prvAddNewTaskToReadyList+0xcc>)
 8013a10:	441a      	add	r2, r3
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	3304      	adds	r3, #4
 8013a16:	4619      	mov	r1, r3
 8013a18:	4610      	mov	r0, r2
 8013a1a:	f7ff f879 	bl	8012b10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a1e:	f001 f8a9 	bl	8014b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a22:	4b0d      	ldr	r3, [pc, #52]	; (8013a58 <prvAddNewTaskToReadyList+0xc0>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00e      	beq.n	8013a48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013a2a:	4b0a      	ldr	r3, [pc, #40]	; (8013a54 <prvAddNewTaskToReadyList+0xbc>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d207      	bcs.n	8013a48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013a38:	4b0b      	ldr	r3, [pc, #44]	; (8013a68 <prvAddNewTaskToReadyList+0xd0>)
 8013a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a3e:	601a      	str	r2, [r3, #0]
 8013a40:	f3bf 8f4f 	dsb	sy
 8013a44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a48:	bf00      	nop
 8013a4a:	3708      	adds	r7, #8
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	2000296c 	.word	0x2000296c
 8013a54:	2000286c 	.word	0x2000286c
 8013a58:	20002978 	.word	0x20002978
 8013a5c:	20002988 	.word	0x20002988
 8013a60:	20002974 	.word	0x20002974
 8013a64:	20002870 	.word	0x20002870
 8013a68:	e000ed04 	.word	0xe000ed04

08013a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013a74:	2300      	movs	r3, #0
 8013a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d017      	beq.n	8013aae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013a7e:	4b13      	ldr	r3, [pc, #76]	; (8013acc <vTaskDelay+0x60>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d00a      	beq.n	8013a9c <vTaskDelay+0x30>
	__asm volatile
 8013a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a8a:	f383 8811 	msr	BASEPRI, r3
 8013a8e:	f3bf 8f6f 	isb	sy
 8013a92:	f3bf 8f4f 	dsb	sy
 8013a96:	60bb      	str	r3, [r7, #8]
}
 8013a98:	bf00      	nop
 8013a9a:	e7fe      	b.n	8013a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013a9c:	f000 f87a 	bl	8013b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f000 fea2 	bl	80147ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013aa8:	f000 f882 	bl	8013bb0 <xTaskResumeAll>
 8013aac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d107      	bne.n	8013ac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013ab4:	4b06      	ldr	r3, [pc, #24]	; (8013ad0 <vTaskDelay+0x64>)
 8013ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aba:	601a      	str	r2, [r3, #0]
 8013abc:	f3bf 8f4f 	dsb	sy
 8013ac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ac4:	bf00      	nop
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	20002994 	.word	0x20002994
 8013ad0:	e000ed04 	.word	0xe000ed04

08013ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b08a      	sub	sp, #40	; 0x28
 8013ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013ada:	2300      	movs	r3, #0
 8013adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013ae2:	463a      	mov	r2, r7
 8013ae4:	1d39      	adds	r1, r7, #4
 8013ae6:	f107 0308 	add.w	r3, r7, #8
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7ee fd6c 	bl	80025c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013af0:	6839      	ldr	r1, [r7, #0]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	9202      	str	r2, [sp, #8]
 8013af8:	9301      	str	r3, [sp, #4]
 8013afa:	2300      	movs	r3, #0
 8013afc:	9300      	str	r3, [sp, #0]
 8013afe:	2300      	movs	r3, #0
 8013b00:	460a      	mov	r2, r1
 8013b02:	491e      	ldr	r1, [pc, #120]	; (8013b7c <vTaskStartScheduler+0xa8>)
 8013b04:	481e      	ldr	r0, [pc, #120]	; (8013b80 <vTaskStartScheduler+0xac>)
 8013b06:	f7ff fe1d 	bl	8013744 <xTaskCreateStatic>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	4a1d      	ldr	r2, [pc, #116]	; (8013b84 <vTaskStartScheduler+0xb0>)
 8013b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013b10:	4b1c      	ldr	r3, [pc, #112]	; (8013b84 <vTaskStartScheduler+0xb0>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d002      	beq.n	8013b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	617b      	str	r3, [r7, #20]
 8013b1c:	e001      	b.n	8013b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d116      	bne.n	8013b56 <vTaskStartScheduler+0x82>
	__asm volatile
 8013b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2c:	f383 8811 	msr	BASEPRI, r3
 8013b30:	f3bf 8f6f 	isb	sy
 8013b34:	f3bf 8f4f 	dsb	sy
 8013b38:	613b      	str	r3, [r7, #16]
}
 8013b3a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013b3c:	4b12      	ldr	r3, [pc, #72]	; (8013b88 <vTaskStartScheduler+0xb4>)
 8013b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013b44:	4b11      	ldr	r3, [pc, #68]	; (8013b8c <vTaskStartScheduler+0xb8>)
 8013b46:	2201      	movs	r2, #1
 8013b48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013b4a:	4b11      	ldr	r3, [pc, #68]	; (8013b90 <vTaskStartScheduler+0xbc>)
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013b50:	f000 ff3e 	bl	80149d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013b54:	e00e      	b.n	8013b74 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b5c:	d10a      	bne.n	8013b74 <vTaskStartScheduler+0xa0>
	__asm volatile
 8013b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	60fb      	str	r3, [r7, #12]
}
 8013b70:	bf00      	nop
 8013b72:	e7fe      	b.n	8013b72 <vTaskStartScheduler+0x9e>
}
 8013b74:	bf00      	nop
 8013b76:	3718      	adds	r7, #24
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	0801c144 	.word	0x0801c144
 8013b80:	08014125 	.word	0x08014125
 8013b84:	20002990 	.word	0x20002990
 8013b88:	2000298c 	.word	0x2000298c
 8013b8c:	20002978 	.word	0x20002978
 8013b90:	20002970 	.word	0x20002970

08013b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b94:	b480      	push	{r7}
 8013b96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013b98:	4b04      	ldr	r3, [pc, #16]	; (8013bac <vTaskSuspendAll+0x18>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	4a03      	ldr	r2, [pc, #12]	; (8013bac <vTaskSuspendAll+0x18>)
 8013ba0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013ba2:	bf00      	nop
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr
 8013bac:	20002994 	.word	0x20002994

08013bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013bbe:	4b41      	ldr	r3, [pc, #260]	; (8013cc4 <xTaskResumeAll+0x114>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d10a      	bne.n	8013bdc <xTaskResumeAll+0x2c>
	__asm volatile
 8013bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bca:	f383 8811 	msr	BASEPRI, r3
 8013bce:	f3bf 8f6f 	isb	sy
 8013bd2:	f3bf 8f4f 	dsb	sy
 8013bd6:	603b      	str	r3, [r7, #0]
}
 8013bd8:	bf00      	nop
 8013bda:	e7fe      	b.n	8013bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013bdc:	f000 ff9a 	bl	8014b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013be0:	4b38      	ldr	r3, [pc, #224]	; (8013cc4 <xTaskResumeAll+0x114>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	3b01      	subs	r3, #1
 8013be6:	4a37      	ldr	r2, [pc, #220]	; (8013cc4 <xTaskResumeAll+0x114>)
 8013be8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bea:	4b36      	ldr	r3, [pc, #216]	; (8013cc4 <xTaskResumeAll+0x114>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d161      	bne.n	8013cb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013bf2:	4b35      	ldr	r3, [pc, #212]	; (8013cc8 <xTaskResumeAll+0x118>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d05d      	beq.n	8013cb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bfa:	e02e      	b.n	8013c5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bfc:	4b33      	ldr	r3, [pc, #204]	; (8013ccc <xTaskResumeAll+0x11c>)
 8013bfe:	68db      	ldr	r3, [r3, #12]
 8013c00:	68db      	ldr	r3, [r3, #12]
 8013c02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	3318      	adds	r3, #24
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7fe ffde 	bl	8012bca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	3304      	adds	r3, #4
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fe ffd9 	bl	8012bca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	409a      	lsls	r2, r3
 8013c20:	4b2b      	ldr	r3, [pc, #172]	; (8013cd0 <xTaskResumeAll+0x120>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	4313      	orrs	r3, r2
 8013c26:	4a2a      	ldr	r2, [pc, #168]	; (8013cd0 <xTaskResumeAll+0x120>)
 8013c28:	6013      	str	r3, [r2, #0]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c2e:	4613      	mov	r3, r2
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	4413      	add	r3, r2
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	4a27      	ldr	r2, [pc, #156]	; (8013cd4 <xTaskResumeAll+0x124>)
 8013c38:	441a      	add	r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	3304      	adds	r3, #4
 8013c3e:	4619      	mov	r1, r3
 8013c40:	4610      	mov	r0, r2
 8013c42:	f7fe ff65 	bl	8012b10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c4a:	4b23      	ldr	r3, [pc, #140]	; (8013cd8 <xTaskResumeAll+0x128>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d302      	bcc.n	8013c5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013c54:	4b21      	ldr	r3, [pc, #132]	; (8013cdc <xTaskResumeAll+0x12c>)
 8013c56:	2201      	movs	r2, #1
 8013c58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c5a:	4b1c      	ldr	r3, [pc, #112]	; (8013ccc <xTaskResumeAll+0x11c>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d1cc      	bne.n	8013bfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d001      	beq.n	8013c6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c68:	f000 fb12 	bl	8014290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013c6c:	4b1c      	ldr	r3, [pc, #112]	; (8013ce0 <xTaskResumeAll+0x130>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d010      	beq.n	8013c9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c78:	f000 f836 	bl	8013ce8 <xTaskIncrementTick>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d002      	beq.n	8013c88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013c82:	4b16      	ldr	r3, [pc, #88]	; (8013cdc <xTaskResumeAll+0x12c>)
 8013c84:	2201      	movs	r2, #1
 8013c86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	3b01      	subs	r3, #1
 8013c8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d1f1      	bne.n	8013c78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013c94:	4b12      	ldr	r3, [pc, #72]	; (8013ce0 <xTaskResumeAll+0x130>)
 8013c96:	2200      	movs	r2, #0
 8013c98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c9a:	4b10      	ldr	r3, [pc, #64]	; (8013cdc <xTaskResumeAll+0x12c>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d009      	beq.n	8013cb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013ca6:	4b0f      	ldr	r3, [pc, #60]	; (8013ce4 <xTaskResumeAll+0x134>)
 8013ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cac:	601a      	str	r2, [r3, #0]
 8013cae:	f3bf 8f4f 	dsb	sy
 8013cb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013cb6:	f000 ff5d 	bl	8014b74 <vPortExitCritical>

	return xAlreadyYielded;
 8013cba:	68bb      	ldr	r3, [r7, #8]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3710      	adds	r7, #16
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	20002994 	.word	0x20002994
 8013cc8:	2000296c 	.word	0x2000296c
 8013ccc:	2000292c 	.word	0x2000292c
 8013cd0:	20002974 	.word	0x20002974
 8013cd4:	20002870 	.word	0x20002870
 8013cd8:	2000286c 	.word	0x2000286c
 8013cdc:	20002980 	.word	0x20002980
 8013ce0:	2000297c 	.word	0x2000297c
 8013ce4:	e000ed04 	.word	0xe000ed04

08013ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b086      	sub	sp, #24
 8013cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cf2:	4b4e      	ldr	r3, [pc, #312]	; (8013e2c <xTaskIncrementTick+0x144>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	f040 8088 	bne.w	8013e0c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013cfc:	4b4c      	ldr	r3, [pc, #304]	; (8013e30 <xTaskIncrementTick+0x148>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	3301      	adds	r3, #1
 8013d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d04:	4a4a      	ldr	r2, [pc, #296]	; (8013e30 <xTaskIncrementTick+0x148>)
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d120      	bne.n	8013d52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d10:	4b48      	ldr	r3, [pc, #288]	; (8013e34 <xTaskIncrementTick+0x14c>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d00a      	beq.n	8013d30 <xTaskIncrementTick+0x48>
	__asm volatile
 8013d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1e:	f383 8811 	msr	BASEPRI, r3
 8013d22:	f3bf 8f6f 	isb	sy
 8013d26:	f3bf 8f4f 	dsb	sy
 8013d2a:	603b      	str	r3, [r7, #0]
}
 8013d2c:	bf00      	nop
 8013d2e:	e7fe      	b.n	8013d2e <xTaskIncrementTick+0x46>
 8013d30:	4b40      	ldr	r3, [pc, #256]	; (8013e34 <xTaskIncrementTick+0x14c>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	60fb      	str	r3, [r7, #12]
 8013d36:	4b40      	ldr	r3, [pc, #256]	; (8013e38 <xTaskIncrementTick+0x150>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4a3e      	ldr	r2, [pc, #248]	; (8013e34 <xTaskIncrementTick+0x14c>)
 8013d3c:	6013      	str	r3, [r2, #0]
 8013d3e:	4a3e      	ldr	r2, [pc, #248]	; (8013e38 <xTaskIncrementTick+0x150>)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	6013      	str	r3, [r2, #0]
 8013d44:	4b3d      	ldr	r3, [pc, #244]	; (8013e3c <xTaskIncrementTick+0x154>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	4a3c      	ldr	r2, [pc, #240]	; (8013e3c <xTaskIncrementTick+0x154>)
 8013d4c:	6013      	str	r3, [r2, #0]
 8013d4e:	f000 fa9f 	bl	8014290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d52:	4b3b      	ldr	r3, [pc, #236]	; (8013e40 <xTaskIncrementTick+0x158>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	693a      	ldr	r2, [r7, #16]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d348      	bcc.n	8013dee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d5c:	4b35      	ldr	r3, [pc, #212]	; (8013e34 <xTaskIncrementTick+0x14c>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d104      	bne.n	8013d70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d66:	4b36      	ldr	r3, [pc, #216]	; (8013e40 <xTaskIncrementTick+0x158>)
 8013d68:	f04f 32ff 	mov.w	r2, #4294967295
 8013d6c:	601a      	str	r2, [r3, #0]
					break;
 8013d6e:	e03e      	b.n	8013dee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d70:	4b30      	ldr	r3, [pc, #192]	; (8013e34 <xTaskIncrementTick+0x14c>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	68db      	ldr	r3, [r3, #12]
 8013d76:	68db      	ldr	r3, [r3, #12]
 8013d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d80:	693a      	ldr	r2, [r7, #16]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d203      	bcs.n	8013d90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d88:	4a2d      	ldr	r2, [pc, #180]	; (8013e40 <xTaskIncrementTick+0x158>)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d8e:	e02e      	b.n	8013dee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	3304      	adds	r3, #4
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7fe ff18 	bl	8012bca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d004      	beq.n	8013dac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	3318      	adds	r3, #24
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fe ff0f 	bl	8012bca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db0:	2201      	movs	r2, #1
 8013db2:	409a      	lsls	r2, r3
 8013db4:	4b23      	ldr	r3, [pc, #140]	; (8013e44 <xTaskIncrementTick+0x15c>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4313      	orrs	r3, r2
 8013dba:	4a22      	ldr	r2, [pc, #136]	; (8013e44 <xTaskIncrementTick+0x15c>)
 8013dbc:	6013      	str	r3, [r2, #0]
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	009b      	lsls	r3, r3, #2
 8013dc6:	4413      	add	r3, r2
 8013dc8:	009b      	lsls	r3, r3, #2
 8013dca:	4a1f      	ldr	r2, [pc, #124]	; (8013e48 <xTaskIncrementTick+0x160>)
 8013dcc:	441a      	add	r2, r3
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	3304      	adds	r3, #4
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	4610      	mov	r0, r2
 8013dd6:	f7fe fe9b 	bl	8012b10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dde:	4b1b      	ldr	r3, [pc, #108]	; (8013e4c <xTaskIncrementTick+0x164>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d3b9      	bcc.n	8013d5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013de8:	2301      	movs	r3, #1
 8013dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dec:	e7b6      	b.n	8013d5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013dee:	4b17      	ldr	r3, [pc, #92]	; (8013e4c <xTaskIncrementTick+0x164>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013df4:	4914      	ldr	r1, [pc, #80]	; (8013e48 <xTaskIncrementTick+0x160>)
 8013df6:	4613      	mov	r3, r2
 8013df8:	009b      	lsls	r3, r3, #2
 8013dfa:	4413      	add	r3, r2
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	440b      	add	r3, r1
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d907      	bls.n	8013e16 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8013e06:	2301      	movs	r3, #1
 8013e08:	617b      	str	r3, [r7, #20]
 8013e0a:	e004      	b.n	8013e16 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013e0c:	4b10      	ldr	r3, [pc, #64]	; (8013e50 <xTaskIncrementTick+0x168>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	3301      	adds	r3, #1
 8013e12:	4a0f      	ldr	r2, [pc, #60]	; (8013e50 <xTaskIncrementTick+0x168>)
 8013e14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013e16:	4b0f      	ldr	r3, [pc, #60]	; (8013e54 <xTaskIncrementTick+0x16c>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d001      	beq.n	8013e22 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8013e1e:	2301      	movs	r3, #1
 8013e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013e22:	697b      	ldr	r3, [r7, #20]
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3718      	adds	r7, #24
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	20002994 	.word	0x20002994
 8013e30:	20002970 	.word	0x20002970
 8013e34:	20002924 	.word	0x20002924
 8013e38:	20002928 	.word	0x20002928
 8013e3c:	20002984 	.word	0x20002984
 8013e40:	2000298c 	.word	0x2000298c
 8013e44:	20002974 	.word	0x20002974
 8013e48:	20002870 	.word	0x20002870
 8013e4c:	2000286c 	.word	0x2000286c
 8013e50:	2000297c 	.word	0x2000297c
 8013e54:	20002980 	.word	0x20002980

08013e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b087      	sub	sp, #28
 8013e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e5e:	4b27      	ldr	r3, [pc, #156]	; (8013efc <vTaskSwitchContext+0xa4>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d003      	beq.n	8013e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e66:	4b26      	ldr	r3, [pc, #152]	; (8013f00 <vTaskSwitchContext+0xa8>)
 8013e68:	2201      	movs	r2, #1
 8013e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e6c:	e03f      	b.n	8013eee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8013e6e:	4b24      	ldr	r3, [pc, #144]	; (8013f00 <vTaskSwitchContext+0xa8>)
 8013e70:	2200      	movs	r2, #0
 8013e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e74:	4b23      	ldr	r3, [pc, #140]	; (8013f04 <vTaskSwitchContext+0xac>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	fab3 f383 	clz	r3, r3
 8013e80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013e82:	7afb      	ldrb	r3, [r7, #11]
 8013e84:	f1c3 031f 	rsb	r3, r3, #31
 8013e88:	617b      	str	r3, [r7, #20]
 8013e8a:	491f      	ldr	r1, [pc, #124]	; (8013f08 <vTaskSwitchContext+0xb0>)
 8013e8c:	697a      	ldr	r2, [r7, #20]
 8013e8e:	4613      	mov	r3, r2
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	4413      	add	r3, r2
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	440b      	add	r3, r1
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d10a      	bne.n	8013eb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8013e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea2:	f383 8811 	msr	BASEPRI, r3
 8013ea6:	f3bf 8f6f 	isb	sy
 8013eaa:	f3bf 8f4f 	dsb	sy
 8013eae:	607b      	str	r3, [r7, #4]
}
 8013eb0:	bf00      	nop
 8013eb2:	e7fe      	b.n	8013eb2 <vTaskSwitchContext+0x5a>
 8013eb4:	697a      	ldr	r2, [r7, #20]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	009b      	lsls	r3, r3, #2
 8013eba:	4413      	add	r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	4a12      	ldr	r2, [pc, #72]	; (8013f08 <vTaskSwitchContext+0xb0>)
 8013ec0:	4413      	add	r3, r2
 8013ec2:	613b      	str	r3, [r7, #16]
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	685a      	ldr	r2, [r3, #4]
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	605a      	str	r2, [r3, #4]
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	3308      	adds	r3, #8
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d104      	bne.n	8013ee4 <vTaskSwitchContext+0x8c>
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	685a      	ldr	r2, [r3, #4]
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	605a      	str	r2, [r3, #4]
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	4a08      	ldr	r2, [pc, #32]	; (8013f0c <vTaskSwitchContext+0xb4>)
 8013eec:	6013      	str	r3, [r2, #0]
}
 8013eee:	bf00      	nop
 8013ef0:	371c      	adds	r7, #28
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr
 8013efa:	bf00      	nop
 8013efc:	20002994 	.word	0x20002994
 8013f00:	20002980 	.word	0x20002980
 8013f04:	20002974 	.word	0x20002974
 8013f08:	20002870 	.word	0x20002870
 8013f0c:	2000286c 	.word	0x2000286c

08013f10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d10a      	bne.n	8013f36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f24:	f383 8811 	msr	BASEPRI, r3
 8013f28:	f3bf 8f6f 	isb	sy
 8013f2c:	f3bf 8f4f 	dsb	sy
 8013f30:	60fb      	str	r3, [r7, #12]
}
 8013f32:	bf00      	nop
 8013f34:	e7fe      	b.n	8013f34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f36:	4b07      	ldr	r3, [pc, #28]	; (8013f54 <vTaskPlaceOnEventList+0x44>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	3318      	adds	r3, #24
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7fe fe0a 	bl	8012b58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f44:	2101      	movs	r1, #1
 8013f46:	6838      	ldr	r0, [r7, #0]
 8013f48:	f000 fc50 	bl	80147ec <prvAddCurrentTaskToDelayedList>
}
 8013f4c:	bf00      	nop
 8013f4e:	3710      	adds	r7, #16
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	2000286c 	.word	0x2000286c

08013f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b086      	sub	sp, #24
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	68db      	ldr	r3, [r3, #12]
 8013f64:	68db      	ldr	r3, [r3, #12]
 8013f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d10a      	bne.n	8013f84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f72:	f383 8811 	msr	BASEPRI, r3
 8013f76:	f3bf 8f6f 	isb	sy
 8013f7a:	f3bf 8f4f 	dsb	sy
 8013f7e:	60fb      	str	r3, [r7, #12]
}
 8013f80:	bf00      	nop
 8013f82:	e7fe      	b.n	8013f82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	3318      	adds	r3, #24
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7fe fe1e 	bl	8012bca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f8e:	4b1d      	ldr	r3, [pc, #116]	; (8014004 <xTaskRemoveFromEventList+0xac>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d11c      	bne.n	8013fd0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	3304      	adds	r3, #4
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fe fe15 	bl	8012bca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	409a      	lsls	r2, r3
 8013fa8:	4b17      	ldr	r3, [pc, #92]	; (8014008 <xTaskRemoveFromEventList+0xb0>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	4313      	orrs	r3, r2
 8013fae:	4a16      	ldr	r2, [pc, #88]	; (8014008 <xTaskRemoveFromEventList+0xb0>)
 8013fb0:	6013      	str	r3, [r2, #0]
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	4413      	add	r3, r2
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	4a13      	ldr	r2, [pc, #76]	; (801400c <xTaskRemoveFromEventList+0xb4>)
 8013fc0:	441a      	add	r2, r3
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	3304      	adds	r3, #4
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	4610      	mov	r0, r2
 8013fca:	f7fe fda1 	bl	8012b10 <vListInsertEnd>
 8013fce:	e005      	b.n	8013fdc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	3318      	adds	r3, #24
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	480e      	ldr	r0, [pc, #56]	; (8014010 <xTaskRemoveFromEventList+0xb8>)
 8013fd8:	f7fe fd9a 	bl	8012b10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fe0:	4b0c      	ldr	r3, [pc, #48]	; (8014014 <xTaskRemoveFromEventList+0xbc>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d905      	bls.n	8013ff6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013fea:	2301      	movs	r3, #1
 8013fec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013fee:	4b0a      	ldr	r3, [pc, #40]	; (8014018 <xTaskRemoveFromEventList+0xc0>)
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	601a      	str	r2, [r3, #0]
 8013ff4:	e001      	b.n	8013ffa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013ffa:	697b      	ldr	r3, [r7, #20]
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3718      	adds	r7, #24
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	20002994 	.word	0x20002994
 8014008:	20002974 	.word	0x20002974
 801400c:	20002870 	.word	0x20002870
 8014010:	2000292c 	.word	0x2000292c
 8014014:	2000286c 	.word	0x2000286c
 8014018:	20002980 	.word	0x20002980

0801401c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801401c:	b480      	push	{r7}
 801401e:	b083      	sub	sp, #12
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014024:	4b06      	ldr	r3, [pc, #24]	; (8014040 <vTaskInternalSetTimeOutState+0x24>)
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801402c:	4b05      	ldr	r3, [pc, #20]	; (8014044 <vTaskInternalSetTimeOutState+0x28>)
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	605a      	str	r2, [r3, #4]
}
 8014034:	bf00      	nop
 8014036:	370c      	adds	r7, #12
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr
 8014040:	20002984 	.word	0x20002984
 8014044:	20002970 	.word	0x20002970

08014048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b088      	sub	sp, #32
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d10a      	bne.n	801406e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405c:	f383 8811 	msr	BASEPRI, r3
 8014060:	f3bf 8f6f 	isb	sy
 8014064:	f3bf 8f4f 	dsb	sy
 8014068:	613b      	str	r3, [r7, #16]
}
 801406a:	bf00      	nop
 801406c:	e7fe      	b.n	801406c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d10a      	bne.n	801408a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014078:	f383 8811 	msr	BASEPRI, r3
 801407c:	f3bf 8f6f 	isb	sy
 8014080:	f3bf 8f4f 	dsb	sy
 8014084:	60fb      	str	r3, [r7, #12]
}
 8014086:	bf00      	nop
 8014088:	e7fe      	b.n	8014088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801408a:	f000 fd43 	bl	8014b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801408e:	4b1d      	ldr	r3, [pc, #116]	; (8014104 <xTaskCheckForTimeOut+0xbc>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	69ba      	ldr	r2, [r7, #24]
 801409a:	1ad3      	subs	r3, r2, r3
 801409c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140a6:	d102      	bne.n	80140ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80140a8:	2300      	movs	r3, #0
 80140aa:	61fb      	str	r3, [r7, #28]
 80140ac:	e023      	b.n	80140f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	4b15      	ldr	r3, [pc, #84]	; (8014108 <xTaskCheckForTimeOut+0xc0>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d007      	beq.n	80140ca <xTaskCheckForTimeOut+0x82>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	69ba      	ldr	r2, [r7, #24]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d302      	bcc.n	80140ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80140c4:	2301      	movs	r3, #1
 80140c6:	61fb      	str	r3, [r7, #28]
 80140c8:	e015      	b.n	80140f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	697a      	ldr	r2, [r7, #20]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d20b      	bcs.n	80140ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	1ad2      	subs	r2, r2, r3
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7ff ff9b 	bl	801401c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140e6:	2300      	movs	r3, #0
 80140e8:	61fb      	str	r3, [r7, #28]
 80140ea:	e004      	b.n	80140f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	2200      	movs	r2, #0
 80140f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140f2:	2301      	movs	r3, #1
 80140f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80140f6:	f000 fd3d 	bl	8014b74 <vPortExitCritical>

	return xReturn;
 80140fa:	69fb      	ldr	r3, [r7, #28]
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3720      	adds	r7, #32
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	20002970 	.word	0x20002970
 8014108:	20002984 	.word	0x20002984

0801410c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801410c:	b480      	push	{r7}
 801410e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014110:	4b03      	ldr	r3, [pc, #12]	; (8014120 <vTaskMissedYield+0x14>)
 8014112:	2201      	movs	r2, #1
 8014114:	601a      	str	r2, [r3, #0]
}
 8014116:	bf00      	nop
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	20002980 	.word	0x20002980

08014124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801412c:	f000 f852 	bl	80141d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014130:	4b06      	ldr	r3, [pc, #24]	; (801414c <prvIdleTask+0x28>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	2b01      	cmp	r3, #1
 8014136:	d9f9      	bls.n	801412c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014138:	4b05      	ldr	r3, [pc, #20]	; (8014150 <prvIdleTask+0x2c>)
 801413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801413e:	601a      	str	r2, [r3, #0]
 8014140:	f3bf 8f4f 	dsb	sy
 8014144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014148:	e7f0      	b.n	801412c <prvIdleTask+0x8>
 801414a:	bf00      	nop
 801414c:	20002870 	.word	0x20002870
 8014150:	e000ed04 	.word	0xe000ed04

08014154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801415a:	2300      	movs	r3, #0
 801415c:	607b      	str	r3, [r7, #4]
 801415e:	e00c      	b.n	801417a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	4613      	mov	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	4413      	add	r3, r2
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	4a12      	ldr	r2, [pc, #72]	; (80141b4 <prvInitialiseTaskLists+0x60>)
 801416c:	4413      	add	r3, r2
 801416e:	4618      	mov	r0, r3
 8014170:	f7fe fca1 	bl	8012ab6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	3301      	adds	r3, #1
 8014178:	607b      	str	r3, [r7, #4]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2b06      	cmp	r3, #6
 801417e:	d9ef      	bls.n	8014160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014180:	480d      	ldr	r0, [pc, #52]	; (80141b8 <prvInitialiseTaskLists+0x64>)
 8014182:	f7fe fc98 	bl	8012ab6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014186:	480d      	ldr	r0, [pc, #52]	; (80141bc <prvInitialiseTaskLists+0x68>)
 8014188:	f7fe fc95 	bl	8012ab6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801418c:	480c      	ldr	r0, [pc, #48]	; (80141c0 <prvInitialiseTaskLists+0x6c>)
 801418e:	f7fe fc92 	bl	8012ab6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014192:	480c      	ldr	r0, [pc, #48]	; (80141c4 <prvInitialiseTaskLists+0x70>)
 8014194:	f7fe fc8f 	bl	8012ab6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014198:	480b      	ldr	r0, [pc, #44]	; (80141c8 <prvInitialiseTaskLists+0x74>)
 801419a:	f7fe fc8c 	bl	8012ab6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801419e:	4b0b      	ldr	r3, [pc, #44]	; (80141cc <prvInitialiseTaskLists+0x78>)
 80141a0:	4a05      	ldr	r2, [pc, #20]	; (80141b8 <prvInitialiseTaskLists+0x64>)
 80141a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80141a4:	4b0a      	ldr	r3, [pc, #40]	; (80141d0 <prvInitialiseTaskLists+0x7c>)
 80141a6:	4a05      	ldr	r2, [pc, #20]	; (80141bc <prvInitialiseTaskLists+0x68>)
 80141a8:	601a      	str	r2, [r3, #0]
}
 80141aa:	bf00      	nop
 80141ac:	3708      	adds	r7, #8
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	20002870 	.word	0x20002870
 80141b8:	200028fc 	.word	0x200028fc
 80141bc:	20002910 	.word	0x20002910
 80141c0:	2000292c 	.word	0x2000292c
 80141c4:	20002940 	.word	0x20002940
 80141c8:	20002958 	.word	0x20002958
 80141cc:	20002924 	.word	0x20002924
 80141d0:	20002928 	.word	0x20002928

080141d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141da:	e019      	b.n	8014210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141dc:	f000 fc9a 	bl	8014b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141e0:	4b10      	ldr	r3, [pc, #64]	; (8014224 <prvCheckTasksWaitingTermination+0x50>)
 80141e2:	68db      	ldr	r3, [r3, #12]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	3304      	adds	r3, #4
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fe fcec 	bl	8012bca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141f2:	4b0d      	ldr	r3, [pc, #52]	; (8014228 <prvCheckTasksWaitingTermination+0x54>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	4a0b      	ldr	r2, [pc, #44]	; (8014228 <prvCheckTasksWaitingTermination+0x54>)
 80141fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141fc:	4b0b      	ldr	r3, [pc, #44]	; (801422c <prvCheckTasksWaitingTermination+0x58>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	3b01      	subs	r3, #1
 8014202:	4a0a      	ldr	r2, [pc, #40]	; (801422c <prvCheckTasksWaitingTermination+0x58>)
 8014204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014206:	f000 fcb5 	bl	8014b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 f810 	bl	8014230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014210:	4b06      	ldr	r3, [pc, #24]	; (801422c <prvCheckTasksWaitingTermination+0x58>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d1e1      	bne.n	80141dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014218:	bf00      	nop
 801421a:	bf00      	nop
 801421c:	3708      	adds	r7, #8
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	20002940 	.word	0x20002940
 8014228:	2000296c 	.word	0x2000296c
 801422c:	20002954 	.word	0x20002954

08014230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014230:	b580      	push	{r7, lr}
 8014232:	b084      	sub	sp, #16
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801423e:	2b00      	cmp	r3, #0
 8014240:	d108      	bne.n	8014254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014246:	4618      	mov	r0, r3
 8014248:	f000 fe4a 	bl	8014ee0 <vPortFree>
				vPortFree( pxTCB );
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 fe47 	bl	8014ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014252:	e018      	b.n	8014286 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801425a:	2b01      	cmp	r3, #1
 801425c:	d103      	bne.n	8014266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 fe3e 	bl	8014ee0 <vPortFree>
	}
 8014264:	e00f      	b.n	8014286 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801426c:	2b02      	cmp	r3, #2
 801426e:	d00a      	beq.n	8014286 <prvDeleteTCB+0x56>
	__asm volatile
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	60fb      	str	r3, [r7, #12]
}
 8014282:	bf00      	nop
 8014284:	e7fe      	b.n	8014284 <prvDeleteTCB+0x54>
	}
 8014286:	bf00      	nop
 8014288:	3710      	adds	r7, #16
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
	...

08014290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014290:	b480      	push	{r7}
 8014292:	b083      	sub	sp, #12
 8014294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014296:	4b0c      	ldr	r3, [pc, #48]	; (80142c8 <prvResetNextTaskUnblockTime+0x38>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d104      	bne.n	80142aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80142a0:	4b0a      	ldr	r3, [pc, #40]	; (80142cc <prvResetNextTaskUnblockTime+0x3c>)
 80142a2:	f04f 32ff 	mov.w	r2, #4294967295
 80142a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80142a8:	e008      	b.n	80142bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142aa:	4b07      	ldr	r3, [pc, #28]	; (80142c8 <prvResetNextTaskUnblockTime+0x38>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	4a04      	ldr	r2, [pc, #16]	; (80142cc <prvResetNextTaskUnblockTime+0x3c>)
 80142ba:	6013      	str	r3, [r2, #0]
}
 80142bc:	bf00      	nop
 80142be:	370c      	adds	r7, #12
 80142c0:	46bd      	mov	sp, r7
 80142c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c6:	4770      	bx	lr
 80142c8:	20002924 	.word	0x20002924
 80142cc:	2000298c 	.word	0x2000298c

080142d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80142d6:	4b0b      	ldr	r3, [pc, #44]	; (8014304 <xTaskGetSchedulerState+0x34>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d102      	bne.n	80142e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80142de:	2301      	movs	r3, #1
 80142e0:	607b      	str	r3, [r7, #4]
 80142e2:	e008      	b.n	80142f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142e4:	4b08      	ldr	r3, [pc, #32]	; (8014308 <xTaskGetSchedulerState+0x38>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d102      	bne.n	80142f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80142ec:	2302      	movs	r3, #2
 80142ee:	607b      	str	r3, [r7, #4]
 80142f0:	e001      	b.n	80142f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80142f2:	2300      	movs	r3, #0
 80142f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80142f6:	687b      	ldr	r3, [r7, #4]
	}
 80142f8:	4618      	mov	r0, r3
 80142fa:	370c      	adds	r7, #12
 80142fc:	46bd      	mov	sp, r7
 80142fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014302:	4770      	bx	lr
 8014304:	20002978 	.word	0x20002978
 8014308:	20002994 	.word	0x20002994

0801430c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801430c:	b580      	push	{r7, lr}
 801430e:	b086      	sub	sp, #24
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014318:	2300      	movs	r3, #0
 801431a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d06e      	beq.n	8014400 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014322:	4b3a      	ldr	r3, [pc, #232]	; (801440c <xTaskPriorityDisinherit+0x100>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	693a      	ldr	r2, [r7, #16]
 8014328:	429a      	cmp	r2, r3
 801432a:	d00a      	beq.n	8014342 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014330:	f383 8811 	msr	BASEPRI, r3
 8014334:	f3bf 8f6f 	isb	sy
 8014338:	f3bf 8f4f 	dsb	sy
 801433c:	60fb      	str	r3, [r7, #12]
}
 801433e:	bf00      	nop
 8014340:	e7fe      	b.n	8014340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014346:	2b00      	cmp	r3, #0
 8014348:	d10a      	bne.n	8014360 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801434e:	f383 8811 	msr	BASEPRI, r3
 8014352:	f3bf 8f6f 	isb	sy
 8014356:	f3bf 8f4f 	dsb	sy
 801435a:	60bb      	str	r3, [r7, #8]
}
 801435c:	bf00      	nop
 801435e:	e7fe      	b.n	801435e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014364:	1e5a      	subs	r2, r3, #1
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014372:	429a      	cmp	r2, r3
 8014374:	d044      	beq.n	8014400 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801437a:	2b00      	cmp	r3, #0
 801437c:	d140      	bne.n	8014400 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	3304      	adds	r3, #4
 8014382:	4618      	mov	r0, r3
 8014384:	f7fe fc21 	bl	8012bca <uxListRemove>
 8014388:	4603      	mov	r3, r0
 801438a:	2b00      	cmp	r3, #0
 801438c:	d115      	bne.n	80143ba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014392:	491f      	ldr	r1, [pc, #124]	; (8014410 <xTaskPriorityDisinherit+0x104>)
 8014394:	4613      	mov	r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	4413      	add	r3, r2
 801439a:	009b      	lsls	r3, r3, #2
 801439c:	440b      	add	r3, r1
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d10a      	bne.n	80143ba <xTaskPriorityDisinherit+0xae>
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a8:	2201      	movs	r2, #1
 80143aa:	fa02 f303 	lsl.w	r3, r2, r3
 80143ae:	43da      	mvns	r2, r3
 80143b0:	4b18      	ldr	r3, [pc, #96]	; (8014414 <xTaskPriorityDisinherit+0x108>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	4013      	ands	r3, r2
 80143b6:	4a17      	ldr	r2, [pc, #92]	; (8014414 <xTaskPriorityDisinherit+0x108>)
 80143b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143be:	693b      	ldr	r3, [r7, #16]
 80143c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143c6:	f1c3 0207 	rsb	r2, r3, #7
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d2:	2201      	movs	r2, #1
 80143d4:	409a      	lsls	r2, r3
 80143d6:	4b0f      	ldr	r3, [pc, #60]	; (8014414 <xTaskPriorityDisinherit+0x108>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4313      	orrs	r3, r2
 80143dc:	4a0d      	ldr	r2, [pc, #52]	; (8014414 <xTaskPriorityDisinherit+0x108>)
 80143de:	6013      	str	r3, [r2, #0]
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e4:	4613      	mov	r3, r2
 80143e6:	009b      	lsls	r3, r3, #2
 80143e8:	4413      	add	r3, r2
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	4a08      	ldr	r2, [pc, #32]	; (8014410 <xTaskPriorityDisinherit+0x104>)
 80143ee:	441a      	add	r2, r3
 80143f0:	693b      	ldr	r3, [r7, #16]
 80143f2:	3304      	adds	r3, #4
 80143f4:	4619      	mov	r1, r3
 80143f6:	4610      	mov	r0, r2
 80143f8:	f7fe fb8a 	bl	8012b10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80143fc:	2301      	movs	r3, #1
 80143fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014400:	697b      	ldr	r3, [r7, #20]
	}
 8014402:	4618      	mov	r0, r3
 8014404:	3718      	adds	r7, #24
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	2000286c 	.word	0x2000286c
 8014410:	20002870 	.word	0x20002870
 8014414:	20002974 	.word	0x20002974

08014418 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014418:	b580      	push	{r7, lr}
 801441a:	b086      	sub	sp, #24
 801441c:	af00      	add	r7, sp, #0
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
 8014424:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014426:	f000 fb75 	bl	8014b14 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801442a:	4b26      	ldr	r3, [pc, #152]	; (80144c4 <xTaskNotifyWait+0xac>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014432:	b2db      	uxtb	r3, r3
 8014434:	2b02      	cmp	r3, #2
 8014436:	d01a      	beq.n	801446e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014438:	4b22      	ldr	r3, [pc, #136]	; (80144c4 <xTaskNotifyWait+0xac>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801443e:	68fa      	ldr	r2, [r7, #12]
 8014440:	43d2      	mvns	r2, r2
 8014442:	400a      	ands	r2, r1
 8014444:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014446:	4b1f      	ldr	r3, [pc, #124]	; (80144c4 <xTaskNotifyWait+0xac>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	2201      	movs	r2, #1
 801444c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d00b      	beq.n	801446e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014456:	2101      	movs	r1, #1
 8014458:	6838      	ldr	r0, [r7, #0]
 801445a:	f000 f9c7 	bl	80147ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801445e:	4b1a      	ldr	r3, [pc, #104]	; (80144c8 <xTaskNotifyWait+0xb0>)
 8014460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014464:	601a      	str	r2, [r3, #0]
 8014466:	f3bf 8f4f 	dsb	sy
 801446a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801446e:	f000 fb81 	bl	8014b74 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014472:	f000 fb4f 	bl	8014b14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d004      	beq.n	8014486 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801447c:	4b11      	ldr	r3, [pc, #68]	; (80144c4 <xTaskNotifyWait+0xac>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014486:	4b0f      	ldr	r3, [pc, #60]	; (80144c4 <xTaskNotifyWait+0xac>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801448e:	b2db      	uxtb	r3, r3
 8014490:	2b02      	cmp	r3, #2
 8014492:	d002      	beq.n	801449a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014494:	2300      	movs	r3, #0
 8014496:	617b      	str	r3, [r7, #20]
 8014498:	e008      	b.n	80144ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801449a:	4b0a      	ldr	r3, [pc, #40]	; (80144c4 <xTaskNotifyWait+0xac>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	43d2      	mvns	r2, r2
 80144a4:	400a      	ands	r2, r1
 80144a6:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80144a8:	2301      	movs	r3, #1
 80144aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80144ac:	4b05      	ldr	r3, [pc, #20]	; (80144c4 <xTaskNotifyWait+0xac>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	2200      	movs	r2, #0
 80144b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80144b6:	f000 fb5d 	bl	8014b74 <vPortExitCritical>

		return xReturn;
 80144ba:	697b      	ldr	r3, [r7, #20]
	}
 80144bc:	4618      	mov	r0, r3
 80144be:	3718      	adds	r7, #24
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	2000286c 	.word	0x2000286c
 80144c8:	e000ed04 	.word	0xe000ed04

080144cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b08a      	sub	sp, #40	; 0x28
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	60f8      	str	r0, [r7, #12]
 80144d4:	60b9      	str	r1, [r7, #8]
 80144d6:	603b      	str	r3, [r7, #0]
 80144d8:	4613      	mov	r3, r2
 80144da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80144dc:	2301      	movs	r3, #1
 80144de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d10a      	bne.n	80144fc <xTaskGenericNotify+0x30>
	__asm volatile
 80144e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ea:	f383 8811 	msr	BASEPRI, r3
 80144ee:	f3bf 8f6f 	isb	sy
 80144f2:	f3bf 8f4f 	dsb	sy
 80144f6:	61bb      	str	r3, [r7, #24]
}
 80144f8:	bf00      	nop
 80144fa:	e7fe      	b.n	80144fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014500:	f000 fb08 	bl	8014b14 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d003      	beq.n	8014512 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801450a:	6a3b      	ldr	r3, [r7, #32]
 801450c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014512:	6a3b      	ldr	r3, [r7, #32]
 8014514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014518:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801451a:	6a3b      	ldr	r3, [r7, #32]
 801451c:	2202      	movs	r2, #2
 801451e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014522:	79fb      	ldrb	r3, [r7, #7]
 8014524:	2b04      	cmp	r3, #4
 8014526:	d828      	bhi.n	801457a <xTaskGenericNotify+0xae>
 8014528:	a201      	add	r2, pc, #4	; (adr r2, 8014530 <xTaskGenericNotify+0x64>)
 801452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801452e:	bf00      	nop
 8014530:	0801459b 	.word	0x0801459b
 8014534:	08014545 	.word	0x08014545
 8014538:	08014553 	.word	0x08014553
 801453c:	0801455f 	.word	0x0801455f
 8014540:	08014567 	.word	0x08014567
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014544:	6a3b      	ldr	r3, [r7, #32]
 8014546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	431a      	orrs	r2, r3
 801454c:	6a3b      	ldr	r3, [r7, #32]
 801454e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014550:	e026      	b.n	80145a0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014552:	6a3b      	ldr	r3, [r7, #32]
 8014554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014556:	1c5a      	adds	r2, r3, #1
 8014558:	6a3b      	ldr	r3, [r7, #32]
 801455a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801455c:	e020      	b.n	80145a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801455e:	6a3b      	ldr	r3, [r7, #32]
 8014560:	68ba      	ldr	r2, [r7, #8]
 8014562:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014564:	e01c      	b.n	80145a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014566:	7ffb      	ldrb	r3, [r7, #31]
 8014568:	2b02      	cmp	r3, #2
 801456a:	d003      	beq.n	8014574 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801456c:	6a3b      	ldr	r3, [r7, #32]
 801456e:	68ba      	ldr	r2, [r7, #8]
 8014570:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014572:	e015      	b.n	80145a0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8014574:	2300      	movs	r3, #0
 8014576:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014578:	e012      	b.n	80145a0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801457a:	6a3b      	ldr	r3, [r7, #32]
 801457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014582:	d00c      	beq.n	801459e <xTaskGenericNotify+0xd2>
	__asm volatile
 8014584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014588:	f383 8811 	msr	BASEPRI, r3
 801458c:	f3bf 8f6f 	isb	sy
 8014590:	f3bf 8f4f 	dsb	sy
 8014594:	617b      	str	r3, [r7, #20]
}
 8014596:	bf00      	nop
 8014598:	e7fe      	b.n	8014598 <xTaskGenericNotify+0xcc>
					break;
 801459a:	bf00      	nop
 801459c:	e000      	b.n	80145a0 <xTaskGenericNotify+0xd4>

					break;
 801459e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80145a0:	7ffb      	ldrb	r3, [r7, #31]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d139      	bne.n	801461a <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145a6:	6a3b      	ldr	r3, [r7, #32]
 80145a8:	3304      	adds	r3, #4
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7fe fb0d 	bl	8012bca <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80145b0:	6a3b      	ldr	r3, [r7, #32]
 80145b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b4:	2201      	movs	r2, #1
 80145b6:	409a      	lsls	r2, r3
 80145b8:	4b1b      	ldr	r3, [pc, #108]	; (8014628 <xTaskGenericNotify+0x15c>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	4313      	orrs	r3, r2
 80145be:	4a1a      	ldr	r2, [pc, #104]	; (8014628 <xTaskGenericNotify+0x15c>)
 80145c0:	6013      	str	r3, [r2, #0]
 80145c2:	6a3b      	ldr	r3, [r7, #32]
 80145c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145c6:	4613      	mov	r3, r2
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	4413      	add	r3, r2
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	4a17      	ldr	r2, [pc, #92]	; (801462c <xTaskGenericNotify+0x160>)
 80145d0:	441a      	add	r2, r3
 80145d2:	6a3b      	ldr	r3, [r7, #32]
 80145d4:	3304      	adds	r3, #4
 80145d6:	4619      	mov	r1, r3
 80145d8:	4610      	mov	r0, r2
 80145da:	f7fe fa99 	bl	8012b10 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80145de:	6a3b      	ldr	r3, [r7, #32]
 80145e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d00a      	beq.n	80145fc <xTaskGenericNotify+0x130>
	__asm volatile
 80145e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ea:	f383 8811 	msr	BASEPRI, r3
 80145ee:	f3bf 8f6f 	isb	sy
 80145f2:	f3bf 8f4f 	dsb	sy
 80145f6:	613b      	str	r3, [r7, #16]
}
 80145f8:	bf00      	nop
 80145fa:	e7fe      	b.n	80145fa <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80145fc:	6a3b      	ldr	r3, [r7, #32]
 80145fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014600:	4b0b      	ldr	r3, [pc, #44]	; (8014630 <xTaskGenericNotify+0x164>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014606:	429a      	cmp	r2, r3
 8014608:	d907      	bls.n	801461a <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801460a:	4b0a      	ldr	r3, [pc, #40]	; (8014634 <xTaskGenericNotify+0x168>)
 801460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014610:	601a      	str	r2, [r3, #0]
 8014612:	f3bf 8f4f 	dsb	sy
 8014616:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801461a:	f000 faab 	bl	8014b74 <vPortExitCritical>

		return xReturn;
 801461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014620:	4618      	mov	r0, r3
 8014622:	3728      	adds	r7, #40	; 0x28
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	20002974 	.word	0x20002974
 801462c:	20002870 	.word	0x20002870
 8014630:	2000286c 	.word	0x2000286c
 8014634:	e000ed04 	.word	0xe000ed04

08014638 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08e      	sub	sp, #56	; 0x38
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	603b      	str	r3, [r7, #0]
 8014644:	4613      	mov	r3, r2
 8014646:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014648:	2301      	movs	r3, #1
 801464a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d10a      	bne.n	8014668 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014656:	f383 8811 	msr	BASEPRI, r3
 801465a:	f3bf 8f6f 	isb	sy
 801465e:	f3bf 8f4f 	dsb	sy
 8014662:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014664:	bf00      	nop
 8014666:	e7fe      	b.n	8014666 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014668:	f000 fb36 	bl	8014cd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014670:	f3ef 8211 	mrs	r2, BASEPRI
 8014674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014678:	f383 8811 	msr	BASEPRI, r3
 801467c:	f3bf 8f6f 	isb	sy
 8014680:	f3bf 8f4f 	dsb	sy
 8014684:	623a      	str	r2, [r7, #32]
 8014686:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014688:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801468a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d003      	beq.n	801469a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80146a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80146a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a6:	2202      	movs	r2, #2
 80146a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80146ac:	79fb      	ldrb	r3, [r7, #7]
 80146ae:	2b04      	cmp	r3, #4
 80146b0:	d828      	bhi.n	8014704 <xTaskGenericNotifyFromISR+0xcc>
 80146b2:	a201      	add	r2, pc, #4	; (adr r2, 80146b8 <xTaskGenericNotifyFromISR+0x80>)
 80146b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b8:	08014725 	.word	0x08014725
 80146bc:	080146cd 	.word	0x080146cd
 80146c0:	080146db 	.word	0x080146db
 80146c4:	080146e7 	.word	0x080146e7
 80146c8:	080146ef 	.word	0x080146ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80146cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	431a      	orrs	r2, r3
 80146d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146d8:	e027      	b.n	801472a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80146da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146de:	1c5a      	adds	r2, r3, #1
 80146e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146e4:	e021      	b.n	801472a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80146e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e8:	68ba      	ldr	r2, [r7, #8]
 80146ea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146ec:	e01d      	b.n	801472a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80146ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80146f2:	2b02      	cmp	r3, #2
 80146f4:	d003      	beq.n	80146fe <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80146f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f8:	68ba      	ldr	r2, [r7, #8]
 80146fa:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80146fc:	e015      	b.n	801472a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80146fe:	2300      	movs	r3, #0
 8014700:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014702:	e012      	b.n	801472a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801470c:	d00c      	beq.n	8014728 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014712:	f383 8811 	msr	BASEPRI, r3
 8014716:	f3bf 8f6f 	isb	sy
 801471a:	f3bf 8f4f 	dsb	sy
 801471e:	61bb      	str	r3, [r7, #24]
}
 8014720:	bf00      	nop
 8014722:	e7fe      	b.n	8014722 <xTaskGenericNotifyFromISR+0xea>
					break;
 8014724:	bf00      	nop
 8014726:	e000      	b.n	801472a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014728:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801472a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801472e:	2b01      	cmp	r3, #1
 8014730:	d145      	bne.n	80147be <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014736:	2b00      	cmp	r3, #0
 8014738:	d00a      	beq.n	8014750 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 801473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801473e:	f383 8811 	msr	BASEPRI, r3
 8014742:	f3bf 8f6f 	isb	sy
 8014746:	f3bf 8f4f 	dsb	sy
 801474a:	617b      	str	r3, [r7, #20]
}
 801474c:	bf00      	nop
 801474e:	e7fe      	b.n	801474e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014750:	4b20      	ldr	r3, [pc, #128]	; (80147d4 <xTaskGenericNotifyFromISR+0x19c>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d11c      	bne.n	8014792 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801475a:	3304      	adds	r3, #4
 801475c:	4618      	mov	r0, r3
 801475e:	f7fe fa34 	bl	8012bca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014766:	2201      	movs	r2, #1
 8014768:	409a      	lsls	r2, r3
 801476a:	4b1b      	ldr	r3, [pc, #108]	; (80147d8 <xTaskGenericNotifyFromISR+0x1a0>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	4313      	orrs	r3, r2
 8014770:	4a19      	ldr	r2, [pc, #100]	; (80147d8 <xTaskGenericNotifyFromISR+0x1a0>)
 8014772:	6013      	str	r3, [r2, #0]
 8014774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014778:	4613      	mov	r3, r2
 801477a:	009b      	lsls	r3, r3, #2
 801477c:	4413      	add	r3, r2
 801477e:	009b      	lsls	r3, r3, #2
 8014780:	4a16      	ldr	r2, [pc, #88]	; (80147dc <xTaskGenericNotifyFromISR+0x1a4>)
 8014782:	441a      	add	r2, r3
 8014784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014786:	3304      	adds	r3, #4
 8014788:	4619      	mov	r1, r3
 801478a:	4610      	mov	r0, r2
 801478c:	f7fe f9c0 	bl	8012b10 <vListInsertEnd>
 8014790:	e005      	b.n	801479e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014794:	3318      	adds	r3, #24
 8014796:	4619      	mov	r1, r3
 8014798:	4811      	ldr	r0, [pc, #68]	; (80147e0 <xTaskGenericNotifyFromISR+0x1a8>)
 801479a:	f7fe f9b9 	bl	8012b10 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147a2:	4b10      	ldr	r3, [pc, #64]	; (80147e4 <xTaskGenericNotifyFromISR+0x1ac>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d908      	bls.n	80147be <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80147ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d002      	beq.n	80147b8 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80147b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147b4:	2201      	movs	r2, #1
 80147b6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80147b8:	4b0b      	ldr	r3, [pc, #44]	; (80147e8 <xTaskGenericNotifyFromISR+0x1b0>)
 80147ba:	2201      	movs	r2, #1
 80147bc:	601a      	str	r2, [r3, #0]
 80147be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	f383 8811 	msr	BASEPRI, r3
}
 80147c8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80147ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3738      	adds	r7, #56	; 0x38
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	20002994 	.word	0x20002994
 80147d8:	20002974 	.word	0x20002974
 80147dc:	20002870 	.word	0x20002870
 80147e0:	2000292c 	.word	0x2000292c
 80147e4:	2000286c 	.word	0x2000286c
 80147e8:	20002980 	.word	0x20002980

080147ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80147f6:	4b29      	ldr	r3, [pc, #164]	; (801489c <prvAddCurrentTaskToDelayedList+0xb0>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147fc:	4b28      	ldr	r3, [pc, #160]	; (80148a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	3304      	adds	r3, #4
 8014802:	4618      	mov	r0, r3
 8014804:	f7fe f9e1 	bl	8012bca <uxListRemove>
 8014808:	4603      	mov	r3, r0
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10b      	bne.n	8014826 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801480e:	4b24      	ldr	r3, [pc, #144]	; (80148a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014814:	2201      	movs	r2, #1
 8014816:	fa02 f303 	lsl.w	r3, r2, r3
 801481a:	43da      	mvns	r2, r3
 801481c:	4b21      	ldr	r3, [pc, #132]	; (80148a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	4013      	ands	r3, r2
 8014822:	4a20      	ldr	r2, [pc, #128]	; (80148a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014824:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801482c:	d10a      	bne.n	8014844 <prvAddCurrentTaskToDelayedList+0x58>
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d007      	beq.n	8014844 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014834:	4b1a      	ldr	r3, [pc, #104]	; (80148a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	3304      	adds	r3, #4
 801483a:	4619      	mov	r1, r3
 801483c:	481a      	ldr	r0, [pc, #104]	; (80148a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801483e:	f7fe f967 	bl	8012b10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014842:	e026      	b.n	8014892 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	4413      	add	r3, r2
 801484a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801484c:	4b14      	ldr	r3, [pc, #80]	; (80148a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	68ba      	ldr	r2, [r7, #8]
 8014852:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014854:	68ba      	ldr	r2, [r7, #8]
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	429a      	cmp	r2, r3
 801485a:	d209      	bcs.n	8014870 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801485c:	4b13      	ldr	r3, [pc, #76]	; (80148ac <prvAddCurrentTaskToDelayedList+0xc0>)
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	4b0f      	ldr	r3, [pc, #60]	; (80148a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	3304      	adds	r3, #4
 8014866:	4619      	mov	r1, r3
 8014868:	4610      	mov	r0, r2
 801486a:	f7fe f975 	bl	8012b58 <vListInsert>
}
 801486e:	e010      	b.n	8014892 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014870:	4b0f      	ldr	r3, [pc, #60]	; (80148b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	4b0a      	ldr	r3, [pc, #40]	; (80148a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	3304      	adds	r3, #4
 801487a:	4619      	mov	r1, r3
 801487c:	4610      	mov	r0, r2
 801487e:	f7fe f96b 	bl	8012b58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014882:	4b0c      	ldr	r3, [pc, #48]	; (80148b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	68ba      	ldr	r2, [r7, #8]
 8014888:	429a      	cmp	r2, r3
 801488a:	d202      	bcs.n	8014892 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801488c:	4a09      	ldr	r2, [pc, #36]	; (80148b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	6013      	str	r3, [r2, #0]
}
 8014892:	bf00      	nop
 8014894:	3710      	adds	r7, #16
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
 801489a:	bf00      	nop
 801489c:	20002970 	.word	0x20002970
 80148a0:	2000286c 	.word	0x2000286c
 80148a4:	20002974 	.word	0x20002974
 80148a8:	20002958 	.word	0x20002958
 80148ac:	20002928 	.word	0x20002928
 80148b0:	20002924 	.word	0x20002924
 80148b4:	2000298c 	.word	0x2000298c

080148b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80148b8:	b480      	push	{r7}
 80148ba:	b085      	sub	sp, #20
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	3b04      	subs	r3, #4
 80148c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80148d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	3b04      	subs	r3, #4
 80148d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	f023 0201 	bic.w	r2, r3, #1
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	3b04      	subs	r3, #4
 80148e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80148e8:	4a0c      	ldr	r2, [pc, #48]	; (801491c <pxPortInitialiseStack+0x64>)
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	3b14      	subs	r3, #20
 80148f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	3b04      	subs	r3, #4
 80148fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f06f 0202 	mvn.w	r2, #2
 8014906:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	3b20      	subs	r3, #32
 801490c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801490e:	68fb      	ldr	r3, [r7, #12]
}
 8014910:	4618      	mov	r0, r3
 8014912:	3714      	adds	r7, #20
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr
 801491c:	08014921 	.word	0x08014921

08014920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014920:	b480      	push	{r7}
 8014922:	b085      	sub	sp, #20
 8014924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014926:	2300      	movs	r3, #0
 8014928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801492a:	4b12      	ldr	r3, [pc, #72]	; (8014974 <prvTaskExitError+0x54>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014932:	d00a      	beq.n	801494a <prvTaskExitError+0x2a>
	__asm volatile
 8014934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014938:	f383 8811 	msr	BASEPRI, r3
 801493c:	f3bf 8f6f 	isb	sy
 8014940:	f3bf 8f4f 	dsb	sy
 8014944:	60fb      	str	r3, [r7, #12]
}
 8014946:	bf00      	nop
 8014948:	e7fe      	b.n	8014948 <prvTaskExitError+0x28>
	__asm volatile
 801494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801494e:	f383 8811 	msr	BASEPRI, r3
 8014952:	f3bf 8f6f 	isb	sy
 8014956:	f3bf 8f4f 	dsb	sy
 801495a:	60bb      	str	r3, [r7, #8]
}
 801495c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801495e:	bf00      	nop
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d0fc      	beq.n	8014960 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014966:	bf00      	nop
 8014968:	bf00      	nop
 801496a:	3714      	adds	r7, #20
 801496c:	46bd      	mov	sp, r7
 801496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014972:	4770      	bx	lr
 8014974:	200021a8 	.word	0x200021a8
	...

08014980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014980:	4b07      	ldr	r3, [pc, #28]	; (80149a0 <pxCurrentTCBConst2>)
 8014982:	6819      	ldr	r1, [r3, #0]
 8014984:	6808      	ldr	r0, [r1, #0]
 8014986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801498a:	f380 8809 	msr	PSP, r0
 801498e:	f3bf 8f6f 	isb	sy
 8014992:	f04f 0000 	mov.w	r0, #0
 8014996:	f380 8811 	msr	BASEPRI, r0
 801499a:	4770      	bx	lr
 801499c:	f3af 8000 	nop.w

080149a0 <pxCurrentTCBConst2>:
 80149a0:	2000286c 	.word	0x2000286c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80149a4:	bf00      	nop
 80149a6:	bf00      	nop

080149a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80149a8:	4808      	ldr	r0, [pc, #32]	; (80149cc <prvPortStartFirstTask+0x24>)
 80149aa:	6800      	ldr	r0, [r0, #0]
 80149ac:	6800      	ldr	r0, [r0, #0]
 80149ae:	f380 8808 	msr	MSP, r0
 80149b2:	f04f 0000 	mov.w	r0, #0
 80149b6:	f380 8814 	msr	CONTROL, r0
 80149ba:	b662      	cpsie	i
 80149bc:	b661      	cpsie	f
 80149be:	f3bf 8f4f 	dsb	sy
 80149c2:	f3bf 8f6f 	isb	sy
 80149c6:	df00      	svc	0
 80149c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80149ca:	bf00      	nop
 80149cc:	e000ed08 	.word	0xe000ed08

080149d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b086      	sub	sp, #24
 80149d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80149d6:	4b46      	ldr	r3, [pc, #280]	; (8014af0 <xPortStartScheduler+0x120>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	4a46      	ldr	r2, [pc, #280]	; (8014af4 <xPortStartScheduler+0x124>)
 80149dc:	4293      	cmp	r3, r2
 80149de:	d10a      	bne.n	80149f6 <xPortStartScheduler+0x26>
	__asm volatile
 80149e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e4:	f383 8811 	msr	BASEPRI, r3
 80149e8:	f3bf 8f6f 	isb	sy
 80149ec:	f3bf 8f4f 	dsb	sy
 80149f0:	613b      	str	r3, [r7, #16]
}
 80149f2:	bf00      	nop
 80149f4:	e7fe      	b.n	80149f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80149f6:	4b3e      	ldr	r3, [pc, #248]	; (8014af0 <xPortStartScheduler+0x120>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	4a3f      	ldr	r2, [pc, #252]	; (8014af8 <xPortStartScheduler+0x128>)
 80149fc:	4293      	cmp	r3, r2
 80149fe:	d10a      	bne.n	8014a16 <xPortStartScheduler+0x46>
	__asm volatile
 8014a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a04:	f383 8811 	msr	BASEPRI, r3
 8014a08:	f3bf 8f6f 	isb	sy
 8014a0c:	f3bf 8f4f 	dsb	sy
 8014a10:	60fb      	str	r3, [r7, #12]
}
 8014a12:	bf00      	nop
 8014a14:	e7fe      	b.n	8014a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014a16:	4b39      	ldr	r3, [pc, #228]	; (8014afc <xPortStartScheduler+0x12c>)
 8014a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	b2db      	uxtb	r3, r3
 8014a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	22ff      	movs	r2, #255	; 0xff
 8014a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014a30:	78fb      	ldrb	r3, [r7, #3]
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014a38:	b2da      	uxtb	r2, r3
 8014a3a:	4b31      	ldr	r3, [pc, #196]	; (8014b00 <xPortStartScheduler+0x130>)
 8014a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014a3e:	4b31      	ldr	r3, [pc, #196]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a40:	2207      	movs	r2, #7
 8014a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014a44:	e009      	b.n	8014a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014a46:	4b2f      	ldr	r3, [pc, #188]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	3b01      	subs	r3, #1
 8014a4c:	4a2d      	ldr	r2, [pc, #180]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014a50:	78fb      	ldrb	r3, [r7, #3]
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	005b      	lsls	r3, r3, #1
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014a5a:	78fb      	ldrb	r3, [r7, #3]
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a62:	2b80      	cmp	r3, #128	; 0x80
 8014a64:	d0ef      	beq.n	8014a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014a66:	4b27      	ldr	r3, [pc, #156]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	f1c3 0307 	rsb	r3, r3, #7
 8014a6e:	2b04      	cmp	r3, #4
 8014a70:	d00a      	beq.n	8014a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8014a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a76:	f383 8811 	msr	BASEPRI, r3
 8014a7a:	f3bf 8f6f 	isb	sy
 8014a7e:	f3bf 8f4f 	dsb	sy
 8014a82:	60bb      	str	r3, [r7, #8]
}
 8014a84:	bf00      	nop
 8014a86:	e7fe      	b.n	8014a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014a88:	4b1e      	ldr	r3, [pc, #120]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	021b      	lsls	r3, r3, #8
 8014a8e:	4a1d      	ldr	r2, [pc, #116]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014a92:	4b1c      	ldr	r3, [pc, #112]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014a9a:	4a1a      	ldr	r2, [pc, #104]	; (8014b04 <xPortStartScheduler+0x134>)
 8014a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	b2da      	uxtb	r2, r3
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014aa6:	4b18      	ldr	r3, [pc, #96]	; (8014b08 <xPortStartScheduler+0x138>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	4a17      	ldr	r2, [pc, #92]	; (8014b08 <xPortStartScheduler+0x138>)
 8014aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ab2:	4b15      	ldr	r3, [pc, #84]	; (8014b08 <xPortStartScheduler+0x138>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	4a14      	ldr	r2, [pc, #80]	; (8014b08 <xPortStartScheduler+0x138>)
 8014ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014abe:	f000 f8dd 	bl	8014c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014ac2:	4b12      	ldr	r3, [pc, #72]	; (8014b0c <xPortStartScheduler+0x13c>)
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014ac8:	f000 f8fc 	bl	8014cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014acc:	4b10      	ldr	r3, [pc, #64]	; (8014b10 <xPortStartScheduler+0x140>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4a0f      	ldr	r2, [pc, #60]	; (8014b10 <xPortStartScheduler+0x140>)
 8014ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014ad8:	f7ff ff66 	bl	80149a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014adc:	f7ff f9bc 	bl	8013e58 <vTaskSwitchContext>
	prvTaskExitError();
 8014ae0:	f7ff ff1e 	bl	8014920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014ae4:	2300      	movs	r3, #0
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3718      	adds	r7, #24
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	e000ed00 	.word	0xe000ed00
 8014af4:	410fc271 	.word	0x410fc271
 8014af8:	410fc270 	.word	0x410fc270
 8014afc:	e000e400 	.word	0xe000e400
 8014b00:	20002998 	.word	0x20002998
 8014b04:	2000299c 	.word	0x2000299c
 8014b08:	e000ed20 	.word	0xe000ed20
 8014b0c:	200021a8 	.word	0x200021a8
 8014b10:	e000ef34 	.word	0xe000ef34

08014b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014b14:	b480      	push	{r7}
 8014b16:	b083      	sub	sp, #12
 8014b18:	af00      	add	r7, sp, #0
	__asm volatile
 8014b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b1e:	f383 8811 	msr	BASEPRI, r3
 8014b22:	f3bf 8f6f 	isb	sy
 8014b26:	f3bf 8f4f 	dsb	sy
 8014b2a:	607b      	str	r3, [r7, #4]
}
 8014b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014b2e:	4b0f      	ldr	r3, [pc, #60]	; (8014b6c <vPortEnterCritical+0x58>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	3301      	adds	r3, #1
 8014b34:	4a0d      	ldr	r2, [pc, #52]	; (8014b6c <vPortEnterCritical+0x58>)
 8014b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014b38:	4b0c      	ldr	r3, [pc, #48]	; (8014b6c <vPortEnterCritical+0x58>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	d10f      	bne.n	8014b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014b40:	4b0b      	ldr	r3, [pc, #44]	; (8014b70 <vPortEnterCritical+0x5c>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00a      	beq.n	8014b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8014b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	603b      	str	r3, [r7, #0]
}
 8014b5c:	bf00      	nop
 8014b5e:	e7fe      	b.n	8014b5e <vPortEnterCritical+0x4a>
	}
}
 8014b60:	bf00      	nop
 8014b62:	370c      	adds	r7, #12
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr
 8014b6c:	200021a8 	.word	0x200021a8
 8014b70:	e000ed04 	.word	0xe000ed04

08014b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014b7a:	4b12      	ldr	r3, [pc, #72]	; (8014bc4 <vPortExitCritical+0x50>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d10a      	bne.n	8014b98 <vPortExitCritical+0x24>
	__asm volatile
 8014b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b86:	f383 8811 	msr	BASEPRI, r3
 8014b8a:	f3bf 8f6f 	isb	sy
 8014b8e:	f3bf 8f4f 	dsb	sy
 8014b92:	607b      	str	r3, [r7, #4]
}
 8014b94:	bf00      	nop
 8014b96:	e7fe      	b.n	8014b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014b98:	4b0a      	ldr	r3, [pc, #40]	; (8014bc4 <vPortExitCritical+0x50>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	3b01      	subs	r3, #1
 8014b9e:	4a09      	ldr	r2, [pc, #36]	; (8014bc4 <vPortExitCritical+0x50>)
 8014ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014ba2:	4b08      	ldr	r3, [pc, #32]	; (8014bc4 <vPortExitCritical+0x50>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d105      	bne.n	8014bb6 <vPortExitCritical+0x42>
 8014baa:	2300      	movs	r3, #0
 8014bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	f383 8811 	msr	BASEPRI, r3
}
 8014bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014bb6:	bf00      	nop
 8014bb8:	370c      	adds	r7, #12
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr
 8014bc2:	bf00      	nop
 8014bc4:	200021a8 	.word	0x200021a8
	...

08014bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014bd0:	f3ef 8009 	mrs	r0, PSP
 8014bd4:	f3bf 8f6f 	isb	sy
 8014bd8:	4b15      	ldr	r3, [pc, #84]	; (8014c30 <pxCurrentTCBConst>)
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	f01e 0f10 	tst.w	lr, #16
 8014be0:	bf08      	it	eq
 8014be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bea:	6010      	str	r0, [r2, #0]
 8014bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014bf4:	f380 8811 	msr	BASEPRI, r0
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	f3bf 8f6f 	isb	sy
 8014c00:	f7ff f92a 	bl	8013e58 <vTaskSwitchContext>
 8014c04:	f04f 0000 	mov.w	r0, #0
 8014c08:	f380 8811 	msr	BASEPRI, r0
 8014c0c:	bc09      	pop	{r0, r3}
 8014c0e:	6819      	ldr	r1, [r3, #0]
 8014c10:	6808      	ldr	r0, [r1, #0]
 8014c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c16:	f01e 0f10 	tst.w	lr, #16
 8014c1a:	bf08      	it	eq
 8014c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014c20:	f380 8809 	msr	PSP, r0
 8014c24:	f3bf 8f6f 	isb	sy
 8014c28:	4770      	bx	lr
 8014c2a:	bf00      	nop
 8014c2c:	f3af 8000 	nop.w

08014c30 <pxCurrentTCBConst>:
 8014c30:	2000286c 	.word	0x2000286c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014c34:	bf00      	nop
 8014c36:	bf00      	nop

08014c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8014c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c42:	f383 8811 	msr	BASEPRI, r3
 8014c46:	f3bf 8f6f 	isb	sy
 8014c4a:	f3bf 8f4f 	dsb	sy
 8014c4e:	607b      	str	r3, [r7, #4]
}
 8014c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014c52:	f7ff f849 	bl	8013ce8 <xTaskIncrementTick>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d003      	beq.n	8014c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014c5c:	4b06      	ldr	r3, [pc, #24]	; (8014c78 <SysTick_Handler+0x40>)
 8014c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c62:	601a      	str	r2, [r3, #0]
 8014c64:	2300      	movs	r3, #0
 8014c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	f383 8811 	msr	BASEPRI, r3
}
 8014c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014c70:	bf00      	nop
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	e000ed04 	.word	0xe000ed04

08014c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014c80:	4b0b      	ldr	r3, [pc, #44]	; (8014cb0 <vPortSetupTimerInterrupt+0x34>)
 8014c82:	2200      	movs	r2, #0
 8014c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014c86:	4b0b      	ldr	r3, [pc, #44]	; (8014cb4 <vPortSetupTimerInterrupt+0x38>)
 8014c88:	2200      	movs	r2, #0
 8014c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014c8c:	4b0a      	ldr	r3, [pc, #40]	; (8014cb8 <vPortSetupTimerInterrupt+0x3c>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	4a0a      	ldr	r2, [pc, #40]	; (8014cbc <vPortSetupTimerInterrupt+0x40>)
 8014c92:	fba2 2303 	umull	r2, r3, r2, r3
 8014c96:	099b      	lsrs	r3, r3, #6
 8014c98:	4a09      	ldr	r2, [pc, #36]	; (8014cc0 <vPortSetupTimerInterrupt+0x44>)
 8014c9a:	3b01      	subs	r3, #1
 8014c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014c9e:	4b04      	ldr	r3, [pc, #16]	; (8014cb0 <vPortSetupTimerInterrupt+0x34>)
 8014ca0:	2207      	movs	r2, #7
 8014ca2:	601a      	str	r2, [r3, #0]
}
 8014ca4:	bf00      	nop
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop
 8014cb0:	e000e010 	.word	0xe000e010
 8014cb4:	e000e018 	.word	0xe000e018
 8014cb8:	2000208c 	.word	0x2000208c
 8014cbc:	10624dd3 	.word	0x10624dd3
 8014cc0:	e000e014 	.word	0xe000e014

08014cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014cd4 <vPortEnableVFP+0x10>
 8014cc8:	6801      	ldr	r1, [r0, #0]
 8014cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014cce:	6001      	str	r1, [r0, #0]
 8014cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014cd2:	bf00      	nop
 8014cd4:	e000ed88 	.word	0xe000ed88

08014cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014cde:	f3ef 8305 	mrs	r3, IPSR
 8014ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	2b0f      	cmp	r3, #15
 8014ce8:	d914      	bls.n	8014d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014cea:	4a17      	ldr	r2, [pc, #92]	; (8014d48 <vPortValidateInterruptPriority+0x70>)
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	4413      	add	r3, r2
 8014cf0:	781b      	ldrb	r3, [r3, #0]
 8014cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014cf4:	4b15      	ldr	r3, [pc, #84]	; (8014d4c <vPortValidateInterruptPriority+0x74>)
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	7afa      	ldrb	r2, [r7, #11]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d20a      	bcs.n	8014d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d02:	f383 8811 	msr	BASEPRI, r3
 8014d06:	f3bf 8f6f 	isb	sy
 8014d0a:	f3bf 8f4f 	dsb	sy
 8014d0e:	607b      	str	r3, [r7, #4]
}
 8014d10:	bf00      	nop
 8014d12:	e7fe      	b.n	8014d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014d14:	4b0e      	ldr	r3, [pc, #56]	; (8014d50 <vPortValidateInterruptPriority+0x78>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014d1c:	4b0d      	ldr	r3, [pc, #52]	; (8014d54 <vPortValidateInterruptPriority+0x7c>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	429a      	cmp	r2, r3
 8014d22:	d90a      	bls.n	8014d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d28:	f383 8811 	msr	BASEPRI, r3
 8014d2c:	f3bf 8f6f 	isb	sy
 8014d30:	f3bf 8f4f 	dsb	sy
 8014d34:	603b      	str	r3, [r7, #0]
}
 8014d36:	bf00      	nop
 8014d38:	e7fe      	b.n	8014d38 <vPortValidateInterruptPriority+0x60>
	}
 8014d3a:	bf00      	nop
 8014d3c:	3714      	adds	r7, #20
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr
 8014d46:	bf00      	nop
 8014d48:	e000e3f0 	.word	0xe000e3f0
 8014d4c:	20002998 	.word	0x20002998
 8014d50:	e000ed0c 	.word	0xe000ed0c
 8014d54:	2000299c 	.word	0x2000299c

08014d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b08a      	sub	sp, #40	; 0x28
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014d60:	2300      	movs	r3, #0
 8014d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014d64:	f7fe ff16 	bl	8013b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014d68:	4b58      	ldr	r3, [pc, #352]	; (8014ecc <pvPortMalloc+0x174>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d101      	bne.n	8014d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014d70:	f000 f910 	bl	8014f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014d74:	4b56      	ldr	r3, [pc, #344]	; (8014ed0 <pvPortMalloc+0x178>)
 8014d76:	681a      	ldr	r2, [r3, #0]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4013      	ands	r3, r2
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f040 808e 	bne.w	8014e9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d01d      	beq.n	8014dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014d88:	2208      	movs	r2, #8
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	4413      	add	r3, r2
 8014d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f003 0307 	and.w	r3, r3, #7
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d014      	beq.n	8014dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f023 0307 	bic.w	r3, r3, #7
 8014da0:	3308      	adds	r3, #8
 8014da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f003 0307 	and.w	r3, r3, #7
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d00a      	beq.n	8014dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8014dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db2:	f383 8811 	msr	BASEPRI, r3
 8014db6:	f3bf 8f6f 	isb	sy
 8014dba:	f3bf 8f4f 	dsb	sy
 8014dbe:	617b      	str	r3, [r7, #20]
}
 8014dc0:	bf00      	nop
 8014dc2:	e7fe      	b.n	8014dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d069      	beq.n	8014e9e <pvPortMalloc+0x146>
 8014dca:	4b42      	ldr	r3, [pc, #264]	; (8014ed4 <pvPortMalloc+0x17c>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d864      	bhi.n	8014e9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014dd4:	4b40      	ldr	r3, [pc, #256]	; (8014ed8 <pvPortMalloc+0x180>)
 8014dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014dd8:	4b3f      	ldr	r3, [pc, #252]	; (8014ed8 <pvPortMalloc+0x180>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014dde:	e004      	b.n	8014dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	429a      	cmp	r2, r3
 8014df2:	d903      	bls.n	8014dfc <pvPortMalloc+0xa4>
 8014df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d1f1      	bne.n	8014de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014dfc:	4b33      	ldr	r3, [pc, #204]	; (8014ecc <pvPortMalloc+0x174>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d04b      	beq.n	8014e9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014e06:	6a3b      	ldr	r3, [r7, #32]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	2208      	movs	r2, #8
 8014e0c:	4413      	add	r3, r2
 8014e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e12:	681a      	ldr	r2, [r3, #0]
 8014e14:	6a3b      	ldr	r3, [r7, #32]
 8014e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1a:	685a      	ldr	r2, [r3, #4]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	1ad2      	subs	r2, r2, r3
 8014e20:	2308      	movs	r3, #8
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d91f      	bls.n	8014e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e30:	69bb      	ldr	r3, [r7, #24]
 8014e32:	f003 0307 	and.w	r3, r3, #7
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d00a      	beq.n	8014e50 <pvPortMalloc+0xf8>
	__asm volatile
 8014e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e3e:	f383 8811 	msr	BASEPRI, r3
 8014e42:	f3bf 8f6f 	isb	sy
 8014e46:	f3bf 8f4f 	dsb	sy
 8014e4a:	613b      	str	r3, [r7, #16]
}
 8014e4c:	bf00      	nop
 8014e4e:	e7fe      	b.n	8014e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e52:	685a      	ldr	r2, [r3, #4]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	1ad2      	subs	r2, r2, r3
 8014e58:	69bb      	ldr	r3, [r7, #24]
 8014e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014e62:	69b8      	ldr	r0, [r7, #24]
 8014e64:	f000 f8f8 	bl	8015058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014e68:	4b1a      	ldr	r3, [pc, #104]	; (8014ed4 <pvPortMalloc+0x17c>)
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	1ad3      	subs	r3, r2, r3
 8014e72:	4a18      	ldr	r2, [pc, #96]	; (8014ed4 <pvPortMalloc+0x17c>)
 8014e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014e76:	4b17      	ldr	r3, [pc, #92]	; (8014ed4 <pvPortMalloc+0x17c>)
 8014e78:	681a      	ldr	r2, [r3, #0]
 8014e7a:	4b18      	ldr	r3, [pc, #96]	; (8014edc <pvPortMalloc+0x184>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d203      	bcs.n	8014e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014e82:	4b14      	ldr	r3, [pc, #80]	; (8014ed4 <pvPortMalloc+0x17c>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	4a15      	ldr	r2, [pc, #84]	; (8014edc <pvPortMalloc+0x184>)
 8014e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8c:	685a      	ldr	r2, [r3, #4]
 8014e8e:	4b10      	ldr	r3, [pc, #64]	; (8014ed0 <pvPortMalloc+0x178>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	431a      	orrs	r2, r3
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014e9e:	f7fe fe87 	bl	8013bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	f003 0307 	and.w	r3, r3, #7
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d00a      	beq.n	8014ec2 <pvPortMalloc+0x16a>
	__asm volatile
 8014eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb0:	f383 8811 	msr	BASEPRI, r3
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	f3bf 8f4f 	dsb	sy
 8014ebc:	60fb      	str	r3, [r7, #12]
}
 8014ebe:	bf00      	nop
 8014ec0:	e7fe      	b.n	8014ec0 <pvPortMalloc+0x168>
	return pvReturn;
 8014ec2:	69fb      	ldr	r3, [r7, #28]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3728      	adds	r7, #40	; 0x28
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	200065a8 	.word	0x200065a8
 8014ed0:	200065b4 	.word	0x200065b4
 8014ed4:	200065ac 	.word	0x200065ac
 8014ed8:	200065a0 	.word	0x200065a0
 8014edc:	200065b0 	.word	0x200065b0

08014ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b086      	sub	sp, #24
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d048      	beq.n	8014f84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014ef2:	2308      	movs	r3, #8
 8014ef4:	425b      	negs	r3, r3
 8014ef6:	697a      	ldr	r2, [r7, #20]
 8014ef8:	4413      	add	r3, r2
 8014efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014f00:	693b      	ldr	r3, [r7, #16]
 8014f02:	685a      	ldr	r2, [r3, #4]
 8014f04:	4b21      	ldr	r3, [pc, #132]	; (8014f8c <vPortFree+0xac>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	4013      	ands	r3, r2
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d10a      	bne.n	8014f24 <vPortFree+0x44>
	__asm volatile
 8014f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f12:	f383 8811 	msr	BASEPRI, r3
 8014f16:	f3bf 8f6f 	isb	sy
 8014f1a:	f3bf 8f4f 	dsb	sy
 8014f1e:	60fb      	str	r3, [r7, #12]
}
 8014f20:	bf00      	nop
 8014f22:	e7fe      	b.n	8014f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d00a      	beq.n	8014f42 <vPortFree+0x62>
	__asm volatile
 8014f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f30:	f383 8811 	msr	BASEPRI, r3
 8014f34:	f3bf 8f6f 	isb	sy
 8014f38:	f3bf 8f4f 	dsb	sy
 8014f3c:	60bb      	str	r3, [r7, #8]
}
 8014f3e:	bf00      	nop
 8014f40:	e7fe      	b.n	8014f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	685a      	ldr	r2, [r3, #4]
 8014f46:	4b11      	ldr	r3, [pc, #68]	; (8014f8c <vPortFree+0xac>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	4013      	ands	r3, r2
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d019      	beq.n	8014f84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d115      	bne.n	8014f84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	685a      	ldr	r2, [r3, #4]
 8014f5c:	4b0b      	ldr	r3, [pc, #44]	; (8014f8c <vPortFree+0xac>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	43db      	mvns	r3, r3
 8014f62:	401a      	ands	r2, r3
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014f68:	f7fe fe14 	bl	8013b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	685a      	ldr	r2, [r3, #4]
 8014f70:	4b07      	ldr	r3, [pc, #28]	; (8014f90 <vPortFree+0xb0>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	4413      	add	r3, r2
 8014f76:	4a06      	ldr	r2, [pc, #24]	; (8014f90 <vPortFree+0xb0>)
 8014f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014f7a:	6938      	ldr	r0, [r7, #16]
 8014f7c:	f000 f86c 	bl	8015058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014f80:	f7fe fe16 	bl	8013bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014f84:	bf00      	nop
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	200065b4 	.word	0x200065b4
 8014f90:	200065ac 	.word	0x200065ac

08014f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014f94:	b480      	push	{r7}
 8014f96:	b085      	sub	sp, #20
 8014f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014fa0:	4b27      	ldr	r3, [pc, #156]	; (8015040 <prvHeapInit+0xac>)
 8014fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	f003 0307 	and.w	r3, r3, #7
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d00c      	beq.n	8014fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	3307      	adds	r3, #7
 8014fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f023 0307 	bic.w	r3, r3, #7
 8014fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014fbc:	68ba      	ldr	r2, [r7, #8]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	1ad3      	subs	r3, r2, r3
 8014fc2:	4a1f      	ldr	r2, [pc, #124]	; (8015040 <prvHeapInit+0xac>)
 8014fc4:	4413      	add	r3, r2
 8014fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014fcc:	4a1d      	ldr	r2, [pc, #116]	; (8015044 <prvHeapInit+0xb0>)
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014fd2:	4b1c      	ldr	r3, [pc, #112]	; (8015044 <prvHeapInit+0xb0>)
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	68ba      	ldr	r2, [r7, #8]
 8014fdc:	4413      	add	r3, r2
 8014fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014fe0:	2208      	movs	r2, #8
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	1a9b      	subs	r3, r3, r2
 8014fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f023 0307 	bic.w	r3, r3, #7
 8014fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	4a15      	ldr	r2, [pc, #84]	; (8015048 <prvHeapInit+0xb4>)
 8014ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014ff6:	4b14      	ldr	r3, [pc, #80]	; (8015048 <prvHeapInit+0xb4>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014ffe:	4b12      	ldr	r3, [pc, #72]	; (8015048 <prvHeapInit+0xb4>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	2200      	movs	r2, #0
 8015004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	68fa      	ldr	r2, [r7, #12]
 801500e:	1ad2      	subs	r2, r2, r3
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015014:	4b0c      	ldr	r3, [pc, #48]	; (8015048 <prvHeapInit+0xb4>)
 8015016:	681a      	ldr	r2, [r3, #0]
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	685b      	ldr	r3, [r3, #4]
 8015020:	4a0a      	ldr	r2, [pc, #40]	; (801504c <prvHeapInit+0xb8>)
 8015022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	4a09      	ldr	r2, [pc, #36]	; (8015050 <prvHeapInit+0xbc>)
 801502a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801502c:	4b09      	ldr	r3, [pc, #36]	; (8015054 <prvHeapInit+0xc0>)
 801502e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015032:	601a      	str	r2, [r3, #0]
}
 8015034:	bf00      	nop
 8015036:	3714      	adds	r7, #20
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr
 8015040:	200029a0 	.word	0x200029a0
 8015044:	200065a0 	.word	0x200065a0
 8015048:	200065a8 	.word	0x200065a8
 801504c:	200065b0 	.word	0x200065b0
 8015050:	200065ac 	.word	0x200065ac
 8015054:	200065b4 	.word	0x200065b4

08015058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015058:	b480      	push	{r7}
 801505a:	b085      	sub	sp, #20
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015060:	4b28      	ldr	r3, [pc, #160]	; (8015104 <prvInsertBlockIntoFreeList+0xac>)
 8015062:	60fb      	str	r3, [r7, #12]
 8015064:	e002      	b.n	801506c <prvInsertBlockIntoFreeList+0x14>
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	60fb      	str	r3, [r7, #12]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	687a      	ldr	r2, [r7, #4]
 8015072:	429a      	cmp	r2, r3
 8015074:	d8f7      	bhi.n	8015066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	68ba      	ldr	r2, [r7, #8]
 8015080:	4413      	add	r3, r2
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	429a      	cmp	r2, r3
 8015086:	d108      	bne.n	801509a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	685a      	ldr	r2, [r3, #4]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	441a      	add	r2, r3
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	68ba      	ldr	r2, [r7, #8]
 80150a4:	441a      	add	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d118      	bne.n	80150e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	681a      	ldr	r2, [r3, #0]
 80150b2:	4b15      	ldr	r3, [pc, #84]	; (8015108 <prvInsertBlockIntoFreeList+0xb0>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d00d      	beq.n	80150d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	685a      	ldr	r2, [r3, #4]
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	685b      	ldr	r3, [r3, #4]
 80150c4:	441a      	add	r2, r3
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	601a      	str	r2, [r3, #0]
 80150d4:	e008      	b.n	80150e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80150d6:	4b0c      	ldr	r3, [pc, #48]	; (8015108 <prvInsertBlockIntoFreeList+0xb0>)
 80150d8:	681a      	ldr	r2, [r3, #0]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	601a      	str	r2, [r3, #0]
 80150de:	e003      	b.n	80150e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	681a      	ldr	r2, [r3, #0]
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d002      	beq.n	80150f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80150f6:	bf00      	nop
 80150f8:	3714      	adds	r7, #20
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr
 8015102:	bf00      	nop
 8015104:	200065a0 	.word	0x200065a0
 8015108:	200065a8 	.word	0x200065a8

0801510c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015110:	2200      	movs	r2, #0
 8015112:	4912      	ldr	r1, [pc, #72]	; (801515c <MX_USB_DEVICE_Init+0x50>)
 8015114:	4812      	ldr	r0, [pc, #72]	; (8015160 <MX_USB_DEVICE_Init+0x54>)
 8015116:	f7fc f84f 	bl	80111b8 <USBD_Init>
 801511a:	4603      	mov	r3, r0
 801511c:	2b00      	cmp	r3, #0
 801511e:	d001      	beq.n	8015124 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015120:	f7f0 fa84 	bl	800562c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015124:	490f      	ldr	r1, [pc, #60]	; (8015164 <MX_USB_DEVICE_Init+0x58>)
 8015126:	480e      	ldr	r0, [pc, #56]	; (8015160 <MX_USB_DEVICE_Init+0x54>)
 8015128:	f7fc f87c 	bl	8011224 <USBD_RegisterClass>
 801512c:	4603      	mov	r3, r0
 801512e:	2b00      	cmp	r3, #0
 8015130:	d001      	beq.n	8015136 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015132:	f7f0 fa7b 	bl	800562c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015136:	490c      	ldr	r1, [pc, #48]	; (8015168 <MX_USB_DEVICE_Init+0x5c>)
 8015138:	4809      	ldr	r0, [pc, #36]	; (8015160 <MX_USB_DEVICE_Init+0x54>)
 801513a:	f7fb ffa1 	bl	8011080 <USBD_CDC_RegisterInterface>
 801513e:	4603      	mov	r3, r0
 8015140:	2b00      	cmp	r3, #0
 8015142:	d001      	beq.n	8015148 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015144:	f7f0 fa72 	bl	800562c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015148:	4805      	ldr	r0, [pc, #20]	; (8015160 <MX_USB_DEVICE_Init+0x54>)
 801514a:	f7fc f88c 	bl	8011266 <USBD_Start>
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d001      	beq.n	8015158 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015154:	f7f0 fa6a 	bl	800562c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015158:	bf00      	nop
 801515a:	bd80      	pop	{r7, pc}
 801515c:	200021c0 	.word	0x200021c0
 8015160:	2000ee5c 	.word	0x2000ee5c
 8015164:	200020a4 	.word	0x200020a4
 8015168:	200021ac 	.word	0x200021ac

0801516c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015170:	2200      	movs	r2, #0
 8015172:	4905      	ldr	r1, [pc, #20]	; (8015188 <CDC_Init_FS+0x1c>)
 8015174:	4805      	ldr	r0, [pc, #20]	; (801518c <CDC_Init_FS+0x20>)
 8015176:	f7fb ff98 	bl	80110aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801517a:	4905      	ldr	r1, [pc, #20]	; (8015190 <CDC_Init_FS+0x24>)
 801517c:	4803      	ldr	r0, [pc, #12]	; (801518c <CDC_Init_FS+0x20>)
 801517e:	f7fb ffad 	bl	80110dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015182:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015184:	4618      	mov	r0, r3
 8015186:	bd80      	pop	{r7, pc}
 8015188:	2000f32c 	.word	0x2000f32c
 801518c:	2000ee5c 	.word	0x2000ee5c
 8015190:	2000f12c 	.word	0x2000f12c

08015194 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015194:	b480      	push	{r7}
 8015196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015198:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801519a:	4618      	mov	r0, r3
 801519c:	46bd      	mov	sp, r7
 801519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a2:	4770      	bx	lr

080151a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80151a4:	b480      	push	{r7}
 80151a6:	b083      	sub	sp, #12
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	4603      	mov	r3, r0
 80151ac:	6039      	str	r1, [r7, #0]
 80151ae:	71fb      	strb	r3, [r7, #7]
 80151b0:	4613      	mov	r3, r2
 80151b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80151b4:	79fb      	ldrb	r3, [r7, #7]
 80151b6:	2b23      	cmp	r3, #35	; 0x23
 80151b8:	f200 808c 	bhi.w	80152d4 <CDC_Control_FS+0x130>
 80151bc:	a201      	add	r2, pc, #4	; (adr r2, 80151c4 <CDC_Control_FS+0x20>)
 80151be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151c2:	bf00      	nop
 80151c4:	080152d5 	.word	0x080152d5
 80151c8:	080152d5 	.word	0x080152d5
 80151cc:	080152d5 	.word	0x080152d5
 80151d0:	080152d5 	.word	0x080152d5
 80151d4:	080152d5 	.word	0x080152d5
 80151d8:	080152d5 	.word	0x080152d5
 80151dc:	080152d5 	.word	0x080152d5
 80151e0:	080152d5 	.word	0x080152d5
 80151e4:	080152d5 	.word	0x080152d5
 80151e8:	080152d5 	.word	0x080152d5
 80151ec:	080152d5 	.word	0x080152d5
 80151f0:	080152d5 	.word	0x080152d5
 80151f4:	080152d5 	.word	0x080152d5
 80151f8:	080152d5 	.word	0x080152d5
 80151fc:	080152d5 	.word	0x080152d5
 8015200:	080152d5 	.word	0x080152d5
 8015204:	080152d5 	.word	0x080152d5
 8015208:	080152d5 	.word	0x080152d5
 801520c:	080152d5 	.word	0x080152d5
 8015210:	080152d5 	.word	0x080152d5
 8015214:	080152d5 	.word	0x080152d5
 8015218:	080152d5 	.word	0x080152d5
 801521c:	080152d5 	.word	0x080152d5
 8015220:	080152d5 	.word	0x080152d5
 8015224:	080152d5 	.word	0x080152d5
 8015228:	080152d5 	.word	0x080152d5
 801522c:	080152d5 	.word	0x080152d5
 8015230:	080152d5 	.word	0x080152d5
 8015234:	080152d5 	.word	0x080152d5
 8015238:	080152d5 	.word	0x080152d5
 801523c:	080152d5 	.word	0x080152d5
 8015240:	080152d5 	.word	0x080152d5
 8015244:	08015255 	.word	0x08015255
 8015248:	0801528f 	.word	0x0801528f
 801524c:	080152d5 	.word	0x080152d5
 8015250:	080152d5 	.word	0x080152d5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	781a      	ldrb	r2, [r3, #0]
 8015258:	4b22      	ldr	r3, [pc, #136]	; (80152e4 <CDC_Control_FS+0x140>)
 801525a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	785a      	ldrb	r2, [r3, #1]
 8015260:	4b20      	ldr	r3, [pc, #128]	; (80152e4 <CDC_Control_FS+0x140>)
 8015262:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	789a      	ldrb	r2, [r3, #2]
 8015268:	4b1e      	ldr	r3, [pc, #120]	; (80152e4 <CDC_Control_FS+0x140>)
 801526a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	78da      	ldrb	r2, [r3, #3]
 8015270:	4b1c      	ldr	r3, [pc, #112]	; (80152e4 <CDC_Control_FS+0x140>)
 8015272:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	791a      	ldrb	r2, [r3, #4]
 8015278:	4b1a      	ldr	r3, [pc, #104]	; (80152e4 <CDC_Control_FS+0x140>)
 801527a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	795a      	ldrb	r2, [r3, #5]
 8015280:	4b18      	ldr	r3, [pc, #96]	; (80152e4 <CDC_Control_FS+0x140>)
 8015282:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	799a      	ldrb	r2, [r3, #6]
 8015288:	4b16      	ldr	r3, [pc, #88]	; (80152e4 <CDC_Control_FS+0x140>)
 801528a:	719a      	strb	r2, [r3, #6]
    	break;
 801528c:	e023      	b.n	80152d6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801528e:	4b15      	ldr	r3, [pc, #84]	; (80152e4 <CDC_Control_FS+0x140>)
 8015290:	781a      	ldrb	r2, [r3, #0]
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	3301      	adds	r3, #1
 801529a:	4a12      	ldr	r2, [pc, #72]	; (80152e4 <CDC_Control_FS+0x140>)
 801529c:	7852      	ldrb	r2, [r2, #1]
 801529e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	3302      	adds	r3, #2
 80152a4:	4a0f      	ldr	r2, [pc, #60]	; (80152e4 <CDC_Control_FS+0x140>)
 80152a6:	7892      	ldrb	r2, [r2, #2]
 80152a8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	3303      	adds	r3, #3
 80152ae:	4a0d      	ldr	r2, [pc, #52]	; (80152e4 <CDC_Control_FS+0x140>)
 80152b0:	78d2      	ldrb	r2, [r2, #3]
 80152b2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	3304      	adds	r3, #4
 80152b8:	4a0a      	ldr	r2, [pc, #40]	; (80152e4 <CDC_Control_FS+0x140>)
 80152ba:	7912      	ldrb	r2, [r2, #4]
 80152bc:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	3305      	adds	r3, #5
 80152c2:	4a08      	ldr	r2, [pc, #32]	; (80152e4 <CDC_Control_FS+0x140>)
 80152c4:	7952      	ldrb	r2, [r2, #5]
 80152c6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	3306      	adds	r3, #6
 80152cc:	4a05      	ldr	r2, [pc, #20]	; (80152e4 <CDC_Control_FS+0x140>)
 80152ce:	7992      	ldrb	r2, [r2, #6]
 80152d0:	701a      	strb	r2, [r3, #0]
    break;
 80152d2:	e000      	b.n	80152d6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80152d4:	bf00      	nop
  }

  return (USBD_OK);
 80152d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80152d8:	4618      	mov	r0, r3
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr
 80152e4:	2000f52c 	.word	0x2000f52c

080152e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	461a      	mov	r2, r3
 80152fa:	6879      	ldr	r1, [r7, #4]
 80152fc:	4807      	ldr	r0, [pc, #28]	; (801531c <CDC_Receive_FS+0x34>)
 80152fe:	f7f0 fa27 	bl	8005750 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015302:	6879      	ldr	r1, [r7, #4]
 8015304:	4806      	ldr	r0, [pc, #24]	; (8015320 <CDC_Receive_FS+0x38>)
 8015306:	f7fb fee9 	bl	80110dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801530a:	4805      	ldr	r0, [pc, #20]	; (8015320 <CDC_Receive_FS+0x38>)
 801530c:	f7fb ff2a 	bl	8011164 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015310:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015312:	4618      	mov	r0, r3
 8015314:	3708      	adds	r7, #8
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}
 801531a:	bf00      	nop
 801531c:	20000068 	.word	0x20000068
 8015320:	2000ee5c 	.word	0x2000ee5c

08015324 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	460b      	mov	r3, r1
 801532e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015330:	2300      	movs	r3, #0
 8015332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015334:	4b0d      	ldr	r3, [pc, #52]	; (801536c <CDC_Transmit_FS+0x48>)
 8015336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801533a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015342:	2b00      	cmp	r3, #0
 8015344:	d001      	beq.n	801534a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015346:	2301      	movs	r3, #1
 8015348:	e00b      	b.n	8015362 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801534a:	887b      	ldrh	r3, [r7, #2]
 801534c:	461a      	mov	r2, r3
 801534e:	6879      	ldr	r1, [r7, #4]
 8015350:	4806      	ldr	r0, [pc, #24]	; (801536c <CDC_Transmit_FS+0x48>)
 8015352:	f7fb feaa 	bl	80110aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015356:	4805      	ldr	r0, [pc, #20]	; (801536c <CDC_Transmit_FS+0x48>)
 8015358:	f7fb fed4 	bl	8011104 <USBD_CDC_TransmitPacket>
 801535c:	4603      	mov	r3, r0
 801535e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015360:	7bfb      	ldrb	r3, [r7, #15]
}
 8015362:	4618      	mov	r0, r3
 8015364:	3710      	adds	r7, #16
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	2000ee5c 	.word	0x2000ee5c

08015370 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015370:	b480      	push	{r7}
 8015372:	b087      	sub	sp, #28
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	4613      	mov	r3, r2
 801537c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801537e:	2300      	movs	r3, #0
 8015380:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015386:	4618      	mov	r0, r3
 8015388:	371c      	adds	r7, #28
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr
	...

08015394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015394:	b480      	push	{r7}
 8015396:	b083      	sub	sp, #12
 8015398:	af00      	add	r7, sp, #0
 801539a:	4603      	mov	r3, r0
 801539c:	6039      	str	r1, [r7, #0]
 801539e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	2212      	movs	r2, #18
 80153a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80153a6:	4b03      	ldr	r3, [pc, #12]	; (80153b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	370c      	adds	r7, #12
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr
 80153b4:	200021dc 	.word	0x200021dc

080153b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	6039      	str	r1, [r7, #0]
 80153c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	2204      	movs	r2, #4
 80153c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80153ca:	4b03      	ldr	r3, [pc, #12]	; (80153d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	370c      	adds	r7, #12
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr
 80153d8:	200021f0 	.word	0x200021f0

080153dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	4603      	mov	r3, r0
 80153e4:	6039      	str	r1, [r7, #0]
 80153e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153e8:	79fb      	ldrb	r3, [r7, #7]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d105      	bne.n	80153fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80153ee:	683a      	ldr	r2, [r7, #0]
 80153f0:	4907      	ldr	r1, [pc, #28]	; (8015410 <USBD_FS_ProductStrDescriptor+0x34>)
 80153f2:	4808      	ldr	r0, [pc, #32]	; (8015414 <USBD_FS_ProductStrDescriptor+0x38>)
 80153f4:	f7fc ff14 	bl	8012220 <USBD_GetString>
 80153f8:	e004      	b.n	8015404 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80153fa:	683a      	ldr	r2, [r7, #0]
 80153fc:	4904      	ldr	r1, [pc, #16]	; (8015410 <USBD_FS_ProductStrDescriptor+0x34>)
 80153fe:	4805      	ldr	r0, [pc, #20]	; (8015414 <USBD_FS_ProductStrDescriptor+0x38>)
 8015400:	f7fc ff0e 	bl	8012220 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015404:	4b02      	ldr	r3, [pc, #8]	; (8015410 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015406:	4618      	mov	r0, r3
 8015408:	3708      	adds	r7, #8
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	2000f534 	.word	0x2000f534
 8015414:	0801c14c 	.word	0x0801c14c

08015418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	4603      	mov	r3, r0
 8015420:	6039      	str	r1, [r7, #0]
 8015422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015424:	683a      	ldr	r2, [r7, #0]
 8015426:	4904      	ldr	r1, [pc, #16]	; (8015438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015428:	4804      	ldr	r0, [pc, #16]	; (801543c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801542a:	f7fc fef9 	bl	8012220 <USBD_GetString>
  return USBD_StrDesc;
 801542e:	4b02      	ldr	r3, [pc, #8]	; (8015438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015430:	4618      	mov	r0, r3
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	2000f534 	.word	0x2000f534
 801543c:	0801c164 	.word	0x0801c164

08015440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	4603      	mov	r3, r0
 8015448:	6039      	str	r1, [r7, #0]
 801544a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	221a      	movs	r2, #26
 8015450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015452:	f000 f843 	bl	80154dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015456:	4b02      	ldr	r3, [pc, #8]	; (8015460 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015458:	4618      	mov	r0, r3
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	200021f4 	.word	0x200021f4

08015464 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
 801546a:	4603      	mov	r3, r0
 801546c:	6039      	str	r1, [r7, #0]
 801546e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015470:	79fb      	ldrb	r3, [r7, #7]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d105      	bne.n	8015482 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015476:	683a      	ldr	r2, [r7, #0]
 8015478:	4907      	ldr	r1, [pc, #28]	; (8015498 <USBD_FS_ConfigStrDescriptor+0x34>)
 801547a:	4808      	ldr	r0, [pc, #32]	; (801549c <USBD_FS_ConfigStrDescriptor+0x38>)
 801547c:	f7fc fed0 	bl	8012220 <USBD_GetString>
 8015480:	e004      	b.n	801548c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015482:	683a      	ldr	r2, [r7, #0]
 8015484:	4904      	ldr	r1, [pc, #16]	; (8015498 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015486:	4805      	ldr	r0, [pc, #20]	; (801549c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015488:	f7fc feca 	bl	8012220 <USBD_GetString>
  }
  return USBD_StrDesc;
 801548c:	4b02      	ldr	r3, [pc, #8]	; (8015498 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801548e:	4618      	mov	r0, r3
 8015490:	3708      	adds	r7, #8
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	2000f534 	.word	0x2000f534
 801549c:	0801c178 	.word	0x0801c178

080154a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b082      	sub	sp, #8
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	4603      	mov	r3, r0
 80154a8:	6039      	str	r1, [r7, #0]
 80154aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154ac:	79fb      	ldrb	r3, [r7, #7]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d105      	bne.n	80154be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154b2:	683a      	ldr	r2, [r7, #0]
 80154b4:	4907      	ldr	r1, [pc, #28]	; (80154d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154b6:	4808      	ldr	r0, [pc, #32]	; (80154d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154b8:	f7fc feb2 	bl	8012220 <USBD_GetString>
 80154bc:	e004      	b.n	80154c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154be:	683a      	ldr	r2, [r7, #0]
 80154c0:	4904      	ldr	r1, [pc, #16]	; (80154d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154c2:	4805      	ldr	r0, [pc, #20]	; (80154d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154c4:	f7fc feac 	bl	8012220 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154c8:	4b02      	ldr	r3, [pc, #8]	; (80154d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3708      	adds	r7, #8
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	2000f534 	.word	0x2000f534
 80154d8:	0801c184 	.word	0x0801c184

080154dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80154e2:	4b0f      	ldr	r3, [pc, #60]	; (8015520 <Get_SerialNum+0x44>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80154e8:	4b0e      	ldr	r3, [pc, #56]	; (8015524 <Get_SerialNum+0x48>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80154ee:	4b0e      	ldr	r3, [pc, #56]	; (8015528 <Get_SerialNum+0x4c>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80154f4:	68fa      	ldr	r2, [r7, #12]
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	4413      	add	r3, r2
 80154fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d009      	beq.n	8015516 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015502:	2208      	movs	r2, #8
 8015504:	4909      	ldr	r1, [pc, #36]	; (801552c <Get_SerialNum+0x50>)
 8015506:	68f8      	ldr	r0, [r7, #12]
 8015508:	f000 f814 	bl	8015534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801550c:	2204      	movs	r2, #4
 801550e:	4908      	ldr	r1, [pc, #32]	; (8015530 <Get_SerialNum+0x54>)
 8015510:	68b8      	ldr	r0, [r7, #8]
 8015512:	f000 f80f 	bl	8015534 <IntToUnicode>
  }
}
 8015516:	bf00      	nop
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop
 8015520:	1fff7a10 	.word	0x1fff7a10
 8015524:	1fff7a14 	.word	0x1fff7a14
 8015528:	1fff7a18 	.word	0x1fff7a18
 801552c:	200021f6 	.word	0x200021f6
 8015530:	20002206 	.word	0x20002206

08015534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015534:	b480      	push	{r7}
 8015536:	b087      	sub	sp, #28
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	4613      	mov	r3, r2
 8015540:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015542:	2300      	movs	r3, #0
 8015544:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015546:	2300      	movs	r3, #0
 8015548:	75fb      	strb	r3, [r7, #23]
 801554a:	e027      	b.n	801559c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	0f1b      	lsrs	r3, r3, #28
 8015550:	2b09      	cmp	r3, #9
 8015552:	d80b      	bhi.n	801556c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	0f1b      	lsrs	r3, r3, #28
 8015558:	b2da      	uxtb	r2, r3
 801555a:	7dfb      	ldrb	r3, [r7, #23]
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4619      	mov	r1, r3
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	440b      	add	r3, r1
 8015564:	3230      	adds	r2, #48	; 0x30
 8015566:	b2d2      	uxtb	r2, r2
 8015568:	701a      	strb	r2, [r3, #0]
 801556a:	e00a      	b.n	8015582 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	0f1b      	lsrs	r3, r3, #28
 8015570:	b2da      	uxtb	r2, r3
 8015572:	7dfb      	ldrb	r3, [r7, #23]
 8015574:	005b      	lsls	r3, r3, #1
 8015576:	4619      	mov	r1, r3
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	440b      	add	r3, r1
 801557c:	3237      	adds	r2, #55	; 0x37
 801557e:	b2d2      	uxtb	r2, r2
 8015580:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	011b      	lsls	r3, r3, #4
 8015586:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015588:	7dfb      	ldrb	r3, [r7, #23]
 801558a:	005b      	lsls	r3, r3, #1
 801558c:	3301      	adds	r3, #1
 801558e:	68ba      	ldr	r2, [r7, #8]
 8015590:	4413      	add	r3, r2
 8015592:	2200      	movs	r2, #0
 8015594:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015596:	7dfb      	ldrb	r3, [r7, #23]
 8015598:	3301      	adds	r3, #1
 801559a:	75fb      	strb	r3, [r7, #23]
 801559c:	7dfa      	ldrb	r2, [r7, #23]
 801559e:	79fb      	ldrb	r3, [r7, #7]
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d3d3      	bcc.n	801554c <IntToUnicode+0x18>
  }
}
 80155a4:	bf00      	nop
 80155a6:	bf00      	nop
 80155a8:	371c      	adds	r7, #28
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr
	...

080155b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b08a      	sub	sp, #40	; 0x28
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155bc:	f107 0314 	add.w	r3, r7, #20
 80155c0:	2200      	movs	r2, #0
 80155c2:	601a      	str	r2, [r3, #0]
 80155c4:	605a      	str	r2, [r3, #4]
 80155c6:	609a      	str	r2, [r3, #8]
 80155c8:	60da      	str	r2, [r3, #12]
 80155ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80155d4:	d13a      	bne.n	801564c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80155d6:	2300      	movs	r3, #0
 80155d8:	613b      	str	r3, [r7, #16]
 80155da:	4b1e      	ldr	r3, [pc, #120]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 80155dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155de:	4a1d      	ldr	r2, [pc, #116]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 80155e0:	f043 0301 	orr.w	r3, r3, #1
 80155e4:	6313      	str	r3, [r2, #48]	; 0x30
 80155e6:	4b1b      	ldr	r3, [pc, #108]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 80155e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155ea:	f003 0301 	and.w	r3, r3, #1
 80155ee:	613b      	str	r3, [r7, #16]
 80155f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80155f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80155f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80155f8:	2302      	movs	r3, #2
 80155fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155fc:	2300      	movs	r3, #0
 80155fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015600:	2303      	movs	r3, #3
 8015602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015604:	230a      	movs	r3, #10
 8015606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015608:	f107 0314 	add.w	r3, r7, #20
 801560c:	4619      	mov	r1, r3
 801560e:	4812      	ldr	r0, [pc, #72]	; (8015658 <HAL_PCD_MspInit+0xa4>)
 8015610:	f7f6 fb4a 	bl	800bca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015614:	4b0f      	ldr	r3, [pc, #60]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 8015616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015618:	4a0e      	ldr	r2, [pc, #56]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 801561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801561e:	6353      	str	r3, [r2, #52]	; 0x34
 8015620:	2300      	movs	r3, #0
 8015622:	60fb      	str	r3, [r7, #12]
 8015624:	4b0b      	ldr	r3, [pc, #44]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 8015626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015628:	4a0a      	ldr	r2, [pc, #40]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 801562a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801562e:	6453      	str	r3, [r2, #68]	; 0x44
 8015630:	4b08      	ldr	r3, [pc, #32]	; (8015654 <HAL_PCD_MspInit+0xa0>)
 8015632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015638:	60fb      	str	r3, [r7, #12]
 801563a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801563c:	2200      	movs	r2, #0
 801563e:	2105      	movs	r1, #5
 8015640:	2043      	movs	r0, #67	; 0x43
 8015642:	f7f5 ff67 	bl	800b514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015646:	2043      	movs	r0, #67	; 0x43
 8015648:	f7f5 ff80 	bl	800b54c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801564c:	bf00      	nop
 801564e:	3728      	adds	r7, #40	; 0x28
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}
 8015654:	40023800 	.word	0x40023800
 8015658:	40020000 	.word	0x40020000

0801565c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b082      	sub	sp, #8
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015670:	4619      	mov	r1, r3
 8015672:	4610      	mov	r0, r2
 8015674:	f7fb fe42 	bl	80112fc <USBD_LL_SetupStage>
}
 8015678:	bf00      	nop
 801567a:	3708      	adds	r7, #8
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	460b      	mov	r3, r1
 801568a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015692:	78fa      	ldrb	r2, [r7, #3]
 8015694:	6879      	ldr	r1, [r7, #4]
 8015696:	4613      	mov	r3, r2
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	1a9b      	subs	r3, r3, r2
 801569c:	009b      	lsls	r3, r3, #2
 801569e:	440b      	add	r3, r1
 80156a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	78fb      	ldrb	r3, [r7, #3]
 80156a8:	4619      	mov	r1, r3
 80156aa:	f7fb fe7c 	bl	80113a6 <USBD_LL_DataOutStage>
}
 80156ae:	bf00      	nop
 80156b0:	3708      	adds	r7, #8
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}

080156b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b6:	b580      	push	{r7, lr}
 80156b8:	b082      	sub	sp, #8
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	6078      	str	r0, [r7, #4]
 80156be:	460b      	mov	r3, r1
 80156c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80156c8:	78fa      	ldrb	r2, [r7, #3]
 80156ca:	6879      	ldr	r1, [r7, #4]
 80156cc:	4613      	mov	r3, r2
 80156ce:	00db      	lsls	r3, r3, #3
 80156d0:	1a9b      	subs	r3, r3, r2
 80156d2:	009b      	lsls	r3, r3, #2
 80156d4:	440b      	add	r3, r1
 80156d6:	3348      	adds	r3, #72	; 0x48
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	78fb      	ldrb	r3, [r7, #3]
 80156dc:	4619      	mov	r1, r3
 80156de:	f7fb fec5 	bl	801146c <USBD_LL_DataInStage>
}
 80156e2:	bf00      	nop
 80156e4:	3708      	adds	r7, #8
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}

080156ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156ea:	b580      	push	{r7, lr}
 80156ec:	b082      	sub	sp, #8
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7fb ffc9 	bl	8011690 <USBD_LL_SOF>
}
 80156fe:	bf00      	nop
 8015700:	3708      	adds	r7, #8
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}

08015706 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015706:	b580      	push	{r7, lr}
 8015708:	b084      	sub	sp, #16
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801570e:	2301      	movs	r3, #1
 8015710:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	68db      	ldr	r3, [r3, #12]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d102      	bne.n	8015720 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801571a:	2300      	movs	r3, #0
 801571c:	73fb      	strb	r3, [r7, #15]
 801571e:	e008      	b.n	8015732 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	68db      	ldr	r3, [r3, #12]
 8015724:	2b02      	cmp	r3, #2
 8015726:	d102      	bne.n	801572e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015728:	2301      	movs	r3, #1
 801572a:	73fb      	strb	r3, [r7, #15]
 801572c:	e001      	b.n	8015732 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801572e:	f7ef ff7d 	bl	800562c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015738:	7bfa      	ldrb	r2, [r7, #15]
 801573a:	4611      	mov	r1, r2
 801573c:	4618      	mov	r0, r3
 801573e:	f7fb ff6c 	bl	801161a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015748:	4618      	mov	r0, r3
 801574a:	f7fb ff25 	bl	8011598 <USBD_LL_Reset>
}
 801574e:	bf00      	nop
 8015750:	3710      	adds	r7, #16
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
	...

08015758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015766:	4618      	mov	r0, r3
 8015768:	f7fb ff67 	bl	801163a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	687a      	ldr	r2, [r7, #4]
 8015778:	6812      	ldr	r2, [r2, #0]
 801577a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801577e:	f043 0301 	orr.w	r3, r3, #1
 8015782:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6a1b      	ldr	r3, [r3, #32]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d005      	beq.n	8015798 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801578c:	4b04      	ldr	r3, [pc, #16]	; (80157a0 <HAL_PCD_SuspendCallback+0x48>)
 801578e:	691b      	ldr	r3, [r3, #16]
 8015790:	4a03      	ldr	r2, [pc, #12]	; (80157a0 <HAL_PCD_SuspendCallback+0x48>)
 8015792:	f043 0306 	orr.w	r3, r3, #6
 8015796:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015798:	bf00      	nop
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	e000ed00 	.word	0xe000ed00

080157a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b082      	sub	sp, #8
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7fb ff56 	bl	8011664 <USBD_LL_Resume>
}
 80157b8:	bf00      	nop
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	460b      	mov	r3, r1
 80157ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157d2:	78fa      	ldrb	r2, [r7, #3]
 80157d4:	4611      	mov	r1, r2
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7fb ff81 	bl	80116de <USBD_LL_IsoOUTIncomplete>
}
 80157dc:	bf00      	nop
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	460b      	mov	r3, r1
 80157ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157f6:	78fa      	ldrb	r2, [r7, #3]
 80157f8:	4611      	mov	r1, r2
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7fb ff62 	bl	80116c4 <USBD_LL_IsoINIncomplete>
}
 8015800:	bf00      	nop
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015816:	4618      	mov	r0, r3
 8015818:	f7fb ff6e 	bl	80116f8 <USBD_LL_DevConnected>
}
 801581c:	bf00      	nop
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015832:	4618      	mov	r0, r3
 8015834:	f7fb ff6b 	bl	801170e <USBD_LL_DevDisconnected>
}
 8015838:	bf00      	nop
 801583a:	3708      	adds	r7, #8
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d13c      	bne.n	80158ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015850:	4a20      	ldr	r2, [pc, #128]	; (80158d4 <USBD_LL_Init+0x94>)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	4a1e      	ldr	r2, [pc, #120]	; (80158d4 <USBD_LL_Init+0x94>)
 801585c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015860:	4b1c      	ldr	r3, [pc, #112]	; (80158d4 <USBD_LL_Init+0x94>)
 8015862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015868:	4b1a      	ldr	r3, [pc, #104]	; (80158d4 <USBD_LL_Init+0x94>)
 801586a:	2204      	movs	r2, #4
 801586c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801586e:	4b19      	ldr	r3, [pc, #100]	; (80158d4 <USBD_LL_Init+0x94>)
 8015870:	2202      	movs	r2, #2
 8015872:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015874:	4b17      	ldr	r3, [pc, #92]	; (80158d4 <USBD_LL_Init+0x94>)
 8015876:	2200      	movs	r2, #0
 8015878:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801587a:	4b16      	ldr	r3, [pc, #88]	; (80158d4 <USBD_LL_Init+0x94>)
 801587c:	2202      	movs	r2, #2
 801587e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015880:	4b14      	ldr	r3, [pc, #80]	; (80158d4 <USBD_LL_Init+0x94>)
 8015882:	2200      	movs	r2, #0
 8015884:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015886:	4b13      	ldr	r3, [pc, #76]	; (80158d4 <USBD_LL_Init+0x94>)
 8015888:	2200      	movs	r2, #0
 801588a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801588c:	4b11      	ldr	r3, [pc, #68]	; (80158d4 <USBD_LL_Init+0x94>)
 801588e:	2200      	movs	r2, #0
 8015890:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015892:	4b10      	ldr	r3, [pc, #64]	; (80158d4 <USBD_LL_Init+0x94>)
 8015894:	2200      	movs	r2, #0
 8015896:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015898:	4b0e      	ldr	r3, [pc, #56]	; (80158d4 <USBD_LL_Init+0x94>)
 801589a:	2200      	movs	r2, #0
 801589c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801589e:	480d      	ldr	r0, [pc, #52]	; (80158d4 <USBD_LL_Init+0x94>)
 80158a0:	f7f6 fc0e 	bl	800c0c0 <HAL_PCD_Init>
 80158a4:	4603      	mov	r3, r0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d001      	beq.n	80158ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80158aa:	f7ef febf 	bl	800562c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80158ae:	2180      	movs	r1, #128	; 0x80
 80158b0:	4808      	ldr	r0, [pc, #32]	; (80158d4 <USBD_LL_Init+0x94>)
 80158b2:	f7f7 fd6c 	bl	800d38e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80158b6:	2240      	movs	r2, #64	; 0x40
 80158b8:	2100      	movs	r1, #0
 80158ba:	4806      	ldr	r0, [pc, #24]	; (80158d4 <USBD_LL_Init+0x94>)
 80158bc:	f7f7 fd20 	bl	800d300 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80158c0:	2280      	movs	r2, #128	; 0x80
 80158c2:	2101      	movs	r1, #1
 80158c4:	4803      	ldr	r0, [pc, #12]	; (80158d4 <USBD_LL_Init+0x94>)
 80158c6:	f7f7 fd1b 	bl	800d300 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80158ca:	2300      	movs	r3, #0
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	2000f734 	.word	0x2000f734

080158d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158e0:	2300      	movs	r3, #0
 80158e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158e4:	2300      	movs	r3, #0
 80158e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7f6 fd03 	bl	800c2fa <HAL_PCD_Start>
 80158f4:	4603      	mov	r3, r0
 80158f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158f8:	7bfb      	ldrb	r3, [r7, #15]
 80158fa:	4618      	mov	r0, r3
 80158fc:	f000 f92a 	bl	8015b54 <USBD_Get_USB_Status>
 8015900:	4603      	mov	r3, r0
 8015902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015904:	7bbb      	ldrb	r3, [r7, #14]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801590e:	b580      	push	{r7, lr}
 8015910:	b084      	sub	sp, #16
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
 8015916:	4608      	mov	r0, r1
 8015918:	4611      	mov	r1, r2
 801591a:	461a      	mov	r2, r3
 801591c:	4603      	mov	r3, r0
 801591e:	70fb      	strb	r3, [r7, #3]
 8015920:	460b      	mov	r3, r1
 8015922:	70bb      	strb	r3, [r7, #2]
 8015924:	4613      	mov	r3, r2
 8015926:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015928:	2300      	movs	r3, #0
 801592a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801592c:	2300      	movs	r3, #0
 801592e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015936:	78bb      	ldrb	r3, [r7, #2]
 8015938:	883a      	ldrh	r2, [r7, #0]
 801593a:	78f9      	ldrb	r1, [r7, #3]
 801593c:	f7f7 f8e7 	bl	800cb0e <HAL_PCD_EP_Open>
 8015940:	4603      	mov	r3, r0
 8015942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015944:	7bfb      	ldrb	r3, [r7, #15]
 8015946:	4618      	mov	r0, r3
 8015948:	f000 f904 	bl	8015b54 <USBD_Get_USB_Status>
 801594c:	4603      	mov	r3, r0
 801594e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015950:	7bbb      	ldrb	r3, [r7, #14]
}
 8015952:	4618      	mov	r0, r3
 8015954:	3710      	adds	r7, #16
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b084      	sub	sp, #16
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
 8015962:	460b      	mov	r3, r1
 8015964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015966:	2300      	movs	r3, #0
 8015968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801596a:	2300      	movs	r3, #0
 801596c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015974:	78fa      	ldrb	r2, [r7, #3]
 8015976:	4611      	mov	r1, r2
 8015978:	4618      	mov	r0, r3
 801597a:	f7f7 f930 	bl	800cbde <HAL_PCD_EP_Close>
 801597e:	4603      	mov	r3, r0
 8015980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015982:	7bfb      	ldrb	r3, [r7, #15]
 8015984:	4618      	mov	r0, r3
 8015986:	f000 f8e5 	bl	8015b54 <USBD_Get_USB_Status>
 801598a:	4603      	mov	r3, r0
 801598c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801598e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015990:	4618      	mov	r0, r3
 8015992:	3710      	adds	r7, #16
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b084      	sub	sp, #16
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	460b      	mov	r3, r1
 80159a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159a4:	2300      	movs	r3, #0
 80159a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159a8:	2300      	movs	r3, #0
 80159aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159b2:	78fa      	ldrb	r2, [r7, #3]
 80159b4:	4611      	mov	r1, r2
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7f7 fa08 	bl	800cdcc <HAL_PCD_EP_SetStall>
 80159bc:	4603      	mov	r3, r0
 80159be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159c0:	7bfb      	ldrb	r3, [r7, #15]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f000 f8c6 	bl	8015b54 <USBD_Get_USB_Status>
 80159c8:	4603      	mov	r3, r0
 80159ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80159ce:	4618      	mov	r0, r3
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}

080159d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159d6:	b580      	push	{r7, lr}
 80159d8:	b084      	sub	sp, #16
 80159da:	af00      	add	r7, sp, #0
 80159dc:	6078      	str	r0, [r7, #4]
 80159de:	460b      	mov	r3, r1
 80159e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159e2:	2300      	movs	r3, #0
 80159e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159e6:	2300      	movs	r3, #0
 80159e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159f0:	78fa      	ldrb	r2, [r7, #3]
 80159f2:	4611      	mov	r1, r2
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7f7 fa4d 	bl	800ce94 <HAL_PCD_EP_ClrStall>
 80159fa:	4603      	mov	r3, r0
 80159fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159fe:	7bfb      	ldrb	r3, [r7, #15]
 8015a00:	4618      	mov	r0, r3
 8015a02:	f000 f8a7 	bl	8015b54 <USBD_Get_USB_Status>
 8015a06:	4603      	mov	r3, r0
 8015a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3710      	adds	r7, #16
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}

08015a14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b085      	sub	sp, #20
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	da0b      	bge.n	8015a48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015a30:	78fb      	ldrb	r3, [r7, #3]
 8015a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a36:	68f9      	ldr	r1, [r7, #12]
 8015a38:	4613      	mov	r3, r2
 8015a3a:	00db      	lsls	r3, r3, #3
 8015a3c:	1a9b      	subs	r3, r3, r2
 8015a3e:	009b      	lsls	r3, r3, #2
 8015a40:	440b      	add	r3, r1
 8015a42:	333e      	adds	r3, #62	; 0x3e
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	e00b      	b.n	8015a60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015a48:	78fb      	ldrb	r3, [r7, #3]
 8015a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a4e:	68f9      	ldr	r1, [r7, #12]
 8015a50:	4613      	mov	r3, r2
 8015a52:	00db      	lsls	r3, r3, #3
 8015a54:	1a9b      	subs	r3, r3, r2
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	440b      	add	r3, r1
 8015a5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015a5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3714      	adds	r7, #20
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr

08015a6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b084      	sub	sp, #16
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
 8015a74:	460b      	mov	r3, r1
 8015a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a86:	78fa      	ldrb	r2, [r7, #3]
 8015a88:	4611      	mov	r1, r2
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7f7 f81a 	bl	800cac4 <HAL_PCD_SetAddress>
 8015a90:	4603      	mov	r3, r0
 8015a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a94:	7bfb      	ldrb	r3, [r7, #15]
 8015a96:	4618      	mov	r0, r3
 8015a98:	f000 f85c 	bl	8015b54 <USBD_Get_USB_Status>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3710      	adds	r7, #16
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}

08015aaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015aaa:	b580      	push	{r7, lr}
 8015aac:	b086      	sub	sp, #24
 8015aae:	af00      	add	r7, sp, #0
 8015ab0:	60f8      	str	r0, [r7, #12]
 8015ab2:	607a      	str	r2, [r7, #4]
 8015ab4:	603b      	str	r3, [r7, #0]
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aba:	2300      	movs	r3, #0
 8015abc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ac8:	7af9      	ldrb	r1, [r7, #11]
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	f7f7 f933 	bl	800cd38 <HAL_PCD_EP_Transmit>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ad6:	7dfb      	ldrb	r3, [r7, #23]
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f000 f83b 	bl	8015b54 <USBD_Get_USB_Status>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015ae2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	3718      	adds	r7, #24
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b086      	sub	sp, #24
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	60f8      	str	r0, [r7, #12]
 8015af4:	607a      	str	r2, [r7, #4]
 8015af6:	603b      	str	r3, [r7, #0]
 8015af8:	460b      	mov	r3, r1
 8015afa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015afc:	2300      	movs	r3, #0
 8015afe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b00:	2300      	movs	r3, #0
 8015b02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b0a:	7af9      	ldrb	r1, [r7, #11]
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	f7f7 f8af 	bl	800cc72 <HAL_PCD_EP_Receive>
 8015b14:	4603      	mov	r3, r0
 8015b16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b18:	7dfb      	ldrb	r3, [r7, #23]
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f000 f81a 	bl	8015b54 <USBD_Get_USB_Status>
 8015b20:	4603      	mov	r3, r0
 8015b22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b24:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3718      	adds	r7, #24
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}

08015b2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b2e:	b580      	push	{r7, lr}
 8015b30:	b082      	sub	sp, #8
 8015b32:	af00      	add	r7, sp, #0
 8015b34:	6078      	str	r0, [r7, #4]
 8015b36:	460b      	mov	r3, r1
 8015b38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b40:	78fa      	ldrb	r2, [r7, #3]
 8015b42:	4611      	mov	r1, r2
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7f7 f8df 	bl	800cd08 <HAL_PCD_EP_GetRxCount>
 8015b4a:	4603      	mov	r3, r0
}
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3708      	adds	r7, #8
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015b54:	b480      	push	{r7}
 8015b56:	b085      	sub	sp, #20
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015b62:	79fb      	ldrb	r3, [r7, #7]
 8015b64:	2b03      	cmp	r3, #3
 8015b66:	d817      	bhi.n	8015b98 <USBD_Get_USB_Status+0x44>
 8015b68:	a201      	add	r2, pc, #4	; (adr r2, 8015b70 <USBD_Get_USB_Status+0x1c>)
 8015b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b6e:	bf00      	nop
 8015b70:	08015b81 	.word	0x08015b81
 8015b74:	08015b87 	.word	0x08015b87
 8015b78:	08015b8d 	.word	0x08015b8d
 8015b7c:	08015b93 	.word	0x08015b93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015b80:	2300      	movs	r3, #0
 8015b82:	73fb      	strb	r3, [r7, #15]
    break;
 8015b84:	e00b      	b.n	8015b9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015b86:	2303      	movs	r3, #3
 8015b88:	73fb      	strb	r3, [r7, #15]
    break;
 8015b8a:	e008      	b.n	8015b9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8015b90:	e005      	b.n	8015b9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015b92:	2303      	movs	r3, #3
 8015b94:	73fb      	strb	r3, [r7, #15]
    break;
 8015b96:	e002      	b.n	8015b9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015b98:	2303      	movs	r3, #3
 8015b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8015b9c:	bf00      	nop
  }
  return usb_status;
 8015b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3714      	adds	r7, #20
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr

08015bac <__errno>:
 8015bac:	4b01      	ldr	r3, [pc, #4]	; (8015bb4 <__errno+0x8>)
 8015bae:	6818      	ldr	r0, [r3, #0]
 8015bb0:	4770      	bx	lr
 8015bb2:	bf00      	nop
 8015bb4:	20002210 	.word	0x20002210

08015bb8 <__libc_init_array>:
 8015bb8:	b570      	push	{r4, r5, r6, lr}
 8015bba:	4d0d      	ldr	r5, [pc, #52]	; (8015bf0 <__libc_init_array+0x38>)
 8015bbc:	4c0d      	ldr	r4, [pc, #52]	; (8015bf4 <__libc_init_array+0x3c>)
 8015bbe:	1b64      	subs	r4, r4, r5
 8015bc0:	10a4      	asrs	r4, r4, #2
 8015bc2:	2600      	movs	r6, #0
 8015bc4:	42a6      	cmp	r6, r4
 8015bc6:	d109      	bne.n	8015bdc <__libc_init_array+0x24>
 8015bc8:	4d0b      	ldr	r5, [pc, #44]	; (8015bf8 <__libc_init_array+0x40>)
 8015bca:	4c0c      	ldr	r4, [pc, #48]	; (8015bfc <__libc_init_array+0x44>)
 8015bcc:	f006 f972 	bl	801beb4 <_init>
 8015bd0:	1b64      	subs	r4, r4, r5
 8015bd2:	10a4      	asrs	r4, r4, #2
 8015bd4:	2600      	movs	r6, #0
 8015bd6:	42a6      	cmp	r6, r4
 8015bd8:	d105      	bne.n	8015be6 <__libc_init_array+0x2e>
 8015bda:	bd70      	pop	{r4, r5, r6, pc}
 8015bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015be0:	4798      	blx	r3
 8015be2:	3601      	adds	r6, #1
 8015be4:	e7ee      	b.n	8015bc4 <__libc_init_array+0xc>
 8015be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015bea:	4798      	blx	r3
 8015bec:	3601      	adds	r6, #1
 8015bee:	e7f2      	b.n	8015bd6 <__libc_init_array+0x1e>
 8015bf0:	0801c8c0 	.word	0x0801c8c0
 8015bf4:	0801c8c0 	.word	0x0801c8c0
 8015bf8:	0801c8c0 	.word	0x0801c8c0
 8015bfc:	0801c8c4 	.word	0x0801c8c4

08015c00 <malloc>:
 8015c00:	4b02      	ldr	r3, [pc, #8]	; (8015c0c <malloc+0xc>)
 8015c02:	4601      	mov	r1, r0
 8015c04:	6818      	ldr	r0, [r3, #0]
 8015c06:	f000 b88b 	b.w	8015d20 <_malloc_r>
 8015c0a:	bf00      	nop
 8015c0c:	20002210 	.word	0x20002210

08015c10 <free>:
 8015c10:	4b02      	ldr	r3, [pc, #8]	; (8015c1c <free+0xc>)
 8015c12:	4601      	mov	r1, r0
 8015c14:	6818      	ldr	r0, [r3, #0]
 8015c16:	f000 b833 	b.w	8015c80 <_free_r>
 8015c1a:	bf00      	nop
 8015c1c:	20002210 	.word	0x20002210

08015c20 <memcpy>:
 8015c20:	440a      	add	r2, r1
 8015c22:	4291      	cmp	r1, r2
 8015c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8015c28:	d100      	bne.n	8015c2c <memcpy+0xc>
 8015c2a:	4770      	bx	lr
 8015c2c:	b510      	push	{r4, lr}
 8015c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c36:	4291      	cmp	r1, r2
 8015c38:	d1f9      	bne.n	8015c2e <memcpy+0xe>
 8015c3a:	bd10      	pop	{r4, pc}

08015c3c <memmove>:
 8015c3c:	4288      	cmp	r0, r1
 8015c3e:	b510      	push	{r4, lr}
 8015c40:	eb01 0402 	add.w	r4, r1, r2
 8015c44:	d902      	bls.n	8015c4c <memmove+0x10>
 8015c46:	4284      	cmp	r4, r0
 8015c48:	4623      	mov	r3, r4
 8015c4a:	d807      	bhi.n	8015c5c <memmove+0x20>
 8015c4c:	1e43      	subs	r3, r0, #1
 8015c4e:	42a1      	cmp	r1, r4
 8015c50:	d008      	beq.n	8015c64 <memmove+0x28>
 8015c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c5a:	e7f8      	b.n	8015c4e <memmove+0x12>
 8015c5c:	4402      	add	r2, r0
 8015c5e:	4601      	mov	r1, r0
 8015c60:	428a      	cmp	r2, r1
 8015c62:	d100      	bne.n	8015c66 <memmove+0x2a>
 8015c64:	bd10      	pop	{r4, pc}
 8015c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c6e:	e7f7      	b.n	8015c60 <memmove+0x24>

08015c70 <memset>:
 8015c70:	4402      	add	r2, r0
 8015c72:	4603      	mov	r3, r0
 8015c74:	4293      	cmp	r3, r2
 8015c76:	d100      	bne.n	8015c7a <memset+0xa>
 8015c78:	4770      	bx	lr
 8015c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8015c7e:	e7f9      	b.n	8015c74 <memset+0x4>

08015c80 <_free_r>:
 8015c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c82:	2900      	cmp	r1, #0
 8015c84:	d048      	beq.n	8015d18 <_free_r+0x98>
 8015c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c8a:	9001      	str	r0, [sp, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8015c92:	bfb8      	it	lt
 8015c94:	18e4      	addlt	r4, r4, r3
 8015c96:	f003 f835 	bl	8018d04 <__malloc_lock>
 8015c9a:	4a20      	ldr	r2, [pc, #128]	; (8015d1c <_free_r+0x9c>)
 8015c9c:	9801      	ldr	r0, [sp, #4]
 8015c9e:	6813      	ldr	r3, [r2, #0]
 8015ca0:	4615      	mov	r5, r2
 8015ca2:	b933      	cbnz	r3, 8015cb2 <_free_r+0x32>
 8015ca4:	6063      	str	r3, [r4, #4]
 8015ca6:	6014      	str	r4, [r2, #0]
 8015ca8:	b003      	add	sp, #12
 8015caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015cae:	f003 b82f 	b.w	8018d10 <__malloc_unlock>
 8015cb2:	42a3      	cmp	r3, r4
 8015cb4:	d90b      	bls.n	8015cce <_free_r+0x4e>
 8015cb6:	6821      	ldr	r1, [r4, #0]
 8015cb8:	1862      	adds	r2, r4, r1
 8015cba:	4293      	cmp	r3, r2
 8015cbc:	bf04      	itt	eq
 8015cbe:	681a      	ldreq	r2, [r3, #0]
 8015cc0:	685b      	ldreq	r3, [r3, #4]
 8015cc2:	6063      	str	r3, [r4, #4]
 8015cc4:	bf04      	itt	eq
 8015cc6:	1852      	addeq	r2, r2, r1
 8015cc8:	6022      	streq	r2, [r4, #0]
 8015cca:	602c      	str	r4, [r5, #0]
 8015ccc:	e7ec      	b.n	8015ca8 <_free_r+0x28>
 8015cce:	461a      	mov	r2, r3
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	b10b      	cbz	r3, 8015cd8 <_free_r+0x58>
 8015cd4:	42a3      	cmp	r3, r4
 8015cd6:	d9fa      	bls.n	8015cce <_free_r+0x4e>
 8015cd8:	6811      	ldr	r1, [r2, #0]
 8015cda:	1855      	adds	r5, r2, r1
 8015cdc:	42a5      	cmp	r5, r4
 8015cde:	d10b      	bne.n	8015cf8 <_free_r+0x78>
 8015ce0:	6824      	ldr	r4, [r4, #0]
 8015ce2:	4421      	add	r1, r4
 8015ce4:	1854      	adds	r4, r2, r1
 8015ce6:	42a3      	cmp	r3, r4
 8015ce8:	6011      	str	r1, [r2, #0]
 8015cea:	d1dd      	bne.n	8015ca8 <_free_r+0x28>
 8015cec:	681c      	ldr	r4, [r3, #0]
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	6053      	str	r3, [r2, #4]
 8015cf2:	4421      	add	r1, r4
 8015cf4:	6011      	str	r1, [r2, #0]
 8015cf6:	e7d7      	b.n	8015ca8 <_free_r+0x28>
 8015cf8:	d902      	bls.n	8015d00 <_free_r+0x80>
 8015cfa:	230c      	movs	r3, #12
 8015cfc:	6003      	str	r3, [r0, #0]
 8015cfe:	e7d3      	b.n	8015ca8 <_free_r+0x28>
 8015d00:	6825      	ldr	r5, [r4, #0]
 8015d02:	1961      	adds	r1, r4, r5
 8015d04:	428b      	cmp	r3, r1
 8015d06:	bf04      	itt	eq
 8015d08:	6819      	ldreq	r1, [r3, #0]
 8015d0a:	685b      	ldreq	r3, [r3, #4]
 8015d0c:	6063      	str	r3, [r4, #4]
 8015d0e:	bf04      	itt	eq
 8015d10:	1949      	addeq	r1, r1, r5
 8015d12:	6021      	streq	r1, [r4, #0]
 8015d14:	6054      	str	r4, [r2, #4]
 8015d16:	e7c7      	b.n	8015ca8 <_free_r+0x28>
 8015d18:	b003      	add	sp, #12
 8015d1a:	bd30      	pop	{r4, r5, pc}
 8015d1c:	200065b8 	.word	0x200065b8

08015d20 <_malloc_r>:
 8015d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d22:	1ccd      	adds	r5, r1, #3
 8015d24:	f025 0503 	bic.w	r5, r5, #3
 8015d28:	3508      	adds	r5, #8
 8015d2a:	2d0c      	cmp	r5, #12
 8015d2c:	bf38      	it	cc
 8015d2e:	250c      	movcc	r5, #12
 8015d30:	2d00      	cmp	r5, #0
 8015d32:	4606      	mov	r6, r0
 8015d34:	db01      	blt.n	8015d3a <_malloc_r+0x1a>
 8015d36:	42a9      	cmp	r1, r5
 8015d38:	d903      	bls.n	8015d42 <_malloc_r+0x22>
 8015d3a:	230c      	movs	r3, #12
 8015d3c:	6033      	str	r3, [r6, #0]
 8015d3e:	2000      	movs	r0, #0
 8015d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d42:	f002 ffdf 	bl	8018d04 <__malloc_lock>
 8015d46:	4921      	ldr	r1, [pc, #132]	; (8015dcc <_malloc_r+0xac>)
 8015d48:	680a      	ldr	r2, [r1, #0]
 8015d4a:	4614      	mov	r4, r2
 8015d4c:	b99c      	cbnz	r4, 8015d76 <_malloc_r+0x56>
 8015d4e:	4f20      	ldr	r7, [pc, #128]	; (8015dd0 <_malloc_r+0xb0>)
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	b923      	cbnz	r3, 8015d5e <_malloc_r+0x3e>
 8015d54:	4621      	mov	r1, r4
 8015d56:	4630      	mov	r0, r6
 8015d58:	f000 feb6 	bl	8016ac8 <_sbrk_r>
 8015d5c:	6038      	str	r0, [r7, #0]
 8015d5e:	4629      	mov	r1, r5
 8015d60:	4630      	mov	r0, r6
 8015d62:	f000 feb1 	bl	8016ac8 <_sbrk_r>
 8015d66:	1c43      	adds	r3, r0, #1
 8015d68:	d123      	bne.n	8015db2 <_malloc_r+0x92>
 8015d6a:	230c      	movs	r3, #12
 8015d6c:	6033      	str	r3, [r6, #0]
 8015d6e:	4630      	mov	r0, r6
 8015d70:	f002 ffce 	bl	8018d10 <__malloc_unlock>
 8015d74:	e7e3      	b.n	8015d3e <_malloc_r+0x1e>
 8015d76:	6823      	ldr	r3, [r4, #0]
 8015d78:	1b5b      	subs	r3, r3, r5
 8015d7a:	d417      	bmi.n	8015dac <_malloc_r+0x8c>
 8015d7c:	2b0b      	cmp	r3, #11
 8015d7e:	d903      	bls.n	8015d88 <_malloc_r+0x68>
 8015d80:	6023      	str	r3, [r4, #0]
 8015d82:	441c      	add	r4, r3
 8015d84:	6025      	str	r5, [r4, #0]
 8015d86:	e004      	b.n	8015d92 <_malloc_r+0x72>
 8015d88:	6863      	ldr	r3, [r4, #4]
 8015d8a:	42a2      	cmp	r2, r4
 8015d8c:	bf0c      	ite	eq
 8015d8e:	600b      	streq	r3, [r1, #0]
 8015d90:	6053      	strne	r3, [r2, #4]
 8015d92:	4630      	mov	r0, r6
 8015d94:	f002 ffbc 	bl	8018d10 <__malloc_unlock>
 8015d98:	f104 000b 	add.w	r0, r4, #11
 8015d9c:	1d23      	adds	r3, r4, #4
 8015d9e:	f020 0007 	bic.w	r0, r0, #7
 8015da2:	1ac2      	subs	r2, r0, r3
 8015da4:	d0cc      	beq.n	8015d40 <_malloc_r+0x20>
 8015da6:	1a1b      	subs	r3, r3, r0
 8015da8:	50a3      	str	r3, [r4, r2]
 8015daa:	e7c9      	b.n	8015d40 <_malloc_r+0x20>
 8015dac:	4622      	mov	r2, r4
 8015dae:	6864      	ldr	r4, [r4, #4]
 8015db0:	e7cc      	b.n	8015d4c <_malloc_r+0x2c>
 8015db2:	1cc4      	adds	r4, r0, #3
 8015db4:	f024 0403 	bic.w	r4, r4, #3
 8015db8:	42a0      	cmp	r0, r4
 8015dba:	d0e3      	beq.n	8015d84 <_malloc_r+0x64>
 8015dbc:	1a21      	subs	r1, r4, r0
 8015dbe:	4630      	mov	r0, r6
 8015dc0:	f000 fe82 	bl	8016ac8 <_sbrk_r>
 8015dc4:	3001      	adds	r0, #1
 8015dc6:	d1dd      	bne.n	8015d84 <_malloc_r+0x64>
 8015dc8:	e7cf      	b.n	8015d6a <_malloc_r+0x4a>
 8015dca:	bf00      	nop
 8015dcc:	200065b8 	.word	0x200065b8
 8015dd0:	200065bc 	.word	0x200065bc

08015dd4 <__cvt>:
 8015dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd8:	ec55 4b10 	vmov	r4, r5, d0
 8015ddc:	2d00      	cmp	r5, #0
 8015dde:	460e      	mov	r6, r1
 8015de0:	4619      	mov	r1, r3
 8015de2:	462b      	mov	r3, r5
 8015de4:	bfbb      	ittet	lt
 8015de6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015dea:	461d      	movlt	r5, r3
 8015dec:	2300      	movge	r3, #0
 8015dee:	232d      	movlt	r3, #45	; 0x2d
 8015df0:	700b      	strb	r3, [r1, #0]
 8015df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015df4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015df8:	4691      	mov	r9, r2
 8015dfa:	f023 0820 	bic.w	r8, r3, #32
 8015dfe:	bfbc      	itt	lt
 8015e00:	4622      	movlt	r2, r4
 8015e02:	4614      	movlt	r4, r2
 8015e04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e08:	d005      	beq.n	8015e16 <__cvt+0x42>
 8015e0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015e0e:	d100      	bne.n	8015e12 <__cvt+0x3e>
 8015e10:	3601      	adds	r6, #1
 8015e12:	2102      	movs	r1, #2
 8015e14:	e000      	b.n	8015e18 <__cvt+0x44>
 8015e16:	2103      	movs	r1, #3
 8015e18:	ab03      	add	r3, sp, #12
 8015e1a:	9301      	str	r3, [sp, #4]
 8015e1c:	ab02      	add	r3, sp, #8
 8015e1e:	9300      	str	r3, [sp, #0]
 8015e20:	ec45 4b10 	vmov	d0, r4, r5
 8015e24:	4653      	mov	r3, sl
 8015e26:	4632      	mov	r2, r6
 8015e28:	f001 fdfa 	bl	8017a20 <_dtoa_r>
 8015e2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015e30:	4607      	mov	r7, r0
 8015e32:	d102      	bne.n	8015e3a <__cvt+0x66>
 8015e34:	f019 0f01 	tst.w	r9, #1
 8015e38:	d022      	beq.n	8015e80 <__cvt+0xac>
 8015e3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e3e:	eb07 0906 	add.w	r9, r7, r6
 8015e42:	d110      	bne.n	8015e66 <__cvt+0x92>
 8015e44:	783b      	ldrb	r3, [r7, #0]
 8015e46:	2b30      	cmp	r3, #48	; 0x30
 8015e48:	d10a      	bne.n	8015e60 <__cvt+0x8c>
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	4620      	mov	r0, r4
 8015e50:	4629      	mov	r1, r5
 8015e52:	f7ea fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e56:	b918      	cbnz	r0, 8015e60 <__cvt+0x8c>
 8015e58:	f1c6 0601 	rsb	r6, r6, #1
 8015e5c:	f8ca 6000 	str.w	r6, [sl]
 8015e60:	f8da 3000 	ldr.w	r3, [sl]
 8015e64:	4499      	add	r9, r3
 8015e66:	2200      	movs	r2, #0
 8015e68:	2300      	movs	r3, #0
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	4629      	mov	r1, r5
 8015e6e:	f7ea fe2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e72:	b108      	cbz	r0, 8015e78 <__cvt+0xa4>
 8015e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8015e78:	2230      	movs	r2, #48	; 0x30
 8015e7a:	9b03      	ldr	r3, [sp, #12]
 8015e7c:	454b      	cmp	r3, r9
 8015e7e:	d307      	bcc.n	8015e90 <__cvt+0xbc>
 8015e80:	9b03      	ldr	r3, [sp, #12]
 8015e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e84:	1bdb      	subs	r3, r3, r7
 8015e86:	4638      	mov	r0, r7
 8015e88:	6013      	str	r3, [r2, #0]
 8015e8a:	b004      	add	sp, #16
 8015e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e90:	1c59      	adds	r1, r3, #1
 8015e92:	9103      	str	r1, [sp, #12]
 8015e94:	701a      	strb	r2, [r3, #0]
 8015e96:	e7f0      	b.n	8015e7a <__cvt+0xa6>

08015e98 <__exponent>:
 8015e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	2900      	cmp	r1, #0
 8015e9e:	bfb8      	it	lt
 8015ea0:	4249      	neglt	r1, r1
 8015ea2:	f803 2b02 	strb.w	r2, [r3], #2
 8015ea6:	bfb4      	ite	lt
 8015ea8:	222d      	movlt	r2, #45	; 0x2d
 8015eaa:	222b      	movge	r2, #43	; 0x2b
 8015eac:	2909      	cmp	r1, #9
 8015eae:	7042      	strb	r2, [r0, #1]
 8015eb0:	dd2a      	ble.n	8015f08 <__exponent+0x70>
 8015eb2:	f10d 0407 	add.w	r4, sp, #7
 8015eb6:	46a4      	mov	ip, r4
 8015eb8:	270a      	movs	r7, #10
 8015eba:	46a6      	mov	lr, r4
 8015ebc:	460a      	mov	r2, r1
 8015ebe:	fb91 f6f7 	sdiv	r6, r1, r7
 8015ec2:	fb07 1516 	mls	r5, r7, r6, r1
 8015ec6:	3530      	adds	r5, #48	; 0x30
 8015ec8:	2a63      	cmp	r2, #99	; 0x63
 8015eca:	f104 34ff 	add.w	r4, r4, #4294967295
 8015ece:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015ed2:	4631      	mov	r1, r6
 8015ed4:	dcf1      	bgt.n	8015eba <__exponent+0x22>
 8015ed6:	3130      	adds	r1, #48	; 0x30
 8015ed8:	f1ae 0502 	sub.w	r5, lr, #2
 8015edc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015ee0:	1c44      	adds	r4, r0, #1
 8015ee2:	4629      	mov	r1, r5
 8015ee4:	4561      	cmp	r1, ip
 8015ee6:	d30a      	bcc.n	8015efe <__exponent+0x66>
 8015ee8:	f10d 0209 	add.w	r2, sp, #9
 8015eec:	eba2 020e 	sub.w	r2, r2, lr
 8015ef0:	4565      	cmp	r5, ip
 8015ef2:	bf88      	it	hi
 8015ef4:	2200      	movhi	r2, #0
 8015ef6:	4413      	add	r3, r2
 8015ef8:	1a18      	subs	r0, r3, r0
 8015efa:	b003      	add	sp, #12
 8015efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015f06:	e7ed      	b.n	8015ee4 <__exponent+0x4c>
 8015f08:	2330      	movs	r3, #48	; 0x30
 8015f0a:	3130      	adds	r1, #48	; 0x30
 8015f0c:	7083      	strb	r3, [r0, #2]
 8015f0e:	70c1      	strb	r1, [r0, #3]
 8015f10:	1d03      	adds	r3, r0, #4
 8015f12:	e7f1      	b.n	8015ef8 <__exponent+0x60>

08015f14 <_printf_float>:
 8015f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f18:	ed2d 8b02 	vpush	{d8}
 8015f1c:	b08d      	sub	sp, #52	; 0x34
 8015f1e:	460c      	mov	r4, r1
 8015f20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015f24:	4616      	mov	r6, r2
 8015f26:	461f      	mov	r7, r3
 8015f28:	4605      	mov	r5, r0
 8015f2a:	f002 fed5 	bl	8018cd8 <_localeconv_r>
 8015f2e:	f8d0 a000 	ldr.w	sl, [r0]
 8015f32:	4650      	mov	r0, sl
 8015f34:	f7ea f94c 	bl	80001d0 <strlen>
 8015f38:	2300      	movs	r3, #0
 8015f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f3c:	6823      	ldr	r3, [r4, #0]
 8015f3e:	9305      	str	r3, [sp, #20]
 8015f40:	f8d8 3000 	ldr.w	r3, [r8]
 8015f44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015f48:	3307      	adds	r3, #7
 8015f4a:	f023 0307 	bic.w	r3, r3, #7
 8015f4e:	f103 0208 	add.w	r2, r3, #8
 8015f52:	f8c8 2000 	str.w	r2, [r8]
 8015f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015f5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015f66:	9307      	str	r3, [sp, #28]
 8015f68:	f8cd 8018 	str.w	r8, [sp, #24]
 8015f6c:	ee08 0a10 	vmov	s16, r0
 8015f70:	4b9f      	ldr	r3, [pc, #636]	; (80161f0 <_printf_float+0x2dc>)
 8015f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f76:	f04f 32ff 	mov.w	r2, #4294967295
 8015f7a:	f7ea fdd7 	bl	8000b2c <__aeabi_dcmpun>
 8015f7e:	bb88      	cbnz	r0, 8015fe4 <_printf_float+0xd0>
 8015f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f84:	4b9a      	ldr	r3, [pc, #616]	; (80161f0 <_printf_float+0x2dc>)
 8015f86:	f04f 32ff 	mov.w	r2, #4294967295
 8015f8a:	f7ea fdb1 	bl	8000af0 <__aeabi_dcmple>
 8015f8e:	bb48      	cbnz	r0, 8015fe4 <_printf_float+0xd0>
 8015f90:	2200      	movs	r2, #0
 8015f92:	2300      	movs	r3, #0
 8015f94:	4640      	mov	r0, r8
 8015f96:	4649      	mov	r1, r9
 8015f98:	f7ea fda0 	bl	8000adc <__aeabi_dcmplt>
 8015f9c:	b110      	cbz	r0, 8015fa4 <_printf_float+0x90>
 8015f9e:	232d      	movs	r3, #45	; 0x2d
 8015fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fa4:	4b93      	ldr	r3, [pc, #588]	; (80161f4 <_printf_float+0x2e0>)
 8015fa6:	4894      	ldr	r0, [pc, #592]	; (80161f8 <_printf_float+0x2e4>)
 8015fa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015fac:	bf94      	ite	ls
 8015fae:	4698      	movls	r8, r3
 8015fb0:	4680      	movhi	r8, r0
 8015fb2:	2303      	movs	r3, #3
 8015fb4:	6123      	str	r3, [r4, #16]
 8015fb6:	9b05      	ldr	r3, [sp, #20]
 8015fb8:	f023 0204 	bic.w	r2, r3, #4
 8015fbc:	6022      	str	r2, [r4, #0]
 8015fbe:	f04f 0900 	mov.w	r9, #0
 8015fc2:	9700      	str	r7, [sp, #0]
 8015fc4:	4633      	mov	r3, r6
 8015fc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8015fc8:	4621      	mov	r1, r4
 8015fca:	4628      	mov	r0, r5
 8015fcc:	f000 f9d8 	bl	8016380 <_printf_common>
 8015fd0:	3001      	adds	r0, #1
 8015fd2:	f040 8090 	bne.w	80160f6 <_printf_float+0x1e2>
 8015fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8015fda:	b00d      	add	sp, #52	; 0x34
 8015fdc:	ecbd 8b02 	vpop	{d8}
 8015fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fe4:	4642      	mov	r2, r8
 8015fe6:	464b      	mov	r3, r9
 8015fe8:	4640      	mov	r0, r8
 8015fea:	4649      	mov	r1, r9
 8015fec:	f7ea fd9e 	bl	8000b2c <__aeabi_dcmpun>
 8015ff0:	b140      	cbz	r0, 8016004 <_printf_float+0xf0>
 8015ff2:	464b      	mov	r3, r9
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	bfbc      	itt	lt
 8015ff8:	232d      	movlt	r3, #45	; 0x2d
 8015ffa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015ffe:	487f      	ldr	r0, [pc, #508]	; (80161fc <_printf_float+0x2e8>)
 8016000:	4b7f      	ldr	r3, [pc, #508]	; (8016200 <_printf_float+0x2ec>)
 8016002:	e7d1      	b.n	8015fa8 <_printf_float+0x94>
 8016004:	6863      	ldr	r3, [r4, #4]
 8016006:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801600a:	9206      	str	r2, [sp, #24]
 801600c:	1c5a      	adds	r2, r3, #1
 801600e:	d13f      	bne.n	8016090 <_printf_float+0x17c>
 8016010:	2306      	movs	r3, #6
 8016012:	6063      	str	r3, [r4, #4]
 8016014:	9b05      	ldr	r3, [sp, #20]
 8016016:	6861      	ldr	r1, [r4, #4]
 8016018:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801601c:	2300      	movs	r3, #0
 801601e:	9303      	str	r3, [sp, #12]
 8016020:	ab0a      	add	r3, sp, #40	; 0x28
 8016022:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016026:	ab09      	add	r3, sp, #36	; 0x24
 8016028:	ec49 8b10 	vmov	d0, r8, r9
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	6022      	str	r2, [r4, #0]
 8016030:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016034:	4628      	mov	r0, r5
 8016036:	f7ff fecd 	bl	8015dd4 <__cvt>
 801603a:	9b06      	ldr	r3, [sp, #24]
 801603c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801603e:	2b47      	cmp	r3, #71	; 0x47
 8016040:	4680      	mov	r8, r0
 8016042:	d108      	bne.n	8016056 <_printf_float+0x142>
 8016044:	1cc8      	adds	r0, r1, #3
 8016046:	db02      	blt.n	801604e <_printf_float+0x13a>
 8016048:	6863      	ldr	r3, [r4, #4]
 801604a:	4299      	cmp	r1, r3
 801604c:	dd41      	ble.n	80160d2 <_printf_float+0x1be>
 801604e:	f1ab 0b02 	sub.w	fp, fp, #2
 8016052:	fa5f fb8b 	uxtb.w	fp, fp
 8016056:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801605a:	d820      	bhi.n	801609e <_printf_float+0x18a>
 801605c:	3901      	subs	r1, #1
 801605e:	465a      	mov	r2, fp
 8016060:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016064:	9109      	str	r1, [sp, #36]	; 0x24
 8016066:	f7ff ff17 	bl	8015e98 <__exponent>
 801606a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801606c:	1813      	adds	r3, r2, r0
 801606e:	2a01      	cmp	r2, #1
 8016070:	4681      	mov	r9, r0
 8016072:	6123      	str	r3, [r4, #16]
 8016074:	dc02      	bgt.n	801607c <_printf_float+0x168>
 8016076:	6822      	ldr	r2, [r4, #0]
 8016078:	07d2      	lsls	r2, r2, #31
 801607a:	d501      	bpl.n	8016080 <_printf_float+0x16c>
 801607c:	3301      	adds	r3, #1
 801607e:	6123      	str	r3, [r4, #16]
 8016080:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016084:	2b00      	cmp	r3, #0
 8016086:	d09c      	beq.n	8015fc2 <_printf_float+0xae>
 8016088:	232d      	movs	r3, #45	; 0x2d
 801608a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801608e:	e798      	b.n	8015fc2 <_printf_float+0xae>
 8016090:	9a06      	ldr	r2, [sp, #24]
 8016092:	2a47      	cmp	r2, #71	; 0x47
 8016094:	d1be      	bne.n	8016014 <_printf_float+0x100>
 8016096:	2b00      	cmp	r3, #0
 8016098:	d1bc      	bne.n	8016014 <_printf_float+0x100>
 801609a:	2301      	movs	r3, #1
 801609c:	e7b9      	b.n	8016012 <_printf_float+0xfe>
 801609e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80160a2:	d118      	bne.n	80160d6 <_printf_float+0x1c2>
 80160a4:	2900      	cmp	r1, #0
 80160a6:	6863      	ldr	r3, [r4, #4]
 80160a8:	dd0b      	ble.n	80160c2 <_printf_float+0x1ae>
 80160aa:	6121      	str	r1, [r4, #16]
 80160ac:	b913      	cbnz	r3, 80160b4 <_printf_float+0x1a0>
 80160ae:	6822      	ldr	r2, [r4, #0]
 80160b0:	07d0      	lsls	r0, r2, #31
 80160b2:	d502      	bpl.n	80160ba <_printf_float+0x1a6>
 80160b4:	3301      	adds	r3, #1
 80160b6:	440b      	add	r3, r1
 80160b8:	6123      	str	r3, [r4, #16]
 80160ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80160bc:	f04f 0900 	mov.w	r9, #0
 80160c0:	e7de      	b.n	8016080 <_printf_float+0x16c>
 80160c2:	b913      	cbnz	r3, 80160ca <_printf_float+0x1b6>
 80160c4:	6822      	ldr	r2, [r4, #0]
 80160c6:	07d2      	lsls	r2, r2, #31
 80160c8:	d501      	bpl.n	80160ce <_printf_float+0x1ba>
 80160ca:	3302      	adds	r3, #2
 80160cc:	e7f4      	b.n	80160b8 <_printf_float+0x1a4>
 80160ce:	2301      	movs	r3, #1
 80160d0:	e7f2      	b.n	80160b8 <_printf_float+0x1a4>
 80160d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80160d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160d8:	4299      	cmp	r1, r3
 80160da:	db05      	blt.n	80160e8 <_printf_float+0x1d4>
 80160dc:	6823      	ldr	r3, [r4, #0]
 80160de:	6121      	str	r1, [r4, #16]
 80160e0:	07d8      	lsls	r0, r3, #31
 80160e2:	d5ea      	bpl.n	80160ba <_printf_float+0x1a6>
 80160e4:	1c4b      	adds	r3, r1, #1
 80160e6:	e7e7      	b.n	80160b8 <_printf_float+0x1a4>
 80160e8:	2900      	cmp	r1, #0
 80160ea:	bfd4      	ite	le
 80160ec:	f1c1 0202 	rsble	r2, r1, #2
 80160f0:	2201      	movgt	r2, #1
 80160f2:	4413      	add	r3, r2
 80160f4:	e7e0      	b.n	80160b8 <_printf_float+0x1a4>
 80160f6:	6823      	ldr	r3, [r4, #0]
 80160f8:	055a      	lsls	r2, r3, #21
 80160fa:	d407      	bmi.n	801610c <_printf_float+0x1f8>
 80160fc:	6923      	ldr	r3, [r4, #16]
 80160fe:	4642      	mov	r2, r8
 8016100:	4631      	mov	r1, r6
 8016102:	4628      	mov	r0, r5
 8016104:	47b8      	blx	r7
 8016106:	3001      	adds	r0, #1
 8016108:	d12c      	bne.n	8016164 <_printf_float+0x250>
 801610a:	e764      	b.n	8015fd6 <_printf_float+0xc2>
 801610c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016110:	f240 80e0 	bls.w	80162d4 <_printf_float+0x3c0>
 8016114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016118:	2200      	movs	r2, #0
 801611a:	2300      	movs	r3, #0
 801611c:	f7ea fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8016120:	2800      	cmp	r0, #0
 8016122:	d034      	beq.n	801618e <_printf_float+0x27a>
 8016124:	4a37      	ldr	r2, [pc, #220]	; (8016204 <_printf_float+0x2f0>)
 8016126:	2301      	movs	r3, #1
 8016128:	4631      	mov	r1, r6
 801612a:	4628      	mov	r0, r5
 801612c:	47b8      	blx	r7
 801612e:	3001      	adds	r0, #1
 8016130:	f43f af51 	beq.w	8015fd6 <_printf_float+0xc2>
 8016134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016138:	429a      	cmp	r2, r3
 801613a:	db02      	blt.n	8016142 <_printf_float+0x22e>
 801613c:	6823      	ldr	r3, [r4, #0]
 801613e:	07d8      	lsls	r0, r3, #31
 8016140:	d510      	bpl.n	8016164 <_printf_float+0x250>
 8016142:	ee18 3a10 	vmov	r3, s16
 8016146:	4652      	mov	r2, sl
 8016148:	4631      	mov	r1, r6
 801614a:	4628      	mov	r0, r5
 801614c:	47b8      	blx	r7
 801614e:	3001      	adds	r0, #1
 8016150:	f43f af41 	beq.w	8015fd6 <_printf_float+0xc2>
 8016154:	f04f 0800 	mov.w	r8, #0
 8016158:	f104 091a 	add.w	r9, r4, #26
 801615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801615e:	3b01      	subs	r3, #1
 8016160:	4543      	cmp	r3, r8
 8016162:	dc09      	bgt.n	8016178 <_printf_float+0x264>
 8016164:	6823      	ldr	r3, [r4, #0]
 8016166:	079b      	lsls	r3, r3, #30
 8016168:	f100 8105 	bmi.w	8016376 <_printf_float+0x462>
 801616c:	68e0      	ldr	r0, [r4, #12]
 801616e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016170:	4298      	cmp	r0, r3
 8016172:	bfb8      	it	lt
 8016174:	4618      	movlt	r0, r3
 8016176:	e730      	b.n	8015fda <_printf_float+0xc6>
 8016178:	2301      	movs	r3, #1
 801617a:	464a      	mov	r2, r9
 801617c:	4631      	mov	r1, r6
 801617e:	4628      	mov	r0, r5
 8016180:	47b8      	blx	r7
 8016182:	3001      	adds	r0, #1
 8016184:	f43f af27 	beq.w	8015fd6 <_printf_float+0xc2>
 8016188:	f108 0801 	add.w	r8, r8, #1
 801618c:	e7e6      	b.n	801615c <_printf_float+0x248>
 801618e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016190:	2b00      	cmp	r3, #0
 8016192:	dc39      	bgt.n	8016208 <_printf_float+0x2f4>
 8016194:	4a1b      	ldr	r2, [pc, #108]	; (8016204 <_printf_float+0x2f0>)
 8016196:	2301      	movs	r3, #1
 8016198:	4631      	mov	r1, r6
 801619a:	4628      	mov	r0, r5
 801619c:	47b8      	blx	r7
 801619e:	3001      	adds	r0, #1
 80161a0:	f43f af19 	beq.w	8015fd6 <_printf_float+0xc2>
 80161a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80161a8:	4313      	orrs	r3, r2
 80161aa:	d102      	bne.n	80161b2 <_printf_float+0x29e>
 80161ac:	6823      	ldr	r3, [r4, #0]
 80161ae:	07d9      	lsls	r1, r3, #31
 80161b0:	d5d8      	bpl.n	8016164 <_printf_float+0x250>
 80161b2:	ee18 3a10 	vmov	r3, s16
 80161b6:	4652      	mov	r2, sl
 80161b8:	4631      	mov	r1, r6
 80161ba:	4628      	mov	r0, r5
 80161bc:	47b8      	blx	r7
 80161be:	3001      	adds	r0, #1
 80161c0:	f43f af09 	beq.w	8015fd6 <_printf_float+0xc2>
 80161c4:	f04f 0900 	mov.w	r9, #0
 80161c8:	f104 0a1a 	add.w	sl, r4, #26
 80161cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ce:	425b      	negs	r3, r3
 80161d0:	454b      	cmp	r3, r9
 80161d2:	dc01      	bgt.n	80161d8 <_printf_float+0x2c4>
 80161d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d6:	e792      	b.n	80160fe <_printf_float+0x1ea>
 80161d8:	2301      	movs	r3, #1
 80161da:	4652      	mov	r2, sl
 80161dc:	4631      	mov	r1, r6
 80161de:	4628      	mov	r0, r5
 80161e0:	47b8      	blx	r7
 80161e2:	3001      	adds	r0, #1
 80161e4:	f43f aef7 	beq.w	8015fd6 <_printf_float+0xc2>
 80161e8:	f109 0901 	add.w	r9, r9, #1
 80161ec:	e7ee      	b.n	80161cc <_printf_float+0x2b8>
 80161ee:	bf00      	nop
 80161f0:	7fefffff 	.word	0x7fefffff
 80161f4:	0801c1bc 	.word	0x0801c1bc
 80161f8:	0801c1c0 	.word	0x0801c1c0
 80161fc:	0801c1c8 	.word	0x0801c1c8
 8016200:	0801c1c4 	.word	0x0801c1c4
 8016204:	0801c1cc 	.word	0x0801c1cc
 8016208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801620a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801620c:	429a      	cmp	r2, r3
 801620e:	bfa8      	it	ge
 8016210:	461a      	movge	r2, r3
 8016212:	2a00      	cmp	r2, #0
 8016214:	4691      	mov	r9, r2
 8016216:	dc37      	bgt.n	8016288 <_printf_float+0x374>
 8016218:	f04f 0b00 	mov.w	fp, #0
 801621c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016220:	f104 021a 	add.w	r2, r4, #26
 8016224:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016226:	9305      	str	r3, [sp, #20]
 8016228:	eba3 0309 	sub.w	r3, r3, r9
 801622c:	455b      	cmp	r3, fp
 801622e:	dc33      	bgt.n	8016298 <_printf_float+0x384>
 8016230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016234:	429a      	cmp	r2, r3
 8016236:	db3b      	blt.n	80162b0 <_printf_float+0x39c>
 8016238:	6823      	ldr	r3, [r4, #0]
 801623a:	07da      	lsls	r2, r3, #31
 801623c:	d438      	bmi.n	80162b0 <_printf_float+0x39c>
 801623e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016240:	9b05      	ldr	r3, [sp, #20]
 8016242:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016244:	1ad3      	subs	r3, r2, r3
 8016246:	eba2 0901 	sub.w	r9, r2, r1
 801624a:	4599      	cmp	r9, r3
 801624c:	bfa8      	it	ge
 801624e:	4699      	movge	r9, r3
 8016250:	f1b9 0f00 	cmp.w	r9, #0
 8016254:	dc35      	bgt.n	80162c2 <_printf_float+0x3ae>
 8016256:	f04f 0800 	mov.w	r8, #0
 801625a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801625e:	f104 0a1a 	add.w	sl, r4, #26
 8016262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016266:	1a9b      	subs	r3, r3, r2
 8016268:	eba3 0309 	sub.w	r3, r3, r9
 801626c:	4543      	cmp	r3, r8
 801626e:	f77f af79 	ble.w	8016164 <_printf_float+0x250>
 8016272:	2301      	movs	r3, #1
 8016274:	4652      	mov	r2, sl
 8016276:	4631      	mov	r1, r6
 8016278:	4628      	mov	r0, r5
 801627a:	47b8      	blx	r7
 801627c:	3001      	adds	r0, #1
 801627e:	f43f aeaa 	beq.w	8015fd6 <_printf_float+0xc2>
 8016282:	f108 0801 	add.w	r8, r8, #1
 8016286:	e7ec      	b.n	8016262 <_printf_float+0x34e>
 8016288:	4613      	mov	r3, r2
 801628a:	4631      	mov	r1, r6
 801628c:	4642      	mov	r2, r8
 801628e:	4628      	mov	r0, r5
 8016290:	47b8      	blx	r7
 8016292:	3001      	adds	r0, #1
 8016294:	d1c0      	bne.n	8016218 <_printf_float+0x304>
 8016296:	e69e      	b.n	8015fd6 <_printf_float+0xc2>
 8016298:	2301      	movs	r3, #1
 801629a:	4631      	mov	r1, r6
 801629c:	4628      	mov	r0, r5
 801629e:	9205      	str	r2, [sp, #20]
 80162a0:	47b8      	blx	r7
 80162a2:	3001      	adds	r0, #1
 80162a4:	f43f ae97 	beq.w	8015fd6 <_printf_float+0xc2>
 80162a8:	9a05      	ldr	r2, [sp, #20]
 80162aa:	f10b 0b01 	add.w	fp, fp, #1
 80162ae:	e7b9      	b.n	8016224 <_printf_float+0x310>
 80162b0:	ee18 3a10 	vmov	r3, s16
 80162b4:	4652      	mov	r2, sl
 80162b6:	4631      	mov	r1, r6
 80162b8:	4628      	mov	r0, r5
 80162ba:	47b8      	blx	r7
 80162bc:	3001      	adds	r0, #1
 80162be:	d1be      	bne.n	801623e <_printf_float+0x32a>
 80162c0:	e689      	b.n	8015fd6 <_printf_float+0xc2>
 80162c2:	9a05      	ldr	r2, [sp, #20]
 80162c4:	464b      	mov	r3, r9
 80162c6:	4442      	add	r2, r8
 80162c8:	4631      	mov	r1, r6
 80162ca:	4628      	mov	r0, r5
 80162cc:	47b8      	blx	r7
 80162ce:	3001      	adds	r0, #1
 80162d0:	d1c1      	bne.n	8016256 <_printf_float+0x342>
 80162d2:	e680      	b.n	8015fd6 <_printf_float+0xc2>
 80162d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162d6:	2a01      	cmp	r2, #1
 80162d8:	dc01      	bgt.n	80162de <_printf_float+0x3ca>
 80162da:	07db      	lsls	r3, r3, #31
 80162dc:	d538      	bpl.n	8016350 <_printf_float+0x43c>
 80162de:	2301      	movs	r3, #1
 80162e0:	4642      	mov	r2, r8
 80162e2:	4631      	mov	r1, r6
 80162e4:	4628      	mov	r0, r5
 80162e6:	47b8      	blx	r7
 80162e8:	3001      	adds	r0, #1
 80162ea:	f43f ae74 	beq.w	8015fd6 <_printf_float+0xc2>
 80162ee:	ee18 3a10 	vmov	r3, s16
 80162f2:	4652      	mov	r2, sl
 80162f4:	4631      	mov	r1, r6
 80162f6:	4628      	mov	r0, r5
 80162f8:	47b8      	blx	r7
 80162fa:	3001      	adds	r0, #1
 80162fc:	f43f ae6b 	beq.w	8015fd6 <_printf_float+0xc2>
 8016300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016304:	2200      	movs	r2, #0
 8016306:	2300      	movs	r3, #0
 8016308:	f7ea fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 801630c:	b9d8      	cbnz	r0, 8016346 <_printf_float+0x432>
 801630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016310:	f108 0201 	add.w	r2, r8, #1
 8016314:	3b01      	subs	r3, #1
 8016316:	4631      	mov	r1, r6
 8016318:	4628      	mov	r0, r5
 801631a:	47b8      	blx	r7
 801631c:	3001      	adds	r0, #1
 801631e:	d10e      	bne.n	801633e <_printf_float+0x42a>
 8016320:	e659      	b.n	8015fd6 <_printf_float+0xc2>
 8016322:	2301      	movs	r3, #1
 8016324:	4652      	mov	r2, sl
 8016326:	4631      	mov	r1, r6
 8016328:	4628      	mov	r0, r5
 801632a:	47b8      	blx	r7
 801632c:	3001      	adds	r0, #1
 801632e:	f43f ae52 	beq.w	8015fd6 <_printf_float+0xc2>
 8016332:	f108 0801 	add.w	r8, r8, #1
 8016336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016338:	3b01      	subs	r3, #1
 801633a:	4543      	cmp	r3, r8
 801633c:	dcf1      	bgt.n	8016322 <_printf_float+0x40e>
 801633e:	464b      	mov	r3, r9
 8016340:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016344:	e6dc      	b.n	8016100 <_printf_float+0x1ec>
 8016346:	f04f 0800 	mov.w	r8, #0
 801634a:	f104 0a1a 	add.w	sl, r4, #26
 801634e:	e7f2      	b.n	8016336 <_printf_float+0x422>
 8016350:	2301      	movs	r3, #1
 8016352:	4642      	mov	r2, r8
 8016354:	e7df      	b.n	8016316 <_printf_float+0x402>
 8016356:	2301      	movs	r3, #1
 8016358:	464a      	mov	r2, r9
 801635a:	4631      	mov	r1, r6
 801635c:	4628      	mov	r0, r5
 801635e:	47b8      	blx	r7
 8016360:	3001      	adds	r0, #1
 8016362:	f43f ae38 	beq.w	8015fd6 <_printf_float+0xc2>
 8016366:	f108 0801 	add.w	r8, r8, #1
 801636a:	68e3      	ldr	r3, [r4, #12]
 801636c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801636e:	1a5b      	subs	r3, r3, r1
 8016370:	4543      	cmp	r3, r8
 8016372:	dcf0      	bgt.n	8016356 <_printf_float+0x442>
 8016374:	e6fa      	b.n	801616c <_printf_float+0x258>
 8016376:	f04f 0800 	mov.w	r8, #0
 801637a:	f104 0919 	add.w	r9, r4, #25
 801637e:	e7f4      	b.n	801636a <_printf_float+0x456>

08016380 <_printf_common>:
 8016380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016384:	4616      	mov	r6, r2
 8016386:	4699      	mov	r9, r3
 8016388:	688a      	ldr	r2, [r1, #8]
 801638a:	690b      	ldr	r3, [r1, #16]
 801638c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016390:	4293      	cmp	r3, r2
 8016392:	bfb8      	it	lt
 8016394:	4613      	movlt	r3, r2
 8016396:	6033      	str	r3, [r6, #0]
 8016398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801639c:	4607      	mov	r7, r0
 801639e:	460c      	mov	r4, r1
 80163a0:	b10a      	cbz	r2, 80163a6 <_printf_common+0x26>
 80163a2:	3301      	adds	r3, #1
 80163a4:	6033      	str	r3, [r6, #0]
 80163a6:	6823      	ldr	r3, [r4, #0]
 80163a8:	0699      	lsls	r1, r3, #26
 80163aa:	bf42      	ittt	mi
 80163ac:	6833      	ldrmi	r3, [r6, #0]
 80163ae:	3302      	addmi	r3, #2
 80163b0:	6033      	strmi	r3, [r6, #0]
 80163b2:	6825      	ldr	r5, [r4, #0]
 80163b4:	f015 0506 	ands.w	r5, r5, #6
 80163b8:	d106      	bne.n	80163c8 <_printf_common+0x48>
 80163ba:	f104 0a19 	add.w	sl, r4, #25
 80163be:	68e3      	ldr	r3, [r4, #12]
 80163c0:	6832      	ldr	r2, [r6, #0]
 80163c2:	1a9b      	subs	r3, r3, r2
 80163c4:	42ab      	cmp	r3, r5
 80163c6:	dc26      	bgt.n	8016416 <_printf_common+0x96>
 80163c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80163cc:	1e13      	subs	r3, r2, #0
 80163ce:	6822      	ldr	r2, [r4, #0]
 80163d0:	bf18      	it	ne
 80163d2:	2301      	movne	r3, #1
 80163d4:	0692      	lsls	r2, r2, #26
 80163d6:	d42b      	bmi.n	8016430 <_printf_common+0xb0>
 80163d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80163dc:	4649      	mov	r1, r9
 80163de:	4638      	mov	r0, r7
 80163e0:	47c0      	blx	r8
 80163e2:	3001      	adds	r0, #1
 80163e4:	d01e      	beq.n	8016424 <_printf_common+0xa4>
 80163e6:	6823      	ldr	r3, [r4, #0]
 80163e8:	68e5      	ldr	r5, [r4, #12]
 80163ea:	6832      	ldr	r2, [r6, #0]
 80163ec:	f003 0306 	and.w	r3, r3, #6
 80163f0:	2b04      	cmp	r3, #4
 80163f2:	bf08      	it	eq
 80163f4:	1aad      	subeq	r5, r5, r2
 80163f6:	68a3      	ldr	r3, [r4, #8]
 80163f8:	6922      	ldr	r2, [r4, #16]
 80163fa:	bf0c      	ite	eq
 80163fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016400:	2500      	movne	r5, #0
 8016402:	4293      	cmp	r3, r2
 8016404:	bfc4      	itt	gt
 8016406:	1a9b      	subgt	r3, r3, r2
 8016408:	18ed      	addgt	r5, r5, r3
 801640a:	2600      	movs	r6, #0
 801640c:	341a      	adds	r4, #26
 801640e:	42b5      	cmp	r5, r6
 8016410:	d11a      	bne.n	8016448 <_printf_common+0xc8>
 8016412:	2000      	movs	r0, #0
 8016414:	e008      	b.n	8016428 <_printf_common+0xa8>
 8016416:	2301      	movs	r3, #1
 8016418:	4652      	mov	r2, sl
 801641a:	4649      	mov	r1, r9
 801641c:	4638      	mov	r0, r7
 801641e:	47c0      	blx	r8
 8016420:	3001      	adds	r0, #1
 8016422:	d103      	bne.n	801642c <_printf_common+0xac>
 8016424:	f04f 30ff 	mov.w	r0, #4294967295
 8016428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801642c:	3501      	adds	r5, #1
 801642e:	e7c6      	b.n	80163be <_printf_common+0x3e>
 8016430:	18e1      	adds	r1, r4, r3
 8016432:	1c5a      	adds	r2, r3, #1
 8016434:	2030      	movs	r0, #48	; 0x30
 8016436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801643a:	4422      	add	r2, r4
 801643c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016444:	3302      	adds	r3, #2
 8016446:	e7c7      	b.n	80163d8 <_printf_common+0x58>
 8016448:	2301      	movs	r3, #1
 801644a:	4622      	mov	r2, r4
 801644c:	4649      	mov	r1, r9
 801644e:	4638      	mov	r0, r7
 8016450:	47c0      	blx	r8
 8016452:	3001      	adds	r0, #1
 8016454:	d0e6      	beq.n	8016424 <_printf_common+0xa4>
 8016456:	3601      	adds	r6, #1
 8016458:	e7d9      	b.n	801640e <_printf_common+0x8e>
	...

0801645c <_printf_i>:
 801645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016460:	460c      	mov	r4, r1
 8016462:	4691      	mov	r9, r2
 8016464:	7e27      	ldrb	r7, [r4, #24]
 8016466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016468:	2f78      	cmp	r7, #120	; 0x78
 801646a:	4680      	mov	r8, r0
 801646c:	469a      	mov	sl, r3
 801646e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016472:	d807      	bhi.n	8016484 <_printf_i+0x28>
 8016474:	2f62      	cmp	r7, #98	; 0x62
 8016476:	d80a      	bhi.n	801648e <_printf_i+0x32>
 8016478:	2f00      	cmp	r7, #0
 801647a:	f000 80d8 	beq.w	801662e <_printf_i+0x1d2>
 801647e:	2f58      	cmp	r7, #88	; 0x58
 8016480:	f000 80a3 	beq.w	80165ca <_printf_i+0x16e>
 8016484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801648c:	e03a      	b.n	8016504 <_printf_i+0xa8>
 801648e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016492:	2b15      	cmp	r3, #21
 8016494:	d8f6      	bhi.n	8016484 <_printf_i+0x28>
 8016496:	a001      	add	r0, pc, #4	; (adr r0, 801649c <_printf_i+0x40>)
 8016498:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801649c:	080164f5 	.word	0x080164f5
 80164a0:	08016509 	.word	0x08016509
 80164a4:	08016485 	.word	0x08016485
 80164a8:	08016485 	.word	0x08016485
 80164ac:	08016485 	.word	0x08016485
 80164b0:	08016485 	.word	0x08016485
 80164b4:	08016509 	.word	0x08016509
 80164b8:	08016485 	.word	0x08016485
 80164bc:	08016485 	.word	0x08016485
 80164c0:	08016485 	.word	0x08016485
 80164c4:	08016485 	.word	0x08016485
 80164c8:	08016615 	.word	0x08016615
 80164cc:	08016539 	.word	0x08016539
 80164d0:	080165f7 	.word	0x080165f7
 80164d4:	08016485 	.word	0x08016485
 80164d8:	08016485 	.word	0x08016485
 80164dc:	08016637 	.word	0x08016637
 80164e0:	08016485 	.word	0x08016485
 80164e4:	08016539 	.word	0x08016539
 80164e8:	08016485 	.word	0x08016485
 80164ec:	08016485 	.word	0x08016485
 80164f0:	080165ff 	.word	0x080165ff
 80164f4:	680b      	ldr	r3, [r1, #0]
 80164f6:	1d1a      	adds	r2, r3, #4
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	600a      	str	r2, [r1, #0]
 80164fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016504:	2301      	movs	r3, #1
 8016506:	e0a3      	b.n	8016650 <_printf_i+0x1f4>
 8016508:	6825      	ldr	r5, [r4, #0]
 801650a:	6808      	ldr	r0, [r1, #0]
 801650c:	062e      	lsls	r6, r5, #24
 801650e:	f100 0304 	add.w	r3, r0, #4
 8016512:	d50a      	bpl.n	801652a <_printf_i+0xce>
 8016514:	6805      	ldr	r5, [r0, #0]
 8016516:	600b      	str	r3, [r1, #0]
 8016518:	2d00      	cmp	r5, #0
 801651a:	da03      	bge.n	8016524 <_printf_i+0xc8>
 801651c:	232d      	movs	r3, #45	; 0x2d
 801651e:	426d      	negs	r5, r5
 8016520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016524:	485e      	ldr	r0, [pc, #376]	; (80166a0 <_printf_i+0x244>)
 8016526:	230a      	movs	r3, #10
 8016528:	e019      	b.n	801655e <_printf_i+0x102>
 801652a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801652e:	6805      	ldr	r5, [r0, #0]
 8016530:	600b      	str	r3, [r1, #0]
 8016532:	bf18      	it	ne
 8016534:	b22d      	sxthne	r5, r5
 8016536:	e7ef      	b.n	8016518 <_printf_i+0xbc>
 8016538:	680b      	ldr	r3, [r1, #0]
 801653a:	6825      	ldr	r5, [r4, #0]
 801653c:	1d18      	adds	r0, r3, #4
 801653e:	6008      	str	r0, [r1, #0]
 8016540:	0628      	lsls	r0, r5, #24
 8016542:	d501      	bpl.n	8016548 <_printf_i+0xec>
 8016544:	681d      	ldr	r5, [r3, #0]
 8016546:	e002      	b.n	801654e <_printf_i+0xf2>
 8016548:	0669      	lsls	r1, r5, #25
 801654a:	d5fb      	bpl.n	8016544 <_printf_i+0xe8>
 801654c:	881d      	ldrh	r5, [r3, #0]
 801654e:	4854      	ldr	r0, [pc, #336]	; (80166a0 <_printf_i+0x244>)
 8016550:	2f6f      	cmp	r7, #111	; 0x6f
 8016552:	bf0c      	ite	eq
 8016554:	2308      	moveq	r3, #8
 8016556:	230a      	movne	r3, #10
 8016558:	2100      	movs	r1, #0
 801655a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801655e:	6866      	ldr	r6, [r4, #4]
 8016560:	60a6      	str	r6, [r4, #8]
 8016562:	2e00      	cmp	r6, #0
 8016564:	bfa2      	ittt	ge
 8016566:	6821      	ldrge	r1, [r4, #0]
 8016568:	f021 0104 	bicge.w	r1, r1, #4
 801656c:	6021      	strge	r1, [r4, #0]
 801656e:	b90d      	cbnz	r5, 8016574 <_printf_i+0x118>
 8016570:	2e00      	cmp	r6, #0
 8016572:	d04d      	beq.n	8016610 <_printf_i+0x1b4>
 8016574:	4616      	mov	r6, r2
 8016576:	fbb5 f1f3 	udiv	r1, r5, r3
 801657a:	fb03 5711 	mls	r7, r3, r1, r5
 801657e:	5dc7      	ldrb	r7, [r0, r7]
 8016580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016584:	462f      	mov	r7, r5
 8016586:	42bb      	cmp	r3, r7
 8016588:	460d      	mov	r5, r1
 801658a:	d9f4      	bls.n	8016576 <_printf_i+0x11a>
 801658c:	2b08      	cmp	r3, #8
 801658e:	d10b      	bne.n	80165a8 <_printf_i+0x14c>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	07df      	lsls	r7, r3, #31
 8016594:	d508      	bpl.n	80165a8 <_printf_i+0x14c>
 8016596:	6923      	ldr	r3, [r4, #16]
 8016598:	6861      	ldr	r1, [r4, #4]
 801659a:	4299      	cmp	r1, r3
 801659c:	bfde      	ittt	le
 801659e:	2330      	movle	r3, #48	; 0x30
 80165a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80165a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80165a8:	1b92      	subs	r2, r2, r6
 80165aa:	6122      	str	r2, [r4, #16]
 80165ac:	f8cd a000 	str.w	sl, [sp]
 80165b0:	464b      	mov	r3, r9
 80165b2:	aa03      	add	r2, sp, #12
 80165b4:	4621      	mov	r1, r4
 80165b6:	4640      	mov	r0, r8
 80165b8:	f7ff fee2 	bl	8016380 <_printf_common>
 80165bc:	3001      	adds	r0, #1
 80165be:	d14c      	bne.n	801665a <_printf_i+0x1fe>
 80165c0:	f04f 30ff 	mov.w	r0, #4294967295
 80165c4:	b004      	add	sp, #16
 80165c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ca:	4835      	ldr	r0, [pc, #212]	; (80166a0 <_printf_i+0x244>)
 80165cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80165d0:	6823      	ldr	r3, [r4, #0]
 80165d2:	680e      	ldr	r6, [r1, #0]
 80165d4:	061f      	lsls	r7, r3, #24
 80165d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80165da:	600e      	str	r6, [r1, #0]
 80165dc:	d514      	bpl.n	8016608 <_printf_i+0x1ac>
 80165de:	07d9      	lsls	r1, r3, #31
 80165e0:	bf44      	itt	mi
 80165e2:	f043 0320 	orrmi.w	r3, r3, #32
 80165e6:	6023      	strmi	r3, [r4, #0]
 80165e8:	b91d      	cbnz	r5, 80165f2 <_printf_i+0x196>
 80165ea:	6823      	ldr	r3, [r4, #0]
 80165ec:	f023 0320 	bic.w	r3, r3, #32
 80165f0:	6023      	str	r3, [r4, #0]
 80165f2:	2310      	movs	r3, #16
 80165f4:	e7b0      	b.n	8016558 <_printf_i+0xfc>
 80165f6:	6823      	ldr	r3, [r4, #0]
 80165f8:	f043 0320 	orr.w	r3, r3, #32
 80165fc:	6023      	str	r3, [r4, #0]
 80165fe:	2378      	movs	r3, #120	; 0x78
 8016600:	4828      	ldr	r0, [pc, #160]	; (80166a4 <_printf_i+0x248>)
 8016602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016606:	e7e3      	b.n	80165d0 <_printf_i+0x174>
 8016608:	065e      	lsls	r6, r3, #25
 801660a:	bf48      	it	mi
 801660c:	b2ad      	uxthmi	r5, r5
 801660e:	e7e6      	b.n	80165de <_printf_i+0x182>
 8016610:	4616      	mov	r6, r2
 8016612:	e7bb      	b.n	801658c <_printf_i+0x130>
 8016614:	680b      	ldr	r3, [r1, #0]
 8016616:	6826      	ldr	r6, [r4, #0]
 8016618:	6960      	ldr	r0, [r4, #20]
 801661a:	1d1d      	adds	r5, r3, #4
 801661c:	600d      	str	r5, [r1, #0]
 801661e:	0635      	lsls	r5, r6, #24
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	d501      	bpl.n	8016628 <_printf_i+0x1cc>
 8016624:	6018      	str	r0, [r3, #0]
 8016626:	e002      	b.n	801662e <_printf_i+0x1d2>
 8016628:	0671      	lsls	r1, r6, #25
 801662a:	d5fb      	bpl.n	8016624 <_printf_i+0x1c8>
 801662c:	8018      	strh	r0, [r3, #0]
 801662e:	2300      	movs	r3, #0
 8016630:	6123      	str	r3, [r4, #16]
 8016632:	4616      	mov	r6, r2
 8016634:	e7ba      	b.n	80165ac <_printf_i+0x150>
 8016636:	680b      	ldr	r3, [r1, #0]
 8016638:	1d1a      	adds	r2, r3, #4
 801663a:	600a      	str	r2, [r1, #0]
 801663c:	681e      	ldr	r6, [r3, #0]
 801663e:	6862      	ldr	r2, [r4, #4]
 8016640:	2100      	movs	r1, #0
 8016642:	4630      	mov	r0, r6
 8016644:	f7e9 fdcc 	bl	80001e0 <memchr>
 8016648:	b108      	cbz	r0, 801664e <_printf_i+0x1f2>
 801664a:	1b80      	subs	r0, r0, r6
 801664c:	6060      	str	r0, [r4, #4]
 801664e:	6863      	ldr	r3, [r4, #4]
 8016650:	6123      	str	r3, [r4, #16]
 8016652:	2300      	movs	r3, #0
 8016654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016658:	e7a8      	b.n	80165ac <_printf_i+0x150>
 801665a:	6923      	ldr	r3, [r4, #16]
 801665c:	4632      	mov	r2, r6
 801665e:	4649      	mov	r1, r9
 8016660:	4640      	mov	r0, r8
 8016662:	47d0      	blx	sl
 8016664:	3001      	adds	r0, #1
 8016666:	d0ab      	beq.n	80165c0 <_printf_i+0x164>
 8016668:	6823      	ldr	r3, [r4, #0]
 801666a:	079b      	lsls	r3, r3, #30
 801666c:	d413      	bmi.n	8016696 <_printf_i+0x23a>
 801666e:	68e0      	ldr	r0, [r4, #12]
 8016670:	9b03      	ldr	r3, [sp, #12]
 8016672:	4298      	cmp	r0, r3
 8016674:	bfb8      	it	lt
 8016676:	4618      	movlt	r0, r3
 8016678:	e7a4      	b.n	80165c4 <_printf_i+0x168>
 801667a:	2301      	movs	r3, #1
 801667c:	4632      	mov	r2, r6
 801667e:	4649      	mov	r1, r9
 8016680:	4640      	mov	r0, r8
 8016682:	47d0      	blx	sl
 8016684:	3001      	adds	r0, #1
 8016686:	d09b      	beq.n	80165c0 <_printf_i+0x164>
 8016688:	3501      	adds	r5, #1
 801668a:	68e3      	ldr	r3, [r4, #12]
 801668c:	9903      	ldr	r1, [sp, #12]
 801668e:	1a5b      	subs	r3, r3, r1
 8016690:	42ab      	cmp	r3, r5
 8016692:	dcf2      	bgt.n	801667a <_printf_i+0x21e>
 8016694:	e7eb      	b.n	801666e <_printf_i+0x212>
 8016696:	2500      	movs	r5, #0
 8016698:	f104 0619 	add.w	r6, r4, #25
 801669c:	e7f5      	b.n	801668a <_printf_i+0x22e>
 801669e:	bf00      	nop
 80166a0:	0801c1ce 	.word	0x0801c1ce
 80166a4:	0801c1df 	.word	0x0801c1df

080166a8 <_scanf_float>:
 80166a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ac:	b087      	sub	sp, #28
 80166ae:	4617      	mov	r7, r2
 80166b0:	9303      	str	r3, [sp, #12]
 80166b2:	688b      	ldr	r3, [r1, #8]
 80166b4:	1e5a      	subs	r2, r3, #1
 80166b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80166ba:	bf83      	ittte	hi
 80166bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80166c0:	195b      	addhi	r3, r3, r5
 80166c2:	9302      	strhi	r3, [sp, #8]
 80166c4:	2300      	movls	r3, #0
 80166c6:	bf86      	itte	hi
 80166c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80166cc:	608b      	strhi	r3, [r1, #8]
 80166ce:	9302      	strls	r3, [sp, #8]
 80166d0:	680b      	ldr	r3, [r1, #0]
 80166d2:	468b      	mov	fp, r1
 80166d4:	2500      	movs	r5, #0
 80166d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80166da:	f84b 3b1c 	str.w	r3, [fp], #28
 80166de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80166e2:	4680      	mov	r8, r0
 80166e4:	460c      	mov	r4, r1
 80166e6:	465e      	mov	r6, fp
 80166e8:	46aa      	mov	sl, r5
 80166ea:	46a9      	mov	r9, r5
 80166ec:	9501      	str	r5, [sp, #4]
 80166ee:	68a2      	ldr	r2, [r4, #8]
 80166f0:	b152      	cbz	r2, 8016708 <_scanf_float+0x60>
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	2b4e      	cmp	r3, #78	; 0x4e
 80166f8:	d864      	bhi.n	80167c4 <_scanf_float+0x11c>
 80166fa:	2b40      	cmp	r3, #64	; 0x40
 80166fc:	d83c      	bhi.n	8016778 <_scanf_float+0xd0>
 80166fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016702:	b2c8      	uxtb	r0, r1
 8016704:	280e      	cmp	r0, #14
 8016706:	d93a      	bls.n	801677e <_scanf_float+0xd6>
 8016708:	f1b9 0f00 	cmp.w	r9, #0
 801670c:	d003      	beq.n	8016716 <_scanf_float+0x6e>
 801670e:	6823      	ldr	r3, [r4, #0]
 8016710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016714:	6023      	str	r3, [r4, #0]
 8016716:	f10a 3aff 	add.w	sl, sl, #4294967295
 801671a:	f1ba 0f01 	cmp.w	sl, #1
 801671e:	f200 8113 	bhi.w	8016948 <_scanf_float+0x2a0>
 8016722:	455e      	cmp	r6, fp
 8016724:	f200 8105 	bhi.w	8016932 <_scanf_float+0x28a>
 8016728:	2501      	movs	r5, #1
 801672a:	4628      	mov	r0, r5
 801672c:	b007      	add	sp, #28
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016732:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016736:	2a0d      	cmp	r2, #13
 8016738:	d8e6      	bhi.n	8016708 <_scanf_float+0x60>
 801673a:	a101      	add	r1, pc, #4	; (adr r1, 8016740 <_scanf_float+0x98>)
 801673c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016740:	0801687f 	.word	0x0801687f
 8016744:	08016709 	.word	0x08016709
 8016748:	08016709 	.word	0x08016709
 801674c:	08016709 	.word	0x08016709
 8016750:	080168df 	.word	0x080168df
 8016754:	080168b7 	.word	0x080168b7
 8016758:	08016709 	.word	0x08016709
 801675c:	08016709 	.word	0x08016709
 8016760:	0801688d 	.word	0x0801688d
 8016764:	08016709 	.word	0x08016709
 8016768:	08016709 	.word	0x08016709
 801676c:	08016709 	.word	0x08016709
 8016770:	08016709 	.word	0x08016709
 8016774:	08016845 	.word	0x08016845
 8016778:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801677c:	e7db      	b.n	8016736 <_scanf_float+0x8e>
 801677e:	290e      	cmp	r1, #14
 8016780:	d8c2      	bhi.n	8016708 <_scanf_float+0x60>
 8016782:	a001      	add	r0, pc, #4	; (adr r0, 8016788 <_scanf_float+0xe0>)
 8016784:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016788:	08016837 	.word	0x08016837
 801678c:	08016709 	.word	0x08016709
 8016790:	08016837 	.word	0x08016837
 8016794:	080168cb 	.word	0x080168cb
 8016798:	08016709 	.word	0x08016709
 801679c:	080167e5 	.word	0x080167e5
 80167a0:	08016821 	.word	0x08016821
 80167a4:	08016821 	.word	0x08016821
 80167a8:	08016821 	.word	0x08016821
 80167ac:	08016821 	.word	0x08016821
 80167b0:	08016821 	.word	0x08016821
 80167b4:	08016821 	.word	0x08016821
 80167b8:	08016821 	.word	0x08016821
 80167bc:	08016821 	.word	0x08016821
 80167c0:	08016821 	.word	0x08016821
 80167c4:	2b6e      	cmp	r3, #110	; 0x6e
 80167c6:	d809      	bhi.n	80167dc <_scanf_float+0x134>
 80167c8:	2b60      	cmp	r3, #96	; 0x60
 80167ca:	d8b2      	bhi.n	8016732 <_scanf_float+0x8a>
 80167cc:	2b54      	cmp	r3, #84	; 0x54
 80167ce:	d077      	beq.n	80168c0 <_scanf_float+0x218>
 80167d0:	2b59      	cmp	r3, #89	; 0x59
 80167d2:	d199      	bne.n	8016708 <_scanf_float+0x60>
 80167d4:	2d07      	cmp	r5, #7
 80167d6:	d197      	bne.n	8016708 <_scanf_float+0x60>
 80167d8:	2508      	movs	r5, #8
 80167da:	e029      	b.n	8016830 <_scanf_float+0x188>
 80167dc:	2b74      	cmp	r3, #116	; 0x74
 80167de:	d06f      	beq.n	80168c0 <_scanf_float+0x218>
 80167e0:	2b79      	cmp	r3, #121	; 0x79
 80167e2:	e7f6      	b.n	80167d2 <_scanf_float+0x12a>
 80167e4:	6821      	ldr	r1, [r4, #0]
 80167e6:	05c8      	lsls	r0, r1, #23
 80167e8:	d51a      	bpl.n	8016820 <_scanf_float+0x178>
 80167ea:	9b02      	ldr	r3, [sp, #8]
 80167ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80167f0:	6021      	str	r1, [r4, #0]
 80167f2:	f109 0901 	add.w	r9, r9, #1
 80167f6:	b11b      	cbz	r3, 8016800 <_scanf_float+0x158>
 80167f8:	3b01      	subs	r3, #1
 80167fa:	3201      	adds	r2, #1
 80167fc:	9302      	str	r3, [sp, #8]
 80167fe:	60a2      	str	r2, [r4, #8]
 8016800:	68a3      	ldr	r3, [r4, #8]
 8016802:	3b01      	subs	r3, #1
 8016804:	60a3      	str	r3, [r4, #8]
 8016806:	6923      	ldr	r3, [r4, #16]
 8016808:	3301      	adds	r3, #1
 801680a:	6123      	str	r3, [r4, #16]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	3b01      	subs	r3, #1
 8016810:	2b00      	cmp	r3, #0
 8016812:	607b      	str	r3, [r7, #4]
 8016814:	f340 8084 	ble.w	8016920 <_scanf_float+0x278>
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	3301      	adds	r3, #1
 801681c:	603b      	str	r3, [r7, #0]
 801681e:	e766      	b.n	80166ee <_scanf_float+0x46>
 8016820:	eb1a 0f05 	cmn.w	sl, r5
 8016824:	f47f af70 	bne.w	8016708 <_scanf_float+0x60>
 8016828:	6822      	ldr	r2, [r4, #0]
 801682a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801682e:	6022      	str	r2, [r4, #0]
 8016830:	f806 3b01 	strb.w	r3, [r6], #1
 8016834:	e7e4      	b.n	8016800 <_scanf_float+0x158>
 8016836:	6822      	ldr	r2, [r4, #0]
 8016838:	0610      	lsls	r0, r2, #24
 801683a:	f57f af65 	bpl.w	8016708 <_scanf_float+0x60>
 801683e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016842:	e7f4      	b.n	801682e <_scanf_float+0x186>
 8016844:	f1ba 0f00 	cmp.w	sl, #0
 8016848:	d10e      	bne.n	8016868 <_scanf_float+0x1c0>
 801684a:	f1b9 0f00 	cmp.w	r9, #0
 801684e:	d10e      	bne.n	801686e <_scanf_float+0x1c6>
 8016850:	6822      	ldr	r2, [r4, #0]
 8016852:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016856:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801685a:	d108      	bne.n	801686e <_scanf_float+0x1c6>
 801685c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016860:	6022      	str	r2, [r4, #0]
 8016862:	f04f 0a01 	mov.w	sl, #1
 8016866:	e7e3      	b.n	8016830 <_scanf_float+0x188>
 8016868:	f1ba 0f02 	cmp.w	sl, #2
 801686c:	d055      	beq.n	801691a <_scanf_float+0x272>
 801686e:	2d01      	cmp	r5, #1
 8016870:	d002      	beq.n	8016878 <_scanf_float+0x1d0>
 8016872:	2d04      	cmp	r5, #4
 8016874:	f47f af48 	bne.w	8016708 <_scanf_float+0x60>
 8016878:	3501      	adds	r5, #1
 801687a:	b2ed      	uxtb	r5, r5
 801687c:	e7d8      	b.n	8016830 <_scanf_float+0x188>
 801687e:	f1ba 0f01 	cmp.w	sl, #1
 8016882:	f47f af41 	bne.w	8016708 <_scanf_float+0x60>
 8016886:	f04f 0a02 	mov.w	sl, #2
 801688a:	e7d1      	b.n	8016830 <_scanf_float+0x188>
 801688c:	b97d      	cbnz	r5, 80168ae <_scanf_float+0x206>
 801688e:	f1b9 0f00 	cmp.w	r9, #0
 8016892:	f47f af3c 	bne.w	801670e <_scanf_float+0x66>
 8016896:	6822      	ldr	r2, [r4, #0]
 8016898:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801689c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80168a0:	f47f af39 	bne.w	8016716 <_scanf_float+0x6e>
 80168a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80168a8:	6022      	str	r2, [r4, #0]
 80168aa:	2501      	movs	r5, #1
 80168ac:	e7c0      	b.n	8016830 <_scanf_float+0x188>
 80168ae:	2d03      	cmp	r5, #3
 80168b0:	d0e2      	beq.n	8016878 <_scanf_float+0x1d0>
 80168b2:	2d05      	cmp	r5, #5
 80168b4:	e7de      	b.n	8016874 <_scanf_float+0x1cc>
 80168b6:	2d02      	cmp	r5, #2
 80168b8:	f47f af26 	bne.w	8016708 <_scanf_float+0x60>
 80168bc:	2503      	movs	r5, #3
 80168be:	e7b7      	b.n	8016830 <_scanf_float+0x188>
 80168c0:	2d06      	cmp	r5, #6
 80168c2:	f47f af21 	bne.w	8016708 <_scanf_float+0x60>
 80168c6:	2507      	movs	r5, #7
 80168c8:	e7b2      	b.n	8016830 <_scanf_float+0x188>
 80168ca:	6822      	ldr	r2, [r4, #0]
 80168cc:	0591      	lsls	r1, r2, #22
 80168ce:	f57f af1b 	bpl.w	8016708 <_scanf_float+0x60>
 80168d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80168d6:	6022      	str	r2, [r4, #0]
 80168d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80168dc:	e7a8      	b.n	8016830 <_scanf_float+0x188>
 80168de:	6822      	ldr	r2, [r4, #0]
 80168e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80168e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80168e8:	d006      	beq.n	80168f8 <_scanf_float+0x250>
 80168ea:	0550      	lsls	r0, r2, #21
 80168ec:	f57f af0c 	bpl.w	8016708 <_scanf_float+0x60>
 80168f0:	f1b9 0f00 	cmp.w	r9, #0
 80168f4:	f43f af0f 	beq.w	8016716 <_scanf_float+0x6e>
 80168f8:	0591      	lsls	r1, r2, #22
 80168fa:	bf58      	it	pl
 80168fc:	9901      	ldrpl	r1, [sp, #4]
 80168fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016902:	bf58      	it	pl
 8016904:	eba9 0101 	subpl.w	r1, r9, r1
 8016908:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801690c:	bf58      	it	pl
 801690e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016912:	6022      	str	r2, [r4, #0]
 8016914:	f04f 0900 	mov.w	r9, #0
 8016918:	e78a      	b.n	8016830 <_scanf_float+0x188>
 801691a:	f04f 0a03 	mov.w	sl, #3
 801691e:	e787      	b.n	8016830 <_scanf_float+0x188>
 8016920:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016924:	4639      	mov	r1, r7
 8016926:	4640      	mov	r0, r8
 8016928:	4798      	blx	r3
 801692a:	2800      	cmp	r0, #0
 801692c:	f43f aedf 	beq.w	80166ee <_scanf_float+0x46>
 8016930:	e6ea      	b.n	8016708 <_scanf_float+0x60>
 8016932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016936:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801693a:	463a      	mov	r2, r7
 801693c:	4640      	mov	r0, r8
 801693e:	4798      	blx	r3
 8016940:	6923      	ldr	r3, [r4, #16]
 8016942:	3b01      	subs	r3, #1
 8016944:	6123      	str	r3, [r4, #16]
 8016946:	e6ec      	b.n	8016722 <_scanf_float+0x7a>
 8016948:	1e6b      	subs	r3, r5, #1
 801694a:	2b06      	cmp	r3, #6
 801694c:	d825      	bhi.n	801699a <_scanf_float+0x2f2>
 801694e:	2d02      	cmp	r5, #2
 8016950:	d836      	bhi.n	80169c0 <_scanf_float+0x318>
 8016952:	455e      	cmp	r6, fp
 8016954:	f67f aee8 	bls.w	8016728 <_scanf_float+0x80>
 8016958:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801695c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016960:	463a      	mov	r2, r7
 8016962:	4640      	mov	r0, r8
 8016964:	4798      	blx	r3
 8016966:	6923      	ldr	r3, [r4, #16]
 8016968:	3b01      	subs	r3, #1
 801696a:	6123      	str	r3, [r4, #16]
 801696c:	e7f1      	b.n	8016952 <_scanf_float+0x2aa>
 801696e:	9802      	ldr	r0, [sp, #8]
 8016970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016974:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016978:	9002      	str	r0, [sp, #8]
 801697a:	463a      	mov	r2, r7
 801697c:	4640      	mov	r0, r8
 801697e:	4798      	blx	r3
 8016980:	6923      	ldr	r3, [r4, #16]
 8016982:	3b01      	subs	r3, #1
 8016984:	6123      	str	r3, [r4, #16]
 8016986:	f10a 3aff 	add.w	sl, sl, #4294967295
 801698a:	fa5f fa8a 	uxtb.w	sl, sl
 801698e:	f1ba 0f02 	cmp.w	sl, #2
 8016992:	d1ec      	bne.n	801696e <_scanf_float+0x2c6>
 8016994:	3d03      	subs	r5, #3
 8016996:	b2ed      	uxtb	r5, r5
 8016998:	1b76      	subs	r6, r6, r5
 801699a:	6823      	ldr	r3, [r4, #0]
 801699c:	05da      	lsls	r2, r3, #23
 801699e:	d52f      	bpl.n	8016a00 <_scanf_float+0x358>
 80169a0:	055b      	lsls	r3, r3, #21
 80169a2:	d510      	bpl.n	80169c6 <_scanf_float+0x31e>
 80169a4:	455e      	cmp	r6, fp
 80169a6:	f67f aebf 	bls.w	8016728 <_scanf_float+0x80>
 80169aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80169b2:	463a      	mov	r2, r7
 80169b4:	4640      	mov	r0, r8
 80169b6:	4798      	blx	r3
 80169b8:	6923      	ldr	r3, [r4, #16]
 80169ba:	3b01      	subs	r3, #1
 80169bc:	6123      	str	r3, [r4, #16]
 80169be:	e7f1      	b.n	80169a4 <_scanf_float+0x2fc>
 80169c0:	46aa      	mov	sl, r5
 80169c2:	9602      	str	r6, [sp, #8]
 80169c4:	e7df      	b.n	8016986 <_scanf_float+0x2de>
 80169c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80169ca:	6923      	ldr	r3, [r4, #16]
 80169cc:	2965      	cmp	r1, #101	; 0x65
 80169ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80169d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80169d6:	6123      	str	r3, [r4, #16]
 80169d8:	d00c      	beq.n	80169f4 <_scanf_float+0x34c>
 80169da:	2945      	cmp	r1, #69	; 0x45
 80169dc:	d00a      	beq.n	80169f4 <_scanf_float+0x34c>
 80169de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169e2:	463a      	mov	r2, r7
 80169e4:	4640      	mov	r0, r8
 80169e6:	4798      	blx	r3
 80169e8:	6923      	ldr	r3, [r4, #16]
 80169ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80169ee:	3b01      	subs	r3, #1
 80169f0:	1eb5      	subs	r5, r6, #2
 80169f2:	6123      	str	r3, [r4, #16]
 80169f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169f8:	463a      	mov	r2, r7
 80169fa:	4640      	mov	r0, r8
 80169fc:	4798      	blx	r3
 80169fe:	462e      	mov	r6, r5
 8016a00:	6825      	ldr	r5, [r4, #0]
 8016a02:	f015 0510 	ands.w	r5, r5, #16
 8016a06:	d158      	bne.n	8016aba <_scanf_float+0x412>
 8016a08:	7035      	strb	r5, [r6, #0]
 8016a0a:	6823      	ldr	r3, [r4, #0]
 8016a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016a14:	d11c      	bne.n	8016a50 <_scanf_float+0x3a8>
 8016a16:	9b01      	ldr	r3, [sp, #4]
 8016a18:	454b      	cmp	r3, r9
 8016a1a:	eba3 0209 	sub.w	r2, r3, r9
 8016a1e:	d124      	bne.n	8016a6a <_scanf_float+0x3c2>
 8016a20:	2200      	movs	r2, #0
 8016a22:	4659      	mov	r1, fp
 8016a24:	4640      	mov	r0, r8
 8016a26:	f000 fee1 	bl	80177ec <_strtod_r>
 8016a2a:	9b03      	ldr	r3, [sp, #12]
 8016a2c:	6821      	ldr	r1, [r4, #0]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	f011 0f02 	tst.w	r1, #2
 8016a34:	ec57 6b10 	vmov	r6, r7, d0
 8016a38:	f103 0204 	add.w	r2, r3, #4
 8016a3c:	d020      	beq.n	8016a80 <_scanf_float+0x3d8>
 8016a3e:	9903      	ldr	r1, [sp, #12]
 8016a40:	600a      	str	r2, [r1, #0]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	e9c3 6700 	strd	r6, r7, [r3]
 8016a48:	68e3      	ldr	r3, [r4, #12]
 8016a4a:	3301      	adds	r3, #1
 8016a4c:	60e3      	str	r3, [r4, #12]
 8016a4e:	e66c      	b.n	801672a <_scanf_float+0x82>
 8016a50:	9b04      	ldr	r3, [sp, #16]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d0e4      	beq.n	8016a20 <_scanf_float+0x378>
 8016a56:	9905      	ldr	r1, [sp, #20]
 8016a58:	230a      	movs	r3, #10
 8016a5a:	462a      	mov	r2, r5
 8016a5c:	3101      	adds	r1, #1
 8016a5e:	4640      	mov	r0, r8
 8016a60:	f000 ff4e 	bl	8017900 <_strtol_r>
 8016a64:	9b04      	ldr	r3, [sp, #16]
 8016a66:	9e05      	ldr	r6, [sp, #20]
 8016a68:	1ac2      	subs	r2, r0, r3
 8016a6a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016a6e:	429e      	cmp	r6, r3
 8016a70:	bf28      	it	cs
 8016a72:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016a76:	4912      	ldr	r1, [pc, #72]	; (8016ac0 <_scanf_float+0x418>)
 8016a78:	4630      	mov	r0, r6
 8016a7a:	f000 f86f 	bl	8016b5c <siprintf>
 8016a7e:	e7cf      	b.n	8016a20 <_scanf_float+0x378>
 8016a80:	f011 0f04 	tst.w	r1, #4
 8016a84:	9903      	ldr	r1, [sp, #12]
 8016a86:	600a      	str	r2, [r1, #0]
 8016a88:	d1db      	bne.n	8016a42 <_scanf_float+0x39a>
 8016a8a:	f8d3 8000 	ldr.w	r8, [r3]
 8016a8e:	ee10 2a10 	vmov	r2, s0
 8016a92:	ee10 0a10 	vmov	r0, s0
 8016a96:	463b      	mov	r3, r7
 8016a98:	4639      	mov	r1, r7
 8016a9a:	f7ea f847 	bl	8000b2c <__aeabi_dcmpun>
 8016a9e:	b128      	cbz	r0, 8016aac <_scanf_float+0x404>
 8016aa0:	4808      	ldr	r0, [pc, #32]	; (8016ac4 <_scanf_float+0x41c>)
 8016aa2:	f000 f821 	bl	8016ae8 <nanf>
 8016aa6:	ed88 0a00 	vstr	s0, [r8]
 8016aaa:	e7cd      	b.n	8016a48 <_scanf_float+0x3a0>
 8016aac:	4630      	mov	r0, r6
 8016aae:	4639      	mov	r1, r7
 8016ab0:	f7ea f89a 	bl	8000be8 <__aeabi_d2f>
 8016ab4:	f8c8 0000 	str.w	r0, [r8]
 8016ab8:	e7c6      	b.n	8016a48 <_scanf_float+0x3a0>
 8016aba:	2500      	movs	r5, #0
 8016abc:	e635      	b.n	801672a <_scanf_float+0x82>
 8016abe:	bf00      	nop
 8016ac0:	0801c1f0 	.word	0x0801c1f0
 8016ac4:	0801c608 	.word	0x0801c608

08016ac8 <_sbrk_r>:
 8016ac8:	b538      	push	{r3, r4, r5, lr}
 8016aca:	4d06      	ldr	r5, [pc, #24]	; (8016ae4 <_sbrk_r+0x1c>)
 8016acc:	2300      	movs	r3, #0
 8016ace:	4604      	mov	r4, r0
 8016ad0:	4608      	mov	r0, r1
 8016ad2:	602b      	str	r3, [r5, #0]
 8016ad4:	f7f4 fa00 	bl	800aed8 <_sbrk>
 8016ad8:	1c43      	adds	r3, r0, #1
 8016ada:	d102      	bne.n	8016ae2 <_sbrk_r+0x1a>
 8016adc:	682b      	ldr	r3, [r5, #0]
 8016ade:	b103      	cbz	r3, 8016ae2 <_sbrk_r+0x1a>
 8016ae0:	6023      	str	r3, [r4, #0]
 8016ae2:	bd38      	pop	{r3, r4, r5, pc}
 8016ae4:	2000fb3c 	.word	0x2000fb3c

08016ae8 <nanf>:
 8016ae8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016af0 <nanf+0x8>
 8016aec:	4770      	bx	lr
 8016aee:	bf00      	nop
 8016af0:	7fc00000 	.word	0x7fc00000

08016af4 <sniprintf>:
 8016af4:	b40c      	push	{r2, r3}
 8016af6:	b530      	push	{r4, r5, lr}
 8016af8:	4b17      	ldr	r3, [pc, #92]	; (8016b58 <sniprintf+0x64>)
 8016afa:	1e0c      	subs	r4, r1, #0
 8016afc:	681d      	ldr	r5, [r3, #0]
 8016afe:	b09d      	sub	sp, #116	; 0x74
 8016b00:	da08      	bge.n	8016b14 <sniprintf+0x20>
 8016b02:	238b      	movs	r3, #139	; 0x8b
 8016b04:	602b      	str	r3, [r5, #0]
 8016b06:	f04f 30ff 	mov.w	r0, #4294967295
 8016b0a:	b01d      	add	sp, #116	; 0x74
 8016b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b10:	b002      	add	sp, #8
 8016b12:	4770      	bx	lr
 8016b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b1c:	bf14      	ite	ne
 8016b1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016b22:	4623      	moveq	r3, r4
 8016b24:	9304      	str	r3, [sp, #16]
 8016b26:	9307      	str	r3, [sp, #28]
 8016b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b2c:	9002      	str	r0, [sp, #8]
 8016b2e:	9006      	str	r0, [sp, #24]
 8016b30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b36:	ab21      	add	r3, sp, #132	; 0x84
 8016b38:	a902      	add	r1, sp, #8
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	9301      	str	r3, [sp, #4]
 8016b3e:	f002 fe13 	bl	8019768 <_svfiprintf_r>
 8016b42:	1c43      	adds	r3, r0, #1
 8016b44:	bfbc      	itt	lt
 8016b46:	238b      	movlt	r3, #139	; 0x8b
 8016b48:	602b      	strlt	r3, [r5, #0]
 8016b4a:	2c00      	cmp	r4, #0
 8016b4c:	d0dd      	beq.n	8016b0a <sniprintf+0x16>
 8016b4e:	9b02      	ldr	r3, [sp, #8]
 8016b50:	2200      	movs	r2, #0
 8016b52:	701a      	strb	r2, [r3, #0]
 8016b54:	e7d9      	b.n	8016b0a <sniprintf+0x16>
 8016b56:	bf00      	nop
 8016b58:	20002210 	.word	0x20002210

08016b5c <siprintf>:
 8016b5c:	b40e      	push	{r1, r2, r3}
 8016b5e:	b500      	push	{lr}
 8016b60:	b09c      	sub	sp, #112	; 0x70
 8016b62:	ab1d      	add	r3, sp, #116	; 0x74
 8016b64:	9002      	str	r0, [sp, #8]
 8016b66:	9006      	str	r0, [sp, #24]
 8016b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b6c:	4809      	ldr	r0, [pc, #36]	; (8016b94 <siprintf+0x38>)
 8016b6e:	9107      	str	r1, [sp, #28]
 8016b70:	9104      	str	r1, [sp, #16]
 8016b72:	4909      	ldr	r1, [pc, #36]	; (8016b98 <siprintf+0x3c>)
 8016b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b78:	9105      	str	r1, [sp, #20]
 8016b7a:	6800      	ldr	r0, [r0, #0]
 8016b7c:	9301      	str	r3, [sp, #4]
 8016b7e:	a902      	add	r1, sp, #8
 8016b80:	f002 fdf2 	bl	8019768 <_svfiprintf_r>
 8016b84:	9b02      	ldr	r3, [sp, #8]
 8016b86:	2200      	movs	r2, #0
 8016b88:	701a      	strb	r2, [r3, #0]
 8016b8a:	b01c      	add	sp, #112	; 0x70
 8016b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b90:	b003      	add	sp, #12
 8016b92:	4770      	bx	lr
 8016b94:	20002210 	.word	0x20002210
 8016b98:	ffff0208 	.word	0xffff0208

08016b9c <sulp>:
 8016b9c:	b570      	push	{r4, r5, r6, lr}
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	460d      	mov	r5, r1
 8016ba2:	ec45 4b10 	vmov	d0, r4, r5
 8016ba6:	4616      	mov	r6, r2
 8016ba8:	f002 fc24 	bl	80193f4 <__ulp>
 8016bac:	ec51 0b10 	vmov	r0, r1, d0
 8016bb0:	b17e      	cbz	r6, 8016bd2 <sulp+0x36>
 8016bb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016bb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	dd09      	ble.n	8016bd2 <sulp+0x36>
 8016bbe:	051b      	lsls	r3, r3, #20
 8016bc0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016bc4:	2400      	movs	r4, #0
 8016bc6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016bca:	4622      	mov	r2, r4
 8016bcc:	462b      	mov	r3, r5
 8016bce:	f7e9 fd13 	bl	80005f8 <__aeabi_dmul>
 8016bd2:	bd70      	pop	{r4, r5, r6, pc}
 8016bd4:	0000      	movs	r0, r0
	...

08016bd8 <_strtod_l>:
 8016bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bdc:	b0a3      	sub	sp, #140	; 0x8c
 8016bde:	461f      	mov	r7, r3
 8016be0:	2300      	movs	r3, #0
 8016be2:	931e      	str	r3, [sp, #120]	; 0x78
 8016be4:	4ba4      	ldr	r3, [pc, #656]	; (8016e78 <_strtod_l+0x2a0>)
 8016be6:	9219      	str	r2, [sp, #100]	; 0x64
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	9307      	str	r3, [sp, #28]
 8016bec:	4604      	mov	r4, r0
 8016bee:	4618      	mov	r0, r3
 8016bf0:	4688      	mov	r8, r1
 8016bf2:	f7e9 faed 	bl	80001d0 <strlen>
 8016bf6:	f04f 0a00 	mov.w	sl, #0
 8016bfa:	4605      	mov	r5, r0
 8016bfc:	f04f 0b00 	mov.w	fp, #0
 8016c00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016c06:	781a      	ldrb	r2, [r3, #0]
 8016c08:	2a2b      	cmp	r2, #43	; 0x2b
 8016c0a:	d04c      	beq.n	8016ca6 <_strtod_l+0xce>
 8016c0c:	d839      	bhi.n	8016c82 <_strtod_l+0xaa>
 8016c0e:	2a0d      	cmp	r2, #13
 8016c10:	d832      	bhi.n	8016c78 <_strtod_l+0xa0>
 8016c12:	2a08      	cmp	r2, #8
 8016c14:	d832      	bhi.n	8016c7c <_strtod_l+0xa4>
 8016c16:	2a00      	cmp	r2, #0
 8016c18:	d03c      	beq.n	8016c94 <_strtod_l+0xbc>
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8016c1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016c20:	7833      	ldrb	r3, [r6, #0]
 8016c22:	2b30      	cmp	r3, #48	; 0x30
 8016c24:	f040 80b4 	bne.w	8016d90 <_strtod_l+0x1b8>
 8016c28:	7873      	ldrb	r3, [r6, #1]
 8016c2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016c2e:	2b58      	cmp	r3, #88	; 0x58
 8016c30:	d16c      	bne.n	8016d0c <_strtod_l+0x134>
 8016c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c34:	9301      	str	r3, [sp, #4]
 8016c36:	ab1e      	add	r3, sp, #120	; 0x78
 8016c38:	9702      	str	r7, [sp, #8]
 8016c3a:	9300      	str	r3, [sp, #0]
 8016c3c:	4a8f      	ldr	r2, [pc, #572]	; (8016e7c <_strtod_l+0x2a4>)
 8016c3e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016c40:	a91d      	add	r1, sp, #116	; 0x74
 8016c42:	4620      	mov	r0, r4
 8016c44:	f001 fd40 	bl	80186c8 <__gethex>
 8016c48:	f010 0707 	ands.w	r7, r0, #7
 8016c4c:	4605      	mov	r5, r0
 8016c4e:	d005      	beq.n	8016c5c <_strtod_l+0x84>
 8016c50:	2f06      	cmp	r7, #6
 8016c52:	d12a      	bne.n	8016caa <_strtod_l+0xd2>
 8016c54:	3601      	adds	r6, #1
 8016c56:	2300      	movs	r3, #0
 8016c58:	961d      	str	r6, [sp, #116]	; 0x74
 8016c5a:	930e      	str	r3, [sp, #56]	; 0x38
 8016c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	f040 8596 	bne.w	8017790 <_strtod_l+0xbb8>
 8016c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c66:	b1db      	cbz	r3, 8016ca0 <_strtod_l+0xc8>
 8016c68:	4652      	mov	r2, sl
 8016c6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016c6e:	ec43 2b10 	vmov	d0, r2, r3
 8016c72:	b023      	add	sp, #140	; 0x8c
 8016c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c78:	2a20      	cmp	r2, #32
 8016c7a:	d1ce      	bne.n	8016c1a <_strtod_l+0x42>
 8016c7c:	3301      	adds	r3, #1
 8016c7e:	931d      	str	r3, [sp, #116]	; 0x74
 8016c80:	e7c0      	b.n	8016c04 <_strtod_l+0x2c>
 8016c82:	2a2d      	cmp	r2, #45	; 0x2d
 8016c84:	d1c9      	bne.n	8016c1a <_strtod_l+0x42>
 8016c86:	2201      	movs	r2, #1
 8016c88:	920e      	str	r2, [sp, #56]	; 0x38
 8016c8a:	1c5a      	adds	r2, r3, #1
 8016c8c:	921d      	str	r2, [sp, #116]	; 0x74
 8016c8e:	785b      	ldrb	r3, [r3, #1]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d1c4      	bne.n	8016c1e <_strtod_l+0x46>
 8016c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	f040 8576 	bne.w	801778c <_strtod_l+0xbb4>
 8016ca0:	4652      	mov	r2, sl
 8016ca2:	465b      	mov	r3, fp
 8016ca4:	e7e3      	b.n	8016c6e <_strtod_l+0x96>
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	e7ee      	b.n	8016c88 <_strtod_l+0xb0>
 8016caa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016cac:	b13a      	cbz	r2, 8016cbe <_strtod_l+0xe6>
 8016cae:	2135      	movs	r1, #53	; 0x35
 8016cb0:	a820      	add	r0, sp, #128	; 0x80
 8016cb2:	f002 fcaa 	bl	801960a <__copybits>
 8016cb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016cb8:	4620      	mov	r0, r4
 8016cba:	f002 f86f 	bl	8018d9c <_Bfree>
 8016cbe:	3f01      	subs	r7, #1
 8016cc0:	2f05      	cmp	r7, #5
 8016cc2:	d807      	bhi.n	8016cd4 <_strtod_l+0xfc>
 8016cc4:	e8df f007 	tbb	[pc, r7]
 8016cc8:	1d180b0e 	.word	0x1d180b0e
 8016ccc:	030e      	.short	0x030e
 8016cce:	f04f 0b00 	mov.w	fp, #0
 8016cd2:	46da      	mov	sl, fp
 8016cd4:	0728      	lsls	r0, r5, #28
 8016cd6:	d5c1      	bpl.n	8016c5c <_strtod_l+0x84>
 8016cd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016cdc:	e7be      	b.n	8016c5c <_strtod_l+0x84>
 8016cde:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016ce2:	e7f7      	b.n	8016cd4 <_strtod_l+0xfc>
 8016ce4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016ce8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016cea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016cee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016cf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016cf6:	e7ed      	b.n	8016cd4 <_strtod_l+0xfc>
 8016cf8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016e80 <_strtod_l+0x2a8>
 8016cfc:	f04f 0a00 	mov.w	sl, #0
 8016d00:	e7e8      	b.n	8016cd4 <_strtod_l+0xfc>
 8016d02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016d06:	f04f 3aff 	mov.w	sl, #4294967295
 8016d0a:	e7e3      	b.n	8016cd4 <_strtod_l+0xfc>
 8016d0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d0e:	1c5a      	adds	r2, r3, #1
 8016d10:	921d      	str	r2, [sp, #116]	; 0x74
 8016d12:	785b      	ldrb	r3, [r3, #1]
 8016d14:	2b30      	cmp	r3, #48	; 0x30
 8016d16:	d0f9      	beq.n	8016d0c <_strtod_l+0x134>
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d09f      	beq.n	8016c5c <_strtod_l+0x84>
 8016d1c:	2301      	movs	r3, #1
 8016d1e:	f04f 0900 	mov.w	r9, #0
 8016d22:	9304      	str	r3, [sp, #16]
 8016d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d26:	930a      	str	r3, [sp, #40]	; 0x28
 8016d28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016d2c:	464f      	mov	r7, r9
 8016d2e:	220a      	movs	r2, #10
 8016d30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016d32:	7806      	ldrb	r6, [r0, #0]
 8016d34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016d38:	b2d9      	uxtb	r1, r3
 8016d3a:	2909      	cmp	r1, #9
 8016d3c:	d92a      	bls.n	8016d94 <_strtod_l+0x1bc>
 8016d3e:	9907      	ldr	r1, [sp, #28]
 8016d40:	462a      	mov	r2, r5
 8016d42:	f002 fe19 	bl	8019978 <strncmp>
 8016d46:	b398      	cbz	r0, 8016db0 <_strtod_l+0x1d8>
 8016d48:	2000      	movs	r0, #0
 8016d4a:	4633      	mov	r3, r6
 8016d4c:	463d      	mov	r5, r7
 8016d4e:	9007      	str	r0, [sp, #28]
 8016d50:	4602      	mov	r2, r0
 8016d52:	2b65      	cmp	r3, #101	; 0x65
 8016d54:	d001      	beq.n	8016d5a <_strtod_l+0x182>
 8016d56:	2b45      	cmp	r3, #69	; 0x45
 8016d58:	d118      	bne.n	8016d8c <_strtod_l+0x1b4>
 8016d5a:	b91d      	cbnz	r5, 8016d64 <_strtod_l+0x18c>
 8016d5c:	9b04      	ldr	r3, [sp, #16]
 8016d5e:	4303      	orrs	r3, r0
 8016d60:	d098      	beq.n	8016c94 <_strtod_l+0xbc>
 8016d62:	2500      	movs	r5, #0
 8016d64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016d68:	f108 0301 	add.w	r3, r8, #1
 8016d6c:	931d      	str	r3, [sp, #116]	; 0x74
 8016d6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016d72:	2b2b      	cmp	r3, #43	; 0x2b
 8016d74:	d075      	beq.n	8016e62 <_strtod_l+0x28a>
 8016d76:	2b2d      	cmp	r3, #45	; 0x2d
 8016d78:	d07b      	beq.n	8016e72 <_strtod_l+0x29a>
 8016d7a:	f04f 0c00 	mov.w	ip, #0
 8016d7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016d82:	2909      	cmp	r1, #9
 8016d84:	f240 8082 	bls.w	8016e8c <_strtod_l+0x2b4>
 8016d88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016d8c:	2600      	movs	r6, #0
 8016d8e:	e09d      	b.n	8016ecc <_strtod_l+0x2f4>
 8016d90:	2300      	movs	r3, #0
 8016d92:	e7c4      	b.n	8016d1e <_strtod_l+0x146>
 8016d94:	2f08      	cmp	r7, #8
 8016d96:	bfd8      	it	le
 8016d98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016d9a:	f100 0001 	add.w	r0, r0, #1
 8016d9e:	bfda      	itte	le
 8016da0:	fb02 3301 	mlale	r3, r2, r1, r3
 8016da4:	9309      	strle	r3, [sp, #36]	; 0x24
 8016da6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016daa:	3701      	adds	r7, #1
 8016dac:	901d      	str	r0, [sp, #116]	; 0x74
 8016dae:	e7bf      	b.n	8016d30 <_strtod_l+0x158>
 8016db0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016db2:	195a      	adds	r2, r3, r5
 8016db4:	921d      	str	r2, [sp, #116]	; 0x74
 8016db6:	5d5b      	ldrb	r3, [r3, r5]
 8016db8:	2f00      	cmp	r7, #0
 8016dba:	d037      	beq.n	8016e2c <_strtod_l+0x254>
 8016dbc:	9007      	str	r0, [sp, #28]
 8016dbe:	463d      	mov	r5, r7
 8016dc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016dc4:	2a09      	cmp	r2, #9
 8016dc6:	d912      	bls.n	8016dee <_strtod_l+0x216>
 8016dc8:	2201      	movs	r2, #1
 8016dca:	e7c2      	b.n	8016d52 <_strtod_l+0x17a>
 8016dcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016dce:	1c5a      	adds	r2, r3, #1
 8016dd0:	921d      	str	r2, [sp, #116]	; 0x74
 8016dd2:	785b      	ldrb	r3, [r3, #1]
 8016dd4:	3001      	adds	r0, #1
 8016dd6:	2b30      	cmp	r3, #48	; 0x30
 8016dd8:	d0f8      	beq.n	8016dcc <_strtod_l+0x1f4>
 8016dda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016dde:	2a08      	cmp	r2, #8
 8016de0:	f200 84db 	bhi.w	801779a <_strtod_l+0xbc2>
 8016de4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016de6:	9007      	str	r0, [sp, #28]
 8016de8:	2000      	movs	r0, #0
 8016dea:	920a      	str	r2, [sp, #40]	; 0x28
 8016dec:	4605      	mov	r5, r0
 8016dee:	3b30      	subs	r3, #48	; 0x30
 8016df0:	f100 0201 	add.w	r2, r0, #1
 8016df4:	d014      	beq.n	8016e20 <_strtod_l+0x248>
 8016df6:	9907      	ldr	r1, [sp, #28]
 8016df8:	4411      	add	r1, r2
 8016dfa:	9107      	str	r1, [sp, #28]
 8016dfc:	462a      	mov	r2, r5
 8016dfe:	eb00 0e05 	add.w	lr, r0, r5
 8016e02:	210a      	movs	r1, #10
 8016e04:	4572      	cmp	r2, lr
 8016e06:	d113      	bne.n	8016e30 <_strtod_l+0x258>
 8016e08:	182a      	adds	r2, r5, r0
 8016e0a:	2a08      	cmp	r2, #8
 8016e0c:	f105 0501 	add.w	r5, r5, #1
 8016e10:	4405      	add	r5, r0
 8016e12:	dc1c      	bgt.n	8016e4e <_strtod_l+0x276>
 8016e14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e16:	220a      	movs	r2, #10
 8016e18:	fb02 3301 	mla	r3, r2, r1, r3
 8016e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1e:	2200      	movs	r2, #0
 8016e20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e22:	1c59      	adds	r1, r3, #1
 8016e24:	911d      	str	r1, [sp, #116]	; 0x74
 8016e26:	785b      	ldrb	r3, [r3, #1]
 8016e28:	4610      	mov	r0, r2
 8016e2a:	e7c9      	b.n	8016dc0 <_strtod_l+0x1e8>
 8016e2c:	4638      	mov	r0, r7
 8016e2e:	e7d2      	b.n	8016dd6 <_strtod_l+0x1fe>
 8016e30:	2a08      	cmp	r2, #8
 8016e32:	dc04      	bgt.n	8016e3e <_strtod_l+0x266>
 8016e34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016e36:	434e      	muls	r6, r1
 8016e38:	9609      	str	r6, [sp, #36]	; 0x24
 8016e3a:	3201      	adds	r2, #1
 8016e3c:	e7e2      	b.n	8016e04 <_strtod_l+0x22c>
 8016e3e:	f102 0c01 	add.w	ip, r2, #1
 8016e42:	f1bc 0f10 	cmp.w	ip, #16
 8016e46:	bfd8      	it	le
 8016e48:	fb01 f909 	mulle.w	r9, r1, r9
 8016e4c:	e7f5      	b.n	8016e3a <_strtod_l+0x262>
 8016e4e:	2d10      	cmp	r5, #16
 8016e50:	bfdc      	itt	le
 8016e52:	220a      	movle	r2, #10
 8016e54:	fb02 3909 	mlale	r9, r2, r9, r3
 8016e58:	e7e1      	b.n	8016e1e <_strtod_l+0x246>
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	9307      	str	r3, [sp, #28]
 8016e5e:	2201      	movs	r2, #1
 8016e60:	e77c      	b.n	8016d5c <_strtod_l+0x184>
 8016e62:	f04f 0c00 	mov.w	ip, #0
 8016e66:	f108 0302 	add.w	r3, r8, #2
 8016e6a:	931d      	str	r3, [sp, #116]	; 0x74
 8016e6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016e70:	e785      	b.n	8016d7e <_strtod_l+0x1a6>
 8016e72:	f04f 0c01 	mov.w	ip, #1
 8016e76:	e7f6      	b.n	8016e66 <_strtod_l+0x28e>
 8016e78:	0801c448 	.word	0x0801c448
 8016e7c:	0801c1f8 	.word	0x0801c1f8
 8016e80:	7ff00000 	.word	0x7ff00000
 8016e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e86:	1c59      	adds	r1, r3, #1
 8016e88:	911d      	str	r1, [sp, #116]	; 0x74
 8016e8a:	785b      	ldrb	r3, [r3, #1]
 8016e8c:	2b30      	cmp	r3, #48	; 0x30
 8016e8e:	d0f9      	beq.n	8016e84 <_strtod_l+0x2ac>
 8016e90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016e94:	2908      	cmp	r1, #8
 8016e96:	f63f af79 	bhi.w	8016d8c <_strtod_l+0x1b4>
 8016e9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016e9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ea0:	9308      	str	r3, [sp, #32]
 8016ea2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ea4:	1c59      	adds	r1, r3, #1
 8016ea6:	911d      	str	r1, [sp, #116]	; 0x74
 8016ea8:	785b      	ldrb	r3, [r3, #1]
 8016eaa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016eae:	2e09      	cmp	r6, #9
 8016eb0:	d937      	bls.n	8016f22 <_strtod_l+0x34a>
 8016eb2:	9e08      	ldr	r6, [sp, #32]
 8016eb4:	1b89      	subs	r1, r1, r6
 8016eb6:	2908      	cmp	r1, #8
 8016eb8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016ebc:	dc02      	bgt.n	8016ec4 <_strtod_l+0x2ec>
 8016ebe:	4576      	cmp	r6, lr
 8016ec0:	bfa8      	it	ge
 8016ec2:	4676      	movge	r6, lr
 8016ec4:	f1bc 0f00 	cmp.w	ip, #0
 8016ec8:	d000      	beq.n	8016ecc <_strtod_l+0x2f4>
 8016eca:	4276      	negs	r6, r6
 8016ecc:	2d00      	cmp	r5, #0
 8016ece:	d14f      	bne.n	8016f70 <_strtod_l+0x398>
 8016ed0:	9904      	ldr	r1, [sp, #16]
 8016ed2:	4301      	orrs	r1, r0
 8016ed4:	f47f aec2 	bne.w	8016c5c <_strtod_l+0x84>
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	f47f aedb 	bne.w	8016c94 <_strtod_l+0xbc>
 8016ede:	2b69      	cmp	r3, #105	; 0x69
 8016ee0:	d027      	beq.n	8016f32 <_strtod_l+0x35a>
 8016ee2:	dc24      	bgt.n	8016f2e <_strtod_l+0x356>
 8016ee4:	2b49      	cmp	r3, #73	; 0x49
 8016ee6:	d024      	beq.n	8016f32 <_strtod_l+0x35a>
 8016ee8:	2b4e      	cmp	r3, #78	; 0x4e
 8016eea:	f47f aed3 	bne.w	8016c94 <_strtod_l+0xbc>
 8016eee:	499e      	ldr	r1, [pc, #632]	; (8017168 <_strtod_l+0x590>)
 8016ef0:	a81d      	add	r0, sp, #116	; 0x74
 8016ef2:	f001 fe41 	bl	8018b78 <__match>
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	f43f aecc 	beq.w	8016c94 <_strtod_l+0xbc>
 8016efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016efe:	781b      	ldrb	r3, [r3, #0]
 8016f00:	2b28      	cmp	r3, #40	; 0x28
 8016f02:	d12d      	bne.n	8016f60 <_strtod_l+0x388>
 8016f04:	4999      	ldr	r1, [pc, #612]	; (801716c <_strtod_l+0x594>)
 8016f06:	aa20      	add	r2, sp, #128	; 0x80
 8016f08:	a81d      	add	r0, sp, #116	; 0x74
 8016f0a:	f001 fe49 	bl	8018ba0 <__hexnan>
 8016f0e:	2805      	cmp	r0, #5
 8016f10:	d126      	bne.n	8016f60 <_strtod_l+0x388>
 8016f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016f18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016f1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016f20:	e69c      	b.n	8016c5c <_strtod_l+0x84>
 8016f22:	210a      	movs	r1, #10
 8016f24:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016f28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016f2c:	e7b9      	b.n	8016ea2 <_strtod_l+0x2ca>
 8016f2e:	2b6e      	cmp	r3, #110	; 0x6e
 8016f30:	e7db      	b.n	8016eea <_strtod_l+0x312>
 8016f32:	498f      	ldr	r1, [pc, #572]	; (8017170 <_strtod_l+0x598>)
 8016f34:	a81d      	add	r0, sp, #116	; 0x74
 8016f36:	f001 fe1f 	bl	8018b78 <__match>
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	f43f aeaa 	beq.w	8016c94 <_strtod_l+0xbc>
 8016f40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f42:	498c      	ldr	r1, [pc, #560]	; (8017174 <_strtod_l+0x59c>)
 8016f44:	3b01      	subs	r3, #1
 8016f46:	a81d      	add	r0, sp, #116	; 0x74
 8016f48:	931d      	str	r3, [sp, #116]	; 0x74
 8016f4a:	f001 fe15 	bl	8018b78 <__match>
 8016f4e:	b910      	cbnz	r0, 8016f56 <_strtod_l+0x37e>
 8016f50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f52:	3301      	adds	r3, #1
 8016f54:	931d      	str	r3, [sp, #116]	; 0x74
 8016f56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017184 <_strtod_l+0x5ac>
 8016f5a:	f04f 0a00 	mov.w	sl, #0
 8016f5e:	e67d      	b.n	8016c5c <_strtod_l+0x84>
 8016f60:	4885      	ldr	r0, [pc, #532]	; (8017178 <_strtod_l+0x5a0>)
 8016f62:	f002 fd01 	bl	8019968 <nan>
 8016f66:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016f6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016f6e:	e675      	b.n	8016c5c <_strtod_l+0x84>
 8016f70:	9b07      	ldr	r3, [sp, #28]
 8016f72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f74:	1af3      	subs	r3, r6, r3
 8016f76:	2f00      	cmp	r7, #0
 8016f78:	bf08      	it	eq
 8016f7a:	462f      	moveq	r7, r5
 8016f7c:	2d10      	cmp	r5, #16
 8016f7e:	9308      	str	r3, [sp, #32]
 8016f80:	46a8      	mov	r8, r5
 8016f82:	bfa8      	it	ge
 8016f84:	f04f 0810 	movge.w	r8, #16
 8016f88:	f7e9 fabc 	bl	8000504 <__aeabi_ui2d>
 8016f8c:	2d09      	cmp	r5, #9
 8016f8e:	4682      	mov	sl, r0
 8016f90:	468b      	mov	fp, r1
 8016f92:	dd13      	ble.n	8016fbc <_strtod_l+0x3e4>
 8016f94:	4b79      	ldr	r3, [pc, #484]	; (801717c <_strtod_l+0x5a4>)
 8016f96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016f9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016f9e:	f7e9 fb2b 	bl	80005f8 <__aeabi_dmul>
 8016fa2:	4682      	mov	sl, r0
 8016fa4:	4648      	mov	r0, r9
 8016fa6:	468b      	mov	fp, r1
 8016fa8:	f7e9 faac 	bl	8000504 <__aeabi_ui2d>
 8016fac:	4602      	mov	r2, r0
 8016fae:	460b      	mov	r3, r1
 8016fb0:	4650      	mov	r0, sl
 8016fb2:	4659      	mov	r1, fp
 8016fb4:	f7e9 f96a 	bl	800028c <__adddf3>
 8016fb8:	4682      	mov	sl, r0
 8016fba:	468b      	mov	fp, r1
 8016fbc:	2d0f      	cmp	r5, #15
 8016fbe:	dc38      	bgt.n	8017032 <_strtod_l+0x45a>
 8016fc0:	9b08      	ldr	r3, [sp, #32]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f43f ae4a 	beq.w	8016c5c <_strtod_l+0x84>
 8016fc8:	dd24      	ble.n	8017014 <_strtod_l+0x43c>
 8016fca:	2b16      	cmp	r3, #22
 8016fcc:	dc0b      	bgt.n	8016fe6 <_strtod_l+0x40e>
 8016fce:	4d6b      	ldr	r5, [pc, #428]	; (801717c <_strtod_l+0x5a4>)
 8016fd0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016fd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016fd8:	4652      	mov	r2, sl
 8016fda:	465b      	mov	r3, fp
 8016fdc:	f7e9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8016fe0:	4682      	mov	sl, r0
 8016fe2:	468b      	mov	fp, r1
 8016fe4:	e63a      	b.n	8016c5c <_strtod_l+0x84>
 8016fe6:	9a08      	ldr	r2, [sp, #32]
 8016fe8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016fec:	4293      	cmp	r3, r2
 8016fee:	db20      	blt.n	8017032 <_strtod_l+0x45a>
 8016ff0:	4c62      	ldr	r4, [pc, #392]	; (801717c <_strtod_l+0x5a4>)
 8016ff2:	f1c5 050f 	rsb	r5, r5, #15
 8016ff6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016ffa:	4652      	mov	r2, sl
 8016ffc:	465b      	mov	r3, fp
 8016ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017002:	f7e9 faf9 	bl	80005f8 <__aeabi_dmul>
 8017006:	9b08      	ldr	r3, [sp, #32]
 8017008:	1b5d      	subs	r5, r3, r5
 801700a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801700e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017012:	e7e3      	b.n	8016fdc <_strtod_l+0x404>
 8017014:	9b08      	ldr	r3, [sp, #32]
 8017016:	3316      	adds	r3, #22
 8017018:	db0b      	blt.n	8017032 <_strtod_l+0x45a>
 801701a:	9b07      	ldr	r3, [sp, #28]
 801701c:	4a57      	ldr	r2, [pc, #348]	; (801717c <_strtod_l+0x5a4>)
 801701e:	1b9e      	subs	r6, r3, r6
 8017020:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017024:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017028:	4650      	mov	r0, sl
 801702a:	4659      	mov	r1, fp
 801702c:	f7e9 fc0e 	bl	800084c <__aeabi_ddiv>
 8017030:	e7d6      	b.n	8016fe0 <_strtod_l+0x408>
 8017032:	9b08      	ldr	r3, [sp, #32]
 8017034:	eba5 0808 	sub.w	r8, r5, r8
 8017038:	4498      	add	r8, r3
 801703a:	f1b8 0f00 	cmp.w	r8, #0
 801703e:	dd71      	ble.n	8017124 <_strtod_l+0x54c>
 8017040:	f018 030f 	ands.w	r3, r8, #15
 8017044:	d00a      	beq.n	801705c <_strtod_l+0x484>
 8017046:	494d      	ldr	r1, [pc, #308]	; (801717c <_strtod_l+0x5a4>)
 8017048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801704c:	4652      	mov	r2, sl
 801704e:	465b      	mov	r3, fp
 8017050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017054:	f7e9 fad0 	bl	80005f8 <__aeabi_dmul>
 8017058:	4682      	mov	sl, r0
 801705a:	468b      	mov	fp, r1
 801705c:	f038 080f 	bics.w	r8, r8, #15
 8017060:	d04d      	beq.n	80170fe <_strtod_l+0x526>
 8017062:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017066:	dd22      	ble.n	80170ae <_strtod_l+0x4d6>
 8017068:	2500      	movs	r5, #0
 801706a:	462e      	mov	r6, r5
 801706c:	9509      	str	r5, [sp, #36]	; 0x24
 801706e:	9507      	str	r5, [sp, #28]
 8017070:	2322      	movs	r3, #34	; 0x22
 8017072:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017184 <_strtod_l+0x5ac>
 8017076:	6023      	str	r3, [r4, #0]
 8017078:	f04f 0a00 	mov.w	sl, #0
 801707c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801707e:	2b00      	cmp	r3, #0
 8017080:	f43f adec 	beq.w	8016c5c <_strtod_l+0x84>
 8017084:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017086:	4620      	mov	r0, r4
 8017088:	f001 fe88 	bl	8018d9c <_Bfree>
 801708c:	9907      	ldr	r1, [sp, #28]
 801708e:	4620      	mov	r0, r4
 8017090:	f001 fe84 	bl	8018d9c <_Bfree>
 8017094:	4631      	mov	r1, r6
 8017096:	4620      	mov	r0, r4
 8017098:	f001 fe80 	bl	8018d9c <_Bfree>
 801709c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801709e:	4620      	mov	r0, r4
 80170a0:	f001 fe7c 	bl	8018d9c <_Bfree>
 80170a4:	4629      	mov	r1, r5
 80170a6:	4620      	mov	r0, r4
 80170a8:	f001 fe78 	bl	8018d9c <_Bfree>
 80170ac:	e5d6      	b.n	8016c5c <_strtod_l+0x84>
 80170ae:	2300      	movs	r3, #0
 80170b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80170b4:	4650      	mov	r0, sl
 80170b6:	4659      	mov	r1, fp
 80170b8:	4699      	mov	r9, r3
 80170ba:	f1b8 0f01 	cmp.w	r8, #1
 80170be:	dc21      	bgt.n	8017104 <_strtod_l+0x52c>
 80170c0:	b10b      	cbz	r3, 80170c6 <_strtod_l+0x4ee>
 80170c2:	4682      	mov	sl, r0
 80170c4:	468b      	mov	fp, r1
 80170c6:	4b2e      	ldr	r3, [pc, #184]	; (8017180 <_strtod_l+0x5a8>)
 80170c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80170cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80170d0:	4652      	mov	r2, sl
 80170d2:	465b      	mov	r3, fp
 80170d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80170d8:	f7e9 fa8e 	bl	80005f8 <__aeabi_dmul>
 80170dc:	4b29      	ldr	r3, [pc, #164]	; (8017184 <_strtod_l+0x5ac>)
 80170de:	460a      	mov	r2, r1
 80170e0:	400b      	ands	r3, r1
 80170e2:	4929      	ldr	r1, [pc, #164]	; (8017188 <_strtod_l+0x5b0>)
 80170e4:	428b      	cmp	r3, r1
 80170e6:	4682      	mov	sl, r0
 80170e8:	d8be      	bhi.n	8017068 <_strtod_l+0x490>
 80170ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80170ee:	428b      	cmp	r3, r1
 80170f0:	bf86      	itte	hi
 80170f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801718c <_strtod_l+0x5b4>
 80170f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80170fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80170fe:	2300      	movs	r3, #0
 8017100:	9304      	str	r3, [sp, #16]
 8017102:	e081      	b.n	8017208 <_strtod_l+0x630>
 8017104:	f018 0f01 	tst.w	r8, #1
 8017108:	d007      	beq.n	801711a <_strtod_l+0x542>
 801710a:	4b1d      	ldr	r3, [pc, #116]	; (8017180 <_strtod_l+0x5a8>)
 801710c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017114:	f7e9 fa70 	bl	80005f8 <__aeabi_dmul>
 8017118:	2301      	movs	r3, #1
 801711a:	f109 0901 	add.w	r9, r9, #1
 801711e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017122:	e7ca      	b.n	80170ba <_strtod_l+0x4e2>
 8017124:	d0eb      	beq.n	80170fe <_strtod_l+0x526>
 8017126:	f1c8 0800 	rsb	r8, r8, #0
 801712a:	f018 020f 	ands.w	r2, r8, #15
 801712e:	d00a      	beq.n	8017146 <_strtod_l+0x56e>
 8017130:	4b12      	ldr	r3, [pc, #72]	; (801717c <_strtod_l+0x5a4>)
 8017132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017136:	4650      	mov	r0, sl
 8017138:	4659      	mov	r1, fp
 801713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713e:	f7e9 fb85 	bl	800084c <__aeabi_ddiv>
 8017142:	4682      	mov	sl, r0
 8017144:	468b      	mov	fp, r1
 8017146:	ea5f 1828 	movs.w	r8, r8, asr #4
 801714a:	d0d8      	beq.n	80170fe <_strtod_l+0x526>
 801714c:	f1b8 0f1f 	cmp.w	r8, #31
 8017150:	dd1e      	ble.n	8017190 <_strtod_l+0x5b8>
 8017152:	2500      	movs	r5, #0
 8017154:	462e      	mov	r6, r5
 8017156:	9509      	str	r5, [sp, #36]	; 0x24
 8017158:	9507      	str	r5, [sp, #28]
 801715a:	2322      	movs	r3, #34	; 0x22
 801715c:	f04f 0a00 	mov.w	sl, #0
 8017160:	f04f 0b00 	mov.w	fp, #0
 8017164:	6023      	str	r3, [r4, #0]
 8017166:	e789      	b.n	801707c <_strtod_l+0x4a4>
 8017168:	0801c1c9 	.word	0x0801c1c9
 801716c:	0801c20c 	.word	0x0801c20c
 8017170:	0801c1c1 	.word	0x0801c1c1
 8017174:	0801c34c 	.word	0x0801c34c
 8017178:	0801c608 	.word	0x0801c608
 801717c:	0801c4e8 	.word	0x0801c4e8
 8017180:	0801c4c0 	.word	0x0801c4c0
 8017184:	7ff00000 	.word	0x7ff00000
 8017188:	7ca00000 	.word	0x7ca00000
 801718c:	7fefffff 	.word	0x7fefffff
 8017190:	f018 0310 	ands.w	r3, r8, #16
 8017194:	bf18      	it	ne
 8017196:	236a      	movne	r3, #106	; 0x6a
 8017198:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017550 <_strtod_l+0x978>
 801719c:	9304      	str	r3, [sp, #16]
 801719e:	4650      	mov	r0, sl
 80171a0:	4659      	mov	r1, fp
 80171a2:	2300      	movs	r3, #0
 80171a4:	f018 0f01 	tst.w	r8, #1
 80171a8:	d004      	beq.n	80171b4 <_strtod_l+0x5dc>
 80171aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80171ae:	f7e9 fa23 	bl	80005f8 <__aeabi_dmul>
 80171b2:	2301      	movs	r3, #1
 80171b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80171b8:	f109 0908 	add.w	r9, r9, #8
 80171bc:	d1f2      	bne.n	80171a4 <_strtod_l+0x5cc>
 80171be:	b10b      	cbz	r3, 80171c4 <_strtod_l+0x5ec>
 80171c0:	4682      	mov	sl, r0
 80171c2:	468b      	mov	fp, r1
 80171c4:	9b04      	ldr	r3, [sp, #16]
 80171c6:	b1bb      	cbz	r3, 80171f8 <_strtod_l+0x620>
 80171c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80171cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	4659      	mov	r1, fp
 80171d4:	dd10      	ble.n	80171f8 <_strtod_l+0x620>
 80171d6:	2b1f      	cmp	r3, #31
 80171d8:	f340 8128 	ble.w	801742c <_strtod_l+0x854>
 80171dc:	2b34      	cmp	r3, #52	; 0x34
 80171de:	bfde      	ittt	le
 80171e0:	3b20      	suble	r3, #32
 80171e2:	f04f 32ff 	movle.w	r2, #4294967295
 80171e6:	fa02 f303 	lslle.w	r3, r2, r3
 80171ea:	f04f 0a00 	mov.w	sl, #0
 80171ee:	bfcc      	ite	gt
 80171f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80171f4:	ea03 0b01 	andle.w	fp, r3, r1
 80171f8:	2200      	movs	r2, #0
 80171fa:	2300      	movs	r3, #0
 80171fc:	4650      	mov	r0, sl
 80171fe:	4659      	mov	r1, fp
 8017200:	f7e9 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8017204:	2800      	cmp	r0, #0
 8017206:	d1a4      	bne.n	8017152 <_strtod_l+0x57a>
 8017208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801720a:	9300      	str	r3, [sp, #0]
 801720c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801720e:	462b      	mov	r3, r5
 8017210:	463a      	mov	r2, r7
 8017212:	4620      	mov	r0, r4
 8017214:	f001 fe2e 	bl	8018e74 <__s2b>
 8017218:	9009      	str	r0, [sp, #36]	; 0x24
 801721a:	2800      	cmp	r0, #0
 801721c:	f43f af24 	beq.w	8017068 <_strtod_l+0x490>
 8017220:	9b07      	ldr	r3, [sp, #28]
 8017222:	1b9e      	subs	r6, r3, r6
 8017224:	9b08      	ldr	r3, [sp, #32]
 8017226:	2b00      	cmp	r3, #0
 8017228:	bfb4      	ite	lt
 801722a:	4633      	movlt	r3, r6
 801722c:	2300      	movge	r3, #0
 801722e:	9310      	str	r3, [sp, #64]	; 0x40
 8017230:	9b08      	ldr	r3, [sp, #32]
 8017232:	2500      	movs	r5, #0
 8017234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017238:	9318      	str	r3, [sp, #96]	; 0x60
 801723a:	462e      	mov	r6, r5
 801723c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801723e:	4620      	mov	r0, r4
 8017240:	6859      	ldr	r1, [r3, #4]
 8017242:	f001 fd6b 	bl	8018d1c <_Balloc>
 8017246:	9007      	str	r0, [sp, #28]
 8017248:	2800      	cmp	r0, #0
 801724a:	f43f af11 	beq.w	8017070 <_strtod_l+0x498>
 801724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017250:	691a      	ldr	r2, [r3, #16]
 8017252:	3202      	adds	r2, #2
 8017254:	f103 010c 	add.w	r1, r3, #12
 8017258:	0092      	lsls	r2, r2, #2
 801725a:	300c      	adds	r0, #12
 801725c:	f7fe fce0 	bl	8015c20 <memcpy>
 8017260:	ec4b ab10 	vmov	d0, sl, fp
 8017264:	aa20      	add	r2, sp, #128	; 0x80
 8017266:	a91f      	add	r1, sp, #124	; 0x7c
 8017268:	4620      	mov	r0, r4
 801726a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801726e:	f002 f93d 	bl	80194ec <__d2b>
 8017272:	901e      	str	r0, [sp, #120]	; 0x78
 8017274:	2800      	cmp	r0, #0
 8017276:	f43f aefb 	beq.w	8017070 <_strtod_l+0x498>
 801727a:	2101      	movs	r1, #1
 801727c:	4620      	mov	r0, r4
 801727e:	f001 fe93 	bl	8018fa8 <__i2b>
 8017282:	4606      	mov	r6, r0
 8017284:	2800      	cmp	r0, #0
 8017286:	f43f aef3 	beq.w	8017070 <_strtod_l+0x498>
 801728a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801728c:	9904      	ldr	r1, [sp, #16]
 801728e:	2b00      	cmp	r3, #0
 8017290:	bfab      	itete	ge
 8017292:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017294:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017296:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017298:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801729c:	bfac      	ite	ge
 801729e:	eb03 0902 	addge.w	r9, r3, r2
 80172a2:	1ad7      	sublt	r7, r2, r3
 80172a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80172a6:	eba3 0801 	sub.w	r8, r3, r1
 80172aa:	4490      	add	r8, r2
 80172ac:	4ba3      	ldr	r3, [pc, #652]	; (801753c <_strtod_l+0x964>)
 80172ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80172b2:	4598      	cmp	r8, r3
 80172b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80172b8:	f280 80cc 	bge.w	8017454 <_strtod_l+0x87c>
 80172bc:	eba3 0308 	sub.w	r3, r3, r8
 80172c0:	2b1f      	cmp	r3, #31
 80172c2:	eba2 0203 	sub.w	r2, r2, r3
 80172c6:	f04f 0101 	mov.w	r1, #1
 80172ca:	f300 80b6 	bgt.w	801743a <_strtod_l+0x862>
 80172ce:	fa01 f303 	lsl.w	r3, r1, r3
 80172d2:	9311      	str	r3, [sp, #68]	; 0x44
 80172d4:	2300      	movs	r3, #0
 80172d6:	930c      	str	r3, [sp, #48]	; 0x30
 80172d8:	eb09 0802 	add.w	r8, r9, r2
 80172dc:	9b04      	ldr	r3, [sp, #16]
 80172de:	45c1      	cmp	r9, r8
 80172e0:	4417      	add	r7, r2
 80172e2:	441f      	add	r7, r3
 80172e4:	464b      	mov	r3, r9
 80172e6:	bfa8      	it	ge
 80172e8:	4643      	movge	r3, r8
 80172ea:	42bb      	cmp	r3, r7
 80172ec:	bfa8      	it	ge
 80172ee:	463b      	movge	r3, r7
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	bfc2      	ittt	gt
 80172f4:	eba8 0803 	subgt.w	r8, r8, r3
 80172f8:	1aff      	subgt	r7, r7, r3
 80172fa:	eba9 0903 	subgt.w	r9, r9, r3
 80172fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017300:	2b00      	cmp	r3, #0
 8017302:	dd17      	ble.n	8017334 <_strtod_l+0x75c>
 8017304:	4631      	mov	r1, r6
 8017306:	461a      	mov	r2, r3
 8017308:	4620      	mov	r0, r4
 801730a:	f001 ff09 	bl	8019120 <__pow5mult>
 801730e:	4606      	mov	r6, r0
 8017310:	2800      	cmp	r0, #0
 8017312:	f43f aead 	beq.w	8017070 <_strtod_l+0x498>
 8017316:	4601      	mov	r1, r0
 8017318:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801731a:	4620      	mov	r0, r4
 801731c:	f001 fe5a 	bl	8018fd4 <__multiply>
 8017320:	900f      	str	r0, [sp, #60]	; 0x3c
 8017322:	2800      	cmp	r0, #0
 8017324:	f43f aea4 	beq.w	8017070 <_strtod_l+0x498>
 8017328:	991e      	ldr	r1, [sp, #120]	; 0x78
 801732a:	4620      	mov	r0, r4
 801732c:	f001 fd36 	bl	8018d9c <_Bfree>
 8017330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017332:	931e      	str	r3, [sp, #120]	; 0x78
 8017334:	f1b8 0f00 	cmp.w	r8, #0
 8017338:	f300 8091 	bgt.w	801745e <_strtod_l+0x886>
 801733c:	9b08      	ldr	r3, [sp, #32]
 801733e:	2b00      	cmp	r3, #0
 8017340:	dd08      	ble.n	8017354 <_strtod_l+0x77c>
 8017342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017344:	9907      	ldr	r1, [sp, #28]
 8017346:	4620      	mov	r0, r4
 8017348:	f001 feea 	bl	8019120 <__pow5mult>
 801734c:	9007      	str	r0, [sp, #28]
 801734e:	2800      	cmp	r0, #0
 8017350:	f43f ae8e 	beq.w	8017070 <_strtod_l+0x498>
 8017354:	2f00      	cmp	r7, #0
 8017356:	dd08      	ble.n	801736a <_strtod_l+0x792>
 8017358:	9907      	ldr	r1, [sp, #28]
 801735a:	463a      	mov	r2, r7
 801735c:	4620      	mov	r0, r4
 801735e:	f001 ff39 	bl	80191d4 <__lshift>
 8017362:	9007      	str	r0, [sp, #28]
 8017364:	2800      	cmp	r0, #0
 8017366:	f43f ae83 	beq.w	8017070 <_strtod_l+0x498>
 801736a:	f1b9 0f00 	cmp.w	r9, #0
 801736e:	dd08      	ble.n	8017382 <_strtod_l+0x7aa>
 8017370:	4631      	mov	r1, r6
 8017372:	464a      	mov	r2, r9
 8017374:	4620      	mov	r0, r4
 8017376:	f001 ff2d 	bl	80191d4 <__lshift>
 801737a:	4606      	mov	r6, r0
 801737c:	2800      	cmp	r0, #0
 801737e:	f43f ae77 	beq.w	8017070 <_strtod_l+0x498>
 8017382:	9a07      	ldr	r2, [sp, #28]
 8017384:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017386:	4620      	mov	r0, r4
 8017388:	f001 ffac 	bl	80192e4 <__mdiff>
 801738c:	4605      	mov	r5, r0
 801738e:	2800      	cmp	r0, #0
 8017390:	f43f ae6e 	beq.w	8017070 <_strtod_l+0x498>
 8017394:	68c3      	ldr	r3, [r0, #12]
 8017396:	930f      	str	r3, [sp, #60]	; 0x3c
 8017398:	2300      	movs	r3, #0
 801739a:	60c3      	str	r3, [r0, #12]
 801739c:	4631      	mov	r1, r6
 801739e:	f001 ff85 	bl	80192ac <__mcmp>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	da65      	bge.n	8017472 <_strtod_l+0x89a>
 80173a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173a8:	ea53 030a 	orrs.w	r3, r3, sl
 80173ac:	f040 8087 	bne.w	80174be <_strtod_l+0x8e6>
 80173b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	f040 8082 	bne.w	80174be <_strtod_l+0x8e6>
 80173ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80173be:	0d1b      	lsrs	r3, r3, #20
 80173c0:	051b      	lsls	r3, r3, #20
 80173c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80173c6:	d97a      	bls.n	80174be <_strtod_l+0x8e6>
 80173c8:	696b      	ldr	r3, [r5, #20]
 80173ca:	b913      	cbnz	r3, 80173d2 <_strtod_l+0x7fa>
 80173cc:	692b      	ldr	r3, [r5, #16]
 80173ce:	2b01      	cmp	r3, #1
 80173d0:	dd75      	ble.n	80174be <_strtod_l+0x8e6>
 80173d2:	4629      	mov	r1, r5
 80173d4:	2201      	movs	r2, #1
 80173d6:	4620      	mov	r0, r4
 80173d8:	f001 fefc 	bl	80191d4 <__lshift>
 80173dc:	4631      	mov	r1, r6
 80173de:	4605      	mov	r5, r0
 80173e0:	f001 ff64 	bl	80192ac <__mcmp>
 80173e4:	2800      	cmp	r0, #0
 80173e6:	dd6a      	ble.n	80174be <_strtod_l+0x8e6>
 80173e8:	9904      	ldr	r1, [sp, #16]
 80173ea:	4a55      	ldr	r2, [pc, #340]	; (8017540 <_strtod_l+0x968>)
 80173ec:	465b      	mov	r3, fp
 80173ee:	2900      	cmp	r1, #0
 80173f0:	f000 8085 	beq.w	80174fe <_strtod_l+0x926>
 80173f4:	ea02 010b 	and.w	r1, r2, fp
 80173f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80173fc:	dc7f      	bgt.n	80174fe <_strtod_l+0x926>
 80173fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017402:	f77f aeaa 	ble.w	801715a <_strtod_l+0x582>
 8017406:	4a4f      	ldr	r2, [pc, #316]	; (8017544 <_strtod_l+0x96c>)
 8017408:	2300      	movs	r3, #0
 801740a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801740e:	4650      	mov	r0, sl
 8017410:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017414:	4659      	mov	r1, fp
 8017416:	f7e9 f8ef 	bl	80005f8 <__aeabi_dmul>
 801741a:	460b      	mov	r3, r1
 801741c:	4303      	orrs	r3, r0
 801741e:	bf08      	it	eq
 8017420:	2322      	moveq	r3, #34	; 0x22
 8017422:	4682      	mov	sl, r0
 8017424:	468b      	mov	fp, r1
 8017426:	bf08      	it	eq
 8017428:	6023      	streq	r3, [r4, #0]
 801742a:	e62b      	b.n	8017084 <_strtod_l+0x4ac>
 801742c:	f04f 32ff 	mov.w	r2, #4294967295
 8017430:	fa02 f303 	lsl.w	r3, r2, r3
 8017434:	ea03 0a0a 	and.w	sl, r3, sl
 8017438:	e6de      	b.n	80171f8 <_strtod_l+0x620>
 801743a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801743e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017442:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017446:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801744a:	fa01 f308 	lsl.w	r3, r1, r8
 801744e:	930c      	str	r3, [sp, #48]	; 0x30
 8017450:	9111      	str	r1, [sp, #68]	; 0x44
 8017452:	e741      	b.n	80172d8 <_strtod_l+0x700>
 8017454:	2300      	movs	r3, #0
 8017456:	930c      	str	r3, [sp, #48]	; 0x30
 8017458:	2301      	movs	r3, #1
 801745a:	9311      	str	r3, [sp, #68]	; 0x44
 801745c:	e73c      	b.n	80172d8 <_strtod_l+0x700>
 801745e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017460:	4642      	mov	r2, r8
 8017462:	4620      	mov	r0, r4
 8017464:	f001 feb6 	bl	80191d4 <__lshift>
 8017468:	901e      	str	r0, [sp, #120]	; 0x78
 801746a:	2800      	cmp	r0, #0
 801746c:	f47f af66 	bne.w	801733c <_strtod_l+0x764>
 8017470:	e5fe      	b.n	8017070 <_strtod_l+0x498>
 8017472:	465f      	mov	r7, fp
 8017474:	d16e      	bne.n	8017554 <_strtod_l+0x97c>
 8017476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017478:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801747c:	b342      	cbz	r2, 80174d0 <_strtod_l+0x8f8>
 801747e:	4a32      	ldr	r2, [pc, #200]	; (8017548 <_strtod_l+0x970>)
 8017480:	4293      	cmp	r3, r2
 8017482:	d128      	bne.n	80174d6 <_strtod_l+0x8fe>
 8017484:	9b04      	ldr	r3, [sp, #16]
 8017486:	4650      	mov	r0, sl
 8017488:	b1eb      	cbz	r3, 80174c6 <_strtod_l+0x8ee>
 801748a:	4a2d      	ldr	r2, [pc, #180]	; (8017540 <_strtod_l+0x968>)
 801748c:	403a      	ands	r2, r7
 801748e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017492:	f04f 31ff 	mov.w	r1, #4294967295
 8017496:	d819      	bhi.n	80174cc <_strtod_l+0x8f4>
 8017498:	0d12      	lsrs	r2, r2, #20
 801749a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801749e:	fa01 f303 	lsl.w	r3, r1, r3
 80174a2:	4298      	cmp	r0, r3
 80174a4:	d117      	bne.n	80174d6 <_strtod_l+0x8fe>
 80174a6:	4b29      	ldr	r3, [pc, #164]	; (801754c <_strtod_l+0x974>)
 80174a8:	429f      	cmp	r7, r3
 80174aa:	d102      	bne.n	80174b2 <_strtod_l+0x8da>
 80174ac:	3001      	adds	r0, #1
 80174ae:	f43f addf 	beq.w	8017070 <_strtod_l+0x498>
 80174b2:	4b23      	ldr	r3, [pc, #140]	; (8017540 <_strtod_l+0x968>)
 80174b4:	403b      	ands	r3, r7
 80174b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80174ba:	f04f 0a00 	mov.w	sl, #0
 80174be:	9b04      	ldr	r3, [sp, #16]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d1a0      	bne.n	8017406 <_strtod_l+0x82e>
 80174c4:	e5de      	b.n	8017084 <_strtod_l+0x4ac>
 80174c6:	f04f 33ff 	mov.w	r3, #4294967295
 80174ca:	e7ea      	b.n	80174a2 <_strtod_l+0x8ca>
 80174cc:	460b      	mov	r3, r1
 80174ce:	e7e8      	b.n	80174a2 <_strtod_l+0x8ca>
 80174d0:	ea53 030a 	orrs.w	r3, r3, sl
 80174d4:	d088      	beq.n	80173e8 <_strtod_l+0x810>
 80174d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174d8:	b1db      	cbz	r3, 8017512 <_strtod_l+0x93a>
 80174da:	423b      	tst	r3, r7
 80174dc:	d0ef      	beq.n	80174be <_strtod_l+0x8e6>
 80174de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174e0:	9a04      	ldr	r2, [sp, #16]
 80174e2:	4650      	mov	r0, sl
 80174e4:	4659      	mov	r1, fp
 80174e6:	b1c3      	cbz	r3, 801751a <_strtod_l+0x942>
 80174e8:	f7ff fb58 	bl	8016b9c <sulp>
 80174ec:	4602      	mov	r2, r0
 80174ee:	460b      	mov	r3, r1
 80174f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80174f4:	f7e8 feca 	bl	800028c <__adddf3>
 80174f8:	4682      	mov	sl, r0
 80174fa:	468b      	mov	fp, r1
 80174fc:	e7df      	b.n	80174be <_strtod_l+0x8e6>
 80174fe:	4013      	ands	r3, r2
 8017500:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017504:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017508:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801750c:	f04f 3aff 	mov.w	sl, #4294967295
 8017510:	e7d5      	b.n	80174be <_strtod_l+0x8e6>
 8017512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017514:	ea13 0f0a 	tst.w	r3, sl
 8017518:	e7e0      	b.n	80174dc <_strtod_l+0x904>
 801751a:	f7ff fb3f 	bl	8016b9c <sulp>
 801751e:	4602      	mov	r2, r0
 8017520:	460b      	mov	r3, r1
 8017522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017526:	f7e8 feaf 	bl	8000288 <__aeabi_dsub>
 801752a:	2200      	movs	r2, #0
 801752c:	2300      	movs	r3, #0
 801752e:	4682      	mov	sl, r0
 8017530:	468b      	mov	fp, r1
 8017532:	f7e9 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8017536:	2800      	cmp	r0, #0
 8017538:	d0c1      	beq.n	80174be <_strtod_l+0x8e6>
 801753a:	e60e      	b.n	801715a <_strtod_l+0x582>
 801753c:	fffffc02 	.word	0xfffffc02
 8017540:	7ff00000 	.word	0x7ff00000
 8017544:	39500000 	.word	0x39500000
 8017548:	000fffff 	.word	0x000fffff
 801754c:	7fefffff 	.word	0x7fefffff
 8017550:	0801c220 	.word	0x0801c220
 8017554:	4631      	mov	r1, r6
 8017556:	4628      	mov	r0, r5
 8017558:	f002 f824 	bl	80195a4 <__ratio>
 801755c:	ec59 8b10 	vmov	r8, r9, d0
 8017560:	ee10 0a10 	vmov	r0, s0
 8017564:	2200      	movs	r2, #0
 8017566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801756a:	4649      	mov	r1, r9
 801756c:	f7e9 fac0 	bl	8000af0 <__aeabi_dcmple>
 8017570:	2800      	cmp	r0, #0
 8017572:	d07c      	beq.n	801766e <_strtod_l+0xa96>
 8017574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017576:	2b00      	cmp	r3, #0
 8017578:	d04c      	beq.n	8017614 <_strtod_l+0xa3c>
 801757a:	4b95      	ldr	r3, [pc, #596]	; (80177d0 <_strtod_l+0xbf8>)
 801757c:	2200      	movs	r2, #0
 801757e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017582:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80177d0 <_strtod_l+0xbf8>
 8017586:	f04f 0800 	mov.w	r8, #0
 801758a:	4b92      	ldr	r3, [pc, #584]	; (80177d4 <_strtod_l+0xbfc>)
 801758c:	403b      	ands	r3, r7
 801758e:	9311      	str	r3, [sp, #68]	; 0x44
 8017590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017592:	4b91      	ldr	r3, [pc, #580]	; (80177d8 <_strtod_l+0xc00>)
 8017594:	429a      	cmp	r2, r3
 8017596:	f040 80b2 	bne.w	80176fe <_strtod_l+0xb26>
 801759a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801759e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80175a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80175a6:	ec4b ab10 	vmov	d0, sl, fp
 80175aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80175ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80175b2:	f001 ff1f 	bl	80193f4 <__ulp>
 80175b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80175ba:	ec53 2b10 	vmov	r2, r3, d0
 80175be:	f7e9 f81b 	bl	80005f8 <__aeabi_dmul>
 80175c2:	4652      	mov	r2, sl
 80175c4:	465b      	mov	r3, fp
 80175c6:	f7e8 fe61 	bl	800028c <__adddf3>
 80175ca:	460b      	mov	r3, r1
 80175cc:	4981      	ldr	r1, [pc, #516]	; (80177d4 <_strtod_l+0xbfc>)
 80175ce:	4a83      	ldr	r2, [pc, #524]	; (80177dc <_strtod_l+0xc04>)
 80175d0:	4019      	ands	r1, r3
 80175d2:	4291      	cmp	r1, r2
 80175d4:	4682      	mov	sl, r0
 80175d6:	d95e      	bls.n	8017696 <_strtod_l+0xabe>
 80175d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80175de:	4293      	cmp	r3, r2
 80175e0:	d103      	bne.n	80175ea <_strtod_l+0xa12>
 80175e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175e4:	3301      	adds	r3, #1
 80175e6:	f43f ad43 	beq.w	8017070 <_strtod_l+0x498>
 80175ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80177e8 <_strtod_l+0xc10>
 80175ee:	f04f 3aff 	mov.w	sl, #4294967295
 80175f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80175f4:	4620      	mov	r0, r4
 80175f6:	f001 fbd1 	bl	8018d9c <_Bfree>
 80175fa:	9907      	ldr	r1, [sp, #28]
 80175fc:	4620      	mov	r0, r4
 80175fe:	f001 fbcd 	bl	8018d9c <_Bfree>
 8017602:	4631      	mov	r1, r6
 8017604:	4620      	mov	r0, r4
 8017606:	f001 fbc9 	bl	8018d9c <_Bfree>
 801760a:	4629      	mov	r1, r5
 801760c:	4620      	mov	r0, r4
 801760e:	f001 fbc5 	bl	8018d9c <_Bfree>
 8017612:	e613      	b.n	801723c <_strtod_l+0x664>
 8017614:	f1ba 0f00 	cmp.w	sl, #0
 8017618:	d11b      	bne.n	8017652 <_strtod_l+0xa7a>
 801761a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801761e:	b9f3      	cbnz	r3, 801765e <_strtod_l+0xa86>
 8017620:	4b6b      	ldr	r3, [pc, #428]	; (80177d0 <_strtod_l+0xbf8>)
 8017622:	2200      	movs	r2, #0
 8017624:	4640      	mov	r0, r8
 8017626:	4649      	mov	r1, r9
 8017628:	f7e9 fa58 	bl	8000adc <__aeabi_dcmplt>
 801762c:	b9d0      	cbnz	r0, 8017664 <_strtod_l+0xa8c>
 801762e:	4640      	mov	r0, r8
 8017630:	4649      	mov	r1, r9
 8017632:	4b6b      	ldr	r3, [pc, #428]	; (80177e0 <_strtod_l+0xc08>)
 8017634:	2200      	movs	r2, #0
 8017636:	f7e8 ffdf 	bl	80005f8 <__aeabi_dmul>
 801763a:	4680      	mov	r8, r0
 801763c:	4689      	mov	r9, r1
 801763e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017642:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017646:	931b      	str	r3, [sp, #108]	; 0x6c
 8017648:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801764c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017650:	e79b      	b.n	801758a <_strtod_l+0x9b2>
 8017652:	f1ba 0f01 	cmp.w	sl, #1
 8017656:	d102      	bne.n	801765e <_strtod_l+0xa86>
 8017658:	2f00      	cmp	r7, #0
 801765a:	f43f ad7e 	beq.w	801715a <_strtod_l+0x582>
 801765e:	4b61      	ldr	r3, [pc, #388]	; (80177e4 <_strtod_l+0xc0c>)
 8017660:	2200      	movs	r2, #0
 8017662:	e78c      	b.n	801757e <_strtod_l+0x9a6>
 8017664:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80177e0 <_strtod_l+0xc08>
 8017668:	f04f 0800 	mov.w	r8, #0
 801766c:	e7e7      	b.n	801763e <_strtod_l+0xa66>
 801766e:	4b5c      	ldr	r3, [pc, #368]	; (80177e0 <_strtod_l+0xc08>)
 8017670:	4640      	mov	r0, r8
 8017672:	4649      	mov	r1, r9
 8017674:	2200      	movs	r2, #0
 8017676:	f7e8 ffbf 	bl	80005f8 <__aeabi_dmul>
 801767a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801767c:	4680      	mov	r8, r0
 801767e:	4689      	mov	r9, r1
 8017680:	b933      	cbnz	r3, 8017690 <_strtod_l+0xab8>
 8017682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017686:	9012      	str	r0, [sp, #72]	; 0x48
 8017688:	9313      	str	r3, [sp, #76]	; 0x4c
 801768a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801768e:	e7dd      	b.n	801764c <_strtod_l+0xa74>
 8017690:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017694:	e7f9      	b.n	801768a <_strtod_l+0xab2>
 8017696:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801769a:	9b04      	ldr	r3, [sp, #16]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d1a8      	bne.n	80175f2 <_strtod_l+0xa1a>
 80176a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80176a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80176a6:	0d1b      	lsrs	r3, r3, #20
 80176a8:	051b      	lsls	r3, r3, #20
 80176aa:	429a      	cmp	r2, r3
 80176ac:	d1a1      	bne.n	80175f2 <_strtod_l+0xa1a>
 80176ae:	4640      	mov	r0, r8
 80176b0:	4649      	mov	r1, r9
 80176b2:	f7e9 fb01 	bl	8000cb8 <__aeabi_d2lz>
 80176b6:	f7e8 ff71 	bl	800059c <__aeabi_l2d>
 80176ba:	4602      	mov	r2, r0
 80176bc:	460b      	mov	r3, r1
 80176be:	4640      	mov	r0, r8
 80176c0:	4649      	mov	r1, r9
 80176c2:	f7e8 fde1 	bl	8000288 <__aeabi_dsub>
 80176c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80176c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176cc:	ea43 030a 	orr.w	r3, r3, sl
 80176d0:	4313      	orrs	r3, r2
 80176d2:	4680      	mov	r8, r0
 80176d4:	4689      	mov	r9, r1
 80176d6:	d053      	beq.n	8017780 <_strtod_l+0xba8>
 80176d8:	a335      	add	r3, pc, #212	; (adr r3, 80177b0 <_strtod_l+0xbd8>)
 80176da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176de:	f7e9 f9fd 	bl	8000adc <__aeabi_dcmplt>
 80176e2:	2800      	cmp	r0, #0
 80176e4:	f47f acce 	bne.w	8017084 <_strtod_l+0x4ac>
 80176e8:	a333      	add	r3, pc, #204	; (adr r3, 80177b8 <_strtod_l+0xbe0>)
 80176ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176ee:	4640      	mov	r0, r8
 80176f0:	4649      	mov	r1, r9
 80176f2:	f7e9 fa11 	bl	8000b18 <__aeabi_dcmpgt>
 80176f6:	2800      	cmp	r0, #0
 80176f8:	f43f af7b 	beq.w	80175f2 <_strtod_l+0xa1a>
 80176fc:	e4c2      	b.n	8017084 <_strtod_l+0x4ac>
 80176fe:	9b04      	ldr	r3, [sp, #16]
 8017700:	b333      	cbz	r3, 8017750 <_strtod_l+0xb78>
 8017702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017704:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017708:	d822      	bhi.n	8017750 <_strtod_l+0xb78>
 801770a:	a32d      	add	r3, pc, #180	; (adr r3, 80177c0 <_strtod_l+0xbe8>)
 801770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017710:	4640      	mov	r0, r8
 8017712:	4649      	mov	r1, r9
 8017714:	f7e9 f9ec 	bl	8000af0 <__aeabi_dcmple>
 8017718:	b1a0      	cbz	r0, 8017744 <_strtod_l+0xb6c>
 801771a:	4649      	mov	r1, r9
 801771c:	4640      	mov	r0, r8
 801771e:	f7e9 fa43 	bl	8000ba8 <__aeabi_d2uiz>
 8017722:	2801      	cmp	r0, #1
 8017724:	bf38      	it	cc
 8017726:	2001      	movcc	r0, #1
 8017728:	f7e8 feec 	bl	8000504 <__aeabi_ui2d>
 801772c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801772e:	4680      	mov	r8, r0
 8017730:	4689      	mov	r9, r1
 8017732:	bb13      	cbnz	r3, 801777a <_strtod_l+0xba2>
 8017734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017738:	9014      	str	r0, [sp, #80]	; 0x50
 801773a:	9315      	str	r3, [sp, #84]	; 0x54
 801773c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017740:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017746:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017748:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801774c:	1a9b      	subs	r3, r3, r2
 801774e:	930d      	str	r3, [sp, #52]	; 0x34
 8017750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017754:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801775c:	f001 fe4a 	bl	80193f4 <__ulp>
 8017760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017764:	ec53 2b10 	vmov	r2, r3, d0
 8017768:	f7e8 ff46 	bl	80005f8 <__aeabi_dmul>
 801776c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017770:	f7e8 fd8c 	bl	800028c <__adddf3>
 8017774:	4682      	mov	sl, r0
 8017776:	468b      	mov	fp, r1
 8017778:	e78f      	b.n	801769a <_strtod_l+0xac2>
 801777a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801777e:	e7dd      	b.n	801773c <_strtod_l+0xb64>
 8017780:	a311      	add	r3, pc, #68	; (adr r3, 80177c8 <_strtod_l+0xbf0>)
 8017782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017786:	f7e9 f9a9 	bl	8000adc <__aeabi_dcmplt>
 801778a:	e7b4      	b.n	80176f6 <_strtod_l+0xb1e>
 801778c:	2300      	movs	r3, #0
 801778e:	930e      	str	r3, [sp, #56]	; 0x38
 8017790:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017794:	6013      	str	r3, [r2, #0]
 8017796:	f7ff ba65 	b.w	8016c64 <_strtod_l+0x8c>
 801779a:	2b65      	cmp	r3, #101	; 0x65
 801779c:	f43f ab5d 	beq.w	8016e5a <_strtod_l+0x282>
 80177a0:	2b45      	cmp	r3, #69	; 0x45
 80177a2:	f43f ab5a 	beq.w	8016e5a <_strtod_l+0x282>
 80177a6:	2201      	movs	r2, #1
 80177a8:	f7ff bb92 	b.w	8016ed0 <_strtod_l+0x2f8>
 80177ac:	f3af 8000 	nop.w
 80177b0:	94a03595 	.word	0x94a03595
 80177b4:	3fdfffff 	.word	0x3fdfffff
 80177b8:	35afe535 	.word	0x35afe535
 80177bc:	3fe00000 	.word	0x3fe00000
 80177c0:	ffc00000 	.word	0xffc00000
 80177c4:	41dfffff 	.word	0x41dfffff
 80177c8:	94a03595 	.word	0x94a03595
 80177cc:	3fcfffff 	.word	0x3fcfffff
 80177d0:	3ff00000 	.word	0x3ff00000
 80177d4:	7ff00000 	.word	0x7ff00000
 80177d8:	7fe00000 	.word	0x7fe00000
 80177dc:	7c9fffff 	.word	0x7c9fffff
 80177e0:	3fe00000 	.word	0x3fe00000
 80177e4:	bff00000 	.word	0xbff00000
 80177e8:	7fefffff 	.word	0x7fefffff

080177ec <_strtod_r>:
 80177ec:	4b01      	ldr	r3, [pc, #4]	; (80177f4 <_strtod_r+0x8>)
 80177ee:	f7ff b9f3 	b.w	8016bd8 <_strtod_l>
 80177f2:	bf00      	nop
 80177f4:	20002278 	.word	0x20002278

080177f8 <_strtol_l.isra.0>:
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177fe:	d001      	beq.n	8017804 <_strtol_l.isra.0+0xc>
 8017800:	2b24      	cmp	r3, #36	; 0x24
 8017802:	d906      	bls.n	8017812 <_strtol_l.isra.0+0x1a>
 8017804:	f7fe f9d2 	bl	8015bac <__errno>
 8017808:	2316      	movs	r3, #22
 801780a:	6003      	str	r3, [r0, #0]
 801780c:	2000      	movs	r0, #0
 801780e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017812:	4f3a      	ldr	r7, [pc, #232]	; (80178fc <_strtol_l.isra.0+0x104>)
 8017814:	468e      	mov	lr, r1
 8017816:	4676      	mov	r6, lr
 8017818:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801781c:	5de5      	ldrb	r5, [r4, r7]
 801781e:	f015 0508 	ands.w	r5, r5, #8
 8017822:	d1f8      	bne.n	8017816 <_strtol_l.isra.0+0x1e>
 8017824:	2c2d      	cmp	r4, #45	; 0x2d
 8017826:	d134      	bne.n	8017892 <_strtol_l.isra.0+0x9a>
 8017828:	f89e 4000 	ldrb.w	r4, [lr]
 801782c:	f04f 0801 	mov.w	r8, #1
 8017830:	f106 0e02 	add.w	lr, r6, #2
 8017834:	2b00      	cmp	r3, #0
 8017836:	d05c      	beq.n	80178f2 <_strtol_l.isra.0+0xfa>
 8017838:	2b10      	cmp	r3, #16
 801783a:	d10c      	bne.n	8017856 <_strtol_l.isra.0+0x5e>
 801783c:	2c30      	cmp	r4, #48	; 0x30
 801783e:	d10a      	bne.n	8017856 <_strtol_l.isra.0+0x5e>
 8017840:	f89e 4000 	ldrb.w	r4, [lr]
 8017844:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017848:	2c58      	cmp	r4, #88	; 0x58
 801784a:	d14d      	bne.n	80178e8 <_strtol_l.isra.0+0xf0>
 801784c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017850:	2310      	movs	r3, #16
 8017852:	f10e 0e02 	add.w	lr, lr, #2
 8017856:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801785a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801785e:	2600      	movs	r6, #0
 8017860:	fbbc f9f3 	udiv	r9, ip, r3
 8017864:	4635      	mov	r5, r6
 8017866:	fb03 ca19 	mls	sl, r3, r9, ip
 801786a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801786e:	2f09      	cmp	r7, #9
 8017870:	d818      	bhi.n	80178a4 <_strtol_l.isra.0+0xac>
 8017872:	463c      	mov	r4, r7
 8017874:	42a3      	cmp	r3, r4
 8017876:	dd24      	ble.n	80178c2 <_strtol_l.isra.0+0xca>
 8017878:	2e00      	cmp	r6, #0
 801787a:	db1f      	blt.n	80178bc <_strtol_l.isra.0+0xc4>
 801787c:	45a9      	cmp	r9, r5
 801787e:	d31d      	bcc.n	80178bc <_strtol_l.isra.0+0xc4>
 8017880:	d101      	bne.n	8017886 <_strtol_l.isra.0+0x8e>
 8017882:	45a2      	cmp	sl, r4
 8017884:	db1a      	blt.n	80178bc <_strtol_l.isra.0+0xc4>
 8017886:	fb05 4503 	mla	r5, r5, r3, r4
 801788a:	2601      	movs	r6, #1
 801788c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017890:	e7eb      	b.n	801786a <_strtol_l.isra.0+0x72>
 8017892:	2c2b      	cmp	r4, #43	; 0x2b
 8017894:	bf08      	it	eq
 8017896:	f89e 4000 	ldrbeq.w	r4, [lr]
 801789a:	46a8      	mov	r8, r5
 801789c:	bf08      	it	eq
 801789e:	f106 0e02 	addeq.w	lr, r6, #2
 80178a2:	e7c7      	b.n	8017834 <_strtol_l.isra.0+0x3c>
 80178a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80178a8:	2f19      	cmp	r7, #25
 80178aa:	d801      	bhi.n	80178b0 <_strtol_l.isra.0+0xb8>
 80178ac:	3c37      	subs	r4, #55	; 0x37
 80178ae:	e7e1      	b.n	8017874 <_strtol_l.isra.0+0x7c>
 80178b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80178b4:	2f19      	cmp	r7, #25
 80178b6:	d804      	bhi.n	80178c2 <_strtol_l.isra.0+0xca>
 80178b8:	3c57      	subs	r4, #87	; 0x57
 80178ba:	e7db      	b.n	8017874 <_strtol_l.isra.0+0x7c>
 80178bc:	f04f 36ff 	mov.w	r6, #4294967295
 80178c0:	e7e4      	b.n	801788c <_strtol_l.isra.0+0x94>
 80178c2:	2e00      	cmp	r6, #0
 80178c4:	da05      	bge.n	80178d2 <_strtol_l.isra.0+0xda>
 80178c6:	2322      	movs	r3, #34	; 0x22
 80178c8:	6003      	str	r3, [r0, #0]
 80178ca:	4665      	mov	r5, ip
 80178cc:	b942      	cbnz	r2, 80178e0 <_strtol_l.isra.0+0xe8>
 80178ce:	4628      	mov	r0, r5
 80178d0:	e79d      	b.n	801780e <_strtol_l.isra.0+0x16>
 80178d2:	f1b8 0f00 	cmp.w	r8, #0
 80178d6:	d000      	beq.n	80178da <_strtol_l.isra.0+0xe2>
 80178d8:	426d      	negs	r5, r5
 80178da:	2a00      	cmp	r2, #0
 80178dc:	d0f7      	beq.n	80178ce <_strtol_l.isra.0+0xd6>
 80178de:	b10e      	cbz	r6, 80178e4 <_strtol_l.isra.0+0xec>
 80178e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80178e4:	6011      	str	r1, [r2, #0]
 80178e6:	e7f2      	b.n	80178ce <_strtol_l.isra.0+0xd6>
 80178e8:	2430      	movs	r4, #48	; 0x30
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d1b3      	bne.n	8017856 <_strtol_l.isra.0+0x5e>
 80178ee:	2308      	movs	r3, #8
 80178f0:	e7b1      	b.n	8017856 <_strtol_l.isra.0+0x5e>
 80178f2:	2c30      	cmp	r4, #48	; 0x30
 80178f4:	d0a4      	beq.n	8017840 <_strtol_l.isra.0+0x48>
 80178f6:	230a      	movs	r3, #10
 80178f8:	e7ad      	b.n	8017856 <_strtol_l.isra.0+0x5e>
 80178fa:	bf00      	nop
 80178fc:	0801c249 	.word	0x0801c249

08017900 <_strtol_r>:
 8017900:	f7ff bf7a 	b.w	80177f8 <_strtol_l.isra.0>

08017904 <quorem>:
 8017904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017908:	6903      	ldr	r3, [r0, #16]
 801790a:	690c      	ldr	r4, [r1, #16]
 801790c:	42a3      	cmp	r3, r4
 801790e:	4607      	mov	r7, r0
 8017910:	f2c0 8081 	blt.w	8017a16 <quorem+0x112>
 8017914:	3c01      	subs	r4, #1
 8017916:	f101 0814 	add.w	r8, r1, #20
 801791a:	f100 0514 	add.w	r5, r0, #20
 801791e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017922:	9301      	str	r3, [sp, #4]
 8017924:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801792c:	3301      	adds	r3, #1
 801792e:	429a      	cmp	r2, r3
 8017930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017938:	fbb2 f6f3 	udiv	r6, r2, r3
 801793c:	d331      	bcc.n	80179a2 <quorem+0x9e>
 801793e:	f04f 0e00 	mov.w	lr, #0
 8017942:	4640      	mov	r0, r8
 8017944:	46ac      	mov	ip, r5
 8017946:	46f2      	mov	sl, lr
 8017948:	f850 2b04 	ldr.w	r2, [r0], #4
 801794c:	b293      	uxth	r3, r2
 801794e:	fb06 e303 	mla	r3, r6, r3, lr
 8017952:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017956:	b29b      	uxth	r3, r3
 8017958:	ebaa 0303 	sub.w	r3, sl, r3
 801795c:	0c12      	lsrs	r2, r2, #16
 801795e:	f8dc a000 	ldr.w	sl, [ip]
 8017962:	fb06 e202 	mla	r2, r6, r2, lr
 8017966:	fa13 f38a 	uxtah	r3, r3, sl
 801796a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801796e:	fa1f fa82 	uxth.w	sl, r2
 8017972:	f8dc 2000 	ldr.w	r2, [ip]
 8017976:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801797a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801797e:	b29b      	uxth	r3, r3
 8017980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017984:	4581      	cmp	r9, r0
 8017986:	f84c 3b04 	str.w	r3, [ip], #4
 801798a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801798e:	d2db      	bcs.n	8017948 <quorem+0x44>
 8017990:	f855 300b 	ldr.w	r3, [r5, fp]
 8017994:	b92b      	cbnz	r3, 80179a2 <quorem+0x9e>
 8017996:	9b01      	ldr	r3, [sp, #4]
 8017998:	3b04      	subs	r3, #4
 801799a:	429d      	cmp	r5, r3
 801799c:	461a      	mov	r2, r3
 801799e:	d32e      	bcc.n	80179fe <quorem+0xfa>
 80179a0:	613c      	str	r4, [r7, #16]
 80179a2:	4638      	mov	r0, r7
 80179a4:	f001 fc82 	bl	80192ac <__mcmp>
 80179a8:	2800      	cmp	r0, #0
 80179aa:	db24      	blt.n	80179f6 <quorem+0xf2>
 80179ac:	3601      	adds	r6, #1
 80179ae:	4628      	mov	r0, r5
 80179b0:	f04f 0c00 	mov.w	ip, #0
 80179b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80179b8:	f8d0 e000 	ldr.w	lr, [r0]
 80179bc:	b293      	uxth	r3, r2
 80179be:	ebac 0303 	sub.w	r3, ip, r3
 80179c2:	0c12      	lsrs	r2, r2, #16
 80179c4:	fa13 f38e 	uxtah	r3, r3, lr
 80179c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80179cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80179d0:	b29b      	uxth	r3, r3
 80179d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80179d6:	45c1      	cmp	r9, r8
 80179d8:	f840 3b04 	str.w	r3, [r0], #4
 80179dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80179e0:	d2e8      	bcs.n	80179b4 <quorem+0xb0>
 80179e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80179e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80179ea:	b922      	cbnz	r2, 80179f6 <quorem+0xf2>
 80179ec:	3b04      	subs	r3, #4
 80179ee:	429d      	cmp	r5, r3
 80179f0:	461a      	mov	r2, r3
 80179f2:	d30a      	bcc.n	8017a0a <quorem+0x106>
 80179f4:	613c      	str	r4, [r7, #16]
 80179f6:	4630      	mov	r0, r6
 80179f8:	b003      	add	sp, #12
 80179fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179fe:	6812      	ldr	r2, [r2, #0]
 8017a00:	3b04      	subs	r3, #4
 8017a02:	2a00      	cmp	r2, #0
 8017a04:	d1cc      	bne.n	80179a0 <quorem+0x9c>
 8017a06:	3c01      	subs	r4, #1
 8017a08:	e7c7      	b.n	801799a <quorem+0x96>
 8017a0a:	6812      	ldr	r2, [r2, #0]
 8017a0c:	3b04      	subs	r3, #4
 8017a0e:	2a00      	cmp	r2, #0
 8017a10:	d1f0      	bne.n	80179f4 <quorem+0xf0>
 8017a12:	3c01      	subs	r4, #1
 8017a14:	e7eb      	b.n	80179ee <quorem+0xea>
 8017a16:	2000      	movs	r0, #0
 8017a18:	e7ee      	b.n	80179f8 <quorem+0xf4>
 8017a1a:	0000      	movs	r0, r0
 8017a1c:	0000      	movs	r0, r0
	...

08017a20 <_dtoa_r>:
 8017a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a24:	ed2d 8b02 	vpush	{d8}
 8017a28:	ec57 6b10 	vmov	r6, r7, d0
 8017a2c:	b095      	sub	sp, #84	; 0x54
 8017a2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017a30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017a34:	9105      	str	r1, [sp, #20]
 8017a36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017a3a:	4604      	mov	r4, r0
 8017a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8017a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a40:	b975      	cbnz	r5, 8017a60 <_dtoa_r+0x40>
 8017a42:	2010      	movs	r0, #16
 8017a44:	f7fe f8dc 	bl	8015c00 <malloc>
 8017a48:	4602      	mov	r2, r0
 8017a4a:	6260      	str	r0, [r4, #36]	; 0x24
 8017a4c:	b920      	cbnz	r0, 8017a58 <_dtoa_r+0x38>
 8017a4e:	4bb2      	ldr	r3, [pc, #712]	; (8017d18 <_dtoa_r+0x2f8>)
 8017a50:	21ea      	movs	r1, #234	; 0xea
 8017a52:	48b2      	ldr	r0, [pc, #712]	; (8017d1c <_dtoa_r+0x2fc>)
 8017a54:	f001 ffb0 	bl	80199b8 <__assert_func>
 8017a58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017a5c:	6005      	str	r5, [r0, #0]
 8017a5e:	60c5      	str	r5, [r0, #12]
 8017a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a62:	6819      	ldr	r1, [r3, #0]
 8017a64:	b151      	cbz	r1, 8017a7c <_dtoa_r+0x5c>
 8017a66:	685a      	ldr	r2, [r3, #4]
 8017a68:	604a      	str	r2, [r1, #4]
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	4093      	lsls	r3, r2
 8017a6e:	608b      	str	r3, [r1, #8]
 8017a70:	4620      	mov	r0, r4
 8017a72:	f001 f993 	bl	8018d9c <_Bfree>
 8017a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a78:	2200      	movs	r2, #0
 8017a7a:	601a      	str	r2, [r3, #0]
 8017a7c:	1e3b      	subs	r3, r7, #0
 8017a7e:	bfb9      	ittee	lt
 8017a80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017a84:	9303      	strlt	r3, [sp, #12]
 8017a86:	2300      	movge	r3, #0
 8017a88:	f8c8 3000 	strge.w	r3, [r8]
 8017a8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017a90:	4ba3      	ldr	r3, [pc, #652]	; (8017d20 <_dtoa_r+0x300>)
 8017a92:	bfbc      	itt	lt
 8017a94:	2201      	movlt	r2, #1
 8017a96:	f8c8 2000 	strlt.w	r2, [r8]
 8017a9a:	ea33 0309 	bics.w	r3, r3, r9
 8017a9e:	d11b      	bne.n	8017ad8 <_dtoa_r+0xb8>
 8017aa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017aa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017aa6:	6013      	str	r3, [r2, #0]
 8017aa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017aac:	4333      	orrs	r3, r6
 8017aae:	f000 857a 	beq.w	80185a6 <_dtoa_r+0xb86>
 8017ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ab4:	b963      	cbnz	r3, 8017ad0 <_dtoa_r+0xb0>
 8017ab6:	4b9b      	ldr	r3, [pc, #620]	; (8017d24 <_dtoa_r+0x304>)
 8017ab8:	e024      	b.n	8017b04 <_dtoa_r+0xe4>
 8017aba:	4b9b      	ldr	r3, [pc, #620]	; (8017d28 <_dtoa_r+0x308>)
 8017abc:	9300      	str	r3, [sp, #0]
 8017abe:	3308      	adds	r3, #8
 8017ac0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ac2:	6013      	str	r3, [r2, #0]
 8017ac4:	9800      	ldr	r0, [sp, #0]
 8017ac6:	b015      	add	sp, #84	; 0x54
 8017ac8:	ecbd 8b02 	vpop	{d8}
 8017acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad0:	4b94      	ldr	r3, [pc, #592]	; (8017d24 <_dtoa_r+0x304>)
 8017ad2:	9300      	str	r3, [sp, #0]
 8017ad4:	3303      	adds	r3, #3
 8017ad6:	e7f3      	b.n	8017ac0 <_dtoa_r+0xa0>
 8017ad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017adc:	2200      	movs	r2, #0
 8017ade:	ec51 0b17 	vmov	r0, r1, d7
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017ae8:	f7e8 ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 8017aec:	4680      	mov	r8, r0
 8017aee:	b158      	cbz	r0, 8017b08 <_dtoa_r+0xe8>
 8017af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017af2:	2301      	movs	r3, #1
 8017af4:	6013      	str	r3, [r2, #0]
 8017af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f000 8551 	beq.w	80185a0 <_dtoa_r+0xb80>
 8017afe:	488b      	ldr	r0, [pc, #556]	; (8017d2c <_dtoa_r+0x30c>)
 8017b00:	6018      	str	r0, [r3, #0]
 8017b02:	1e43      	subs	r3, r0, #1
 8017b04:	9300      	str	r3, [sp, #0]
 8017b06:	e7dd      	b.n	8017ac4 <_dtoa_r+0xa4>
 8017b08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017b0c:	aa12      	add	r2, sp, #72	; 0x48
 8017b0e:	a913      	add	r1, sp, #76	; 0x4c
 8017b10:	4620      	mov	r0, r4
 8017b12:	f001 fceb 	bl	80194ec <__d2b>
 8017b16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017b1a:	4683      	mov	fp, r0
 8017b1c:	2d00      	cmp	r5, #0
 8017b1e:	d07c      	beq.n	8017c1a <_dtoa_r+0x1fa>
 8017b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017b2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017b3a:	4b7d      	ldr	r3, [pc, #500]	; (8017d30 <_dtoa_r+0x310>)
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	4630      	mov	r0, r6
 8017b40:	4639      	mov	r1, r7
 8017b42:	f7e8 fba1 	bl	8000288 <__aeabi_dsub>
 8017b46:	a36e      	add	r3, pc, #440	; (adr r3, 8017d00 <_dtoa_r+0x2e0>)
 8017b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b4c:	f7e8 fd54 	bl	80005f8 <__aeabi_dmul>
 8017b50:	a36d      	add	r3, pc, #436	; (adr r3, 8017d08 <_dtoa_r+0x2e8>)
 8017b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b56:	f7e8 fb99 	bl	800028c <__adddf3>
 8017b5a:	4606      	mov	r6, r0
 8017b5c:	4628      	mov	r0, r5
 8017b5e:	460f      	mov	r7, r1
 8017b60:	f7e8 fce0 	bl	8000524 <__aeabi_i2d>
 8017b64:	a36a      	add	r3, pc, #424	; (adr r3, 8017d10 <_dtoa_r+0x2f0>)
 8017b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b6a:	f7e8 fd45 	bl	80005f8 <__aeabi_dmul>
 8017b6e:	4602      	mov	r2, r0
 8017b70:	460b      	mov	r3, r1
 8017b72:	4630      	mov	r0, r6
 8017b74:	4639      	mov	r1, r7
 8017b76:	f7e8 fb89 	bl	800028c <__adddf3>
 8017b7a:	4606      	mov	r6, r0
 8017b7c:	460f      	mov	r7, r1
 8017b7e:	f7e8 ffeb 	bl	8000b58 <__aeabi_d2iz>
 8017b82:	2200      	movs	r2, #0
 8017b84:	4682      	mov	sl, r0
 8017b86:	2300      	movs	r3, #0
 8017b88:	4630      	mov	r0, r6
 8017b8a:	4639      	mov	r1, r7
 8017b8c:	f7e8 ffa6 	bl	8000adc <__aeabi_dcmplt>
 8017b90:	b148      	cbz	r0, 8017ba6 <_dtoa_r+0x186>
 8017b92:	4650      	mov	r0, sl
 8017b94:	f7e8 fcc6 	bl	8000524 <__aeabi_i2d>
 8017b98:	4632      	mov	r2, r6
 8017b9a:	463b      	mov	r3, r7
 8017b9c:	f7e8 ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 8017ba0:	b908      	cbnz	r0, 8017ba6 <_dtoa_r+0x186>
 8017ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ba6:	f1ba 0f16 	cmp.w	sl, #22
 8017baa:	d854      	bhi.n	8017c56 <_dtoa_r+0x236>
 8017bac:	4b61      	ldr	r3, [pc, #388]	; (8017d34 <_dtoa_r+0x314>)
 8017bae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017bba:	f7e8 ff8f 	bl	8000adc <__aeabi_dcmplt>
 8017bbe:	2800      	cmp	r0, #0
 8017bc0:	d04b      	beq.n	8017c5a <_dtoa_r+0x23a>
 8017bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	930e      	str	r3, [sp, #56]	; 0x38
 8017bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017bcc:	1b5d      	subs	r5, r3, r5
 8017bce:	1e6b      	subs	r3, r5, #1
 8017bd0:	9304      	str	r3, [sp, #16]
 8017bd2:	bf43      	ittte	mi
 8017bd4:	2300      	movmi	r3, #0
 8017bd6:	f1c5 0801 	rsbmi	r8, r5, #1
 8017bda:	9304      	strmi	r3, [sp, #16]
 8017bdc:	f04f 0800 	movpl.w	r8, #0
 8017be0:	f1ba 0f00 	cmp.w	sl, #0
 8017be4:	db3b      	blt.n	8017c5e <_dtoa_r+0x23e>
 8017be6:	9b04      	ldr	r3, [sp, #16]
 8017be8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017bec:	4453      	add	r3, sl
 8017bee:	9304      	str	r3, [sp, #16]
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	9306      	str	r3, [sp, #24]
 8017bf4:	9b05      	ldr	r3, [sp, #20]
 8017bf6:	2b09      	cmp	r3, #9
 8017bf8:	d869      	bhi.n	8017cce <_dtoa_r+0x2ae>
 8017bfa:	2b05      	cmp	r3, #5
 8017bfc:	bfc4      	itt	gt
 8017bfe:	3b04      	subgt	r3, #4
 8017c00:	9305      	strgt	r3, [sp, #20]
 8017c02:	9b05      	ldr	r3, [sp, #20]
 8017c04:	f1a3 0302 	sub.w	r3, r3, #2
 8017c08:	bfcc      	ite	gt
 8017c0a:	2500      	movgt	r5, #0
 8017c0c:	2501      	movle	r5, #1
 8017c0e:	2b03      	cmp	r3, #3
 8017c10:	d869      	bhi.n	8017ce6 <_dtoa_r+0x2c6>
 8017c12:	e8df f003 	tbb	[pc, r3]
 8017c16:	4e2c      	.short	0x4e2c
 8017c18:	5a4c      	.short	0x5a4c
 8017c1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017c1e:	441d      	add	r5, r3
 8017c20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017c24:	2b20      	cmp	r3, #32
 8017c26:	bfc1      	itttt	gt
 8017c28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017c2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017c30:	fa09 f303 	lslgt.w	r3, r9, r3
 8017c34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017c38:	bfda      	itte	le
 8017c3a:	f1c3 0320 	rsble	r3, r3, #32
 8017c3e:	fa06 f003 	lslle.w	r0, r6, r3
 8017c42:	4318      	orrgt	r0, r3
 8017c44:	f7e8 fc5e 	bl	8000504 <__aeabi_ui2d>
 8017c48:	2301      	movs	r3, #1
 8017c4a:	4606      	mov	r6, r0
 8017c4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017c50:	3d01      	subs	r5, #1
 8017c52:	9310      	str	r3, [sp, #64]	; 0x40
 8017c54:	e771      	b.n	8017b3a <_dtoa_r+0x11a>
 8017c56:	2301      	movs	r3, #1
 8017c58:	e7b6      	b.n	8017bc8 <_dtoa_r+0x1a8>
 8017c5a:	900e      	str	r0, [sp, #56]	; 0x38
 8017c5c:	e7b5      	b.n	8017bca <_dtoa_r+0x1aa>
 8017c5e:	f1ca 0300 	rsb	r3, sl, #0
 8017c62:	9306      	str	r3, [sp, #24]
 8017c64:	2300      	movs	r3, #0
 8017c66:	eba8 080a 	sub.w	r8, r8, sl
 8017c6a:	930d      	str	r3, [sp, #52]	; 0x34
 8017c6c:	e7c2      	b.n	8017bf4 <_dtoa_r+0x1d4>
 8017c6e:	2300      	movs	r3, #0
 8017c70:	9308      	str	r3, [sp, #32]
 8017c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	dc39      	bgt.n	8017cec <_dtoa_r+0x2cc>
 8017c78:	f04f 0901 	mov.w	r9, #1
 8017c7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017c80:	464b      	mov	r3, r9
 8017c82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017c86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017c88:	2200      	movs	r2, #0
 8017c8a:	6042      	str	r2, [r0, #4]
 8017c8c:	2204      	movs	r2, #4
 8017c8e:	f102 0614 	add.w	r6, r2, #20
 8017c92:	429e      	cmp	r6, r3
 8017c94:	6841      	ldr	r1, [r0, #4]
 8017c96:	d92f      	bls.n	8017cf8 <_dtoa_r+0x2d8>
 8017c98:	4620      	mov	r0, r4
 8017c9a:	f001 f83f 	bl	8018d1c <_Balloc>
 8017c9e:	9000      	str	r0, [sp, #0]
 8017ca0:	2800      	cmp	r0, #0
 8017ca2:	d14b      	bne.n	8017d3c <_dtoa_r+0x31c>
 8017ca4:	4b24      	ldr	r3, [pc, #144]	; (8017d38 <_dtoa_r+0x318>)
 8017ca6:	4602      	mov	r2, r0
 8017ca8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017cac:	e6d1      	b.n	8017a52 <_dtoa_r+0x32>
 8017cae:	2301      	movs	r3, #1
 8017cb0:	e7de      	b.n	8017c70 <_dtoa_r+0x250>
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	9308      	str	r3, [sp, #32]
 8017cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cb8:	eb0a 0903 	add.w	r9, sl, r3
 8017cbc:	f109 0301 	add.w	r3, r9, #1
 8017cc0:	2b01      	cmp	r3, #1
 8017cc2:	9301      	str	r3, [sp, #4]
 8017cc4:	bfb8      	it	lt
 8017cc6:	2301      	movlt	r3, #1
 8017cc8:	e7dd      	b.n	8017c86 <_dtoa_r+0x266>
 8017cca:	2301      	movs	r3, #1
 8017ccc:	e7f2      	b.n	8017cb4 <_dtoa_r+0x294>
 8017cce:	2501      	movs	r5, #1
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	9305      	str	r3, [sp, #20]
 8017cd4:	9508      	str	r5, [sp, #32]
 8017cd6:	f04f 39ff 	mov.w	r9, #4294967295
 8017cda:	2200      	movs	r2, #0
 8017cdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8017ce0:	2312      	movs	r3, #18
 8017ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8017ce4:	e7cf      	b.n	8017c86 <_dtoa_r+0x266>
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	9308      	str	r3, [sp, #32]
 8017cea:	e7f4      	b.n	8017cd6 <_dtoa_r+0x2b6>
 8017cec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017cf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8017cf4:	464b      	mov	r3, r9
 8017cf6:	e7c6      	b.n	8017c86 <_dtoa_r+0x266>
 8017cf8:	3101      	adds	r1, #1
 8017cfa:	6041      	str	r1, [r0, #4]
 8017cfc:	0052      	lsls	r2, r2, #1
 8017cfe:	e7c6      	b.n	8017c8e <_dtoa_r+0x26e>
 8017d00:	636f4361 	.word	0x636f4361
 8017d04:	3fd287a7 	.word	0x3fd287a7
 8017d08:	8b60c8b3 	.word	0x8b60c8b3
 8017d0c:	3fc68a28 	.word	0x3fc68a28
 8017d10:	509f79fb 	.word	0x509f79fb
 8017d14:	3fd34413 	.word	0x3fd34413
 8017d18:	0801c356 	.word	0x0801c356
 8017d1c:	0801c36d 	.word	0x0801c36d
 8017d20:	7ff00000 	.word	0x7ff00000
 8017d24:	0801c352 	.word	0x0801c352
 8017d28:	0801c349 	.word	0x0801c349
 8017d2c:	0801c1cd 	.word	0x0801c1cd
 8017d30:	3ff80000 	.word	0x3ff80000
 8017d34:	0801c4e8 	.word	0x0801c4e8
 8017d38:	0801c3cc 	.word	0x0801c3cc
 8017d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d3e:	9a00      	ldr	r2, [sp, #0]
 8017d40:	601a      	str	r2, [r3, #0]
 8017d42:	9b01      	ldr	r3, [sp, #4]
 8017d44:	2b0e      	cmp	r3, #14
 8017d46:	f200 80ad 	bhi.w	8017ea4 <_dtoa_r+0x484>
 8017d4a:	2d00      	cmp	r5, #0
 8017d4c:	f000 80aa 	beq.w	8017ea4 <_dtoa_r+0x484>
 8017d50:	f1ba 0f00 	cmp.w	sl, #0
 8017d54:	dd36      	ble.n	8017dc4 <_dtoa_r+0x3a4>
 8017d56:	4ac3      	ldr	r2, [pc, #780]	; (8018064 <_dtoa_r+0x644>)
 8017d58:	f00a 030f 	and.w	r3, sl, #15
 8017d5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017d60:	ed93 7b00 	vldr	d7, [r3]
 8017d64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017d68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017d6c:	eeb0 8a47 	vmov.f32	s16, s14
 8017d70:	eef0 8a67 	vmov.f32	s17, s15
 8017d74:	d016      	beq.n	8017da4 <_dtoa_r+0x384>
 8017d76:	4bbc      	ldr	r3, [pc, #752]	; (8018068 <_dtoa_r+0x648>)
 8017d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017d80:	f7e8 fd64 	bl	800084c <__aeabi_ddiv>
 8017d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d88:	f007 070f 	and.w	r7, r7, #15
 8017d8c:	2503      	movs	r5, #3
 8017d8e:	4eb6      	ldr	r6, [pc, #728]	; (8018068 <_dtoa_r+0x648>)
 8017d90:	b957      	cbnz	r7, 8017da8 <_dtoa_r+0x388>
 8017d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017d96:	ec53 2b18 	vmov	r2, r3, d8
 8017d9a:	f7e8 fd57 	bl	800084c <__aeabi_ddiv>
 8017d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017da2:	e029      	b.n	8017df8 <_dtoa_r+0x3d8>
 8017da4:	2502      	movs	r5, #2
 8017da6:	e7f2      	b.n	8017d8e <_dtoa_r+0x36e>
 8017da8:	07f9      	lsls	r1, r7, #31
 8017daa:	d508      	bpl.n	8017dbe <_dtoa_r+0x39e>
 8017dac:	ec51 0b18 	vmov	r0, r1, d8
 8017db0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017db4:	f7e8 fc20 	bl	80005f8 <__aeabi_dmul>
 8017db8:	ec41 0b18 	vmov	d8, r0, r1
 8017dbc:	3501      	adds	r5, #1
 8017dbe:	107f      	asrs	r7, r7, #1
 8017dc0:	3608      	adds	r6, #8
 8017dc2:	e7e5      	b.n	8017d90 <_dtoa_r+0x370>
 8017dc4:	f000 80a6 	beq.w	8017f14 <_dtoa_r+0x4f4>
 8017dc8:	f1ca 0600 	rsb	r6, sl, #0
 8017dcc:	4ba5      	ldr	r3, [pc, #660]	; (8018064 <_dtoa_r+0x644>)
 8017dce:	4fa6      	ldr	r7, [pc, #664]	; (8018068 <_dtoa_r+0x648>)
 8017dd0:	f006 020f 	and.w	r2, r6, #15
 8017dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ddc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017de0:	f7e8 fc0a 	bl	80005f8 <__aeabi_dmul>
 8017de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017de8:	1136      	asrs	r6, r6, #4
 8017dea:	2300      	movs	r3, #0
 8017dec:	2502      	movs	r5, #2
 8017dee:	2e00      	cmp	r6, #0
 8017df0:	f040 8085 	bne.w	8017efe <_dtoa_r+0x4de>
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d1d2      	bne.n	8017d9e <_dtoa_r+0x37e>
 8017df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	f000 808c 	beq.w	8017f18 <_dtoa_r+0x4f8>
 8017e00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017e04:	4b99      	ldr	r3, [pc, #612]	; (801806c <_dtoa_r+0x64c>)
 8017e06:	2200      	movs	r2, #0
 8017e08:	4630      	mov	r0, r6
 8017e0a:	4639      	mov	r1, r7
 8017e0c:	f7e8 fe66 	bl	8000adc <__aeabi_dcmplt>
 8017e10:	2800      	cmp	r0, #0
 8017e12:	f000 8081 	beq.w	8017f18 <_dtoa_r+0x4f8>
 8017e16:	9b01      	ldr	r3, [sp, #4]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d07d      	beq.n	8017f18 <_dtoa_r+0x4f8>
 8017e1c:	f1b9 0f00 	cmp.w	r9, #0
 8017e20:	dd3c      	ble.n	8017e9c <_dtoa_r+0x47c>
 8017e22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017e26:	9307      	str	r3, [sp, #28]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	4b91      	ldr	r3, [pc, #580]	; (8018070 <_dtoa_r+0x650>)
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	4639      	mov	r1, r7
 8017e30:	f7e8 fbe2 	bl	80005f8 <__aeabi_dmul>
 8017e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e38:	3501      	adds	r5, #1
 8017e3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017e3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017e42:	4628      	mov	r0, r5
 8017e44:	f7e8 fb6e 	bl	8000524 <__aeabi_i2d>
 8017e48:	4632      	mov	r2, r6
 8017e4a:	463b      	mov	r3, r7
 8017e4c:	f7e8 fbd4 	bl	80005f8 <__aeabi_dmul>
 8017e50:	4b88      	ldr	r3, [pc, #544]	; (8018074 <_dtoa_r+0x654>)
 8017e52:	2200      	movs	r2, #0
 8017e54:	f7e8 fa1a 	bl	800028c <__adddf3>
 8017e58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e60:	9303      	str	r3, [sp, #12]
 8017e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d15c      	bne.n	8017f22 <_dtoa_r+0x502>
 8017e68:	4b83      	ldr	r3, [pc, #524]	; (8018078 <_dtoa_r+0x658>)
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	4630      	mov	r0, r6
 8017e6e:	4639      	mov	r1, r7
 8017e70:	f7e8 fa0a 	bl	8000288 <__aeabi_dsub>
 8017e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e78:	4606      	mov	r6, r0
 8017e7a:	460f      	mov	r7, r1
 8017e7c:	f7e8 fe4c 	bl	8000b18 <__aeabi_dcmpgt>
 8017e80:	2800      	cmp	r0, #0
 8017e82:	f040 8296 	bne.w	80183b2 <_dtoa_r+0x992>
 8017e86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017e8a:	4630      	mov	r0, r6
 8017e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017e90:	4639      	mov	r1, r7
 8017e92:	f7e8 fe23 	bl	8000adc <__aeabi_dcmplt>
 8017e96:	2800      	cmp	r0, #0
 8017e98:	f040 8288 	bne.w	80183ac <_dtoa_r+0x98c>
 8017e9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	f2c0 8158 	blt.w	801815c <_dtoa_r+0x73c>
 8017eac:	f1ba 0f0e 	cmp.w	sl, #14
 8017eb0:	f300 8154 	bgt.w	801815c <_dtoa_r+0x73c>
 8017eb4:	4b6b      	ldr	r3, [pc, #428]	; (8018064 <_dtoa_r+0x644>)
 8017eb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017eba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	f280 80e3 	bge.w	801808c <_dtoa_r+0x66c>
 8017ec6:	9b01      	ldr	r3, [sp, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	f300 80df 	bgt.w	801808c <_dtoa_r+0x66c>
 8017ece:	f040 826d 	bne.w	80183ac <_dtoa_r+0x98c>
 8017ed2:	4b69      	ldr	r3, [pc, #420]	; (8018078 <_dtoa_r+0x658>)
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	4640      	mov	r0, r8
 8017ed8:	4649      	mov	r1, r9
 8017eda:	f7e8 fb8d 	bl	80005f8 <__aeabi_dmul>
 8017ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ee2:	f7e8 fe0f 	bl	8000b04 <__aeabi_dcmpge>
 8017ee6:	9e01      	ldr	r6, [sp, #4]
 8017ee8:	4637      	mov	r7, r6
 8017eea:	2800      	cmp	r0, #0
 8017eec:	f040 8243 	bne.w	8018376 <_dtoa_r+0x956>
 8017ef0:	9d00      	ldr	r5, [sp, #0]
 8017ef2:	2331      	movs	r3, #49	; 0x31
 8017ef4:	f805 3b01 	strb.w	r3, [r5], #1
 8017ef8:	f10a 0a01 	add.w	sl, sl, #1
 8017efc:	e23f      	b.n	801837e <_dtoa_r+0x95e>
 8017efe:	07f2      	lsls	r2, r6, #31
 8017f00:	d505      	bpl.n	8017f0e <_dtoa_r+0x4ee>
 8017f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f06:	f7e8 fb77 	bl	80005f8 <__aeabi_dmul>
 8017f0a:	3501      	adds	r5, #1
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	1076      	asrs	r6, r6, #1
 8017f10:	3708      	adds	r7, #8
 8017f12:	e76c      	b.n	8017dee <_dtoa_r+0x3ce>
 8017f14:	2502      	movs	r5, #2
 8017f16:	e76f      	b.n	8017df8 <_dtoa_r+0x3d8>
 8017f18:	9b01      	ldr	r3, [sp, #4]
 8017f1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8017f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8017f20:	e78d      	b.n	8017e3e <_dtoa_r+0x41e>
 8017f22:	9900      	ldr	r1, [sp, #0]
 8017f24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f28:	4b4e      	ldr	r3, [pc, #312]	; (8018064 <_dtoa_r+0x644>)
 8017f2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f2e:	4401      	add	r1, r0
 8017f30:	9102      	str	r1, [sp, #8]
 8017f32:	9908      	ldr	r1, [sp, #32]
 8017f34:	eeb0 8a47 	vmov.f32	s16, s14
 8017f38:	eef0 8a67 	vmov.f32	s17, s15
 8017f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017f44:	2900      	cmp	r1, #0
 8017f46:	d045      	beq.n	8017fd4 <_dtoa_r+0x5b4>
 8017f48:	494c      	ldr	r1, [pc, #304]	; (801807c <_dtoa_r+0x65c>)
 8017f4a:	2000      	movs	r0, #0
 8017f4c:	f7e8 fc7e 	bl	800084c <__aeabi_ddiv>
 8017f50:	ec53 2b18 	vmov	r2, r3, d8
 8017f54:	f7e8 f998 	bl	8000288 <__aeabi_dsub>
 8017f58:	9d00      	ldr	r5, [sp, #0]
 8017f5a:	ec41 0b18 	vmov	d8, r0, r1
 8017f5e:	4639      	mov	r1, r7
 8017f60:	4630      	mov	r0, r6
 8017f62:	f7e8 fdf9 	bl	8000b58 <__aeabi_d2iz>
 8017f66:	900c      	str	r0, [sp, #48]	; 0x30
 8017f68:	f7e8 fadc 	bl	8000524 <__aeabi_i2d>
 8017f6c:	4602      	mov	r2, r0
 8017f6e:	460b      	mov	r3, r1
 8017f70:	4630      	mov	r0, r6
 8017f72:	4639      	mov	r1, r7
 8017f74:	f7e8 f988 	bl	8000288 <__aeabi_dsub>
 8017f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f7a:	3330      	adds	r3, #48	; 0x30
 8017f7c:	f805 3b01 	strb.w	r3, [r5], #1
 8017f80:	ec53 2b18 	vmov	r2, r3, d8
 8017f84:	4606      	mov	r6, r0
 8017f86:	460f      	mov	r7, r1
 8017f88:	f7e8 fda8 	bl	8000adc <__aeabi_dcmplt>
 8017f8c:	2800      	cmp	r0, #0
 8017f8e:	d165      	bne.n	801805c <_dtoa_r+0x63c>
 8017f90:	4632      	mov	r2, r6
 8017f92:	463b      	mov	r3, r7
 8017f94:	4935      	ldr	r1, [pc, #212]	; (801806c <_dtoa_r+0x64c>)
 8017f96:	2000      	movs	r0, #0
 8017f98:	f7e8 f976 	bl	8000288 <__aeabi_dsub>
 8017f9c:	ec53 2b18 	vmov	r2, r3, d8
 8017fa0:	f7e8 fd9c 	bl	8000adc <__aeabi_dcmplt>
 8017fa4:	2800      	cmp	r0, #0
 8017fa6:	f040 80b9 	bne.w	801811c <_dtoa_r+0x6fc>
 8017faa:	9b02      	ldr	r3, [sp, #8]
 8017fac:	429d      	cmp	r5, r3
 8017fae:	f43f af75 	beq.w	8017e9c <_dtoa_r+0x47c>
 8017fb2:	4b2f      	ldr	r3, [pc, #188]	; (8018070 <_dtoa_r+0x650>)
 8017fb4:	ec51 0b18 	vmov	r0, r1, d8
 8017fb8:	2200      	movs	r2, #0
 8017fba:	f7e8 fb1d 	bl	80005f8 <__aeabi_dmul>
 8017fbe:	4b2c      	ldr	r3, [pc, #176]	; (8018070 <_dtoa_r+0x650>)
 8017fc0:	ec41 0b18 	vmov	d8, r0, r1
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	4630      	mov	r0, r6
 8017fc8:	4639      	mov	r1, r7
 8017fca:	f7e8 fb15 	bl	80005f8 <__aeabi_dmul>
 8017fce:	4606      	mov	r6, r0
 8017fd0:	460f      	mov	r7, r1
 8017fd2:	e7c4      	b.n	8017f5e <_dtoa_r+0x53e>
 8017fd4:	ec51 0b17 	vmov	r0, r1, d7
 8017fd8:	f7e8 fb0e 	bl	80005f8 <__aeabi_dmul>
 8017fdc:	9b02      	ldr	r3, [sp, #8]
 8017fde:	9d00      	ldr	r5, [sp, #0]
 8017fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8017fe2:	ec41 0b18 	vmov	d8, r0, r1
 8017fe6:	4639      	mov	r1, r7
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f7e8 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8017fee:	9011      	str	r0, [sp, #68]	; 0x44
 8017ff0:	f7e8 fa98 	bl	8000524 <__aeabi_i2d>
 8017ff4:	4602      	mov	r2, r0
 8017ff6:	460b      	mov	r3, r1
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	4639      	mov	r1, r7
 8017ffc:	f7e8 f944 	bl	8000288 <__aeabi_dsub>
 8018000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018002:	3330      	adds	r3, #48	; 0x30
 8018004:	f805 3b01 	strb.w	r3, [r5], #1
 8018008:	9b02      	ldr	r3, [sp, #8]
 801800a:	429d      	cmp	r5, r3
 801800c:	4606      	mov	r6, r0
 801800e:	460f      	mov	r7, r1
 8018010:	f04f 0200 	mov.w	r2, #0
 8018014:	d134      	bne.n	8018080 <_dtoa_r+0x660>
 8018016:	4b19      	ldr	r3, [pc, #100]	; (801807c <_dtoa_r+0x65c>)
 8018018:	ec51 0b18 	vmov	r0, r1, d8
 801801c:	f7e8 f936 	bl	800028c <__adddf3>
 8018020:	4602      	mov	r2, r0
 8018022:	460b      	mov	r3, r1
 8018024:	4630      	mov	r0, r6
 8018026:	4639      	mov	r1, r7
 8018028:	f7e8 fd76 	bl	8000b18 <__aeabi_dcmpgt>
 801802c:	2800      	cmp	r0, #0
 801802e:	d175      	bne.n	801811c <_dtoa_r+0x6fc>
 8018030:	ec53 2b18 	vmov	r2, r3, d8
 8018034:	4911      	ldr	r1, [pc, #68]	; (801807c <_dtoa_r+0x65c>)
 8018036:	2000      	movs	r0, #0
 8018038:	f7e8 f926 	bl	8000288 <__aeabi_dsub>
 801803c:	4602      	mov	r2, r0
 801803e:	460b      	mov	r3, r1
 8018040:	4630      	mov	r0, r6
 8018042:	4639      	mov	r1, r7
 8018044:	f7e8 fd4a 	bl	8000adc <__aeabi_dcmplt>
 8018048:	2800      	cmp	r0, #0
 801804a:	f43f af27 	beq.w	8017e9c <_dtoa_r+0x47c>
 801804e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018050:	1e6b      	subs	r3, r5, #1
 8018052:	930c      	str	r3, [sp, #48]	; 0x30
 8018054:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018058:	2b30      	cmp	r3, #48	; 0x30
 801805a:	d0f8      	beq.n	801804e <_dtoa_r+0x62e>
 801805c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018060:	e04a      	b.n	80180f8 <_dtoa_r+0x6d8>
 8018062:	bf00      	nop
 8018064:	0801c4e8 	.word	0x0801c4e8
 8018068:	0801c4c0 	.word	0x0801c4c0
 801806c:	3ff00000 	.word	0x3ff00000
 8018070:	40240000 	.word	0x40240000
 8018074:	401c0000 	.word	0x401c0000
 8018078:	40140000 	.word	0x40140000
 801807c:	3fe00000 	.word	0x3fe00000
 8018080:	4baf      	ldr	r3, [pc, #700]	; (8018340 <_dtoa_r+0x920>)
 8018082:	f7e8 fab9 	bl	80005f8 <__aeabi_dmul>
 8018086:	4606      	mov	r6, r0
 8018088:	460f      	mov	r7, r1
 801808a:	e7ac      	b.n	8017fe6 <_dtoa_r+0x5c6>
 801808c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018090:	9d00      	ldr	r5, [sp, #0]
 8018092:	4642      	mov	r2, r8
 8018094:	464b      	mov	r3, r9
 8018096:	4630      	mov	r0, r6
 8018098:	4639      	mov	r1, r7
 801809a:	f7e8 fbd7 	bl	800084c <__aeabi_ddiv>
 801809e:	f7e8 fd5b 	bl	8000b58 <__aeabi_d2iz>
 80180a2:	9002      	str	r0, [sp, #8]
 80180a4:	f7e8 fa3e 	bl	8000524 <__aeabi_i2d>
 80180a8:	4642      	mov	r2, r8
 80180aa:	464b      	mov	r3, r9
 80180ac:	f7e8 faa4 	bl	80005f8 <__aeabi_dmul>
 80180b0:	4602      	mov	r2, r0
 80180b2:	460b      	mov	r3, r1
 80180b4:	4630      	mov	r0, r6
 80180b6:	4639      	mov	r1, r7
 80180b8:	f7e8 f8e6 	bl	8000288 <__aeabi_dsub>
 80180bc:	9e02      	ldr	r6, [sp, #8]
 80180be:	9f01      	ldr	r7, [sp, #4]
 80180c0:	3630      	adds	r6, #48	; 0x30
 80180c2:	f805 6b01 	strb.w	r6, [r5], #1
 80180c6:	9e00      	ldr	r6, [sp, #0]
 80180c8:	1bae      	subs	r6, r5, r6
 80180ca:	42b7      	cmp	r7, r6
 80180cc:	4602      	mov	r2, r0
 80180ce:	460b      	mov	r3, r1
 80180d0:	d137      	bne.n	8018142 <_dtoa_r+0x722>
 80180d2:	f7e8 f8db 	bl	800028c <__adddf3>
 80180d6:	4642      	mov	r2, r8
 80180d8:	464b      	mov	r3, r9
 80180da:	4606      	mov	r6, r0
 80180dc:	460f      	mov	r7, r1
 80180de:	f7e8 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 80180e2:	b9c8      	cbnz	r0, 8018118 <_dtoa_r+0x6f8>
 80180e4:	4642      	mov	r2, r8
 80180e6:	464b      	mov	r3, r9
 80180e8:	4630      	mov	r0, r6
 80180ea:	4639      	mov	r1, r7
 80180ec:	f7e8 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80180f0:	b110      	cbz	r0, 80180f8 <_dtoa_r+0x6d8>
 80180f2:	9b02      	ldr	r3, [sp, #8]
 80180f4:	07d9      	lsls	r1, r3, #31
 80180f6:	d40f      	bmi.n	8018118 <_dtoa_r+0x6f8>
 80180f8:	4620      	mov	r0, r4
 80180fa:	4659      	mov	r1, fp
 80180fc:	f000 fe4e 	bl	8018d9c <_Bfree>
 8018100:	2300      	movs	r3, #0
 8018102:	702b      	strb	r3, [r5, #0]
 8018104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018106:	f10a 0001 	add.w	r0, sl, #1
 801810a:	6018      	str	r0, [r3, #0]
 801810c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801810e:	2b00      	cmp	r3, #0
 8018110:	f43f acd8 	beq.w	8017ac4 <_dtoa_r+0xa4>
 8018114:	601d      	str	r5, [r3, #0]
 8018116:	e4d5      	b.n	8017ac4 <_dtoa_r+0xa4>
 8018118:	f8cd a01c 	str.w	sl, [sp, #28]
 801811c:	462b      	mov	r3, r5
 801811e:	461d      	mov	r5, r3
 8018120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018124:	2a39      	cmp	r2, #57	; 0x39
 8018126:	d108      	bne.n	801813a <_dtoa_r+0x71a>
 8018128:	9a00      	ldr	r2, [sp, #0]
 801812a:	429a      	cmp	r2, r3
 801812c:	d1f7      	bne.n	801811e <_dtoa_r+0x6fe>
 801812e:	9a07      	ldr	r2, [sp, #28]
 8018130:	9900      	ldr	r1, [sp, #0]
 8018132:	3201      	adds	r2, #1
 8018134:	9207      	str	r2, [sp, #28]
 8018136:	2230      	movs	r2, #48	; 0x30
 8018138:	700a      	strb	r2, [r1, #0]
 801813a:	781a      	ldrb	r2, [r3, #0]
 801813c:	3201      	adds	r2, #1
 801813e:	701a      	strb	r2, [r3, #0]
 8018140:	e78c      	b.n	801805c <_dtoa_r+0x63c>
 8018142:	4b7f      	ldr	r3, [pc, #508]	; (8018340 <_dtoa_r+0x920>)
 8018144:	2200      	movs	r2, #0
 8018146:	f7e8 fa57 	bl	80005f8 <__aeabi_dmul>
 801814a:	2200      	movs	r2, #0
 801814c:	2300      	movs	r3, #0
 801814e:	4606      	mov	r6, r0
 8018150:	460f      	mov	r7, r1
 8018152:	f7e8 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8018156:	2800      	cmp	r0, #0
 8018158:	d09b      	beq.n	8018092 <_dtoa_r+0x672>
 801815a:	e7cd      	b.n	80180f8 <_dtoa_r+0x6d8>
 801815c:	9a08      	ldr	r2, [sp, #32]
 801815e:	2a00      	cmp	r2, #0
 8018160:	f000 80c4 	beq.w	80182ec <_dtoa_r+0x8cc>
 8018164:	9a05      	ldr	r2, [sp, #20]
 8018166:	2a01      	cmp	r2, #1
 8018168:	f300 80a8 	bgt.w	80182bc <_dtoa_r+0x89c>
 801816c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801816e:	2a00      	cmp	r2, #0
 8018170:	f000 80a0 	beq.w	80182b4 <_dtoa_r+0x894>
 8018174:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018178:	9e06      	ldr	r6, [sp, #24]
 801817a:	4645      	mov	r5, r8
 801817c:	9a04      	ldr	r2, [sp, #16]
 801817e:	2101      	movs	r1, #1
 8018180:	441a      	add	r2, r3
 8018182:	4620      	mov	r0, r4
 8018184:	4498      	add	r8, r3
 8018186:	9204      	str	r2, [sp, #16]
 8018188:	f000 ff0e 	bl	8018fa8 <__i2b>
 801818c:	4607      	mov	r7, r0
 801818e:	2d00      	cmp	r5, #0
 8018190:	dd0b      	ble.n	80181aa <_dtoa_r+0x78a>
 8018192:	9b04      	ldr	r3, [sp, #16]
 8018194:	2b00      	cmp	r3, #0
 8018196:	dd08      	ble.n	80181aa <_dtoa_r+0x78a>
 8018198:	42ab      	cmp	r3, r5
 801819a:	9a04      	ldr	r2, [sp, #16]
 801819c:	bfa8      	it	ge
 801819e:	462b      	movge	r3, r5
 80181a0:	eba8 0803 	sub.w	r8, r8, r3
 80181a4:	1aed      	subs	r5, r5, r3
 80181a6:	1ad3      	subs	r3, r2, r3
 80181a8:	9304      	str	r3, [sp, #16]
 80181aa:	9b06      	ldr	r3, [sp, #24]
 80181ac:	b1fb      	cbz	r3, 80181ee <_dtoa_r+0x7ce>
 80181ae:	9b08      	ldr	r3, [sp, #32]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	f000 809f 	beq.w	80182f4 <_dtoa_r+0x8d4>
 80181b6:	2e00      	cmp	r6, #0
 80181b8:	dd11      	ble.n	80181de <_dtoa_r+0x7be>
 80181ba:	4639      	mov	r1, r7
 80181bc:	4632      	mov	r2, r6
 80181be:	4620      	mov	r0, r4
 80181c0:	f000 ffae 	bl	8019120 <__pow5mult>
 80181c4:	465a      	mov	r2, fp
 80181c6:	4601      	mov	r1, r0
 80181c8:	4607      	mov	r7, r0
 80181ca:	4620      	mov	r0, r4
 80181cc:	f000 ff02 	bl	8018fd4 <__multiply>
 80181d0:	4659      	mov	r1, fp
 80181d2:	9007      	str	r0, [sp, #28]
 80181d4:	4620      	mov	r0, r4
 80181d6:	f000 fde1 	bl	8018d9c <_Bfree>
 80181da:	9b07      	ldr	r3, [sp, #28]
 80181dc:	469b      	mov	fp, r3
 80181de:	9b06      	ldr	r3, [sp, #24]
 80181e0:	1b9a      	subs	r2, r3, r6
 80181e2:	d004      	beq.n	80181ee <_dtoa_r+0x7ce>
 80181e4:	4659      	mov	r1, fp
 80181e6:	4620      	mov	r0, r4
 80181e8:	f000 ff9a 	bl	8019120 <__pow5mult>
 80181ec:	4683      	mov	fp, r0
 80181ee:	2101      	movs	r1, #1
 80181f0:	4620      	mov	r0, r4
 80181f2:	f000 fed9 	bl	8018fa8 <__i2b>
 80181f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	4606      	mov	r6, r0
 80181fc:	dd7c      	ble.n	80182f8 <_dtoa_r+0x8d8>
 80181fe:	461a      	mov	r2, r3
 8018200:	4601      	mov	r1, r0
 8018202:	4620      	mov	r0, r4
 8018204:	f000 ff8c 	bl	8019120 <__pow5mult>
 8018208:	9b05      	ldr	r3, [sp, #20]
 801820a:	2b01      	cmp	r3, #1
 801820c:	4606      	mov	r6, r0
 801820e:	dd76      	ble.n	80182fe <_dtoa_r+0x8de>
 8018210:	2300      	movs	r3, #0
 8018212:	9306      	str	r3, [sp, #24]
 8018214:	6933      	ldr	r3, [r6, #16]
 8018216:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801821a:	6918      	ldr	r0, [r3, #16]
 801821c:	f000 fe74 	bl	8018f08 <__hi0bits>
 8018220:	f1c0 0020 	rsb	r0, r0, #32
 8018224:	9b04      	ldr	r3, [sp, #16]
 8018226:	4418      	add	r0, r3
 8018228:	f010 001f 	ands.w	r0, r0, #31
 801822c:	f000 8086 	beq.w	801833c <_dtoa_r+0x91c>
 8018230:	f1c0 0320 	rsb	r3, r0, #32
 8018234:	2b04      	cmp	r3, #4
 8018236:	dd7f      	ble.n	8018338 <_dtoa_r+0x918>
 8018238:	f1c0 001c 	rsb	r0, r0, #28
 801823c:	9b04      	ldr	r3, [sp, #16]
 801823e:	4403      	add	r3, r0
 8018240:	4480      	add	r8, r0
 8018242:	4405      	add	r5, r0
 8018244:	9304      	str	r3, [sp, #16]
 8018246:	f1b8 0f00 	cmp.w	r8, #0
 801824a:	dd05      	ble.n	8018258 <_dtoa_r+0x838>
 801824c:	4659      	mov	r1, fp
 801824e:	4642      	mov	r2, r8
 8018250:	4620      	mov	r0, r4
 8018252:	f000 ffbf 	bl	80191d4 <__lshift>
 8018256:	4683      	mov	fp, r0
 8018258:	9b04      	ldr	r3, [sp, #16]
 801825a:	2b00      	cmp	r3, #0
 801825c:	dd05      	ble.n	801826a <_dtoa_r+0x84a>
 801825e:	4631      	mov	r1, r6
 8018260:	461a      	mov	r2, r3
 8018262:	4620      	mov	r0, r4
 8018264:	f000 ffb6 	bl	80191d4 <__lshift>
 8018268:	4606      	mov	r6, r0
 801826a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801826c:	2b00      	cmp	r3, #0
 801826e:	d069      	beq.n	8018344 <_dtoa_r+0x924>
 8018270:	4631      	mov	r1, r6
 8018272:	4658      	mov	r0, fp
 8018274:	f001 f81a 	bl	80192ac <__mcmp>
 8018278:	2800      	cmp	r0, #0
 801827a:	da63      	bge.n	8018344 <_dtoa_r+0x924>
 801827c:	2300      	movs	r3, #0
 801827e:	4659      	mov	r1, fp
 8018280:	220a      	movs	r2, #10
 8018282:	4620      	mov	r0, r4
 8018284:	f000 fdac 	bl	8018de0 <__multadd>
 8018288:	9b08      	ldr	r3, [sp, #32]
 801828a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801828e:	4683      	mov	fp, r0
 8018290:	2b00      	cmp	r3, #0
 8018292:	f000 818f 	beq.w	80185b4 <_dtoa_r+0xb94>
 8018296:	4639      	mov	r1, r7
 8018298:	2300      	movs	r3, #0
 801829a:	220a      	movs	r2, #10
 801829c:	4620      	mov	r0, r4
 801829e:	f000 fd9f 	bl	8018de0 <__multadd>
 80182a2:	f1b9 0f00 	cmp.w	r9, #0
 80182a6:	4607      	mov	r7, r0
 80182a8:	f300 808e 	bgt.w	80183c8 <_dtoa_r+0x9a8>
 80182ac:	9b05      	ldr	r3, [sp, #20]
 80182ae:	2b02      	cmp	r3, #2
 80182b0:	dc50      	bgt.n	8018354 <_dtoa_r+0x934>
 80182b2:	e089      	b.n	80183c8 <_dtoa_r+0x9a8>
 80182b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80182ba:	e75d      	b.n	8018178 <_dtoa_r+0x758>
 80182bc:	9b01      	ldr	r3, [sp, #4]
 80182be:	1e5e      	subs	r6, r3, #1
 80182c0:	9b06      	ldr	r3, [sp, #24]
 80182c2:	42b3      	cmp	r3, r6
 80182c4:	bfbf      	itttt	lt
 80182c6:	9b06      	ldrlt	r3, [sp, #24]
 80182c8:	9606      	strlt	r6, [sp, #24]
 80182ca:	1af2      	sublt	r2, r6, r3
 80182cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80182ce:	bfb6      	itet	lt
 80182d0:	189b      	addlt	r3, r3, r2
 80182d2:	1b9e      	subge	r6, r3, r6
 80182d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80182d6:	9b01      	ldr	r3, [sp, #4]
 80182d8:	bfb8      	it	lt
 80182da:	2600      	movlt	r6, #0
 80182dc:	2b00      	cmp	r3, #0
 80182de:	bfb5      	itete	lt
 80182e0:	eba8 0503 	sublt.w	r5, r8, r3
 80182e4:	9b01      	ldrge	r3, [sp, #4]
 80182e6:	2300      	movlt	r3, #0
 80182e8:	4645      	movge	r5, r8
 80182ea:	e747      	b.n	801817c <_dtoa_r+0x75c>
 80182ec:	9e06      	ldr	r6, [sp, #24]
 80182ee:	9f08      	ldr	r7, [sp, #32]
 80182f0:	4645      	mov	r5, r8
 80182f2:	e74c      	b.n	801818e <_dtoa_r+0x76e>
 80182f4:	9a06      	ldr	r2, [sp, #24]
 80182f6:	e775      	b.n	80181e4 <_dtoa_r+0x7c4>
 80182f8:	9b05      	ldr	r3, [sp, #20]
 80182fa:	2b01      	cmp	r3, #1
 80182fc:	dc18      	bgt.n	8018330 <_dtoa_r+0x910>
 80182fe:	9b02      	ldr	r3, [sp, #8]
 8018300:	b9b3      	cbnz	r3, 8018330 <_dtoa_r+0x910>
 8018302:	9b03      	ldr	r3, [sp, #12]
 8018304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018308:	b9a3      	cbnz	r3, 8018334 <_dtoa_r+0x914>
 801830a:	9b03      	ldr	r3, [sp, #12]
 801830c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018310:	0d1b      	lsrs	r3, r3, #20
 8018312:	051b      	lsls	r3, r3, #20
 8018314:	b12b      	cbz	r3, 8018322 <_dtoa_r+0x902>
 8018316:	9b04      	ldr	r3, [sp, #16]
 8018318:	3301      	adds	r3, #1
 801831a:	9304      	str	r3, [sp, #16]
 801831c:	f108 0801 	add.w	r8, r8, #1
 8018320:	2301      	movs	r3, #1
 8018322:	9306      	str	r3, [sp, #24]
 8018324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018326:	2b00      	cmp	r3, #0
 8018328:	f47f af74 	bne.w	8018214 <_dtoa_r+0x7f4>
 801832c:	2001      	movs	r0, #1
 801832e:	e779      	b.n	8018224 <_dtoa_r+0x804>
 8018330:	2300      	movs	r3, #0
 8018332:	e7f6      	b.n	8018322 <_dtoa_r+0x902>
 8018334:	9b02      	ldr	r3, [sp, #8]
 8018336:	e7f4      	b.n	8018322 <_dtoa_r+0x902>
 8018338:	d085      	beq.n	8018246 <_dtoa_r+0x826>
 801833a:	4618      	mov	r0, r3
 801833c:	301c      	adds	r0, #28
 801833e:	e77d      	b.n	801823c <_dtoa_r+0x81c>
 8018340:	40240000 	.word	0x40240000
 8018344:	9b01      	ldr	r3, [sp, #4]
 8018346:	2b00      	cmp	r3, #0
 8018348:	dc38      	bgt.n	80183bc <_dtoa_r+0x99c>
 801834a:	9b05      	ldr	r3, [sp, #20]
 801834c:	2b02      	cmp	r3, #2
 801834e:	dd35      	ble.n	80183bc <_dtoa_r+0x99c>
 8018350:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018354:	f1b9 0f00 	cmp.w	r9, #0
 8018358:	d10d      	bne.n	8018376 <_dtoa_r+0x956>
 801835a:	4631      	mov	r1, r6
 801835c:	464b      	mov	r3, r9
 801835e:	2205      	movs	r2, #5
 8018360:	4620      	mov	r0, r4
 8018362:	f000 fd3d 	bl	8018de0 <__multadd>
 8018366:	4601      	mov	r1, r0
 8018368:	4606      	mov	r6, r0
 801836a:	4658      	mov	r0, fp
 801836c:	f000 ff9e 	bl	80192ac <__mcmp>
 8018370:	2800      	cmp	r0, #0
 8018372:	f73f adbd 	bgt.w	8017ef0 <_dtoa_r+0x4d0>
 8018376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018378:	9d00      	ldr	r5, [sp, #0]
 801837a:	ea6f 0a03 	mvn.w	sl, r3
 801837e:	f04f 0800 	mov.w	r8, #0
 8018382:	4631      	mov	r1, r6
 8018384:	4620      	mov	r0, r4
 8018386:	f000 fd09 	bl	8018d9c <_Bfree>
 801838a:	2f00      	cmp	r7, #0
 801838c:	f43f aeb4 	beq.w	80180f8 <_dtoa_r+0x6d8>
 8018390:	f1b8 0f00 	cmp.w	r8, #0
 8018394:	d005      	beq.n	80183a2 <_dtoa_r+0x982>
 8018396:	45b8      	cmp	r8, r7
 8018398:	d003      	beq.n	80183a2 <_dtoa_r+0x982>
 801839a:	4641      	mov	r1, r8
 801839c:	4620      	mov	r0, r4
 801839e:	f000 fcfd 	bl	8018d9c <_Bfree>
 80183a2:	4639      	mov	r1, r7
 80183a4:	4620      	mov	r0, r4
 80183a6:	f000 fcf9 	bl	8018d9c <_Bfree>
 80183aa:	e6a5      	b.n	80180f8 <_dtoa_r+0x6d8>
 80183ac:	2600      	movs	r6, #0
 80183ae:	4637      	mov	r7, r6
 80183b0:	e7e1      	b.n	8018376 <_dtoa_r+0x956>
 80183b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80183b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80183b8:	4637      	mov	r7, r6
 80183ba:	e599      	b.n	8017ef0 <_dtoa_r+0x4d0>
 80183bc:	9b08      	ldr	r3, [sp, #32]
 80183be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	f000 80fd 	beq.w	80185c2 <_dtoa_r+0xba2>
 80183c8:	2d00      	cmp	r5, #0
 80183ca:	dd05      	ble.n	80183d8 <_dtoa_r+0x9b8>
 80183cc:	4639      	mov	r1, r7
 80183ce:	462a      	mov	r2, r5
 80183d0:	4620      	mov	r0, r4
 80183d2:	f000 feff 	bl	80191d4 <__lshift>
 80183d6:	4607      	mov	r7, r0
 80183d8:	9b06      	ldr	r3, [sp, #24]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d05c      	beq.n	8018498 <_dtoa_r+0xa78>
 80183de:	6879      	ldr	r1, [r7, #4]
 80183e0:	4620      	mov	r0, r4
 80183e2:	f000 fc9b 	bl	8018d1c <_Balloc>
 80183e6:	4605      	mov	r5, r0
 80183e8:	b928      	cbnz	r0, 80183f6 <_dtoa_r+0x9d6>
 80183ea:	4b80      	ldr	r3, [pc, #512]	; (80185ec <_dtoa_r+0xbcc>)
 80183ec:	4602      	mov	r2, r0
 80183ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80183f2:	f7ff bb2e 	b.w	8017a52 <_dtoa_r+0x32>
 80183f6:	693a      	ldr	r2, [r7, #16]
 80183f8:	3202      	adds	r2, #2
 80183fa:	0092      	lsls	r2, r2, #2
 80183fc:	f107 010c 	add.w	r1, r7, #12
 8018400:	300c      	adds	r0, #12
 8018402:	f7fd fc0d 	bl	8015c20 <memcpy>
 8018406:	2201      	movs	r2, #1
 8018408:	4629      	mov	r1, r5
 801840a:	4620      	mov	r0, r4
 801840c:	f000 fee2 	bl	80191d4 <__lshift>
 8018410:	9b00      	ldr	r3, [sp, #0]
 8018412:	3301      	adds	r3, #1
 8018414:	9301      	str	r3, [sp, #4]
 8018416:	9b00      	ldr	r3, [sp, #0]
 8018418:	444b      	add	r3, r9
 801841a:	9307      	str	r3, [sp, #28]
 801841c:	9b02      	ldr	r3, [sp, #8]
 801841e:	f003 0301 	and.w	r3, r3, #1
 8018422:	46b8      	mov	r8, r7
 8018424:	9306      	str	r3, [sp, #24]
 8018426:	4607      	mov	r7, r0
 8018428:	9b01      	ldr	r3, [sp, #4]
 801842a:	4631      	mov	r1, r6
 801842c:	3b01      	subs	r3, #1
 801842e:	4658      	mov	r0, fp
 8018430:	9302      	str	r3, [sp, #8]
 8018432:	f7ff fa67 	bl	8017904 <quorem>
 8018436:	4603      	mov	r3, r0
 8018438:	3330      	adds	r3, #48	; 0x30
 801843a:	9004      	str	r0, [sp, #16]
 801843c:	4641      	mov	r1, r8
 801843e:	4658      	mov	r0, fp
 8018440:	9308      	str	r3, [sp, #32]
 8018442:	f000 ff33 	bl	80192ac <__mcmp>
 8018446:	463a      	mov	r2, r7
 8018448:	4681      	mov	r9, r0
 801844a:	4631      	mov	r1, r6
 801844c:	4620      	mov	r0, r4
 801844e:	f000 ff49 	bl	80192e4 <__mdiff>
 8018452:	68c2      	ldr	r2, [r0, #12]
 8018454:	9b08      	ldr	r3, [sp, #32]
 8018456:	4605      	mov	r5, r0
 8018458:	bb02      	cbnz	r2, 801849c <_dtoa_r+0xa7c>
 801845a:	4601      	mov	r1, r0
 801845c:	4658      	mov	r0, fp
 801845e:	f000 ff25 	bl	80192ac <__mcmp>
 8018462:	9b08      	ldr	r3, [sp, #32]
 8018464:	4602      	mov	r2, r0
 8018466:	4629      	mov	r1, r5
 8018468:	4620      	mov	r0, r4
 801846a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801846e:	f000 fc95 	bl	8018d9c <_Bfree>
 8018472:	9b05      	ldr	r3, [sp, #20]
 8018474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018476:	9d01      	ldr	r5, [sp, #4]
 8018478:	ea43 0102 	orr.w	r1, r3, r2
 801847c:	9b06      	ldr	r3, [sp, #24]
 801847e:	430b      	orrs	r3, r1
 8018480:	9b08      	ldr	r3, [sp, #32]
 8018482:	d10d      	bne.n	80184a0 <_dtoa_r+0xa80>
 8018484:	2b39      	cmp	r3, #57	; 0x39
 8018486:	d029      	beq.n	80184dc <_dtoa_r+0xabc>
 8018488:	f1b9 0f00 	cmp.w	r9, #0
 801848c:	dd01      	ble.n	8018492 <_dtoa_r+0xa72>
 801848e:	9b04      	ldr	r3, [sp, #16]
 8018490:	3331      	adds	r3, #49	; 0x31
 8018492:	9a02      	ldr	r2, [sp, #8]
 8018494:	7013      	strb	r3, [r2, #0]
 8018496:	e774      	b.n	8018382 <_dtoa_r+0x962>
 8018498:	4638      	mov	r0, r7
 801849a:	e7b9      	b.n	8018410 <_dtoa_r+0x9f0>
 801849c:	2201      	movs	r2, #1
 801849e:	e7e2      	b.n	8018466 <_dtoa_r+0xa46>
 80184a0:	f1b9 0f00 	cmp.w	r9, #0
 80184a4:	db06      	blt.n	80184b4 <_dtoa_r+0xa94>
 80184a6:	9905      	ldr	r1, [sp, #20]
 80184a8:	ea41 0909 	orr.w	r9, r1, r9
 80184ac:	9906      	ldr	r1, [sp, #24]
 80184ae:	ea59 0101 	orrs.w	r1, r9, r1
 80184b2:	d120      	bne.n	80184f6 <_dtoa_r+0xad6>
 80184b4:	2a00      	cmp	r2, #0
 80184b6:	ddec      	ble.n	8018492 <_dtoa_r+0xa72>
 80184b8:	4659      	mov	r1, fp
 80184ba:	2201      	movs	r2, #1
 80184bc:	4620      	mov	r0, r4
 80184be:	9301      	str	r3, [sp, #4]
 80184c0:	f000 fe88 	bl	80191d4 <__lshift>
 80184c4:	4631      	mov	r1, r6
 80184c6:	4683      	mov	fp, r0
 80184c8:	f000 fef0 	bl	80192ac <__mcmp>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	9b01      	ldr	r3, [sp, #4]
 80184d0:	dc02      	bgt.n	80184d8 <_dtoa_r+0xab8>
 80184d2:	d1de      	bne.n	8018492 <_dtoa_r+0xa72>
 80184d4:	07da      	lsls	r2, r3, #31
 80184d6:	d5dc      	bpl.n	8018492 <_dtoa_r+0xa72>
 80184d8:	2b39      	cmp	r3, #57	; 0x39
 80184da:	d1d8      	bne.n	801848e <_dtoa_r+0xa6e>
 80184dc:	9a02      	ldr	r2, [sp, #8]
 80184de:	2339      	movs	r3, #57	; 0x39
 80184e0:	7013      	strb	r3, [r2, #0]
 80184e2:	462b      	mov	r3, r5
 80184e4:	461d      	mov	r5, r3
 80184e6:	3b01      	subs	r3, #1
 80184e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80184ec:	2a39      	cmp	r2, #57	; 0x39
 80184ee:	d050      	beq.n	8018592 <_dtoa_r+0xb72>
 80184f0:	3201      	adds	r2, #1
 80184f2:	701a      	strb	r2, [r3, #0]
 80184f4:	e745      	b.n	8018382 <_dtoa_r+0x962>
 80184f6:	2a00      	cmp	r2, #0
 80184f8:	dd03      	ble.n	8018502 <_dtoa_r+0xae2>
 80184fa:	2b39      	cmp	r3, #57	; 0x39
 80184fc:	d0ee      	beq.n	80184dc <_dtoa_r+0xabc>
 80184fe:	3301      	adds	r3, #1
 8018500:	e7c7      	b.n	8018492 <_dtoa_r+0xa72>
 8018502:	9a01      	ldr	r2, [sp, #4]
 8018504:	9907      	ldr	r1, [sp, #28]
 8018506:	f802 3c01 	strb.w	r3, [r2, #-1]
 801850a:	428a      	cmp	r2, r1
 801850c:	d02a      	beq.n	8018564 <_dtoa_r+0xb44>
 801850e:	4659      	mov	r1, fp
 8018510:	2300      	movs	r3, #0
 8018512:	220a      	movs	r2, #10
 8018514:	4620      	mov	r0, r4
 8018516:	f000 fc63 	bl	8018de0 <__multadd>
 801851a:	45b8      	cmp	r8, r7
 801851c:	4683      	mov	fp, r0
 801851e:	f04f 0300 	mov.w	r3, #0
 8018522:	f04f 020a 	mov.w	r2, #10
 8018526:	4641      	mov	r1, r8
 8018528:	4620      	mov	r0, r4
 801852a:	d107      	bne.n	801853c <_dtoa_r+0xb1c>
 801852c:	f000 fc58 	bl	8018de0 <__multadd>
 8018530:	4680      	mov	r8, r0
 8018532:	4607      	mov	r7, r0
 8018534:	9b01      	ldr	r3, [sp, #4]
 8018536:	3301      	adds	r3, #1
 8018538:	9301      	str	r3, [sp, #4]
 801853a:	e775      	b.n	8018428 <_dtoa_r+0xa08>
 801853c:	f000 fc50 	bl	8018de0 <__multadd>
 8018540:	4639      	mov	r1, r7
 8018542:	4680      	mov	r8, r0
 8018544:	2300      	movs	r3, #0
 8018546:	220a      	movs	r2, #10
 8018548:	4620      	mov	r0, r4
 801854a:	f000 fc49 	bl	8018de0 <__multadd>
 801854e:	4607      	mov	r7, r0
 8018550:	e7f0      	b.n	8018534 <_dtoa_r+0xb14>
 8018552:	f1b9 0f00 	cmp.w	r9, #0
 8018556:	9a00      	ldr	r2, [sp, #0]
 8018558:	bfcc      	ite	gt
 801855a:	464d      	movgt	r5, r9
 801855c:	2501      	movle	r5, #1
 801855e:	4415      	add	r5, r2
 8018560:	f04f 0800 	mov.w	r8, #0
 8018564:	4659      	mov	r1, fp
 8018566:	2201      	movs	r2, #1
 8018568:	4620      	mov	r0, r4
 801856a:	9301      	str	r3, [sp, #4]
 801856c:	f000 fe32 	bl	80191d4 <__lshift>
 8018570:	4631      	mov	r1, r6
 8018572:	4683      	mov	fp, r0
 8018574:	f000 fe9a 	bl	80192ac <__mcmp>
 8018578:	2800      	cmp	r0, #0
 801857a:	dcb2      	bgt.n	80184e2 <_dtoa_r+0xac2>
 801857c:	d102      	bne.n	8018584 <_dtoa_r+0xb64>
 801857e:	9b01      	ldr	r3, [sp, #4]
 8018580:	07db      	lsls	r3, r3, #31
 8018582:	d4ae      	bmi.n	80184e2 <_dtoa_r+0xac2>
 8018584:	462b      	mov	r3, r5
 8018586:	461d      	mov	r5, r3
 8018588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801858c:	2a30      	cmp	r2, #48	; 0x30
 801858e:	d0fa      	beq.n	8018586 <_dtoa_r+0xb66>
 8018590:	e6f7      	b.n	8018382 <_dtoa_r+0x962>
 8018592:	9a00      	ldr	r2, [sp, #0]
 8018594:	429a      	cmp	r2, r3
 8018596:	d1a5      	bne.n	80184e4 <_dtoa_r+0xac4>
 8018598:	f10a 0a01 	add.w	sl, sl, #1
 801859c:	2331      	movs	r3, #49	; 0x31
 801859e:	e779      	b.n	8018494 <_dtoa_r+0xa74>
 80185a0:	4b13      	ldr	r3, [pc, #76]	; (80185f0 <_dtoa_r+0xbd0>)
 80185a2:	f7ff baaf 	b.w	8017b04 <_dtoa_r+0xe4>
 80185a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	f47f aa86 	bne.w	8017aba <_dtoa_r+0x9a>
 80185ae:	4b11      	ldr	r3, [pc, #68]	; (80185f4 <_dtoa_r+0xbd4>)
 80185b0:	f7ff baa8 	b.w	8017b04 <_dtoa_r+0xe4>
 80185b4:	f1b9 0f00 	cmp.w	r9, #0
 80185b8:	dc03      	bgt.n	80185c2 <_dtoa_r+0xba2>
 80185ba:	9b05      	ldr	r3, [sp, #20]
 80185bc:	2b02      	cmp	r3, #2
 80185be:	f73f aec9 	bgt.w	8018354 <_dtoa_r+0x934>
 80185c2:	9d00      	ldr	r5, [sp, #0]
 80185c4:	4631      	mov	r1, r6
 80185c6:	4658      	mov	r0, fp
 80185c8:	f7ff f99c 	bl	8017904 <quorem>
 80185cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80185d0:	f805 3b01 	strb.w	r3, [r5], #1
 80185d4:	9a00      	ldr	r2, [sp, #0]
 80185d6:	1aaa      	subs	r2, r5, r2
 80185d8:	4591      	cmp	r9, r2
 80185da:	ddba      	ble.n	8018552 <_dtoa_r+0xb32>
 80185dc:	4659      	mov	r1, fp
 80185de:	2300      	movs	r3, #0
 80185e0:	220a      	movs	r2, #10
 80185e2:	4620      	mov	r0, r4
 80185e4:	f000 fbfc 	bl	8018de0 <__multadd>
 80185e8:	4683      	mov	fp, r0
 80185ea:	e7eb      	b.n	80185c4 <_dtoa_r+0xba4>
 80185ec:	0801c3cc 	.word	0x0801c3cc
 80185f0:	0801c1cc 	.word	0x0801c1cc
 80185f4:	0801c349 	.word	0x0801c349

080185f8 <rshift>:
 80185f8:	6903      	ldr	r3, [r0, #16]
 80185fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80185fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018602:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018606:	f100 0414 	add.w	r4, r0, #20
 801860a:	dd45      	ble.n	8018698 <rshift+0xa0>
 801860c:	f011 011f 	ands.w	r1, r1, #31
 8018610:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018614:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018618:	d10c      	bne.n	8018634 <rshift+0x3c>
 801861a:	f100 0710 	add.w	r7, r0, #16
 801861e:	4629      	mov	r1, r5
 8018620:	42b1      	cmp	r1, r6
 8018622:	d334      	bcc.n	801868e <rshift+0x96>
 8018624:	1a9b      	subs	r3, r3, r2
 8018626:	009b      	lsls	r3, r3, #2
 8018628:	1eea      	subs	r2, r5, #3
 801862a:	4296      	cmp	r6, r2
 801862c:	bf38      	it	cc
 801862e:	2300      	movcc	r3, #0
 8018630:	4423      	add	r3, r4
 8018632:	e015      	b.n	8018660 <rshift+0x68>
 8018634:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018638:	f1c1 0820 	rsb	r8, r1, #32
 801863c:	40cf      	lsrs	r7, r1
 801863e:	f105 0e04 	add.w	lr, r5, #4
 8018642:	46a1      	mov	r9, r4
 8018644:	4576      	cmp	r6, lr
 8018646:	46f4      	mov	ip, lr
 8018648:	d815      	bhi.n	8018676 <rshift+0x7e>
 801864a:	1a9b      	subs	r3, r3, r2
 801864c:	009a      	lsls	r2, r3, #2
 801864e:	3a04      	subs	r2, #4
 8018650:	3501      	adds	r5, #1
 8018652:	42ae      	cmp	r6, r5
 8018654:	bf38      	it	cc
 8018656:	2200      	movcc	r2, #0
 8018658:	18a3      	adds	r3, r4, r2
 801865a:	50a7      	str	r7, [r4, r2]
 801865c:	b107      	cbz	r7, 8018660 <rshift+0x68>
 801865e:	3304      	adds	r3, #4
 8018660:	1b1a      	subs	r2, r3, r4
 8018662:	42a3      	cmp	r3, r4
 8018664:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018668:	bf08      	it	eq
 801866a:	2300      	moveq	r3, #0
 801866c:	6102      	str	r2, [r0, #16]
 801866e:	bf08      	it	eq
 8018670:	6143      	streq	r3, [r0, #20]
 8018672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018676:	f8dc c000 	ldr.w	ip, [ip]
 801867a:	fa0c fc08 	lsl.w	ip, ip, r8
 801867e:	ea4c 0707 	orr.w	r7, ip, r7
 8018682:	f849 7b04 	str.w	r7, [r9], #4
 8018686:	f85e 7b04 	ldr.w	r7, [lr], #4
 801868a:	40cf      	lsrs	r7, r1
 801868c:	e7da      	b.n	8018644 <rshift+0x4c>
 801868e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018692:	f847 cf04 	str.w	ip, [r7, #4]!
 8018696:	e7c3      	b.n	8018620 <rshift+0x28>
 8018698:	4623      	mov	r3, r4
 801869a:	e7e1      	b.n	8018660 <rshift+0x68>

0801869c <__hexdig_fun>:
 801869c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80186a0:	2b09      	cmp	r3, #9
 80186a2:	d802      	bhi.n	80186aa <__hexdig_fun+0xe>
 80186a4:	3820      	subs	r0, #32
 80186a6:	b2c0      	uxtb	r0, r0
 80186a8:	4770      	bx	lr
 80186aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80186ae:	2b05      	cmp	r3, #5
 80186b0:	d801      	bhi.n	80186b6 <__hexdig_fun+0x1a>
 80186b2:	3847      	subs	r0, #71	; 0x47
 80186b4:	e7f7      	b.n	80186a6 <__hexdig_fun+0xa>
 80186b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80186ba:	2b05      	cmp	r3, #5
 80186bc:	d801      	bhi.n	80186c2 <__hexdig_fun+0x26>
 80186be:	3827      	subs	r0, #39	; 0x27
 80186c0:	e7f1      	b.n	80186a6 <__hexdig_fun+0xa>
 80186c2:	2000      	movs	r0, #0
 80186c4:	4770      	bx	lr
	...

080186c8 <__gethex>:
 80186c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186cc:	ed2d 8b02 	vpush	{d8}
 80186d0:	b089      	sub	sp, #36	; 0x24
 80186d2:	ee08 0a10 	vmov	s16, r0
 80186d6:	9304      	str	r3, [sp, #16]
 80186d8:	4bbc      	ldr	r3, [pc, #752]	; (80189cc <__gethex+0x304>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	9301      	str	r3, [sp, #4]
 80186de:	4618      	mov	r0, r3
 80186e0:	468b      	mov	fp, r1
 80186e2:	4690      	mov	r8, r2
 80186e4:	f7e7 fd74 	bl	80001d0 <strlen>
 80186e8:	9b01      	ldr	r3, [sp, #4]
 80186ea:	f8db 2000 	ldr.w	r2, [fp]
 80186ee:	4403      	add	r3, r0
 80186f0:	4682      	mov	sl, r0
 80186f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80186f6:	9305      	str	r3, [sp, #20]
 80186f8:	1c93      	adds	r3, r2, #2
 80186fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80186fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018702:	32fe      	adds	r2, #254	; 0xfe
 8018704:	18d1      	adds	r1, r2, r3
 8018706:	461f      	mov	r7, r3
 8018708:	f813 0b01 	ldrb.w	r0, [r3], #1
 801870c:	9100      	str	r1, [sp, #0]
 801870e:	2830      	cmp	r0, #48	; 0x30
 8018710:	d0f8      	beq.n	8018704 <__gethex+0x3c>
 8018712:	f7ff ffc3 	bl	801869c <__hexdig_fun>
 8018716:	4604      	mov	r4, r0
 8018718:	2800      	cmp	r0, #0
 801871a:	d13a      	bne.n	8018792 <__gethex+0xca>
 801871c:	9901      	ldr	r1, [sp, #4]
 801871e:	4652      	mov	r2, sl
 8018720:	4638      	mov	r0, r7
 8018722:	f001 f929 	bl	8019978 <strncmp>
 8018726:	4605      	mov	r5, r0
 8018728:	2800      	cmp	r0, #0
 801872a:	d168      	bne.n	80187fe <__gethex+0x136>
 801872c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018730:	eb07 060a 	add.w	r6, r7, sl
 8018734:	f7ff ffb2 	bl	801869c <__hexdig_fun>
 8018738:	2800      	cmp	r0, #0
 801873a:	d062      	beq.n	8018802 <__gethex+0x13a>
 801873c:	4633      	mov	r3, r6
 801873e:	7818      	ldrb	r0, [r3, #0]
 8018740:	2830      	cmp	r0, #48	; 0x30
 8018742:	461f      	mov	r7, r3
 8018744:	f103 0301 	add.w	r3, r3, #1
 8018748:	d0f9      	beq.n	801873e <__gethex+0x76>
 801874a:	f7ff ffa7 	bl	801869c <__hexdig_fun>
 801874e:	2301      	movs	r3, #1
 8018750:	fab0 f480 	clz	r4, r0
 8018754:	0964      	lsrs	r4, r4, #5
 8018756:	4635      	mov	r5, r6
 8018758:	9300      	str	r3, [sp, #0]
 801875a:	463a      	mov	r2, r7
 801875c:	4616      	mov	r6, r2
 801875e:	3201      	adds	r2, #1
 8018760:	7830      	ldrb	r0, [r6, #0]
 8018762:	f7ff ff9b 	bl	801869c <__hexdig_fun>
 8018766:	2800      	cmp	r0, #0
 8018768:	d1f8      	bne.n	801875c <__gethex+0x94>
 801876a:	9901      	ldr	r1, [sp, #4]
 801876c:	4652      	mov	r2, sl
 801876e:	4630      	mov	r0, r6
 8018770:	f001 f902 	bl	8019978 <strncmp>
 8018774:	b980      	cbnz	r0, 8018798 <__gethex+0xd0>
 8018776:	b94d      	cbnz	r5, 801878c <__gethex+0xc4>
 8018778:	eb06 050a 	add.w	r5, r6, sl
 801877c:	462a      	mov	r2, r5
 801877e:	4616      	mov	r6, r2
 8018780:	3201      	adds	r2, #1
 8018782:	7830      	ldrb	r0, [r6, #0]
 8018784:	f7ff ff8a 	bl	801869c <__hexdig_fun>
 8018788:	2800      	cmp	r0, #0
 801878a:	d1f8      	bne.n	801877e <__gethex+0xb6>
 801878c:	1bad      	subs	r5, r5, r6
 801878e:	00ad      	lsls	r5, r5, #2
 8018790:	e004      	b.n	801879c <__gethex+0xd4>
 8018792:	2400      	movs	r4, #0
 8018794:	4625      	mov	r5, r4
 8018796:	e7e0      	b.n	801875a <__gethex+0x92>
 8018798:	2d00      	cmp	r5, #0
 801879a:	d1f7      	bne.n	801878c <__gethex+0xc4>
 801879c:	7833      	ldrb	r3, [r6, #0]
 801879e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80187a2:	2b50      	cmp	r3, #80	; 0x50
 80187a4:	d13b      	bne.n	801881e <__gethex+0x156>
 80187a6:	7873      	ldrb	r3, [r6, #1]
 80187a8:	2b2b      	cmp	r3, #43	; 0x2b
 80187aa:	d02c      	beq.n	8018806 <__gethex+0x13e>
 80187ac:	2b2d      	cmp	r3, #45	; 0x2d
 80187ae:	d02e      	beq.n	801880e <__gethex+0x146>
 80187b0:	1c71      	adds	r1, r6, #1
 80187b2:	f04f 0900 	mov.w	r9, #0
 80187b6:	7808      	ldrb	r0, [r1, #0]
 80187b8:	f7ff ff70 	bl	801869c <__hexdig_fun>
 80187bc:	1e43      	subs	r3, r0, #1
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	2b18      	cmp	r3, #24
 80187c2:	d82c      	bhi.n	801881e <__gethex+0x156>
 80187c4:	f1a0 0210 	sub.w	r2, r0, #16
 80187c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80187cc:	f7ff ff66 	bl	801869c <__hexdig_fun>
 80187d0:	1e43      	subs	r3, r0, #1
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	2b18      	cmp	r3, #24
 80187d6:	d91d      	bls.n	8018814 <__gethex+0x14c>
 80187d8:	f1b9 0f00 	cmp.w	r9, #0
 80187dc:	d000      	beq.n	80187e0 <__gethex+0x118>
 80187de:	4252      	negs	r2, r2
 80187e0:	4415      	add	r5, r2
 80187e2:	f8cb 1000 	str.w	r1, [fp]
 80187e6:	b1e4      	cbz	r4, 8018822 <__gethex+0x15a>
 80187e8:	9b00      	ldr	r3, [sp, #0]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	bf14      	ite	ne
 80187ee:	2700      	movne	r7, #0
 80187f0:	2706      	moveq	r7, #6
 80187f2:	4638      	mov	r0, r7
 80187f4:	b009      	add	sp, #36	; 0x24
 80187f6:	ecbd 8b02 	vpop	{d8}
 80187fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187fe:	463e      	mov	r6, r7
 8018800:	4625      	mov	r5, r4
 8018802:	2401      	movs	r4, #1
 8018804:	e7ca      	b.n	801879c <__gethex+0xd4>
 8018806:	f04f 0900 	mov.w	r9, #0
 801880a:	1cb1      	adds	r1, r6, #2
 801880c:	e7d3      	b.n	80187b6 <__gethex+0xee>
 801880e:	f04f 0901 	mov.w	r9, #1
 8018812:	e7fa      	b.n	801880a <__gethex+0x142>
 8018814:	230a      	movs	r3, #10
 8018816:	fb03 0202 	mla	r2, r3, r2, r0
 801881a:	3a10      	subs	r2, #16
 801881c:	e7d4      	b.n	80187c8 <__gethex+0x100>
 801881e:	4631      	mov	r1, r6
 8018820:	e7df      	b.n	80187e2 <__gethex+0x11a>
 8018822:	1bf3      	subs	r3, r6, r7
 8018824:	3b01      	subs	r3, #1
 8018826:	4621      	mov	r1, r4
 8018828:	2b07      	cmp	r3, #7
 801882a:	dc0b      	bgt.n	8018844 <__gethex+0x17c>
 801882c:	ee18 0a10 	vmov	r0, s16
 8018830:	f000 fa74 	bl	8018d1c <_Balloc>
 8018834:	4604      	mov	r4, r0
 8018836:	b940      	cbnz	r0, 801884a <__gethex+0x182>
 8018838:	4b65      	ldr	r3, [pc, #404]	; (80189d0 <__gethex+0x308>)
 801883a:	4602      	mov	r2, r0
 801883c:	21de      	movs	r1, #222	; 0xde
 801883e:	4865      	ldr	r0, [pc, #404]	; (80189d4 <__gethex+0x30c>)
 8018840:	f001 f8ba 	bl	80199b8 <__assert_func>
 8018844:	3101      	adds	r1, #1
 8018846:	105b      	asrs	r3, r3, #1
 8018848:	e7ee      	b.n	8018828 <__gethex+0x160>
 801884a:	f100 0914 	add.w	r9, r0, #20
 801884e:	f04f 0b00 	mov.w	fp, #0
 8018852:	f1ca 0301 	rsb	r3, sl, #1
 8018856:	f8cd 9008 	str.w	r9, [sp, #8]
 801885a:	f8cd b000 	str.w	fp, [sp]
 801885e:	9306      	str	r3, [sp, #24]
 8018860:	42b7      	cmp	r7, r6
 8018862:	d340      	bcc.n	80188e6 <__gethex+0x21e>
 8018864:	9802      	ldr	r0, [sp, #8]
 8018866:	9b00      	ldr	r3, [sp, #0]
 8018868:	f840 3b04 	str.w	r3, [r0], #4
 801886c:	eba0 0009 	sub.w	r0, r0, r9
 8018870:	1080      	asrs	r0, r0, #2
 8018872:	0146      	lsls	r6, r0, #5
 8018874:	6120      	str	r0, [r4, #16]
 8018876:	4618      	mov	r0, r3
 8018878:	f000 fb46 	bl	8018f08 <__hi0bits>
 801887c:	1a30      	subs	r0, r6, r0
 801887e:	f8d8 6000 	ldr.w	r6, [r8]
 8018882:	42b0      	cmp	r0, r6
 8018884:	dd63      	ble.n	801894e <__gethex+0x286>
 8018886:	1b87      	subs	r7, r0, r6
 8018888:	4639      	mov	r1, r7
 801888a:	4620      	mov	r0, r4
 801888c:	f000 fee0 	bl	8019650 <__any_on>
 8018890:	4682      	mov	sl, r0
 8018892:	b1a8      	cbz	r0, 80188c0 <__gethex+0x1f8>
 8018894:	1e7b      	subs	r3, r7, #1
 8018896:	1159      	asrs	r1, r3, #5
 8018898:	f003 021f 	and.w	r2, r3, #31
 801889c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80188a0:	f04f 0a01 	mov.w	sl, #1
 80188a4:	fa0a f202 	lsl.w	r2, sl, r2
 80188a8:	420a      	tst	r2, r1
 80188aa:	d009      	beq.n	80188c0 <__gethex+0x1f8>
 80188ac:	4553      	cmp	r3, sl
 80188ae:	dd05      	ble.n	80188bc <__gethex+0x1f4>
 80188b0:	1eb9      	subs	r1, r7, #2
 80188b2:	4620      	mov	r0, r4
 80188b4:	f000 fecc 	bl	8019650 <__any_on>
 80188b8:	2800      	cmp	r0, #0
 80188ba:	d145      	bne.n	8018948 <__gethex+0x280>
 80188bc:	f04f 0a02 	mov.w	sl, #2
 80188c0:	4639      	mov	r1, r7
 80188c2:	4620      	mov	r0, r4
 80188c4:	f7ff fe98 	bl	80185f8 <rshift>
 80188c8:	443d      	add	r5, r7
 80188ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80188ce:	42ab      	cmp	r3, r5
 80188d0:	da4c      	bge.n	801896c <__gethex+0x2a4>
 80188d2:	ee18 0a10 	vmov	r0, s16
 80188d6:	4621      	mov	r1, r4
 80188d8:	f000 fa60 	bl	8018d9c <_Bfree>
 80188dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188de:	2300      	movs	r3, #0
 80188e0:	6013      	str	r3, [r2, #0]
 80188e2:	27a3      	movs	r7, #163	; 0xa3
 80188e4:	e785      	b.n	80187f2 <__gethex+0x12a>
 80188e6:	1e73      	subs	r3, r6, #1
 80188e8:	9a05      	ldr	r2, [sp, #20]
 80188ea:	9303      	str	r3, [sp, #12]
 80188ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80188f0:	4293      	cmp	r3, r2
 80188f2:	d019      	beq.n	8018928 <__gethex+0x260>
 80188f4:	f1bb 0f20 	cmp.w	fp, #32
 80188f8:	d107      	bne.n	801890a <__gethex+0x242>
 80188fa:	9b02      	ldr	r3, [sp, #8]
 80188fc:	9a00      	ldr	r2, [sp, #0]
 80188fe:	f843 2b04 	str.w	r2, [r3], #4
 8018902:	9302      	str	r3, [sp, #8]
 8018904:	2300      	movs	r3, #0
 8018906:	9300      	str	r3, [sp, #0]
 8018908:	469b      	mov	fp, r3
 801890a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801890e:	f7ff fec5 	bl	801869c <__hexdig_fun>
 8018912:	9b00      	ldr	r3, [sp, #0]
 8018914:	f000 000f 	and.w	r0, r0, #15
 8018918:	fa00 f00b 	lsl.w	r0, r0, fp
 801891c:	4303      	orrs	r3, r0
 801891e:	9300      	str	r3, [sp, #0]
 8018920:	f10b 0b04 	add.w	fp, fp, #4
 8018924:	9b03      	ldr	r3, [sp, #12]
 8018926:	e00d      	b.n	8018944 <__gethex+0x27c>
 8018928:	9b03      	ldr	r3, [sp, #12]
 801892a:	9a06      	ldr	r2, [sp, #24]
 801892c:	4413      	add	r3, r2
 801892e:	42bb      	cmp	r3, r7
 8018930:	d3e0      	bcc.n	80188f4 <__gethex+0x22c>
 8018932:	4618      	mov	r0, r3
 8018934:	9901      	ldr	r1, [sp, #4]
 8018936:	9307      	str	r3, [sp, #28]
 8018938:	4652      	mov	r2, sl
 801893a:	f001 f81d 	bl	8019978 <strncmp>
 801893e:	9b07      	ldr	r3, [sp, #28]
 8018940:	2800      	cmp	r0, #0
 8018942:	d1d7      	bne.n	80188f4 <__gethex+0x22c>
 8018944:	461e      	mov	r6, r3
 8018946:	e78b      	b.n	8018860 <__gethex+0x198>
 8018948:	f04f 0a03 	mov.w	sl, #3
 801894c:	e7b8      	b.n	80188c0 <__gethex+0x1f8>
 801894e:	da0a      	bge.n	8018966 <__gethex+0x29e>
 8018950:	1a37      	subs	r7, r6, r0
 8018952:	4621      	mov	r1, r4
 8018954:	ee18 0a10 	vmov	r0, s16
 8018958:	463a      	mov	r2, r7
 801895a:	f000 fc3b 	bl	80191d4 <__lshift>
 801895e:	1bed      	subs	r5, r5, r7
 8018960:	4604      	mov	r4, r0
 8018962:	f100 0914 	add.w	r9, r0, #20
 8018966:	f04f 0a00 	mov.w	sl, #0
 801896a:	e7ae      	b.n	80188ca <__gethex+0x202>
 801896c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018970:	42a8      	cmp	r0, r5
 8018972:	dd72      	ble.n	8018a5a <__gethex+0x392>
 8018974:	1b45      	subs	r5, r0, r5
 8018976:	42ae      	cmp	r6, r5
 8018978:	dc36      	bgt.n	80189e8 <__gethex+0x320>
 801897a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801897e:	2b02      	cmp	r3, #2
 8018980:	d02a      	beq.n	80189d8 <__gethex+0x310>
 8018982:	2b03      	cmp	r3, #3
 8018984:	d02c      	beq.n	80189e0 <__gethex+0x318>
 8018986:	2b01      	cmp	r3, #1
 8018988:	d115      	bne.n	80189b6 <__gethex+0x2ee>
 801898a:	42ae      	cmp	r6, r5
 801898c:	d113      	bne.n	80189b6 <__gethex+0x2ee>
 801898e:	2e01      	cmp	r6, #1
 8018990:	d10b      	bne.n	80189aa <__gethex+0x2e2>
 8018992:	9a04      	ldr	r2, [sp, #16]
 8018994:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018998:	6013      	str	r3, [r2, #0]
 801899a:	2301      	movs	r3, #1
 801899c:	6123      	str	r3, [r4, #16]
 801899e:	f8c9 3000 	str.w	r3, [r9]
 80189a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80189a4:	2762      	movs	r7, #98	; 0x62
 80189a6:	601c      	str	r4, [r3, #0]
 80189a8:	e723      	b.n	80187f2 <__gethex+0x12a>
 80189aa:	1e71      	subs	r1, r6, #1
 80189ac:	4620      	mov	r0, r4
 80189ae:	f000 fe4f 	bl	8019650 <__any_on>
 80189b2:	2800      	cmp	r0, #0
 80189b4:	d1ed      	bne.n	8018992 <__gethex+0x2ca>
 80189b6:	ee18 0a10 	vmov	r0, s16
 80189ba:	4621      	mov	r1, r4
 80189bc:	f000 f9ee 	bl	8018d9c <_Bfree>
 80189c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189c2:	2300      	movs	r3, #0
 80189c4:	6013      	str	r3, [r2, #0]
 80189c6:	2750      	movs	r7, #80	; 0x50
 80189c8:	e713      	b.n	80187f2 <__gethex+0x12a>
 80189ca:	bf00      	nop
 80189cc:	0801c448 	.word	0x0801c448
 80189d0:	0801c3cc 	.word	0x0801c3cc
 80189d4:	0801c3dd 	.word	0x0801c3dd
 80189d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d1eb      	bne.n	80189b6 <__gethex+0x2ee>
 80189de:	e7d8      	b.n	8018992 <__gethex+0x2ca>
 80189e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d1d5      	bne.n	8018992 <__gethex+0x2ca>
 80189e6:	e7e6      	b.n	80189b6 <__gethex+0x2ee>
 80189e8:	1e6f      	subs	r7, r5, #1
 80189ea:	f1ba 0f00 	cmp.w	sl, #0
 80189ee:	d131      	bne.n	8018a54 <__gethex+0x38c>
 80189f0:	b127      	cbz	r7, 80189fc <__gethex+0x334>
 80189f2:	4639      	mov	r1, r7
 80189f4:	4620      	mov	r0, r4
 80189f6:	f000 fe2b 	bl	8019650 <__any_on>
 80189fa:	4682      	mov	sl, r0
 80189fc:	117b      	asrs	r3, r7, #5
 80189fe:	2101      	movs	r1, #1
 8018a00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018a04:	f007 071f 	and.w	r7, r7, #31
 8018a08:	fa01 f707 	lsl.w	r7, r1, r7
 8018a0c:	421f      	tst	r7, r3
 8018a0e:	4629      	mov	r1, r5
 8018a10:	4620      	mov	r0, r4
 8018a12:	bf18      	it	ne
 8018a14:	f04a 0a02 	orrne.w	sl, sl, #2
 8018a18:	1b76      	subs	r6, r6, r5
 8018a1a:	f7ff fded 	bl	80185f8 <rshift>
 8018a1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018a22:	2702      	movs	r7, #2
 8018a24:	f1ba 0f00 	cmp.w	sl, #0
 8018a28:	d048      	beq.n	8018abc <__gethex+0x3f4>
 8018a2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a2e:	2b02      	cmp	r3, #2
 8018a30:	d015      	beq.n	8018a5e <__gethex+0x396>
 8018a32:	2b03      	cmp	r3, #3
 8018a34:	d017      	beq.n	8018a66 <__gethex+0x39e>
 8018a36:	2b01      	cmp	r3, #1
 8018a38:	d109      	bne.n	8018a4e <__gethex+0x386>
 8018a3a:	f01a 0f02 	tst.w	sl, #2
 8018a3e:	d006      	beq.n	8018a4e <__gethex+0x386>
 8018a40:	f8d9 0000 	ldr.w	r0, [r9]
 8018a44:	ea4a 0a00 	orr.w	sl, sl, r0
 8018a48:	f01a 0f01 	tst.w	sl, #1
 8018a4c:	d10e      	bne.n	8018a6c <__gethex+0x3a4>
 8018a4e:	f047 0710 	orr.w	r7, r7, #16
 8018a52:	e033      	b.n	8018abc <__gethex+0x3f4>
 8018a54:	f04f 0a01 	mov.w	sl, #1
 8018a58:	e7d0      	b.n	80189fc <__gethex+0x334>
 8018a5a:	2701      	movs	r7, #1
 8018a5c:	e7e2      	b.n	8018a24 <__gethex+0x35c>
 8018a5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a60:	f1c3 0301 	rsb	r3, r3, #1
 8018a64:	9315      	str	r3, [sp, #84]	; 0x54
 8018a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d0f0      	beq.n	8018a4e <__gethex+0x386>
 8018a6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018a70:	f104 0314 	add.w	r3, r4, #20
 8018a74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018a78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018a7c:	f04f 0c00 	mov.w	ip, #0
 8018a80:	4618      	mov	r0, r3
 8018a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a86:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018a8a:	d01c      	beq.n	8018ac6 <__gethex+0x3fe>
 8018a8c:	3201      	adds	r2, #1
 8018a8e:	6002      	str	r2, [r0, #0]
 8018a90:	2f02      	cmp	r7, #2
 8018a92:	f104 0314 	add.w	r3, r4, #20
 8018a96:	d13f      	bne.n	8018b18 <__gethex+0x450>
 8018a98:	f8d8 2000 	ldr.w	r2, [r8]
 8018a9c:	3a01      	subs	r2, #1
 8018a9e:	42b2      	cmp	r2, r6
 8018aa0:	d10a      	bne.n	8018ab8 <__gethex+0x3f0>
 8018aa2:	1171      	asrs	r1, r6, #5
 8018aa4:	2201      	movs	r2, #1
 8018aa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018aaa:	f006 061f 	and.w	r6, r6, #31
 8018aae:	fa02 f606 	lsl.w	r6, r2, r6
 8018ab2:	421e      	tst	r6, r3
 8018ab4:	bf18      	it	ne
 8018ab6:	4617      	movne	r7, r2
 8018ab8:	f047 0720 	orr.w	r7, r7, #32
 8018abc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018abe:	601c      	str	r4, [r3, #0]
 8018ac0:	9b04      	ldr	r3, [sp, #16]
 8018ac2:	601d      	str	r5, [r3, #0]
 8018ac4:	e695      	b.n	80187f2 <__gethex+0x12a>
 8018ac6:	4299      	cmp	r1, r3
 8018ac8:	f843 cc04 	str.w	ip, [r3, #-4]
 8018acc:	d8d8      	bhi.n	8018a80 <__gethex+0x3b8>
 8018ace:	68a3      	ldr	r3, [r4, #8]
 8018ad0:	459b      	cmp	fp, r3
 8018ad2:	db19      	blt.n	8018b08 <__gethex+0x440>
 8018ad4:	6861      	ldr	r1, [r4, #4]
 8018ad6:	ee18 0a10 	vmov	r0, s16
 8018ada:	3101      	adds	r1, #1
 8018adc:	f000 f91e 	bl	8018d1c <_Balloc>
 8018ae0:	4681      	mov	r9, r0
 8018ae2:	b918      	cbnz	r0, 8018aec <__gethex+0x424>
 8018ae4:	4b1a      	ldr	r3, [pc, #104]	; (8018b50 <__gethex+0x488>)
 8018ae6:	4602      	mov	r2, r0
 8018ae8:	2184      	movs	r1, #132	; 0x84
 8018aea:	e6a8      	b.n	801883e <__gethex+0x176>
 8018aec:	6922      	ldr	r2, [r4, #16]
 8018aee:	3202      	adds	r2, #2
 8018af0:	f104 010c 	add.w	r1, r4, #12
 8018af4:	0092      	lsls	r2, r2, #2
 8018af6:	300c      	adds	r0, #12
 8018af8:	f7fd f892 	bl	8015c20 <memcpy>
 8018afc:	4621      	mov	r1, r4
 8018afe:	ee18 0a10 	vmov	r0, s16
 8018b02:	f000 f94b 	bl	8018d9c <_Bfree>
 8018b06:	464c      	mov	r4, r9
 8018b08:	6923      	ldr	r3, [r4, #16]
 8018b0a:	1c5a      	adds	r2, r3, #1
 8018b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018b10:	6122      	str	r2, [r4, #16]
 8018b12:	2201      	movs	r2, #1
 8018b14:	615a      	str	r2, [r3, #20]
 8018b16:	e7bb      	b.n	8018a90 <__gethex+0x3c8>
 8018b18:	6922      	ldr	r2, [r4, #16]
 8018b1a:	455a      	cmp	r2, fp
 8018b1c:	dd0b      	ble.n	8018b36 <__gethex+0x46e>
 8018b1e:	2101      	movs	r1, #1
 8018b20:	4620      	mov	r0, r4
 8018b22:	f7ff fd69 	bl	80185f8 <rshift>
 8018b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b2a:	3501      	adds	r5, #1
 8018b2c:	42ab      	cmp	r3, r5
 8018b2e:	f6ff aed0 	blt.w	80188d2 <__gethex+0x20a>
 8018b32:	2701      	movs	r7, #1
 8018b34:	e7c0      	b.n	8018ab8 <__gethex+0x3f0>
 8018b36:	f016 061f 	ands.w	r6, r6, #31
 8018b3a:	d0fa      	beq.n	8018b32 <__gethex+0x46a>
 8018b3c:	449a      	add	sl, r3
 8018b3e:	f1c6 0620 	rsb	r6, r6, #32
 8018b42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018b46:	f000 f9df 	bl	8018f08 <__hi0bits>
 8018b4a:	42b0      	cmp	r0, r6
 8018b4c:	dbe7      	blt.n	8018b1e <__gethex+0x456>
 8018b4e:	e7f0      	b.n	8018b32 <__gethex+0x46a>
 8018b50:	0801c3cc 	.word	0x0801c3cc

08018b54 <L_shift>:
 8018b54:	f1c2 0208 	rsb	r2, r2, #8
 8018b58:	0092      	lsls	r2, r2, #2
 8018b5a:	b570      	push	{r4, r5, r6, lr}
 8018b5c:	f1c2 0620 	rsb	r6, r2, #32
 8018b60:	6843      	ldr	r3, [r0, #4]
 8018b62:	6804      	ldr	r4, [r0, #0]
 8018b64:	fa03 f506 	lsl.w	r5, r3, r6
 8018b68:	432c      	orrs	r4, r5
 8018b6a:	40d3      	lsrs	r3, r2
 8018b6c:	6004      	str	r4, [r0, #0]
 8018b6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018b72:	4288      	cmp	r0, r1
 8018b74:	d3f4      	bcc.n	8018b60 <L_shift+0xc>
 8018b76:	bd70      	pop	{r4, r5, r6, pc}

08018b78 <__match>:
 8018b78:	b530      	push	{r4, r5, lr}
 8018b7a:	6803      	ldr	r3, [r0, #0]
 8018b7c:	3301      	adds	r3, #1
 8018b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b82:	b914      	cbnz	r4, 8018b8a <__match+0x12>
 8018b84:	6003      	str	r3, [r0, #0]
 8018b86:	2001      	movs	r0, #1
 8018b88:	bd30      	pop	{r4, r5, pc}
 8018b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018b92:	2d19      	cmp	r5, #25
 8018b94:	bf98      	it	ls
 8018b96:	3220      	addls	r2, #32
 8018b98:	42a2      	cmp	r2, r4
 8018b9a:	d0f0      	beq.n	8018b7e <__match+0x6>
 8018b9c:	2000      	movs	r0, #0
 8018b9e:	e7f3      	b.n	8018b88 <__match+0x10>

08018ba0 <__hexnan>:
 8018ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ba4:	680b      	ldr	r3, [r1, #0]
 8018ba6:	6801      	ldr	r1, [r0, #0]
 8018ba8:	115e      	asrs	r6, r3, #5
 8018baa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018bae:	f013 031f 	ands.w	r3, r3, #31
 8018bb2:	b087      	sub	sp, #28
 8018bb4:	bf18      	it	ne
 8018bb6:	3604      	addne	r6, #4
 8018bb8:	2500      	movs	r5, #0
 8018bba:	1f37      	subs	r7, r6, #4
 8018bbc:	4682      	mov	sl, r0
 8018bbe:	4690      	mov	r8, r2
 8018bc0:	9301      	str	r3, [sp, #4]
 8018bc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8018bc6:	46b9      	mov	r9, r7
 8018bc8:	463c      	mov	r4, r7
 8018bca:	9502      	str	r5, [sp, #8]
 8018bcc:	46ab      	mov	fp, r5
 8018bce:	784a      	ldrb	r2, [r1, #1]
 8018bd0:	1c4b      	adds	r3, r1, #1
 8018bd2:	9303      	str	r3, [sp, #12]
 8018bd4:	b342      	cbz	r2, 8018c28 <__hexnan+0x88>
 8018bd6:	4610      	mov	r0, r2
 8018bd8:	9105      	str	r1, [sp, #20]
 8018bda:	9204      	str	r2, [sp, #16]
 8018bdc:	f7ff fd5e 	bl	801869c <__hexdig_fun>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	d14f      	bne.n	8018c84 <__hexnan+0xe4>
 8018be4:	9a04      	ldr	r2, [sp, #16]
 8018be6:	9905      	ldr	r1, [sp, #20]
 8018be8:	2a20      	cmp	r2, #32
 8018bea:	d818      	bhi.n	8018c1e <__hexnan+0x7e>
 8018bec:	9b02      	ldr	r3, [sp, #8]
 8018bee:	459b      	cmp	fp, r3
 8018bf0:	dd13      	ble.n	8018c1a <__hexnan+0x7a>
 8018bf2:	454c      	cmp	r4, r9
 8018bf4:	d206      	bcs.n	8018c04 <__hexnan+0x64>
 8018bf6:	2d07      	cmp	r5, #7
 8018bf8:	dc04      	bgt.n	8018c04 <__hexnan+0x64>
 8018bfa:	462a      	mov	r2, r5
 8018bfc:	4649      	mov	r1, r9
 8018bfe:	4620      	mov	r0, r4
 8018c00:	f7ff ffa8 	bl	8018b54 <L_shift>
 8018c04:	4544      	cmp	r4, r8
 8018c06:	d950      	bls.n	8018caa <__hexnan+0x10a>
 8018c08:	2300      	movs	r3, #0
 8018c0a:	f1a4 0904 	sub.w	r9, r4, #4
 8018c0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c12:	f8cd b008 	str.w	fp, [sp, #8]
 8018c16:	464c      	mov	r4, r9
 8018c18:	461d      	mov	r5, r3
 8018c1a:	9903      	ldr	r1, [sp, #12]
 8018c1c:	e7d7      	b.n	8018bce <__hexnan+0x2e>
 8018c1e:	2a29      	cmp	r2, #41	; 0x29
 8018c20:	d156      	bne.n	8018cd0 <__hexnan+0x130>
 8018c22:	3102      	adds	r1, #2
 8018c24:	f8ca 1000 	str.w	r1, [sl]
 8018c28:	f1bb 0f00 	cmp.w	fp, #0
 8018c2c:	d050      	beq.n	8018cd0 <__hexnan+0x130>
 8018c2e:	454c      	cmp	r4, r9
 8018c30:	d206      	bcs.n	8018c40 <__hexnan+0xa0>
 8018c32:	2d07      	cmp	r5, #7
 8018c34:	dc04      	bgt.n	8018c40 <__hexnan+0xa0>
 8018c36:	462a      	mov	r2, r5
 8018c38:	4649      	mov	r1, r9
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f7ff ff8a 	bl	8018b54 <L_shift>
 8018c40:	4544      	cmp	r4, r8
 8018c42:	d934      	bls.n	8018cae <__hexnan+0x10e>
 8018c44:	f1a8 0204 	sub.w	r2, r8, #4
 8018c48:	4623      	mov	r3, r4
 8018c4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018c4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018c52:	429f      	cmp	r7, r3
 8018c54:	d2f9      	bcs.n	8018c4a <__hexnan+0xaa>
 8018c56:	1b3b      	subs	r3, r7, r4
 8018c58:	f023 0303 	bic.w	r3, r3, #3
 8018c5c:	3304      	adds	r3, #4
 8018c5e:	3401      	adds	r4, #1
 8018c60:	3e03      	subs	r6, #3
 8018c62:	42b4      	cmp	r4, r6
 8018c64:	bf88      	it	hi
 8018c66:	2304      	movhi	r3, #4
 8018c68:	4443      	add	r3, r8
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	f843 2b04 	str.w	r2, [r3], #4
 8018c70:	429f      	cmp	r7, r3
 8018c72:	d2fb      	bcs.n	8018c6c <__hexnan+0xcc>
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	b91b      	cbnz	r3, 8018c80 <__hexnan+0xe0>
 8018c78:	4547      	cmp	r7, r8
 8018c7a:	d127      	bne.n	8018ccc <__hexnan+0x12c>
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	603b      	str	r3, [r7, #0]
 8018c80:	2005      	movs	r0, #5
 8018c82:	e026      	b.n	8018cd2 <__hexnan+0x132>
 8018c84:	3501      	adds	r5, #1
 8018c86:	2d08      	cmp	r5, #8
 8018c88:	f10b 0b01 	add.w	fp, fp, #1
 8018c8c:	dd06      	ble.n	8018c9c <__hexnan+0xfc>
 8018c8e:	4544      	cmp	r4, r8
 8018c90:	d9c3      	bls.n	8018c1a <__hexnan+0x7a>
 8018c92:	2300      	movs	r3, #0
 8018c94:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c98:	2501      	movs	r5, #1
 8018c9a:	3c04      	subs	r4, #4
 8018c9c:	6822      	ldr	r2, [r4, #0]
 8018c9e:	f000 000f 	and.w	r0, r0, #15
 8018ca2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018ca6:	6022      	str	r2, [r4, #0]
 8018ca8:	e7b7      	b.n	8018c1a <__hexnan+0x7a>
 8018caa:	2508      	movs	r5, #8
 8018cac:	e7b5      	b.n	8018c1a <__hexnan+0x7a>
 8018cae:	9b01      	ldr	r3, [sp, #4]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d0df      	beq.n	8018c74 <__hexnan+0xd4>
 8018cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8018cb8:	f1c3 0320 	rsb	r3, r3, #32
 8018cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8018cc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018cc4:	401a      	ands	r2, r3
 8018cc6:	f846 2c04 	str.w	r2, [r6, #-4]
 8018cca:	e7d3      	b.n	8018c74 <__hexnan+0xd4>
 8018ccc:	3f04      	subs	r7, #4
 8018cce:	e7d1      	b.n	8018c74 <__hexnan+0xd4>
 8018cd0:	2004      	movs	r0, #4
 8018cd2:	b007      	add	sp, #28
 8018cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cd8 <_localeconv_r>:
 8018cd8:	4800      	ldr	r0, [pc, #0]	; (8018cdc <_localeconv_r+0x4>)
 8018cda:	4770      	bx	lr
 8018cdc:	20002368 	.word	0x20002368

08018ce0 <__ascii_mbtowc>:
 8018ce0:	b082      	sub	sp, #8
 8018ce2:	b901      	cbnz	r1, 8018ce6 <__ascii_mbtowc+0x6>
 8018ce4:	a901      	add	r1, sp, #4
 8018ce6:	b142      	cbz	r2, 8018cfa <__ascii_mbtowc+0x1a>
 8018ce8:	b14b      	cbz	r3, 8018cfe <__ascii_mbtowc+0x1e>
 8018cea:	7813      	ldrb	r3, [r2, #0]
 8018cec:	600b      	str	r3, [r1, #0]
 8018cee:	7812      	ldrb	r2, [r2, #0]
 8018cf0:	1e10      	subs	r0, r2, #0
 8018cf2:	bf18      	it	ne
 8018cf4:	2001      	movne	r0, #1
 8018cf6:	b002      	add	sp, #8
 8018cf8:	4770      	bx	lr
 8018cfa:	4610      	mov	r0, r2
 8018cfc:	e7fb      	b.n	8018cf6 <__ascii_mbtowc+0x16>
 8018cfe:	f06f 0001 	mvn.w	r0, #1
 8018d02:	e7f8      	b.n	8018cf6 <__ascii_mbtowc+0x16>

08018d04 <__malloc_lock>:
 8018d04:	4801      	ldr	r0, [pc, #4]	; (8018d0c <__malloc_lock+0x8>)
 8018d06:	f000 be88 	b.w	8019a1a <__retarget_lock_acquire_recursive>
 8018d0a:	bf00      	nop
 8018d0c:	2000fb44 	.word	0x2000fb44

08018d10 <__malloc_unlock>:
 8018d10:	4801      	ldr	r0, [pc, #4]	; (8018d18 <__malloc_unlock+0x8>)
 8018d12:	f000 be83 	b.w	8019a1c <__retarget_lock_release_recursive>
 8018d16:	bf00      	nop
 8018d18:	2000fb44 	.word	0x2000fb44

08018d1c <_Balloc>:
 8018d1c:	b570      	push	{r4, r5, r6, lr}
 8018d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018d20:	4604      	mov	r4, r0
 8018d22:	460d      	mov	r5, r1
 8018d24:	b976      	cbnz	r6, 8018d44 <_Balloc+0x28>
 8018d26:	2010      	movs	r0, #16
 8018d28:	f7fc ff6a 	bl	8015c00 <malloc>
 8018d2c:	4602      	mov	r2, r0
 8018d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8018d30:	b920      	cbnz	r0, 8018d3c <_Balloc+0x20>
 8018d32:	4b18      	ldr	r3, [pc, #96]	; (8018d94 <_Balloc+0x78>)
 8018d34:	4818      	ldr	r0, [pc, #96]	; (8018d98 <_Balloc+0x7c>)
 8018d36:	2166      	movs	r1, #102	; 0x66
 8018d38:	f000 fe3e 	bl	80199b8 <__assert_func>
 8018d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018d40:	6006      	str	r6, [r0, #0]
 8018d42:	60c6      	str	r6, [r0, #12]
 8018d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018d46:	68f3      	ldr	r3, [r6, #12]
 8018d48:	b183      	cbz	r3, 8018d6c <_Balloc+0x50>
 8018d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d4c:	68db      	ldr	r3, [r3, #12]
 8018d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018d52:	b9b8      	cbnz	r0, 8018d84 <_Balloc+0x68>
 8018d54:	2101      	movs	r1, #1
 8018d56:	fa01 f605 	lsl.w	r6, r1, r5
 8018d5a:	1d72      	adds	r2, r6, #5
 8018d5c:	0092      	lsls	r2, r2, #2
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f000 fc97 	bl	8019692 <_calloc_r>
 8018d64:	b160      	cbz	r0, 8018d80 <_Balloc+0x64>
 8018d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018d6a:	e00e      	b.n	8018d8a <_Balloc+0x6e>
 8018d6c:	2221      	movs	r2, #33	; 0x21
 8018d6e:	2104      	movs	r1, #4
 8018d70:	4620      	mov	r0, r4
 8018d72:	f000 fc8e 	bl	8019692 <_calloc_r>
 8018d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d78:	60f0      	str	r0, [r6, #12]
 8018d7a:	68db      	ldr	r3, [r3, #12]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d1e4      	bne.n	8018d4a <_Balloc+0x2e>
 8018d80:	2000      	movs	r0, #0
 8018d82:	bd70      	pop	{r4, r5, r6, pc}
 8018d84:	6802      	ldr	r2, [r0, #0]
 8018d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018d90:	e7f7      	b.n	8018d82 <_Balloc+0x66>
 8018d92:	bf00      	nop
 8018d94:	0801c356 	.word	0x0801c356
 8018d98:	0801c45c 	.word	0x0801c45c

08018d9c <_Bfree>:
 8018d9c:	b570      	push	{r4, r5, r6, lr}
 8018d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018da0:	4605      	mov	r5, r0
 8018da2:	460c      	mov	r4, r1
 8018da4:	b976      	cbnz	r6, 8018dc4 <_Bfree+0x28>
 8018da6:	2010      	movs	r0, #16
 8018da8:	f7fc ff2a 	bl	8015c00 <malloc>
 8018dac:	4602      	mov	r2, r0
 8018dae:	6268      	str	r0, [r5, #36]	; 0x24
 8018db0:	b920      	cbnz	r0, 8018dbc <_Bfree+0x20>
 8018db2:	4b09      	ldr	r3, [pc, #36]	; (8018dd8 <_Bfree+0x3c>)
 8018db4:	4809      	ldr	r0, [pc, #36]	; (8018ddc <_Bfree+0x40>)
 8018db6:	218a      	movs	r1, #138	; 0x8a
 8018db8:	f000 fdfe 	bl	80199b8 <__assert_func>
 8018dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018dc0:	6006      	str	r6, [r0, #0]
 8018dc2:	60c6      	str	r6, [r0, #12]
 8018dc4:	b13c      	cbz	r4, 8018dd6 <_Bfree+0x3a>
 8018dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018dc8:	6862      	ldr	r2, [r4, #4]
 8018dca:	68db      	ldr	r3, [r3, #12]
 8018dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018dd0:	6021      	str	r1, [r4, #0]
 8018dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018dd6:	bd70      	pop	{r4, r5, r6, pc}
 8018dd8:	0801c356 	.word	0x0801c356
 8018ddc:	0801c45c 	.word	0x0801c45c

08018de0 <__multadd>:
 8018de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018de4:	690e      	ldr	r6, [r1, #16]
 8018de6:	4607      	mov	r7, r0
 8018de8:	4698      	mov	r8, r3
 8018dea:	460c      	mov	r4, r1
 8018dec:	f101 0014 	add.w	r0, r1, #20
 8018df0:	2300      	movs	r3, #0
 8018df2:	6805      	ldr	r5, [r0, #0]
 8018df4:	b2a9      	uxth	r1, r5
 8018df6:	fb02 8101 	mla	r1, r2, r1, r8
 8018dfa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018dfe:	0c2d      	lsrs	r5, r5, #16
 8018e00:	fb02 c505 	mla	r5, r2, r5, ip
 8018e04:	b289      	uxth	r1, r1
 8018e06:	3301      	adds	r3, #1
 8018e08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018e0c:	429e      	cmp	r6, r3
 8018e0e:	f840 1b04 	str.w	r1, [r0], #4
 8018e12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018e16:	dcec      	bgt.n	8018df2 <__multadd+0x12>
 8018e18:	f1b8 0f00 	cmp.w	r8, #0
 8018e1c:	d022      	beq.n	8018e64 <__multadd+0x84>
 8018e1e:	68a3      	ldr	r3, [r4, #8]
 8018e20:	42b3      	cmp	r3, r6
 8018e22:	dc19      	bgt.n	8018e58 <__multadd+0x78>
 8018e24:	6861      	ldr	r1, [r4, #4]
 8018e26:	4638      	mov	r0, r7
 8018e28:	3101      	adds	r1, #1
 8018e2a:	f7ff ff77 	bl	8018d1c <_Balloc>
 8018e2e:	4605      	mov	r5, r0
 8018e30:	b928      	cbnz	r0, 8018e3e <__multadd+0x5e>
 8018e32:	4602      	mov	r2, r0
 8018e34:	4b0d      	ldr	r3, [pc, #52]	; (8018e6c <__multadd+0x8c>)
 8018e36:	480e      	ldr	r0, [pc, #56]	; (8018e70 <__multadd+0x90>)
 8018e38:	21b5      	movs	r1, #181	; 0xb5
 8018e3a:	f000 fdbd 	bl	80199b8 <__assert_func>
 8018e3e:	6922      	ldr	r2, [r4, #16]
 8018e40:	3202      	adds	r2, #2
 8018e42:	f104 010c 	add.w	r1, r4, #12
 8018e46:	0092      	lsls	r2, r2, #2
 8018e48:	300c      	adds	r0, #12
 8018e4a:	f7fc fee9 	bl	8015c20 <memcpy>
 8018e4e:	4621      	mov	r1, r4
 8018e50:	4638      	mov	r0, r7
 8018e52:	f7ff ffa3 	bl	8018d9c <_Bfree>
 8018e56:	462c      	mov	r4, r5
 8018e58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018e5c:	3601      	adds	r6, #1
 8018e5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8018e62:	6126      	str	r6, [r4, #16]
 8018e64:	4620      	mov	r0, r4
 8018e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e6a:	bf00      	nop
 8018e6c:	0801c3cc 	.word	0x0801c3cc
 8018e70:	0801c45c 	.word	0x0801c45c

08018e74 <__s2b>:
 8018e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e78:	460c      	mov	r4, r1
 8018e7a:	4615      	mov	r5, r2
 8018e7c:	461f      	mov	r7, r3
 8018e7e:	2209      	movs	r2, #9
 8018e80:	3308      	adds	r3, #8
 8018e82:	4606      	mov	r6, r0
 8018e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8018e88:	2100      	movs	r1, #0
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	429a      	cmp	r2, r3
 8018e8e:	db09      	blt.n	8018ea4 <__s2b+0x30>
 8018e90:	4630      	mov	r0, r6
 8018e92:	f7ff ff43 	bl	8018d1c <_Balloc>
 8018e96:	b940      	cbnz	r0, 8018eaa <__s2b+0x36>
 8018e98:	4602      	mov	r2, r0
 8018e9a:	4b19      	ldr	r3, [pc, #100]	; (8018f00 <__s2b+0x8c>)
 8018e9c:	4819      	ldr	r0, [pc, #100]	; (8018f04 <__s2b+0x90>)
 8018e9e:	21ce      	movs	r1, #206	; 0xce
 8018ea0:	f000 fd8a 	bl	80199b8 <__assert_func>
 8018ea4:	0052      	lsls	r2, r2, #1
 8018ea6:	3101      	adds	r1, #1
 8018ea8:	e7f0      	b.n	8018e8c <__s2b+0x18>
 8018eaa:	9b08      	ldr	r3, [sp, #32]
 8018eac:	6143      	str	r3, [r0, #20]
 8018eae:	2d09      	cmp	r5, #9
 8018eb0:	f04f 0301 	mov.w	r3, #1
 8018eb4:	6103      	str	r3, [r0, #16]
 8018eb6:	dd16      	ble.n	8018ee6 <__s2b+0x72>
 8018eb8:	f104 0909 	add.w	r9, r4, #9
 8018ebc:	46c8      	mov	r8, r9
 8018ebe:	442c      	add	r4, r5
 8018ec0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018ec4:	4601      	mov	r1, r0
 8018ec6:	3b30      	subs	r3, #48	; 0x30
 8018ec8:	220a      	movs	r2, #10
 8018eca:	4630      	mov	r0, r6
 8018ecc:	f7ff ff88 	bl	8018de0 <__multadd>
 8018ed0:	45a0      	cmp	r8, r4
 8018ed2:	d1f5      	bne.n	8018ec0 <__s2b+0x4c>
 8018ed4:	f1a5 0408 	sub.w	r4, r5, #8
 8018ed8:	444c      	add	r4, r9
 8018eda:	1b2d      	subs	r5, r5, r4
 8018edc:	1963      	adds	r3, r4, r5
 8018ede:	42bb      	cmp	r3, r7
 8018ee0:	db04      	blt.n	8018eec <__s2b+0x78>
 8018ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ee6:	340a      	adds	r4, #10
 8018ee8:	2509      	movs	r5, #9
 8018eea:	e7f6      	b.n	8018eda <__s2b+0x66>
 8018eec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018ef0:	4601      	mov	r1, r0
 8018ef2:	3b30      	subs	r3, #48	; 0x30
 8018ef4:	220a      	movs	r2, #10
 8018ef6:	4630      	mov	r0, r6
 8018ef8:	f7ff ff72 	bl	8018de0 <__multadd>
 8018efc:	e7ee      	b.n	8018edc <__s2b+0x68>
 8018efe:	bf00      	nop
 8018f00:	0801c3cc 	.word	0x0801c3cc
 8018f04:	0801c45c 	.word	0x0801c45c

08018f08 <__hi0bits>:
 8018f08:	0c03      	lsrs	r3, r0, #16
 8018f0a:	041b      	lsls	r3, r3, #16
 8018f0c:	b9d3      	cbnz	r3, 8018f44 <__hi0bits+0x3c>
 8018f0e:	0400      	lsls	r0, r0, #16
 8018f10:	2310      	movs	r3, #16
 8018f12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018f16:	bf04      	itt	eq
 8018f18:	0200      	lsleq	r0, r0, #8
 8018f1a:	3308      	addeq	r3, #8
 8018f1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018f20:	bf04      	itt	eq
 8018f22:	0100      	lsleq	r0, r0, #4
 8018f24:	3304      	addeq	r3, #4
 8018f26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018f2a:	bf04      	itt	eq
 8018f2c:	0080      	lsleq	r0, r0, #2
 8018f2e:	3302      	addeq	r3, #2
 8018f30:	2800      	cmp	r0, #0
 8018f32:	db05      	blt.n	8018f40 <__hi0bits+0x38>
 8018f34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018f38:	f103 0301 	add.w	r3, r3, #1
 8018f3c:	bf08      	it	eq
 8018f3e:	2320      	moveq	r3, #32
 8018f40:	4618      	mov	r0, r3
 8018f42:	4770      	bx	lr
 8018f44:	2300      	movs	r3, #0
 8018f46:	e7e4      	b.n	8018f12 <__hi0bits+0xa>

08018f48 <__lo0bits>:
 8018f48:	6803      	ldr	r3, [r0, #0]
 8018f4a:	f013 0207 	ands.w	r2, r3, #7
 8018f4e:	4601      	mov	r1, r0
 8018f50:	d00b      	beq.n	8018f6a <__lo0bits+0x22>
 8018f52:	07da      	lsls	r2, r3, #31
 8018f54:	d424      	bmi.n	8018fa0 <__lo0bits+0x58>
 8018f56:	0798      	lsls	r0, r3, #30
 8018f58:	bf49      	itett	mi
 8018f5a:	085b      	lsrmi	r3, r3, #1
 8018f5c:	089b      	lsrpl	r3, r3, #2
 8018f5e:	2001      	movmi	r0, #1
 8018f60:	600b      	strmi	r3, [r1, #0]
 8018f62:	bf5c      	itt	pl
 8018f64:	600b      	strpl	r3, [r1, #0]
 8018f66:	2002      	movpl	r0, #2
 8018f68:	4770      	bx	lr
 8018f6a:	b298      	uxth	r0, r3
 8018f6c:	b9b0      	cbnz	r0, 8018f9c <__lo0bits+0x54>
 8018f6e:	0c1b      	lsrs	r3, r3, #16
 8018f70:	2010      	movs	r0, #16
 8018f72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018f76:	bf04      	itt	eq
 8018f78:	0a1b      	lsreq	r3, r3, #8
 8018f7a:	3008      	addeq	r0, #8
 8018f7c:	071a      	lsls	r2, r3, #28
 8018f7e:	bf04      	itt	eq
 8018f80:	091b      	lsreq	r3, r3, #4
 8018f82:	3004      	addeq	r0, #4
 8018f84:	079a      	lsls	r2, r3, #30
 8018f86:	bf04      	itt	eq
 8018f88:	089b      	lsreq	r3, r3, #2
 8018f8a:	3002      	addeq	r0, #2
 8018f8c:	07da      	lsls	r2, r3, #31
 8018f8e:	d403      	bmi.n	8018f98 <__lo0bits+0x50>
 8018f90:	085b      	lsrs	r3, r3, #1
 8018f92:	f100 0001 	add.w	r0, r0, #1
 8018f96:	d005      	beq.n	8018fa4 <__lo0bits+0x5c>
 8018f98:	600b      	str	r3, [r1, #0]
 8018f9a:	4770      	bx	lr
 8018f9c:	4610      	mov	r0, r2
 8018f9e:	e7e8      	b.n	8018f72 <__lo0bits+0x2a>
 8018fa0:	2000      	movs	r0, #0
 8018fa2:	4770      	bx	lr
 8018fa4:	2020      	movs	r0, #32
 8018fa6:	4770      	bx	lr

08018fa8 <__i2b>:
 8018fa8:	b510      	push	{r4, lr}
 8018faa:	460c      	mov	r4, r1
 8018fac:	2101      	movs	r1, #1
 8018fae:	f7ff feb5 	bl	8018d1c <_Balloc>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	b928      	cbnz	r0, 8018fc2 <__i2b+0x1a>
 8018fb6:	4b05      	ldr	r3, [pc, #20]	; (8018fcc <__i2b+0x24>)
 8018fb8:	4805      	ldr	r0, [pc, #20]	; (8018fd0 <__i2b+0x28>)
 8018fba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018fbe:	f000 fcfb 	bl	80199b8 <__assert_func>
 8018fc2:	2301      	movs	r3, #1
 8018fc4:	6144      	str	r4, [r0, #20]
 8018fc6:	6103      	str	r3, [r0, #16]
 8018fc8:	bd10      	pop	{r4, pc}
 8018fca:	bf00      	nop
 8018fcc:	0801c3cc 	.word	0x0801c3cc
 8018fd0:	0801c45c 	.word	0x0801c45c

08018fd4 <__multiply>:
 8018fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd8:	4614      	mov	r4, r2
 8018fda:	690a      	ldr	r2, [r1, #16]
 8018fdc:	6923      	ldr	r3, [r4, #16]
 8018fde:	429a      	cmp	r2, r3
 8018fe0:	bfb8      	it	lt
 8018fe2:	460b      	movlt	r3, r1
 8018fe4:	460d      	mov	r5, r1
 8018fe6:	bfbc      	itt	lt
 8018fe8:	4625      	movlt	r5, r4
 8018fea:	461c      	movlt	r4, r3
 8018fec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018ff0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018ff4:	68ab      	ldr	r3, [r5, #8]
 8018ff6:	6869      	ldr	r1, [r5, #4]
 8018ff8:	eb0a 0709 	add.w	r7, sl, r9
 8018ffc:	42bb      	cmp	r3, r7
 8018ffe:	b085      	sub	sp, #20
 8019000:	bfb8      	it	lt
 8019002:	3101      	addlt	r1, #1
 8019004:	f7ff fe8a 	bl	8018d1c <_Balloc>
 8019008:	b930      	cbnz	r0, 8019018 <__multiply+0x44>
 801900a:	4602      	mov	r2, r0
 801900c:	4b42      	ldr	r3, [pc, #264]	; (8019118 <__multiply+0x144>)
 801900e:	4843      	ldr	r0, [pc, #268]	; (801911c <__multiply+0x148>)
 8019010:	f240 115d 	movw	r1, #349	; 0x15d
 8019014:	f000 fcd0 	bl	80199b8 <__assert_func>
 8019018:	f100 0614 	add.w	r6, r0, #20
 801901c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019020:	4633      	mov	r3, r6
 8019022:	2200      	movs	r2, #0
 8019024:	4543      	cmp	r3, r8
 8019026:	d31e      	bcc.n	8019066 <__multiply+0x92>
 8019028:	f105 0c14 	add.w	ip, r5, #20
 801902c:	f104 0314 	add.w	r3, r4, #20
 8019030:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019034:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019038:	9202      	str	r2, [sp, #8]
 801903a:	ebac 0205 	sub.w	r2, ip, r5
 801903e:	3a15      	subs	r2, #21
 8019040:	f022 0203 	bic.w	r2, r2, #3
 8019044:	3204      	adds	r2, #4
 8019046:	f105 0115 	add.w	r1, r5, #21
 801904a:	458c      	cmp	ip, r1
 801904c:	bf38      	it	cc
 801904e:	2204      	movcc	r2, #4
 8019050:	9201      	str	r2, [sp, #4]
 8019052:	9a02      	ldr	r2, [sp, #8]
 8019054:	9303      	str	r3, [sp, #12]
 8019056:	429a      	cmp	r2, r3
 8019058:	d808      	bhi.n	801906c <__multiply+0x98>
 801905a:	2f00      	cmp	r7, #0
 801905c:	dc55      	bgt.n	801910a <__multiply+0x136>
 801905e:	6107      	str	r7, [r0, #16]
 8019060:	b005      	add	sp, #20
 8019062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019066:	f843 2b04 	str.w	r2, [r3], #4
 801906a:	e7db      	b.n	8019024 <__multiply+0x50>
 801906c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019070:	f1ba 0f00 	cmp.w	sl, #0
 8019074:	d020      	beq.n	80190b8 <__multiply+0xe4>
 8019076:	f105 0e14 	add.w	lr, r5, #20
 801907a:	46b1      	mov	r9, r6
 801907c:	2200      	movs	r2, #0
 801907e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019082:	f8d9 b000 	ldr.w	fp, [r9]
 8019086:	b2a1      	uxth	r1, r4
 8019088:	fa1f fb8b 	uxth.w	fp, fp
 801908c:	fb0a b101 	mla	r1, sl, r1, fp
 8019090:	4411      	add	r1, r2
 8019092:	f8d9 2000 	ldr.w	r2, [r9]
 8019096:	0c24      	lsrs	r4, r4, #16
 8019098:	0c12      	lsrs	r2, r2, #16
 801909a:	fb0a 2404 	mla	r4, sl, r4, r2
 801909e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80190a2:	b289      	uxth	r1, r1
 80190a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80190a8:	45f4      	cmp	ip, lr
 80190aa:	f849 1b04 	str.w	r1, [r9], #4
 80190ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80190b2:	d8e4      	bhi.n	801907e <__multiply+0xaa>
 80190b4:	9901      	ldr	r1, [sp, #4]
 80190b6:	5072      	str	r2, [r6, r1]
 80190b8:	9a03      	ldr	r2, [sp, #12]
 80190ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80190be:	3304      	adds	r3, #4
 80190c0:	f1b9 0f00 	cmp.w	r9, #0
 80190c4:	d01f      	beq.n	8019106 <__multiply+0x132>
 80190c6:	6834      	ldr	r4, [r6, #0]
 80190c8:	f105 0114 	add.w	r1, r5, #20
 80190cc:	46b6      	mov	lr, r6
 80190ce:	f04f 0a00 	mov.w	sl, #0
 80190d2:	880a      	ldrh	r2, [r1, #0]
 80190d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80190d8:	fb09 b202 	mla	r2, r9, r2, fp
 80190dc:	4492      	add	sl, r2
 80190de:	b2a4      	uxth	r4, r4
 80190e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80190e4:	f84e 4b04 	str.w	r4, [lr], #4
 80190e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80190ec:	f8be 2000 	ldrh.w	r2, [lr]
 80190f0:	0c24      	lsrs	r4, r4, #16
 80190f2:	fb09 2404 	mla	r4, r9, r4, r2
 80190f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80190fa:	458c      	cmp	ip, r1
 80190fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019100:	d8e7      	bhi.n	80190d2 <__multiply+0xfe>
 8019102:	9a01      	ldr	r2, [sp, #4]
 8019104:	50b4      	str	r4, [r6, r2]
 8019106:	3604      	adds	r6, #4
 8019108:	e7a3      	b.n	8019052 <__multiply+0x7e>
 801910a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801910e:	2b00      	cmp	r3, #0
 8019110:	d1a5      	bne.n	801905e <__multiply+0x8a>
 8019112:	3f01      	subs	r7, #1
 8019114:	e7a1      	b.n	801905a <__multiply+0x86>
 8019116:	bf00      	nop
 8019118:	0801c3cc 	.word	0x0801c3cc
 801911c:	0801c45c 	.word	0x0801c45c

08019120 <__pow5mult>:
 8019120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019124:	4615      	mov	r5, r2
 8019126:	f012 0203 	ands.w	r2, r2, #3
 801912a:	4606      	mov	r6, r0
 801912c:	460f      	mov	r7, r1
 801912e:	d007      	beq.n	8019140 <__pow5mult+0x20>
 8019130:	4c25      	ldr	r4, [pc, #148]	; (80191c8 <__pow5mult+0xa8>)
 8019132:	3a01      	subs	r2, #1
 8019134:	2300      	movs	r3, #0
 8019136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801913a:	f7ff fe51 	bl	8018de0 <__multadd>
 801913e:	4607      	mov	r7, r0
 8019140:	10ad      	asrs	r5, r5, #2
 8019142:	d03d      	beq.n	80191c0 <__pow5mult+0xa0>
 8019144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019146:	b97c      	cbnz	r4, 8019168 <__pow5mult+0x48>
 8019148:	2010      	movs	r0, #16
 801914a:	f7fc fd59 	bl	8015c00 <malloc>
 801914e:	4602      	mov	r2, r0
 8019150:	6270      	str	r0, [r6, #36]	; 0x24
 8019152:	b928      	cbnz	r0, 8019160 <__pow5mult+0x40>
 8019154:	4b1d      	ldr	r3, [pc, #116]	; (80191cc <__pow5mult+0xac>)
 8019156:	481e      	ldr	r0, [pc, #120]	; (80191d0 <__pow5mult+0xb0>)
 8019158:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801915c:	f000 fc2c 	bl	80199b8 <__assert_func>
 8019160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019164:	6004      	str	r4, [r0, #0]
 8019166:	60c4      	str	r4, [r0, #12]
 8019168:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801916c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019170:	b94c      	cbnz	r4, 8019186 <__pow5mult+0x66>
 8019172:	f240 2171 	movw	r1, #625	; 0x271
 8019176:	4630      	mov	r0, r6
 8019178:	f7ff ff16 	bl	8018fa8 <__i2b>
 801917c:	2300      	movs	r3, #0
 801917e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019182:	4604      	mov	r4, r0
 8019184:	6003      	str	r3, [r0, #0]
 8019186:	f04f 0900 	mov.w	r9, #0
 801918a:	07eb      	lsls	r3, r5, #31
 801918c:	d50a      	bpl.n	80191a4 <__pow5mult+0x84>
 801918e:	4639      	mov	r1, r7
 8019190:	4622      	mov	r2, r4
 8019192:	4630      	mov	r0, r6
 8019194:	f7ff ff1e 	bl	8018fd4 <__multiply>
 8019198:	4639      	mov	r1, r7
 801919a:	4680      	mov	r8, r0
 801919c:	4630      	mov	r0, r6
 801919e:	f7ff fdfd 	bl	8018d9c <_Bfree>
 80191a2:	4647      	mov	r7, r8
 80191a4:	106d      	asrs	r5, r5, #1
 80191a6:	d00b      	beq.n	80191c0 <__pow5mult+0xa0>
 80191a8:	6820      	ldr	r0, [r4, #0]
 80191aa:	b938      	cbnz	r0, 80191bc <__pow5mult+0x9c>
 80191ac:	4622      	mov	r2, r4
 80191ae:	4621      	mov	r1, r4
 80191b0:	4630      	mov	r0, r6
 80191b2:	f7ff ff0f 	bl	8018fd4 <__multiply>
 80191b6:	6020      	str	r0, [r4, #0]
 80191b8:	f8c0 9000 	str.w	r9, [r0]
 80191bc:	4604      	mov	r4, r0
 80191be:	e7e4      	b.n	801918a <__pow5mult+0x6a>
 80191c0:	4638      	mov	r0, r7
 80191c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191c6:	bf00      	nop
 80191c8:	0801c5b0 	.word	0x0801c5b0
 80191cc:	0801c356 	.word	0x0801c356
 80191d0:	0801c45c 	.word	0x0801c45c

080191d4 <__lshift>:
 80191d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191d8:	460c      	mov	r4, r1
 80191da:	6849      	ldr	r1, [r1, #4]
 80191dc:	6923      	ldr	r3, [r4, #16]
 80191de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80191e2:	68a3      	ldr	r3, [r4, #8]
 80191e4:	4607      	mov	r7, r0
 80191e6:	4691      	mov	r9, r2
 80191e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80191ec:	f108 0601 	add.w	r6, r8, #1
 80191f0:	42b3      	cmp	r3, r6
 80191f2:	db0b      	blt.n	801920c <__lshift+0x38>
 80191f4:	4638      	mov	r0, r7
 80191f6:	f7ff fd91 	bl	8018d1c <_Balloc>
 80191fa:	4605      	mov	r5, r0
 80191fc:	b948      	cbnz	r0, 8019212 <__lshift+0x3e>
 80191fe:	4602      	mov	r2, r0
 8019200:	4b28      	ldr	r3, [pc, #160]	; (80192a4 <__lshift+0xd0>)
 8019202:	4829      	ldr	r0, [pc, #164]	; (80192a8 <__lshift+0xd4>)
 8019204:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019208:	f000 fbd6 	bl	80199b8 <__assert_func>
 801920c:	3101      	adds	r1, #1
 801920e:	005b      	lsls	r3, r3, #1
 8019210:	e7ee      	b.n	80191f0 <__lshift+0x1c>
 8019212:	2300      	movs	r3, #0
 8019214:	f100 0114 	add.w	r1, r0, #20
 8019218:	f100 0210 	add.w	r2, r0, #16
 801921c:	4618      	mov	r0, r3
 801921e:	4553      	cmp	r3, sl
 8019220:	db33      	blt.n	801928a <__lshift+0xb6>
 8019222:	6920      	ldr	r0, [r4, #16]
 8019224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019228:	f104 0314 	add.w	r3, r4, #20
 801922c:	f019 091f 	ands.w	r9, r9, #31
 8019230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019238:	d02b      	beq.n	8019292 <__lshift+0xbe>
 801923a:	f1c9 0e20 	rsb	lr, r9, #32
 801923e:	468a      	mov	sl, r1
 8019240:	2200      	movs	r2, #0
 8019242:	6818      	ldr	r0, [r3, #0]
 8019244:	fa00 f009 	lsl.w	r0, r0, r9
 8019248:	4302      	orrs	r2, r0
 801924a:	f84a 2b04 	str.w	r2, [sl], #4
 801924e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019252:	459c      	cmp	ip, r3
 8019254:	fa22 f20e 	lsr.w	r2, r2, lr
 8019258:	d8f3      	bhi.n	8019242 <__lshift+0x6e>
 801925a:	ebac 0304 	sub.w	r3, ip, r4
 801925e:	3b15      	subs	r3, #21
 8019260:	f023 0303 	bic.w	r3, r3, #3
 8019264:	3304      	adds	r3, #4
 8019266:	f104 0015 	add.w	r0, r4, #21
 801926a:	4584      	cmp	ip, r0
 801926c:	bf38      	it	cc
 801926e:	2304      	movcc	r3, #4
 8019270:	50ca      	str	r2, [r1, r3]
 8019272:	b10a      	cbz	r2, 8019278 <__lshift+0xa4>
 8019274:	f108 0602 	add.w	r6, r8, #2
 8019278:	3e01      	subs	r6, #1
 801927a:	4638      	mov	r0, r7
 801927c:	612e      	str	r6, [r5, #16]
 801927e:	4621      	mov	r1, r4
 8019280:	f7ff fd8c 	bl	8018d9c <_Bfree>
 8019284:	4628      	mov	r0, r5
 8019286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801928a:	f842 0f04 	str.w	r0, [r2, #4]!
 801928e:	3301      	adds	r3, #1
 8019290:	e7c5      	b.n	801921e <__lshift+0x4a>
 8019292:	3904      	subs	r1, #4
 8019294:	f853 2b04 	ldr.w	r2, [r3], #4
 8019298:	f841 2f04 	str.w	r2, [r1, #4]!
 801929c:	459c      	cmp	ip, r3
 801929e:	d8f9      	bhi.n	8019294 <__lshift+0xc0>
 80192a0:	e7ea      	b.n	8019278 <__lshift+0xa4>
 80192a2:	bf00      	nop
 80192a4:	0801c3cc 	.word	0x0801c3cc
 80192a8:	0801c45c 	.word	0x0801c45c

080192ac <__mcmp>:
 80192ac:	b530      	push	{r4, r5, lr}
 80192ae:	6902      	ldr	r2, [r0, #16]
 80192b0:	690c      	ldr	r4, [r1, #16]
 80192b2:	1b12      	subs	r2, r2, r4
 80192b4:	d10e      	bne.n	80192d4 <__mcmp+0x28>
 80192b6:	f100 0314 	add.w	r3, r0, #20
 80192ba:	3114      	adds	r1, #20
 80192bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80192c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80192c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80192c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80192cc:	42a5      	cmp	r5, r4
 80192ce:	d003      	beq.n	80192d8 <__mcmp+0x2c>
 80192d0:	d305      	bcc.n	80192de <__mcmp+0x32>
 80192d2:	2201      	movs	r2, #1
 80192d4:	4610      	mov	r0, r2
 80192d6:	bd30      	pop	{r4, r5, pc}
 80192d8:	4283      	cmp	r3, r0
 80192da:	d3f3      	bcc.n	80192c4 <__mcmp+0x18>
 80192dc:	e7fa      	b.n	80192d4 <__mcmp+0x28>
 80192de:	f04f 32ff 	mov.w	r2, #4294967295
 80192e2:	e7f7      	b.n	80192d4 <__mcmp+0x28>

080192e4 <__mdiff>:
 80192e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e8:	460c      	mov	r4, r1
 80192ea:	4606      	mov	r6, r0
 80192ec:	4611      	mov	r1, r2
 80192ee:	4620      	mov	r0, r4
 80192f0:	4617      	mov	r7, r2
 80192f2:	f7ff ffdb 	bl	80192ac <__mcmp>
 80192f6:	1e05      	subs	r5, r0, #0
 80192f8:	d110      	bne.n	801931c <__mdiff+0x38>
 80192fa:	4629      	mov	r1, r5
 80192fc:	4630      	mov	r0, r6
 80192fe:	f7ff fd0d 	bl	8018d1c <_Balloc>
 8019302:	b930      	cbnz	r0, 8019312 <__mdiff+0x2e>
 8019304:	4b39      	ldr	r3, [pc, #228]	; (80193ec <__mdiff+0x108>)
 8019306:	4602      	mov	r2, r0
 8019308:	f240 2132 	movw	r1, #562	; 0x232
 801930c:	4838      	ldr	r0, [pc, #224]	; (80193f0 <__mdiff+0x10c>)
 801930e:	f000 fb53 	bl	80199b8 <__assert_func>
 8019312:	2301      	movs	r3, #1
 8019314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801931c:	bfa4      	itt	ge
 801931e:	463b      	movge	r3, r7
 8019320:	4627      	movge	r7, r4
 8019322:	4630      	mov	r0, r6
 8019324:	6879      	ldr	r1, [r7, #4]
 8019326:	bfa6      	itte	ge
 8019328:	461c      	movge	r4, r3
 801932a:	2500      	movge	r5, #0
 801932c:	2501      	movlt	r5, #1
 801932e:	f7ff fcf5 	bl	8018d1c <_Balloc>
 8019332:	b920      	cbnz	r0, 801933e <__mdiff+0x5a>
 8019334:	4b2d      	ldr	r3, [pc, #180]	; (80193ec <__mdiff+0x108>)
 8019336:	4602      	mov	r2, r0
 8019338:	f44f 7110 	mov.w	r1, #576	; 0x240
 801933c:	e7e6      	b.n	801930c <__mdiff+0x28>
 801933e:	693e      	ldr	r6, [r7, #16]
 8019340:	60c5      	str	r5, [r0, #12]
 8019342:	6925      	ldr	r5, [r4, #16]
 8019344:	f107 0114 	add.w	r1, r7, #20
 8019348:	f104 0914 	add.w	r9, r4, #20
 801934c:	f100 0e14 	add.w	lr, r0, #20
 8019350:	f107 0210 	add.w	r2, r7, #16
 8019354:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019358:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801935c:	46f2      	mov	sl, lr
 801935e:	2700      	movs	r7, #0
 8019360:	f859 3b04 	ldr.w	r3, [r9], #4
 8019364:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019368:	fa1f f883 	uxth.w	r8, r3
 801936c:	fa17 f78b 	uxtah	r7, r7, fp
 8019370:	0c1b      	lsrs	r3, r3, #16
 8019372:	eba7 0808 	sub.w	r8, r7, r8
 8019376:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801937a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801937e:	fa1f f888 	uxth.w	r8, r8
 8019382:	141f      	asrs	r7, r3, #16
 8019384:	454d      	cmp	r5, r9
 8019386:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801938a:	f84a 3b04 	str.w	r3, [sl], #4
 801938e:	d8e7      	bhi.n	8019360 <__mdiff+0x7c>
 8019390:	1b2b      	subs	r3, r5, r4
 8019392:	3b15      	subs	r3, #21
 8019394:	f023 0303 	bic.w	r3, r3, #3
 8019398:	3304      	adds	r3, #4
 801939a:	3415      	adds	r4, #21
 801939c:	42a5      	cmp	r5, r4
 801939e:	bf38      	it	cc
 80193a0:	2304      	movcc	r3, #4
 80193a2:	4419      	add	r1, r3
 80193a4:	4473      	add	r3, lr
 80193a6:	469e      	mov	lr, r3
 80193a8:	460d      	mov	r5, r1
 80193aa:	4565      	cmp	r5, ip
 80193ac:	d30e      	bcc.n	80193cc <__mdiff+0xe8>
 80193ae:	f10c 0203 	add.w	r2, ip, #3
 80193b2:	1a52      	subs	r2, r2, r1
 80193b4:	f022 0203 	bic.w	r2, r2, #3
 80193b8:	3903      	subs	r1, #3
 80193ba:	458c      	cmp	ip, r1
 80193bc:	bf38      	it	cc
 80193be:	2200      	movcc	r2, #0
 80193c0:	441a      	add	r2, r3
 80193c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80193c6:	b17b      	cbz	r3, 80193e8 <__mdiff+0x104>
 80193c8:	6106      	str	r6, [r0, #16]
 80193ca:	e7a5      	b.n	8019318 <__mdiff+0x34>
 80193cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80193d0:	fa17 f488 	uxtah	r4, r7, r8
 80193d4:	1422      	asrs	r2, r4, #16
 80193d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80193da:	b2a4      	uxth	r4, r4
 80193dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80193e0:	f84e 4b04 	str.w	r4, [lr], #4
 80193e4:	1417      	asrs	r7, r2, #16
 80193e6:	e7e0      	b.n	80193aa <__mdiff+0xc6>
 80193e8:	3e01      	subs	r6, #1
 80193ea:	e7ea      	b.n	80193c2 <__mdiff+0xde>
 80193ec:	0801c3cc 	.word	0x0801c3cc
 80193f0:	0801c45c 	.word	0x0801c45c

080193f4 <__ulp>:
 80193f4:	b082      	sub	sp, #8
 80193f6:	ed8d 0b00 	vstr	d0, [sp]
 80193fa:	9b01      	ldr	r3, [sp, #4]
 80193fc:	4912      	ldr	r1, [pc, #72]	; (8019448 <__ulp+0x54>)
 80193fe:	4019      	ands	r1, r3
 8019400:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019404:	2900      	cmp	r1, #0
 8019406:	dd05      	ble.n	8019414 <__ulp+0x20>
 8019408:	2200      	movs	r2, #0
 801940a:	460b      	mov	r3, r1
 801940c:	ec43 2b10 	vmov	d0, r2, r3
 8019410:	b002      	add	sp, #8
 8019412:	4770      	bx	lr
 8019414:	4249      	negs	r1, r1
 8019416:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801941a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801941e:	f04f 0200 	mov.w	r2, #0
 8019422:	f04f 0300 	mov.w	r3, #0
 8019426:	da04      	bge.n	8019432 <__ulp+0x3e>
 8019428:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801942c:	fa41 f300 	asr.w	r3, r1, r0
 8019430:	e7ec      	b.n	801940c <__ulp+0x18>
 8019432:	f1a0 0114 	sub.w	r1, r0, #20
 8019436:	291e      	cmp	r1, #30
 8019438:	bfda      	itte	le
 801943a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801943e:	fa20 f101 	lsrle.w	r1, r0, r1
 8019442:	2101      	movgt	r1, #1
 8019444:	460a      	mov	r2, r1
 8019446:	e7e1      	b.n	801940c <__ulp+0x18>
 8019448:	7ff00000 	.word	0x7ff00000

0801944c <__b2d>:
 801944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801944e:	6905      	ldr	r5, [r0, #16]
 8019450:	f100 0714 	add.w	r7, r0, #20
 8019454:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019458:	1f2e      	subs	r6, r5, #4
 801945a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801945e:	4620      	mov	r0, r4
 8019460:	f7ff fd52 	bl	8018f08 <__hi0bits>
 8019464:	f1c0 0320 	rsb	r3, r0, #32
 8019468:	280a      	cmp	r0, #10
 801946a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80194e8 <__b2d+0x9c>
 801946e:	600b      	str	r3, [r1, #0]
 8019470:	dc14      	bgt.n	801949c <__b2d+0x50>
 8019472:	f1c0 0e0b 	rsb	lr, r0, #11
 8019476:	fa24 f10e 	lsr.w	r1, r4, lr
 801947a:	42b7      	cmp	r7, r6
 801947c:	ea41 030c 	orr.w	r3, r1, ip
 8019480:	bf34      	ite	cc
 8019482:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019486:	2100      	movcs	r1, #0
 8019488:	3015      	adds	r0, #21
 801948a:	fa04 f000 	lsl.w	r0, r4, r0
 801948e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019492:	ea40 0201 	orr.w	r2, r0, r1
 8019496:	ec43 2b10 	vmov	d0, r2, r3
 801949a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801949c:	42b7      	cmp	r7, r6
 801949e:	bf3a      	itte	cc
 80194a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80194a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80194a8:	2100      	movcs	r1, #0
 80194aa:	380b      	subs	r0, #11
 80194ac:	d017      	beq.n	80194de <__b2d+0x92>
 80194ae:	f1c0 0c20 	rsb	ip, r0, #32
 80194b2:	fa04 f500 	lsl.w	r5, r4, r0
 80194b6:	42be      	cmp	r6, r7
 80194b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80194bc:	ea45 0504 	orr.w	r5, r5, r4
 80194c0:	bf8c      	ite	hi
 80194c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80194c6:	2400      	movls	r4, #0
 80194c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80194cc:	fa01 f000 	lsl.w	r0, r1, r0
 80194d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80194d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80194d8:	ea40 0204 	orr.w	r2, r0, r4
 80194dc:	e7db      	b.n	8019496 <__b2d+0x4a>
 80194de:	ea44 030c 	orr.w	r3, r4, ip
 80194e2:	460a      	mov	r2, r1
 80194e4:	e7d7      	b.n	8019496 <__b2d+0x4a>
 80194e6:	bf00      	nop
 80194e8:	3ff00000 	.word	0x3ff00000

080194ec <__d2b>:
 80194ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80194f0:	4689      	mov	r9, r1
 80194f2:	2101      	movs	r1, #1
 80194f4:	ec57 6b10 	vmov	r6, r7, d0
 80194f8:	4690      	mov	r8, r2
 80194fa:	f7ff fc0f 	bl	8018d1c <_Balloc>
 80194fe:	4604      	mov	r4, r0
 8019500:	b930      	cbnz	r0, 8019510 <__d2b+0x24>
 8019502:	4602      	mov	r2, r0
 8019504:	4b25      	ldr	r3, [pc, #148]	; (801959c <__d2b+0xb0>)
 8019506:	4826      	ldr	r0, [pc, #152]	; (80195a0 <__d2b+0xb4>)
 8019508:	f240 310a 	movw	r1, #778	; 0x30a
 801950c:	f000 fa54 	bl	80199b8 <__assert_func>
 8019510:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019514:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019518:	bb35      	cbnz	r5, 8019568 <__d2b+0x7c>
 801951a:	2e00      	cmp	r6, #0
 801951c:	9301      	str	r3, [sp, #4]
 801951e:	d028      	beq.n	8019572 <__d2b+0x86>
 8019520:	4668      	mov	r0, sp
 8019522:	9600      	str	r6, [sp, #0]
 8019524:	f7ff fd10 	bl	8018f48 <__lo0bits>
 8019528:	9900      	ldr	r1, [sp, #0]
 801952a:	b300      	cbz	r0, 801956e <__d2b+0x82>
 801952c:	9a01      	ldr	r2, [sp, #4]
 801952e:	f1c0 0320 	rsb	r3, r0, #32
 8019532:	fa02 f303 	lsl.w	r3, r2, r3
 8019536:	430b      	orrs	r3, r1
 8019538:	40c2      	lsrs	r2, r0
 801953a:	6163      	str	r3, [r4, #20]
 801953c:	9201      	str	r2, [sp, #4]
 801953e:	9b01      	ldr	r3, [sp, #4]
 8019540:	61a3      	str	r3, [r4, #24]
 8019542:	2b00      	cmp	r3, #0
 8019544:	bf14      	ite	ne
 8019546:	2202      	movne	r2, #2
 8019548:	2201      	moveq	r2, #1
 801954a:	6122      	str	r2, [r4, #16]
 801954c:	b1d5      	cbz	r5, 8019584 <__d2b+0x98>
 801954e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019552:	4405      	add	r5, r0
 8019554:	f8c9 5000 	str.w	r5, [r9]
 8019558:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801955c:	f8c8 0000 	str.w	r0, [r8]
 8019560:	4620      	mov	r0, r4
 8019562:	b003      	add	sp, #12
 8019564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801956c:	e7d5      	b.n	801951a <__d2b+0x2e>
 801956e:	6161      	str	r1, [r4, #20]
 8019570:	e7e5      	b.n	801953e <__d2b+0x52>
 8019572:	a801      	add	r0, sp, #4
 8019574:	f7ff fce8 	bl	8018f48 <__lo0bits>
 8019578:	9b01      	ldr	r3, [sp, #4]
 801957a:	6163      	str	r3, [r4, #20]
 801957c:	2201      	movs	r2, #1
 801957e:	6122      	str	r2, [r4, #16]
 8019580:	3020      	adds	r0, #32
 8019582:	e7e3      	b.n	801954c <__d2b+0x60>
 8019584:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019588:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801958c:	f8c9 0000 	str.w	r0, [r9]
 8019590:	6918      	ldr	r0, [r3, #16]
 8019592:	f7ff fcb9 	bl	8018f08 <__hi0bits>
 8019596:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801959a:	e7df      	b.n	801955c <__d2b+0x70>
 801959c:	0801c3cc 	.word	0x0801c3cc
 80195a0:	0801c45c 	.word	0x0801c45c

080195a4 <__ratio>:
 80195a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195a8:	4688      	mov	r8, r1
 80195aa:	4669      	mov	r1, sp
 80195ac:	4681      	mov	r9, r0
 80195ae:	f7ff ff4d 	bl	801944c <__b2d>
 80195b2:	a901      	add	r1, sp, #4
 80195b4:	4640      	mov	r0, r8
 80195b6:	ec55 4b10 	vmov	r4, r5, d0
 80195ba:	f7ff ff47 	bl	801944c <__b2d>
 80195be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80195c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80195c6:	eba3 0c02 	sub.w	ip, r3, r2
 80195ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80195ce:	1a9b      	subs	r3, r3, r2
 80195d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80195d4:	ec51 0b10 	vmov	r0, r1, d0
 80195d8:	2b00      	cmp	r3, #0
 80195da:	bfd6      	itet	le
 80195dc:	460a      	movle	r2, r1
 80195de:	462a      	movgt	r2, r5
 80195e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80195e4:	468b      	mov	fp, r1
 80195e6:	462f      	mov	r7, r5
 80195e8:	bfd4      	ite	le
 80195ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80195ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80195f2:	4620      	mov	r0, r4
 80195f4:	ee10 2a10 	vmov	r2, s0
 80195f8:	465b      	mov	r3, fp
 80195fa:	4639      	mov	r1, r7
 80195fc:	f7e7 f926 	bl	800084c <__aeabi_ddiv>
 8019600:	ec41 0b10 	vmov	d0, r0, r1
 8019604:	b003      	add	sp, #12
 8019606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801960a <__copybits>:
 801960a:	3901      	subs	r1, #1
 801960c:	b570      	push	{r4, r5, r6, lr}
 801960e:	1149      	asrs	r1, r1, #5
 8019610:	6914      	ldr	r4, [r2, #16]
 8019612:	3101      	adds	r1, #1
 8019614:	f102 0314 	add.w	r3, r2, #20
 8019618:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801961c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019620:	1f05      	subs	r5, r0, #4
 8019622:	42a3      	cmp	r3, r4
 8019624:	d30c      	bcc.n	8019640 <__copybits+0x36>
 8019626:	1aa3      	subs	r3, r4, r2
 8019628:	3b11      	subs	r3, #17
 801962a:	f023 0303 	bic.w	r3, r3, #3
 801962e:	3211      	adds	r2, #17
 8019630:	42a2      	cmp	r2, r4
 8019632:	bf88      	it	hi
 8019634:	2300      	movhi	r3, #0
 8019636:	4418      	add	r0, r3
 8019638:	2300      	movs	r3, #0
 801963a:	4288      	cmp	r0, r1
 801963c:	d305      	bcc.n	801964a <__copybits+0x40>
 801963e:	bd70      	pop	{r4, r5, r6, pc}
 8019640:	f853 6b04 	ldr.w	r6, [r3], #4
 8019644:	f845 6f04 	str.w	r6, [r5, #4]!
 8019648:	e7eb      	b.n	8019622 <__copybits+0x18>
 801964a:	f840 3b04 	str.w	r3, [r0], #4
 801964e:	e7f4      	b.n	801963a <__copybits+0x30>

08019650 <__any_on>:
 8019650:	f100 0214 	add.w	r2, r0, #20
 8019654:	6900      	ldr	r0, [r0, #16]
 8019656:	114b      	asrs	r3, r1, #5
 8019658:	4298      	cmp	r0, r3
 801965a:	b510      	push	{r4, lr}
 801965c:	db11      	blt.n	8019682 <__any_on+0x32>
 801965e:	dd0a      	ble.n	8019676 <__any_on+0x26>
 8019660:	f011 011f 	ands.w	r1, r1, #31
 8019664:	d007      	beq.n	8019676 <__any_on+0x26>
 8019666:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801966a:	fa24 f001 	lsr.w	r0, r4, r1
 801966e:	fa00 f101 	lsl.w	r1, r0, r1
 8019672:	428c      	cmp	r4, r1
 8019674:	d10b      	bne.n	801968e <__any_on+0x3e>
 8019676:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801967a:	4293      	cmp	r3, r2
 801967c:	d803      	bhi.n	8019686 <__any_on+0x36>
 801967e:	2000      	movs	r0, #0
 8019680:	bd10      	pop	{r4, pc}
 8019682:	4603      	mov	r3, r0
 8019684:	e7f7      	b.n	8019676 <__any_on+0x26>
 8019686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801968a:	2900      	cmp	r1, #0
 801968c:	d0f5      	beq.n	801967a <__any_on+0x2a>
 801968e:	2001      	movs	r0, #1
 8019690:	e7f6      	b.n	8019680 <__any_on+0x30>

08019692 <_calloc_r>:
 8019692:	b513      	push	{r0, r1, r4, lr}
 8019694:	434a      	muls	r2, r1
 8019696:	4611      	mov	r1, r2
 8019698:	9201      	str	r2, [sp, #4]
 801969a:	f7fc fb41 	bl	8015d20 <_malloc_r>
 801969e:	4604      	mov	r4, r0
 80196a0:	b118      	cbz	r0, 80196aa <_calloc_r+0x18>
 80196a2:	9a01      	ldr	r2, [sp, #4]
 80196a4:	2100      	movs	r1, #0
 80196a6:	f7fc fae3 	bl	8015c70 <memset>
 80196aa:	4620      	mov	r0, r4
 80196ac:	b002      	add	sp, #8
 80196ae:	bd10      	pop	{r4, pc}

080196b0 <__ssputs_r>:
 80196b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196b4:	688e      	ldr	r6, [r1, #8]
 80196b6:	429e      	cmp	r6, r3
 80196b8:	4682      	mov	sl, r0
 80196ba:	460c      	mov	r4, r1
 80196bc:	4690      	mov	r8, r2
 80196be:	461f      	mov	r7, r3
 80196c0:	d838      	bhi.n	8019734 <__ssputs_r+0x84>
 80196c2:	898a      	ldrh	r2, [r1, #12]
 80196c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80196c8:	d032      	beq.n	8019730 <__ssputs_r+0x80>
 80196ca:	6825      	ldr	r5, [r4, #0]
 80196cc:	6909      	ldr	r1, [r1, #16]
 80196ce:	eba5 0901 	sub.w	r9, r5, r1
 80196d2:	6965      	ldr	r5, [r4, #20]
 80196d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80196d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80196dc:	3301      	adds	r3, #1
 80196de:	444b      	add	r3, r9
 80196e0:	106d      	asrs	r5, r5, #1
 80196e2:	429d      	cmp	r5, r3
 80196e4:	bf38      	it	cc
 80196e6:	461d      	movcc	r5, r3
 80196e8:	0553      	lsls	r3, r2, #21
 80196ea:	d531      	bpl.n	8019750 <__ssputs_r+0xa0>
 80196ec:	4629      	mov	r1, r5
 80196ee:	f7fc fb17 	bl	8015d20 <_malloc_r>
 80196f2:	4606      	mov	r6, r0
 80196f4:	b950      	cbnz	r0, 801970c <__ssputs_r+0x5c>
 80196f6:	230c      	movs	r3, #12
 80196f8:	f8ca 3000 	str.w	r3, [sl]
 80196fc:	89a3      	ldrh	r3, [r4, #12]
 80196fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019702:	81a3      	strh	r3, [r4, #12]
 8019704:	f04f 30ff 	mov.w	r0, #4294967295
 8019708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801970c:	6921      	ldr	r1, [r4, #16]
 801970e:	464a      	mov	r2, r9
 8019710:	f7fc fa86 	bl	8015c20 <memcpy>
 8019714:	89a3      	ldrh	r3, [r4, #12]
 8019716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801971a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801971e:	81a3      	strh	r3, [r4, #12]
 8019720:	6126      	str	r6, [r4, #16]
 8019722:	6165      	str	r5, [r4, #20]
 8019724:	444e      	add	r6, r9
 8019726:	eba5 0509 	sub.w	r5, r5, r9
 801972a:	6026      	str	r6, [r4, #0]
 801972c:	60a5      	str	r5, [r4, #8]
 801972e:	463e      	mov	r6, r7
 8019730:	42be      	cmp	r6, r7
 8019732:	d900      	bls.n	8019736 <__ssputs_r+0x86>
 8019734:	463e      	mov	r6, r7
 8019736:	4632      	mov	r2, r6
 8019738:	6820      	ldr	r0, [r4, #0]
 801973a:	4641      	mov	r1, r8
 801973c:	f7fc fa7e 	bl	8015c3c <memmove>
 8019740:	68a3      	ldr	r3, [r4, #8]
 8019742:	6822      	ldr	r2, [r4, #0]
 8019744:	1b9b      	subs	r3, r3, r6
 8019746:	4432      	add	r2, r6
 8019748:	60a3      	str	r3, [r4, #8]
 801974a:	6022      	str	r2, [r4, #0]
 801974c:	2000      	movs	r0, #0
 801974e:	e7db      	b.n	8019708 <__ssputs_r+0x58>
 8019750:	462a      	mov	r2, r5
 8019752:	f000 f964 	bl	8019a1e <_realloc_r>
 8019756:	4606      	mov	r6, r0
 8019758:	2800      	cmp	r0, #0
 801975a:	d1e1      	bne.n	8019720 <__ssputs_r+0x70>
 801975c:	6921      	ldr	r1, [r4, #16]
 801975e:	4650      	mov	r0, sl
 8019760:	f7fc fa8e 	bl	8015c80 <_free_r>
 8019764:	e7c7      	b.n	80196f6 <__ssputs_r+0x46>
	...

08019768 <_svfiprintf_r>:
 8019768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801976c:	4698      	mov	r8, r3
 801976e:	898b      	ldrh	r3, [r1, #12]
 8019770:	061b      	lsls	r3, r3, #24
 8019772:	b09d      	sub	sp, #116	; 0x74
 8019774:	4607      	mov	r7, r0
 8019776:	460d      	mov	r5, r1
 8019778:	4614      	mov	r4, r2
 801977a:	d50e      	bpl.n	801979a <_svfiprintf_r+0x32>
 801977c:	690b      	ldr	r3, [r1, #16]
 801977e:	b963      	cbnz	r3, 801979a <_svfiprintf_r+0x32>
 8019780:	2140      	movs	r1, #64	; 0x40
 8019782:	f7fc facd 	bl	8015d20 <_malloc_r>
 8019786:	6028      	str	r0, [r5, #0]
 8019788:	6128      	str	r0, [r5, #16]
 801978a:	b920      	cbnz	r0, 8019796 <_svfiprintf_r+0x2e>
 801978c:	230c      	movs	r3, #12
 801978e:	603b      	str	r3, [r7, #0]
 8019790:	f04f 30ff 	mov.w	r0, #4294967295
 8019794:	e0d1      	b.n	801993a <_svfiprintf_r+0x1d2>
 8019796:	2340      	movs	r3, #64	; 0x40
 8019798:	616b      	str	r3, [r5, #20]
 801979a:	2300      	movs	r3, #0
 801979c:	9309      	str	r3, [sp, #36]	; 0x24
 801979e:	2320      	movs	r3, #32
 80197a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80197a8:	2330      	movs	r3, #48	; 0x30
 80197aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019954 <_svfiprintf_r+0x1ec>
 80197ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197b2:	f04f 0901 	mov.w	r9, #1
 80197b6:	4623      	mov	r3, r4
 80197b8:	469a      	mov	sl, r3
 80197ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197be:	b10a      	cbz	r2, 80197c4 <_svfiprintf_r+0x5c>
 80197c0:	2a25      	cmp	r2, #37	; 0x25
 80197c2:	d1f9      	bne.n	80197b8 <_svfiprintf_r+0x50>
 80197c4:	ebba 0b04 	subs.w	fp, sl, r4
 80197c8:	d00b      	beq.n	80197e2 <_svfiprintf_r+0x7a>
 80197ca:	465b      	mov	r3, fp
 80197cc:	4622      	mov	r2, r4
 80197ce:	4629      	mov	r1, r5
 80197d0:	4638      	mov	r0, r7
 80197d2:	f7ff ff6d 	bl	80196b0 <__ssputs_r>
 80197d6:	3001      	adds	r0, #1
 80197d8:	f000 80aa 	beq.w	8019930 <_svfiprintf_r+0x1c8>
 80197dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197de:	445a      	add	r2, fp
 80197e0:	9209      	str	r2, [sp, #36]	; 0x24
 80197e2:	f89a 3000 	ldrb.w	r3, [sl]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	f000 80a2 	beq.w	8019930 <_svfiprintf_r+0x1c8>
 80197ec:	2300      	movs	r3, #0
 80197ee:	f04f 32ff 	mov.w	r2, #4294967295
 80197f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80197f6:	f10a 0a01 	add.w	sl, sl, #1
 80197fa:	9304      	str	r3, [sp, #16]
 80197fc:	9307      	str	r3, [sp, #28]
 80197fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019802:	931a      	str	r3, [sp, #104]	; 0x68
 8019804:	4654      	mov	r4, sl
 8019806:	2205      	movs	r2, #5
 8019808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801980c:	4851      	ldr	r0, [pc, #324]	; (8019954 <_svfiprintf_r+0x1ec>)
 801980e:	f7e6 fce7 	bl	80001e0 <memchr>
 8019812:	9a04      	ldr	r2, [sp, #16]
 8019814:	b9d8      	cbnz	r0, 801984e <_svfiprintf_r+0xe6>
 8019816:	06d0      	lsls	r0, r2, #27
 8019818:	bf44      	itt	mi
 801981a:	2320      	movmi	r3, #32
 801981c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019820:	0711      	lsls	r1, r2, #28
 8019822:	bf44      	itt	mi
 8019824:	232b      	movmi	r3, #43	; 0x2b
 8019826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801982a:	f89a 3000 	ldrb.w	r3, [sl]
 801982e:	2b2a      	cmp	r3, #42	; 0x2a
 8019830:	d015      	beq.n	801985e <_svfiprintf_r+0xf6>
 8019832:	9a07      	ldr	r2, [sp, #28]
 8019834:	4654      	mov	r4, sl
 8019836:	2000      	movs	r0, #0
 8019838:	f04f 0c0a 	mov.w	ip, #10
 801983c:	4621      	mov	r1, r4
 801983e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019842:	3b30      	subs	r3, #48	; 0x30
 8019844:	2b09      	cmp	r3, #9
 8019846:	d94e      	bls.n	80198e6 <_svfiprintf_r+0x17e>
 8019848:	b1b0      	cbz	r0, 8019878 <_svfiprintf_r+0x110>
 801984a:	9207      	str	r2, [sp, #28]
 801984c:	e014      	b.n	8019878 <_svfiprintf_r+0x110>
 801984e:	eba0 0308 	sub.w	r3, r0, r8
 8019852:	fa09 f303 	lsl.w	r3, r9, r3
 8019856:	4313      	orrs	r3, r2
 8019858:	9304      	str	r3, [sp, #16]
 801985a:	46a2      	mov	sl, r4
 801985c:	e7d2      	b.n	8019804 <_svfiprintf_r+0x9c>
 801985e:	9b03      	ldr	r3, [sp, #12]
 8019860:	1d19      	adds	r1, r3, #4
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	9103      	str	r1, [sp, #12]
 8019866:	2b00      	cmp	r3, #0
 8019868:	bfbb      	ittet	lt
 801986a:	425b      	neglt	r3, r3
 801986c:	f042 0202 	orrlt.w	r2, r2, #2
 8019870:	9307      	strge	r3, [sp, #28]
 8019872:	9307      	strlt	r3, [sp, #28]
 8019874:	bfb8      	it	lt
 8019876:	9204      	strlt	r2, [sp, #16]
 8019878:	7823      	ldrb	r3, [r4, #0]
 801987a:	2b2e      	cmp	r3, #46	; 0x2e
 801987c:	d10c      	bne.n	8019898 <_svfiprintf_r+0x130>
 801987e:	7863      	ldrb	r3, [r4, #1]
 8019880:	2b2a      	cmp	r3, #42	; 0x2a
 8019882:	d135      	bne.n	80198f0 <_svfiprintf_r+0x188>
 8019884:	9b03      	ldr	r3, [sp, #12]
 8019886:	1d1a      	adds	r2, r3, #4
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	9203      	str	r2, [sp, #12]
 801988c:	2b00      	cmp	r3, #0
 801988e:	bfb8      	it	lt
 8019890:	f04f 33ff 	movlt.w	r3, #4294967295
 8019894:	3402      	adds	r4, #2
 8019896:	9305      	str	r3, [sp, #20]
 8019898:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019964 <_svfiprintf_r+0x1fc>
 801989c:	7821      	ldrb	r1, [r4, #0]
 801989e:	2203      	movs	r2, #3
 80198a0:	4650      	mov	r0, sl
 80198a2:	f7e6 fc9d 	bl	80001e0 <memchr>
 80198a6:	b140      	cbz	r0, 80198ba <_svfiprintf_r+0x152>
 80198a8:	2340      	movs	r3, #64	; 0x40
 80198aa:	eba0 000a 	sub.w	r0, r0, sl
 80198ae:	fa03 f000 	lsl.w	r0, r3, r0
 80198b2:	9b04      	ldr	r3, [sp, #16]
 80198b4:	4303      	orrs	r3, r0
 80198b6:	3401      	adds	r4, #1
 80198b8:	9304      	str	r3, [sp, #16]
 80198ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198be:	4826      	ldr	r0, [pc, #152]	; (8019958 <_svfiprintf_r+0x1f0>)
 80198c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198c4:	2206      	movs	r2, #6
 80198c6:	f7e6 fc8b 	bl	80001e0 <memchr>
 80198ca:	2800      	cmp	r0, #0
 80198cc:	d038      	beq.n	8019940 <_svfiprintf_r+0x1d8>
 80198ce:	4b23      	ldr	r3, [pc, #140]	; (801995c <_svfiprintf_r+0x1f4>)
 80198d0:	bb1b      	cbnz	r3, 801991a <_svfiprintf_r+0x1b2>
 80198d2:	9b03      	ldr	r3, [sp, #12]
 80198d4:	3307      	adds	r3, #7
 80198d6:	f023 0307 	bic.w	r3, r3, #7
 80198da:	3308      	adds	r3, #8
 80198dc:	9303      	str	r3, [sp, #12]
 80198de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198e0:	4433      	add	r3, r6
 80198e2:	9309      	str	r3, [sp, #36]	; 0x24
 80198e4:	e767      	b.n	80197b6 <_svfiprintf_r+0x4e>
 80198e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80198ea:	460c      	mov	r4, r1
 80198ec:	2001      	movs	r0, #1
 80198ee:	e7a5      	b.n	801983c <_svfiprintf_r+0xd4>
 80198f0:	2300      	movs	r3, #0
 80198f2:	3401      	adds	r4, #1
 80198f4:	9305      	str	r3, [sp, #20]
 80198f6:	4619      	mov	r1, r3
 80198f8:	f04f 0c0a 	mov.w	ip, #10
 80198fc:	4620      	mov	r0, r4
 80198fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019902:	3a30      	subs	r2, #48	; 0x30
 8019904:	2a09      	cmp	r2, #9
 8019906:	d903      	bls.n	8019910 <_svfiprintf_r+0x1a8>
 8019908:	2b00      	cmp	r3, #0
 801990a:	d0c5      	beq.n	8019898 <_svfiprintf_r+0x130>
 801990c:	9105      	str	r1, [sp, #20]
 801990e:	e7c3      	b.n	8019898 <_svfiprintf_r+0x130>
 8019910:	fb0c 2101 	mla	r1, ip, r1, r2
 8019914:	4604      	mov	r4, r0
 8019916:	2301      	movs	r3, #1
 8019918:	e7f0      	b.n	80198fc <_svfiprintf_r+0x194>
 801991a:	ab03      	add	r3, sp, #12
 801991c:	9300      	str	r3, [sp, #0]
 801991e:	462a      	mov	r2, r5
 8019920:	4b0f      	ldr	r3, [pc, #60]	; (8019960 <_svfiprintf_r+0x1f8>)
 8019922:	a904      	add	r1, sp, #16
 8019924:	4638      	mov	r0, r7
 8019926:	f7fc faf5 	bl	8015f14 <_printf_float>
 801992a:	1c42      	adds	r2, r0, #1
 801992c:	4606      	mov	r6, r0
 801992e:	d1d6      	bne.n	80198de <_svfiprintf_r+0x176>
 8019930:	89ab      	ldrh	r3, [r5, #12]
 8019932:	065b      	lsls	r3, r3, #25
 8019934:	f53f af2c 	bmi.w	8019790 <_svfiprintf_r+0x28>
 8019938:	9809      	ldr	r0, [sp, #36]	; 0x24
 801993a:	b01d      	add	sp, #116	; 0x74
 801993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019940:	ab03      	add	r3, sp, #12
 8019942:	9300      	str	r3, [sp, #0]
 8019944:	462a      	mov	r2, r5
 8019946:	4b06      	ldr	r3, [pc, #24]	; (8019960 <_svfiprintf_r+0x1f8>)
 8019948:	a904      	add	r1, sp, #16
 801994a:	4638      	mov	r0, r7
 801994c:	f7fc fd86 	bl	801645c <_printf_i>
 8019950:	e7eb      	b.n	801992a <_svfiprintf_r+0x1c2>
 8019952:	bf00      	nop
 8019954:	0801c5bc 	.word	0x0801c5bc
 8019958:	0801c5c6 	.word	0x0801c5c6
 801995c:	08015f15 	.word	0x08015f15
 8019960:	080196b1 	.word	0x080196b1
 8019964:	0801c5c2 	.word	0x0801c5c2

08019968 <nan>:
 8019968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019970 <nan+0x8>
 801996c:	4770      	bx	lr
 801996e:	bf00      	nop
 8019970:	00000000 	.word	0x00000000
 8019974:	7ff80000 	.word	0x7ff80000

08019978 <strncmp>:
 8019978:	b510      	push	{r4, lr}
 801997a:	b16a      	cbz	r2, 8019998 <strncmp+0x20>
 801997c:	3901      	subs	r1, #1
 801997e:	1884      	adds	r4, r0, r2
 8019980:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019984:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019988:	4293      	cmp	r3, r2
 801998a:	d103      	bne.n	8019994 <strncmp+0x1c>
 801998c:	42a0      	cmp	r0, r4
 801998e:	d001      	beq.n	8019994 <strncmp+0x1c>
 8019990:	2b00      	cmp	r3, #0
 8019992:	d1f5      	bne.n	8019980 <strncmp+0x8>
 8019994:	1a98      	subs	r0, r3, r2
 8019996:	bd10      	pop	{r4, pc}
 8019998:	4610      	mov	r0, r2
 801999a:	e7fc      	b.n	8019996 <strncmp+0x1e>

0801999c <__ascii_wctomb>:
 801999c:	b149      	cbz	r1, 80199b2 <__ascii_wctomb+0x16>
 801999e:	2aff      	cmp	r2, #255	; 0xff
 80199a0:	bf85      	ittet	hi
 80199a2:	238a      	movhi	r3, #138	; 0x8a
 80199a4:	6003      	strhi	r3, [r0, #0]
 80199a6:	700a      	strbls	r2, [r1, #0]
 80199a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80199ac:	bf98      	it	ls
 80199ae:	2001      	movls	r0, #1
 80199b0:	4770      	bx	lr
 80199b2:	4608      	mov	r0, r1
 80199b4:	4770      	bx	lr
	...

080199b8 <__assert_func>:
 80199b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80199ba:	4614      	mov	r4, r2
 80199bc:	461a      	mov	r2, r3
 80199be:	4b09      	ldr	r3, [pc, #36]	; (80199e4 <__assert_func+0x2c>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	4605      	mov	r5, r0
 80199c4:	68d8      	ldr	r0, [r3, #12]
 80199c6:	b14c      	cbz	r4, 80199dc <__assert_func+0x24>
 80199c8:	4b07      	ldr	r3, [pc, #28]	; (80199e8 <__assert_func+0x30>)
 80199ca:	9100      	str	r1, [sp, #0]
 80199cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80199d0:	4906      	ldr	r1, [pc, #24]	; (80199ec <__assert_func+0x34>)
 80199d2:	462b      	mov	r3, r5
 80199d4:	f000 f80e 	bl	80199f4 <fiprintf>
 80199d8:	f000 fa60 	bl	8019e9c <abort>
 80199dc:	4b04      	ldr	r3, [pc, #16]	; (80199f0 <__assert_func+0x38>)
 80199de:	461c      	mov	r4, r3
 80199e0:	e7f3      	b.n	80199ca <__assert_func+0x12>
 80199e2:	bf00      	nop
 80199e4:	20002210 	.word	0x20002210
 80199e8:	0801c5cd 	.word	0x0801c5cd
 80199ec:	0801c5da 	.word	0x0801c5da
 80199f0:	0801c608 	.word	0x0801c608

080199f4 <fiprintf>:
 80199f4:	b40e      	push	{r1, r2, r3}
 80199f6:	b503      	push	{r0, r1, lr}
 80199f8:	4601      	mov	r1, r0
 80199fa:	ab03      	add	r3, sp, #12
 80199fc:	4805      	ldr	r0, [pc, #20]	; (8019a14 <fiprintf+0x20>)
 80199fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a02:	6800      	ldr	r0, [r0, #0]
 8019a04:	9301      	str	r3, [sp, #4]
 8019a06:	f000 f859 	bl	8019abc <_vfiprintf_r>
 8019a0a:	b002      	add	sp, #8
 8019a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a10:	b003      	add	sp, #12
 8019a12:	4770      	bx	lr
 8019a14:	20002210 	.word	0x20002210

08019a18 <__retarget_lock_init_recursive>:
 8019a18:	4770      	bx	lr

08019a1a <__retarget_lock_acquire_recursive>:
 8019a1a:	4770      	bx	lr

08019a1c <__retarget_lock_release_recursive>:
 8019a1c:	4770      	bx	lr

08019a1e <_realloc_r>:
 8019a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a20:	4607      	mov	r7, r0
 8019a22:	4614      	mov	r4, r2
 8019a24:	460e      	mov	r6, r1
 8019a26:	b921      	cbnz	r1, 8019a32 <_realloc_r+0x14>
 8019a28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019a2c:	4611      	mov	r1, r2
 8019a2e:	f7fc b977 	b.w	8015d20 <_malloc_r>
 8019a32:	b922      	cbnz	r2, 8019a3e <_realloc_r+0x20>
 8019a34:	f7fc f924 	bl	8015c80 <_free_r>
 8019a38:	4625      	mov	r5, r4
 8019a3a:	4628      	mov	r0, r5
 8019a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a3e:	f000 fc51 	bl	801a2e4 <_malloc_usable_size_r>
 8019a42:	42a0      	cmp	r0, r4
 8019a44:	d20f      	bcs.n	8019a66 <_realloc_r+0x48>
 8019a46:	4621      	mov	r1, r4
 8019a48:	4638      	mov	r0, r7
 8019a4a:	f7fc f969 	bl	8015d20 <_malloc_r>
 8019a4e:	4605      	mov	r5, r0
 8019a50:	2800      	cmp	r0, #0
 8019a52:	d0f2      	beq.n	8019a3a <_realloc_r+0x1c>
 8019a54:	4631      	mov	r1, r6
 8019a56:	4622      	mov	r2, r4
 8019a58:	f7fc f8e2 	bl	8015c20 <memcpy>
 8019a5c:	4631      	mov	r1, r6
 8019a5e:	4638      	mov	r0, r7
 8019a60:	f7fc f90e 	bl	8015c80 <_free_r>
 8019a64:	e7e9      	b.n	8019a3a <_realloc_r+0x1c>
 8019a66:	4635      	mov	r5, r6
 8019a68:	e7e7      	b.n	8019a3a <_realloc_r+0x1c>

08019a6a <__sfputc_r>:
 8019a6a:	6893      	ldr	r3, [r2, #8]
 8019a6c:	3b01      	subs	r3, #1
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	b410      	push	{r4}
 8019a72:	6093      	str	r3, [r2, #8]
 8019a74:	da08      	bge.n	8019a88 <__sfputc_r+0x1e>
 8019a76:	6994      	ldr	r4, [r2, #24]
 8019a78:	42a3      	cmp	r3, r4
 8019a7a:	db01      	blt.n	8019a80 <__sfputc_r+0x16>
 8019a7c:	290a      	cmp	r1, #10
 8019a7e:	d103      	bne.n	8019a88 <__sfputc_r+0x1e>
 8019a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a84:	f000 b94a 	b.w	8019d1c <__swbuf_r>
 8019a88:	6813      	ldr	r3, [r2, #0]
 8019a8a:	1c58      	adds	r0, r3, #1
 8019a8c:	6010      	str	r0, [r2, #0]
 8019a8e:	7019      	strb	r1, [r3, #0]
 8019a90:	4608      	mov	r0, r1
 8019a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a96:	4770      	bx	lr

08019a98 <__sfputs_r>:
 8019a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a9a:	4606      	mov	r6, r0
 8019a9c:	460f      	mov	r7, r1
 8019a9e:	4614      	mov	r4, r2
 8019aa0:	18d5      	adds	r5, r2, r3
 8019aa2:	42ac      	cmp	r4, r5
 8019aa4:	d101      	bne.n	8019aaa <__sfputs_r+0x12>
 8019aa6:	2000      	movs	r0, #0
 8019aa8:	e007      	b.n	8019aba <__sfputs_r+0x22>
 8019aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019aae:	463a      	mov	r2, r7
 8019ab0:	4630      	mov	r0, r6
 8019ab2:	f7ff ffda 	bl	8019a6a <__sfputc_r>
 8019ab6:	1c43      	adds	r3, r0, #1
 8019ab8:	d1f3      	bne.n	8019aa2 <__sfputs_r+0xa>
 8019aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019abc <_vfiprintf_r>:
 8019abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac0:	460d      	mov	r5, r1
 8019ac2:	b09d      	sub	sp, #116	; 0x74
 8019ac4:	4614      	mov	r4, r2
 8019ac6:	4698      	mov	r8, r3
 8019ac8:	4606      	mov	r6, r0
 8019aca:	b118      	cbz	r0, 8019ad4 <_vfiprintf_r+0x18>
 8019acc:	6983      	ldr	r3, [r0, #24]
 8019ace:	b90b      	cbnz	r3, 8019ad4 <_vfiprintf_r+0x18>
 8019ad0:	f000 fb06 	bl	801a0e0 <__sinit>
 8019ad4:	4b89      	ldr	r3, [pc, #548]	; (8019cfc <_vfiprintf_r+0x240>)
 8019ad6:	429d      	cmp	r5, r3
 8019ad8:	d11b      	bne.n	8019b12 <_vfiprintf_r+0x56>
 8019ada:	6875      	ldr	r5, [r6, #4]
 8019adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ade:	07d9      	lsls	r1, r3, #31
 8019ae0:	d405      	bmi.n	8019aee <_vfiprintf_r+0x32>
 8019ae2:	89ab      	ldrh	r3, [r5, #12]
 8019ae4:	059a      	lsls	r2, r3, #22
 8019ae6:	d402      	bmi.n	8019aee <_vfiprintf_r+0x32>
 8019ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019aea:	f7ff ff96 	bl	8019a1a <__retarget_lock_acquire_recursive>
 8019aee:	89ab      	ldrh	r3, [r5, #12]
 8019af0:	071b      	lsls	r3, r3, #28
 8019af2:	d501      	bpl.n	8019af8 <_vfiprintf_r+0x3c>
 8019af4:	692b      	ldr	r3, [r5, #16]
 8019af6:	b9eb      	cbnz	r3, 8019b34 <_vfiprintf_r+0x78>
 8019af8:	4629      	mov	r1, r5
 8019afa:	4630      	mov	r0, r6
 8019afc:	f000 f960 	bl	8019dc0 <__swsetup_r>
 8019b00:	b1c0      	cbz	r0, 8019b34 <_vfiprintf_r+0x78>
 8019b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b04:	07dc      	lsls	r4, r3, #31
 8019b06:	d50e      	bpl.n	8019b26 <_vfiprintf_r+0x6a>
 8019b08:	f04f 30ff 	mov.w	r0, #4294967295
 8019b0c:	b01d      	add	sp, #116	; 0x74
 8019b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b12:	4b7b      	ldr	r3, [pc, #492]	; (8019d00 <_vfiprintf_r+0x244>)
 8019b14:	429d      	cmp	r5, r3
 8019b16:	d101      	bne.n	8019b1c <_vfiprintf_r+0x60>
 8019b18:	68b5      	ldr	r5, [r6, #8]
 8019b1a:	e7df      	b.n	8019adc <_vfiprintf_r+0x20>
 8019b1c:	4b79      	ldr	r3, [pc, #484]	; (8019d04 <_vfiprintf_r+0x248>)
 8019b1e:	429d      	cmp	r5, r3
 8019b20:	bf08      	it	eq
 8019b22:	68f5      	ldreq	r5, [r6, #12]
 8019b24:	e7da      	b.n	8019adc <_vfiprintf_r+0x20>
 8019b26:	89ab      	ldrh	r3, [r5, #12]
 8019b28:	0598      	lsls	r0, r3, #22
 8019b2a:	d4ed      	bmi.n	8019b08 <_vfiprintf_r+0x4c>
 8019b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b2e:	f7ff ff75 	bl	8019a1c <__retarget_lock_release_recursive>
 8019b32:	e7e9      	b.n	8019b08 <_vfiprintf_r+0x4c>
 8019b34:	2300      	movs	r3, #0
 8019b36:	9309      	str	r3, [sp, #36]	; 0x24
 8019b38:	2320      	movs	r3, #32
 8019b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b42:	2330      	movs	r3, #48	; 0x30
 8019b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019d08 <_vfiprintf_r+0x24c>
 8019b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b4c:	f04f 0901 	mov.w	r9, #1
 8019b50:	4623      	mov	r3, r4
 8019b52:	469a      	mov	sl, r3
 8019b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b58:	b10a      	cbz	r2, 8019b5e <_vfiprintf_r+0xa2>
 8019b5a:	2a25      	cmp	r2, #37	; 0x25
 8019b5c:	d1f9      	bne.n	8019b52 <_vfiprintf_r+0x96>
 8019b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8019b62:	d00b      	beq.n	8019b7c <_vfiprintf_r+0xc0>
 8019b64:	465b      	mov	r3, fp
 8019b66:	4622      	mov	r2, r4
 8019b68:	4629      	mov	r1, r5
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	f7ff ff94 	bl	8019a98 <__sfputs_r>
 8019b70:	3001      	adds	r0, #1
 8019b72:	f000 80aa 	beq.w	8019cca <_vfiprintf_r+0x20e>
 8019b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b78:	445a      	add	r2, fp
 8019b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8019b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	f000 80a2 	beq.w	8019cca <_vfiprintf_r+0x20e>
 8019b86:	2300      	movs	r3, #0
 8019b88:	f04f 32ff 	mov.w	r2, #4294967295
 8019b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b90:	f10a 0a01 	add.w	sl, sl, #1
 8019b94:	9304      	str	r3, [sp, #16]
 8019b96:	9307      	str	r3, [sp, #28]
 8019b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8019b9e:	4654      	mov	r4, sl
 8019ba0:	2205      	movs	r2, #5
 8019ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ba6:	4858      	ldr	r0, [pc, #352]	; (8019d08 <_vfiprintf_r+0x24c>)
 8019ba8:	f7e6 fb1a 	bl	80001e0 <memchr>
 8019bac:	9a04      	ldr	r2, [sp, #16]
 8019bae:	b9d8      	cbnz	r0, 8019be8 <_vfiprintf_r+0x12c>
 8019bb0:	06d1      	lsls	r1, r2, #27
 8019bb2:	bf44      	itt	mi
 8019bb4:	2320      	movmi	r3, #32
 8019bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bba:	0713      	lsls	r3, r2, #28
 8019bbc:	bf44      	itt	mi
 8019bbe:	232b      	movmi	r3, #43	; 0x2b
 8019bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8019bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8019bca:	d015      	beq.n	8019bf8 <_vfiprintf_r+0x13c>
 8019bcc:	9a07      	ldr	r2, [sp, #28]
 8019bce:	4654      	mov	r4, sl
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	f04f 0c0a 	mov.w	ip, #10
 8019bd6:	4621      	mov	r1, r4
 8019bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bdc:	3b30      	subs	r3, #48	; 0x30
 8019bde:	2b09      	cmp	r3, #9
 8019be0:	d94e      	bls.n	8019c80 <_vfiprintf_r+0x1c4>
 8019be2:	b1b0      	cbz	r0, 8019c12 <_vfiprintf_r+0x156>
 8019be4:	9207      	str	r2, [sp, #28]
 8019be6:	e014      	b.n	8019c12 <_vfiprintf_r+0x156>
 8019be8:	eba0 0308 	sub.w	r3, r0, r8
 8019bec:	fa09 f303 	lsl.w	r3, r9, r3
 8019bf0:	4313      	orrs	r3, r2
 8019bf2:	9304      	str	r3, [sp, #16]
 8019bf4:	46a2      	mov	sl, r4
 8019bf6:	e7d2      	b.n	8019b9e <_vfiprintf_r+0xe2>
 8019bf8:	9b03      	ldr	r3, [sp, #12]
 8019bfa:	1d19      	adds	r1, r3, #4
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	9103      	str	r1, [sp, #12]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	bfbb      	ittet	lt
 8019c04:	425b      	neglt	r3, r3
 8019c06:	f042 0202 	orrlt.w	r2, r2, #2
 8019c0a:	9307      	strge	r3, [sp, #28]
 8019c0c:	9307      	strlt	r3, [sp, #28]
 8019c0e:	bfb8      	it	lt
 8019c10:	9204      	strlt	r2, [sp, #16]
 8019c12:	7823      	ldrb	r3, [r4, #0]
 8019c14:	2b2e      	cmp	r3, #46	; 0x2e
 8019c16:	d10c      	bne.n	8019c32 <_vfiprintf_r+0x176>
 8019c18:	7863      	ldrb	r3, [r4, #1]
 8019c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8019c1c:	d135      	bne.n	8019c8a <_vfiprintf_r+0x1ce>
 8019c1e:	9b03      	ldr	r3, [sp, #12]
 8019c20:	1d1a      	adds	r2, r3, #4
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	9203      	str	r2, [sp, #12]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	bfb8      	it	lt
 8019c2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c2e:	3402      	adds	r4, #2
 8019c30:	9305      	str	r3, [sp, #20]
 8019c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019d18 <_vfiprintf_r+0x25c>
 8019c36:	7821      	ldrb	r1, [r4, #0]
 8019c38:	2203      	movs	r2, #3
 8019c3a:	4650      	mov	r0, sl
 8019c3c:	f7e6 fad0 	bl	80001e0 <memchr>
 8019c40:	b140      	cbz	r0, 8019c54 <_vfiprintf_r+0x198>
 8019c42:	2340      	movs	r3, #64	; 0x40
 8019c44:	eba0 000a 	sub.w	r0, r0, sl
 8019c48:	fa03 f000 	lsl.w	r0, r3, r0
 8019c4c:	9b04      	ldr	r3, [sp, #16]
 8019c4e:	4303      	orrs	r3, r0
 8019c50:	3401      	adds	r4, #1
 8019c52:	9304      	str	r3, [sp, #16]
 8019c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c58:	482c      	ldr	r0, [pc, #176]	; (8019d0c <_vfiprintf_r+0x250>)
 8019c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c5e:	2206      	movs	r2, #6
 8019c60:	f7e6 fabe 	bl	80001e0 <memchr>
 8019c64:	2800      	cmp	r0, #0
 8019c66:	d03f      	beq.n	8019ce8 <_vfiprintf_r+0x22c>
 8019c68:	4b29      	ldr	r3, [pc, #164]	; (8019d10 <_vfiprintf_r+0x254>)
 8019c6a:	bb1b      	cbnz	r3, 8019cb4 <_vfiprintf_r+0x1f8>
 8019c6c:	9b03      	ldr	r3, [sp, #12]
 8019c6e:	3307      	adds	r3, #7
 8019c70:	f023 0307 	bic.w	r3, r3, #7
 8019c74:	3308      	adds	r3, #8
 8019c76:	9303      	str	r3, [sp, #12]
 8019c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c7a:	443b      	add	r3, r7
 8019c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c7e:	e767      	b.n	8019b50 <_vfiprintf_r+0x94>
 8019c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c84:	460c      	mov	r4, r1
 8019c86:	2001      	movs	r0, #1
 8019c88:	e7a5      	b.n	8019bd6 <_vfiprintf_r+0x11a>
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	3401      	adds	r4, #1
 8019c8e:	9305      	str	r3, [sp, #20]
 8019c90:	4619      	mov	r1, r3
 8019c92:	f04f 0c0a 	mov.w	ip, #10
 8019c96:	4620      	mov	r0, r4
 8019c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c9c:	3a30      	subs	r2, #48	; 0x30
 8019c9e:	2a09      	cmp	r2, #9
 8019ca0:	d903      	bls.n	8019caa <_vfiprintf_r+0x1ee>
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d0c5      	beq.n	8019c32 <_vfiprintf_r+0x176>
 8019ca6:	9105      	str	r1, [sp, #20]
 8019ca8:	e7c3      	b.n	8019c32 <_vfiprintf_r+0x176>
 8019caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8019cae:	4604      	mov	r4, r0
 8019cb0:	2301      	movs	r3, #1
 8019cb2:	e7f0      	b.n	8019c96 <_vfiprintf_r+0x1da>
 8019cb4:	ab03      	add	r3, sp, #12
 8019cb6:	9300      	str	r3, [sp, #0]
 8019cb8:	462a      	mov	r2, r5
 8019cba:	4b16      	ldr	r3, [pc, #88]	; (8019d14 <_vfiprintf_r+0x258>)
 8019cbc:	a904      	add	r1, sp, #16
 8019cbe:	4630      	mov	r0, r6
 8019cc0:	f7fc f928 	bl	8015f14 <_printf_float>
 8019cc4:	4607      	mov	r7, r0
 8019cc6:	1c78      	adds	r0, r7, #1
 8019cc8:	d1d6      	bne.n	8019c78 <_vfiprintf_r+0x1bc>
 8019cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ccc:	07d9      	lsls	r1, r3, #31
 8019cce:	d405      	bmi.n	8019cdc <_vfiprintf_r+0x220>
 8019cd0:	89ab      	ldrh	r3, [r5, #12]
 8019cd2:	059a      	lsls	r2, r3, #22
 8019cd4:	d402      	bmi.n	8019cdc <_vfiprintf_r+0x220>
 8019cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cd8:	f7ff fea0 	bl	8019a1c <__retarget_lock_release_recursive>
 8019cdc:	89ab      	ldrh	r3, [r5, #12]
 8019cde:	065b      	lsls	r3, r3, #25
 8019ce0:	f53f af12 	bmi.w	8019b08 <_vfiprintf_r+0x4c>
 8019ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ce6:	e711      	b.n	8019b0c <_vfiprintf_r+0x50>
 8019ce8:	ab03      	add	r3, sp, #12
 8019cea:	9300      	str	r3, [sp, #0]
 8019cec:	462a      	mov	r2, r5
 8019cee:	4b09      	ldr	r3, [pc, #36]	; (8019d14 <_vfiprintf_r+0x258>)
 8019cf0:	a904      	add	r1, sp, #16
 8019cf2:	4630      	mov	r0, r6
 8019cf4:	f7fc fbb2 	bl	801645c <_printf_i>
 8019cf8:	e7e4      	b.n	8019cc4 <_vfiprintf_r+0x208>
 8019cfa:	bf00      	nop
 8019cfc:	0801c62c 	.word	0x0801c62c
 8019d00:	0801c64c 	.word	0x0801c64c
 8019d04:	0801c60c 	.word	0x0801c60c
 8019d08:	0801c5bc 	.word	0x0801c5bc
 8019d0c:	0801c5c6 	.word	0x0801c5c6
 8019d10:	08015f15 	.word	0x08015f15
 8019d14:	08019a99 	.word	0x08019a99
 8019d18:	0801c5c2 	.word	0x0801c5c2

08019d1c <__swbuf_r>:
 8019d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d1e:	460e      	mov	r6, r1
 8019d20:	4614      	mov	r4, r2
 8019d22:	4605      	mov	r5, r0
 8019d24:	b118      	cbz	r0, 8019d2e <__swbuf_r+0x12>
 8019d26:	6983      	ldr	r3, [r0, #24]
 8019d28:	b90b      	cbnz	r3, 8019d2e <__swbuf_r+0x12>
 8019d2a:	f000 f9d9 	bl	801a0e0 <__sinit>
 8019d2e:	4b21      	ldr	r3, [pc, #132]	; (8019db4 <__swbuf_r+0x98>)
 8019d30:	429c      	cmp	r4, r3
 8019d32:	d12b      	bne.n	8019d8c <__swbuf_r+0x70>
 8019d34:	686c      	ldr	r4, [r5, #4]
 8019d36:	69a3      	ldr	r3, [r4, #24]
 8019d38:	60a3      	str	r3, [r4, #8]
 8019d3a:	89a3      	ldrh	r3, [r4, #12]
 8019d3c:	071a      	lsls	r2, r3, #28
 8019d3e:	d52f      	bpl.n	8019da0 <__swbuf_r+0x84>
 8019d40:	6923      	ldr	r3, [r4, #16]
 8019d42:	b36b      	cbz	r3, 8019da0 <__swbuf_r+0x84>
 8019d44:	6923      	ldr	r3, [r4, #16]
 8019d46:	6820      	ldr	r0, [r4, #0]
 8019d48:	1ac0      	subs	r0, r0, r3
 8019d4a:	6963      	ldr	r3, [r4, #20]
 8019d4c:	b2f6      	uxtb	r6, r6
 8019d4e:	4283      	cmp	r3, r0
 8019d50:	4637      	mov	r7, r6
 8019d52:	dc04      	bgt.n	8019d5e <__swbuf_r+0x42>
 8019d54:	4621      	mov	r1, r4
 8019d56:	4628      	mov	r0, r5
 8019d58:	f000 f92e 	bl	8019fb8 <_fflush_r>
 8019d5c:	bb30      	cbnz	r0, 8019dac <__swbuf_r+0x90>
 8019d5e:	68a3      	ldr	r3, [r4, #8]
 8019d60:	3b01      	subs	r3, #1
 8019d62:	60a3      	str	r3, [r4, #8]
 8019d64:	6823      	ldr	r3, [r4, #0]
 8019d66:	1c5a      	adds	r2, r3, #1
 8019d68:	6022      	str	r2, [r4, #0]
 8019d6a:	701e      	strb	r6, [r3, #0]
 8019d6c:	6963      	ldr	r3, [r4, #20]
 8019d6e:	3001      	adds	r0, #1
 8019d70:	4283      	cmp	r3, r0
 8019d72:	d004      	beq.n	8019d7e <__swbuf_r+0x62>
 8019d74:	89a3      	ldrh	r3, [r4, #12]
 8019d76:	07db      	lsls	r3, r3, #31
 8019d78:	d506      	bpl.n	8019d88 <__swbuf_r+0x6c>
 8019d7a:	2e0a      	cmp	r6, #10
 8019d7c:	d104      	bne.n	8019d88 <__swbuf_r+0x6c>
 8019d7e:	4621      	mov	r1, r4
 8019d80:	4628      	mov	r0, r5
 8019d82:	f000 f919 	bl	8019fb8 <_fflush_r>
 8019d86:	b988      	cbnz	r0, 8019dac <__swbuf_r+0x90>
 8019d88:	4638      	mov	r0, r7
 8019d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d8c:	4b0a      	ldr	r3, [pc, #40]	; (8019db8 <__swbuf_r+0x9c>)
 8019d8e:	429c      	cmp	r4, r3
 8019d90:	d101      	bne.n	8019d96 <__swbuf_r+0x7a>
 8019d92:	68ac      	ldr	r4, [r5, #8]
 8019d94:	e7cf      	b.n	8019d36 <__swbuf_r+0x1a>
 8019d96:	4b09      	ldr	r3, [pc, #36]	; (8019dbc <__swbuf_r+0xa0>)
 8019d98:	429c      	cmp	r4, r3
 8019d9a:	bf08      	it	eq
 8019d9c:	68ec      	ldreq	r4, [r5, #12]
 8019d9e:	e7ca      	b.n	8019d36 <__swbuf_r+0x1a>
 8019da0:	4621      	mov	r1, r4
 8019da2:	4628      	mov	r0, r5
 8019da4:	f000 f80c 	bl	8019dc0 <__swsetup_r>
 8019da8:	2800      	cmp	r0, #0
 8019daa:	d0cb      	beq.n	8019d44 <__swbuf_r+0x28>
 8019dac:	f04f 37ff 	mov.w	r7, #4294967295
 8019db0:	e7ea      	b.n	8019d88 <__swbuf_r+0x6c>
 8019db2:	bf00      	nop
 8019db4:	0801c62c 	.word	0x0801c62c
 8019db8:	0801c64c 	.word	0x0801c64c
 8019dbc:	0801c60c 	.word	0x0801c60c

08019dc0 <__swsetup_r>:
 8019dc0:	4b32      	ldr	r3, [pc, #200]	; (8019e8c <__swsetup_r+0xcc>)
 8019dc2:	b570      	push	{r4, r5, r6, lr}
 8019dc4:	681d      	ldr	r5, [r3, #0]
 8019dc6:	4606      	mov	r6, r0
 8019dc8:	460c      	mov	r4, r1
 8019dca:	b125      	cbz	r5, 8019dd6 <__swsetup_r+0x16>
 8019dcc:	69ab      	ldr	r3, [r5, #24]
 8019dce:	b913      	cbnz	r3, 8019dd6 <__swsetup_r+0x16>
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f000 f985 	bl	801a0e0 <__sinit>
 8019dd6:	4b2e      	ldr	r3, [pc, #184]	; (8019e90 <__swsetup_r+0xd0>)
 8019dd8:	429c      	cmp	r4, r3
 8019dda:	d10f      	bne.n	8019dfc <__swsetup_r+0x3c>
 8019ddc:	686c      	ldr	r4, [r5, #4]
 8019dde:	89a3      	ldrh	r3, [r4, #12]
 8019de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019de4:	0719      	lsls	r1, r3, #28
 8019de6:	d42c      	bmi.n	8019e42 <__swsetup_r+0x82>
 8019de8:	06dd      	lsls	r5, r3, #27
 8019dea:	d411      	bmi.n	8019e10 <__swsetup_r+0x50>
 8019dec:	2309      	movs	r3, #9
 8019dee:	6033      	str	r3, [r6, #0]
 8019df0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019df4:	81a3      	strh	r3, [r4, #12]
 8019df6:	f04f 30ff 	mov.w	r0, #4294967295
 8019dfa:	e03e      	b.n	8019e7a <__swsetup_r+0xba>
 8019dfc:	4b25      	ldr	r3, [pc, #148]	; (8019e94 <__swsetup_r+0xd4>)
 8019dfe:	429c      	cmp	r4, r3
 8019e00:	d101      	bne.n	8019e06 <__swsetup_r+0x46>
 8019e02:	68ac      	ldr	r4, [r5, #8]
 8019e04:	e7eb      	b.n	8019dde <__swsetup_r+0x1e>
 8019e06:	4b24      	ldr	r3, [pc, #144]	; (8019e98 <__swsetup_r+0xd8>)
 8019e08:	429c      	cmp	r4, r3
 8019e0a:	bf08      	it	eq
 8019e0c:	68ec      	ldreq	r4, [r5, #12]
 8019e0e:	e7e6      	b.n	8019dde <__swsetup_r+0x1e>
 8019e10:	0758      	lsls	r0, r3, #29
 8019e12:	d512      	bpl.n	8019e3a <__swsetup_r+0x7a>
 8019e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e16:	b141      	cbz	r1, 8019e2a <__swsetup_r+0x6a>
 8019e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e1c:	4299      	cmp	r1, r3
 8019e1e:	d002      	beq.n	8019e26 <__swsetup_r+0x66>
 8019e20:	4630      	mov	r0, r6
 8019e22:	f7fb ff2d 	bl	8015c80 <_free_r>
 8019e26:	2300      	movs	r3, #0
 8019e28:	6363      	str	r3, [r4, #52]	; 0x34
 8019e2a:	89a3      	ldrh	r3, [r4, #12]
 8019e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019e30:	81a3      	strh	r3, [r4, #12]
 8019e32:	2300      	movs	r3, #0
 8019e34:	6063      	str	r3, [r4, #4]
 8019e36:	6923      	ldr	r3, [r4, #16]
 8019e38:	6023      	str	r3, [r4, #0]
 8019e3a:	89a3      	ldrh	r3, [r4, #12]
 8019e3c:	f043 0308 	orr.w	r3, r3, #8
 8019e40:	81a3      	strh	r3, [r4, #12]
 8019e42:	6923      	ldr	r3, [r4, #16]
 8019e44:	b94b      	cbnz	r3, 8019e5a <__swsetup_r+0x9a>
 8019e46:	89a3      	ldrh	r3, [r4, #12]
 8019e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e50:	d003      	beq.n	8019e5a <__swsetup_r+0x9a>
 8019e52:	4621      	mov	r1, r4
 8019e54:	4630      	mov	r0, r6
 8019e56:	f000 fa05 	bl	801a264 <__smakebuf_r>
 8019e5a:	89a0      	ldrh	r0, [r4, #12]
 8019e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e60:	f010 0301 	ands.w	r3, r0, #1
 8019e64:	d00a      	beq.n	8019e7c <__swsetup_r+0xbc>
 8019e66:	2300      	movs	r3, #0
 8019e68:	60a3      	str	r3, [r4, #8]
 8019e6a:	6963      	ldr	r3, [r4, #20]
 8019e6c:	425b      	negs	r3, r3
 8019e6e:	61a3      	str	r3, [r4, #24]
 8019e70:	6923      	ldr	r3, [r4, #16]
 8019e72:	b943      	cbnz	r3, 8019e86 <__swsetup_r+0xc6>
 8019e74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019e78:	d1ba      	bne.n	8019df0 <__swsetup_r+0x30>
 8019e7a:	bd70      	pop	{r4, r5, r6, pc}
 8019e7c:	0781      	lsls	r1, r0, #30
 8019e7e:	bf58      	it	pl
 8019e80:	6963      	ldrpl	r3, [r4, #20]
 8019e82:	60a3      	str	r3, [r4, #8]
 8019e84:	e7f4      	b.n	8019e70 <__swsetup_r+0xb0>
 8019e86:	2000      	movs	r0, #0
 8019e88:	e7f7      	b.n	8019e7a <__swsetup_r+0xba>
 8019e8a:	bf00      	nop
 8019e8c:	20002210 	.word	0x20002210
 8019e90:	0801c62c 	.word	0x0801c62c
 8019e94:	0801c64c 	.word	0x0801c64c
 8019e98:	0801c60c 	.word	0x0801c60c

08019e9c <abort>:
 8019e9c:	b508      	push	{r3, lr}
 8019e9e:	2006      	movs	r0, #6
 8019ea0:	f000 fa50 	bl	801a344 <raise>
 8019ea4:	2001      	movs	r0, #1
 8019ea6:	f7f0 ff9f 	bl	800ade8 <_exit>
	...

08019eac <__sflush_r>:
 8019eac:	898a      	ldrh	r2, [r1, #12]
 8019eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eb2:	4605      	mov	r5, r0
 8019eb4:	0710      	lsls	r0, r2, #28
 8019eb6:	460c      	mov	r4, r1
 8019eb8:	d458      	bmi.n	8019f6c <__sflush_r+0xc0>
 8019eba:	684b      	ldr	r3, [r1, #4]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	dc05      	bgt.n	8019ecc <__sflush_r+0x20>
 8019ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	dc02      	bgt.n	8019ecc <__sflush_r+0x20>
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019ece:	2e00      	cmp	r6, #0
 8019ed0:	d0f9      	beq.n	8019ec6 <__sflush_r+0x1a>
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019ed8:	682f      	ldr	r7, [r5, #0]
 8019eda:	602b      	str	r3, [r5, #0]
 8019edc:	d032      	beq.n	8019f44 <__sflush_r+0x98>
 8019ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019ee0:	89a3      	ldrh	r3, [r4, #12]
 8019ee2:	075a      	lsls	r2, r3, #29
 8019ee4:	d505      	bpl.n	8019ef2 <__sflush_r+0x46>
 8019ee6:	6863      	ldr	r3, [r4, #4]
 8019ee8:	1ac0      	subs	r0, r0, r3
 8019eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019eec:	b10b      	cbz	r3, 8019ef2 <__sflush_r+0x46>
 8019eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ef0:	1ac0      	subs	r0, r0, r3
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019ef8:	6a21      	ldr	r1, [r4, #32]
 8019efa:	4628      	mov	r0, r5
 8019efc:	47b0      	blx	r6
 8019efe:	1c43      	adds	r3, r0, #1
 8019f00:	89a3      	ldrh	r3, [r4, #12]
 8019f02:	d106      	bne.n	8019f12 <__sflush_r+0x66>
 8019f04:	6829      	ldr	r1, [r5, #0]
 8019f06:	291d      	cmp	r1, #29
 8019f08:	d82c      	bhi.n	8019f64 <__sflush_r+0xb8>
 8019f0a:	4a2a      	ldr	r2, [pc, #168]	; (8019fb4 <__sflush_r+0x108>)
 8019f0c:	40ca      	lsrs	r2, r1
 8019f0e:	07d6      	lsls	r6, r2, #31
 8019f10:	d528      	bpl.n	8019f64 <__sflush_r+0xb8>
 8019f12:	2200      	movs	r2, #0
 8019f14:	6062      	str	r2, [r4, #4]
 8019f16:	04d9      	lsls	r1, r3, #19
 8019f18:	6922      	ldr	r2, [r4, #16]
 8019f1a:	6022      	str	r2, [r4, #0]
 8019f1c:	d504      	bpl.n	8019f28 <__sflush_r+0x7c>
 8019f1e:	1c42      	adds	r2, r0, #1
 8019f20:	d101      	bne.n	8019f26 <__sflush_r+0x7a>
 8019f22:	682b      	ldr	r3, [r5, #0]
 8019f24:	b903      	cbnz	r3, 8019f28 <__sflush_r+0x7c>
 8019f26:	6560      	str	r0, [r4, #84]	; 0x54
 8019f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f2a:	602f      	str	r7, [r5, #0]
 8019f2c:	2900      	cmp	r1, #0
 8019f2e:	d0ca      	beq.n	8019ec6 <__sflush_r+0x1a>
 8019f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f34:	4299      	cmp	r1, r3
 8019f36:	d002      	beq.n	8019f3e <__sflush_r+0x92>
 8019f38:	4628      	mov	r0, r5
 8019f3a:	f7fb fea1 	bl	8015c80 <_free_r>
 8019f3e:	2000      	movs	r0, #0
 8019f40:	6360      	str	r0, [r4, #52]	; 0x34
 8019f42:	e7c1      	b.n	8019ec8 <__sflush_r+0x1c>
 8019f44:	6a21      	ldr	r1, [r4, #32]
 8019f46:	2301      	movs	r3, #1
 8019f48:	4628      	mov	r0, r5
 8019f4a:	47b0      	blx	r6
 8019f4c:	1c41      	adds	r1, r0, #1
 8019f4e:	d1c7      	bne.n	8019ee0 <__sflush_r+0x34>
 8019f50:	682b      	ldr	r3, [r5, #0]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d0c4      	beq.n	8019ee0 <__sflush_r+0x34>
 8019f56:	2b1d      	cmp	r3, #29
 8019f58:	d001      	beq.n	8019f5e <__sflush_r+0xb2>
 8019f5a:	2b16      	cmp	r3, #22
 8019f5c:	d101      	bne.n	8019f62 <__sflush_r+0xb6>
 8019f5e:	602f      	str	r7, [r5, #0]
 8019f60:	e7b1      	b.n	8019ec6 <__sflush_r+0x1a>
 8019f62:	89a3      	ldrh	r3, [r4, #12]
 8019f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f68:	81a3      	strh	r3, [r4, #12]
 8019f6a:	e7ad      	b.n	8019ec8 <__sflush_r+0x1c>
 8019f6c:	690f      	ldr	r7, [r1, #16]
 8019f6e:	2f00      	cmp	r7, #0
 8019f70:	d0a9      	beq.n	8019ec6 <__sflush_r+0x1a>
 8019f72:	0793      	lsls	r3, r2, #30
 8019f74:	680e      	ldr	r6, [r1, #0]
 8019f76:	bf08      	it	eq
 8019f78:	694b      	ldreq	r3, [r1, #20]
 8019f7a:	600f      	str	r7, [r1, #0]
 8019f7c:	bf18      	it	ne
 8019f7e:	2300      	movne	r3, #0
 8019f80:	eba6 0807 	sub.w	r8, r6, r7
 8019f84:	608b      	str	r3, [r1, #8]
 8019f86:	f1b8 0f00 	cmp.w	r8, #0
 8019f8a:	dd9c      	ble.n	8019ec6 <__sflush_r+0x1a>
 8019f8c:	6a21      	ldr	r1, [r4, #32]
 8019f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019f90:	4643      	mov	r3, r8
 8019f92:	463a      	mov	r2, r7
 8019f94:	4628      	mov	r0, r5
 8019f96:	47b0      	blx	r6
 8019f98:	2800      	cmp	r0, #0
 8019f9a:	dc06      	bgt.n	8019faa <__sflush_r+0xfe>
 8019f9c:	89a3      	ldrh	r3, [r4, #12]
 8019f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fa2:	81a3      	strh	r3, [r4, #12]
 8019fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8019fa8:	e78e      	b.n	8019ec8 <__sflush_r+0x1c>
 8019faa:	4407      	add	r7, r0
 8019fac:	eba8 0800 	sub.w	r8, r8, r0
 8019fb0:	e7e9      	b.n	8019f86 <__sflush_r+0xda>
 8019fb2:	bf00      	nop
 8019fb4:	20400001 	.word	0x20400001

08019fb8 <_fflush_r>:
 8019fb8:	b538      	push	{r3, r4, r5, lr}
 8019fba:	690b      	ldr	r3, [r1, #16]
 8019fbc:	4605      	mov	r5, r0
 8019fbe:	460c      	mov	r4, r1
 8019fc0:	b913      	cbnz	r3, 8019fc8 <_fflush_r+0x10>
 8019fc2:	2500      	movs	r5, #0
 8019fc4:	4628      	mov	r0, r5
 8019fc6:	bd38      	pop	{r3, r4, r5, pc}
 8019fc8:	b118      	cbz	r0, 8019fd2 <_fflush_r+0x1a>
 8019fca:	6983      	ldr	r3, [r0, #24]
 8019fcc:	b90b      	cbnz	r3, 8019fd2 <_fflush_r+0x1a>
 8019fce:	f000 f887 	bl	801a0e0 <__sinit>
 8019fd2:	4b14      	ldr	r3, [pc, #80]	; (801a024 <_fflush_r+0x6c>)
 8019fd4:	429c      	cmp	r4, r3
 8019fd6:	d11b      	bne.n	801a010 <_fflush_r+0x58>
 8019fd8:	686c      	ldr	r4, [r5, #4]
 8019fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d0ef      	beq.n	8019fc2 <_fflush_r+0xa>
 8019fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019fe4:	07d0      	lsls	r0, r2, #31
 8019fe6:	d404      	bmi.n	8019ff2 <_fflush_r+0x3a>
 8019fe8:	0599      	lsls	r1, r3, #22
 8019fea:	d402      	bmi.n	8019ff2 <_fflush_r+0x3a>
 8019fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019fee:	f7ff fd14 	bl	8019a1a <__retarget_lock_acquire_recursive>
 8019ff2:	4628      	mov	r0, r5
 8019ff4:	4621      	mov	r1, r4
 8019ff6:	f7ff ff59 	bl	8019eac <__sflush_r>
 8019ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ffc:	07da      	lsls	r2, r3, #31
 8019ffe:	4605      	mov	r5, r0
 801a000:	d4e0      	bmi.n	8019fc4 <_fflush_r+0xc>
 801a002:	89a3      	ldrh	r3, [r4, #12]
 801a004:	059b      	lsls	r3, r3, #22
 801a006:	d4dd      	bmi.n	8019fc4 <_fflush_r+0xc>
 801a008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a00a:	f7ff fd07 	bl	8019a1c <__retarget_lock_release_recursive>
 801a00e:	e7d9      	b.n	8019fc4 <_fflush_r+0xc>
 801a010:	4b05      	ldr	r3, [pc, #20]	; (801a028 <_fflush_r+0x70>)
 801a012:	429c      	cmp	r4, r3
 801a014:	d101      	bne.n	801a01a <_fflush_r+0x62>
 801a016:	68ac      	ldr	r4, [r5, #8]
 801a018:	e7df      	b.n	8019fda <_fflush_r+0x22>
 801a01a:	4b04      	ldr	r3, [pc, #16]	; (801a02c <_fflush_r+0x74>)
 801a01c:	429c      	cmp	r4, r3
 801a01e:	bf08      	it	eq
 801a020:	68ec      	ldreq	r4, [r5, #12]
 801a022:	e7da      	b.n	8019fda <_fflush_r+0x22>
 801a024:	0801c62c 	.word	0x0801c62c
 801a028:	0801c64c 	.word	0x0801c64c
 801a02c:	0801c60c 	.word	0x0801c60c

0801a030 <std>:
 801a030:	2300      	movs	r3, #0
 801a032:	b510      	push	{r4, lr}
 801a034:	4604      	mov	r4, r0
 801a036:	e9c0 3300 	strd	r3, r3, [r0]
 801a03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a03e:	6083      	str	r3, [r0, #8]
 801a040:	8181      	strh	r1, [r0, #12]
 801a042:	6643      	str	r3, [r0, #100]	; 0x64
 801a044:	81c2      	strh	r2, [r0, #14]
 801a046:	6183      	str	r3, [r0, #24]
 801a048:	4619      	mov	r1, r3
 801a04a:	2208      	movs	r2, #8
 801a04c:	305c      	adds	r0, #92	; 0x5c
 801a04e:	f7fb fe0f 	bl	8015c70 <memset>
 801a052:	4b05      	ldr	r3, [pc, #20]	; (801a068 <std+0x38>)
 801a054:	6263      	str	r3, [r4, #36]	; 0x24
 801a056:	4b05      	ldr	r3, [pc, #20]	; (801a06c <std+0x3c>)
 801a058:	62a3      	str	r3, [r4, #40]	; 0x28
 801a05a:	4b05      	ldr	r3, [pc, #20]	; (801a070 <std+0x40>)
 801a05c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a05e:	4b05      	ldr	r3, [pc, #20]	; (801a074 <std+0x44>)
 801a060:	6224      	str	r4, [r4, #32]
 801a062:	6323      	str	r3, [r4, #48]	; 0x30
 801a064:	bd10      	pop	{r4, pc}
 801a066:	bf00      	nop
 801a068:	0801a37d 	.word	0x0801a37d
 801a06c:	0801a39f 	.word	0x0801a39f
 801a070:	0801a3d7 	.word	0x0801a3d7
 801a074:	0801a3fb 	.word	0x0801a3fb

0801a078 <_cleanup_r>:
 801a078:	4901      	ldr	r1, [pc, #4]	; (801a080 <_cleanup_r+0x8>)
 801a07a:	f000 b8af 	b.w	801a1dc <_fwalk_reent>
 801a07e:	bf00      	nop
 801a080:	08019fb9 	.word	0x08019fb9

0801a084 <__sfmoreglue>:
 801a084:	b570      	push	{r4, r5, r6, lr}
 801a086:	1e4a      	subs	r2, r1, #1
 801a088:	2568      	movs	r5, #104	; 0x68
 801a08a:	4355      	muls	r5, r2
 801a08c:	460e      	mov	r6, r1
 801a08e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a092:	f7fb fe45 	bl	8015d20 <_malloc_r>
 801a096:	4604      	mov	r4, r0
 801a098:	b140      	cbz	r0, 801a0ac <__sfmoreglue+0x28>
 801a09a:	2100      	movs	r1, #0
 801a09c:	e9c0 1600 	strd	r1, r6, [r0]
 801a0a0:	300c      	adds	r0, #12
 801a0a2:	60a0      	str	r0, [r4, #8]
 801a0a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a0a8:	f7fb fde2 	bl	8015c70 <memset>
 801a0ac:	4620      	mov	r0, r4
 801a0ae:	bd70      	pop	{r4, r5, r6, pc}

0801a0b0 <__sfp_lock_acquire>:
 801a0b0:	4801      	ldr	r0, [pc, #4]	; (801a0b8 <__sfp_lock_acquire+0x8>)
 801a0b2:	f7ff bcb2 	b.w	8019a1a <__retarget_lock_acquire_recursive>
 801a0b6:	bf00      	nop
 801a0b8:	2000fb48 	.word	0x2000fb48

0801a0bc <__sfp_lock_release>:
 801a0bc:	4801      	ldr	r0, [pc, #4]	; (801a0c4 <__sfp_lock_release+0x8>)
 801a0be:	f7ff bcad 	b.w	8019a1c <__retarget_lock_release_recursive>
 801a0c2:	bf00      	nop
 801a0c4:	2000fb48 	.word	0x2000fb48

0801a0c8 <__sinit_lock_acquire>:
 801a0c8:	4801      	ldr	r0, [pc, #4]	; (801a0d0 <__sinit_lock_acquire+0x8>)
 801a0ca:	f7ff bca6 	b.w	8019a1a <__retarget_lock_acquire_recursive>
 801a0ce:	bf00      	nop
 801a0d0:	2000fb43 	.word	0x2000fb43

0801a0d4 <__sinit_lock_release>:
 801a0d4:	4801      	ldr	r0, [pc, #4]	; (801a0dc <__sinit_lock_release+0x8>)
 801a0d6:	f7ff bca1 	b.w	8019a1c <__retarget_lock_release_recursive>
 801a0da:	bf00      	nop
 801a0dc:	2000fb43 	.word	0x2000fb43

0801a0e0 <__sinit>:
 801a0e0:	b510      	push	{r4, lr}
 801a0e2:	4604      	mov	r4, r0
 801a0e4:	f7ff fff0 	bl	801a0c8 <__sinit_lock_acquire>
 801a0e8:	69a3      	ldr	r3, [r4, #24]
 801a0ea:	b11b      	cbz	r3, 801a0f4 <__sinit+0x14>
 801a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0f0:	f7ff bff0 	b.w	801a0d4 <__sinit_lock_release>
 801a0f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a0f8:	6523      	str	r3, [r4, #80]	; 0x50
 801a0fa:	4b13      	ldr	r3, [pc, #76]	; (801a148 <__sinit+0x68>)
 801a0fc:	4a13      	ldr	r2, [pc, #76]	; (801a14c <__sinit+0x6c>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	62a2      	str	r2, [r4, #40]	; 0x28
 801a102:	42a3      	cmp	r3, r4
 801a104:	bf04      	itt	eq
 801a106:	2301      	moveq	r3, #1
 801a108:	61a3      	streq	r3, [r4, #24]
 801a10a:	4620      	mov	r0, r4
 801a10c:	f000 f820 	bl	801a150 <__sfp>
 801a110:	6060      	str	r0, [r4, #4]
 801a112:	4620      	mov	r0, r4
 801a114:	f000 f81c 	bl	801a150 <__sfp>
 801a118:	60a0      	str	r0, [r4, #8]
 801a11a:	4620      	mov	r0, r4
 801a11c:	f000 f818 	bl	801a150 <__sfp>
 801a120:	2200      	movs	r2, #0
 801a122:	60e0      	str	r0, [r4, #12]
 801a124:	2104      	movs	r1, #4
 801a126:	6860      	ldr	r0, [r4, #4]
 801a128:	f7ff ff82 	bl	801a030 <std>
 801a12c:	68a0      	ldr	r0, [r4, #8]
 801a12e:	2201      	movs	r2, #1
 801a130:	2109      	movs	r1, #9
 801a132:	f7ff ff7d 	bl	801a030 <std>
 801a136:	68e0      	ldr	r0, [r4, #12]
 801a138:	2202      	movs	r2, #2
 801a13a:	2112      	movs	r1, #18
 801a13c:	f7ff ff78 	bl	801a030 <std>
 801a140:	2301      	movs	r3, #1
 801a142:	61a3      	str	r3, [r4, #24]
 801a144:	e7d2      	b.n	801a0ec <__sinit+0xc>
 801a146:	bf00      	nop
 801a148:	0801c1b8 	.word	0x0801c1b8
 801a14c:	0801a079 	.word	0x0801a079

0801a150 <__sfp>:
 801a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a152:	4607      	mov	r7, r0
 801a154:	f7ff ffac 	bl	801a0b0 <__sfp_lock_acquire>
 801a158:	4b1e      	ldr	r3, [pc, #120]	; (801a1d4 <__sfp+0x84>)
 801a15a:	681e      	ldr	r6, [r3, #0]
 801a15c:	69b3      	ldr	r3, [r6, #24]
 801a15e:	b913      	cbnz	r3, 801a166 <__sfp+0x16>
 801a160:	4630      	mov	r0, r6
 801a162:	f7ff ffbd 	bl	801a0e0 <__sinit>
 801a166:	3648      	adds	r6, #72	; 0x48
 801a168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a16c:	3b01      	subs	r3, #1
 801a16e:	d503      	bpl.n	801a178 <__sfp+0x28>
 801a170:	6833      	ldr	r3, [r6, #0]
 801a172:	b30b      	cbz	r3, 801a1b8 <__sfp+0x68>
 801a174:	6836      	ldr	r6, [r6, #0]
 801a176:	e7f7      	b.n	801a168 <__sfp+0x18>
 801a178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a17c:	b9d5      	cbnz	r5, 801a1b4 <__sfp+0x64>
 801a17e:	4b16      	ldr	r3, [pc, #88]	; (801a1d8 <__sfp+0x88>)
 801a180:	60e3      	str	r3, [r4, #12]
 801a182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a186:	6665      	str	r5, [r4, #100]	; 0x64
 801a188:	f7ff fc46 	bl	8019a18 <__retarget_lock_init_recursive>
 801a18c:	f7ff ff96 	bl	801a0bc <__sfp_lock_release>
 801a190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a198:	6025      	str	r5, [r4, #0]
 801a19a:	61a5      	str	r5, [r4, #24]
 801a19c:	2208      	movs	r2, #8
 801a19e:	4629      	mov	r1, r5
 801a1a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a1a4:	f7fb fd64 	bl	8015c70 <memset>
 801a1a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a1ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a1b0:	4620      	mov	r0, r4
 801a1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1b4:	3468      	adds	r4, #104	; 0x68
 801a1b6:	e7d9      	b.n	801a16c <__sfp+0x1c>
 801a1b8:	2104      	movs	r1, #4
 801a1ba:	4638      	mov	r0, r7
 801a1bc:	f7ff ff62 	bl	801a084 <__sfmoreglue>
 801a1c0:	4604      	mov	r4, r0
 801a1c2:	6030      	str	r0, [r6, #0]
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d1d5      	bne.n	801a174 <__sfp+0x24>
 801a1c8:	f7ff ff78 	bl	801a0bc <__sfp_lock_release>
 801a1cc:	230c      	movs	r3, #12
 801a1ce:	603b      	str	r3, [r7, #0]
 801a1d0:	e7ee      	b.n	801a1b0 <__sfp+0x60>
 801a1d2:	bf00      	nop
 801a1d4:	0801c1b8 	.word	0x0801c1b8
 801a1d8:	ffff0001 	.word	0xffff0001

0801a1dc <_fwalk_reent>:
 801a1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1e0:	4606      	mov	r6, r0
 801a1e2:	4688      	mov	r8, r1
 801a1e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a1e8:	2700      	movs	r7, #0
 801a1ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a1ee:	f1b9 0901 	subs.w	r9, r9, #1
 801a1f2:	d505      	bpl.n	801a200 <_fwalk_reent+0x24>
 801a1f4:	6824      	ldr	r4, [r4, #0]
 801a1f6:	2c00      	cmp	r4, #0
 801a1f8:	d1f7      	bne.n	801a1ea <_fwalk_reent+0xe>
 801a1fa:	4638      	mov	r0, r7
 801a1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a200:	89ab      	ldrh	r3, [r5, #12]
 801a202:	2b01      	cmp	r3, #1
 801a204:	d907      	bls.n	801a216 <_fwalk_reent+0x3a>
 801a206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a20a:	3301      	adds	r3, #1
 801a20c:	d003      	beq.n	801a216 <_fwalk_reent+0x3a>
 801a20e:	4629      	mov	r1, r5
 801a210:	4630      	mov	r0, r6
 801a212:	47c0      	blx	r8
 801a214:	4307      	orrs	r7, r0
 801a216:	3568      	adds	r5, #104	; 0x68
 801a218:	e7e9      	b.n	801a1ee <_fwalk_reent+0x12>

0801a21a <__swhatbuf_r>:
 801a21a:	b570      	push	{r4, r5, r6, lr}
 801a21c:	460e      	mov	r6, r1
 801a21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a222:	2900      	cmp	r1, #0
 801a224:	b096      	sub	sp, #88	; 0x58
 801a226:	4614      	mov	r4, r2
 801a228:	461d      	mov	r5, r3
 801a22a:	da07      	bge.n	801a23c <__swhatbuf_r+0x22>
 801a22c:	2300      	movs	r3, #0
 801a22e:	602b      	str	r3, [r5, #0]
 801a230:	89b3      	ldrh	r3, [r6, #12]
 801a232:	061a      	lsls	r2, r3, #24
 801a234:	d410      	bmi.n	801a258 <__swhatbuf_r+0x3e>
 801a236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a23a:	e00e      	b.n	801a25a <__swhatbuf_r+0x40>
 801a23c:	466a      	mov	r2, sp
 801a23e:	f000 f903 	bl	801a448 <_fstat_r>
 801a242:	2800      	cmp	r0, #0
 801a244:	dbf2      	blt.n	801a22c <__swhatbuf_r+0x12>
 801a246:	9a01      	ldr	r2, [sp, #4]
 801a248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a24c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a250:	425a      	negs	r2, r3
 801a252:	415a      	adcs	r2, r3
 801a254:	602a      	str	r2, [r5, #0]
 801a256:	e7ee      	b.n	801a236 <__swhatbuf_r+0x1c>
 801a258:	2340      	movs	r3, #64	; 0x40
 801a25a:	2000      	movs	r0, #0
 801a25c:	6023      	str	r3, [r4, #0]
 801a25e:	b016      	add	sp, #88	; 0x58
 801a260:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a264 <__smakebuf_r>:
 801a264:	898b      	ldrh	r3, [r1, #12]
 801a266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a268:	079d      	lsls	r5, r3, #30
 801a26a:	4606      	mov	r6, r0
 801a26c:	460c      	mov	r4, r1
 801a26e:	d507      	bpl.n	801a280 <__smakebuf_r+0x1c>
 801a270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a274:	6023      	str	r3, [r4, #0]
 801a276:	6123      	str	r3, [r4, #16]
 801a278:	2301      	movs	r3, #1
 801a27a:	6163      	str	r3, [r4, #20]
 801a27c:	b002      	add	sp, #8
 801a27e:	bd70      	pop	{r4, r5, r6, pc}
 801a280:	ab01      	add	r3, sp, #4
 801a282:	466a      	mov	r2, sp
 801a284:	f7ff ffc9 	bl	801a21a <__swhatbuf_r>
 801a288:	9900      	ldr	r1, [sp, #0]
 801a28a:	4605      	mov	r5, r0
 801a28c:	4630      	mov	r0, r6
 801a28e:	f7fb fd47 	bl	8015d20 <_malloc_r>
 801a292:	b948      	cbnz	r0, 801a2a8 <__smakebuf_r+0x44>
 801a294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a298:	059a      	lsls	r2, r3, #22
 801a29a:	d4ef      	bmi.n	801a27c <__smakebuf_r+0x18>
 801a29c:	f023 0303 	bic.w	r3, r3, #3
 801a2a0:	f043 0302 	orr.w	r3, r3, #2
 801a2a4:	81a3      	strh	r3, [r4, #12]
 801a2a6:	e7e3      	b.n	801a270 <__smakebuf_r+0xc>
 801a2a8:	4b0d      	ldr	r3, [pc, #52]	; (801a2e0 <__smakebuf_r+0x7c>)
 801a2aa:	62b3      	str	r3, [r6, #40]	; 0x28
 801a2ac:	89a3      	ldrh	r3, [r4, #12]
 801a2ae:	6020      	str	r0, [r4, #0]
 801a2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a2b4:	81a3      	strh	r3, [r4, #12]
 801a2b6:	9b00      	ldr	r3, [sp, #0]
 801a2b8:	6163      	str	r3, [r4, #20]
 801a2ba:	9b01      	ldr	r3, [sp, #4]
 801a2bc:	6120      	str	r0, [r4, #16]
 801a2be:	b15b      	cbz	r3, 801a2d8 <__smakebuf_r+0x74>
 801a2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2c4:	4630      	mov	r0, r6
 801a2c6:	f000 f8d1 	bl	801a46c <_isatty_r>
 801a2ca:	b128      	cbz	r0, 801a2d8 <__smakebuf_r+0x74>
 801a2cc:	89a3      	ldrh	r3, [r4, #12]
 801a2ce:	f023 0303 	bic.w	r3, r3, #3
 801a2d2:	f043 0301 	orr.w	r3, r3, #1
 801a2d6:	81a3      	strh	r3, [r4, #12]
 801a2d8:	89a0      	ldrh	r0, [r4, #12]
 801a2da:	4305      	orrs	r5, r0
 801a2dc:	81a5      	strh	r5, [r4, #12]
 801a2de:	e7cd      	b.n	801a27c <__smakebuf_r+0x18>
 801a2e0:	0801a079 	.word	0x0801a079

0801a2e4 <_malloc_usable_size_r>:
 801a2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2e8:	1f18      	subs	r0, r3, #4
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	bfbc      	itt	lt
 801a2ee:	580b      	ldrlt	r3, [r1, r0]
 801a2f0:	18c0      	addlt	r0, r0, r3
 801a2f2:	4770      	bx	lr

0801a2f4 <_raise_r>:
 801a2f4:	291f      	cmp	r1, #31
 801a2f6:	b538      	push	{r3, r4, r5, lr}
 801a2f8:	4604      	mov	r4, r0
 801a2fa:	460d      	mov	r5, r1
 801a2fc:	d904      	bls.n	801a308 <_raise_r+0x14>
 801a2fe:	2316      	movs	r3, #22
 801a300:	6003      	str	r3, [r0, #0]
 801a302:	f04f 30ff 	mov.w	r0, #4294967295
 801a306:	bd38      	pop	{r3, r4, r5, pc}
 801a308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a30a:	b112      	cbz	r2, 801a312 <_raise_r+0x1e>
 801a30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a310:	b94b      	cbnz	r3, 801a326 <_raise_r+0x32>
 801a312:	4620      	mov	r0, r4
 801a314:	f000 f830 	bl	801a378 <_getpid_r>
 801a318:	462a      	mov	r2, r5
 801a31a:	4601      	mov	r1, r0
 801a31c:	4620      	mov	r0, r4
 801a31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a322:	f000 b817 	b.w	801a354 <_kill_r>
 801a326:	2b01      	cmp	r3, #1
 801a328:	d00a      	beq.n	801a340 <_raise_r+0x4c>
 801a32a:	1c59      	adds	r1, r3, #1
 801a32c:	d103      	bne.n	801a336 <_raise_r+0x42>
 801a32e:	2316      	movs	r3, #22
 801a330:	6003      	str	r3, [r0, #0]
 801a332:	2001      	movs	r0, #1
 801a334:	e7e7      	b.n	801a306 <_raise_r+0x12>
 801a336:	2400      	movs	r4, #0
 801a338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a33c:	4628      	mov	r0, r5
 801a33e:	4798      	blx	r3
 801a340:	2000      	movs	r0, #0
 801a342:	e7e0      	b.n	801a306 <_raise_r+0x12>

0801a344 <raise>:
 801a344:	4b02      	ldr	r3, [pc, #8]	; (801a350 <raise+0xc>)
 801a346:	4601      	mov	r1, r0
 801a348:	6818      	ldr	r0, [r3, #0]
 801a34a:	f7ff bfd3 	b.w	801a2f4 <_raise_r>
 801a34e:	bf00      	nop
 801a350:	20002210 	.word	0x20002210

0801a354 <_kill_r>:
 801a354:	b538      	push	{r3, r4, r5, lr}
 801a356:	4d07      	ldr	r5, [pc, #28]	; (801a374 <_kill_r+0x20>)
 801a358:	2300      	movs	r3, #0
 801a35a:	4604      	mov	r4, r0
 801a35c:	4608      	mov	r0, r1
 801a35e:	4611      	mov	r1, r2
 801a360:	602b      	str	r3, [r5, #0]
 801a362:	f7f0 fd31 	bl	800adc8 <_kill>
 801a366:	1c43      	adds	r3, r0, #1
 801a368:	d102      	bne.n	801a370 <_kill_r+0x1c>
 801a36a:	682b      	ldr	r3, [r5, #0]
 801a36c:	b103      	cbz	r3, 801a370 <_kill_r+0x1c>
 801a36e:	6023      	str	r3, [r4, #0]
 801a370:	bd38      	pop	{r3, r4, r5, pc}
 801a372:	bf00      	nop
 801a374:	2000fb3c 	.word	0x2000fb3c

0801a378 <_getpid_r>:
 801a378:	f7f0 bd1e 	b.w	800adb8 <_getpid>

0801a37c <__sread>:
 801a37c:	b510      	push	{r4, lr}
 801a37e:	460c      	mov	r4, r1
 801a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a384:	f000 f894 	bl	801a4b0 <_read_r>
 801a388:	2800      	cmp	r0, #0
 801a38a:	bfab      	itete	ge
 801a38c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a38e:	89a3      	ldrhlt	r3, [r4, #12]
 801a390:	181b      	addge	r3, r3, r0
 801a392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a396:	bfac      	ite	ge
 801a398:	6563      	strge	r3, [r4, #84]	; 0x54
 801a39a:	81a3      	strhlt	r3, [r4, #12]
 801a39c:	bd10      	pop	{r4, pc}

0801a39e <__swrite>:
 801a39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3a2:	461f      	mov	r7, r3
 801a3a4:	898b      	ldrh	r3, [r1, #12]
 801a3a6:	05db      	lsls	r3, r3, #23
 801a3a8:	4605      	mov	r5, r0
 801a3aa:	460c      	mov	r4, r1
 801a3ac:	4616      	mov	r6, r2
 801a3ae:	d505      	bpl.n	801a3bc <__swrite+0x1e>
 801a3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3b4:	2302      	movs	r3, #2
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	f000 f868 	bl	801a48c <_lseek_r>
 801a3bc:	89a3      	ldrh	r3, [r4, #12]
 801a3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a3c6:	81a3      	strh	r3, [r4, #12]
 801a3c8:	4632      	mov	r2, r6
 801a3ca:	463b      	mov	r3, r7
 801a3cc:	4628      	mov	r0, r5
 801a3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3d2:	f000 b817 	b.w	801a404 <_write_r>

0801a3d6 <__sseek>:
 801a3d6:	b510      	push	{r4, lr}
 801a3d8:	460c      	mov	r4, r1
 801a3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3de:	f000 f855 	bl	801a48c <_lseek_r>
 801a3e2:	1c43      	adds	r3, r0, #1
 801a3e4:	89a3      	ldrh	r3, [r4, #12]
 801a3e6:	bf15      	itete	ne
 801a3e8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a3ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a3ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a3f2:	81a3      	strheq	r3, [r4, #12]
 801a3f4:	bf18      	it	ne
 801a3f6:	81a3      	strhne	r3, [r4, #12]
 801a3f8:	bd10      	pop	{r4, pc}

0801a3fa <__sclose>:
 801a3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3fe:	f000 b813 	b.w	801a428 <_close_r>
	...

0801a404 <_write_r>:
 801a404:	b538      	push	{r3, r4, r5, lr}
 801a406:	4d07      	ldr	r5, [pc, #28]	; (801a424 <_write_r+0x20>)
 801a408:	4604      	mov	r4, r0
 801a40a:	4608      	mov	r0, r1
 801a40c:	4611      	mov	r1, r2
 801a40e:	2200      	movs	r2, #0
 801a410:	602a      	str	r2, [r5, #0]
 801a412:	461a      	mov	r2, r3
 801a414:	f7f0 fd0f 	bl	800ae36 <_write>
 801a418:	1c43      	adds	r3, r0, #1
 801a41a:	d102      	bne.n	801a422 <_write_r+0x1e>
 801a41c:	682b      	ldr	r3, [r5, #0]
 801a41e:	b103      	cbz	r3, 801a422 <_write_r+0x1e>
 801a420:	6023      	str	r3, [r4, #0]
 801a422:	bd38      	pop	{r3, r4, r5, pc}
 801a424:	2000fb3c 	.word	0x2000fb3c

0801a428 <_close_r>:
 801a428:	b538      	push	{r3, r4, r5, lr}
 801a42a:	4d06      	ldr	r5, [pc, #24]	; (801a444 <_close_r+0x1c>)
 801a42c:	2300      	movs	r3, #0
 801a42e:	4604      	mov	r4, r0
 801a430:	4608      	mov	r0, r1
 801a432:	602b      	str	r3, [r5, #0]
 801a434:	f7f0 fd1b 	bl	800ae6e <_close>
 801a438:	1c43      	adds	r3, r0, #1
 801a43a:	d102      	bne.n	801a442 <_close_r+0x1a>
 801a43c:	682b      	ldr	r3, [r5, #0]
 801a43e:	b103      	cbz	r3, 801a442 <_close_r+0x1a>
 801a440:	6023      	str	r3, [r4, #0]
 801a442:	bd38      	pop	{r3, r4, r5, pc}
 801a444:	2000fb3c 	.word	0x2000fb3c

0801a448 <_fstat_r>:
 801a448:	b538      	push	{r3, r4, r5, lr}
 801a44a:	4d07      	ldr	r5, [pc, #28]	; (801a468 <_fstat_r+0x20>)
 801a44c:	2300      	movs	r3, #0
 801a44e:	4604      	mov	r4, r0
 801a450:	4608      	mov	r0, r1
 801a452:	4611      	mov	r1, r2
 801a454:	602b      	str	r3, [r5, #0]
 801a456:	f7f0 fd16 	bl	800ae86 <_fstat>
 801a45a:	1c43      	adds	r3, r0, #1
 801a45c:	d102      	bne.n	801a464 <_fstat_r+0x1c>
 801a45e:	682b      	ldr	r3, [r5, #0]
 801a460:	b103      	cbz	r3, 801a464 <_fstat_r+0x1c>
 801a462:	6023      	str	r3, [r4, #0]
 801a464:	bd38      	pop	{r3, r4, r5, pc}
 801a466:	bf00      	nop
 801a468:	2000fb3c 	.word	0x2000fb3c

0801a46c <_isatty_r>:
 801a46c:	b538      	push	{r3, r4, r5, lr}
 801a46e:	4d06      	ldr	r5, [pc, #24]	; (801a488 <_isatty_r+0x1c>)
 801a470:	2300      	movs	r3, #0
 801a472:	4604      	mov	r4, r0
 801a474:	4608      	mov	r0, r1
 801a476:	602b      	str	r3, [r5, #0]
 801a478:	f7f0 fd15 	bl	800aea6 <_isatty>
 801a47c:	1c43      	adds	r3, r0, #1
 801a47e:	d102      	bne.n	801a486 <_isatty_r+0x1a>
 801a480:	682b      	ldr	r3, [r5, #0]
 801a482:	b103      	cbz	r3, 801a486 <_isatty_r+0x1a>
 801a484:	6023      	str	r3, [r4, #0]
 801a486:	bd38      	pop	{r3, r4, r5, pc}
 801a488:	2000fb3c 	.word	0x2000fb3c

0801a48c <_lseek_r>:
 801a48c:	b538      	push	{r3, r4, r5, lr}
 801a48e:	4d07      	ldr	r5, [pc, #28]	; (801a4ac <_lseek_r+0x20>)
 801a490:	4604      	mov	r4, r0
 801a492:	4608      	mov	r0, r1
 801a494:	4611      	mov	r1, r2
 801a496:	2200      	movs	r2, #0
 801a498:	602a      	str	r2, [r5, #0]
 801a49a:	461a      	mov	r2, r3
 801a49c:	f7f0 fd0e 	bl	800aebc <_lseek>
 801a4a0:	1c43      	adds	r3, r0, #1
 801a4a2:	d102      	bne.n	801a4aa <_lseek_r+0x1e>
 801a4a4:	682b      	ldr	r3, [r5, #0]
 801a4a6:	b103      	cbz	r3, 801a4aa <_lseek_r+0x1e>
 801a4a8:	6023      	str	r3, [r4, #0]
 801a4aa:	bd38      	pop	{r3, r4, r5, pc}
 801a4ac:	2000fb3c 	.word	0x2000fb3c

0801a4b0 <_read_r>:
 801a4b0:	b538      	push	{r3, r4, r5, lr}
 801a4b2:	4d07      	ldr	r5, [pc, #28]	; (801a4d0 <_read_r+0x20>)
 801a4b4:	4604      	mov	r4, r0
 801a4b6:	4608      	mov	r0, r1
 801a4b8:	4611      	mov	r1, r2
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	602a      	str	r2, [r5, #0]
 801a4be:	461a      	mov	r2, r3
 801a4c0:	f7f0 fc9c 	bl	800adfc <_read>
 801a4c4:	1c43      	adds	r3, r0, #1
 801a4c6:	d102      	bne.n	801a4ce <_read_r+0x1e>
 801a4c8:	682b      	ldr	r3, [r5, #0]
 801a4ca:	b103      	cbz	r3, 801a4ce <_read_r+0x1e>
 801a4cc:	6023      	str	r3, [r4, #0]
 801a4ce:	bd38      	pop	{r3, r4, r5, pc}
 801a4d0:	2000fb3c 	.word	0x2000fb3c
 801a4d4:	00000000 	.word	0x00000000

0801a4d8 <ceil>:
 801a4d8:	ec51 0b10 	vmov	r0, r1, d0
 801a4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a4e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a4e8:	2e13      	cmp	r6, #19
 801a4ea:	ee10 5a10 	vmov	r5, s0
 801a4ee:	ee10 8a10 	vmov	r8, s0
 801a4f2:	460c      	mov	r4, r1
 801a4f4:	dc30      	bgt.n	801a558 <ceil+0x80>
 801a4f6:	2e00      	cmp	r6, #0
 801a4f8:	da12      	bge.n	801a520 <ceil+0x48>
 801a4fa:	a335      	add	r3, pc, #212	; (adr r3, 801a5d0 <ceil+0xf8>)
 801a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a500:	f7e5 fec4 	bl	800028c <__adddf3>
 801a504:	2200      	movs	r2, #0
 801a506:	2300      	movs	r3, #0
 801a508:	f7e6 fb06 	bl	8000b18 <__aeabi_dcmpgt>
 801a50c:	b128      	cbz	r0, 801a51a <ceil+0x42>
 801a50e:	2c00      	cmp	r4, #0
 801a510:	db55      	blt.n	801a5be <ceil+0xe6>
 801a512:	432c      	orrs	r4, r5
 801a514:	d057      	beq.n	801a5c6 <ceil+0xee>
 801a516:	4c30      	ldr	r4, [pc, #192]	; (801a5d8 <ceil+0x100>)
 801a518:	2500      	movs	r5, #0
 801a51a:	4621      	mov	r1, r4
 801a51c:	4628      	mov	r0, r5
 801a51e:	e025      	b.n	801a56c <ceil+0x94>
 801a520:	4f2e      	ldr	r7, [pc, #184]	; (801a5dc <ceil+0x104>)
 801a522:	4137      	asrs	r7, r6
 801a524:	ea01 0307 	and.w	r3, r1, r7
 801a528:	4303      	orrs	r3, r0
 801a52a:	d01f      	beq.n	801a56c <ceil+0x94>
 801a52c:	a328      	add	r3, pc, #160	; (adr r3, 801a5d0 <ceil+0xf8>)
 801a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a532:	f7e5 feab 	bl	800028c <__adddf3>
 801a536:	2200      	movs	r2, #0
 801a538:	2300      	movs	r3, #0
 801a53a:	f7e6 faed 	bl	8000b18 <__aeabi_dcmpgt>
 801a53e:	2800      	cmp	r0, #0
 801a540:	d0eb      	beq.n	801a51a <ceil+0x42>
 801a542:	2c00      	cmp	r4, #0
 801a544:	bfc2      	ittt	gt
 801a546:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801a54a:	fa43 f606 	asrgt.w	r6, r3, r6
 801a54e:	19a4      	addgt	r4, r4, r6
 801a550:	ea24 0407 	bic.w	r4, r4, r7
 801a554:	2500      	movs	r5, #0
 801a556:	e7e0      	b.n	801a51a <ceil+0x42>
 801a558:	2e33      	cmp	r6, #51	; 0x33
 801a55a:	dd0b      	ble.n	801a574 <ceil+0x9c>
 801a55c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a560:	d104      	bne.n	801a56c <ceil+0x94>
 801a562:	ee10 2a10 	vmov	r2, s0
 801a566:	460b      	mov	r3, r1
 801a568:	f7e5 fe90 	bl	800028c <__adddf3>
 801a56c:	ec41 0b10 	vmov	d0, r0, r1
 801a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a574:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a578:	f04f 33ff 	mov.w	r3, #4294967295
 801a57c:	fa23 f707 	lsr.w	r7, r3, r7
 801a580:	4207      	tst	r7, r0
 801a582:	d0f3      	beq.n	801a56c <ceil+0x94>
 801a584:	a312      	add	r3, pc, #72	; (adr r3, 801a5d0 <ceil+0xf8>)
 801a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a58a:	f7e5 fe7f 	bl	800028c <__adddf3>
 801a58e:	2200      	movs	r2, #0
 801a590:	2300      	movs	r3, #0
 801a592:	f7e6 fac1 	bl	8000b18 <__aeabi_dcmpgt>
 801a596:	2800      	cmp	r0, #0
 801a598:	d0bf      	beq.n	801a51a <ceil+0x42>
 801a59a:	2c00      	cmp	r4, #0
 801a59c:	dd02      	ble.n	801a5a4 <ceil+0xcc>
 801a59e:	2e14      	cmp	r6, #20
 801a5a0:	d103      	bne.n	801a5aa <ceil+0xd2>
 801a5a2:	3401      	adds	r4, #1
 801a5a4:	ea25 0507 	bic.w	r5, r5, r7
 801a5a8:	e7b7      	b.n	801a51a <ceil+0x42>
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a5b0:	fa03 f606 	lsl.w	r6, r3, r6
 801a5b4:	4435      	add	r5, r6
 801a5b6:	4545      	cmp	r5, r8
 801a5b8:	bf38      	it	cc
 801a5ba:	18e4      	addcc	r4, r4, r3
 801a5bc:	e7f2      	b.n	801a5a4 <ceil+0xcc>
 801a5be:	2500      	movs	r5, #0
 801a5c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a5c4:	e7a9      	b.n	801a51a <ceil+0x42>
 801a5c6:	4625      	mov	r5, r4
 801a5c8:	e7a7      	b.n	801a51a <ceil+0x42>
 801a5ca:	bf00      	nop
 801a5cc:	f3af 8000 	nop.w
 801a5d0:	8800759c 	.word	0x8800759c
 801a5d4:	7e37e43c 	.word	0x7e37e43c
 801a5d8:	3ff00000 	.word	0x3ff00000
 801a5dc:	000fffff 	.word	0x000fffff

0801a5e0 <cos>:
 801a5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a5e2:	ec53 2b10 	vmov	r2, r3, d0
 801a5e6:	4824      	ldr	r0, [pc, #144]	; (801a678 <cos+0x98>)
 801a5e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a5ec:	4281      	cmp	r1, r0
 801a5ee:	dc06      	bgt.n	801a5fe <cos+0x1e>
 801a5f0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801a670 <cos+0x90>
 801a5f4:	f000 fce4 	bl	801afc0 <__kernel_cos>
 801a5f8:	ec51 0b10 	vmov	r0, r1, d0
 801a5fc:	e007      	b.n	801a60e <cos+0x2e>
 801a5fe:	481f      	ldr	r0, [pc, #124]	; (801a67c <cos+0x9c>)
 801a600:	4281      	cmp	r1, r0
 801a602:	dd09      	ble.n	801a618 <cos+0x38>
 801a604:	ee10 0a10 	vmov	r0, s0
 801a608:	4619      	mov	r1, r3
 801a60a:	f7e5 fe3d 	bl	8000288 <__aeabi_dsub>
 801a60e:	ec41 0b10 	vmov	d0, r0, r1
 801a612:	b005      	add	sp, #20
 801a614:	f85d fb04 	ldr.w	pc, [sp], #4
 801a618:	4668      	mov	r0, sp
 801a61a:	f000 fa11 	bl	801aa40 <__ieee754_rem_pio2>
 801a61e:	f000 0003 	and.w	r0, r0, #3
 801a622:	2801      	cmp	r0, #1
 801a624:	d007      	beq.n	801a636 <cos+0x56>
 801a626:	2802      	cmp	r0, #2
 801a628:	d012      	beq.n	801a650 <cos+0x70>
 801a62a:	b9c0      	cbnz	r0, 801a65e <cos+0x7e>
 801a62c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a630:	ed9d 0b00 	vldr	d0, [sp]
 801a634:	e7de      	b.n	801a5f4 <cos+0x14>
 801a636:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a63a:	ed9d 0b00 	vldr	d0, [sp]
 801a63e:	f001 f8c7 	bl	801b7d0 <__kernel_sin>
 801a642:	ec53 2b10 	vmov	r2, r3, d0
 801a646:	ee10 0a10 	vmov	r0, s0
 801a64a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a64e:	e7de      	b.n	801a60e <cos+0x2e>
 801a650:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a654:	ed9d 0b00 	vldr	d0, [sp]
 801a658:	f000 fcb2 	bl	801afc0 <__kernel_cos>
 801a65c:	e7f1      	b.n	801a642 <cos+0x62>
 801a65e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a662:	ed9d 0b00 	vldr	d0, [sp]
 801a666:	2001      	movs	r0, #1
 801a668:	f001 f8b2 	bl	801b7d0 <__kernel_sin>
 801a66c:	e7c4      	b.n	801a5f8 <cos+0x18>
 801a66e:	bf00      	nop
	...
 801a678:	3fe921fb 	.word	0x3fe921fb
 801a67c:	7fefffff 	.word	0x7fefffff

0801a680 <round>:
 801a680:	ec51 0b10 	vmov	r0, r1, d0
 801a684:	b570      	push	{r4, r5, r6, lr}
 801a686:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801a68a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801a68e:	2c13      	cmp	r4, #19
 801a690:	ee10 2a10 	vmov	r2, s0
 801a694:	460b      	mov	r3, r1
 801a696:	dc19      	bgt.n	801a6cc <round+0x4c>
 801a698:	2c00      	cmp	r4, #0
 801a69a:	da09      	bge.n	801a6b0 <round+0x30>
 801a69c:	3401      	adds	r4, #1
 801a69e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801a6a2:	d103      	bne.n	801a6ac <round+0x2c>
 801a6a4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a6a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a6ac:	2100      	movs	r1, #0
 801a6ae:	e028      	b.n	801a702 <round+0x82>
 801a6b0:	4d15      	ldr	r5, [pc, #84]	; (801a708 <round+0x88>)
 801a6b2:	4125      	asrs	r5, r4
 801a6b4:	ea01 0605 	and.w	r6, r1, r5
 801a6b8:	4332      	orrs	r2, r6
 801a6ba:	d00e      	beq.n	801a6da <round+0x5a>
 801a6bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a6c0:	fa42 f404 	asr.w	r4, r2, r4
 801a6c4:	4423      	add	r3, r4
 801a6c6:	ea23 0305 	bic.w	r3, r3, r5
 801a6ca:	e7ef      	b.n	801a6ac <round+0x2c>
 801a6cc:	2c33      	cmp	r4, #51	; 0x33
 801a6ce:	dd07      	ble.n	801a6e0 <round+0x60>
 801a6d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801a6d4:	d101      	bne.n	801a6da <round+0x5a>
 801a6d6:	f7e5 fdd9 	bl	800028c <__adddf3>
 801a6da:	ec41 0b10 	vmov	d0, r0, r1
 801a6de:	bd70      	pop	{r4, r5, r6, pc}
 801a6e0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801a6e4:	f04f 35ff 	mov.w	r5, #4294967295
 801a6e8:	40f5      	lsrs	r5, r6
 801a6ea:	4228      	tst	r0, r5
 801a6ec:	d0f5      	beq.n	801a6da <round+0x5a>
 801a6ee:	2101      	movs	r1, #1
 801a6f0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801a6f4:	fa01 f404 	lsl.w	r4, r1, r4
 801a6f8:	1912      	adds	r2, r2, r4
 801a6fa:	bf28      	it	cs
 801a6fc:	185b      	addcs	r3, r3, r1
 801a6fe:	ea22 0105 	bic.w	r1, r2, r5
 801a702:	4608      	mov	r0, r1
 801a704:	4619      	mov	r1, r3
 801a706:	e7e8      	b.n	801a6da <round+0x5a>
 801a708:	000fffff 	.word	0x000fffff
 801a70c:	00000000 	.word	0x00000000

0801a710 <sin>:
 801a710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a712:	ec53 2b10 	vmov	r2, r3, d0
 801a716:	4826      	ldr	r0, [pc, #152]	; (801a7b0 <sin+0xa0>)
 801a718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a71c:	4281      	cmp	r1, r0
 801a71e:	dc07      	bgt.n	801a730 <sin+0x20>
 801a720:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a7a8 <sin+0x98>
 801a724:	2000      	movs	r0, #0
 801a726:	f001 f853 	bl	801b7d0 <__kernel_sin>
 801a72a:	ec51 0b10 	vmov	r0, r1, d0
 801a72e:	e007      	b.n	801a740 <sin+0x30>
 801a730:	4820      	ldr	r0, [pc, #128]	; (801a7b4 <sin+0xa4>)
 801a732:	4281      	cmp	r1, r0
 801a734:	dd09      	ble.n	801a74a <sin+0x3a>
 801a736:	ee10 0a10 	vmov	r0, s0
 801a73a:	4619      	mov	r1, r3
 801a73c:	f7e5 fda4 	bl	8000288 <__aeabi_dsub>
 801a740:	ec41 0b10 	vmov	d0, r0, r1
 801a744:	b005      	add	sp, #20
 801a746:	f85d fb04 	ldr.w	pc, [sp], #4
 801a74a:	4668      	mov	r0, sp
 801a74c:	f000 f978 	bl	801aa40 <__ieee754_rem_pio2>
 801a750:	f000 0003 	and.w	r0, r0, #3
 801a754:	2801      	cmp	r0, #1
 801a756:	d008      	beq.n	801a76a <sin+0x5a>
 801a758:	2802      	cmp	r0, #2
 801a75a:	d00d      	beq.n	801a778 <sin+0x68>
 801a75c:	b9d0      	cbnz	r0, 801a794 <sin+0x84>
 801a75e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a762:	ed9d 0b00 	vldr	d0, [sp]
 801a766:	2001      	movs	r0, #1
 801a768:	e7dd      	b.n	801a726 <sin+0x16>
 801a76a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a76e:	ed9d 0b00 	vldr	d0, [sp]
 801a772:	f000 fc25 	bl	801afc0 <__kernel_cos>
 801a776:	e7d8      	b.n	801a72a <sin+0x1a>
 801a778:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a77c:	ed9d 0b00 	vldr	d0, [sp]
 801a780:	2001      	movs	r0, #1
 801a782:	f001 f825 	bl	801b7d0 <__kernel_sin>
 801a786:	ec53 2b10 	vmov	r2, r3, d0
 801a78a:	ee10 0a10 	vmov	r0, s0
 801a78e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a792:	e7d5      	b.n	801a740 <sin+0x30>
 801a794:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a798:	ed9d 0b00 	vldr	d0, [sp]
 801a79c:	f000 fc10 	bl	801afc0 <__kernel_cos>
 801a7a0:	e7f1      	b.n	801a786 <sin+0x76>
 801a7a2:	bf00      	nop
 801a7a4:	f3af 8000 	nop.w
	...
 801a7b0:	3fe921fb 	.word	0x3fe921fb
 801a7b4:	7fefffff 	.word	0x7fefffff

0801a7b8 <ceilf>:
 801a7b8:	ee10 3a10 	vmov	r3, s0
 801a7bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a7c0:	3a7f      	subs	r2, #127	; 0x7f
 801a7c2:	2a16      	cmp	r2, #22
 801a7c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a7c8:	dc2a      	bgt.n	801a820 <ceilf+0x68>
 801a7ca:	2a00      	cmp	r2, #0
 801a7cc:	da11      	bge.n	801a7f2 <ceilf+0x3a>
 801a7ce:	eddf 7a19 	vldr	s15, [pc, #100]	; 801a834 <ceilf+0x7c>
 801a7d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a7d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7de:	dd05      	ble.n	801a7ec <ceilf+0x34>
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	db23      	blt.n	801a82c <ceilf+0x74>
 801a7e4:	2900      	cmp	r1, #0
 801a7e6:	bf18      	it	ne
 801a7e8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801a7ec:	ee00 3a10 	vmov	s0, r3
 801a7f0:	4770      	bx	lr
 801a7f2:	4911      	ldr	r1, [pc, #68]	; (801a838 <ceilf+0x80>)
 801a7f4:	4111      	asrs	r1, r2
 801a7f6:	420b      	tst	r3, r1
 801a7f8:	d0fa      	beq.n	801a7f0 <ceilf+0x38>
 801a7fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a834 <ceilf+0x7c>
 801a7fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a802:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a80a:	ddef      	ble.n	801a7ec <ceilf+0x34>
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	bfc2      	ittt	gt
 801a810:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801a814:	fa40 f202 	asrgt.w	r2, r0, r2
 801a818:	189b      	addgt	r3, r3, r2
 801a81a:	ea23 0301 	bic.w	r3, r3, r1
 801a81e:	e7e5      	b.n	801a7ec <ceilf+0x34>
 801a820:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a824:	d3e4      	bcc.n	801a7f0 <ceilf+0x38>
 801a826:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a82a:	4770      	bx	lr
 801a82c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801a830:	e7dc      	b.n	801a7ec <ceilf+0x34>
 801a832:	bf00      	nop
 801a834:	7149f2ca 	.word	0x7149f2ca
 801a838:	007fffff 	.word	0x007fffff

0801a83c <atan2>:
 801a83c:	f000 b834 	b.w	801a8a8 <__ieee754_atan2>

0801a840 <sqrt>:
 801a840:	b538      	push	{r3, r4, r5, lr}
 801a842:	ed2d 8b02 	vpush	{d8}
 801a846:	ec55 4b10 	vmov	r4, r5, d0
 801a84a:	f000 fb03 	bl	801ae54 <__ieee754_sqrt>
 801a84e:	4b15      	ldr	r3, [pc, #84]	; (801a8a4 <sqrt+0x64>)
 801a850:	eeb0 8a40 	vmov.f32	s16, s0
 801a854:	eef0 8a60 	vmov.f32	s17, s1
 801a858:	f993 3000 	ldrsb.w	r3, [r3]
 801a85c:	3301      	adds	r3, #1
 801a85e:	d019      	beq.n	801a894 <sqrt+0x54>
 801a860:	4622      	mov	r2, r4
 801a862:	462b      	mov	r3, r5
 801a864:	4620      	mov	r0, r4
 801a866:	4629      	mov	r1, r5
 801a868:	f7e6 f960 	bl	8000b2c <__aeabi_dcmpun>
 801a86c:	b990      	cbnz	r0, 801a894 <sqrt+0x54>
 801a86e:	2200      	movs	r2, #0
 801a870:	2300      	movs	r3, #0
 801a872:	4620      	mov	r0, r4
 801a874:	4629      	mov	r1, r5
 801a876:	f7e6 f931 	bl	8000adc <__aeabi_dcmplt>
 801a87a:	b158      	cbz	r0, 801a894 <sqrt+0x54>
 801a87c:	f7fb f996 	bl	8015bac <__errno>
 801a880:	2321      	movs	r3, #33	; 0x21
 801a882:	6003      	str	r3, [r0, #0]
 801a884:	2200      	movs	r2, #0
 801a886:	2300      	movs	r3, #0
 801a888:	4610      	mov	r0, r2
 801a88a:	4619      	mov	r1, r3
 801a88c:	f7e5 ffde 	bl	800084c <__aeabi_ddiv>
 801a890:	ec41 0b18 	vmov	d8, r0, r1
 801a894:	eeb0 0a48 	vmov.f32	s0, s16
 801a898:	eef0 0a68 	vmov.f32	s1, s17
 801a89c:	ecbd 8b02 	vpop	{d8}
 801a8a0:	bd38      	pop	{r3, r4, r5, pc}
 801a8a2:	bf00      	nop
 801a8a4:	200023e4 	.word	0x200023e4

0801a8a8 <__ieee754_atan2>:
 801a8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8ac:	ec57 6b11 	vmov	r6, r7, d1
 801a8b0:	4273      	negs	r3, r6
 801a8b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 801aa38 <__ieee754_atan2+0x190>
 801a8b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a8ba:	4333      	orrs	r3, r6
 801a8bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a8c0:	4573      	cmp	r3, lr
 801a8c2:	ec51 0b10 	vmov	r0, r1, d0
 801a8c6:	ee11 8a10 	vmov	r8, s2
 801a8ca:	d80a      	bhi.n	801a8e2 <__ieee754_atan2+0x3a>
 801a8cc:	4244      	negs	r4, r0
 801a8ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a8d2:	4304      	orrs	r4, r0
 801a8d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a8d8:	4574      	cmp	r4, lr
 801a8da:	ee10 9a10 	vmov	r9, s0
 801a8de:	468c      	mov	ip, r1
 801a8e0:	d907      	bls.n	801a8f2 <__ieee754_atan2+0x4a>
 801a8e2:	4632      	mov	r2, r6
 801a8e4:	463b      	mov	r3, r7
 801a8e6:	f7e5 fcd1 	bl	800028c <__adddf3>
 801a8ea:	ec41 0b10 	vmov	d0, r0, r1
 801a8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a8f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a8f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a8fa:	4334      	orrs	r4, r6
 801a8fc:	d103      	bne.n	801a906 <__ieee754_atan2+0x5e>
 801a8fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a902:	f001 b825 	b.w	801b950 <atan>
 801a906:	17bc      	asrs	r4, r7, #30
 801a908:	f004 0402 	and.w	r4, r4, #2
 801a90c:	ea53 0909 	orrs.w	r9, r3, r9
 801a910:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a914:	d107      	bne.n	801a926 <__ieee754_atan2+0x7e>
 801a916:	2c02      	cmp	r4, #2
 801a918:	d060      	beq.n	801a9dc <__ieee754_atan2+0x134>
 801a91a:	2c03      	cmp	r4, #3
 801a91c:	d1e5      	bne.n	801a8ea <__ieee754_atan2+0x42>
 801a91e:	a142      	add	r1, pc, #264	; (adr r1, 801aa28 <__ieee754_atan2+0x180>)
 801a920:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a924:	e7e1      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a926:	ea52 0808 	orrs.w	r8, r2, r8
 801a92a:	d106      	bne.n	801a93a <__ieee754_atan2+0x92>
 801a92c:	f1bc 0f00 	cmp.w	ip, #0
 801a930:	da5f      	bge.n	801a9f2 <__ieee754_atan2+0x14a>
 801a932:	a13f      	add	r1, pc, #252	; (adr r1, 801aa30 <__ieee754_atan2+0x188>)
 801a934:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a938:	e7d7      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a93a:	4572      	cmp	r2, lr
 801a93c:	d10f      	bne.n	801a95e <__ieee754_atan2+0xb6>
 801a93e:	4293      	cmp	r3, r2
 801a940:	f104 34ff 	add.w	r4, r4, #4294967295
 801a944:	d107      	bne.n	801a956 <__ieee754_atan2+0xae>
 801a946:	2c02      	cmp	r4, #2
 801a948:	d84c      	bhi.n	801a9e4 <__ieee754_atan2+0x13c>
 801a94a:	4b35      	ldr	r3, [pc, #212]	; (801aa20 <__ieee754_atan2+0x178>)
 801a94c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a950:	e9d4 0100 	ldrd	r0, r1, [r4]
 801a954:	e7c9      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a956:	2c02      	cmp	r4, #2
 801a958:	d848      	bhi.n	801a9ec <__ieee754_atan2+0x144>
 801a95a:	4b32      	ldr	r3, [pc, #200]	; (801aa24 <__ieee754_atan2+0x17c>)
 801a95c:	e7f6      	b.n	801a94c <__ieee754_atan2+0xa4>
 801a95e:	4573      	cmp	r3, lr
 801a960:	d0e4      	beq.n	801a92c <__ieee754_atan2+0x84>
 801a962:	1a9b      	subs	r3, r3, r2
 801a964:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801a968:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a96c:	da1e      	bge.n	801a9ac <__ieee754_atan2+0x104>
 801a96e:	2f00      	cmp	r7, #0
 801a970:	da01      	bge.n	801a976 <__ieee754_atan2+0xce>
 801a972:	323c      	adds	r2, #60	; 0x3c
 801a974:	db1e      	blt.n	801a9b4 <__ieee754_atan2+0x10c>
 801a976:	4632      	mov	r2, r6
 801a978:	463b      	mov	r3, r7
 801a97a:	f7e5 ff67 	bl	800084c <__aeabi_ddiv>
 801a97e:	ec41 0b10 	vmov	d0, r0, r1
 801a982:	f001 f985 	bl	801bc90 <fabs>
 801a986:	f000 ffe3 	bl	801b950 <atan>
 801a98a:	ec51 0b10 	vmov	r0, r1, d0
 801a98e:	2c01      	cmp	r4, #1
 801a990:	d013      	beq.n	801a9ba <__ieee754_atan2+0x112>
 801a992:	2c02      	cmp	r4, #2
 801a994:	d015      	beq.n	801a9c2 <__ieee754_atan2+0x11a>
 801a996:	2c00      	cmp	r4, #0
 801a998:	d0a7      	beq.n	801a8ea <__ieee754_atan2+0x42>
 801a99a:	a319      	add	r3, pc, #100	; (adr r3, 801aa00 <__ieee754_atan2+0x158>)
 801a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a0:	f7e5 fc72 	bl	8000288 <__aeabi_dsub>
 801a9a4:	a318      	add	r3, pc, #96	; (adr r3, 801aa08 <__ieee754_atan2+0x160>)
 801a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9aa:	e014      	b.n	801a9d6 <__ieee754_atan2+0x12e>
 801a9ac:	a118      	add	r1, pc, #96	; (adr r1, 801aa10 <__ieee754_atan2+0x168>)
 801a9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9b2:	e7ec      	b.n	801a98e <__ieee754_atan2+0xe6>
 801a9b4:	2000      	movs	r0, #0
 801a9b6:	2100      	movs	r1, #0
 801a9b8:	e7e9      	b.n	801a98e <__ieee754_atan2+0xe6>
 801a9ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9be:	4619      	mov	r1, r3
 801a9c0:	e793      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a9c2:	a30f      	add	r3, pc, #60	; (adr r3, 801aa00 <__ieee754_atan2+0x158>)
 801a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c8:	f7e5 fc5e 	bl	8000288 <__aeabi_dsub>
 801a9cc:	4602      	mov	r2, r0
 801a9ce:	460b      	mov	r3, r1
 801a9d0:	a10d      	add	r1, pc, #52	; (adr r1, 801aa08 <__ieee754_atan2+0x160>)
 801a9d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9d6:	f7e5 fc57 	bl	8000288 <__aeabi_dsub>
 801a9da:	e786      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a9dc:	a10a      	add	r1, pc, #40	; (adr r1, 801aa08 <__ieee754_atan2+0x160>)
 801a9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9e2:	e782      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a9e4:	a10c      	add	r1, pc, #48	; (adr r1, 801aa18 <__ieee754_atan2+0x170>)
 801a9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9ea:	e77e      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a9ec:	2000      	movs	r0, #0
 801a9ee:	2100      	movs	r1, #0
 801a9f0:	e77b      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a9f2:	a107      	add	r1, pc, #28	; (adr r1, 801aa10 <__ieee754_atan2+0x168>)
 801a9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9f8:	e777      	b.n	801a8ea <__ieee754_atan2+0x42>
 801a9fa:	bf00      	nop
 801a9fc:	f3af 8000 	nop.w
 801aa00:	33145c07 	.word	0x33145c07
 801aa04:	3ca1a626 	.word	0x3ca1a626
 801aa08:	54442d18 	.word	0x54442d18
 801aa0c:	400921fb 	.word	0x400921fb
 801aa10:	54442d18 	.word	0x54442d18
 801aa14:	3ff921fb 	.word	0x3ff921fb
 801aa18:	54442d18 	.word	0x54442d18
 801aa1c:	3fe921fb 	.word	0x3fe921fb
 801aa20:	0801c670 	.word	0x0801c670
 801aa24:	0801c688 	.word	0x0801c688
 801aa28:	54442d18 	.word	0x54442d18
 801aa2c:	c00921fb 	.word	0xc00921fb
 801aa30:	54442d18 	.word	0x54442d18
 801aa34:	bff921fb 	.word	0xbff921fb
 801aa38:	7ff00000 	.word	0x7ff00000
 801aa3c:	00000000 	.word	0x00000000

0801aa40 <__ieee754_rem_pio2>:
 801aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa44:	ed2d 8b02 	vpush	{d8}
 801aa48:	ec55 4b10 	vmov	r4, r5, d0
 801aa4c:	4bca      	ldr	r3, [pc, #808]	; (801ad78 <__ieee754_rem_pio2+0x338>)
 801aa4e:	b08b      	sub	sp, #44	; 0x2c
 801aa50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801aa54:	4598      	cmp	r8, r3
 801aa56:	4682      	mov	sl, r0
 801aa58:	9502      	str	r5, [sp, #8]
 801aa5a:	dc08      	bgt.n	801aa6e <__ieee754_rem_pio2+0x2e>
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	2300      	movs	r3, #0
 801aa60:	ed80 0b00 	vstr	d0, [r0]
 801aa64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801aa68:	f04f 0b00 	mov.w	fp, #0
 801aa6c:	e028      	b.n	801aac0 <__ieee754_rem_pio2+0x80>
 801aa6e:	4bc3      	ldr	r3, [pc, #780]	; (801ad7c <__ieee754_rem_pio2+0x33c>)
 801aa70:	4598      	cmp	r8, r3
 801aa72:	dc78      	bgt.n	801ab66 <__ieee754_rem_pio2+0x126>
 801aa74:	9b02      	ldr	r3, [sp, #8]
 801aa76:	4ec2      	ldr	r6, [pc, #776]	; (801ad80 <__ieee754_rem_pio2+0x340>)
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	ee10 0a10 	vmov	r0, s0
 801aa7e:	a3b0      	add	r3, pc, #704	; (adr r3, 801ad40 <__ieee754_rem_pio2+0x300>)
 801aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa84:	4629      	mov	r1, r5
 801aa86:	dd39      	ble.n	801aafc <__ieee754_rem_pio2+0xbc>
 801aa88:	f7e5 fbfe 	bl	8000288 <__aeabi_dsub>
 801aa8c:	45b0      	cmp	r8, r6
 801aa8e:	4604      	mov	r4, r0
 801aa90:	460d      	mov	r5, r1
 801aa92:	d01b      	beq.n	801aacc <__ieee754_rem_pio2+0x8c>
 801aa94:	a3ac      	add	r3, pc, #688	; (adr r3, 801ad48 <__ieee754_rem_pio2+0x308>)
 801aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa9a:	f7e5 fbf5 	bl	8000288 <__aeabi_dsub>
 801aa9e:	4602      	mov	r2, r0
 801aaa0:	460b      	mov	r3, r1
 801aaa2:	e9ca 2300 	strd	r2, r3, [sl]
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	4629      	mov	r1, r5
 801aaaa:	f7e5 fbed 	bl	8000288 <__aeabi_dsub>
 801aaae:	a3a6      	add	r3, pc, #664	; (adr r3, 801ad48 <__ieee754_rem_pio2+0x308>)
 801aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab4:	f7e5 fbe8 	bl	8000288 <__aeabi_dsub>
 801aab8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801aabc:	f04f 0b01 	mov.w	fp, #1
 801aac0:	4658      	mov	r0, fp
 801aac2:	b00b      	add	sp, #44	; 0x2c
 801aac4:	ecbd 8b02 	vpop	{d8}
 801aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aacc:	a3a0      	add	r3, pc, #640	; (adr r3, 801ad50 <__ieee754_rem_pio2+0x310>)
 801aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad2:	f7e5 fbd9 	bl	8000288 <__aeabi_dsub>
 801aad6:	a3a0      	add	r3, pc, #640	; (adr r3, 801ad58 <__ieee754_rem_pio2+0x318>)
 801aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aadc:	4604      	mov	r4, r0
 801aade:	460d      	mov	r5, r1
 801aae0:	f7e5 fbd2 	bl	8000288 <__aeabi_dsub>
 801aae4:	4602      	mov	r2, r0
 801aae6:	460b      	mov	r3, r1
 801aae8:	e9ca 2300 	strd	r2, r3, [sl]
 801aaec:	4620      	mov	r0, r4
 801aaee:	4629      	mov	r1, r5
 801aaf0:	f7e5 fbca 	bl	8000288 <__aeabi_dsub>
 801aaf4:	a398      	add	r3, pc, #608	; (adr r3, 801ad58 <__ieee754_rem_pio2+0x318>)
 801aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aafa:	e7db      	b.n	801aab4 <__ieee754_rem_pio2+0x74>
 801aafc:	f7e5 fbc6 	bl	800028c <__adddf3>
 801ab00:	45b0      	cmp	r8, r6
 801ab02:	4604      	mov	r4, r0
 801ab04:	460d      	mov	r5, r1
 801ab06:	d016      	beq.n	801ab36 <__ieee754_rem_pio2+0xf6>
 801ab08:	a38f      	add	r3, pc, #572	; (adr r3, 801ad48 <__ieee754_rem_pio2+0x308>)
 801ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab0e:	f7e5 fbbd 	bl	800028c <__adddf3>
 801ab12:	4602      	mov	r2, r0
 801ab14:	460b      	mov	r3, r1
 801ab16:	e9ca 2300 	strd	r2, r3, [sl]
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	4629      	mov	r1, r5
 801ab1e:	f7e5 fbb3 	bl	8000288 <__aeabi_dsub>
 801ab22:	a389      	add	r3, pc, #548	; (adr r3, 801ad48 <__ieee754_rem_pio2+0x308>)
 801ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab28:	f7e5 fbb0 	bl	800028c <__adddf3>
 801ab2c:	f04f 3bff 	mov.w	fp, #4294967295
 801ab30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ab34:	e7c4      	b.n	801aac0 <__ieee754_rem_pio2+0x80>
 801ab36:	a386      	add	r3, pc, #536	; (adr r3, 801ad50 <__ieee754_rem_pio2+0x310>)
 801ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3c:	f7e5 fba6 	bl	800028c <__adddf3>
 801ab40:	a385      	add	r3, pc, #532	; (adr r3, 801ad58 <__ieee754_rem_pio2+0x318>)
 801ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab46:	4604      	mov	r4, r0
 801ab48:	460d      	mov	r5, r1
 801ab4a:	f7e5 fb9f 	bl	800028c <__adddf3>
 801ab4e:	4602      	mov	r2, r0
 801ab50:	460b      	mov	r3, r1
 801ab52:	e9ca 2300 	strd	r2, r3, [sl]
 801ab56:	4620      	mov	r0, r4
 801ab58:	4629      	mov	r1, r5
 801ab5a:	f7e5 fb95 	bl	8000288 <__aeabi_dsub>
 801ab5e:	a37e      	add	r3, pc, #504	; (adr r3, 801ad58 <__ieee754_rem_pio2+0x318>)
 801ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab64:	e7e0      	b.n	801ab28 <__ieee754_rem_pio2+0xe8>
 801ab66:	4b87      	ldr	r3, [pc, #540]	; (801ad84 <__ieee754_rem_pio2+0x344>)
 801ab68:	4598      	cmp	r8, r3
 801ab6a:	f300 80d9 	bgt.w	801ad20 <__ieee754_rem_pio2+0x2e0>
 801ab6e:	f001 f88f 	bl	801bc90 <fabs>
 801ab72:	ec55 4b10 	vmov	r4, r5, d0
 801ab76:	ee10 0a10 	vmov	r0, s0
 801ab7a:	a379      	add	r3, pc, #484	; (adr r3, 801ad60 <__ieee754_rem_pio2+0x320>)
 801ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab80:	4629      	mov	r1, r5
 801ab82:	f7e5 fd39 	bl	80005f8 <__aeabi_dmul>
 801ab86:	4b80      	ldr	r3, [pc, #512]	; (801ad88 <__ieee754_rem_pio2+0x348>)
 801ab88:	2200      	movs	r2, #0
 801ab8a:	f7e5 fb7f 	bl	800028c <__adddf3>
 801ab8e:	f7e5 ffe3 	bl	8000b58 <__aeabi_d2iz>
 801ab92:	4683      	mov	fp, r0
 801ab94:	f7e5 fcc6 	bl	8000524 <__aeabi_i2d>
 801ab98:	4602      	mov	r2, r0
 801ab9a:	460b      	mov	r3, r1
 801ab9c:	ec43 2b18 	vmov	d8, r2, r3
 801aba0:	a367      	add	r3, pc, #412	; (adr r3, 801ad40 <__ieee754_rem_pio2+0x300>)
 801aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba6:	f7e5 fd27 	bl	80005f8 <__aeabi_dmul>
 801abaa:	4602      	mov	r2, r0
 801abac:	460b      	mov	r3, r1
 801abae:	4620      	mov	r0, r4
 801abb0:	4629      	mov	r1, r5
 801abb2:	f7e5 fb69 	bl	8000288 <__aeabi_dsub>
 801abb6:	a364      	add	r3, pc, #400	; (adr r3, 801ad48 <__ieee754_rem_pio2+0x308>)
 801abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abbc:	4606      	mov	r6, r0
 801abbe:	460f      	mov	r7, r1
 801abc0:	ec51 0b18 	vmov	r0, r1, d8
 801abc4:	f7e5 fd18 	bl	80005f8 <__aeabi_dmul>
 801abc8:	f1bb 0f1f 	cmp.w	fp, #31
 801abcc:	4604      	mov	r4, r0
 801abce:	460d      	mov	r5, r1
 801abd0:	dc0d      	bgt.n	801abee <__ieee754_rem_pio2+0x1ae>
 801abd2:	4b6e      	ldr	r3, [pc, #440]	; (801ad8c <__ieee754_rem_pio2+0x34c>)
 801abd4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801abd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abdc:	4543      	cmp	r3, r8
 801abde:	d006      	beq.n	801abee <__ieee754_rem_pio2+0x1ae>
 801abe0:	4622      	mov	r2, r4
 801abe2:	462b      	mov	r3, r5
 801abe4:	4630      	mov	r0, r6
 801abe6:	4639      	mov	r1, r7
 801abe8:	f7e5 fb4e 	bl	8000288 <__aeabi_dsub>
 801abec:	e00f      	b.n	801ac0e <__ieee754_rem_pio2+0x1ce>
 801abee:	462b      	mov	r3, r5
 801abf0:	4622      	mov	r2, r4
 801abf2:	4630      	mov	r0, r6
 801abf4:	4639      	mov	r1, r7
 801abf6:	f7e5 fb47 	bl	8000288 <__aeabi_dsub>
 801abfa:	ea4f 5328 	mov.w	r3, r8, asr #20
 801abfe:	9303      	str	r3, [sp, #12]
 801ac00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ac04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801ac08:	f1b8 0f10 	cmp.w	r8, #16
 801ac0c:	dc02      	bgt.n	801ac14 <__ieee754_rem_pio2+0x1d4>
 801ac0e:	e9ca 0100 	strd	r0, r1, [sl]
 801ac12:	e039      	b.n	801ac88 <__ieee754_rem_pio2+0x248>
 801ac14:	a34e      	add	r3, pc, #312	; (adr r3, 801ad50 <__ieee754_rem_pio2+0x310>)
 801ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac1a:	ec51 0b18 	vmov	r0, r1, d8
 801ac1e:	f7e5 fceb 	bl	80005f8 <__aeabi_dmul>
 801ac22:	4604      	mov	r4, r0
 801ac24:	460d      	mov	r5, r1
 801ac26:	4602      	mov	r2, r0
 801ac28:	460b      	mov	r3, r1
 801ac2a:	4630      	mov	r0, r6
 801ac2c:	4639      	mov	r1, r7
 801ac2e:	f7e5 fb2b 	bl	8000288 <__aeabi_dsub>
 801ac32:	4602      	mov	r2, r0
 801ac34:	460b      	mov	r3, r1
 801ac36:	4680      	mov	r8, r0
 801ac38:	4689      	mov	r9, r1
 801ac3a:	4630      	mov	r0, r6
 801ac3c:	4639      	mov	r1, r7
 801ac3e:	f7e5 fb23 	bl	8000288 <__aeabi_dsub>
 801ac42:	4622      	mov	r2, r4
 801ac44:	462b      	mov	r3, r5
 801ac46:	f7e5 fb1f 	bl	8000288 <__aeabi_dsub>
 801ac4a:	a343      	add	r3, pc, #268	; (adr r3, 801ad58 <__ieee754_rem_pio2+0x318>)
 801ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac50:	4604      	mov	r4, r0
 801ac52:	460d      	mov	r5, r1
 801ac54:	ec51 0b18 	vmov	r0, r1, d8
 801ac58:	f7e5 fcce 	bl	80005f8 <__aeabi_dmul>
 801ac5c:	4622      	mov	r2, r4
 801ac5e:	462b      	mov	r3, r5
 801ac60:	f7e5 fb12 	bl	8000288 <__aeabi_dsub>
 801ac64:	4602      	mov	r2, r0
 801ac66:	460b      	mov	r3, r1
 801ac68:	4604      	mov	r4, r0
 801ac6a:	460d      	mov	r5, r1
 801ac6c:	4640      	mov	r0, r8
 801ac6e:	4649      	mov	r1, r9
 801ac70:	f7e5 fb0a 	bl	8000288 <__aeabi_dsub>
 801ac74:	9a03      	ldr	r2, [sp, #12]
 801ac76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ac7a:	1ad3      	subs	r3, r2, r3
 801ac7c:	2b31      	cmp	r3, #49	; 0x31
 801ac7e:	dc24      	bgt.n	801acca <__ieee754_rem_pio2+0x28a>
 801ac80:	e9ca 0100 	strd	r0, r1, [sl]
 801ac84:	4646      	mov	r6, r8
 801ac86:	464f      	mov	r7, r9
 801ac88:	e9da 8900 	ldrd	r8, r9, [sl]
 801ac8c:	4630      	mov	r0, r6
 801ac8e:	4642      	mov	r2, r8
 801ac90:	464b      	mov	r3, r9
 801ac92:	4639      	mov	r1, r7
 801ac94:	f7e5 faf8 	bl	8000288 <__aeabi_dsub>
 801ac98:	462b      	mov	r3, r5
 801ac9a:	4622      	mov	r2, r4
 801ac9c:	f7e5 faf4 	bl	8000288 <__aeabi_dsub>
 801aca0:	9b02      	ldr	r3, [sp, #8]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801aca8:	f6bf af0a 	bge.w	801aac0 <__ieee754_rem_pio2+0x80>
 801acac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801acb0:	f8ca 3004 	str.w	r3, [sl, #4]
 801acb4:	f8ca 8000 	str.w	r8, [sl]
 801acb8:	f8ca 0008 	str.w	r0, [sl, #8]
 801acbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801acc0:	f8ca 300c 	str.w	r3, [sl, #12]
 801acc4:	f1cb 0b00 	rsb	fp, fp, #0
 801acc8:	e6fa      	b.n	801aac0 <__ieee754_rem_pio2+0x80>
 801acca:	a327      	add	r3, pc, #156	; (adr r3, 801ad68 <__ieee754_rem_pio2+0x328>)
 801accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd0:	ec51 0b18 	vmov	r0, r1, d8
 801acd4:	f7e5 fc90 	bl	80005f8 <__aeabi_dmul>
 801acd8:	4604      	mov	r4, r0
 801acda:	460d      	mov	r5, r1
 801acdc:	4602      	mov	r2, r0
 801acde:	460b      	mov	r3, r1
 801ace0:	4640      	mov	r0, r8
 801ace2:	4649      	mov	r1, r9
 801ace4:	f7e5 fad0 	bl	8000288 <__aeabi_dsub>
 801ace8:	4602      	mov	r2, r0
 801acea:	460b      	mov	r3, r1
 801acec:	4606      	mov	r6, r0
 801acee:	460f      	mov	r7, r1
 801acf0:	4640      	mov	r0, r8
 801acf2:	4649      	mov	r1, r9
 801acf4:	f7e5 fac8 	bl	8000288 <__aeabi_dsub>
 801acf8:	4622      	mov	r2, r4
 801acfa:	462b      	mov	r3, r5
 801acfc:	f7e5 fac4 	bl	8000288 <__aeabi_dsub>
 801ad00:	a31b      	add	r3, pc, #108	; (adr r3, 801ad70 <__ieee754_rem_pio2+0x330>)
 801ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad06:	4604      	mov	r4, r0
 801ad08:	460d      	mov	r5, r1
 801ad0a:	ec51 0b18 	vmov	r0, r1, d8
 801ad0e:	f7e5 fc73 	bl	80005f8 <__aeabi_dmul>
 801ad12:	4622      	mov	r2, r4
 801ad14:	462b      	mov	r3, r5
 801ad16:	f7e5 fab7 	bl	8000288 <__aeabi_dsub>
 801ad1a:	4604      	mov	r4, r0
 801ad1c:	460d      	mov	r5, r1
 801ad1e:	e75f      	b.n	801abe0 <__ieee754_rem_pio2+0x1a0>
 801ad20:	4b1b      	ldr	r3, [pc, #108]	; (801ad90 <__ieee754_rem_pio2+0x350>)
 801ad22:	4598      	cmp	r8, r3
 801ad24:	dd36      	ble.n	801ad94 <__ieee754_rem_pio2+0x354>
 801ad26:	ee10 2a10 	vmov	r2, s0
 801ad2a:	462b      	mov	r3, r5
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	4629      	mov	r1, r5
 801ad30:	f7e5 faaa 	bl	8000288 <__aeabi_dsub>
 801ad34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ad38:	e9ca 0100 	strd	r0, r1, [sl]
 801ad3c:	e694      	b.n	801aa68 <__ieee754_rem_pio2+0x28>
 801ad3e:	bf00      	nop
 801ad40:	54400000 	.word	0x54400000
 801ad44:	3ff921fb 	.word	0x3ff921fb
 801ad48:	1a626331 	.word	0x1a626331
 801ad4c:	3dd0b461 	.word	0x3dd0b461
 801ad50:	1a600000 	.word	0x1a600000
 801ad54:	3dd0b461 	.word	0x3dd0b461
 801ad58:	2e037073 	.word	0x2e037073
 801ad5c:	3ba3198a 	.word	0x3ba3198a
 801ad60:	6dc9c883 	.word	0x6dc9c883
 801ad64:	3fe45f30 	.word	0x3fe45f30
 801ad68:	2e000000 	.word	0x2e000000
 801ad6c:	3ba3198a 	.word	0x3ba3198a
 801ad70:	252049c1 	.word	0x252049c1
 801ad74:	397b839a 	.word	0x397b839a
 801ad78:	3fe921fb 	.word	0x3fe921fb
 801ad7c:	4002d97b 	.word	0x4002d97b
 801ad80:	3ff921fb 	.word	0x3ff921fb
 801ad84:	413921fb 	.word	0x413921fb
 801ad88:	3fe00000 	.word	0x3fe00000
 801ad8c:	0801c6a0 	.word	0x0801c6a0
 801ad90:	7fefffff 	.word	0x7fefffff
 801ad94:	ea4f 5428 	mov.w	r4, r8, asr #20
 801ad98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801ad9c:	ee10 0a10 	vmov	r0, s0
 801ada0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801ada4:	ee10 6a10 	vmov	r6, s0
 801ada8:	460f      	mov	r7, r1
 801adaa:	f7e5 fed5 	bl	8000b58 <__aeabi_d2iz>
 801adae:	f7e5 fbb9 	bl	8000524 <__aeabi_i2d>
 801adb2:	4602      	mov	r2, r0
 801adb4:	460b      	mov	r3, r1
 801adb6:	4630      	mov	r0, r6
 801adb8:	4639      	mov	r1, r7
 801adba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801adbe:	f7e5 fa63 	bl	8000288 <__aeabi_dsub>
 801adc2:	4b22      	ldr	r3, [pc, #136]	; (801ae4c <__ieee754_rem_pio2+0x40c>)
 801adc4:	2200      	movs	r2, #0
 801adc6:	f7e5 fc17 	bl	80005f8 <__aeabi_dmul>
 801adca:	460f      	mov	r7, r1
 801adcc:	4606      	mov	r6, r0
 801adce:	f7e5 fec3 	bl	8000b58 <__aeabi_d2iz>
 801add2:	f7e5 fba7 	bl	8000524 <__aeabi_i2d>
 801add6:	4602      	mov	r2, r0
 801add8:	460b      	mov	r3, r1
 801adda:	4630      	mov	r0, r6
 801addc:	4639      	mov	r1, r7
 801adde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ade2:	f7e5 fa51 	bl	8000288 <__aeabi_dsub>
 801ade6:	4b19      	ldr	r3, [pc, #100]	; (801ae4c <__ieee754_rem_pio2+0x40c>)
 801ade8:	2200      	movs	r2, #0
 801adea:	f7e5 fc05 	bl	80005f8 <__aeabi_dmul>
 801adee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801adf2:	ad04      	add	r5, sp, #16
 801adf4:	f04f 0803 	mov.w	r8, #3
 801adf8:	46a9      	mov	r9, r5
 801adfa:	2600      	movs	r6, #0
 801adfc:	2700      	movs	r7, #0
 801adfe:	4632      	mov	r2, r6
 801ae00:	463b      	mov	r3, r7
 801ae02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801ae06:	46c3      	mov	fp, r8
 801ae08:	3d08      	subs	r5, #8
 801ae0a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae0e:	f7e5 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae12:	2800      	cmp	r0, #0
 801ae14:	d1f3      	bne.n	801adfe <__ieee754_rem_pio2+0x3be>
 801ae16:	4b0e      	ldr	r3, [pc, #56]	; (801ae50 <__ieee754_rem_pio2+0x410>)
 801ae18:	9301      	str	r3, [sp, #4]
 801ae1a:	2302      	movs	r3, #2
 801ae1c:	9300      	str	r3, [sp, #0]
 801ae1e:	4622      	mov	r2, r4
 801ae20:	465b      	mov	r3, fp
 801ae22:	4651      	mov	r1, sl
 801ae24:	4648      	mov	r0, r9
 801ae26:	f000 f993 	bl	801b150 <__kernel_rem_pio2>
 801ae2a:	9b02      	ldr	r3, [sp, #8]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	4683      	mov	fp, r0
 801ae30:	f6bf ae46 	bge.w	801aac0 <__ieee754_rem_pio2+0x80>
 801ae34:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ae38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ae3c:	f8ca 3004 	str.w	r3, [sl, #4]
 801ae40:	f8da 300c 	ldr.w	r3, [sl, #12]
 801ae44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ae48:	e73a      	b.n	801acc0 <__ieee754_rem_pio2+0x280>
 801ae4a:	bf00      	nop
 801ae4c:	41700000 	.word	0x41700000
 801ae50:	0801c720 	.word	0x0801c720

0801ae54 <__ieee754_sqrt>:
 801ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae58:	ec55 4b10 	vmov	r4, r5, d0
 801ae5c:	4e56      	ldr	r6, [pc, #344]	; (801afb8 <__ieee754_sqrt+0x164>)
 801ae5e:	43ae      	bics	r6, r5
 801ae60:	ee10 0a10 	vmov	r0, s0
 801ae64:	ee10 3a10 	vmov	r3, s0
 801ae68:	4629      	mov	r1, r5
 801ae6a:	462a      	mov	r2, r5
 801ae6c:	d110      	bne.n	801ae90 <__ieee754_sqrt+0x3c>
 801ae6e:	ee10 2a10 	vmov	r2, s0
 801ae72:	462b      	mov	r3, r5
 801ae74:	f7e5 fbc0 	bl	80005f8 <__aeabi_dmul>
 801ae78:	4602      	mov	r2, r0
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	4629      	mov	r1, r5
 801ae80:	f7e5 fa04 	bl	800028c <__adddf3>
 801ae84:	4604      	mov	r4, r0
 801ae86:	460d      	mov	r5, r1
 801ae88:	ec45 4b10 	vmov	d0, r4, r5
 801ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae90:	2d00      	cmp	r5, #0
 801ae92:	dc10      	bgt.n	801aeb6 <__ieee754_sqrt+0x62>
 801ae94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ae98:	4330      	orrs	r0, r6
 801ae9a:	d0f5      	beq.n	801ae88 <__ieee754_sqrt+0x34>
 801ae9c:	b15d      	cbz	r5, 801aeb6 <__ieee754_sqrt+0x62>
 801ae9e:	ee10 2a10 	vmov	r2, s0
 801aea2:	462b      	mov	r3, r5
 801aea4:	ee10 0a10 	vmov	r0, s0
 801aea8:	f7e5 f9ee 	bl	8000288 <__aeabi_dsub>
 801aeac:	4602      	mov	r2, r0
 801aeae:	460b      	mov	r3, r1
 801aeb0:	f7e5 fccc 	bl	800084c <__aeabi_ddiv>
 801aeb4:	e7e6      	b.n	801ae84 <__ieee754_sqrt+0x30>
 801aeb6:	1509      	asrs	r1, r1, #20
 801aeb8:	d076      	beq.n	801afa8 <__ieee754_sqrt+0x154>
 801aeba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801aebe:	07ce      	lsls	r6, r1, #31
 801aec0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801aec4:	bf5e      	ittt	pl
 801aec6:	0fda      	lsrpl	r2, r3, #31
 801aec8:	005b      	lslpl	r3, r3, #1
 801aeca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801aece:	0fda      	lsrs	r2, r3, #31
 801aed0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801aed4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801aed8:	2000      	movs	r0, #0
 801aeda:	106d      	asrs	r5, r5, #1
 801aedc:	005b      	lsls	r3, r3, #1
 801aede:	f04f 0e16 	mov.w	lr, #22
 801aee2:	4684      	mov	ip, r0
 801aee4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801aee8:	eb0c 0401 	add.w	r4, ip, r1
 801aeec:	4294      	cmp	r4, r2
 801aeee:	bfde      	ittt	le
 801aef0:	1b12      	suble	r2, r2, r4
 801aef2:	eb04 0c01 	addle.w	ip, r4, r1
 801aef6:	1840      	addle	r0, r0, r1
 801aef8:	0052      	lsls	r2, r2, #1
 801aefa:	f1be 0e01 	subs.w	lr, lr, #1
 801aefe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801af02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801af06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801af0a:	d1ed      	bne.n	801aee8 <__ieee754_sqrt+0x94>
 801af0c:	4671      	mov	r1, lr
 801af0e:	2720      	movs	r7, #32
 801af10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801af14:	4562      	cmp	r2, ip
 801af16:	eb04 060e 	add.w	r6, r4, lr
 801af1a:	dc02      	bgt.n	801af22 <__ieee754_sqrt+0xce>
 801af1c:	d113      	bne.n	801af46 <__ieee754_sqrt+0xf2>
 801af1e:	429e      	cmp	r6, r3
 801af20:	d811      	bhi.n	801af46 <__ieee754_sqrt+0xf2>
 801af22:	2e00      	cmp	r6, #0
 801af24:	eb06 0e04 	add.w	lr, r6, r4
 801af28:	da43      	bge.n	801afb2 <__ieee754_sqrt+0x15e>
 801af2a:	f1be 0f00 	cmp.w	lr, #0
 801af2e:	db40      	blt.n	801afb2 <__ieee754_sqrt+0x15e>
 801af30:	f10c 0801 	add.w	r8, ip, #1
 801af34:	eba2 020c 	sub.w	r2, r2, ip
 801af38:	429e      	cmp	r6, r3
 801af3a:	bf88      	it	hi
 801af3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801af40:	1b9b      	subs	r3, r3, r6
 801af42:	4421      	add	r1, r4
 801af44:	46c4      	mov	ip, r8
 801af46:	0052      	lsls	r2, r2, #1
 801af48:	3f01      	subs	r7, #1
 801af4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801af4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801af52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801af56:	d1dd      	bne.n	801af14 <__ieee754_sqrt+0xc0>
 801af58:	4313      	orrs	r3, r2
 801af5a:	d006      	beq.n	801af6a <__ieee754_sqrt+0x116>
 801af5c:	1c4c      	adds	r4, r1, #1
 801af5e:	bf13      	iteet	ne
 801af60:	3101      	addne	r1, #1
 801af62:	3001      	addeq	r0, #1
 801af64:	4639      	moveq	r1, r7
 801af66:	f021 0101 	bicne.w	r1, r1, #1
 801af6a:	1043      	asrs	r3, r0, #1
 801af6c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801af70:	0849      	lsrs	r1, r1, #1
 801af72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801af76:	07c2      	lsls	r2, r0, #31
 801af78:	bf48      	it	mi
 801af7a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801af7e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801af82:	460c      	mov	r4, r1
 801af84:	463d      	mov	r5, r7
 801af86:	e77f      	b.n	801ae88 <__ieee754_sqrt+0x34>
 801af88:	0ada      	lsrs	r2, r3, #11
 801af8a:	3815      	subs	r0, #21
 801af8c:	055b      	lsls	r3, r3, #21
 801af8e:	2a00      	cmp	r2, #0
 801af90:	d0fa      	beq.n	801af88 <__ieee754_sqrt+0x134>
 801af92:	02d7      	lsls	r7, r2, #11
 801af94:	d50a      	bpl.n	801afac <__ieee754_sqrt+0x158>
 801af96:	f1c1 0420 	rsb	r4, r1, #32
 801af9a:	fa23 f404 	lsr.w	r4, r3, r4
 801af9e:	1e4d      	subs	r5, r1, #1
 801afa0:	408b      	lsls	r3, r1
 801afa2:	4322      	orrs	r2, r4
 801afa4:	1b41      	subs	r1, r0, r5
 801afa6:	e788      	b.n	801aeba <__ieee754_sqrt+0x66>
 801afa8:	4608      	mov	r0, r1
 801afaa:	e7f0      	b.n	801af8e <__ieee754_sqrt+0x13a>
 801afac:	0052      	lsls	r2, r2, #1
 801afae:	3101      	adds	r1, #1
 801afb0:	e7ef      	b.n	801af92 <__ieee754_sqrt+0x13e>
 801afb2:	46e0      	mov	r8, ip
 801afb4:	e7be      	b.n	801af34 <__ieee754_sqrt+0xe0>
 801afb6:	bf00      	nop
 801afb8:	7ff00000 	.word	0x7ff00000
 801afbc:	00000000 	.word	0x00000000

0801afc0 <__kernel_cos>:
 801afc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc4:	ec57 6b10 	vmov	r6, r7, d0
 801afc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801afcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801afd0:	ed8d 1b00 	vstr	d1, [sp]
 801afd4:	da07      	bge.n	801afe6 <__kernel_cos+0x26>
 801afd6:	ee10 0a10 	vmov	r0, s0
 801afda:	4639      	mov	r1, r7
 801afdc:	f7e5 fdbc 	bl	8000b58 <__aeabi_d2iz>
 801afe0:	2800      	cmp	r0, #0
 801afe2:	f000 8088 	beq.w	801b0f6 <__kernel_cos+0x136>
 801afe6:	4632      	mov	r2, r6
 801afe8:	463b      	mov	r3, r7
 801afea:	4630      	mov	r0, r6
 801afec:	4639      	mov	r1, r7
 801afee:	f7e5 fb03 	bl	80005f8 <__aeabi_dmul>
 801aff2:	4b51      	ldr	r3, [pc, #324]	; (801b138 <__kernel_cos+0x178>)
 801aff4:	2200      	movs	r2, #0
 801aff6:	4604      	mov	r4, r0
 801aff8:	460d      	mov	r5, r1
 801affa:	f7e5 fafd 	bl	80005f8 <__aeabi_dmul>
 801affe:	a340      	add	r3, pc, #256	; (adr r3, 801b100 <__kernel_cos+0x140>)
 801b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b004:	4682      	mov	sl, r0
 801b006:	468b      	mov	fp, r1
 801b008:	4620      	mov	r0, r4
 801b00a:	4629      	mov	r1, r5
 801b00c:	f7e5 faf4 	bl	80005f8 <__aeabi_dmul>
 801b010:	a33d      	add	r3, pc, #244	; (adr r3, 801b108 <__kernel_cos+0x148>)
 801b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b016:	f7e5 f939 	bl	800028c <__adddf3>
 801b01a:	4622      	mov	r2, r4
 801b01c:	462b      	mov	r3, r5
 801b01e:	f7e5 faeb 	bl	80005f8 <__aeabi_dmul>
 801b022:	a33b      	add	r3, pc, #236	; (adr r3, 801b110 <__kernel_cos+0x150>)
 801b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b028:	f7e5 f92e 	bl	8000288 <__aeabi_dsub>
 801b02c:	4622      	mov	r2, r4
 801b02e:	462b      	mov	r3, r5
 801b030:	f7e5 fae2 	bl	80005f8 <__aeabi_dmul>
 801b034:	a338      	add	r3, pc, #224	; (adr r3, 801b118 <__kernel_cos+0x158>)
 801b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03a:	f7e5 f927 	bl	800028c <__adddf3>
 801b03e:	4622      	mov	r2, r4
 801b040:	462b      	mov	r3, r5
 801b042:	f7e5 fad9 	bl	80005f8 <__aeabi_dmul>
 801b046:	a336      	add	r3, pc, #216	; (adr r3, 801b120 <__kernel_cos+0x160>)
 801b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b04c:	f7e5 f91c 	bl	8000288 <__aeabi_dsub>
 801b050:	4622      	mov	r2, r4
 801b052:	462b      	mov	r3, r5
 801b054:	f7e5 fad0 	bl	80005f8 <__aeabi_dmul>
 801b058:	a333      	add	r3, pc, #204	; (adr r3, 801b128 <__kernel_cos+0x168>)
 801b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b05e:	f7e5 f915 	bl	800028c <__adddf3>
 801b062:	4622      	mov	r2, r4
 801b064:	462b      	mov	r3, r5
 801b066:	f7e5 fac7 	bl	80005f8 <__aeabi_dmul>
 801b06a:	4622      	mov	r2, r4
 801b06c:	462b      	mov	r3, r5
 801b06e:	f7e5 fac3 	bl	80005f8 <__aeabi_dmul>
 801b072:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b076:	4604      	mov	r4, r0
 801b078:	460d      	mov	r5, r1
 801b07a:	4630      	mov	r0, r6
 801b07c:	4639      	mov	r1, r7
 801b07e:	f7e5 fabb 	bl	80005f8 <__aeabi_dmul>
 801b082:	460b      	mov	r3, r1
 801b084:	4602      	mov	r2, r0
 801b086:	4629      	mov	r1, r5
 801b088:	4620      	mov	r0, r4
 801b08a:	f7e5 f8fd 	bl	8000288 <__aeabi_dsub>
 801b08e:	4b2b      	ldr	r3, [pc, #172]	; (801b13c <__kernel_cos+0x17c>)
 801b090:	4598      	cmp	r8, r3
 801b092:	4606      	mov	r6, r0
 801b094:	460f      	mov	r7, r1
 801b096:	dc10      	bgt.n	801b0ba <__kernel_cos+0xfa>
 801b098:	4602      	mov	r2, r0
 801b09a:	460b      	mov	r3, r1
 801b09c:	4650      	mov	r0, sl
 801b09e:	4659      	mov	r1, fp
 801b0a0:	f7e5 f8f2 	bl	8000288 <__aeabi_dsub>
 801b0a4:	460b      	mov	r3, r1
 801b0a6:	4926      	ldr	r1, [pc, #152]	; (801b140 <__kernel_cos+0x180>)
 801b0a8:	4602      	mov	r2, r0
 801b0aa:	2000      	movs	r0, #0
 801b0ac:	f7e5 f8ec 	bl	8000288 <__aeabi_dsub>
 801b0b0:	ec41 0b10 	vmov	d0, r0, r1
 801b0b4:	b003      	add	sp, #12
 801b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ba:	4b22      	ldr	r3, [pc, #136]	; (801b144 <__kernel_cos+0x184>)
 801b0bc:	4920      	ldr	r1, [pc, #128]	; (801b140 <__kernel_cos+0x180>)
 801b0be:	4598      	cmp	r8, r3
 801b0c0:	bfcc      	ite	gt
 801b0c2:	4d21      	ldrgt	r5, [pc, #132]	; (801b148 <__kernel_cos+0x188>)
 801b0c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b0c8:	2400      	movs	r4, #0
 801b0ca:	4622      	mov	r2, r4
 801b0cc:	462b      	mov	r3, r5
 801b0ce:	2000      	movs	r0, #0
 801b0d0:	f7e5 f8da 	bl	8000288 <__aeabi_dsub>
 801b0d4:	4622      	mov	r2, r4
 801b0d6:	4680      	mov	r8, r0
 801b0d8:	4689      	mov	r9, r1
 801b0da:	462b      	mov	r3, r5
 801b0dc:	4650      	mov	r0, sl
 801b0de:	4659      	mov	r1, fp
 801b0e0:	f7e5 f8d2 	bl	8000288 <__aeabi_dsub>
 801b0e4:	4632      	mov	r2, r6
 801b0e6:	463b      	mov	r3, r7
 801b0e8:	f7e5 f8ce 	bl	8000288 <__aeabi_dsub>
 801b0ec:	4602      	mov	r2, r0
 801b0ee:	460b      	mov	r3, r1
 801b0f0:	4640      	mov	r0, r8
 801b0f2:	4649      	mov	r1, r9
 801b0f4:	e7da      	b.n	801b0ac <__kernel_cos+0xec>
 801b0f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b130 <__kernel_cos+0x170>
 801b0fa:	e7db      	b.n	801b0b4 <__kernel_cos+0xf4>
 801b0fc:	f3af 8000 	nop.w
 801b100:	be8838d4 	.word	0xbe8838d4
 801b104:	bda8fae9 	.word	0xbda8fae9
 801b108:	bdb4b1c4 	.word	0xbdb4b1c4
 801b10c:	3e21ee9e 	.word	0x3e21ee9e
 801b110:	809c52ad 	.word	0x809c52ad
 801b114:	3e927e4f 	.word	0x3e927e4f
 801b118:	19cb1590 	.word	0x19cb1590
 801b11c:	3efa01a0 	.word	0x3efa01a0
 801b120:	16c15177 	.word	0x16c15177
 801b124:	3f56c16c 	.word	0x3f56c16c
 801b128:	5555554c 	.word	0x5555554c
 801b12c:	3fa55555 	.word	0x3fa55555
 801b130:	00000000 	.word	0x00000000
 801b134:	3ff00000 	.word	0x3ff00000
 801b138:	3fe00000 	.word	0x3fe00000
 801b13c:	3fd33332 	.word	0x3fd33332
 801b140:	3ff00000 	.word	0x3ff00000
 801b144:	3fe90000 	.word	0x3fe90000
 801b148:	3fd20000 	.word	0x3fd20000
 801b14c:	00000000 	.word	0x00000000

0801b150 <__kernel_rem_pio2>:
 801b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b154:	ed2d 8b02 	vpush	{d8}
 801b158:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b15c:	f112 0f14 	cmn.w	r2, #20
 801b160:	9308      	str	r3, [sp, #32]
 801b162:	9101      	str	r1, [sp, #4]
 801b164:	4bc6      	ldr	r3, [pc, #792]	; (801b480 <__kernel_rem_pio2+0x330>)
 801b166:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b168:	9009      	str	r0, [sp, #36]	; 0x24
 801b16a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b16e:	9304      	str	r3, [sp, #16]
 801b170:	9b08      	ldr	r3, [sp, #32]
 801b172:	f103 33ff 	add.w	r3, r3, #4294967295
 801b176:	bfa8      	it	ge
 801b178:	1ed4      	subge	r4, r2, #3
 801b17a:	9306      	str	r3, [sp, #24]
 801b17c:	bfb2      	itee	lt
 801b17e:	2400      	movlt	r4, #0
 801b180:	2318      	movge	r3, #24
 801b182:	fb94 f4f3 	sdivge	r4, r4, r3
 801b186:	f06f 0317 	mvn.w	r3, #23
 801b18a:	fb04 3303 	mla	r3, r4, r3, r3
 801b18e:	eb03 0a02 	add.w	sl, r3, r2
 801b192:	9b04      	ldr	r3, [sp, #16]
 801b194:	9a06      	ldr	r2, [sp, #24]
 801b196:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b470 <__kernel_rem_pio2+0x320>
 801b19a:	eb03 0802 	add.w	r8, r3, r2
 801b19e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b1a0:	1aa7      	subs	r7, r4, r2
 801b1a2:	ae20      	add	r6, sp, #128	; 0x80
 801b1a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b1a8:	2500      	movs	r5, #0
 801b1aa:	4545      	cmp	r5, r8
 801b1ac:	dd18      	ble.n	801b1e0 <__kernel_rem_pio2+0x90>
 801b1ae:	9b08      	ldr	r3, [sp, #32]
 801b1b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b1b4:	aa20      	add	r2, sp, #128	; 0x80
 801b1b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801b470 <__kernel_rem_pio2+0x320>
 801b1ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b1be:	f1c3 0301 	rsb	r3, r3, #1
 801b1c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b1c6:	9307      	str	r3, [sp, #28]
 801b1c8:	9b07      	ldr	r3, [sp, #28]
 801b1ca:	9a04      	ldr	r2, [sp, #16]
 801b1cc:	4443      	add	r3, r8
 801b1ce:	429a      	cmp	r2, r3
 801b1d0:	db2f      	blt.n	801b232 <__kernel_rem_pio2+0xe2>
 801b1d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b1d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b1da:	462f      	mov	r7, r5
 801b1dc:	2600      	movs	r6, #0
 801b1de:	e01b      	b.n	801b218 <__kernel_rem_pio2+0xc8>
 801b1e0:	42ef      	cmn	r7, r5
 801b1e2:	d407      	bmi.n	801b1f4 <__kernel_rem_pio2+0xa4>
 801b1e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b1e8:	f7e5 f99c 	bl	8000524 <__aeabi_i2d>
 801b1ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b1f0:	3501      	adds	r5, #1
 801b1f2:	e7da      	b.n	801b1aa <__kernel_rem_pio2+0x5a>
 801b1f4:	ec51 0b18 	vmov	r0, r1, d8
 801b1f8:	e7f8      	b.n	801b1ec <__kernel_rem_pio2+0x9c>
 801b1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b1fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b202:	f7e5 f9f9 	bl	80005f8 <__aeabi_dmul>
 801b206:	4602      	mov	r2, r0
 801b208:	460b      	mov	r3, r1
 801b20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b20e:	f7e5 f83d 	bl	800028c <__adddf3>
 801b212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b216:	3601      	adds	r6, #1
 801b218:	9b06      	ldr	r3, [sp, #24]
 801b21a:	429e      	cmp	r6, r3
 801b21c:	f1a7 0708 	sub.w	r7, r7, #8
 801b220:	ddeb      	ble.n	801b1fa <__kernel_rem_pio2+0xaa>
 801b222:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b226:	3508      	adds	r5, #8
 801b228:	ecab 7b02 	vstmia	fp!, {d7}
 801b22c:	f108 0801 	add.w	r8, r8, #1
 801b230:	e7ca      	b.n	801b1c8 <__kernel_rem_pio2+0x78>
 801b232:	9b04      	ldr	r3, [sp, #16]
 801b234:	aa0c      	add	r2, sp, #48	; 0x30
 801b236:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b23a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b23c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b23e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b242:	9c04      	ldr	r4, [sp, #16]
 801b244:	930a      	str	r3, [sp, #40]	; 0x28
 801b246:	ab98      	add	r3, sp, #608	; 0x260
 801b248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b24c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b250:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801b254:	f8cd b008 	str.w	fp, [sp, #8]
 801b258:	4625      	mov	r5, r4
 801b25a:	2d00      	cmp	r5, #0
 801b25c:	dc78      	bgt.n	801b350 <__kernel_rem_pio2+0x200>
 801b25e:	ec47 6b10 	vmov	d0, r6, r7
 801b262:	4650      	mov	r0, sl
 801b264:	f000 fda0 	bl	801bda8 <scalbn>
 801b268:	ec57 6b10 	vmov	r6, r7, d0
 801b26c:	2200      	movs	r2, #0
 801b26e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b272:	ee10 0a10 	vmov	r0, s0
 801b276:	4639      	mov	r1, r7
 801b278:	f7e5 f9be 	bl	80005f8 <__aeabi_dmul>
 801b27c:	ec41 0b10 	vmov	d0, r0, r1
 801b280:	f000 fd12 	bl	801bca8 <floor>
 801b284:	4b7f      	ldr	r3, [pc, #508]	; (801b484 <__kernel_rem_pio2+0x334>)
 801b286:	ec51 0b10 	vmov	r0, r1, d0
 801b28a:	2200      	movs	r2, #0
 801b28c:	f7e5 f9b4 	bl	80005f8 <__aeabi_dmul>
 801b290:	4602      	mov	r2, r0
 801b292:	460b      	mov	r3, r1
 801b294:	4630      	mov	r0, r6
 801b296:	4639      	mov	r1, r7
 801b298:	f7e4 fff6 	bl	8000288 <__aeabi_dsub>
 801b29c:	460f      	mov	r7, r1
 801b29e:	4606      	mov	r6, r0
 801b2a0:	f7e5 fc5a 	bl	8000b58 <__aeabi_d2iz>
 801b2a4:	9007      	str	r0, [sp, #28]
 801b2a6:	f7e5 f93d 	bl	8000524 <__aeabi_i2d>
 801b2aa:	4602      	mov	r2, r0
 801b2ac:	460b      	mov	r3, r1
 801b2ae:	4630      	mov	r0, r6
 801b2b0:	4639      	mov	r1, r7
 801b2b2:	f7e4 ffe9 	bl	8000288 <__aeabi_dsub>
 801b2b6:	f1ba 0f00 	cmp.w	sl, #0
 801b2ba:	4606      	mov	r6, r0
 801b2bc:	460f      	mov	r7, r1
 801b2be:	dd70      	ble.n	801b3a2 <__kernel_rem_pio2+0x252>
 801b2c0:	1e62      	subs	r2, r4, #1
 801b2c2:	ab0c      	add	r3, sp, #48	; 0x30
 801b2c4:	9d07      	ldr	r5, [sp, #28]
 801b2c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b2ca:	f1ca 0118 	rsb	r1, sl, #24
 801b2ce:	fa40 f301 	asr.w	r3, r0, r1
 801b2d2:	441d      	add	r5, r3
 801b2d4:	408b      	lsls	r3, r1
 801b2d6:	1ac0      	subs	r0, r0, r3
 801b2d8:	ab0c      	add	r3, sp, #48	; 0x30
 801b2da:	9507      	str	r5, [sp, #28]
 801b2dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b2e0:	f1ca 0317 	rsb	r3, sl, #23
 801b2e4:	fa40 f303 	asr.w	r3, r0, r3
 801b2e8:	9302      	str	r3, [sp, #8]
 801b2ea:	9b02      	ldr	r3, [sp, #8]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	dd66      	ble.n	801b3be <__kernel_rem_pio2+0x26e>
 801b2f0:	9b07      	ldr	r3, [sp, #28]
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	3301      	adds	r3, #1
 801b2f6:	9307      	str	r3, [sp, #28]
 801b2f8:	4615      	mov	r5, r2
 801b2fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b2fe:	4294      	cmp	r4, r2
 801b300:	f300 8099 	bgt.w	801b436 <__kernel_rem_pio2+0x2e6>
 801b304:	f1ba 0f00 	cmp.w	sl, #0
 801b308:	dd07      	ble.n	801b31a <__kernel_rem_pio2+0x1ca>
 801b30a:	f1ba 0f01 	cmp.w	sl, #1
 801b30e:	f000 80a5 	beq.w	801b45c <__kernel_rem_pio2+0x30c>
 801b312:	f1ba 0f02 	cmp.w	sl, #2
 801b316:	f000 80c1 	beq.w	801b49c <__kernel_rem_pio2+0x34c>
 801b31a:	9b02      	ldr	r3, [sp, #8]
 801b31c:	2b02      	cmp	r3, #2
 801b31e:	d14e      	bne.n	801b3be <__kernel_rem_pio2+0x26e>
 801b320:	4632      	mov	r2, r6
 801b322:	463b      	mov	r3, r7
 801b324:	4958      	ldr	r1, [pc, #352]	; (801b488 <__kernel_rem_pio2+0x338>)
 801b326:	2000      	movs	r0, #0
 801b328:	f7e4 ffae 	bl	8000288 <__aeabi_dsub>
 801b32c:	4606      	mov	r6, r0
 801b32e:	460f      	mov	r7, r1
 801b330:	2d00      	cmp	r5, #0
 801b332:	d044      	beq.n	801b3be <__kernel_rem_pio2+0x26e>
 801b334:	4650      	mov	r0, sl
 801b336:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b478 <__kernel_rem_pio2+0x328>
 801b33a:	f000 fd35 	bl	801bda8 <scalbn>
 801b33e:	4630      	mov	r0, r6
 801b340:	4639      	mov	r1, r7
 801b342:	ec53 2b10 	vmov	r2, r3, d0
 801b346:	f7e4 ff9f 	bl	8000288 <__aeabi_dsub>
 801b34a:	4606      	mov	r6, r0
 801b34c:	460f      	mov	r7, r1
 801b34e:	e036      	b.n	801b3be <__kernel_rem_pio2+0x26e>
 801b350:	4b4e      	ldr	r3, [pc, #312]	; (801b48c <__kernel_rem_pio2+0x33c>)
 801b352:	2200      	movs	r2, #0
 801b354:	4630      	mov	r0, r6
 801b356:	4639      	mov	r1, r7
 801b358:	f7e5 f94e 	bl	80005f8 <__aeabi_dmul>
 801b35c:	f7e5 fbfc 	bl	8000b58 <__aeabi_d2iz>
 801b360:	f7e5 f8e0 	bl	8000524 <__aeabi_i2d>
 801b364:	4b4a      	ldr	r3, [pc, #296]	; (801b490 <__kernel_rem_pio2+0x340>)
 801b366:	2200      	movs	r2, #0
 801b368:	4680      	mov	r8, r0
 801b36a:	4689      	mov	r9, r1
 801b36c:	f7e5 f944 	bl	80005f8 <__aeabi_dmul>
 801b370:	4602      	mov	r2, r0
 801b372:	460b      	mov	r3, r1
 801b374:	4630      	mov	r0, r6
 801b376:	4639      	mov	r1, r7
 801b378:	f7e4 ff86 	bl	8000288 <__aeabi_dsub>
 801b37c:	f7e5 fbec 	bl	8000b58 <__aeabi_d2iz>
 801b380:	9b02      	ldr	r3, [sp, #8]
 801b382:	f843 0b04 	str.w	r0, [r3], #4
 801b386:	3d01      	subs	r5, #1
 801b388:	9302      	str	r3, [sp, #8]
 801b38a:	ab70      	add	r3, sp, #448	; 0x1c0
 801b38c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b394:	4640      	mov	r0, r8
 801b396:	4649      	mov	r1, r9
 801b398:	f7e4 ff78 	bl	800028c <__adddf3>
 801b39c:	4606      	mov	r6, r0
 801b39e:	460f      	mov	r7, r1
 801b3a0:	e75b      	b.n	801b25a <__kernel_rem_pio2+0x10a>
 801b3a2:	d105      	bne.n	801b3b0 <__kernel_rem_pio2+0x260>
 801b3a4:	1e63      	subs	r3, r4, #1
 801b3a6:	aa0c      	add	r2, sp, #48	; 0x30
 801b3a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3ac:	15c3      	asrs	r3, r0, #23
 801b3ae:	e79b      	b.n	801b2e8 <__kernel_rem_pio2+0x198>
 801b3b0:	4b38      	ldr	r3, [pc, #224]	; (801b494 <__kernel_rem_pio2+0x344>)
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	f7e5 fba6 	bl	8000b04 <__aeabi_dcmpge>
 801b3b8:	2800      	cmp	r0, #0
 801b3ba:	d139      	bne.n	801b430 <__kernel_rem_pio2+0x2e0>
 801b3bc:	9002      	str	r0, [sp, #8]
 801b3be:	2200      	movs	r2, #0
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	4630      	mov	r0, r6
 801b3c4:	4639      	mov	r1, r7
 801b3c6:	f7e5 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 801b3ca:	2800      	cmp	r0, #0
 801b3cc:	f000 80b4 	beq.w	801b538 <__kernel_rem_pio2+0x3e8>
 801b3d0:	f104 3bff 	add.w	fp, r4, #4294967295
 801b3d4:	465b      	mov	r3, fp
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	9904      	ldr	r1, [sp, #16]
 801b3da:	428b      	cmp	r3, r1
 801b3dc:	da65      	bge.n	801b4aa <__kernel_rem_pio2+0x35a>
 801b3de:	2a00      	cmp	r2, #0
 801b3e0:	d07b      	beq.n	801b4da <__kernel_rem_pio2+0x38a>
 801b3e2:	ab0c      	add	r3, sp, #48	; 0x30
 801b3e4:	f1aa 0a18 	sub.w	sl, sl, #24
 801b3e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	f000 80a0 	beq.w	801b532 <__kernel_rem_pio2+0x3e2>
 801b3f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b478 <__kernel_rem_pio2+0x328>
 801b3f6:	4650      	mov	r0, sl
 801b3f8:	f000 fcd6 	bl	801bda8 <scalbn>
 801b3fc:	4f23      	ldr	r7, [pc, #140]	; (801b48c <__kernel_rem_pio2+0x33c>)
 801b3fe:	ec55 4b10 	vmov	r4, r5, d0
 801b402:	46d8      	mov	r8, fp
 801b404:	2600      	movs	r6, #0
 801b406:	f1b8 0f00 	cmp.w	r8, #0
 801b40a:	f280 80cf 	bge.w	801b5ac <__kernel_rem_pio2+0x45c>
 801b40e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801b470 <__kernel_rem_pio2+0x320>
 801b412:	465f      	mov	r7, fp
 801b414:	f04f 0800 	mov.w	r8, #0
 801b418:	2f00      	cmp	r7, #0
 801b41a:	f2c0 80fd 	blt.w	801b618 <__kernel_rem_pio2+0x4c8>
 801b41e:	ab70      	add	r3, sp, #448	; 0x1c0
 801b420:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b498 <__kernel_rem_pio2+0x348>
 801b424:	ec55 4b18 	vmov	r4, r5, d8
 801b428:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801b42c:	2600      	movs	r6, #0
 801b42e:	e0e5      	b.n	801b5fc <__kernel_rem_pio2+0x4ac>
 801b430:	2302      	movs	r3, #2
 801b432:	9302      	str	r3, [sp, #8]
 801b434:	e75c      	b.n	801b2f0 <__kernel_rem_pio2+0x1a0>
 801b436:	f8db 3000 	ldr.w	r3, [fp]
 801b43a:	b955      	cbnz	r5, 801b452 <__kernel_rem_pio2+0x302>
 801b43c:	b123      	cbz	r3, 801b448 <__kernel_rem_pio2+0x2f8>
 801b43e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b442:	f8cb 3000 	str.w	r3, [fp]
 801b446:	2301      	movs	r3, #1
 801b448:	3201      	adds	r2, #1
 801b44a:	f10b 0b04 	add.w	fp, fp, #4
 801b44e:	461d      	mov	r5, r3
 801b450:	e755      	b.n	801b2fe <__kernel_rem_pio2+0x1ae>
 801b452:	1acb      	subs	r3, r1, r3
 801b454:	f8cb 3000 	str.w	r3, [fp]
 801b458:	462b      	mov	r3, r5
 801b45a:	e7f5      	b.n	801b448 <__kernel_rem_pio2+0x2f8>
 801b45c:	1e62      	subs	r2, r4, #1
 801b45e:	ab0c      	add	r3, sp, #48	; 0x30
 801b460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b464:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b468:	a90c      	add	r1, sp, #48	; 0x30
 801b46a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b46e:	e754      	b.n	801b31a <__kernel_rem_pio2+0x1ca>
	...
 801b47c:	3ff00000 	.word	0x3ff00000
 801b480:	0801c868 	.word	0x0801c868
 801b484:	40200000 	.word	0x40200000
 801b488:	3ff00000 	.word	0x3ff00000
 801b48c:	3e700000 	.word	0x3e700000
 801b490:	41700000 	.word	0x41700000
 801b494:	3fe00000 	.word	0x3fe00000
 801b498:	0801c828 	.word	0x0801c828
 801b49c:	1e62      	subs	r2, r4, #1
 801b49e:	ab0c      	add	r3, sp, #48	; 0x30
 801b4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b4a8:	e7de      	b.n	801b468 <__kernel_rem_pio2+0x318>
 801b4aa:	a90c      	add	r1, sp, #48	; 0x30
 801b4ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b4b0:	3b01      	subs	r3, #1
 801b4b2:	430a      	orrs	r2, r1
 801b4b4:	e790      	b.n	801b3d8 <__kernel_rem_pio2+0x288>
 801b4b6:	3301      	adds	r3, #1
 801b4b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b4bc:	2900      	cmp	r1, #0
 801b4be:	d0fa      	beq.n	801b4b6 <__kernel_rem_pio2+0x366>
 801b4c0:	9a08      	ldr	r2, [sp, #32]
 801b4c2:	18e3      	adds	r3, r4, r3
 801b4c4:	18a6      	adds	r6, r4, r2
 801b4c6:	aa20      	add	r2, sp, #128	; 0x80
 801b4c8:	1c65      	adds	r5, r4, #1
 801b4ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b4ce:	9302      	str	r3, [sp, #8]
 801b4d0:	9b02      	ldr	r3, [sp, #8]
 801b4d2:	42ab      	cmp	r3, r5
 801b4d4:	da04      	bge.n	801b4e0 <__kernel_rem_pio2+0x390>
 801b4d6:	461c      	mov	r4, r3
 801b4d8:	e6b5      	b.n	801b246 <__kernel_rem_pio2+0xf6>
 801b4da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b4dc:	2301      	movs	r3, #1
 801b4de:	e7eb      	b.n	801b4b8 <__kernel_rem_pio2+0x368>
 801b4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b4e6:	f7e5 f81d 	bl	8000524 <__aeabi_i2d>
 801b4ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4f0:	46b3      	mov	fp, r6
 801b4f2:	461c      	mov	r4, r3
 801b4f4:	2700      	movs	r7, #0
 801b4f6:	f04f 0800 	mov.w	r8, #0
 801b4fa:	f04f 0900 	mov.w	r9, #0
 801b4fe:	9b06      	ldr	r3, [sp, #24]
 801b500:	429f      	cmp	r7, r3
 801b502:	dd06      	ble.n	801b512 <__kernel_rem_pio2+0x3c2>
 801b504:	ab70      	add	r3, sp, #448	; 0x1c0
 801b506:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b50a:	e9c3 8900 	strd	r8, r9, [r3]
 801b50e:	3501      	adds	r5, #1
 801b510:	e7de      	b.n	801b4d0 <__kernel_rem_pio2+0x380>
 801b512:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b516:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b51a:	f7e5 f86d 	bl	80005f8 <__aeabi_dmul>
 801b51e:	4602      	mov	r2, r0
 801b520:	460b      	mov	r3, r1
 801b522:	4640      	mov	r0, r8
 801b524:	4649      	mov	r1, r9
 801b526:	f7e4 feb1 	bl	800028c <__adddf3>
 801b52a:	3701      	adds	r7, #1
 801b52c:	4680      	mov	r8, r0
 801b52e:	4689      	mov	r9, r1
 801b530:	e7e5      	b.n	801b4fe <__kernel_rem_pio2+0x3ae>
 801b532:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b536:	e754      	b.n	801b3e2 <__kernel_rem_pio2+0x292>
 801b538:	ec47 6b10 	vmov	d0, r6, r7
 801b53c:	f1ca 0000 	rsb	r0, sl, #0
 801b540:	f000 fc32 	bl	801bda8 <scalbn>
 801b544:	ec57 6b10 	vmov	r6, r7, d0
 801b548:	4b9f      	ldr	r3, [pc, #636]	; (801b7c8 <__kernel_rem_pio2+0x678>)
 801b54a:	ee10 0a10 	vmov	r0, s0
 801b54e:	2200      	movs	r2, #0
 801b550:	4639      	mov	r1, r7
 801b552:	f7e5 fad7 	bl	8000b04 <__aeabi_dcmpge>
 801b556:	b300      	cbz	r0, 801b59a <__kernel_rem_pio2+0x44a>
 801b558:	4b9c      	ldr	r3, [pc, #624]	; (801b7cc <__kernel_rem_pio2+0x67c>)
 801b55a:	2200      	movs	r2, #0
 801b55c:	4630      	mov	r0, r6
 801b55e:	4639      	mov	r1, r7
 801b560:	f7e5 f84a 	bl	80005f8 <__aeabi_dmul>
 801b564:	f7e5 faf8 	bl	8000b58 <__aeabi_d2iz>
 801b568:	4605      	mov	r5, r0
 801b56a:	f7e4 ffdb 	bl	8000524 <__aeabi_i2d>
 801b56e:	4b96      	ldr	r3, [pc, #600]	; (801b7c8 <__kernel_rem_pio2+0x678>)
 801b570:	2200      	movs	r2, #0
 801b572:	f7e5 f841 	bl	80005f8 <__aeabi_dmul>
 801b576:	460b      	mov	r3, r1
 801b578:	4602      	mov	r2, r0
 801b57a:	4639      	mov	r1, r7
 801b57c:	4630      	mov	r0, r6
 801b57e:	f7e4 fe83 	bl	8000288 <__aeabi_dsub>
 801b582:	f7e5 fae9 	bl	8000b58 <__aeabi_d2iz>
 801b586:	f104 0b01 	add.w	fp, r4, #1
 801b58a:	ab0c      	add	r3, sp, #48	; 0x30
 801b58c:	f10a 0a18 	add.w	sl, sl, #24
 801b590:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b594:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801b598:	e72b      	b.n	801b3f2 <__kernel_rem_pio2+0x2a2>
 801b59a:	4630      	mov	r0, r6
 801b59c:	4639      	mov	r1, r7
 801b59e:	f7e5 fadb 	bl	8000b58 <__aeabi_d2iz>
 801b5a2:	ab0c      	add	r3, sp, #48	; 0x30
 801b5a4:	46a3      	mov	fp, r4
 801b5a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b5aa:	e722      	b.n	801b3f2 <__kernel_rem_pio2+0x2a2>
 801b5ac:	ab70      	add	r3, sp, #448	; 0x1c0
 801b5ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801b5b2:	ab0c      	add	r3, sp, #48	; 0x30
 801b5b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b5b8:	f7e4 ffb4 	bl	8000524 <__aeabi_i2d>
 801b5bc:	4622      	mov	r2, r4
 801b5be:	462b      	mov	r3, r5
 801b5c0:	f7e5 f81a 	bl	80005f8 <__aeabi_dmul>
 801b5c4:	4632      	mov	r2, r6
 801b5c6:	e9c9 0100 	strd	r0, r1, [r9]
 801b5ca:	463b      	mov	r3, r7
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	4629      	mov	r1, r5
 801b5d0:	f7e5 f812 	bl	80005f8 <__aeabi_dmul>
 801b5d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801b5d8:	4604      	mov	r4, r0
 801b5da:	460d      	mov	r5, r1
 801b5dc:	e713      	b.n	801b406 <__kernel_rem_pio2+0x2b6>
 801b5de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801b5e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801b5e6:	f7e5 f807 	bl	80005f8 <__aeabi_dmul>
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	460b      	mov	r3, r1
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	4629      	mov	r1, r5
 801b5f2:	f7e4 fe4b 	bl	800028c <__adddf3>
 801b5f6:	3601      	adds	r6, #1
 801b5f8:	4604      	mov	r4, r0
 801b5fa:	460d      	mov	r5, r1
 801b5fc:	9b04      	ldr	r3, [sp, #16]
 801b5fe:	429e      	cmp	r6, r3
 801b600:	dc01      	bgt.n	801b606 <__kernel_rem_pio2+0x4b6>
 801b602:	45b0      	cmp	r8, r6
 801b604:	daeb      	bge.n	801b5de <__kernel_rem_pio2+0x48e>
 801b606:	ab48      	add	r3, sp, #288	; 0x120
 801b608:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b60c:	e9c3 4500 	strd	r4, r5, [r3]
 801b610:	3f01      	subs	r7, #1
 801b612:	f108 0801 	add.w	r8, r8, #1
 801b616:	e6ff      	b.n	801b418 <__kernel_rem_pio2+0x2c8>
 801b618:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b61a:	2b02      	cmp	r3, #2
 801b61c:	dc0b      	bgt.n	801b636 <__kernel_rem_pio2+0x4e6>
 801b61e:	2b00      	cmp	r3, #0
 801b620:	dc6e      	bgt.n	801b700 <__kernel_rem_pio2+0x5b0>
 801b622:	d045      	beq.n	801b6b0 <__kernel_rem_pio2+0x560>
 801b624:	9b07      	ldr	r3, [sp, #28]
 801b626:	f003 0007 	and.w	r0, r3, #7
 801b62a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b62e:	ecbd 8b02 	vpop	{d8}
 801b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b636:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b638:	2b03      	cmp	r3, #3
 801b63a:	d1f3      	bne.n	801b624 <__kernel_rem_pio2+0x4d4>
 801b63c:	ab48      	add	r3, sp, #288	; 0x120
 801b63e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801b642:	46d0      	mov	r8, sl
 801b644:	46d9      	mov	r9, fp
 801b646:	f1b9 0f00 	cmp.w	r9, #0
 801b64a:	f1a8 0808 	sub.w	r8, r8, #8
 801b64e:	dc64      	bgt.n	801b71a <__kernel_rem_pio2+0x5ca>
 801b650:	465c      	mov	r4, fp
 801b652:	2c01      	cmp	r4, #1
 801b654:	f1aa 0a08 	sub.w	sl, sl, #8
 801b658:	dc7e      	bgt.n	801b758 <__kernel_rem_pio2+0x608>
 801b65a:	2000      	movs	r0, #0
 801b65c:	2100      	movs	r1, #0
 801b65e:	f1bb 0f01 	cmp.w	fp, #1
 801b662:	f300 8097 	bgt.w	801b794 <__kernel_rem_pio2+0x644>
 801b666:	9b02      	ldr	r3, [sp, #8]
 801b668:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801b66c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801b670:	2b00      	cmp	r3, #0
 801b672:	f040 8099 	bne.w	801b7a8 <__kernel_rem_pio2+0x658>
 801b676:	9b01      	ldr	r3, [sp, #4]
 801b678:	e9c3 5600 	strd	r5, r6, [r3]
 801b67c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801b680:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b684:	e7ce      	b.n	801b624 <__kernel_rem_pio2+0x4d4>
 801b686:	ab48      	add	r3, sp, #288	; 0x120
 801b688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b690:	f7e4 fdfc 	bl	800028c <__adddf3>
 801b694:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b698:	f1bb 0f00 	cmp.w	fp, #0
 801b69c:	daf3      	bge.n	801b686 <__kernel_rem_pio2+0x536>
 801b69e:	9b02      	ldr	r3, [sp, #8]
 801b6a0:	b113      	cbz	r3, 801b6a8 <__kernel_rem_pio2+0x558>
 801b6a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6a6:	4619      	mov	r1, r3
 801b6a8:	9b01      	ldr	r3, [sp, #4]
 801b6aa:	e9c3 0100 	strd	r0, r1, [r3]
 801b6ae:	e7b9      	b.n	801b624 <__kernel_rem_pio2+0x4d4>
 801b6b0:	2000      	movs	r0, #0
 801b6b2:	2100      	movs	r1, #0
 801b6b4:	e7f0      	b.n	801b698 <__kernel_rem_pio2+0x548>
 801b6b6:	ab48      	add	r3, sp, #288	; 0x120
 801b6b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c0:	f7e4 fde4 	bl	800028c <__adddf3>
 801b6c4:	3c01      	subs	r4, #1
 801b6c6:	2c00      	cmp	r4, #0
 801b6c8:	daf5      	bge.n	801b6b6 <__kernel_rem_pio2+0x566>
 801b6ca:	9b02      	ldr	r3, [sp, #8]
 801b6cc:	b1e3      	cbz	r3, 801b708 <__kernel_rem_pio2+0x5b8>
 801b6ce:	4602      	mov	r2, r0
 801b6d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6d4:	9c01      	ldr	r4, [sp, #4]
 801b6d6:	e9c4 2300 	strd	r2, r3, [r4]
 801b6da:	4602      	mov	r2, r0
 801b6dc:	460b      	mov	r3, r1
 801b6de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b6e2:	f7e4 fdd1 	bl	8000288 <__aeabi_dsub>
 801b6e6:	ad4a      	add	r5, sp, #296	; 0x128
 801b6e8:	2401      	movs	r4, #1
 801b6ea:	45a3      	cmp	fp, r4
 801b6ec:	da0f      	bge.n	801b70e <__kernel_rem_pio2+0x5be>
 801b6ee:	9b02      	ldr	r3, [sp, #8]
 801b6f0:	b113      	cbz	r3, 801b6f8 <__kernel_rem_pio2+0x5a8>
 801b6f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6f6:	4619      	mov	r1, r3
 801b6f8:	9b01      	ldr	r3, [sp, #4]
 801b6fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b6fe:	e791      	b.n	801b624 <__kernel_rem_pio2+0x4d4>
 801b700:	465c      	mov	r4, fp
 801b702:	2000      	movs	r0, #0
 801b704:	2100      	movs	r1, #0
 801b706:	e7de      	b.n	801b6c6 <__kernel_rem_pio2+0x576>
 801b708:	4602      	mov	r2, r0
 801b70a:	460b      	mov	r3, r1
 801b70c:	e7e2      	b.n	801b6d4 <__kernel_rem_pio2+0x584>
 801b70e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801b712:	f7e4 fdbb 	bl	800028c <__adddf3>
 801b716:	3401      	adds	r4, #1
 801b718:	e7e7      	b.n	801b6ea <__kernel_rem_pio2+0x59a>
 801b71a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801b71e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801b722:	4620      	mov	r0, r4
 801b724:	4632      	mov	r2, r6
 801b726:	463b      	mov	r3, r7
 801b728:	4629      	mov	r1, r5
 801b72a:	f7e4 fdaf 	bl	800028c <__adddf3>
 801b72e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b732:	4602      	mov	r2, r0
 801b734:	460b      	mov	r3, r1
 801b736:	4620      	mov	r0, r4
 801b738:	4629      	mov	r1, r5
 801b73a:	f7e4 fda5 	bl	8000288 <__aeabi_dsub>
 801b73e:	4632      	mov	r2, r6
 801b740:	463b      	mov	r3, r7
 801b742:	f7e4 fda3 	bl	800028c <__adddf3>
 801b746:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b74a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801b74e:	ed88 7b00 	vstr	d7, [r8]
 801b752:	f109 39ff 	add.w	r9, r9, #4294967295
 801b756:	e776      	b.n	801b646 <__kernel_rem_pio2+0x4f6>
 801b758:	e9da 8900 	ldrd	r8, r9, [sl]
 801b75c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b760:	4640      	mov	r0, r8
 801b762:	4632      	mov	r2, r6
 801b764:	463b      	mov	r3, r7
 801b766:	4649      	mov	r1, r9
 801b768:	f7e4 fd90 	bl	800028c <__adddf3>
 801b76c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b770:	4602      	mov	r2, r0
 801b772:	460b      	mov	r3, r1
 801b774:	4640      	mov	r0, r8
 801b776:	4649      	mov	r1, r9
 801b778:	f7e4 fd86 	bl	8000288 <__aeabi_dsub>
 801b77c:	4632      	mov	r2, r6
 801b77e:	463b      	mov	r3, r7
 801b780:	f7e4 fd84 	bl	800028c <__adddf3>
 801b784:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b788:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b78c:	ed8a 7b00 	vstr	d7, [sl]
 801b790:	3c01      	subs	r4, #1
 801b792:	e75e      	b.n	801b652 <__kernel_rem_pio2+0x502>
 801b794:	ab48      	add	r3, sp, #288	; 0x120
 801b796:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b79e:	f7e4 fd75 	bl	800028c <__adddf3>
 801b7a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b7a6:	e75a      	b.n	801b65e <__kernel_rem_pio2+0x50e>
 801b7a8:	9b01      	ldr	r3, [sp, #4]
 801b7aa:	9a01      	ldr	r2, [sp, #4]
 801b7ac:	601d      	str	r5, [r3, #0]
 801b7ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801b7b2:	605c      	str	r4, [r3, #4]
 801b7b4:	609f      	str	r7, [r3, #8]
 801b7b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801b7ba:	60d3      	str	r3, [r2, #12]
 801b7bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7c0:	6110      	str	r0, [r2, #16]
 801b7c2:	6153      	str	r3, [r2, #20]
 801b7c4:	e72e      	b.n	801b624 <__kernel_rem_pio2+0x4d4>
 801b7c6:	bf00      	nop
 801b7c8:	41700000 	.word	0x41700000
 801b7cc:	3e700000 	.word	0x3e700000

0801b7d0 <__kernel_sin>:
 801b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7d4:	ed2d 8b04 	vpush	{d8-d9}
 801b7d8:	eeb0 8a41 	vmov.f32	s16, s2
 801b7dc:	eef0 8a61 	vmov.f32	s17, s3
 801b7e0:	ec55 4b10 	vmov	r4, r5, d0
 801b7e4:	b083      	sub	sp, #12
 801b7e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b7ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b7ee:	9001      	str	r0, [sp, #4]
 801b7f0:	da06      	bge.n	801b800 <__kernel_sin+0x30>
 801b7f2:	ee10 0a10 	vmov	r0, s0
 801b7f6:	4629      	mov	r1, r5
 801b7f8:	f7e5 f9ae 	bl	8000b58 <__aeabi_d2iz>
 801b7fc:	2800      	cmp	r0, #0
 801b7fe:	d051      	beq.n	801b8a4 <__kernel_sin+0xd4>
 801b800:	4622      	mov	r2, r4
 801b802:	462b      	mov	r3, r5
 801b804:	4620      	mov	r0, r4
 801b806:	4629      	mov	r1, r5
 801b808:	f7e4 fef6 	bl	80005f8 <__aeabi_dmul>
 801b80c:	4682      	mov	sl, r0
 801b80e:	468b      	mov	fp, r1
 801b810:	4602      	mov	r2, r0
 801b812:	460b      	mov	r3, r1
 801b814:	4620      	mov	r0, r4
 801b816:	4629      	mov	r1, r5
 801b818:	f7e4 feee 	bl	80005f8 <__aeabi_dmul>
 801b81c:	a341      	add	r3, pc, #260	; (adr r3, 801b924 <__kernel_sin+0x154>)
 801b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b822:	4680      	mov	r8, r0
 801b824:	4689      	mov	r9, r1
 801b826:	4650      	mov	r0, sl
 801b828:	4659      	mov	r1, fp
 801b82a:	f7e4 fee5 	bl	80005f8 <__aeabi_dmul>
 801b82e:	a33f      	add	r3, pc, #252	; (adr r3, 801b92c <__kernel_sin+0x15c>)
 801b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b834:	f7e4 fd28 	bl	8000288 <__aeabi_dsub>
 801b838:	4652      	mov	r2, sl
 801b83a:	465b      	mov	r3, fp
 801b83c:	f7e4 fedc 	bl	80005f8 <__aeabi_dmul>
 801b840:	a33c      	add	r3, pc, #240	; (adr r3, 801b934 <__kernel_sin+0x164>)
 801b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b846:	f7e4 fd21 	bl	800028c <__adddf3>
 801b84a:	4652      	mov	r2, sl
 801b84c:	465b      	mov	r3, fp
 801b84e:	f7e4 fed3 	bl	80005f8 <__aeabi_dmul>
 801b852:	a33a      	add	r3, pc, #232	; (adr r3, 801b93c <__kernel_sin+0x16c>)
 801b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b858:	f7e4 fd16 	bl	8000288 <__aeabi_dsub>
 801b85c:	4652      	mov	r2, sl
 801b85e:	465b      	mov	r3, fp
 801b860:	f7e4 feca 	bl	80005f8 <__aeabi_dmul>
 801b864:	a337      	add	r3, pc, #220	; (adr r3, 801b944 <__kernel_sin+0x174>)
 801b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b86a:	f7e4 fd0f 	bl	800028c <__adddf3>
 801b86e:	9b01      	ldr	r3, [sp, #4]
 801b870:	4606      	mov	r6, r0
 801b872:	460f      	mov	r7, r1
 801b874:	b9eb      	cbnz	r3, 801b8b2 <__kernel_sin+0xe2>
 801b876:	4602      	mov	r2, r0
 801b878:	460b      	mov	r3, r1
 801b87a:	4650      	mov	r0, sl
 801b87c:	4659      	mov	r1, fp
 801b87e:	f7e4 febb 	bl	80005f8 <__aeabi_dmul>
 801b882:	a325      	add	r3, pc, #148	; (adr r3, 801b918 <__kernel_sin+0x148>)
 801b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b888:	f7e4 fcfe 	bl	8000288 <__aeabi_dsub>
 801b88c:	4642      	mov	r2, r8
 801b88e:	464b      	mov	r3, r9
 801b890:	f7e4 feb2 	bl	80005f8 <__aeabi_dmul>
 801b894:	4602      	mov	r2, r0
 801b896:	460b      	mov	r3, r1
 801b898:	4620      	mov	r0, r4
 801b89a:	4629      	mov	r1, r5
 801b89c:	f7e4 fcf6 	bl	800028c <__adddf3>
 801b8a0:	4604      	mov	r4, r0
 801b8a2:	460d      	mov	r5, r1
 801b8a4:	ec45 4b10 	vmov	d0, r4, r5
 801b8a8:	b003      	add	sp, #12
 801b8aa:	ecbd 8b04 	vpop	{d8-d9}
 801b8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8b2:	4b1b      	ldr	r3, [pc, #108]	; (801b920 <__kernel_sin+0x150>)
 801b8b4:	ec51 0b18 	vmov	r0, r1, d8
 801b8b8:	2200      	movs	r2, #0
 801b8ba:	f7e4 fe9d 	bl	80005f8 <__aeabi_dmul>
 801b8be:	4632      	mov	r2, r6
 801b8c0:	ec41 0b19 	vmov	d9, r0, r1
 801b8c4:	463b      	mov	r3, r7
 801b8c6:	4640      	mov	r0, r8
 801b8c8:	4649      	mov	r1, r9
 801b8ca:	f7e4 fe95 	bl	80005f8 <__aeabi_dmul>
 801b8ce:	4602      	mov	r2, r0
 801b8d0:	460b      	mov	r3, r1
 801b8d2:	ec51 0b19 	vmov	r0, r1, d9
 801b8d6:	f7e4 fcd7 	bl	8000288 <__aeabi_dsub>
 801b8da:	4652      	mov	r2, sl
 801b8dc:	465b      	mov	r3, fp
 801b8de:	f7e4 fe8b 	bl	80005f8 <__aeabi_dmul>
 801b8e2:	ec53 2b18 	vmov	r2, r3, d8
 801b8e6:	f7e4 fccf 	bl	8000288 <__aeabi_dsub>
 801b8ea:	a30b      	add	r3, pc, #44	; (adr r3, 801b918 <__kernel_sin+0x148>)
 801b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f0:	4606      	mov	r6, r0
 801b8f2:	460f      	mov	r7, r1
 801b8f4:	4640      	mov	r0, r8
 801b8f6:	4649      	mov	r1, r9
 801b8f8:	f7e4 fe7e 	bl	80005f8 <__aeabi_dmul>
 801b8fc:	4602      	mov	r2, r0
 801b8fe:	460b      	mov	r3, r1
 801b900:	4630      	mov	r0, r6
 801b902:	4639      	mov	r1, r7
 801b904:	f7e4 fcc2 	bl	800028c <__adddf3>
 801b908:	4602      	mov	r2, r0
 801b90a:	460b      	mov	r3, r1
 801b90c:	4620      	mov	r0, r4
 801b90e:	4629      	mov	r1, r5
 801b910:	f7e4 fcba 	bl	8000288 <__aeabi_dsub>
 801b914:	e7c4      	b.n	801b8a0 <__kernel_sin+0xd0>
 801b916:	bf00      	nop
 801b918:	55555549 	.word	0x55555549
 801b91c:	3fc55555 	.word	0x3fc55555
 801b920:	3fe00000 	.word	0x3fe00000
 801b924:	5acfd57c 	.word	0x5acfd57c
 801b928:	3de5d93a 	.word	0x3de5d93a
 801b92c:	8a2b9ceb 	.word	0x8a2b9ceb
 801b930:	3e5ae5e6 	.word	0x3e5ae5e6
 801b934:	57b1fe7d 	.word	0x57b1fe7d
 801b938:	3ec71de3 	.word	0x3ec71de3
 801b93c:	19c161d5 	.word	0x19c161d5
 801b940:	3f2a01a0 	.word	0x3f2a01a0
 801b944:	1110f8a6 	.word	0x1110f8a6
 801b948:	3f811111 	.word	0x3f811111
 801b94c:	00000000 	.word	0x00000000

0801b950 <atan>:
 801b950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b954:	ec55 4b10 	vmov	r4, r5, d0
 801b958:	4bc3      	ldr	r3, [pc, #780]	; (801bc68 <atan+0x318>)
 801b95a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b95e:	429e      	cmp	r6, r3
 801b960:	46ab      	mov	fp, r5
 801b962:	dd18      	ble.n	801b996 <atan+0x46>
 801b964:	4bc1      	ldr	r3, [pc, #772]	; (801bc6c <atan+0x31c>)
 801b966:	429e      	cmp	r6, r3
 801b968:	dc01      	bgt.n	801b96e <atan+0x1e>
 801b96a:	d109      	bne.n	801b980 <atan+0x30>
 801b96c:	b144      	cbz	r4, 801b980 <atan+0x30>
 801b96e:	4622      	mov	r2, r4
 801b970:	462b      	mov	r3, r5
 801b972:	4620      	mov	r0, r4
 801b974:	4629      	mov	r1, r5
 801b976:	f7e4 fc89 	bl	800028c <__adddf3>
 801b97a:	4604      	mov	r4, r0
 801b97c:	460d      	mov	r5, r1
 801b97e:	e006      	b.n	801b98e <atan+0x3e>
 801b980:	f1bb 0f00 	cmp.w	fp, #0
 801b984:	f300 8131 	bgt.w	801bbea <atan+0x29a>
 801b988:	a59b      	add	r5, pc, #620	; (adr r5, 801bbf8 <atan+0x2a8>)
 801b98a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b98e:	ec45 4b10 	vmov	d0, r4, r5
 801b992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b996:	4bb6      	ldr	r3, [pc, #728]	; (801bc70 <atan+0x320>)
 801b998:	429e      	cmp	r6, r3
 801b99a:	dc14      	bgt.n	801b9c6 <atan+0x76>
 801b99c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b9a0:	429e      	cmp	r6, r3
 801b9a2:	dc0d      	bgt.n	801b9c0 <atan+0x70>
 801b9a4:	a396      	add	r3, pc, #600	; (adr r3, 801bc00 <atan+0x2b0>)
 801b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9aa:	ee10 0a10 	vmov	r0, s0
 801b9ae:	4629      	mov	r1, r5
 801b9b0:	f7e4 fc6c 	bl	800028c <__adddf3>
 801b9b4:	4baf      	ldr	r3, [pc, #700]	; (801bc74 <atan+0x324>)
 801b9b6:	2200      	movs	r2, #0
 801b9b8:	f7e5 f8ae 	bl	8000b18 <__aeabi_dcmpgt>
 801b9bc:	2800      	cmp	r0, #0
 801b9be:	d1e6      	bne.n	801b98e <atan+0x3e>
 801b9c0:	f04f 3aff 	mov.w	sl, #4294967295
 801b9c4:	e02b      	b.n	801ba1e <atan+0xce>
 801b9c6:	f000 f963 	bl	801bc90 <fabs>
 801b9ca:	4bab      	ldr	r3, [pc, #684]	; (801bc78 <atan+0x328>)
 801b9cc:	429e      	cmp	r6, r3
 801b9ce:	ec55 4b10 	vmov	r4, r5, d0
 801b9d2:	f300 80bf 	bgt.w	801bb54 <atan+0x204>
 801b9d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b9da:	429e      	cmp	r6, r3
 801b9dc:	f300 80a0 	bgt.w	801bb20 <atan+0x1d0>
 801b9e0:	ee10 2a10 	vmov	r2, s0
 801b9e4:	ee10 0a10 	vmov	r0, s0
 801b9e8:	462b      	mov	r3, r5
 801b9ea:	4629      	mov	r1, r5
 801b9ec:	f7e4 fc4e 	bl	800028c <__adddf3>
 801b9f0:	4ba0      	ldr	r3, [pc, #640]	; (801bc74 <atan+0x324>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	f7e4 fc48 	bl	8000288 <__aeabi_dsub>
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	4606      	mov	r6, r0
 801b9fc:	460f      	mov	r7, r1
 801b9fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ba02:	4620      	mov	r0, r4
 801ba04:	4629      	mov	r1, r5
 801ba06:	f7e4 fc41 	bl	800028c <__adddf3>
 801ba0a:	4602      	mov	r2, r0
 801ba0c:	460b      	mov	r3, r1
 801ba0e:	4630      	mov	r0, r6
 801ba10:	4639      	mov	r1, r7
 801ba12:	f7e4 ff1b 	bl	800084c <__aeabi_ddiv>
 801ba16:	f04f 0a00 	mov.w	sl, #0
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	460d      	mov	r5, r1
 801ba1e:	4622      	mov	r2, r4
 801ba20:	462b      	mov	r3, r5
 801ba22:	4620      	mov	r0, r4
 801ba24:	4629      	mov	r1, r5
 801ba26:	f7e4 fde7 	bl	80005f8 <__aeabi_dmul>
 801ba2a:	4602      	mov	r2, r0
 801ba2c:	460b      	mov	r3, r1
 801ba2e:	4680      	mov	r8, r0
 801ba30:	4689      	mov	r9, r1
 801ba32:	f7e4 fde1 	bl	80005f8 <__aeabi_dmul>
 801ba36:	a374      	add	r3, pc, #464	; (adr r3, 801bc08 <atan+0x2b8>)
 801ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba3c:	4606      	mov	r6, r0
 801ba3e:	460f      	mov	r7, r1
 801ba40:	f7e4 fdda 	bl	80005f8 <__aeabi_dmul>
 801ba44:	a372      	add	r3, pc, #456	; (adr r3, 801bc10 <atan+0x2c0>)
 801ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba4a:	f7e4 fc1f 	bl	800028c <__adddf3>
 801ba4e:	4632      	mov	r2, r6
 801ba50:	463b      	mov	r3, r7
 801ba52:	f7e4 fdd1 	bl	80005f8 <__aeabi_dmul>
 801ba56:	a370      	add	r3, pc, #448	; (adr r3, 801bc18 <atan+0x2c8>)
 801ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba5c:	f7e4 fc16 	bl	800028c <__adddf3>
 801ba60:	4632      	mov	r2, r6
 801ba62:	463b      	mov	r3, r7
 801ba64:	f7e4 fdc8 	bl	80005f8 <__aeabi_dmul>
 801ba68:	a36d      	add	r3, pc, #436	; (adr r3, 801bc20 <atan+0x2d0>)
 801ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba6e:	f7e4 fc0d 	bl	800028c <__adddf3>
 801ba72:	4632      	mov	r2, r6
 801ba74:	463b      	mov	r3, r7
 801ba76:	f7e4 fdbf 	bl	80005f8 <__aeabi_dmul>
 801ba7a:	a36b      	add	r3, pc, #428	; (adr r3, 801bc28 <atan+0x2d8>)
 801ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba80:	f7e4 fc04 	bl	800028c <__adddf3>
 801ba84:	4632      	mov	r2, r6
 801ba86:	463b      	mov	r3, r7
 801ba88:	f7e4 fdb6 	bl	80005f8 <__aeabi_dmul>
 801ba8c:	a368      	add	r3, pc, #416	; (adr r3, 801bc30 <atan+0x2e0>)
 801ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba92:	f7e4 fbfb 	bl	800028c <__adddf3>
 801ba96:	4642      	mov	r2, r8
 801ba98:	464b      	mov	r3, r9
 801ba9a:	f7e4 fdad 	bl	80005f8 <__aeabi_dmul>
 801ba9e:	a366      	add	r3, pc, #408	; (adr r3, 801bc38 <atan+0x2e8>)
 801baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa4:	4680      	mov	r8, r0
 801baa6:	4689      	mov	r9, r1
 801baa8:	4630      	mov	r0, r6
 801baaa:	4639      	mov	r1, r7
 801baac:	f7e4 fda4 	bl	80005f8 <__aeabi_dmul>
 801bab0:	a363      	add	r3, pc, #396	; (adr r3, 801bc40 <atan+0x2f0>)
 801bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bab6:	f7e4 fbe7 	bl	8000288 <__aeabi_dsub>
 801baba:	4632      	mov	r2, r6
 801babc:	463b      	mov	r3, r7
 801babe:	f7e4 fd9b 	bl	80005f8 <__aeabi_dmul>
 801bac2:	a361      	add	r3, pc, #388	; (adr r3, 801bc48 <atan+0x2f8>)
 801bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bac8:	f7e4 fbde 	bl	8000288 <__aeabi_dsub>
 801bacc:	4632      	mov	r2, r6
 801bace:	463b      	mov	r3, r7
 801bad0:	f7e4 fd92 	bl	80005f8 <__aeabi_dmul>
 801bad4:	a35e      	add	r3, pc, #376	; (adr r3, 801bc50 <atan+0x300>)
 801bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bada:	f7e4 fbd5 	bl	8000288 <__aeabi_dsub>
 801bade:	4632      	mov	r2, r6
 801bae0:	463b      	mov	r3, r7
 801bae2:	f7e4 fd89 	bl	80005f8 <__aeabi_dmul>
 801bae6:	a35c      	add	r3, pc, #368	; (adr r3, 801bc58 <atan+0x308>)
 801bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baec:	f7e4 fbcc 	bl	8000288 <__aeabi_dsub>
 801baf0:	4632      	mov	r2, r6
 801baf2:	463b      	mov	r3, r7
 801baf4:	f7e4 fd80 	bl	80005f8 <__aeabi_dmul>
 801baf8:	4602      	mov	r2, r0
 801bafa:	460b      	mov	r3, r1
 801bafc:	4640      	mov	r0, r8
 801bafe:	4649      	mov	r1, r9
 801bb00:	f7e4 fbc4 	bl	800028c <__adddf3>
 801bb04:	4622      	mov	r2, r4
 801bb06:	462b      	mov	r3, r5
 801bb08:	f7e4 fd76 	bl	80005f8 <__aeabi_dmul>
 801bb0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bb10:	4602      	mov	r2, r0
 801bb12:	460b      	mov	r3, r1
 801bb14:	d14b      	bne.n	801bbae <atan+0x25e>
 801bb16:	4620      	mov	r0, r4
 801bb18:	4629      	mov	r1, r5
 801bb1a:	f7e4 fbb5 	bl	8000288 <__aeabi_dsub>
 801bb1e:	e72c      	b.n	801b97a <atan+0x2a>
 801bb20:	ee10 0a10 	vmov	r0, s0
 801bb24:	4b53      	ldr	r3, [pc, #332]	; (801bc74 <atan+0x324>)
 801bb26:	2200      	movs	r2, #0
 801bb28:	4629      	mov	r1, r5
 801bb2a:	f7e4 fbad 	bl	8000288 <__aeabi_dsub>
 801bb2e:	4b51      	ldr	r3, [pc, #324]	; (801bc74 <atan+0x324>)
 801bb30:	4606      	mov	r6, r0
 801bb32:	460f      	mov	r7, r1
 801bb34:	2200      	movs	r2, #0
 801bb36:	4620      	mov	r0, r4
 801bb38:	4629      	mov	r1, r5
 801bb3a:	f7e4 fba7 	bl	800028c <__adddf3>
 801bb3e:	4602      	mov	r2, r0
 801bb40:	460b      	mov	r3, r1
 801bb42:	4630      	mov	r0, r6
 801bb44:	4639      	mov	r1, r7
 801bb46:	f7e4 fe81 	bl	800084c <__aeabi_ddiv>
 801bb4a:	f04f 0a01 	mov.w	sl, #1
 801bb4e:	4604      	mov	r4, r0
 801bb50:	460d      	mov	r5, r1
 801bb52:	e764      	b.n	801ba1e <atan+0xce>
 801bb54:	4b49      	ldr	r3, [pc, #292]	; (801bc7c <atan+0x32c>)
 801bb56:	429e      	cmp	r6, r3
 801bb58:	da1d      	bge.n	801bb96 <atan+0x246>
 801bb5a:	ee10 0a10 	vmov	r0, s0
 801bb5e:	4b48      	ldr	r3, [pc, #288]	; (801bc80 <atan+0x330>)
 801bb60:	2200      	movs	r2, #0
 801bb62:	4629      	mov	r1, r5
 801bb64:	f7e4 fb90 	bl	8000288 <__aeabi_dsub>
 801bb68:	4b45      	ldr	r3, [pc, #276]	; (801bc80 <atan+0x330>)
 801bb6a:	4606      	mov	r6, r0
 801bb6c:	460f      	mov	r7, r1
 801bb6e:	2200      	movs	r2, #0
 801bb70:	4620      	mov	r0, r4
 801bb72:	4629      	mov	r1, r5
 801bb74:	f7e4 fd40 	bl	80005f8 <__aeabi_dmul>
 801bb78:	4b3e      	ldr	r3, [pc, #248]	; (801bc74 <atan+0x324>)
 801bb7a:	2200      	movs	r2, #0
 801bb7c:	f7e4 fb86 	bl	800028c <__adddf3>
 801bb80:	4602      	mov	r2, r0
 801bb82:	460b      	mov	r3, r1
 801bb84:	4630      	mov	r0, r6
 801bb86:	4639      	mov	r1, r7
 801bb88:	f7e4 fe60 	bl	800084c <__aeabi_ddiv>
 801bb8c:	f04f 0a02 	mov.w	sl, #2
 801bb90:	4604      	mov	r4, r0
 801bb92:	460d      	mov	r5, r1
 801bb94:	e743      	b.n	801ba1e <atan+0xce>
 801bb96:	462b      	mov	r3, r5
 801bb98:	ee10 2a10 	vmov	r2, s0
 801bb9c:	4939      	ldr	r1, [pc, #228]	; (801bc84 <atan+0x334>)
 801bb9e:	2000      	movs	r0, #0
 801bba0:	f7e4 fe54 	bl	800084c <__aeabi_ddiv>
 801bba4:	f04f 0a03 	mov.w	sl, #3
 801bba8:	4604      	mov	r4, r0
 801bbaa:	460d      	mov	r5, r1
 801bbac:	e737      	b.n	801ba1e <atan+0xce>
 801bbae:	4b36      	ldr	r3, [pc, #216]	; (801bc88 <atan+0x338>)
 801bbb0:	4e36      	ldr	r6, [pc, #216]	; (801bc8c <atan+0x33c>)
 801bbb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801bbb6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801bbba:	e9da 2300 	ldrd	r2, r3, [sl]
 801bbbe:	f7e4 fb63 	bl	8000288 <__aeabi_dsub>
 801bbc2:	4622      	mov	r2, r4
 801bbc4:	462b      	mov	r3, r5
 801bbc6:	f7e4 fb5f 	bl	8000288 <__aeabi_dsub>
 801bbca:	4602      	mov	r2, r0
 801bbcc:	460b      	mov	r3, r1
 801bbce:	e9d6 0100 	ldrd	r0, r1, [r6]
 801bbd2:	f7e4 fb59 	bl	8000288 <__aeabi_dsub>
 801bbd6:	f1bb 0f00 	cmp.w	fp, #0
 801bbda:	4604      	mov	r4, r0
 801bbdc:	460d      	mov	r5, r1
 801bbde:	f6bf aed6 	bge.w	801b98e <atan+0x3e>
 801bbe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bbe6:	461d      	mov	r5, r3
 801bbe8:	e6d1      	b.n	801b98e <atan+0x3e>
 801bbea:	a51d      	add	r5, pc, #116	; (adr r5, 801bc60 <atan+0x310>)
 801bbec:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bbf0:	e6cd      	b.n	801b98e <atan+0x3e>
 801bbf2:	bf00      	nop
 801bbf4:	f3af 8000 	nop.w
 801bbf8:	54442d18 	.word	0x54442d18
 801bbfc:	bff921fb 	.word	0xbff921fb
 801bc00:	8800759c 	.word	0x8800759c
 801bc04:	7e37e43c 	.word	0x7e37e43c
 801bc08:	e322da11 	.word	0xe322da11
 801bc0c:	3f90ad3a 	.word	0x3f90ad3a
 801bc10:	24760deb 	.word	0x24760deb
 801bc14:	3fa97b4b 	.word	0x3fa97b4b
 801bc18:	a0d03d51 	.word	0xa0d03d51
 801bc1c:	3fb10d66 	.word	0x3fb10d66
 801bc20:	c54c206e 	.word	0xc54c206e
 801bc24:	3fb745cd 	.word	0x3fb745cd
 801bc28:	920083ff 	.word	0x920083ff
 801bc2c:	3fc24924 	.word	0x3fc24924
 801bc30:	5555550d 	.word	0x5555550d
 801bc34:	3fd55555 	.word	0x3fd55555
 801bc38:	2c6a6c2f 	.word	0x2c6a6c2f
 801bc3c:	bfa2b444 	.word	0xbfa2b444
 801bc40:	52defd9a 	.word	0x52defd9a
 801bc44:	3fadde2d 	.word	0x3fadde2d
 801bc48:	af749a6d 	.word	0xaf749a6d
 801bc4c:	3fb3b0f2 	.word	0x3fb3b0f2
 801bc50:	fe231671 	.word	0xfe231671
 801bc54:	3fbc71c6 	.word	0x3fbc71c6
 801bc58:	9998ebc4 	.word	0x9998ebc4
 801bc5c:	3fc99999 	.word	0x3fc99999
 801bc60:	54442d18 	.word	0x54442d18
 801bc64:	3ff921fb 	.word	0x3ff921fb
 801bc68:	440fffff 	.word	0x440fffff
 801bc6c:	7ff00000 	.word	0x7ff00000
 801bc70:	3fdbffff 	.word	0x3fdbffff
 801bc74:	3ff00000 	.word	0x3ff00000
 801bc78:	3ff2ffff 	.word	0x3ff2ffff
 801bc7c:	40038000 	.word	0x40038000
 801bc80:	3ff80000 	.word	0x3ff80000
 801bc84:	bff00000 	.word	0xbff00000
 801bc88:	0801c898 	.word	0x0801c898
 801bc8c:	0801c878 	.word	0x0801c878

0801bc90 <fabs>:
 801bc90:	ec51 0b10 	vmov	r0, r1, d0
 801bc94:	ee10 2a10 	vmov	r2, s0
 801bc98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bc9c:	ec43 2b10 	vmov	d0, r2, r3
 801bca0:	4770      	bx	lr
 801bca2:	0000      	movs	r0, r0
 801bca4:	0000      	movs	r0, r0
	...

0801bca8 <floor>:
 801bca8:	ec51 0b10 	vmov	r0, r1, d0
 801bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bcb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801bcb8:	2e13      	cmp	r6, #19
 801bcba:	ee10 5a10 	vmov	r5, s0
 801bcbe:	ee10 8a10 	vmov	r8, s0
 801bcc2:	460c      	mov	r4, r1
 801bcc4:	dc32      	bgt.n	801bd2c <floor+0x84>
 801bcc6:	2e00      	cmp	r6, #0
 801bcc8:	da14      	bge.n	801bcf4 <floor+0x4c>
 801bcca:	a333      	add	r3, pc, #204	; (adr r3, 801bd98 <floor+0xf0>)
 801bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd0:	f7e4 fadc 	bl	800028c <__adddf3>
 801bcd4:	2200      	movs	r2, #0
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	f7e4 ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 801bcdc:	b138      	cbz	r0, 801bcee <floor+0x46>
 801bcde:	2c00      	cmp	r4, #0
 801bce0:	da57      	bge.n	801bd92 <floor+0xea>
 801bce2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801bce6:	431d      	orrs	r5, r3
 801bce8:	d001      	beq.n	801bcee <floor+0x46>
 801bcea:	4c2d      	ldr	r4, [pc, #180]	; (801bda0 <floor+0xf8>)
 801bcec:	2500      	movs	r5, #0
 801bcee:	4621      	mov	r1, r4
 801bcf0:	4628      	mov	r0, r5
 801bcf2:	e025      	b.n	801bd40 <floor+0x98>
 801bcf4:	4f2b      	ldr	r7, [pc, #172]	; (801bda4 <floor+0xfc>)
 801bcf6:	4137      	asrs	r7, r6
 801bcf8:	ea01 0307 	and.w	r3, r1, r7
 801bcfc:	4303      	orrs	r3, r0
 801bcfe:	d01f      	beq.n	801bd40 <floor+0x98>
 801bd00:	a325      	add	r3, pc, #148	; (adr r3, 801bd98 <floor+0xf0>)
 801bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd06:	f7e4 fac1 	bl	800028c <__adddf3>
 801bd0a:	2200      	movs	r2, #0
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	f7e4 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 801bd12:	2800      	cmp	r0, #0
 801bd14:	d0eb      	beq.n	801bcee <floor+0x46>
 801bd16:	2c00      	cmp	r4, #0
 801bd18:	bfbe      	ittt	lt
 801bd1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801bd1e:	fa43 f606 	asrlt.w	r6, r3, r6
 801bd22:	19a4      	addlt	r4, r4, r6
 801bd24:	ea24 0407 	bic.w	r4, r4, r7
 801bd28:	2500      	movs	r5, #0
 801bd2a:	e7e0      	b.n	801bcee <floor+0x46>
 801bd2c:	2e33      	cmp	r6, #51	; 0x33
 801bd2e:	dd0b      	ble.n	801bd48 <floor+0xa0>
 801bd30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bd34:	d104      	bne.n	801bd40 <floor+0x98>
 801bd36:	ee10 2a10 	vmov	r2, s0
 801bd3a:	460b      	mov	r3, r1
 801bd3c:	f7e4 faa6 	bl	800028c <__adddf3>
 801bd40:	ec41 0b10 	vmov	d0, r0, r1
 801bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801bd4c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd50:	fa23 f707 	lsr.w	r7, r3, r7
 801bd54:	4207      	tst	r7, r0
 801bd56:	d0f3      	beq.n	801bd40 <floor+0x98>
 801bd58:	a30f      	add	r3, pc, #60	; (adr r3, 801bd98 <floor+0xf0>)
 801bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd5e:	f7e4 fa95 	bl	800028c <__adddf3>
 801bd62:	2200      	movs	r2, #0
 801bd64:	2300      	movs	r3, #0
 801bd66:	f7e4 fed7 	bl	8000b18 <__aeabi_dcmpgt>
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	d0bf      	beq.n	801bcee <floor+0x46>
 801bd6e:	2c00      	cmp	r4, #0
 801bd70:	da02      	bge.n	801bd78 <floor+0xd0>
 801bd72:	2e14      	cmp	r6, #20
 801bd74:	d103      	bne.n	801bd7e <floor+0xd6>
 801bd76:	3401      	adds	r4, #1
 801bd78:	ea25 0507 	bic.w	r5, r5, r7
 801bd7c:	e7b7      	b.n	801bcee <floor+0x46>
 801bd7e:	2301      	movs	r3, #1
 801bd80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801bd84:	fa03 f606 	lsl.w	r6, r3, r6
 801bd88:	4435      	add	r5, r6
 801bd8a:	4545      	cmp	r5, r8
 801bd8c:	bf38      	it	cc
 801bd8e:	18e4      	addcc	r4, r4, r3
 801bd90:	e7f2      	b.n	801bd78 <floor+0xd0>
 801bd92:	2500      	movs	r5, #0
 801bd94:	462c      	mov	r4, r5
 801bd96:	e7aa      	b.n	801bcee <floor+0x46>
 801bd98:	8800759c 	.word	0x8800759c
 801bd9c:	7e37e43c 	.word	0x7e37e43c
 801bda0:	bff00000 	.word	0xbff00000
 801bda4:	000fffff 	.word	0x000fffff

0801bda8 <scalbn>:
 801bda8:	b570      	push	{r4, r5, r6, lr}
 801bdaa:	ec55 4b10 	vmov	r4, r5, d0
 801bdae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801bdb2:	4606      	mov	r6, r0
 801bdb4:	462b      	mov	r3, r5
 801bdb6:	b99a      	cbnz	r2, 801bde0 <scalbn+0x38>
 801bdb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bdbc:	4323      	orrs	r3, r4
 801bdbe:	d036      	beq.n	801be2e <scalbn+0x86>
 801bdc0:	4b39      	ldr	r3, [pc, #228]	; (801bea8 <scalbn+0x100>)
 801bdc2:	4629      	mov	r1, r5
 801bdc4:	ee10 0a10 	vmov	r0, s0
 801bdc8:	2200      	movs	r2, #0
 801bdca:	f7e4 fc15 	bl	80005f8 <__aeabi_dmul>
 801bdce:	4b37      	ldr	r3, [pc, #220]	; (801beac <scalbn+0x104>)
 801bdd0:	429e      	cmp	r6, r3
 801bdd2:	4604      	mov	r4, r0
 801bdd4:	460d      	mov	r5, r1
 801bdd6:	da10      	bge.n	801bdfa <scalbn+0x52>
 801bdd8:	a32b      	add	r3, pc, #172	; (adr r3, 801be88 <scalbn+0xe0>)
 801bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdde:	e03a      	b.n	801be56 <scalbn+0xae>
 801bde0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801bde4:	428a      	cmp	r2, r1
 801bde6:	d10c      	bne.n	801be02 <scalbn+0x5a>
 801bde8:	ee10 2a10 	vmov	r2, s0
 801bdec:	4620      	mov	r0, r4
 801bdee:	4629      	mov	r1, r5
 801bdf0:	f7e4 fa4c 	bl	800028c <__adddf3>
 801bdf4:	4604      	mov	r4, r0
 801bdf6:	460d      	mov	r5, r1
 801bdf8:	e019      	b.n	801be2e <scalbn+0x86>
 801bdfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801bdfe:	460b      	mov	r3, r1
 801be00:	3a36      	subs	r2, #54	; 0x36
 801be02:	4432      	add	r2, r6
 801be04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801be08:	428a      	cmp	r2, r1
 801be0a:	dd08      	ble.n	801be1e <scalbn+0x76>
 801be0c:	2d00      	cmp	r5, #0
 801be0e:	a120      	add	r1, pc, #128	; (adr r1, 801be90 <scalbn+0xe8>)
 801be10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be14:	da1c      	bge.n	801be50 <scalbn+0xa8>
 801be16:	a120      	add	r1, pc, #128	; (adr r1, 801be98 <scalbn+0xf0>)
 801be18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be1c:	e018      	b.n	801be50 <scalbn+0xa8>
 801be1e:	2a00      	cmp	r2, #0
 801be20:	dd08      	ble.n	801be34 <scalbn+0x8c>
 801be22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801be26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801be2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801be2e:	ec45 4b10 	vmov	d0, r4, r5
 801be32:	bd70      	pop	{r4, r5, r6, pc}
 801be34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801be38:	da19      	bge.n	801be6e <scalbn+0xc6>
 801be3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801be3e:	429e      	cmp	r6, r3
 801be40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801be44:	dd0a      	ble.n	801be5c <scalbn+0xb4>
 801be46:	a112      	add	r1, pc, #72	; (adr r1, 801be90 <scalbn+0xe8>)
 801be48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d1e2      	bne.n	801be16 <scalbn+0x6e>
 801be50:	a30f      	add	r3, pc, #60	; (adr r3, 801be90 <scalbn+0xe8>)
 801be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be56:	f7e4 fbcf 	bl	80005f8 <__aeabi_dmul>
 801be5a:	e7cb      	b.n	801bdf4 <scalbn+0x4c>
 801be5c:	a10a      	add	r1, pc, #40	; (adr r1, 801be88 <scalbn+0xe0>)
 801be5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be62:	2b00      	cmp	r3, #0
 801be64:	d0b8      	beq.n	801bdd8 <scalbn+0x30>
 801be66:	a10e      	add	r1, pc, #56	; (adr r1, 801bea0 <scalbn+0xf8>)
 801be68:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be6c:	e7b4      	b.n	801bdd8 <scalbn+0x30>
 801be6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801be72:	3236      	adds	r2, #54	; 0x36
 801be74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801be78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801be7c:	4620      	mov	r0, r4
 801be7e:	4b0c      	ldr	r3, [pc, #48]	; (801beb0 <scalbn+0x108>)
 801be80:	2200      	movs	r2, #0
 801be82:	e7e8      	b.n	801be56 <scalbn+0xae>
 801be84:	f3af 8000 	nop.w
 801be88:	c2f8f359 	.word	0xc2f8f359
 801be8c:	01a56e1f 	.word	0x01a56e1f
 801be90:	8800759c 	.word	0x8800759c
 801be94:	7e37e43c 	.word	0x7e37e43c
 801be98:	8800759c 	.word	0x8800759c
 801be9c:	fe37e43c 	.word	0xfe37e43c
 801bea0:	c2f8f359 	.word	0xc2f8f359
 801bea4:	81a56e1f 	.word	0x81a56e1f
 801bea8:	43500000 	.word	0x43500000
 801beac:	ffff3cb0 	.word	0xffff3cb0
 801beb0:	3c900000 	.word	0x3c900000

0801beb4 <_init>:
 801beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beb6:	bf00      	nop
 801beb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801beba:	bc08      	pop	{r3}
 801bebc:	469e      	mov	lr, r3
 801bebe:	4770      	bx	lr

0801bec0 <_fini>:
 801bec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bec2:	bf00      	nop
 801bec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bec6:	bc08      	pop	{r3}
 801bec8:	469e      	mov	lr, r3
 801beca:	4770      	bx	lr
