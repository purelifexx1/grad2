
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c29c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  0801c430  0801c430  0002c430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ce10  0801ce10  000343e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801ce10  0801ce10  0002ce10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ce18  0801ce18  000343e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ce18  0801ce18  0002ce18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ce1c  0801ce1c  0002ce1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000043e8  20000000  0801ce20  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7ac  200043e8  08021208  000343e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  20011b94  08021208  00041b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035ec2  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007162  00000000  00000000  0006a2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  00071440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c80  00000000  00000000  000732d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af0b  00000000  00000000  00074f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002939e  00000000  00000000  0009fe5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2f3  00000000  00000000  000c91f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a84ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096c0  00000000  00000000  001a8540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043e8 	.word	0x200043e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c414 	.word	0x0801c414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043ec 	.word	0x200043ec
 80001cc:	0801c414 	.word	0x0801c414

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
uint8_t step_status;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8001016:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8212 	beq.w	8001448 <packetRead+0x458>
 8001024:	f001 b843 	b.w	80020ae <packetRead+0x10be>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
        	uint16_t timeout_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	857b      	strh	r3, [r7, #42]	; 0x2a
        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 800103e:	7cbb      	ldrb	r3, [r7, #18]
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 81f0 	bhi.w	8001426 <packetRead+0x436>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <packetRead+0x5c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	0800117d 	.word	0x0800117d
 8001054:	08001427 	.word	0x08001427
 8001058:	080012c9 	.word	0x080012c9
 800105c:	080012c9 	.word	0x080012c9
 8001060:	080010ff 	.word	0x080010ff
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <packetRead+0x2b0>)
 800107e:	701a      	strb	r2, [r3, #0]
//					if(Gcode_Mode == GCODE_LINEAR){
//						bezier_wc = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
//					}
					down_z_height = (double)B2I(temp_pointer)*DATA_INVERSE_SCALE; temp_pointer+=4;
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	a382      	add	r3, pc, #520	; (adr r3, 8001298 <packetRead+0x2a8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab0 	bl	80005f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4981      	ldr	r1, [pc, #516]	; (80012a4 <packetRead+0x2b4>)
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	3304      	adds	r3, #4
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*DATA_INVERSE_SCALE; temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	a378      	add	r3, pc, #480	; (adr r3, 8001298 <packetRead+0x2a8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4978      	ldr	r1, [pc, #480]	; (80012a8 <packetRead+0x2b8>)
 80010c6:	e9c1 2300 	strd	r2, r3, [r1]
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	3304      	adds	r3, #4
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a74      	ldr	r2, [pc, #464]	; (80012ac <packetRead+0x2bc>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	3304      	adds	r3, #4
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <packetRead+0x2c0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <packetRead+0x2c4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <packetRead+0x2c8>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <packetRead+0x2cc>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010fc:	e193      	b.n	8001426 <packetRead+0x436>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	3301      	adds	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <packetRead+0x2c4>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	496b      	ldr	r1, [pc, #428]	; (80012c0 <packetRead+0x2d0>)
 8001114:	4603      	mov	r3, r0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4403      	add	r3, r0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001122:	3304      	adds	r3, #4
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <packetRead+0x2c4>)
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	4610      	mov	r0, r2
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4962      	ldr	r1, [pc, #392]	; (80012c0 <packetRead+0x2d0>)
 8001136:	4603      	mov	r3, r0
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4403      	add	r3, r0
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	3304      	adds	r3, #4
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <packetRead+0x2c4>)
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	4610      	mov	r0, r2
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4959      	ldr	r1, [pc, #356]	; (80012c0 <packetRead+0x2d0>)
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	3304      	adds	r3, #4
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
					current_clutch_index++;
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <packetRead+0x2c4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <packetRead+0x2c4>)
 8001178:	801a      	strh	r2, [r3, #0]
				}
				break;
 800117a:	e154      	b.n	8001426 <packetRead+0x436>
//				case BEZIER_TYPE:
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <packetRead+0x2c0>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <packetRead+0x2d4>)
 8001184:	460b      	mov	r3, r1
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a5b      	subs	r3, r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	331a      	adds	r3, #26
 8001190:	7cba      	ldrb	r2, [r7, #18]
 8001192:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4a42      	ldr	r2, [pc, #264]	; (80012b0 <packetRead+0x2c0>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <packetRead+0x2d4>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	331b      	adds	r3, #27
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
//					if(move_type == BEZIER_TYPE){
//						Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
//					}
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <packetRead+0x2c0>)
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	4610      	mov	r0, r2
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	493c      	ldr	r1, [pc, #240]	; (80012c4 <packetRead+0x2d4>)
 80011d4:	4603      	mov	r3, r0
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a1b      	subs	r3, r3, r0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	3304      	adds	r3, #4
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <packetRead+0x2c0>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4933      	ldr	r1, [pc, #204]	; (80012c4 <packetRead+0x2d4>)
 80011f6:	4603      	mov	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	3304      	adds	r3, #4
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <packetRead+0x2b0>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <packetRead+0x248>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <packetRead+0x2c0>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4928      	ldr	r1, [pc, #160]	; (80012c4 <packetRead+0x2d4>)
 8001222:	4603      	mov	r3, r0
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a1b      	subs	r3, r3, r0
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3308      	adds	r3, #8
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001232:	3304      	adds	r3, #4
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001236:	e025      	b.n	8001284 <packetRead+0x294>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <packetRead+0x2b0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d121      	bne.n	8001284 <packetRead+0x294>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <packetRead+0x2c4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <packetRead+0x2c0>)
 8001246:	8812      	ldrh	r2, [r2, #0]
 8001248:	4611      	mov	r1, r2
 800124a:	3b01      	subs	r3, #1
 800124c:	b298      	uxth	r0, r3
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <packetRead+0x2d4>)
 8001250:	460b      	mov	r3, r1
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3318      	adds	r3, #24
 800125c:	4602      	mov	r2, r0
 800125e:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <packetRead+0x2c0>)
 8001268:	8812      	ldrh	r2, [r2, #0]
 800126a:	4610      	mov	r0, r2
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4915      	ldr	r1, [pc, #84]	; (80012c4 <packetRead+0x2d4>)
 8001270:	4603      	mov	r3, r0
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a1b      	subs	r3, r3, r0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3314      	adds	r3, #20
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3304      	adds	r3, #4
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					point_counter++;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <packetRead+0x2c0>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <packetRead+0x2c0>)
 800128e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001290:	e0c9      	b.n	8001426 <packetRead+0x436>
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	a0000000 	.word	0xa0000000
 800129c:	3eb0c6f7 	.word	0x3eb0c6f7
 80012a0:	200085d0 	.word	0x200085d0
 80012a4:	20008f40 	.word	0x20008f40
 80012a8:	200085c8 	.word	0x200085c8
 80012ac:	20008fb0 	.word	0x20008fb0
 80012b0:	20004406 	.word	0x20004406
 80012b4:	20004408 	.word	0x20004408
 80012b8:	2000fd3a 	.word	0x2000fd3a
 80012bc:	20008f88 	.word	0x20008f88
 80012c0:	200085e0 	.word	0x200085e0
 80012c4:	20008fc8 	.word	0x20008fc8
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <packetRead+0x50c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4a8c      	ldr	r2, [pc, #560]	; (8001500 <packetRead+0x510>)
 80012d0:	460b      	mov	r3, r1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	331a      	adds	r3, #26
 80012dc:	7cba      	ldrb	r2, [r7, #18]
 80012de:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4a82      	ldr	r2, [pc, #520]	; (80014fc <packetRead+0x50c>)
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	b2d8      	uxtb	r0, r3
 80012fe:	4a80      	ldr	r2, [pc, #512]	; (8001500 <packetRead+0x510>)
 8001300:	460b      	mov	r3, r1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a5b      	subs	r3, r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	331b      	adds	r3, #27
 800130c:	4602      	mov	r2, r0
 800130e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	4a79      	ldr	r2, [pc, #484]	; (80014fc <packetRead+0x50c>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4610      	mov	r0, r2
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4978      	ldr	r1, [pc, #480]	; (8001500 <packetRead+0x510>)
 8001320:	4603      	mov	r3, r0
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a1b      	subs	r3, r3, r0
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	3304      	adds	r3, #4
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	4a70      	ldr	r2, [pc, #448]	; (80014fc <packetRead+0x50c>)
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	4610      	mov	r0, r2
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	496f      	ldr	r1, [pc, #444]	; (8001500 <packetRead+0x510>)
 8001342:	4603      	mov	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3304      	adds	r3, #4
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	3304      	adds	r3, #4
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <packetRead+0x514>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <packetRead+0x394>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <packetRead+0x50c>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4964      	ldr	r1, [pc, #400]	; (8001500 <packetRead+0x510>)
 800136e:	4603      	mov	r3, r0
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a1b      	subs	r3, r3, r0
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3308      	adds	r3, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	3304      	adds	r3, #4
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001382:	e025      	b.n	80013d0 <packetRead+0x3e0>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <packetRead+0x514>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b09      	cmp	r3, #9
 800138a:	d121      	bne.n	80013d0 <packetRead+0x3e0>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <packetRead+0x518>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <packetRead+0x50c>)
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	4611      	mov	r1, r2
 8001396:	3b01      	subs	r3, #1
 8001398:	b298      	uxth	r0, r3
 800139a:	4a59      	ldr	r2, [pc, #356]	; (8001500 <packetRead+0x510>)
 800139c:	460b      	mov	r3, r1
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a5b      	subs	r3, r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3318      	adds	r3, #24
 80013a8:	4602      	mov	r2, r0
 80013aa:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a52      	ldr	r2, [pc, #328]	; (80014fc <packetRead+0x50c>)
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	4610      	mov	r0, r2
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4951      	ldr	r1, [pc, #324]	; (8001500 <packetRead+0x510>)
 80013bc:	4603      	mov	r3, r0
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a1b      	subs	r3, r3, r0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3314      	adds	r3, #20
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	3304      	adds	r3, #4
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <packetRead+0x50c>)
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	4610      	mov	r0, r2
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4948      	ldr	r1, [pc, #288]	; (8001500 <packetRead+0x510>)
 80013e0:	4603      	mov	r3, r0
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a1b      	subs	r3, r3, r0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	330c      	adds	r3, #12
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	3304      	adds	r3, #4
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <packetRead+0x50c>)
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	4610      	mov	r0, r2
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	493f      	ldr	r1, [pc, #252]	; (8001500 <packetRead+0x510>)
 8001404:	4603      	mov	r3, r0
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a1b      	subs	r3, r3, r0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3310      	adds	r3, #16
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	3304      	adds	r3, #4
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <packetRead+0x50c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <packetRead+0x50c>)
 8001422:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001424:	bf00      	nop
				}
				if(timeout_value++ == 0xffff) break;
 8001426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	857a      	strh	r2, [r7, #42]	; 0x2a
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	4293      	cmp	r3, r2
 8001432:	d005      	beq.n	8001440 <packetRead+0x450>
        	}while(temp_pointer < length);
 8001434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	f6ff adf9 	blt.w	8001030 <packetRead+0x40>
 800143e:	e000      	b.n	8001442 <packetRead+0x452>
				if(timeout_value++ == 0xffff) break;
 8001440:	bf00      	nop
        	return CMD_GCODE;
 8001442:	231b      	movs	r3, #27
 8001444:	f000 be34 	b.w	80020b0 <packetRead+0x10c0>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            switch(command_id)
 8001450:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001454:	2b1a      	cmp	r3, #26
 8001456:	f200 8628 	bhi.w	80020aa <packetRead+0x10ba>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <packetRead+0x470>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014cd 	.word	0x080014cd
 8001464:	080014e5 	.word	0x080014e5
 8001468:	08001511 	.word	0x08001511
 800146c:	080015d9 	.word	0x080015d9
 8001470:	0800182d 	.word	0x0800182d
 8001474:	080015d9 	.word	0x080015d9
 8001478:	08001a9d 	.word	0x08001a9d
 800147c:	08001aa1 	.word	0x08001aa1
 8001480:	080020ab 	.word	0x080020ab
 8001484:	08001ac1 	.word	0x08001ac1
 8001488:	08001adf 	.word	0x08001adf
 800148c:	08001b41 	.word	0x08001b41
 8001490:	08001c0f 	.word	0x08001c0f
 8001494:	08002059 	.word	0x08002059
 8001498:	08001fdd 	.word	0x08001fdd
 800149c:	08001fed 	.word	0x08001fed
 80014a0:	080020ab 	.word	0x080020ab
 80014a4:	080020ab 	.word	0x080020ab
 80014a8:	08001f19 	.word	0x08001f19
 80014ac:	08001ffd 	.word	0x08001ffd
 80014b0:	08001fcd 	.word	0x08001fcd
 80014b4:	08001bad 	.word	0x08001bad
 80014b8:	08001bd7 	.word	0x08001bd7
 80014bc:	080020ab 	.word	0x080020ab
 80014c0:	080020ab 	.word	0x080020ab
 80014c4:	08001c49 	.word	0x08001c49
 80014c8:	08001d39 	.word	0x08001d39
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f000 bde6 	b.w	80020b0 <packetRead+0x10c0>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 bdda 	b.w	80020b0 <packetRead+0x10c0>
 80014fc:	20004406 	.word	0x20004406
 8001500:	20008fc8 	.word	0x20008fc8
 8001504:	200085d0 	.word	0x200085d0
 8001508:	20004408 	.word	0x20004408
 800150c:	358637bd 	.word	0x358637bd
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d15d      	bne.n	80015d2 <packetRead+0x5e2>
						temp_pointer = -2;
 8001516:	f06f 0301 	mvn.w	r3, #1
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	3304      	adds	r3, #4
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800150c <packetRead+0x51c>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*DATA_INVERSE_SCALE;
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800150c <packetRead+0x51c>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7fe ffee 	bl	8000548 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <packetRead+0x830>)
 800157e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <packetRead+0x834>)
 800158a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <packetRead+0x838>)
 8001596:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f000 bd6f 	b.w	80020b0 <packetRead+0x10c0>
                        return CMD_ERROR;
 80015d2:	2317      	movs	r3, #23
 80015d4:	f000 bd6c 	b.w	80020b0 <packetRead+0x10c0>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b1d      	cmp	r3, #29
 80015dc:	f040 8109 	bne.w	80017f2 <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80015e0:	f06f 0301 	mvn.w	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	3304      	adds	r3, #4
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff95 	bl	8000524 <__aeabi_i2d>
 80015fa:	a387      	add	r3, pc, #540	; (adr r3, 8001818 <packetRead+0x828>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fffa 	bl	80005f8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	3304      	adds	r3, #4
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_i2d>
 8001622:	a37d      	add	r3, pc, #500	; (adr r3, 8001818 <packetRead+0x828>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffe6 	bl	80005f8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	3304      	adds	r3, #4
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff6d 	bl	8000524 <__aeabi_i2d>
 800164a:	a373      	add	r3, pc, #460	; (adr r3, 8001818 <packetRead+0x828>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffd2 	bl	80005f8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	3304      	adds	r3, #4
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff59 	bl	8000524 <__aeabi_i2d>
 8001672:	a369      	add	r3, pc, #420	; (adr r3, 8001818 <packetRead+0x828>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001688:	3304      	adds	r3, #4
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	a35f      	add	r3, pc, #380	; (adr r3, 8001818 <packetRead+0x828>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ffaa 	bl	80005f8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	3304      	adds	r3, #4
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d117      	bne.n	80016f4 <packetRead+0x704>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	3301      	adds	r3, #1
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	a34e      	add	r3, pc, #312	; (adr r3, 8001818 <packetRead+0x828>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff88 	bl	80005f8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80016f2:	e053      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80016f4:	7cfb      	ldrb	r3, [r7, #19]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d117      	bne.n	800172a <packetRead+0x73a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	3301      	adds	r3, #1
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	a340      	add	r3, pc, #256	; (adr r3, 8001818 <packetRead+0x828>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001728:	e038      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800172a:	7cfb      	ldrb	r3, [r7, #19]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d117      	bne.n	8001760 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2203      	movs	r2, #3
 8001734:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	3301      	adds	r3, #1
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	a333      	add	r3, pc, #204	; (adr r3, 8001818 <packetRead+0x828>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800175e:	e01d      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001760:	7cfb      	ldrb	r3, [r7, #19]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d117      	bne.n	8001796 <packetRead+0x7a6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	3301      	adds	r3, #1
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	a325      	add	r3, pc, #148	; (adr r3, 8001818 <packetRead+0x828>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001794:	e002      	b.n	800179c <packetRead+0x7ac>
						}else{
							return CMD_ERROR;
 8001796:	2317      	movs	r3, #23
 8001798:	f000 bc8a 	b.w	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	3304      	adds	r3, #4
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	3301      	adds	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80017c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d106      	bne.n	80017d6 <packetRead+0x7e6>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	735a      	strb	r2, [r3, #13]
 80017d4:	e010      	b.n	80017f8 <packetRead+0x808>
						}else if(command_id == CMD_MOVE_JOINT){
 80017d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d106      	bne.n	80017ec <packetRead+0x7fc>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	735a      	strb	r2, [r3, #13]
 80017ea:	e005      	b.n	80017f8 <packetRead+0x808>
						}else{
							return CMD_ERROR;
 80017ec:	2317      	movs	r3, #23
 80017ee:	f000 bc5f 	b.w	80020b0 <packetRead+0x10c0>
						}

					}else{
						return CMD_ERROR;
 80017f2:	2317      	movs	r3, #23
 80017f4:	f000 bc5c 	b.w	80020b0 <packetRead+0x10c0>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
					return command_id;
 800180a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800180e:	f000 bc4f 	b.w	80020b0 <packetRead+0x10c0>
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	a0000000 	.word	0xa0000000
 800181c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001820:	406f4000 	.word	0x406f4000
 8001824:	c0690000 	.word	0xc0690000
 8001828:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b22      	cmp	r3, #34	; 0x22
 8001830:	f040 8132 	bne.w	8001a98 <packetRead+0xaa8>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3304      	adds	r3, #4
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe6b 	bl	8000524 <__aeabi_i2d>
 800184e:	f20f 43c8 	addw	r3, pc, #1224	; 0x4c8
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fecf 	bl	80005f8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	3304      	adds	r3, #4
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe56 	bl	8000524 <__aeabi_i2d>
 8001878:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe feba 	bl	80005f8 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	6839      	ldr	r1, [r7, #0]
 800188a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	3304      	adds	r3, #4
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe41 	bl	8000524 <__aeabi_i2d>
 80018a2:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fea5 	bl	80005f8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3304      	adds	r3, #4
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe2c 	bl	8000524 <__aeabi_i2d>
 80018cc:	f20f 4348 	addw	r3, pc, #1096	; 0x448
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fe90 	bl	80005f8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	3304      	adds	r3, #4
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe17 	bl	8000524 <__aeabi_i2d>
 80018f6:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190e:	3304      	adds	r3, #4
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe02 	bl	8000524 <__aeabi_i2d>
 8001920:	a3fd      	add	r3, pc, #1012	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fe67 	bl	80005f8 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	3304      	adds	r3, #4
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 8001944:	7d7b      	ldrb	r3, [r7, #21]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d103      	bne.n	8001952 <packetRead+0x962>
                			duty_cmd->arc_dir = 1;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	e009      	b.n	8001966 <packetRead+0x976>
                		}else if(arc_type == ARC_CW_TYPE){
 8001952:	7d7b      	ldrb	r3, [r7, #21]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d104      	bne.n	8001962 <packetRead+0x972>
                			duty_cmd->arc_dir = -1;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	e001      	b.n	8001966 <packetRead+0x976>
                		}else{
                			return CMD_ERROR;
 8001962:	2317      	movs	r3, #23
 8001964:	e3a4      	b.n	80020b0 <packetRead+0x10c0>
                		}
                		mode_init = message[temp_pointer+=1];
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	3301      	adds	r3, #1
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4413      	add	r3, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001976:	7d3b      	ldrb	r3, [r7, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d117      	bne.n	80019ac <packetRead+0x9bc>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	3301      	adds	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4413      	add	r3, r2
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdc7 	bl	8000524 <__aeabi_i2d>
 8001996:	a3e0      	add	r3, pc, #896	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe fe2c 	bl	80005f8 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80019aa:	e052      	b.n	8001a52 <packetRead+0xa62>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80019ac:	7d3b      	ldrb	r3, [r7, #20]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d117      	bne.n	80019e2 <packetRead+0x9f2>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	3301      	adds	r3, #1
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdac 	bl	8000524 <__aeabi_i2d>
 80019cc:	a3d2      	add	r3, pc, #840	; (adr r3, 8001d18 <packetRead+0xd28>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fe11 	bl	80005f8 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019e0:	e037      	b.n	8001a52 <packetRead+0xa62>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80019e2:	7d3b      	ldrb	r3, [r7, #20]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d117      	bne.n	8001a18 <packetRead+0xa28>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2203      	movs	r2, #3
 80019ec:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	3301      	adds	r3, #1
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd91 	bl	8000524 <__aeabi_i2d>
 8001a02:	a3c5      	add	r3, pc, #788	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a16:	e01c      	b.n	8001a52 <packetRead+0xa62>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001a18:	7d3b      	ldrb	r3, [r7, #20]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d117      	bne.n	8001a4e <packetRead+0xa5e>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2202      	movs	r2, #2
 8001a22:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	3301      	adds	r3, #1
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd76 	bl	8000524 <__aeabi_i2d>
 8001a38:	a3b7      	add	r3, pc, #732	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fddb 	bl	80005f8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001a4c:	e001      	b.n	8001a52 <packetRead+0xa62>
						}else{
							return CMD_ERROR;
 8001a4e:	2317      	movs	r3, #23
 8001a50:	e32e      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	3304      	adds	r3, #4
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	3301      	adds	r3, #1
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2202      	movs	r2, #2
 8001a86:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a94:	2304      	movs	r3, #4
 8001a96:	e30b      	b.n	80020b0 <packetRead+0x10c0>
                		return CMD_ERROR;
 8001a98:	2317      	movs	r3, #23
 8001a9a:	e309      	b.n	80020b0 <packetRead+0x10c0>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	e307      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d10a      	bne.n	8001abc <packetRead+0xacc>
						temp_pointer = 2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	e2f9      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001abc:	2317      	movs	r3, #23
 8001abe:	e2f7      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d109      	bne.n	8001ada <packetRead+0xaea>
						temp_pointer = 2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4b93      	ldr	r3, [pc, #588]	; (8001d20 <packetRead+0xd30>)
 8001ad4:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001ad6:	2309      	movs	r3, #9
 8001ad8:	e2ea      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001ada:	2317      	movs	r3, #23
 8001adc:	e2e8      	b.n	80020b0 <packetRead+0x10c0>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d12b      	bne.n	8001b3c <packetRead+0xb4c>
						temp_pointer = 2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b25a      	sxtb	r2, r3
 8001af8:	4b8a      	ldr	r3, [pc, #552]	; (8001d24 <packetRead+0xd34>)
 8001afa:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25a      	sxtb	r2, r3
 8001b0c:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <packetRead+0xd34>)
 8001b0e:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <packetRead+0xd34>)
 8001b22:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <packetRead+0xd34>)
 8001b36:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	e2b9      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001b3c:	2317      	movs	r3, #23
 8001b3e:	e2b7      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d130      	bne.n	8001ba8 <packetRead+0xbb8>
						uint8_t method;
						temp_pointer = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001b54:	7dbb      	ldrb	r3, [r7, #22]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d103      	bne.n	8001b62 <packetRead+0xb72>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	705a      	strb	r2, [r3, #1]
 8001b60:	e01d      	b.n	8001b9e <packetRead+0xbae>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001b62:	7dbb      	ldrb	r3, [r7, #22]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d103      	bne.n	8001b70 <packetRead+0xb80>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	705a      	strb	r2, [r3, #1]
 8001b6e:	e016      	b.n	8001b9e <packetRead+0xbae>
						} else if (SCARA_METHOD_GCODE == method) {
 8001b70:	7dbb      	ldrb	r3, [r7, #22]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <packetRead+0xb8e>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	705a      	strb	r2, [r3, #1]
 8001b7c:	e00f      	b.n	8001b9e <packetRead+0xbae>
						}else if(SCARA_METHOD_TEST == method){
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d103      	bne.n	8001b8c <packetRead+0xb9c>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2203      	movs	r2, #3
 8001b88:	705a      	strb	r2, [r3, #1]
 8001b8a:	e008      	b.n	8001b9e <packetRead+0xbae>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b8c:	7dbb      	ldrb	r3, [r7, #22]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d103      	bne.n	8001b9a <packetRead+0xbaa>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2204      	movs	r2, #4
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e001      	b.n	8001b9e <packetRead+0xbae>
						}else {
							return CMD_ERROR;
 8001b9a:	2317      	movs	r3, #23
 8001b9c:	e288      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->change_method = TRUE;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001ba4:	230b      	movs	r3, #11
 8001ba6:	e283      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001ba8:	2317      	movs	r3, #23
 8001baa:	e281      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d10f      	bne.n	8001bd2 <packetRead+0xbe2>
						int temp_pointer = 2;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001bce:	2315      	movs	r3, #21
 8001bd0:	e26e      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001bd2:	2317      	movs	r3, #23
 8001bd4:	e26c      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d116      	bne.n	8001c0a <packetRead+0xc1a>
						int temp_pointer = 2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	dd02      	ble.n	8001bf6 <packetRead+0xc06>
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	2b0e      	cmp	r3, #14
 8001bf4:	dd01      	ble.n	8001bfa <packetRead+0xc0a>
							return CMD_ERROR;
 8001bf6:	2317      	movs	r3, #23
 8001bf8:	e25a      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->key_speed = speed;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001c00:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <packetRead+0xd38>)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001c06:	2316      	movs	r3, #22
 8001c08:	e252      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001c0a:	2317      	movs	r3, #23
 8001c0c:	e250      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d117      	bne.n	8001c44 <packetRead+0xc54>
						int temp_pointer = 2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d901      	bls.n	8001c2c <packetRead+0xc3c>
							return CMD_ERROR;
 8001c28:	2317      	movs	r3, #23
 8001c2a:	e241      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->test_key = test_key;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	7dfa      	ldrb	r2, [r7, #23]
 8001c30:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2203      	movs	r2, #3
 8001c38:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c40:	230c      	movs	r3, #12
 8001c42:	e235      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001c44:	2317      	movs	r3, #23
 8001c46:	e233      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b0f      	cmp	r3, #15
 8001c4c:	d160      	bne.n	8001d10 <packetRead+0xd20>
						temp_pointer = -2;
 8001c4e:	f06f 0301 	mvn.w	r3, #1
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	3304      	adds	r3, #4
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc5e 	bl	8000524 <__aeabi_i2d>
 8001c68:	a32b      	add	r3, pc, #172	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	3304      	adds	r3, #4
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc4a 	bl	8000524 <__aeabi_i2d>
 8001c90:	a321      	add	r3, pc, #132	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fcaf 	bl	80005f8 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc36 	bl	8000524 <__aeabi_i2d>
 8001cb8:	a317      	add	r3, pc, #92	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fc9b 	bl	80005f8 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	3304      	adds	r3, #4
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.packet_time_stamp = GET_MICROS;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <packetRead+0xd3c>)
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <packetRead+0xd40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4912      	ldr	r1, [pc, #72]	; (8001d34 <packetRead+0xd44>)
 8001cea:	fba1 1303 	umull	r1, r3, r1, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	6839      	ldr	r1, [r7, #0]
 8001cfc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001d0c:	2319      	movs	r3, #25
 8001d0e:	e1cf      	b.n	80020b0 <packetRead+0x10c0>
						return CMD_ERROR;
 8001d10:	2317      	movs	r3, #23
 8001d12:	e1cd      	b.n	80020b0 <packetRead+0x10c0>
 8001d14:	f3af 8000 	nop.w
 8001d18:	a0000000 	.word	0xa0000000
 8001d1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d20:	2000fd38 	.word	0x2000fd38
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000060 	.word	0x20000060
 8001d2c:	e0001000 	.word	0xe0001000
 8001d30:	2000408c 	.word	0x2000408c
 8001d34:	431bde83 	.word	0x431bde83
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 47) { // 11 int32_t number + 1 byte move type + 2 define byte
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b2f      	cmp	r3, #47	; 0x2f
 8001d3c:	f040 80ea 	bne.w	8001f14 <packetRead+0xf24>
						temp_pointer = -2;
 8001d40:	f06f 0301 	mvn.w	r3, #1
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	3304      	adds	r3, #4
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbe5 	bl	8000524 <__aeabi_i2d>
 8001d5a:	a3ad      	add	r3, pc, #692	; (adr r3, 8002010 <packetRead+0x1020>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc4a 	bl	80005f8 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	49ab      	ldr	r1, [pc, #684]	; (8002018 <packetRead+0x1028>)
 8001d6a:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	3304      	adds	r3, #4
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbd1 	bl	8000524 <__aeabi_i2d>
 8001d82:	a3a3      	add	r3, pc, #652	; (adr r3, 8002010 <packetRead+0x1020>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fc36 	bl	80005f8 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	49a2      	ldr	r1, [pc, #648]	; (800201c <packetRead+0x102c>)
 8001d92:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	3304      	adds	r3, #4
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbbd 	bl	8000524 <__aeabi_i2d>
 8001daa:	a399      	add	r3, pc, #612	; (adr r3, 8002010 <packetRead+0x1020>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fc22 	bl	80005f8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4999      	ldr	r1, [pc, #612]	; (8002020 <packetRead+0x1030>)
 8001dba:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fba9 	bl	8000524 <__aeabi_i2d>
 8001dd2:	a38f      	add	r3, pc, #572	; (adr r3, 8002010 <packetRead+0x1020>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc0e 	bl	80005f8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4990      	ldr	r1, [pc, #576]	; (8002024 <packetRead+0x1034>)
 8001de2:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	3304      	adds	r3, #4
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb95 	bl	8000524 <__aeabi_i2d>
 8001dfa:	a385      	add	r3, pc, #532	; (adr r3, 8002010 <packetRead+0x1020>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fbfa 	bl	80005f8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4987      	ldr	r1, [pc, #540]	; (8002028 <packetRead+0x1038>)
 8001e0a:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	3304      	adds	r3, #4
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb81 	bl	8000524 <__aeabi_i2d>
 8001e22:	a37b      	add	r3, pc, #492	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fbe6 	bl	80005f8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	497e      	ldr	r1, [pc, #504]	; (800202c <packetRead+0x103c>)
 8001e32:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	3304      	adds	r3, #4
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb6d 	bl	8000524 <__aeabi_i2d>
 8001e4a:	a371      	add	r3, pc, #452	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fbd2 	bl	80005f8 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4975      	ldr	r1, [pc, #468]	; (8002030 <packetRead+0x1040>)
 8001e5a:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	3304      	adds	r3, #4
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb59 	bl	8000524 <__aeabi_i2d>
 8001e72:	a367      	add	r3, pc, #412	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbbe 	bl	80005f8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	496c      	ldr	r1, [pc, #432]	; (8002034 <packetRead+0x1044>)
 8001e82:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	3304      	adds	r3, #4
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	a35d      	add	r3, pc, #372	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fbaa 	bl	80005f8 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4963      	ldr	r1, [pc, #396]	; (8002038 <packetRead+0x1048>)
 8001eaa:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb31 	bl	8000524 <__aeabi_i2d>
 8001ec2:	a353      	add	r3, pc, #332	; (adr r3, 8002010 <packetRead+0x1020>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fb96 	bl	80005f8 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	495a      	ldr	r1, [pc, #360]	; (800203c <packetRead+0x104c>)
 8001ed2:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	3304      	adds	r3, #4
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb1d 	bl	8000524 <__aeabi_i2d>
 8001eea:	a349      	add	r3, pc, #292	; (adr r3, 8002010 <packetRead+0x1020>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fb82 	bl	80005f8 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4951      	ldr	r1, [pc, #324]	; (8002040 <packetRead+0x1050>)
 8001efa:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	3304      	adds	r3, #4
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <packetRead+0x1054>)
 8001f0e:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001f10:	231a      	movs	r3, #26
 8001f12:	e0cd      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001f14:	2317      	movs	r3, #23
 8001f16:	e0cb      	b.n	80020b0 <packetRead+0x10c0>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d154      	bne.n	8001fc8 <packetRead+0xfd8>
						temp_pointer = -2;
 8001f1e:	f06f 0301 	mvn.w	r3, #1
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	3304      	adds	r3, #4
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe faf6 	bl	8000524 <__aeabi_i2d>
 8001f38:	a335      	add	r3, pc, #212	; (adr r3, 8002010 <packetRead+0x1020>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb5b 	bl	80005f8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4940      	ldr	r1, [pc, #256]	; (8002048 <packetRead+0x1058>)
 8001f48:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	3304      	adds	r3, #4
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fae2 	bl	8000524 <__aeabi_i2d>
 8001f60:	a32b      	add	r3, pc, #172	; (adr r3, 8002010 <packetRead+0x1020>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fb47 	bl	80005f8 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4937      	ldr	r1, [pc, #220]	; (800204c <packetRead+0x105c>)
 8001f70:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	3304      	adds	r3, #4
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe face 	bl	8000524 <__aeabi_i2d>
 8001f88:	a321      	add	r3, pc, #132	; (adr r3, 8002010 <packetRead+0x1020>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fb33 	bl	80005f8 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	492e      	ldr	r1, [pc, #184]	; (8002050 <packetRead+0x1060>)
 8001f98:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe faba 	bl	8000524 <__aeabi_i2d>
 8001fb0:	a317      	add	r3, pc, #92	; (adr r3, 8002010 <packetRead+0x1020>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fb1f 	bl	80005f8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4925      	ldr	r1, [pc, #148]	; (8002054 <packetRead+0x1064>)
 8001fc0:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8001fc4:	2312      	movs	r3, #18
 8001fc6:	e073      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001fc8:	2317      	movs	r3, #23
 8001fca:	e071      	b.n	80020b0 <packetRead+0x10c0>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001fd8:	2314      	movs	r3, #20
 8001fda:	e069      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001fe8:	230e      	movs	r3, #14
 8001fea:	e061      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	e059      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2202      	movs	r2, #2
 8002000:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8002008:	2313      	movs	r3, #19
 800200a:	e051      	b.n	80020b0 <packetRead+0x10c0>
 800200c:	f3af 8000 	nop.w
 8002010:	a0000000 	.word	0xa0000000
 8002014:	3eb0c6f7 	.word	0x3eb0c6f7
 8002018:	20000058 	.word	0x20000058
 800201c:	20000008 	.word	0x20000008
 8002020:	20000010 	.word	0x20000010
 8002024:	20000018 	.word	0x20000018
 8002028:	20000020 	.word	0x20000020
 800202c:	20000028 	.word	0x20000028
 8002030:	20000030 	.word	0x20000030
 8002034:	20000038 	.word	0x20000038
 8002038:	20000040 	.word	0x20000040
 800203c:	20000048 	.word	0x20000048
 8002040:	20000050 	.word	0x20000050
 8002044:	20000064 	.word	0x20000064
 8002048:	20008fa8 	.word	0x20008fa8
 800204c:	2000fd50 	.word	0x2000fd50
 8002050:	2000fd40 	.word	0x2000fd40
 8002054:	20008fa0 	.word	0x20008fa0
				}
				break;
				case CMD_STEP_ON_OFF:
				{
					if(length == 3){ //1 byte status + 2 define byte
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d121      	bne.n	80020a2 <packetRead+0x10b2>
						temp_pointer = 2;
 800205e:	2302      	movs	r3, #2
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
						if(message[temp_pointer] == 1){
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d109      	bne.n	8002082 <packetRead+0x1092>
							step_status = 1;
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <packetRead+0x10c8>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207a:	4810      	ldr	r0, [pc, #64]	; (80020bc <packetRead+0x10cc>)
 800207c:	f00a fa84 	bl	800c588 <HAL_GPIO_WritePin>
 8002080:	e011      	b.n	80020a6 <packetRead+0x10b6>
						}else if(message[temp_pointer] == 0){
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <packetRead+0x10b6>
							step_status = 0;
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <packetRead+0x10c8>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209a:	4808      	ldr	r0, [pc, #32]	; (80020bc <packetRead+0x10cc>)
 800209c:	f00a fa74 	bl	800c588 <HAL_GPIO_WritePin>
 80020a0:	e001      	b.n	80020a6 <packetRead+0x10b6>
						}
					}else{
						return CMD_ERROR;
 80020a2:	2317      	movs	r3, #23
 80020a4:	e004      	b.n	80020b0 <packetRead+0x10c0>
					}
					return CMD_STEP_ON_OFF;
 80020a6:	230d      	movs	r3, #13
 80020a8:	e002      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 80020aa:	2317      	movs	r3, #23
 80020ac:	e000      	b.n	80020b0 <packetRead+0x10c0>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 80020ae:	2318      	movs	r3, #24
        }
    }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3730      	adds	r7, #48	; 0x30
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000fd28 	.word	0x2000fd28
 80020bc:	40020000 	.word	0x40020000

080020c0 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80020c0:	b082      	sub	sp, #8
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b0e2      	sub	sp, #392	; 0x188
 80020c6:	af2e      	add	r7, sp, #184	; 0xb8
 80020c8:	4601      	mov	r1, r0
 80020ca:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80020ce:	e880 000c 	stmia.w	r0, {r2, r3}
 80020d2:	460b      	mov	r3, r1
 80020d4:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2b1b      	cmp	r3, #27
 80020da:	f200 81d0 	bhi.w	800247e <commandReply+0x3be>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <commandReply+0x24>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	08002155 	.word	0x08002155
 80020e8:	08002155 	.word	0x08002155
 80020ec:	08002155 	.word	0x08002155
 80020f0:	08002155 	.word	0x08002155
 80020f4:	08002155 	.word	0x08002155
 80020f8:	08002155 	.word	0x08002155
 80020fc:	08002155 	.word	0x08002155
 8002100:	0800215d 	.word	0x0800215d
 8002104:	080021d7 	.word	0x080021d7
 8002108:	0800220b 	.word	0x0800220b
 800210c:	08002319 	.word	0x08002319
 8002110:	08002343 	.word	0x08002343
 8002114:	08002155 	.word	0x08002155
 8002118:	08002423 	.word	0x08002423
 800211c:	080023b1 	.word	0x080023b1
 8002120:	080023b1 	.word	0x080023b1
 8002124:	080023b1 	.word	0x080023b1
 8002128:	080023b1 	.word	0x080023b1
 800212c:	08002389 	.word	0x08002389
 8002130:	080023b1 	.word	0x080023b1
 8002134:	080023b1 	.word	0x080023b1
 8002138:	080023b9 	.word	0x080023b9
 800213c:	080023c1 	.word	0x080023c1
 8002140:	08002401 	.word	0x08002401
 8002144:	0800247f 	.word	0x0800247f
 8002148:	08002155 	.word	0x08002155
 800214c:	0800233b 	.word	0x0800233b
 8002150:	0800234b 	.word	0x0800234b
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002154:	2309      	movs	r3, #9
 8002156:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800215a:	e1a0      	b.n	800249e <commandReply+0x3de>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 800215c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002160:	2b01      	cmp	r3, #1
 8002162:	d110      	bne.n	8002186 <commandReply+0xc6>
				scaraSetOutput(1);
 8002164:	2001      	movs	r0, #1
 8002166:	f008 fb8b 	bl	800a880 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800216a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002176:	6011      	str	r1, [r2, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800217e:	4413      	add	r3, r2
 8002180:	220d      	movs	r2, #13
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e023      	b.n	80021ce <commandReply+0x10e>
			} else if (0 == duty_cmd.arc_dir) {
 8002186:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800218a:	2b00      	cmp	r3, #0
 800218c:	d110      	bne.n	80021b0 <commandReply+0xf0>
				scaraSetOutput(0);
 800218e:	2000      	movs	r0, #0
 8002190:	f008 fb76 	bl	800a880 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8002194:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021a0:	6011      	str	r1, [r2, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021a8:	4413      	add	r3, r2
 80021aa:	220e      	movs	r2, #14
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e00e      	b.n	80021ce <commandReply+0x10e>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80021b0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021c4:	4413      	add	r3, r2
 80021c6:	2211      	movs	r2, #17
 80021c8:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021ca:	2307      	movs	r3, #7
 80021cc:	e169      	b.n	80024a2 <commandReply+0x3e2>
			}
			ret = RPD_OK;
 80021ce:	2308      	movs	r3, #8
 80021d0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80021d4:	e163      	b.n	800249e <commandReply+0x3de>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80021d6:	f008 fba5 	bl	800a924 <scaraGetMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80021e0:	f008 fbb8 	bl	800a954 <scaraGetDutyState>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021ea:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d107      	bne.n	8002202 <commandReply+0x142>
 80021f2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <commandReply+0x142>
				ret = RPD_IDLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8002200:	e14d      	b.n	800249e <commandReply+0x3de>
				ret = RPD_BUSY;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002208:	e149      	b.n	800249e <commandReply+0x3de>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == READ_CONTINUOUS_ENABLE){
 800220a:	4ba9      	ldr	r3, [pc, #676]	; (80024b0 <commandReply+0x3f0>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d113      	bne.n	800223a <commandReply+0x17a>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_ENABLE;
 8002212:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1c59      	adds	r1, r3, #1
 800221a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800221e:	6011      	str	r1, [r2, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002226:	4413      	add	r3, r2
 8002228:	2212      	movs	r2, #18
 800222a:	701a      	strb	r2, [r3, #0]
//				lowlayer_readTruePosition(&position);
//				kinematicForward(&position);
//				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
//					scaraUpdatePosition(&position);
//				}
				ret = RPD_OK;
 800222c:	2308      	movs	r3, #8
 800222e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				continuous_update = 1;
 8002232:	4ba0      	ldr	r3, [pc, #640]	; (80024b4 <commandReply+0x3f4>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
			}
//			*detail_length = scaraPosition_packaging(detail, position);
//			ret =  RPD_POSITION;
//			ret =  RPD_OK;
		}
		break;
 8002238:	e131      	b.n	800249e <commandReply+0x3de>
			}else if(position_type == READ_CONTINUOUS_DISABLE){
 800223a:	4b9d      	ldr	r3, [pc, #628]	; (80024b0 <commandReply+0x3f0>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d113      	bne.n	800226a <commandReply+0x1aa>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_DISABLE;
 8002242:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1c59      	adds	r1, r3, #1
 800224a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800224e:	6011      	str	r1, [r2, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002256:	4413      	add	r3, r2
 8002258:	2213      	movs	r2, #19
 800225a:	701a      	strb	r2, [r3, #0]
				continuous_update = 0;
 800225c:	4b95      	ldr	r3, [pc, #596]	; (80024b4 <commandReply+0x3f4>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
				ret = RPD_OK;
 8002262:	2308      	movs	r3, #8
 8002264:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002268:	e119      	b.n	800249e <commandReply+0x3de>
			}else if(position_type == POSITION_UPDATE){
 800226a:	4b91      	ldr	r3, [pc, #580]	; (80024b0 <commandReply+0x3f0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d11f      	bne.n	80022b2 <commandReply+0x1f2>
				detail[(*detail_length)++] = UPDATE_REAL_POS;
 8002272:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c59      	adds	r1, r3, #1
 800227a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800227e:	6011      	str	r1, [r2, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002286:	4413      	add	r3, r2
 8002288:	2214      	movs	r2, #20
 800228a:	701a      	strb	r2, [r3, #0]
				lowlayer_readTruePosition(&position);
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f004 f8a9 	bl	80063e8 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f968 	bl	8005570 <kinematicForward>
				scaraUpdatePosition(&position);
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	4618      	mov	r0, r3
 80022a6:	f008 fb2d 	bl	800a904 <scaraUpdatePosition>
				ret = RPD_OK;
 80022aa:	2308      	movs	r3, #8
 80022ac:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022b0:	e0f5      	b.n	800249e <commandReply+0x3de>
			}else if(position_type == READ_REAL_DATA){
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <commandReply+0x3f0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d11f      	bne.n	80022fa <commandReply+0x23a>
				lowlayer_readTruePosition(&position);
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 f892 	bl	80063e8 <lowlayer_readTruePosition>
				kinematicForward(&position);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f951 	bl	8005570 <kinematicForward>
				*detail_length = scaraPosition_packaging(detail, position);
 80022ce:	4668      	mov	r0, sp
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	22b8      	movs	r2, #184	; 0xb8
 80022d6:	4619      	mov	r1, r3
 80022d8:	f013 ff52 	bl	8016180 <memcpy>
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	cb0c      	ldmia	r3, {r2, r3}
 80022e2:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 80022e6:	f008 fb67 	bl	800a9b8 <scaraPosition_packaging>
 80022ea:	4602      	mov	r2, r0
 80022ec:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022f0:	601a      	str	r2, [r3, #0]
				ret =  RPD_POSITION;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022f8:	e0d1      	b.n	800249e <commandReply+0x3de>
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80022fa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1c59      	adds	r1, r3, #1
 8002302:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800230e:	4413      	add	r3, r2
 8002310:	2215      	movs	r2, #21
 8002312:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002314:	2307      	movs	r3, #7
 8002316:	e0c4      	b.n	80024a2 <commandReply+0x3e2>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 8002318:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002324:	6011      	str	r1, [r2, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800232c:	4413      	add	r3, r2
 800232e:	2216      	movs	r2, #22
 8002330:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002332:	2308      	movs	r3, #8
 8002334:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002338:	e0b1      	b.n	800249e <commandReply+0x3de>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 800233a:	2308      	movs	r3, #8
 800233c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002340:	e0ad      	b.n	800249e <commandReply+0x3de>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8002342:	2309      	movs	r3, #9
 8002344:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002348:	e0a9      	b.n	800249e <commandReply+0x3de>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 800234a:	4b5b      	ldr	r3, [pc, #364]	; (80024b8 <commandReply+0x3f8>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <commandReply+0x3fc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d113      	bne.n	8002380 <commandReply+0x2c0>
			Gcode_data_available = 1;
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <commandReply+0x400>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 800235e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c59      	adds	r1, r3, #1
 8002366:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800236a:	6011      	str	r1, [r2, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002372:	4413      	add	r3, r2
 8002374:	2223      	movs	r2, #35	; 0x23
 8002376:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002378:	2308      	movs	r3, #8
 800237a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 800237e:	e08e      	b.n	800249e <commandReply+0x3de>
			ret = RPD_TRANSFER;
 8002380:	230a      	movs	r3, #10
 8002382:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002386:	e08a      	b.n	800249e <commandReply+0x3de>
	case CMD_GCODE_CONFIGURE:
	{
		offset_data_available = 1;
 8002388:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <commandReply+0x404>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 800238e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	1c59      	adds	r1, r3, #1
 8002396:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800239a:	6011      	str	r1, [r2, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023a2:	4413      	add	r3, r2
 80023a4:	2224      	movs	r2, #36	; 0x24
 80023a6:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80023a8:	2308      	movs	r3, #8
 80023aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 80023ae:	e076      	b.n	800249e <commandReply+0x3de>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 80023b0:	2309      	movs	r3, #9
 80023b2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80023b6:	e072      	b.n	800249e <commandReply+0x3de>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80023b8:	2309      	movs	r3, #9
 80023ba:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80023be:	e06e      	b.n	800249e <commandReply+0x3de>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 80023c0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c59      	adds	r1, r3, #1
 80023c8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80023cc:	6011      	str	r1, [r2, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023d4:	4413      	add	r3, r2
 80023d6:	221b      	movs	r2, #27
 80023d8:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80023da:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80023de:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c59      	adds	r1, r3, #1
 80023e6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80023ea:	6011      	str	r1, [r2, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023f2:	4413      	add	r3, r2
 80023f4:	b2c2      	uxtb	r2, r0
 80023f6:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80023f8:	2308      	movs	r3, #8
 80023fa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 80023fe:	e04e      	b.n	800249e <commandReply+0x3de>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8002400:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1c59      	adds	r1, r3, #1
 8002408:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800240c:	6011      	str	r1, [r2, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002414:	4413      	add	r3, r2
 8002416:	221a      	movs	r2, #26
 8002418:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800241a:	2307      	movs	r3, #7
 800241c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 8002420:	e03d      	b.n	800249e <commandReply+0x3de>
	case CMD_STEP_ON_OFF:{
		if(step_status == 1){
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <commandReply+0x408>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d110      	bne.n	800244c <commandReply+0x38c>
			detail[(*detail_length)++] = STEP_ON;
 800242a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1c59      	adds	r1, r3, #1
 8002432:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002436:	6011      	str	r1, [r2, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800243e:	4413      	add	r3, r2
 8002440:	220f      	movs	r2, #15
 8002442:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002444:	2308      	movs	r3, #8
 8002446:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			ret = RPD_OK;
		}else{
			ret = RPD_ERROR;
		}
	}
	break;
 800244a:	e028      	b.n	800249e <commandReply+0x3de>
		}else if(step_status == 0){
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <commandReply+0x408>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d110      	bne.n	8002476 <commandReply+0x3b6>
			detail[(*detail_length)++] = STEP_OFF;
 8002454:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c59      	adds	r1, r3, #1
 800245c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002460:	6011      	str	r1, [r2, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002468:	4413      	add	r3, r2
 800246a:	2210      	movs	r2, #16
 800246c:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 800246e:	2308      	movs	r3, #8
 8002470:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002474:	e013      	b.n	800249e <commandReply+0x3de>
			ret = RPD_ERROR;
 8002476:	2307      	movs	r3, #7
 8002478:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 800247c:	e00f      	b.n	800249e <commandReply+0x3de>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 800247e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1c59      	adds	r1, r3, #1
 8002486:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002492:	4413      	add	r3, r2
 8002494:	221c      	movs	r2, #28
 8002496:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002498:	2307      	movs	r3, #7
 800249a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 800249e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	37d0      	adds	r7, #208	; 0xd0
 80024a6:	46bd      	mov	sp, r7
 80024a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024ac:	b002      	add	sp, #8
 80024ae:	4770      	bx	lr
 80024b0:	2000fd38 	.word	0x2000fd38
 80024b4:	2000440a 	.word	0x2000440a
 80024b8:	20004406 	.word	0x20004406
 80024bc:	20008fb0 	.word	0x20008fb0
 80024c0:	20004405 	.word	0x20004405
 80024c4:	20004404 	.word	0x20004404
 80024c8:	2000fd28 	.word	0x2000fd28

080024cc <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	617a      	str	r2, [r7, #20]
 80024e6:	461a      	mov	r2, r3
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	4413      	add	r3, r2
 80024ec:	2228      	movs	r2, #40	; 0x28
 80024ee:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	617a      	str	r2, [r7, #20]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	617a      	str	r2, [r7, #20]
 8002506:	461a      	mov	r2, r3
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	4413      	add	r3, r2
 800250c:	2202      	movs	r2, #2
 800250e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	617a      	str	r2, [r7, #20]
 8002516:	461a      	mov	r2, r3
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	4413      	add	r3, r2
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	617a      	str	r2, [r7, #20]
 8002526:	461a      	mov	r2, r3
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	4413      	add	r3, r2
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	6a3a      	ldr	r2, [r7, #32]
 800253c:	4413      	add	r3, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	f013 fe1c 	bl	8016180 <memcpy>
		out_length += detail_length;
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e007      	b.n	8002562 <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	617a      	str	r2, [r7, #20]
 8002558:	461a      	mov	r2, r3
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	4413      	add	r3, r2
 800255e:	222d      	movs	r2, #45	; 0x2d
 8002560:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	617a      	str	r2, [r7, #20]
 8002568:	461a      	mov	r2, r3
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	4413      	add	r3, r2
 800256e:	227d      	movs	r2, #125	; 0x7d
 8002570:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	617a      	str	r2, [r7, #20]
 8002578:	461a      	mov	r2, r3
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	4413      	add	r3, r2
 800257e:	2229      	movs	r2, #41	; 0x29
 8002580:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	3301      	adds	r3, #1
 800258a:	3a02      	subs	r2, #2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002590:	697b      	ldr	r3, [r7, #20]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b096      	sub	sp, #88	; 0x58
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 80025a8:	887a      	ldrh	r2, [r7, #2]
 80025aa:	f107 0008 	add.w	r0, r7, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <LOG_REPORT+0x78>)
 80025b6:	213f      	movs	r1, #63	; 0x3f
 80025b8:	f014 fd4c 	bl	8017054 <sniprintf>
 80025bc:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d101      	bne.n	80025ca <LOG_REPORT+0x2e>
		return FALSE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e01f      	b.n	800260a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025d0:	4619      	mov	r1, r3
 80025d2:	4811      	ldr	r0, [pc, #68]	; (8002618 <LOG_REPORT+0x7c>)
 80025d4:	f003 fc28 	bl	8005e28 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80025d8:	4810      	ldr	r0, [pc, #64]	; (800261c <LOG_REPORT+0x80>)
 80025da:	f009 fd4b 	bl	800c074 <HAL_DMA_GetState>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d101      	bne.n	80025e8 <LOG_REPORT+0x4c>
		return TRUE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e010      	b.n	800260a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80025e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <LOG_REPORT+0x84>)
 80025ee:	480a      	ldr	r0, [pc, #40]	; (8002618 <LOG_REPORT+0x7c>)
 80025f0:	f003 fc42 	bl	8005e78 <ringBuff_PopArray>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80025fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025fe:	461a      	mov	r2, r3
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <LOG_REPORT+0x84>)
 8002602:	4808      	ldr	r0, [pc, #32]	; (8002624 <LOG_REPORT+0x88>)
 8002604:	f00c faae 	bl	800eb64 <HAL_UART_Transmit_DMA>
	return TRUE;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	3750      	adds	r7, #80	; 0x50
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	0801c430 	.word	0x0801c430
 8002618:	20002074 	.word	0x20002074
 800261c:	20010e40 	.word	0x20010e40
 8002620:	2000fd70 	.word	0x2000fd70
 8002624:	20010e00 	.word	0x20010e00

08002628 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 3;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3b03      	subs	r3, #3
 8002638:	617b      	str	r3, [r7, #20]
	uint16_t packet_length = *(uint16_t*)(&message_buff[1]);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002640:	827b      	strh	r3, [r7, #18]
	//check packet length
	if(packet_length == data_length && backup_available == 0){
 8002642:	8a7b      	ldrh	r3, [r7, #18]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	429a      	cmp	r2, r3
 8002648:	d119      	bne.n	800267e <unPackPayload+0x56>
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <unPackPayload+0xd8>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d115      	bne.n	800267e <unPackPayload+0x56>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	dc02      	bgt.n	800265e <unPackPayload+0x36>
			return -1;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	e04c      	b.n	80026f8 <unPackPayload+0xd0>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b28      	cmp	r3, #40	; 0x28
 8002664:	d002      	beq.n	800266c <unPackPayload+0x44>
			return -1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e045      	b.n	80026f8 <unPackPayload+0xd0>
		}
		memcpy(data_packet, &message_buff[3], data_length - RECEIVE_END_LENGTH);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1cd9      	adds	r1, r3, #3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3b02      	subs	r3, #2
 8002674:	461a      	mov	r2, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f013 fd82 	bl	8016180 <memcpy>
 800267c:	e03a      	b.n	80026f4 <unPackPayload+0xcc>
	}else if(packet_length != data_length && backup_available == 0){
 800267e:	8a7b      	ldrh	r3, [r7, #18]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	429a      	cmp	r2, r3
 8002684:	d01b      	beq.n	80026be <unPackPayload+0x96>
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <unPackPayload+0xd8>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d117      	bne.n	80026be <unPackPayload+0x96>
		// check start char
		if(message_buff[0] != START_CHAR){
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b28      	cmp	r3, #40	; 0x28
 8002694:	d002      	beq.n	800269c <unPackPayload+0x74>
			return -1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e02d      	b.n	80026f8 <unPackPayload+0xd0>
		}
		backup_available = 1;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <unPackPayload+0xd8>)
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
		memcpy(data_packet, &message_buff[3], data_length);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3303      	adds	r3, #3
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f013 fd68 	bl	8016180 <memcpy>
		backup_length = data_length;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <unPackPayload+0xdc>)
 80026b6:	801a      	strh	r2, [r3, #0]
		return - 1;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	e01c      	b.n	80026f8 <unPackPayload+0xd0>
	}else if(backup_available == 1){
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <unPackPayload+0xd8>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d113      	bne.n	80026ee <unPackPayload+0xc6>
		backup_available = 0;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <unPackPayload+0xd8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <unPackPayload+0xdc>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f013 fd50 	bl	8016180 <memcpy>
		data_length = backup_length + in_length;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <unPackPayload+0xdc>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e002      	b.n	80026f4 <unPackPayload+0xcc>
	}else{
		return - 1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e001      	b.n	80026f8 <unPackPayload+0xd0>
	}


	return data_length - RECEIVE_END_LENGTH;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	3b02      	subs	r3, #2
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	2000fe70 	.word	0x2000fe70
 8002704:	2000fe72 	.word	0x2000fe72

08002708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_DMA_Init+0x3c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <MX_DMA_Init+0x3c>)
 8002718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_DMA_Init+0x3c>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2105      	movs	r1, #5
 800272e:	200f      	movs	r0, #15
 8002730:	f009 f9c4 	bl	800babc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002734:	200f      	movs	r0, #15
 8002736:	f009 f9dd 	bl	800baf4 <HAL_NVIC_EnableIRQ>

}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a07      	ldr	r2, [pc, #28]	; (8002774 <vApplicationGetIdleTaskMemory+0x2c>)
 8002758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4a06      	ldr	r2, [pc, #24]	; (8002778 <vApplicationGetIdleTaskMemory+0x30>)
 800275e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002766:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	2000440c 	.word	0x2000440c
 8002778:	20004460 	.word	0x20004460

0800277c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	b094      	sub	sp, #80	; 0x50
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8002782:	2300      	movs	r3, #0
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
 8002786:	2300      	movs	r3, #0
 8002788:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 800278a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800278e:	4618      	mov	r0, r3
 8002790:	f010 f9f4 	bl	8012b7c <osMutexCreate>
 8002794:	4603      	mov	r3, r0
 8002796:	4a1d      	ldr	r2, [pc, #116]	; (800280c <MX_FREERTOS_Init+0x90>)
 8002798:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 800279a:	2301      	movs	r3, #1
 800279c:	63bb      	str	r3, [r7, #56]	; 0x38
 800279e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027a8:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 80027aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f010 fafb 	bl	8012dac <osMailCreate>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <MX_FREERTOS_Init+0x94>)
 80027ba:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <MX_FREERTOS_Init+0x98>)
 80027be:	f107 041c 	add.w	r4, r7, #28
 80027c2:	461d      	mov	r5, r3
 80027c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f010 f8e3 	bl	80129a2 <osThreadCreate>
 80027dc:	4603      	mov	r3, r0
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <MX_FREERTOS_Init+0x9c>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_FREERTOS_Init+0xa0>)
 80027e4:	463c      	mov	r4, r7
 80027e6:	461d      	mov	r5, r3
 80027e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 80027f4:	463b      	mov	r3, r7
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f010 f8d2 	bl	80129a2 <osThreadCreate>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <MX_FREERTOS_Init+0xa4>)
 8002802:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002804:	bf00      	nop
 8002806:	3750      	adds	r7, #80	; 0x50
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	2000fe78 	.word	0x2000fe78
 8002810:	2000fe7c 	.word	0x2000fe7c
 8002814:	0801c46c 	.word	0x0801c46c
 8002818:	2000fe74 	.word	0x2000fe74
 800281c:	0801c488 	.word	0x0801c488
 8002820:	2000fe80 	.word	0x2000fe80
 8002824:	00000000 	.word	0x00000000

08002828 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800282c:	f5ad 5d92 	sub.w	sp, sp, #4672	; 0x1240
 8002830:	b086      	sub	sp, #24
 8002832:	af6c      	add	r7, sp, #432	; 0x1b0
 8002834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002838:	3b14      	subs	r3, #20
 800283a:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800283c:	f012 ff16 	bl	801566c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002840:	2201      	movs	r2, #1
 8002842:	2110      	movs	r1, #16
 8002844:	48d2      	ldr	r0, [pc, #840]	; (8002b90 <StartDefaultTask+0x368>)
 8002846:	f009 fe9f 	bl	800c588 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 800284a:	2300      	movs	r3, #0
 800284c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002850:	f102 0207 	add.w	r2, r2, #7
 8002854:	7013      	strb	r3, [r2, #0]


  // Report buffer;
  uint8_t				update_pos_cycle = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800285c:	f102 0206 	add.w	r2, r2, #6
 8002860:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002868:	f102 0206 	add.w	r2, r2, #6
 800286c:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002874:	f102 0205 	add.w	r2, r2, #5
 8002878:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8002886:	f101 0118 	add.w	r1, r1, #24
 800288a:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002894:	f102 0214 	add.w	r2, r2, #20
 8002898:	6013      	str	r3, [r2, #0]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 800289a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800289e:	3b08      	subs	r3, #8
 80028a0:	4abc      	ldr	r2, [pc, #752]	; (8002b94 <StartDefaultTask+0x36c>)
 80028a2:	4618      	mov	r0, r3
 80028a4:	4611      	mov	r1, r2
 80028a6:	2390      	movs	r3, #144	; 0x90
 80028a8:	461a      	mov	r2, r3
 80028aa:	f013 fc69 	bl	8016180 <memcpy>
  		{257.2121f, -76.9947f, 0.0f} ,
  		{258.221f, -47.1851f, 0.0f} ,
		{260.695f, -17.075f, 0.0f} ,
		{260.4f, 13.66f, 0.0f}
  };
  const double placement_spacing = -34.0f;
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	4bb9      	ldr	r3, [pc, #740]	; (8002b98 <StartDefaultTask+0x370>)
 80028b4:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80028b8:	f101 0108 	add.w	r1, r1, #8
 80028bc:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t Slot_Placement[NUM_OF_OBJECT] = {
 80028c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028c4:	3b10      	subs	r3, #16
 80028c6:	4ab5      	ldr	r2, [pc, #724]	; (8002b9c <StartDefaultTask+0x374>)
 80028c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028cc:	6018      	str	r0, [r3, #0]
 80028ce:	3304      	adds	r3, #4
 80028d0:	8019      	strh	r1, [r3, #0]
		  0, 0, 0, 0, 0, 0
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80028d2:	21ef      	movs	r1, #239	; 0xef
 80028d4:	48b2      	ldr	r0, [pc, #712]	; (8002ba0 <StartDefaultTask+0x378>)
 80028d6:	f7ff fe61 	bl	800259c <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80028da:	f008 f82f 	bl	800a93c <scaraGetMethod>
 80028de:	4603      	mov	r3, r0
 80028e0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80028e4:	f102 021f 	add.w	r2, r2, #31
 80028e8:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 80028ea:	f008 f81b 	bl	800a924 <scaraGetMode>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80028f4:	f102 021e 	add.w	r2, r2, #30
 80028f8:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 80028fa:	f008 f82b 	bl	800a954 <scaraGetDutyState>
 80028fe:	4603      	mov	r3, r0
 8002900:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002904:	f102 021d 	add.w	r2, r2, #29
 8002908:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 800290a:	f004 fa89 	bl	8006e20 <scaraStartup>
  osDelay(10);
 800290e:	200a      	movs	r0, #10
 8002910:	f010 f893 	bl	8012a3a <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.4345;
 8002914:	49a3      	ldr	r1, [pc, #652]	; (8002ba4 <StartDefaultTask+0x37c>)
 8002916:	a396      	add	r3, pc, #600	; (adr r3, 8002b70 <StartDefaultTask+0x348>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 1.7213f;
 8002920:	49a0      	ldr	r1, [pc, #640]	; (8002ba4 <StartDefaultTask+0x37c>)
 8002922:	a395      	add	r3, pc, #596	; (adr r3, 8002b78 <StartDefaultTask+0x350>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 9.826;
 800292c:	499d      	ldr	r1, [pc, #628]	; (8002ba4 <StartDefaultTask+0x37c>)
 800292e:	a394      	add	r3, pc, #592	; (adr r3, 8002b80 <StartDefaultTask+0x358>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 0.28676;
 8002938:	499a      	ldr	r1, [pc, #616]	; (8002ba4 <StartDefaultTask+0x37c>)
 800293a:	a393      	add	r3, pc, #588	; (adr r3, 8002b88 <StartDefaultTask+0x360>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 8002944:	4997      	ldr	r1, [pc, #604]	; (8002ba4 <StartDefaultTask+0x37c>)
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 8002952:	4894      	ldr	r0, [pc, #592]	; (8002ba4 <StartDefaultTask+0x37c>)
 8002954:	f002 fe0c 	bl	8005570 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002958:	4893      	ldr	r0, [pc, #588]	; (8002ba8 <StartDefaultTask+0x380>)
 800295a:	f00b fcd2 	bl	800e302 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 800295e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002962:	3b08      	subs	r3, #8
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f010 f8ba 	bl	8012ae4 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002970:	2300      	movs	r3, #0
 8002972:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002976:	f102 0204 	add.w	r2, r2, #4
 800297a:	6013      	str	r3, [r2, #0]
//	  respond_packed_lenght = 0;
//	  infor_lenght			= 0;
//	  infor_packed_lenght	= 0;
	  //task_usb_lenght		= 0;
	  //usb_lenght			= 0;
	  total_respond_length  = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002982:	6013      	str	r3, [r2, #0]
//	  detail_ptr 			= 0;
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002984:	4a89      	ldr	r2, [pc, #548]	; (8002bac <StartDefaultTask+0x384>)
 8002986:	4b8a      	ldr	r3, [pc, #552]	; (8002bb0 <StartDefaultTask+0x388>)
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	23c0      	movs	r3, #192	; 0xc0
 800298e:	461a      	mov	r2, r3
 8002990:	f013 fbf6 	bl	8016180 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002994:	4a86      	ldr	r2, [pc, #536]	; (8002bb0 <StartDefaultTask+0x388>)
 8002996:	4b83      	ldr	r3, [pc, #524]	; (8002ba4 <StartDefaultTask+0x37c>)
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	23c0      	movs	r3, #192	; 0xc0
 800299e:	461a      	mov	r2, r3
 80029a0:	f013 fbee 	bl	8016180 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80029a4:	4b83      	ldr	r3, [pc, #524]	; (8002bb4 <StartDefaultTask+0x38c>)
 80029a6:	6819      	ldr	r1, [r3, #0]
 80029a8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029ac:	f103 031c 	add.w	r3, r3, #28
 80029b0:	2200      	movs	r2, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f010 faa6 	bl	8012f04 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80029b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029bc:	f103 031c 	add.w	r3, r3, #28
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d11d      	bne.n	8002a02 <StartDefaultTask+0x1da>
		   dataMail = ret_mail.value.p;
 80029c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80029d0:	6013      	str	r3, [r2, #0]
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80029d2:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80029d6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80029da:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f013 fbcd 	bl	8016180 <memcpy>
		   isNewDuty = TRUE;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80029ec:	f102 0207 	add.w	r2, r2, #7
 80029f0:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80029f2:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <StartDefaultTask+0x38c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f010 faf5 	bl	8012fec <osMailFree>
	  }
	  if(isNewDuty) {
 8002a02:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002a06:	f103 0307 	add.w	r3, r3, #7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 84e8 	beq.w	80033e2 <StartDefaultTask+0xbba>
		  if (duty_cmd.change_method == TRUE) {
 8002a12:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f040 8146 	bne.w	8002caa <StartDefaultTask+0x482>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002a1e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d132      	bne.n	8002a8e <StartDefaultTask+0x266>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002a2e:	f102 021f 	add.w	r2, r2, #31
 8002a32:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002a3a:	f102 021d 	add.w	r2, r2, #29
 8002a3e:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 8002a40:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002a44:	221d      	movs	r2, #29
 8002a46:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a48:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002a52:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2301      	movs	r3, #1
 8002a62:	2008      	movs	r0, #8
 8002a64:	f7ff fd32 	bl	80024cc <commandRespond1>
 8002a68:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a6c:	f103 0304 	add.w	r3, r3, #4
 8002a70:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002a72:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a7c:	f103 0304 	add.w	r3, r3, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	f000 bca4 	b.w	80033d6 <StartDefaultTask+0xbae>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002a8e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d132      	bne.n	8002afe <StartDefaultTask+0x2d6>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002a9e:	f102 021f 	add.w	r2, r2, #31
 8002aa2:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002aaa:	f102 021d 	add.w	r2, r2, #29
 8002aae:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 8002ab0:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002ab4:	221e      	movs	r2, #30
 8002ab6:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ab8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002abc:	6899      	ldr	r1, [r3, #8]
 8002abe:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002ac2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	2008      	movs	r0, #8
 8002ad4:	f7ff fcfa 	bl	80024cc <commandRespond1>
 8002ad8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002adc:	f103 0304 	add.w	r3, r3, #4
 8002ae0:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002ae2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002aec:	f103 0304 	add.w	r3, r3, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	f000 bc6c 	b.w	80033d6 <StartDefaultTask+0xbae>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002afe:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d157      	bne.n	8002bb8 <StartDefaultTask+0x390>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b0e:	f102 021d 	add.w	r2, r2, #29
 8002b12:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002b14:	2302      	movs	r3, #2
 8002b16:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b1a:	f102 021f 	add.w	r2, r2, #31
 8002b1e:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002b20:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002b24:	221f      	movs	r2, #31
 8002b26:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b28:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002b32:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2301      	movs	r3, #1
 8002b42:	2008      	movs	r0, #8
 8002b44:	f7ff fcc2 	bl	80024cc <commandRespond1>
 8002b48:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002b4c:	f103 0304 	add.w	r3, r3, #4
 8002b50:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002b52:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002b5c:	f103 0304 	add.w	r3, r3, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	f000 bc34 	b.w	80033d6 <StartDefaultTask+0xbae>
 8002b6e:	bf00      	nop
 8002b70:	45a1cac1 	.word	0x45a1cac1
 8002b74:	bff6f3b6 	.word	0xbff6f3b6
 8002b78:	e0000000 	.word	0xe0000000
 8002b7c:	3ffb8a71 	.word	0x3ffb8a71
 8002b80:	78d4fdf4 	.word	0x78d4fdf4
 8002b84:	4023a6e9 	.word	0x4023a6e9
 8002b88:	9d7342ee 	.word	0x9d7342ee
 8002b8c:	3fd25a46 	.word	0x3fd25a46
 8002b90:	40020400 	.word	0x40020400
 8002b94:	0801c578 	.word	0x0801c578
 8002b98:	c0410000 	.word	0xc0410000
 8002b9c:	0801c608 	.word	0x0801c608
 8002ba0:	0801c4a4 	.word	0x0801c4a4
 8002ba4:	20010c80 	.word	0x20010c80
 8002ba8:	20010dc0 	.word	0x20010dc0
 8002bac:	20010980 	.word	0x20010980
 8002bb0:	20010b00 	.word	0x20010b00
 8002bb4:	2000fe7c 	.word	0x2000fe7c
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002bb8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d13b      	bne.n	8002c3a <StartDefaultTask+0x412>
				  test_value[0] = 0;
 8002bc2:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002bca:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002bce:	2200      	movs	r2, #0
 8002bd0:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002bd2:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002bda:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002bde:	2200      	movs	r2, #0
 8002be0:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002be2:	2303      	movs	r3, #3
 8002be4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002be8:	f102 021f 	add.w	r2, r2, #31
 8002bec:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 8002bee:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002bf6:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002c00:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2008      	movs	r0, #8
 8002c12:	f7ff fc5b 	bl	80024cc <commandRespond1>
 8002c16:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c1a:	f103 0304 	add.w	r3, r3, #4
 8002c1e:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002c20:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c2a:	f103 0304 	add.w	r3, r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e3cd      	b.n	80033d6 <StartDefaultTask+0xbae>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002c3a:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	f040 83c8 	bne.w	80033d6 <StartDefaultTask+0xbae>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002c46:	2304      	movs	r3, #4
 8002c48:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002c4c:	f102 021f 	add.w	r2, r2, #31
 8002c50:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002c58:	f102 021d 	add.w	r2, r2, #29
 8002c5c:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002c5e:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002c62:	2221      	movs	r2, #33	; 0x21
 8002c64:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c66:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002c70:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2301      	movs	r3, #1
 8002c80:	2008      	movs	r0, #8
 8002c82:	f7ff fc23 	bl	80024cc <commandRespond1>
 8002c86:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c8a:	f103 0304 	add.w	r3, r3, #4
 8002c8e:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002c90:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c9a:	f103 0304 	add.w	r3, r3, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e395      	b.n	80033d6 <StartDefaultTask+0xbae>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002caa:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002cae:	785b      	ldrb	r3, [r3, #1]
 8002cb0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002cb4:	f102 021f 	add.w	r2, r2, #31
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	f040 8362 	bne.w	8003384 <StartDefaultTask+0xb5c>
				  	  switch( duty_cmd.robot_method) {
 8002cc0:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	f200 8356 	bhi.w	8003378 <StartDefaultTask+0xb50>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <StartDefaultTask+0x4ac>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002ce9 	.word	0x08002ce9
 8002cd8:	08002d6f 	.word	0x08002d6f
 8002cdc:	08003131 	.word	0x08003131
 8002ce0:	08002fbf 	.word	0x08002fbf
 8002ce4:	080032ad 	.word	0x080032ad
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002ce8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002cec:	f103 031b 	add.w	r3, r3, #27
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <StartDefaultTask+0x4fc>
				  			  current_key = duty_cmd.keyboard;
 8002cf6:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002cfa:	78db      	ldrb	r3, [r3, #3]
 8002cfc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d00:	f102 021a 	add.w	r2, r2, #26
 8002d04:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002d06:	2301      	movs	r3, #1
 8002d08:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d0c:	f102 021b 	add.w	r2, r2, #27
 8002d10:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002d12:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d1c:	f102 0214 	add.w	r2, r2, #20
 8002d20:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002d22:	e355      	b.n	80033d0 <StartDefaultTask+0xba8>
				  		  } else if (current_key == duty_cmd.keyboard
 8002d24:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002d28:	78db      	ldrb	r3, [r3, #3]
 8002d2a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d2e:	f102 021a 	add.w	r2, r2, #26
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 834b 	bne.w	80033d0 <StartDefaultTask+0xba8>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002d3a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002d3e:	f103 031b 	add.w	r3, r3, #27
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	f040 8343 	bne.w	80033d0 <StartDefaultTask+0xba8>
									  && current_key_speed == duty_cmd.key_speed) {
 8002d4a:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d54:	f102 0214 	add.w	r2, r2, #20
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	f040 8338 	bne.w	80033d0 <StartDefaultTask+0xba8>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002d60:	2301      	movs	r3, #1
 8002d62:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d66:	f102 021b 	add.w	r2, r2, #27
 8002d6a:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002d6c:	e330      	b.n	80033d0 <StartDefaultTask+0xba8>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002d6e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002d72:	789b      	ldrb	r3, [r3, #2]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f000 80a4 	beq.w	8002ec2 <StartDefaultTask+0x69a>
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	f300 8118 	bgt.w	8002fb0 <StartDefaultTask+0x788>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <StartDefaultTask+0x562>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d031      	beq.n	8002dec <StartDefaultTask+0x5c4>
 8002d88:	e112      	b.n	8002fb0 <StartDefaultTask+0x788>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d90:	f102 021e 	add.w	r2, r2, #30
 8002d94:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002d96:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002d9a:	2228      	movs	r2, #40	; 0x28
 8002d9c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d9e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002da8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2301      	movs	r3, #1
 8002db8:	2008      	movs	r0, #8
 8002dba:	f7ff fb87 	bl	80024cc <commandRespond1>
 8002dbe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002dc2:	f103 0304 	add.w	r3, r3, #4
 8002dc6:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8002dc8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002dd2:	f103 0304 	add.w	r3, r3, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002dde:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002de0:	f240 1169 	movw	r1, #361	; 0x169
 8002de4:	48cc      	ldr	r0, [pc, #816]	; (8003118 <StartDefaultTask+0x8f0>)
 8002de6:	f7ff fbd9 	bl	800259c <LOG_REPORT>
							  }
							  break;
 8002dea:	e0e7      	b.n	8002fbc <StartDefaultTask+0x794>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002dec:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002df0:	f103 031e 	add.w	r3, r3, #30
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d138      	bne.n	8002e6c <StartDefaultTask+0x644>
 8002dfa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002dfe:	f103 031d 	add.w	r3, r3, #29
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d131      	bne.n	8002e6c <StartDefaultTask+0x644>
									  current_mode = SCARA_MODE_SCAN;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002e0e:	f102 021e 	add.w	r2, r2, #30
 8002e12:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002e1a:	f102 021c 	add.w	r2, r2, #28
 8002e1e:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002e20:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002e24:	2229      	movs	r2, #41	; 0x29
 8002e26:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e28:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002e32:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2301      	movs	r3, #1
 8002e42:	2008      	movs	r0, #8
 8002e44:	f7ff fb42 	bl	80024cc <commandRespond1>
 8002e48:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e4c:	f103 0304 	add.w	r3, r3, #4
 8002e50:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002e52:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e5c:	f103 0304 	add.w	r3, r3, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002e68:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002e6a:	e0a7      	b.n	8002fbc <StartDefaultTask+0x794>
									detail_array[0] = BUSY;
 8002e6c:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002e70:	222a      	movs	r2, #42	; 0x2a
 8002e72:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e74:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002e78:	6899      	ldr	r1, [r3, #8]
 8002e7a:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002e7e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	2007      	movs	r0, #7
 8002e90:	f7ff fb1c 	bl	80024cc <commandRespond1>
 8002e94:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002e98:	f103 0304 	add.w	r3, r3, #4
 8002e9c:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002e9e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002ea8:	f103 0304 	add.w	r3, r3, #4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002eb4:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002eb6:	f240 117d 	movw	r1, #381	; 0x17d
 8002eba:	4898      	ldr	r0, [pc, #608]	; (800311c <StartDefaultTask+0x8f4>)
 8002ebc:	f7ff fb6e 	bl	800259c <LOG_REPORT>
							  break;
 8002ec0:	e07c      	b.n	8002fbc <StartDefaultTask+0x794>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002ec2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002ec6:	f103 031e 	add.w	r3, r3, #30
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d143      	bne.n	8002f58 <StartDefaultTask+0x730>
 8002ed0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002ed4:	f103 031d 	add.w	r3, r3, #29
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d13c      	bne.n	8002f58 <StartDefaultTask+0x730>
									  //scaraSetScanFlag();
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002ede:	f007 fd45 	bl	800a96c <scaraIsScanLimit>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00c      	beq.n	8002f02 <StartDefaultTask+0x6da>
										  current_mode	 = SCARA_MODE_DUTY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002eee:	f102 021e 	add.w	r2, r2, #30
 8002ef2:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002efa:	f102 021d 	add.w	r2, r2, #29
 8002efe:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002f00:	e055      	b.n	8002fae <StartDefaultTask+0x786>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002f02:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002f06:	222b      	movs	r2, #43	; 0x2b
 8002f08:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002f0a:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002f14:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2301      	movs	r3, #1
 8002f24:	2007      	movs	r0, #7
 8002f26:	f7ff fad1 	bl	80024cc <commandRespond1>
 8002f2a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002f2e:	f103 0304 	add.w	r3, r3, #4
 8002f32:	6018      	str	r0, [r3, #0]
										total_respond_length += respond_lenght;
 8002f34:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002f3e:	f103 0304 	add.w	r3, r3, #4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002f4a:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002f4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002f50:	4873      	ldr	r0, [pc, #460]	; (8003120 <StartDefaultTask+0x8f8>)
 8002f52:	f7ff fb23 	bl	800259c <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002f56:	e02a      	b.n	8002fae <StartDefaultTask+0x786>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002f58:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8002f5c:	222a      	movs	r2, #42	; 0x2a
 8002f5e:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002f60:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8002f6a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4413      	add	r3, r2
 8002f72:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	2007      	movs	r0, #7
 8002f7c:	f7ff faa6 	bl	80024cc <commandRespond1>
 8002f80:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002f84:	f103 0304 	add.w	r3, r3, #4
 8002f88:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002f8a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002f94:	f103 0304 	add.w	r3, r3, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002fa0:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002fa2:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8002fa6:	485f      	ldr	r0, [pc, #380]	; (8003124 <StartDefaultTask+0x8fc>)
 8002fa8:	f7ff faf8 	bl	800259c <LOG_REPORT>
								  }
							  }
							  break;
 8002fac:	e006      	b.n	8002fbc <StartDefaultTask+0x794>
 8002fae:	e005      	b.n	8002fbc <StartDefaultTask+0x794>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002fb0:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8002fb4:	485c      	ldr	r0, [pc, #368]	; (8003128 <StartDefaultTask+0x900>)
 8002fb6:	f7ff faf1 	bl	800259c <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002fba:	e20c      	b.n	80033d6 <StartDefaultTask+0xbae>
 8002fbc:	e20b      	b.n	80033d6 <StartDefaultTask+0xbae>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002fbe:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002fc6:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002fca:	2200      	movs	r2, #0
 8002fcc:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002fce:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002fd6:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8002fda:	2200      	movs	r2, #0
 8002fdc:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002fde:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8002fe2:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fe6:	2b07      	cmp	r3, #7
 8002fe8:	f200 8094 	bhi.w	8003114 <StartDefaultTask+0x8ec>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <StartDefaultTask+0x7cc>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003015 	.word	0x08003015
 8002ff8:	08003031 	.word	0x08003031
 8002ffc:	08003055 	.word	0x08003055
 8003000:	08003071 	.word	0x08003071
 8003004:	08003095 	.word	0x08003095
 8003008:	080030b1 	.word	0x080030b1
 800300c:	080030d5 	.word	0x080030d5
 8003010:	080030f1 	.word	0x080030f1
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8003014:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003018:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	4b42      	ldr	r3, [pc, #264]	; (800312c <StartDefaultTask+0x904>)
 8003024:	f993 1000 	ldrsb.w	r1, [r3]
 8003028:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 800302c:	5499      	strb	r1, [r3, r2]
						  break;
 800302e:	e072      	b.n	8003116 <StartDefaultTask+0x8ee>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8003030:	4b3e      	ldr	r3, [pc, #248]	; (800312c <StartDefaultTask+0x904>)
 8003032:	f993 3000 	ldrsb.w	r3, [r3]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	425b      	negs	r3, r3
 800303a:	b2d9      	uxtb	r1, r3
 800303c:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003040:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	b249      	sxtb	r1, r1
 800304c:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8003050:	5499      	strb	r1, [r3, r2]
						  break;
 8003052:	e060      	b.n	8003116 <StartDefaultTask+0x8ee>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8003054:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003058:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	4b32      	ldr	r3, [pc, #200]	; (800312c <StartDefaultTask+0x904>)
 8003064:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003068:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 800306c:	5499      	strb	r1, [r3, r2]
						  break;
 800306e:	e052      	b.n	8003116 <StartDefaultTask+0x8ee>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8003070:	4b2e      	ldr	r3, [pc, #184]	; (800312c <StartDefaultTask+0x904>)
 8003072:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	425b      	negs	r3, r3
 800307a:	b2d9      	uxtb	r1, r3
 800307c:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003080:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	b249      	sxtb	r1, r1
 800308c:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8003090:	5499      	strb	r1, [r3, r2]
						  break;
 8003092:	e040      	b.n	8003116 <StartDefaultTask+0x8ee>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8003094:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003098:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b22      	ldr	r3, [pc, #136]	; (800312c <StartDefaultTask+0x904>)
 80030a4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80030a8:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 80030ac:	5499      	strb	r1, [r3, r2]
						  break;
 80030ae:	e032      	b.n	8003116 <StartDefaultTask+0x8ee>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <StartDefaultTask+0x904>)
 80030b2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	425b      	negs	r3, r3
 80030ba:	b2d9      	uxtb	r1, r3
 80030bc:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80030c0:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	b249      	sxtb	r1, r1
 80030cc:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 80030d0:	5499      	strb	r1, [r3, r2]
						  break;
 80030d2:	e020      	b.n	8003116 <StartDefaultTask+0x8ee>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 80030d4:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80030d8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <StartDefaultTask+0x904>)
 80030e4:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80030e8:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 80030ec:	5499      	strb	r1, [r3, r2]
						  break;
 80030ee:	e012      	b.n	8003116 <StartDefaultTask+0x8ee>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <StartDefaultTask+0x904>)
 80030f2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	425b      	negs	r3, r3
 80030fa:	b2d9      	uxtb	r1, r3
 80030fc:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003100:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	b249      	sxtb	r1, r1
 800310c:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8003110:	5499      	strb	r1, [r3, r2]
						  break;						  
 8003112:	e000      	b.n	8003116 <StartDefaultTask+0x8ee>
						  default:
							  break;
 8003114:	bf00      	nop
						  }
					  }
					  break;
 8003116:	e15e      	b.n	80033d6 <StartDefaultTask+0xbae>
 8003118:	0801c4c4 	.word	0x0801c4c4
 800311c:	0801c4d4 	.word	0x0801c4d4
 8003120:	0801c4e4 	.word	0x0801c4e4
 8003124:	0801c4f8 	.word	0x0801c4f8
 8003128:	0801c508 	.word	0x0801c508
 800312c:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN && Gcode_data_available && offset_data_available){
 8003130:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003134:	f103 031d 	add.w	r3, r3, #29
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d128      	bne.n	8003190 <StartDefaultTask+0x968>
 800313e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b14      	cmp	r3, #20
 8003146:	d123      	bne.n	8003190 <StartDefaultTask+0x968>
 8003148:	4bba      	ldr	r3, [pc, #744]	; (8003434 <StartDefaultTask+0xc0c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01f      	beq.n	8003190 <StartDefaultTask+0x968>
 8003150:	4bb9      	ldr	r3, [pc, #740]	; (8003438 <StartDefaultTask+0xc10>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01b      	beq.n	8003190 <StartDefaultTask+0x968>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 8003158:	4bb8      	ldr	r3, [pc, #736]	; (800343c <StartDefaultTask+0xc14>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d106      	bne.n	800316e <StartDefaultTask+0x946>
				  				run_point = 1;
 8003160:	2301      	movs	r3, #1
 8003162:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003166:	f102 0214 	add.w	r2, r2, #20
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e009      	b.n	8003182 <StartDefaultTask+0x95a>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 800316e:	4bb3      	ldr	r3, [pc, #716]	; (800343c <StartDefaultTask+0xc14>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b09      	cmp	r3, #9
 8003174:	d105      	bne.n	8003182 <StartDefaultTask+0x95a>
				  				run_point = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800317c:	f102 0214 	add.w	r2, r2, #20
 8003180:	6013      	str	r3, [r2, #0]
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003182:	2304      	movs	r3, #4
 8003184:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003188:	f102 021d 	add.w	r2, r2, #29
 800318c:	7013      	strb	r3, [r2, #0]
				  			detail_array[0] = GCODE_OFFSET_MISSING;
							respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
				  		  }
				  	  }
				  	  break;
 800318e:	e121      	b.n	80033d4 <StartDefaultTask+0xbac>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT){
 8003190:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003194:	f103 031d 	add.w	r3, r3, #29
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d125      	bne.n	80031ea <StartDefaultTask+0x9c2>
				  			detail_array[0] = GCODE_MODE_NOT_READY;
 800319e:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 80031a2:	2227      	movs	r2, #39	; 0x27
 80031a4:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031a6:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 80031b0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2301      	movs	r3, #1
 80031c0:	2008      	movs	r0, #8
 80031c2:	f7ff f983 	bl	80024cc <commandRespond1>
 80031c6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80031ca:	f103 0304 	add.w	r3, r3, #4
 80031ce:	6018      	str	r0, [r3, #0]
							total_respond_length += respond_lenght;
 80031d0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80031da:	f103 0304 	add.w	r3, r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80031e6:	6013      	str	r3, [r2, #0]
				  	  break;
 80031e8:	e0f4      	b.n	80033d4 <StartDefaultTask+0xbac>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 80031ea:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b0e      	cmp	r3, #14
 80031f2:	d106      	bne.n	8003202 <StartDefaultTask+0x9da>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80031fa:	f102 021d 	add.w	r2, r2, #29
 80031fe:	7013      	strb	r3, [r2, #0]
				  	  break;
 8003200:	e0e8      	b.n	80033d4 <StartDefaultTask+0xbac>
				  		  }else if(Gcode_data_available == 0){
 8003202:	4b8c      	ldr	r3, [pc, #560]	; (8003434 <StartDefaultTask+0xc0c>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d125      	bne.n	8003256 <StartDefaultTask+0xa2e>
				  			detail_array[0] = GCODE_DATA_MISSING;
 800320a:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 800320e:	2226      	movs	r2, #38	; 0x26
 8003210:	701a      	strb	r2, [r3, #0]
						    respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003212:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 800321c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4413      	add	r3, r2
 8003224:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2301      	movs	r3, #1
 800322c:	2008      	movs	r0, #8
 800322e:	f7ff f94d 	bl	80024cc <commandRespond1>
 8003232:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003236:	f103 0304 	add.w	r3, r3, #4
 800323a:	6018      	str	r0, [r3, #0]
						    total_respond_length += respond_lenght;
 800323c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003246:	f103 0304 	add.w	r3, r3, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4413      	add	r3, r2
 800324e:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003252:	6013      	str	r3, [r2, #0]
				  	  break;
 8003254:	e0be      	b.n	80033d4 <StartDefaultTask+0xbac>
				  		  }else if(offset_data_available == 0){
 8003256:	4b78      	ldr	r3, [pc, #480]	; (8003438 <StartDefaultTask+0xc10>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 80ba 	bne.w	80033d4 <StartDefaultTask+0xbac>
				  			detail_array[0] = GCODE_OFFSET_MISSING;
 8003260:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003264:	2225      	movs	r2, #37	; 0x25
 8003266:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003268:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003272:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4413      	add	r3, r2
 800327a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2301      	movs	r3, #1
 8003282:	2008      	movs	r0, #8
 8003284:	f7ff f922 	bl	80024cc <commandRespond1>
 8003288:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800328c:	f103 0304 	add.w	r3, r3, #4
 8003290:	6018      	str	r0, [r3, #0]
							total_respond_length += respond_lenght;
 8003292:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800329c:	f103 0304 	add.w	r3, r3, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80032a8:	6013      	str	r3, [r2, #0]
				  	  break;
 80032aa:	e093      	b.n	80033d4 <StartDefaultTask+0xbac>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 80032ac:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80032b0:	f103 0305 	add.w	r3, r3, #5
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80032ba:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	18d0      	adds	r0, r2, r3
 80032c4:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80032c8:	3328      	adds	r3, #40	; 0x28
 80032ca:	22c0      	movs	r2, #192	; 0xc0
 80032cc:	4619      	mov	r1, r3
 80032ce:	f012 ff57 	bl	8016180 <memcpy>
				  		  //Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
				  		  Object[object_head_pointer].timer_value = duty_cmd.target_point.packet_time_stamp;
 80032d2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80032d6:	f103 0305 	add.w	r3, r3, #5
 80032da:	7819      	ldrb	r1, [r3, #0]
 80032dc:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80032e0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80032e4:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80032e8:	f44f 74c4 	mov.w	r4, #392	; 0x188
 80032ec:	fb04 f101 	mul.w	r1, r4, r1
 80032f0:	4401      	add	r1, r0
 80032f2:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80032f6:	e9c1 2300 	strd	r2, r3, [r1]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 80032fa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80032fe:	f103 0305 	add.w	r3, r3, #5
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	425a      	negs	r2, r3
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	f002 0207 	and.w	r2, r2, #7
 8003310:	bf58      	it	pl
 8003312:	4253      	negpl	r3, r2
 8003314:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003318:	f102 0205 	add.w	r2, r2, #5
 800331c:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 800331e:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003322:	2222      	movs	r2, #34	; 0x22
 8003324:	701a      	strb	r2, [r3, #0]
				  		  detail_array[1] = duty_cmd.target_point.object_type;
 8003326:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800332a:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
 800332e:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003332:	705a      	strb	r2, [r3, #1]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 2, &respond[total_respond_length]);
 8003334:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003338:	6899      	ldr	r1, [r3, #8]
 800333a:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 800333e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4413      	add	r3, r2
 8003346:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2302      	movs	r3, #2
 800334e:	2008      	movs	r0, #8
 8003350:	f7ff f8bc 	bl	80024cc <commandRespond1>
 8003354:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003358:	f103 0304 	add.w	r3, r3, #4
 800335c:	6018      	str	r0, [r3, #0]
						  total_respond_length += respond_lenght;
 800335e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003368:	f103 0304 	add.w	r3, r3, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003374:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 8003376:	e02e      	b.n	80033d6 <StartDefaultTask+0xbae>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8003378:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800337c:	4830      	ldr	r0, [pc, #192]	; (8003440 <StartDefaultTask+0xc18>)
 800337e:	f7ff f90d 	bl	800259c <LOG_REPORT>
 8003382:	e028      	b.n	80033d6 <StartDefaultTask+0xbae>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 8003384:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003388:	222c      	movs	r2, #44	; 0x2c
 800338a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800338c:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003396:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4413      	add	r3, r2
 800339e:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2301      	movs	r3, #1
 80033a6:	2007      	movs	r0, #7
 80033a8:	f7ff f890 	bl	80024cc <commandRespond1>
 80033ac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80033b0:	f103 0304 	add.w	r3, r3, #4
 80033b4:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80033b6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80033c0:	f103 0304 	add.w	r3, r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e002      	b.n	80033d6 <StartDefaultTask+0xbae>
				  	  break;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <StartDefaultTask+0xbae>
				  	  break;
 80033d4:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80033dc:	f102 0207 	add.w	r2, r2, #7
 80033e0:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80033e2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80033e6:	f103 031f 	add.w	r3, r3, #31
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	f201 8254 	bhi.w	800489a <StartDefaultTask+0x2072>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <StartDefaultTask+0xbd0>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	0800340d 	.word	0x0800340d
 80033fc:	08003641 	.word	0x08003641
 8003400:	08003b5d 	.word	0x08003b5d
 8003404:	08003fbb 	.word	0x08003fbb
 8003408:	08003fe3 	.word	0x08003fe3
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800340c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003410:	f103 031b 	add.w	r3, r3, #27
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b03      	cmp	r3, #3
 8003418:	f201 823c 	bhi.w	8004894 <StartDefaultTask+0x206c>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <StartDefaultTask+0xbfc>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	0800363b 	.word	0x0800363b
 8003428:	08003445 	.word	0x08003445
 800342c:	080034db 	.word	0x080034db
 8003430:	080035f7 	.word	0x080035f7
 8003434:	20004405 	.word	0x20004405
 8003438:	20004404 	.word	0x20004404
 800343c:	200085d0 	.word	0x200085d0
 8003440:	0801c51c 	.word	0x0801c51c
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8003444:	4bcc      	ldr	r3, [pc, #816]	; (8003778 <StartDefaultTask+0xf50>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800344c:	f103 031a 	add.w	r3, r3, #26
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f007 fb9f 	bl	800ab98 <scaraKeyInit1>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d135      	bne.n	80034cc <StartDefaultTask+0xca4>
				  run_time = 0;
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 800346c:	f101 0108 	add.w	r1, r1, #8
 8003470:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8003474:	2302      	movs	r3, #2
 8003476:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800347a:	f102 021b 	add.w	r2, r2, #27
 800347e:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 8003480:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003484:	222d      	movs	r2, #45	; 0x2d
 8003486:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003488:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003492:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4413      	add	r3, r2
 800349a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2301      	movs	r3, #1
 80034a2:	2003      	movs	r0, #3
 80034a4:	f7ff f812 	bl	80024cc <commandRespond1>
 80034a8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80034ac:	f103 0304 	add.w	r3, r3, #4
 80034b0:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80034b2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80034bc:	f103 0304 	add.w	r3, r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80034c8:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 80034ca:	e0b7      	b.n	800363c <StartDefaultTask+0xe14>
				  current_key_state = SCARA_KEY_STATE_READY;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80034d2:	f102 021b 	add.w	r2, r2, #27
 80034d6:	7013      	strb	r3, [r2, #0]
		  break;
 80034d8:	e0b0      	b.n	800363c <StartDefaultTask+0xe14>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80034da:	a3a5      	add	r3, pc, #660	; (adr r3, 8003770 <StartDefaultTask+0xf48>)
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 80034e4:	f101 0108 	add.w	r1, r1, #8
 80034e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034ec:	f7fc fece 	bl	800028c <__adddf3>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 80034f8:	f101 0108 	add.w	r1, r1, #8
 80034fc:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003500:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003504:	f103 0308 	add.w	r3, r3, #8
 8003508:	ed93 0b00 	vldr	d0, [r3]
 800350c:	f007 fa3a 	bl	800a984 <scaraIsFinish>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <StartDefaultTask+0xcfc>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8003516:	2303      	movs	r3, #3
 8003518:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800351c:	f102 021b 	add.w	r2, r2, #27
 8003520:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8003522:	e08b      	b.n	800363c <StartDefaultTask+0xe14>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8003524:	4c95      	ldr	r4, [pc, #596]	; (800377c <StartDefaultTask+0xf54>)
 8003526:	4668      	mov	r0, sp
 8003528:	f104 0308 	add.w	r3, r4, #8
 800352c:	22b8      	movs	r2, #184	; 0xb8
 800352e:	4619      	mov	r1, r3
 8003530:	f012 fe26 	bl	8016180 <memcpy>
 8003534:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003538:	4891      	ldr	r0, [pc, #580]	; (8003780 <StartDefaultTask+0xf58>)
 800353a:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 800353e:	f101 0108 	add.w	r1, r1, #8
 8003542:	ed91 0b00 	vldr	d0, [r1]
 8003546:	f006 fbc7 	bl	8009cd8 <scaraFlowDuty>
 800354a:	4603      	mov	r3, r0
 800354c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003550:	f102 0209 	add.w	r2, r2, #9
 8003554:	7013      	strb	r3, [r2, #0]
				  if ( SCARA_STATUS_OK == status) {
 8003556:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800355a:	f103 0309 	add.w	r3, r3, #9
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d113      	bne.n	800358c <StartDefaultTask+0xd64>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003564:	4c85      	ldr	r4, [pc, #532]	; (800377c <StartDefaultTask+0xf54>)
 8003566:	4a86      	ldr	r2, [pc, #536]	; (8003780 <StartDefaultTask+0xf58>)
 8003568:	ab2c      	add	r3, sp, #176	; 0xb0
 800356a:	4611      	mov	r1, r2
 800356c:	22c0      	movs	r2, #192	; 0xc0
 800356e:	4618      	mov	r0, r3
 8003570:	f012 fe06 	bl	8016180 <memcpy>
 8003574:	4668      	mov	r0, sp
 8003576:	f104 0310 	add.w	r3, r4, #16
 800357a:	22b0      	movs	r2, #176	; 0xb0
 800357c:	4619      	mov	r1, r3
 800357e:	f012 fdff 	bl	8016180 <memcpy>
 8003582:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003586:	f003 f8bf 	bl	8006708 <lowlayer_computeAndWritePulse>
		  break;
 800358a:	e057      	b.n	800363c <StartDefaultTask+0xe14>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800358c:	2303      	movs	r3, #3
 800358e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003592:	f102 021b 	add.w	r2, r2, #27
 8003596:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 8003598:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 800359c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80035a0:	f102 0209 	add.w	r2, r2, #9
 80035a4:	7812      	ldrb	r2, [r2, #0]
 80035a6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035a8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 80035b2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2301      	movs	r3, #1
 80035c2:	2006      	movs	r0, #6
 80035c4:	f7fe ff82 	bl	80024cc <commandRespond1>
 80035c8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035cc:	f103 0304 	add.w	r3, r3, #4
 80035d0:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80035d2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035dc:	f103 0304 	add.w	r3, r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80035e8:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 80035ea:	f240 2122 	movw	r1, #546	; 0x222
 80035ee:	4865      	ldr	r0, [pc, #404]	; (8003784 <StartDefaultTask+0xf5c>)
 80035f0:	f7fe ffd4 	bl	800259c <LOG_REPORT>
		  break;
 80035f4:	e022      	b.n	800363c <StartDefaultTask+0xe14>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 80035f6:	4862      	ldr	r0, [pc, #392]	; (8003780 <StartDefaultTask+0xf58>)
 80035f8:	f002 fef6 	bl	80063e8 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 80035fc:	4860      	ldr	r0, [pc, #384]	; (8003780 <StartDefaultTask+0xf58>)
 80035fe:	f001 ffb7 	bl	8005570 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8003602:	2300      	movs	r3, #0
 8003604:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003608:	f102 021b 	add.w	r2, r2, #27
 800360c:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 800360e:	495c      	ldr	r1, [pc, #368]	; (8003780 <StartDefaultTask+0xf58>)
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 800361c:	4958      	ldr	r1, [pc, #352]	; (8003780 <StartDefaultTask+0xf58>)
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 800362a:	4955      	ldr	r1, [pc, #340]	; (8003780 <StartDefaultTask+0xf58>)
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 8003638:	e000      	b.n	800363c <StartDefaultTask+0xe14>
		  break;
 800363a:	bf00      	nop
		  }
	  }
	  break;
 800363c:	f001 b92a 	b.w	8004894 <StartDefaultTask+0x206c>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8003640:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003644:	f103 031e 	add.w	r3, r3, #30
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b02      	cmp	r3, #2
 800364c:	f000 809e 	beq.w	800378c <StartDefaultTask+0xf64>
 8003650:	2b02      	cmp	r3, #2
 8003652:	f300 827b 	bgt.w	8003b4c <StartDefaultTask+0x1324>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <StartDefaultTask+0xe38>
 800365a:	2b01      	cmp	r3, #1
 800365c:	d00d      	beq.n	800367a <StartDefaultTask+0xe52>
 800365e:	e275      	b.n	8003b4c <StartDefaultTask+0x1324>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8003660:	2302      	movs	r3, #2
 8003662:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003666:	f102 021e 	add.w	r2, r2, #30
 800366a:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800366c:	2300      	movs	r3, #0
 800366e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003672:	f102 021d 	add.w	r2, r2, #29
 8003676:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8003678:	e26e      	b.n	8003b58 <StartDefaultTask+0x1330>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800367a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800367e:	f103 031c 	add.w	r3, r3, #28
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d867      	bhi.n	8003758 <StartDefaultTask+0xf30>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <StartDefaultTask+0xe68>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080036b3 	.word	0x080036b3
 8003698:	080036cb 	.word	0x080036cb
 800369c:	080036e5 	.word	0x080036e5
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80036a0:	f002 fc9c 	bl	8005fdc <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036aa:	f102 021c 	add.w	r2, r2, #28
 80036ae:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 80036b0:	e05b      	b.n	800376a <StartDefaultTask+0xf42>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80036b2:	f002 fcc5 	bl	8006040 <lowlayer_scanFlow>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d053      	beq.n	8003764 <StartDefaultTask+0xf3c>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80036bc:	2302      	movs	r3, #2
 80036be:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036c2:	f102 021c 	add.w	r2, r2, #28
 80036c6:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 80036c8:	e04c      	b.n	8003764 <StartDefaultTask+0xf3c>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80036ca:	482d      	ldr	r0, [pc, #180]	; (8003780 <StartDefaultTask+0xf58>)
 80036cc:	f002 fe10 	bl	80062f0 <lowlayer_goToSoftLimit>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d048      	beq.n	8003768 <StartDefaultTask+0xf40>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80036d6:	2303      	movs	r3, #3
 80036d8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036dc:	f102 021c 	add.w	r2, r2, #28
 80036e0:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 80036e2:	e041      	b.n	8003768 <StartDefaultTask+0xf40>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 80036e4:	4826      	ldr	r0, [pc, #152]	; (8003780 <StartDefaultTask+0xf58>)
 80036e6:	f002 fe7f 	bl	80063e8 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80036ea:	4825      	ldr	r0, [pc, #148]	; (8003780 <StartDefaultTask+0xf58>)
 80036ec:	f001 ff40 	bl	8005570 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036f6:	f102 021e 	add.w	r2, r2, #30
 80036fa:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003702:	f102 021d 	add.w	r2, r2, #29
 8003706:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 8003708:	f007 f8ae 	bl	800a868 <scaraSetScanFlag>

						detail_array[0] = NONE;
 800370c:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003710:	222d      	movs	r2, #45	; 0x2d
 8003712:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003714:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003718:	6899      	ldr	r1, [r3, #8]
 800371a:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 800371e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4413      	add	r3, r2
 8003726:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2301      	movs	r3, #1
 800372e:	2005      	movs	r0, #5
 8003730:	f7fe fecc 	bl	80024cc <commandRespond1>
 8003734:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003738:	f103 0304 	add.w	r3, r3, #4
 800373c:	6018      	str	r0, [r3, #0]
						total_respond_length += respond_lenght;
 800373e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003748:	f103 0304 	add.w	r3, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4413      	add	r3, r2
 8003750:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003754:	6013      	str	r3, [r2, #0]
					  }
					  break;
 8003756:	e008      	b.n	800376a <StartDefaultTask+0xf42>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003758:	f240 2166 	movw	r1, #614	; 0x266
 800375c:	480a      	ldr	r0, [pc, #40]	; (8003788 <StartDefaultTask+0xf60>)
 800375e:	f7fe ff1d 	bl	800259c <LOG_REPORT>
						  while(1);
 8003762:	e7fe      	b.n	8003762 <StartDefaultTask+0xf3a>
					  break;
 8003764:	bf00      	nop
 8003766:	e1f7      	b.n	8003b58 <StartDefaultTask+0x1330>
					  break;
 8003768:	bf00      	nop
					  }
				  }

			  }
			  break;
 800376a:	e1f5      	b.n	8003b58 <StartDefaultTask+0x1330>
 800376c:	f3af 8000 	nop.w
 8003770:	40000000 	.word	0x40000000
 8003774:	3f847ae1 	.word	0x3f847ae1
 8003778:	20000060 	.word	0x20000060
 800377c:	20010b00 	.word	0x20010b00
 8003780:	20010c80 	.word	0x20010c80
 8003784:	0801c534 	.word	0x0801c534
 8003788:	0801c540 	.word	0x0801c540

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 800378c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003790:	f103 031d 	add.w	r3, r3, #29
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	f200 81d0 	bhi.w	8003b3c <StartDefaultTask+0x1314>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <StartDefaultTask+0xf7c>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	08003b49 	.word	0x08003b49
 80037a8:	080037b5 	.word	0x080037b5
 80037ac:	08003993 	.word	0x08003993
 80037b0:	08003aaf 	.word	0x08003aaf

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80037b4:	f607 6478 	addw	r4, r7, #3704	; 0xe78
 80037b8:	4668      	mov	r0, sp
 80037ba:	f104 0310 	add.w	r3, r4, #16
 80037be:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80037c2:	4619      	mov	r1, r3
 80037c4:	f012 fcdc 	bl	8016180 <memcpy>
 80037c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037cc:	f003 fb34 	bl	8006e38 <scaraInitDuty>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80037d6:	f102 020b 	add.w	r2, r2, #11
 80037da:	7013      	strb	r3, [r2, #0]
						  if ( SCARA_STATUS_OK == status1) {
 80037dc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80037e0:	f103 030b 	add.w	r3, r3, #11
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 809e 	bne.w	8003928 <StartDefaultTask+0x1100>
							  status2 = scaraTestDuty();
 80037ec:	f006 ffc0 	bl	800a770 <scaraTestDuty>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80037f6:	f102 020a 	add.w	r2, r2, #10
 80037fa:	7013      	strb	r3, [r2, #0]
							  if (SCARA_STATUS_OK == status2) {
 80037fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003800:	f103 030a 	add.w	r3, r3, #10
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d15e      	bne.n	80038c8 <StartDefaultTask+0x10a0>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800380a:	2302      	movs	r3, #2
 800380c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003810:	f102 021d 	add.w	r2, r2, #29
 8003814:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8003822:	f101 0108 	add.w	r1, r1, #8
 8003826:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 800382a:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 800382e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003832:	f102 020b 	add.w	r2, r2, #11
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800383a:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003844:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4413      	add	r3, r2
 800384c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2301      	movs	r3, #1
 8003854:	2008      	movs	r0, #8
 8003856:	f7fe fe39 	bl	80024cc <commandRespond1>
 800385a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800385e:	f103 0304 	add.w	r3, r3, #4
 8003862:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 8003864:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800386e:	f103 0304 	add.w	r3, r3, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4413      	add	r3, r2
 8003876:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800387a:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 800387c:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003880:	222d      	movs	r2, #45	; 0x2d
 8003882:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003884:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 800388e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4413      	add	r3, r2
 8003896:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2301      	movs	r3, #1
 800389e:	2003      	movs	r0, #3
 80038a0:	f7fe fe14 	bl	80024cc <commandRespond1>
 80038a4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80038a8:	f103 0304 	add.w	r3, r3, #4
 80038ac:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 80038ae:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80038b8:	f103 0304 	add.w	r3, r3, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80038c4:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80038c6:	e140      	b.n	8003b4a <StartDefaultTask+0x1322>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80038ce:	f102 021d 	add.w	r2, r2, #29
 80038d2:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status2;
 80038d4:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 80038d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80038dc:	f102 020a 	add.w	r2, r2, #10
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80038e4:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80038e8:	6899      	ldr	r1, [r3, #8]
 80038ea:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 80038ee:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2301      	movs	r3, #1
 80038fe:	2007      	movs	r0, #7
 8003900:	f7fe fde4 	bl	80024cc <commandRespond1>
 8003904:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003908:	f103 0304 	add.w	r3, r3, #4
 800390c:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 800390e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003918:	f103 0304 	add.w	r3, r3, #4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
 8003920:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003924:	6013      	str	r3, [r2, #0]
				  break;
 8003926:	e110      	b.n	8003b4a <StartDefaultTask+0x1322>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003928:	2300      	movs	r3, #0
 800392a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800392e:	f102 021d 	add.w	r2, r2, #29
 8003932:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 8003934:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003938:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800393c:	f102 020b 	add.w	r2, r2, #11
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003944:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003948:	6899      	ldr	r1, [r3, #8]
 800394a:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 800394e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4413      	add	r3, r2
 8003956:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	2301      	movs	r3, #1
 800395e:	2007      	movs	r0, #7
 8003960:	f7fe fdb4 	bl	80024cc <commandRespond1>
 8003964:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003968:	f103 0304 	add.w	r3, r3, #4
 800396c:	6018      	str	r0, [r3, #0]
							total_respond_length += respond_lenght;
 800396e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003978:	f103 0304 	add.w	r3, r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4413      	add	r3, r2
 8003980:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003984:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 8003986:	f240 2199 	movw	r1, #665	; 0x299
 800398a:	48c9      	ldr	r0, [pc, #804]	; (8003cb0 <StartDefaultTask+0x1488>)
 800398c:	f7fe fe06 	bl	800259c <LOG_REPORT>
				  break;
 8003990:	e0db      	b.n	8003b4a <StartDefaultTask+0x1322>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8003992:	a3c5      	add	r3, pc, #788	; (adr r3, 8003ca8 <StartDefaultTask+0x1480>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 800399c:	f101 0108 	add.w	r1, r1, #8
 80039a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039a4:	f7fc fc72 	bl	800028c <__adddf3>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 80039b0:	f101 0108 	add.w	r1, r1, #8
 80039b4:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80039b8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80039bc:	f103 0308 	add.w	r3, r3, #8
 80039c0:	ed93 0b00 	vldr	d0, [r3]
 80039c4:	f006 ffde 	bl	800a984 <scaraIsFinish>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <StartDefaultTask+0x11b4>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80039ce:	2303      	movs	r3, #3
 80039d0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80039d4:	f102 021d 	add.w	r2, r2, #29
 80039d8:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80039da:	e0b6      	b.n	8003b4a <StartDefaultTask+0x1322>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80039dc:	4cb5      	ldr	r4, [pc, #724]	; (8003cb4 <StartDefaultTask+0x148c>)
 80039de:	4668      	mov	r0, sp
 80039e0:	f104 0308 	add.w	r3, r4, #8
 80039e4:	22b8      	movs	r2, #184	; 0xb8
 80039e6:	4619      	mov	r1, r3
 80039e8:	f012 fbca 	bl	8016180 <memcpy>
 80039ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80039f0:	48b1      	ldr	r0, [pc, #708]	; (8003cb8 <StartDefaultTask+0x1490>)
 80039f2:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 80039f6:	f101 0108 	add.w	r1, r1, #8
 80039fa:	ed91 0b00 	vldr	d0, [r1]
 80039fe:	f006 f96b 	bl	8009cd8 <scaraFlowDuty>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003a08:	f102 020c 	add.w	r2, r2, #12
 8003a0c:	7013      	strb	r3, [r2, #0]
							  if ( SCARA_STATUS_OK == status) {
 8003a0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003a12:	f103 030c 	add.w	r3, r3, #12
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d113      	bne.n	8003a44 <StartDefaultTask+0x121c>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003a1c:	4ca5      	ldr	r4, [pc, #660]	; (8003cb4 <StartDefaultTask+0x148c>)
 8003a1e:	4aa6      	ldr	r2, [pc, #664]	; (8003cb8 <StartDefaultTask+0x1490>)
 8003a20:	ab2c      	add	r3, sp, #176	; 0xb0
 8003a22:	4611      	mov	r1, r2
 8003a24:	22c0      	movs	r2, #192	; 0xc0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f012 fbaa 	bl	8016180 <memcpy>
 8003a2c:	4668      	mov	r0, sp
 8003a2e:	f104 0310 	add.w	r3, r4, #16
 8003a32:	22b0      	movs	r2, #176	; 0xb0
 8003a34:	4619      	mov	r1, r3
 8003a36:	f012 fba3 	bl	8016180 <memcpy>
 8003a3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a3e:	f002 fe63 	bl	8006708 <lowlayer_computeAndWritePulse>
				  break;
 8003a42:	e082      	b.n	8003b4a <StartDefaultTask+0x1322>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003a4a:	f102 021d 	add.w	r2, r2, #29
 8003a4e:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 8003a50:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003a54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003a58:	f102 020c 	add.w	r2, r2, #12
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a60:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003a6a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4413      	add	r3, r2
 8003a72:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	2006      	movs	r0, #6
 8003a7c:	f7fe fd26 	bl	80024cc <commandRespond1>
 8003a80:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a84:	f103 0304 	add.w	r3, r3, #4
 8003a88:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8003a8a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a94:	f103 0304 	add.w	r3, r3, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003aa0:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 8003aa2:	f240 21b1 	movw	r1, #689	; 0x2b1
 8003aa6:	4885      	ldr	r0, [pc, #532]	; (8003cbc <StartDefaultTask+0x1494>)
 8003aa8:	f7fe fd78 	bl	800259c <LOG_REPORT>
				  break;
 8003aac:	e04d      	b.n	8003b4a <StartDefaultTask+0x1322>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8003aae:	4882      	ldr	r0, [pc, #520]	; (8003cb8 <StartDefaultTask+0x1490>)
 8003ab0:	f002 fc9a 	bl	80063e8 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003ab4:	4880      	ldr	r0, [pc, #512]	; (8003cb8 <StartDefaultTask+0x1490>)
 8003ab6:	f001 fd5b 	bl	8005570 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003ac0:	f102 021d 	add.w	r2, r2, #29
 8003ac4:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 8003ac6:	497c      	ldr	r1, [pc, #496]	; (8003cb8 <StartDefaultTask+0x1490>)
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 8003ad4:	4978      	ldr	r1, [pc, #480]	; (8003cb8 <StartDefaultTask+0x1490>)
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 8003ae2:	4975      	ldr	r1, [pc, #468]	; (8003cb8 <StartDefaultTask+0x1490>)
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 8003af0:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003af4:	222d      	movs	r2, #45	; 0x2d
 8003af6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003af8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003afc:	6899      	ldr	r1, [r3, #8]
 8003afe:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003b02:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2301      	movs	r3, #1
 8003b12:	2005      	movs	r0, #5
 8003b14:	f7fe fcda 	bl	80024cc <commandRespond1>
 8003b18:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003b1c:	f103 0304 	add.w	r3, r3, #4
 8003b20:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003b22:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003b2c:	f103 0304 	add.w	r3, r3, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003b38:	6013      	str	r3, [r2, #0]
					  }
				  break;
 8003b3a:	e006      	b.n	8003b4a <StartDefaultTask+0x1322>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003b3c:	f240 21c9 	movw	r1, #713	; 0x2c9
 8003b40:	485f      	ldr	r0, [pc, #380]	; (8003cc0 <StartDefaultTask+0x1498>)
 8003b42:	f7fe fd2b 	bl	800259c <LOG_REPORT>
						  while(1);
 8003b46:	e7fe      	b.n	8003b46 <StartDefaultTask+0x131e>
				  break;
 8003b48:	bf00      	nop
					  }
				  }

			  }
			  break;
 8003b4a:	e005      	b.n	8003b58 <StartDefaultTask+0x1330>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003b4c:	f240 21d3 	movw	r1, #723	; 0x2d3
 8003b50:	485c      	ldr	r0, [pc, #368]	; (8003cc4 <StartDefaultTask+0x149c>)
 8003b52:	f7fe fd23 	bl	800259c <LOG_REPORT>
				  while(1);
 8003b56:	e7fe      	b.n	8003b56 <StartDefaultTask+0x132e>
			  }
		  }
	  }
	  break;
 8003b58:	f000 be9f 	b.w	800489a <StartDefaultTask+0x2072>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003b5c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003b60:	f103 031d 	add.w	r3, r3, #29
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	f200 8224 	bhi.w	8003fb4 <StartDefaultTask+0x178c>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <StartDefaultTask+0x134c>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003fb5 	.word	0x08003fb5
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003de3 	.word	0x08003de3
 8003b80:	08003fb5 	.word	0x08003fb5
 8003b84:	08003c2d 	.word	0x08003c2d
		  {
		  case SCARA_DUTY_STATE_INIT:{
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 8003b88:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <StartDefaultTask+0x148c>)
 8003b8a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	; (8003cc8 <StartDefaultTask+0x14a0>)
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f7fc fb78 	bl	8000288 <__aeabi_dsub>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	61ba      	str	r2, [r7, #24]
 8003b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	4b48      	ldr	r3, [pc, #288]	; (8003ccc <StartDefaultTask+0x14a4>)
 8003baa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bae:	f7fc ff95 	bl	8000adc <__aeabi_dcmplt>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d100      	bne.n	8003bba <StartDefaultTask+0x1392>
				  current_duty_state = SCARA_DUTY_STATE_READY;
			  }
		  }
		  break;
 8003bb8:	e1fd      	b.n	8003fb6 <StartDefaultTask+0x178e>
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <StartDefaultTask+0x148c>)
 8003bbc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <StartDefaultTask+0x14a8>)
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f7fc fb5f 	bl	8000288 <__aeabi_dsub>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	613a      	str	r2, [r7, #16]
 8003bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	4b3c      	ldr	r3, [pc, #240]	; (8003ccc <StartDefaultTask+0x14a4>)
 8003bdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003be0:	f7fc ff7c 	bl	8000adc <__aeabi_dcmplt>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d100      	bne.n	8003bec <StartDefaultTask+0x13c4>
		  break;
 8003bea:	e1e4      	b.n	8003fb6 <StartDefaultTask+0x178e>
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 8003bec:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <StartDefaultTask+0x148c>)
 8003bee:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <StartDefaultTask+0x14ac>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f7fc fb46 	bl	8000288 <__aeabi_dsub>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	60ba      	str	r2, [r7, #8]
 8003c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	4b2f      	ldr	r3, [pc, #188]	; (8003ccc <StartDefaultTask+0x14a4>)
 8003c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c12:	f7fc ff63 	bl	8000adc <__aeabi_dcmplt>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d100      	bne.n	8003c1e <StartDefaultTask+0x13f6>
		  break;
 8003c1c:	e1cb      	b.n	8003fb6 <StartDefaultTask+0x178e>
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003c24:	f102 021d 	add.w	r2, r2, #29
 8003c28:	7013      	strb	r3, [r2, #0]
		  break;
 8003c2a:	e1c4      	b.n	8003fb6 <StartDefaultTask+0x178e>
		  case SCARA_DUTY_STATE_READY:{
			  // do nothing wait for hot key
		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, run_point);
 8003c2c:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003c30:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003c34:	f102 0214 	add.w	r2, r2, #20
 8003c38:	6811      	ldr	r1, [r2, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 f87c 	bl	8004d38 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 8003c40:	f607 6478 	addw	r4, r7, #3704	; 0xe78
 8003c44:	4668      	mov	r0, sp
 8003c46:	f104 0310 	add.w	r3, r4, #16
 8003c4a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f012 fa96 	bl	8016180 <memcpy>
 8003c54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c58:	f003 f8ee 	bl	8006e38 <scaraInitDuty>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003c62:	f102 020e 	add.w	r2, r2, #14
 8003c66:	7013      	strb	r3, [r2, #0]
			  if(status == SCARA_STATUS_OK){
 8003c68:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003c6c:	f103 030e 	add.w	r3, r3, #14
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 8085 	bne.w	8003d82 <StartDefaultTask+0x155a>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR || duty_cmd.trajec_type == DUTY_TRAJECTORY_BEZIER_CURVE){
 8003c78:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003c7c:	7c1b      	ldrb	r3, [r3, #16]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d004      	beq.n	8003c8c <StartDefaultTask+0x1464>
 8003c82:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003c86:	7c1b      	ldrb	r3, [r3, #16]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d125      	bne.n	8003cd8 <StartDefaultTask+0x14b0>
					  run_time = 0;
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8003c98:	f101 0108 	add.w	r1, r1, #8
 8003c9c:	e9c1 2300 	strd	r2, r3, [r1]
 8003ca0:	e028      	b.n	8003cf4 <StartDefaultTask+0x14cc>
 8003ca2:	bf00      	nop
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	40000000 	.word	0x40000000
 8003cac:	3f847ae1 	.word	0x3f847ae1
 8003cb0:	0801c550 	.word	0x0801c550
 8003cb4:	20010b00 	.word	0x20010b00
 8003cb8:	20010c80 	.word	0x20010c80
 8003cbc:	0801c55c 	.word	0x0801c55c
 8003cc0:	0801c540 	.word	0x0801c540
 8003cc4:	0801c568 	.word	0x0801c568
 8003cc8:	20008fa8 	.word	0x20008fa8
 8003ccc:	40100000 	.word	0x40100000
 8003cd0:	2000fd50 	.word	0x2000fd50
 8003cd4:	2000fd40 	.word	0x2000fd40
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 8003cd8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003cdc:	7c1b      	ldrb	r3, [r3, #16]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d108      	bne.n	8003cf4 <StartDefaultTask+0x14cc>
					  run_time = last_T;
 8003ce2:	4bcd      	ldr	r3, [pc, #820]	; (8004018 <StartDefaultTask+0x17f0>)
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8003cec:	f101 0108 	add.w	r1, r1, #8
 8003cf0:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003cfa:	f102 021d 	add.w	r2, r2, #29
 8003cfe:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)((run_point+1) * 100.0f / total_num_of_point );
 8003d00:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003d04:	f103 0314 	add.w	r3, r3, #20
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	ee07 3a90 	vmov	s15, r3
 8003d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d14:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 800401c <StartDefaultTask+0x17f4>
 8003d18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d1c:	4bc0      	ldr	r3, [pc, #768]	; (8004020 <StartDefaultTask+0x17f8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d30:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d34:	793b      	ldrb	r3, [r7, #4]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003d3c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003d3e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003d42:	6899      	ldr	r1, [r3, #8]
 8003d44:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003d48:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2301      	movs	r3, #1
 8003d58:	200b      	movs	r0, #11
 8003d5a:	f7fe fbb7 	bl	80024cc <commandRespond1>
 8003d5e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003d62:	f103 0304 	add.w	r3, r3, #4
 8003d66:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003d68:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003d72:	f103 0304 	add.w	r3, r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e02f      	b.n	8003de2 <StartDefaultTask+0x15ba>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003d82:	2303      	movs	r3, #3
 8003d84:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003d88:	f102 021d 	add.w	r2, r2, #29
 8003d8c:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 8003d8e:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003d92:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003d96:	f102 020e 	add.w	r2, r2, #14
 8003d9a:	7812      	ldrb	r2, [r2, #0]
 8003d9c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003d9e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003da8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2301      	movs	r3, #1
 8003db8:	2007      	movs	r0, #7
 8003dba:	f7fe fb87 	bl	80024cc <commandRespond1>
 8003dbe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003dc2:	f103 0304 	add.w	r3, r3, #4
 8003dc6:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003dc8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003dd2:	f103 0304 	add.w	r3, r3, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003dde:	6013      	str	r3, [r2, #0]
				  break;
 8003de0:	e0e9      	b.n	8003fb6 <StartDefaultTask+0x178e>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003de2:	a38b      	add	r3, pc, #556	; (adr r3, 8004010 <StartDefaultTask+0x17e8>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8003dec:	f101 0108 	add.w	r1, r1, #8
 8003df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003df4:	f7fc fa4a 	bl	800028c <__adddf3>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8003e00:	f101 0108 	add.w	r1, r1, #8
 8003e04:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003e08:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003e0c:	f103 0308 	add.w	r3, r3, #8
 8003e10:	ed93 0b00 	vldr	d0, [r3]
 8003e14:	f006 fdb6 	bl	800a984 <scaraIsFinish>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d066      	beq.n	8003eec <StartDefaultTask+0x16c4>
				if(run_point >= total_num_of_point-1){
 8003e1e:	4b80      	ldr	r3, [pc, #512]	; (8004020 <StartDefaultTask+0x17f8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003e28:	f102 0214 	add.w	r2, r2, #20
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	db0f      	blt.n	8003e52 <StartDefaultTask+0x162a>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003e38:	f102 021d 	add.w	r2, r2, #29
 8003e3c:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003e3e:	4879      	ldr	r0, [pc, #484]	; (8004024 <StartDefaultTask+0x17fc>)
 8003e40:	f002 fad2 	bl	80063e8 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003e44:	4877      	ldr	r0, [pc, #476]	; (8004024 <StartDefaultTask+0x17fc>)
 8003e46:	f001 fb93 	bl	8005570 <kinematicForward>
				    Gcode_data_available = 0;
 8003e4a:	4b77      	ldr	r3, [pc, #476]	; (8004028 <StartDefaultTask+0x1800>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003e50:	e0b1      	b.n	8003fb6 <StartDefaultTask+0x178e>
					if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003e52:	4b76      	ldr	r3, [pc, #472]	; (800402c <StartDefaultTask+0x1804>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b09      	cmp	r3, #9
 8003e58:	d11a      	bne.n	8003e90 <StartDefaultTask+0x1668>
						accumulate_update(Gcode_Cor[run_point++]);
 8003e5a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003e5e:	f103 0314 	add.w	r3, r3, #20
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	1c53      	adds	r3, r2, #1
 8003e66:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003e6a:	f101 0114 	add.w	r1, r1, #20
 8003e6e:	600b      	str	r3, [r1, #0]
 8003e70:	496f      	ldr	r1, [pc, #444]	; (8004030 <StartDefaultTask+0x1808>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	466c      	mov	r4, sp
 8003e7e:	f103 0210 	add.w	r2, r3, #16
 8003e82:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e8a:	f001 fa81 	bl	8005390 <accumulate_update>
 8003e8e:	e00a      	b.n	8003ea6 <StartDefaultTask+0x167e>
						run_point++;
 8003e90:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003e94:	f103 0314 	add.w	r3, r3, #20
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003ea0:	f102 0214 	add.w	r2, r2, #20
 8003ea4:	6013      	str	r3, [r2, #0]
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003eac:	f102 021d 	add.w	r2, r2, #29
 8003eb0:	7013      	strb	r3, [r2, #0]
					positionNext.x = duty_cmd.target_point.x;
 8003eb2:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003eb6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003eba:	495a      	ldr	r1, [pc, #360]	; (8004024 <StartDefaultTask+0x17fc>)
 8003ebc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					positionNext.y = duty_cmd.target_point.y;
 8003ec0:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003ec4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003ec8:	4956      	ldr	r1, [pc, #344]	; (8004024 <StartDefaultTask+0x17fc>)
 8003eca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					positionNext.z = duty_cmd.target_point.z;
 8003ece:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003ed2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003ed6:	4953      	ldr	r1, [pc, #332]	; (8004024 <StartDefaultTask+0x17fc>)
 8003ed8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
					positionNext.roll = duty_cmd.target_point.roll;
 8003edc:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003ee0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003ee4:	494f      	ldr	r1, [pc, #316]	; (8004024 <StartDefaultTask+0x17fc>)
 8003ee6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		  break;
 8003eea:	e064      	b.n	8003fb6 <StartDefaultTask+0x178e>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003eec:	4c51      	ldr	r4, [pc, #324]	; (8004034 <StartDefaultTask+0x180c>)
 8003eee:	4668      	mov	r0, sp
 8003ef0:	f104 0308 	add.w	r3, r4, #8
 8003ef4:	22b8      	movs	r2, #184	; 0xb8
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f012 f942 	bl	8016180 <memcpy>
 8003efc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003f00:	4848      	ldr	r0, [pc, #288]	; (8004024 <StartDefaultTask+0x17fc>)
 8003f02:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8003f06:	f101 0108 	add.w	r1, r1, #8
 8003f0a:	ed91 0b00 	vldr	d0, [r1]
 8003f0e:	f005 fee3 	bl	8009cd8 <scaraFlowDuty>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003f18:	f102 020d 	add.w	r2, r2, #13
 8003f1c:	7013      	strb	r3, [r2, #0]
				if ( SCARA_STATUS_OK == status) {
 8003f1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003f22:	f103 030d 	add.w	r3, r3, #13
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d113      	bne.n	8003f54 <StartDefaultTask+0x172c>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003f2c:	4c41      	ldr	r4, [pc, #260]	; (8004034 <StartDefaultTask+0x180c>)
 8003f2e:	4a3d      	ldr	r2, [pc, #244]	; (8004024 <StartDefaultTask+0x17fc>)
 8003f30:	ab2c      	add	r3, sp, #176	; 0xb0
 8003f32:	4611      	mov	r1, r2
 8003f34:	22c0      	movs	r2, #192	; 0xc0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f012 f922 	bl	8016180 <memcpy>
 8003f3c:	4668      	mov	r0, sp
 8003f3e:	f104 0310 	add.w	r3, r4, #16
 8003f42:	22b0      	movs	r2, #176	; 0xb0
 8003f44:	4619      	mov	r1, r3
 8003f46:	f012 f91b 	bl	8016180 <memcpy>
 8003f4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f4e:	f002 fbdb 	bl	8006708 <lowlayer_computeAndWritePulse>
		  break;
 8003f52:	e030      	b.n	8003fb6 <StartDefaultTask+0x178e>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003f54:	2303      	movs	r3, #3
 8003f56:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003f5a:	f102 021d 	add.w	r2, r2, #29
 8003f5e:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003f60:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8003f64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003f68:	f102 020d 	add.w	r2, r2, #13
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003f70:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003f74:	6899      	ldr	r1, [r3, #8]
 8003f76:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8003f7a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	2007      	movs	r0, #7
 8003f8c:	f7fe fa9e 	bl	80024cc <commandRespond1>
 8003f90:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003f94:	f103 0304 	add.w	r3, r3, #4
 8003f98:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 8003f9a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003fa4:	f103 0304 	add.w	r3, r3, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8003fb0:	6013      	str	r3, [r2, #0]
		  break;
 8003fb2:	e000      	b.n	8003fb6 <StartDefaultTask+0x178e>

		  }
		  break;
		  
		  default:
			  break;
 8003fb4:	bf00      	nop
		  }
	  }

	  break;
 8003fb6:	f000 bc70 	b.w	800489a <StartDefaultTask+0x2072>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003fba:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8003fbe:	f993 0000 	ldrsb.w	r0, [r3]
 8003fc2:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8003fc6:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003fca:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8003fce:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003fd2:	f607 6374 	addw	r3, r7, #3700	; 0xe74
 8003fd6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fda:	f002 fd3d 	bl	8006a58 <lowlayer_writePulse>
	  }
	  break;
 8003fde:	f000 bc5c 	b.w	800489a <StartDefaultTask+0x2072>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003fe2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003fe6:	f103 031d 	add.w	r3, r3, #29
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	f200 8452 	bhi.w	8004898 <StartDefaultTask+0x2070>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <StartDefaultTask+0x17d4>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	08004039 	.word	0x08004039
 8004000:	080046f9 	.word	0x080046f9
 8004004:	08004889 	.word	0x08004889
 8004008:	08004085 	.word	0x08004085
 800400c:	f3af 8000 	nop.w
 8004010:	40000000 	.word	0x40000000
 8004014:	3f847ae1 	.word	0x3f847ae1
 8004018:	2000fd48 	.word	0x2000fd48
 800401c:	42c80000 	.word	0x42c80000
 8004020:	20008fb0 	.word	0x20008fb0
 8004024:	20010c80 	.word	0x20010c80
 8004028:	20004405 	.word	0x20004405
 800402c:	200085d0 	.word	0x200085d0
 8004030:	20008fc8 	.word	0x20008fc8
 8004034:	20010b00 	.word	0x20010b00
		  case SCARA_DUTY_STATE_INIT:{
			  //HAL_TIM_Base_Start(&htim2);
			  object_tail_pointer = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800403e:	f102 0206 	add.w	r2, r2, #6
 8004042:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800404a:	f102 0205 	add.w	r2, r2, #5
 800404e:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8004050:	2300      	movs	r3, #0
 8004052:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004056:	f102 0207 	add.w	r2, r2, #7
 800405a:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 800405c:	2304      	movs	r3, #4
 800405e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004062:	f102 021d 	add.w	r2, r2, #29
 8004066:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8004068:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800406c:	2204      	movs	r2, #4
 800406e:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8004070:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8004074:	2200      	movs	r2, #0
 8004076:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004078:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800407c:	2200      	movs	r2, #0
 800407e:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8004080:	f000 bc07 	b.w	8004892 <StartDefaultTask+0x206a>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8004084:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004088:	f103 0306 	add.w	r3, r3, #6
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004092:	f103 0305 	add.w	r3, r3, #5
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	f000 83f7 	beq.w	800488c <StartDefaultTask+0x2064>
				  switch(operation_state){
 800409e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80040a2:	f103 0307 	add.w	r3, r3, #7
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b07      	cmp	r3, #7
 80040aa:	f200 8212 	bhi.w	80044d2 <StartDefaultTask+0x1caa>
 80040ae:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <StartDefaultTask+0x188c>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	080040d5 	.word	0x080040d5
 80040b8:	08004209 	.word	0x08004209
 80040bc:	08004241 	.word	0x08004241
 80040c0:	0800425b 	.word	0x0800425b
 80040c4:	080042c9 	.word	0x080042c9
 80040c8:	08004449 	.word	0x08004449
 80040cc:	08004481 	.word	0x08004481
 80040d0:	0800449b 	.word	0x0800449b
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = 1e-6*((uint64_t)(GET_MICROS - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 80040d4:	4b72      	ldr	r3, [pc, #456]	; (80042a0 <StartDefaultTask+0x1a78>)
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <StartDefaultTask+0x1a7c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4972      	ldr	r1, [pc, #456]	; (80042a8 <StartDefaultTask+0x1a80>)
 80040de:	fba1 1303 	umull	r1, r3, r1, r3
 80040e2:	0c9b      	lsrs	r3, r3, #18
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80040f2:	f103 0306 	add.w	r3, r3, #6
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80040fc:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004100:	fb04 f303 	mul.w	r3, r4, r3
 8004104:	4413      	add	r3, r2
 8004106:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	ebb0 0a02 	subs.w	sl, r0, r2
 8004112:	eb61 0b03 	sbc.w	fp, r1, r3
 8004116:	4650      	mov	r0, sl
 8004118:	4659      	mov	r1, fp
 800411a:	f7fc fa37 	bl	800058c <__aeabi_ul2d>
 800411e:	a35e      	add	r3, pc, #376	; (adr r3, 8004298 <StartDefaultTask+0x1a70>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc fa68 	bl	80005f8 <__aeabi_dmul>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	4b5e      	ldr	r3, [pc, #376]	; (80042ac <StartDefaultTask+0x1a84>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc f8a9 	bl	800028c <__adddf3>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	4b5b      	ldr	r3, [pc, #364]	; (80042b0 <StartDefaultTask+0x1a88>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f7fc f8a0 	bl	800028c <__adddf3>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <StartDefaultTask+0x1a8c>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc f897 	bl	800028c <__adddf3>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8004166:	f101 0110 	add.w	r1, r1, #16
 800416a:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 800416e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004172:	f103 0306 	add.w	r3, r3, #6
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800417c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3350      	adds	r3, #80	; 0x50
 8004188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800418c:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <StartDefaultTask+0x1a90>)
 800418e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004192:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004196:	f103 0310 	add.w	r3, r3, #16
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f7fc fa2b 	bl	80005f8 <__aeabi_dmul>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 80041aa:	f101 0106 	add.w	r1, r1, #6
 80041ae:	780c      	ldrb	r4, [r1, #0]
 80041b0:	4640      	mov	r0, r8
 80041b2:	4649      	mov	r1, r9
 80041b4:	f7fc f868 	bl	8000288 <__aeabi_dsub>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80041c0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80041c4:	fb01 f104 	mul.w	r1, r1, r4
 80041c8:	4401      	add	r1, r0
 80041ca:	3150      	adds	r1, #80	; 0x50
 80041cc:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80041d0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80041d4:	f103 0306 	add.w	r3, r3, #6
 80041d8:	7819      	ldrb	r1, [r3, #0]
 80041da:	4b38      	ldr	r3, [pc, #224]	; (80042bc <StartDefaultTask+0x1a94>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80041e4:	f44f 74c4 	mov.w	r4, #392	; 0x188
 80041e8:	fb04 f101 	mul.w	r1, r4, r1
 80041ec:	4401      	add	r1, r0
 80041ee:	3158      	adds	r1, #88	; 0x58
 80041f0:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 80041f4:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <StartDefaultTask+0x1a84>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80041fe:	f101 0118 	add.w	r1, r1, #24
 8004202:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004206:	e164      	b.n	80044d2 <StartDefaultTask+0x1caa>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8004208:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800420c:	f103 0306 	add.w	r3, r3, #6
 8004210:	7819      	ldrb	r1, [r3, #0]
 8004212:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <StartDefaultTask+0x1a98>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800421c:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004220:	fb04 f101 	mul.w	r1, r4, r1
 8004224:	4401      	add	r1, r0
 8004226:	3158      	adds	r1, #88	; 0x58
 8004228:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <StartDefaultTask+0x1a88>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004236:	f101 0118 	add.w	r1, r1, #24
 800423a:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800423e:	e148      	b.n	80044d2 <StartDefaultTask+0x1caa>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8004240:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <StartDefaultTask+0x1a8c>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 800424a:	f101 0118 	add.w	r1, r1, #24
 800424e:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8004252:	2001      	movs	r0, #1
 8004254:	f006 fb14 	bl	800a880 <scaraSetOutput>
					  }
					  break;
 8004258:	e13b      	b.n	80044d2 <StartDefaultTask+0x1caa>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800425a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800425e:	f103 0306 	add.w	r3, r3, #6
 8004262:	7819      	ldrb	r1, [r3, #0]
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <StartDefaultTask+0x1a94>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800426e:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004272:	fb04 f101 	mul.w	r1, r4, r1
 8004276:	4401      	add	r1, r0
 8004278:	3158      	adds	r1, #88	; 0x58
 800427a:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <StartDefaultTask+0x1a9c>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004288:	f101 0118 	add.w	r1, r1, #24
 800428c:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004290:	e11f      	b.n	80044d2 <StartDefaultTask+0x1caa>
 8004292:	bf00      	nop
 8004294:	f3af 8000 	nop.w
 8004298:	a0b5ed8d 	.word	0xa0b5ed8d
 800429c:	3eb0c6f7 	.word	0x3eb0c6f7
 80042a0:	e0001000 	.word	0xe0001000
 80042a4:	2000408c 	.word	0x2000408c
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	20000028 	.word	0x20000028
 80042b0:	20000010 	.word	0x20000010
 80042b4:	20000030 	.word	0x20000030
 80042b8:	20000058 	.word	0x20000058
 80042bc:	20000040 	.word	0x20000040
 80042c0:	20000048 	.word	0x20000048
 80042c4:	20000018 	.word	0x20000018
					  case SCARA_MOVE_TO_SLOT :{
						  ObjectType current_type = Object[object_tail_pointer].object_position.object_type;
 80042c8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80042cc:	f103 0306 	add.w	r3, r3, #6
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80042d6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	33b8      	adds	r3, #184	; 0xb8
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80042e8:	f102 021f 	add.w	r2, r2, #31
 80042ec:	7013      	strb	r3, [r2, #0]
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[current_type].posx + Slot_Placement[current_type]*placement_spacing;
 80042ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80042f2:	f103 031f 	add.w	r3, r3, #31
 80042f6:	7819      	ldrb	r1, [r3, #0]
 80042f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042fc:	3a08      	subs	r2, #8
 80042fe:	460b      	mov	r3, r1
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	440b      	add	r3, r1
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	e9d3 8900 	ldrd	r8, r9, [r3]
 800430c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004310:	f103 031f 	add.w	r3, r3, #31
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800431a:	3b10      	subs	r3, #16
 800431c:	5c9b      	ldrb	r3, [r3, r2]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc f900 	bl	8000524 <__aeabi_i2d>
 8004324:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004328:	f103 0308 	add.w	r3, r3, #8
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fc f962 	bl	80005f8 <__aeabi_dmul>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 800433c:	f101 0106 	add.w	r1, r1, #6
 8004340:	780c      	ldrb	r4, [r1, #0]
 8004342:	4640      	mov	r0, r8
 8004344:	4649      	mov	r1, r9
 8004346:	f7fb ffa1 	bl	800028c <__adddf3>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8004352:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004356:	fb01 f104 	mul.w	r1, r1, r4
 800435a:	4401      	add	r1, r0
 800435c:	3148      	adds	r1, #72	; 0x48
 800435e:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[current_type].posy;
 8004362:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004366:	f103 031f 	add.w	r3, r3, #31
 800436a:	7819      	ldrb	r1, [r3, #0]
 800436c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004370:	f103 0306 	add.w	r3, r3, #6
 8004374:	781c      	ldrb	r4, [r3, #0]
 8004376:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800437a:	3a08      	subs	r2, #8
 800437c:	460b      	mov	r3, r1
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	440b      	add	r3, r1
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	3308      	adds	r3, #8
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8004390:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004394:	fb01 f104 	mul.w	r1, r1, r4
 8004398:	4401      	add	r1, r0
 800439a:	3150      	adds	r1, #80	; 0x50
 800439c:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[current_type].roll;
 80043a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80043a4:	f103 031f 	add.w	r3, r3, #31
 80043a8:	7819      	ldrb	r1, [r3, #0]
 80043aa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80043ae:	f103 0306 	add.w	r3, r3, #6
 80043b2:	781c      	ldrb	r4, [r3, #0]
 80043b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043b8:	3a08      	subs	r2, #8
 80043ba:	460b      	mov	r3, r1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	440b      	add	r3, r1
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	3310      	adds	r3, #16
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80043ce:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80043d2:	fb01 f104 	mul.w	r1, r1, r4
 80043d6:	4401      	add	r1, r0
 80043d8:	3160      	adds	r1, #96	; 0x60
 80043da:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80043de:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80043e2:	f103 0306 	add.w	r3, r3, #6
 80043e6:	7819      	ldrb	r1, [r3, #0]
 80043e8:	4bbb      	ldr	r3, [pc, #748]	; (80046d8 <StartDefaultTask+0x1eb0>)
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80043f2:	f44f 74c4 	mov.w	r4, #392	; 0x188
 80043f6:	fb04 f101 	mul.w	r1, r4, r1
 80043fa:	4401      	add	r1, r0
 80043fc:	3158      	adds	r1, #88	; 0x58
 80043fe:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8004402:	4bb6      	ldr	r3, [pc, #728]	; (80046dc <StartDefaultTask+0x1eb4>)
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 800440c:	f101 0118 	add.w	r1, r1, #24
 8004410:	e9c1 2300 	strd	r2, r3, [r1]
						  Slot_Placement[current_type] = (Slot_Placement[current_type] + 1)%2;
 8004414:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004418:	f103 031f 	add.w	r3, r3, #31
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004422:	3b10      	subs	r3, #16
 8004424:	5c9b      	ldrb	r3, [r3, r2]
 8004426:	3301      	adds	r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	bfb8      	it	lt
 8004430:	425b      	neglt	r3, r3
 8004432:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004436:	f102 021f 	add.w	r2, r2, #31
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	b2d9      	uxtb	r1, r3
 800443e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004442:	3b10      	subs	r3, #16
 8004444:	5499      	strb	r1, [r3, r2]
					  }
					  break;
 8004446:	e044      	b.n	80044d2 <StartDefaultTask+0x1caa>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8004448:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800444c:	f103 0306 	add.w	r3, r3, #6
 8004450:	7819      	ldrb	r1, [r3, #0]
 8004452:	4ba3      	ldr	r3, [pc, #652]	; (80046e0 <StartDefaultTask+0x1eb8>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800445c:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004460:	fb04 f101 	mul.w	r1, r4, r1
 8004464:	4401      	add	r1, r0
 8004466:	3158      	adds	r1, #88	; 0x58
 8004468:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 800446c:	4b9d      	ldr	r3, [pc, #628]	; (80046e4 <StartDefaultTask+0x1ebc>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004476:	f101 0118 	add.w	r1, r1, #24
 800447a:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800447e:	e028      	b.n	80044d2 <StartDefaultTask+0x1caa>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8004480:	4b99      	ldr	r3, [pc, #612]	; (80046e8 <StartDefaultTask+0x1ec0>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 800448a:	f101 0118 	add.w	r1, r1, #24
 800448e:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 8004492:	2000      	movs	r0, #0
 8004494:	f006 f9f4 	bl	800a880 <scaraSetOutput>
					  }
					  break;
 8004498:	e01b      	b.n	80044d2 <StartDefaultTask+0x1caa>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 800449a:	4b94      	ldr	r3, [pc, #592]	; (80046ec <StartDefaultTask+0x1ec4>)
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80044a4:	f101 0118 	add.w	r1, r1, #24
 80044a8:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80044ac:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80044b0:	f103 0306 	add.w	r3, r3, #6
 80044b4:	7819      	ldrb	r1, [r3, #0]
 80044b6:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <StartDefaultTask+0x1eb0>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80044c0:	f44f 74c4 	mov.w	r4, #392	; 0x188
 80044c4:	fb04 f101 	mul.w	r1, r4, r1
 80044c8:	4401      	add	r1, r0
 80044ca:	3158      	adds	r1, #88	; 0x58
 80044cc:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80044d0:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 80044d2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80044d6:	f103 0306 	add.w	r3, r3, #6
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80044e0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	18d1      	adds	r1, r2, r3
 80044ea:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80044ee:	3328      	adds	r3, #40	; 0x28
 80044f0:	22c0      	movs	r2, #192	; 0xc0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f011 fe44 	bl	8016180 <memcpy>
				  duty_cmd.time_total = state_time;
 80044f8:	f607 6178 	addw	r1, r7, #3704	; 0xe78
 80044fc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004500:	f103 0318 	add.w	r3, r3, #24
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 800450c:	f607 6178 	addw	r1, r7, #3704	; 0xe78
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 800451c:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8004520:	2200      	movs	r2, #0
 8004522:	731a      	strb	r2, [r3, #12]
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8004524:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004528:	f103 0307 	add.w	r3, r3, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d006      	beq.n	8004540 <StartDefaultTask+0x1d18>
 8004532:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004536:	f103 0307 	add.w	r3, r3, #7
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b06      	cmp	r3, #6
 800453e:	d106      	bne.n	800454e <StartDefaultTask+0x1d26>
					  status1 = SCARA_STATUS_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004546:	f102 0213 	add.w	r2, r2, #19
 800454a:	7013      	strb	r3, [r2, #0]
 800454c:	e065      	b.n	800461a <StartDefaultTask+0x1df2>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 800454e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004552:	f103 0307 	add.w	r3, r3, #7
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d014      	beq.n	8004586 <StartDefaultTask+0x1d5e>
 800455c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004560:	f103 0307 	add.w	r3, r3, #7
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b05      	cmp	r3, #5
 8004568:	d00d      	beq.n	8004586 <StartDefaultTask+0x1d5e>
 800456a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800456e:	f103 0307 	add.w	r3, r3, #7
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d006      	beq.n	8004586 <StartDefaultTask+0x1d5e>
 8004578:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800457c:	f103 0307 	add.w	r3, r3, #7
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b07      	cmp	r3, #7
 8004584:	d110      	bne.n	80045a8 <StartDefaultTask+0x1d80>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 8004586:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800458a:	2200      	movs	r2, #0
 800458c:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 800458e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8004592:	2200      	movs	r2, #0
 8004594:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004596:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800459a:	2202      	movs	r2, #2
 800459c:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 800459e:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045a2:	2203      	movs	r2, #3
 80045a4:	745a      	strb	r2, [r3, #17]
 80045a6:	e024      	b.n	80045f2 <StartDefaultTask+0x1dca>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80045a8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045ac:	2201      	movs	r2, #1
 80045ae:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 80045b0:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <StartDefaultTask+0x1ec8>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d10c      	bne.n	80045d2 <StartDefaultTask+0x1daa>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 80045b8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045bc:	2200      	movs	r2, #0
 80045be:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 80045c0:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045c4:	2200      	movs	r2, #0
 80045c6:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 80045c8:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045cc:	2201      	movs	r2, #1
 80045ce:	741a      	strb	r2, [r3, #16]
 80045d0:	e00f      	b.n	80045f2 <StartDefaultTask+0x1dca>
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <StartDefaultTask+0x1ec8>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d10b      	bne.n	80045f2 <StartDefaultTask+0x1dca>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 80045da:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045de:	2201      	movs	r2, #1
 80045e0:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 80045e2:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045e6:	2201      	movs	r2, #1
 80045e8:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80045ea:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 80045ee:	2200      	movs	r2, #0
 80045f0:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 80045f2:	f607 6478 	addw	r4, r7, #3704	; 0xe78
 80045f6:	4668      	mov	r0, sp
 80045f8:	f104 0310 	add.w	r3, r4, #16
 80045fc:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004600:	4619      	mov	r1, r3
 8004602:	f011 fdbd 	bl	8016180 <memcpy>
 8004606:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800460a:	f002 fc15 	bl	8006e38 <scaraInitDuty>
 800460e:	4603      	mov	r3, r0
 8004610:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004614:	f102 0213 	add.w	r2, r2, #19
 8004618:	7013      	strb	r3, [r2, #0]
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800461a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800461e:	f103 0313 	add.w	r3, r3, #19
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d110      	bne.n	800464a <StartDefaultTask+0x1e22>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8004628:	2302      	movs	r3, #2
 800462a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800462e:	f102 021d 	add.w	r2, r2, #29
 8004632:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8004640:	f101 0108 	add.w	r1, r1, #8
 8004644:	e9c1 2300 	strd	r2, r3, [r1]
 8004648:	e056      	b.n	80046f8 <StartDefaultTask+0x1ed0>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800464a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800464e:	f103 0306 	add.w	r3, r3, #6
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	425a      	negs	r2, r3
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	f002 0207 	and.w	r2, r2, #7
 8004660:	bf58      	it	pl
 8004662:	4253      	negpl	r3, r2
 8004664:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004668:	f102 0206 	add.w	r2, r2, #6
 800466c:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 800466e:	2300      	movs	r3, #0
 8004670:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004674:	f102 0207 	add.w	r2, r2, #7
 8004678:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 800467a:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 800467e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004682:	f102 0213 	add.w	r2, r2, #19
 8004686:	7812      	ldrb	r2, [r2, #0]
 8004688:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800468a:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 8004694:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4413      	add	r3, r2
 800469c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2301      	movs	r3, #1
 80046a4:	2007      	movs	r0, #7
 80046a6:	f7fd ff11 	bl	80024cc <commandRespond1>
 80046aa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80046ae:	f103 0304 	add.w	r3, r3, #4
 80046b2:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80046b4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80046be:	f103 0304 	add.w	r3, r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80046ca:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 80046cc:	f240 31a3 	movw	r1, #931	; 0x3a3
 80046d0:	4808      	ldr	r0, [pc, #32]	; (80046f4 <StartDefaultTask+0x1ecc>)
 80046d2:	f7fd ff63 	bl	800259c <LOG_REPORT>
					break;
 80046d6:	e0dc      	b.n	8004892 <StartDefaultTask+0x206a>
 80046d8:	20000040 	.word	0x20000040
 80046dc:	20000028 	.word	0x20000028
 80046e0:	20000050 	.word	0x20000050
 80046e4:	20000008 	.word	0x20000008
 80046e8:	20000038 	.word	0x20000038
 80046ec:	20000020 	.word	0x20000020
 80046f0:	20000064 	.word	0x20000064
 80046f4:	0801c550 	.word	0x0801c550


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80046f8:	a3ae      	add	r3, pc, #696	; (adr r3, 80049b4 <StartDefaultTask+0x218c>)
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8004702:	f101 0108 	add.w	r1, r1, #8
 8004706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800470a:	f7fb fdbf 	bl	800028c <__adddf3>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8004716:	f101 0108 	add.w	r1, r1, #8
 800471a:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 800471e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004722:	f103 0308 	add.w	r3, r3, #8
 8004726:	ed93 0b00 	vldr	d0, [r3]
 800472a:	f006 f92b 	bl	800a984 <scaraIsFinish>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d037      	beq.n	80047a4 <StartDefaultTask+0x1f7c>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004734:	2304      	movs	r3, #4
 8004736:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800473a:	f102 021d 	add.w	r2, r2, #29
 800473e:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004740:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004744:	f103 0307 	add.w	r3, r3, #7
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b07      	cmp	r3, #7
 800474c:	d118      	bne.n	8004780 <StartDefaultTask+0x1f58>
					operation_state = SCARA_MOVE_TO_TARGET;
 800474e:	2300      	movs	r3, #0
 8004750:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004754:	f102 0207 	add.w	r2, r2, #7
 8004758:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 800475a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800475e:	f103 0306 	add.w	r3, r3, #6
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	425a      	negs	r2, r3
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	f002 0207 	and.w	r2, r2, #7
 8004770:	bf58      	it	pl
 8004772:	4253      	negpl	r3, r2
 8004774:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004778:	f102 0206 	add.w	r2, r2, #6
 800477c:	7013      	strb	r3, [r2, #0]
 800477e:	e00a      	b.n	8004796 <StartDefaultTask+0x1f6e>
				}else{
					operation_state += 1; //next state
 8004780:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004784:	f103 0307 	add.w	r3, r3, #7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004790:	f102 0207 	add.w	r2, r2, #7
 8004794:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 8004796:	4884      	ldr	r0, [pc, #528]	; (80049a8 <StartDefaultTask+0x2180>)
 8004798:	f001 fe26 	bl	80063e8 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 800479c:	4882      	ldr	r0, [pc, #520]	; (80049a8 <StartDefaultTask+0x2180>)
 800479e:	f000 fee7 	bl	8005570 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 80047a2:	e075      	b.n	8004890 <StartDefaultTask+0x2068>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 80047a4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80047a8:	f103 0307 	add.w	r3, r3, #7
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d06e      	beq.n	8004890 <StartDefaultTask+0x2068>
 80047b2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80047b6:	f103 0307 	add.w	r3, r3, #7
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d067      	beq.n	8004890 <StartDefaultTask+0x2068>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80047c0:	4c7a      	ldr	r4, [pc, #488]	; (80049ac <StartDefaultTask+0x2184>)
 80047c2:	4668      	mov	r0, sp
 80047c4:	f104 0308 	add.w	r3, r4, #8
 80047c8:	22b8      	movs	r2, #184	; 0xb8
 80047ca:	4619      	mov	r1, r3
 80047cc:	f011 fcd8 	bl	8016180 <memcpy>
 80047d0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80047d4:	4874      	ldr	r0, [pc, #464]	; (80049a8 <StartDefaultTask+0x2180>)
 80047d6:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 80047da:	f101 0108 	add.w	r1, r1, #8
 80047de:	ed91 0b00 	vldr	d0, [r1]
 80047e2:	f005 fa79 	bl	8009cd8 <scaraFlowDuty>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80047ec:	f102 020f 	add.w	r2, r2, #15
 80047f0:	7013      	strb	r3, [r2, #0]
				if ( SCARA_STATUS_OK == status) {
 80047f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80047f6:	f103 030f 	add.w	r3, r3, #15
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d113      	bne.n	8004828 <StartDefaultTask+0x2000>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8004800:	4c6a      	ldr	r4, [pc, #424]	; (80049ac <StartDefaultTask+0x2184>)
 8004802:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <StartDefaultTask+0x2180>)
 8004804:	ab2c      	add	r3, sp, #176	; 0xb0
 8004806:	4611      	mov	r1, r2
 8004808:	22c0      	movs	r2, #192	; 0xc0
 800480a:	4618      	mov	r0, r3
 800480c:	f011 fcb8 	bl	8016180 <memcpy>
 8004810:	4668      	mov	r0, sp
 8004812:	f104 0310 	add.w	r3, r4, #16
 8004816:	22b0      	movs	r2, #176	; 0xb0
 8004818:	4619      	mov	r1, r3
 800481a:	f011 fcb1 	bl	8016180 <memcpy>
 800481e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004822:	f001 ff71 	bl	8006708 <lowlayer_computeAndWritePulse>
		  break;
 8004826:	e033      	b.n	8004890 <StartDefaultTask+0x2068>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8004828:	2303      	movs	r3, #3
 800482a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800482e:	f102 021d 	add.w	r2, r2, #29
 8004832:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8004834:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 8004838:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800483c:	f102 020f 	add.w	r2, r2, #15
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004844:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8004848:	6899      	ldr	r1, [r3, #8]
 800484a:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 800484e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4413      	add	r3, r2
 8004856:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2301      	movs	r3, #1
 800485e:	2007      	movs	r0, #7
 8004860:	f7fd fe34 	bl	80024cc <commandRespond1>
 8004864:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004868:	f103 0304 	add.w	r3, r3, #4
 800486c:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 800486e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004878:	f103 0304 	add.w	r3, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4413      	add	r3, r2
 8004880:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8004884:	6013      	str	r3, [r2, #0]
		  break;
 8004886:	e003      	b.n	8004890 <StartDefaultTask+0x2068>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8004888:	bf00      	nop
 800488a:	e005      	b.n	8004898 <StartDefaultTask+0x2070>
				  break;
 800488c:	bf00      	nop
 800488e:	e003      	b.n	8004898 <StartDefaultTask+0x2070>
		  break;
 8004890:	bf00      	nop
		  }
	  }
	  break;
 8004892:	e001      	b.n	8004898 <StartDefaultTask+0x2070>
	  break;
 8004894:	bf00      	nop
 8004896:	e000      	b.n	800489a <StartDefaultTask+0x2072>
	  break;
 8004898:	bf00      	nop
	  default:
	  {

	  }
	  }
	  if(continuous_update == 1 && update_pos_cycle++ >= 10){
 800489a:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <StartDefaultTask+0x2188>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d154      	bne.n	800494c <StartDefaultTask+0x2124>
 80048a2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80048a6:	f103 0306 	add.w	r3, r3, #6
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	f507 5185 	add.w	r1, r7, #4256	; 0x10a0
 80048b2:	f101 0106 	add.w	r1, r1, #6
 80048b6:	700a      	strb	r2, [r1, #0]
 80048b8:	2b09      	cmp	r3, #9
 80048ba:	d947      	bls.n	800494c <StartDefaultTask+0x2124>
		  update_pos_cycle = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80048c2:	f102 0206 	add.w	r2, r2, #6
 80048c6:	7013      	strb	r3, [r2, #0]
		  lowlayer_readTruePosition(&update_position);
 80048c8:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 fd8b 	bl	80063e8 <lowlayer_readTruePosition>
		  kinematicForward(&update_position);
 80048d2:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fe4a 	bl	8005570 <kinematicForward>
		  respond_lenght = scaraPosition_packaging(detail_array, update_position);
 80048dc:	f507 6451 	add.w	r4, r7, #3344	; 0xd10
 80048e0:	f607 55d4 	addw	r5, r7, #3540	; 0xdd4
 80048e4:	4668      	mov	r0, sp
 80048e6:	f104 0308 	add.w	r3, r4, #8
 80048ea:	22b8      	movs	r2, #184	; 0xb8
 80048ec:	4619      	mov	r1, r3
 80048ee:	f011 fc47 	bl	8016180 <memcpy>
 80048f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80048f6:	4628      	mov	r0, r5
 80048f8:	f006 f85e 	bl	800a9b8 <scaraPosition_packaging>
 80048fc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004900:	f103 0304 	add.w	r3, r3, #4
 8004904:	6018      	str	r0, [r3, #0]
		  respond_lenght = commandRespond1(RPD_POSITION, CMD_READ_POSITION, detail_array, respond_lenght, &respond[total_respond_length]);
 8004906:	f607 6224 	addw	r2, r7, #3620	; 0xe24
 800490a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4413      	add	r3, r2
 8004912:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800491c:	f103 0304 	add.w	r3, r3, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2109      	movs	r1, #9
 8004924:	2002      	movs	r0, #2
 8004926:	f7fd fdd1 	bl	80024cc <commandRespond1>
 800492a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800492e:	f103 0304 	add.w	r3, r3, #4
 8004932:	6018      	str	r0, [r3, #0]
		  total_respond_length += respond_lenght;
 8004934:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800493e:	f103 0304 	add.w	r3, r3, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4413      	add	r3, r2
 8004946:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800494a:	6013      	str	r3, [r2, #0]
	  }
	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 800494c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dd09      	ble.n	800496a <StartDefaultTask+0x2142>
		CDC_Transmit_FS(respond, total_respond_length);
 8004956:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	b29a      	uxth	r2, r3
 800495e:	f607 6324 	addw	r3, r7, #3620	; 0xe24
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f010 ff8d 	bl	8015884 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 800496a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800496e:	f103 031f 	add.w	r3, r3, #31
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f005 ffb5 	bl	800a8e4 <scaraSetMethod>
	  scaraSetMode(current_mode);
 800497a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800497e:	f103 031e 	add.w	r3, r3, #30
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f005 ff9d 	bl	800a8c4 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 800498a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800498e:	f103 031d 	add.w	r3, r3, #29
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f005 ff85 	bl	800a8a4 <scaraSetDutyState>

    osDelay(1);
 800499a:	2001      	movs	r0, #1
 800499c:	f00e f84d 	bl	8012a3a <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 80049a0:	f7fd bfdd 	b.w	800295e <StartDefaultTask+0x136>
 80049a4:	f3af 8000 	nop.w
 80049a8:	20010c80 	.word	0x20010c80
 80049ac:	20010b00 	.word	0x20010b00
 80049b0:	2000440a 	.word	0x2000440a
 80049b4:	40000000 	.word	0x40000000
 80049b8:	3f847ae1 	.word	0x3f847ae1

080049bc <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 80049bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049be:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 80049c2:	af70      	add	r7, sp, #448	; 0x1c0
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 80049c8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80049cc:	2201      	movs	r2, #1
 80049ce:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 80049d0:	4964      	ldr	r1, [pc, #400]	; (8004b64 <Start_USB_RX_Task+0x1a8>)
 80049d2:	4865      	ldr	r0, [pc, #404]	; (8004b68 <Start_USB_RX_Task+0x1ac>)
 80049d4:	f001 fa71 	bl	8005eba <ringBuff_DistanceOf>
 80049d8:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 80049dc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d0f4      	beq.n	80049d0 <Start_USB_RX_Task+0x14>
 80049e6:	466b      	mov	r3, sp
 80049e8:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 80049ea:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80049ee:	1c5c      	adds	r4, r3, #1
 80049f0:	1e63      	subs	r3, r4, #1
 80049f2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80049f6:	4623      	mov	r3, r4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	00cb      	lsls	r3, r1, #3
 8004a08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004a0c:	00c2      	lsls	r2, r0, #3
 8004a0e:	4623      	mov	r3, r4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	00cb      	lsls	r3, r1, #3
 8004a20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004a24:	00c2      	lsls	r2, r0, #3
 8004a26:	4623      	mov	r3, r4
 8004a28:	3307      	adds	r3, #7
 8004a2a:	08db      	lsrs	r3, r3, #3
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	ebad 0d03 	sub.w	sp, sp, r3
 8004a32:	ab70      	add	r3, sp, #448	; 0x1c0
 8004a34:	3300      	adds	r3, #0
 8004a36:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8004a3a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8004a3e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004a42:	3301      	adds	r3, #1
 8004a44:	461a      	mov	r2, r3
 8004a46:	4848      	ldr	r0, [pc, #288]	; (8004b68 <Start_USB_RX_Task+0x1ac>)
 8004a48:	f001 fa16 	bl	8005e78 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8004a4c:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8004a50:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004a54:	3301      	adds	r3, #1
 8004a56:	f107 020c 	add.w	r2, r7, #12
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7fd fde4 	bl	8002628 <unPackPayload>
 8004a60:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8004a64:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d077      	beq.n	8004b5e <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8004a6e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004a72:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8004a76:	f107 000c 	add.w	r0, r7, #12
 8004a7a:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8004a7e:	f7fc fab7 	bl	8000ff0 <packetRead>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8004a88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a8c:	2287      	movs	r2, #135	; 0x87
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f011 fb9d 	bl	80161d0 <memset>
				  detail_length = 0;
 8004a96:	f107 0308 	add.w	r3, r7, #8
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8004a9e:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004aa2:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	936f      	str	r3, [sp, #444]	; 0x1bc
 8004aac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004ab0:	936e      	str	r3, [sp, #440]	; 0x1b8
 8004ab2:	4668      	mov	r0, sp
 8004ab4:	f104 0308 	add.w	r3, r4, #8
 8004ab8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8004abc:	4619      	mov	r1, r3
 8004abe:	f011 fb5f 	bl	8016180 <memcpy>
 8004ac2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7fd fafa 	bl	80020c0 <commandReply>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8004ad2:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d123      	bne.n	8004b22 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8004ae0:	e008      	b.n	8004af4 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004ae2:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <Start_USB_RX_Task+0x1b0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8004aea:	4618      	mov	r0, r3
 8004aec:	f00e f9b6 	bl	8012e5c <osMailAlloc>
 8004af0:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8004af4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f2      	beq.n	8004ae2 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8004afc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004b00:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004b04:	4619      	mov	r1, r3
 8004b06:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8004b0a:	f011 fb39 	bl	8016180 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <Start_USB_RX_Task+0x1b0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8004b16:	4618      	mov	r0, r3
 8004b18:	f00e f9b6 	bl	8012e88 <osMailPut>
 8004b1c:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8004b20:	e01d      	b.n	8004b5e <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8004b22:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004b26:	2b0a      	cmp	r3, #10
 8004b28:	d019      	beq.n	8004b5e <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8004b2a:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8004b2e:	f107 0308 	add.w	r3, r7, #8
 8004b32:	681c      	ldr	r4, [r3, #0]
 8004b34:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004b38:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8004b3c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4623      	mov	r3, r4
 8004b44:	f7fd fcc2 	bl	80024cc <commandRespond1>
 8004b48:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 8004b4c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f010 fe93 	bl	8015884 <CDC_Transmit_FS>
 8004b5e:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004b60:	e736      	b.n	80049d0 <Start_USB_RX_Task+0x14>
 8004b62:	bf00      	nop
 8004b64:	0801c610 	.word	0x0801c610
 8004b68:	20000068 	.word	0x20000068
 8004b6c:	2000fe7c 	.word	0x2000fe7c

08004b70 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	b292      	uxth	r2, r2
 8004b80:	801a      	strh	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	611a      	str	r2, [r3, #16]
 8004bbc:	615a      	str	r2, [r3, #20]
 8004bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8004bc0:	4b27      	ldr	r3, [pc, #156]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bc2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004bc6:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bca:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <MX_FSMC_Init+0xbc>)
 8004bcc:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004bce:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004bd4:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8004bda:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bdc:	2208      	movs	r2, #8
 8004bde:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004be0:	4b1f      	ldr	r3, [pc, #124]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004be2:	2210      	movs	r2, #16
 8004be4:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004c24:	230f      	movs	r3, #15
 8004c26:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004c28:	230f      	movs	r3, #15
 8004c2a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8004c2c:	23ff      	movs	r3, #255	; 0xff
 8004c2e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8004c30:	230f      	movs	r3, #15
 8004c32:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004c34:	2310      	movs	r3, #16
 8004c36:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004c38:	2311      	movs	r3, #17
 8004c3a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8004c40:	1d3b      	adds	r3, r7, #4
 8004c42:	2200      	movs	r2, #0
 8004c44:	4619      	mov	r1, r3
 8004c46:	4806      	ldr	r0, [pc, #24]	; (8004c60 <MX_FSMC_Init+0xb8>)
 8004c48:	f007 fcb8 	bl	800c5bc <HAL_NOR_Init>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004c52:	f001 f857 	bl	8005d04 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004c56:	bf00      	nop
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	2000fe88 	.word	0x2000fe88
 8004c64:	a0000104 	.word	0xa0000104

08004c68 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_FSMC_MspInit+0xa8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d140      	bne.n	8004d06 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004c84:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <HAL_FSMC_MspInit+0xa8>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <HAL_FSMC_MspInit+0xac>)
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <HAL_FSMC_MspInit+0xac>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6393      	str	r3, [r2, #56]	; 0x38
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_FSMC_MspInit+0xac>)
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004ca6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004caa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cac:	2302      	movs	r3, #2
 8004cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004cb8:	230c      	movs	r3, #12
 8004cba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cbc:	1d3b      	adds	r3, r7, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4815      	ldr	r0, [pc, #84]	; (8004d18 <HAL_FSMC_MspInit+0xb0>)
 8004cc2:	f007 fac5 	bl	800c250 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004cc6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8004cca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004cd8:	230c      	movs	r3, #12
 8004cda:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	480e      	ldr	r0, [pc, #56]	; (8004d1c <HAL_FSMC_MspInit+0xb4>)
 8004ce2:	f007 fab5 	bl	800c250 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cea:	2302      	movs	r3, #2
 8004cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4808      	ldr	r0, [pc, #32]	; (8004d20 <HAL_FSMC_MspInit+0xb8>)
 8004d00:	f007 faa6 	bl	800c250 <HAL_GPIO_Init>
 8004d04:	e000      	b.n	8004d08 <HAL_FSMC_MspInit+0xa0>
    return;
 8004d06:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20004860 	.word	0x20004860
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40020c00 	.word	0x40020c00
 8004d20:	40020400 	.word	0x40020400

08004d24 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8004d2c:	f7ff ff9c 	bl	8004c68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;
extern SCARA_Gcode_Cor_TypeDef			Gcode_Cor[1000];
void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, int32_t run_point)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
//		bezier_y_coeffs[1] = ((double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y)*2.0*bezier_wc;
//		bezier_y_coeffs[2] = duty_cmd->target_point.y;
//	}else{
//
//	}
	duty_cmd->target_point.x = (double)Gcode_Cor[run_point].X * DATA_INVERSE_SCALE + offset_x;
 8004d42:	499d      	ldr	r1, [pc, #628]	; (8004fb8 <update_gcode_point+0x280>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb fbe6 	bl	8000524 <__aeabi_i2d>
 8004d58:	a395      	add	r3, pc, #596	; (adr r3, 8004fb0 <update_gcode_point+0x278>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb fc4b 	bl	80005f8 <__aeabi_dmul>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4610      	mov	r0, r2
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4b94      	ldr	r3, [pc, #592]	; (8004fbc <update_gcode_point+0x284>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb fa8c 	bl	800028c <__adddf3>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	duty_cmd->target_point.y = (double)Gcode_Cor[run_point].Y * DATA_INVERSE_SCALE + offset_y;
 8004d7e:	498e      	ldr	r1, [pc, #568]	; (8004fb8 <update_gcode_point+0x280>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbc7 	bl	8000524 <__aeabi_i2d>
 8004d96:	a386      	add	r3, pc, #536	; (adr r3, 8004fb0 <update_gcode_point+0x278>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb fc2c 	bl	80005f8 <__aeabi_dmul>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4610      	mov	r0, r2
 8004da6:	4619      	mov	r1, r3
 8004da8:	4b85      	ldr	r3, [pc, #532]	; (8004fc0 <update_gcode_point+0x288>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fa6d 	bl	800028c <__adddf3>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004dbc:	497e      	ldr	r1, [pc, #504]	; (8004fb8 <update_gcode_point+0x280>)
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	331b      	adds	r3, #27
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d10d      	bne.n	8004dee <update_gcode_point+0xb6>
	  duty_cmd->target_point.z = up_z_height + offset_z;
 8004dd2:	4b7c      	ldr	r3, [pc, #496]	; (8004fc4 <update_gcode_point+0x28c>)
 8004dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dd8:	4b7b      	ldr	r3, [pc, #492]	; (8004fc8 <update_gcode_point+0x290>)
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f7fb fa55 	bl	800028c <__adddf3>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004dec:	e00c      	b.n	8004e08 <update_gcode_point+0xd0>
	}else{
	  duty_cmd->target_point.z = down_z_height + offset_z;
 8004dee:	4b77      	ldr	r3, [pc, #476]	; (8004fcc <update_gcode_point+0x294>)
 8004df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004df4:	4b74      	ldr	r3, [pc, #464]	; (8004fc8 <update_gcode_point+0x290>)
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f7fb fa47 	bl	800028c <__adddf3>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	}
	duty_cmd->target_point.roll = roll_angle;
 8004e08:	4b71      	ldr	r3, [pc, #452]	; (8004fd0 <update_gcode_point+0x298>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	duty_cmd->space_type = DUTY_SPACE_TASK;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	735a      	strb	r2, [r3, #13]
	duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	731a      	strb	r2, [r3, #12]
	if(Gcode_Cor[run_point].configure.type_define[0] == LINEAR_TYPE){
 8004e20:	4965      	ldr	r1, [pc, #404]	; (8004fb8 <update_gcode_point+0x280>)
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	331a      	adds	r3, #26
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d103      	bne.n	8004e3e <update_gcode_point+0x106>
	  duty_cmd->path_type = DUTY_PATH_LINE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	739a      	strb	r2, [r3, #14]
 8004e3c:	e07b      	b.n	8004f36 <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_AW_TYPE){
 8004e3e:	495e      	ldr	r1, [pc, #376]	; (8004fb8 <update_gcode_point+0x280>)
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	331a      	adds	r3, #26
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d132      	bne.n	8004eba <update_gcode_point+0x182>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * DATA_INVERSE_SCALE;
 8004e54:	4958      	ldr	r1, [pc, #352]	; (8004fb8 <update_gcode_point+0x280>)
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	330c      	adds	r3, #12
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fb fb5c 	bl	8000524 <__aeabi_i2d>
 8004e6c:	a350      	add	r3, pc, #320	; (adr r3, 8004fb0 <update_gcode_point+0x278>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb fbc1 	bl	80005f8 <__aeabi_dmul>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * DATA_INVERSE_SCALE;
 8004e80:	494d      	ldr	r1, [pc, #308]	; (8004fb8 <update_gcode_point+0x280>)
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	3310      	adds	r3, #16
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fb fb46 	bl	8000524 <__aeabi_i2d>
 8004e98:	a345      	add	r3, pc, #276	; (adr r3, 8004fb0 <update_gcode_point+0x278>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f7fb fbab 	bl	80005f8 <__aeabi_dmul>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = 1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	615a      	str	r2, [r3, #20]
 8004eb8:	e03d      	b.n	8004f36 <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_CW_TYPE){
 8004eba:	493f      	ldr	r1, [pc, #252]	; (8004fb8 <update_gcode_point+0x280>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	331a      	adds	r3, #26
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d132      	bne.n	8004f36 <update_gcode_point+0x1fe>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * DATA_INVERSE_SCALE;
 8004ed0:	4939      	ldr	r1, [pc, #228]	; (8004fb8 <update_gcode_point+0x280>)
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	330c      	adds	r3, #12
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fb1e 	bl	8000524 <__aeabi_i2d>
 8004ee8:	a331      	add	r3, pc, #196	; (adr r3, 8004fb0 <update_gcode_point+0x278>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f7fb fb83 	bl	80005f8 <__aeabi_dmul>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * DATA_INVERSE_SCALE;
 8004efc:	492e      	ldr	r1, [pc, #184]	; (8004fb8 <update_gcode_point+0x280>)
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	3310      	adds	r3, #16
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fb fb08 	bl	8000524 <__aeabi_i2d>
 8004f14:	a326      	add	r3, pc, #152	; (adr r3, 8004fb0 <update_gcode_point+0x278>)
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f7fb fb6d 	bl	80005f8 <__aeabi_dmul>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = -1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	615a      	str	r2, [r3, #20]
	}

	if(Gcode_Mode == GCODE_LINEAR){
 8004f36:	4b27      	ldr	r3, [pc, #156]	; (8004fd4 <update_gcode_point+0x29c>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d14e      	bne.n	8004fdc <update_gcode_point+0x2a4>
		duty_cmd->v_factor = (double)Gcode_Cor[run_point].F * DATA_INVERSE_SCALE / V_MOVE_MAX;
 8004f3e:	491e      	ldr	r1, [pc, #120]	; (8004fb8 <update_gcode_point+0x280>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fb fae7 	bl	8000524 <__aeabi_i2d>
 8004f56:	a316      	add	r3, pc, #88	; (adr r3, 8004fb0 <update_gcode_point+0x278>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb fb4c 	bl	80005f8 <__aeabi_dmul>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <update_gcode_point+0x2a0>)
 8004f6e:	f7fb fc6d 	bl	800084c <__aeabi_ddiv>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
		if(run_point == 1){
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10d      	bne.n	8004f9e <update_gcode_point+0x266>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9c1 2308 	strd	r2, r3, [r1, #32]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*DATA_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
		}
	}

}
 8004f9c:	e0b6      	b.n	800510c <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	745a      	strb	r2, [r3, #17]
}
 8004faa:	e0af      	b.n	800510c <update_gcode_point+0x3d4>
 8004fac:	f3af 8000 	nop.w
 8004fb0:	a0000000 	.word	0xa0000000
 8004fb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8004fb8:	20008fc8 	.word	0x20008fc8
 8004fbc:	20008fa8 	.word	0x20008fa8
 8004fc0:	2000fd50 	.word	0x2000fd50
 8004fc4:	200085c8 	.word	0x200085c8
 8004fc8:	2000fd40 	.word	0x2000fd40
 8004fcc:	20008f40 	.word	0x20008f40
 8004fd0:	20008fa0 	.word	0x20008fa0
 8004fd4:	200085d0 	.word	0x200085d0
 8004fd8:	40877000 	.word	0x40877000
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <update_gcode_point+0x3e8>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b09      	cmp	r3, #9
 8004fe2:	f040 8093 	bne.w	800510c <update_gcode_point+0x3d4>
		if(Gcode_Cor[run_point].configure.type_define[1] == pre_height){
 8004fe6:	494f      	ldr	r1, [pc, #316]	; (8005124 <update_gcode_point+0x3ec>)
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	331b      	adds	r3, #27
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <update_gcode_point+0x3f0>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d14c      	bne.n	800509a <update_gcode_point+0x362>
			if(Gcode_Cor[run_point].configure.clutch_index != pre_clutch_index){
 8005000:	4948      	ldr	r1, [pc, #288]	; (8005124 <update_gcode_point+0x3ec>)
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3318      	adds	r3, #24
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	4b45      	ldr	r3, [pc, #276]	; (800512c <update_gcode_point+0x3f4>)
 8005016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800501a:	429a      	cmp	r2, r3
 800501c:	d01f      	beq.n	800505e <update_gcode_point+0x326>
				LSPB_calculation(gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index]);
 800501e:	4941      	ldr	r1, [pc, #260]	; (8005124 <update_gcode_point+0x3ec>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3318      	adds	r3, #24
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	4a3f      	ldr	r2, [pc, #252]	; (8005130 <update_gcode_point+0x3f8>)
 8005034:	460b      	mov	r3, r1
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	440b      	add	r3, r1
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005042:	f000 f87d 	bl	8005140 <LSPB_calculation>
				pre_clutch_index = Gcode_Cor[run_point].configure.clutch_index;
 8005046:	4937      	ldr	r1, [pc, #220]	; (8005124 <update_gcode_point+0x3ec>)
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3318      	adds	r3, #24
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b21a      	sxth	r2, r3
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <update_gcode_point+0x3f4>)
 800505c:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2203      	movs	r2, #3
 8005062:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(Gcode_Cor[run_point].T*DATA_INVERSE_SCALE);
 8005064:	492f      	ldr	r1, [pc, #188]	; (8005124 <update_gcode_point+0x3ec>)
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	3314      	adds	r3, #20
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800507e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005134 <update_gcode_point+0x3fc>
 8005082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005086:	ee17 0a90 	vmov	r0, s15
 800508a:	f7fb fa5d 	bl	8000548 <__aeabi_f2d>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8005098:	e038      	b.n	800510c <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*DATA_INVERSE_SCALE/V_MOVE_MAX;
 80050a6:	491f      	ldr	r1, [pc, #124]	; (8005124 <update_gcode_point+0x3ec>)
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3318      	adds	r3, #24
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <update_gcode_point+0x3f8>)
 80050bc:	460b      	mov	r3, r1
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	440b      	add	r3, r1
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	3308      	adds	r3, #8
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fb fa2a 	bl	8000524 <__aeabi_i2d>
 80050d0:	a311      	add	r3, pc, #68	; (adr r3, 8005118 <update_gcode_point+0x3e0>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f7fb fa8f 	bl	80005f8 <__aeabi_dmul>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <update_gcode_point+0x400>)
 80050e8:	f7fb fbb0 	bl	800084c <__aeabi_ddiv>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
 80050f6:	490b      	ldr	r1, [pc, #44]	; (8005124 <update_gcode_point+0x3ec>)
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	331b      	adds	r3, #27
 8005106:	781a      	ldrb	r2, [r3, #0]
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <update_gcode_point+0x3f0>)
 800510a:	701a      	strb	r2, [r3, #0]
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	f3af 8000 	nop.w
 8005118:	a0000000 	.word	0xa0000000
 800511c:	3eb0c6f7 	.word	0x3eb0c6f7
 8005120:	200085d0 	.word	0x200085d0
 8005124:	20008fc8 	.word	0x20008fc8
 8005128:	20008f88 	.word	0x20008f88
 800512c:	2000fd3a 	.word	0x2000fd3a
 8005130:	200085e0 	.word	0x200085e0
 8005134:	358637bd 	.word	0x358637bd
 8005138:	40877000 	.word	0x40877000
 800513c:	00000000 	.word	0x00000000

08005140 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*DATA_INVERSE_SCALE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f9e2 	bl	8000524 <__aeabi_i2d>
 8005160:	a388      	add	r3, pc, #544	; (adr r3, 8005384 <LSPB_calculation+0x244>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb fa47 	bl	80005f8 <__aeabi_dmul>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*DATA_INVERSE_SCALE;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f9d5 	bl	8000524 <__aeabi_i2d>
 800517a:	a382      	add	r3, pc, #520	; (adr r3, 8005384 <LSPB_calculation+0x244>)
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f7fb fa3a 	bl	80005f8 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 800518c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8005190:	4b71      	ldr	r3, [pc, #452]	; (8005358 <LSPB_calculation+0x218>)
 8005192:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005196:	f7fb fa2f 	bl	80005f8 <__aeabi_dmul>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4610      	mov	r0, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051a6:	f7fb fb51 	bl	800084c <__aeabi_ddiv>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	496b      	ldr	r1, [pc, #428]	; (800535c <LSPB_calculation+0x21c>)
 80051b0:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 80051b4:	4b69      	ldr	r3, [pc, #420]	; (800535c <LSPB_calculation+0x21c>)
 80051b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80051ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80051c2:	f7fb fb43 	bl	800084c <__aeabi_ddiv>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4620      	mov	r0, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	f7fb f85b 	bl	8000288 <__aeabi_dsub>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4962      	ldr	r1, [pc, #392]	; (8005360 <LSPB_calculation+0x220>)
 80051d8:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 80051dc:	4b5f      	ldr	r3, [pc, #380]	; (800535c <LSPB_calculation+0x21c>)
 80051de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051e2:	4b5f      	ldr	r3, [pc, #380]	; (8005360 <LSPB_calculation+0x220>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fb f84e 	bl	8000288 <__aeabi_dsub>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	495c      	ldr	r1, [pc, #368]	; (8005364 <LSPB_calculation+0x224>)
 80051f2:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 80051f6:	4b5a      	ldr	r3, [pc, #360]	; (8005360 <LSPB_calculation+0x220>)
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005200:	f7fb fb24 	bl	800084c <__aeabi_ddiv>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	4b55      	ldr	r3, [pc, #340]	; (8005368 <LSPB_calculation+0x228>)
 8005212:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005216:	f7fb f9ef 	bl	80005f8 <__aeabi_dmul>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4953      	ldr	r1, [pc, #332]	; (800536c <LSPB_calculation+0x22c>)
 8005220:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 8005224:	4952      	ldr	r1, [pc, #328]	; (8005370 <LSPB_calculation+0x230>)
 8005226:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800522a:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 800522e:	4b4c      	ldr	r3, [pc, #304]	; (8005360 <LSPB_calculation+0x220>)
 8005230:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	4b4e      	ldr	r3, [pc, #312]	; (8005374 <LSPB_calculation+0x234>)
 800523a:	f7fb f9dd 	bl	80005f8 <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800524a:	f7fb f9d5 	bl	80005f8 <__aeabi_dmul>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4947      	ldr	r1, [pc, #284]	; (8005370 <LSPB_calculation+0x230>)
 8005254:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	4b45      	ldr	r3, [pc, #276]	; (8005374 <LSPB_calculation+0x234>)
 800525e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005262:	f7fb f9c9 	bl	80005f8 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4943      	ldr	r1, [pc, #268]	; (8005378 <LSPB_calculation+0x238>)
 800526c:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8005270:	4b3c      	ldr	r3, [pc, #240]	; (8005364 <LSPB_calculation+0x224>)
 8005272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800527a:	f7fb f9bd 	bl	80005f8 <__aeabi_dmul>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800528a:	f7fa ffff 	bl	800028c <__adddf3>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4939      	ldr	r1, [pc, #228]	; (8005378 <LSPB_calculation+0x238>)
 8005294:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8005298:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	f7fa fff4 	bl	800028c <__adddf3>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4614      	mov	r4, r2
 80052aa:	461d      	mov	r5, r3
 80052ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	f7fa ffea 	bl	800028c <__adddf3>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <LSPB_calculation+0x224>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f7fb f997 	bl	80005f8 <__aeabi_dmul>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fa ffdb 	bl	800028c <__adddf3>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4614      	mov	r4, r2
 80052dc:	461d      	mov	r5, r3
 80052de:	4b1f      	ldr	r3, [pc, #124]	; (800535c <LSPB_calculation+0x21c>)
 80052e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052e8:	f7fb f986 	bl	80005f8 <__aeabi_dmul>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4620      	mov	r0, r4
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fa ffc8 	bl	8000288 <__aeabi_dsub>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	4b16      	ldr	r3, [pc, #88]	; (800535c <LSPB_calculation+0x21c>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fb f977 	bl	80005f8 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800531a:	f7fb fa97 	bl	800084c <__aeabi_ddiv>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005326:	f7fa ffaf 	bl	8000288 <__aeabi_dsub>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4912      	ldr	r1, [pc, #72]	; (8005378 <LSPB_calculation+0x238>)
 8005330:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 8005334:	4911      	ldr	r1, [pc, #68]	; (800537c <LSPB_calculation+0x23c>)
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 8005342:	490f      	ldr	r1, [pc, #60]	; (8005380 <LSPB_calculation+0x240>)
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005350:	bf00      	nop
 8005352:	3728      	adds	r7, #40	; 0x28
 8005354:	46bd      	mov	sp, r7
 8005356:	bdb0      	pop	{r4, r5, r7, pc}
 8005358:	3ff33333 	.word	0x3ff33333
 800535c:	20008fb8 	.word	0x20008fb8
 8005360:	20008f48 	.word	0x20008f48
 8005364:	20008f68 	.word	0x20008f68
 8005368:	3fe00000 	.word	0x3fe00000
 800536c:	2000fd30 	.word	0x2000fd30
 8005370:	20008f90 	.word	0x20008f90
 8005374:	bfe00000 	.word	0xbfe00000
 8005378:	20008f50 	.word	0x20008f50
 800537c:	200085d8 	.word	0x200085d8
 8005380:	2000fd48 	.word	0x2000fd48
 8005384:	a0000000 	.word	0xa0000000
 8005388:	3eb0c6f7 	.word	0x3eb0c6f7
 800538c:	00000000 	.word	0x00000000

08005390 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8005390:	b084      	sub	sp, #16
 8005392:	b580      	push	{r7, lr}
 8005394:	af00      	add	r7, sp, #0
 8005396:	f107 0c08 	add.w	ip, r7, #8
 800539a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*DATA_INVERSE_SCALE);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fb f8bf 	bl	8000524 <__aeabi_i2d>
 80053a6:	a312      	add	r3, pc, #72	; (adr r3, 80053f0 <accumulate_update+0x60>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fb f924 	bl	80005f8 <__aeabi_dmul>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	ec43 2b17 	vmov	d7, r2, r3
 80053b8:	eeb0 0a47 	vmov.f32	s0, s14
 80053bc:	eef0 0a67 	vmov.f32	s1, s15
 80053c0:	480d      	ldr	r0, [pc, #52]	; (80053f8 <accumulate_update+0x68>)
 80053c2:	f003 fdf1 	bl	8008fa8 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*DATA_INVERSE_SCALE;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fb f8ab 	bl	8000524 <__aeabi_i2d>
 80053ce:	a308      	add	r3, pc, #32	; (adr r3, 80053f0 <accumulate_update+0x60>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f7fb f910 	bl	80005f8 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4907      	ldr	r1, [pc, #28]	; (80053fc <accumulate_update+0x6c>)
 80053de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80053e2:	bf00      	nop
 80053e4:	46bd      	mov	sp, r7
 80053e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ea:	b004      	add	sp, #16
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	a0000000 	.word	0xa0000000
 80053f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80053f8:	200085d8 	.word	0x200085d8
 80053fc:	2000fd48 	.word	0x2000fd48

08005400 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	4b51      	ldr	r3, [pc, #324]	; (8005560 <MX_GPIO_Init+0x160>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	4a50      	ldr	r2, [pc, #320]	; (8005560 <MX_GPIO_Init+0x160>)
 8005420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005424:	6313      	str	r3, [r2, #48]	; 0x30
 8005426:	4b4e      	ldr	r3, [pc, #312]	; (8005560 <MX_GPIO_Init+0x160>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <MX_GPIO_Init+0x160>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	4a49      	ldr	r2, [pc, #292]	; (8005560 <MX_GPIO_Init+0x160>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6313      	str	r3, [r2, #48]	; 0x30
 8005442:	4b47      	ldr	r3, [pc, #284]	; (8005560 <MX_GPIO_Init+0x160>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	4b43      	ldr	r3, [pc, #268]	; (8005560 <MX_GPIO_Init+0x160>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	4a42      	ldr	r2, [pc, #264]	; (8005560 <MX_GPIO_Init+0x160>)
 8005458:	f043 0310 	orr.w	r3, r3, #16
 800545c:	6313      	str	r3, [r2, #48]	; 0x30
 800545e:	4b40      	ldr	r3, [pc, #256]	; (8005560 <MX_GPIO_Init+0x160>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	4b3c      	ldr	r3, [pc, #240]	; (8005560 <MX_GPIO_Init+0x160>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	4a3b      	ldr	r2, [pc, #236]	; (8005560 <MX_GPIO_Init+0x160>)
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	6313      	str	r3, [r2, #48]	; 0x30
 800547a:	4b39      	ldr	r3, [pc, #228]	; (8005560 <MX_GPIO_Init+0x160>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4b35      	ldr	r3, [pc, #212]	; (8005560 <MX_GPIO_Init+0x160>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	4a34      	ldr	r2, [pc, #208]	; (8005560 <MX_GPIO_Init+0x160>)
 8005490:	f043 0308 	orr.w	r3, r3, #8
 8005494:	6313      	str	r3, [r2, #48]	; 0x30
 8005496:	4b32      	ldr	r3, [pc, #200]	; (8005560 <MX_GPIO_Init+0x160>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 80054a2:	2200      	movs	r2, #0
 80054a4:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 80054a8:	482e      	ldr	r0, [pc, #184]	; (8005564 <MX_GPIO_Init+0x164>)
 80054aa:	f007 f86d 	bl	800c588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 80054ae:	2200      	movs	r2, #0
 80054b0:	f641 0148 	movw	r1, #6216	; 0x1848
 80054b4:	482c      	ldr	r0, [pc, #176]	; (8005568 <MX_GPIO_Init+0x168>)
 80054b6:	f007 f867 	bl	800c588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80054ba:	2200      	movs	r2, #0
 80054bc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80054c0:	482a      	ldr	r0, [pc, #168]	; (800556c <MX_GPIO_Init+0x16c>)
 80054c2:	f007 f861 	bl	800c588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 80054c6:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 80054ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054cc:	2301      	movs	r3, #1
 80054ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d4:	2300      	movs	r3, #0
 80054d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d8:	f107 0314 	add.w	r3, r7, #20
 80054dc:	4619      	mov	r1, r3
 80054de:	4821      	ldr	r0, [pc, #132]	; (8005564 <MX_GPIO_Init+0x164>)
 80054e0:	f006 feb6 	bl	800c250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 80054e4:	f640 0348 	movw	r3, #2120	; 0x848
 80054e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f2:	2300      	movs	r3, #0
 80054f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054f6:	f107 0314 	add.w	r3, r7, #20
 80054fa:	4619      	mov	r1, r3
 80054fc:	481a      	ldr	r0, [pc, #104]	; (8005568 <MX_GPIO_Init+0x168>)
 80054fe:	f006 fea7 	bl	800c250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8005502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005508:	2301      	movs	r3, #1
 800550a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005510:	2303      	movs	r3, #3
 8005512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8005514:	f107 0314 	add.w	r3, r7, #20
 8005518:	4619      	mov	r1, r3
 800551a:	4813      	ldr	r0, [pc, #76]	; (8005568 <MX_GPIO_Init+0x168>)
 800551c:	f006 fe98 	bl	800c250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8005520:	f242 0304 	movw	r3, #8196	; 0x2004
 8005524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800552a:	2301      	movs	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	4619      	mov	r1, r3
 8005534:	480c      	ldr	r0, [pc, #48]	; (8005568 <MX_GPIO_Init+0x168>)
 8005536:	f006 fe8b 	bl	800c250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 800553a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800553e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005540:	2301      	movs	r3, #1
 8005542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005548:	2300      	movs	r3, #0
 800554a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554c:	f107 0314 	add.w	r3, r7, #20
 8005550:	4619      	mov	r1, r3
 8005552:	4806      	ldr	r0, [pc, #24]	; (800556c <MX_GPIO_Init+0x16c>)
 8005554:	f006 fe7c 	bl	800c250 <HAL_GPIO_Init>

}
 8005558:	bf00      	nop
 800555a:	3728      	adds	r7, #40	; 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40023800 	.word	0x40023800
 8005564:	40020400 	.word	0x40020400
 8005568:	40020c00 	.word	0x40020c00
 800556c:	40020000 	.word	0x40020000

08005570 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8005570:	b5b0      	push	{r4, r5, r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800557e:	eeb0 0a47 	vmov.f32	s0, s14
 8005582:	eef0 0a67 	vmov.f32	s1, s15
 8005586:	f015 fadb 	bl	801ab40 <cos>
 800558a:	ec51 0b10 	vmov	r0, r1, d0
 800558e:	a382      	add	r3, pc, #520	; (adr r3, 8005798 <kinematicForward+0x228>)
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f7fb f830 	bl	80005f8 <__aeabi_dmul>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4614      	mov	r4, r2
 800559e:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80055ac:	f7fa fe6e 	bl	800028c <__adddf3>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	ec43 2b17 	vmov	d7, r2, r3
 80055b8:	eeb0 0a47 	vmov.f32	s0, s14
 80055bc:	eef0 0a67 	vmov.f32	s1, s15
 80055c0:	f015 fabe 	bl	801ab40 <cos>
 80055c4:	ec51 0b10 	vmov	r0, r1, d0
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	4b78      	ldr	r3, [pc, #480]	; (80057b0 <kinematicForward+0x240>)
 80055ce:	f7fb f813 	bl	80005f8 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fa fe57 	bl	800028c <__adddf3>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4614      	mov	r4, r2
 80055e4:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80055f2:	f7fa fe4b 	bl	800028c <__adddf3>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005604:	f7fa fe40 	bl	8000288 <__aeabi_dsub>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	ec43 2b17 	vmov	d7, r2, r3
 8005610:	eeb0 0a47 	vmov.f32	s0, s14
 8005614:	eef0 0a67 	vmov.f32	s1, s15
 8005618:	f015 fa92 	bl	801ab40 <cos>
 800561c:	ec51 0b10 	vmov	r0, r1, d0
 8005620:	a35b      	add	r3, pc, #364	; (adr r3, 8005790 <kinematicForward+0x220>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fa ffe7 	bl	80005f8 <__aeabi_dmul>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 800562e:	4620      	mov	r0, r4
 8005630:	4629      	mov	r1, r5
 8005632:	f7fa fe2b 	bl	800028c <__adddf3>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005644:	eeb0 0a47 	vmov.f32	s0, s14
 8005648:	eef0 0a67 	vmov.f32	s1, s15
 800564c:	f015 fb10 	bl	801ac70 <sin>
 8005650:	ec51 0b10 	vmov	r0, r1, d0
 8005654:	a350      	add	r3, pc, #320	; (adr r3, 8005798 <kinematicForward+0x228>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa ffcd 	bl	80005f8 <__aeabi_dmul>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4614      	mov	r4, r2
 8005664:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005672:	f7fa fe0b 	bl	800028c <__adddf3>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	ec43 2b17 	vmov	d7, r2, r3
 800567e:	eeb0 0a47 	vmov.f32	s0, s14
 8005682:	eef0 0a67 	vmov.f32	s1, s15
 8005686:	f015 faf3 	bl	801ac70 <sin>
 800568a:	ec51 0b10 	vmov	r0, r1, d0
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <kinematicForward+0x240>)
 8005694:	f7fa ffb0 	bl	80005f8 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fa fdf4 	bl	800028c <__adddf3>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4614      	mov	r4, r2
 80056aa:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80056b8:	f7fa fde8 	bl	800028c <__adddf3>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80056ca:	f7fa fddd 	bl	8000288 <__aeabi_dsub>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	ec43 2b17 	vmov	d7, r2, r3
 80056d6:	eeb0 0a47 	vmov.f32	s0, s14
 80056da:	eef0 0a67 	vmov.f32	s1, s15
 80056de:	f015 fac7 	bl	801ac70 <sin>
 80056e2:	ec51 0b10 	vmov	r0, r1, d0
 80056e6:	a32a      	add	r3, pc, #168	; (adr r3, 8005790 <kinematicForward+0x220>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f7fa ff84 	bl	80005f8 <__aeabi_dmul>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa fdc8 	bl	800028c <__adddf3>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800570a:	a125      	add	r1, pc, #148	; (adr r1, 80057a0 <kinematicForward+0x230>)
 800570c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005710:	f7fa fdba 	bl	8000288 <__aeabi_dsub>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4610      	mov	r0, r2
 800571a:	4619      	mov	r1, r3
 800571c:	a322      	add	r3, pc, #136	; (adr r3, 80057a8 <kinematicForward+0x238>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa fdb1 	bl	8000288 <__aeabi_dsub>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800573a:	f7fa fda7 	bl	800028c <__adddf3>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800574c:	f7fa fd9c 	bl	8000288 <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800575e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005768:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005772:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800577c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 8005780:	2301      	movs	r3, #1
}
 8005782:	4618      	mov	r0, r3
 8005784:	3728      	adds	r7, #40	; 0x28
 8005786:	46bd      	mov	sp, r7
 8005788:	bdb0      	pop	{r4, r5, r7, pc}
 800578a:	bf00      	nop
 800578c:	f3af 8000 	nop.w
 8005790:	80000000 	.word	0x80000000
 8005794:	40402e14 	.word	0x40402e14
 8005798:	00000000 	.word	0x00000000
 800579c:	4068a000 	.word	0x4068a000
 80057a0:	00000000 	.word	0x00000000
 80057a4:	406a6000 	.word	0x406a6000
 80057a8:	e0000000 	.word	0xe0000000
 80057ac:	40536b22 	.word	0x40536b22
 80057b0:	40640000 	.word	0x40640000
 80057b4:	00000000 	.word	0x00000000

080057b8 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 80057b8:	b082      	sub	sp, #8
 80057ba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057be:	b0a0      	sub	sp, #128	; 0x80
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80057c8:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80057d2:	a1f0      	add	r1, pc, #960	; (adr r1, 8005b94 <kinematicInverse+0x3dc>)
 80057d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057d8:	f7fa fd56 	bl	8000288 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80057f0:	eeb0 0a47 	vmov.f32	s0, s14
 80057f4:	eef0 0a67 	vmov.f32	s1, s15
 80057f8:	f015 f9a2 	bl	801ab40 <cos>
 80057fc:	ec51 0b10 	vmov	r0, r1, d0
 8005800:	a3e6      	add	r3, pc, #920	; (adr r3, 8005b9c <kinematicInverse+0x3e4>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	f7fa fef7 	bl	80005f8 <__aeabi_dmul>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4650      	mov	r0, sl
 8005810:	4659      	mov	r1, fp
 8005812:	f7fa fd39 	bl	8000288 <__aeabi_dsub>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800582a:	eeb0 0a47 	vmov.f32	s0, s14
 800582e:	eef0 0a67 	vmov.f32	s1, s15
 8005832:	f015 fa1d 	bl	801ac70 <sin>
 8005836:	ec51 0b10 	vmov	r0, r1, d0
 800583a:	a3d8      	add	r3, pc, #864	; (adr r3, 8005b9c <kinematicInverse+0x3e4>)
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f7fa feda 	bl	80005f8 <__aeabi_dmul>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4650      	mov	r0, sl
 800584a:	4659      	mov	r1, fp
 800584c:	f7fa fd1c 	bl	8000288 <__aeabi_dsub>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8005858:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800585c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005860:	f7fa feca 	bl	80005f8 <__aeabi_dmul>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4692      	mov	sl, r2
 800586a:	469b      	mov	fp, r3
 800586c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005870:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005874:	f7fa fec0 	bl	80005f8 <__aeabi_dmul>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4650      	mov	r0, sl
 800587e:	4659      	mov	r1, fp
 8005880:	f7fa fd04 	bl	800028c <__adddf3>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	a3c5      	add	r3, pc, #788	; (adr r3, 8005ba4 <kinematicInverse+0x3ec>)
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f7fa fcf9 	bl	8000288 <__aeabi_dsub>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	4bb9      	ldr	r3, [pc, #740]	; (8005b88 <kinematicInverse+0x3d0>)
 80058a4:	f7fa fcf0 	bl	8000288 <__aeabi_dsub>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4610      	mov	r0, r2
 80058ae:	4619      	mov	r1, r3
 80058b0:	a3b1      	add	r3, pc, #708	; (adr r3, 8005b78 <kinematicInverse+0x3c0>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f7fa ffc9 	bl	800084c <__aeabi_ddiv>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 80058c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058ca:	f7fa fe95 	bl	80005f8 <__aeabi_dmul>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	49ad      	ldr	r1, [pc, #692]	; (8005b8c <kinematicInverse+0x3d4>)
 80058d8:	f7fa fcd6 	bl	8000288 <__aeabi_dsub>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058f0:	f7fb f8f4 	bl	8000adc <__aeabi_dcmplt>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <kinematicInverse+0x146>
		return FALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e134      	b.n	8005b68 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80058fe:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8005902:	f015 fa4d 	bl	801ada0 <sqrt>
 8005906:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590c:	63bb      	str	r3, [r7, #56]	; 0x38
 800590e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005910:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8005916:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800591a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800591e:	f015 fa3d 	bl	801ad9c <atan2>
 8005922:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8005926:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800592a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800592e:	f015 fa35 	bl	801ad9c <atan2>
 8005932:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8005936:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800593a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800593e:	f7fa fca3 	bl	8000288 <__aeabi_dsub>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4614      	mov	r4, r2
 8005948:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800594c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005950:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005954:	f7fa fc98 	bl	8000288 <__aeabi_dsub>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4690      	mov	r8, r2
 800595e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005962:	4642      	mov	r2, r8
 8005964:	464b      	mov	r3, r9
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	f7fb f8c1 	bl	8000af0 <__aeabi_dcmple>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8005974:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005978:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800597c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005980:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005984:	e007      	b.n	8005996 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8005986:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800598a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800598e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005992:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	4b7d      	ldr	r3, [pc, #500]	; (8005b90 <kinematicInverse+0x3d8>)
 800599c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059a0:	f7fa fe2a 	bl	80005f8 <__aeabi_dmul>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4610      	mov	r0, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	a374      	add	r3, pc, #464	; (adr r3, 8005b80 <kinematicInverse+0x3c8>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fc6b 	bl	800028c <__adddf3>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059c2:	f7fa fe19 	bl	80005f8 <__aeabi_dmul>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4614      	mov	r4, r2
 80059cc:	461d      	mov	r5, r3
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	4b6f      	ldr	r3, [pc, #444]	; (8005b90 <kinematicInverse+0x3d8>)
 80059d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80059d8:	f7fa fe0e 	bl	80005f8 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4610      	mov	r0, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80059e8:	f7fa fe06 	bl	80005f8 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fa fc48 	bl	8000288 <__aeabi_dsub>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4614      	mov	r4, r2
 80059fe:	461d      	mov	r5, r3
 8005a00:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a08:	f7fa fdf6 	bl	80005f8 <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4690      	mov	r8, r2
 8005a12:	4699      	mov	r9, r3
 8005a14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a18:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a1c:	f7fa fdec 	bl	80005f8 <__aeabi_dmul>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4640      	mov	r0, r8
 8005a26:	4649      	mov	r1, r9
 8005a28:	f7fa fc30 	bl	800028c <__adddf3>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4620      	mov	r0, r4
 8005a32:	4629      	mov	r1, r5
 8005a34:	f7fa ff0a 	bl	800084c <__aeabi_ddiv>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	4b52      	ldr	r3, [pc, #328]	; (8005b90 <kinematicInverse+0x3d8>)
 8005a46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a4a:	f7fa fdd5 	bl	80005f8 <__aeabi_dmul>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	a34a      	add	r3, pc, #296	; (adr r3, 8005b80 <kinematicInverse+0x3c8>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fc16 	bl	800028c <__adddf3>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a6c:	f7fa fdc4 	bl	80005f8 <__aeabi_dmul>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4614      	mov	r4, r2
 8005a76:	461d      	mov	r5, r3
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	4b44      	ldr	r3, [pc, #272]	; (8005b90 <kinematicInverse+0x3d8>)
 8005a7e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005a82:	f7fa fdb9 	bl	80005f8 <__aeabi_dmul>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a92:	f7fa fdb1 	bl	80005f8 <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f7fa fbf5 	bl	800028c <__adddf3>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4614      	mov	r4, r2
 8005aa8:	461d      	mov	r5, r3
 8005aaa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005aae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ab2:	f7fa fda1 	bl	80005f8 <__aeabi_dmul>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4690      	mov	r8, r2
 8005abc:	4699      	mov	r9, r3
 8005abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ac2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ac6:	f7fa fd97 	bl	80005f8 <__aeabi_dmul>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fa fbdb 	bl	800028c <__adddf3>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4620      	mov	r0, r4
 8005adc:	4629      	mov	r1, r5
 8005ade:	f7fa feb5 	bl	800084c <__aeabi_ddiv>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 8005aea:	ed97 1b06 	vldr	d1, [r7, #24]
 8005aee:	ed97 0b08 	vldr	d0, [r7, #32]
 8005af2:	f015 f953 	bl	801ad9c <atan2>
 8005af6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8005afa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005afe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b02:	f7fa fbc3 	bl	800028c <__adddf3>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005b14:	f7fa fbb8 	bl	8000288 <__aeabi_dsub>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8005b20:	ed97 3b02 	vldr	d3, [r7, #8]
 8005b24:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8005b28:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005b2c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005b30:	f004 fd96 	bl	800a660 <scaraCheckWorkSpace4>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e014      	b.n	8005b68 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b44:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005b4e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005b58:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b62:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 8005b66:	2301      	movs	r3, #1
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3780      	adds	r7, #128	; 0x80
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b72:	b002      	add	sp, #8
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	40eec800 	.word	0x40eec800
 8005b80:	00000000 	.word	0x00000000
 8005b84:	4068a000 	.word	0x4068a000
 8005b88:	40d90000 	.word	0x40d90000
 8005b8c:	3ff00000 	.word	0x3ff00000
 8005b90:	40640000 	.word	0x40640000
 8005b94:	80000000 	.word	0x80000000
 8005b98:	4060aa6e 	.word	0x4060aa6e
 8005b9c:	80000000 	.word	0x80000000
 8005ba0:	40402e14 	.word	0x40402e14
 8005ba4:	00000000 	.word	0x00000000
 8005ba8:	40e2f320 	.word	0x40e2f320

08005bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005bb0:	f005 fe66 	bl	800b880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005bb4:	f000 f82a 	bl	8005c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005bb8:	f7ff fc22 	bl	8005400 <MX_GPIO_Init>
  MX_DMA_Init();
 8005bbc:	f7fc fda4 	bl	8002708 <MX_DMA_Init>
  MX_UART4_Init();
 8005bc0:	f005 fd60 	bl	800b684 <MX_UART4_Init>
  MX_FSMC_Init();
 8005bc4:	f7fe fff0 	bl	8004ba8 <MX_FSMC_Init>
  MX_TIM7_Init();
 8005bc8:	f005 fcea 	bl	800b5a0 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005bcc:	f005 fc9a 	bl	800b504 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)){
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <main+0x58>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <main+0x48>
  		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005bdc:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <main+0x58>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <main+0x58>)
 8005be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be6:	60d3      	str	r3, [r2, #12]
  		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <main+0x5c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <main+0x5c>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6013      	str	r3, [r2, #0]
  	}
  	DWT->CYCCNT = 0;
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <main+0x5c>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005bfa:	f7fc fdbf 	bl	800277c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005bfe:	f00c fec9 	bl	8012994 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005c02:	e7fe      	b.n	8005c02 <main+0x56>
 8005c04:	e000edf0 	.word	0xe000edf0
 8005c08:	e0001000 	.word	0xe0001000

08005c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b094      	sub	sp, #80	; 0x50
 8005c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c12:	f107 0320 	add.w	r3, r7, #32
 8005c16:	2230      	movs	r2, #48	; 0x30
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f010 fad8 	bl	80161d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	4b28      	ldr	r3, [pc, #160]	; (8005cd8 <SystemClock_Config+0xcc>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <SystemClock_Config+0xcc>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <SystemClock_Config+0xcc>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	4b22      	ldr	r3, [pc, #136]	; (8005cdc <SystemClock_Config+0xd0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <SystemClock_Config+0xd0>)
 8005c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	4b1f      	ldr	r3, [pc, #124]	; (8005cdc <SystemClock_Config+0xd0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c72:	2302      	movs	r3, #2
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005c80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005c86:	2302      	movs	r3, #2
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005c8a:	2307      	movs	r3, #7
 8005c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c8e:	f107 0320 	add.w	r3, r7, #32
 8005c92:	4618      	mov	r0, r3
 8005c94:	f007 fe6c 	bl	800d970 <HAL_RCC_OscConfig>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005c9e:	f000 f831 	bl	8005d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ca2:	230f      	movs	r3, #15
 8005ca4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005cae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005cb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005cba:	f107 030c 	add.w	r3, r7, #12
 8005cbe:	2105      	movs	r1, #5
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f008 f8c5 	bl	800de50 <HAL_RCC_ClockConfig>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005ccc:	f000 f81a 	bl	8005d04 <Error_Handler>
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	3750      	adds	r7, #80	; 0x50
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	40007000 	.word	0x40007000

08005ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d101      	bne.n	8005cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005cf2:	f005 fde7 	bl	800b8c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40001000 	.word	0x40001000

08005d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d24:	3308      	adds	r3, #8
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <ringBuff_PushChar+0x1e>
		return FALSE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e02e      	b.n	8005d8e <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	78f9      	ldrb	r1, [r7, #3]
 8005d3c:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3301      	adds	r3, #1
 8005d48:	425a      	negs	r2, r3
 8005d4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005d52:	bf58      	it	pl
 8005d54:	4253      	negpl	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005d5c:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d105      	bne.n	8005d80 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d86:	3309      	adds	r3, #9
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005d8c:	2301      	movs	r3, #1
	}
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005daa:	3309      	adds	r3, #9
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <ringBuff_PopChar+0x1c>
		return FALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e032      	b.n	8005e1c <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	5cd2      	ldrb	r2, [r2, r3]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dce:	3304      	adds	r3, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	4259      	negs	r1, r3
 8005dd6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005dda:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8005dde:	bf58      	it	pl
 8005de0:	425a      	negpl	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005de8:	3304      	adds	r3, #4
 8005dea:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d105      	bne.n	8005e0e <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e08:	3309      	adds	r3, #9
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e14:	3308      	adds	r3, #8
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005e1a:	2301      	movs	r3, #1
	}
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005e34:	2300      	movs	r3, #0
 8005e36:	82fb      	strh	r3, [r7, #22]
 8005e38:	e011      	b.n	8005e5e <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005e3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4413      	add	r3, r2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	4619      	mov	r1, r3
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff ff63 	bl	8005d12 <ringBuff_PushChar>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8005e52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	82fb      	strh	r3, [r7, #22]
 8005e5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	dce8      	bgt.n	8005e3a <ringBuff_PushArray+0x12>
 8005e68:	e000      	b.n	8005e6c <ringBuff_PushArray+0x44>
			break;
 8005e6a:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005e6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e00c      	b.n	8005ea4 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	4413      	add	r3, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff ff81 	bl	8005d9a <ringBuff_PopChar>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	dbee      	blt.n	8005e8a <ringBuff_PopArray+0x12>
 8005eac:	e000      	b.n	8005eb0 <ringBuff_PopArray+0x38>
			break;
 8005eae:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005eb0:	697b      	ldr	r3, [r7, #20]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005eca:	3304      	adds	r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8005ee2:	6838      	ldr	r0, [r7, #0]
 8005ee4:	f7fa f974 	bl	80001d0 <strlen>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d066      	beq.n	8005fc8 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	e030      	b.n	8005f62 <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	440b      	add	r3, r1
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d103      	bne.n	8005f1c <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	3301      	adds	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e00c      	b.n	8005f36 <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d102      	bne.n	8005f32 <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e001      	b.n	8005f36 <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d101      	bne.n	8005f42 <ringBuff_DistanceOf+0x88>
	                return distance;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	e048      	b.n	8005fd4 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	425a      	negs	r2, r3
 8005f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f58:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005f5c:	bf58      	it	pl
 8005f5e:	4253      	negpl	r3, r2
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f68:	dbca      	blt.n	8005f00 <ringBuff_DistanceOf+0x46>
 8005f6a:	e031      	b.n	8005fd0 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	440b      	add	r3, r1
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d103      	bne.n	8005f88 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	e00c      	b.n	8005fa2 <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d102      	bne.n	8005f9e <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e001      	b.n	8005fa2 <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d101      	bne.n	8005fae <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	e012      	b.n	8005fd4 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	425a      	negs	r2, r3
 8005fba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fbe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005fc2:	bf58      	it	pl
 8005fc4:	4253      	negpl	r3, r2
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d1cd      	bne.n	8005f6c <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005fe0:	f000 fdfe 	bl	8006be0 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <lowlayer_scanReset+0x4c>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <lowlayer_scanReset+0x4c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <lowlayer_scanReset+0x4c>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <lowlayer_scanReset+0x4c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <lowlayer_scanReset+0x50>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <lowlayer_scanReset+0x50>)
 8006004:	2200      	movs	r2, #0
 8006006:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8006008:	4b08      	ldr	r3, [pc, #32]	; (800602c <lowlayer_scanReset+0x50>)
 800600a:	2200      	movs	r2, #0
 800600c:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <lowlayer_scanReset+0x54>)
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8006014:	4b07      	ldr	r3, [pc, #28]	; (8006034 <lowlayer_scanReset+0x58>)
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 800601a:	2200      	movs	r2, #0
 800601c:	2108      	movs	r1, #8
 800601e:	4806      	ldr	r0, [pc, #24]	; (8006038 <lowlayer_scanReset+0x5c>)
 8006020:	f006 fab2 	bl	800c588 <HAL_GPIO_WritePin>
}
 8006024:	bf00      	nop
 8006026:	bd80      	pop	{r7, pc}
 8006028:	2000fed8 	.word	0x2000fed8
 800602c:	2000feec 	.word	0x2000feec
 8006030:	2000fee8 	.word	0x2000fee8
 8006034:	2000ff08 	.word	0x2000ff08
 8006038:	40020c00 	.word	0x40020c00
 800603c:	00000000 	.word	0x00000000

08006040 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8006046:	2300      	movs	r3, #0
 8006048:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 800604a:	f000 fe87 	bl	8006d5c <lowlayer_updateLimit>
	if (state_scan < 4) {
 800604e:	4b96      	ldr	r3, [pc, #600]	; (80062a8 <lowlayer_scanFlow+0x268>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b03      	cmp	r3, #3
 8006054:	d837      	bhi.n	80060c6 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8006056:	4b94      	ldr	r3, [pc, #592]	; (80062a8 <lowlayer_scanFlow+0x268>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f1c3 0303 	rsb	r3, r3, #3
 800605e:	4a93      	ldr	r2, [pc, #588]	; (80062ac <lowlayer_scanFlow+0x26c>)
 8006060:	5cd3      	ldrb	r3, [r2, r3]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d121      	bne.n	80060aa <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8006066:	4b90      	ldr	r3, [pc, #576]	; (80062a8 <lowlayer_scanFlow+0x268>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f1c3 0203 	rsb	r2, r3, #3
 800606e:	4b8e      	ldr	r3, [pc, #568]	; (80062a8 <lowlayer_scanFlow+0x268>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	f1c3 0303 	rsb	r3, r3, #3
 8006076:	498e      	ldr	r1, [pc, #568]	; (80062b0 <lowlayer_scanFlow+0x270>)
 8006078:	568a      	ldrsb	r2, [r1, r2]
 800607a:	f107 0108 	add.w	r1, r7, #8
 800607e:	440b      	add	r3, r1
 8006080:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8006084:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	425b      	negs	r3, r3
 800608c:	b2db      	uxtb	r3, r3
 800608e:	b258      	sxtb	r0, r3
 8006090:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8006094:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	425b      	negs	r3, r3
 800609c:	b2db      	uxtb	r3, r3
 800609e:	b25a      	sxtb	r2, r3
 80060a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a4:	f000 fcd8 	bl	8006a58 <lowlayer_writePulse>
 80060a8:	e00b      	b.n	80060c2 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 80060aa:	4b7f      	ldr	r3, [pc, #508]	; (80062a8 <lowlayer_scanFlow+0x268>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	4b7d      	ldr	r3, [pc, #500]	; (80062a8 <lowlayer_scanFlow+0x268>)
 80060b4:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 80060b6:	2300      	movs	r3, #0
 80060b8:	2200      	movs	r2, #0
 80060ba:	2100      	movs	r1, #0
 80060bc:	2000      	movs	r0, #0
 80060be:	f000 fccb 	bl	8006a58 <lowlayer_writePulse>
		}

		return FALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e0d2      	b.n	800626c <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 80060c6:	2201      	movs	r2, #1
 80060c8:	2108      	movs	r1, #8
 80060ca:	487a      	ldr	r0, [pc, #488]	; (80062b4 <lowlayer_scanFlow+0x274>)
 80060cc:	f006 fa5c 	bl	800c588 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 80060d0:	f000 fe28 	bl	8006d24 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 80060d4:	2300      	movs	r3, #0
 80060d6:	2200      	movs	r2, #0
 80060d8:	2100      	movs	r1, #0
 80060da:	2000      	movs	r0, #0
 80060dc:	f000 fcbc 	bl	8006a58 <lowlayer_writePulse>
		scan_flag = 1;
 80060e0:	4b75      	ldr	r3, [pc, #468]	; (80062b8 <lowlayer_scanFlow+0x278>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 80060e6:	4b75      	ldr	r3, [pc, #468]	; (80062bc <lowlayer_scanFlow+0x27c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a75      	ldr	r2, [pc, #468]	; (80062c0 <lowlayer_scanFlow+0x280>)
 80060ec:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 80060ee:	4b73      	ldr	r3, [pc, #460]	; (80062bc <lowlayer_scanFlow+0x27c>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4a73      	ldr	r2, [pc, #460]	; (80062c0 <lowlayer_scanFlow+0x280>)
 80060f4:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 80060f6:	4b71      	ldr	r3, [pc, #452]	; (80062bc <lowlayer_scanFlow+0x27c>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	4a71      	ldr	r2, [pc, #452]	; (80062c0 <lowlayer_scanFlow+0x280>)
 80060fc:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 80060fe:	4b71      	ldr	r3, [pc, #452]	; (80062c4 <lowlayer_scanFlow+0x284>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4a71      	ldr	r2, [pc, #452]	; (80062c8 <lowlayer_scanFlow+0x288>)
 8006104:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8006106:	4b6e      	ldr	r3, [pc, #440]	; (80062c0 <lowlayer_scanFlow+0x280>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	486f      	ldr	r0, [pc, #444]	; (80062cc <lowlayer_scanFlow+0x28c>)
 8006110:	f7fc fa44 	bl	800259c <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8006114:	4b6a      	ldr	r3, [pc, #424]	; (80062c0 <lowlayer_scanFlow+0x280>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	b29b      	uxth	r3, r3
 800611a:	4619      	mov	r1, r3
 800611c:	486c      	ldr	r0, [pc, #432]	; (80062d0 <lowlayer_scanFlow+0x290>)
 800611e:	f7fc fa3d 	bl	800259c <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8006122:	4b67      	ldr	r3, [pc, #412]	; (80062c0 <lowlayer_scanFlow+0x280>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	b29b      	uxth	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	486a      	ldr	r0, [pc, #424]	; (80062d4 <lowlayer_scanFlow+0x294>)
 800612c:	f7fc fa36 	bl	800259c <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8006130:	4b65      	ldr	r3, [pc, #404]	; (80062c8 <lowlayer_scanFlow+0x288>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	4619      	mov	r1, r3
 8006138:	4867      	ldr	r0, [pc, #412]	; (80062d8 <lowlayer_scanFlow+0x298>)
 800613a:	f7fc fa2f 	bl	800259c <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 800613e:	4b60      	ldr	r3, [pc, #384]	; (80062c0 <lowlayer_scanFlow+0x280>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800614a:	ee17 0a90 	vmov	r0, s15
 800614e:	f7fa f9fb 	bl	8000548 <__aeabi_f2d>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	f7fa f899 	bl	800028c <__adddf3>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	a345      	add	r3, pc, #276	; (adr r3, 8006278 <lowlayer_scanFlow+0x238>)
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	f7fa fa46 	bl	80005f8 <__aeabi_dmul>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	a342      	add	r3, pc, #264	; (adr r3, 8006280 <lowlayer_scanFlow+0x240>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f7fa fb67 	bl	800084c <__aeabi_ddiv>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	a141      	add	r1, pc, #260	; (adr r1, 8006288 <lowlayer_scanFlow+0x248>)
 8006184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006188:	f7fa f87e 	bl	8000288 <__aeabi_dsub>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8006190:	4952      	ldr	r1, [pc, #328]	; (80062dc <lowlayer_scanFlow+0x29c>)
 8006192:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8006196:	4b4a      	ldr	r3, [pc, #296]	; (80062c0 <lowlayer_scanFlow+0x280>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061a2:	ee17 0a90 	vmov	r0, s15
 80061a6:	f7fa f9cf 	bl	8000548 <__aeabi_f2d>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	f7fa f86d 	bl	800028c <__adddf3>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	a32f      	add	r3, pc, #188	; (adr r3, 8006278 <lowlayer_scanFlow+0x238>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa fa1a 	bl	80005f8 <__aeabi_dmul>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	4b43      	ldr	r3, [pc, #268]	; (80062e0 <lowlayer_scanFlow+0x2a0>)
 80061d2:	f7fa fb3b 	bl	800084c <__aeabi_ddiv>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	a12d      	add	r1, pc, #180	; (adr r1, 8006290 <lowlayer_scanFlow+0x250>)
 80061dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e0:	f7fa f852 	bl	8000288 <__aeabi_dsub>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 80061e8:	493c      	ldr	r1, [pc, #240]	; (80062dc <lowlayer_scanFlow+0x29c>)
 80061ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 80061ee:	4b34      	ldr	r3, [pc, #208]	; (80062c0 <lowlayer_scanFlow+0x280>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061fa:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80062e4 <lowlayer_scanFlow+0x2a4>
 80061fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006202:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80062e8 <lowlayer_scanFlow+0x2a8>
 8006206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800620a:	ee17 0a90 	vmov	r0, s15
 800620e:	f7fa f99b 	bl	8000548 <__aeabi_f2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8006216:	4931      	ldr	r1, [pc, #196]	; (80062dc <lowlayer_scanFlow+0x29c>)
 8006218:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 800621c:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <lowlayer_scanFlow+0x288>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f7fa f97f 	bl	8000524 <__aeabi_i2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	f7fa f82f 	bl	800028c <__adddf3>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4610      	mov	r0, r2
 8006234:	4619      	mov	r1, r3
 8006236:	a310      	add	r3, pc, #64	; (adr r3, 8006278 <lowlayer_scanFlow+0x238>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4610      	mov	r0, r2
 8006246:	4619      	mov	r1, r3
 8006248:	a313      	add	r3, pc, #76	; (adr r3, 8006298 <lowlayer_scanFlow+0x258>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7fa fafd 	bl	800084c <__aeabi_ddiv>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	a112      	add	r1, pc, #72	; (adr r1, 80062a0 <lowlayer_scanFlow+0x260>)
 8006258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800625c:	f7fa f814 	bl	8000288 <__aeabi_dsub>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8006264:	491d      	ldr	r1, [pc, #116]	; (80062dc <lowlayer_scanFlow+0x29c>)
 8006266:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 800626a:	2301      	movs	r3, #1
	}
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	f3af 8000 	nop.w
 8006278:	60000000 	.word	0x60000000
 800627c:	400921fb 	.word	0x400921fb
 8006280:	00000000 	.word	0x00000000
 8006284:	40f38800 	.word	0x40f38800
 8006288:	40000000 	.word	0x40000000
 800628c:	bff9f17a 	.word	0xbff9f17a
 8006290:	80000000 	.word	0x80000000
 8006294:	40039716 	.word	0x40039716
 8006298:	a0000000 	.word	0xa0000000
 800629c:	40d3bca1 	.word	0x40d3bca1
 80062a0:	a0000000 	.word	0xa0000000
 80062a4:	4008330d 	.word	0x4008330d
 80062a8:	2000ff08 	.word	0x2000ff08
 80062ac:	2000fef8 	.word	0x2000fef8
 80062b0:	0801c6ec 	.word	0x0801c6ec
 80062b4:	40020c00 	.word	0x40020c00
 80062b8:	2000fee8 	.word	0x2000fee8
 80062bc:	2000fefc 	.word	0x2000fefc
 80062c0:	2000ff30 	.word	0x2000ff30
 80062c4:	2000fed8 	.word	0x2000fed8
 80062c8:	2000ff0c 	.word	0x2000ff0c
 80062cc:	0801c614 	.word	0x0801c614
 80062d0:	0801c628 	.word	0x0801c628
 80062d4:	0801c63c 	.word	0x0801c63c
 80062d8:	0801c650 	.word	0x0801c650
 80062dc:	2000ff10 	.word	0x2000ff10
 80062e0:	40ff4000 	.word	0x40ff4000
 80062e4:	4426aaab 	.word	0x4426aaab
 80062e8:	400f1aa0 	.word	0x400f1aa0
 80062ec:	00000000 	.word	0x00000000

080062f0 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 80062f8:	2300      	movs	r3, #0
 80062fa:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f94d 	bl	80065a0 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800630c:	a330      	add	r3, pc, #192	; (adr r3, 80063d0 <lowlayer_goToSoftLimit+0xe0>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f7fa fbe3 	bl	8000adc <__aeabi_dcmplt>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d004      	beq.n	8006326 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 800631c:	2303      	movs	r3, #3
 800631e:	723b      	strb	r3, [r7, #8]
		check++;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	3301      	adds	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800632c:	a32a      	add	r3, pc, #168	; (adr r3, 80063d8 <lowlayer_goToSoftLimit+0xe8>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7fa fbf1 	bl	8000b18 <__aeabi_dcmpgt>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 800633c:	2305      	movs	r3, #5
 800633e:	727b      	strb	r3, [r7, #9]
		check++;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	3301      	adds	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	f7fa fbc2 	bl	8000adc <__aeabi_dcmplt>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 800635e:	2305      	movs	r3, #5
 8006360:	72bb      	strb	r3, [r7, #10]
		check++;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	3301      	adds	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800636e:	a31c      	add	r3, pc, #112	; (adr r3, 80063e0 <lowlayer_goToSoftLimit+0xf0>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f7fa fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 800637e:	230a      	movs	r3, #10
 8006380:	72fb      	strb	r3, [r7, #11]
		check++;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	3301      	adds	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d013      	beq.n	80063b6 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 800638e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8006392:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	425b      	negs	r3, r3
 800639a:	b2db      	uxtb	r3, r3
 800639c:	b259      	sxtb	r1, r3
 800639e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 80063a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	425b      	negs	r3, r3
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f000 fb53 	bl	8006a58 <lowlayer_writePulse>
		return FALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e006      	b.n	80063c4 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 80063b6:	2300      	movs	r3, #0
 80063b8:	2200      	movs	r2, #0
 80063ba:	2100      	movs	r1, #0
 80063bc:	2000      	movs	r0, #0
 80063be:	f000 fb4b 	bl	8006a58 <lowlayer_writePulse>
		return TRUE;
 80063c2:	2301      	movs	r3, #1
	}
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	f3af 8000 	nop.w
 80063d0:	daaaaaab 	.word	0xdaaaaaab
 80063d4:	bff7bc89 	.word	0xbff7bc89
 80063d8:	88000000 	.word	0x88000000
 80063dc:	4002d97c 	.word	0x4002d97c
 80063e0:	daaaaaab 	.word	0xdaaaaaab
 80063e4:	4007bc89 	.word	0x4007bc89

080063e8 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 80063f0:	f000 fc7c 	bl	8006cec <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 80063f4:	4b62      	ldr	r3, [pc, #392]	; (8006580 <lowlayer_readTruePosition+0x198>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b62      	ldr	r3, [pc, #392]	; (8006584 <lowlayer_readTruePosition+0x19c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006406:	ee17 0a90 	vmov	r0, s15
 800640a:	f7fa f89d 	bl	8000548 <__aeabi_f2d>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	f7f9 ff3b 	bl	800028c <__adddf3>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	a34c      	add	r3, pc, #304	; (adr r3, 8006550 <lowlayer_readTruePosition+0x168>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f7fa f8e8 	bl	80005f8 <__aeabi_dmul>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	a349      	add	r3, pc, #292	; (adr r3, 8006558 <lowlayer_readTruePosition+0x170>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f7fa fa09 	bl	800084c <__aeabi_ddiv>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4610      	mov	r0, r2
 8006440:	4619      	mov	r1, r3
 8006442:	a347      	add	r3, pc, #284	; (adr r3, 8006560 <lowlayer_readTruePosition+0x178>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7f9 ff1e 	bl	8000288 <__aeabi_dsub>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8006456:	4b4a      	ldr	r3, [pc, #296]	; (8006580 <lowlayer_readTruePosition+0x198>)
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4b4a      	ldr	r3, [pc, #296]	; (8006584 <lowlayer_readTruePosition+0x19c>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006468:	ee17 0a90 	vmov	r0, s15
 800646c:	f7fa f86c 	bl	8000548 <__aeabi_f2d>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	f7f9 ff0a 	bl	800028c <__adddf3>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	a333      	add	r3, pc, #204	; (adr r3, 8006550 <lowlayer_readTruePosition+0x168>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7fa f8b7 	bl	80005f8 <__aeabi_dmul>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	4b3c      	ldr	r3, [pc, #240]	; (8006588 <lowlayer_readTruePosition+0x1a0>)
 8006498:	f7fa f9d8 	bl	800084c <__aeabi_ddiv>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4610      	mov	r0, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	a330      	add	r3, pc, #192	; (adr r3, 8006568 <lowlayer_readTruePosition+0x180>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f7f9 feef 	bl	800028c <__adddf3>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 80064b8:	4b31      	ldr	r3, [pc, #196]	; (8006580 <lowlayer_readTruePosition+0x198>)
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	4b31      	ldr	r3, [pc, #196]	; (8006584 <lowlayer_readTruePosition+0x19c>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ca:	eeb1 7a67 	vneg.f32	s14, s15
 80064ce:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800658c <lowlayer_readTruePosition+0x1a4>
 80064d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064d6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006590 <lowlayer_readTruePosition+0x1a8>
 80064da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064de:	ee17 0a90 	vmov	r0, s15
 80064e2:	f7fa f831 	bl	8000548 <__aeabi_f2d>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 80064f0:	4b28      	ldr	r3, [pc, #160]	; (8006594 <lowlayer_readTruePosition+0x1ac>)
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	4b28      	ldr	r3, [pc, #160]	; (8006598 <lowlayer_readTruePosition+0x1b0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	f7f9 fec2 	bl	800028c <__adddf3>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	a30f      	add	r3, pc, #60	; (adr r3, 8006550 <lowlayer_readTruePosition+0x168>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	a313      	add	r3, pc, #76	; (adr r3, 8006570 <lowlayer_readTruePosition+0x188>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f7fa f990 	bl	800084c <__aeabi_ddiv>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4610      	mov	r0, r2
 8006532:	4619      	mov	r1, r3
 8006534:	a310      	add	r3, pc, #64	; (adr r3, 8006578 <lowlayer_readTruePosition+0x190>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 fea7 	bl	800028c <__adddf3>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	60000000 	.word	0x60000000
 8006554:	400921fb 	.word	0x400921fb
 8006558:	00000000 	.word	0x00000000
 800655c:	40f38800 	.word	0x40f38800
 8006560:	40000000 	.word	0x40000000
 8006564:	3ff9f17a 	.word	0x3ff9f17a
 8006568:	80000000 	.word	0x80000000
 800656c:	40039716 	.word	0x40039716
 8006570:	a0000000 	.word	0xa0000000
 8006574:	40d3bca1 	.word	0x40d3bca1
 8006578:	a0000000 	.word	0xa0000000
 800657c:	4008330d 	.word	0x4008330d
 8006580:	2000feec 	.word	0x2000feec
 8006584:	2000ff30 	.word	0x2000ff30
 8006588:	40ff4000 	.word	0x40ff4000
 800658c:	4426aaab 	.word	0x4426aaab
 8006590:	400f1aa0 	.word	0x400f1aa0
 8006594:	2000fed8 	.word	0x2000fed8
 8006598:	2000ff0c 	.word	0x2000ff0c
 800659c:	00000000 	.word	0x00000000

080065a0 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 80065a0:	b5b0      	push	{r4, r5, r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 80065a8:	4b53      	ldr	r3, [pc, #332]	; (80066f8 <lowlayer_readSetPosition+0x158>)
 80065aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80065ae:	4b53      	ldr	r3, [pc, #332]	; (80066fc <lowlayer_readSetPosition+0x15c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7f9 ffb6 	bl	8000524 <__aeabi_i2d>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	f7f9 fe66 	bl	800028c <__adddf3>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4610      	mov	r0, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	a345      	add	r3, pc, #276	; (adr r3, 80066e0 <lowlayer_readSetPosition+0x140>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f813 	bl	80005f8 <__aeabi_dmul>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	a343      	add	r3, pc, #268	; (adr r3, 80066e8 <lowlayer_readSetPosition+0x148>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f7fa f934 	bl	800084c <__aeabi_ddiv>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4620      	mov	r0, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7f9 fe4e 	bl	800028c <__adddf3>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80065fa:	4b3f      	ldr	r3, [pc, #252]	; (80066f8 <lowlayer_readSetPosition+0x158>)
 80065fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006600:	4b3e      	ldr	r3, [pc, #248]	; (80066fc <lowlayer_readSetPosition+0x15c>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4618      	mov	r0, r3
 8006606:	f7f9 ff8d 	bl	8000524 <__aeabi_i2d>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	f7f9 fe3d 	bl	800028c <__adddf3>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	a331      	add	r3, pc, #196	; (adr r3, 80066e0 <lowlayer_readSetPosition+0x140>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 ffea 	bl	80005f8 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4610      	mov	r0, r2
 800662a:	4619      	mov	r1, r3
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	4b33      	ldr	r3, [pc, #204]	; (8006700 <lowlayer_readSetPosition+0x160>)
 8006632:	f7fa f90b 	bl	800084c <__aeabi_ddiv>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	f7f9 fe25 	bl	800028c <__adddf3>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 800664c:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <lowlayer_readSetPosition+0x158>)
 800664e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006652:	4b2a      	ldr	r3, [pc, #168]	; (80066fc <lowlayer_readSetPosition+0x15c>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800665e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006704 <lowlayer_readSetPosition+0x164>
 8006662:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006666:	ee16 0a90 	vmov	r0, s13
 800666a:	f7f9 ff6d 	bl	8000548 <__aeabi_f2d>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4620      	mov	r0, r4
 8006674:	4629      	mov	r1, r5
 8006676:	f7f9 fe09 	bl	800028c <__adddf3>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8006684:	4b1c      	ldr	r3, [pc, #112]	; (80066f8 <lowlayer_readSetPosition+0x158>)
 8006686:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800668a:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <lowlayer_readSetPosition+0x15c>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	4618      	mov	r0, r3
 8006690:	f7f9 ff48 	bl	8000524 <__aeabi_i2d>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	f7f9 fdf8 	bl	800028c <__adddf3>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4610      	mov	r0, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	a30e      	add	r3, pc, #56	; (adr r3, 80066e0 <lowlayer_readSetPosition+0x140>)
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	f7f9 ffa5 	bl	80005f8 <__aeabi_dmul>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4610      	mov	r0, r2
 80066b4:	4619      	mov	r1, r3
 80066b6:	a30e      	add	r3, pc, #56	; (adr r3, 80066f0 <lowlayer_readSetPosition+0x150>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f7fa f8c6 	bl	800084c <__aeabi_ddiv>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7f9 fde0 	bl	800028c <__adddf3>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bdb0      	pop	{r4, r5, r7, pc}
 80066de:	bf00      	nop
 80066e0:	60000000 	.word	0x60000000
 80066e4:	400921fb 	.word	0x400921fb
 80066e8:	00000000 	.word	0x00000000
 80066ec:	40d38800 	.word	0x40d38800
 80066f0:	a0000000 	.word	0xa0000000
 80066f4:	40d3bca1 	.word	0x40d3bca1
 80066f8:	2000ff10 	.word	0x2000ff10
 80066fc:	2000fed8 	.word	0x2000fed8
 8006700:	40df4000 	.word	0x40df4000
 8006704:	42c80000 	.word	0x42c80000

08006708 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8006708:	b084      	sub	sp, #16
 800670a:	b580      	push	{r7, lr}
 800670c:	b092      	sub	sp, #72	; 0x48
 800670e:	af00      	add	r7, sp, #0
 8006710:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8006714:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006718:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800671c:	a3c6      	add	r3, pc, #792	; (adr r3, 8006a38 <lowlayer_computeAndWritePulse+0x330>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 fdb3 	bl	800028c <__adddf3>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	a3c4      	add	r3, pc, #784	; (adr r3, 8006a40 <lowlayer_computeAndWritePulse+0x338>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 ff60 	bl	80005f8 <__aeabi_dmul>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4610      	mov	r0, r2
 800673e:	4619      	mov	r1, r3
 8006740:	a3b7      	add	r3, pc, #732	; (adr r3, 8006a20 <lowlayer_computeAndWritePulse+0x318>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7fa f881 	bl	800084c <__aeabi_ddiv>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	ec43 2b17 	vmov	d7, r2, r3
 8006752:	eeb0 0a47 	vmov.f32	s0, s14
 8006756:	eef0 0a67 	vmov.f32	s1, s15
 800675a:	f014 fa41 	bl	801abe0 <round>
 800675e:	ec53 2b10 	vmov	r2, r3, d0
 8006762:	4610      	mov	r0, r2
 8006764:	4619      	mov	r1, r3
 8006766:	f7fa fa1f 	bl	8000ba8 <__aeabi_d2uiz>
 800676a:	4603      	mov	r3, r0
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800676e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006772:	a3b5      	add	r3, pc, #724	; (adr r3, 8006a48 <lowlayer_computeAndWritePulse+0x340>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd88 	bl	800028c <__adddf3>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4610      	mov	r0, r2
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	4bb1      	ldr	r3, [pc, #708]	; (8006a50 <lowlayer_computeAndWritePulse+0x348>)
 800678a:	f7f9 ff35 	bl	80005f8 <__aeabi_dmul>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	a3a2      	add	r3, pc, #648	; (adr r3, 8006a20 <lowlayer_computeAndWritePulse+0x318>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7fa f856 	bl	800084c <__aeabi_ddiv>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	ec43 2b17 	vmov	d7, r2, r3
 80067a8:	eeb0 0a47 	vmov.f32	s0, s14
 80067ac:	eef0 0a67 	vmov.f32	s1, s15
 80067b0:	f014 fa16 	bl	801abe0 <round>
 80067b4:	ec53 2b10 	vmov	r2, r3, d0
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	f7fa f9f4 	bl	8000ba8 <__aeabi_d2uiz>
 80067c0:	4603      	mov	r3, r0
 80067c2:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 80067c4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	4ba1      	ldr	r3, [pc, #644]	; (8006a54 <lowlayer_computeAndWritePulse+0x34c>)
 80067ce:	f7f9 ff13 	bl	80005f8 <__aeabi_dmul>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	ec43 2b17 	vmov	d7, r2, r3
 80067da:	eeb0 0a47 	vmov.f32	s0, s14
 80067de:	eef0 0a67 	vmov.f32	s1, s15
 80067e2:	f014 f9fd 	bl	801abe0 <round>
 80067e6:	ec53 2b10 	vmov	r2, r3, d0
 80067ea:	4610      	mov	r0, r2
 80067ec:	4619      	mov	r1, r3
 80067ee:	f7fa f9db 	bl	8000ba8 <__aeabi_d2uiz>
 80067f2:	4603      	mov	r3, r0
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80067f6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80067fa:	a38b      	add	r3, pc, #556	; (adr r3, 8006a28 <lowlayer_computeAndWritePulse+0x320>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f7f9 fd44 	bl	800028c <__adddf3>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4610      	mov	r0, r2
 800680a:	4619      	mov	r1, r3
 800680c:	a388      	add	r3, pc, #544	; (adr r3, 8006a30 <lowlayer_computeAndWritePulse+0x328>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f7f9 fef1 	bl	80005f8 <__aeabi_dmul>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	a380      	add	r3, pc, #512	; (adr r3, 8006a20 <lowlayer_computeAndWritePulse+0x318>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7fa f812 	bl	800084c <__aeabi_ddiv>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	ec43 2b17 	vmov	d7, r2, r3
 8006830:	eeb0 0a47 	vmov.f32	s0, s14
 8006834:	eef0 0a67 	vmov.f32	s1, s15
 8006838:	f014 f9d2 	bl	801abe0 <round>
 800683c:	ec53 2b10 	vmov	r2, r3, d0
 8006840:	4610      	mov	r0, r2
 8006842:	4619      	mov	r1, r3
 8006844:	f7fa f9b0 	bl	8000ba8 <__aeabi_d2uiz>
 8006848:	4603      	mov	r3, r0
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 800684c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006850:	a379      	add	r3, pc, #484	; (adr r3, 8006a38 <lowlayer_computeAndWritePulse+0x330>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f7f9 fd19 	bl	800028c <__adddf3>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	a377      	add	r3, pc, #476	; (adr r3, 8006a40 <lowlayer_computeAndWritePulse+0x338>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fec6 	bl	80005f8 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4610      	mov	r0, r2
 8006872:	4619      	mov	r1, r3
 8006874:	a36a      	add	r3, pc, #424	; (adr r3, 8006a20 <lowlayer_computeAndWritePulse+0x318>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f7f9 ffe7 	bl	800084c <__aeabi_ddiv>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	ec43 2b17 	vmov	d7, r2, r3
 8006886:	eeb0 0a47 	vmov.f32	s0, s14
 800688a:	eef0 0a67 	vmov.f32	s1, s15
 800688e:	f014 f9a7 	bl	801abe0 <round>
 8006892:	ec53 2b10 	vmov	r2, r3, d0
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f985 	bl	8000ba8 <__aeabi_d2uiz>
 800689e:	4603      	mov	r3, r0
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80068a2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80068a6:	a368      	add	r3, pc, #416	; (adr r3, 8006a48 <lowlayer_computeAndWritePulse+0x340>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fcee 	bl	800028c <__adddf3>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	4b64      	ldr	r3, [pc, #400]	; (8006a50 <lowlayer_computeAndWritePulse+0x348>)
 80068be:	f7f9 fe9b 	bl	80005f8 <__aeabi_dmul>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4610      	mov	r0, r2
 80068c8:	4619      	mov	r1, r3
 80068ca:	a355      	add	r3, pc, #340	; (adr r3, 8006a20 <lowlayer_computeAndWritePulse+0x318>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 ffbc 	bl	800084c <__aeabi_ddiv>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	ec43 2b17 	vmov	d7, r2, r3
 80068dc:	eeb0 0a47 	vmov.f32	s0, s14
 80068e0:	eef0 0a67 	vmov.f32	s1, s15
 80068e4:	f014 f97c 	bl	801abe0 <round>
 80068e8:	ec53 2b10 	vmov	r2, r3, d0
 80068ec:	4610      	mov	r0, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	f7fa f95a 	bl	8000ba8 <__aeabi_d2uiz>
 80068f4:	4603      	mov	r3, r0
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80068f8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	4b54      	ldr	r3, [pc, #336]	; (8006a54 <lowlayer_computeAndWritePulse+0x34c>)
 8006902:	f7f9 fe79 	bl	80005f8 <__aeabi_dmul>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	ec43 2b17 	vmov	d7, r2, r3
 800690e:	eeb0 0a47 	vmov.f32	s0, s14
 8006912:	eef0 0a67 	vmov.f32	s1, s15
 8006916:	f014 f963 	bl	801abe0 <round>
 800691a:	ec53 2b10 	vmov	r2, r3, d0
 800691e:	4610      	mov	r0, r2
 8006920:	4619      	mov	r1, r3
 8006922:	f7fa f941 	bl	8000ba8 <__aeabi_d2uiz>
 8006926:	4603      	mov	r3, r0
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800692a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800692e:	a33e      	add	r3, pc, #248	; (adr r3, 8006a28 <lowlayer_computeAndWritePulse+0x320>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fcaa 	bl	800028c <__adddf3>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	a33b      	add	r3, pc, #236	; (adr r3, 8006a30 <lowlayer_computeAndWritePulse+0x328>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fe57 	bl	80005f8 <__aeabi_dmul>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	a333      	add	r3, pc, #204	; (adr r3, 8006a20 <lowlayer_computeAndWritePulse+0x318>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 ff78 	bl	800084c <__aeabi_ddiv>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	ec43 2b17 	vmov	d7, r2, r3
 8006964:	eeb0 0a47 	vmov.f32	s0, s14
 8006968:	eef0 0a67 	vmov.f32	s1, s15
 800696c:	f014 f938 	bl	801abe0 <round>
 8006970:	ec53 2b10 	vmov	r2, r3, d0
 8006974:	4610      	mov	r0, r2
 8006976:	4619      	mov	r1, r3
 8006978:	f7fa f916 	bl	8000ba8 <__aeabi_d2uiz>
 800697c:	4603      	mov	r3, r0
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8006980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	461a      	mov	r2, r3
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8006990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 80069a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80069b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bfb8      	it	lt
 80069c6:	425b      	neglt	r3, r3
 80069c8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ca:	dc11      	bgt.n	80069f0 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bfb8      	it	lt
 80069d2:	425b      	neglt	r3, r3
 80069d4:	2b7f      	cmp	r3, #127	; 0x7f
 80069d6:	dc0b      	bgt.n	80069f0 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfb8      	it	lt
 80069de:	425b      	neglt	r3, r3
 80069e0:	2b7f      	cmp	r3, #127	; 0x7f
 80069e2:	dc05      	bgt.n	80069f0 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfb8      	it	lt
 80069ea:	425b      	neglt	r3, r3
 80069ec:	2b7f      	cmp	r3, #127	; 0x7f
 80069ee:	dd01      	ble.n	80069f4 <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 80069f0:	2300      	movs	r3, #0
 80069f2:	e00c      	b.n	8006a0e <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 80069f4:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80069f8:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80069fc:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006a00:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8006a04:	f000 f828 	bl	8006a58 <lowlayer_writePulse>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3748      	adds	r7, #72	; 0x48
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a18:	b004      	add	sp, #16
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w
 8006a20:	60000000 	.word	0x60000000
 8006a24:	401921fb 	.word	0x401921fb
 8006a28:	daaaaaab 	.word	0xdaaaaaab
 8006a2c:	4007bc89 	.word	0x4007bc89
 8006a30:	a0000000 	.word	0xa0000000
 8006a34:	40d3bca1 	.word	0x40d3bca1
 8006a38:	daaaaaab 	.word	0xdaaaaaab
 8006a3c:	3ff7bc89 	.word	0x3ff7bc89
 8006a40:	00000000 	.word	0x00000000
 8006a44:	40d38800 	.word	0x40d38800
 8006a48:	88000000 	.word	0x88000000
 8006a4c:	4002d97c 	.word	0x4002d97c
 8006a50:	40df4000 	.word	0x40df4000
 8006a54:	40590000 	.word	0x40590000

08006a58 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	4611      	mov	r1, r2
 8006a64:	461a      	mov	r2, r3
 8006a66:	4623      	mov	r3, r4
 8006a68:	71fb      	strb	r3, [r7, #7]
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71bb      	strb	r3, [r7, #6]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	717b      	strb	r3, [r7, #5]
 8006a72:	4613      	mov	r3, r2
 8006a74:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da06      	bge.n	8006a8c <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	425b      	negs	r3, r3
 8006a82:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	425b      	negs	r3, r3
 8006a88:	75fb      	strb	r3, [r7, #23]
 8006a8a:	e006      	b.n	8006a9a <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a96:	b25b      	sxtb	r3, r3
 8006a98:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8006a9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	da06      	bge.n	8006ab0 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8006aa2:	79bb      	ldrb	r3, [r7, #6]
 8006aa4:	425b      	negs	r3, r3
 8006aa6:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8006aa8:	79bb      	ldrb	r3, [r7, #6]
 8006aaa:	425b      	negs	r3, r3
 8006aac:	75bb      	strb	r3, [r7, #22]
 8006aae:	e006      	b.n	8006abe <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8006ab0:	79bb      	ldrb	r3, [r7, #6]
 8006ab2:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8006ab4:	79bb      	ldrb	r3, [r7, #6]
 8006ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8006abe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da0b      	bge.n	8006ade <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8006ac6:	797b      	ldrb	r3, [r7, #5]
 8006ac8:	425b      	negs	r3, r3
 8006aca:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8006acc:	797b      	ldrb	r3, [r7, #5]
 8006ace:	425b      	negs	r3, r3
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	757b      	strb	r3, [r7, #21]
 8006adc:	e003      	b.n	8006ae6 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8006ade:	797b      	ldrb	r3, [r7, #5]
 8006ae0:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8006ae2:	797b      	ldrb	r3, [r7, #5]
 8006ae4:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8006ae6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da06      	bge.n	8006afc <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8006aee:	793b      	ldrb	r3, [r7, #4]
 8006af0:	425b      	negs	r3, r3
 8006af2:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8006af4:	793b      	ldrb	r3, [r7, #4]
 8006af6:	425b      	negs	r3, r3
 8006af8:	753b      	strb	r3, [r7, #20]
 8006afa:	e006      	b.n	8006b0a <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8006afc:	793b      	ldrb	r3, [r7, #4]
 8006afe:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8006b00:	793b      	ldrb	r3, [r7, #4]
 8006b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8006b0a:	7cfb      	ldrb	r3, [r7, #19]
 8006b0c:	2b4b      	cmp	r3, #75	; 0x4b
 8006b0e:	d808      	bhi.n	8006b22 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8006b10:	7cbb      	ldrb	r3, [r7, #18]
 8006b12:	2b78      	cmp	r3, #120	; 0x78
 8006b14:	d805      	bhi.n	8006b22 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8006b16:	7c7b      	ldrb	r3, [r7, #17]
 8006b18:	2b7d      	cmp	r3, #125	; 0x7d
 8006b1a:	d802      	bhi.n	8006b22 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8006b1c:	7c3b      	ldrb	r3, [r7, #16]
 8006b1e:	2b65      	cmp	r3, #101	; 0x65
 8006b20:	d901      	bls.n	8006b26 <lowlayer_writePulse+0xce>
		return FALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e04b      	b.n	8006bbe <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8006b26:	2200      	movs	r2, #0
 8006b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b2c:	4826      	ldr	r0, [pc, #152]	; (8006bc8 <lowlayer_writePulse+0x170>)
 8006b2e:	f005 fd2b 	bl	800c588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8006b32:	2200      	movs	r2, #0
 8006b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b38:	4824      	ldr	r0, [pc, #144]	; (8006bcc <lowlayer_writePulse+0x174>)
 8006b3a:	f005 fd25 	bl	800c588 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
 8006b40:	4619      	mov	r1, r3
 8006b42:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8006b46:	f7fe f813 	bl	8004b70 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8006b4a:	7dbb      	ldrb	r3, [r7, #22]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4820      	ldr	r0, [pc, #128]	; (8006bd0 <lowlayer_writePulse+0x178>)
 8006b50:	f7fe f80e 	bl	8004b70 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8006b54:	7d7b      	ldrb	r3, [r7, #21]
 8006b56:	4619      	mov	r1, r3
 8006b58:	481e      	ldr	r0, [pc, #120]	; (8006bd4 <lowlayer_writePulse+0x17c>)
 8006b5a:	f7fe f809 	bl	8004b70 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006b5e:	7d3b      	ldrb	r3, [r7, #20]
 8006b60:	4619      	mov	r1, r3
 8006b62:	481d      	ldr	r0, [pc, #116]	; (8006bd8 <lowlayer_writePulse+0x180>)
 8006b64:	f7fe f804 	bl	8004b70 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006b68:	2364      	movs	r3, #100	; 0x64
 8006b6a:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006b6c:	bf00      	nop
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	1e5a      	subs	r2, r3, #1
 8006b72:	73fa      	strb	r2, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1fa      	bne.n	8006b6e <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b7e:	4813      	ldr	r0, [pc, #76]	; (8006bcc <lowlayer_writePulse+0x174>)
 8006b80:	f005 fd02 	bl	800c588 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8006b84:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006b90:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	4a0f      	ldr	r2, [pc, #60]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006b9e:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006ba0:	4b0e      	ldr	r3, [pc, #56]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006ba8:	4413      	add	r3, r2
 8006baa:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006bac:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8006bae:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <lowlayer_writePulse+0x184>)
 8006bba:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8006bbc:	2301      	movs	r3, #1
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd90      	pop	{r4, r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40020000 	.word	0x40020000
 8006bcc:	40020c00 	.word	0x40020c00
 8006bd0:	60000002 	.word	0x60000002
 8006bd4:	60000004 	.word	0x60000004
 8006bd8:	60000006 	.word	0x60000006
 8006bdc:	2000fed8 	.word	0x2000fed8

08006be0 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8006be6:	2364      	movs	r3, #100	; 0x64
 8006be8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006bea:	2201      	movs	r2, #1
 8006bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bf0:	4809      	ldr	r0, [pc, #36]	; (8006c18 <lowlayer_resetEncoder+0x38>)
 8006bf2:	f005 fcc9 	bl	800c588 <HAL_GPIO_WritePin>
	while (delay--);
 8006bf6:	bf00      	nop
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	71fa      	strb	r2, [r7, #7]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1fa      	bne.n	8006bf8 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8006c02:	2200      	movs	r2, #0
 8006c04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c08:	4803      	ldr	r0, [pc, #12]	; (8006c18 <lowlayer_resetEncoder+0x38>)
 8006c0a:	f005 fcbd 	bl	800c588 <HAL_GPIO_WritePin>
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40020c00 	.word	0x40020c00

08006c1c <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8006c22:	4805      	ldr	r0, [pc, #20]	; (8006c38 <lowlayer_readLimitSwitch+0x1c>)
 8006c24:	f7fd ffb3 	bl	8004b8e <FSMC_Read>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	b2db      	uxtb	r3, r3
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	60000020 	.word	0x60000020

08006c3c <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d81c      	bhi.n	8006c86 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006c52:	3310      	adds	r3, #16
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fd ff99 	bl	8004b8e <FSMC_Read>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006c66:	3310      	adds	r3, #16
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	3302      	adds	r3, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fd ff8e 	bl	8004b8e <FSMC_Read>
 8006c72:	4603      	mov	r3, r0
 8006c74:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006c76:	893b      	ldrh	r3, [r7, #8]
 8006c78:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	041a      	lsls	r2, r3, #16
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e001      	b.n	8006c8a <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d81c      	bhi.n	8006cde <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006caa:	3318      	adds	r3, #24
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fd ff6d 	bl	8004b8e <FSMC_Read>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006cbe:	3318      	adds	r3, #24
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	3302      	adds	r3, #2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fd ff62 	bl	8004b8e <FSMC_Read>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006cce:	893b      	ldrh	r3, [r7, #8]
 8006cd0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	041a      	lsls	r2, r3, #16
 8006cd6:	897b      	ldrh	r3, [r7, #10]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e001      	b.n	8006ce2 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	71fb      	strb	r3, [r7, #7]
 8006cf6:	e00b      	b.n	8006d10 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006cf8:	79fc      	ldrb	r4, [r7, #7]
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff ff9d 	bl	8006c3c <lowlayer_readEncoder>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4a06      	ldr	r2, [pc, #24]	; (8006d20 <lowlayer_updateEncoder+0x34>)
 8006d06:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	71fb      	strb	r3, [r7, #7]
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d9f0      	bls.n	8006cf8 <lowlayer_updateEncoder+0xc>
	}
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd90      	pop	{r4, r7, pc}
 8006d20:	2000feec 	.word	0x2000feec

08006d24 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	71fb      	strb	r3, [r7, #7]
 8006d2e:	e00b      	b.n	8006d48 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8006d30:	79fc      	ldrb	r4, [r7, #7]
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff ffad 	bl	8006c94 <lowlayer_readCapture>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4a06      	ldr	r2, [pc, #24]	; (8006d58 <lowlayer_updateCapture+0x34>)
 8006d3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	3301      	adds	r3, #1
 8006d46:	71fb      	strb	r3, [r7, #7]
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d9f0      	bls.n	8006d30 <lowlayer_updateCapture+0xc>
	}
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd90      	pop	{r4, r7, pc}
 8006d58:	2000fefc 	.word	0x2000fefc

08006d5c <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8006d62:	f7ff ff5b 	bl	8006c1c <lowlayer_readLimitSwitch>
 8006d66:	4603      	mov	r3, r0
 8006d68:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	71fb      	strb	r3, [r7, #7]
 8006d6e:	e00d      	b.n	8006d8c <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006d70:	79ba      	ldrb	r2, [r7, #6]
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	fa42 f303 	asr.w	r3, r2, r3
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	f002 0201 	and.w	r2, r2, #1
 8006d80:	b2d1      	uxtb	r1, r2
 8006d82:	4a06      	ldr	r2, [pc, #24]	; (8006d9c <lowlayer_updateLimit+0x40>)
 8006d84:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	71fb      	strb	r3, [r7, #7]
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d9ee      	bls.n	8006d70 <lowlayer_updateLimit+0x14>
	}
}
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	2000fef8 	.word	0x2000fef8

08006da0 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006db0:	2201      	movs	r2, #1
 8006db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006db6:	4807      	ldr	r0, [pc, #28]	; (8006dd4 <lowlayer_setOutput+0x34>)
 8006db8:	f005 fbe6 	bl	800c588 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006dbc:	e005      	b.n	8006dca <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dc4:	4803      	ldr	r0, [pc, #12]	; (8006dd4 <lowlayer_setOutput+0x34>)
 8006dc6:	f005 fbdf 	bl	800c588 <HAL_GPIO_WritePin>
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40020400 	.word	0x40020400

08006dd8 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006ddc:	2201      	movs	r2, #1
 8006dde:	2140      	movs	r1, #64	; 0x40
 8006de0:	4802      	ldr	r0, [pc, #8]	; (8006dec <lowlayer_CPLD_Init+0x14>)
 8006de2:	f005 fbd1 	bl	800c588 <HAL_GPIO_WritePin>
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	40020c00 	.word	0x40020c00

08006df0 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8006df4:	2201      	movs	r2, #1
 8006df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dfa:	4808      	ldr	r0, [pc, #32]	; (8006e1c <lowlayer_stepMotorInit+0x2c>)
 8006dfc:	f005 fbc4 	bl	800c588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006e00:	2201      	movs	r2, #1
 8006e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e06:	4805      	ldr	r0, [pc, #20]	; (8006e1c <lowlayer_stepMotorInit+0x2c>)
 8006e08:	f005 fbbe 	bl	800c588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e12:	4802      	ldr	r0, [pc, #8]	; (8006e1c <lowlayer_stepMotorInit+0x2c>)
 8006e14:	f005 fbb8 	bl	800c588 <HAL_GPIO_WritePin>
}
 8006e18:	bf00      	nop
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40020000 	.word	0x40020000

08006e20 <scaraStartup>:
//SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];

Trajectory_TargetTypeDef	joint_taget[4] = {  TRAJECTORY_J0, TRAJECTORY_J1,
												TRAJECTORY_J2, TRAJECTORY_J3};

void				scaraStartup(void) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8006e24:	f7ff ffd8 	bl	8006dd8 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006e28:	f7ff ffe2 	bl	8006df0 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006e2c:	f7ff fed8 	bl	8006be0 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006e30:	bf00      	nop
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	0000      	movs	r0, r0
	...

08006e38 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006e38:	b084      	sub	sp, #16
 8006e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3c:	ed2d 8b02 	vpush	{d8}
 8006e40:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8006e44:	af90      	add	r7, sp, #576	; 0x240
 8006e46:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006e4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006e4e:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f040 8359 	bne.w	800750a <scaraInitDuty+0x6d2>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006e58:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006e5c:	a3bd      	add	r3, pc, #756	; (adr r3, 8007154 <scaraInitDuty+0x31c>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 fbc9 	bl	80005f8 <__aeabi_dmul>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	4bb1      	ldr	r3, [pc, #708]	; (8007138 <scaraInitDuty+0x300>)
 8006e74:	f7f9 fcea 	bl	800084c <__aeabi_ddiv>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006e80:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d134      	bne.n	8006ef2 <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006e88:	4bac      	ldr	r3, [pc, #688]	; (800713c <scaraInitDuty+0x304>)
 8006e8a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006e8e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006e92:	f7f9 f9fb 	bl	800028c <__adddf3>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	f107 0108 	add.w	r1, r7, #8
 8006e9e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006ea2:	4ba6      	ldr	r3, [pc, #664]	; (800713c <scaraInitDuty+0x304>)
 8006ea4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006ea8:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006eac:	f7f9 f9ee 	bl	800028c <__adddf3>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	f107 0108 	add.w	r1, r7, #8
 8006eb8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006ebc:	4b9f      	ldr	r3, [pc, #636]	; (800713c <scaraInitDuty+0x304>)
 8006ebe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006ec2:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006ec6:	f7f9 f9e1 	bl	800028c <__adddf3>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	f107 0108 	add.w	r1, r7, #8
 8006ed2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006ed6:	4b99      	ldr	r3, [pc, #612]	; (800713c <scaraInitDuty+0x304>)
 8006ed8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006edc:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006ee0:	f7f9 f9d4 	bl	800028c <__adddf3>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	f107 0108 	add.w	r1, r7, #8
 8006eec:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006ef0:	e01f      	b.n	8006f32 <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006ef2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d118      	bne.n	8006f2c <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 8006efa:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006efe:	f107 0108 	add.w	r1, r7, #8
 8006f02:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8006f06:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006f0a:	f107 0108 	add.w	r1, r7, #8
 8006f0e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8006f12:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006f16:	f107 0108 	add.w	r1, r7, #8
 8006f1a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8006f1e:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006f22:	f107 0108 	add.w	r1, r7, #8
 8006f26:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006f2a:	e002      	b.n	8006f32 <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	f000 be95 	b.w	8007c5c <scaraInitDuty+0xe24>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8006f32:	f107 0308 	add.w	r3, r7, #8
 8006f36:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006f3a:	4b80      	ldr	r3, [pc, #512]	; (800713c <scaraInitDuty+0x304>)
 8006f3c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006f40:	f7f9 f9a2 	bl	8000288 <__aeabi_dsub>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		dir_angle = 1;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006f5e:	f7f9 fdbd 	bl	8000adc <__aeabi_dcmplt>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <scaraInitDuty+0x136>
			dir_angle = -1;
 8006f68:	23ff      	movs	r3, #255	; 0xff
 8006f6a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006f6e:	4b74      	ldr	r3, [pc, #464]	; (8007140 <scaraInitDuty+0x308>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8006f74:	4b71      	ldr	r3, [pc, #452]	; (800713c <scaraInitDuty+0x304>)
 8006f76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006f7a:	4971      	ldr	r1, [pc, #452]	; (8007140 <scaraInitDuty+0x308>)
 8006f7c:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006f80:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8006f84:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d120      	bne.n	8006fce <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006f8c:	4b6c      	ldr	r3, [pc, #432]	; (8007140 <scaraInitDuty+0x308>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8006f92:	4c6a      	ldr	r4, [pc, #424]	; (800713c <scaraInitDuty+0x304>)
 8006f94:	f107 0208 	add.w	r2, r7, #8
 8006f98:	ab2e      	add	r3, sp, #184	; 0xb8
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	22c0      	movs	r2, #192	; 0xc0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f00f f8ee 	bl	8016180 <memcpy>
 8006fa4:	4668      	mov	r0, sp
 8006fa6:	f104 0308 	add.w	r3, r4, #8
 8006faa:	22b8      	movs	r2, #184	; 0xb8
 8006fac:	4619      	mov	r1, r3
 8006fae:	f00f f8e7 	bl	8016180 <memcpy>
 8006fb2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006fb6:	4863      	ldr	r0, [pc, #396]	; (8007144 <scaraInitDuty+0x30c>)
 8006fb8:	f000 fe64 	bl	8007c84 <scaraInitLine>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8006fc2:	4b5f      	ldr	r3, [pc, #380]	; (8007140 <scaraInitDuty+0x308>)
 8006fc4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006fc8:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006fcc:	e053      	b.n	8007076 <scaraInitDuty+0x23e>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006fce:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d14c      	bne.n	8007070 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006fd6:	4b59      	ldr	r3, [pc, #356]	; (800713c <scaraInitDuty+0x304>)
 8006fd8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006fdc:	f107 0108 	add.w	r1, r7, #8
 8006fe0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006fe4:	4b55      	ldr	r3, [pc, #340]	; (800713c <scaraInitDuty+0x304>)
 8006fe6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006fea:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006fee:	f7f9 f94d 	bl	800028c <__adddf3>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006ffa:	4b50      	ldr	r3, [pc, #320]	; (800713c <scaraInitDuty+0x304>)
 8006ffc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007000:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8007004:	f7f9 f942 	bl	800028c <__adddf3>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8007010:	4b4a      	ldr	r3, [pc, #296]	; (800713c <scaraInitDuty+0x304>)
 8007012:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007016:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 800701a:	4b49      	ldr	r3, [pc, #292]	; (8007140 <scaraInitDuty+0x308>)
 800701c:	2201      	movs	r2, #1
 800701e:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8007020:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007024:	4c45      	ldr	r4, [pc, #276]	; (800713c <scaraInitDuty+0x304>)
 8007026:	938e      	str	r3, [sp, #568]	; 0x238
 8007028:	a85e      	add	r0, sp, #376	; 0x178
 800702a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800702e:	22c0      	movs	r2, #192	; 0xc0
 8007030:	4619      	mov	r1, r3
 8007032:	f00f f8a5 	bl	8016180 <memcpy>
 8007036:	f107 0208 	add.w	r2, r7, #8
 800703a:	ab2e      	add	r3, sp, #184	; 0xb8
 800703c:	4611      	mov	r1, r2
 800703e:	22c0      	movs	r2, #192	; 0xc0
 8007040:	4618      	mov	r0, r3
 8007042:	f00f f89d 	bl	8016180 <memcpy>
 8007046:	4668      	mov	r0, sp
 8007048:	f104 0308 	add.w	r3, r4, #8
 800704c:	22b8      	movs	r2, #184	; 0xb8
 800704e:	4619      	mov	r1, r3
 8007050:	f00f f896 	bl	8016180 <memcpy>
 8007054:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007058:	483b      	ldr	r0, [pc, #236]	; (8007148 <scaraInitDuty+0x310>)
 800705a:	f000 fec9 	bl	8007df0 <scaraInitCircle>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8007064:	4b36      	ldr	r3, [pc, #216]	; (8007140 <scaraInitDuty+0x308>)
 8007066:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800706a:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 800706e:	e002      	b.n	8007076 <scaraInitDuty+0x23e>
//		}else if(DUTY_PATH_BEZIER_CURVE == command.path_type){
//			myDUTY.task.path.path_type = DUTY_PATH_BEZIER_CURVE;
//			myDUTY.task.path.line.z0 = command.target_point.z;
//		}
		}else {
			return SCARA_STATUS_ERROR_TASK;
 8007070:	2303      	movs	r3, #3
 8007072:	f000 bdf3 	b.w	8007c5c <scaraInitDuty+0xe24>
		}

		if ( SCARA_STATUS_OK != status) {
 8007076:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <scaraInitDuty+0x24e>
			return status;
 800707e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8007082:	f000 bdeb 	b.w	8007c5c <scaraInitDuty+0xe24>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8007086:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 80bb 	bne.w	8007206 <scaraInitDuty+0x3ce>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007090:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007094:	2b01      	cmp	r3, #1
 8007096:	d161      	bne.n	800715c <scaraInitDuty+0x324>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007098:	4b29      	ldr	r3, [pc, #164]	; (8007140 <scaraInitDuty+0x308>)
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80070a0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80070a4:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 80070a8:	eeb0 2a46 	vmov.f32	s4, s12
 80070ac:	eef0 2a66 	vmov.f32	s5, s13
 80070b0:	eeb0 1a47 	vmov.f32	s2, s14
 80070b4:	eef0 1a67 	vmov.f32	s3, s15
 80070b8:	2201      	movs	r2, #1
 80070ba:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80070be:	2104      	movs	r1, #4
 80070c0:	4822      	ldr	r0, [pc, #136]	; (800714c <scaraInitDuty+0x314>)
 80070c2:	f001 f891 	bl	80081e8 <scaraInitLSPB1>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80070cc:	4a1c      	ldr	r2, [pc, #112]	; (8007140 <scaraInitDuty+0x308>)
 80070ce:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80070d2:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80070d6:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <scaraInitDuty+0x308>)
 80070d8:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80070dc:	4918      	ldr	r1, [pc, #96]	; (8007140 <scaraInitDuty+0x308>)
 80070de:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80070e2:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80070e6:	4b16      	ldr	r3, [pc, #88]	; (8007140 <scaraInitDuty+0x308>)
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80070ee:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7f9 fa16 	bl	8000524 <__aeabi_i2d>
 80070f8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	ec43 2b16 	vmov	d6, r2, r3
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <scaraInitDuty+0x308>)
 800710a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800710e:	ed93 7b00 	vldr	d7, [r3]
 8007112:	eeb0 1a47 	vmov.f32	s2, s14
 8007116:	eef0 1a67 	vmov.f32	s3, s15
 800711a:	2203      	movs	r2, #3
 800711c:	eeb0 0a46 	vmov.f32	s0, s12
 8007120:	eef0 0a66 	vmov.f32	s1, s13
 8007124:	2105      	movs	r1, #5
 8007126:	480a      	ldr	r0, [pc, #40]	; (8007150 <scaraInitDuty+0x318>)
 8007128:	f001 f810 	bl	800814c <scaraInitLinear>
 800712c:	4603      	mov	r3, r0
 800712e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007132:	e1db      	b.n	80074ec <scaraInitDuty+0x6b4>
 8007134:	f3af 8000 	nop.w
 8007138:	40668000 	.word	0x40668000
 800713c:	20010b00 	.word	0x20010b00
 8007140:	2000ff40 	.word	0x2000ff40
 8007144:	2000ff50 	.word	0x2000ff50
 8007148:	2000ffc0 	.word	0x2000ffc0
 800714c:	20010058 	.word	0x20010058
 8007150:	20010328 	.word	0x20010328
 8007154:	60000000 	.word	0x60000000
 8007158:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800715c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d14d      	bne.n	8007200 <scaraInitDuty+0x3c8>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007164:	4bb9      	ldr	r3, [pc, #740]	; (800744c <scaraInitDuty+0x614>)
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800716c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007170:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8007174:	eeb0 2a46 	vmov.f32	s4, s12
 8007178:	eef0 2a66 	vmov.f32	s5, s13
 800717c:	eeb0 1a47 	vmov.f32	s2, s14
 8007180:	eef0 1a67 	vmov.f32	s3, s15
 8007184:	2200      	movs	r2, #0
 8007186:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800718a:	2104      	movs	r1, #4
 800718c:	48b0      	ldr	r0, [pc, #704]	; (8007450 <scaraInitDuty+0x618>)
 800718e:	f001 f82b 	bl	80081e8 <scaraInitLSPB1>
 8007192:	4603      	mov	r3, r0
 8007194:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007198:	4aac      	ldr	r2, [pc, #688]	; (800744c <scaraInitDuty+0x614>)
 800719a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800719e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80071a2:	4baa      	ldr	r3, [pc, #680]	; (800744c <scaraInitDuty+0x614>)
 80071a4:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80071a8:	49a8      	ldr	r1, [pc, #672]	; (800744c <scaraInitDuty+0x614>)
 80071aa:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80071ae:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80071b2:	4ba6      	ldr	r3, [pc, #664]	; (800744c <scaraInitDuty+0x614>)
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80071ba:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80071be:	4618      	mov	r0, r3
 80071c0:	f7f9 f9b0 	bl	8000524 <__aeabi_i2d>
 80071c4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80071c8:	f7f9 fa16 	bl	80005f8 <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	ec43 2b16 	vmov	d6, r2, r3
 80071d4:	4b9d      	ldr	r3, [pc, #628]	; (800744c <scaraInitDuty+0x614>)
 80071d6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80071da:	ed93 7b00 	vldr	d7, [r3]
 80071de:	eeb0 1a47 	vmov.f32	s2, s14
 80071e2:	eef0 1a67 	vmov.f32	s3, s15
 80071e6:	2203      	movs	r2, #3
 80071e8:	eeb0 0a46 	vmov.f32	s0, s12
 80071ec:	eef0 0a66 	vmov.f32	s1, s13
 80071f0:	2105      	movs	r1, #5
 80071f2:	4898      	ldr	r0, [pc, #608]	; (8007454 <scaraInitDuty+0x61c>)
 80071f4:	f000 ffaa 	bl	800814c <scaraInitLinear>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80071fe:	e175      	b.n	80074ec <scaraInitDuty+0x6b4>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8007200:	2308      	movs	r3, #8
 8007202:	f000 bd2b 	b.w	8007c5c <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8007206:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800720a:	2b01      	cmp	r3, #1
 800720c:	f040 80a7 	bne.w	800735e <scaraInitDuty+0x526>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007210:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007214:	2b01      	cmp	r3, #1
 8007216:	d14d      	bne.n	80072b4 <scaraInitDuty+0x47c>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007218:	4b8c      	ldr	r3, [pc, #560]	; (800744c <scaraInitDuty+0x614>)
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8007220:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007224:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8007228:	eeb0 2a46 	vmov.f32	s4, s12
 800722c:	eef0 2a66 	vmov.f32	s5, s13
 8007230:	eeb0 1a47 	vmov.f32	s2, s14
 8007234:	eef0 1a67 	vmov.f32	s3, s15
 8007238:	2201      	movs	r2, #1
 800723a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800723e:	2104      	movs	r1, #4
 8007240:	4885      	ldr	r0, [pc, #532]	; (8007458 <scaraInitDuty+0x620>)
 8007242:	f001 fa51 	bl	80086e8 <scaraInitScurve1>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 800724c:	4a7f      	ldr	r2, [pc, #508]	; (800744c <scaraInitDuty+0x614>)
 800724e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007252:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8007256:	4b7d      	ldr	r3, [pc, #500]	; (800744c <scaraInitDuty+0x614>)
 8007258:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 800725c:	497b      	ldr	r1, [pc, #492]	; (800744c <scaraInitDuty+0x614>)
 800725e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007262:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007266:	4b79      	ldr	r3, [pc, #484]	; (800744c <scaraInitDuty+0x614>)
 8007268:	2202      	movs	r2, #2
 800726a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 800726e:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007272:	4618      	mov	r0, r3
 8007274:	f7f9 f956 	bl	8000524 <__aeabi_i2d>
 8007278:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800727c:	f7f9 f9bc 	bl	80005f8 <__aeabi_dmul>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	ec43 2b16 	vmov	d6, r2, r3
 8007288:	4b70      	ldr	r3, [pc, #448]	; (800744c <scaraInitDuty+0x614>)
 800728a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800728e:	ed93 7b00 	vldr	d7, [r3]
 8007292:	eeb0 1a47 	vmov.f32	s2, s14
 8007296:	eef0 1a67 	vmov.f32	s3, s15
 800729a:	2203      	movs	r2, #3
 800729c:	eeb0 0a46 	vmov.f32	s0, s12
 80072a0:	eef0 0a66 	vmov.f32	s1, s13
 80072a4:	2105      	movs	r1, #5
 80072a6:	486b      	ldr	r0, [pc, #428]	; (8007454 <scaraInitDuty+0x61c>)
 80072a8:	f000 ff50 	bl	800814c <scaraInitLinear>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80072b2:	e11b      	b.n	80074ec <scaraInitDuty+0x6b4>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80072b4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d14d      	bne.n	8007358 <scaraInitDuty+0x520>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80072bc:	4b63      	ldr	r3, [pc, #396]	; (800744c <scaraInitDuty+0x614>)
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80072c4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80072c8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80072cc:	eeb0 2a46 	vmov.f32	s4, s12
 80072d0:	eef0 2a66 	vmov.f32	s5, s13
 80072d4:	eeb0 1a47 	vmov.f32	s2, s14
 80072d8:	eef0 1a67 	vmov.f32	s3, s15
 80072dc:	2200      	movs	r2, #0
 80072de:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80072e2:	2104      	movs	r1, #4
 80072e4:	485c      	ldr	r0, [pc, #368]	; (8007458 <scaraInitDuty+0x620>)
 80072e6:	f001 f9ff 	bl	80086e8 <scaraInitScurve1>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80072f0:	4a56      	ldr	r2, [pc, #344]	; (800744c <scaraInitDuty+0x614>)
 80072f2:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80072f6:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80072fa:	4b54      	ldr	r3, [pc, #336]	; (800744c <scaraInitDuty+0x614>)
 80072fc:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8007300:	4952      	ldr	r1, [pc, #328]	; (800744c <scaraInitDuty+0x614>)
 8007302:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007306:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800730a:	4b50      	ldr	r3, [pc, #320]	; (800744c <scaraInitDuty+0x614>)
 800730c:	2202      	movs	r2, #2
 800730e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007312:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 f904 	bl	8000524 <__aeabi_i2d>
 800731c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007320:	f7f9 f96a 	bl	80005f8 <__aeabi_dmul>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	ec43 2b16 	vmov	d6, r2, r3
 800732c:	4b47      	ldr	r3, [pc, #284]	; (800744c <scaraInitDuty+0x614>)
 800732e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007332:	ed93 7b00 	vldr	d7, [r3]
 8007336:	eeb0 1a47 	vmov.f32	s2, s14
 800733a:	eef0 1a67 	vmov.f32	s3, s15
 800733e:	2203      	movs	r2, #3
 8007340:	eeb0 0a46 	vmov.f32	s0, s12
 8007344:	eef0 0a66 	vmov.f32	s1, s13
 8007348:	2105      	movs	r1, #5
 800734a:	4842      	ldr	r0, [pc, #264]	; (8007454 <scaraInitDuty+0x61c>)
 800734c:	f000 fefe 	bl	800814c <scaraInitLinear>
 8007350:	4603      	mov	r3, r0
 8007352:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007356:	e0c9      	b.n	80074ec <scaraInitDuty+0x6b4>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007358:	2308      	movs	r3, #8
 800735a:	f000 bc7f 	b.w	8007c5c <scaraInitDuty+0xe24>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 800735e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007362:	2b02      	cmp	r3, #2
 8007364:	d17c      	bne.n	8007460 <scaraInitDuty+0x628>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007366:	4a39      	ldr	r2, [pc, #228]	; (800744c <scaraInitDuty+0x614>)
 8007368:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800736c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007370:	4b36      	ldr	r3, [pc, #216]	; (800744c <scaraInitDuty+0x614>)
 8007372:	2202      	movs	r2, #2
 8007374:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007378:	4b34      	ldr	r3, [pc, #208]	; (800744c <scaraInitDuty+0x614>)
 800737a:	2202      	movs	r2, #2
 800737c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8007380:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007384:	2b03      	cmp	r3, #3
 8007386:	d118      	bne.n	80073ba <scaraInitDuty+0x582>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8007388:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800739c:	eeb0 1a47 	vmov.f32	s2, s14
 80073a0:	eef0 1a67 	vmov.f32	s3, s15
 80073a4:	2203      	movs	r2, #3
 80073a6:	ed97 0b00 	vldr	d0, [r7]
 80073aa:	2104      	movs	r1, #4
 80073ac:	482b      	ldr	r0, [pc, #172]	; (800745c <scaraInitDuty+0x624>)
 80073ae:	f000 fecd 	bl	800814c <scaraInitLinear>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80073b8:	e01d      	b.n	80073f6 <scaraInitDuty+0x5be>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 80073ba:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d116      	bne.n	80073f0 <scaraInitDuty+0x5b8>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 80073c2:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 80073c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80073ca:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80073ce:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80073d2:	eeb0 1a47 	vmov.f32	s2, s14
 80073d6:	eef0 1a67 	vmov.f32	s3, s15
 80073da:	2202      	movs	r2, #2
 80073dc:	ec46 5b10 	vmov	d0, r5, r6
 80073e0:	2104      	movs	r1, #4
 80073e2:	481e      	ldr	r0, [pc, #120]	; (800745c <scaraInitDuty+0x624>)
 80073e4:	f000 feb2 	bl	800814c <scaraInitLinear>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80073ee:	e002      	b.n	80073f6 <scaraInitDuty+0x5be>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80073f0:	2308      	movs	r3, #8
 80073f2:	f000 bc33 	b.w	8007c5c <scaraInitDuty+0xe24>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 80073f6:	4b15      	ldr	r3, [pc, #84]	; (800744c <scaraInitDuty+0x614>)
 80073f8:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 80073fc:	4913      	ldr	r1, [pc, #76]	; (800744c <scaraInitDuty+0x614>)
 80073fe:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007402:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007406:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 f88a 	bl	8000524 <__aeabi_i2d>
 8007410:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007414:	f7f9 f8f0 	bl	80005f8 <__aeabi_dmul>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	ec43 2b16 	vmov	d6, r2, r3
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <scaraInitDuty+0x614>)
 8007422:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007426:	ed93 7b00 	vldr	d7, [r3]
 800742a:	eeb0 1a47 	vmov.f32	s2, s14
 800742e:	eef0 1a67 	vmov.f32	s3, s15
 8007432:	2203      	movs	r2, #3
 8007434:	eeb0 0a46 	vmov.f32	s0, s12
 8007438:	eef0 0a66 	vmov.f32	s1, s13
 800743c:	2105      	movs	r1, #5
 800743e:	4805      	ldr	r0, [pc, #20]	; (8007454 <scaraInitDuty+0x61c>)
 8007440:	f000 fe84 	bl	800814c <scaraInitLinear>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 800744a:	e04f      	b.n	80074ec <scaraInitDuty+0x6b4>
 800744c:	2000ff40 	.word	0x2000ff40
 8007450:	20010058 	.word	0x20010058
 8007454:	20010328 	.word	0x20010328
 8007458:	200100d8 	.word	0x200100d8
 800745c:	200101a8 	.word	0x200101a8
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8007460:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007464:	2b03      	cmp	r3, #3
 8007466:	d13f      	bne.n	80074e8 <scaraInitDuty+0x6b0>
			status1 = SCARA_STATUS_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 800746e:	4a96      	ldr	r2, [pc, #600]	; (80076c8 <scaraInitDuty+0x890>)
 8007470:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007474:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8007478:	4b93      	ldr	r3, [pc, #588]	; (80076c8 <scaraInitDuty+0x890>)
 800747a:	2203      	movs	r2, #3
 800747c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007480:	4b91      	ldr	r3, [pc, #580]	; (80076c8 <scaraInitDuty+0x890>)
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8007488:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800748c:	498e      	ldr	r1, [pc, #568]	; (80076c8 <scaraInitDuty+0x890>)
 800748e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007492:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8007496:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800749a:	4618      	mov	r0, r3
 800749c:	f7f9 f842 	bl	8000524 <__aeabi_i2d>
 80074a0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80074a4:	f7f9 f8a8 	bl	80005f8 <__aeabi_dmul>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	ec43 2b18 	vmov	d8, r2, r3
 80074b0:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80074b4:	4b85      	ldr	r3, [pc, #532]	; (80076cc <scaraInitDuty+0x894>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f8 fee5 	bl	8000288 <__aeabi_dsub>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	ec43 2b17 	vmov	d7, r2, r3
 80074c6:	eeb0 1a47 	vmov.f32	s2, s14
 80074ca:	eef0 1a67 	vmov.f32	s3, s15
 80074ce:	2203      	movs	r2, #3
 80074d0:	eeb0 0a48 	vmov.f32	s0, s16
 80074d4:	eef0 0a68 	vmov.f32	s1, s17
 80074d8:	2105      	movs	r1, #5
 80074da:	487d      	ldr	r0, [pc, #500]	; (80076d0 <scaraInitDuty+0x898>)
 80074dc:	f000 fe36 	bl	800814c <scaraInitLinear>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80074e6:	e001      	b.n	80074ec <scaraInitDuty+0x6b4>
//			myDUTY.time_total = command.time_total;
//			status1 = SCARA_STATUS_OK;
//			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
//		}
		else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80074e8:	2305      	movs	r3, #5
 80074ea:	e3b7      	b.n	8007c5c <scaraInitDuty+0xe24>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 80074ec:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <scaraInitDuty+0x6c2>
			return status1;
 80074f4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80074f8:	e3b0      	b.n	8007c5c <scaraInitDuty+0xe24>
		}
		if ( SCARA_STATUS_OK != status2) {
 80074fa:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 837e 	beq.w	8007c00 <scaraInitDuty+0xdc8>
			return status2;
 8007504:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8007508:	e3a8      	b.n	8007c5c <scaraInitDuty+0xe24>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800750a:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800750e:	2b01      	cmp	r3, #1
 8007510:	f040 8374 	bne.w	8007bfc <scaraInitDuty+0xdc4>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8007514:	4b6c      	ldr	r3, [pc, #432]	; (80076c8 <scaraInitDuty+0x890>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800751a:	4b6e      	ldr	r3, [pc, #440]	; (80076d4 <scaraInitDuty+0x89c>)
 800751c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007520:	4969      	ldr	r1, [pc, #420]	; (80076c8 <scaraInitDuty+0x890>)
 8007522:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8007526:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 800752a:	4b6a      	ldr	r3, [pc, #424]	; (80076d4 <scaraInitDuty+0x89c>)
 800752c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007530:	4965      	ldr	r1, [pc, #404]	; (80076c8 <scaraInitDuty+0x890>)
 8007532:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8007536:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 800753a:	4b66      	ldr	r3, [pc, #408]	; (80076d4 <scaraInitDuty+0x89c>)
 800753c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007540:	4961      	ldr	r1, [pc, #388]	; (80076c8 <scaraInitDuty+0x890>)
 8007542:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8007546:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 800754a:	4b62      	ldr	r3, [pc, #392]	; (80076d4 <scaraInitDuty+0x89c>)
 800754c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007550:	495d      	ldr	r1, [pc, #372]	; (80076c8 <scaraInitDuty+0x890>)
 8007552:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8007556:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800755a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800755e:	a358      	add	r3, pc, #352	; (adr r3, 80076c0 <scaraInitDuty+0x888>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f7f9 f848 	bl	80005f8 <__aeabi_dmul>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4610      	mov	r0, r2
 800756e:	4619      	mov	r1, r3
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	4b58      	ldr	r3, [pc, #352]	; (80076d8 <scaraInitDuty+0x8a0>)
 8007576:	f7f9 f969 	bl	800084c <__aeabi_ddiv>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8007582:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8007586:	2b01      	cmp	r3, #1
 8007588:	d12c      	bne.n	80075e4 <scaraInitDuty+0x7ac>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 800758a:	4b52      	ldr	r3, [pc, #328]	; (80076d4 <scaraInitDuty+0x89c>)
 800758c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007590:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8007594:	f7f8 fe7a 	bl	800028c <__adddf3>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80075a0:	4b4c      	ldr	r3, [pc, #304]	; (80076d4 <scaraInitDuty+0x89c>)
 80075a2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80075a6:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80075aa:	f7f8 fe6f 	bl	800028c <__adddf3>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80075b6:	4b47      	ldr	r3, [pc, #284]	; (80076d4 <scaraInitDuty+0x89c>)
 80075b8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80075bc:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80075c0:	f7f8 fe64 	bl	800028c <__adddf3>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80075cc:	4b41      	ldr	r3, [pc, #260]	; (80076d4 <scaraInitDuty+0x89c>)
 80075ce:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80075d2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80075d6:	f7f8 fe59 	bl	800028c <__adddf3>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 80075e2:	e016      	b.n	8007612 <scaraInitDuty+0x7da>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80075e4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d110      	bne.n	800760e <scaraInitDuty+0x7d6>
			target_point.x 		= command.target_point.x;
 80075ec:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80075f0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 80075f4:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80075f8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 80075fc:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007600:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 8007604:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007608:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 800760c:	e001      	b.n	8007612 <scaraInitDuty+0x7da>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 800760e:	230c      	movs	r3, #12
 8007610:	e324      	b.n	8007c5c <scaraInitDuty+0xe24>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8007612:	4c30      	ldr	r4, [pc, #192]	; (80076d4 <scaraInitDuty+0x89c>)
 8007614:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8007618:	4668      	mov	r0, sp
 800761a:	f104 0308 	add.w	r3, r4, #8
 800761e:	22b8      	movs	r2, #184	; 0xb8
 8007620:	4619      	mov	r1, r3
 8007622:	f00e fdad 	bl	8016180 <memcpy>
 8007626:	e894 000c 	ldmia.w	r4, {r2, r3}
 800762a:	4628      	mov	r0, r5
 800762c:	f7fe f8c4 	bl	80057b8 <kinematicInverse>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <scaraInitDuty+0x802>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8007636:	2307      	movs	r3, #7
 8007638:	e310      	b.n	8007c5c <scaraInitDuty+0xe24>
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800763a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800763e:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <scaraInitDuty+0x89c>)
 8007640:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007644:	f7f8 fe20 	bl	8000288 <__aeabi_dsub>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8007654:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8007658:	4b1e      	ldr	r3, [pc, #120]	; (80076d4 <scaraInitDuty+0x89c>)
 800765a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800765e:	f7f8 fe13 	bl	8000288 <__aeabi_dsub>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	f107 0108 	add.w	r1, r7, #8
 800766a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 800766e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8007672:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <scaraInitDuty+0x89c>)
 8007674:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007678:	f7f8 fe06 	bl	8000288 <__aeabi_dsub>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	f107 0108 	add.w	r1, r7, #8
 8007684:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007688:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <scaraInitDuty+0x89c>)
 800768e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007692:	f7f8 fdf9 	bl	8000288 <__aeabi_dsub>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	f107 0108 	add.w	r1, r7, #8
 800769e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80076a2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f040 8156 	bne.w	8007958 <scaraInitDuty+0xb20>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80076ac:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d171      	bne.n	8007798 <scaraInitDuty+0x960>
				for ( uint8_t i = 0; i < 4; i++) {
 80076b4:	2300      	movs	r3, #0
 80076b6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80076ba:	e061      	b.n	8007780 <scaraInitDuty+0x948>
 80076bc:	f3af 8000 	nop.w
 80076c0:	60000000 	.word	0x60000000
 80076c4:	400921fb 	.word	0x400921fb
 80076c8:	2000ff40 	.word	0x2000ff40
 80076cc:	2000fd48 	.word	0x2000fd48
 80076d0:	20010328 	.word	0x20010328
 80076d4:	20010b00 	.word	0x20010b00
 80076d8:	40668000 	.word	0x40668000
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80076dc:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80076e0:	49d3      	ldr	r1, [pc, #844]	; (8007a30 <scaraInitDuty+0xbf8>)
 80076e2:	4613      	mov	r3, r2
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4413      	add	r3, r2
 80076e8:	01db      	lsls	r3, r3, #7
 80076ea:	440b      	add	r3, r1
 80076ec:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80076f4:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80076f8:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80076fc:	4ccc      	ldr	r4, [pc, #816]	; (8007a30 <scaraInitDuty+0xbf8>)
 80076fe:	4613      	mov	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	4413      	add	r3, r2
 8007704:	01db      	lsls	r3, r3, #7
 8007706:	4423      	add	r3, r4
 8007708:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800770c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007710:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	01db      	lsls	r3, r3, #7
 800771c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007720:	4ac3      	ldr	r2, [pc, #780]	; (8007a30 <scaraInitDuty+0xbf8>)
 8007722:	1898      	adds	r0, r3, r2
 8007724:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007728:	4ac2      	ldr	r2, [pc, #776]	; (8007a34 <scaraInitDuty+0xbfc>)
 800772a:	5cd1      	ldrb	r1, [r2, r3]
 800772c:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007730:	f107 0208 	add.w	r2, r7, #8
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4413      	add	r3, r2
 8007738:	ed93 7b00 	vldr	d7, [r3]
 800773c:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007740:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 8007744:	eeb0 2a45 	vmov.f32	s4, s10
 8007748:	eef0 2a65 	vmov.f32	s5, s11
 800774c:	eeb0 1a46 	vmov.f32	s2, s12
 8007750:	eef0 1a66 	vmov.f32	s3, s13
 8007754:	2201      	movs	r2, #1
 8007756:	eeb0 0a47 	vmov.f32	s0, s14
 800775a:	eef0 0a67 	vmov.f32	s1, s15
 800775e:	f000 fd43 	bl	80081e8 <scaraInitLSPB1>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007768:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <scaraInitDuty+0x93e>
						return status1;
 8007770:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007774:	e272      	b.n	8007c5c <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 8007776:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800777a:	3301      	adds	r3, #1
 800777c:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007780:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007784:	2b03      	cmp	r3, #3
 8007786:	d9a9      	bls.n	80076dc <scaraInitDuty+0x8a4>
					}
				}
				myDUTY.time_total = command.time_total;
 8007788:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800778c:	49a8      	ldr	r1, [pc, #672]	; (8007a30 <scaraInitDuty+0xbf8>)
 800778e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007792:	e9c1 2300 	strd	r2, r3, [r1]
 8007796:	e233      	b.n	8007c00 <scaraInitDuty+0xdc8>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007798:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 80d9 	bne.w	8007954 <scaraInitDuty+0xb1c>
				for ( uint8_t i = 0; i < 4; i++) {
 80077a2:	2300      	movs	r3, #0
 80077a4:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80077a8:	e03c      	b.n	8007824 <scaraInitDuty+0x9ec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80077aa:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 80077ae:	49a0      	ldr	r1, [pc, #640]	; (8007a30 <scaraInitDuty+0xbf8>)
 80077b0:	4613      	mov	r3, r2
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	4413      	add	r3, r2
 80077b6:	01db      	lsls	r3, r3, #7
 80077b8:	440b      	add	r3, r1
 80077ba:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80077c2:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 80077c6:	4613      	mov	r3, r2
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	01db      	lsls	r3, r3, #7
 80077ce:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80077d2:	4a97      	ldr	r2, [pc, #604]	; (8007a30 <scaraInitDuty+0xbf8>)
 80077d4:	1898      	adds	r0, r3, r2
 80077d6:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077da:	4a96      	ldr	r2, [pc, #600]	; (8007a34 <scaraInitDuty+0xbfc>)
 80077dc:	5cd1      	ldrb	r1, [r2, r3]
 80077de:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077e2:	f107 0208 	add.w	r2, r7, #8
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	4413      	add	r3, r2
 80077ea:	ed93 7b00 	vldr	d7, [r3]
 80077ee:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80077f2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80077f6:	eeb0 2a45 	vmov.f32	s4, s10
 80077fa:	eef0 2a65 	vmov.f32	s5, s11
 80077fe:	eeb0 1a46 	vmov.f32	s2, s12
 8007802:	eef0 1a66 	vmov.f32	s3, s13
 8007806:	2200      	movs	r2, #0
 8007808:	eeb0 0a47 	vmov.f32	s0, s14
 800780c:	eef0 0a67 	vmov.f32	s1, s15
 8007810:	f001 fe7a 	bl	8009508 <scaraInitLSPB>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800781a:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800781e:	3301      	adds	r3, #1
 8007820:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007824:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007828:	2b03      	cmp	r3, #3
 800782a:	d9be      	bls.n	80077aa <scaraInitDuty+0x972>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 800782c:	4b80      	ldr	r3, [pc, #512]	; (8007a30 <scaraInitDuty+0xbf8>)
 800782e:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007832:	f04f 0200 	mov.w	r2, #0
 8007836:	f04f 0300 	mov.w	r3, #0
 800783a:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 800783e:	2300      	movs	r3, #0
 8007840:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007844:	e02b      	b.n	800789e <scaraInitDuty+0xa66>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8007846:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 800784a:	4979      	ldr	r1, [pc, #484]	; (8007a30 <scaraInitDuty+0xbf8>)
 800784c:	4613      	mov	r3, r2
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4413      	add	r3, r2
 8007852:	01db      	lsls	r3, r3, #7
 8007854:	440b      	add	r3, r1
 8007856:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800785a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800785e:	4b74      	ldr	r3, [pc, #464]	; (8007a30 <scaraInitDuty+0xbf8>)
 8007860:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f9 f956 	bl	8000b18 <__aeabi_dcmpgt>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d010      	beq.n	8007894 <scaraInitDuty+0xa5c>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8007872:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 8007876:	496e      	ldr	r1, [pc, #440]	; (8007a30 <scaraInitDuty+0xbf8>)
 8007878:	4613      	mov	r3, r2
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	4413      	add	r3, r2
 800787e:	01db      	lsls	r3, r3, #7
 8007880:	440b      	add	r3, r1
 8007882:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	4969      	ldr	r1, [pc, #420]	; (8007a30 <scaraInitDuty+0xbf8>)
 800788c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007890:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007894:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007898:	3301      	adds	r3, #1
 800789a:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 800789e:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d9cf      	bls.n	8007846 <scaraInitDuty+0xa0e>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80078ac:	e04d      	b.n	800794a <scaraInitDuty+0xb12>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80078ae:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80078b2:	495f      	ldr	r1, [pc, #380]	; (8007a30 <scaraInitDuty+0xbf8>)
 80078b4:	4613      	mov	r3, r2
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	4413      	add	r3, r2
 80078ba:	01db      	lsls	r3, r3, #7
 80078bc:	440b      	add	r3, r1
 80078be:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80078c6:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80078ca:	4b59      	ldr	r3, [pc, #356]	; (8007a30 <scaraInitDuty+0xbf8>)
 80078cc:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80078d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078d4:	4c56      	ldr	r4, [pc, #344]	; (8007a30 <scaraInitDuty+0xbf8>)
 80078d6:	4613      	mov	r3, r2
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	4413      	add	r3, r2
 80078dc:	01db      	lsls	r3, r3, #7
 80078de:	4423      	add	r3, r4
 80078e0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80078e4:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80078e8:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80078ec:	4613      	mov	r3, r2
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	4413      	add	r3, r2
 80078f2:	01db      	lsls	r3, r3, #7
 80078f4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80078f8:	4a4d      	ldr	r2, [pc, #308]	; (8007a30 <scaraInitDuty+0xbf8>)
 80078fa:	1898      	adds	r0, r3, r2
 80078fc:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007900:	4a4c      	ldr	r2, [pc, #304]	; (8007a34 <scaraInitDuty+0xbfc>)
 8007902:	5cd1      	ldrb	r1, [r2, r3]
 8007904:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007908:	f107 0208 	add.w	r2, r7, #8
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4413      	add	r3, r2
 8007910:	ed93 7b00 	vldr	d7, [r3]
 8007914:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007918:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800791c:	eeb0 2a45 	vmov.f32	s4, s10
 8007920:	eef0 2a65 	vmov.f32	s5, s11
 8007924:	eeb0 1a46 	vmov.f32	s2, s12
 8007928:	eef0 1a66 	vmov.f32	s3, s13
 800792c:	2201      	movs	r2, #1
 800792e:	eeb0 0a47 	vmov.f32	s0, s14
 8007932:	eef0 0a67 	vmov.f32	s1, s15
 8007936:	f001 fde7 	bl	8009508 <scaraInitLSPB>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007940:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007944:	3301      	adds	r3, #1
 8007946:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800794a:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800794e:	2b03      	cmp	r3, #3
 8007950:	d9ad      	bls.n	80078ae <scaraInitDuty+0xa76>
 8007952:	e155      	b.n	8007c00 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007954:	2308      	movs	r3, #8
 8007956:	e181      	b.n	8007c5c <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8007958:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800795c:	2b01      	cmp	r3, #1
 800795e:	f040 814b 	bne.w	8007bf8 <scaraInitDuty+0xdc0>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007962:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d166      	bne.n	8007a38 <scaraInitDuty+0xc00>
				for ( uint8_t i = 0; i < 4; i++) {
 800796a:	2300      	movs	r3, #0
 800796c:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007970:	e051      	b.n	8007a16 <scaraInitDuty+0xbde>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007972:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007976:	492e      	ldr	r1, [pc, #184]	; (8007a30 <scaraInitDuty+0xbf8>)
 8007978:	4613      	mov	r3, r2
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	4413      	add	r3, r2
 800797e:	01db      	lsls	r3, r3, #7
 8007980:	440b      	add	r3, r1
 8007982:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007986:	2201      	movs	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800798a:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 800798e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8007992:	4c27      	ldr	r4, [pc, #156]	; (8007a30 <scaraInitDuty+0xbf8>)
 8007994:	4613      	mov	r3, r2
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	4413      	add	r3, r2
 800799a:	01db      	lsls	r3, r3, #7
 800799c:	4423      	add	r3, r4
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80079a6:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80079aa:	4613      	mov	r3, r2
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	4413      	add	r3, r2
 80079b0:	01db      	lsls	r3, r3, #7
 80079b2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80079b6:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <scaraInitDuty+0xbf8>)
 80079b8:	1898      	adds	r0, r3, r2
 80079ba:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80079be:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <scaraInitDuty+0xbfc>)
 80079c0:	5cd1      	ldrb	r1, [r2, r3]
 80079c2:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80079c6:	f107 0208 	add.w	r2, r7, #8
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	4413      	add	r3, r2
 80079ce:	ed93 7b00 	vldr	d7, [r3]
 80079d2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80079d6:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 80079da:	eeb0 2a45 	vmov.f32	s4, s10
 80079de:	eef0 2a65 	vmov.f32	s5, s11
 80079e2:	eeb0 1a46 	vmov.f32	s2, s12
 80079e6:	eef0 1a66 	vmov.f32	s3, s13
 80079ea:	2201      	movs	r2, #1
 80079ec:	eeb0 0a47 	vmov.f32	s0, s14
 80079f0:	eef0 0a67 	vmov.f32	s1, s15
 80079f4:	f000 fe78 	bl	80086e8 <scaraInitScurve1>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80079fe:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <scaraInitDuty+0xbd4>
						return status1;
 8007a06:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007a0a:	e127      	b.n	8007c5c <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 8007a0c:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007a10:	3301      	adds	r3, #1
 8007a12:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007a16:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d9a9      	bls.n	8007972 <scaraInitDuty+0xb3a>
					}
				}
				myDUTY.time_total = command.time_total;
 8007a1e:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8007a22:	4903      	ldr	r1, [pc, #12]	; (8007a30 <scaraInitDuty+0xbf8>)
 8007a24:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007a28:	e9c1 2300 	strd	r2, r3, [r1]
 8007a2c:	e0e8      	b.n	8007c00 <scaraInitDuty+0xdc8>
 8007a2e:	bf00      	nop
 8007a30:	2000ff40 	.word	0x2000ff40
 8007a34:	20004088 	.word	0x20004088
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007a38:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f040 80d9 	bne.w	8007bf4 <scaraInitDuty+0xdbc>
				for ( uint8_t i = 0; i < 4; i++) {
 8007a42:	2300      	movs	r3, #0
 8007a44:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007a48:	e03c      	b.n	8007ac4 <scaraInitDuty+0xc8c>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007a4a:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007a4e:	4988      	ldr	r1, [pc, #544]	; (8007c70 <scaraInitDuty+0xe38>)
 8007a50:	4613      	mov	r3, r2
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	4413      	add	r3, r2
 8007a56:	01db      	lsls	r3, r3, #7
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007a5e:	2201      	movs	r2, #1
 8007a60:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007a62:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007a66:	4613      	mov	r3, r2
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4413      	add	r3, r2
 8007a6c:	01db      	lsls	r3, r3, #7
 8007a6e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007a72:	4a7f      	ldr	r2, [pc, #508]	; (8007c70 <scaraInitDuty+0xe38>)
 8007a74:	1898      	adds	r0, r3, r2
 8007a76:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a7a:	4a7e      	ldr	r2, [pc, #504]	; (8007c74 <scaraInitDuty+0xe3c>)
 8007a7c:	5cd1      	ldrb	r1, [r2, r3]
 8007a7e:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a82:	f107 0208 	add.w	r2, r7, #8
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4413      	add	r3, r2
 8007a8a:	ed93 7b00 	vldr	d7, [r3]
 8007a8e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007a92:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007a96:	eeb0 2a45 	vmov.f32	s4, s10
 8007a9a:	eef0 2a65 	vmov.f32	s5, s11
 8007a9e:	eeb0 1a46 	vmov.f32	s2, s12
 8007aa2:	eef0 1a66 	vmov.f32	s3, s13
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8007aac:	eef0 0a67 	vmov.f32	s1, s15
 8007ab0:	f002 f8fc 	bl	8009cac <scaraInitScurve>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007aba:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007abe:	3301      	adds	r3, #1
 8007ac0:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007ac4:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d9be      	bls.n	8007a4a <scaraInitDuty+0xc12>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007acc:	4b68      	ldr	r3, [pc, #416]	; (8007c70 <scaraInitDuty+0xe38>)
 8007ace:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007ae4:	e02b      	b.n	8007b3e <scaraInitDuty+0xd06>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8007ae6:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007aea:	4961      	ldr	r1, [pc, #388]	; (8007c70 <scaraInitDuty+0xe38>)
 8007aec:	4613      	mov	r3, r2
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	4413      	add	r3, r2
 8007af2:	01db      	lsls	r3, r3, #7
 8007af4:	440b      	add	r3, r1
 8007af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007afe:	4b5c      	ldr	r3, [pc, #368]	; (8007c70 <scaraInitDuty+0xe38>)
 8007b00:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f9 f806 	bl	8000b18 <__aeabi_dcmpgt>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d010      	beq.n	8007b34 <scaraInitDuty+0xcfc>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8007b12:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007b16:	4956      	ldr	r1, [pc, #344]	; (8007c70 <scaraInitDuty+0xe38>)
 8007b18:	4613      	mov	r3, r2
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	01db      	lsls	r3, r3, #7
 8007b20:	440b      	add	r3, r1
 8007b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	4951      	ldr	r1, [pc, #324]	; (8007c70 <scaraInitDuty+0xe38>)
 8007b2c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007b30:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007b34:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007b38:	3301      	adds	r3, #1
 8007b3a:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007b3e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d9cf      	bls.n	8007ae6 <scaraInitDuty+0xcae>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007b46:	2300      	movs	r3, #0
 8007b48:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007b4c:	e04d      	b.n	8007bea <scaraInitDuty+0xdb2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007b4e:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b52:	4947      	ldr	r1, [pc, #284]	; (8007c70 <scaraInitDuty+0xe38>)
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	01db      	lsls	r3, r3, #7
 8007b5c:	440b      	add	r3, r1
 8007b5e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8007b66:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b6a:	4b41      	ldr	r3, [pc, #260]	; (8007c70 <scaraInitDuty+0xe38>)
 8007b6c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007b70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b74:	4c3e      	ldr	r4, [pc, #248]	; (8007c70 <scaraInitDuty+0xe38>)
 8007b76:	4613      	mov	r3, r2
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	01db      	lsls	r3, r3, #7
 8007b7e:	4423      	add	r3, r4
 8007b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b84:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007b88:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	4413      	add	r3, r2
 8007b92:	01db      	lsls	r3, r3, #7
 8007b94:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007b98:	4a35      	ldr	r2, [pc, #212]	; (8007c70 <scaraInitDuty+0xe38>)
 8007b9a:	1898      	adds	r0, r3, r2
 8007b9c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007ba0:	4a34      	ldr	r2, [pc, #208]	; (8007c74 <scaraInitDuty+0xe3c>)
 8007ba2:	5cd1      	ldrb	r1, [r2, r3]
 8007ba4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007ba8:	f107 0208 	add.w	r2, r7, #8
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	4413      	add	r3, r2
 8007bb0:	ed93 7b00 	vldr	d7, [r3]
 8007bb4:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007bb8:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007bbc:	eeb0 2a45 	vmov.f32	s4, s10
 8007bc0:	eef0 2a65 	vmov.f32	s5, s11
 8007bc4:	eeb0 1a46 	vmov.f32	s2, s12
 8007bc8:	eef0 1a66 	vmov.f32	s3, s13
 8007bcc:	2201      	movs	r2, #1
 8007bce:	eeb0 0a47 	vmov.f32	s0, s14
 8007bd2:	eef0 0a67 	vmov.f32	s1, s15
 8007bd6:	f002 f869 	bl	8009cac <scaraInitScurve>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007be0:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007be4:	3301      	adds	r3, #1
 8007be6:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007bea:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d9ad      	bls.n	8007b4e <scaraInitDuty+0xd16>
 8007bf2:	e005      	b.n	8007c00 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	e031      	b.n	8007c5c <scaraInitDuty+0xe24>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8007bf8:	2305      	movs	r3, #5
 8007bfa:	e02f      	b.n	8007c5c <scaraInitDuty+0xe24>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e02d      	b.n	8007c5c <scaraInitDuty+0xe24>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8007c00:	491d      	ldr	r1, [pc, #116]	; (8007c78 <scaraInitDuty+0xe40>)
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8007c0e:	4b18      	ldr	r3, [pc, #96]	; (8007c70 <scaraInitDuty+0xe38>)
 8007c10:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	4917      	ldr	r1, [pc, #92]	; (8007c78 <scaraInitDuty+0xe40>)
 8007c1a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 8007c1e:	4917      	ldr	r1, [pc, #92]	; (8007c7c <scaraInitDuty+0xe44>)
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8007c2c:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <scaraInitDuty+0xe38>)
 8007c2e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	4911      	ldr	r1, [pc, #68]	; (8007c7c <scaraInitDuty+0xe44>)
 8007c38:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 8007c3c:	4910      	ldr	r1, [pc, #64]	; (8007c80 <scaraInitDuty+0xe48>)
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <scaraInitDuty+0xe38>)
 8007c4c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	490a      	ldr	r1, [pc, #40]	; (8007c80 <scaraInitDuty+0xe48>)
 8007c56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8007c62:	46bd      	mov	sp, r7
 8007c64:	ecbd 8b02 	vpop	{d8}
 8007c68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007c6c:	b004      	add	sp, #16
 8007c6e:	4770      	bx	lr
 8007c70:	2000ff40 	.word	0x2000ff40
 8007c74:	20004088 	.word	0x20004088
 8007c78:	20010b00 	.word	0x20010b00
 8007c7c:	20010c80 	.word	0x20010c80
 8007c80:	20010bc0 	.word	0x20010bc0

08007c84 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8007c84:	b082      	sub	sp, #8
 8007c86:	b5b0      	push	{r4, r5, r7, lr}
 8007c88:	b0b0      	sub	sp, #192	; 0xc0
 8007c8a:	af2e      	add	r7, sp, #184	; 0xb8
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	f107 0118 	add.w	r1, r7, #24
 8007c92:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8007c96:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8007c9a:	4668      	mov	r0, sp
 8007c9c:	f107 0320 	add.w	r3, r7, #32
 8007ca0:	22b8      	movs	r2, #184	; 0xb8
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f00e fa6c 	bl	8016180 <memcpy>
 8007ca8:	f107 0318 	add.w	r3, r7, #24
 8007cac:	cb0c      	ldmia	r3, {r2, r3}
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7fd fd82 	bl	80057b8 <kinematicInverse>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007cba:	2307      	movs	r3, #7
 8007cbc:	e08e      	b.n	8007ddc <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007cbe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 8007cc8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 8007cd2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007cdc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 8007ce6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007cf0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 8007cfa:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8007cfe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007d02:	f7f8 fac1 	bl	8000288 <__aeabi_dsub>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007d10:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007d14:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007d18:	f7f8 fab6 	bl	8000288 <__aeabi_dsub>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8007d26:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007d2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007d2e:	f7f8 faab 	bl	8000288 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007d48:	f7f8 fc56 	bl	80005f8 <__aeabi_dmul>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4614      	mov	r4, r2
 8007d52:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007d60:	f7f8 fc4a 	bl	80005f8 <__aeabi_dmul>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4620      	mov	r0, r4
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	f7f8 fa8e 	bl	800028c <__adddf3>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4614      	mov	r4, r2
 8007d76:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007d84:	f7f8 fc38 	bl	80005f8 <__aeabi_dmul>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fa7c 	bl	800028c <__adddf3>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	ec43 2b17 	vmov	d7, r2, r3
 8007d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8007da0:	eef0 0a67 	vmov.f32	s1, s15
 8007da4:	f012 fffc 	bl	801ada0 <sqrt>
 8007da8:	eeb0 7a40 	vmov.f32	s14, s0
 8007dac:	eef0 7a60 	vmov.f32	s15, s1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007de6:	b002      	add	sp, #8
 8007de8:	4770      	bx	lr
 8007dea:	0000      	movs	r0, r0
 8007dec:	0000      	movs	r0, r0
	...

08007df0 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007df0:	b082      	sub	sp, #8
 8007df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df6:	b0c5      	sub	sp, #276	; 0x114
 8007df8:	af2e      	add	r7, sp, #184	; 0xb8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007e00:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8007e04:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8007e08:	4668      	mov	r0, sp
 8007e0a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007e0e:	22b8      	movs	r2, #184	; 0xb8
 8007e10:	4619      	mov	r1, r3
 8007e12:	f00e f9b5 	bl	8016180 <memcpy>
 8007e16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007e1a:	cb0c      	ldmia	r3, {r2, r3}
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7fd fccb 	bl	80057b8 <kinematicInverse>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007e28:	2307      	movs	r3, #7
 8007e2a:	e17b      	b.n	8008124 <scaraInitCircle+0x334>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8007e2c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d006      	beq.n	8007e42 <scaraInitCircle+0x52>
 8007e34:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3c:	d001      	beq.n	8007e42 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8007e3e:	2306      	movs	r3, #6
 8007e40:	e170      	b.n	8008124 <scaraInitCircle+0x334>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8007e42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e46:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007e4a:	f7f8 fa1d 	bl	8000288 <__aeabi_dsub>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8007e56:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007e5a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007e5e:	f7f8 fa13 	bl	8000288 <__aeabi_dsub>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007e6a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007e6e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007e72:	f7f8 fa09 	bl	8000288 <__aeabi_dsub>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007e7e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007e82:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007e86:	f7f8 f9ff 	bl	8000288 <__aeabi_dsub>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007e92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e9a:	f7f8 fbad 	bl	80005f8 <__aeabi_dmul>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4692      	mov	sl, r2
 8007ea4:	469b      	mov	fp, r3
 8007ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007eaa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007eae:	f7f8 fba3 	bl	80005f8 <__aeabi_dmul>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	4659      	mov	r1, fp
 8007eba:	f7f8 f9e7 	bl	800028c <__adddf3>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	ec43 2b17 	vmov	d7, r2, r3
 8007ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8007eca:	eef0 0a67 	vmov.f32	s1, s15
 8007ece:	f012 ff67 	bl	801ada0 <sqrt>
 8007ed2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007ed6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007eda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007ede:	f7f8 fb8b 	bl	80005f8 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4692      	mov	sl, r2
 8007ee8:	469b      	mov	fp, r3
 8007eea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007eee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007ef2:	f7f8 fb81 	bl	80005f8 <__aeabi_dmul>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4650      	mov	r0, sl
 8007efc:	4659      	mov	r1, fp
 8007efe:	f7f8 f9c5 	bl	800028c <__adddf3>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	ec43 2b17 	vmov	d7, r2, r3
 8007f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8007f0e:	eef0 0a67 	vmov.f32	s1, s15
 8007f12:	f012 ff45 	bl	801ada0 <sqrt>
 8007f16:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f22:	f7f8 f9b1 	bl	8000288 <__aeabi_dsub>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4690      	mov	r8, r2
 8007f2c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	4b84      	ldr	r3, [pc, #528]	; (8008148 <scaraInitCircle+0x358>)
 8007f36:	4640      	mov	r0, r8
 8007f38:	4649      	mov	r1, r9
 8007f3a:	f7f8 fded 	bl	8000b18 <__aeabi_dcmpgt>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007f44:	2306      	movs	r3, #6
 8007f46:	e0ed      	b.n	8008124 <scaraInitCircle+0x334>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007f48:	a37b      	add	r3, pc, #492	; (adr r3, 8008138 <scaraInitCircle+0x348>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f52:	f7f8 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d109      	bne.n	8007f70 <scaraInitCircle+0x180>
 8007f5c:	a376      	add	r3, pc, #472	; (adr r3, 8008138 <scaraInitCircle+0x348>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f66:	f7f8 fdb9 	bl	8000adc <__aeabi_dcmplt>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007f70:	2306      	movs	r3, #6
 8007f72:	e0d7      	b.n	8008124 <scaraInitCircle+0x334>
	}

	angle_start = atan2(y_start, x_start);
 8007f74:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007f78:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007f7c:	f012 ff0e 	bl	801ad9c <atan2>
 8007f80:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007f84:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007f88:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007f8c:	f012 ff06 	bl	801ad9c <atan2>
 8007f90:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f9c:	f7f8 f974 	bl	8000288 <__aeabi_dsub>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fb4:	f7f8 fd92 	bl	8000adc <__aeabi_dcmplt>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d015      	beq.n	8007fea <scaraInitCircle+0x1fa>
 8007fbe:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dd11      	ble.n	8007fea <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc8:	603b      	str	r3, [r7, #0]
 8007fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fd0:	607b      	str	r3, [r7, #4]
 8007fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd6:	a15a      	add	r1, pc, #360	; (adr r1, 8008140 <scaraInitCircle+0x350>)
 8007fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fdc:	f7f8 f954 	bl	8000288 <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007fe8:	e01d      	b.n	8008026 <scaraInitCircle+0x236>
	}else if(delta_angle > 0 && dir < 0){
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ff6:	f7f8 fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d012      	beq.n	8008026 <scaraInitCircle+0x236>
 8008000:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008004:	2b00      	cmp	r3, #0
 8008006:	da0e      	bge.n	8008026 <scaraInitCircle+0x236>
		delta_angle = 2*PI - fabs(delta_angle);
 8008008:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800800a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800800c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008010:	4622      	mov	r2, r4
 8008012:	462b      	mov	r3, r5
 8008014:	a14a      	add	r1, pc, #296	; (adr r1, 8008140 <scaraInitCircle+0x350>)
 8008016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800801a:	f7f8 f935 	bl	8000288 <__aeabi_dsub>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8008026:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 800802a:	f7f8 fa7b 	bl	8000524 <__aeabi_i2d>
 800802e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008032:	f7f8 fae1 	bl	80005f8 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4610      	mov	r0, r2
 800803c:	4619      	mov	r1, r3
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	f7f8 fd49 	bl	8000adc <__aeabi_dcmplt>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <scaraInitCircle+0x26c>
		delta_angle = fabs(delta_angle);
 8008050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008052:	653b      	str	r3, [r7, #80]	; 0x50
 8008054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800805a:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 800805c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008060:	b25a      	sxtb	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800806c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008076:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008080:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8008084:	68f9      	ldr	r1, [r7, #12]
 8008086:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800808a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 800808e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008092:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008096:	f7f8 faaf 	bl	80005f8 <__aeabi_dmul>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 80080a4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80080a8:	68f9      	ldr	r1, [r7, #12]
 80080aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 80080ae:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 80080b8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80080bc:	68f9      	ldr	r1, [r7, #12]
 80080be:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 80080c2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 80080cc:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 80080d6:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 80080e0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 80080ea:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80080ee:	68f9      	ldr	r1, [r7, #12]
 80080f0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 80080f4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80080f8:	68f9      	ldr	r1, [r7, #12]
 80080fa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008104:	68f9      	ldr	r1, [r7, #12]
 8008106:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008110:	68f9      	ldr	r1, [r7, #12]
 8008112:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800811c:	68f9      	ldr	r1, [r7, #12]
 800811e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	375c      	adds	r7, #92	; 0x5c
 8008128:	46bd      	mov	sp, r7
 800812a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812e:	b002      	add	sp, #8
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	f3af 8000 	nop.w
 8008138:	9999999a 	.word	0x9999999a
 800813c:	3fb99999 	.word	0x3fb99999
 8008140:	60000000 	.word	0x60000000
 8008144:	401921fb 	.word	0x401921fb
 8008148:	3ff00000 	.word	0x3ff00000

0800814c <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6178      	str	r0, [r7, #20]
 8008154:	460b      	mov	r3, r1
 8008156:	ed87 0b02 	vstr	d0, [r7, #8]
 800815a:	ed87 1b00 	vstr	d1, [r7]
 800815e:	74fb      	strb	r3, [r7, #19]
 8008160:	4613      	mov	r3, r2
 8008162:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8008164:	7cfb      	ldrb	r3, [r7, #19]
 8008166:	2b04      	cmp	r3, #4
 8008168:	d004      	beq.n	8008174 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 800816a:	7cfb      	ldrb	r3, [r7, #19]
 800816c:	2b05      	cmp	r3, #5
 800816e:	d001      	beq.n	8008174 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008170:	2306      	movs	r3, #6
 8008172:	e032      	b.n	80081da <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8008174:	7cbb      	ldrb	r3, [r7, #18]
 8008176:	2b03      	cmp	r3, #3
 8008178:	d110      	bne.n	800819c <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 800817a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008182:	f7f8 fb63 	bl	800084c <__aeabi_ddiv>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	6979      	ldr	r1, [r7, #20]
 800818c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008196:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800819a:	e01d      	b.n	80081d8 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 800819c:	7cbb      	ldrb	r3, [r7, #18]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d118      	bne.n	80081d4 <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <scaraInitLinear+0x98>)
 80081a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ac:	f7f8 fa24 	bl	80005f8 <__aeabi_dmul>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	6979      	ldr	r1, [r7, #20]
 80081b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80081c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081c4:	f7f8 fb42 	bl	800084c <__aeabi_ddiv>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	6979      	ldr	r1, [r7, #20]
 80081ce:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80081d2:	e001      	b.n	80081d8 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80081d4:	2306      	movs	r3, #6
 80081d6:	e000      	b.n	80081da <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	40877000 	.word	0x40877000

080081e8 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 80081e8:	b5b0      	push	{r4, r5, r7, lr}
 80081ea:	b096      	sub	sp, #88	; 0x58
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	61f8      	str	r0, [r7, #28]
 80081f0:	460b      	mov	r3, r1
 80081f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80081f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80081fa:	ed87 2b00 	vstr	d2, [r7]
 80081fe:	76fb      	strb	r3, [r7, #27]
 8008200:	4613      	mov	r3, r2
 8008202:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	f04f 0300 	mov.w	r3, #0
 800820c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008210:	f7f8 fc64 	bl	8000adc <__aeabi_dcmplt>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <scaraInitLSPB1+0x46>
		total_s = -total_s;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008224:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	22ff      	movs	r2, #255	; 0xff
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	e002      	b.n	8008234 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	2201      	movs	r2, #1
 8008232:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8008234:	7efb      	ldrb	r3, [r7, #27]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d12c      	bne.n	8008294 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800823a:	7ebb      	ldrb	r3, [r7, #26]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d10f      	bne.n	8008260 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	4b98      	ldr	r3, [pc, #608]	; (80084a8 <scaraInitLSPB1+0x2c0>)
 8008246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800824a:	f7f8 f9d5 	bl	80005f8 <__aeabi_dmul>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8008256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800825a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800825e:	e073      	b.n	8008348 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008260:	7ebb      	ldrb	r3, [r7, #26]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d170      	bne.n	8008348 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8008266:	f04f 0200 	mov.w	r2, #0
 800826a:	4b90      	ldr	r3, [pc, #576]	; (80084ac <scaraInitLSPB1+0x2c4>)
 800826c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008270:	f7f8 f9c2 	bl	80005f8 <__aeabi_dmul>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	4b89      	ldr	r3, [pc, #548]	; (80084a8 <scaraInitLSPB1+0x2c0>)
 8008282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008286:	f7f8 f9b7 	bl	80005f8 <__aeabi_dmul>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8008292:	e059      	b.n	8008348 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8008294:	7efb      	ldrb	r3, [r7, #27]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d112      	bne.n	80082c0 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800829a:	7ebb      	ldrb	r3, [r7, #26]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d153      	bne.n	8008348 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80082a0:	a373      	add	r3, pc, #460	; (adr r3, 8008470 <scaraInitLSPB1+0x288>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082aa:	f7f8 f9a5 	bl	80005f8 <__aeabi_dmul>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80082b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082be:	e043      	b.n	8008348 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 80082c0:	7efb      	ldrb	r3, [r7, #27]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d112      	bne.n	80082ec <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80082c6:	7ebb      	ldrb	r3, [r7, #26]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d13d      	bne.n	8008348 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80082cc:	a368      	add	r3, pc, #416	; (adr r3, 8008470 <scaraInitLSPB1+0x288>)
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082ea:	e02d      	b.n	8008348 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 80082ec:	7efb      	ldrb	r3, [r7, #27]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d112      	bne.n	8008318 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80082f2:	7ebb      	ldrb	r3, [r7, #26]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d127      	bne.n	8008348 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80082f8:	a35f      	add	r3, pc, #380	; (adr r3, 8008478 <scaraInitLSPB1+0x290>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008302:	f7f8 f979 	bl	80005f8 <__aeabi_dmul>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800830e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008312:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008316:	e017      	b.n	8008348 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8008318:	7efb      	ldrb	r3, [r7, #27]
 800831a:	2b03      	cmp	r3, #3
 800831c:	d112      	bne.n	8008344 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800831e:	7ebb      	ldrb	r3, [r7, #26]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d111      	bne.n	8008348 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8008324:	a356      	add	r3, pc, #344	; (adr r3, 8008480 <scaraInitLSPB1+0x298>)
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800832e:	f7f8 f963 	bl	80005f8 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800833a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800833e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008342:	e001      	b.n	8008348 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008344:	2306      	movs	r3, #6
 8008346:	e1c6      	b.n	80086d6 <scaraInitLSPB1+0x4ee>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008348:	7ebb      	ldrb	r3, [r7, #26]
 800834a:	2b01      	cmp	r3, #1
 800834c:	f040 80f2 	bne.w	8008534 <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8008350:	a34d      	add	r3, pc, #308	; (adr r3, 8008488 <scaraInitLSPB1+0x2a0>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800835a:	f7f8 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01d      	beq.n	80083a0 <scaraInitLSPB1+0x1b8>
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	4b51      	ldr	r3, [pc, #324]	; (80084b0 <scaraInitLSPB1+0x2c8>)
 800836a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800836e:	f7f8 fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d013      	beq.n	80083a0 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8008378:	f04f 0200 	mov.w	r2, #0
 800837c:	4b4d      	ldr	r3, [pc, #308]	; (80084b4 <scaraInitLSPB1+0x2cc>)
 800837e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008382:	f7f8 f939 	bl	80005f8 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008392:	f7f8 fa5b 	bl	800084c <__aeabi_ddiv>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800839e:	e0a4      	b.n	80084ea <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80083a0:	a339      	add	r3, pc, #228	; (adr r3, 8008488 <scaraInitLSPB1+0x2a0>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083aa:	f7f8 fb97 	bl	8000adc <__aeabi_dcmplt>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01d      	beq.n	80083f0 <scaraInitLSPB1+0x208>
 80083b4:	a336      	add	r3, pc, #216	; (adr r3, 8008490 <scaraInitLSPB1+0x2a8>)
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80083be:	f7f8 fbab 	bl	8000b18 <__aeabi_dcmpgt>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d013      	beq.n	80083f0 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	4b39      	ldr	r3, [pc, #228]	; (80084b4 <scaraInitLSPB1+0x2cc>)
 80083ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80083d2:	f7f8 f911 	bl	80005f8 <__aeabi_dmul>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4610      	mov	r0, r2
 80083dc:	4619      	mov	r1, r3
 80083de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083e2:	f7f8 fa33 	bl	800084c <__aeabi_ddiv>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80083ee:	e07c      	b.n	80084ea <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 80083f0:	a325      	add	r3, pc, #148	; (adr r3, 8008488 <scaraInitLSPB1+0x2a0>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083fa:	f7f8 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <scaraInitLSPB1+0x234>
 8008404:	a320      	add	r3, pc, #128	; (adr r3, 8008488 <scaraInitLSPB1+0x2a0>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800840e:	f7f8 fb65 	bl	8000adc <__aeabi_dcmplt>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008418:	2309      	movs	r3, #9
 800841a:	e15c      	b.n	80086d6 <scaraInitLSPB1+0x4ee>
		}
		else{
			if(tf < 0.001){
 800841c:	a31e      	add	r3, pc, #120	; (adr r3, 8008498 <scaraInitLSPB1+0x2b0>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008426:	f7f8 fb59 	bl	8000adc <__aeabi_dcmplt>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8008430:	2309      	movs	r3, #9
 8008432:	e150      	b.n	80086d6 <scaraInitLSPB1+0x4ee>
			}else{
				v_lim = total_s/tf;
 8008434:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800843c:	f7f8 fa06 	bl	800084c <__aeabi_ddiv>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8008448:	a315      	add	r3, pc, #84	; (adr r3, 80084a0 <scaraInitLSPB1+0x2b8>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008452:	f7f8 f8d1 	bl	80005f8 <__aeabi_dmul>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800845e:	f7f8 fb3d 	bl	8000adc <__aeabi_dcmplt>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d027      	beq.n	80084b8 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008468:	230a      	movs	r3, #10
 800846a:	e134      	b.n	80086d6 <scaraInitLSPB1+0x4ee>
 800846c:	f3af 8000 	nop.w
 8008470:	14000000 	.word	0x14000000
 8008474:	4000f6f0 	.word	0x4000f6f0
 8008478:	00000000 	.word	0x00000000
 800847c:	405c2000 	.word	0x405c2000
 8008480:	6b259425 	.word	0x6b259425
 8008484:	40069b91 	.word	0x40069b91
 8008488:	9999999a 	.word	0x9999999a
 800848c:	3fb99999 	.word	0x3fb99999
 8008490:	33333333 	.word	0x33333333
 8008494:	3fc33333 	.word	0x3fc33333
 8008498:	d2f1a9fc 	.word	0xd2f1a9fc
 800849c:	3f50624d 	.word	0x3f50624d
 80084a0:	9999999a 	.word	0x9999999a
 80084a4:	3ff19999 	.word	0x3ff19999
 80084a8:	40877000 	.word	0x40877000
 80084ac:	407f4000 	.word	0x407f4000
 80084b0:	40080000 	.word	0x40080000
 80084b4:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80084b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	f7f7 fee4 	bl	800028c <__adddf3>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084cc:	f7f8 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 80084d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	f7f7 fed5 	bl	800028c <__adddf3>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 80084ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084f2:	f7f8 f9ab 	bl	800084c <__aeabi_ddiv>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80084fe:	f7f7 fec3 	bl	8000288 <__aeabi_dsub>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 800850a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800850e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008512:	f7f8 f99b 	bl	800084c <__aeabi_ddiv>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 800851e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008522:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008526:	f7f7 feaf 	bl	8000288 <__aeabi_dsub>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8008532:	e06e      	b.n	8008612 <scaraInitLSPB1+0x42a>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008534:	7ebb      	ldrb	r3, [r7, #26]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d16b      	bne.n	8008612 <scaraInitLSPB1+0x42a>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 800853a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800853e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008542:	f7f8 f859 	bl	80005f8 <__aeabi_dmul>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4614      	mov	r4, r2
 800854c:	461d      	mov	r5, r3
 800854e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008552:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008556:	f7f8 f84f 	bl	80005f8 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f8 fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01e      	beq.n	80085aa <scaraInitLSPB1+0x3c2>
//			}
//			if(v_design/a_design < 0.1){ //ta is too small
//				//recalculate a_design
//				a_design = v_design/0.1;
//			}
			ta = v_design/a_design;
 800856c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008570:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008574:	f7f8 f96a 	bl	800084c <__aeabi_ddiv>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8008580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008584:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008588:	f7f8 f960 	bl	800084c <__aeabi_ddiv>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 8008594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008598:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800859c:	f7f7 fe76 	bl	800028c <__adddf3>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80085a8:	e033      	b.n	8008612 <scaraInitLSPB1+0x42a>

		}else{
			tf = 2*total_s/v_design;
 80085aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	f7f7 fe6b 	bl	800028c <__adddf3>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4610      	mov	r0, r2
 80085bc:	4619      	mov	r1, r3
 80085be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085c2:	f7f8 f943 	bl	800084c <__aeabi_ddiv>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085da:	f7f8 f937 	bl	800084c <__aeabi_ddiv>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085f2:	f7f8 f92b 	bl	800084c <__aeabi_ddiv>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 80085fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008602:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008606:	f7f8 f921 	bl	800084c <__aeabi_ddiv>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008612:	a333      	add	r3, pc, #204	; (adr r3, 80086e0 <scaraInitLSPB1+0x4f8>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800861c:	f7f8 f916 	bl	800084c <__aeabi_ddiv>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4610      	mov	r0, r2
 8008626:	4619      	mov	r1, r3
 8008628:	f7f8 fade 	bl	8000be8 <__aeabi_d2f>
 800862c:	4603      	mov	r3, r0
 800862e:	ee00 3a10 	vmov	s0, r3
 8008632:	f012 fb71 	bl	801ad18 <ceilf>
 8008636:	eef0 7a40 	vmov.f32	s15, s0
 800863a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800863e:	ee17 3a90 	vmov	r3, s15
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8008644:	69f9      	ldr	r1, [r7, #28]
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8008652:	69f9      	ldr	r1, [r7, #28]
 8008654:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008658:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 800865c:	69f9      	ldr	r1, [r7, #28]
 800865e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008662:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8008666:	69f9      	ldr	r1, [r7, #28]
 8008668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800866c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8008670:	69f9      	ldr	r1, [r7, #28]
 8008672:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008676:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 800867a:	69f9      	ldr	r1, [r7, #28]
 800867c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008680:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8008684:	69f9      	ldr	r1, [r7, #28]
 8008686:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800868a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 800868e:	69f9      	ldr	r1, [r7, #28]
 8008690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008694:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 8008698:	69f9      	ldr	r1, [r7, #28]
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 80086a6:	69f9      	ldr	r1, [r7, #28]
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b8:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80086c6:	f7f7 fddf 	bl	8000288 <__aeabi_dsub>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	69f9      	ldr	r1, [r7, #28]
 80086d0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3758      	adds	r7, #88	; 0x58
 80086da:	46bd      	mov	sp, r7
 80086dc:	bdb0      	pop	{r4, r5, r7, pc}
 80086de:	bf00      	nop
 80086e0:	40000000 	.word	0x40000000
 80086e4:	3f847ae1 	.word	0x3f847ae1

080086e8 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 80086e8:	b5b0      	push	{r4, r5, r7, lr}
 80086ea:	b094      	sub	sp, #80	; 0x50
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	61f8      	str	r0, [r7, #28]
 80086f0:	460b      	mov	r3, r1
 80086f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80086f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80086fa:	ed87 2b00 	vstr	d2, [r7]
 80086fe:	76fb      	strb	r3, [r7, #27]
 8008700:	4613      	mov	r3, r2
 8008702:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008710:	f7f8 f9e4 	bl	8000adc <__aeabi_dcmplt>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <scaraInitScurve1+0x46>
		total_s = -total_s;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008724:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	22ff      	movs	r2, #255	; 0xff
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	e002      	b.n	8008734 <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	2201      	movs	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8008734:	7efb      	ldrb	r3, [r7, #27]
 8008736:	2b04      	cmp	r3, #4
 8008738:	d12c      	bne.n	8008794 <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800873a:	7ebb      	ldrb	r3, [r7, #26]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d10f      	bne.n	8008760 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	4b90      	ldr	r3, [pc, #576]	; (8008988 <scaraInitScurve1+0x2a0>)
 8008746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800874a:	f7f7 ff55 	bl	80005f8 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800875e:	e073      	b.n	8008848 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008760:	7ebb      	ldrb	r3, [r7, #26]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d170      	bne.n	8008848 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	4b88      	ldr	r3, [pc, #544]	; (800898c <scaraInitScurve1+0x2a4>)
 800876c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008770:	f7f7 ff42 	bl	80005f8 <__aeabi_dmul>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	4b81      	ldr	r3, [pc, #516]	; (8008988 <scaraInitScurve1+0x2a0>)
 8008782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008786:	f7f7 ff37 	bl	80005f8 <__aeabi_dmul>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008792:	e059      	b.n	8008848 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8008794:	7efb      	ldrb	r3, [r7, #27]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d112      	bne.n	80087c0 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800879a:	7ebb      	ldrb	r3, [r7, #26]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d153      	bne.n	8008848 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80087a0:	a36d      	add	r3, pc, #436	; (adr r3, 8008958 <scaraInitScurve1+0x270>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087aa:	f7f7 ff25 	bl	80005f8 <__aeabi_dmul>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80087b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80087be:	e043      	b.n	8008848 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 80087c0:	7efb      	ldrb	r3, [r7, #27]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d112      	bne.n	80087ec <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80087c6:	7ebb      	ldrb	r3, [r7, #26]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d13d      	bne.n	8008848 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80087cc:	a362      	add	r3, pc, #392	; (adr r3, 8008958 <scaraInitScurve1+0x270>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087d6:	f7f7 ff0f 	bl	80005f8 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80087e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80087ea:	e02d      	b.n	8008848 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 80087ec:	7efb      	ldrb	r3, [r7, #27]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d112      	bne.n	8008818 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80087f2:	7ebb      	ldrb	r3, [r7, #26]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d127      	bne.n	8008848 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80087f8:	a359      	add	r3, pc, #356	; (adr r3, 8008960 <scaraInitScurve1+0x278>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008802:	f7f7 fef9 	bl	80005f8 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800880e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008812:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008816:	e017      	b.n	8008848 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008818:	7efb      	ldrb	r3, [r7, #27]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d112      	bne.n	8008844 <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800881e:	7ebb      	ldrb	r3, [r7, #26]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d111      	bne.n	8008848 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8008824:	a350      	add	r3, pc, #320	; (adr r3, 8008968 <scaraInitScurve1+0x280>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800882e:	f7f7 fee3 	bl	80005f8 <__aeabi_dmul>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800883a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800883e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008842:	e001      	b.n	8008848 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008844:	2306      	movs	r3, #6
 8008846:	e212      	b.n	8008c6e <scaraInitScurve1+0x586>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008848:	7ebb      	ldrb	r3, [r7, #26]
 800884a:	2b01      	cmp	r3, #1
 800884c:	f040 80fc 	bne.w	8008a48 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008850:	a347      	add	r3, pc, #284	; (adr r3, 8008970 <scaraInitScurve1+0x288>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800885a:	f7f8 f93f 	bl	8000adc <__aeabi_dcmplt>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d01d      	beq.n	80088a0 <scaraInitScurve1+0x1b8>
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	4b49      	ldr	r3, [pc, #292]	; (8008990 <scaraInitScurve1+0x2a8>)
 800886a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800886e:	f7f8 f953 	bl	8000b18 <__aeabi_dcmpgt>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d013      	beq.n	80088a0 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	4b45      	ldr	r3, [pc, #276]	; (8008994 <scaraInitScurve1+0x2ac>)
 800887e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008882:	f7f7 feb9 	bl	80005f8 <__aeabi_dmul>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008892:	f7f7 ffdb 	bl	800084c <__aeabi_ddiv>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800889e:	e094      	b.n	80089ca <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80088a0:	a333      	add	r3, pc, #204	; (adr r3, 8008970 <scaraInitScurve1+0x288>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088aa:	f7f8 f917 	bl	8000adc <__aeabi_dcmplt>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01d      	beq.n	80088f0 <scaraInitScurve1+0x208>
 80088b4:	a330      	add	r3, pc, #192	; (adr r3, 8008978 <scaraInitScurve1+0x290>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80088be:	f7f8 f92b 	bl	8000b18 <__aeabi_dcmpgt>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d013      	beq.n	80088f0 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	4b31      	ldr	r3, [pc, #196]	; (8008994 <scaraInitScurve1+0x2ac>)
 80088ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088e2:	f7f7 ffb3 	bl	800084c <__aeabi_ddiv>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80088ee:	e06c      	b.n	80089ca <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 80088f0:	a31f      	add	r3, pc, #124	; (adr r3, 8008970 <scaraInitScurve1+0x288>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80088fa:	f7f8 f8ef 	bl	8000adc <__aeabi_dcmplt>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <scaraInitScurve1+0x234>
 8008904:	a31a      	add	r3, pc, #104	; (adr r3, 8008970 <scaraInitScurve1+0x288>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800890e:	f7f8 f8e5 	bl	8000adc <__aeabi_dcmplt>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008918:	2309      	movs	r3, #9
 800891a:	e1a8      	b.n	8008c6e <scaraInitScurve1+0x586>
		}else{
			v_lim = total_s/tf;
 800891c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008920:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008924:	f7f7 ff92 	bl	800084c <__aeabi_ddiv>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8008930:	a313      	add	r3, pc, #76	; (adr r3, 8008980 <scaraInitScurve1+0x298>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800893a:	f7f7 fe5d 	bl	80005f8 <__aeabi_dmul>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008946:	f7f8 f8c9 	bl	8000adc <__aeabi_dcmplt>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d023      	beq.n	8008998 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008950:	230a      	movs	r3, #10
 8008952:	e18c      	b.n	8008c6e <scaraInitScurve1+0x586>
 8008954:	f3af 8000 	nop.w
 8008958:	14000000 	.word	0x14000000
 800895c:	4000f6f0 	.word	0x4000f6f0
 8008960:	00000000 	.word	0x00000000
 8008964:	405c2000 	.word	0x405c2000
 8008968:	6b259425 	.word	0x6b259425
 800896c:	40069b91 	.word	0x40069b91
 8008970:	9999999a 	.word	0x9999999a
 8008974:	3fb99999 	.word	0x3fb99999
 8008978:	33333333 	.word	0x33333333
 800897c:	3fc33333 	.word	0x3fc33333
 8008980:	9999999a 	.word	0x9999999a
 8008984:	3ff19999 	.word	0x3ff19999
 8008988:	40877000 	.word	0x40877000
 800898c:	407f4000 	.word	0x407f4000
 8008990:	401e0000 	.word	0x401e0000
 8008994:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008998:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	f7f7 fc74 	bl	800028c <__adddf3>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089ac:	f7f8 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 80089b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	f7f7 fc65 	bl	800028c <__adddf3>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 80089ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	f7f7 fc5b 	bl	800028c <__adddf3>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4610      	mov	r0, r2
 80089dc:	4619      	mov	r1, r3
 80089de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089e2:	f7f7 fe09 	bl	80005f8 <__aeabi_dmul>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4614      	mov	r4, r2
 80089ec:	461d      	mov	r5, r3
 80089ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4610      	mov	r0, r2
 8008a00:	4619      	mov	r1, r3
 8008a02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a06:	f7f7 fc3f 	bl	8000288 <__aeabi_dsub>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7f7 ff1b 	bl	800084c <__aeabi_ddiv>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 8008a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a26:	f7f7 ff11 	bl	800084c <__aeabi_ddiv>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 8008a32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a3a:	f7f7 fc25 	bl	8000288 <__aeabi_dsub>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008a46:	e084      	b.n	8008b52 <scaraInitScurve1+0x46a>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008a48:	7ebb      	ldrb	r3, [r7, #26]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f040 8081 	bne.w	8008b52 <scaraInitScurve1+0x46a>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 8008a50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a58:	f7f7 fdce 	bl	80005f8 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4614      	mov	r4, r2
 8008a62:	461d      	mov	r5, r3
 8008a64:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	f7f7 fc0e 	bl	800028c <__adddf3>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4610      	mov	r0, r2
 8008a76:	4619      	mov	r1, r3
 8008a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f8 f846 	bl	8000b18 <__aeabi_dcmpgt>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d024      	beq.n	8008adc <scaraInitScurve1+0x3f4>
//			}
//			if(v_design/a_design < 0.1){ //ta is too small
//				//recalculate a_design
//				a_design = v_design/0.1;
//			}
			ta = v_design/a_design;
 8008a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a9a:	f7f7 fed7 	bl	800084c <__aeabi_ddiv>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008aa6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008aaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008aae:	f7f7 fecd 	bl	800084c <__aeabi_ddiv>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008aba:	f7f7 fbe7 	bl	800028c <__adddf3>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 8008ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008aca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008ace:	f7f7 fbdd 	bl	800028c <__adddf3>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008ada:	e03a      	b.n	8008b52 <scaraInitScurve1+0x46a>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008adc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	f7f7 fbd2 	bl	800028c <__adddf3>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4610      	mov	r0, r2
 8008aee:	4619      	mov	r1, r3
 8008af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008af4:	f7f7 feaa 	bl	800084c <__aeabi_ddiv>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	4b5c      	ldr	r3, [pc, #368]	; (8008c78 <scaraInitScurve1+0x590>)
 8008b06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b0a:	f7f7 fe9f 	bl	800084c <__aeabi_ddiv>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	4b58      	ldr	r3, [pc, #352]	; (8008c7c <scaraInitScurve1+0x594>)
 8008b1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b20:	f7f7 fd6a 	bl	80005f8 <__aeabi_dmul>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	4b51      	ldr	r3, [pc, #324]	; (8008c78 <scaraInitScurve1+0x590>)
 8008b32:	f7f7 fe8b 	bl	800084c <__aeabi_ddiv>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 8008b3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b46:	f7f7 fe81 	bl	800084c <__aeabi_ddiv>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 8008b52:	69f9      	ldr	r1, [r7, #28]
 8008b54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b58:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b62:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 8008b66:	69f9      	ldr	r1, [r7, #28]
 8008b68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 8008b70:	69f9      	ldr	r1, [r7, #28]
 8008b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b76:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 8008b7a:	69f9      	ldr	r1, [r7, #28]
 8008b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b80:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008b84:	69f9      	ldr	r1, [r7, #28]
 8008b86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b8a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 8008b8e:	69f9      	ldr	r1, [r7, #28]
 8008b90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b94:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008b98:	69f9      	ldr	r1, [r7, #28]
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 8008ba6:	69f9      	ldr	r1, [r7, #28]
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 8008bb4:	69f9      	ldr	r1, [r7, #28]
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	f04f 0300 	mov.w	r3, #0
 8008bbe:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	4b2e      	ldr	r3, [pc, #184]	; (8008c80 <scaraInitScurve1+0x598>)
 8008bc8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008bcc:	f7f7 fd14 	bl	80005f8 <__aeabi_dmul>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bdc:	f7f7 fd0c 	bl	80005f8 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008be8:	f7f7 fe30 	bl	800084c <__aeabi_ddiv>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	69f9      	ldr	r1, [r7, #28]
 8008bf2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 8008bf6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	f7f7 fb45 	bl	800028c <__adddf3>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4610      	mov	r0, r2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c1e:	f7f7 fceb 	bl	80005f8 <__aeabi_dmul>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	69f9      	ldr	r1, [r7, #28]
 8008c28:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <scaraInitScurve1+0x598>)
 8008c32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c36:	f7f7 fcdf 	bl	80005f8 <__aeabi_dmul>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	69f9      	ldr	r1, [r7, #28]
 8008c40:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <scaraInitScurve1+0x598>)
 8008c4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c4e:	f7f7 fcd3 	bl	80005f8 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4610      	mov	r0, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c5e:	f7f7 fccb 	bl	80005f8 <__aeabi_dmul>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	69f9      	ldr	r1, [r7, #28]
 8008c68:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3750      	adds	r7, #80	; 0x50
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bdb0      	pop	{r4, r5, r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40100000 	.word	0x40100000
 8008c7c:	40080000 	.word	0x40080000
 8008c80:	40180000 	.word	0x40180000

08008c84 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008c84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c88:	b08a      	sub	sp, #40	; 0x28
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008c98:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008ca2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008cac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	f04f 0300 	mov.w	r3, #0
 8008cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cbc:	f7f7 ff22 	bl	8000b04 <__aeabi_dcmpge>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d05b      	beq.n	8008d7e <scaraFlowLSPB1+0xfa>
 8008cc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cce:	f7f7 ff0f 	bl	8000af0 <__aeabi_dcmple>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d052      	beq.n	8008d7e <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf4:	f7f7 fc80 	bl	80005f8 <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	f7f7 fac4 	bl	800028c <__adddf3>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	68f9      	ldr	r1, [r7, #12]
 8008d0a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1e:	f7f7 fc6b 	bl	80005f8 <__aeabi_dmul>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 faaf 	bl	800028c <__adddf3>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4614      	mov	r4, r2
 8008d34:	461d      	mov	r5, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	4b98      	ldr	r3, [pc, #608]	; (8008fa4 <scaraFlowLSPB1+0x320>)
 8008d42:	f7f7 fc59 	bl	80005f8 <__aeabi_dmul>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	f7f7 fa8d 	bl	800028c <__adddf3>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	68f9      	ldr	r1, [r7, #12]
 8008d78:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008d7c:	e10b      	b.n	8008f96 <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d86:	f7f7 fea9 	bl	8000adc <__aeabi_dcmplt>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d054      	beq.n	8008e3a <scaraFlowLSPB1+0x1b6>
 8008d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d98:	f7f7 feaa 	bl	8000af0 <__aeabi_dcmple>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d04b      	beq.n	8008e3a <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008da2:	68f9      	ldr	r1, [r7, #12]
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008dcc:	f7f7 fc14 	bl	80005f8 <__aeabi_dmul>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f04f 0200 	mov.w	r2, #0
 8008ddc:	4b71      	ldr	r3, [pc, #452]	; (8008fa4 <scaraFlowLSPB1+0x320>)
 8008dde:	f7f7 fc0b 	bl	80005f8 <__aeabi_dmul>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4620      	mov	r0, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 fa4f 	bl	800028c <__adddf3>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4690      	mov	r8, r2
 8008df4:	4699      	mov	r9, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	4b68      	ldr	r3, [pc, #416]	; (8008fa4 <scaraFlowLSPB1+0x320>)
 8008e02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e06:	f7f7 fbf7 	bl	80005f8 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e12:	f7f7 fa39 	bl	8000288 <__aeabi_dsub>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4640      	mov	r0, r8
 8008e28:	4649      	mov	r1, r9
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008e38:	e0ad      	b.n	8008f96 <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e42:	f7f7 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 8090 	beq.w	8008f6e <scaraFlowLSPB1+0x2ea>
 8008e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e56:	f7f7 fe4b 	bl	8000af0 <__aeabi_dcmple>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 8086 	beq.w	8008f6e <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008e68:	4614      	mov	r4, r2
 8008e6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e88:	f7f7 f9fe 	bl	8000288 <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fbb0 	bl	80005f8 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 f9f4 	bl	800028c <__adddf3>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	68f9      	ldr	r1, [r7, #12]
 8008eaa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ebe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ec2:	f7f7 f9e1 	bl	8000288 <__aeabi_dsub>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4640      	mov	r0, r8
 8008ecc:	4649      	mov	r1, r9
 8008ece:	f7f7 fb93 	bl	80005f8 <__aeabi_dmul>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	4629      	mov	r1, r5
 8008eda:	f7f7 f9d5 	bl	8000288 <__aeabi_dsub>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4614      	mov	r4, r2
 8008ee4:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008ef2:	f7f7 f9c9 	bl	8000288 <__aeabi_dsub>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4690      	mov	r8, r2
 8008efc:	4699      	mov	r9, r3
 8008efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f06:	f7f7 f9bf 	bl	8000288 <__aeabi_dsub>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	f7f7 fb71 	bl	80005f8 <__aeabi_dmul>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4690      	mov	r8, r2
 8008f1c:	4699      	mov	r9, r3
 8008f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f26:	f7f7 f9af 	bl	8000288 <__aeabi_dsub>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4649      	mov	r1, r9
 8008f32:	f7f7 fb61 	bl	80005f8 <__aeabi_dmul>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	4699      	mov	r9, r3
 8008f3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	f7f7 f9a1 	bl	800028c <__adddf3>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fc7b 	bl	800084c <__aeabi_ddiv>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	f7f7 f993 	bl	8000288 <__aeabi_dsub>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008f6c:	e013      	b.n	8008f96 <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8008f6e:	68f9      	ldr	r1, [r7, #12]
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	f04f 0300 	mov.w	r3, #0
 8008f78:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8008f7c:	68f9      	ldr	r1, [r7, #12]
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008f90:	68f9      	ldr	r1, [r7, #12]
 8008f92:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3728      	adds	r7, #40	; 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fa2:	bf00      	nop
 8008fa4:	3fe00000 	.word	0x3fe00000

08008fa8 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008fa8:	b5b0      	push	{r4, r5, r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fc0:	f7f7 fda0 	bl	8000b04 <__aeabi_dcmpge>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d01e      	beq.n	8009008 <scaraFlowGCODE+0x60>
 8008fca:	4b5f      	ldr	r3, [pc, #380]	; (8009148 <scaraFlowGCODE+0x1a0>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fd4:	f7f7 fd8c 	bl	8000af0 <__aeabi_dcmple>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d014      	beq.n	8009008 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 8008fde:	4b5b      	ldr	r3, [pc, #364]	; (800914c <scaraFlowGCODE+0x1a4>)
 8008fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff8:	f7f7 fafe 	bl	80005f8 <__aeabi_dmul>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	68f9      	ldr	r1, [r7, #12]
 8009002:	e9c1 2300 	strd	r2, r3, [r1]
 8009006:	e09a      	b.n	800913e <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8009008:	4b4f      	ldr	r3, [pc, #316]	; (8009148 <scaraFlowGCODE+0x1a0>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009012:	f7f7 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01f      	beq.n	800905c <scaraFlowGCODE+0xb4>
 800901c:	4b4c      	ldr	r3, [pc, #304]	; (8009150 <scaraFlowGCODE+0x1a8>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009026:	f7f7 fd63 	bl	8000af0 <__aeabi_dcmple>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d015      	beq.n	800905c <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 8009030:	4b48      	ldr	r3, [pc, #288]	; (8009154 <scaraFlowGCODE+0x1ac>)
 8009032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800903a:	f7f7 fadd 	bl	80005f8 <__aeabi_dmul>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4610      	mov	r0, r2
 8009044:	4619      	mov	r1, r3
 8009046:	4b43      	ldr	r3, [pc, #268]	; (8009154 <scaraFlowGCODE+0x1ac>)
 8009048:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800904c:	f7f7 f91e 	bl	800028c <__adddf3>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	68f9      	ldr	r1, [r7, #12]
 8009056:	e9c1 2300 	strd	r2, r3, [r1]
 800905a:	e070      	b.n	800913e <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 800905c:	4b3c      	ldr	r3, [pc, #240]	; (8009150 <scaraFlowGCODE+0x1a8>)
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009066:	f7f7 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d038      	beq.n	80090e2 <scaraFlowGCODE+0x13a>
 8009070:	4b39      	ldr	r3, [pc, #228]	; (8009158 <scaraFlowGCODE+0x1b0>)
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800907a:	f7f7 fd39 	bl	8000af0 <__aeabi_dcmple>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d02e      	beq.n	80090e2 <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8009084:	4b35      	ldr	r3, [pc, #212]	; (800915c <scaraFlowGCODE+0x1b4>)
 8009086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800908a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908e:	f7f7 fab3 	bl	80005f8 <__aeabi_dmul>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4610      	mov	r0, r2
 8009098:	4619      	mov	r1, r3
 800909a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800909e:	f7f7 faab 	bl	80005f8 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4614      	mov	r4, r2
 80090a8:	461d      	mov	r5, r3
 80090aa:	4b2c      	ldr	r3, [pc, #176]	; (800915c <scaraFlowGCODE+0x1b4>)
 80090ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80090b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b4:	f7f7 faa0 	bl	80005f8 <__aeabi_dmul>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 f8e4 	bl	800028c <__adddf3>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4610      	mov	r0, r2
 80090ca:	4619      	mov	r1, r3
 80090cc:	4b23      	ldr	r3, [pc, #140]	; (800915c <scaraFlowGCODE+0x1b4>)
 80090ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80090d2:	f7f7 f8db 	bl	800028c <__adddf3>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	e9c1 2300 	strd	r2, r3, [r1]
 80090e0:	e02d      	b.n	800913e <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 80090e2:	4b1e      	ldr	r3, [pc, #120]	; (800915c <scaraFlowGCODE+0x1b4>)
 80090e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ec:	f7f7 fa84 	bl	80005f8 <__aeabi_dmul>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4610      	mov	r0, r2
 80090f6:	4619      	mov	r1, r3
 80090f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090fc:	f7f7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4614      	mov	r4, r2
 8009106:	461d      	mov	r5, r3
 8009108:	4b14      	ldr	r3, [pc, #80]	; (800915c <scaraFlowGCODE+0x1b4>)
 800910a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800910e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009112:	f7f7 fa71 	bl	80005f8 <__aeabi_dmul>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 f8b5 	bl	800028c <__adddf3>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4610      	mov	r0, r2
 8009128:	4619      	mov	r1, r3
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <scaraFlowGCODE+0x1b4>)
 800912c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009130:	f7f7 f8ac 	bl	800028c <__adddf3>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bdb0      	pop	{r4, r5, r7, pc}
 8009148:	20008f48 	.word	0x20008f48
 800914c:	2000fd30 	.word	0x2000fd30
 8009150:	20008f68 	.word	0x20008f68
 8009154:	20008f90 	.word	0x20008f90
 8009158:	20008fb8 	.word	0x20008fb8
 800915c:	20008f50 	.word	0x20008f50

08009160 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8009160:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009164:	b08c      	sub	sp, #48	; 0x30
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009174:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800917e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009188:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8009192:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	f04f 0300 	mov.w	r3, #0
 800919e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091a2:	f7f7 fcaf 	bl	8000b04 <__aeabi_dcmpge>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d025      	beq.n	80091f8 <scaraFLowScurve1+0x98>
 80091ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091b4:	f7f7 fc9c 	bl	8000af0 <__aeabi_dcmple>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d01c      	beq.n	80091f8 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 80091be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091c6:	f7f7 fa17 	bl	80005f8 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4610      	mov	r0, r2
 80091d0:	4619      	mov	r1, r3
 80091d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d6:	f7f7 fa0f 	bl	80005f8 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4610      	mov	r0, r2
 80091e0:	4619      	mov	r1, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80091e8:	f7f7 fa06 	bl	80005f8 <__aeabi_dmul>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	68f9      	ldr	r1, [r7, #12]
 80091f2:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80091f6:	e17c      	b.n	80094f2 <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 80091f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009200:	f7f7 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d061      	beq.n	80092ce <scaraFLowScurve1+0x16e>
 800920a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	f7f7 f83b 	bl	800028c <__adddf3>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800921e:	f7f7 fc67 	bl	8000af0 <__aeabi_dcmple>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d052      	beq.n	80092ce <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8009228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800922c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009230:	f7f7 f9e2 	bl	80005f8 <__aeabi_dmul>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4610      	mov	r0, r2
 800923a:	4619      	mov	r1, r3
 800923c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009240:	f7f7 f9da 	bl	80005f8 <__aeabi_dmul>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4690      	mov	r8, r2
 800924a:	4699      	mov	r9, r3
 800924c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009254:	f7f7 f9d0 	bl	80005f8 <__aeabi_dmul>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4610      	mov	r0, r2
 800925e:	4619      	mov	r1, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8009266:	f7f7 f9c7 	bl	80005f8 <__aeabi_dmul>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f7 f809 	bl	8000288 <__aeabi_dsub>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4690      	mov	r8, r2
 800927c:	4699      	mov	r9, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8009284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009288:	f7f7 f9b6 	bl	80005f8 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f6 fffa 	bl	800028c <__adddf3>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4610      	mov	r0, r2
 800929e:	4619      	mov	r1, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80092a6:	f7f6 ffef 	bl	8000288 <__aeabi_dsub>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4614      	mov	r4, r2
 80092b0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80092ba:	4620      	mov	r0, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	f7f7 f99b 	bl	80005f8 <__aeabi_dmul>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80092cc:	e111      	b.n	80094f2 <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 80092ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	f7f6 ffd9 	bl	800028c <__adddf3>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092e2:	f7f7 fc19 	bl	8000b18 <__aeabi_dcmpgt>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d022      	beq.n	8009332 <scaraFLowScurve1+0x1d2>
 80092ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092f4:	f7f6 ffc8 	bl	8000288 <__aeabi_dsub>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009300:	f7f7 fbf6 	bl	8000af0 <__aeabi_dcmple>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d013      	beq.n	8009332 <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 800930a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800930e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009312:	f7f6 ffb9 	bl	8000288 <__aeabi_dsub>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4610      	mov	r0, r2
 800931c:	4619      	mov	r1, r3
 800931e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009330:	e0df      	b.n	80094f2 <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 8009332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009336:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800933a:	f7f6 ffa5 	bl	8000288 <__aeabi_dsub>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009346:	f7f7 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8081 	beq.w	8009454 <scaraFLowScurve1+0x2f4>
 8009352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800935a:	f7f7 fbc9 	bl	8000af0 <__aeabi_dcmple>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d077      	beq.n	8009454 <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 800936a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800936e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009372:	f7f7 f941 	bl	80005f8 <__aeabi_dmul>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4610      	mov	r0, r2
 800937c:	4619      	mov	r1, r3
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	4b5f      	ldr	r3, [pc, #380]	; (8009500 <scaraFLowScurve1+0x3a0>)
 8009384:	f7f7 fa62 	bl	800084c <__aeabi_ddiv>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7f6 ff7a 	bl	8000288 <__aeabi_dsub>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4614      	mov	r4, r2
 800939a:	461d      	mov	r5, r3
 800939c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093a4:	f7f6 ff70 	bl	8000288 <__aeabi_dsub>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093b4:	f7f7 f920 	bl	80005f8 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4620      	mov	r0, r4
 80093be:	4629      	mov	r1, r5
 80093c0:	f7f6 ff62 	bl	8000288 <__aeabi_dsub>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4614      	mov	r4, r2
 80093ca:	461d      	mov	r5, r3
 80093cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d4:	f7f6 ff58 	bl	8000288 <__aeabi_dsub>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4690      	mov	r8, r2
 80093de:	4699      	mov	r9, r3
 80093e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093e8:	f7f6 ff4e 	bl	8000288 <__aeabi_dsub>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f7 f900 	bl	80005f8 <__aeabi_dmul>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4690      	mov	r8, r2
 80093fe:	4699      	mov	r9, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800940a:	f7f6 ff3f 	bl	800028c <__adddf3>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4610      	mov	r0, r2
 8009414:	4619      	mov	r1, r3
 8009416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800941a:	f7f6 ff35 	bl	8000288 <__aeabi_dsub>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f7 f8e7 	bl	80005f8 <__aeabi_dmul>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4610      	mov	r0, r2
 8009430:	4619      	mov	r1, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009438:	f7f7 f8de 	bl	80005f8 <__aeabi_dmul>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4620      	mov	r0, r4
 8009442:	4629      	mov	r1, r5
 8009444:	f7f6 ff20 	bl	8000288 <__aeabi_dsub>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	68f9      	ldr	r1, [r7, #12]
 800944e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009452:	e04e      	b.n	80094f2 <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 8009454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800945c:	f7f7 fb3e 	bl	8000adc <__aeabi_dcmplt>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d045      	beq.n	80094f2 <scaraFLowScurve1+0x392>
 8009466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800946a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800946e:	f7f7 fb3f 	bl	8000af0 <__aeabi_dcmple>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d03c      	beq.n	80094f2 <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 800947e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009486:	f7f6 feff 	bl	8000288 <__aeabi_dsub>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4690      	mov	r8, r2
 8009490:	4699      	mov	r9, r3
 8009492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800949a:	f7f6 fef5 	bl	8000288 <__aeabi_dsub>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f7 f8a7 	bl	80005f8 <__aeabi_dmul>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4690      	mov	r8, r2
 80094b0:	4699      	mov	r9, r3
 80094b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ba:	f7f6 fee5 	bl	8000288 <__aeabi_dsub>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f7 f897 	bl	80005f8 <__aeabi_dmul>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4610      	mov	r0, r2
 80094d0:	4619      	mov	r1, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80094d8:	f7f7 f88e 	bl	80005f8 <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4620      	mov	r0, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	f7f6 fed2 	bl	800028c <__adddf3>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	68f9      	ldr	r1, [r7, #12]
 80094ee:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3730      	adds	r7, #48	; 0x30
 80094f8:	46bd      	mov	sp, r7
 80094fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80094fe:	bf00      	nop
 8009500:	40080000 	.word	0x40080000
 8009504:	00000000 	.word	0x00000000

08009508 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800950c:	b0ac      	sub	sp, #176	; 0xb0
 800950e:	af00      	add	r7, sp, #0
 8009510:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009512:	460b      	mov	r3, r1
 8009514:	ed87 0b08 	vstr	d0, [r7, #32]
 8009518:	ed87 1b06 	vstr	d1, [r7, #24]
 800951c:	ed87 2b04 	vstr	d2, [r7, #16]
 8009520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009524:	4613      	mov	r3, r2
 8009526:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 800952a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800952e:	2b04      	cmp	r3, #4
 8009530:	d118      	bne.n	8009564 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8009532:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800953e:	f7f7 f85b 	bl	80005f8 <__aeabi_dmul>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 800954a:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009556:	f7f7 f84f 	bl	80005f8 <__aeabi_dmul>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009562:	e092      	b.n	800968a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8009564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009568:	2b05      	cmp	r3, #5
 800956a:	d118      	bne.n	800959e <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 800956c:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009578:	f7f7 f83e 	bl	80005f8 <__aeabi_dmul>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8009584:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800959c:	e075      	b.n	800968a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 800959e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d118      	bne.n	80095d8 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80095a6:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095b2:	f7f7 f821 	bl	80005f8 <__aeabi_dmul>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80095be:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80095d6:	e058      	b.n	800968a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 80095d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d118      	bne.n	8009612 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 80095e0:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095ec:	f7f7 f804 	bl	80005f8 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80095f8:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009604:	f7f6 fff8 	bl	80005f8 <__aeabi_dmul>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009610:	e03b      	b.n	800968a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8009612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009616:	2b02      	cmp	r3, #2
 8009618:	d118      	bne.n	800964c <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 800961a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009626:	f7f6 ffe7 	bl	80005f8 <__aeabi_dmul>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8009632:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800963e:	f7f6 ffdb 	bl	80005f8 <__aeabi_dmul>
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800964a:	e01e      	b.n	800968a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 800964c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009650:	2b03      	cmp	r3, #3
 8009652:	d118      	bne.n	8009686 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8009654:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009660:	f7f6 ffca 	bl	80005f8 <__aeabi_dmul>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 800966c:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009678:	f7f6 ffbe 	bl	80005f8 <__aeabi_dmul>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009684:	e001      	b.n	800968a <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8009686:	2306      	movs	r3, #6
 8009688:	e2ef      	b.n	8009c6a <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 800968a:	f04f 0200 	mov.w	r2, #0
 800968e:	f04f 0300 	mov.w	r3, #0
 8009692:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 8009696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800969a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 800969e:	f04f 0200 	mov.w	r2, #0
 80096a2:	f04f 0300 	mov.w	r3, #0
 80096a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80096b6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80096ba:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80096be:	f7f7 fa17 	bl	8000af0 <__aeabi_dcmple>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <scaraInitLSPB+0x1c8>
		 dir = 1;
 80096c8:	2301      	movs	r3, #1
 80096ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80096ce:	e00c      	b.n	80096ea <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 80096d0:	23ff      	movs	r3, #255	; 0xff
 80096d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 80096d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80096e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80096ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	f040 809b 	bne.w	800982a <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80096fa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80096fe:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800970a:	f7f7 fa05 	bl	8000b18 <__aeabi_dcmpgt>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d07e      	beq.n	8009812 <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 8009714:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009718:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4610      	mov	r0, r2
 8009726:	4619      	mov	r1, r3
 8009728:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800972c:	f7f7 f88e 	bl	800084c <__aeabi_ddiv>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8009738:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800973c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009740:	f7f6 fda2 	bl	8000288 <__aeabi_dsub>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4610      	mov	r0, r2
 800974a:	4619      	mov	r1, r3
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	f7f6 fd9c 	bl	800028c <__adddf3>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4610      	mov	r0, r2
 800975a:	4619      	mov	r1, r3
 800975c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009760:	f7f7 f874 	bl	800084c <__aeabi_ddiv>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 800976c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009770:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009774:	f7f7 f9b2 	bl	8000adc <__aeabi_dcmplt>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 800977e:	2309      	movs	r3, #9
 8009780:	e273      	b.n	8009c6a <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 8009782:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009786:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800978a:	f7f7 f9b1 	bl	8000af0 <__aeabi_dcmple>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <scaraInitLSPB+0x294>
					 v_design = v_upper;
 8009794:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009798:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 800979c:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80097a8:	f7f7 f9b6 	bl	8000b18 <__aeabi_dcmpgt>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d018      	beq.n	80097e4 <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80097b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80097b6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80097ba:	f7f6 fd65 	bl	8000288 <__aeabi_dsub>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4610      	mov	r0, r2
 80097c4:	4619      	mov	r1, r3
 80097c6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80097ca:	f7f7 f83f 	bl	800084c <__aeabi_ddiv>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80097d6:	f7f6 fd57 	bl	8000288 <__aeabi_dsub>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80097e2:	e00b      	b.n	80097fc <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 80097e4:	f04f 0200 	mov.w	r2, #0
 80097e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80097f0:	f7f7 f82c 	bl	800084c <__aeabi_ddiv>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80097fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009800:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009804:	f7f7 f822 	bl	800084c <__aeabi_ddiv>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8009810:	e00b      	b.n	800982a <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 800981e:	f04f 0200 	mov.w	r2, #0
 8009822:	f04f 0300 	mov.w	r3, #0
 8009826:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 800982a:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009836:	f7f7 f96f 	bl	8000b18 <__aeabi_dcmpgt>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8196 	beq.w	8009b6e <scaraInitLSPB+0x666>
 8009842:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800984e:	f7f7 f963 	bl	8000b18 <__aeabi_dcmpgt>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 818a 	beq.w	8009b6e <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800985a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800985e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009862:	f7f6 fd11 	bl	8000288 <__aeabi_dsub>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	4614      	mov	r4, r2
 800986c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009870:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009874:	4620      	mov	r0, r4
 8009876:	4629      	mov	r1, r5
 8009878:	f7f6 febe 	bl	80005f8 <__aeabi_dmul>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009884:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009888:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800988c:	f7f6 feb4 	bl	80005f8 <__aeabi_dmul>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	e9c7 2300 	strd	r2, r3, [r7]
 8009898:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800989c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80098a0:	f7f6 feaa 	bl	80005f8 <__aeabi_dmul>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4614      	mov	r4, r2
 80098aa:	461d      	mov	r5, r3
 80098ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80098b0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80098b4:	f7f6 fea0 	bl	80005f8 <__aeabi_dmul>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4620      	mov	r0, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	f7f6 fce4 	bl	800028c <__adddf3>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4610      	mov	r0, r2
 80098ca:	4619      	mov	r1, r3
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098d4:	f7f6 ffba 	bl	800084c <__aeabi_ddiv>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098e0:	f7f6 fcd2 	bl	8000288 <__aeabi_dsub>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098ec:	f7f7 f900 	bl	8000af0 <__aeabi_dcmple>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d075      	beq.n	80099e2 <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80098f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80098fa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80098fe:	f7f6 fcc3 	bl	8000288 <__aeabi_dsub>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4692      	mov	sl, r2
 8009908:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800990c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009910:	4650      	mov	r0, sl
 8009912:	4659      	mov	r1, fp
 8009914:	f7f6 fe70 	bl	80005f8 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4614      	mov	r4, r2
 800991e:	461d      	mov	r5, r3
 8009920:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009924:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009928:	f7f6 fe66 	bl	80005f8 <__aeabi_dmul>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4690      	mov	r8, r2
 8009932:	4699      	mov	r9, r3
 8009934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009938:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800993c:	f7f6 fe5c 	bl	80005f8 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f6 fca0 	bl	800028c <__adddf3>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4610      	mov	r0, r2
 8009952:	4619      	mov	r1, r3
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800995c:	f7f6 ff76 	bl	800084c <__aeabi_ddiv>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fc90 	bl	800028c <__adddf3>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	ec43 2b17 	vmov	d7, r2, r3
 8009974:	eeb0 0a47 	vmov.f32	s0, s14
 8009978:	eef0 0a67 	vmov.f32	s1, s15
 800997c:	f011 fa10 	bl	801ada0 <sqrt>
 8009980:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009984:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800998c:	f7f6 fc7c 	bl	8000288 <__aeabi_dsub>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4610      	mov	r0, r2
 8009996:	4619      	mov	r1, r3
 8009998:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800999c:	f7f6 ff56 	bl	800084c <__aeabi_ddiv>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80099a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80099ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099b0:	f7f6 fc6a 	bl	8000288 <__aeabi_dsub>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4610      	mov	r0, r2
 80099ba:	4619      	mov	r1, r3
 80099bc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80099c0:	f7f6 ff44 	bl	800084c <__aeabi_ddiv>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 80099cc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80099d0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80099d4:	f7f6 fc5a 	bl	800028c <__adddf3>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80099e0:	e0e3      	b.n	8009baa <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 80099e2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80099e6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80099ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099f2:	f7f6 fc49 	bl	8000288 <__aeabi_dsub>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4610      	mov	r0, r2
 80099fc:	4619      	mov	r1, r3
 80099fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a02:	f7f6 ff23 	bl	800084c <__aeabi_ddiv>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009a0e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a12:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a16:	f7f6 fc37 	bl	8000288 <__aeabi_dsub>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4610      	mov	r0, r2
 8009a20:	4619      	mov	r1, r3
 8009a22:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a26:	f7f6 ff11 	bl	800084c <__aeabi_ddiv>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009a32:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009a36:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009a3a:	f7f6 fc25 	bl	8000288 <__aeabi_dsub>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4690      	mov	r8, r2
 8009a44:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009a48:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4649      	mov	r1, r9
 8009a50:	f7f6 fefc 	bl	800084c <__aeabi_ddiv>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4614      	mov	r4, r2
 8009a5a:	461d      	mov	r5, r3
 8009a5c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	f7f6 fc12 	bl	800028c <__adddf3>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a70:	f7f6 feec 	bl	800084c <__aeabi_ddiv>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4690      	mov	r8, r2
 8009a7a:	4699      	mov	r9, r3
 8009a7c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009a80:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009a84:	f7f6 fee2 	bl	800084c <__aeabi_ddiv>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	f04f 0000 	mov.w	r0, #0
 8009a90:	497b      	ldr	r1, [pc, #492]	; (8009c80 <scaraInitLSPB+0x778>)
 8009a92:	f7f6 fbf9 	bl	8000288 <__aeabi_dsub>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	f7f6 fdab 	bl	80005f8 <__aeabi_dmul>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4690      	mov	r8, r2
 8009aa8:	4699      	mov	r9, r3
 8009aaa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009aae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009ab2:	f7f6 fecb 	bl	800084c <__aeabi_ddiv>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	f04f 0000 	mov.w	r0, #0
 8009abe:	4970      	ldr	r1, [pc, #448]	; (8009c80 <scaraInitLSPB+0x778>)
 8009ac0:	f7f6 fbe2 	bl	8000288 <__aeabi_dsub>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4649      	mov	r1, r9
 8009acc:	f7f6 fd94 	bl	80005f8 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fbd8 	bl	800028c <__adddf3>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4614      	mov	r4, r2
 8009ae2:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8009ae4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	f7f6 fbce 	bl	800028c <__adddf3>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009af8:	f7f6 fea8 	bl	800084c <__aeabi_ddiv>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4690      	mov	r8, r2
 8009b02:	4699      	mov	r9, r3
 8009b04:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b08:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009b0c:	f7f6 fe9e 	bl	800084c <__aeabi_ddiv>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	f04f 0000 	mov.w	r0, #0
 8009b18:	4959      	ldr	r1, [pc, #356]	; (8009c80 <scaraInitLSPB+0x778>)
 8009b1a:	f7f6 fbb5 	bl	8000288 <__aeabi_dsub>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4640      	mov	r0, r8
 8009b24:	4649      	mov	r1, r9
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4690      	mov	r8, r2
 8009b30:	4699      	mov	r9, r3
 8009b32:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009b3a:	f7f6 fe87 	bl	800084c <__aeabi_ddiv>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	f04f 0000 	mov.w	r0, #0
 8009b46:	494e      	ldr	r1, [pc, #312]	; (8009c80 <scaraInitLSPB+0x778>)
 8009b48:	f7f6 fb9e 	bl	8000288 <__aeabi_dsub>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4640      	mov	r0, r8
 8009b52:	4649      	mov	r1, r9
 8009b54:	f7f6 fd50 	bl	80005f8 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	4629      	mov	r1, r5
 8009b60:	f7f6 fb94 	bl	800028c <__adddf3>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009b6c:	e01d      	b.n	8009baa <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	f04f 0300 	mov.w	r3, #0
 8009b76:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 8009b7a:	f04f 0200 	mov.w	r2, #0
 8009b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b82:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009b86:	f7f6 fe61 	bl	800084c <__aeabi_ddiv>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 8009b92:	f04f 0200 	mov.w	r2, #0
 8009b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b9a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009b9e:	f7f6 fe55 	bl	800084c <__aeabi_ddiv>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8009baa:	a333      	add	r3, pc, #204	; (adr r3, 8009c78 <scaraInitLSPB+0x770>)
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009bb4:	f7f6 fe4a 	bl	800084c <__aeabi_ddiv>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	f7f7 f812 	bl	8000be8 <__aeabi_d2f>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	ee00 3a10 	vmov	s0, r3
 8009bca:	f011 f8a5 	bl	801ad18 <ceilf>
 8009bce:	eef0 7a40 	vmov.f32	s15, s0
 8009bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bd6:	ee17 3a90 	vmov	r3, s15
 8009bda:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009be2:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8009be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009be6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009bea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 8009bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bf0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009bf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8009bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bfa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009bfe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8009c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c04:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009c08:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8009c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009c12:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8009c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c18:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009c1c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8009c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c22:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009c26:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8009c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c2c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009c30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 8009c34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 8009c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c44:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c4c:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009c5a:	f7f6 fb15 	bl	8000288 <__aeabi_dsub>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c64:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	37b0      	adds	r7, #176	; 0xb0
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c74:	f3af 8000 	nop.w
 8009c78:	40000000 	.word	0x40000000
 8009c7c:	3f847ae1 	.word	0x3f847ae1
 8009c80:	3ff00000 	.word	0x3ff00000
 8009c84:	00000000 	.word	0x00000000
 8009c88:	405c2000 	.word	0x405c2000
 8009c8c:	14000000 	.word	0x14000000
 8009c90:	4000f6f0 	.word	0x4000f6f0
 8009c94:	6b259425 	.word	0x6b259425
 8009c98:	40069b91 	.word	0x40069b91
 8009c9c:	d2f1a9fc 	.word	0xd2f1a9fc
 8009ca0:	3f50624d 	.word	0x3f50624d
 8009ca4:	9abcaf48 	.word	0x9abcaf48
 8009ca8:	3e7ad7f2 	.word	0x3e7ad7f2

08009cac <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009cac:	b480      	push	{r7}
 8009cae:	b089      	sub	sp, #36	; 0x24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	61f8      	str	r0, [r7, #28]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	ed87 0b04 	vstr	d0, [r7, #16]
 8009cba:	ed87 1b02 	vstr	d1, [r7, #8]
 8009cbe:	ed87 2b00 	vstr	d2, [r7]
 8009cc2:	76fb      	strb	r3, [r7, #27]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3724      	adds	r7, #36	; 0x24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009cd8:	b082      	sub	sp, #8
 8009cda:	b5b0      	push	{r4, r5, r7, lr}
 8009cdc:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009ce0:	af2e      	add	r7, sp, #184	; 0xb8
 8009ce2:	f107 0108 	add.w	r1, r7, #8
 8009ce6:	ed81 0b00 	vstr	d0, [r1]
 8009cea:	1d39      	adds	r1, r7, #4
 8009cec:	6008      	str	r0, [r1, #0]
 8009cee:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8009cf2:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009cf6:	f107 0118 	add.w	r1, r7, #24
 8009cfa:	f107 0308 	add.w	r3, r7, #8
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009d06:	4b92      	ldr	r3, [pc, #584]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f040 81a1 	bne.w	800a052 <scaraFlowDuty+0x37a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009d10:	4b8f      	ldr	r3, [pc, #572]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d12:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d12b      	bne.n	8009d72 <scaraFlowDuty+0x9a>

			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009d1a:	f107 0308 	add.w	r3, r7, #8
 8009d1e:	ed93 0b00 	vldr	d0, [r3]
 8009d22:	488c      	ldr	r0, [pc, #560]	; (8009f54 <scaraFlowDuty+0x27c>)
 8009d24:	f7fe ffae 	bl	8008c84 <scaraFlowLSPB1>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009d2e:	4b88      	ldr	r3, [pc, #544]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d30:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8009d34:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009d38:	4b85      	ldr	r3, [pc, #532]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d3a:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8009d3e:	f107 0110 	add.w	r1, r7, #16
 8009d42:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009d46:	4b82      	ldr	r3, [pc, #520]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d48:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d54:	f7f6 fc50 	bl	80005f8 <__aeabi_dmul>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009d60:	4b7b      	ldr	r3, [pc, #492]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d62:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009d66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009d70:	e099      	b.n	8009ea6 <scaraFlowDuty+0x1ce>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009d72:	4b77      	ldr	r3, [pc, #476]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d74:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d126      	bne.n	8009dca <scaraFlowDuty+0xf2>

			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8009d7c:	f107 0308 	add.w	r3, r7, #8
 8009d80:	ed93 0b00 	vldr	d0, [r3]
 8009d84:	4874      	ldr	r0, [pc, #464]	; (8009f58 <scaraFlowDuty+0x280>)
 8009d86:	f7ff f9eb 	bl	8009160 <scaraFLowScurve1>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009d90:	4b6f      	ldr	r3, [pc, #444]	; (8009f50 <scaraFlowDuty+0x278>)
 8009d92:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8009d96:	f107 0110 	add.w	r1, r7, #16
 8009d9a:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009d9e:	4b6c      	ldr	r3, [pc, #432]	; (8009f50 <scaraFlowDuty+0x278>)
 8009da0:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009da4:	f107 0108 	add.w	r1, r7, #8
 8009da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009db8:	4b65      	ldr	r3, [pc, #404]	; (8009f50 <scaraFlowDuty+0x278>)
 8009dba:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009dbe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009dc8:	e06d      	b.n	8009ea6 <scaraFlowDuty+0x1ce>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009dca:	4b61      	ldr	r3, [pc, #388]	; (8009f50 <scaraFlowDuty+0x278>)
 8009dcc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d127      	bne.n	8009e24 <scaraFlowDuty+0x14c>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009dd4:	4b5e      	ldr	r3, [pc, #376]	; (8009f50 <scaraFlowDuty+0x278>)
 8009dd6:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009dda:	f107 0308 	add.w	r3, r7, #8
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	f7f6 fc09 	bl	80005f8 <__aeabi_dmul>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	f107 0110 	add.w	r1, r7, #16
 8009dee:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009df2:	4b57      	ldr	r3, [pc, #348]	; (8009f50 <scaraFlowDuty+0x278>)
 8009df4:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009df8:	f107 0108 	add.w	r1, r7, #8
 8009dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e00:	f7f6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009e0c:	4b50      	ldr	r3, [pc, #320]	; (8009f50 <scaraFlowDuty+0x278>)
 8009e0e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009e12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009e22:	e040      	b.n	8009ea6 <scaraFlowDuty+0x1ce>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8009e24:	4b4a      	ldr	r3, [pc, #296]	; (8009f50 <scaraFlowDuty+0x278>)
 8009e26:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d139      	bne.n	8009ea2 <scaraFlowDuty+0x1ca>
			scaraFlowGCODE(&s, time);
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	f107 0210 	add.w	r2, r7, #16
 8009e36:	ed93 0b00 	vldr	d0, [r3]
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	f7ff f8b4 	bl	8008fa8 <scaraFlowGCODE>
			s -= accumulate_s;
 8009e40:	f107 0310 	add.w	r3, r7, #16
 8009e44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e48:	4b44      	ldr	r3, [pc, #272]	; (8009f5c <scaraFlowDuty+0x284>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fa1b 	bl	8000288 <__aeabi_dsub>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	f107 0110 	add.w	r1, r7, #16
 8009e5a:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009e5e:	4b3c      	ldr	r3, [pc, #240]	; (8009f50 <scaraFlowDuty+0x278>)
 8009e60:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009e64:	4b3e      	ldr	r3, [pc, #248]	; (8009f60 <scaraFlowDuty+0x288>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f107 0108 	add.w	r1, r7, #8
 8009e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e72:	f7f6 fa09 	bl	8000288 <__aeabi_dsub>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	f7f6 fbbb 	bl	80005f8 <__aeabi_dmul>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009e8a:	4b31      	ldr	r3, [pc, #196]	; (8009f50 <scaraFlowDuty+0x278>)
 8009e8c:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009e90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009ea0:	e001      	b.n	8009ea6 <scaraFlowDuty+0x1ce>
//			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
//			status1 = SCARA_STATUS_OK;
//			status2 = SCARA_STATUS_OK;
//		}
		else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009ea2:	2305      	movs	r3, #5
 8009ea4:	e2c1      	b.n	800a42a <scaraFlowDuty+0x752>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009ea6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <scaraFlowDuty+0x1dc>
			return status1;
 8009eae:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009eb2:	e2ba      	b.n	800a42a <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009eb4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <scaraFlowDuty+0x1ea>
			return status2;
 8009ebc:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009ec0:	e2b3      	b.n	800a42a <scaraFlowDuty+0x752>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009ec2:	4b23      	ldr	r3, [pc, #140]	; (8009f50 <scaraFlowDuty+0x278>)
 8009ec4:	7a1b      	ldrb	r3, [r3, #8]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d11d      	bne.n	8009f06 <scaraFlowDuty+0x22e>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009eca:	f107 0310 	add.w	r3, r7, #16
 8009ece:	ed93 7b00 	vldr	d7, [r3]
 8009ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8009ed6:	eef0 0a67 	vmov.f32	s1, s15
 8009eda:	4822      	ldr	r0, [pc, #136]	; (8009f64 <scaraFlowDuty+0x28c>)
 8009edc:	f000 fab0 	bl	800a440 <scaraFlowLine>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8009ee6:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <scaraFlowDuty+0x278>)
 8009ee8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009eec:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <scaraFlowDuty+0x278>)
 8009ef2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009ef6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <scaraFlowDuty+0x278>)
 8009efc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009f00:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009f04:	e032      	b.n	8009f6c <scaraFlowDuty+0x294>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8009f06:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <scaraFlowDuty+0x278>)
 8009f08:	7a1b      	ldrb	r3, [r3, #8]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d11d      	bne.n	8009f4a <scaraFlowDuty+0x272>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009f0e:	f107 0310 	add.w	r3, r7, #16
 8009f12:	ed93 7b00 	vldr	d7, [r3]
 8009f16:	eeb0 0a47 	vmov.f32	s0, s14
 8009f1a:	eef0 0a67 	vmov.f32	s1, s15
 8009f1e:	4812      	ldr	r0, [pc, #72]	; (8009f68 <scaraFlowDuty+0x290>)
 8009f20:	f000 fb16 	bl	800a550 <scaraFlowCircle>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8009f2a:	4b09      	ldr	r3, [pc, #36]	; (8009f50 <scaraFlowDuty+0x278>)
 8009f2c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8009f30:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 8009f34:	4b06      	ldr	r3, [pc, #24]	; (8009f50 <scaraFlowDuty+0x278>)
 8009f36:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8009f3a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 8009f3e:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <scaraFlowDuty+0x278>)
 8009f40:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8009f44:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009f48:	e010      	b.n	8009f6c <scaraFlowDuty+0x294>
//			x = myDUTY.task.path.line.x_current;
//			y = myDUTY.task.path.line.y_current;
//			z = myDUTY.task.path.line.z0;
//		}
		else {
			return SCARA_STATUS_ERROR_TASK;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e26d      	b.n	800a42a <scaraFlowDuty+0x752>
 8009f4e:	bf00      	nop
 8009f50:	2000ff40 	.word	0x2000ff40
 8009f54:	20010058 	.word	0x20010058
 8009f58:	200100d8 	.word	0x200100d8
 8009f5c:	200085d8 	.word	0x200085d8
 8009f60:	2000fd48 	.word	0x2000fd48
 8009f64:	2000ff50 	.word	0x2000ff50
 8009f68:	2000ffc0 	.word	0x2000ffc0
		}

		positionCompute.x 		= x;
 8009f6c:	f107 0118 	add.w	r1, r7, #24
 8009f70:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009f74:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 8009f78:	f107 0118 	add.w	r1, r7, #24
 8009f7c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009f80:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 8009f84:	f107 0118 	add.w	r1, r7, #24
 8009f88:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8009f8c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8009f90:	4bad      	ldr	r3, [pc, #692]	; (800a248 <scaraFlowDuty+0x570>)
 8009f92:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8009f96:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f9a:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7f6 fac0 	bl	8000524 <__aeabi_i2d>
 8009fa4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009fa8:	f7f6 fb26 	bl	80005f8 <__aeabi_dmul>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f7f6 f96a 	bl	800028c <__adddf3>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	f107 0118 	add.w	r1, r7, #24
 8009fc0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	f107 0118 	add.w	r1, r7, #24
 8009fd0:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 8009fd4:	f107 0118 	add.w	r1, r7, #24
 8009fd8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009fdc:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 8009fe0:	f107 0118 	add.w	r1, r7, #24
 8009fe4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8009fe8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8009fec:	f107 0118 	add.w	r1, r7, #24
 8009ff0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009ff4:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8009ff8:	4b93      	ldr	r3, [pc, #588]	; (800a248 <scaraFlowDuty+0x570>)
 8009ffa:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	f107 0118 	add.w	r1, r7, #24
 800a006:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a00a:	f107 0118 	add.w	r1, r7, #24
 800a00e:	f107 0308 	add.w	r3, r7, #8
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a01a:	f107 0418 	add.w	r4, r7, #24
 800a01e:	4668      	mov	r0, sp
 800a020:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a024:	22b8      	movs	r2, #184	; 0xb8
 800a026:	4619      	mov	r1, r3
 800a028:	f00c f8aa 	bl	8016180 <memcpy>
 800a02c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a030:	cb0c      	ldmia	r3, {r2, r3}
 800a032:	4620      	mov	r0, r4
 800a034:	f7fb fbc0 	bl	80057b8 <kinematicInverse>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <scaraFlowDuty+0x36a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a03e:	2307      	movs	r3, #7
 800a040:	e1f3      	b.n	800a42a <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a042:	f107 0118 	add.w	r1, r7, #24
 800a046:	1d3b      	adds	r3, r7, #4
 800a048:	22c0      	movs	r2, #192	; 0xc0
 800a04a:	6818      	ldr	r0, [r3, #0]
 800a04c:	f00c f898 	bl	8016180 <memcpy>
 800a050:	e1ea      	b.n	800a428 <scaraFlowDuty+0x750>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a052:	4b7d      	ldr	r3, [pc, #500]	; (800a248 <scaraFlowDuty+0x570>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b01      	cmp	r3, #1
 800a058:	f040 81e4 	bne.w	800a424 <scaraFlowDuty+0x74c>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a05c:	4b7a      	ldr	r3, [pc, #488]	; (800a248 <scaraFlowDuty+0x570>)
 800a05e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a062:	2b00      	cmp	r3, #0
 800a064:	d174      	bne.n	800a150 <scaraFlowDuty+0x478>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 800a066:	f107 0308 	add.w	r3, r7, #8
 800a06a:	ed93 0b00 	vldr	d0, [r3]
 800a06e:	4877      	ldr	r0, [pc, #476]	; (800a24c <scaraFlowDuty+0x574>)
 800a070:	f7fe fe08 	bl	8008c84 <scaraFlowLSPB1>
 800a074:	4603      	mov	r3, r0
 800a076:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 800a07a:	f107 0308 	add.w	r3, r7, #8
 800a07e:	ed93 0b00 	vldr	d0, [r3]
 800a082:	4873      	ldr	r0, [pc, #460]	; (800a250 <scaraFlowDuty+0x578>)
 800a084:	f7fe fdfe 	bl	8008c84 <scaraFlowLSPB1>
 800a088:	4603      	mov	r3, r0
 800a08a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 800a08e:	f107 0308 	add.w	r3, r7, #8
 800a092:	ed93 0b00 	vldr	d0, [r3]
 800a096:	486f      	ldr	r0, [pc, #444]	; (800a254 <scaraFlowDuty+0x57c>)
 800a098:	f7fe fdf4 	bl	8008c84 <scaraFlowLSPB1>
 800a09c:	4603      	mov	r3, r0
 800a09e:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 800a0a2:	f107 0308 	add.w	r3, r7, #8
 800a0a6:	ed93 0b00 	vldr	d0, [r3]
 800a0aa:	486b      	ldr	r0, [pc, #428]	; (800a258 <scaraFlowDuty+0x580>)
 800a0ac:	f7fe fdea 	bl	8008c84 <scaraFlowLSPB1>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a0b6:	4b64      	ldr	r3, [pc, #400]	; (800a248 <scaraFlowDuty+0x570>)
 800a0b8:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a0bc:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a0c0:	4b61      	ldr	r3, [pc, #388]	; (800a248 <scaraFlowDuty+0x570>)
 800a0c2:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 800a0c6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a0ca:	4b5f      	ldr	r3, [pc, #380]	; (800a248 <scaraFlowDuty+0x570>)
 800a0cc:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 800a0d0:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a0d4:	4b5c      	ldr	r3, [pc, #368]	; (800a248 <scaraFlowDuty+0x570>)
 800a0d6:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 800a0da:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a0de:	4b5a      	ldr	r3, [pc, #360]	; (800a248 <scaraFlowDuty+0x570>)
 800a0e0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a0ec:	4b56      	ldr	r3, [pc, #344]	; (800a248 <scaraFlowDuty+0x570>)
 800a0ee:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a0fa:	4b53      	ldr	r3, [pc, #332]	; (800a248 <scaraFlowDuty+0x570>)
 800a0fc:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a108:	4b4f      	ldr	r3, [pc, #316]	; (800a248 <scaraFlowDuty+0x570>)
 800a10a:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a116:	4b4c      	ldr	r3, [pc, #304]	; (800a248 <scaraFlowDuty+0x570>)
 800a118:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a124:	4b48      	ldr	r3, [pc, #288]	; (800a248 <scaraFlowDuty+0x570>)
 800a126:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a132:	4b45      	ldr	r3, [pc, #276]	; (800a248 <scaraFlowDuty+0x570>)
 800a134:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a140:	4b41      	ldr	r3, [pc, #260]	; (800a248 <scaraFlowDuty+0x570>)
 800a142:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a14e:	e05f      	b.n	800a210 <scaraFlowDuty+0x538>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800a150:	4b3d      	ldr	r3, [pc, #244]	; (800a248 <scaraFlowDuty+0x570>)
 800a152:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a156:	2b01      	cmp	r3, #1
 800a158:	d158      	bne.n	800a20c <scaraFlowDuty+0x534>
			status1 = scaraFLowScurve1(&(myDUTY.joint.trajectory[0].scurve), time);
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	ed93 0b00 	vldr	d0, [r3]
 800a162:	483e      	ldr	r0, [pc, #248]	; (800a25c <scaraFlowDuty+0x584>)
 800a164:	f7fe fffc 	bl	8009160 <scaraFLowScurve1>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve1(&(myDUTY.joint.trajectory[1].scurve), time);
 800a16e:	f107 0308 	add.w	r3, r7, #8
 800a172:	ed93 0b00 	vldr	d0, [r3]
 800a176:	483a      	ldr	r0, [pc, #232]	; (800a260 <scaraFlowDuty+0x588>)
 800a178:	f7fe fff2 	bl	8009160 <scaraFLowScurve1>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve1(&(myDUTY.joint.trajectory[2].scurve), time);
 800a182:	f107 0308 	add.w	r3, r7, #8
 800a186:	ed93 0b00 	vldr	d0, [r3]
 800a18a:	4836      	ldr	r0, [pc, #216]	; (800a264 <scaraFlowDuty+0x58c>)
 800a18c:	f7fe ffe8 	bl	8009160 <scaraFLowScurve1>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve1(&(myDUTY.joint.trajectory[3].scurve), time);
 800a196:	f107 0308 	add.w	r3, r7, #8
 800a19a:	ed93 0b00 	vldr	d0, [r3]
 800a19e:	4832      	ldr	r0, [pc, #200]	; (800a268 <scaraFlowDuty+0x590>)
 800a1a0:	f7fe ffde 	bl	8009160 <scaraFLowScurve1>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 800a1aa:	4b27      	ldr	r3, [pc, #156]	; (800a248 <scaraFlowDuty+0x570>)
 800a1ac:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800a1b0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 800a1b4:	4b24      	ldr	r3, [pc, #144]	; (800a248 <scaraFlowDuty+0x570>)
 800a1b6:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800a1ba:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800a1be:	4b22      	ldr	r3, [pc, #136]	; (800a248 <scaraFlowDuty+0x570>)
 800a1c0:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 800a1c4:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 800a1c8:	4b1f      	ldr	r3, [pc, #124]	; (800a248 <scaraFlowDuty+0x570>)
 800a1ca:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800a1ce:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 800a1d2:	4b1d      	ldr	r3, [pc, #116]	; (800a248 <scaraFlowDuty+0x570>)
 800a1d4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800a1e0:	4b19      	ldr	r3, [pc, #100]	; (800a248 <scaraFlowDuty+0x570>)
 800a1e2:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800a1ee:	4b16      	ldr	r3, [pc, #88]	; (800a248 <scaraFlowDuty+0x570>)
 800a1f0:	f603 0368 	addw	r3, r3, #2152	; 0x868
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800a1fc:	4b12      	ldr	r3, [pc, #72]	; (800a248 <scaraFlowDuty+0x570>)
 800a1fe:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 800a20a:	e001      	b.n	800a210 <scaraFlowDuty+0x538>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800a20c:	2305      	movs	r3, #5
 800a20e:	e10c      	b.n	800a42a <scaraFlowDuty+0x752>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a210:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <scaraFlowDuty+0x546>
			return status1;
 800a218:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a21c:	e105      	b.n	800a42a <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a21e:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <scaraFlowDuty+0x554>
			return status2;
 800a226:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a22a:	e0fe      	b.n	800a42a <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a22c:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <scaraFlowDuty+0x562>
			return status3;
 800a234:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a238:	e0f7      	b.n	800a42a <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a23a:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d014      	beq.n	800a26c <scaraFlowDuty+0x594>
			return status4;
 800a242:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a246:	e0f0      	b.n	800a42a <scaraFlowDuty+0x752>
 800a248:	2000ff40 	.word	0x2000ff40
 800a24c:	20010360 	.word	0x20010360
 800a250:	200104e0 	.word	0x200104e0
 800a254:	20010660 	.word	0x20010660
 800a258:	200107e0 	.word	0x200107e0
 800a25c:	200103e0 	.word	0x200103e0
 800a260:	20010560 	.word	0x20010560
 800a264:	200106e0 	.word	0x200106e0
 800a268:	20010860 	.word	0x20010860
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800a26c:	4b73      	ldr	r3, [pc, #460]	; (800a43c <scaraFlowDuty+0x764>)
 800a26e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800a272:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a276:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7f6 f952 	bl	8000524 <__aeabi_i2d>
 800a280:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a284:	f7f6 f9b8 	bl	80005f8 <__aeabi_dmul>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f5 fffc 	bl	800028c <__adddf3>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	f107 0118 	add.w	r1, r7, #24
 800a29c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 800a2a0:	4b66      	ldr	r3, [pc, #408]	; (800a43c <scaraFlowDuty+0x764>)
 800a2a2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800a2a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a2aa:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7f6 f938 	bl	8000524 <__aeabi_i2d>
 800a2b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a2b8:	f7f6 f99e 	bl	80005f8 <__aeabi_dmul>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	f7f5 ffe2 	bl	800028c <__adddf3>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	f107 0118 	add.w	r1, r7, #24
 800a2d0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800a2d4:	4b59      	ldr	r3, [pc, #356]	; (800a43c <scaraFlowDuty+0x764>)
 800a2d6:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a2da:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a2de:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f6 f91e 	bl	8000524 <__aeabi_i2d>
 800a2e8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f7f5 ffc8 	bl	800028c <__adddf3>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	f107 0118 	add.w	r1, r7, #24
 800a304:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800a308:	4b4c      	ldr	r3, [pc, #304]	; (800a43c <scaraFlowDuty+0x764>)
 800a30a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800a30e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a312:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 800a316:	4618      	mov	r0, r3
 800a318:	f7f6 f904 	bl	8000524 <__aeabi_i2d>
 800a31c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a320:	f7f6 f96a 	bl	80005f8 <__aeabi_dmul>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4620      	mov	r0, r4
 800a32a:	4629      	mov	r1, r5
 800a32c:	f7f5 ffae 	bl	800028c <__adddf3>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	f107 0118 	add.w	r1, r7, #24
 800a338:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a33c:	f107 0118 	add.w	r1, r7, #24
 800a340:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800a344:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a348:	f107 0118 	add.w	r1, r7, #24
 800a34c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a350:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a354:	f107 0118 	add.w	r1, r7, #24
 800a358:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a35c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a360:	f107 0118 	add.w	r1, r7, #24
 800a364:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a368:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a36c:	f107 0118 	add.w	r1, r7, #24
 800a370:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a374:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 800a378:	f107 0118 	add.w	r1, r7, #24
 800a37c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a380:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 800a384:	f107 0118 	add.w	r1, r7, #24
 800a388:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a38c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 800a390:	f107 0118 	add.w	r1, r7, #24
 800a394:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a398:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a39c:	4b27      	ldr	r3, [pc, #156]	; (800a43c <scaraFlowDuty+0x764>)
 800a39e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f107 0118 	add.w	r1, r7, #24
 800a3aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a3ae:	f107 0118 	add.w	r1, r7, #24
 800a3b2:	f107 0308 	add.w	r3, r7, #8
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a3be:	f107 0318 	add.w	r3, r7, #24
 800a3c2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a3c6:	f107 0318 	add.w	r3, r7, #24
 800a3ca:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a3ce:	f107 0318 	add.w	r3, r7, #24
 800a3d2:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a3d6:	f107 0318 	add.w	r3, r7, #24
 800a3da:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a3de:	eeb0 3a44 	vmov.f32	s6, s8
 800a3e2:	eef0 3a64 	vmov.f32	s7, s9
 800a3e6:	eeb0 2a45 	vmov.f32	s4, s10
 800a3ea:	eef0 2a65 	vmov.f32	s5, s11
 800a3ee:	eeb0 1a46 	vmov.f32	s2, s12
 800a3f2:	eef0 1a66 	vmov.f32	s3, s13
 800a3f6:	eeb0 0a47 	vmov.f32	s0, s14
 800a3fa:	eef0 0a67 	vmov.f32	s1, s15
 800a3fe:	f000 f92f 	bl	800a660 <scaraCheckWorkSpace4>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <scaraFlowDuty+0x734>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a408:	2307      	movs	r3, #7
 800a40a:	e00e      	b.n	800a42a <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a40c:	f107 0118 	add.w	r1, r7, #24
 800a410:	1d3b      	adds	r3, r7, #4
 800a412:	22c0      	movs	r2, #192	; 0xc0
 800a414:	6818      	ldr	r0, [r3, #0]
 800a416:	f00b feb3 	bl	8016180 <memcpy>
		}
		kinematicForward(pos_Next);
 800a41a:	1d3b      	adds	r3, r7, #4
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	f7fb f8a7 	bl	8005570 <kinematicForward>
 800a422:	e001      	b.n	800a428 <scaraFlowDuty+0x750>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a424:	2302      	movs	r3, #2
 800a426:	e000      	b.n	800a42a <scaraFlowDuty+0x752>
	}

	return SCARA_STATUS_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a430:	46bd      	mov	sp, r7
 800a432:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a436:	b002      	add	sp, #8
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	2000ff40 	.word	0x2000ff40

0800a440 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 800a440:	b5b0      	push	{r4, r5, r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a452:	a33d      	add	r3, pc, #244	; (adr r3, 800a548 <scaraFlowLine+0x108>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f7f6 fb5e 	bl	8000b18 <__aeabi_dcmpgt>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d05a      	beq.n	800a518 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a46e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a472:	f7f6 f8c1 	bl	80005f8 <__aeabi_dmul>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4610      	mov	r0, r2
 800a47c:	4619      	mov	r1, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a484:	f7f6 f9e2 	bl	800084c <__aeabi_ddiv>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4620      	mov	r0, r4
 800a48e:	4629      	mov	r1, r5
 800a490:	f7f5 fefc 	bl	800028c <__adddf3>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	68f9      	ldr	r1, [r7, #12]
 800a49a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a4aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ae:	f7f6 f8a3 	bl	80005f8 <__aeabi_dmul>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a4c0:	f7f6 f9c4 	bl	800084c <__aeabi_ddiv>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7f5 fede 	bl	800028c <__adddf3>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	68f9      	ldr	r1, [r7, #12]
 800a4d6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a4e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ea:	f7f6 f885 	bl	80005f8 <__aeabi_dmul>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a4fc:	f7f6 f9a6 	bl	800084c <__aeabi_ddiv>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f5 fec0 	bl	800028c <__adddf3>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	68f9      	ldr	r1, [r7, #12]
 800a512:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800a516:	e011      	b.n	800a53c <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a52a:	68f9      	ldr	r1, [r7, #12]
 800a52c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bdb0      	pop	{r4, r5, r7, pc}
 800a546:	bf00      	nop
 800a548:	47ae147b 	.word	0x47ae147b
 800a54c:	3f847ae1 	.word	0x3f847ae1

0800a550 <scaraFlowCircle>:
	line->y_current = (a*bezier_y_coeffs[0] + b*bezier_y_coeffs[1] + c*bezier_y_coeffs[2])/(a + 2*bezier_wc*b+c);
	return SCARA_STATUS_OK;
}

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a554:	b086      	sub	sp, #24
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a564:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a568:	f7f6 f970 	bl	800084c <__aeabi_ddiv>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f993 3000 	ldrsb.w	r3, [r3]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7f5 ffc9 	bl	8000524 <__aeabi_i2d>
 800a592:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a596:	f7f6 f82f 	bl	80005f8 <__aeabi_dmul>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4650      	mov	r0, sl
 800a5a0:	4659      	mov	r1, fp
 800a5a2:	f7f5 fe73 	bl	800028c <__adddf3>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	ec43 2b17 	vmov	d7, r2, r3
 800a5ae:	eeb0 0a47 	vmov.f32	s0, s14
 800a5b2:	eef0 0a67 	vmov.f32	s1, s15
 800a5b6:	f010 fac3 	bl	801ab40 <cos>
 800a5ba:	ec53 2b10 	vmov	r2, r3, d0
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	f7f6 f819 	bl	80005f8 <__aeabi_dmul>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7f5 fe5d 	bl	800028c <__adddf3>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	68f9      	ldr	r1, [r7, #12]
 800a5d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f993 3000 	ldrsb.w	r3, [r3]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7f5 ff95 	bl	8000524 <__aeabi_i2d>
 800a5fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a5fe:	f7f5 fffb 	bl	80005f8 <__aeabi_dmul>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4650      	mov	r0, sl
 800a608:	4659      	mov	r1, fp
 800a60a:	f7f5 fe3f 	bl	800028c <__adddf3>
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	ec43 2b17 	vmov	d7, r2, r3
 800a616:	eeb0 0a47 	vmov.f32	s0, s14
 800a61a:	eef0 0a67 	vmov.f32	s1, s15
 800a61e:	f010 fb27 	bl	801ac70 <sin>
 800a622:	ec53 2b10 	vmov	r2, r3, d0
 800a626:	4640      	mov	r0, r8
 800a628:	4649      	mov	r1, r9
 800a62a:	f7f5 ffe5 	bl	80005f8 <__aeabi_dmul>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4620      	mov	r0, r4
 800a634:	4629      	mov	r1, r5
 800a636:	f7f5 fe29 	bl	800028c <__adddf3>
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3718      	adds	r7, #24
 800a656:	46bd      	mov	sp, r7
 800a658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a65c:	0000      	movs	r0, r0
	...

0800a660 <scaraCheckWorkSpace4>:

	 return SCARA_STATUS_OK;
}

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	ed87 0b06 	vstr	d0, [r7, #24]
 800a66a:	ed87 1b04 	vstr	d1, [r7, #16]
 800a66e:	ed87 2b02 	vstr	d2, [r7, #8]
 800a672:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a676:	a335      	add	r3, pc, #212	; (adr r3, 800a74c <scaraCheckWorkSpace4+0xec>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a680:	f7f6 fa2c 	bl	8000adc <__aeabi_dcmplt>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <scaraCheckWorkSpace4+0x3e>
 800a68a:	a332      	add	r3, pc, #200	; (adr r3, 800a754 <scaraCheckWorkSpace4+0xf4>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a694:	f7f6 fa40 	bl	8000b18 <__aeabi_dcmpgt>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a69e:	2307      	movs	r3, #7
 800a6a0:	e043      	b.n	800a72a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a6a2:	a32e      	add	r3, pc, #184	; (adr r3, 800a75c <scaraCheckWorkSpace4+0xfc>)
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a6ac:	f7f6 fa16 	bl	8000adc <__aeabi_dcmplt>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d109      	bne.n	800a6ca <scaraCheckWorkSpace4+0x6a>
 800a6b6:	a32b      	add	r3, pc, #172	; (adr r3, 800a764 <scaraCheckWorkSpace4+0x104>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a6c0:	f7f6 fa2a 	bl	8000b18 <__aeabi_dcmpgt>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a6ca:	2307      	movs	r3, #7
 800a6cc:	e02d      	b.n	800a72a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a6ce:	f04f 0200 	mov.w	r2, #0
 800a6d2:	f04f 0300 	mov.w	r3, #0
 800a6d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6da:	f7f6 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d109      	bne.n	800a6f8 <scaraCheckWorkSpace4+0x98>
 800a6e4:	f04f 0200 	mov.w	r2, #0
 800a6e8:	4b17      	ldr	r3, [pc, #92]	; (800a748 <scaraCheckWorkSpace4+0xe8>)
 800a6ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6ee:	f7f6 fa13 	bl	8000b18 <__aeabi_dcmpgt>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a6f8:	2307      	movs	r3, #7
 800a6fa:	e016      	b.n	800a72a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a6fc:	a30e      	add	r3, pc, #56	; (adr r3, 800a738 <scaraCheckWorkSpace4+0xd8>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a706:	f7f6 f9e9 	bl	8000adc <__aeabi_dcmplt>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <scaraCheckWorkSpace4+0xc4>
 800a710:	a30b      	add	r3, pc, #44	; (adr r3, 800a740 <scaraCheckWorkSpace4+0xe0>)
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a71a:	f7f6 f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a724:	2307      	movs	r3, #7
 800a726:	e000      	b.n	800a72a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3720      	adds	r7, #32
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	f3af 8000 	nop.w
 800a738:	a7777778 	.word	0xa7777778
 800a73c:	c0088956 	.word	0xc0088956
 800a740:	a7777778 	.word	0xa7777778
 800a744:	40088956 	.word	0x40088956
 800a748:	40590000 	.word	0x40590000
 800a74c:	74444445 	.word	0x74444445
 800a750:	bff95623 	.word	0xbff95623
 800a754:	74444445 	.word	0x74444445
 800a758:	3ff95623 	.word	0x3ff95623
 800a75c:	54cccccd 	.word	0x54cccccd
 800a760:	c003a649 	.word	0xc003a649
 800a764:	54cccccd 	.word	0x54cccccd
 800a768:	4003a649 	.word	0x4003a649
 800a76c:	00000000 	.word	0x00000000

0800a770 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a770:	b5b0      	push	{r4, r5, r7, lr}
 800a772:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a776:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a778:	f04f 0200 	mov.w	r2, #0
 800a77c:	f04f 0300 	mov.w	r3, #0
 800a780:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a784:	463b      	mov	r3, r7
 800a786:	4a36      	ldr	r2, [pc, #216]	; (800a860 <scaraTestDuty+0xf0>)
 800a788:	4618      	mov	r0, r3
 800a78a:	4611      	mov	r1, r2
 800a78c:	23c0      	movs	r3, #192	; 0xc0
 800a78e:	461a      	mov	r2, r3
 800a790:	f00b fcf6 	bl	8016180 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a794:	4b33      	ldr	r3, [pc, #204]	; (800a864 <scaraTestDuty+0xf4>)
 800a796:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a79e:	a32e      	add	r3, pc, #184	; (adr r3, 800a858 <scaraTestDuty+0xe8>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f6 f852 	bl	800084c <__aeabi_ddiv>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	ec43 2b17 	vmov	d7, r2, r3
 800a7b0:	eeb0 0a47 	vmov.f32	s0, s14
 800a7b4:	eef0 0a67 	vmov.f32	s1, s15
 800a7b8:	f010 f93e 	bl	801aa38 <ceil>
 800a7bc:	ec53 2b10 	vmov	r2, r3, d0
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	f7f6 f9c8 	bl	8000b58 <__aeabi_d2iz>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a7d4:	e032      	b.n	800a83c <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a7d6:	a320      	add	r3, pc, #128	; (adr r3, 800a858 <scaraTestDuty+0xe8>)
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a7e0:	f7f5 fd54 	bl	800028c <__adddf3>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a7ec:	463c      	mov	r4, r7
 800a7ee:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a7f2:	4668      	mov	r0, sp
 800a7f4:	f104 0308 	add.w	r3, r4, #8
 800a7f8:	22b8      	movs	r2, #184	; 0xb8
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f00b fcc0 	bl	8016180 <memcpy>
 800a800:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a804:	4628      	mov	r0, r5
 800a806:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a80a:	f7ff fa65 	bl	8009cd8 <scaraFlowDuty>
 800a80e:	4603      	mov	r3, r0
 800a810:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a814:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <scaraTestDuty+0xb2>
			return status;
 800a81c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a820:	e013      	b.n	800a84a <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a822:	463a      	mov	r2, r7
 800a824:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a828:	4611      	mov	r1, r2
 800a82a:	22c0      	movs	r2, #192	; 0xc0
 800a82c:	4618      	mov	r0, r3
 800a82e:	f00b fca7 	bl	8016180 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a832:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a836:	3301      	adds	r3, #1
 800a838:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a83c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a840:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a844:	429a      	cmp	r2, r3
 800a846:	dbc6      	blt.n	800a7d6 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a850:	46bd      	mov	sp, r7
 800a852:	bdb0      	pop	{r4, r5, r7, pc}
 800a854:	f3af 8000 	nop.w
 800a858:	40000000 	.word	0x40000000
 800a85c:	3f847ae1 	.word	0x3f847ae1
 800a860:	20010b00 	.word	0x20010b00
 800a864:	2000ff40 	.word	0x2000ff40

0800a868 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a86c:	4b03      	ldr	r3, [pc, #12]	; (800a87c <scaraSetScanFlag+0x14>)
 800a86e:	2201      	movs	r2, #1
 800a870:	70da      	strb	r2, [r3, #3]
}
 800a872:	bf00      	nop
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	20004080 	.word	0x20004080

0800a880 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a88a:	4a05      	ldr	r2, [pc, #20]	; (800a8a0 <scaraSetOutput+0x20>)
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	4618      	mov	r0, r3
 800a894:	f7fc fa84 	bl	8006da0 <lowlayer_setOutput>
}
 800a898:	bf00      	nop
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	20004080 	.word	0x20004080

0800a8a4 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a8ae:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <scaraSetDutyState+0x1c>)
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	7093      	strb	r3, [r2, #2]
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	20004080 	.word	0x20004080

0800a8c4 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a8ce:	4a04      	ldr	r2, [pc, #16]	; (800a8e0 <scaraSetMode+0x1c>)
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	7053      	strb	r3, [r2, #1]
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	20004080 	.word	0x20004080

0800a8e4 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a8ee:	4a04      	ldr	r2, [pc, #16]	; (800a900 <scaraSetMethod+0x1c>)
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	7013      	strb	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20004080 	.word	0x20004080

0800a904 <scaraUpdatePosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
}

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a90c:	22c0      	movs	r2, #192	; 0xc0
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	4803      	ldr	r0, [pc, #12]	; (800a920 <scaraUpdatePosition+0x1c>)
 800a912:	f00b fc35 	bl	8016180 <memcpy>
}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20010c80 	.word	0x20010c80

0800a924 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a924:	b480      	push	{r7}
 800a926:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a928:	4b03      	ldr	r3, [pc, #12]	; (800a938 <scaraGetMode+0x14>)
 800a92a:	785b      	ldrb	r3, [r3, #1]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20004080 	.word	0x20004080

0800a93c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <scaraGetMethod+0x14>)
 800a942:	781b      	ldrb	r3, [r3, #0]
}
 800a944:	4618      	mov	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20004080 	.word	0x20004080

0800a954 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a954:	b480      	push	{r7}
 800a956:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a958:	4b03      	ldr	r3, [pc, #12]	; (800a968 <scaraGetDutyState+0x14>)
 800a95a:	789b      	ldrb	r3, [r3, #2]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	20004080 	.word	0x20004080

0800a96c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a970:	4b03      	ldr	r3, [pc, #12]	; (800a980 <scaraIsScanLimit+0x14>)
 800a972:	78db      	ldrb	r3, [r3, #3]
}
 800a974:	4618      	mov	r0, r3
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	20004080 	.word	0x20004080

0800a984 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total < run_time) {
 800a98e:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <scaraIsFinish+0x30>)
 800a990:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a99c:	f7f6 f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <scaraIsFinish+0x26>
		return TRUE;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800a9aa:	2300      	movs	r3, #0
	}
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	2000ff40 	.word	0x2000ff40

0800a9b8 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	f107 0118 	add.w	r1, r7, #24
 800a9c6:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a9ca:	f06f 0303 	mvn.w	r3, #3
 800a9ce:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a9d4:	a35c      	add	r3, pc, #368	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f7f5 fe0d 	bl	80005f8 <__aeabi_dmul>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	f7f6 f8b7 	bl	8000b58 <__aeabi_d2iz>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	f000 f8aa 	bl	800ab50 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa00:	a351      	add	r3, pc, #324	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fdf7 	bl	80005f8 <__aeabi_dmul>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4610      	mov	r0, r2
 800aa10:	4619      	mov	r1, r3
 800aa12:	f7f6 f8a1 	bl	8000b58 <__aeabi_d2iz>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3304      	adds	r3, #4
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	4619      	mov	r1, r3
 800aa24:	f000 f894 	bl	800ab50 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800aa2c:	a346      	add	r3, pc, #280	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f7f5 fde1 	bl	80005f8 <__aeabi_dmul>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	f7f6 f88b 	bl	8000b58 <__aeabi_d2iz>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3304      	adds	r3, #4
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	4619      	mov	r1, r3
 800aa50:	f000 f87e 	bl	800ab50 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa54:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800aa58:	a33b      	add	r3, pc, #236	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fdcb 	bl	80005f8 <__aeabi_dmul>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4610      	mov	r0, r2
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f7f6 f875 	bl	8000b58 <__aeabi_d2iz>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3304      	adds	r3, #4
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	4413      	add	r3, r2
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	f000 f868 	bl	800ab50 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa80:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aa84:	a330      	add	r3, pc, #192	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f7f5 fdb5 	bl	80005f8 <__aeabi_dmul>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4610      	mov	r0, r2
 800aa94:	4619      	mov	r1, r3
 800aa96:	f7f6 f85f 	bl	8000b58 <__aeabi_d2iz>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	f000 f852 	bl	800ab50 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aaac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800aab0:	a325      	add	r3, pc, #148	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	f7f5 fd9f 	bl	80005f8 <__aeabi_dmul>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4610      	mov	r0, r2
 800aac0:	4619      	mov	r1, r3
 800aac2:	f7f6 f849 	bl	8000b58 <__aeabi_d2iz>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3304      	adds	r3, #4
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	4413      	add	r3, r2
 800aad2:	4619      	mov	r1, r3
 800aad4:	f000 f83c 	bl	800ab50 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aad8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800aadc:	a31a      	add	r3, pc, #104	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fd89 	bl	80005f8 <__aeabi_dmul>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4610      	mov	r0, r2
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7f6 f833 	bl	8000b58 <__aeabi_d2iz>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	4413      	add	r3, r2
 800aafe:	4619      	mov	r1, r3
 800ab00:	f000 f826 	bl	800ab50 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ab04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab08:	a30f      	add	r3, pc, #60	; (adr r3, 800ab48 <scaraPosition_packaging+0x190>)
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f7f5 fd73 	bl	80005f8 <__aeabi_dmul>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	4610      	mov	r0, r2
 800ab18:	4619      	mov	r1, r3
 800ab1a:	f7f6 f81d 	bl	8000b58 <__aeabi_d2iz>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3304      	adds	r3, #4
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	4413      	add	r3, r2
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	f000 f810 	bl	800ab50 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3304      	adds	r3, #4
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab3e:	b002      	add	sp, #8
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	f3af 8000 	nop.w
 800ab48:	00000000 	.word	0x00000000
 800ab4c:	412e8480 	.word	0x412e8480

0800ab50 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	121a      	asrs	r2, r3, #8
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	141a      	asrs	r2, r3, #16
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	3302      	adds	r3, #2
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	161a      	asrs	r2, r3, #24
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	3303      	adds	r3, #3
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	701a      	strb	r2, [r3, #0]
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	0000      	movs	r0, r0
 800ab94:	0000      	movs	r0, r0
	...

0800ab98 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800ab98:	b590      	push	{r4, r7, lr}
 800ab9a:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800ab9e:	af6c      	add	r7, sp, #432	; 0x1b0
 800aba0:	4602      	mov	r2, r0
 800aba2:	463b      	mov	r3, r7
 800aba4:	6019      	str	r1, [r3, #0]
 800aba6:	1dfb      	adds	r3, r7, #7
 800aba8:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	2201      	movs	r2, #1
 800abb0:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800abb2:	f107 0308 	add.w	r3, r7, #8
 800abb6:	2200      	movs	r2, #0
 800abb8:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	2201      	movs	r2, #1
 800abc0:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800abce:	463b      	mov	r3, r7
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dd03      	ble.n	800abde <scaraKeyInit1+0x46>
 800abd6:	463b      	mov	r3, r7
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b0e      	cmp	r3, #14
 800abdc:	dd01      	ble.n	800abe2 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800abde:	2306      	movs	r3, #6
 800abe0:	e2c0      	b.n	800b164 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800abe2:	1dfb      	adds	r3, r7, #7
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b07      	cmp	r3, #7
 800abe8:	f200 8298 	bhi.w	800b11c <scaraKeyInit1+0x584>
 800abec:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <scaraKeyInit1+0x5c>)
 800abee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf2:	bf00      	nop
 800abf4:	0800ac15 	.word	0x0800ac15
 800abf8:	0800acb7 	.word	0x0800acb7
 800abfc:	0800ad5d 	.word	0x0800ad5d
 800ac00:	0800adfb 	.word	0x0800adfb
 800ac04:	0800ae9d 	.word	0x0800ae9d
 800ac08:	0800af3b 	.word	0x0800af3b
 800ac0c:	0800afdd 	.word	0x0800afdd
 800ac10:	0800b07b 	.word	0x0800b07b
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800ac14:	f107 0108 	add.w	r1, r7, #8
 800ac18:	f04f 0200 	mov.w	r2, #0
 800ac1c:	f04f 0300 	mov.w	r3, #0
 800ac20:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac24:	f107 0308 	add.w	r3, r7, #8
 800ac28:	2200      	movs	r2, #0
 800ac2a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac2c:	f107 0308 	add.w	r3, r7, #8
 800ac30:	2200      	movs	r2, #0
 800ac32:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800ac34:	463b      	mov	r3, r7
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f5 fc70 	bl	8000524 <__aeabi_i2d>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	f107 0108 	add.w	r1, r7, #8
 800ac4c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac50:	f107 0108 	add.w	r1, r7, #8
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac60:	f107 0108 	add.w	r1, r7, #8
 800ac64:	f04f 0200 	mov.w	r2, #0
 800ac68:	f04f 0300 	mov.w	r3, #0
 800ac6c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac70:	f107 0108 	add.w	r1, r7, #8
 800ac74:	f04f 0200 	mov.w	r2, #0
 800ac78:	f04f 0300 	mov.w	r3, #0
 800ac7c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac80:	463b      	mov	r3, r7
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	f7f5 fc4e 	bl	8000524 <__aeabi_i2d>
 800ac88:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	f7f5 faf2 	bl	800028c <__adddf3>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	f107 0108 	add.w	r1, r7, #8
 800acb0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800acb4:	e232      	b.n	800b11c <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800acb6:	f107 0108 	add.w	r1, r7, #8
 800acba:	f04f 0200 	mov.w	r2, #0
 800acbe:	f04f 0300 	mov.w	r3, #0
 800acc2:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acc6:	f107 0308 	add.w	r3, r7, #8
 800acca:	2200      	movs	r2, #0
 800accc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800acce:	f107 0308 	add.w	r3, r7, #8
 800acd2:	2200      	movs	r2, #0
 800acd4:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800acd6:	463b      	mov	r3, r7
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	4613      	mov	r3, r2
 800acdc:	079b      	lsls	r3, r3, #30
 800acde:	1a9b      	subs	r3, r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	1a9b      	subs	r3, r3, r2
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7f5 fc1d 	bl	8000524 <__aeabi_i2d>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	f107 0108 	add.w	r1, r7, #8
 800acf2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800acf6:	f107 0108 	add.w	r1, r7, #8
 800acfa:	f04f 0200 	mov.w	r2, #0
 800acfe:	f04f 0300 	mov.w	r3, #0
 800ad02:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ad06:	f107 0108 	add.w	r1, r7, #8
 800ad0a:	f04f 0200 	mov.w	r2, #0
 800ad0e:	f04f 0300 	mov.w	r3, #0
 800ad12:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad16:	f107 0108 	add.w	r1, r7, #8
 800ad1a:	f04f 0200 	mov.w	r2, #0
 800ad1e:	f04f 0300 	mov.w	r3, #0
 800ad22:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad26:	463b      	mov	r3, r7
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f7f5 fbfb 	bl	8000524 <__aeabi_i2d>
 800ad2e:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4610      	mov	r0, r2
 800ad40:	4619      	mov	r1, r3
 800ad42:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	f7f5 fa9f 	bl	800028c <__adddf3>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	f107 0108 	add.w	r1, r7, #8
 800ad56:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ad5a:	e1df      	b.n	800b11c <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800ad5c:	f107 0108 	add.w	r1, r7, #8
 800ad60:	f04f 0200 	mov.w	r2, #0
 800ad64:	f04f 0300 	mov.w	r3, #0
 800ad68:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad6c:	f107 0308 	add.w	r3, r7, #8
 800ad70:	2200      	movs	r2, #0
 800ad72:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad74:	f107 0308 	add.w	r3, r7, #8
 800ad78:	2200      	movs	r2, #0
 800ad7a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad7c:	f107 0108 	add.w	r1, r7, #8
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	f04f 0300 	mov.w	r3, #0
 800ad88:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ad8c:	463b      	mov	r3, r7
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7f5 fbc4 	bl	8000524 <__aeabi_i2d>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	f107 0108 	add.w	r1, r7, #8
 800ada4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ada8:	f107 0108 	add.w	r1, r7, #8
 800adac:	f04f 0200 	mov.w	r2, #0
 800adb0:	f04f 0300 	mov.w	r3, #0
 800adb4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800adb8:	f107 0108 	add.w	r1, r7, #8
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	f04f 0300 	mov.w	r3, #0
 800adc4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800adc8:	463b      	mov	r3, r7
 800adca:	6818      	ldr	r0, [r3, #0]
 800adcc:	f7f5 fbaa 	bl	8000524 <__aeabi_i2d>
 800add0:	a3e7      	add	r3, pc, #924	; (adr r3, 800b170 <scaraKeyInit1+0x5d8>)
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	f7f5 fc0f 	bl	80005f8 <__aeabi_dmul>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4610      	mov	r0, r2
 800ade0:	4619      	mov	r1, r3
 800ade2:	a3e5      	add	r3, pc, #916	; (adr r3, 800b178 <scaraKeyInit1+0x5e0>)
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f7f5 fa50 	bl	800028c <__adddf3>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	f107 0108 	add.w	r1, r7, #8
 800adf4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800adf8:	e190      	b.n	800b11c <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800adfa:	f107 0108 	add.w	r1, r7, #8
 800adfe:	f04f 0200 	mov.w	r2, #0
 800ae02:	f04f 0300 	mov.w	r3, #0
 800ae06:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae0a:	f107 0308 	add.w	r3, r7, #8
 800ae0e:	2200      	movs	r2, #0
 800ae10:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae12:	f107 0308 	add.w	r3, r7, #8
 800ae16:	2200      	movs	r2, #0
 800ae18:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae1a:	f107 0108 	add.w	r1, r7, #8
 800ae1e:	f04f 0200 	mov.w	r2, #0
 800ae22:	f04f 0300 	mov.w	r3, #0
 800ae26:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	079b      	lsls	r3, r3, #30
 800ae32:	1a9b      	subs	r3, r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	1a9b      	subs	r3, r3, r2
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7f5 fb73 	bl	8000524 <__aeabi_i2d>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	f107 0108 	add.w	r1, r7, #8
 800ae46:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ae4a:	f107 0108 	add.w	r1, r7, #8
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	f04f 0300 	mov.w	r3, #0
 800ae56:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ae5a:	f107 0108 	add.w	r1, r7, #8
 800ae5e:	f04f 0200 	mov.w	r2, #0
 800ae62:	f04f 0300 	mov.w	r3, #0
 800ae66:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae6a:	463b      	mov	r3, r7
 800ae6c:	6818      	ldr	r0, [r3, #0]
 800ae6e:	f7f5 fb59 	bl	8000524 <__aeabi_i2d>
 800ae72:	a3bf      	add	r3, pc, #764	; (adr r3, 800b170 <scaraKeyInit1+0x5d8>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	f7f5 fbbe 	bl	80005f8 <__aeabi_dmul>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4610      	mov	r0, r2
 800ae82:	4619      	mov	r1, r3
 800ae84:	a3bc      	add	r3, pc, #752	; (adr r3, 800b178 <scaraKeyInit1+0x5e0>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 f9ff 	bl	800028c <__adddf3>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	f107 0108 	add.w	r1, r7, #8
 800ae96:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ae9a:	e13f      	b.n	800b11c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ae9c:	f107 0108 	add.w	r1, r7, #8
 800aea0:	f04f 0200 	mov.w	r2, #0
 800aea4:	f04f 0300 	mov.w	r3, #0
 800aea8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aeac:	f107 0308 	add.w	r3, r7, #8
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aeb4:	f107 0308 	add.w	r3, r7, #8
 800aeb8:	2200      	movs	r2, #0
 800aeba:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aebc:	f107 0108 	add.w	r1, r7, #8
 800aec0:	f04f 0200 	mov.w	r2, #0
 800aec4:	f04f 0300 	mov.w	r3, #0
 800aec8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aecc:	f107 0108 	add.w	r1, r7, #8
 800aed0:	f04f 0200 	mov.w	r2, #0
 800aed4:	f04f 0300 	mov.w	r3, #0
 800aed8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800aedc:	463b      	mov	r3, r7
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f5 fb1c 	bl	8000524 <__aeabi_i2d>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	f107 0108 	add.w	r1, r7, #8
 800aef4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aef8:	f107 0108 	add.w	r1, r7, #8
 800aefc:	f04f 0200 	mov.w	r2, #0
 800af00:	f04f 0300 	mov.w	r3, #0
 800af04:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800af08:	463b      	mov	r3, r7
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	f7f5 fb0a 	bl	8000524 <__aeabi_i2d>
 800af10:	a397      	add	r3, pc, #604	; (adr r3, 800b170 <scaraKeyInit1+0x5d8>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	f7f5 fb6f 	bl	80005f8 <__aeabi_dmul>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4610      	mov	r0, r2
 800af20:	4619      	mov	r1, r3
 800af22:	a395      	add	r3, pc, #596	; (adr r3, 800b178 <scaraKeyInit1+0x5e0>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 f9b0 	bl	800028c <__adddf3>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800af38:	e0f0      	b.n	800b11c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800af3a:	f107 0108 	add.w	r1, r7, #8
 800af3e:	f04f 0200 	mov.w	r2, #0
 800af42:	f04f 0300 	mov.w	r3, #0
 800af46:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800af4a:	f107 0308 	add.w	r3, r7, #8
 800af4e:	2200      	movs	r2, #0
 800af50:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800af52:	f107 0308 	add.w	r3, r7, #8
 800af56:	2200      	movs	r2, #0
 800af58:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800af5a:	f107 0108 	add.w	r1, r7, #8
 800af5e:	f04f 0200 	mov.w	r2, #0
 800af62:	f04f 0300 	mov.w	r3, #0
 800af66:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800af6a:	f107 0108 	add.w	r1, r7, #8
 800af6e:	f04f 0200 	mov.w	r2, #0
 800af72:	f04f 0300 	mov.w	r3, #0
 800af76:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800af7a:	463b      	mov	r3, r7
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	4613      	mov	r3, r2
 800af80:	079b      	lsls	r3, r3, #30
 800af82:	1a9b      	subs	r3, r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	4618      	mov	r0, r3
 800af8a:	f7f5 facb 	bl	8000524 <__aeabi_i2d>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	f107 0108 	add.w	r1, r7, #8
 800af96:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800af9a:	f107 0108 	add.w	r1, r7, #8
 800af9e:	f04f 0200 	mov.w	r2, #0
 800afa2:	f04f 0300 	mov.w	r3, #0
 800afa6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800afaa:	463b      	mov	r3, r7
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	f7f5 fab9 	bl	8000524 <__aeabi_i2d>
 800afb2:	a36f      	add	r3, pc, #444	; (adr r3, 800b170 <scaraKeyInit1+0x5d8>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 fb1e 	bl	80005f8 <__aeabi_dmul>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4610      	mov	r0, r2
 800afc2:	4619      	mov	r1, r3
 800afc4:	a36c      	add	r3, pc, #432	; (adr r3, 800b178 <scaraKeyInit1+0x5e0>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f7f5 f95f 	bl	800028c <__adddf3>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	f107 0108 	add.w	r1, r7, #8
 800afd6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800afda:	e09f      	b.n	800b11c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800afdc:	f107 0108 	add.w	r1, r7, #8
 800afe0:	f04f 0200 	mov.w	r2, #0
 800afe4:	f04f 0300 	mov.w	r3, #0
 800afe8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	2200      	movs	r2, #0
 800aff2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	2200      	movs	r2, #0
 800affa:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800affc:	f107 0108 	add.w	r1, r7, #8
 800b000:	f04f 0200 	mov.w	r2, #0
 800b004:	f04f 0300 	mov.w	r3, #0
 800b008:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b00c:	f107 0108 	add.w	r1, r7, #8
 800b010:	f04f 0200 	mov.w	r2, #0
 800b014:	f04f 0300 	mov.w	r3, #0
 800b018:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b01c:	f107 0108 	add.w	r1, r7, #8
 800b020:	f04f 0200 	mov.w	r2, #0
 800b024:	f04f 0300 	mov.w	r3, #0
 800b028:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800b02c:	463b      	mov	r3, r7
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	4618      	mov	r0, r3
 800b038:	f7f5 fa74 	bl	8000524 <__aeabi_i2d>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	f107 0108 	add.w	r1, r7, #8
 800b044:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b048:	463b      	mov	r3, r7
 800b04a:	6818      	ldr	r0, [r3, #0]
 800b04c:	f7f5 fa6a 	bl	8000524 <__aeabi_i2d>
 800b050:	a347      	add	r3, pc, #284	; (adr r3, 800b170 <scaraKeyInit1+0x5d8>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 facf 	bl	80005f8 <__aeabi_dmul>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4610      	mov	r0, r2
 800b060:	4619      	mov	r1, r3
 800b062:	a345      	add	r3, pc, #276	; (adr r3, 800b178 <scaraKeyInit1+0x5e0>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f7f5 f910 	bl	800028c <__adddf3>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	f107 0108 	add.w	r1, r7, #8
 800b074:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b078:	e050      	b.n	800b11c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800b07a:	f107 0108 	add.w	r1, r7, #8
 800b07e:	f04f 0200 	mov.w	r2, #0
 800b082:	f04f 0300 	mov.w	r3, #0
 800b086:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b08a:	f107 0308 	add.w	r3, r7, #8
 800b08e:	2200      	movs	r2, #0
 800b090:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b092:	f107 0308 	add.w	r3, r7, #8
 800b096:	2200      	movs	r2, #0
 800b098:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b09a:	f107 0108 	add.w	r1, r7, #8
 800b09e:	f04f 0200 	mov.w	r2, #0
 800b0a2:	f04f 0300 	mov.w	r3, #0
 800b0a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b0aa:	f107 0108 	add.w	r1, r7, #8
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	f04f 0300 	mov.w	r3, #0
 800b0b6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b0ba:	f107 0108 	add.w	r1, r7, #8
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	f04f 0300 	mov.w	r3, #0
 800b0c6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800b0ca:	463b      	mov	r3, r7
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	079b      	lsls	r3, r3, #30
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	1a9b      	subs	r3, r3, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7f5 fa23 	bl	8000524 <__aeabi_i2d>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	f107 0108 	add.w	r1, r7, #8
 800b0e6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f7f5 fa19 	bl	8000524 <__aeabi_i2d>
 800b0f2:	a31f      	add	r3, pc, #124	; (adr r3, 800b170 <scaraKeyInit1+0x5d8>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f7f5 fa7e 	bl	80005f8 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4610      	mov	r0, r2
 800b102:	4619      	mov	r1, r3
 800b104:	a31c      	add	r3, pc, #112	; (adr r3, 800b178 <scaraKeyInit1+0x5e0>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	f7f5 f8bf 	bl	800028c <__adddf3>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	f107 0108 	add.w	r1, r7, #8
 800b116:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b11a:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800b11c:	f107 0408 	add.w	r4, r7, #8
 800b120:	4668      	mov	r0, sp
 800b122:	f104 0310 	add.w	r3, r4, #16
 800b126:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800b12a:	4619      	mov	r1, r3
 800b12c:	f00b f828 	bl	8016180 <memcpy>
 800b130:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b134:	f7fb fe80 	bl	8006e38 <scaraInitDuty>
 800b138:	4603      	mov	r3, r0
 800b13a:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800b13e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10b      	bne.n	800b15e <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800b146:	f7ff fb13 	bl	800a770 <scaraTestDuty>
 800b14a:	4603      	mov	r3, r0
 800b14c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800b150:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b154:	2b00      	cmp	r3, #0
 800b156:	d005      	beq.n	800b164 <scaraKeyInit1+0x5cc>
			return status;
 800b158:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b15c:	e002      	b.n	800b164 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800b15e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b162:	e7ff      	b.n	800b164 <scaraKeyInit1+0x5cc>
	}
}
 800b164:	4618      	mov	r0, r3
 800b166:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd90      	pop	{r4, r7, pc}
 800b16e:	bf00      	nop
 800b170:	9999999a 	.word	0x9999999a
 800b174:	3fa99999 	.word	0x3fa99999
 800b178:	9999999a 	.word	0x9999999a
 800b17c:	3fe99999 	.word	0x3fe99999

0800b180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b186:	2300      	movs	r3, #0
 800b188:	607b      	str	r3, [r7, #4]
 800b18a:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <HAL_MspInit+0x54>)
 800b18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18e:	4a11      	ldr	r2, [pc, #68]	; (800b1d4 <HAL_MspInit+0x54>)
 800b190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b194:	6453      	str	r3, [r2, #68]	; 0x44
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <HAL_MspInit+0x54>)
 800b198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b19e:	607b      	str	r3, [r7, #4]
 800b1a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	603b      	str	r3, [r7, #0]
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <HAL_MspInit+0x54>)
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	4a0a      	ldr	r2, [pc, #40]	; (800b1d4 <HAL_MspInit+0x54>)
 800b1ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1b0:	6413      	str	r3, [r2, #64]	; 0x40
 800b1b2:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <HAL_MspInit+0x54>)
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b1be:	2200      	movs	r2, #0
 800b1c0:	210f      	movs	r1, #15
 800b1c2:	f06f 0001 	mvn.w	r0, #1
 800b1c6:	f000 fc79 	bl	800babc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	40023800 	.word	0x40023800

0800b1d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08c      	sub	sp, #48	; 0x30
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	6879      	ldr	r1, [r7, #4]
 800b1ec:	2036      	movs	r0, #54	; 0x36
 800b1ee:	f000 fc65 	bl	800babc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b1f2:	2036      	movs	r0, #54	; 0x36
 800b1f4:	f000 fc7e 	bl	800baf4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	4b1f      	ldr	r3, [pc, #124]	; (800b27c <HAL_InitTick+0xa4>)
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	4a1e      	ldr	r2, [pc, #120]	; (800b27c <HAL_InitTick+0xa4>)
 800b202:	f043 0310 	orr.w	r3, r3, #16
 800b206:	6413      	str	r3, [r2, #64]	; 0x40
 800b208:	4b1c      	ldr	r3, [pc, #112]	; (800b27c <HAL_InitTick+0xa4>)
 800b20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20c:	f003 0310 	and.w	r3, r3, #16
 800b210:	60fb      	str	r3, [r7, #12]
 800b212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b214:	f107 0210 	add.w	r2, r7, #16
 800b218:	f107 0314 	add.w	r3, r7, #20
 800b21c:	4611      	mov	r1, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f003 f812 	bl	800e248 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b224:	f002 ffe8 	bl	800e1f8 <HAL_RCC_GetPCLK1Freq>
 800b228:	4603      	mov	r3, r0
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b230:	4a13      	ldr	r2, [pc, #76]	; (800b280 <HAL_InitTick+0xa8>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	0c9b      	lsrs	r3, r3, #18
 800b238:	3b01      	subs	r3, #1
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b23c:	4b11      	ldr	r3, [pc, #68]	; (800b284 <HAL_InitTick+0xac>)
 800b23e:	4a12      	ldr	r2, [pc, #72]	; (800b288 <HAL_InitTick+0xb0>)
 800b240:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b242:	4b10      	ldr	r3, [pc, #64]	; (800b284 <HAL_InitTick+0xac>)
 800b244:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b248:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b24a:	4a0e      	ldr	r2, [pc, #56]	; (800b284 <HAL_InitTick+0xac>)
 800b24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b250:	4b0c      	ldr	r3, [pc, #48]	; (800b284 <HAL_InitTick+0xac>)
 800b252:	2200      	movs	r2, #0
 800b254:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <HAL_InitTick+0xac>)
 800b258:	2200      	movs	r2, #0
 800b25a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b25c:	4809      	ldr	r0, [pc, #36]	; (800b284 <HAL_InitTick+0xac>)
 800b25e:	f003 f825 	bl	800e2ac <HAL_TIM_Base_Init>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b268:	4806      	ldr	r0, [pc, #24]	; (800b284 <HAL_InitTick+0xac>)
 800b26a:	f003 f84a 	bl	800e302 <HAL_TIM_Base_Start_IT>
 800b26e:	4603      	mov	r3, r0
 800b270:	e000      	b.n	800b274 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
}
 800b274:	4618      	mov	r0, r3
 800b276:	3730      	adds	r7, #48	; 0x30
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	40023800 	.word	0x40023800
 800b280:	431bde83 	.word	0x431bde83
 800b284:	20010d40 	.word	0x20010d40
 800b288:	40001000 	.word	0x40001000

0800b28c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b290:	bf00      	nop
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
	...

0800b29c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b2a0:	2162      	movs	r1, #98	; 0x62
 800b2a2:	4802      	ldr	r0, [pc, #8]	; (800b2ac <HardFault_Handler+0x10>)
 800b2a4:	f7f7 f97a 	bl	800259c <LOG_REPORT>
 800b2a8:	e7fa      	b.n	800b2a0 <HardFault_Handler+0x4>
 800b2aa:	bf00      	nop
 800b2ac:	0801c660 	.word	0x0801c660

0800b2b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b2b4:	2172      	movs	r1, #114	; 0x72
 800b2b6:	4802      	ldr	r0, [pc, #8]	; (800b2c0 <MemManage_Handler+0x10>)
 800b2b8:	f7f7 f970 	bl	800259c <LOG_REPORT>
 800b2bc:	e7fa      	b.n	800b2b4 <MemManage_Handler+0x4>
 800b2be:	bf00      	nop
 800b2c0:	0801c678 	.word	0x0801c678

0800b2c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b2c8:	2182      	movs	r1, #130	; 0x82
 800b2ca:	4802      	ldr	r0, [pc, #8]	; (800b2d4 <BusFault_Handler+0x10>)
 800b2cc:	f7f7 f966 	bl	800259c <LOG_REPORT>
 800b2d0:	e7fa      	b.n	800b2c8 <BusFault_Handler+0x4>
 800b2d2:	bf00      	nop
 800b2d4:	0801c68c 	.word	0x0801c68c

0800b2d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b2dc:	e7fe      	b.n	800b2dc <UsageFault_Handler+0x4>

0800b2de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b2e2:	bf00      	nop
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b2f0:	4802      	ldr	r0, [pc, #8]	; (800b2fc <DMA1_Stream4_IRQHandler+0x10>)
 800b2f2:	f000 fd35 	bl	800bd60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b2f6:	bf00      	nop
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20010e40 	.word	0x20010e40

0800b300 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b304:	4802      	ldr	r0, [pc, #8]	; (800b310 <UART4_IRQHandler+0x10>)
 800b306:	f003 fc99 	bl	800ec3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b30a:	bf00      	nop
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20010e00 	.word	0x20010e00

0800b314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b318:	4802      	ldr	r0, [pc, #8]	; (800b324 <TIM6_DAC_IRQHandler+0x10>)
 800b31a:	f003 f816 	bl	800e34a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b31e:	bf00      	nop
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20010d40 	.word	0x20010d40

0800b328 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b32c:	4b05      	ldr	r3, [pc, #20]	; (800b344 <TIM7_IRQHandler+0x1c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2101      	movs	r1, #1
 800b332:	4618      	mov	r0, r3
 800b334:	f007 fb96 	bl	8012a64 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b338:	4803      	ldr	r0, [pc, #12]	; (800b348 <TIM7_IRQHandler+0x20>)
 800b33a:	f003 f806 	bl	800e34a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b33e:	bf00      	nop
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	2000fe74 	.word	0x2000fe74
 800b348:	20010dc0 	.word	0x20010dc0

0800b34c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b350:	4802      	ldr	r0, [pc, #8]	; (800b35c <OTG_FS_IRQHandler+0x10>)
 800b352:	f001 fad9 	bl	800c908 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b356:	bf00      	nop
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	2001177c 	.word	0x2001177c

0800b360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
	return 1;
 800b364:	2301      	movs	r3, #1
}
 800b366:	4618      	mov	r0, r3
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <_kill>:

int _kill(int pid, int sig)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b37a:	f00a fec7 	bl	801610c <__errno>
 800b37e:	4603      	mov	r3, r0
 800b380:	2216      	movs	r2, #22
 800b382:	601a      	str	r2, [r3, #0]
	return -1;
 800b384:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <_exit>:

void _exit (int status)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b398:	f04f 31ff 	mov.w	r1, #4294967295
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7ff ffe7 	bl	800b370 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b3a2:	e7fe      	b.n	800b3a2 <_exit+0x12>

0800b3a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	e00a      	b.n	800b3cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b3b6:	f3af 8000 	nop.w
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	60ba      	str	r2, [r7, #8]
 800b3c2:	b2ca      	uxtb	r2, r1
 800b3c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	dbf0      	blt.n	800b3b6 <_read+0x12>
	}

return len;
 800b3d4:	687b      	ldr	r3, [r7, #4]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b086      	sub	sp, #24
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	60f8      	str	r0, [r7, #12]
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
 800b3ee:	e009      	b.n	800b404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	60ba      	str	r2, [r7, #8]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	3301      	adds	r3, #1
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	429a      	cmp	r2, r3
 800b40a:	dbf1      	blt.n	800b3f0 <_write+0x12>
	}
	return len;
 800b40c:	687b      	ldr	r3, [r7, #4]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <_close>:

int _close(int file)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
	return -1;
 800b41e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b422:	4618      	mov	r0, r3
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b43e:	605a      	str	r2, [r3, #4]
	return 0;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <_isatty>:

int _isatty(int file)
{
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
	return 1;
 800b456:	2301      	movs	r3, #1
}
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
	return 0;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b488:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <_sbrk+0x50>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <_sbrk+0x16>
		heap_end = &end;
 800b490:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <_sbrk+0x50>)
 800b492:	4a10      	ldr	r2, [pc, #64]	; (800b4d4 <_sbrk+0x54>)
 800b494:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b496:	4b0e      	ldr	r3, [pc, #56]	; (800b4d0 <_sbrk+0x50>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b49c:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <_sbrk+0x50>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	466a      	mov	r2, sp
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d907      	bls.n	800b4ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b4aa:	f00a fe2f 	bl	801610c <__errno>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	220c      	movs	r2, #12
 800b4b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b8:	e006      	b.n	800b4c8 <_sbrk+0x48>
	}

	heap_end += incr;
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <_sbrk+0x50>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	4a03      	ldr	r2, [pc, #12]	; (800b4d0 <_sbrk+0x50>)
 800b4c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20004864 	.word	0x20004864
 800b4d4:	20011b98 	.word	0x20011b98

0800b4d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b4dc:	4b08      	ldr	r3, [pc, #32]	; (800b500 <SystemInit+0x28>)
 800b4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e2:	4a07      	ldr	r2, [pc, #28]	; (800b500 <SystemInit+0x28>)
 800b4e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b4ec:	4b04      	ldr	r3, [pc, #16]	; (800b500 <SystemInit+0x28>)
 800b4ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b4f2:	609a      	str	r2, [r3, #8]
#endif
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	e000ed00 	.word	0xe000ed00

0800b504 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b50a:	f107 0308 	add.w	r3, r7, #8
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	605a      	str	r2, [r3, #4]
 800b514:	609a      	str	r2, [r3, #8]
 800b516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b518:	463b      	mov	r3, r7
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <MX_TIM2_Init+0x98>)
 800b522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b528:	4b1c      	ldr	r3, [pc, #112]	; (800b59c <MX_TIM2_Init+0x98>)
 800b52a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b52e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b530:	4b1a      	ldr	r3, [pc, #104]	; (800b59c <MX_TIM2_Init+0x98>)
 800b532:	2200      	movs	r2, #0
 800b534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b536:	4b19      	ldr	r3, [pc, #100]	; (800b59c <MX_TIM2_Init+0x98>)
 800b538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b53c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b53e:	4b17      	ldr	r3, [pc, #92]	; (800b59c <MX_TIM2_Init+0x98>)
 800b540:	2200      	movs	r2, #0
 800b542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b544:	4b15      	ldr	r3, [pc, #84]	; (800b59c <MX_TIM2_Init+0x98>)
 800b546:	2200      	movs	r2, #0
 800b548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b54a:	4814      	ldr	r0, [pc, #80]	; (800b59c <MX_TIM2_Init+0x98>)
 800b54c:	f002 feae 	bl	800e2ac <HAL_TIM_Base_Init>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b556:	f7fa fbd5 	bl	8005d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b55a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b55e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b560:	f107 0308 	add.w	r3, r7, #8
 800b564:	4619      	mov	r1, r3
 800b566:	480d      	ldr	r0, [pc, #52]	; (800b59c <MX_TIM2_Init+0x98>)
 800b568:	f002 fff7 	bl	800e55a <HAL_TIM_ConfigClockSource>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b572:	f7fa fbc7 	bl	8005d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b576:	2300      	movs	r3, #0
 800b578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b57e:	463b      	mov	r3, r7
 800b580:	4619      	mov	r1, r3
 800b582:	4806      	ldr	r0, [pc, #24]	; (800b59c <MX_TIM2_Init+0x98>)
 800b584:	f003 fa10 	bl	800e9a8 <HAL_TIMEx_MasterConfigSynchronization>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b58e:	f7fa fbb9 	bl	8005d04 <Error_Handler>
  }

}
 800b592:	bf00      	nop
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20010d80 	.word	0x20010d80

0800b5a0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5a6:	463b      	mov	r3, r7
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b5ae:	4b15      	ldr	r3, [pc, #84]	; (800b604 <MX_TIM7_Init+0x64>)
 800b5b0:	4a15      	ldr	r2, [pc, #84]	; (800b608 <MX_TIM7_Init+0x68>)
 800b5b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b5b4:	4b13      	ldr	r3, [pc, #76]	; (800b604 <MX_TIM7_Init+0x64>)
 800b5b6:	2253      	movs	r2, #83	; 0x53
 800b5b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5ba:	4b12      	ldr	r3, [pc, #72]	; (800b604 <MX_TIM7_Init+0x64>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b5c0:	4b10      	ldr	r3, [pc, #64]	; (800b604 <MX_TIM7_Init+0x64>)
 800b5c2:	f242 720f 	movw	r2, #9999	; 0x270f
 800b5c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5c8:	4b0e      	ldr	r3, [pc, #56]	; (800b604 <MX_TIM7_Init+0x64>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b5ce:	480d      	ldr	r0, [pc, #52]	; (800b604 <MX_TIM7_Init+0x64>)
 800b5d0:	f002 fe6c 	bl	800e2ac <HAL_TIM_Base_Init>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b5da:	f7fa fb93 	bl	8005d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b5e6:	463b      	mov	r3, r7
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	4806      	ldr	r0, [pc, #24]	; (800b604 <MX_TIM7_Init+0x64>)
 800b5ec:	f003 f9dc 	bl	800e9a8 <HAL_TIMEx_MasterConfigSynchronization>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b5f6:	f7fa fb85 	bl	8005d04 <Error_Handler>
  }

}
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20010dc0 	.word	0x20010dc0
 800b608:	40001400 	.word	0x40001400

0800b60c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b61c:	d10e      	bne.n	800b63c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	4b16      	ldr	r3, [pc, #88]	; (800b67c <HAL_TIM_Base_MspInit+0x70>)
 800b624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b626:	4a15      	ldr	r2, [pc, #84]	; (800b67c <HAL_TIM_Base_MspInit+0x70>)
 800b628:	f043 0301 	orr.w	r3, r3, #1
 800b62c:	6413      	str	r3, [r2, #64]	; 0x40
 800b62e:	4b13      	ldr	r3, [pc, #76]	; (800b67c <HAL_TIM_Base_MspInit+0x70>)
 800b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b63a:	e01a      	b.n	800b672 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a0f      	ldr	r2, [pc, #60]	; (800b680 <HAL_TIM_Base_MspInit+0x74>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d115      	bne.n	800b672 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b646:	2300      	movs	r3, #0
 800b648:	60bb      	str	r3, [r7, #8]
 800b64a:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <HAL_TIM_Base_MspInit+0x70>)
 800b64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64e:	4a0b      	ldr	r2, [pc, #44]	; (800b67c <HAL_TIM_Base_MspInit+0x70>)
 800b650:	f043 0320 	orr.w	r3, r3, #32
 800b654:	6413      	str	r3, [r2, #64]	; 0x40
 800b656:	4b09      	ldr	r3, [pc, #36]	; (800b67c <HAL_TIM_Base_MspInit+0x70>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	f003 0320 	and.w	r3, r3, #32
 800b65e:	60bb      	str	r3, [r7, #8]
 800b660:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b662:	2200      	movs	r2, #0
 800b664:	2105      	movs	r1, #5
 800b666:	2037      	movs	r0, #55	; 0x37
 800b668:	f000 fa28 	bl	800babc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b66c:	2037      	movs	r0, #55	; 0x37
 800b66e:	f000 fa41 	bl	800baf4 <HAL_NVIC_EnableIRQ>
}
 800b672:	bf00      	nop
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	40023800 	.word	0x40023800
 800b680:	40001400 	.word	0x40001400

0800b684 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b688:	4b11      	ldr	r3, [pc, #68]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b68a:	4a12      	ldr	r2, [pc, #72]	; (800b6d4 <MX_UART4_Init+0x50>)
 800b68c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b68e:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b694:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b696:	4b0e      	ldr	r3, [pc, #56]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b698:	2200      	movs	r2, #0
 800b69a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b6a2:	4b0b      	ldr	r3, [pc, #44]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b6a8:	4b09      	ldr	r3, [pc, #36]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b6aa:	220c      	movs	r2, #12
 800b6ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b6ae:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b6b4:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b6ba:	4805      	ldr	r0, [pc, #20]	; (800b6d0 <MX_UART4_Init+0x4c>)
 800b6bc:	f003 fa04 	bl	800eac8 <HAL_UART_Init>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b6c6:	f7fa fb1d 	bl	8005d04 <Error_Handler>
  }

}
 800b6ca:	bf00      	nop
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20010e00 	.word	0x20010e00
 800b6d4:	40004c00 	.word	0x40004c00

0800b6d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08a      	sub	sp, #40	; 0x28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6e0:	f107 0314 	add.w	r3, r7, #20
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	605a      	str	r2, [r3, #4]
 800b6ea:	609a      	str	r2, [r3, #8]
 800b6ec:	60da      	str	r2, [r3, #12]
 800b6ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a34      	ldr	r2, [pc, #208]	; (800b7c8 <HAL_UART_MspInit+0xf0>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d161      	bne.n	800b7be <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	613b      	str	r3, [r7, #16]
 800b6fe:	4b33      	ldr	r3, [pc, #204]	; (800b7cc <HAL_UART_MspInit+0xf4>)
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	4a32      	ldr	r2, [pc, #200]	; (800b7cc <HAL_UART_MspInit+0xf4>)
 800b704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b708:	6413      	str	r3, [r2, #64]	; 0x40
 800b70a:	4b30      	ldr	r3, [pc, #192]	; (800b7cc <HAL_UART_MspInit+0xf4>)
 800b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b712:	613b      	str	r3, [r7, #16]
 800b714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	4b2c      	ldr	r3, [pc, #176]	; (800b7cc <HAL_UART_MspInit+0xf4>)
 800b71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71e:	4a2b      	ldr	r2, [pc, #172]	; (800b7cc <HAL_UART_MspInit+0xf4>)
 800b720:	f043 0301 	orr.w	r3, r3, #1
 800b724:	6313      	str	r3, [r2, #48]	; 0x30
 800b726:	4b29      	ldr	r3, [pc, #164]	; (800b7cc <HAL_UART_MspInit+0xf4>)
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b732:	2303      	movs	r3, #3
 800b734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b736:	2302      	movs	r3, #2
 800b738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b73a:	2301      	movs	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b73e:	2303      	movs	r3, #3
 800b740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b742:	2308      	movs	r3, #8
 800b744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b746:	f107 0314 	add.w	r3, r7, #20
 800b74a:	4619      	mov	r1, r3
 800b74c:	4820      	ldr	r0, [pc, #128]	; (800b7d0 <HAL_UART_MspInit+0xf8>)
 800b74e:	f000 fd7f 	bl	800c250 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b752:	4b20      	ldr	r3, [pc, #128]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b754:	4a20      	ldr	r2, [pc, #128]	; (800b7d8 <HAL_UART_MspInit+0x100>)
 800b756:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b758:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b75a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b75e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b760:	4b1c      	ldr	r3, [pc, #112]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b762:	2240      	movs	r2, #64	; 0x40
 800b764:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b766:	4b1b      	ldr	r3, [pc, #108]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b768:	2200      	movs	r2, #0
 800b76a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b76c:	4b19      	ldr	r3, [pc, #100]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b76e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b772:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b774:	4b17      	ldr	r3, [pc, #92]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b776:	2200      	movs	r2, #0
 800b778:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b77a:	4b16      	ldr	r3, [pc, #88]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b780:	4b14      	ldr	r3, [pc, #80]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b782:	2200      	movs	r2, #0
 800b784:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b786:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b788:	2200      	movs	r2, #0
 800b78a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b78c:	4b11      	ldr	r3, [pc, #68]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b78e:	2200      	movs	r2, #0
 800b790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b792:	4810      	ldr	r0, [pc, #64]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b794:	f000 f9bc 	bl	800bb10 <HAL_DMA_Init>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b79e:	f7fa fab1 	bl	8005d04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a0b      	ldr	r2, [pc, #44]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b7a6:	631a      	str	r2, [r3, #48]	; 0x30
 800b7a8:	4a0a      	ldr	r2, [pc, #40]	; (800b7d4 <HAL_UART_MspInit+0xfc>)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2105      	movs	r1, #5
 800b7b2:	2034      	movs	r0, #52	; 0x34
 800b7b4:	f000 f982 	bl	800babc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b7b8:	2034      	movs	r0, #52	; 0x34
 800b7ba:	f000 f99b 	bl	800baf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b7be:	bf00      	nop
 800b7c0:	3728      	adds	r7, #40	; 0x28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	40004c00 	.word	0x40004c00
 800b7cc:	40023800 	.word	0x40023800
 800b7d0:	40020000 	.word	0x40020000
 800b7d4:	20010e40 	.word	0x20010e40
 800b7d8:	40026070 	.word	0x40026070

0800b7dc <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a0c      	ldr	r2, [pc, #48]	; (800b81c <HAL_UART_TxCpltCallback+0x40>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d112      	bne.n	800b814 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b7ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7f2:	490b      	ldr	r1, [pc, #44]	; (800b820 <HAL_UART_TxCpltCallback+0x44>)
 800b7f4:	480b      	ldr	r0, [pc, #44]	; (800b824 <HAL_UART_TxCpltCallback+0x48>)
 800b7f6:	f7fa fb3f 	bl	8005e78 <ringBuff_PopArray>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b7fe:	89fb      	ldrh	r3, [r7, #14]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d006      	beq.n	800b812 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b804:	89fb      	ldrh	r3, [r7, #14]
 800b806:	461a      	mov	r2, r3
 800b808:	4905      	ldr	r1, [pc, #20]	; (800b820 <HAL_UART_TxCpltCallback+0x44>)
 800b80a:	4807      	ldr	r0, [pc, #28]	; (800b828 <HAL_UART_TxCpltCallback+0x4c>)
 800b80c:	f003 f9aa 	bl	800eb64 <HAL_UART_Transmit_DMA>
 800b810:	e000      	b.n	800b814 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b812:	bf00      	nop
	}
}
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	40004c00 	.word	0x40004c00
 800b820:	2000fd70 	.word	0x2000fd70
 800b824:	20002074 	.word	0x20002074
 800b828:	20010e00 	.word	0x20010e00

0800b82c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b82c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b832:	e003      	b.n	800b83c <LoopCopyDataInit>

0800b834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b834:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b83a:	3104      	adds	r1, #4

0800b83c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b83c:	480b      	ldr	r0, [pc, #44]	; (800b86c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b83e:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b844:	d3f6      	bcc.n	800b834 <CopyDataInit>
  ldr  r2, =_sbss
 800b846:	4a0b      	ldr	r2, [pc, #44]	; (800b874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b848:	e002      	b.n	800b850 <LoopFillZerobss>

0800b84a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b84a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b84c:	f842 3b04 	str.w	r3, [r2], #4

0800b850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b850:	4b09      	ldr	r3, [pc, #36]	; (800b878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b854:	d3f9      	bcc.n	800b84a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b856:	f7ff fe3f 	bl	800b4d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b85a:	f00a fc5d 	bl	8016118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b85e:	f7fa f9a5 	bl	8005bac <main>
  bx  lr    
 800b862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b864:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b868:	0801ce20 	.word	0x0801ce20
  ldr  r0, =_sdata
 800b86c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b870:	200043e8 	.word	0x200043e8
  ldr  r2, =_sbss
 800b874:	200043e8 	.word	0x200043e8
  ldr  r3, = _ebss
 800b878:	20011b94 	.word	0x20011b94

0800b87c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b87c:	e7fe      	b.n	800b87c <ADC_IRQHandler>
	...

0800b880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b884:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <HAL_Init+0x40>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <HAL_Init+0x40>)
 800b88a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b88e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b890:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <HAL_Init+0x40>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a0a      	ldr	r2, [pc, #40]	; (800b8c0 <HAL_Init+0x40>)
 800b896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b89a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b89c:	4b08      	ldr	r3, [pc, #32]	; (800b8c0 <HAL_Init+0x40>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a07      	ldr	r2, [pc, #28]	; (800b8c0 <HAL_Init+0x40>)
 800b8a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b8a8:	2003      	movs	r0, #3
 800b8aa:	f000 f8fc 	bl	800baa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	f7ff fc92 	bl	800b1d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b8b4:	f7ff fc64 	bl	800b180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	40023c00 	.word	0x40023c00

0800b8c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b8c8:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <HAL_IncTick+0x20>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <HAL_IncTick+0x24>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	4a04      	ldr	r2, [pc, #16]	; (800b8e8 <HAL_IncTick+0x24>)
 800b8d6:	6013      	str	r3, [r2, #0]
}
 800b8d8:	bf00      	nop
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	20004094 	.word	0x20004094
 800b8e8:	20010ea0 	.word	0x20010ea0

0800b8ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	af00      	add	r7, sp, #0
  return uwTick;
 800b8f0:	4b03      	ldr	r3, [pc, #12]	; (800b900 <HAL_GetTick+0x14>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20010ea0 	.word	0x20010ea0

0800b904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b90c:	f7ff ffee 	bl	800b8ec <HAL_GetTick>
 800b910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91c:	d005      	beq.n	800b92a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b91e:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <HAL_Delay+0x44>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	461a      	mov	r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4413      	add	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b92a:	bf00      	nop
 800b92c:	f7ff ffde 	bl	800b8ec <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d8f7      	bhi.n	800b92c <HAL_Delay+0x28>
  {
  }
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20004094 	.word	0x20004094

0800b94c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f003 0307 	and.w	r3, r3, #7
 800b95a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b95c:	4b0c      	ldr	r3, [pc, #48]	; (800b990 <__NVIC_SetPriorityGrouping+0x44>)
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b968:	4013      	ands	r3, r2
 800b96a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b97c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b97e:	4a04      	ldr	r2, [pc, #16]	; (800b990 <__NVIC_SetPriorityGrouping+0x44>)
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	60d3      	str	r3, [r2, #12]
}
 800b984:	bf00      	nop
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	e000ed00 	.word	0xe000ed00

0800b994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b994:	b480      	push	{r7}
 800b996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <__NVIC_GetPriorityGrouping+0x18>)
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	0a1b      	lsrs	r3, r3, #8
 800b99e:	f003 0307 	and.w	r3, r3, #7
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	e000ed00 	.word	0xe000ed00

0800b9b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	db0b      	blt.n	800b9da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	f003 021f 	and.w	r2, r3, #31
 800b9c8:	4907      	ldr	r1, [pc, #28]	; (800b9e8 <__NVIC_EnableIRQ+0x38>)
 800b9ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ce:	095b      	lsrs	r3, r3, #5
 800b9d0:	2001      	movs	r0, #1
 800b9d2:	fa00 f202 	lsl.w	r2, r0, r2
 800b9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	e000e100 	.word	0xe000e100

0800b9ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	db0a      	blt.n	800ba16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	490c      	ldr	r1, [pc, #48]	; (800ba38 <__NVIC_SetPriority+0x4c>)
 800ba06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba0a:	0112      	lsls	r2, r2, #4
 800ba0c:	b2d2      	uxtb	r2, r2
 800ba0e:	440b      	add	r3, r1
 800ba10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ba14:	e00a      	b.n	800ba2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	4908      	ldr	r1, [pc, #32]	; (800ba3c <__NVIC_SetPriority+0x50>)
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	f003 030f 	and.w	r3, r3, #15
 800ba22:	3b04      	subs	r3, #4
 800ba24:	0112      	lsls	r2, r2, #4
 800ba26:	b2d2      	uxtb	r2, r2
 800ba28:	440b      	add	r3, r1
 800ba2a:	761a      	strb	r2, [r3, #24]
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	e000e100 	.word	0xe000e100
 800ba3c:	e000ed00 	.word	0xe000ed00

0800ba40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b089      	sub	sp, #36	; 0x24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f003 0307 	and.w	r3, r3, #7
 800ba52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	f1c3 0307 	rsb	r3, r3, #7
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	bf28      	it	cs
 800ba5e:	2304      	movcs	r3, #4
 800ba60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	3304      	adds	r3, #4
 800ba66:	2b06      	cmp	r3, #6
 800ba68:	d902      	bls.n	800ba70 <NVIC_EncodePriority+0x30>
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	3b03      	subs	r3, #3
 800ba6e:	e000      	b.n	800ba72 <NVIC_EncodePriority+0x32>
 800ba70:	2300      	movs	r3, #0
 800ba72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba74:	f04f 32ff 	mov.w	r2, #4294967295
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7e:	43da      	mvns	r2, r3
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	401a      	ands	r2, r3
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba88:	f04f 31ff 	mov.w	r1, #4294967295
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba92:	43d9      	mvns	r1, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba98:	4313      	orrs	r3, r2
         );
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3724      	adds	r7, #36	; 0x24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7ff ff4c 	bl	800b94c <__NVIC_SetPriorityGrouping>
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bace:	f7ff ff61 	bl	800b994 <__NVIC_GetPriorityGrouping>
 800bad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	6978      	ldr	r0, [r7, #20]
 800bada:	f7ff ffb1 	bl	800ba40 <NVIC_EncodePriority>
 800bade:	4602      	mov	r2, r0
 800bae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff ff80 	bl	800b9ec <__NVIC_SetPriority>
}
 800baec:	bf00      	nop
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	4603      	mov	r3, r0
 800bafc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bafe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff ff54 	bl	800b9b0 <__NVIC_EnableIRQ>
}
 800bb08:	bf00      	nop
 800bb0a:	3708      	adds	r7, #8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bb1c:	f7ff fee6 	bl	800b8ec <HAL_GetTick>
 800bb20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e099      	b.n	800bc60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2202      	movs	r2, #2
 800bb38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f022 0201 	bic.w	r2, r2, #1
 800bb4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb4c:	e00f      	b.n	800bb6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bb4e:	f7ff fecd 	bl	800b8ec <HAL_GetTick>
 800bb52:	4602      	mov	r2, r0
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	2b05      	cmp	r3, #5
 800bb5a:	d908      	bls.n	800bb6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2220      	movs	r2, #32
 800bb60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2203      	movs	r2, #3
 800bb66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	e078      	b.n	800bc60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1e8      	bne.n	800bb4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bb84:	697a      	ldr	r2, [r7, #20]
 800bb86:	4b38      	ldr	r3, [pc, #224]	; (800bc68 <HAL_DMA_Init+0x158>)
 800bb88:	4013      	ands	r3, r2
 800bb8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bb9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bbb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d107      	bne.n	800bbd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f023 0307 	bic.w	r3, r3, #7
 800bbee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d117      	bne.n	800bc32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00e      	beq.n	800bc32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fa9f 	bl	800c158 <DMA_CheckFifoParam>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d008      	beq.n	800bc32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2240      	movs	r2, #64	; 0x40
 800bc24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e016      	b.n	800bc60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa56 	bl	800c0ec <DMA_CalcBaseAndBitshift>
 800bc40:	4603      	mov	r3, r0
 800bc42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc48:	223f      	movs	r2, #63	; 0x3f
 800bc4a:	409a      	lsls	r2, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	f010803f 	.word	0xf010803f

0800bc6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d101      	bne.n	800bc92 <HAL_DMA_Start_IT+0x26>
 800bc8e:	2302      	movs	r3, #2
 800bc90:	e040      	b.n	800bd14 <HAL_DMA_Start_IT+0xa8>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d12f      	bne.n	800bd06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2202      	movs	r2, #2
 800bcaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	68b9      	ldr	r1, [r7, #8]
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 f9e8 	bl	800c090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcc4:	223f      	movs	r2, #63	; 0x3f
 800bcc6:	409a      	lsls	r2, r3
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f042 0216 	orr.w	r2, r2, #22
 800bcda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f042 0208 	orr.w	r2, r2, #8
 800bcf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f042 0201 	orr.w	r2, r2, #1
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	e005      	b.n	800bd12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bd0e:	2302      	movs	r3, #2
 800bd10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d004      	beq.n	800bd3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2280      	movs	r2, #128	; 0x80
 800bd34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e00c      	b.n	800bd54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2205      	movs	r2, #5
 800bd3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f022 0201 	bic.w	r2, r2, #1
 800bd50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bd6c:	4b92      	ldr	r3, [pc, #584]	; (800bfb8 <HAL_DMA_IRQHandler+0x258>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a92      	ldr	r2, [pc, #584]	; (800bfbc <HAL_DMA_IRQHandler+0x25c>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	0a9b      	lsrs	r3, r3, #10
 800bd78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd8a:	2208      	movs	r2, #8
 800bd8c:	409a      	lsls	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	4013      	ands	r3, r2
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d01a      	beq.n	800bdcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d013      	beq.n	800bdcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f022 0204 	bic.w	r2, r2, #4
 800bdb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdb8:	2208      	movs	r2, #8
 800bdba:	409a      	lsls	r2, r3
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc4:	f043 0201 	orr.w	r2, r3, #1
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	409a      	lsls	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d012      	beq.n	800be02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00b      	beq.n	800be02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdee:	2201      	movs	r2, #1
 800bdf0:	409a      	lsls	r2, r3
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfa:	f043 0202 	orr.w	r2, r3, #2
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be06:	2204      	movs	r2, #4
 800be08:	409a      	lsls	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	4013      	ands	r3, r2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d012      	beq.n	800be38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 0302 	and.w	r3, r3, #2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00b      	beq.n	800be38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be24:	2204      	movs	r2, #4
 800be26:	409a      	lsls	r2, r3
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be30:	f043 0204 	orr.w	r2, r3, #4
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be3c:	2210      	movs	r2, #16
 800be3e:	409a      	lsls	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4013      	ands	r3, r2
 800be44:	2b00      	cmp	r3, #0
 800be46:	d043      	beq.n	800bed0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0308 	and.w	r3, r3, #8
 800be52:	2b00      	cmp	r3, #0
 800be54:	d03c      	beq.n	800bed0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be5a:	2210      	movs	r2, #16
 800be5c:	409a      	lsls	r2, r3
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d018      	beq.n	800bea2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d108      	bne.n	800be90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d024      	beq.n	800bed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	4798      	blx	r3
 800be8e:	e01f      	b.n	800bed0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01b      	beq.n	800bed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	4798      	blx	r3
 800bea0:	e016      	b.n	800bed0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beac:	2b00      	cmp	r3, #0
 800beae:	d107      	bne.n	800bec0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f022 0208 	bic.w	r2, r2, #8
 800bebe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d003      	beq.n	800bed0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed4:	2220      	movs	r2, #32
 800bed6:	409a      	lsls	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 808e 	beq.w	800bffe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 0310 	and.w	r3, r3, #16
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 8086 	beq.w	800bffe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bef6:	2220      	movs	r2, #32
 800bef8:	409a      	lsls	r2, r3
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b05      	cmp	r3, #5
 800bf08:	d136      	bne.n	800bf78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f022 0216 	bic.w	r2, r2, #22
 800bf18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	695a      	ldr	r2, [r3, #20]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d103      	bne.n	800bf3a <HAL_DMA_IRQHandler+0x1da>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d007      	beq.n	800bf4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f022 0208 	bic.w	r2, r2, #8
 800bf48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf4e:	223f      	movs	r2, #63	; 0x3f
 800bf50:	409a      	lsls	r2, r3
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d07d      	beq.n	800c06a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	4798      	blx	r3
        }
        return;
 800bf76:	e078      	b.n	800c06a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01c      	beq.n	800bfc0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d108      	bne.n	800bfa6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d030      	beq.n	800bffe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	4798      	blx	r3
 800bfa4:	e02b      	b.n	800bffe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d027      	beq.n	800bffe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	4798      	blx	r3
 800bfb6:	e022      	b.n	800bffe <HAL_DMA_IRQHandler+0x29e>
 800bfb8:	2000408c 	.word	0x2000408c
 800bfbc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10f      	bne.n	800bfee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0210 	bic.w	r2, r2, #16
 800bfdc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c002:	2b00      	cmp	r3, #0
 800c004:	d032      	beq.n	800c06c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d022      	beq.n	800c058 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2205      	movs	r2, #5
 800c016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f022 0201 	bic.w	r2, r2, #1
 800c028:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	3301      	adds	r3, #1
 800c02e:	60bb      	str	r3, [r7, #8]
 800c030:	697a      	ldr	r2, [r7, #20]
 800c032:	429a      	cmp	r2, r3
 800c034:	d307      	bcc.n	800c046 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1f2      	bne.n	800c02a <HAL_DMA_IRQHandler+0x2ca>
 800c044:	e000      	b.n	800c048 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c046:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	4798      	blx	r3
 800c068:	e000      	b.n	800c06c <HAL_DMA_IRQHandler+0x30c>
        return;
 800c06a:	bf00      	nop
    }
  }
}
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop

0800c074 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c082:	b2db      	uxtb	r3, r3
}
 800c084:	4618      	mov	r0, r3
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c0ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	2b40      	cmp	r3, #64	; 0x40
 800c0bc:	d108      	bne.n	800c0d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c0ce:	e007      	b.n	800c0e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	60da      	str	r2, [r3, #12]
}
 800c0e0:	bf00      	nop
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	3b10      	subs	r3, #16
 800c0fc:	4a14      	ldr	r2, [pc, #80]	; (800c150 <DMA_CalcBaseAndBitshift+0x64>)
 800c0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c102:	091b      	lsrs	r3, r3, #4
 800c104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c106:	4a13      	ldr	r2, [pc, #76]	; (800c154 <DMA_CalcBaseAndBitshift+0x68>)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4413      	add	r3, r2
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d909      	bls.n	800c12e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c122:	f023 0303 	bic.w	r3, r3, #3
 800c126:	1d1a      	adds	r2, r3, #4
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	659a      	str	r2, [r3, #88]	; 0x58
 800c12c:	e007      	b.n	800c13e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c136:	f023 0303 	bic.w	r3, r3, #3
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c142:	4618      	mov	r0, r3
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	aaaaaaab 	.word	0xaaaaaaab
 800c154:	0801c708 	.word	0x0801c708

0800c158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d11f      	bne.n	800c1b2 <DMA_CheckFifoParam+0x5a>
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2b03      	cmp	r3, #3
 800c176:	d856      	bhi.n	800c226 <DMA_CheckFifoParam+0xce>
 800c178:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <DMA_CheckFifoParam+0x28>)
 800c17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17e:	bf00      	nop
 800c180:	0800c191 	.word	0x0800c191
 800c184:	0800c1a3 	.word	0x0800c1a3
 800c188:	0800c191 	.word	0x0800c191
 800c18c:	0800c227 	.word	0x0800c227
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d046      	beq.n	800c22a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c1a0:	e043      	b.n	800c22a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c1aa:	d140      	bne.n	800c22e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c1b0:	e03d      	b.n	800c22e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1ba:	d121      	bne.n	800c200 <DMA_CheckFifoParam+0xa8>
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d837      	bhi.n	800c232 <DMA_CheckFifoParam+0xda>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <DMA_CheckFifoParam+0x70>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1d9 	.word	0x0800c1d9
 800c1cc:	0800c1df 	.word	0x0800c1df
 800c1d0:	0800c1d9 	.word	0x0800c1d9
 800c1d4:	0800c1f1 	.word	0x0800c1f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	73fb      	strb	r3, [r7, #15]
      break;
 800c1dc:	e030      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d025      	beq.n	800c236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c1ee:	e022      	b.n	800c236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c1f8:	d11f      	bne.n	800c23a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c1fe:	e01c      	b.n	800c23a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2b02      	cmp	r3, #2
 800c204:	d903      	bls.n	800c20e <DMA_CheckFifoParam+0xb6>
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d003      	beq.n	800c214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c20c:	e018      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	73fb      	strb	r3, [r7, #15]
      break;
 800c212:	e015      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00e      	beq.n	800c23e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	73fb      	strb	r3, [r7, #15]
      break;
 800c224:	e00b      	b.n	800c23e <DMA_CheckFifoParam+0xe6>
      break;
 800c226:	bf00      	nop
 800c228:	e00a      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      break;
 800c22a:	bf00      	nop
 800c22c:	e008      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      break;
 800c22e:	bf00      	nop
 800c230:	e006      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      break;
 800c232:	bf00      	nop
 800c234:	e004      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      break;
 800c236:	bf00      	nop
 800c238:	e002      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      break;   
 800c23a:	bf00      	nop
 800c23c:	e000      	b.n	800c240 <DMA_CheckFifoParam+0xe8>
      break;
 800c23e:	bf00      	nop
    }
  } 
  
  return status; 
 800c240:	7bfb      	ldrb	r3, [r7, #15]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3714      	adds	r7, #20
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop

0800c250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c250:	b480      	push	{r7}
 800c252:	b089      	sub	sp, #36	; 0x24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c25a:	2300      	movs	r3, #0
 800c25c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c25e:	2300      	movs	r3, #0
 800c260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c262:	2300      	movs	r3, #0
 800c264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c266:	2300      	movs	r3, #0
 800c268:	61fb      	str	r3, [r7, #28]
 800c26a:	e16b      	b.n	800c544 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c26c:	2201      	movs	r2, #1
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	fa02 f303 	lsl.w	r3, r2, r3
 800c274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	4013      	ands	r3, r2
 800c27e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	429a      	cmp	r2, r3
 800c286:	f040 815a 	bne.w	800c53e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d00b      	beq.n	800c2aa <HAL_GPIO_Init+0x5a>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	2b02      	cmp	r3, #2
 800c298:	d007      	beq.n	800c2aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c29e:	2b11      	cmp	r3, #17
 800c2a0:	d003      	beq.n	800c2aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	2b12      	cmp	r3, #18
 800c2a8:	d130      	bne.n	800c30c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ba:	43db      	mvns	r3, r3
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e8:	43db      	mvns	r3, r3
 800c2ea:	69ba      	ldr	r2, [r7, #24]
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	091b      	lsrs	r3, r3, #4
 800c2f6:	f003 0201 	and.w	r2, r3, #1
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	4313      	orrs	r3, r2
 800c304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	69ba      	ldr	r2, [r7, #24]
 800c30a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	2203      	movs	r2, #3
 800c318:	fa02 f303 	lsl.w	r3, r2, r3
 800c31c:	43db      	mvns	r3, r3
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	4013      	ands	r3, r2
 800c322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	689a      	ldr	r2, [r3, #8]
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	fa02 f303 	lsl.w	r3, r2, r3
 800c330:	69ba      	ldr	r2, [r7, #24]
 800c332:	4313      	orrs	r3, r2
 800c334:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	69ba      	ldr	r2, [r7, #24]
 800c33a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	2b02      	cmp	r3, #2
 800c342:	d003      	beq.n	800c34c <HAL_GPIO_Init+0xfc>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	2b12      	cmp	r3, #18
 800c34a:	d123      	bne.n	800c394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	08da      	lsrs	r2, r3, #3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3208      	adds	r2, #8
 800c354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	f003 0307 	and.w	r3, r3, #7
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	220f      	movs	r2, #15
 800c364:	fa02 f303 	lsl.w	r3, r2, r3
 800c368:	43db      	mvns	r3, r3
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	4013      	ands	r3, r2
 800c36e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	691a      	ldr	r2, [r3, #16]
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	fa02 f303 	lsl.w	r3, r2, r3
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	4313      	orrs	r3, r2
 800c384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	08da      	lsrs	r2, r3, #3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3208      	adds	r2, #8
 800c38e:	69b9      	ldr	r1, [r7, #24]
 800c390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	2203      	movs	r2, #3
 800c3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	f003 0203 	and.w	r2, r3, #3
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	005b      	lsls	r3, r3, #1
 800c3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 80b4 	beq.w	800c53e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	4b60      	ldr	r3, [pc, #384]	; (800c55c <HAL_GPIO_Init+0x30c>)
 800c3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3de:	4a5f      	ldr	r2, [pc, #380]	; (800c55c <HAL_GPIO_Init+0x30c>)
 800c3e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3e4:	6453      	str	r3, [r2, #68]	; 0x44
 800c3e6:	4b5d      	ldr	r3, [pc, #372]	; (800c55c <HAL_GPIO_Init+0x30c>)
 800c3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c3f2:	4a5b      	ldr	r2, [pc, #364]	; (800c560 <HAL_GPIO_Init+0x310>)
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	089b      	lsrs	r3, r3, #2
 800c3f8:	3302      	adds	r3, #2
 800c3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	f003 0303 	and.w	r3, r3, #3
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	220f      	movs	r2, #15
 800c40a:	fa02 f303 	lsl.w	r3, r2, r3
 800c40e:	43db      	mvns	r3, r3
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	4013      	ands	r3, r2
 800c414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a52      	ldr	r2, [pc, #328]	; (800c564 <HAL_GPIO_Init+0x314>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d02b      	beq.n	800c476 <HAL_GPIO_Init+0x226>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a51      	ldr	r2, [pc, #324]	; (800c568 <HAL_GPIO_Init+0x318>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d025      	beq.n	800c472 <HAL_GPIO_Init+0x222>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a50      	ldr	r2, [pc, #320]	; (800c56c <HAL_GPIO_Init+0x31c>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d01f      	beq.n	800c46e <HAL_GPIO_Init+0x21e>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a4f      	ldr	r2, [pc, #316]	; (800c570 <HAL_GPIO_Init+0x320>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d019      	beq.n	800c46a <HAL_GPIO_Init+0x21a>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a4e      	ldr	r2, [pc, #312]	; (800c574 <HAL_GPIO_Init+0x324>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d013      	beq.n	800c466 <HAL_GPIO_Init+0x216>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a4d      	ldr	r2, [pc, #308]	; (800c578 <HAL_GPIO_Init+0x328>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d00d      	beq.n	800c462 <HAL_GPIO_Init+0x212>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a4c      	ldr	r2, [pc, #304]	; (800c57c <HAL_GPIO_Init+0x32c>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d007      	beq.n	800c45e <HAL_GPIO_Init+0x20e>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a4b      	ldr	r2, [pc, #300]	; (800c580 <HAL_GPIO_Init+0x330>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d101      	bne.n	800c45a <HAL_GPIO_Init+0x20a>
 800c456:	2307      	movs	r3, #7
 800c458:	e00e      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c45a:	2308      	movs	r3, #8
 800c45c:	e00c      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c45e:	2306      	movs	r3, #6
 800c460:	e00a      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c462:	2305      	movs	r3, #5
 800c464:	e008      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c466:	2304      	movs	r3, #4
 800c468:	e006      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c46a:	2303      	movs	r3, #3
 800c46c:	e004      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c46e:	2302      	movs	r3, #2
 800c470:	e002      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c472:	2301      	movs	r3, #1
 800c474:	e000      	b.n	800c478 <HAL_GPIO_Init+0x228>
 800c476:	2300      	movs	r3, #0
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	f002 0203 	and.w	r2, r2, #3
 800c47e:	0092      	lsls	r2, r2, #2
 800c480:	4093      	lsls	r3, r2
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	4313      	orrs	r3, r2
 800c486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c488:	4935      	ldr	r1, [pc, #212]	; (800c560 <HAL_GPIO_Init+0x310>)
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	089b      	lsrs	r3, r3, #2
 800c48e:	3302      	adds	r3, #2
 800c490:	69ba      	ldr	r2, [r7, #24]
 800c492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c496:	4b3b      	ldr	r3, [pc, #236]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	43db      	mvns	r3, r3
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c4b2:	69ba      	ldr	r2, [r7, #24]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c4ba:	4a32      	ldr	r2, [pc, #200]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c4c0:	4b30      	ldr	r3, [pc, #192]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	43db      	mvns	r3, r3
 800c4ca:	69ba      	ldr	r2, [r7, #24]
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c4dc:	69ba      	ldr	r2, [r7, #24]
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c4e4:	4a27      	ldr	r2, [pc, #156]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c4ea:	4b26      	ldr	r3, [pc, #152]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	43db      	mvns	r3, r3
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c506:	69ba      	ldr	r2, [r7, #24]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c50e:	4a1d      	ldr	r2, [pc, #116]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c514:	4b1b      	ldr	r3, [pc, #108]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	43db      	mvns	r3, r3
 800c51e:	69ba      	ldr	r2, [r7, #24]
 800c520:	4013      	ands	r3, r2
 800c522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c530:	69ba      	ldr	r2, [r7, #24]
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	4313      	orrs	r3, r2
 800c536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c538:	4a12      	ldr	r2, [pc, #72]	; (800c584 <HAL_GPIO_Init+0x334>)
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	3301      	adds	r3, #1
 800c542:	61fb      	str	r3, [r7, #28]
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	2b0f      	cmp	r3, #15
 800c548:	f67f ae90 	bls.w	800c26c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c54c:	bf00      	nop
 800c54e:	bf00      	nop
 800c550:	3724      	adds	r7, #36	; 0x24
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	40023800 	.word	0x40023800
 800c560:	40013800 	.word	0x40013800
 800c564:	40020000 	.word	0x40020000
 800c568:	40020400 	.word	0x40020400
 800c56c:	40020800 	.word	0x40020800
 800c570:	40020c00 	.word	0x40020c00
 800c574:	40021000 	.word	0x40021000
 800c578:	40021400 	.word	0x40021400
 800c57c:	40021800 	.word	0x40021800
 800c580:	40021c00 	.word	0x40021c00
 800c584:	40013c00 	.word	0x40013c00

0800c588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	460b      	mov	r3, r1
 800c592:	807b      	strh	r3, [r7, #2]
 800c594:	4613      	mov	r3, r2
 800c596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c598:	787b      	ldrb	r3, [r7, #1]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d003      	beq.n	800c5a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c59e:	887a      	ldrh	r2, [r7, #2]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c5a4:	e003      	b.n	800c5ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c5a6:	887b      	ldrh	r3, [r7, #2]
 800c5a8:	041a      	lsls	r2, r3, #16
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	619a      	str	r2, [r3, #24]
}
 800c5ae:	bf00      	nop
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
	...

0800c5bc <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e043      	b.n	800c65a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f7f8 fb9c 	bl	8004d24 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	3308      	adds	r3, #8
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	f003 f992 	bl	800f920 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	461a      	mov	r2, r3
 800c606:	68b9      	ldr	r1, [r7, #8]
 800c608:	f003 f9dc 	bl	800f9c4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6858      	ldr	r0, [r3, #4]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	689a      	ldr	r2, [r3, #8]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	f003 fa11 	bl	800fa40 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	6892      	ldr	r2, [r2, #8]
 800c626:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	6892      	ldr	r2, [r2, #8]
 800c632:	f041 0101 	orr.w	r1, r1, #1
 800c636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c642:	4b08      	ldr	r3, [pc, #32]	; (800c664 <HAL_NOR_Init+0xa8>)
 800c644:	2200      	movs	r2, #0
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	e002      	b.n	800c650 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c64a:	4b06      	ldr	r3, [pc, #24]	; (800c664 <HAL_NOR_Init+0xa8>)
 800c64c:	2201      	movs	r2, #1
 800c64e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20004868 	.word	0x20004868

0800c668 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66a:	b08f      	sub	sp, #60	; 0x3c
 800c66c:	af0a      	add	r7, sp, #40	; 0x28
 800c66e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e10f      	b.n	800c89a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d106      	bne.n	800c69a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f009 fa3d 	bl	8015b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2203      	movs	r2, #3
 800c69e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f003 fb16 	bl	800fcea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	603b      	str	r3, [r7, #0]
 800c6c4:	687e      	ldr	r6, [r7, #4]
 800c6c6:	466d      	mov	r5, sp
 800c6c8:	f106 0410 	add.w	r4, r6, #16
 800c6cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c6d8:	e885 0003 	stmia.w	r5, {r0, r1}
 800c6dc:	1d33      	adds	r3, r6, #4
 800c6de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6e0:	6838      	ldr	r0, [r7, #0]
 800c6e2:	f003 f9ed 	bl	800fac0 <USB_CoreInit>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e0d0      	b.n	800c89a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f003 fb04 	bl	800fd0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c704:	2300      	movs	r3, #0
 800c706:	73fb      	strb	r3, [r7, #15]
 800c708:	e04a      	b.n	800c7a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c70a:	7bfa      	ldrb	r2, [r7, #15]
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	4613      	mov	r3, r2
 800c710:	00db      	lsls	r3, r3, #3
 800c712:	1a9b      	subs	r3, r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	440b      	add	r3, r1
 800c718:	333d      	adds	r3, #61	; 0x3d
 800c71a:	2201      	movs	r2, #1
 800c71c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c71e:	7bfa      	ldrb	r2, [r7, #15]
 800c720:	6879      	ldr	r1, [r7, #4]
 800c722:	4613      	mov	r3, r2
 800c724:	00db      	lsls	r3, r3, #3
 800c726:	1a9b      	subs	r3, r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	440b      	add	r3, r1
 800c72c:	333c      	adds	r3, #60	; 0x3c
 800c72e:	7bfa      	ldrb	r2, [r7, #15]
 800c730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c732:	7bfa      	ldrb	r2, [r7, #15]
 800c734:	7bfb      	ldrb	r3, [r7, #15]
 800c736:	b298      	uxth	r0, r3
 800c738:	6879      	ldr	r1, [r7, #4]
 800c73a:	4613      	mov	r3, r2
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	1a9b      	subs	r3, r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	440b      	add	r3, r1
 800c744:	3342      	adds	r3, #66	; 0x42
 800c746:	4602      	mov	r2, r0
 800c748:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c74a:	7bfa      	ldrb	r2, [r7, #15]
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	4613      	mov	r3, r2
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	1a9b      	subs	r3, r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	440b      	add	r3, r1
 800c758:	333f      	adds	r3, #63	; 0x3f
 800c75a:	2200      	movs	r2, #0
 800c75c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c75e:	7bfa      	ldrb	r2, [r7, #15]
 800c760:	6879      	ldr	r1, [r7, #4]
 800c762:	4613      	mov	r3, r2
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	1a9b      	subs	r3, r3, r2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	440b      	add	r3, r1
 800c76c:	3344      	adds	r3, #68	; 0x44
 800c76e:	2200      	movs	r2, #0
 800c770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c772:	7bfa      	ldrb	r2, [r7, #15]
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	4613      	mov	r3, r2
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	1a9b      	subs	r3, r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	440b      	add	r3, r1
 800c780:	3348      	adds	r3, #72	; 0x48
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c786:	7bfa      	ldrb	r2, [r7, #15]
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	4613      	mov	r3, r2
 800c78c:	00db      	lsls	r3, r3, #3
 800c78e:	1a9b      	subs	r3, r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	440b      	add	r3, r1
 800c794:	3350      	adds	r3, #80	; 0x50
 800c796:	2200      	movs	r2, #0
 800c798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c79a:	7bfb      	ldrb	r3, [r7, #15]
 800c79c:	3301      	adds	r3, #1
 800c79e:	73fb      	strb	r3, [r7, #15]
 800c7a0:	7bfa      	ldrb	r2, [r7, #15]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d3af      	bcc.n	800c70a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73fb      	strb	r3, [r7, #15]
 800c7ae:	e044      	b.n	800c83a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c7b0:	7bfa      	ldrb	r2, [r7, #15]
 800c7b2:	6879      	ldr	r1, [r7, #4]
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	00db      	lsls	r3, r3, #3
 800c7b8:	1a9b      	subs	r3, r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	440b      	add	r3, r1
 800c7be:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c7c6:	7bfa      	ldrb	r2, [r7, #15]
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	1a9b      	subs	r3, r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	440b      	add	r3, r1
 800c7d4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c7d8:	7bfa      	ldrb	r2, [r7, #15]
 800c7da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c7dc:	7bfa      	ldrb	r2, [r7, #15]
 800c7de:	6879      	ldr	r1, [r7, #4]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	1a9b      	subs	r3, r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	440b      	add	r3, r1
 800c7ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c7f2:	7bfa      	ldrb	r2, [r7, #15]
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	00db      	lsls	r3, r3, #3
 800c7fa:	1a9b      	subs	r3, r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	440b      	add	r3, r1
 800c800:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c804:	2200      	movs	r2, #0
 800c806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c808:	7bfa      	ldrb	r2, [r7, #15]
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	4613      	mov	r3, r2
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	1a9b      	subs	r3, r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	440b      	add	r3, r1
 800c816:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c81e:	7bfa      	ldrb	r2, [r7, #15]
 800c820:	6879      	ldr	r1, [r7, #4]
 800c822:	4613      	mov	r3, r2
 800c824:	00db      	lsls	r3, r3, #3
 800c826:	1a9b      	subs	r3, r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	440b      	add	r3, r1
 800c82c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c830:	2200      	movs	r2, #0
 800c832:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	3301      	adds	r3, #1
 800c838:	73fb      	strb	r3, [r7, #15]
 800c83a:	7bfa      	ldrb	r2, [r7, #15]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d3b5      	bcc.n	800c7b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	603b      	str	r3, [r7, #0]
 800c84a:	687e      	ldr	r6, [r7, #4]
 800c84c:	466d      	mov	r5, sp
 800c84e:	f106 0410 	add.w	r4, r6, #16
 800c852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c85a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c85e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c862:	1d33      	adds	r3, r6, #4
 800c864:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c866:	6838      	ldr	r0, [r7, #0]
 800c868:	f003 fa7a 	bl	800fd60 <USB_DevInit>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2202      	movs	r2, #2
 800c876:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e00d      	b.n	800c89a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4618      	mov	r0, r3
 800c894:	f004 fac2 	bl	8010e1c <USB_DevDisconnect>

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d101      	bne.n	800c8be <HAL_PCD_Start+0x1c>
 800c8ba:	2302      	movs	r3, #2
 800c8bc:	e020      	b.n	800c900 <HAL_PCD_Start+0x5e>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d109      	bne.n	800c8e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d005      	beq.n	800c8e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f003 f9ee 	bl	800fcc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f004 fa72 	bl	8010dda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c908:	b590      	push	{r4, r7, lr}
 800c90a:	b08d      	sub	sp, #52	; 0x34
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4618      	mov	r0, r3
 800c920:	f004 fb30 	bl	8010f84 <USB_GetMode>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	f040 839d 	bne.w	800d066 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4618      	mov	r0, r3
 800c932:	f004 fa94 	bl	8010e5e <USB_ReadInterrupts>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f000 8393 	beq.w	800d064 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4618      	mov	r0, r3
 800c944:	f004 fa8b 	bl	8010e5e <USB_ReadInterrupts>
 800c948:	4603      	mov	r3, r0
 800c94a:	f003 0302 	and.w	r3, r3, #2
 800c94e:	2b02      	cmp	r3, #2
 800c950:	d107      	bne.n	800c962 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	695a      	ldr	r2, [r3, #20]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f002 0202 	and.w	r2, r2, #2
 800c960:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4618      	mov	r0, r3
 800c968:	f004 fa79 	bl	8010e5e <USB_ReadInterrupts>
 800c96c:	4603      	mov	r3, r0
 800c96e:	f003 0310 	and.w	r3, r3, #16
 800c972:	2b10      	cmp	r3, #16
 800c974:	d161      	bne.n	800ca3a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	699a      	ldr	r2, [r3, #24]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f022 0210 	bic.w	r2, r2, #16
 800c984:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	f003 020f 	and.w	r2, r3, #15
 800c992:	4613      	mov	r3, r2
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	0c5b      	lsrs	r3, r3, #17
 800c9aa:	f003 030f 	and.w	r3, r3, #15
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d124      	bne.n	800c9fc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c9b2:	69ba      	ldr	r2, [r7, #24]
 800c9b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d035      	beq.n	800ca2a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	091b      	lsrs	r3, r3, #4
 800c9c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c9c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	6a38      	ldr	r0, [r7, #32]
 800c9d2:	f004 f8df 	bl	8010b94 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	68da      	ldr	r2, [r3, #12]
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	091b      	lsrs	r3, r3, #4
 800c9de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9e2:	441a      	add	r2, r3
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	699a      	ldr	r2, [r3, #24]
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	091b      	lsrs	r3, r3, #4
 800c9f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9f4:	441a      	add	r2, r3
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	619a      	str	r2, [r3, #24]
 800c9fa:	e016      	b.n	800ca2a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	0c5b      	lsrs	r3, r3, #17
 800ca00:	f003 030f 	and.w	r3, r3, #15
 800ca04:	2b06      	cmp	r3, #6
 800ca06:	d110      	bne.n	800ca2a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ca0e:	2208      	movs	r2, #8
 800ca10:	4619      	mov	r1, r3
 800ca12:	6a38      	ldr	r0, [r7, #32]
 800ca14:	f004 f8be 	bl	8010b94 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	699a      	ldr	r2, [r3, #24]
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	091b      	lsrs	r3, r3, #4
 800ca20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca24:	441a      	add	r2, r3
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	699a      	ldr	r2, [r3, #24]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f042 0210 	orr.w	r2, r2, #16
 800ca38:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f004 fa0d 	bl	8010e5e <USB_ReadInterrupts>
 800ca44:	4603      	mov	r3, r0
 800ca46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ca4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ca4e:	d16e      	bne.n	800cb2e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800ca50:	2300      	movs	r3, #0
 800ca52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f004 fa13 	bl	8010e84 <USB_ReadDevAllOutEpInterrupt>
 800ca5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ca60:	e062      	b.n	800cb28 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ca62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca64:	f003 0301 	and.w	r3, r3, #1
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d057      	beq.n	800cb1c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	4611      	mov	r1, r2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f004 fa38 	bl	8010eec <USB_ReadDevOutEPInterrupt>
 800ca7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f003 0301 	and.w	r3, r3, #1
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00c      	beq.n	800caa2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	4413      	add	r3, r2
 800ca90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca94:	461a      	mov	r2, r3
 800ca96:	2301      	movs	r3, #1
 800ca98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ca9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 fdb1 	bl	800d604 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f003 0308 	and.w	r3, r3, #8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00c      	beq.n	800cac6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab8:	461a      	mov	r2, r3
 800caba:	2308      	movs	r3, #8
 800cabc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800cabe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 feab 	bl	800d81c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d008      	beq.n	800cae2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cadc:	461a      	mov	r2, r3
 800cade:	2310      	movs	r3, #16
 800cae0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	f003 0320 	and.w	r3, r3, #32
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d008      	beq.n	800cafe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf8:	461a      	mov	r2, r3
 800cafa:	2320      	movs	r3, #32
 800cafc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d009      	beq.n	800cb1c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	015a      	lsls	r2, r3, #5
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb14:	461a      	mov	r2, r3
 800cb16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb1a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1e:	3301      	adds	r3, #1
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	085b      	lsrs	r3, r3, #1
 800cb26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d199      	bne.n	800ca62 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f004 f993 	bl	8010e5e <USB_ReadInterrupts>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb42:	f040 80c0 	bne.w	800ccc6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f004 f9b4 	bl	8010eb8 <USB_ReadDevAllInEpInterrupt>
 800cb50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800cb56:	e0b2      	b.n	800ccbe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 80a7 	beq.w	800ccb2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb6a:	b2d2      	uxtb	r2, r2
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f004 f9da 	bl	8010f28 <USB_ReadDevInEPInterrupt>
 800cb74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d057      	beq.n	800cc30 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	f003 030f 	and.w	r3, r3, #15
 800cb86:	2201      	movs	r2, #1
 800cb88:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	69f9      	ldr	r1, [r7, #28]
 800cb9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cba0:	4013      	ands	r3, r2
 800cba2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d132      	bne.n	800cc24 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	440b      	add	r3, r1
 800cbcc:	3348      	adds	r3, #72	; 0x48
 800cbce:	6819      	ldr	r1, [r3, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	1a9b      	subs	r3, r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4403      	add	r3, r0
 800cbde:	3344      	adds	r3, #68	; 0x44
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4419      	add	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbe8:	4613      	mov	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	1a9b      	subs	r3, r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4403      	add	r3, r0
 800cbf2:	3348      	adds	r3, #72	; 0x48
 800cbf4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d113      	bne.n	800cc24 <HAL_PCD_IRQHandler+0x31c>
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc00:	4613      	mov	r3, r2
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	1a9b      	subs	r3, r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	440b      	add	r3, r1
 800cc0a:	3350      	adds	r3, #80	; 0x50
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d108      	bne.n	800cc24 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6818      	ldr	r0, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	2101      	movs	r1, #1
 800cc20:	f004 f9e2 	bl	8010fe8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f008 fff3 	bl	8015c16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f003 0308 	and.w	r3, r3, #8
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d008      	beq.n	800cc4c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3c:	015a      	lsls	r2, r3, #5
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	4413      	add	r3, r2
 800cc42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc46:	461a      	mov	r2, r3
 800cc48:	2308      	movs	r3, #8
 800cc4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	f003 0310 	and.w	r3, r3, #16
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d008      	beq.n	800cc68 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc58:	015a      	lsls	r2, r3, #5
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc62:	461a      	mov	r2, r3
 800cc64:	2310      	movs	r3, #16
 800cc66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d008      	beq.n	800cc84 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc74:	015a      	lsls	r2, r3, #5
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	4413      	add	r3, r2
 800cc7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc7e:	461a      	mov	r2, r3
 800cc80:	2340      	movs	r3, #64	; 0x40
 800cc82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d008      	beq.n	800cca0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	015a      	lsls	r2, r3, #5
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	4413      	add	r3, r2
 800cc96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ccaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 fc1b 	bl	800d4e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ccb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccba:	085b      	lsrs	r3, r3, #1
 800ccbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f47f af49 	bne.w	800cb58 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f004 f8c7 	bl	8010e5e <USB_ReadInterrupts>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccda:	d122      	bne.n	800cd22 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	69fa      	ldr	r2, [r7, #28]
 800cce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccea:	f023 0301 	bic.w	r3, r3, #1
 800ccee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d108      	bne.n	800cd0c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cd02:	2100      	movs	r1, #0
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fe27 	bl	800d958 <HAL_PCDEx_LPM_Callback>
 800cd0a:	e002      	b.n	800cd12 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f008 fff9 	bl	8015d04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	695a      	ldr	r2, [r3, #20]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cd20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f004 f899 	bl	8010e5e <USB_ReadInterrupts>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd36:	d112      	bne.n	800cd5e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d102      	bne.n	800cd4e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f008 ffb5 	bl	8015cb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	695a      	ldr	r2, [r3, #20]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800cd5c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f004 f87b 	bl	8010e5e <USB_ReadInterrupts>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd72:	f040 80c7 	bne.w	800cf04 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd84:	f023 0301 	bic.w	r3, r3, #1
 800cd88:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2110      	movs	r1, #16
 800cd90:	4618      	mov	r0, r3
 800cd92:	f003 f949 	bl	8010028 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd96:	2300      	movs	r3, #0
 800cd98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd9a:	e056      	b.n	800ce4a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	015a      	lsls	r2, r3, #5
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	4413      	add	r3, r2
 800cda4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda8:	461a      	mov	r2, r3
 800cdaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cdae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdc0:	0151      	lsls	r1, r2, #5
 800cdc2:	69fa      	ldr	r2, [r7, #28]
 800cdc4:	440a      	add	r2, r1
 800cdc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cdce:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cde0:	0151      	lsls	r1, r2, #5
 800cde2:	69fa      	ldr	r2, [r7, #28]
 800cde4:	440a      	add	r2, r1
 800cde6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cdee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce02:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce14:	0151      	lsls	r1, r2, #5
 800ce16:	69fa      	ldr	r2, [r7, #28]
 800ce18:	440a      	add	r2, r1
 800ce1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	015a      	lsls	r2, r3, #5
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce34:	0151      	lsls	r1, r2, #5
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	440a      	add	r2, r1
 800ce3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce42:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	3301      	adds	r3, #1
 800ce48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d3a3      	bcc.n	800cd9c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce5a:	69db      	ldr	r3, [r3, #28]
 800ce5c:	69fa      	ldr	r2, [r7, #28]
 800ce5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce62:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ce66:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d016      	beq.n	800ce9e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce7a:	69fa      	ldr	r2, [r7, #28]
 800ce7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce80:	f043 030b 	orr.w	r3, r3, #11
 800ce84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce90:	69fa      	ldr	r2, [r7, #28]
 800ce92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce96:	f043 030b 	orr.w	r3, r3, #11
 800ce9a:	6453      	str	r3, [r2, #68]	; 0x44
 800ce9c:	e015      	b.n	800ceca <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea4:	695b      	ldr	r3, [r3, #20]
 800cea6:	69fa      	ldr	r2, [r7, #28]
 800cea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ceb0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ceb4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	69fa      	ldr	r2, [r7, #28]
 800cec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cec4:	f043 030b 	orr.w	r3, r3, #11
 800cec8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	69fa      	ldr	r2, [r7, #28]
 800ced4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ced8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cedc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6818      	ldr	r0, [r3, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ceee:	461a      	mov	r2, r3
 800cef0:	f004 f87a 	bl	8010fe8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	695a      	ldr	r2, [r3, #20]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cf02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f003 ffa8 	bl	8010e5e <USB_ReadInterrupts>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf18:	d124      	bne.n	800cf64 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f004 f83e 	bl	8010fa0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f003 f8de 	bl	80100ea <USB_GetDevSpeed>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	461a      	mov	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681c      	ldr	r4, [r3, #0]
 800cf3a:	f001 f951 	bl	800e1e0 <HAL_RCC_GetHCLKFreq>
 800cf3e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	461a      	mov	r2, r3
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f002 fe1b 	bl	800fb84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f008 fe89 	bl	8015c66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	695a      	ldr	r2, [r3, #20]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cf62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f003 ff78 	bl	8010e5e <USB_ReadInterrupts>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	f003 0308 	and.w	r3, r3, #8
 800cf74:	2b08      	cmp	r3, #8
 800cf76:	d10a      	bne.n	800cf8e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f008 fe66 	bl	8015c4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	695a      	ldr	r2, [r3, #20]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f002 0208 	and.w	r2, r2, #8
 800cf8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f003 ff63 	bl	8010e5e <USB_ReadInterrupts>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfa2:	d10f      	bne.n	800cfc4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f008 fec8 	bl	8015d44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	695a      	ldr	r2, [r3, #20]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cfc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f003 ff48 	bl	8010e5e <USB_ReadInterrupts>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfd8:	d10f      	bne.n	800cffa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f008 fe9b 	bl	8015d20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	695a      	ldr	r2, [r3, #20]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4618      	mov	r0, r3
 800d000:	f003 ff2d 	bl	8010e5e <USB_ReadInterrupts>
 800d004:	4603      	mov	r3, r0
 800d006:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d00e:	d10a      	bne.n	800d026 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f008 fea9 	bl	8015d68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	695a      	ldr	r2, [r3, #20]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f003 ff17 	bl	8010e5e <USB_ReadInterrupts>
 800d030:	4603      	mov	r3, r0
 800d032:	f003 0304 	and.w	r3, r3, #4
 800d036:	2b04      	cmp	r3, #4
 800d038:	d115      	bne.n	800d066 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f008 fe99 	bl	8015d84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6859      	ldr	r1, [r3, #4]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	69ba      	ldr	r2, [r7, #24]
 800d05e:	430a      	orrs	r2, r1
 800d060:	605a      	str	r2, [r3, #4]
 800d062:	e000      	b.n	800d066 <HAL_PCD_IRQHandler+0x75e>
      return;
 800d064:	bf00      	nop
    }
  }
}
 800d066:	3734      	adds	r7, #52	; 0x34
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd90      	pop	{r4, r7, pc}

0800d06c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d101      	bne.n	800d086 <HAL_PCD_SetAddress+0x1a>
 800d082:	2302      	movs	r3, #2
 800d084:	e013      	b.n	800d0ae <HAL_PCD_SetAddress+0x42>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	78fa      	ldrb	r2, [r7, #3]
 800d092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	78fa      	ldrb	r2, [r7, #3]
 800d09c:	4611      	mov	r1, r2
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f003 fe75 	bl	8010d8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	4608      	mov	r0, r1
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	70fb      	strb	r3, [r7, #3]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	803b      	strh	r3, [r7, #0]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d0d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da0f      	bge.n	800d0fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	f003 020f 	and.w	r2, r3, #15
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	1a9b      	subs	r3, r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	3338      	adds	r3, #56	; 0x38
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	705a      	strb	r2, [r3, #1]
 800d0fa:	e00f      	b.n	800d11c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0fc:	78fb      	ldrb	r3, [r7, #3]
 800d0fe:	f003 020f 	and.w	r2, r3, #15
 800d102:	4613      	mov	r3, r2
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	1a9b      	subs	r3, r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	4413      	add	r3, r2
 800d112:	3304      	adds	r3, #4
 800d114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d11c:	78fb      	ldrb	r3, [r7, #3]
 800d11e:	f003 030f 	and.w	r3, r3, #15
 800d122:	b2da      	uxtb	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d128:	883a      	ldrh	r2, [r7, #0]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	78ba      	ldrb	r2, [r7, #2]
 800d132:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	785b      	ldrb	r3, [r3, #1]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d004      	beq.n	800d146 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	b29a      	uxth	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d146:	78bb      	ldrb	r3, [r7, #2]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d102      	bne.n	800d152 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d101      	bne.n	800d160 <HAL_PCD_EP_Open+0xaa>
 800d15c:	2302      	movs	r3, #2
 800d15e:	e00e      	b.n	800d17e <HAL_PCD_EP_Open+0xc8>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68f9      	ldr	r1, [r7, #12]
 800d16e:	4618      	mov	r0, r3
 800d170:	f002 ffe0 	bl	8010134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d17c:	7afb      	ldrb	r3, [r7, #11]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b084      	sub	sp, #16
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	460b      	mov	r3, r1
 800d190:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d196:	2b00      	cmp	r3, #0
 800d198:	da0f      	bge.n	800d1ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d19a:	78fb      	ldrb	r3, [r7, #3]
 800d19c:	f003 020f 	and.w	r2, r3, #15
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	3338      	adds	r3, #56	; 0x38
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	705a      	strb	r2, [r3, #1]
 800d1b8:	e00f      	b.n	800d1da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	f003 020f 	and.w	r2, r3, #15
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	1a9b      	subs	r3, r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d1da:	78fb      	ldrb	r3, [r7, #3]
 800d1dc:	f003 030f 	and.w	r3, r3, #15
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d101      	bne.n	800d1f4 <HAL_PCD_EP_Close+0x6e>
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	e00e      	b.n	800d212 <HAL_PCD_EP_Close+0x8c>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68f9      	ldr	r1, [r7, #12]
 800d202:	4618      	mov	r0, r3
 800d204:	f003 f81e 	bl	8010244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b086      	sub	sp, #24
 800d21e:	af00      	add	r7, sp, #0
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	603b      	str	r3, [r7, #0]
 800d226:	460b      	mov	r3, r1
 800d228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d22a:	7afb      	ldrb	r3, [r7, #11]
 800d22c:	f003 020f 	and.w	r2, r3, #15
 800d230:	4613      	mov	r3, r2
 800d232:	00db      	lsls	r3, r3, #3
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	4413      	add	r3, r2
 800d240:	3304      	adds	r3, #4
 800d242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	2200      	movs	r2, #0
 800d254:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2200      	movs	r2, #0
 800d25a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d25c:	7afb      	ldrb	r3, [r7, #11]
 800d25e:	f003 030f 	and.w	r3, r3, #15
 800d262:	b2da      	uxtb	r2, r3
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d102      	bne.n	800d276 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d276:	7afb      	ldrb	r3, [r7, #11]
 800d278:	f003 030f 	and.w	r3, r3, #15
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d109      	bne.n	800d294 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6818      	ldr	r0, [r3, #0]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	461a      	mov	r2, r3
 800d28c:	6979      	ldr	r1, [r7, #20]
 800d28e:	f003 faf9 	bl	8010884 <USB_EP0StartXfer>
 800d292:	e008      	b.n	800d2a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6818      	ldr	r0, [r3, #0]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	461a      	mov	r2, r3
 800d2a0:	6979      	ldr	r1, [r7, #20]
 800d2a2:	f003 f8ab 	bl	80103fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d2bc:	78fb      	ldrb	r3, [r7, #3]
 800d2be:	f003 020f 	and.w	r2, r3, #15
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	1a9b      	subs	r3, r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	440b      	add	r3, r1
 800d2ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d2d2:	681b      	ldr	r3, [r3, #0]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	607a      	str	r2, [r7, #4]
 800d2ea:	603b      	str	r3, [r7, #0]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2f0:	7afb      	ldrb	r3, [r7, #11]
 800d2f2:	f003 020f 	and.w	r2, r3, #15
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	00db      	lsls	r3, r3, #3
 800d2fa:	1a9b      	subs	r3, r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	3338      	adds	r3, #56	; 0x38
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	4413      	add	r3, r2
 800d304:	3304      	adds	r3, #4
 800d306:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2200      	movs	r2, #0
 800d318:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	2201      	movs	r2, #1
 800d31e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d320:	7afb      	ldrb	r3, [r7, #11]
 800d322:	f003 030f 	and.w	r3, r3, #15
 800d326:	b2da      	uxtb	r2, r3
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d102      	bne.n	800d33a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d33a:	7afb      	ldrb	r3, [r7, #11]
 800d33c:	f003 030f 	and.w	r3, r3, #15
 800d340:	2b00      	cmp	r3, #0
 800d342:	d109      	bne.n	800d358 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6818      	ldr	r0, [r3, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	461a      	mov	r2, r3
 800d350:	6979      	ldr	r1, [r7, #20]
 800d352:	f003 fa97 	bl	8010884 <USB_EP0StartXfer>
 800d356:	e008      	b.n	800d36a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	b2db      	uxtb	r3, r3
 800d362:	461a      	mov	r2, r3
 800d364:	6979      	ldr	r1, [r7, #20]
 800d366:	f003 f849 	bl	80103fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3718      	adds	r7, #24
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	f003 020f 	and.w	r2, r3, #15
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d901      	bls.n	800d392 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	e050      	b.n	800d434 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d396:	2b00      	cmp	r3, #0
 800d398:	da0f      	bge.n	800d3ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d39a:	78fb      	ldrb	r3, [r7, #3]
 800d39c:	f003 020f 	and.w	r2, r3, #15
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	1a9b      	subs	r3, r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	3338      	adds	r3, #56	; 0x38
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	705a      	strb	r2, [r3, #1]
 800d3b8:	e00d      	b.n	800d3d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d3ba:	78fa      	ldrb	r2, [r7, #3]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	1a9b      	subs	r3, r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	f003 030f 	and.w	r3, r3, #15
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d101      	bne.n	800d3f6 <HAL_PCD_EP_SetStall+0x82>
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	e01e      	b.n	800d434 <HAL_PCD_EP_SetStall+0xc0>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	4618      	mov	r0, r3
 800d406:	f003 fbee 	bl	8010be6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d40a:	78fb      	ldrb	r3, [r7, #3]
 800d40c:	f003 030f 	and.w	r3, r3, #15
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	b2d9      	uxtb	r1, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d424:	461a      	mov	r2, r3
 800d426:	f003 fddf 	bl	8010fe8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d448:	78fb      	ldrb	r3, [r7, #3]
 800d44a:	f003 020f 	and.w	r2, r3, #15
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	429a      	cmp	r2, r3
 800d454:	d901      	bls.n	800d45a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	e042      	b.n	800d4e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d45a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da0f      	bge.n	800d482 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d462:	78fb      	ldrb	r3, [r7, #3]
 800d464:	f003 020f 	and.w	r2, r3, #15
 800d468:	4613      	mov	r3, r2
 800d46a:	00db      	lsls	r3, r3, #3
 800d46c:	1a9b      	subs	r3, r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	3338      	adds	r3, #56	; 0x38
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	4413      	add	r3, r2
 800d476:	3304      	adds	r3, #4
 800d478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2201      	movs	r2, #1
 800d47e:	705a      	strb	r2, [r3, #1]
 800d480:	e00f      	b.n	800d4a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d482:	78fb      	ldrb	r3, [r7, #3]
 800d484:	f003 020f 	and.w	r2, r3, #15
 800d488:	4613      	mov	r3, r2
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	1a9b      	subs	r3, r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	4413      	add	r3, r2
 800d498:	3304      	adds	r3, #4
 800d49a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d4a8:	78fb      	ldrb	r3, [r7, #3]
 800d4aa:	f003 030f 	and.w	r3, r3, #15
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d101      	bne.n	800d4c2 <HAL_PCD_EP_ClrStall+0x86>
 800d4be:	2302      	movs	r3, #2
 800d4c0:	e00e      	b.n	800d4e0 <HAL_PCD_EP_ClrStall+0xa4>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68f9      	ldr	r1, [r7, #12]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f003 fbf6 	bl	8010cc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	; 0x28
 800d4ec:	af02      	add	r7, sp, #8
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	4613      	mov	r3, r2
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	1a9b      	subs	r3, r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	3338      	adds	r3, #56	; 0x38
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	4413      	add	r3, r2
 800d50c:	3304      	adds	r3, #4
 800d50e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	699a      	ldr	r2, [r3, #24]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	695b      	ldr	r3, [r3, #20]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d901      	bls.n	800d520 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	e06c      	b.n	800d5fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	695a      	ldr	r2, [r3, #20]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	69fa      	ldr	r2, [r7, #28]
 800d532:	429a      	cmp	r2, r3
 800d534:	d902      	bls.n	800d53c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	3303      	adds	r3, #3
 800d540:	089b      	lsrs	r3, r3, #2
 800d542:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d544:	e02b      	b.n	800d59e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	695a      	ldr	r2, [r3, #20]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	69fa      	ldr	r2, [r7, #28]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d902      	bls.n	800d562 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	3303      	adds	r3, #3
 800d566:	089b      	lsrs	r3, r3, #2
 800d568:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	68d9      	ldr	r1, [r3, #12]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	b2da      	uxtb	r2, r3
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	4603      	mov	r3, r0
 800d580:	6978      	ldr	r0, [r7, #20]
 800d582:	f003 fad2 	bl	8010b2a <USB_WritePacket>

    ep->xfer_buff  += len;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	68da      	ldr	r2, [r3, #12]
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	441a      	add	r2, r3
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	699a      	ldr	r2, [r3, #24]
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	441a      	add	r2, r3
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	015a      	lsls	r2, r3, #5
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	69ba      	ldr	r2, [r7, #24]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d809      	bhi.n	800d5c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	699a      	ldr	r2, [r3, #24]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d203      	bcs.n	800d5c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1be      	bne.n	800d546 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	695a      	ldr	r2, [r3, #20]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d811      	bhi.n	800d5f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	2201      	movs	r2, #1
 800d5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	43db      	mvns	r3, r3
 800d5ee:	6939      	ldr	r1, [r7, #16]
 800d5f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3720      	adds	r7, #32
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	333c      	adds	r3, #60	; 0x3c
 800d61c:	3304      	adds	r3, #4
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	2b01      	cmp	r3, #1
 800d638:	f040 80a0 	bne.w	800d77c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	f003 0308 	and.w	r3, r3, #8
 800d642:	2b00      	cmp	r3, #0
 800d644:	d015      	beq.n	800d672 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	4a72      	ldr	r2, [pc, #456]	; (800d814 <PCD_EP_OutXfrComplete_int+0x210>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	f240 80dd 	bls.w	800d80a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 80d7 	beq.w	800d80a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	4413      	add	r3, r2
 800d664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d668:	461a      	mov	r2, r3
 800d66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d66e:	6093      	str	r3, [r2, #8]
 800d670:	e0cb      	b.n	800d80a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	f003 0320 	and.w	r3, r3, #32
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d009      	beq.n	800d690 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	015a      	lsls	r2, r3, #5
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	4413      	add	r3, r2
 800d684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d688:	461a      	mov	r2, r3
 800d68a:	2320      	movs	r3, #32
 800d68c:	6093      	str	r3, [r2, #8]
 800d68e:	e0bc      	b.n	800d80a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d696:	2b00      	cmp	r3, #0
 800d698:	f040 80b7 	bne.w	800d80a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4a5d      	ldr	r2, [pc, #372]	; (800d814 <PCD_EP_OutXfrComplete_int+0x210>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d90f      	bls.n	800d6c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00a      	beq.n	800d6c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6c0:	6093      	str	r3, [r2, #8]
 800d6c2:	e0a2      	b.n	800d80a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d6c4:	6879      	ldr	r1, [r7, #4]
 800d6c6:	683a      	ldr	r2, [r7, #0]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	1a9b      	subs	r3, r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	440b      	add	r3, r1
 800d6d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d6d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	0159      	lsls	r1, r3, #5
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	440b      	add	r3, r1
 800d6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d6ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4403      	add	r3, r0
 800d6fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d6fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d700:	6879      	ldr	r1, [r7, #4]
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	4613      	mov	r3, r2
 800d706:	00db      	lsls	r3, r3, #3
 800d708:	1a9b      	subs	r3, r3, r2
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	440b      	add	r3, r1
 800d70e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d712:	6819      	ldr	r1, [r3, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	4613      	mov	r3, r2
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	1a9b      	subs	r3, r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4403      	add	r3, r0
 800d722:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4419      	add	r1, r3
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	683a      	ldr	r2, [r7, #0]
 800d72e:	4613      	mov	r3, r2
 800d730:	00db      	lsls	r3, r3, #3
 800d732:	1a9b      	subs	r3, r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4403      	add	r3, r0
 800d738:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d73c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d114      	bne.n	800d76e <PCD_EP_OutXfrComplete_int+0x16a>
 800d744:	6879      	ldr	r1, [r7, #4]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	4613      	mov	r3, r2
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	1a9b      	subs	r3, r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	440b      	add	r3, r1
 800d752:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d108      	bne.n	800d76e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d766:	461a      	mov	r2, r3
 800d768:	2101      	movs	r1, #1
 800d76a:	f003 fc3d 	bl	8010fe8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	b2db      	uxtb	r3, r3
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f008 fa33 	bl	8015be0 <HAL_PCD_DataOutStageCallback>
 800d77a:	e046      	b.n	800d80a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4a26      	ldr	r2, [pc, #152]	; (800d818 <PCD_EP_OutXfrComplete_int+0x214>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d124      	bne.n	800d7ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00a      	beq.n	800d7a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	015a      	lsls	r2, r3, #5
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	4413      	add	r3, r2
 800d796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d79a:	461a      	mov	r2, r3
 800d79c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7a0:	6093      	str	r3, [r2, #8]
 800d7a2:	e032      	b.n	800d80a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	f003 0320 	and.w	r3, r3, #32
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d008      	beq.n	800d7c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	015a      	lsls	r2, r3, #5
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	2320      	movs	r3, #32
 800d7be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f008 fa0a 	bl	8015be0 <HAL_PCD_DataOutStageCallback>
 800d7cc:	e01d      	b.n	800d80a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d114      	bne.n	800d7fe <PCD_EP_OutXfrComplete_int+0x1fa>
 800d7d4:	6879      	ldr	r1, [r7, #4]
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	00db      	lsls	r3, r3, #3
 800d7dc:	1a9b      	subs	r3, r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	440b      	add	r3, r1
 800d7e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d108      	bne.n	800d7fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6818      	ldr	r0, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	f003 fbf5 	bl	8010fe8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	b2db      	uxtb	r3, r3
 800d802:	4619      	mov	r1, r3
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f008 f9eb 	bl	8015be0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	4f54300a 	.word	0x4f54300a
 800d818:	4f54310a 	.word	0x4f54310a

0800d81c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	333c      	adds	r3, #60	; 0x3c
 800d834:	3304      	adds	r3, #4
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	015a      	lsls	r2, r3, #5
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	4413      	add	r3, r2
 800d842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	4a15      	ldr	r2, [pc, #84]	; (800d8a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d90e      	bls.n	800d870 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d009      	beq.n	800d870 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	015a      	lsls	r2, r3, #5
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	4413      	add	r3, r2
 800d864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d868:	461a      	mov	r2, r3
 800d86a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d86e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f008 f9a3 	bl	8015bbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	4a0a      	ldr	r2, [pc, #40]	; (800d8a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d90c      	bls.n	800d898 <PCD_EP_OutSetupPacket_int+0x7c>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d108      	bne.n	800d898 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6818      	ldr	r0, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d890:	461a      	mov	r2, r3
 800d892:	2101      	movs	r1, #1
 800d894:	f003 fba8 	bl	8010fe8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3718      	adds	r7, #24
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	4f54300a 	.word	0x4f54300a

0800d8a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d8c0:	78fb      	ldrb	r3, [r7, #3]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d107      	bne.n	800d8d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d8c6:	883b      	ldrh	r3, [r7, #0]
 800d8c8:	0419      	lsls	r1, r3, #16
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	629a      	str	r2, [r3, #40]	; 0x28
 800d8d4:	e028      	b.n	800d928 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8dc:	0c1b      	lsrs	r3, r3, #16
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73fb      	strb	r3, [r7, #15]
 800d8e8:	e00d      	b.n	800d906 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	3340      	adds	r3, #64	; 0x40
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	0c1b      	lsrs	r3, r3, #16
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	3301      	adds	r3, #1
 800d904:	73fb      	strb	r3, [r7, #15]
 800d906:	7bfa      	ldrb	r2, [r7, #15]
 800d908:	78fb      	ldrb	r3, [r7, #3]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d3ec      	bcc.n	800d8ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d910:	883b      	ldrh	r3, [r7, #0]
 800d912:	0418      	lsls	r0, r3, #16
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6819      	ldr	r1, [r3, #0]
 800d918:	78fb      	ldrb	r3, [r7, #3]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	4302      	orrs	r2, r0
 800d920:	3340      	adds	r3, #64	; 0x40
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	440b      	add	r3, r1
 800d926:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d936:	b480      	push	{r7}
 800d938:	b083      	sub	sp, #12
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	460b      	mov	r3, r1
 800d940:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	887a      	ldrh	r2, [r7, #2]
 800d948:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d964:	bf00      	nop
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d97e:	2301      	movs	r3, #1
 800d980:	e25b      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d075      	beq.n	800da7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d98e:	4ba3      	ldr	r3, [pc, #652]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f003 030c 	and.w	r3, r3, #12
 800d996:	2b04      	cmp	r3, #4
 800d998:	d00c      	beq.n	800d9b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d99a:	4ba0      	ldr	r3, [pc, #640]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d9a2:	2b08      	cmp	r3, #8
 800d9a4:	d112      	bne.n	800d9cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d9a6:	4b9d      	ldr	r3, [pc, #628]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9b2:	d10b      	bne.n	800d9cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9b4:	4b99      	ldr	r3, [pc, #612]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d05b      	beq.n	800da78 <HAL_RCC_OscConfig+0x108>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d157      	bne.n	800da78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e236      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9d4:	d106      	bne.n	800d9e4 <HAL_RCC_OscConfig+0x74>
 800d9d6:	4b91      	ldr	r3, [pc, #580]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a90      	ldr	r2, [pc, #576]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d9dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9e0:	6013      	str	r3, [r2, #0]
 800d9e2:	e01d      	b.n	800da20 <HAL_RCC_OscConfig+0xb0>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d9ec:	d10c      	bne.n	800da08 <HAL_RCC_OscConfig+0x98>
 800d9ee:	4b8b      	ldr	r3, [pc, #556]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a8a      	ldr	r2, [pc, #552]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d9f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d9f8:	6013      	str	r3, [r2, #0]
 800d9fa:	4b88      	ldr	r3, [pc, #544]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a87      	ldr	r2, [pc, #540]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da04:	6013      	str	r3, [r2, #0]
 800da06:	e00b      	b.n	800da20 <HAL_RCC_OscConfig+0xb0>
 800da08:	4b84      	ldr	r3, [pc, #528]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a83      	ldr	r2, [pc, #524]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da12:	6013      	str	r3, [r2, #0]
 800da14:	4b81      	ldr	r3, [pc, #516]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a80      	ldr	r2, [pc, #512]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d013      	beq.n	800da50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da28:	f7fd ff60 	bl	800b8ec <HAL_GetTick>
 800da2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da2e:	e008      	b.n	800da42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da30:	f7fd ff5c 	bl	800b8ec <HAL_GetTick>
 800da34:	4602      	mov	r2, r0
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	2b64      	cmp	r3, #100	; 0x64
 800da3c:	d901      	bls.n	800da42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800da3e:	2303      	movs	r3, #3
 800da40:	e1fb      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da42:	4b76      	ldr	r3, [pc, #472]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d0f0      	beq.n	800da30 <HAL_RCC_OscConfig+0xc0>
 800da4e:	e014      	b.n	800da7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da50:	f7fd ff4c 	bl	800b8ec <HAL_GetTick>
 800da54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800da56:	e008      	b.n	800da6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da58:	f7fd ff48 	bl	800b8ec <HAL_GetTick>
 800da5c:	4602      	mov	r2, r0
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	2b64      	cmp	r3, #100	; 0x64
 800da64:	d901      	bls.n	800da6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800da66:	2303      	movs	r3, #3
 800da68:	e1e7      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800da6a:	4b6c      	ldr	r3, [pc, #432]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1f0      	bne.n	800da58 <HAL_RCC_OscConfig+0xe8>
 800da76:	e000      	b.n	800da7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 0302 	and.w	r3, r3, #2
 800da82:	2b00      	cmp	r3, #0
 800da84:	d063      	beq.n	800db4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800da86:	4b65      	ldr	r3, [pc, #404]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	f003 030c 	and.w	r3, r3, #12
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00b      	beq.n	800daaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800da92:	4b62      	ldr	r3, [pc, #392]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800da9a:	2b08      	cmp	r3, #8
 800da9c:	d11c      	bne.n	800dad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800da9e:	4b5f      	ldr	r3, [pc, #380]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d116      	bne.n	800dad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800daaa:	4b5c      	ldr	r3, [pc, #368]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f003 0302 	and.w	r3, r3, #2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d005      	beq.n	800dac2 <HAL_RCC_OscConfig+0x152>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d001      	beq.n	800dac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e1bb      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dac2:	4b56      	ldr	r3, [pc, #344]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	4952      	ldr	r1, [pc, #328]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800dad2:	4313      	orrs	r3, r2
 800dad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dad6:	e03a      	b.n	800db4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d020      	beq.n	800db22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dae0:	4b4f      	ldr	r3, [pc, #316]	; (800dc20 <HAL_RCC_OscConfig+0x2b0>)
 800dae2:	2201      	movs	r2, #1
 800dae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dae6:	f7fd ff01 	bl	800b8ec <HAL_GetTick>
 800daea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800daec:	e008      	b.n	800db00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800daee:	f7fd fefd 	bl	800b8ec <HAL_GetTick>
 800daf2:	4602      	mov	r2, r0
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d901      	bls.n	800db00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e19c      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db00:	4b46      	ldr	r3, [pc, #280]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 0302 	and.w	r3, r3, #2
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d0f0      	beq.n	800daee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db0c:	4b43      	ldr	r3, [pc, #268]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	00db      	lsls	r3, r3, #3
 800db1a:	4940      	ldr	r1, [pc, #256]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800db1c:	4313      	orrs	r3, r2
 800db1e:	600b      	str	r3, [r1, #0]
 800db20:	e015      	b.n	800db4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800db22:	4b3f      	ldr	r3, [pc, #252]	; (800dc20 <HAL_RCC_OscConfig+0x2b0>)
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db28:	f7fd fee0 	bl	800b8ec <HAL_GetTick>
 800db2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800db2e:	e008      	b.n	800db42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800db30:	f7fd fedc 	bl	800b8ec <HAL_GetTick>
 800db34:	4602      	mov	r2, r0
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d901      	bls.n	800db42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800db3e:	2303      	movs	r3, #3
 800db40:	e17b      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800db42:	4b36      	ldr	r3, [pc, #216]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 0302 	and.w	r3, r3, #2
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d1f0      	bne.n	800db30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 0308 	and.w	r3, r3, #8
 800db56:	2b00      	cmp	r3, #0
 800db58:	d030      	beq.n	800dbbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d016      	beq.n	800db90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800db62:	4b30      	ldr	r3, [pc, #192]	; (800dc24 <HAL_RCC_OscConfig+0x2b4>)
 800db64:	2201      	movs	r2, #1
 800db66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db68:	f7fd fec0 	bl	800b8ec <HAL_GetTick>
 800db6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800db6e:	e008      	b.n	800db82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800db70:	f7fd febc 	bl	800b8ec <HAL_GetTick>
 800db74:	4602      	mov	r2, r0
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d901      	bls.n	800db82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800db7e:	2303      	movs	r3, #3
 800db80:	e15b      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800db82:	4b26      	ldr	r3, [pc, #152]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800db84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db86:	f003 0302 	and.w	r3, r3, #2
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0f0      	beq.n	800db70 <HAL_RCC_OscConfig+0x200>
 800db8e:	e015      	b.n	800dbbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800db90:	4b24      	ldr	r3, [pc, #144]	; (800dc24 <HAL_RCC_OscConfig+0x2b4>)
 800db92:	2200      	movs	r2, #0
 800db94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800db96:	f7fd fea9 	bl	800b8ec <HAL_GetTick>
 800db9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800db9c:	e008      	b.n	800dbb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800db9e:	f7fd fea5 	bl	800b8ec <HAL_GetTick>
 800dba2:	4602      	mov	r2, r0
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d901      	bls.n	800dbb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e144      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dbb0:	4b1a      	ldr	r3, [pc, #104]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800dbb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb4:	f003 0302 	and.w	r3, r3, #2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1f0      	bne.n	800db9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 0304 	and.w	r3, r3, #4
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f000 80a0 	beq.w	800dd0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dbce:	4b13      	ldr	r3, [pc, #76]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10f      	bne.n	800dbfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60bb      	str	r3, [r7, #8]
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800dbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe2:	4a0e      	ldr	r2, [pc, #56]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800dbe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbe8:	6413      	str	r3, [r2, #64]	; 0x40
 800dbea:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <HAL_RCC_OscConfig+0x2ac>)
 800dbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbf2:	60bb      	str	r3, [r7, #8]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dbfa:	4b0b      	ldr	r3, [pc, #44]	; (800dc28 <HAL_RCC_OscConfig+0x2b8>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d121      	bne.n	800dc4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dc06:	4b08      	ldr	r3, [pc, #32]	; (800dc28 <HAL_RCC_OscConfig+0x2b8>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a07      	ldr	r2, [pc, #28]	; (800dc28 <HAL_RCC_OscConfig+0x2b8>)
 800dc0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dc12:	f7fd fe6b 	bl	800b8ec <HAL_GetTick>
 800dc16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc18:	e011      	b.n	800dc3e <HAL_RCC_OscConfig+0x2ce>
 800dc1a:	bf00      	nop
 800dc1c:	40023800 	.word	0x40023800
 800dc20:	42470000 	.word	0x42470000
 800dc24:	42470e80 	.word	0x42470e80
 800dc28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc2c:	f7fd fe5e 	bl	800b8ec <HAL_GetTick>
 800dc30:	4602      	mov	r2, r0
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d901      	bls.n	800dc3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	e0fd      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc3e:	4b81      	ldr	r3, [pc, #516]	; (800de44 <HAL_RCC_OscConfig+0x4d4>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d0f0      	beq.n	800dc2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d106      	bne.n	800dc60 <HAL_RCC_OscConfig+0x2f0>
 800dc52:	4b7d      	ldr	r3, [pc, #500]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc56:	4a7c      	ldr	r2, [pc, #496]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc58:	f043 0301 	orr.w	r3, r3, #1
 800dc5c:	6713      	str	r3, [r2, #112]	; 0x70
 800dc5e:	e01c      	b.n	800dc9a <HAL_RCC_OscConfig+0x32a>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	2b05      	cmp	r3, #5
 800dc66:	d10c      	bne.n	800dc82 <HAL_RCC_OscConfig+0x312>
 800dc68:	4b77      	ldr	r3, [pc, #476]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc6c:	4a76      	ldr	r2, [pc, #472]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc6e:	f043 0304 	orr.w	r3, r3, #4
 800dc72:	6713      	str	r3, [r2, #112]	; 0x70
 800dc74:	4b74      	ldr	r3, [pc, #464]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc78:	4a73      	ldr	r2, [pc, #460]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc7a:	f043 0301 	orr.w	r3, r3, #1
 800dc7e:	6713      	str	r3, [r2, #112]	; 0x70
 800dc80:	e00b      	b.n	800dc9a <HAL_RCC_OscConfig+0x32a>
 800dc82:	4b71      	ldr	r3, [pc, #452]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc86:	4a70      	ldr	r2, [pc, #448]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc88:	f023 0301 	bic.w	r3, r3, #1
 800dc8c:	6713      	str	r3, [r2, #112]	; 0x70
 800dc8e:	4b6e      	ldr	r3, [pc, #440]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc92:	4a6d      	ldr	r2, [pc, #436]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dc94:	f023 0304 	bic.w	r3, r3, #4
 800dc98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d015      	beq.n	800dcce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dca2:	f7fd fe23 	bl	800b8ec <HAL_GetTick>
 800dca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dca8:	e00a      	b.n	800dcc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dcaa:	f7fd fe1f 	bl	800b8ec <HAL_GetTick>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	1ad3      	subs	r3, r2, r3
 800dcb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d901      	bls.n	800dcc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	e0bc      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dcc0:	4b61      	ldr	r3, [pc, #388]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dcc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcc4:	f003 0302 	and.w	r3, r3, #2
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d0ee      	beq.n	800dcaa <HAL_RCC_OscConfig+0x33a>
 800dccc:	e014      	b.n	800dcf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dcce:	f7fd fe0d 	bl	800b8ec <HAL_GetTick>
 800dcd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dcd4:	e00a      	b.n	800dcec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dcd6:	f7fd fe09 	bl	800b8ec <HAL_GetTick>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	1ad3      	subs	r3, r2, r3
 800dce0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d901      	bls.n	800dcec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dce8:	2303      	movs	r3, #3
 800dcea:	e0a6      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dcec:	4b56      	ldr	r3, [pc, #344]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dcee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf0:	f003 0302 	and.w	r3, r3, #2
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d1ee      	bne.n	800dcd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d105      	bne.n	800dd0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dcfe:	4b52      	ldr	r3, [pc, #328]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd02:	4a51      	ldr	r2, [pc, #324]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dd04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	699b      	ldr	r3, [r3, #24]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f000 8092 	beq.w	800de38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dd14:	4b4c      	ldr	r3, [pc, #304]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	f003 030c 	and.w	r3, r3, #12
 800dd1c:	2b08      	cmp	r3, #8
 800dd1e:	d05c      	beq.n	800ddda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	699b      	ldr	r3, [r3, #24]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d141      	bne.n	800ddac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd28:	4b48      	ldr	r3, [pc, #288]	; (800de4c <HAL_RCC_OscConfig+0x4dc>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd2e:	f7fd fddd 	bl	800b8ec <HAL_GetTick>
 800dd32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd34:	e008      	b.n	800dd48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dd36:	f7fd fdd9 	bl	800b8ec <HAL_GetTick>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d901      	bls.n	800dd48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800dd44:	2303      	movs	r3, #3
 800dd46:	e078      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd48:	4b3f      	ldr	r3, [pc, #252]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1f0      	bne.n	800dd36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	69da      	ldr	r2, [r3, #28]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
 800dd5c:	431a      	orrs	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd62:	019b      	lsls	r3, r3, #6
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6a:	085b      	lsrs	r3, r3, #1
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	041b      	lsls	r3, r3, #16
 800dd70:	431a      	orrs	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd76:	061b      	lsls	r3, r3, #24
 800dd78:	4933      	ldr	r1, [pc, #204]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dd7e:	4b33      	ldr	r3, [pc, #204]	; (800de4c <HAL_RCC_OscConfig+0x4dc>)
 800dd80:	2201      	movs	r2, #1
 800dd82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd84:	f7fd fdb2 	bl	800b8ec <HAL_GetTick>
 800dd88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd8a:	e008      	b.n	800dd9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dd8c:	f7fd fdae 	bl	800b8ec <HAL_GetTick>
 800dd90:	4602      	mov	r2, r0
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d901      	bls.n	800dd9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e04d      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd9e:	4b2a      	ldr	r3, [pc, #168]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0f0      	beq.n	800dd8c <HAL_RCC_OscConfig+0x41c>
 800ddaa:	e045      	b.n	800de38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ddac:	4b27      	ldr	r3, [pc, #156]	; (800de4c <HAL_RCC_OscConfig+0x4dc>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ddb2:	f7fd fd9b 	bl	800b8ec <HAL_GetTick>
 800ddb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ddb8:	e008      	b.n	800ddcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ddba:	f7fd fd97 	bl	800b8ec <HAL_GetTick>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d901      	bls.n	800ddcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	e036      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ddcc:	4b1e      	ldr	r3, [pc, #120]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1f0      	bne.n	800ddba <HAL_RCC_OscConfig+0x44a>
 800ddd8:	e02e      	b.n	800de38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d101      	bne.n	800dde6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	e029      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dde6:	4b18      	ldr	r3, [pc, #96]	; (800de48 <HAL_RCC_OscConfig+0x4d8>)
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	69db      	ldr	r3, [r3, #28]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d11c      	bne.n	800de34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de04:	429a      	cmp	r2, r3
 800de06:	d115      	bne.n	800de34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800de0e:	4013      	ands	r3, r2
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800de14:	4293      	cmp	r3, r2
 800de16:	d10d      	bne.n	800de34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800de22:	429a      	cmp	r2, r3
 800de24:	d106      	bne.n	800de34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800de30:	429a      	cmp	r2, r3
 800de32:	d001      	beq.n	800de38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800de34:	2301      	movs	r3, #1
 800de36:	e000      	b.n	800de3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	40007000 	.word	0x40007000
 800de48:	40023800 	.word	0x40023800
 800de4c:	42470060 	.word	0x42470060

0800de50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	e0cc      	b.n	800dffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800de64:	4b68      	ldr	r3, [pc, #416]	; (800e008 <HAL_RCC_ClockConfig+0x1b8>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f003 030f 	and.w	r3, r3, #15
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d90c      	bls.n	800de8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de72:	4b65      	ldr	r3, [pc, #404]	; (800e008 <HAL_RCC_ClockConfig+0x1b8>)
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	b2d2      	uxtb	r2, r2
 800de78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de7a:	4b63      	ldr	r3, [pc, #396]	; (800e008 <HAL_RCC_ClockConfig+0x1b8>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 030f 	and.w	r3, r3, #15
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d001      	beq.n	800de8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	e0b8      	b.n	800dffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f003 0302 	and.w	r3, r3, #2
 800de94:	2b00      	cmp	r3, #0
 800de96:	d020      	beq.n	800deda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f003 0304 	and.w	r3, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d005      	beq.n	800deb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dea4:	4b59      	ldr	r3, [pc, #356]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	4a58      	ldr	r2, [pc, #352]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800deaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800deae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 0308 	and.w	r3, r3, #8
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d005      	beq.n	800dec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800debc:	4b53      	ldr	r3, [pc, #332]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	4a52      	ldr	r2, [pc, #328]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800dec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dec8:	4b50      	ldr	r3, [pc, #320]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	494d      	ldr	r1, [pc, #308]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800ded6:	4313      	orrs	r3, r2
 800ded8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d044      	beq.n	800df70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d107      	bne.n	800defe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800deee:	4b47      	ldr	r3, [pc, #284]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800def6:	2b00      	cmp	r3, #0
 800def8:	d119      	bne.n	800df2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800defa:	2301      	movs	r3, #1
 800defc:	e07f      	b.n	800dffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	2b02      	cmp	r3, #2
 800df04:	d003      	beq.n	800df0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d107      	bne.n	800df1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df0e:	4b3f      	ldr	r3, [pc, #252]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df16:	2b00      	cmp	r3, #0
 800df18:	d109      	bne.n	800df2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	e06f      	b.n	800dffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800df1e:	4b3b      	ldr	r3, [pc, #236]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f003 0302 	and.w	r3, r3, #2
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	e067      	b.n	800dffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800df2e:	4b37      	ldr	r3, [pc, #220]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	f023 0203 	bic.w	r2, r3, #3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	4934      	ldr	r1, [pc, #208]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800df3c:	4313      	orrs	r3, r2
 800df3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800df40:	f7fd fcd4 	bl	800b8ec <HAL_GetTick>
 800df44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df46:	e00a      	b.n	800df5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800df48:	f7fd fcd0 	bl	800b8ec <HAL_GetTick>
 800df4c:	4602      	mov	r2, r0
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	f241 3288 	movw	r2, #5000	; 0x1388
 800df56:	4293      	cmp	r3, r2
 800df58:	d901      	bls.n	800df5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800df5a:	2303      	movs	r3, #3
 800df5c:	e04f      	b.n	800dffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df5e:	4b2b      	ldr	r3, [pc, #172]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	f003 020c 	and.w	r2, r3, #12
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d1eb      	bne.n	800df48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800df70:	4b25      	ldr	r3, [pc, #148]	; (800e008 <HAL_RCC_ClockConfig+0x1b8>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 030f 	and.w	r3, r3, #15
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d20c      	bcs.n	800df98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df7e:	4b22      	ldr	r3, [pc, #136]	; (800e008 <HAL_RCC_ClockConfig+0x1b8>)
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	b2d2      	uxtb	r2, r2
 800df84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df86:	4b20      	ldr	r3, [pc, #128]	; (800e008 <HAL_RCC_ClockConfig+0x1b8>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f003 030f 	and.w	r3, r3, #15
 800df8e:	683a      	ldr	r2, [r7, #0]
 800df90:	429a      	cmp	r2, r3
 800df92:	d001      	beq.n	800df98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800df94:	2301      	movs	r3, #1
 800df96:	e032      	b.n	800dffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f003 0304 	and.w	r3, r3, #4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d008      	beq.n	800dfb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dfa4:	4b19      	ldr	r3, [pc, #100]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	4916      	ldr	r1, [pc, #88]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 0308 	and.w	r3, r3, #8
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d009      	beq.n	800dfd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dfc2:	4b12      	ldr	r3, [pc, #72]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800dfc4:	689b      	ldr	r3, [r3, #8]
 800dfc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	490e      	ldr	r1, [pc, #56]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dfd6:	f000 f821 	bl	800e01c <HAL_RCC_GetSysClockFreq>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	4b0b      	ldr	r3, [pc, #44]	; (800e00c <HAL_RCC_ClockConfig+0x1bc>)
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	091b      	lsrs	r3, r3, #4
 800dfe2:	f003 030f 	and.w	r3, r3, #15
 800dfe6:	490a      	ldr	r1, [pc, #40]	; (800e010 <HAL_RCC_ClockConfig+0x1c0>)
 800dfe8:	5ccb      	ldrb	r3, [r1, r3]
 800dfea:	fa22 f303 	lsr.w	r3, r2, r3
 800dfee:	4a09      	ldr	r2, [pc, #36]	; (800e014 <HAL_RCC_ClockConfig+0x1c4>)
 800dff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dff2:	4b09      	ldr	r3, [pc, #36]	; (800e018 <HAL_RCC_ClockConfig+0x1c8>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fd f8ee 	bl	800b1d8 <HAL_InitTick>

  return HAL_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	40023c00 	.word	0x40023c00
 800e00c:	40023800 	.word	0x40023800
 800e010:	0801c6f0 	.word	0x0801c6f0
 800e014:	2000408c 	.word	0x2000408c
 800e018:	20004090 	.word	0x20004090

0800e01c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e01c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e024:	2300      	movs	r3, #0
 800e026:	607b      	str	r3, [r7, #4]
 800e028:	2300      	movs	r3, #0
 800e02a:	60fb      	str	r3, [r7, #12]
 800e02c:	2300      	movs	r3, #0
 800e02e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e030:	2300      	movs	r3, #0
 800e032:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e034:	4b67      	ldr	r3, [pc, #412]	; (800e1d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	f003 030c 	and.w	r3, r3, #12
 800e03c:	2b08      	cmp	r3, #8
 800e03e:	d00d      	beq.n	800e05c <HAL_RCC_GetSysClockFreq+0x40>
 800e040:	2b08      	cmp	r3, #8
 800e042:	f200 80bd 	bhi.w	800e1c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800e046:	2b00      	cmp	r3, #0
 800e048:	d002      	beq.n	800e050 <HAL_RCC_GetSysClockFreq+0x34>
 800e04a:	2b04      	cmp	r3, #4
 800e04c:	d003      	beq.n	800e056 <HAL_RCC_GetSysClockFreq+0x3a>
 800e04e:	e0b7      	b.n	800e1c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e050:	4b61      	ldr	r3, [pc, #388]	; (800e1d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e052:	60bb      	str	r3, [r7, #8]
       break;
 800e054:	e0b7      	b.n	800e1c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e056:	4b61      	ldr	r3, [pc, #388]	; (800e1dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 800e058:	60bb      	str	r3, [r7, #8]
      break;
 800e05a:	e0b4      	b.n	800e1c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e05c:	4b5d      	ldr	r3, [pc, #372]	; (800e1d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e064:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e066:	4b5b      	ldr	r3, [pc, #364]	; (800e1d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d04d      	beq.n	800e10e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e072:	4b58      	ldr	r3, [pc, #352]	; (800e1d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	099b      	lsrs	r3, r3, #6
 800e078:	461a      	mov	r2, r3
 800e07a:	f04f 0300 	mov.w	r3, #0
 800e07e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e082:	f04f 0100 	mov.w	r1, #0
 800e086:	ea02 0800 	and.w	r8, r2, r0
 800e08a:	ea03 0901 	and.w	r9, r3, r1
 800e08e:	4640      	mov	r0, r8
 800e090:	4649      	mov	r1, r9
 800e092:	f04f 0200 	mov.w	r2, #0
 800e096:	f04f 0300 	mov.w	r3, #0
 800e09a:	014b      	lsls	r3, r1, #5
 800e09c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e0a0:	0142      	lsls	r2, r0, #5
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	ebb0 0008 	subs.w	r0, r0, r8
 800e0aa:	eb61 0109 	sbc.w	r1, r1, r9
 800e0ae:	f04f 0200 	mov.w	r2, #0
 800e0b2:	f04f 0300 	mov.w	r3, #0
 800e0b6:	018b      	lsls	r3, r1, #6
 800e0b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e0bc:	0182      	lsls	r2, r0, #6
 800e0be:	1a12      	subs	r2, r2, r0
 800e0c0:	eb63 0301 	sbc.w	r3, r3, r1
 800e0c4:	f04f 0000 	mov.w	r0, #0
 800e0c8:	f04f 0100 	mov.w	r1, #0
 800e0cc:	00d9      	lsls	r1, r3, #3
 800e0ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e0d2:	00d0      	lsls	r0, r2, #3
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	eb12 0208 	adds.w	r2, r2, r8
 800e0dc:	eb43 0309 	adc.w	r3, r3, r9
 800e0e0:	f04f 0000 	mov.w	r0, #0
 800e0e4:	f04f 0100 	mov.w	r1, #0
 800e0e8:	0259      	lsls	r1, r3, #9
 800e0ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e0ee:	0250      	lsls	r0, r2, #9
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f04f 0300 	mov.w	r3, #0
 800e100:	f7f2 fdc2 	bl	8000c88 <__aeabi_uldivmod>
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	4613      	mov	r3, r2
 800e10a:	60fb      	str	r3, [r7, #12]
 800e10c:	e04a      	b.n	800e1a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e10e:	4b31      	ldr	r3, [pc, #196]	; (800e1d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	099b      	lsrs	r3, r3, #6
 800e114:	461a      	mov	r2, r3
 800e116:	f04f 0300 	mov.w	r3, #0
 800e11a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e11e:	f04f 0100 	mov.w	r1, #0
 800e122:	ea02 0400 	and.w	r4, r2, r0
 800e126:	ea03 0501 	and.w	r5, r3, r1
 800e12a:	4620      	mov	r0, r4
 800e12c:	4629      	mov	r1, r5
 800e12e:	f04f 0200 	mov.w	r2, #0
 800e132:	f04f 0300 	mov.w	r3, #0
 800e136:	014b      	lsls	r3, r1, #5
 800e138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e13c:	0142      	lsls	r2, r0, #5
 800e13e:	4610      	mov	r0, r2
 800e140:	4619      	mov	r1, r3
 800e142:	1b00      	subs	r0, r0, r4
 800e144:	eb61 0105 	sbc.w	r1, r1, r5
 800e148:	f04f 0200 	mov.w	r2, #0
 800e14c:	f04f 0300 	mov.w	r3, #0
 800e150:	018b      	lsls	r3, r1, #6
 800e152:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e156:	0182      	lsls	r2, r0, #6
 800e158:	1a12      	subs	r2, r2, r0
 800e15a:	eb63 0301 	sbc.w	r3, r3, r1
 800e15e:	f04f 0000 	mov.w	r0, #0
 800e162:	f04f 0100 	mov.w	r1, #0
 800e166:	00d9      	lsls	r1, r3, #3
 800e168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e16c:	00d0      	lsls	r0, r2, #3
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	1912      	adds	r2, r2, r4
 800e174:	eb45 0303 	adc.w	r3, r5, r3
 800e178:	f04f 0000 	mov.w	r0, #0
 800e17c:	f04f 0100 	mov.w	r1, #0
 800e180:	0299      	lsls	r1, r3, #10
 800e182:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e186:	0290      	lsls	r0, r2, #10
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	4610      	mov	r0, r2
 800e18e:	4619      	mov	r1, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	461a      	mov	r2, r3
 800e194:	f04f 0300 	mov.w	r3, #0
 800e198:	f7f2 fd76 	bl	8000c88 <__aeabi_uldivmod>
 800e19c:	4602      	mov	r2, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e1a4:	4b0b      	ldr	r3, [pc, #44]	; (800e1d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	0c1b      	lsrs	r3, r3, #16
 800e1aa:	f003 0303 	and.w	r3, r3, #3
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	005b      	lsls	r3, r3, #1
 800e1b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1bc:	60bb      	str	r3, [r7, #8]
      break;
 800e1be:	e002      	b.n	800e1c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e1c0:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e1c2:	60bb      	str	r3, [r7, #8]
      break;
 800e1c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e1c6:	68bb      	ldr	r3, [r7, #8]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e1d2:	bf00      	nop
 800e1d4:	40023800 	.word	0x40023800
 800e1d8:	00f42400 	.word	0x00f42400
 800e1dc:	007a1200 	.word	0x007a1200

0800e1e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e1e4:	4b03      	ldr	r3, [pc, #12]	; (800e1f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	2000408c 	.word	0x2000408c

0800e1f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e1fc:	f7ff fff0 	bl	800e1e0 <HAL_RCC_GetHCLKFreq>
 800e200:	4602      	mov	r2, r0
 800e202:	4b05      	ldr	r3, [pc, #20]	; (800e218 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	0a9b      	lsrs	r3, r3, #10
 800e208:	f003 0307 	and.w	r3, r3, #7
 800e20c:	4903      	ldr	r1, [pc, #12]	; (800e21c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e20e:	5ccb      	ldrb	r3, [r1, r3]
 800e210:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e214:	4618      	mov	r0, r3
 800e216:	bd80      	pop	{r7, pc}
 800e218:	40023800 	.word	0x40023800
 800e21c:	0801c700 	.word	0x0801c700

0800e220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e224:	f7ff ffdc 	bl	800e1e0 <HAL_RCC_GetHCLKFreq>
 800e228:	4602      	mov	r2, r0
 800e22a:	4b05      	ldr	r3, [pc, #20]	; (800e240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	0b5b      	lsrs	r3, r3, #13
 800e230:	f003 0307 	and.w	r3, r3, #7
 800e234:	4903      	ldr	r1, [pc, #12]	; (800e244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e236:	5ccb      	ldrb	r3, [r1, r3]
 800e238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	40023800 	.word	0x40023800
 800e244:	0801c700 	.word	0x0801c700

0800e248 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	220f      	movs	r2, #15
 800e256:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e258:	4b12      	ldr	r3, [pc, #72]	; (800e2a4 <HAL_RCC_GetClockConfig+0x5c>)
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	f003 0203 	and.w	r2, r3, #3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e264:	4b0f      	ldr	r3, [pc, #60]	; (800e2a4 <HAL_RCC_GetClockConfig+0x5c>)
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e270:	4b0c      	ldr	r3, [pc, #48]	; (800e2a4 <HAL_RCC_GetClockConfig+0x5c>)
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e27c:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <HAL_RCC_GetClockConfig+0x5c>)
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	08db      	lsrs	r3, r3, #3
 800e282:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e28a:	4b07      	ldr	r3, [pc, #28]	; (800e2a8 <HAL_RCC_GetClockConfig+0x60>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f003 020f 	and.w	r2, r3, #15
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	601a      	str	r2, [r3, #0]
}
 800e296:	bf00      	nop
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	40023800 	.word	0x40023800
 800e2a8:	40023c00 	.word	0x40023c00

0800e2ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d101      	bne.n	800e2be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e01d      	b.n	800e2fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d106      	bne.n	800e2d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7fd f99a 	bl	800b60c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2202      	movs	r2, #2
 800e2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f000 fa22 	bl	800e734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e302:	b480      	push	{r7}
 800e304:	b085      	sub	sp, #20
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68da      	ldr	r2, [r3, #12]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f042 0201 	orr.w	r2, r2, #1
 800e318:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f003 0307 	and.w	r3, r3, #7
 800e324:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b06      	cmp	r3, #6
 800e32a:	d007      	beq.n	800e33c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0201 	orr.w	r2, r2, #1
 800e33a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr

0800e34a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b082      	sub	sp, #8
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	691b      	ldr	r3, [r3, #16]
 800e358:	f003 0302 	and.w	r3, r3, #2
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	d122      	bne.n	800e3a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	f003 0302 	and.w	r3, r3, #2
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d11b      	bne.n	800e3a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f06f 0202 	mvn.w	r2, #2
 800e376:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2201      	movs	r2, #1
 800e37c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	f003 0303 	and.w	r3, r3, #3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f9b2 	bl	800e6f6 <HAL_TIM_IC_CaptureCallback>
 800e392:	e005      	b.n	800e3a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f9a4 	bl	800e6e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f9b5 	bl	800e70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	f003 0304 	and.w	r3, r3, #4
 800e3b0:	2b04      	cmp	r3, #4
 800e3b2:	d122      	bne.n	800e3fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	f003 0304 	and.w	r3, r3, #4
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d11b      	bne.n	800e3fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f06f 0204 	mvn.w	r2, #4
 800e3ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2202      	movs	r2, #2
 800e3d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d003      	beq.n	800e3e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f988 	bl	800e6f6 <HAL_TIM_IC_CaptureCallback>
 800e3e6:	e005      	b.n	800e3f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f97a 	bl	800e6e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f98b 	bl	800e70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	f003 0308 	and.w	r3, r3, #8
 800e404:	2b08      	cmp	r3, #8
 800e406:	d122      	bne.n	800e44e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	f003 0308 	and.w	r3, r3, #8
 800e412:	2b08      	cmp	r3, #8
 800e414:	d11b      	bne.n	800e44e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f06f 0208 	mvn.w	r2, #8
 800e41e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2204      	movs	r2, #4
 800e424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	69db      	ldr	r3, [r3, #28]
 800e42c:	f003 0303 	and.w	r3, r3, #3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f95e 	bl	800e6f6 <HAL_TIM_IC_CaptureCallback>
 800e43a:	e005      	b.n	800e448 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 f950 	bl	800e6e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f961 	bl	800e70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	f003 0310 	and.w	r3, r3, #16
 800e458:	2b10      	cmp	r3, #16
 800e45a:	d122      	bne.n	800e4a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	f003 0310 	and.w	r3, r3, #16
 800e466:	2b10      	cmp	r3, #16
 800e468:	d11b      	bne.n	800e4a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f06f 0210 	mvn.w	r2, #16
 800e472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2208      	movs	r2, #8
 800e478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	69db      	ldr	r3, [r3, #28]
 800e480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e484:	2b00      	cmp	r3, #0
 800e486:	d003      	beq.n	800e490 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f934 	bl	800e6f6 <HAL_TIM_IC_CaptureCallback>
 800e48e:	e005      	b.n	800e49c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 f926 	bl	800e6e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f937 	bl	800e70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	f003 0301 	and.w	r3, r3, #1
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d10e      	bne.n	800e4ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d107      	bne.n	800e4ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f06f 0201 	mvn.w	r2, #1
 800e4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7f7 fc09 	bl	8005ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4d8:	2b80      	cmp	r3, #128	; 0x80
 800e4da:	d10e      	bne.n	800e4fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e6:	2b80      	cmp	r3, #128	; 0x80
 800e4e8:	d107      	bne.n	800e4fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e4f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 fadd 	bl	800eab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e504:	2b40      	cmp	r3, #64	; 0x40
 800e506:	d10e      	bne.n	800e526 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e512:	2b40      	cmp	r3, #64	; 0x40
 800e514:	d107      	bne.n	800e526 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e51e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 f8fc 	bl	800e71e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	f003 0320 	and.w	r3, r3, #32
 800e530:	2b20      	cmp	r3, #32
 800e532:	d10e      	bne.n	800e552 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	f003 0320 	and.w	r3, r3, #32
 800e53e:	2b20      	cmp	r3, #32
 800e540:	d107      	bne.n	800e552 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f06f 0220 	mvn.w	r2, #32
 800e54a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 faa7 	bl	800eaa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e552:	bf00      	nop
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b084      	sub	sp, #16
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d101      	bne.n	800e572 <HAL_TIM_ConfigClockSource+0x18>
 800e56e:	2302      	movs	r3, #2
 800e570:	e0b3      	b.n	800e6da <HAL_TIM_ConfigClockSource+0x180>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2202      	movs	r2, #2
 800e57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e590:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e598:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68fa      	ldr	r2, [r7, #12]
 800e5a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5aa:	d03e      	beq.n	800e62a <HAL_TIM_ConfigClockSource+0xd0>
 800e5ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5b0:	f200 8087 	bhi.w	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5b8:	f000 8085 	beq.w	800e6c6 <HAL_TIM_ConfigClockSource+0x16c>
 800e5bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5c0:	d87f      	bhi.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5c2:	2b70      	cmp	r3, #112	; 0x70
 800e5c4:	d01a      	beq.n	800e5fc <HAL_TIM_ConfigClockSource+0xa2>
 800e5c6:	2b70      	cmp	r3, #112	; 0x70
 800e5c8:	d87b      	bhi.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5ca:	2b60      	cmp	r3, #96	; 0x60
 800e5cc:	d050      	beq.n	800e670 <HAL_TIM_ConfigClockSource+0x116>
 800e5ce:	2b60      	cmp	r3, #96	; 0x60
 800e5d0:	d877      	bhi.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5d2:	2b50      	cmp	r3, #80	; 0x50
 800e5d4:	d03c      	beq.n	800e650 <HAL_TIM_ConfigClockSource+0xf6>
 800e5d6:	2b50      	cmp	r3, #80	; 0x50
 800e5d8:	d873      	bhi.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5da:	2b40      	cmp	r3, #64	; 0x40
 800e5dc:	d058      	beq.n	800e690 <HAL_TIM_ConfigClockSource+0x136>
 800e5de:	2b40      	cmp	r3, #64	; 0x40
 800e5e0:	d86f      	bhi.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5e2:	2b30      	cmp	r3, #48	; 0x30
 800e5e4:	d064      	beq.n	800e6b0 <HAL_TIM_ConfigClockSource+0x156>
 800e5e6:	2b30      	cmp	r3, #48	; 0x30
 800e5e8:	d86b      	bhi.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5ea:	2b20      	cmp	r3, #32
 800e5ec:	d060      	beq.n	800e6b0 <HAL_TIM_ConfigClockSource+0x156>
 800e5ee:	2b20      	cmp	r3, #32
 800e5f0:	d867      	bhi.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d05c      	beq.n	800e6b0 <HAL_TIM_ConfigClockSource+0x156>
 800e5f6:	2b10      	cmp	r3, #16
 800e5f8:	d05a      	beq.n	800e6b0 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e5fa:	e062      	b.n	800e6c2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6818      	ldr	r0, [r3, #0]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	6899      	ldr	r1, [r3, #8]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	685a      	ldr	r2, [r3, #4]
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	f000 f9ac 	bl	800e968 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e61e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	609a      	str	r2, [r3, #8]
      break;
 800e628:	e04e      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6818      	ldr	r0, [r3, #0]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	6899      	ldr	r1, [r3, #8]
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	f000 f995 	bl	800e968 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689a      	ldr	r2, [r3, #8]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e64c:	609a      	str	r2, [r3, #8]
      break;
 800e64e:	e03b      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6818      	ldr	r0, [r3, #0]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	6859      	ldr	r1, [r3, #4]
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	461a      	mov	r2, r3
 800e65e:	f000 f909 	bl	800e874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2150      	movs	r1, #80	; 0x50
 800e668:	4618      	mov	r0, r3
 800e66a:	f000 f962 	bl	800e932 <TIM_ITRx_SetConfig>
      break;
 800e66e:	e02b      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6818      	ldr	r0, [r3, #0]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	6859      	ldr	r1, [r3, #4]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	461a      	mov	r2, r3
 800e67e:	f000 f928 	bl	800e8d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2160      	movs	r1, #96	; 0x60
 800e688:	4618      	mov	r0, r3
 800e68a:	f000 f952 	bl	800e932 <TIM_ITRx_SetConfig>
      break;
 800e68e:	e01b      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6818      	ldr	r0, [r3, #0]
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	6859      	ldr	r1, [r3, #4]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	461a      	mov	r2, r3
 800e69e:	f000 f8e9 	bl	800e874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2140      	movs	r1, #64	; 0x40
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f000 f942 	bl	800e932 <TIM_ITRx_SetConfig>
      break;
 800e6ae:	e00b      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	4610      	mov	r0, r2
 800e6bc:	f000 f939 	bl	800e932 <TIM_ITRx_SetConfig>
      break;
 800e6c0:	e002      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e6c2:	bf00      	nop
 800e6c4:	e000      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e6c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	b083      	sub	sp, #12
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6ea:	bf00      	nop
 800e6ec:	370c      	adds	r7, #12
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr

0800e6f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6f6:	b480      	push	{r7}
 800e6f8:	b083      	sub	sp, #12
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6fe:	bf00      	nop
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr

0800e70a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e70a:	b480      	push	{r7}
 800e70c:	b083      	sub	sp, #12
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e712:	bf00      	nop
 800e714:	370c      	adds	r7, #12
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr

0800e71e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e71e:	b480      	push	{r7}
 800e720:	b083      	sub	sp, #12
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e726:	bf00      	nop
 800e728:	370c      	adds	r7, #12
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
	...

0800e734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	4a40      	ldr	r2, [pc, #256]	; (800e848 <TIM_Base_SetConfig+0x114>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d013      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e752:	d00f      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4a3d      	ldr	r2, [pc, #244]	; (800e84c <TIM_Base_SetConfig+0x118>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d00b      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a3c      	ldr	r2, [pc, #240]	; (800e850 <TIM_Base_SetConfig+0x11c>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d007      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a3b      	ldr	r2, [pc, #236]	; (800e854 <TIM_Base_SetConfig+0x120>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d003      	beq.n	800e774 <TIM_Base_SetConfig+0x40>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a3a      	ldr	r2, [pc, #232]	; (800e858 <TIM_Base_SetConfig+0x124>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d108      	bne.n	800e786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e77a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	4313      	orrs	r3, r2
 800e784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4a2f      	ldr	r2, [pc, #188]	; (800e848 <TIM_Base_SetConfig+0x114>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d02b      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e794:	d027      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4a2c      	ldr	r2, [pc, #176]	; (800e84c <TIM_Base_SetConfig+0x118>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d023      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a2b      	ldr	r2, [pc, #172]	; (800e850 <TIM_Base_SetConfig+0x11c>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d01f      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a2a      	ldr	r2, [pc, #168]	; (800e854 <TIM_Base_SetConfig+0x120>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d01b      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a29      	ldr	r2, [pc, #164]	; (800e858 <TIM_Base_SetConfig+0x124>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d017      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a28      	ldr	r2, [pc, #160]	; (800e85c <TIM_Base_SetConfig+0x128>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d013      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a27      	ldr	r2, [pc, #156]	; (800e860 <TIM_Base_SetConfig+0x12c>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d00f      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a26      	ldr	r2, [pc, #152]	; (800e864 <TIM_Base_SetConfig+0x130>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d00b      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a25      	ldr	r2, [pc, #148]	; (800e868 <TIM_Base_SetConfig+0x134>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d007      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a24      	ldr	r2, [pc, #144]	; (800e86c <TIM_Base_SetConfig+0x138>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d003      	beq.n	800e7e6 <TIM_Base_SetConfig+0xb2>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a23      	ldr	r2, [pc, #140]	; (800e870 <TIM_Base_SetConfig+0x13c>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d108      	bne.n	800e7f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	4313      	orrs	r3, r2
 800e804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a0a      	ldr	r2, [pc, #40]	; (800e848 <TIM_Base_SetConfig+0x114>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d003      	beq.n	800e82c <TIM_Base_SetConfig+0xf8>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a0c      	ldr	r2, [pc, #48]	; (800e858 <TIM_Base_SetConfig+0x124>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d103      	bne.n	800e834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	691a      	ldr	r2, [r3, #16]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	615a      	str	r2, [r3, #20]
}
 800e83a:	bf00      	nop
 800e83c:	3714      	adds	r7, #20
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	40010000 	.word	0x40010000
 800e84c:	40000400 	.word	0x40000400
 800e850:	40000800 	.word	0x40000800
 800e854:	40000c00 	.word	0x40000c00
 800e858:	40010400 	.word	0x40010400
 800e85c:	40014000 	.word	0x40014000
 800e860:	40014400 	.word	0x40014400
 800e864:	40014800 	.word	0x40014800
 800e868:	40001800 	.word	0x40001800
 800e86c:	40001c00 	.word	0x40001c00
 800e870:	40002000 	.word	0x40002000

0800e874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e874:	b480      	push	{r7}
 800e876:	b087      	sub	sp, #28
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6a1b      	ldr	r3, [r3, #32]
 800e884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6a1b      	ldr	r3, [r3, #32]
 800e88a:	f023 0201 	bic.w	r2, r3, #1
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e89e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	011b      	lsls	r3, r3, #4
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	f023 030a 	bic.w	r3, r3, #10
 800e8b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	693a      	ldr	r2, [r7, #16]
 800e8be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	621a      	str	r2, [r3, #32]
}
 800e8c6:	bf00      	nop
 800e8c8:	371c      	adds	r7, #28
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b087      	sub	sp, #28
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	f023 0210 	bic.w	r2, r3, #16
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	699b      	ldr	r3, [r3, #24]
 800e8ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6a1b      	ldr	r3, [r3, #32]
 800e8f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e8fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	031b      	lsls	r3, r3, #12
 800e902:	697a      	ldr	r2, [r7, #20]
 800e904:	4313      	orrs	r3, r2
 800e906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e90e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	011b      	lsls	r3, r3, #4
 800e914:	693a      	ldr	r2, [r7, #16]
 800e916:	4313      	orrs	r3, r2
 800e918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	697a      	ldr	r2, [r7, #20]
 800e91e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	693a      	ldr	r2, [r7, #16]
 800e924:	621a      	str	r2, [r3, #32]
}
 800e926:	bf00      	nop
 800e928:	371c      	adds	r7, #28
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e932:	b480      	push	{r7}
 800e934:	b085      	sub	sp, #20
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
 800e93a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e94a:	683a      	ldr	r2, [r7, #0]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	4313      	orrs	r3, r2
 800e950:	f043 0307 	orr.w	r3, r3, #7
 800e954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	609a      	str	r2, [r3, #8]
}
 800e95c:	bf00      	nop
 800e95e:	3714      	adds	r7, #20
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e968:	b480      	push	{r7}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
 800e974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	021a      	lsls	r2, r3, #8
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	431a      	orrs	r2, r3
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	4313      	orrs	r3, r2
 800e990:	697a      	ldr	r2, [r7, #20]
 800e992:	4313      	orrs	r3, r2
 800e994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	609a      	str	r2, [r3, #8]
}
 800e99c:	bf00      	nop
 800e99e:	371c      	adds	r7, #28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d101      	bne.n	800e9c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9bc:	2302      	movs	r3, #2
 800e9be:	e05a      	b.n	800ea76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a21      	ldr	r2, [pc, #132]	; (800ea84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d022      	beq.n	800ea4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea0c:	d01d      	beq.n	800ea4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a1d      	ldr	r2, [pc, #116]	; (800ea88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d018      	beq.n	800ea4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a1b      	ldr	r2, [pc, #108]	; (800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d013      	beq.n	800ea4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a1a      	ldr	r2, [pc, #104]	; (800ea90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d00e      	beq.n	800ea4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a18      	ldr	r2, [pc, #96]	; (800ea94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d009      	beq.n	800ea4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a17      	ldr	r2, [pc, #92]	; (800ea98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d004      	beq.n	800ea4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4a15      	ldr	r2, [pc, #84]	; (800ea9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d10c      	bne.n	800ea64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	40010000 	.word	0x40010000
 800ea88:	40000400 	.word	0x40000400
 800ea8c:	40000800 	.word	0x40000800
 800ea90:	40000c00 	.word	0x40000c00
 800ea94:	40010400 	.word	0x40010400
 800ea98:	40014000 	.word	0x40014000
 800ea9c:	40001800 	.word	0x40001800

0800eaa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eaa8:	bf00      	nop
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d101      	bne.n	800eada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ead6:	2301      	movs	r3, #1
 800ead8:	e03f      	b.n	800eb5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7fc fdf2 	bl	800b6d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2224      	movs	r2, #36	; 0x24
 800eaf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68da      	ldr	r2, [r3, #12]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fb6b 	bl	800f1e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	691a      	ldr	r2, [r3, #16]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	695a      	ldr	r2, [r3, #20]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68da      	ldr	r2, [r3, #12]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2220      	movs	r2, #32
 800eb4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2220      	movs	r2, #32
 800eb54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800eb58:	2300      	movs	r3, #0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
	...

0800eb64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b20      	cmp	r3, #32
 800eb7c:	d153      	bne.n	800ec26 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <HAL_UART_Transmit_DMA+0x26>
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e04c      	b.n	800ec28 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d101      	bne.n	800eb9c <HAL_UART_Transmit_DMA+0x38>
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e045      	b.n	800ec28 <HAL_UART_Transmit_DMA+0xc4>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	88fa      	ldrh	r2, [r7, #6]
 800ebae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	88fa      	ldrh	r2, [r7, #6]
 800ebb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2221      	movs	r2, #33	; 0x21
 800ebc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc8:	4a19      	ldr	r2, [pc, #100]	; (800ec30 <HAL_UART_Transmit_DMA+0xcc>)
 800ebca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd0:	4a18      	ldr	r2, [pc, #96]	; (800ec34 <HAL_UART_Transmit_DMA+0xd0>)
 800ebd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd8:	4a17      	ldr	r2, [pc, #92]	; (800ec38 <HAL_UART_Transmit_DMA+0xd4>)
 800ebda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ebe4:	f107 0308 	add.w	r3, r7, #8
 800ebe8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	6819      	ldr	r1, [r3, #0]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	88fb      	ldrh	r3, [r7, #6]
 800ebfc:	f7fd f836 	bl	800bc6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	695a      	ldr	r2, [r3, #20]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ec20:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	e000      	b.n	800ec28 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ec26:	2302      	movs	r3, #2
  }
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	0800ee79 	.word	0x0800ee79
 800ec34:	0800eecb 	.word	0x0800eecb
 800ec38:	0800eee7 	.word	0x0800eee7

0800ec3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b088      	sub	sp, #32
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	695b      	ldr	r3, [r3, #20]
 800ec5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ec60:	2300      	movs	r3, #0
 800ec62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	f003 030f 	and.w	r3, r3, #15
 800ec6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10d      	bne.n	800ec8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	f003 0320 	and.w	r3, r3, #32
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d008      	beq.n	800ec8e <HAL_UART_IRQHandler+0x52>
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	f003 0320 	and.w	r3, r3, #32
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d003      	beq.n	800ec8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fa2d 	bl	800f0e6 <UART_Receive_IT>
      return;
 800ec8c:	e0d0      	b.n	800ee30 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 80b0 	beq.w	800edf6 <HAL_UART_IRQHandler+0x1ba>
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d105      	bne.n	800ecac <HAL_UART_IRQHandler+0x70>
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f000 80a5 	beq.w	800edf6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	f003 0301 	and.w	r3, r3, #1
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00a      	beq.n	800eccc <HAL_UART_IRQHandler+0x90>
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d005      	beq.n	800eccc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc4:	f043 0201 	orr.w	r2, r3, #1
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	f003 0304 	and.w	r3, r3, #4
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00a      	beq.n	800ecec <HAL_UART_IRQHandler+0xb0>
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d005      	beq.n	800ecec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ece4:	f043 0202 	orr.w	r2, r3, #2
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	f003 0302 	and.w	r3, r3, #2
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00a      	beq.n	800ed0c <HAL_UART_IRQHandler+0xd0>
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	f003 0301 	and.w	r3, r3, #1
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d005      	beq.n	800ed0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed04:	f043 0204 	orr.w	r2, r3, #4
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	f003 0308 	and.w	r3, r3, #8
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00f      	beq.n	800ed36 <HAL_UART_IRQHandler+0xfa>
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	f003 0320 	and.w	r3, r3, #32
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d104      	bne.n	800ed2a <HAL_UART_IRQHandler+0xee>
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d005      	beq.n	800ed36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed2e:	f043 0208 	orr.w	r2, r3, #8
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d077      	beq.n	800ee2e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	f003 0320 	and.w	r3, r3, #32
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d007      	beq.n	800ed58 <HAL_UART_IRQHandler+0x11c>
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	f003 0320 	and.w	r3, r3, #32
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d002      	beq.n	800ed58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 f9c7 	bl	800f0e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed62:	2b40      	cmp	r3, #64	; 0x40
 800ed64:	bf0c      	ite	eq
 800ed66:	2301      	moveq	r3, #1
 800ed68:	2300      	movne	r3, #0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed72:	f003 0308 	and.w	r3, r3, #8
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d102      	bne.n	800ed80 <HAL_UART_IRQHandler+0x144>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d031      	beq.n	800ede4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 f910 	bl	800efa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed90:	2b40      	cmp	r3, #64	; 0x40
 800ed92:	d123      	bne.n	800eddc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	695a      	ldr	r2, [r3, #20]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eda2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d013      	beq.n	800edd4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edb0:	4a21      	ldr	r2, [pc, #132]	; (800ee38 <HAL_UART_IRQHandler+0x1fc>)
 800edb2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fc ffaf 	bl	800bd1c <HAL_DMA_Abort_IT>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d016      	beq.n	800edf2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800edce:	4610      	mov	r0, r2
 800edd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edd2:	e00e      	b.n	800edf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 f845 	bl	800ee64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edda:	e00a      	b.n	800edf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f841 	bl	800ee64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ede2:	e006      	b.n	800edf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 f83d 	bl	800ee64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800edf0:	e01d      	b.n	800ee2e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edf2:	bf00      	nop
    return;
 800edf4:	e01b      	b.n	800ee2e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d008      	beq.n	800ee12 <HAL_UART_IRQHandler+0x1d6>
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d003      	beq.n	800ee12 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f8fd 	bl	800f00a <UART_Transmit_IT>
    return;
 800ee10:	e00e      	b.n	800ee30 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ee12:	69fb      	ldr	r3, [r7, #28]
 800ee14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d009      	beq.n	800ee30 <HAL_UART_IRQHandler+0x1f4>
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d004      	beq.n	800ee30 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 f945 	bl	800f0b6 <UART_EndTransmit_IT>
    return;
 800ee2c:	e000      	b.n	800ee30 <HAL_UART_IRQHandler+0x1f4>
    return;
 800ee2e:	bf00      	nop
  }
}
 800ee30:	3720      	adds	r7, #32
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	0800efe3 	.word	0x0800efe3

0800ee3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ee44:	bf00      	nop
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ee58:	bf00      	nop
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee84:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d113      	bne.n	800eebc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	695a      	ldr	r2, [r3, #20]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eea8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68da      	ldr	r2, [r3, #12]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eeb8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eeba:	e002      	b.n	800eec2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f7fc fc8d 	bl	800b7dc <HAL_UART_TxCpltCallback>
}
 800eec2:	bf00      	nop
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f7ff ffaf 	bl	800ee3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b084      	sub	sp, #16
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800eeee:	2300      	movs	r3, #0
 800eef0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	695b      	ldr	r3, [r3, #20]
 800eefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef02:	2b80      	cmp	r3, #128	; 0x80
 800ef04:	bf0c      	ite	eq
 800ef06:	2301      	moveq	r3, #1
 800ef08:	2300      	movne	r3, #0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	2b21      	cmp	r3, #33	; 0x21
 800ef18:	d108      	bne.n	800ef2c <UART_DMAError+0x46>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d005      	beq.n	800ef2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	2200      	movs	r2, #0
 800ef24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ef26:	68b8      	ldr	r0, [r7, #8]
 800ef28:	f000 f827 	bl	800ef7a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	695b      	ldr	r3, [r3, #20]
 800ef32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef36:	2b40      	cmp	r3, #64	; 0x40
 800ef38:	bf0c      	ite	eq
 800ef3a:	2301      	moveq	r3, #1
 800ef3c:	2300      	movne	r3, #0
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	2b22      	cmp	r3, #34	; 0x22
 800ef4c:	d108      	bne.n	800ef60 <UART_DMAError+0x7a>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d005      	beq.n	800ef60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	2200      	movs	r2, #0
 800ef58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ef5a:	68b8      	ldr	r0, [r7, #8]
 800ef5c:	f000 f823 	bl	800efa6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef64:	f043 0210 	orr.w	r2, r3, #16
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef6c:	68b8      	ldr	r0, [r7, #8]
 800ef6e:	f7ff ff79 	bl	800ee64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b083      	sub	sp, #12
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68da      	ldr	r2, [r3, #12]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ef90:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2220      	movs	r2, #32
 800ef96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ef9a:	bf00      	nop
 800ef9c:	370c      	adds	r7, #12
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800efa6:	b480      	push	{r7}
 800efa8:	b083      	sub	sp, #12
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68da      	ldr	r2, [r3, #12]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800efbc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	695a      	ldr	r2, [r3, #20]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f022 0201 	bic.w	r2, r2, #1
 800efcc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2220      	movs	r2, #32
 800efd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b084      	sub	sp, #16
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f7ff ff31 	bl	800ee64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f002:	bf00      	nop
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f00a:	b480      	push	{r7}
 800f00c:	b085      	sub	sp, #20
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	2b21      	cmp	r3, #33	; 0x21
 800f01c:	d144      	bne.n	800f0a8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f026:	d11a      	bne.n	800f05e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6a1b      	ldr	r3, [r3, #32]
 800f02c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	881b      	ldrh	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f03c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d105      	bne.n	800f052 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a1b      	ldr	r3, [r3, #32]
 800f04a:	1c9a      	adds	r2, r3, #2
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	621a      	str	r2, [r3, #32]
 800f050:	e00e      	b.n	800f070 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6a1b      	ldr	r3, [r3, #32]
 800f056:	1c5a      	adds	r2, r3, #1
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	621a      	str	r2, [r3, #32]
 800f05c:	e008      	b.n	800f070 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a1b      	ldr	r3, [r3, #32]
 800f062:	1c59      	adds	r1, r3, #1
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	6211      	str	r1, [r2, #32]
 800f068:	781a      	ldrb	r2, [r3, #0]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f074:	b29b      	uxth	r3, r3
 800f076:	3b01      	subs	r3, #1
 800f078:	b29b      	uxth	r3, r3
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	4619      	mov	r1, r3
 800f07e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10f      	bne.n	800f0a4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68da      	ldr	r2, [r3, #12]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f092:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68da      	ldr	r2, [r3, #12]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f0a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	e000      	b.n	800f0aa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f0a8:	2302      	movs	r3, #2
  }
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3714      	adds	r7, #20
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b082      	sub	sp, #8
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	68da      	ldr	r2, [r3, #12]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2220      	movs	r2, #32
 800f0d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f7fc fb80 	bl	800b7dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	2b22      	cmp	r3, #34	; 0x22
 800f0f8:	d171      	bne.n	800f1de <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f102:	d123      	bne.n	800f14c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f108:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d10e      	bne.n	800f130 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f11e:	b29a      	uxth	r2, r3
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f128:	1c9a      	adds	r2, r3, #2
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	629a      	str	r2, [r3, #40]	; 0x28
 800f12e:	e029      	b.n	800f184 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	b29b      	uxth	r3, r3
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	629a      	str	r2, [r3, #40]	; 0x28
 800f14a:	e01b      	b.n	800f184 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10a      	bne.n	800f16a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6858      	ldr	r0, [r3, #4]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f15e:	1c59      	adds	r1, r3, #1
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	6291      	str	r1, [r2, #40]	; 0x28
 800f164:	b2c2      	uxtb	r2, r0
 800f166:	701a      	strb	r2, [r3, #0]
 800f168:	e00c      	b.n	800f184 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	b2da      	uxtb	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f176:	1c58      	adds	r0, r3, #1
 800f178:	6879      	ldr	r1, [r7, #4]
 800f17a:	6288      	str	r0, [r1, #40]	; 0x28
 800f17c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f180:	b2d2      	uxtb	r2, r2
 800f182:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f188:	b29b      	uxth	r3, r3
 800f18a:	3b01      	subs	r3, #1
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	4619      	mov	r1, r3
 800f192:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f194:	2b00      	cmp	r3, #0
 800f196:	d120      	bne.n	800f1da <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68da      	ldr	r2, [r3, #12]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f022 0220 	bic.w	r2, r2, #32
 800f1a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	68da      	ldr	r2, [r3, #12]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f1b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	695a      	ldr	r2, [r3, #20]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f022 0201 	bic.w	r2, r2, #1
 800f1c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2220      	movs	r2, #32
 800f1cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff fe3d 	bl	800ee50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e002      	b.n	800f1e0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e000      	b.n	800f1e0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f1de:	2302      	movs	r3, #2
  }
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	b0bd      	sub	sp, #244	; 0xf4
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	691b      	ldr	r3, [r3, #16]
 800f1fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f204:	68d9      	ldr	r1, [r3, #12]
 800f206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	ea40 0301 	orr.w	r3, r0, r1
 800f210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f216:	689a      	ldr	r2, [r3, #8]
 800f218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	431a      	orrs	r2, r3
 800f220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f224:	695b      	ldr	r3, [r3, #20]
 800f226:	431a      	orrs	r2, r3
 800f228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f22c:	69db      	ldr	r3, [r3, #28]
 800f22e:	4313      	orrs	r3, r2
 800f230:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800f234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f240:	f021 010c 	bic.w	r1, r1, #12
 800f244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f24e:	430b      	orrs	r3, r1
 800f250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f262:	6999      	ldr	r1, [r3, #24]
 800f264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	ea40 0301 	orr.w	r3, r0, r1
 800f26e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f274:	69db      	ldr	r3, [r3, #28]
 800f276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f27a:	f040 81a5 	bne.w	800f5c8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	4bcd      	ldr	r3, [pc, #820]	; (800f5bc <UART_SetConfig+0x3d4>)
 800f286:	429a      	cmp	r2, r3
 800f288:	d006      	beq.n	800f298 <UART_SetConfig+0xb0>
 800f28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	4bcb      	ldr	r3, [pc, #812]	; (800f5c0 <UART_SetConfig+0x3d8>)
 800f292:	429a      	cmp	r2, r3
 800f294:	f040 80cb 	bne.w	800f42e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f298:	f7fe ffc2 	bl	800e220 <HAL_RCC_GetPCLK2Freq>
 800f29c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f2a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f2a4:	461c      	mov	r4, r3
 800f2a6:	f04f 0500 	mov.w	r5, #0
 800f2aa:	4622      	mov	r2, r4
 800f2ac:	462b      	mov	r3, r5
 800f2ae:	1891      	adds	r1, r2, r2
 800f2b0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800f2b4:	415b      	adcs	r3, r3
 800f2b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f2ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f2be:	1912      	adds	r2, r2, r4
 800f2c0:	eb45 0303 	adc.w	r3, r5, r3
 800f2c4:	f04f 0000 	mov.w	r0, #0
 800f2c8:	f04f 0100 	mov.w	r1, #0
 800f2cc:	00d9      	lsls	r1, r3, #3
 800f2ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f2d2:	00d0      	lsls	r0, r2, #3
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	1911      	adds	r1, r2, r4
 800f2da:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f2de:	416b      	adcs	r3, r5
 800f2e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	f04f 0300 	mov.w	r3, #0
 800f2f0:	1891      	adds	r1, r2, r2
 800f2f2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f2f6:	415b      	adcs	r3, r3
 800f2f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f2fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800f300:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800f304:	f7f1 fcc0 	bl	8000c88 <__aeabi_uldivmod>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4bad      	ldr	r3, [pc, #692]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f30e:	fba3 2302 	umull	r2, r3, r3, r2
 800f312:	095b      	lsrs	r3, r3, #5
 800f314:	011e      	lsls	r6, r3, #4
 800f316:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f31a:	461c      	mov	r4, r3
 800f31c:	f04f 0500 	mov.w	r5, #0
 800f320:	4622      	mov	r2, r4
 800f322:	462b      	mov	r3, r5
 800f324:	1891      	adds	r1, r2, r2
 800f326:	67b9      	str	r1, [r7, #120]	; 0x78
 800f328:	415b      	adcs	r3, r3
 800f32a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f32c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f330:	1912      	adds	r2, r2, r4
 800f332:	eb45 0303 	adc.w	r3, r5, r3
 800f336:	f04f 0000 	mov.w	r0, #0
 800f33a:	f04f 0100 	mov.w	r1, #0
 800f33e:	00d9      	lsls	r1, r3, #3
 800f340:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f344:	00d0      	lsls	r0, r2, #3
 800f346:	4602      	mov	r2, r0
 800f348:	460b      	mov	r3, r1
 800f34a:	1911      	adds	r1, r2, r4
 800f34c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800f350:	416b      	adcs	r3, r5
 800f352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	461a      	mov	r2, r3
 800f35e:	f04f 0300 	mov.w	r3, #0
 800f362:	1891      	adds	r1, r2, r2
 800f364:	6739      	str	r1, [r7, #112]	; 0x70
 800f366:	415b      	adcs	r3, r3
 800f368:	677b      	str	r3, [r7, #116]	; 0x74
 800f36a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800f36e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f372:	f7f1 fc89 	bl	8000c88 <__aeabi_uldivmod>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	4b92      	ldr	r3, [pc, #584]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f37c:	fba3 1302 	umull	r1, r3, r3, r2
 800f380:	095b      	lsrs	r3, r3, #5
 800f382:	2164      	movs	r1, #100	; 0x64
 800f384:	fb01 f303 	mul.w	r3, r1, r3
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	00db      	lsls	r3, r3, #3
 800f38c:	3332      	adds	r3, #50	; 0x32
 800f38e:	4a8d      	ldr	r2, [pc, #564]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f390:	fba2 2303 	umull	r2, r3, r2, r3
 800f394:	095b      	lsrs	r3, r3, #5
 800f396:	005b      	lsls	r3, r3, #1
 800f398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f39c:	441e      	add	r6, r3
 800f39e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f04f 0100 	mov.w	r1, #0
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	1894      	adds	r4, r2, r2
 800f3ae:	66bc      	str	r4, [r7, #104]	; 0x68
 800f3b0:	415b      	adcs	r3, r3
 800f3b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f3b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f3b8:	1812      	adds	r2, r2, r0
 800f3ba:	eb41 0303 	adc.w	r3, r1, r3
 800f3be:	f04f 0400 	mov.w	r4, #0
 800f3c2:	f04f 0500 	mov.w	r5, #0
 800f3c6:	00dd      	lsls	r5, r3, #3
 800f3c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f3cc:	00d4      	lsls	r4, r2, #3
 800f3ce:	4622      	mov	r2, r4
 800f3d0:	462b      	mov	r3, r5
 800f3d2:	1814      	adds	r4, r2, r0
 800f3d4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800f3d8:	414b      	adcs	r3, r1
 800f3da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	f04f 0300 	mov.w	r3, #0
 800f3ea:	1891      	adds	r1, r2, r2
 800f3ec:	6639      	str	r1, [r7, #96]	; 0x60
 800f3ee:	415b      	adcs	r3, r3
 800f3f0:	667b      	str	r3, [r7, #100]	; 0x64
 800f3f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f3f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f3fa:	f7f1 fc45 	bl	8000c88 <__aeabi_uldivmod>
 800f3fe:	4602      	mov	r2, r0
 800f400:	460b      	mov	r3, r1
 800f402:	4b70      	ldr	r3, [pc, #448]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f404:	fba3 1302 	umull	r1, r3, r3, r2
 800f408:	095b      	lsrs	r3, r3, #5
 800f40a:	2164      	movs	r1, #100	; 0x64
 800f40c:	fb01 f303 	mul.w	r3, r1, r3
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	00db      	lsls	r3, r3, #3
 800f414:	3332      	adds	r3, #50	; 0x32
 800f416:	4a6b      	ldr	r2, [pc, #428]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f418:	fba2 2303 	umull	r2, r3, r2, r3
 800f41c:	095b      	lsrs	r3, r3, #5
 800f41e:	f003 0207 	and.w	r2, r3, #7
 800f422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4432      	add	r2, r6
 800f42a:	609a      	str	r2, [r3, #8]
 800f42c:	e26d      	b.n	800f90a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f42e:	f7fe fee3 	bl	800e1f8 <HAL_RCC_GetPCLK1Freq>
 800f432:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f43a:	461c      	mov	r4, r3
 800f43c:	f04f 0500 	mov.w	r5, #0
 800f440:	4622      	mov	r2, r4
 800f442:	462b      	mov	r3, r5
 800f444:	1891      	adds	r1, r2, r2
 800f446:	65b9      	str	r1, [r7, #88]	; 0x58
 800f448:	415b      	adcs	r3, r3
 800f44a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f44c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f450:	1912      	adds	r2, r2, r4
 800f452:	eb45 0303 	adc.w	r3, r5, r3
 800f456:	f04f 0000 	mov.w	r0, #0
 800f45a:	f04f 0100 	mov.w	r1, #0
 800f45e:	00d9      	lsls	r1, r3, #3
 800f460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f464:	00d0      	lsls	r0, r2, #3
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	1911      	adds	r1, r2, r4
 800f46c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f470:	416b      	adcs	r3, r5
 800f472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	461a      	mov	r2, r3
 800f47e:	f04f 0300 	mov.w	r3, #0
 800f482:	1891      	adds	r1, r2, r2
 800f484:	6539      	str	r1, [r7, #80]	; 0x50
 800f486:	415b      	adcs	r3, r3
 800f488:	657b      	str	r3, [r7, #84]	; 0x54
 800f48a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f48e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f492:	f7f1 fbf9 	bl	8000c88 <__aeabi_uldivmod>
 800f496:	4602      	mov	r2, r0
 800f498:	460b      	mov	r3, r1
 800f49a:	4b4a      	ldr	r3, [pc, #296]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f49c:	fba3 2302 	umull	r2, r3, r3, r2
 800f4a0:	095b      	lsrs	r3, r3, #5
 800f4a2:	011e      	lsls	r6, r3, #4
 800f4a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f4a8:	461c      	mov	r4, r3
 800f4aa:	f04f 0500 	mov.w	r5, #0
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	462b      	mov	r3, r5
 800f4b2:	1891      	adds	r1, r2, r2
 800f4b4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f4b6:	415b      	adcs	r3, r3
 800f4b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f4be:	1912      	adds	r2, r2, r4
 800f4c0:	eb45 0303 	adc.w	r3, r5, r3
 800f4c4:	f04f 0000 	mov.w	r0, #0
 800f4c8:	f04f 0100 	mov.w	r1, #0
 800f4cc:	00d9      	lsls	r1, r3, #3
 800f4ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f4d2:	00d0      	lsls	r0, r2, #3
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	1911      	adds	r1, r2, r4
 800f4da:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f4de:	416b      	adcs	r3, r5
 800f4e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	f04f 0300 	mov.w	r3, #0
 800f4f0:	1891      	adds	r1, r2, r2
 800f4f2:	6439      	str	r1, [r7, #64]	; 0x40
 800f4f4:	415b      	adcs	r3, r3
 800f4f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f4f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f4fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f500:	f7f1 fbc2 	bl	8000c88 <__aeabi_uldivmod>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	4b2e      	ldr	r3, [pc, #184]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f50a:	fba3 1302 	umull	r1, r3, r3, r2
 800f50e:	095b      	lsrs	r3, r3, #5
 800f510:	2164      	movs	r1, #100	; 0x64
 800f512:	fb01 f303 	mul.w	r3, r1, r3
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	00db      	lsls	r3, r3, #3
 800f51a:	3332      	adds	r3, #50	; 0x32
 800f51c:	4a29      	ldr	r2, [pc, #164]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f51e:	fba2 2303 	umull	r2, r3, r2, r3
 800f522:	095b      	lsrs	r3, r3, #5
 800f524:	005b      	lsls	r3, r3, #1
 800f526:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f52a:	441e      	add	r6, r3
 800f52c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f530:	4618      	mov	r0, r3
 800f532:	f04f 0100 	mov.w	r1, #0
 800f536:	4602      	mov	r2, r0
 800f538:	460b      	mov	r3, r1
 800f53a:	1894      	adds	r4, r2, r2
 800f53c:	63bc      	str	r4, [r7, #56]	; 0x38
 800f53e:	415b      	adcs	r3, r3
 800f540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f542:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f546:	1812      	adds	r2, r2, r0
 800f548:	eb41 0303 	adc.w	r3, r1, r3
 800f54c:	f04f 0400 	mov.w	r4, #0
 800f550:	f04f 0500 	mov.w	r5, #0
 800f554:	00dd      	lsls	r5, r3, #3
 800f556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f55a:	00d4      	lsls	r4, r2, #3
 800f55c:	4622      	mov	r2, r4
 800f55e:	462b      	mov	r3, r5
 800f560:	1814      	adds	r4, r2, r0
 800f562:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f566:	414b      	adcs	r3, r1
 800f568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	461a      	mov	r2, r3
 800f574:	f04f 0300 	mov.w	r3, #0
 800f578:	1891      	adds	r1, r2, r2
 800f57a:	6339      	str	r1, [r7, #48]	; 0x30
 800f57c:	415b      	adcs	r3, r3
 800f57e:	637b      	str	r3, [r7, #52]	; 0x34
 800f580:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f584:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f588:	f7f1 fb7e 	bl	8000c88 <__aeabi_uldivmod>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	4b0c      	ldr	r3, [pc, #48]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f592:	fba3 1302 	umull	r1, r3, r3, r2
 800f596:	095b      	lsrs	r3, r3, #5
 800f598:	2164      	movs	r1, #100	; 0x64
 800f59a:	fb01 f303 	mul.w	r3, r1, r3
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	00db      	lsls	r3, r3, #3
 800f5a2:	3332      	adds	r3, #50	; 0x32
 800f5a4:	4a07      	ldr	r2, [pc, #28]	; (800f5c4 <UART_SetConfig+0x3dc>)
 800f5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f5aa:	095b      	lsrs	r3, r3, #5
 800f5ac:	f003 0207 	and.w	r2, r3, #7
 800f5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4432      	add	r2, r6
 800f5b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f5ba:	e1a6      	b.n	800f90a <UART_SetConfig+0x722>
 800f5bc:	40011000 	.word	0x40011000
 800f5c0:	40011400 	.word	0x40011400
 800f5c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	4bd1      	ldr	r3, [pc, #836]	; (800f914 <UART_SetConfig+0x72c>)
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d006      	beq.n	800f5e2 <UART_SetConfig+0x3fa>
 800f5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5d8:	681a      	ldr	r2, [r3, #0]
 800f5da:	4bcf      	ldr	r3, [pc, #828]	; (800f918 <UART_SetConfig+0x730>)
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	f040 80ca 	bne.w	800f776 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f5e2:	f7fe fe1d 	bl	800e220 <HAL_RCC_GetPCLK2Freq>
 800f5e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f5ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5ee:	461c      	mov	r4, r3
 800f5f0:	f04f 0500 	mov.w	r5, #0
 800f5f4:	4622      	mov	r2, r4
 800f5f6:	462b      	mov	r3, r5
 800f5f8:	1891      	adds	r1, r2, r2
 800f5fa:	62b9      	str	r1, [r7, #40]	; 0x28
 800f5fc:	415b      	adcs	r3, r3
 800f5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f600:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f604:	1912      	adds	r2, r2, r4
 800f606:	eb45 0303 	adc.w	r3, r5, r3
 800f60a:	f04f 0000 	mov.w	r0, #0
 800f60e:	f04f 0100 	mov.w	r1, #0
 800f612:	00d9      	lsls	r1, r3, #3
 800f614:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f618:	00d0      	lsls	r0, r2, #3
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	eb12 0a04 	adds.w	sl, r2, r4
 800f622:	eb43 0b05 	adc.w	fp, r3, r5
 800f626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f04f 0100 	mov.w	r1, #0
 800f632:	f04f 0200 	mov.w	r2, #0
 800f636:	f04f 0300 	mov.w	r3, #0
 800f63a:	008b      	lsls	r3, r1, #2
 800f63c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f640:	0082      	lsls	r2, r0, #2
 800f642:	4650      	mov	r0, sl
 800f644:	4659      	mov	r1, fp
 800f646:	f7f1 fb1f 	bl	8000c88 <__aeabi_uldivmod>
 800f64a:	4602      	mov	r2, r0
 800f64c:	460b      	mov	r3, r1
 800f64e:	4bb3      	ldr	r3, [pc, #716]	; (800f91c <UART_SetConfig+0x734>)
 800f650:	fba3 2302 	umull	r2, r3, r3, r2
 800f654:	095b      	lsrs	r3, r3, #5
 800f656:	011e      	lsls	r6, r3, #4
 800f658:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f65c:	4618      	mov	r0, r3
 800f65e:	f04f 0100 	mov.w	r1, #0
 800f662:	4602      	mov	r2, r0
 800f664:	460b      	mov	r3, r1
 800f666:	1894      	adds	r4, r2, r2
 800f668:	623c      	str	r4, [r7, #32]
 800f66a:	415b      	adcs	r3, r3
 800f66c:	627b      	str	r3, [r7, #36]	; 0x24
 800f66e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f672:	1812      	adds	r2, r2, r0
 800f674:	eb41 0303 	adc.w	r3, r1, r3
 800f678:	f04f 0400 	mov.w	r4, #0
 800f67c:	f04f 0500 	mov.w	r5, #0
 800f680:	00dd      	lsls	r5, r3, #3
 800f682:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f686:	00d4      	lsls	r4, r2, #3
 800f688:	4622      	mov	r2, r4
 800f68a:	462b      	mov	r3, r5
 800f68c:	1814      	adds	r4, r2, r0
 800f68e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f692:	414b      	adcs	r3, r1
 800f694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f04f 0100 	mov.w	r1, #0
 800f6a4:	f04f 0200 	mov.w	r2, #0
 800f6a8:	f04f 0300 	mov.w	r3, #0
 800f6ac:	008b      	lsls	r3, r1, #2
 800f6ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f6b2:	0082      	lsls	r2, r0, #2
 800f6b4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f6b8:	f7f1 fae6 	bl	8000c88 <__aeabi_uldivmod>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	4b96      	ldr	r3, [pc, #600]	; (800f91c <UART_SetConfig+0x734>)
 800f6c2:	fba3 1302 	umull	r1, r3, r3, r2
 800f6c6:	095b      	lsrs	r3, r3, #5
 800f6c8:	2164      	movs	r1, #100	; 0x64
 800f6ca:	fb01 f303 	mul.w	r3, r1, r3
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	011b      	lsls	r3, r3, #4
 800f6d2:	3332      	adds	r3, #50	; 0x32
 800f6d4:	4a91      	ldr	r2, [pc, #580]	; (800f91c <UART_SetConfig+0x734>)
 800f6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f6da:	095b      	lsrs	r3, r3, #5
 800f6dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6e0:	441e      	add	r6, r3
 800f6e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f04f 0100 	mov.w	r1, #0
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	1894      	adds	r4, r2, r2
 800f6f2:	61bc      	str	r4, [r7, #24]
 800f6f4:	415b      	adcs	r3, r3
 800f6f6:	61fb      	str	r3, [r7, #28]
 800f6f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f6fc:	1812      	adds	r2, r2, r0
 800f6fe:	eb41 0303 	adc.w	r3, r1, r3
 800f702:	f04f 0400 	mov.w	r4, #0
 800f706:	f04f 0500 	mov.w	r5, #0
 800f70a:	00dd      	lsls	r5, r3, #3
 800f70c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f710:	00d4      	lsls	r4, r2, #3
 800f712:	4622      	mov	r2, r4
 800f714:	462b      	mov	r3, r5
 800f716:	1814      	adds	r4, r2, r0
 800f718:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800f71c:	414b      	adcs	r3, r1
 800f71e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	4618      	mov	r0, r3
 800f72a:	f04f 0100 	mov.w	r1, #0
 800f72e:	f04f 0200 	mov.w	r2, #0
 800f732:	f04f 0300 	mov.w	r3, #0
 800f736:	008b      	lsls	r3, r1, #2
 800f738:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f73c:	0082      	lsls	r2, r0, #2
 800f73e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800f742:	f7f1 faa1 	bl	8000c88 <__aeabi_uldivmod>
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	4b74      	ldr	r3, [pc, #464]	; (800f91c <UART_SetConfig+0x734>)
 800f74c:	fba3 1302 	umull	r1, r3, r3, r2
 800f750:	095b      	lsrs	r3, r3, #5
 800f752:	2164      	movs	r1, #100	; 0x64
 800f754:	fb01 f303 	mul.w	r3, r1, r3
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	011b      	lsls	r3, r3, #4
 800f75c:	3332      	adds	r3, #50	; 0x32
 800f75e:	4a6f      	ldr	r2, [pc, #444]	; (800f91c <UART_SetConfig+0x734>)
 800f760:	fba2 2303 	umull	r2, r3, r2, r3
 800f764:	095b      	lsrs	r3, r3, #5
 800f766:	f003 020f 	and.w	r2, r3, #15
 800f76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4432      	add	r2, r6
 800f772:	609a      	str	r2, [r3, #8]
 800f774:	e0c9      	b.n	800f90a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f776:	f7fe fd3f 	bl	800e1f8 <HAL_RCC_GetPCLK1Freq>
 800f77a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f77e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f782:	461c      	mov	r4, r3
 800f784:	f04f 0500 	mov.w	r5, #0
 800f788:	4622      	mov	r2, r4
 800f78a:	462b      	mov	r3, r5
 800f78c:	1891      	adds	r1, r2, r2
 800f78e:	6139      	str	r1, [r7, #16]
 800f790:	415b      	adcs	r3, r3
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f798:	1912      	adds	r2, r2, r4
 800f79a:	eb45 0303 	adc.w	r3, r5, r3
 800f79e:	f04f 0000 	mov.w	r0, #0
 800f7a2:	f04f 0100 	mov.w	r1, #0
 800f7a6:	00d9      	lsls	r1, r3, #3
 800f7a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f7ac:	00d0      	lsls	r0, r2, #3
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	eb12 0804 	adds.w	r8, r2, r4
 800f7b6:	eb43 0905 	adc.w	r9, r3, r5
 800f7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f04f 0100 	mov.w	r1, #0
 800f7c6:	f04f 0200 	mov.w	r2, #0
 800f7ca:	f04f 0300 	mov.w	r3, #0
 800f7ce:	008b      	lsls	r3, r1, #2
 800f7d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f7d4:	0082      	lsls	r2, r0, #2
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	4649      	mov	r1, r9
 800f7da:	f7f1 fa55 	bl	8000c88 <__aeabi_uldivmod>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4b4e      	ldr	r3, [pc, #312]	; (800f91c <UART_SetConfig+0x734>)
 800f7e4:	fba3 2302 	umull	r2, r3, r3, r2
 800f7e8:	095b      	lsrs	r3, r3, #5
 800f7ea:	011e      	lsls	r6, r3, #4
 800f7ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f04f 0100 	mov.w	r1, #0
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	1894      	adds	r4, r2, r2
 800f7fc:	60bc      	str	r4, [r7, #8]
 800f7fe:	415b      	adcs	r3, r3
 800f800:	60fb      	str	r3, [r7, #12]
 800f802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f806:	1812      	adds	r2, r2, r0
 800f808:	eb41 0303 	adc.w	r3, r1, r3
 800f80c:	f04f 0400 	mov.w	r4, #0
 800f810:	f04f 0500 	mov.w	r5, #0
 800f814:	00dd      	lsls	r5, r3, #3
 800f816:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f81a:	00d4      	lsls	r4, r2, #3
 800f81c:	4622      	mov	r2, r4
 800f81e:	462b      	mov	r3, r5
 800f820:	1814      	adds	r4, r2, r0
 800f822:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f826:	414b      	adcs	r3, r1
 800f828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	4618      	mov	r0, r3
 800f834:	f04f 0100 	mov.w	r1, #0
 800f838:	f04f 0200 	mov.w	r2, #0
 800f83c:	f04f 0300 	mov.w	r3, #0
 800f840:	008b      	lsls	r3, r1, #2
 800f842:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f846:	0082      	lsls	r2, r0, #2
 800f848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f84c:	f7f1 fa1c 	bl	8000c88 <__aeabi_uldivmod>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	4b31      	ldr	r3, [pc, #196]	; (800f91c <UART_SetConfig+0x734>)
 800f856:	fba3 1302 	umull	r1, r3, r3, r2
 800f85a:	095b      	lsrs	r3, r3, #5
 800f85c:	2164      	movs	r1, #100	; 0x64
 800f85e:	fb01 f303 	mul.w	r3, r1, r3
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	011b      	lsls	r3, r3, #4
 800f866:	3332      	adds	r3, #50	; 0x32
 800f868:	4a2c      	ldr	r2, [pc, #176]	; (800f91c <UART_SetConfig+0x734>)
 800f86a:	fba2 2303 	umull	r2, r3, r2, r3
 800f86e:	095b      	lsrs	r3, r3, #5
 800f870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f874:	441e      	add	r6, r3
 800f876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f87a:	4618      	mov	r0, r3
 800f87c:	f04f 0100 	mov.w	r1, #0
 800f880:	4602      	mov	r2, r0
 800f882:	460b      	mov	r3, r1
 800f884:	1894      	adds	r4, r2, r2
 800f886:	603c      	str	r4, [r7, #0]
 800f888:	415b      	adcs	r3, r3
 800f88a:	607b      	str	r3, [r7, #4]
 800f88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f890:	1812      	adds	r2, r2, r0
 800f892:	eb41 0303 	adc.w	r3, r1, r3
 800f896:	f04f 0400 	mov.w	r4, #0
 800f89a:	f04f 0500 	mov.w	r5, #0
 800f89e:	00dd      	lsls	r5, r3, #3
 800f8a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f8a4:	00d4      	lsls	r4, r2, #3
 800f8a6:	4622      	mov	r2, r4
 800f8a8:	462b      	mov	r3, r5
 800f8aa:	1814      	adds	r4, r2, r0
 800f8ac:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800f8b0:	414b      	adcs	r3, r1
 800f8b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f04f 0100 	mov.w	r1, #0
 800f8c2:	f04f 0200 	mov.w	r2, #0
 800f8c6:	f04f 0300 	mov.w	r3, #0
 800f8ca:	008b      	lsls	r3, r1, #2
 800f8cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f8d0:	0082      	lsls	r2, r0, #2
 800f8d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f8d6:	f7f1 f9d7 	bl	8000c88 <__aeabi_uldivmod>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	4b0f      	ldr	r3, [pc, #60]	; (800f91c <UART_SetConfig+0x734>)
 800f8e0:	fba3 1302 	umull	r1, r3, r3, r2
 800f8e4:	095b      	lsrs	r3, r3, #5
 800f8e6:	2164      	movs	r1, #100	; 0x64
 800f8e8:	fb01 f303 	mul.w	r3, r1, r3
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	011b      	lsls	r3, r3, #4
 800f8f0:	3332      	adds	r3, #50	; 0x32
 800f8f2:	4a0a      	ldr	r2, [pc, #40]	; (800f91c <UART_SetConfig+0x734>)
 800f8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f8:	095b      	lsrs	r3, r3, #5
 800f8fa:	f003 020f 	and.w	r2, r3, #15
 800f8fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4432      	add	r2, r6
 800f906:	609a      	str	r2, [r3, #8]
}
 800f908:	e7ff      	b.n	800f90a <UART_SetConfig+0x722>
 800f90a:	bf00      	nop
 800f90c:	37f4      	adds	r7, #244	; 0xf4
 800f90e:	46bd      	mov	sp, r7
 800f910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f914:	40011000 	.word	0x40011000
 800f918:	40011400 	.word	0x40011400
 800f91c:	51eb851f 	.word	0x51eb851f

0800f920 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f92a:	2300      	movs	r3, #0
 800f92c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f938:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	4b20      	ldr	r3, [pc, #128]	; (800f9c0 <FSMC_NORSRAM_Init+0xa0>)
 800f93e:	4013      	ands	r3, r2
 800f940:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f94a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f950:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f956:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f95c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f962:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f968:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f96e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f974:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f97a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f980:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f986:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f98c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	4313      	orrs	r3, r2
 800f992:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	2b08      	cmp	r3, #8
 800f99a:	d103      	bne.n	800f9a4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	68f9      	ldr	r1, [r7, #12]
 800f9ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	fff00080 	.word	0xfff00080

0800f9c4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	1c5a      	adds	r2, r3, #1
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9de:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f9e6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f9f2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f9fa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800fa02:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	3b01      	subs	r3, #1
 800fa0a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fa0c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	695b      	ldr	r3, [r3, #20]
 800fa12:	3b02      	subs	r3, #2
 800fa14:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fa16:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	697a      	ldr	r2, [r7, #20]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	1c5a      	adds	r2, r3, #1
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6979      	ldr	r1, [r7, #20]
 800fa2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	371c      	adds	r7, #28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
	...

0800fa40 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b087      	sub	sp, #28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa58:	d122      	bne.n	800faa0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa62:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	4b15      	ldr	r3, [pc, #84]	; (800fabc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800fa68:	4013      	ands	r3, r2
 800fa6a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fa76:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fa7e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800fa86:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fa8c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fa8e:	697a      	ldr	r2, [r7, #20]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	6979      	ldr	r1, [r7, #20]
 800fa9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fa9e:	e005      	b.n	800faac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800faa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	371c      	adds	r7, #28
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	cff00000 	.word	0xcff00000

0800fac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fac0:	b084      	sub	sp, #16
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b084      	sub	sp, #16
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	f107 001c 	add.w	r0, r7, #28
 800face:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d122      	bne.n	800fb1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fadc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800faec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d105      	bne.n	800fb12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f001 fac6 	bl	80110a4 <USB_CoreReset>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	73fb      	strb	r3, [r7, #15]
 800fb1c:	e01a      	b.n	800fb54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f001 faba 	bl	80110a4 <USB_CoreReset>
 800fb30:	4603      	mov	r3, r0
 800fb32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d106      	bne.n	800fb48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	639a      	str	r2, [r3, #56]	; 0x38
 800fb46:	e005      	b.n	800fb54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d10b      	bne.n	800fb72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	689b      	ldr	r3, [r3, #8]
 800fb5e:	f043 0206 	orr.w	r2, r3, #6
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	689b      	ldr	r3, [r3, #8]
 800fb6a:	f043 0220 	orr.w	r2, r3, #32
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb7e:	b004      	add	sp, #16
 800fb80:	4770      	bx	lr
	...

0800fb84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fb92:	79fb      	ldrb	r3, [r7, #7]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d165      	bne.n	800fc64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	4a41      	ldr	r2, [pc, #260]	; (800fca0 <USB_SetTurnaroundTime+0x11c>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d906      	bls.n	800fbae <USB_SetTurnaroundTime+0x2a>
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	4a40      	ldr	r2, [pc, #256]	; (800fca4 <USB_SetTurnaroundTime+0x120>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d202      	bcs.n	800fbae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fba8:	230f      	movs	r3, #15
 800fbaa:	617b      	str	r3, [r7, #20]
 800fbac:	e062      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	4a3c      	ldr	r2, [pc, #240]	; (800fca4 <USB_SetTurnaroundTime+0x120>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d306      	bcc.n	800fbc4 <USB_SetTurnaroundTime+0x40>
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	4a3b      	ldr	r2, [pc, #236]	; (800fca8 <USB_SetTurnaroundTime+0x124>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d202      	bcs.n	800fbc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fbbe:	230e      	movs	r3, #14
 800fbc0:	617b      	str	r3, [r7, #20]
 800fbc2:	e057      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	4a38      	ldr	r2, [pc, #224]	; (800fca8 <USB_SetTurnaroundTime+0x124>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d306      	bcc.n	800fbda <USB_SetTurnaroundTime+0x56>
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	4a37      	ldr	r2, [pc, #220]	; (800fcac <USB_SetTurnaroundTime+0x128>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d202      	bcs.n	800fbda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fbd4:	230d      	movs	r3, #13
 800fbd6:	617b      	str	r3, [r7, #20]
 800fbd8:	e04c      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	4a33      	ldr	r2, [pc, #204]	; (800fcac <USB_SetTurnaroundTime+0x128>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d306      	bcc.n	800fbf0 <USB_SetTurnaroundTime+0x6c>
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	4a32      	ldr	r2, [pc, #200]	; (800fcb0 <USB_SetTurnaroundTime+0x12c>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d802      	bhi.n	800fbf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fbea:	230c      	movs	r3, #12
 800fbec:	617b      	str	r3, [r7, #20]
 800fbee:	e041      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	4a2f      	ldr	r2, [pc, #188]	; (800fcb0 <USB_SetTurnaroundTime+0x12c>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d906      	bls.n	800fc06 <USB_SetTurnaroundTime+0x82>
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	4a2e      	ldr	r2, [pc, #184]	; (800fcb4 <USB_SetTurnaroundTime+0x130>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d802      	bhi.n	800fc06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fc00:	230b      	movs	r3, #11
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	e036      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	4a2a      	ldr	r2, [pc, #168]	; (800fcb4 <USB_SetTurnaroundTime+0x130>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d906      	bls.n	800fc1c <USB_SetTurnaroundTime+0x98>
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	4a29      	ldr	r2, [pc, #164]	; (800fcb8 <USB_SetTurnaroundTime+0x134>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d802      	bhi.n	800fc1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fc16:	230a      	movs	r3, #10
 800fc18:	617b      	str	r3, [r7, #20]
 800fc1a:	e02b      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	4a26      	ldr	r2, [pc, #152]	; (800fcb8 <USB_SetTurnaroundTime+0x134>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d906      	bls.n	800fc32 <USB_SetTurnaroundTime+0xae>
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	4a25      	ldr	r2, [pc, #148]	; (800fcbc <USB_SetTurnaroundTime+0x138>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d202      	bcs.n	800fc32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fc2c:	2309      	movs	r3, #9
 800fc2e:	617b      	str	r3, [r7, #20]
 800fc30:	e020      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	4a21      	ldr	r2, [pc, #132]	; (800fcbc <USB_SetTurnaroundTime+0x138>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d306      	bcc.n	800fc48 <USB_SetTurnaroundTime+0xc4>
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	4a20      	ldr	r2, [pc, #128]	; (800fcc0 <USB_SetTurnaroundTime+0x13c>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d802      	bhi.n	800fc48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fc42:	2308      	movs	r3, #8
 800fc44:	617b      	str	r3, [r7, #20]
 800fc46:	e015      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	4a1d      	ldr	r2, [pc, #116]	; (800fcc0 <USB_SetTurnaroundTime+0x13c>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d906      	bls.n	800fc5e <USB_SetTurnaroundTime+0xda>
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	4a1c      	ldr	r2, [pc, #112]	; (800fcc4 <USB_SetTurnaroundTime+0x140>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d202      	bcs.n	800fc5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fc58:	2307      	movs	r3, #7
 800fc5a:	617b      	str	r3, [r7, #20]
 800fc5c:	e00a      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fc5e:	2306      	movs	r3, #6
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	e007      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d102      	bne.n	800fc70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fc6a:	2309      	movs	r3, #9
 800fc6c:	617b      	str	r3, [r7, #20]
 800fc6e:	e001      	b.n	800fc74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fc70:	2309      	movs	r3, #9
 800fc72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	68da      	ldr	r2, [r3, #12]
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	029b      	lsls	r3, r3, #10
 800fc88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fc8c:	431a      	orrs	r2, r3
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	371c      	adds	r7, #28
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr
 800fca0:	00d8acbf 	.word	0x00d8acbf
 800fca4:	00e4e1c0 	.word	0x00e4e1c0
 800fca8:	00f42400 	.word	0x00f42400
 800fcac:	01067380 	.word	0x01067380
 800fcb0:	011a499f 	.word	0x011a499f
 800fcb4:	01312cff 	.word	0x01312cff
 800fcb8:	014ca43f 	.word	0x014ca43f
 800fcbc:	016e3600 	.word	0x016e3600
 800fcc0:	01a6ab1f 	.word	0x01a6ab1f
 800fcc4:	01e84800 	.word	0x01e84800

0800fcc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	689b      	ldr	r3, [r3, #8]
 800fcd4:	f043 0201 	orr.w	r2, r3, #1
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	370c      	adds	r7, #12
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fcea:	b480      	push	{r7}
 800fcec:	b083      	sub	sp, #12
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	689b      	ldr	r3, [r3, #8]
 800fcf6:	f023 0201 	bic.w	r2, r3, #1
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fd24:	78fb      	ldrb	r3, [r7, #3]
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d106      	bne.n	800fd38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	60da      	str	r2, [r3, #12]
 800fd36:	e00b      	b.n	800fd50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fd38:	78fb      	ldrb	r3, [r7, #3]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d106      	bne.n	800fd4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	60da      	str	r2, [r3, #12]
 800fd4a:	e001      	b.n	800fd50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e003      	b.n	800fd58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fd50:	2032      	movs	r0, #50	; 0x32
 800fd52:	f7fb fdd7 	bl	800b904 <HAL_Delay>

  return HAL_OK;
 800fd56:	2300      	movs	r3, #0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd60:	b084      	sub	sp, #16
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b086      	sub	sp, #24
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
 800fd6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fd6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fd72:	2300      	movs	r3, #0
 800fd74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	613b      	str	r3, [r7, #16]
 800fd7e:	e009      	b.n	800fd94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	3340      	adds	r3, #64	; 0x40
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	4413      	add	r3, r2
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	3301      	adds	r3, #1
 800fd92:	613b      	str	r3, [r7, #16]
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	2b0e      	cmp	r3, #14
 800fd98:	d9f2      	bls.n	800fd80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d11c      	bne.n	800fdda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdae:	f043 0302 	orr.w	r3, r3, #2
 800fdb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	639a      	str	r2, [r3, #56]	; 0x38
 800fdd8:	e00b      	b.n	800fdf2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe04:	4619      	mov	r1, r3
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	680b      	ldr	r3, [r1, #0]
 800fe10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fe12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d10c      	bne.n	800fe32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fe18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d104      	bne.n	800fe28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fe1e:	2100      	movs	r1, #0
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 f949 	bl	80100b8 <USB_SetDevSpeed>
 800fe26:	e008      	b.n	800fe3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fe28:	2101      	movs	r1, #1
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 f944 	bl	80100b8 <USB_SetDevSpeed>
 800fe30:	e003      	b.n	800fe3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fe32:	2103      	movs	r1, #3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 f93f 	bl	80100b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fe3a:	2110      	movs	r1, #16
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 f8f3 	bl	8010028 <USB_FlushTxFifo>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d001      	beq.n	800fe4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 f911 	bl	8010074 <USB_FlushRxFifo>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe62:	461a      	mov	r2, r3
 800fe64:	2300      	movs	r3, #0
 800fe66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe6e:	461a      	mov	r2, r3
 800fe70:	2300      	movs	r3, #0
 800fe72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe80:	2300      	movs	r3, #0
 800fe82:	613b      	str	r3, [r7, #16]
 800fe84:	e043      	b.n	800ff0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	015a      	lsls	r2, r3, #5
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe9c:	d118      	bne.n	800fed0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d10a      	bne.n	800feba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	015a      	lsls	r2, r3, #5
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4413      	add	r3, r2
 800feac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb0:	461a      	mov	r2, r3
 800feb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800feb6:	6013      	str	r3, [r2, #0]
 800feb8:	e013      	b.n	800fee2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	015a      	lsls	r2, r3, #5
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	4413      	add	r3, r2
 800fec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fec6:	461a      	mov	r2, r3
 800fec8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fecc:	6013      	str	r3, [r2, #0]
 800fece:	e008      	b.n	800fee2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	015a      	lsls	r2, r3, #5
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	4413      	add	r3, r2
 800fed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fedc:	461a      	mov	r2, r3
 800fede:	2300      	movs	r3, #0
 800fee0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	015a      	lsls	r2, r3, #5
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	4413      	add	r3, r2
 800feea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feee:	461a      	mov	r2, r3
 800fef0:	2300      	movs	r3, #0
 800fef2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	015a      	lsls	r2, r3, #5
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	4413      	add	r3, r2
 800fefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff00:	461a      	mov	r2, r3
 800ff02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ff06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	613b      	str	r3, [r7, #16]
 800ff0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff10:	693a      	ldr	r2, [r7, #16]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d3b7      	bcc.n	800fe86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff16:	2300      	movs	r3, #0
 800ff18:	613b      	str	r3, [r7, #16]
 800ff1a:	e043      	b.n	800ffa4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	015a      	lsls	r2, r3, #5
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	4413      	add	r3, r2
 800ff24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff32:	d118      	bne.n	800ff66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d10a      	bne.n	800ff50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	015a      	lsls	r2, r3, #5
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	4413      	add	r3, r2
 800ff42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff46:	461a      	mov	r2, r3
 800ff48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	e013      	b.n	800ff78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	015a      	lsls	r2, r3, #5
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	4413      	add	r3, r2
 800ff58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ff62:	6013      	str	r3, [r2, #0]
 800ff64:	e008      	b.n	800ff78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	015a      	lsls	r2, r3, #5
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff72:	461a      	mov	r2, r3
 800ff74:	2300      	movs	r3, #0
 800ff76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	015a      	lsls	r2, r3, #5
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	4413      	add	r3, r2
 800ff80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff84:	461a      	mov	r2, r3
 800ff86:	2300      	movs	r3, #0
 800ff88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	015a      	lsls	r2, r3, #5
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	4413      	add	r3, r2
 800ff92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff96:	461a      	mov	r2, r3
 800ff98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ff9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	613b      	str	r3, [r7, #16]
 800ffa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d3b7      	bcc.n	800ff1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ffba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ffbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ffcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d105      	bne.n	800ffe0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	699b      	ldr	r3, [r3, #24]
 800ffd8:	f043 0210 	orr.w	r2, r3, #16
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	699a      	ldr	r2, [r3, #24]
 800ffe4:	4b0f      	ldr	r3, [pc, #60]	; (8010024 <USB_DevInit+0x2c4>)
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ffec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d005      	beq.n	800fffe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	699b      	ldr	r3, [r3, #24]
 800fff6:	f043 0208 	orr.w	r2, r3, #8
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010000:	2b01      	cmp	r3, #1
 8010002:	d107      	bne.n	8010014 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	699b      	ldr	r3, [r3, #24]
 8010008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801000c:	f043 0304 	orr.w	r3, r3, #4
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010014:	7dfb      	ldrb	r3, [r7, #23]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3718      	adds	r7, #24
 801001a:	46bd      	mov	sp, r7
 801001c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010020:	b004      	add	sp, #16
 8010022:	4770      	bx	lr
 8010024:	803c3800 	.word	0x803c3800

08010028 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010032:	2300      	movs	r3, #0
 8010034:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	019b      	lsls	r3, r3, #6
 801003a:	f043 0220 	orr.w	r2, r3, #32
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	4a09      	ldr	r2, [pc, #36]	; (8010070 <USB_FlushTxFifo+0x48>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d901      	bls.n	8010054 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010050:	2303      	movs	r3, #3
 8010052:	e006      	b.n	8010062 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	f003 0320 	and.w	r3, r3, #32
 801005c:	2b20      	cmp	r3, #32
 801005e:	d0f0      	beq.n	8010042 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	00030d40 	.word	0x00030d40

08010074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801007c:	2300      	movs	r3, #0
 801007e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2210      	movs	r2, #16
 8010084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	3301      	adds	r3, #1
 801008a:	60fb      	str	r3, [r7, #12]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	4a09      	ldr	r2, [pc, #36]	; (80100b4 <USB_FlushRxFifo+0x40>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d901      	bls.n	8010098 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010094:	2303      	movs	r3, #3
 8010096:	e006      	b.n	80100a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	691b      	ldr	r3, [r3, #16]
 801009c:	f003 0310 	and.w	r3, r3, #16
 80100a0:	2b10      	cmp	r3, #16
 80100a2:	d0f0      	beq.n	8010086 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80100a4:	2300      	movs	r3, #0
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3714      	adds	r7, #20
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr
 80100b2:	bf00      	nop
 80100b4:	00030d40 	.word	0x00030d40

080100b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	460b      	mov	r3, r1
 80100c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	78fb      	ldrb	r3, [r7, #3]
 80100d2:	68f9      	ldr	r1, [r7, #12]
 80100d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100d8:	4313      	orrs	r3, r2
 80100da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80100dc:	2300      	movs	r3, #0
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3714      	adds	r7, #20
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b087      	sub	sp, #28
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	f003 0306 	and.w	r3, r3, #6
 8010102:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d102      	bne.n	8010110 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801010a:	2300      	movs	r3, #0
 801010c:	75fb      	strb	r3, [r7, #23]
 801010e:	e00a      	b.n	8010126 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2b02      	cmp	r3, #2
 8010114:	d002      	beq.n	801011c <USB_GetDevSpeed+0x32>
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b06      	cmp	r3, #6
 801011a:	d102      	bne.n	8010122 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801011c:	2302      	movs	r3, #2
 801011e:	75fb      	strb	r3, [r7, #23]
 8010120:	e001      	b.n	8010126 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010122:	230f      	movs	r3, #15
 8010124:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010126:	7dfb      	ldrb	r3, [r7, #23]
}
 8010128:	4618      	mov	r0, r3
 801012a:	371c      	adds	r7, #28
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	785b      	ldrb	r3, [r3, #1]
 801014c:	2b01      	cmp	r3, #1
 801014e:	d13a      	bne.n	80101c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010156:	69da      	ldr	r2, [r3, #28]
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	f003 030f 	and.w	r3, r3, #15
 8010160:	2101      	movs	r1, #1
 8010162:	fa01 f303 	lsl.w	r3, r1, r3
 8010166:	b29b      	uxth	r3, r3
 8010168:	68f9      	ldr	r1, [r7, #12]
 801016a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801016e:	4313      	orrs	r3, r2
 8010170:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	015a      	lsls	r2, r3, #5
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	4413      	add	r3, r2
 801017a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010184:	2b00      	cmp	r3, #0
 8010186:	d155      	bne.n	8010234 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	015a      	lsls	r2, r3, #5
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	4413      	add	r3, r2
 8010190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	78db      	ldrb	r3, [r3, #3]
 80101a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80101a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	059b      	lsls	r3, r3, #22
 80101aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80101ac:	4313      	orrs	r3, r2
 80101ae:	68ba      	ldr	r2, [r7, #8]
 80101b0:	0151      	lsls	r1, r2, #5
 80101b2:	68fa      	ldr	r2, [r7, #12]
 80101b4:	440a      	add	r2, r1
 80101b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101c2:	6013      	str	r3, [r2, #0]
 80101c4:	e036      	b.n	8010234 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101cc:	69da      	ldr	r2, [r3, #28]
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	f003 030f 	and.w	r3, r3, #15
 80101d6:	2101      	movs	r1, #1
 80101d8:	fa01 f303 	lsl.w	r3, r1, r3
 80101dc:	041b      	lsls	r3, r3, #16
 80101de:	68f9      	ldr	r1, [r7, #12]
 80101e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101e4:	4313      	orrs	r3, r2
 80101e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	015a      	lsls	r2, r3, #5
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	4413      	add	r3, r2
 80101f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d11a      	bne.n	8010234 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	015a      	lsls	r2, r3, #5
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	4413      	add	r3, r2
 8010206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	78db      	ldrb	r3, [r3, #3]
 8010218:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801021a:	430b      	orrs	r3, r1
 801021c:	4313      	orrs	r3, r2
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	0151      	lsls	r1, r2, #5
 8010222:	68fa      	ldr	r2, [r7, #12]
 8010224:	440a      	add	r2, r1
 8010226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801022a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801022e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010232:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	3714      	adds	r7, #20
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr
	...

08010244 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010244:	b480      	push	{r7}
 8010246:	b085      	sub	sp, #20
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	785b      	ldrb	r3, [r3, #1]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d161      	bne.n	8010324 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	015a      	lsls	r2, r3, #5
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	4413      	add	r3, r2
 8010268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010276:	d11f      	bne.n	80102b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	015a      	lsls	r2, r3, #5
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	4413      	add	r3, r2
 8010280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	0151      	lsls	r1, r2, #5
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	440a      	add	r2, r1
 801028e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010292:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010296:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	015a      	lsls	r2, r3, #5
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	4413      	add	r3, r2
 80102a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	0151      	lsls	r1, r2, #5
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	440a      	add	r2, r1
 80102ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	f003 030f 	and.w	r3, r3, #15
 80102c8:	2101      	movs	r1, #1
 80102ca:	fa01 f303 	lsl.w	r3, r1, r3
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	43db      	mvns	r3, r3
 80102d2:	68f9      	ldr	r1, [r7, #12]
 80102d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102d8:	4013      	ands	r3, r2
 80102da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102e2:	69da      	ldr	r2, [r3, #28]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	f003 030f 	and.w	r3, r3, #15
 80102ec:	2101      	movs	r1, #1
 80102ee:	fa01 f303 	lsl.w	r3, r1, r3
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	43db      	mvns	r3, r3
 80102f6:	68f9      	ldr	r1, [r7, #12]
 80102f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102fc:	4013      	ands	r3, r2
 80102fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	015a      	lsls	r2, r3, #5
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	4413      	add	r3, r2
 8010308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801030c:	681a      	ldr	r2, [r3, #0]
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	0159      	lsls	r1, r3, #5
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	440b      	add	r3, r1
 8010316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801031a:	4619      	mov	r1, r3
 801031c:	4b35      	ldr	r3, [pc, #212]	; (80103f4 <USB_DeactivateEndpoint+0x1b0>)
 801031e:	4013      	ands	r3, r2
 8010320:	600b      	str	r3, [r1, #0]
 8010322:	e060      	b.n	80103e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	015a      	lsls	r2, r3, #5
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	4413      	add	r3, r2
 801032c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801033a:	d11f      	bne.n	801037c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	015a      	lsls	r2, r3, #5
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	4413      	add	r3, r2
 8010344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	0151      	lsls	r1, r2, #5
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	440a      	add	r2, r1
 8010352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801035a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	015a      	lsls	r2, r3, #5
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	4413      	add	r3, r2
 8010364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	0151      	lsls	r1, r2, #5
 801036e:	68fa      	ldr	r2, [r7, #12]
 8010370:	440a      	add	r2, r1
 8010372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801037a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	f003 030f 	and.w	r3, r3, #15
 801038c:	2101      	movs	r1, #1
 801038e:	fa01 f303 	lsl.w	r3, r1, r3
 8010392:	041b      	lsls	r3, r3, #16
 8010394:	43db      	mvns	r3, r3
 8010396:	68f9      	ldr	r1, [r7, #12]
 8010398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801039c:	4013      	ands	r3, r2
 801039e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a6:	69da      	ldr	r2, [r3, #28]
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	f003 030f 	and.w	r3, r3, #15
 80103b0:	2101      	movs	r1, #1
 80103b2:	fa01 f303 	lsl.w	r3, r1, r3
 80103b6:	041b      	lsls	r3, r3, #16
 80103b8:	43db      	mvns	r3, r3
 80103ba:	68f9      	ldr	r1, [r7, #12]
 80103bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103c0:	4013      	ands	r3, r2
 80103c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	015a      	lsls	r2, r3, #5
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	4413      	add	r3, r2
 80103cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	0159      	lsls	r1, r3, #5
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	440b      	add	r3, r1
 80103da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103de:	4619      	mov	r1, r3
 80103e0:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <USB_DeactivateEndpoint+0x1b4>)
 80103e2:	4013      	ands	r3, r2
 80103e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3714      	adds	r7, #20
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr
 80103f4:	ec337800 	.word	0xec337800
 80103f8:	eff37800 	.word	0xeff37800

080103fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b08a      	sub	sp, #40	; 0x28
 8010400:	af02      	add	r7, sp, #8
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	4613      	mov	r3, r2
 8010408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	785b      	ldrb	r3, [r3, #1]
 8010418:	2b01      	cmp	r3, #1
 801041a:	f040 815c 	bne.w	80106d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	695b      	ldr	r3, [r3, #20]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d132      	bne.n	801048c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	015a      	lsls	r2, r3, #5
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	4413      	add	r3, r2
 801042e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	69ba      	ldr	r2, [r7, #24]
 8010436:	0151      	lsls	r1, r2, #5
 8010438:	69fa      	ldr	r2, [r7, #28]
 801043a:	440a      	add	r2, r1
 801043c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010440:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010444:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	015a      	lsls	r2, r3, #5
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	4413      	add	r3, r2
 8010452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010456:	691b      	ldr	r3, [r3, #16]
 8010458:	69ba      	ldr	r2, [r7, #24]
 801045a:	0151      	lsls	r1, r2, #5
 801045c:	69fa      	ldr	r2, [r7, #28]
 801045e:	440a      	add	r2, r1
 8010460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	015a      	lsls	r2, r3, #5
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	4413      	add	r3, r2
 8010472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010476:	691b      	ldr	r3, [r3, #16]
 8010478:	69ba      	ldr	r2, [r7, #24]
 801047a:	0151      	lsls	r1, r2, #5
 801047c:	69fa      	ldr	r2, [r7, #28]
 801047e:	440a      	add	r2, r1
 8010480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010484:	0cdb      	lsrs	r3, r3, #19
 8010486:	04db      	lsls	r3, r3, #19
 8010488:	6113      	str	r3, [r2, #16]
 801048a:	e074      	b.n	8010576 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	015a      	lsls	r2, r3, #5
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	4413      	add	r3, r2
 8010494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	69ba      	ldr	r2, [r7, #24]
 801049c:	0151      	lsls	r1, r2, #5
 801049e:	69fa      	ldr	r2, [r7, #28]
 80104a0:	440a      	add	r2, r1
 80104a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104a6:	0cdb      	lsrs	r3, r3, #19
 80104a8:	04db      	lsls	r3, r3, #19
 80104aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	015a      	lsls	r2, r3, #5
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	4413      	add	r3, r2
 80104b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	69ba      	ldr	r2, [r7, #24]
 80104bc:	0151      	lsls	r1, r2, #5
 80104be:	69fa      	ldr	r2, [r7, #28]
 80104c0:	440a      	add	r2, r1
 80104c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	015a      	lsls	r2, r3, #5
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	4413      	add	r3, r2
 80104d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104dc:	691a      	ldr	r2, [r3, #16]
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	6959      	ldr	r1, [r3, #20]
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	689b      	ldr	r3, [r3, #8]
 80104e6:	440b      	add	r3, r1
 80104e8:	1e59      	subs	r1, r3, #1
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80104f2:	04d9      	lsls	r1, r3, #19
 80104f4:	4b9d      	ldr	r3, [pc, #628]	; (801076c <USB_EPStartXfer+0x370>)
 80104f6:	400b      	ands	r3, r1
 80104f8:	69b9      	ldr	r1, [r7, #24]
 80104fa:	0148      	lsls	r0, r1, #5
 80104fc:	69f9      	ldr	r1, [r7, #28]
 80104fe:	4401      	add	r1, r0
 8010500:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010504:	4313      	orrs	r3, r2
 8010506:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	015a      	lsls	r2, r3, #5
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	4413      	add	r3, r2
 8010510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010514:	691a      	ldr	r2, [r3, #16]
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	695b      	ldr	r3, [r3, #20]
 801051a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801051e:	69b9      	ldr	r1, [r7, #24]
 8010520:	0148      	lsls	r0, r1, #5
 8010522:	69f9      	ldr	r1, [r7, #28]
 8010524:	4401      	add	r1, r0
 8010526:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801052a:	4313      	orrs	r3, r2
 801052c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	78db      	ldrb	r3, [r3, #3]
 8010532:	2b01      	cmp	r3, #1
 8010534:	d11f      	bne.n	8010576 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	015a      	lsls	r2, r3, #5
 801053a:	69fb      	ldr	r3, [r7, #28]
 801053c:	4413      	add	r3, r2
 801053e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	69ba      	ldr	r2, [r7, #24]
 8010546:	0151      	lsls	r1, r2, #5
 8010548:	69fa      	ldr	r2, [r7, #28]
 801054a:	440a      	add	r2, r1
 801054c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010550:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010554:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	015a      	lsls	r2, r3, #5
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	4413      	add	r3, r2
 801055e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010562:	691b      	ldr	r3, [r3, #16]
 8010564:	69ba      	ldr	r2, [r7, #24]
 8010566:	0151      	lsls	r1, r2, #5
 8010568:	69fa      	ldr	r2, [r7, #28]
 801056a:	440a      	add	r2, r1
 801056c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010574:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010576:	79fb      	ldrb	r3, [r7, #7]
 8010578:	2b01      	cmp	r3, #1
 801057a:	d14b      	bne.n	8010614 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d009      	beq.n	8010598 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	015a      	lsls	r2, r3, #5
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	4413      	add	r3, r2
 801058c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010590:	461a      	mov	r2, r3
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	691b      	ldr	r3, [r3, #16]
 8010596:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	78db      	ldrb	r3, [r3, #3]
 801059c:	2b01      	cmp	r3, #1
 801059e:	d128      	bne.n	80105f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d110      	bne.n	80105d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	015a      	lsls	r2, r3, #5
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	4413      	add	r3, r2
 80105b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	69ba      	ldr	r2, [r7, #24]
 80105c0:	0151      	lsls	r1, r2, #5
 80105c2:	69fa      	ldr	r2, [r7, #28]
 80105c4:	440a      	add	r2, r1
 80105c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80105ce:	6013      	str	r3, [r2, #0]
 80105d0:	e00f      	b.n	80105f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	015a      	lsls	r2, r3, #5
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	4413      	add	r3, r2
 80105da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	69ba      	ldr	r2, [r7, #24]
 80105e2:	0151      	lsls	r1, r2, #5
 80105e4:	69fa      	ldr	r2, [r7, #28]
 80105e6:	440a      	add	r2, r1
 80105e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	015a      	lsls	r2, r3, #5
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	4413      	add	r3, r2
 80105fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	69ba      	ldr	r2, [r7, #24]
 8010602:	0151      	lsls	r1, r2, #5
 8010604:	69fa      	ldr	r2, [r7, #28]
 8010606:	440a      	add	r2, r1
 8010608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801060c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010610:	6013      	str	r3, [r2, #0]
 8010612:	e12f      	b.n	8010874 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	015a      	lsls	r2, r3, #5
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	4413      	add	r3, r2
 801061c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	69ba      	ldr	r2, [r7, #24]
 8010624:	0151      	lsls	r1, r2, #5
 8010626:	69fa      	ldr	r2, [r7, #28]
 8010628:	440a      	add	r2, r1
 801062a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801062e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010632:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	78db      	ldrb	r3, [r3, #3]
 8010638:	2b01      	cmp	r3, #1
 801063a:	d015      	beq.n	8010668 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	695b      	ldr	r3, [r3, #20]
 8010640:	2b00      	cmp	r3, #0
 8010642:	f000 8117 	beq.w	8010874 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	f003 030f 	and.w	r3, r3, #15
 8010656:	2101      	movs	r1, #1
 8010658:	fa01 f303 	lsl.w	r3, r1, r3
 801065c:	69f9      	ldr	r1, [r7, #28]
 801065e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010662:	4313      	orrs	r3, r2
 8010664:	634b      	str	r3, [r1, #52]	; 0x34
 8010666:	e105      	b.n	8010874 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010674:	2b00      	cmp	r3, #0
 8010676:	d110      	bne.n	801069a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	015a      	lsls	r2, r3, #5
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	4413      	add	r3, r2
 8010680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	69ba      	ldr	r2, [r7, #24]
 8010688:	0151      	lsls	r1, r2, #5
 801068a:	69fa      	ldr	r2, [r7, #28]
 801068c:	440a      	add	r2, r1
 801068e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010696:	6013      	str	r3, [r2, #0]
 8010698:	e00f      	b.n	80106ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	015a      	lsls	r2, r3, #5
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	4413      	add	r3, r2
 80106a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	69ba      	ldr	r2, [r7, #24]
 80106aa:	0151      	lsls	r1, r2, #5
 80106ac:	69fa      	ldr	r2, [r7, #28]
 80106ae:	440a      	add	r2, r1
 80106b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	68d9      	ldr	r1, [r3, #12]
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	781a      	ldrb	r2, [r3, #0]
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	695b      	ldr	r3, [r3, #20]
 80106c6:	b298      	uxth	r0, r3
 80106c8:	79fb      	ldrb	r3, [r7, #7]
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	4603      	mov	r3, r0
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f000 fa2b 	bl	8010b2a <USB_WritePacket>
 80106d4:	e0ce      	b.n	8010874 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	015a      	lsls	r2, r3, #5
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	4413      	add	r3, r2
 80106de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106e2:	691b      	ldr	r3, [r3, #16]
 80106e4:	69ba      	ldr	r2, [r7, #24]
 80106e6:	0151      	lsls	r1, r2, #5
 80106e8:	69fa      	ldr	r2, [r7, #28]
 80106ea:	440a      	add	r2, r1
 80106ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106f0:	0cdb      	lsrs	r3, r3, #19
 80106f2:	04db      	lsls	r3, r3, #19
 80106f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	015a      	lsls	r2, r3, #5
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	4413      	add	r3, r2
 80106fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010702:	691b      	ldr	r3, [r3, #16]
 8010704:	69ba      	ldr	r2, [r7, #24]
 8010706:	0151      	lsls	r1, r2, #5
 8010708:	69fa      	ldr	r2, [r7, #28]
 801070a:	440a      	add	r2, r1
 801070c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010718:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	695b      	ldr	r3, [r3, #20]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d126      	bne.n	8010770 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	015a      	lsls	r2, r3, #5
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	4413      	add	r3, r2
 801072a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801072e:	691a      	ldr	r2, [r3, #16]
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	689b      	ldr	r3, [r3, #8]
 8010734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010738:	69b9      	ldr	r1, [r7, #24]
 801073a:	0148      	lsls	r0, r1, #5
 801073c:	69f9      	ldr	r1, [r7, #28]
 801073e:	4401      	add	r1, r0
 8010740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010744:	4313      	orrs	r3, r2
 8010746:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010748:	69bb      	ldr	r3, [r7, #24]
 801074a:	015a      	lsls	r2, r3, #5
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	4413      	add	r3, r2
 8010750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	69ba      	ldr	r2, [r7, #24]
 8010758:	0151      	lsls	r1, r2, #5
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	440a      	add	r2, r1
 801075e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010766:	6113      	str	r3, [r2, #16]
 8010768:	e036      	b.n	80107d8 <USB_EPStartXfer+0x3dc>
 801076a:	bf00      	nop
 801076c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	695a      	ldr	r2, [r3, #20]
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	4413      	add	r3, r2
 801077a:	1e5a      	subs	r2, r3, #1
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	fbb2 f3f3 	udiv	r3, r2, r3
 8010784:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	015a      	lsls	r2, r3, #5
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	4413      	add	r3, r2
 801078e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010792:	691a      	ldr	r2, [r3, #16]
 8010794:	8afb      	ldrh	r3, [r7, #22]
 8010796:	04d9      	lsls	r1, r3, #19
 8010798:	4b39      	ldr	r3, [pc, #228]	; (8010880 <USB_EPStartXfer+0x484>)
 801079a:	400b      	ands	r3, r1
 801079c:	69b9      	ldr	r1, [r7, #24]
 801079e:	0148      	lsls	r0, r1, #5
 80107a0:	69f9      	ldr	r1, [r7, #28]
 80107a2:	4401      	add	r1, r0
 80107a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107a8:	4313      	orrs	r3, r2
 80107aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	015a      	lsls	r2, r3, #5
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	4413      	add	r3, r2
 80107b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107b8:	691a      	ldr	r2, [r3, #16]
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	8af9      	ldrh	r1, [r7, #22]
 80107c0:	fb01 f303 	mul.w	r3, r1, r3
 80107c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107c8:	69b9      	ldr	r1, [r7, #24]
 80107ca:	0148      	lsls	r0, r1, #5
 80107cc:	69f9      	ldr	r1, [r7, #28]
 80107ce:	4401      	add	r1, r0
 80107d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107d4:	4313      	orrs	r3, r2
 80107d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80107d8:	79fb      	ldrb	r3, [r7, #7]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d10d      	bne.n	80107fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d009      	beq.n	80107fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	68d9      	ldr	r1, [r3, #12]
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	015a      	lsls	r2, r3, #5
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	4413      	add	r3, r2
 80107f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f6:	460a      	mov	r2, r1
 80107f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	78db      	ldrb	r3, [r3, #3]
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d128      	bne.n	8010854 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801080e:	2b00      	cmp	r3, #0
 8010810:	d110      	bne.n	8010834 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	015a      	lsls	r2, r3, #5
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	4413      	add	r3, r2
 801081a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	69ba      	ldr	r2, [r7, #24]
 8010822:	0151      	lsls	r1, r2, #5
 8010824:	69fa      	ldr	r2, [r7, #28]
 8010826:	440a      	add	r2, r1
 8010828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801082c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010830:	6013      	str	r3, [r2, #0]
 8010832:	e00f      	b.n	8010854 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	015a      	lsls	r2, r3, #5
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	4413      	add	r3, r2
 801083c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	69ba      	ldr	r2, [r7, #24]
 8010844:	0151      	lsls	r1, r2, #5
 8010846:	69fa      	ldr	r2, [r7, #28]
 8010848:	440a      	add	r2, r1
 801084a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010852:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	015a      	lsls	r2, r3, #5
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	4413      	add	r3, r2
 801085c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	69ba      	ldr	r2, [r7, #24]
 8010864:	0151      	lsls	r1, r2, #5
 8010866:	69fa      	ldr	r2, [r7, #28]
 8010868:	440a      	add	r2, r1
 801086a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801086e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3720      	adds	r7, #32
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	1ff80000 	.word	0x1ff80000

08010884 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010884:	b480      	push	{r7}
 8010886:	b087      	sub	sp, #28
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	4613      	mov	r3, r2
 8010890:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	785b      	ldrb	r3, [r3, #1]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	f040 80cd 	bne.w	8010a40 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	695b      	ldr	r3, [r3, #20]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d132      	bne.n	8010914 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	015a      	lsls	r2, r3, #5
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	4413      	add	r3, r2
 80108b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	693a      	ldr	r2, [r7, #16]
 80108be:	0151      	lsls	r1, r2, #5
 80108c0:	697a      	ldr	r2, [r7, #20]
 80108c2:	440a      	add	r2, r1
 80108c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80108cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80108d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	015a      	lsls	r2, r3, #5
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	4413      	add	r3, r2
 80108da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108de:	691b      	ldr	r3, [r3, #16]
 80108e0:	693a      	ldr	r2, [r7, #16]
 80108e2:	0151      	lsls	r1, r2, #5
 80108e4:	697a      	ldr	r2, [r7, #20]
 80108e6:	440a      	add	r2, r1
 80108e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	015a      	lsls	r2, r3, #5
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	4413      	add	r3, r2
 80108fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108fe:	691b      	ldr	r3, [r3, #16]
 8010900:	693a      	ldr	r2, [r7, #16]
 8010902:	0151      	lsls	r1, r2, #5
 8010904:	697a      	ldr	r2, [r7, #20]
 8010906:	440a      	add	r2, r1
 8010908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801090c:	0cdb      	lsrs	r3, r3, #19
 801090e:	04db      	lsls	r3, r3, #19
 8010910:	6113      	str	r3, [r2, #16]
 8010912:	e04e      	b.n	80109b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	015a      	lsls	r2, r3, #5
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	4413      	add	r3, r2
 801091c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010920:	691b      	ldr	r3, [r3, #16]
 8010922:	693a      	ldr	r2, [r7, #16]
 8010924:	0151      	lsls	r1, r2, #5
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	440a      	add	r2, r1
 801092a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801092e:	0cdb      	lsrs	r3, r3, #19
 8010930:	04db      	lsls	r3, r3, #19
 8010932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	015a      	lsls	r2, r3, #5
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	4413      	add	r3, r2
 801093c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010940:	691b      	ldr	r3, [r3, #16]
 8010942:	693a      	ldr	r2, [r7, #16]
 8010944:	0151      	lsls	r1, r2, #5
 8010946:	697a      	ldr	r2, [r7, #20]
 8010948:	440a      	add	r2, r1
 801094a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801094e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010956:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	695a      	ldr	r2, [r3, #20]
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	429a      	cmp	r2, r3
 8010962:	d903      	bls.n	801096c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	689a      	ldr	r2, [r3, #8]
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	015a      	lsls	r2, r3, #5
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	4413      	add	r3, r2
 8010974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010978:	691b      	ldr	r3, [r3, #16]
 801097a:	693a      	ldr	r2, [r7, #16]
 801097c:	0151      	lsls	r1, r2, #5
 801097e:	697a      	ldr	r2, [r7, #20]
 8010980:	440a      	add	r2, r1
 8010982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801098a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	015a      	lsls	r2, r3, #5
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	4413      	add	r3, r2
 8010994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010998:	691a      	ldr	r2, [r3, #16]
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	695b      	ldr	r3, [r3, #20]
 801099e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80109a2:	6939      	ldr	r1, [r7, #16]
 80109a4:	0148      	lsls	r0, r1, #5
 80109a6:	6979      	ldr	r1, [r7, #20]
 80109a8:	4401      	add	r1, r0
 80109aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80109ae:	4313      	orrs	r3, r2
 80109b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80109b2:	79fb      	ldrb	r3, [r7, #7]
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d11e      	bne.n	80109f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d009      	beq.n	80109d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	015a      	lsls	r2, r3, #5
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	4413      	add	r3, r2
 80109c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109cc:	461a      	mov	r2, r3
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	691b      	ldr	r3, [r3, #16]
 80109d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	015a      	lsls	r2, r3, #5
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	4413      	add	r3, r2
 80109dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	693a      	ldr	r2, [r7, #16]
 80109e4:	0151      	lsls	r1, r2, #5
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	440a      	add	r2, r1
 80109ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109f2:	6013      	str	r3, [r2, #0]
 80109f4:	e092      	b.n	8010b1c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	015a      	lsls	r2, r3, #5
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	4413      	add	r3, r2
 80109fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	693a      	ldr	r2, [r7, #16]
 8010a06:	0151      	lsls	r1, r2, #5
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	440a      	add	r2, r1
 8010a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010a14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d07e      	beq.n	8010b1c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 030f 	and.w	r3, r3, #15
 8010a2e:	2101      	movs	r1, #1
 8010a30:	fa01 f303 	lsl.w	r3, r1, r3
 8010a34:	6979      	ldr	r1, [r7, #20]
 8010a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	634b      	str	r3, [r1, #52]	; 0x34
 8010a3e:	e06d      	b.n	8010b1c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	015a      	lsls	r2, r3, #5
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	4413      	add	r3, r2
 8010a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	0151      	lsls	r1, r2, #5
 8010a52:	697a      	ldr	r2, [r7, #20]
 8010a54:	440a      	add	r2, r1
 8010a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a5a:	0cdb      	lsrs	r3, r3, #19
 8010a5c:	04db      	lsls	r3, r3, #19
 8010a5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	015a      	lsls	r2, r3, #5
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	4413      	add	r3, r2
 8010a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a6c:	691b      	ldr	r3, [r3, #16]
 8010a6e:	693a      	ldr	r2, [r7, #16]
 8010a70:	0151      	lsls	r1, r2, #5
 8010a72:	697a      	ldr	r2, [r7, #20]
 8010a74:	440a      	add	r2, r1
 8010a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a82:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d003      	beq.n	8010a94 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	689a      	ldr	r2, [r3, #8]
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	015a      	lsls	r2, r3, #5
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aa0:	691b      	ldr	r3, [r3, #16]
 8010aa2:	693a      	ldr	r2, [r7, #16]
 8010aa4:	0151      	lsls	r1, r2, #5
 8010aa6:	697a      	ldr	r2, [r7, #20]
 8010aa8:	440a      	add	r2, r1
 8010aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ab2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	015a      	lsls	r2, r3, #5
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	4413      	add	r3, r2
 8010abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ac0:	691a      	ldr	r2, [r3, #16]
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010aca:	6939      	ldr	r1, [r7, #16]
 8010acc:	0148      	lsls	r0, r1, #5
 8010ace:	6979      	ldr	r1, [r7, #20]
 8010ad0:	4401      	add	r1, r0
 8010ad2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010ada:	79fb      	ldrb	r3, [r7, #7]
 8010adc:	2b01      	cmp	r3, #1
 8010ade:	d10d      	bne.n	8010afc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d009      	beq.n	8010afc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	68d9      	ldr	r1, [r3, #12]
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	015a      	lsls	r2, r3, #5
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	4413      	add	r3, r2
 8010af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010af8:	460a      	mov	r2, r1
 8010afa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	015a      	lsls	r2, r3, #5
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	4413      	add	r3, r2
 8010b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	693a      	ldr	r2, [r7, #16]
 8010b0c:	0151      	lsls	r1, r2, #5
 8010b0e:	697a      	ldr	r2, [r7, #20]
 8010b10:	440a      	add	r2, r1
 8010b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b1c:	2300      	movs	r3, #0
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	371c      	adds	r7, #28
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr

08010b2a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010b2a:	b480      	push	{r7}
 8010b2c:	b089      	sub	sp, #36	; 0x24
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	60f8      	str	r0, [r7, #12]
 8010b32:	60b9      	str	r1, [r7, #8]
 8010b34:	4611      	mov	r1, r2
 8010b36:	461a      	mov	r2, r3
 8010b38:	460b      	mov	r3, r1
 8010b3a:	71fb      	strb	r3, [r7, #7]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010b48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d11a      	bne.n	8010b86 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010b50:	88bb      	ldrh	r3, [r7, #4]
 8010b52:	3303      	adds	r3, #3
 8010b54:	089b      	lsrs	r3, r3, #2
 8010b56:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010b58:	2300      	movs	r3, #0
 8010b5a:	61bb      	str	r3, [r7, #24]
 8010b5c:	e00f      	b.n	8010b7e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010b5e:	79fb      	ldrb	r3, [r7, #7]
 8010b60:	031a      	lsls	r2, r3, #12
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	4413      	add	r3, r2
 8010b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	3304      	adds	r3, #4
 8010b76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010b78:	69bb      	ldr	r3, [r7, #24]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	61bb      	str	r3, [r7, #24]
 8010b7e:	69ba      	ldr	r2, [r7, #24]
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d3eb      	bcc.n	8010b5e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3724      	adds	r7, #36	; 0x24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr

08010b94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b089      	sub	sp, #36	; 0x24
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	60b9      	str	r1, [r7, #8]
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010baa:	88fb      	ldrh	r3, [r7, #6]
 8010bac:	3303      	adds	r3, #3
 8010bae:	089b      	lsrs	r3, r3, #2
 8010bb0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	61bb      	str	r3, [r7, #24]
 8010bb6:	e00b      	b.n	8010bd0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	3304      	adds	r3, #4
 8010bc8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	61bb      	str	r3, [r7, #24]
 8010bd0:	69ba      	ldr	r2, [r7, #24]
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d3ef      	bcc.n	8010bb8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010bd8:	69fb      	ldr	r3, [r7, #28]
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3724      	adds	r7, #36	; 0x24
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b085      	sub	sp, #20
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	785b      	ldrb	r3, [r3, #1]
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d12c      	bne.n	8010c5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	015a      	lsls	r2, r3, #5
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	4413      	add	r3, r2
 8010c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	db12      	blt.n	8010c3a <USB_EPSetStall+0x54>
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00f      	beq.n	8010c3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	015a      	lsls	r2, r3, #5
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	4413      	add	r3, r2
 8010c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68ba      	ldr	r2, [r7, #8]
 8010c2a:	0151      	lsls	r1, r2, #5
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	440a      	add	r2, r1
 8010c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010c38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	015a      	lsls	r2, r3, #5
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	4413      	add	r3, r2
 8010c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	68ba      	ldr	r2, [r7, #8]
 8010c4a:	0151      	lsls	r1, r2, #5
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	440a      	add	r2, r1
 8010c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010c58:	6013      	str	r3, [r2, #0]
 8010c5a:	e02b      	b.n	8010cb4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	015a      	lsls	r2, r3, #5
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	4413      	add	r3, r2
 8010c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	db12      	blt.n	8010c94 <USB_EPSetStall+0xae>
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00f      	beq.n	8010c94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	015a      	lsls	r2, r3, #5
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	0151      	lsls	r1, r2, #5
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	440a      	add	r2, r1
 8010c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010c92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	015a      	lsls	r2, r3, #5
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	4413      	add	r3, r2
 8010c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	68ba      	ldr	r2, [r7, #8]
 8010ca4:	0151      	lsls	r1, r2, #5
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	440a      	add	r2, r1
 8010caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010cb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010cb4:	2300      	movs	r3, #0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3714      	adds	r7, #20
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr

08010cc2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010cc2:	b480      	push	{r7}
 8010cc4:	b085      	sub	sp, #20
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	785b      	ldrb	r3, [r3, #1]
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d128      	bne.n	8010d30 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	015a      	lsls	r2, r3, #5
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	68ba      	ldr	r2, [r7, #8]
 8010cee:	0151      	lsls	r1, r2, #5
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	440a      	add	r2, r1
 8010cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010cfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	78db      	ldrb	r3, [r3, #3]
 8010d02:	2b03      	cmp	r3, #3
 8010d04:	d003      	beq.n	8010d0e <USB_EPClearStall+0x4c>
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	78db      	ldrb	r3, [r3, #3]
 8010d0a:	2b02      	cmp	r3, #2
 8010d0c:	d138      	bne.n	8010d80 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	68ba      	ldr	r2, [r7, #8]
 8010d1e:	0151      	lsls	r1, r2, #5
 8010d20:	68fa      	ldr	r2, [r7, #12]
 8010d22:	440a      	add	r2, r1
 8010d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d2c:	6013      	str	r3, [r2, #0]
 8010d2e:	e027      	b.n	8010d80 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	015a      	lsls	r2, r3, #5
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	4413      	add	r3, r2
 8010d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	0151      	lsls	r1, r2, #5
 8010d42:	68fa      	ldr	r2, [r7, #12]
 8010d44:	440a      	add	r2, r1
 8010d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010d4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	78db      	ldrb	r3, [r3, #3]
 8010d54:	2b03      	cmp	r3, #3
 8010d56:	d003      	beq.n	8010d60 <USB_EPClearStall+0x9e>
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	78db      	ldrb	r3, [r3, #3]
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	d10f      	bne.n	8010d80 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	015a      	lsls	r2, r3, #5
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	4413      	add	r3, r2
 8010d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	68ba      	ldr	r2, [r7, #8]
 8010d70:	0151      	lsls	r1, r2, #5
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	440a      	add	r2, r1
 8010d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d7e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3714      	adds	r7, #20
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr

08010d8e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010d8e:	b480      	push	{r7}
 8010d90:	b085      	sub	sp, #20
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	460b      	mov	r3, r1
 8010d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010dac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010db0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	78fb      	ldrb	r3, [r7, #3]
 8010dbc:	011b      	lsls	r3, r3, #4
 8010dbe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010dc2:	68f9      	ldr	r1, [r7, #12]
 8010dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010dcc:	2300      	movs	r3, #0
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3714      	adds	r7, #20
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010dda:	b480      	push	{r7}
 8010ddc:	b085      	sub	sp, #20
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	68fa      	ldr	r2, [r7, #12]
 8010df0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010df4:	f023 0303 	bic.w	r3, r3, #3
 8010df8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e08:	f023 0302 	bic.w	r3, r3, #2
 8010e0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e36:	f023 0303 	bic.w	r3, r3, #3
 8010e3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	68fa      	ldr	r2, [r7, #12]
 8010e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e4a:	f043 0302 	orr.w	r3, r3, #2
 8010e4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3714      	adds	r7, #20
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr

08010e5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010e5e:	b480      	push	{r7}
 8010e60:	b085      	sub	sp, #20
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	695b      	ldr	r3, [r3, #20]
 8010e6a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	699b      	ldr	r3, [r3, #24]
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	4013      	ands	r3, r2
 8010e74:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010e76:	68fb      	ldr	r3, [r7, #12]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3714      	adds	r7, #20
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b085      	sub	sp, #20
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e96:	699b      	ldr	r3, [r3, #24]
 8010e98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ea0:	69db      	ldr	r3, [r3, #28]
 8010ea2:	68ba      	ldr	r2, [r7, #8]
 8010ea4:	4013      	ands	r3, r2
 8010ea6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	0c1b      	lsrs	r3, r3, #16
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3714      	adds	r7, #20
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eca:	699b      	ldr	r3, [r3, #24]
 8010ecc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ed4:	69db      	ldr	r3, [r3, #28]
 8010ed6:	68ba      	ldr	r2, [r7, #8]
 8010ed8:	4013      	ands	r3, r2
 8010eda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	b29b      	uxth	r3, r3
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3714      	adds	r7, #20
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	460b      	mov	r3, r1
 8010ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010efc:	78fb      	ldrb	r3, [r7, #3]
 8010efe:	015a      	lsls	r2, r3, #5
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	4413      	add	r3, r2
 8010f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f08:	689b      	ldr	r3, [r3, #8]
 8010f0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f12:	695b      	ldr	r3, [r3, #20]
 8010f14:	68ba      	ldr	r2, [r7, #8]
 8010f16:	4013      	ands	r3, r2
 8010f18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010f1a:	68bb      	ldr	r3, [r7, #8]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3714      	adds	r7, #20
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b087      	sub	sp, #28
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	460b      	mov	r3, r1
 8010f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f3e:	691b      	ldr	r3, [r3, #16]
 8010f40:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f4a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010f4c:	78fb      	ldrb	r3, [r7, #3]
 8010f4e:	f003 030f 	and.w	r3, r3, #15
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	fa22 f303 	lsr.w	r3, r2, r3
 8010f58:	01db      	lsls	r3, r3, #7
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	693a      	ldr	r2, [r7, #16]
 8010f5e:	4313      	orrs	r3, r2
 8010f60:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010f62:	78fb      	ldrb	r3, [r7, #3]
 8010f64:	015a      	lsls	r2, r3, #5
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	4413      	add	r3, r2
 8010f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	693a      	ldr	r2, [r7, #16]
 8010f72:	4013      	ands	r3, r2
 8010f74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010f76:	68bb      	ldr	r3, [r7, #8]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	371c      	adds	r7, #28
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	695b      	ldr	r3, [r3, #20]
 8010f90:	f003 0301 	and.w	r3, r3, #1
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010fbe:	f023 0307 	bic.w	r3, r3, #7
 8010fc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010fd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3714      	adds	r7, #20
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr
	...

08010fe8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b087      	sub	sp, #28
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	607a      	str	r2, [r7, #4]
 8010ff4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	333c      	adds	r3, #60	; 0x3c
 8010ffe:	3304      	adds	r3, #4
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	4a26      	ldr	r2, [pc, #152]	; (80110a0 <USB_EP0_OutStart+0xb8>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d90a      	bls.n	8011022 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801101c:	d101      	bne.n	8011022 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801101e:	2300      	movs	r3, #0
 8011020:	e037      	b.n	8011092 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011028:	461a      	mov	r2, r3
 801102a:	2300      	movs	r3, #0
 801102c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011034:	691b      	ldr	r3, [r3, #16]
 8011036:	697a      	ldr	r2, [r7, #20]
 8011038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801103c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011048:	691b      	ldr	r3, [r3, #16]
 801104a:	697a      	ldr	r2, [r7, #20]
 801104c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011050:	f043 0318 	orr.w	r3, r3, #24
 8011054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801105c:	691b      	ldr	r3, [r3, #16]
 801105e:	697a      	ldr	r2, [r7, #20]
 8011060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011064:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011068:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801106a:	7afb      	ldrb	r3, [r7, #11]
 801106c:	2b01      	cmp	r3, #1
 801106e:	d10f      	bne.n	8011090 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011076:	461a      	mov	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	697a      	ldr	r2, [r7, #20]
 8011086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801108a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801108e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011090:	2300      	movs	r3, #0
}
 8011092:	4618      	mov	r0, r3
 8011094:	371c      	adds	r7, #28
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	4f54300a 	.word	0x4f54300a

080110a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80110ac:	2300      	movs	r3, #0
 80110ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	3301      	adds	r3, #1
 80110b4:	60fb      	str	r3, [r7, #12]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	4a13      	ldr	r2, [pc, #76]	; (8011108 <USB_CoreReset+0x64>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d901      	bls.n	80110c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80110be:	2303      	movs	r3, #3
 80110c0:	e01b      	b.n	80110fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	691b      	ldr	r3, [r3, #16]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	daf2      	bge.n	80110b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80110ca:	2300      	movs	r3, #0
 80110cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	691b      	ldr	r3, [r3, #16]
 80110d2:	f043 0201 	orr.w	r2, r3, #1
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	3301      	adds	r3, #1
 80110de:	60fb      	str	r3, [r7, #12]
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	4a09      	ldr	r2, [pc, #36]	; (8011108 <USB_CoreReset+0x64>)
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d901      	bls.n	80110ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80110e8:	2303      	movs	r3, #3
 80110ea:	e006      	b.n	80110fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	691b      	ldr	r3, [r3, #16]
 80110f0:	f003 0301 	and.w	r3, r3, #1
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	d0f0      	beq.n	80110da <USB_CoreReset+0x36>

  return HAL_OK;
 80110f8:	2300      	movs	r3, #0
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3714      	adds	r7, #20
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr
 8011106:	bf00      	nop
 8011108:	00030d40 	.word	0x00030d40

0801110c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	460b      	mov	r3, r1
 8011116:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011118:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801111c:	f005 f820 	bl	8016160 <malloc>
 8011120:	4603      	mov	r3, r0
 8011122:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d105      	bne.n	8011136 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2200      	movs	r2, #0
 801112e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011132:	2302      	movs	r3, #2
 8011134:	e066      	b.n	8011204 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	7c1b      	ldrb	r3, [r3, #16]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d119      	bne.n	801117a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011146:	f44f 7300 	mov.w	r3, #512	; 0x200
 801114a:	2202      	movs	r2, #2
 801114c:	2181      	movs	r1, #129	; 0x81
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f004 fe8d 	bl	8015e6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2201      	movs	r2, #1
 8011158:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801115a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801115e:	2202      	movs	r2, #2
 8011160:	2101      	movs	r1, #1
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f004 fe83 	bl	8015e6e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2201      	movs	r2, #1
 801116c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2210      	movs	r2, #16
 8011174:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011178:	e016      	b.n	80111a8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801117a:	2340      	movs	r3, #64	; 0x40
 801117c:	2202      	movs	r2, #2
 801117e:	2181      	movs	r1, #129	; 0x81
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f004 fe74 	bl	8015e6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2201      	movs	r2, #1
 801118a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801118c:	2340      	movs	r3, #64	; 0x40
 801118e:	2202      	movs	r2, #2
 8011190:	2101      	movs	r1, #1
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f004 fe6b 	bl	8015e6e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2201      	movs	r2, #1
 801119c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2210      	movs	r2, #16
 80111a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80111a8:	2308      	movs	r3, #8
 80111aa:	2203      	movs	r2, #3
 80111ac:	2182      	movs	r1, #130	; 0x82
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f004 fe5d 	bl	8015e6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2201      	movs	r2, #1
 80111b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2200      	movs	r2, #0
 80111ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2200      	movs	r2, #0
 80111d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	7c1b      	ldrb	r3, [r3, #16]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d109      	bne.n	80111f2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80111e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111e8:	2101      	movs	r1, #1
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f004 ff2e 	bl	801604c <USBD_LL_PrepareReceive>
 80111f0:	e007      	b.n	8011202 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80111f8:	2340      	movs	r3, #64	; 0x40
 80111fa:	2101      	movs	r1, #1
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f004 ff25 	bl	801604c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011202:	2300      	movs	r3, #0
}
 8011204:	4618      	mov	r0, r3
 8011206:	3710      	adds	r7, #16
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	460b      	mov	r3, r1
 8011216:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011218:	2300      	movs	r3, #0
 801121a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801121c:	2181      	movs	r1, #129	; 0x81
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f004 fe4b 	bl	8015eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2200      	movs	r2, #0
 8011228:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801122a:	2101      	movs	r1, #1
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f004 fe44 	bl	8015eba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2200      	movs	r2, #0
 8011236:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801123a:	2182      	movs	r1, #130	; 0x82
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f004 fe3c 	bl	8015eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2200      	movs	r2, #0
 801124e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011258:	2b00      	cmp	r3, #0
 801125a:	d00e      	beq.n	801127a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801126c:	4618      	mov	r0, r3
 801126e:	f004 ff7f 	bl	8016170 <free>
    pdev->pClassData = NULL;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 801127a:	7bfb      	ldrb	r3, [r7, #15]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b086      	sub	sp, #24
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011294:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011296:	2300      	movs	r3, #0
 8011298:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801129a:	2300      	movs	r3, #0
 801129c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801129e:	2300      	movs	r3, #0
 80112a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d03a      	beq.n	8011324 <USBD_CDC_Setup+0xa0>
 80112ae:	2b20      	cmp	r3, #32
 80112b0:	f040 8097 	bne.w	80113e2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	88db      	ldrh	r3, [r3, #6]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d029      	beq.n	8011310 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	b25b      	sxtb	r3, r3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	da11      	bge.n	80112ea <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80112d2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	88d2      	ldrh	r2, [r2, #6]
 80112d8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80112da:	6939      	ldr	r1, [r7, #16]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	88db      	ldrh	r3, [r3, #6]
 80112e0:	461a      	mov	r2, r3
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f001 faac 	bl	8012840 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80112e8:	e082      	b.n	80113f0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	785a      	ldrb	r2, [r3, #1]
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	88db      	ldrh	r3, [r3, #6]
 80112f8:	b2da      	uxtb	r2, r3
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011300:	6939      	ldr	r1, [r7, #16]
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	88db      	ldrh	r3, [r3, #6]
 8011306:	461a      	mov	r2, r3
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f001 fac5 	bl	8012898 <USBD_CtlPrepareRx>
    break;
 801130e:	e06f      	b.n	80113f0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	683a      	ldr	r2, [r7, #0]
 801131a:	7850      	ldrb	r0, [r2, #1]
 801131c:	2200      	movs	r2, #0
 801131e:	6839      	ldr	r1, [r7, #0]
 8011320:	4798      	blx	r3
    break;
 8011322:	e065      	b.n	80113f0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	785b      	ldrb	r3, [r3, #1]
 8011328:	2b0b      	cmp	r3, #11
 801132a:	d84f      	bhi.n	80113cc <USBD_CDC_Setup+0x148>
 801132c:	a201      	add	r2, pc, #4	; (adr r2, 8011334 <USBD_CDC_Setup+0xb0>)
 801132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011332:	bf00      	nop
 8011334:	08011365 	.word	0x08011365
 8011338:	080113db 	.word	0x080113db
 801133c:	080113cd 	.word	0x080113cd
 8011340:	080113cd 	.word	0x080113cd
 8011344:	080113cd 	.word	0x080113cd
 8011348:	080113cd 	.word	0x080113cd
 801134c:	080113cd 	.word	0x080113cd
 8011350:	080113cd 	.word	0x080113cd
 8011354:	080113cd 	.word	0x080113cd
 8011358:	080113cd 	.word	0x080113cd
 801135c:	0801138d 	.word	0x0801138d
 8011360:	080113b5 	.word	0x080113b5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801136a:	2b03      	cmp	r3, #3
 801136c:	d107      	bne.n	801137e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801136e:	f107 030c 	add.w	r3, r7, #12
 8011372:	2202      	movs	r2, #2
 8011374:	4619      	mov	r1, r3
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f001 fa62 	bl	8012840 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801137c:	e030      	b.n	80113e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801137e:	6839      	ldr	r1, [r7, #0]
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f001 f9ec 	bl	801275e <USBD_CtlError>
        ret = USBD_FAIL;
 8011386:	2303      	movs	r3, #3
 8011388:	75fb      	strb	r3, [r7, #23]
      break;
 801138a:	e029      	b.n	80113e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011392:	2b03      	cmp	r3, #3
 8011394:	d107      	bne.n	80113a6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011396:	f107 030f 	add.w	r3, r7, #15
 801139a:	2201      	movs	r2, #1
 801139c:	4619      	mov	r1, r3
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f001 fa4e 	bl	8012840 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80113a4:	e01c      	b.n	80113e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80113a6:	6839      	ldr	r1, [r7, #0]
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f001 f9d8 	bl	801275e <USBD_CtlError>
        ret = USBD_FAIL;
 80113ae:	2303      	movs	r3, #3
 80113b0:	75fb      	strb	r3, [r7, #23]
      break;
 80113b2:	e015      	b.n	80113e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113ba:	2b03      	cmp	r3, #3
 80113bc:	d00f      	beq.n	80113de <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80113be:	6839      	ldr	r1, [r7, #0]
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f001 f9cc 	bl	801275e <USBD_CtlError>
        ret = USBD_FAIL;
 80113c6:	2303      	movs	r3, #3
 80113c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80113ca:	e008      	b.n	80113de <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f001 f9c5 	bl	801275e <USBD_CtlError>
      ret = USBD_FAIL;
 80113d4:	2303      	movs	r3, #3
 80113d6:	75fb      	strb	r3, [r7, #23]
      break;
 80113d8:	e002      	b.n	80113e0 <USBD_CDC_Setup+0x15c>
      break;
 80113da:	bf00      	nop
 80113dc:	e008      	b.n	80113f0 <USBD_CDC_Setup+0x16c>
      break;
 80113de:	bf00      	nop
    }
    break;
 80113e0:	e006      	b.n	80113f0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80113e2:	6839      	ldr	r1, [r7, #0]
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f001 f9ba 	bl	801275e <USBD_CtlError>
    ret = USBD_FAIL;
 80113ea:	2303      	movs	r3, #3
 80113ec:	75fb      	strb	r3, [r7, #23]
    break;
 80113ee:	bf00      	nop
  }

  return (uint8_t)ret;
 80113f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3718      	adds	r7, #24
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop

080113fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	460b      	mov	r3, r1
 8011406:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801140e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011416:	2b00      	cmp	r3, #0
 8011418:	d101      	bne.n	801141e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801141a:	2303      	movs	r3, #3
 801141c:	e049      	b.n	80114b2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011424:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011426:	78fa      	ldrb	r2, [r7, #3]
 8011428:	6879      	ldr	r1, [r7, #4]
 801142a:	4613      	mov	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	4413      	add	r3, r2
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	440b      	add	r3, r1
 8011434:	3318      	adds	r3, #24
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d029      	beq.n	8011490 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801143c:	78fa      	ldrb	r2, [r7, #3]
 801143e:	6879      	ldr	r1, [r7, #4]
 8011440:	4613      	mov	r3, r2
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	4413      	add	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	440b      	add	r3, r1
 801144a:	3318      	adds	r3, #24
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	78f9      	ldrb	r1, [r7, #3]
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	460b      	mov	r3, r1
 8011454:	00db      	lsls	r3, r3, #3
 8011456:	1a5b      	subs	r3, r3, r1
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4403      	add	r3, r0
 801145c:	3344      	adds	r3, #68	; 0x44
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	fbb2 f1f3 	udiv	r1, r2, r3
 8011464:	fb03 f301 	mul.w	r3, r3, r1
 8011468:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801146a:	2b00      	cmp	r3, #0
 801146c:	d110      	bne.n	8011490 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801146e:	78fa      	ldrb	r2, [r7, #3]
 8011470:	6879      	ldr	r1, [r7, #4]
 8011472:	4613      	mov	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	4413      	add	r3, r2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	440b      	add	r3, r1
 801147c:	3318      	adds	r3, #24
 801147e:	2200      	movs	r2, #0
 8011480:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011482:	78f9      	ldrb	r1, [r7, #3]
 8011484:	2300      	movs	r3, #0
 8011486:	2200      	movs	r2, #0
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f004 fdbe 	bl	801600a <USBD_LL_Transmit>
 801148e:	e00f      	b.n	80114b0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2200      	movs	r2, #0
 8011494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801149e:	691b      	ldr	r3, [r3, #16]
 80114a0:	68ba      	ldr	r2, [r7, #8]
 80114a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80114a6:	68ba      	ldr	r2, [r7, #8]
 80114a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80114ac:	78fa      	ldrb	r2, [r7, #3]
 80114ae:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b084      	sub	sp, #16
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	460b      	mov	r3, r1
 80114c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d101      	bne.n	80114dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80114d8:	2303      	movs	r3, #3
 80114da:	e015      	b.n	8011508 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80114dc:	78fb      	ldrb	r3, [r7, #3]
 80114de:	4619      	mov	r1, r3
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f004 fdd4 	bl	801608e <USBD_LL_GetRxDataSize>
 80114e6:	4602      	mov	r2, r0
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80114fc:	68fa      	ldr	r2, [r7, #12]
 80114fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011502:	4611      	mov	r1, r2
 8011504:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3710      	adds	r7, #16
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801151e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d015      	beq.n	8011556 <USBD_CDC_EP0_RxReady+0x46>
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011530:	2bff      	cmp	r3, #255	; 0xff
 8011532:	d010      	beq.n	8011556 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	68fa      	ldr	r2, [r7, #12]
 801153e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011542:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011544:	68fa      	ldr	r2, [r7, #12]
 8011546:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801154a:	b292      	uxth	r2, r2
 801154c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	22ff      	movs	r2, #255	; 0xff
 8011552:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011556:	2300      	movs	r3, #0
}
 8011558:	4618      	mov	r0, r3
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2243      	movs	r2, #67	; 0x43
 801156c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801156e:	4b03      	ldr	r3, [pc, #12]	; (801157c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011570:	4618      	mov	r0, r3
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	20004120 	.word	0x20004120

08011580 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2243      	movs	r2, #67	; 0x43
 801158c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801158e:	4b03      	ldr	r3, [pc, #12]	; (801159c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011590:	4618      	mov	r0, r3
 8011592:	370c      	adds	r7, #12
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	200040dc 	.word	0x200040dc

080115a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2243      	movs	r2, #67	; 0x43
 80115ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80115ae:	4b03      	ldr	r3, [pc, #12]	; (80115bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr
 80115bc:	20004164 	.word	0x20004164

080115c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	220a      	movs	r2, #10
 80115cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80115ce:	4b03      	ldr	r3, [pc, #12]	; (80115dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	370c      	adds	r7, #12
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr
 80115dc:	20004098 	.word	0x20004098

080115e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b083      	sub	sp, #12
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d101      	bne.n	80115f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80115f0:	2303      	movs	r3, #3
 80115f2:	e004      	b.n	80115fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	683a      	ldr	r2, [r7, #0]
 80115f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	370c      	adds	r7, #12
 8011602:	46bd      	mov	sp, r7
 8011604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011608:	4770      	bx	lr

0801160a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801160a:	b480      	push	{r7}
 801160c:	b087      	sub	sp, #28
 801160e:	af00      	add	r7, sp, #0
 8011610:	60f8      	str	r0, [r7, #12]
 8011612:	60b9      	str	r1, [r7, #8]
 8011614:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801161c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801162e:	2300      	movs	r3, #0
}
 8011630:	4618      	mov	r0, r3
 8011632:	371c      	adds	r7, #28
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr

0801163c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801163c:	b480      	push	{r7}
 801163e:	b085      	sub	sp, #20
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801164c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011672:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011674:	2301      	movs	r3, #1
 8011676:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011682:	2303      	movs	r3, #3
 8011684:	e01a      	b.n	80116bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801168c:	2b00      	cmp	r3, #0
 801168e:	d114      	bne.n	80116ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	2201      	movs	r2, #1
 8011694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80116ae:	2181      	movs	r1, #129	; 0x81
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f004 fcaa 	bl	801600a <USBD_LL_Transmit>

    ret = USBD_OK;
 80116b6:	2300      	movs	r3, #0
 80116b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80116ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b084      	sub	sp, #16
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d101      	bne.n	80116e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80116de:	2303      	movs	r3, #3
 80116e0:	e016      	b.n	8011710 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	7c1b      	ldrb	r3, [r3, #16]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d109      	bne.n	80116fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116f4:	2101      	movs	r1, #1
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f004 fca8 	bl	801604c <USBD_LL_PrepareReceive>
 80116fc:	e007      	b.n	801170e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011704:	2340      	movs	r3, #64	; 0x40
 8011706:	2101      	movs	r1, #1
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f004 fc9f 	bl	801604c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801170e:	2300      	movs	r3, #0
}
 8011710:	4618      	mov	r0, r3
 8011712:	3710      	adds	r7, #16
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b086      	sub	sp, #24
 801171c:	af00      	add	r7, sp, #0
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	4613      	mov	r3, r2
 8011724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d101      	bne.n	8011730 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801172c:	2303      	movs	r3, #3
 801172e:	e025      	b.n	801177c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011736:	2b00      	cmp	r3, #0
 8011738:	d003      	beq.n	8011742 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2200      	movs	r2, #0
 801173e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011748:	2b00      	cmp	r3, #0
 801174a:	d003      	beq.n	8011754 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2200      	movs	r2, #0
 8011750:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d003      	beq.n	8011762 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2201      	movs	r2, #1
 8011766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	79fa      	ldrb	r2, [r7, #7]
 801176e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	f004 fb15 	bl	8015da0 <USBD_LL_Init>
 8011776:	4603      	mov	r3, r0
 8011778:	75fb      	strb	r3, [r7, #23]

  return ret;
 801177a:	7dfb      	ldrb	r3, [r7, #23]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3718      	adds	r7, #24
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801178e:	2300      	movs	r3, #0
 8011790:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d101      	bne.n	801179c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011798:	2303      	movs	r3, #3
 801179a:	e010      	b.n	80117be <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ac:	f107 020e 	add.w	r2, r7, #14
 80117b0:	4610      	mov	r0, r2
 80117b2:	4798      	blx	r3
 80117b4:	4602      	mov	r2, r0
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b082      	sub	sp, #8
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f004 fb32 	bl	8015e38 <USBD_LL_Start>
 80117d4:	4603      	mov	r3, r0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80117de:	b480      	push	{r7}
 80117e0:	b083      	sub	sp, #12
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117e6:	2300      	movs	r3, #0
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	460b      	mov	r3, r1
 80117fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011800:	2303      	movs	r3, #3
 8011802:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801180a:	2b00      	cmp	r3, #0
 801180c:	d009      	beq.n	8011822 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	78fa      	ldrb	r2, [r7, #3]
 8011818:	4611      	mov	r1, r2
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	4798      	blx	r3
 801181e:	4603      	mov	r3, r0
 8011820:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011822:	7bfb      	ldrb	r3, [r7, #15]
}
 8011824:	4618      	mov	r0, r3
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	460b      	mov	r3, r1
 8011836:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801183e:	2b00      	cmp	r3, #0
 8011840:	d007      	beq.n	8011852 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	78fa      	ldrb	r2, [r7, #3]
 801184c:	4611      	mov	r1, r2
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	4798      	blx	r3
  }

  return USBD_OK;
 8011852:	2300      	movs	r3, #0
}
 8011854:	4618      	mov	r0, r3
 8011856:	3708      	adds	r7, #8
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	4618      	mov	r0, r3
 8011870:	f000 ff3b 	bl	80126ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2201      	movs	r2, #1
 8011878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011882:	461a      	mov	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011890:	f003 031f 	and.w	r3, r3, #31
 8011894:	2b02      	cmp	r3, #2
 8011896:	d01a      	beq.n	80118ce <USBD_LL_SetupStage+0x72>
 8011898:	2b02      	cmp	r3, #2
 801189a:	d822      	bhi.n	80118e2 <USBD_LL_SetupStage+0x86>
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <USBD_LL_SetupStage+0x4a>
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d00a      	beq.n	80118ba <USBD_LL_SetupStage+0x5e>
 80118a4:	e01d      	b.n	80118e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118ac:	4619      	mov	r1, r3
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fa18 	bl	8011ce4 <USBD_StdDevReq>
 80118b4:	4603      	mov	r3, r0
 80118b6:	73fb      	strb	r3, [r7, #15]
      break;
 80118b8:	e020      	b.n	80118fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118c0:	4619      	mov	r1, r3
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fa7c 	bl	8011dc0 <USBD_StdItfReq>
 80118c8:	4603      	mov	r3, r0
 80118ca:	73fb      	strb	r3, [r7, #15]
      break;
 80118cc:	e016      	b.n	80118fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118d4:	4619      	mov	r1, r3
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 faba 	bl	8011e50 <USBD_StdEPReq>
 80118dc:	4603      	mov	r3, r0
 80118de:	73fb      	strb	r3, [r7, #15]
      break;
 80118e0:	e00c      	b.n	80118fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80118e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	4619      	mov	r1, r3
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f004 fb01 	bl	8015ef8 <USBD_LL_StallEP>
 80118f6:	4603      	mov	r3, r0
 80118f8:	73fb      	strb	r3, [r7, #15]
      break;
 80118fa:	bf00      	nop
  }

  return ret;
 80118fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}

08011906 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011906:	b580      	push	{r7, lr}
 8011908:	b086      	sub	sp, #24
 801190a:	af00      	add	r7, sp, #0
 801190c:	60f8      	str	r0, [r7, #12]
 801190e:	460b      	mov	r3, r1
 8011910:	607a      	str	r2, [r7, #4]
 8011912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011914:	7afb      	ldrb	r3, [r7, #11]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d137      	bne.n	801198a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011920:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011928:	2b03      	cmp	r3, #3
 801192a:	d14a      	bne.n	80119c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	689a      	ldr	r2, [r3, #8]
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	429a      	cmp	r2, r3
 8011936:	d913      	bls.n	8011960 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	689a      	ldr	r2, [r3, #8]
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	1ad2      	subs	r2, r2, r3
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	68da      	ldr	r2, [r3, #12]
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	689b      	ldr	r3, [r3, #8]
 801194e:	4293      	cmp	r3, r2
 8011950:	bf28      	it	cs
 8011952:	4613      	movcs	r3, r2
 8011954:	461a      	mov	r2, r3
 8011956:	6879      	ldr	r1, [r7, #4]
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	f000 ffba 	bl	80128d2 <USBD_CtlContinueRx>
 801195e:	e030      	b.n	80119c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011966:	691b      	ldr	r3, [r3, #16]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00a      	beq.n	8011982 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011972:	2b03      	cmp	r3, #3
 8011974:	d105      	bne.n	8011982 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801197c:	691b      	ldr	r3, [r3, #16]
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011982:	68f8      	ldr	r0, [r7, #12]
 8011984:	f000 ffb6 	bl	80128f4 <USBD_CtlSendStatus>
 8011988:	e01b      	b.n	80119c2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011990:	699b      	ldr	r3, [r3, #24]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d013      	beq.n	80119be <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801199c:	2b03      	cmp	r3, #3
 801199e:	d10e      	bne.n	80119be <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a6:	699b      	ldr	r3, [r3, #24]
 80119a8:	7afa      	ldrb	r2, [r7, #11]
 80119aa:	4611      	mov	r1, r2
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	4798      	blx	r3
 80119b0:	4603      	mov	r3, r0
 80119b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80119b4:	7dfb      	ldrb	r3, [r7, #23]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d003      	beq.n	80119c2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80119ba:	7dfb      	ldrb	r3, [r7, #23]
 80119bc:	e002      	b.n	80119c4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80119be:	2303      	movs	r3, #3
 80119c0:	e000      	b.n	80119c4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80119c2:	2300      	movs	r3, #0
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3718      	adds	r7, #24
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b086      	sub	sp, #24
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	460b      	mov	r3, r1
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80119da:	7afb      	ldrb	r3, [r7, #11]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d16a      	bne.n	8011ab6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	3314      	adds	r3, #20
 80119e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	d155      	bne.n	8011a9c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	689a      	ldr	r2, [r3, #8]
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d914      	bls.n	8011a26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	689a      	ldr	r2, [r3, #8]
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	1ad2      	subs	r2, r2, r3
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	689b      	ldr	r3, [r3, #8]
 8011a0e:	461a      	mov	r2, r3
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f000 ff2f 	bl	8012876 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a18:	2300      	movs	r3, #0
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f004 fb14 	bl	801604c <USBD_LL_PrepareReceive>
 8011a24:	e03a      	b.n	8011a9c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	68da      	ldr	r2, [r3, #12]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d11c      	bne.n	8011a6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d316      	bcc.n	8011a6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	685a      	ldr	r2, [r3, #4]
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d20f      	bcs.n	8011a6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	2100      	movs	r1, #0
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f000 ff10 	bl	8012876 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a5e:	2300      	movs	r3, #0
 8011a60:	2200      	movs	r2, #0
 8011a62:	2100      	movs	r1, #0
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f004 faf1 	bl	801604c <USBD_LL_PrepareReceive>
 8011a6a:	e017      	b.n	8011a9c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00a      	beq.n	8011a8e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011a7e:	2b03      	cmp	r3, #3
 8011a80:	d105      	bne.n	8011a8e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a88:	68db      	ldr	r3, [r3, #12]
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a8e:	2180      	movs	r1, #128	; 0x80
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f004 fa31 	bl	8015ef8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011a96:	68f8      	ldr	r0, [r7, #12]
 8011a98:	f000 ff3f 	bl	801291a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d123      	bne.n	8011aee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011aa6:	68f8      	ldr	r0, [r7, #12]
 8011aa8:	f7ff fe99 	bl	80117de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011ab4:	e01b      	b.n	8011aee <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011abc:	695b      	ldr	r3, [r3, #20]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d013      	beq.n	8011aea <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011ac8:	2b03      	cmp	r3, #3
 8011aca:	d10e      	bne.n	8011aea <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	7afa      	ldrb	r2, [r7, #11]
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	4798      	blx	r3
 8011adc:	4603      	mov	r3, r0
 8011ade:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011ae0:	7dfb      	ldrb	r3, [r7, #23]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d003      	beq.n	8011aee <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	e002      	b.n	8011af0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011aea:	2303      	movs	r3, #3
 8011aec:	e000      	b.n	8011af0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011aee:	2300      	movs	r3, #0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3718      	adds	r7, #24
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2201      	movs	r2, #1
 8011b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2200      	movs	r2, #0
 8011b14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d009      	beq.n	8011b3c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	6852      	ldr	r2, [r2, #4]
 8011b34:	b2d2      	uxtb	r2, r2
 8011b36:	4611      	mov	r1, r2
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b3c:	2340      	movs	r3, #64	; 0x40
 8011b3e:	2200      	movs	r2, #0
 8011b40:	2100      	movs	r1, #0
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f004 f993 	bl	8015e6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2201      	movs	r2, #1
 8011b4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2240      	movs	r2, #64	; 0x40
 8011b54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b58:	2340      	movs	r3, #64	; 0x40
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	2180      	movs	r1, #128	; 0x80
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f004 f985 	bl	8015e6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2201      	movs	r2, #1
 8011b68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2240      	movs	r2, #64	; 0x40
 8011b6e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3708      	adds	r7, #8
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011b7a:	b480      	push	{r7}
 8011b7c:	b083      	sub	sp, #12
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
 8011b82:	460b      	mov	r3, r1
 8011b84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	78fa      	ldrb	r2, [r7, #3]
 8011b8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011b8c:	2300      	movs	r3, #0
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	370c      	adds	r7, #12
 8011b92:	46bd      	mov	sp, r7
 8011b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b98:	4770      	bx	lr

08011b9a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b9a:	b480      	push	{r7}
 8011b9c:	b083      	sub	sp, #12
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2204      	movs	r2, #4
 8011bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011bb6:	2300      	movs	r3, #0
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	370c      	adds	r7, #12
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bd2:	2b04      	cmp	r3, #4
 8011bd4:	d105      	bne.n	8011be2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	370c      	adds	r7, #12
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr

08011bf0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bfe:	2b03      	cmp	r3, #3
 8011c00:	d10b      	bne.n	8011c1a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c08:	69db      	ldr	r3, [r3, #28]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d005      	beq.n	8011c1a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c14:	69db      	ldr	r3, [r3, #28]
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	370c      	adds	r7, #12
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr

08011c3e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011c3e:	b480      	push	{r7}
 8011c40:	b083      	sub	sp, #12
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	460b      	mov	r3, r1
 8011c48:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	370c      	adds	r7, #12
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c60:	2300      	movs	r3, #0
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	370c      	adds	r7, #12
 8011c66:	46bd      	mov	sp, r7
 8011c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6c:	4770      	bx	lr

08011c6e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b082      	sub	sp, #8
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2201      	movs	r2, #1
 8011c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d009      	beq.n	8011c9c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	6852      	ldr	r2, [r2, #4]
 8011c94:	b2d2      	uxtb	r2, r2
 8011c96:	4611      	mov	r1, r2
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	4798      	blx	r3
  }

  return USBD_OK;
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}

08011ca6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011ca6:	b480      	push	{r7}
 8011ca8:	b087      	sub	sp, #28
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011cc4:	8a3b      	ldrh	r3, [r7, #16]
 8011cc6:	021b      	lsls	r3, r3, #8
 8011cc8:	b21a      	sxth	r2, r3
 8011cca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	b21b      	sxth	r3, r3
 8011cd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011cd4:	89fb      	ldrh	r3, [r7, #14]
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	371c      	adds	r7, #28
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
	...

08011ce4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011cfa:	2b40      	cmp	r3, #64	; 0x40
 8011cfc:	d005      	beq.n	8011d0a <USBD_StdDevReq+0x26>
 8011cfe:	2b40      	cmp	r3, #64	; 0x40
 8011d00:	d853      	bhi.n	8011daa <USBD_StdDevReq+0xc6>
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00b      	beq.n	8011d1e <USBD_StdDevReq+0x3a>
 8011d06:	2b20      	cmp	r3, #32
 8011d08:	d14f      	bne.n	8011daa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	6839      	ldr	r1, [r7, #0]
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	4798      	blx	r3
 8011d18:	4603      	mov	r3, r0
 8011d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d1c:	e04a      	b.n	8011db4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	785b      	ldrb	r3, [r3, #1]
 8011d22:	2b09      	cmp	r3, #9
 8011d24:	d83b      	bhi.n	8011d9e <USBD_StdDevReq+0xba>
 8011d26:	a201      	add	r2, pc, #4	; (adr r2, 8011d2c <USBD_StdDevReq+0x48>)
 8011d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2c:	08011d81 	.word	0x08011d81
 8011d30:	08011d95 	.word	0x08011d95
 8011d34:	08011d9f 	.word	0x08011d9f
 8011d38:	08011d8b 	.word	0x08011d8b
 8011d3c:	08011d9f 	.word	0x08011d9f
 8011d40:	08011d5f 	.word	0x08011d5f
 8011d44:	08011d55 	.word	0x08011d55
 8011d48:	08011d9f 	.word	0x08011d9f
 8011d4c:	08011d77 	.word	0x08011d77
 8011d50:	08011d69 	.word	0x08011d69
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 f9d8 	bl	801210c <USBD_GetDescriptor>
      break;
 8011d5c:	e024      	b.n	8011da8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011d5e:	6839      	ldr	r1, [r7, #0]
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 fb3d 	bl	80123e0 <USBD_SetAddress>
      break;
 8011d66:	e01f      	b.n	8011da8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011d68:	6839      	ldr	r1, [r7, #0]
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 fb7c 	bl	8012468 <USBD_SetConfig>
 8011d70:	4603      	mov	r3, r0
 8011d72:	73fb      	strb	r3, [r7, #15]
      break;
 8011d74:	e018      	b.n	8011da8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011d76:	6839      	ldr	r1, [r7, #0]
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 fc19 	bl	80125b0 <USBD_GetConfig>
      break;
 8011d7e:	e013      	b.n	8011da8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011d80:	6839      	ldr	r1, [r7, #0]
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 fc49 	bl	801261a <USBD_GetStatus>
      break;
 8011d88:	e00e      	b.n	8011da8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011d8a:	6839      	ldr	r1, [r7, #0]
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 fc77 	bl	8012680 <USBD_SetFeature>
      break;
 8011d92:	e009      	b.n	8011da8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011d94:	6839      	ldr	r1, [r7, #0]
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 fc86 	bl	80126a8 <USBD_ClrFeature>
      break;
 8011d9c:	e004      	b.n	8011da8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011d9e:	6839      	ldr	r1, [r7, #0]
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 fcdc 	bl	801275e <USBD_CtlError>
      break;
 8011da6:	bf00      	nop
    }
    break;
 8011da8:	e004      	b.n	8011db4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011daa:	6839      	ldr	r1, [r7, #0]
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f000 fcd6 	bl	801275e <USBD_CtlError>
    break;
 8011db2:	bf00      	nop
  }

  return ret;
 8011db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop

08011dc0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dd6:	2b40      	cmp	r3, #64	; 0x40
 8011dd8:	d005      	beq.n	8011de6 <USBD_StdItfReq+0x26>
 8011dda:	2b40      	cmp	r3, #64	; 0x40
 8011ddc:	d82e      	bhi.n	8011e3c <USBD_StdItfReq+0x7c>
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d001      	beq.n	8011de6 <USBD_StdItfReq+0x26>
 8011de2:	2b20      	cmp	r3, #32
 8011de4:	d12a      	bne.n	8011e3c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dec:	3b01      	subs	r3, #1
 8011dee:	2b02      	cmp	r3, #2
 8011df0:	d81d      	bhi.n	8011e2e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	889b      	ldrh	r3, [r3, #4]
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d813      	bhi.n	8011e24 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	6839      	ldr	r1, [r7, #0]
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	4798      	blx	r3
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	88db      	ldrh	r3, [r3, #6]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d110      	bne.n	8011e38 <USBD_StdItfReq+0x78>
 8011e16:	7bfb      	ldrb	r3, [r7, #15]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d10d      	bne.n	8011e38 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f000 fd69 	bl	80128f4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011e22:	e009      	b.n	8011e38 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8011e24:	6839      	ldr	r1, [r7, #0]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f000 fc99 	bl	801275e <USBD_CtlError>
      break;
 8011e2c:	e004      	b.n	8011e38 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8011e2e:	6839      	ldr	r1, [r7, #0]
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 fc94 	bl	801275e <USBD_CtlError>
      break;
 8011e36:	e000      	b.n	8011e3a <USBD_StdItfReq+0x7a>
      break;
 8011e38:	bf00      	nop
    }
    break;
 8011e3a:	e004      	b.n	8011e46 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 fc8d 	bl	801275e <USBD_CtlError>
    break;
 8011e44:	bf00      	nop
  }

  return ret;
 8011e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	889b      	ldrh	r3, [r3, #4]
 8011e62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e6c:	2b40      	cmp	r3, #64	; 0x40
 8011e6e:	d007      	beq.n	8011e80 <USBD_StdEPReq+0x30>
 8011e70:	2b40      	cmp	r3, #64	; 0x40
 8011e72:	f200 8140 	bhi.w	80120f6 <USBD_StdEPReq+0x2a6>
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d00c      	beq.n	8011e94 <USBD_StdEPReq+0x44>
 8011e7a:	2b20      	cmp	r3, #32
 8011e7c:	f040 813b 	bne.w	80120f6 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e86:	689b      	ldr	r3, [r3, #8]
 8011e88:	6839      	ldr	r1, [r7, #0]
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	4798      	blx	r3
 8011e8e:	4603      	mov	r3, r0
 8011e90:	73fb      	strb	r3, [r7, #15]
    break;
 8011e92:	e135      	b.n	8012100 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	785b      	ldrb	r3, [r3, #1]
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d007      	beq.n	8011eac <USBD_StdEPReq+0x5c>
 8011e9c:	2b03      	cmp	r3, #3
 8011e9e:	f300 8124 	bgt.w	80120ea <USBD_StdEPReq+0x29a>
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d07b      	beq.n	8011f9e <USBD_StdEPReq+0x14e>
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d03b      	beq.n	8011f22 <USBD_StdEPReq+0xd2>
 8011eaa:	e11e      	b.n	80120ea <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eb2:	2b02      	cmp	r3, #2
 8011eb4:	d002      	beq.n	8011ebc <USBD_StdEPReq+0x6c>
 8011eb6:	2b03      	cmp	r3, #3
 8011eb8:	d016      	beq.n	8011ee8 <USBD_StdEPReq+0x98>
 8011eba:	e02c      	b.n	8011f16 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ebc:	7bbb      	ldrb	r3, [r7, #14]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d00d      	beq.n	8011ede <USBD_StdEPReq+0x8e>
 8011ec2:	7bbb      	ldrb	r3, [r7, #14]
 8011ec4:	2b80      	cmp	r3, #128	; 0x80
 8011ec6:	d00a      	beq.n	8011ede <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ec8:	7bbb      	ldrb	r3, [r7, #14]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f004 f813 	bl	8015ef8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ed2:	2180      	movs	r1, #128	; 0x80
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f004 f80f 	bl	8015ef8 <USBD_LL_StallEP>
 8011eda:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011edc:	e020      	b.n	8011f20 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8011ede:	6839      	ldr	r1, [r7, #0]
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 fc3c 	bl	801275e <USBD_CtlError>
        break;
 8011ee6:	e01b      	b.n	8011f20 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	885b      	ldrh	r3, [r3, #2]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10e      	bne.n	8011f0e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ef0:	7bbb      	ldrb	r3, [r7, #14]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d00b      	beq.n	8011f0e <USBD_StdEPReq+0xbe>
 8011ef6:	7bbb      	ldrb	r3, [r7, #14]
 8011ef8:	2b80      	cmp	r3, #128	; 0x80
 8011efa:	d008      	beq.n	8011f0e <USBD_StdEPReq+0xbe>
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	88db      	ldrh	r3, [r3, #6]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d104      	bne.n	8011f0e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f04:	7bbb      	ldrb	r3, [r7, #14]
 8011f06:	4619      	mov	r1, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f003 fff5 	bl	8015ef8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 fcf0 	bl	80128f4 <USBD_CtlSendStatus>

        break;
 8011f14:	e004      	b.n	8011f20 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8011f16:	6839      	ldr	r1, [r7, #0]
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f000 fc20 	bl	801275e <USBD_CtlError>
        break;
 8011f1e:	bf00      	nop
      }
      break;
 8011f20:	e0e8      	b.n	80120f4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f28:	2b02      	cmp	r3, #2
 8011f2a:	d002      	beq.n	8011f32 <USBD_StdEPReq+0xe2>
 8011f2c:	2b03      	cmp	r3, #3
 8011f2e:	d016      	beq.n	8011f5e <USBD_StdEPReq+0x10e>
 8011f30:	e02e      	b.n	8011f90 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f32:	7bbb      	ldrb	r3, [r7, #14]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00d      	beq.n	8011f54 <USBD_StdEPReq+0x104>
 8011f38:	7bbb      	ldrb	r3, [r7, #14]
 8011f3a:	2b80      	cmp	r3, #128	; 0x80
 8011f3c:	d00a      	beq.n	8011f54 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f3e:	7bbb      	ldrb	r3, [r7, #14]
 8011f40:	4619      	mov	r1, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f003 ffd8 	bl	8015ef8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f48:	2180      	movs	r1, #128	; 0x80
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f003 ffd4 	bl	8015ef8 <USBD_LL_StallEP>
 8011f50:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011f52:	e023      	b.n	8011f9c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011f54:	6839      	ldr	r1, [r7, #0]
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 fc01 	bl	801275e <USBD_CtlError>
        break;
 8011f5c:	e01e      	b.n	8011f9c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	885b      	ldrh	r3, [r3, #2]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d119      	bne.n	8011f9a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011f66:	7bbb      	ldrb	r3, [r7, #14]
 8011f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d004      	beq.n	8011f7a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f70:	7bbb      	ldrb	r3, [r7, #14]
 8011f72:	4619      	mov	r1, r3
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f003 ffde 	bl	8015f36 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f000 fcba 	bl	80128f4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f86:	689b      	ldr	r3, [r3, #8]
 8011f88:	6839      	ldr	r1, [r7, #0]
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	4798      	blx	r3
        }
        break;
 8011f8e:	e004      	b.n	8011f9a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011f90:	6839      	ldr	r1, [r7, #0]
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 fbe3 	bl	801275e <USBD_CtlError>
        break;
 8011f98:	e000      	b.n	8011f9c <USBD_StdEPReq+0x14c>
        break;
 8011f9a:	bf00      	nop
      }
      break;
 8011f9c:	e0aa      	b.n	80120f4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fa4:	2b02      	cmp	r3, #2
 8011fa6:	d002      	beq.n	8011fae <USBD_StdEPReq+0x15e>
 8011fa8:	2b03      	cmp	r3, #3
 8011faa:	d032      	beq.n	8012012 <USBD_StdEPReq+0x1c2>
 8011fac:	e097      	b.n	80120de <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fae:	7bbb      	ldrb	r3, [r7, #14]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d007      	beq.n	8011fc4 <USBD_StdEPReq+0x174>
 8011fb4:	7bbb      	ldrb	r3, [r7, #14]
 8011fb6:	2b80      	cmp	r3, #128	; 0x80
 8011fb8:	d004      	beq.n	8011fc4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011fba:	6839      	ldr	r1, [r7, #0]
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f000 fbce 	bl	801275e <USBD_CtlError>
          break;
 8011fc2:	e091      	b.n	80120e8 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	da0b      	bge.n	8011fe4 <USBD_StdEPReq+0x194>
 8011fcc:	7bbb      	ldrb	r3, [r7, #14]
 8011fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	009b      	lsls	r3, r3, #2
 8011fd6:	4413      	add	r3, r2
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	3310      	adds	r3, #16
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	4413      	add	r3, r2
 8011fe0:	3304      	adds	r3, #4
 8011fe2:	e00b      	b.n	8011ffc <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011fe4:	7bbb      	ldrb	r3, [r7, #14]
 8011fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fea:	4613      	mov	r3, r2
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	4413      	add	r3, r2
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	3304      	adds	r3, #4
 8011ffc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	2200      	movs	r2, #0
 8012002:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	2202      	movs	r2, #2
 8012008:	4619      	mov	r1, r3
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 fc18 	bl	8012840 <USBD_CtlSendData>
        break;
 8012010:	e06a      	b.n	80120e8 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012016:	2b00      	cmp	r3, #0
 8012018:	da11      	bge.n	801203e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801201a:	7bbb      	ldrb	r3, [r7, #14]
 801201c:	f003 020f 	and.w	r2, r3, #15
 8012020:	6879      	ldr	r1, [r7, #4]
 8012022:	4613      	mov	r3, r2
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	4413      	add	r3, r2
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	440b      	add	r3, r1
 801202c:	3324      	adds	r3, #36	; 0x24
 801202e:	881b      	ldrh	r3, [r3, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d117      	bne.n	8012064 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8012034:	6839      	ldr	r1, [r7, #0]
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f000 fb91 	bl	801275e <USBD_CtlError>
            break;
 801203c:	e054      	b.n	80120e8 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801203e:	7bbb      	ldrb	r3, [r7, #14]
 8012040:	f003 020f 	and.w	r2, r3, #15
 8012044:	6879      	ldr	r1, [r7, #4]
 8012046:	4613      	mov	r3, r2
 8012048:	009b      	lsls	r3, r3, #2
 801204a:	4413      	add	r3, r2
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	440b      	add	r3, r1
 8012050:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012054:	881b      	ldrh	r3, [r3, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d104      	bne.n	8012064 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 801205a:	6839      	ldr	r1, [r7, #0]
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 fb7e 	bl	801275e <USBD_CtlError>
            break;
 8012062:	e041      	b.n	80120e8 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012068:	2b00      	cmp	r3, #0
 801206a:	da0b      	bge.n	8012084 <USBD_StdEPReq+0x234>
 801206c:	7bbb      	ldrb	r3, [r7, #14]
 801206e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012072:	4613      	mov	r3, r2
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	4413      	add	r3, r2
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	3310      	adds	r3, #16
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	4413      	add	r3, r2
 8012080:	3304      	adds	r3, #4
 8012082:	e00b      	b.n	801209c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012084:	7bbb      	ldrb	r3, [r7, #14]
 8012086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801208a:	4613      	mov	r3, r2
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	4413      	add	r3, r2
 8012090:	009b      	lsls	r3, r3, #2
 8012092:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	4413      	add	r3, r2
 801209a:	3304      	adds	r3, #4
 801209c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801209e:	7bbb      	ldrb	r3, [r7, #14]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d002      	beq.n	80120aa <USBD_StdEPReq+0x25a>
 80120a4:	7bbb      	ldrb	r3, [r7, #14]
 80120a6:	2b80      	cmp	r3, #128	; 0x80
 80120a8:	d103      	bne.n	80120b2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2200      	movs	r2, #0
 80120ae:	601a      	str	r2, [r3, #0]
 80120b0:	e00e      	b.n	80120d0 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120b2:	7bbb      	ldrb	r3, [r7, #14]
 80120b4:	4619      	mov	r1, r3
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f003 ff5c 	bl	8015f74 <USBD_LL_IsStallEP>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d003      	beq.n	80120ca <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	2201      	movs	r2, #1
 80120c6:	601a      	str	r2, [r3, #0]
 80120c8:	e002      	b.n	80120d0 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2200      	movs	r2, #0
 80120ce:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	2202      	movs	r2, #2
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fbb2 	bl	8012840 <USBD_CtlSendData>
          break;
 80120dc:	e004      	b.n	80120e8 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 fb3c 	bl	801275e <USBD_CtlError>
        break;
 80120e6:	bf00      	nop
      }
      break;
 80120e8:	e004      	b.n	80120f4 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80120ea:	6839      	ldr	r1, [r7, #0]
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f000 fb36 	bl	801275e <USBD_CtlError>
      break;
 80120f2:	bf00      	nop
    }
    break;
 80120f4:	e004      	b.n	8012100 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80120f6:	6839      	ldr	r1, [r7, #0]
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f000 fb30 	bl	801275e <USBD_CtlError>
    break;
 80120fe:	bf00      	nop
  }

  return ret;
 8012100:	7bfb      	ldrb	r3, [r7, #15]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
	...

0801210c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012116:	2300      	movs	r3, #0
 8012118:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801211a:	2300      	movs	r3, #0
 801211c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801211e:	2300      	movs	r3, #0
 8012120:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	885b      	ldrh	r3, [r3, #2]
 8012126:	0a1b      	lsrs	r3, r3, #8
 8012128:	b29b      	uxth	r3, r3
 801212a:	3b01      	subs	r3, #1
 801212c:	2b06      	cmp	r3, #6
 801212e:	f200 8128 	bhi.w	8012382 <USBD_GetDescriptor+0x276>
 8012132:	a201      	add	r2, pc, #4	; (adr r2, 8012138 <USBD_GetDescriptor+0x2c>)
 8012134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012138:	08012155 	.word	0x08012155
 801213c:	0801216d 	.word	0x0801216d
 8012140:	080121ad 	.word	0x080121ad
 8012144:	08012383 	.word	0x08012383
 8012148:	08012383 	.word	0x08012383
 801214c:	08012323 	.word	0x08012323
 8012150:	0801234f 	.word	0x0801234f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	7c12      	ldrb	r2, [r2, #16]
 8012160:	f107 0108 	add.w	r1, r7, #8
 8012164:	4610      	mov	r0, r2
 8012166:	4798      	blx	r3
 8012168:	60f8      	str	r0, [r7, #12]
    break;
 801216a:	e112      	b.n	8012392 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	7c1b      	ldrb	r3, [r3, #16]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10d      	bne.n	8012190 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801217c:	f107 0208 	add.w	r2, r7, #8
 8012180:	4610      	mov	r0, r2
 8012182:	4798      	blx	r3
 8012184:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	3301      	adds	r3, #1
 801218a:	2202      	movs	r2, #2
 801218c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801218e:	e100      	b.n	8012392 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012198:	f107 0208 	add.w	r2, r7, #8
 801219c:	4610      	mov	r0, r2
 801219e:	4798      	blx	r3
 80121a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	3301      	adds	r3, #1
 80121a6:	2202      	movs	r2, #2
 80121a8:	701a      	strb	r2, [r3, #0]
    break;
 80121aa:	e0f2      	b.n	8012392 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	885b      	ldrh	r3, [r3, #2]
 80121b0:	b2db      	uxtb	r3, r3
 80121b2:	2b05      	cmp	r3, #5
 80121b4:	f200 80ac 	bhi.w	8012310 <USBD_GetDescriptor+0x204>
 80121b8:	a201      	add	r2, pc, #4	; (adr r2, 80121c0 <USBD_GetDescriptor+0xb4>)
 80121ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121be:	bf00      	nop
 80121c0:	080121d9 	.word	0x080121d9
 80121c4:	0801220d 	.word	0x0801220d
 80121c8:	08012241 	.word	0x08012241
 80121cc:	08012275 	.word	0x08012275
 80121d0:	080122a9 	.word	0x080122a9
 80121d4:	080122dd 	.word	0x080122dd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121de:	685b      	ldr	r3, [r3, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d00b      	beq.n	80121fc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	7c12      	ldrb	r2, [r2, #16]
 80121f0:	f107 0108 	add.w	r1, r7, #8
 80121f4:	4610      	mov	r0, r2
 80121f6:	4798      	blx	r3
 80121f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121fa:	e091      	b.n	8012320 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80121fc:	6839      	ldr	r1, [r7, #0]
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 faad 	bl	801275e <USBD_CtlError>
        err++;
 8012204:	7afb      	ldrb	r3, [r7, #11]
 8012206:	3301      	adds	r3, #1
 8012208:	72fb      	strb	r3, [r7, #11]
      break;
 801220a:	e089      	b.n	8012320 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012212:	689b      	ldr	r3, [r3, #8]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00b      	beq.n	8012230 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	7c12      	ldrb	r2, [r2, #16]
 8012224:	f107 0108 	add.w	r1, r7, #8
 8012228:	4610      	mov	r0, r2
 801222a:	4798      	blx	r3
 801222c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801222e:	e077      	b.n	8012320 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fa93 	bl	801275e <USBD_CtlError>
        err++;
 8012238:	7afb      	ldrb	r3, [r7, #11]
 801223a:	3301      	adds	r3, #1
 801223c:	72fb      	strb	r3, [r7, #11]
      break;
 801223e:	e06f      	b.n	8012320 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00b      	beq.n	8012264 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012252:	68db      	ldr	r3, [r3, #12]
 8012254:	687a      	ldr	r2, [r7, #4]
 8012256:	7c12      	ldrb	r2, [r2, #16]
 8012258:	f107 0108 	add.w	r1, r7, #8
 801225c:	4610      	mov	r0, r2
 801225e:	4798      	blx	r3
 8012260:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012262:	e05d      	b.n	8012320 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012264:	6839      	ldr	r1, [r7, #0]
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 fa79 	bl	801275e <USBD_CtlError>
        err++;
 801226c:	7afb      	ldrb	r3, [r7, #11]
 801226e:	3301      	adds	r3, #1
 8012270:	72fb      	strb	r3, [r7, #11]
      break;
 8012272:	e055      	b.n	8012320 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801227a:	691b      	ldr	r3, [r3, #16]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00b      	beq.n	8012298 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012286:	691b      	ldr	r3, [r3, #16]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	7c12      	ldrb	r2, [r2, #16]
 801228c:	f107 0108 	add.w	r1, r7, #8
 8012290:	4610      	mov	r0, r2
 8012292:	4798      	blx	r3
 8012294:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012296:	e043      	b.n	8012320 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f000 fa5f 	bl	801275e <USBD_CtlError>
        err++;
 80122a0:	7afb      	ldrb	r3, [r7, #11]
 80122a2:	3301      	adds	r3, #1
 80122a4:	72fb      	strb	r3, [r7, #11]
      break;
 80122a6:	e03b      	b.n	8012320 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ae:	695b      	ldr	r3, [r3, #20]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00b      	beq.n	80122cc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ba:	695b      	ldr	r3, [r3, #20]
 80122bc:	687a      	ldr	r2, [r7, #4]
 80122be:	7c12      	ldrb	r2, [r2, #16]
 80122c0:	f107 0108 	add.w	r1, r7, #8
 80122c4:	4610      	mov	r0, r2
 80122c6:	4798      	blx	r3
 80122c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122ca:	e029      	b.n	8012320 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80122cc:	6839      	ldr	r1, [r7, #0]
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fa45 	bl	801275e <USBD_CtlError>
        err++;
 80122d4:	7afb      	ldrb	r3, [r7, #11]
 80122d6:	3301      	adds	r3, #1
 80122d8:	72fb      	strb	r3, [r7, #11]
      break;
 80122da:	e021      	b.n	8012320 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122e2:	699b      	ldr	r3, [r3, #24]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00b      	beq.n	8012300 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ee:	699b      	ldr	r3, [r3, #24]
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	7c12      	ldrb	r2, [r2, #16]
 80122f4:	f107 0108 	add.w	r1, r7, #8
 80122f8:	4610      	mov	r0, r2
 80122fa:	4798      	blx	r3
 80122fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122fe:	e00f      	b.n	8012320 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012300:	6839      	ldr	r1, [r7, #0]
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fa2b 	bl	801275e <USBD_CtlError>
        err++;
 8012308:	7afb      	ldrb	r3, [r7, #11]
 801230a:	3301      	adds	r3, #1
 801230c:	72fb      	strb	r3, [r7, #11]
      break;
 801230e:	e007      	b.n	8012320 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012310:	6839      	ldr	r1, [r7, #0]
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 fa23 	bl	801275e <USBD_CtlError>
      err++;
 8012318:	7afb      	ldrb	r3, [r7, #11]
 801231a:	3301      	adds	r3, #1
 801231c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801231e:	bf00      	nop
    }
    break;
 8012320:	e037      	b.n	8012392 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	7c1b      	ldrb	r3, [r3, #16]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d109      	bne.n	801233e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012332:	f107 0208 	add.w	r2, r7, #8
 8012336:	4610      	mov	r0, r2
 8012338:	4798      	blx	r3
 801233a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801233c:	e029      	b.n	8012392 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801233e:	6839      	ldr	r1, [r7, #0]
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 fa0c 	bl	801275e <USBD_CtlError>
      err++;
 8012346:	7afb      	ldrb	r3, [r7, #11]
 8012348:	3301      	adds	r3, #1
 801234a:	72fb      	strb	r3, [r7, #11]
    break;
 801234c:	e021      	b.n	8012392 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	7c1b      	ldrb	r3, [r3, #16]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d10d      	bne.n	8012372 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801235e:	f107 0208 	add.w	r2, r7, #8
 8012362:	4610      	mov	r0, r2
 8012364:	4798      	blx	r3
 8012366:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	3301      	adds	r3, #1
 801236c:	2207      	movs	r2, #7
 801236e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012370:	e00f      	b.n	8012392 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012372:	6839      	ldr	r1, [r7, #0]
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f000 f9f2 	bl	801275e <USBD_CtlError>
      err++;
 801237a:	7afb      	ldrb	r3, [r7, #11]
 801237c:	3301      	adds	r3, #1
 801237e:	72fb      	strb	r3, [r7, #11]
    break;
 8012380:	e007      	b.n	8012392 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012382:	6839      	ldr	r1, [r7, #0]
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 f9ea 	bl	801275e <USBD_CtlError>
    err++;
 801238a:	7afb      	ldrb	r3, [r7, #11]
 801238c:	3301      	adds	r3, #1
 801238e:	72fb      	strb	r3, [r7, #11]
    break;
 8012390:	bf00      	nop
  }

  if (err != 0U)
 8012392:	7afb      	ldrb	r3, [r7, #11]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d11e      	bne.n	80123d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	88db      	ldrh	r3, [r3, #6]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d016      	beq.n	80123ce <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80123a0:	893b      	ldrh	r3, [r7, #8]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00e      	beq.n	80123c4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	88da      	ldrh	r2, [r3, #6]
 80123aa:	893b      	ldrh	r3, [r7, #8]
 80123ac:	4293      	cmp	r3, r2
 80123ae:	bf28      	it	cs
 80123b0:	4613      	movcs	r3, r2
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80123b6:	893b      	ldrh	r3, [r7, #8]
 80123b8:	461a      	mov	r2, r3
 80123ba:	68f9      	ldr	r1, [r7, #12]
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f000 fa3f 	bl	8012840 <USBD_CtlSendData>
 80123c2:	e009      	b.n	80123d8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80123c4:	6839      	ldr	r1, [r7, #0]
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 f9c9 	bl	801275e <USBD_CtlError>
 80123cc:	e004      	b.n	80123d8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 fa90 	bl	80128f4 <USBD_CtlSendStatus>
 80123d4:	e000      	b.n	80123d8 <USBD_GetDescriptor+0x2cc>
    return;
 80123d6:	bf00      	nop
    }
  }
}
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop

080123e0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	889b      	ldrh	r3, [r3, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d130      	bne.n	8012454 <USBD_SetAddress+0x74>
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	88db      	ldrh	r3, [r3, #6]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d12c      	bne.n	8012454 <USBD_SetAddress+0x74>
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	885b      	ldrh	r3, [r3, #2]
 80123fe:	2b7f      	cmp	r3, #127	; 0x7f
 8012400:	d828      	bhi.n	8012454 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	885b      	ldrh	r3, [r3, #2]
 8012406:	b2db      	uxtb	r3, r3
 8012408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801240c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012414:	2b03      	cmp	r3, #3
 8012416:	d104      	bne.n	8012422 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012418:	6839      	ldr	r1, [r7, #0]
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f000 f99f 	bl	801275e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012420:	e01d      	b.n	801245e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	7bfa      	ldrb	r2, [r7, #15]
 8012426:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801242a:	7bfb      	ldrb	r3, [r7, #15]
 801242c:	4619      	mov	r1, r3
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f003 fdcc 	bl	8015fcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 fa5d 	bl	80128f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801243a:	7bfb      	ldrb	r3, [r7, #15]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d004      	beq.n	801244a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2202      	movs	r2, #2
 8012444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012448:	e009      	b.n	801245e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2201      	movs	r2, #1
 801244e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012452:	e004      	b.n	801245e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012454:	6839      	ldr	r1, [r7, #0]
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f000 f981 	bl	801275e <USBD_CtlError>
  }
}
 801245c:	bf00      	nop
 801245e:	bf00      	nop
 8012460:	3710      	adds	r7, #16
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}
	...

08012468 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012472:	2300      	movs	r3, #0
 8012474:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	885b      	ldrh	r3, [r3, #2]
 801247a:	b2da      	uxtb	r2, r3
 801247c:	4b4b      	ldr	r3, [pc, #300]	; (80125ac <USBD_SetConfig+0x144>)
 801247e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012480:	4b4a      	ldr	r3, [pc, #296]	; (80125ac <USBD_SetConfig+0x144>)
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	2b01      	cmp	r3, #1
 8012486:	d905      	bls.n	8012494 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 f967 	bl	801275e <USBD_CtlError>
    return USBD_FAIL;
 8012490:	2303      	movs	r3, #3
 8012492:	e087      	b.n	80125a4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801249a:	2b02      	cmp	r3, #2
 801249c:	d002      	beq.n	80124a4 <USBD_SetConfig+0x3c>
 801249e:	2b03      	cmp	r3, #3
 80124a0:	d025      	beq.n	80124ee <USBD_SetConfig+0x86>
 80124a2:	e071      	b.n	8012588 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80124a4:	4b41      	ldr	r3, [pc, #260]	; (80125ac <USBD_SetConfig+0x144>)
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d01c      	beq.n	80124e6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80124ac:	4b3f      	ldr	r3, [pc, #252]	; (80125ac <USBD_SetConfig+0x144>)
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	461a      	mov	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80124b6:	4b3d      	ldr	r3, [pc, #244]	; (80125ac <USBD_SetConfig+0x144>)
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	4619      	mov	r1, r3
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7ff f999 	bl	80117f4 <USBD_SetClassConfig>
 80124c2:	4603      	mov	r3, r0
 80124c4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80124c6:	7bfb      	ldrb	r3, [r7, #15]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d004      	beq.n	80124d6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 f945 	bl	801275e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80124d4:	e065      	b.n	80125a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f000 fa0c 	bl	80128f4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2203      	movs	r2, #3
 80124e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80124e4:	e05d      	b.n	80125a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 fa04 	bl	80128f4 <USBD_CtlSendStatus>
    break;
 80124ec:	e059      	b.n	80125a2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80124ee:	4b2f      	ldr	r3, [pc, #188]	; (80125ac <USBD_SetConfig+0x144>)
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d112      	bne.n	801251c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2202      	movs	r2, #2
 80124fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80124fe:	4b2b      	ldr	r3, [pc, #172]	; (80125ac <USBD_SetConfig+0x144>)
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	461a      	mov	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012508:	4b28      	ldr	r3, [pc, #160]	; (80125ac <USBD_SetConfig+0x144>)
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	4619      	mov	r1, r3
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7ff f98c 	bl	801182c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f000 f9ed 	bl	80128f4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801251a:	e042      	b.n	80125a2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801251c:	4b23      	ldr	r3, [pc, #140]	; (80125ac <USBD_SetConfig+0x144>)
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	461a      	mov	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	429a      	cmp	r2, r3
 8012528:	d02a      	beq.n	8012580 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	b2db      	uxtb	r3, r3
 8012530:	4619      	mov	r1, r3
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f7ff f97a 	bl	801182c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012538:	4b1c      	ldr	r3, [pc, #112]	; (80125ac <USBD_SetConfig+0x144>)
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	461a      	mov	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012542:	4b1a      	ldr	r3, [pc, #104]	; (80125ac <USBD_SetConfig+0x144>)
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	4619      	mov	r1, r3
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7ff f953 	bl	80117f4 <USBD_SetClassConfig>
 801254e:	4603      	mov	r3, r0
 8012550:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012552:	7bfb      	ldrb	r3, [r7, #15]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d00f      	beq.n	8012578 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012558:	6839      	ldr	r1, [r7, #0]
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 f8ff 	bl	801275e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	b2db      	uxtb	r3, r3
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7ff f95f 	bl	801182c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2202      	movs	r2, #2
 8012572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012576:	e014      	b.n	80125a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 f9bb 	bl	80128f4 <USBD_CtlSendStatus>
    break;
 801257e:	e010      	b.n	80125a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 f9b7 	bl	80128f4 <USBD_CtlSendStatus>
    break;
 8012586:	e00c      	b.n	80125a2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012588:	6839      	ldr	r1, [r7, #0]
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 f8e7 	bl	801275e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012590:	4b06      	ldr	r3, [pc, #24]	; (80125ac <USBD_SetConfig+0x144>)
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	4619      	mov	r1, r3
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7ff f948 	bl	801182c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801259c:	2303      	movs	r3, #3
 801259e:	73fb      	strb	r3, [r7, #15]
    break;
 80125a0:	bf00      	nop
  }

  return ret;
 80125a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3710      	adds	r7, #16
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	2000486c 	.word	0x2000486c

080125b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	88db      	ldrh	r3, [r3, #6]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d004      	beq.n	80125cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80125c2:	6839      	ldr	r1, [r7, #0]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 f8ca 	bl	801275e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80125ca:	e022      	b.n	8012612 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	dc02      	bgt.n	80125dc <USBD_GetConfig+0x2c>
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	dc03      	bgt.n	80125e2 <USBD_GetConfig+0x32>
 80125da:	e015      	b.n	8012608 <USBD_GetConfig+0x58>
 80125dc:	2b03      	cmp	r3, #3
 80125de:	d00b      	beq.n	80125f8 <USBD_GetConfig+0x48>
 80125e0:	e012      	b.n	8012608 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	3308      	adds	r3, #8
 80125ec:	2201      	movs	r2, #1
 80125ee:	4619      	mov	r1, r3
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 f925 	bl	8012840 <USBD_CtlSendData>
      break;
 80125f6:	e00c      	b.n	8012612 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	3304      	adds	r3, #4
 80125fc:	2201      	movs	r2, #1
 80125fe:	4619      	mov	r1, r3
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 f91d 	bl	8012840 <USBD_CtlSendData>
      break;
 8012606:	e004      	b.n	8012612 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8012608:	6839      	ldr	r1, [r7, #0]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 f8a7 	bl	801275e <USBD_CtlError>
      break;
 8012610:	bf00      	nop
}
 8012612:	bf00      	nop
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801261a:	b580      	push	{r7, lr}
 801261c:	b082      	sub	sp, #8
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
 8012622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801262a:	3b01      	subs	r3, #1
 801262c:	2b02      	cmp	r3, #2
 801262e:	d81e      	bhi.n	801266e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	88db      	ldrh	r3, [r3, #6]
 8012634:	2b02      	cmp	r3, #2
 8012636:	d004      	beq.n	8012642 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012638:	6839      	ldr	r1, [r7, #0]
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 f88f 	bl	801275e <USBD_CtlError>
      break;
 8012640:	e01a      	b.n	8012678 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2201      	movs	r2, #1
 8012646:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801264e:	2b00      	cmp	r3, #0
 8012650:	d005      	beq.n	801265e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	68db      	ldr	r3, [r3, #12]
 8012656:	f043 0202 	orr.w	r2, r3, #2
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	330c      	adds	r3, #12
 8012662:	2202      	movs	r2, #2
 8012664:	4619      	mov	r1, r3
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f000 f8ea 	bl	8012840 <USBD_CtlSendData>
    break;
 801266c:	e004      	b.n	8012678 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801266e:	6839      	ldr	r1, [r7, #0]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 f874 	bl	801275e <USBD_CtlError>
    break;
 8012676:	bf00      	nop
  }
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	885b      	ldrh	r3, [r3, #2]
 801268e:	2b01      	cmp	r3, #1
 8012690:	d106      	bne.n	80126a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2201      	movs	r2, #1
 8012696:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f000 f92a 	bl	80128f4 <USBD_CtlSendStatus>
  }
}
 80126a0:	bf00      	nop
 80126a2:	3708      	adds	r7, #8
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}

080126a8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126b8:	3b01      	subs	r3, #1
 80126ba:	2b02      	cmp	r3, #2
 80126bc:	d80b      	bhi.n	80126d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	885b      	ldrh	r3, [r3, #2]
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d10c      	bne.n	80126e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2200      	movs	r2, #0
 80126ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 f910 	bl	80128f4 <USBD_CtlSendStatus>
      }
      break;
 80126d4:	e004      	b.n	80126e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80126d6:	6839      	ldr	r1, [r7, #0]
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 f840 	bl	801275e <USBD_CtlError>
      break;
 80126de:	e000      	b.n	80126e2 <USBD_ClrFeature+0x3a>
      break;
 80126e0:	bf00      	nop
  }
}
 80126e2:	bf00      	nop
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b084      	sub	sp, #16
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
 80126f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	781a      	ldrb	r2, [r3, #0]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	3301      	adds	r3, #1
 8012704:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	781a      	ldrb	r2, [r3, #0]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	3301      	adds	r3, #1
 8012712:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f7ff fac6 	bl	8011ca6 <SWAPBYTE>
 801271a:	4603      	mov	r3, r0
 801271c:	461a      	mov	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	3301      	adds	r3, #1
 8012726:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	3301      	adds	r3, #1
 801272c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801272e:	68f8      	ldr	r0, [r7, #12]
 8012730:	f7ff fab9 	bl	8011ca6 <SWAPBYTE>
 8012734:	4603      	mov	r3, r0
 8012736:	461a      	mov	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	3301      	adds	r3, #1
 8012740:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	3301      	adds	r3, #1
 8012746:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7ff faac 	bl	8011ca6 <SWAPBYTE>
 801274e:	4603      	mov	r3, r0
 8012750:	461a      	mov	r2, r3
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	80da      	strh	r2, [r3, #6]
}
 8012756:	bf00      	nop
 8012758:	3710      	adds	r7, #16
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801275e:	b580      	push	{r7, lr}
 8012760:	b082      	sub	sp, #8
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
 8012766:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012768:	2180      	movs	r1, #128	; 0x80
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f003 fbc4 	bl	8015ef8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012770:	2100      	movs	r1, #0
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f003 fbc0 	bl	8015ef8 <USBD_LL_StallEP>
}
 8012778:	bf00      	nop
 801277a:	3708      	adds	r7, #8
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801278c:	2300      	movs	r3, #0
 801278e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d036      	beq.n	8012804 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801279a:	6938      	ldr	r0, [r7, #16]
 801279c:	f000 f836 	bl	801280c <USBD_GetLen>
 80127a0:	4603      	mov	r3, r0
 80127a2:	3301      	adds	r3, #1
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80127ae:	7dfb      	ldrb	r3, [r7, #23]
 80127b0:	68ba      	ldr	r2, [r7, #8]
 80127b2:	4413      	add	r3, r2
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	7812      	ldrb	r2, [r2, #0]
 80127b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	3301      	adds	r3, #1
 80127be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80127c0:	7dfb      	ldrb	r3, [r7, #23]
 80127c2:	68ba      	ldr	r2, [r7, #8]
 80127c4:	4413      	add	r3, r2
 80127c6:	2203      	movs	r2, #3
 80127c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80127ca:	7dfb      	ldrb	r3, [r7, #23]
 80127cc:	3301      	adds	r3, #1
 80127ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80127d0:	e013      	b.n	80127fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80127d2:	7dfb      	ldrb	r3, [r7, #23]
 80127d4:	68ba      	ldr	r2, [r7, #8]
 80127d6:	4413      	add	r3, r2
 80127d8:	693a      	ldr	r2, [r7, #16]
 80127da:	7812      	ldrb	r2, [r2, #0]
 80127dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	3301      	adds	r3, #1
 80127e2:	613b      	str	r3, [r7, #16]
    idx++;
 80127e4:	7dfb      	ldrb	r3, [r7, #23]
 80127e6:	3301      	adds	r3, #1
 80127e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80127ea:	7dfb      	ldrb	r3, [r7, #23]
 80127ec:	68ba      	ldr	r2, [r7, #8]
 80127ee:	4413      	add	r3, r2
 80127f0:	2200      	movs	r2, #0
 80127f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80127f4:	7dfb      	ldrb	r3, [r7, #23]
 80127f6:	3301      	adds	r3, #1
 80127f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d1e7      	bne.n	80127d2 <USBD_GetString+0x52>
 8012802:	e000      	b.n	8012806 <USBD_GetString+0x86>
    return;
 8012804:	bf00      	nop
  }
}
 8012806:	3718      	adds	r7, #24
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012814:	2300      	movs	r3, #0
 8012816:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801281c:	e005      	b.n	801282a <USBD_GetLen+0x1e>
  {
    len++;
 801281e:	7bfb      	ldrb	r3, [r7, #15]
 8012820:	3301      	adds	r3, #1
 8012822:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	3301      	adds	r3, #1
 8012828:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1f5      	bne.n	801281e <USBD_GetLen+0x12>
  }

  return len;
 8012832:	7bfb      	ldrb	r3, [r7, #15]
}
 8012834:	4618      	mov	r0, r3
 8012836:	3714      	adds	r7, #20
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr

08012840 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2202      	movs	r2, #2
 8012850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	2100      	movs	r1, #0
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	f003 fbcf 	bl	801600a <USBD_LL_Transmit>

  return USBD_OK;
 801286c:	2300      	movs	r3, #0
}
 801286e:	4618      	mov	r0, r3
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012876:	b580      	push	{r7, lr}
 8012878:	b084      	sub	sp, #16
 801287a:	af00      	add	r7, sp, #0
 801287c:	60f8      	str	r0, [r7, #12]
 801287e:	60b9      	str	r1, [r7, #8]
 8012880:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	68ba      	ldr	r2, [r7, #8]
 8012886:	2100      	movs	r1, #0
 8012888:	68f8      	ldr	r0, [r7, #12]
 801288a:	f003 fbbe 	bl	801600a <USBD_LL_Transmit>

  return USBD_OK;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	3710      	adds	r7, #16
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2203      	movs	r2, #3
 80128a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	687a      	ldr	r2, [r7, #4]
 80128b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	68ba      	ldr	r2, [r7, #8]
 80128c0:	2100      	movs	r1, #0
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f003 fbc2 	bl	801604c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3710      	adds	r7, #16
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}

080128d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80128d2:	b580      	push	{r7, lr}
 80128d4:	b084      	sub	sp, #16
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	60f8      	str	r0, [r7, #12]
 80128da:	60b9      	str	r1, [r7, #8]
 80128dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	2100      	movs	r1, #0
 80128e4:	68f8      	ldr	r0, [r7, #12]
 80128e6:	f003 fbb1 	bl	801604c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80128ea:	2300      	movs	r3, #0
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3710      	adds	r7, #16
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2204      	movs	r2, #4
 8012900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012904:	2300      	movs	r3, #0
 8012906:	2200      	movs	r2, #0
 8012908:	2100      	movs	r1, #0
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f003 fb7d 	bl	801600a <USBD_LL_Transmit>

  return USBD_OK;
 8012910:	2300      	movs	r3, #0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}

0801291a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801291a:	b580      	push	{r7, lr}
 801291c:	b082      	sub	sp, #8
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2205      	movs	r2, #5
 8012926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801292a:	2300      	movs	r3, #0
 801292c:	2200      	movs	r2, #0
 801292e:	2100      	movs	r1, #0
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f003 fb8b 	bl	801604c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012940:	b480      	push	{r7}
 8012942:	b085      	sub	sp, #20
 8012944:	af00      	add	r7, sp, #0
 8012946:	4603      	mov	r3, r0
 8012948:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801294a:	2300      	movs	r3, #0
 801294c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801294e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012952:	2b84      	cmp	r3, #132	; 0x84
 8012954:	d005      	beq.n	8012962 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012956:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	4413      	add	r3, r2
 801295e:	3303      	adds	r3, #3
 8012960:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012962:	68fb      	ldr	r3, [r7, #12]
}
 8012964:	4618      	mov	r0, r3
 8012966:	3714      	adds	r7, #20
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr

08012970 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012976:	f3ef 8305 	mrs	r3, IPSR
 801297a:	607b      	str	r3, [r7, #4]
  return(result);
 801297c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801297e:	2b00      	cmp	r3, #0
 8012980:	bf14      	ite	ne
 8012982:	2301      	movne	r3, #1
 8012984:	2300      	moveq	r3, #0
 8012986:	b2db      	uxtb	r3, r3
}
 8012988:	4618      	mov	r0, r3
 801298a:	370c      	adds	r7, #12
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr

08012994 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012998:	f001 fb4c 	bl	8014034 <vTaskStartScheduler>
  
  return osOK;
 801299c:	2300      	movs	r3, #0
}
 801299e:	4618      	mov	r0, r3
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80129a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129a4:	b089      	sub	sp, #36	; 0x24
 80129a6:	af04      	add	r7, sp, #16
 80129a8:	6078      	str	r0, [r7, #4]
 80129aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	695b      	ldr	r3, [r3, #20]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d020      	beq.n	80129f6 <osThreadCreate+0x54>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	699b      	ldr	r3, [r3, #24]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d01c      	beq.n	80129f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	685c      	ldr	r4, [r3, #4]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681d      	ldr	r5, [r3, #0]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	691e      	ldr	r6, [r3, #16]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7ff ffb6 	bl	8012940 <makeFreeRtosPriority>
 80129d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	695b      	ldr	r3, [r3, #20]
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129de:	9202      	str	r2, [sp, #8]
 80129e0:	9301      	str	r3, [sp, #4]
 80129e2:	9100      	str	r1, [sp, #0]
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	4632      	mov	r2, r6
 80129e8:	4629      	mov	r1, r5
 80129ea:	4620      	mov	r0, r4
 80129ec:	f001 f95a 	bl	8013ca4 <xTaskCreateStatic>
 80129f0:	4603      	mov	r3, r0
 80129f2:	60fb      	str	r3, [r7, #12]
 80129f4:	e01c      	b.n	8012a30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	685c      	ldr	r4, [r3, #4]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a02:	b29e      	uxth	r6, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7ff ff98 	bl	8012940 <makeFreeRtosPriority>
 8012a10:	4602      	mov	r2, r0
 8012a12:	f107 030c 	add.w	r3, r7, #12
 8012a16:	9301      	str	r3, [sp, #4]
 8012a18:	9200      	str	r2, [sp, #0]
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	4632      	mov	r2, r6
 8012a1e:	4629      	mov	r1, r5
 8012a20:	4620      	mov	r0, r4
 8012a22:	f001 f99c 	bl	8013d5e <xTaskCreate>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d001      	beq.n	8012a30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	e000      	b.n	8012a32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012a30:	68fb      	ldr	r3, [r7, #12]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3714      	adds	r7, #20
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b084      	sub	sp, #16
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d001      	beq.n	8012a50 <osDelay+0x16>
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	e000      	b.n	8012a52 <osDelay+0x18>
 8012a50:	2301      	movs	r3, #1
 8012a52:	4618      	mov	r0, r3
 8012a54:	f001 faba 	bl	8013fcc <vTaskDelay>
  
  return osOK;
 8012a58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3710      	adds	r7, #16
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
	...

08012a64 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b086      	sub	sp, #24
 8012a68:	af02      	add	r7, sp, #8
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8012a72:	2300      	movs	r3, #0
 8012a74:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8012a76:	f7ff ff7b 	bl	8012970 <inHandlerMode>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d01c      	beq.n	8012aba <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012a80:	6839      	ldr	r1, [r7, #0]
 8012a82:	f107 0208 	add.w	r2, r7, #8
 8012a86:	f107 030c 	add.w	r3, r7, #12
 8012a8a:	9300      	str	r3, [sp, #0]
 8012a8c:	4613      	mov	r3, r2
 8012a8e:	2201      	movs	r2, #1
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f002 f881 	bl	8014b98 <xTaskGenericNotifyFromISR>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d002      	beq.n	8012aa2 <osSignalSet+0x3e>
      return 0x80000000;
 8012a9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012aa0:	e019      	b.n	8012ad6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d015      	beq.n	8012ad4 <osSignalSet+0x70>
 8012aa8:	4b0d      	ldr	r3, [pc, #52]	; (8012ae0 <osSignalSet+0x7c>)
 8012aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aae:	601a      	str	r2, [r3, #0]
 8012ab0:	f3bf 8f4f 	dsb	sy
 8012ab4:	f3bf 8f6f 	isb	sy
 8012ab8:	e00c      	b.n	8012ad4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012aba:	6839      	ldr	r1, [r7, #0]
 8012abc:	f107 0308 	add.w	r3, r7, #8
 8012ac0:	2201      	movs	r2, #1
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f001 ffb2 	bl	8014a2c <xTaskGenericNotify>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b01      	cmp	r3, #1
 8012acc:	d002      	beq.n	8012ad4 <osSignalSet+0x70>
    return 0x80000000;
 8012ace:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ad2:	e000      	b.n	8012ad6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012ad4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	e000ed04 	.word	0xe000ed04

08012ae4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012ae4:	b590      	push	{r4, r7, lr}
 8012ae6:	b089      	sub	sp, #36	; 0x24
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	60f8      	str	r0, [r7, #12]
 8012aec:	60b9      	str	r1, [r7, #8]
 8012aee:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012af0:	2300      	movs	r3, #0
 8012af2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012af4:	2300      	movs	r3, #0
 8012af6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012afe:	d103      	bne.n	8012b08 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012b00:	f04f 33ff 	mov.w	r3, #4294967295
 8012b04:	61fb      	str	r3, [r7, #28]
 8012b06:	e009      	b.n	8012b1c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d006      	beq.n	8012b1c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012b12:	69fb      	ldr	r3, [r7, #28]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d101      	bne.n	8012b1c <osSignalWait+0x38>
      ticks = 1;
 8012b18:	2301      	movs	r3, #1
 8012b1a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012b1c:	f7ff ff28 	bl	8012970 <inHandlerMode>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d002      	beq.n	8012b2c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012b26:	2382      	movs	r3, #130	; 0x82
 8012b28:	613b      	str	r3, [r7, #16]
 8012b2a:	e01b      	b.n	8012b64 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012b2c:	68b9      	ldr	r1, [r7, #8]
 8012b2e:	f107 0310 	add.w	r3, r7, #16
 8012b32:	1d1a      	adds	r2, r3, #4
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	2000      	movs	r0, #0
 8012b38:	f001 ff1e 	bl	8014978 <xTaskNotifyWait>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d008      	beq.n	8012b54 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d102      	bne.n	8012b4e <osSignalWait+0x6a>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	613b      	str	r3, [r7, #16]
 8012b4c:	e00a      	b.n	8012b64 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8012b4e:	2340      	movs	r3, #64	; 0x40
 8012b50:	613b      	str	r3, [r7, #16]
 8012b52:	e007      	b.n	8012b64 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	da02      	bge.n	8012b60 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012b5a:	2386      	movs	r3, #134	; 0x86
 8012b5c:	613b      	str	r3, [r7, #16]
 8012b5e:	e001      	b.n	8012b64 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012b60:	2308      	movs	r3, #8
 8012b62:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	461c      	mov	r4, r3
 8012b68:	f107 0310 	add.w	r3, r7, #16
 8012b6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012b74:	68f8      	ldr	r0, [r7, #12]
 8012b76:	3724      	adds	r7, #36	; 0x24
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd90      	pop	{r4, r7, pc}

08012b7c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d007      	beq.n	8012b9c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	4619      	mov	r1, r3
 8012b92:	2001      	movs	r0, #1
 8012b94:	f000 fc65 	bl	8013462 <xQueueCreateMutexStatic>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	e003      	b.n	8012ba4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012b9c:	2001      	movs	r0, #1
 8012b9e:	f000 fc48 	bl	8013432 <xQueueCreateMutex>
 8012ba2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3708      	adds	r7, #8
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b086      	sub	sp, #24
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	3303      	adds	r3, #3
 8012bba:	f023 0303 	bic.w	r3, r3, #3
 8012bbe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012bc0:	2014      	movs	r0, #20
 8012bc2:	f002 fb79 	bl	80152b8 <pvPortMalloc>
 8012bc6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d046      	beq.n	8012c5c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	2200      	movs	r2, #0
 8012be0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	4618      	mov	r0, r3
 8012be8:	f002 fb66 	bl	80152b8 <pvPortMalloc>
 8012bec:	4602      	mov	r2, r0
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d02b      	beq.n	8012c52 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	68fa      	ldr	r2, [r7, #12]
 8012c00:	fb02 f303 	mul.w	r3, r2, r3
 8012c04:	4618      	mov	r0, r3
 8012c06:	f002 fb57 	bl	80152b8 <pvPortMalloc>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d011      	beq.n	8012c3c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012c18:	2300      	movs	r3, #0
 8012c1a:	613b      	str	r3, [r7, #16]
 8012c1c:	e008      	b.n	8012c30 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	685a      	ldr	r2, [r3, #4]
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	4413      	add	r3, r2
 8012c26:	2200      	movs	r2, #0
 8012c28:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	613b      	str	r3, [r7, #16]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	693a      	ldr	r2, [r7, #16]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d3f1      	bcc.n	8012c1e <osPoolCreate+0x72>
 8012c3a:	e00f      	b.n	8012c5c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f002 fbfd 	bl	8015440 <vPortFree>
        vPortFree(thePool);
 8012c46:	6978      	ldr	r0, [r7, #20]
 8012c48:	f002 fbfa 	bl	8015440 <vPortFree>
        thePool = NULL;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	e004      	b.n	8012c5c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012c52:	6978      	ldr	r0, [r7, #20]
 8012c54:	f002 fbf4 	bl	8015440 <vPortFree>
      thePool = NULL;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012c5c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3718      	adds	r7, #24
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}

08012c66 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b08a      	sub	sp, #40	; 0x28
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012c72:	2300      	movs	r3, #0
 8012c74:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012c76:	f7ff fe7b 	bl	8012970 <inHandlerMode>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d00e      	beq.n	8012c9e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012c80:	f3ef 8211 	mrs	r2, BASEPRI
 8012c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c88:	f383 8811 	msr	BASEPRI, r3
 8012c8c:	f3bf 8f6f 	isb	sy
 8012c90:	f3bf 8f4f 	dsb	sy
 8012c94:	617a      	str	r2, [r7, #20]
 8012c96:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012c98:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c9c:	e001      	b.n	8012ca2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012c9e:	f002 f9e9 	bl	8015074 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	61fb      	str	r3, [r7, #28]
 8012ca6:	e029      	b.n	8012cfc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	691a      	ldr	r2, [r3, #16]
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	4413      	add	r3, r2
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	6892      	ldr	r2, [r2, #8]
 8012cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012cb8:	fb02 f201 	mul.w	r2, r2, r1
 8012cbc:	1a9b      	subs	r3, r3, r2
 8012cbe:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	685a      	ldr	r2, [r3, #4]
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d113      	bne.n	8012cf6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	685a      	ldr	r2, [r3, #4]
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	69ba      	ldr	r2, [r7, #24]
 8012ce6:	fb02 f303 	mul.w	r3, r2, r3
 8012cea:	440b      	add	r3, r1
 8012cec:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	69ba      	ldr	r2, [r7, #24]
 8012cf2:	611a      	str	r2, [r3, #16]
      break;
 8012cf4:	e007      	b.n	8012d06 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	61fb      	str	r3, [r7, #28]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	689b      	ldr	r3, [r3, #8]
 8012d00:	69fa      	ldr	r2, [r7, #28]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d3d0      	bcc.n	8012ca8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012d06:	f7ff fe33 	bl	8012970 <inHandlerMode>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d005      	beq.n	8012d1c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d12:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012d1a:	e001      	b.n	8012d20 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012d1c:	f002 f9da 	bl	80150d4 <vPortExitCritical>
  }
  
  return p;
 8012d20:	6a3b      	ldr	r3, [r7, #32]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3728      	adds	r7, #40	; 0x28
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}

08012d2a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012d2a:	b480      	push	{r7}
 8012d2c:	b085      	sub	sp, #20
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	6078      	str	r0, [r7, #4]
 8012d32:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d101      	bne.n	8012d3e <osPoolFree+0x14>
    return osErrorParameter;
 8012d3a:	2380      	movs	r3, #128	; 0x80
 8012d3c:	e030      	b.n	8012da0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d101      	bne.n	8012d48 <osPoolFree+0x1e>
    return osErrorParameter;
 8012d44:	2380      	movs	r3, #128	; 0x80
 8012d46:	e02b      	b.n	8012da0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	683a      	ldr	r2, [r7, #0]
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d201      	bcs.n	8012d56 <osPoolFree+0x2c>
    return osErrorParameter;
 8012d52:	2380      	movs	r3, #128	; 0x80
 8012d54:	e024      	b.n	8012da0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	6812      	ldr	r2, [r2, #0]
 8012d5c:	1a9b      	subs	r3, r3, r2
 8012d5e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	68da      	ldr	r2, [r3, #12]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d6a:	fb02 f201 	mul.w	r2, r2, r1
 8012d6e:	1a9b      	subs	r3, r3, r2
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d001      	beq.n	8012d78 <osPoolFree+0x4e>
    return osErrorParameter;
 8012d74:	2380      	movs	r3, #128	; 0x80
 8012d76:	e013      	b.n	8012da0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d82:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d301      	bcc.n	8012d92 <osPoolFree+0x68>
    return osErrorParameter;
 8012d8e:	2380      	movs	r3, #128	; 0x80
 8012d90:	e006      	b.n	8012da0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	685a      	ldr	r2, [r3, #4]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	4413      	add	r3, r2
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012d9e:	2300      	movs	r3, #0
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3714      	adds	r7, #20
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012dac:	b590      	push	{r4, r7, lr}
 8012dae:	b087      	sub	sp, #28
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	60fb      	str	r3, [r7, #12]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	613b      	str	r3, [r7, #16]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	689c      	ldr	r4, [r3, #8]
 8012dca:	200c      	movs	r0, #12
 8012dcc:	f002 fa74 	bl	80152b8 <pvPortMalloc>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d101      	bne.n	8012de2 <osMailCreate+0x36>
    return NULL;
 8012dde:	2300      	movs	r3, #0
 8012de0:	e038      	b.n	8012e54 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	689b      	ldr	r3, [r3, #8]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6818      	ldr	r0, [r3, #0]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	689b      	ldr	r3, [r3, #8]
 8012df4:	681c      	ldr	r4, [r3, #0]
 8012df6:	2200      	movs	r2, #0
 8012df8:	2104      	movs	r1, #4
 8012dfa:	f000 faa1 	bl	8013340 <xQueueGenericCreate>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	689b      	ldr	r3, [r3, #8]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d107      	bne.n	8012e1e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4618      	mov	r0, r3
 8012e16:	f002 fb13 	bl	8015440 <vPortFree>
    return NULL;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	e01a      	b.n	8012e54 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	689b      	ldr	r3, [r3, #8]
 8012e22:	681c      	ldr	r4, [r3, #0]
 8012e24:	f107 030c 	add.w	r3, r7, #12
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7ff febf 	bl	8012bac <osPoolCreate>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	689b      	ldr	r3, [r3, #8]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	689b      	ldr	r3, [r3, #8]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d107      	bne.n	8012e4e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	689b      	ldr	r3, [r3, #8]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f002 fafb 	bl	8015440 <vPortFree>
    return NULL;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e002      	b.n	8012e54 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	371c      	adds	r7, #28
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd90      	pop	{r4, r7, pc}

08012e5c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
 8012e64:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d101      	bne.n	8012e70 <osMailAlloc+0x14>
    return NULL;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	e006      	b.n	8012e7e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	689b      	ldr	r3, [r3, #8]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7ff fef6 	bl	8012c66 <osPoolAlloc>
 8012e7a:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3710      	adds	r7, #16
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
	...

08012e88 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d101      	bne.n	8012e9c <osMailPut+0x14>
    return osErrorParameter;
 8012e98:	2380      	movs	r3, #128	; 0x80
 8012e9a:	e02c      	b.n	8012ef6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012ea0:	f7ff fd66 	bl	8012970 <inHandlerMode>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d018      	beq.n	8012edc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6858      	ldr	r0, [r3, #4]
 8012eae:	f107 020c 	add.w	r2, r7, #12
 8012eb2:	4639      	mov	r1, r7
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	f000 fbed 	bl	8013694 <xQueueGenericSendFromISR>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2b01      	cmp	r3, #1
 8012ebe:	d001      	beq.n	8012ec4 <osMailPut+0x3c>
      return osErrorOS;
 8012ec0:	23ff      	movs	r3, #255	; 0xff
 8012ec2:	e018      	b.n	8012ef6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d014      	beq.n	8012ef4 <osMailPut+0x6c>
 8012eca:	4b0d      	ldr	r3, [pc, #52]	; (8012f00 <osMailPut+0x78>)
 8012ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ed0:	601a      	str	r2, [r3, #0]
 8012ed2:	f3bf 8f4f 	dsb	sy
 8012ed6:	f3bf 8f6f 	isb	sy
 8012eda:	e00b      	b.n	8012ef4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6858      	ldr	r0, [r3, #4]
 8012ee0:	4639      	mov	r1, r7
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	f000 fad7 	bl	8013498 <xQueueGenericSend>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d001      	beq.n	8012ef4 <osMailPut+0x6c>
      return osErrorOS;
 8012ef0:	23ff      	movs	r3, #255	; 0xff
 8012ef2:	e000      	b.n	8012ef6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012ef4:	2300      	movs	r3, #0
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3710      	adds	r7, #16
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	e000ed04 	.word	0xe000ed04

08012f04 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012f04:	b590      	push	{r4, r7, lr}
 8012f06:	b08b      	sub	sp, #44	; 0x2c
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d10a      	bne.n	8012f30 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012f1a:	2380      	movs	r3, #128	; 0x80
 8012f1c:	617b      	str	r3, [r7, #20]
    return event;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	461c      	mov	r4, r3
 8012f22:	f107 0314 	add.w	r3, r7, #20
 8012f26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012f2e:	e056      	b.n	8012fde <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012f30:	2300      	movs	r3, #0
 8012f32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012f34:	2300      	movs	r3, #0
 8012f36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f3e:	d103      	bne.n	8012f48 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012f40:	f04f 33ff 	mov.w	r3, #4294967295
 8012f44:	627b      	str	r3, [r7, #36]	; 0x24
 8012f46:	e009      	b.n	8012f5c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d006      	beq.n	8012f5c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d101      	bne.n	8012f5c <osMailGet+0x58>
      ticks = 1;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012f5c:	f7ff fd08 	bl	8012970 <inHandlerMode>
 8012f60:	4603      	mov	r3, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d01d      	beq.n	8012fa2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	6858      	ldr	r0, [r3, #4]
 8012f6a:	f107 0220 	add.w	r2, r7, #32
 8012f6e:	f107 0314 	add.w	r3, r7, #20
 8012f72:	3304      	adds	r3, #4
 8012f74:	4619      	mov	r1, r3
 8012f76:	f000 fd05 	bl	8013984 <xQueueReceiveFromISR>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d102      	bne.n	8012f86 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012f80:	2320      	movs	r3, #32
 8012f82:	617b      	str	r3, [r7, #20]
 8012f84:	e001      	b.n	8012f8a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012f86:	2300      	movs	r3, #0
 8012f88:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012f8a:	6a3b      	ldr	r3, [r7, #32]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d01e      	beq.n	8012fce <osMailGet+0xca>
 8012f90:	4b15      	ldr	r3, [pc, #84]	; (8012fe8 <osMailGet+0xe4>)
 8012f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f96:	601a      	str	r2, [r3, #0]
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	f3bf 8f6f 	isb	sy
 8012fa0:	e015      	b.n	8012fce <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	6858      	ldr	r0, [r3, #4]
 8012fa6:	f107 0314 	add.w	r3, r7, #20
 8012faa:	3304      	adds	r3, #4
 8012fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fae:	4619      	mov	r1, r3
 8012fb0:	f000 fc08 	bl	80137c4 <xQueueReceive>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d102      	bne.n	8012fc0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012fba:	2320      	movs	r3, #32
 8012fbc:	617b      	str	r3, [r7, #20]
 8012fbe:	e006      	b.n	8012fce <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d101      	bne.n	8012fca <osMailGet+0xc6>
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	e000      	b.n	8012fcc <osMailGet+0xc8>
 8012fca:	2340      	movs	r3, #64	; 0x40
 8012fcc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	461c      	mov	r4, r3
 8012fd2:	f107 0314 	add.w	r3, r7, #20
 8012fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	372c      	adds	r7, #44	; 0x2c
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd90      	pop	{r4, r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	e000ed04 	.word	0xe000ed04

08012fec <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d101      	bne.n	8013000 <osMailFree+0x14>
    return osErrorParameter;
 8012ffc:	2380      	movs	r3, #128	; 0x80
 8012ffe:	e006      	b.n	801300e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	689b      	ldr	r3, [r3, #8]
 8013004:	6839      	ldr	r1, [r7, #0]
 8013006:	4618      	mov	r0, r3
 8013008:	f7ff fe8f 	bl	8012d2a <osPoolFree>
 801300c:	4603      	mov	r3, r0
}
 801300e:	4618      	mov	r0, r3
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013016:	b480      	push	{r7}
 8013018:	b083      	sub	sp, #12
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f103 0208 	add.w	r2, r3, #8
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f04f 32ff 	mov.w	r2, #4294967295
 801302e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f103 0208 	add.w	r2, r3, #8
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f103 0208 	add.w	r2, r3, #8
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2200      	movs	r2, #0
 8013048:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801304a:	bf00      	nop
 801304c:	370c      	adds	r7, #12
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr

08013056 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013056:	b480      	push	{r7}
 8013058:	b083      	sub	sp, #12
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2200      	movs	r2, #0
 8013062:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013064:	bf00      	nop
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013070:	b480      	push	{r7}
 8013072:	b085      	sub	sp, #20
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	68fa      	ldr	r2, [r7, #12]
 8013084:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	689a      	ldr	r2, [r3, #8]
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	689b      	ldr	r3, [r3, #8]
 8013092:	683a      	ldr	r2, [r7, #0]
 8013094:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	683a      	ldr	r2, [r7, #0]
 801309a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	1c5a      	adds	r2, r3, #1
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	601a      	str	r2, [r3, #0]
}
 80130ac:	bf00      	nop
 80130ae:	3714      	adds	r7, #20
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80130b8:	b480      	push	{r7}
 80130ba:	b085      	sub	sp, #20
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ce:	d103      	bne.n	80130d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	60fb      	str	r3, [r7, #12]
 80130d6:	e00c      	b.n	80130f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	3308      	adds	r3, #8
 80130dc:	60fb      	str	r3, [r7, #12]
 80130de:	e002      	b.n	80130e6 <vListInsert+0x2e>
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	60fb      	str	r3, [r7, #12]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68ba      	ldr	r2, [r7, #8]
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d2f6      	bcs.n	80130e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	685a      	ldr	r2, [r3, #4]
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	683a      	ldr	r2, [r7, #0]
 8013100:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	68fa      	ldr	r2, [r7, #12]
 8013106:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	683a      	ldr	r2, [r7, #0]
 801310c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	1c5a      	adds	r2, r3, #1
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	601a      	str	r2, [r3, #0]
}
 801311e:	bf00      	nop
 8013120:	3714      	adds	r7, #20
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr

0801312a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801312a:	b480      	push	{r7}
 801312c:	b085      	sub	sp, #20
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	685b      	ldr	r3, [r3, #4]
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	6892      	ldr	r2, [r2, #8]
 8013140:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	6852      	ldr	r2, [r2, #4]
 801314a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	429a      	cmp	r2, r3
 8013154:	d103      	bne.n	801315e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	689a      	ldr	r2, [r3, #8]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2200      	movs	r2, #0
 8013162:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	1e5a      	subs	r2, r3, #1
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
}
 8013172:	4618      	mov	r0, r3
 8013174:	3714      	adds	r7, #20
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
	...

08013180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b084      	sub	sp, #16
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d10a      	bne.n	80131aa <xQueueGenericReset+0x2a>
	__asm volatile
 8013194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013198:	f383 8811 	msr	BASEPRI, r3
 801319c:	f3bf 8f6f 	isb	sy
 80131a0:	f3bf 8f4f 	dsb	sy
 80131a4:	60bb      	str	r3, [r7, #8]
}
 80131a6:	bf00      	nop
 80131a8:	e7fe      	b.n	80131a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80131aa:	f001 ff63 	bl	8015074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131b6:	68f9      	ldr	r1, [r7, #12]
 80131b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80131ba:	fb01 f303 	mul.w	r3, r1, r3
 80131be:	441a      	add	r2, r3
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2200      	movs	r2, #0
 80131c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	681a      	ldr	r2, [r3, #0]
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131da:	3b01      	subs	r3, #1
 80131dc:	68f9      	ldr	r1, [r7, #12]
 80131de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80131e0:	fb01 f303 	mul.w	r3, r1, r3
 80131e4:	441a      	add	r2, r3
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	22ff      	movs	r2, #255	; 0xff
 80131ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	22ff      	movs	r2, #255	; 0xff
 80131f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d114      	bne.n	801322a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	691b      	ldr	r3, [r3, #16]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d01a      	beq.n	801323e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	3310      	adds	r3, #16
 801320c:	4618      	mov	r0, r3
 801320e:	f001 f953 	bl	80144b8 <xTaskRemoveFromEventList>
 8013212:	4603      	mov	r3, r0
 8013214:	2b00      	cmp	r3, #0
 8013216:	d012      	beq.n	801323e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013218:	4b0c      	ldr	r3, [pc, #48]	; (801324c <xQueueGenericReset+0xcc>)
 801321a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	f3bf 8f4f 	dsb	sy
 8013224:	f3bf 8f6f 	isb	sy
 8013228:	e009      	b.n	801323e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	3310      	adds	r3, #16
 801322e:	4618      	mov	r0, r3
 8013230:	f7ff fef1 	bl	8013016 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	3324      	adds	r3, #36	; 0x24
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff feec 	bl	8013016 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801323e:	f001 ff49 	bl	80150d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013242:	2301      	movs	r3, #1
}
 8013244:	4618      	mov	r0, r3
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	e000ed04 	.word	0xe000ed04

08013250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013250:	b580      	push	{r7, lr}
 8013252:	b08e      	sub	sp, #56	; 0x38
 8013254:	af02      	add	r7, sp, #8
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	607a      	str	r2, [r7, #4]
 801325c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d10a      	bne.n	801327a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013268:	f383 8811 	msr	BASEPRI, r3
 801326c:	f3bf 8f6f 	isb	sy
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013276:	bf00      	nop
 8013278:	e7fe      	b.n	8013278 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d10a      	bne.n	8013296 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013284:	f383 8811 	msr	BASEPRI, r3
 8013288:	f3bf 8f6f 	isb	sy
 801328c:	f3bf 8f4f 	dsb	sy
 8013290:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013292:	bf00      	nop
 8013294:	e7fe      	b.n	8013294 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d002      	beq.n	80132a2 <xQueueGenericCreateStatic+0x52>
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d001      	beq.n	80132a6 <xQueueGenericCreateStatic+0x56>
 80132a2:	2301      	movs	r3, #1
 80132a4:	e000      	b.n	80132a8 <xQueueGenericCreateStatic+0x58>
 80132a6:	2300      	movs	r3, #0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d10a      	bne.n	80132c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80132ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b0:	f383 8811 	msr	BASEPRI, r3
 80132b4:	f3bf 8f6f 	isb	sy
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	623b      	str	r3, [r7, #32]
}
 80132be:	bf00      	nop
 80132c0:	e7fe      	b.n	80132c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d102      	bne.n	80132ce <xQueueGenericCreateStatic+0x7e>
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <xQueueGenericCreateStatic+0x82>
 80132ce:	2301      	movs	r3, #1
 80132d0:	e000      	b.n	80132d4 <xQueueGenericCreateStatic+0x84>
 80132d2:	2300      	movs	r3, #0
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d10a      	bne.n	80132ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80132d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132dc:	f383 8811 	msr	BASEPRI, r3
 80132e0:	f3bf 8f6f 	isb	sy
 80132e4:	f3bf 8f4f 	dsb	sy
 80132e8:	61fb      	str	r3, [r7, #28]
}
 80132ea:	bf00      	nop
 80132ec:	e7fe      	b.n	80132ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80132ee:	2348      	movs	r3, #72	; 0x48
 80132f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	2b48      	cmp	r3, #72	; 0x48
 80132f6:	d00a      	beq.n	801330e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80132f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fc:	f383 8811 	msr	BASEPRI, r3
 8013300:	f3bf 8f6f 	isb	sy
 8013304:	f3bf 8f4f 	dsb	sy
 8013308:	61bb      	str	r3, [r7, #24]
}
 801330a:	bf00      	nop
 801330c:	e7fe      	b.n	801330c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801330e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00d      	beq.n	8013336 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331c:	2201      	movs	r2, #1
 801331e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013322:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013328:	9300      	str	r3, [sp, #0]
 801332a:	4613      	mov	r3, r2
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	68b9      	ldr	r1, [r7, #8]
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f000 f845 	bl	80133c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013338:	4618      	mov	r0, r3
 801333a:	3730      	adds	r7, #48	; 0x30
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013340:	b580      	push	{r7, lr}
 8013342:	b08a      	sub	sp, #40	; 0x28
 8013344:	af02      	add	r7, sp, #8
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	4613      	mov	r3, r2
 801334c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d10a      	bne.n	801336a <xQueueGenericCreate+0x2a>
	__asm volatile
 8013354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013358:	f383 8811 	msr	BASEPRI, r3
 801335c:	f3bf 8f6f 	isb	sy
 8013360:	f3bf 8f4f 	dsb	sy
 8013364:	613b      	str	r3, [r7, #16]
}
 8013366:	bf00      	nop
 8013368:	e7fe      	b.n	8013368 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d102      	bne.n	8013376 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013370:	2300      	movs	r3, #0
 8013372:	61fb      	str	r3, [r7, #28]
 8013374:	e004      	b.n	8013380 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	68ba      	ldr	r2, [r7, #8]
 801337a:	fb02 f303 	mul.w	r3, r2, r3
 801337e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013380:	69fb      	ldr	r3, [r7, #28]
 8013382:	3348      	adds	r3, #72	; 0x48
 8013384:	4618      	mov	r0, r3
 8013386:	f001 ff97 	bl	80152b8 <pvPortMalloc>
 801338a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801338c:	69bb      	ldr	r3, [r7, #24]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d011      	beq.n	80133b6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	3348      	adds	r3, #72	; 0x48
 801339a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	2200      	movs	r2, #0
 80133a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80133a4:	79fa      	ldrb	r2, [r7, #7]
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	4613      	mov	r3, r2
 80133ac:	697a      	ldr	r2, [r7, #20]
 80133ae:	68b9      	ldr	r1, [r7, #8]
 80133b0:	68f8      	ldr	r0, [r7, #12]
 80133b2:	f000 f805 	bl	80133c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80133b6:	69bb      	ldr	r3, [r7, #24]
	}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3720      	adds	r7, #32
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
 80133cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d103      	bne.n	80133dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	69ba      	ldr	r2, [r7, #24]
 80133d8:	601a      	str	r2, [r3, #0]
 80133da:	e002      	b.n	80133e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	68ba      	ldr	r2, [r7, #8]
 80133ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80133ee:	2101      	movs	r1, #1
 80133f0:	69b8      	ldr	r0, [r7, #24]
 80133f2:	f7ff fec5 	bl	8013180 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80133f6:	bf00      	nop
 80133f8:	3710      	adds	r7, #16
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}

080133fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80133fe:	b580      	push	{r7, lr}
 8013400:	b082      	sub	sp, #8
 8013402:	af00      	add	r7, sp, #0
 8013404:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d00e      	beq.n	801342a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2200      	movs	r2, #0
 8013410:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2200      	movs	r2, #0
 8013416:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2200      	movs	r2, #0
 801341c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801341e:	2300      	movs	r3, #0
 8013420:	2200      	movs	r2, #0
 8013422:	2100      	movs	r1, #0
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f000 f837 	bl	8013498 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801342a:	bf00      	nop
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}

08013432 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013432:	b580      	push	{r7, lr}
 8013434:	b086      	sub	sp, #24
 8013436:	af00      	add	r7, sp, #0
 8013438:	4603      	mov	r3, r0
 801343a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801343c:	2301      	movs	r3, #1
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	2300      	movs	r3, #0
 8013442:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	461a      	mov	r2, r3
 8013448:	6939      	ldr	r1, [r7, #16]
 801344a:	6978      	ldr	r0, [r7, #20]
 801344c:	f7ff ff78 	bl	8013340 <xQueueGenericCreate>
 8013450:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013452:	68f8      	ldr	r0, [r7, #12]
 8013454:	f7ff ffd3 	bl	80133fe <prvInitialiseMutex>

		return xNewQueue;
 8013458:	68fb      	ldr	r3, [r7, #12]
	}
 801345a:	4618      	mov	r0, r3
 801345c:	3718      	adds	r7, #24
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}

08013462 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013462:	b580      	push	{r7, lr}
 8013464:	b088      	sub	sp, #32
 8013466:	af02      	add	r7, sp, #8
 8013468:	4603      	mov	r3, r0
 801346a:	6039      	str	r1, [r7, #0]
 801346c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801346e:	2301      	movs	r3, #1
 8013470:	617b      	str	r3, [r7, #20]
 8013472:	2300      	movs	r3, #0
 8013474:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013476:	79fb      	ldrb	r3, [r7, #7]
 8013478:	9300      	str	r3, [sp, #0]
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	2200      	movs	r2, #0
 801347e:	6939      	ldr	r1, [r7, #16]
 8013480:	6978      	ldr	r0, [r7, #20]
 8013482:	f7ff fee5 	bl	8013250 <xQueueGenericCreateStatic>
 8013486:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013488:	68f8      	ldr	r0, [r7, #12]
 801348a:	f7ff ffb8 	bl	80133fe <prvInitialiseMutex>

		return xNewQueue;
 801348e:	68fb      	ldr	r3, [r7, #12]
	}
 8013490:	4618      	mov	r0, r3
 8013492:	3718      	adds	r7, #24
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b08e      	sub	sp, #56	; 0x38
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	60b9      	str	r1, [r7, #8]
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80134a6:	2300      	movs	r3, #0
 80134a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80134ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d10a      	bne.n	80134ca <xQueueGenericSend+0x32>
	__asm volatile
 80134b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b8:	f383 8811 	msr	BASEPRI, r3
 80134bc:	f3bf 8f6f 	isb	sy
 80134c0:	f3bf 8f4f 	dsb	sy
 80134c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80134c6:	bf00      	nop
 80134c8:	e7fe      	b.n	80134c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d103      	bne.n	80134d8 <xQueueGenericSend+0x40>
 80134d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d101      	bne.n	80134dc <xQueueGenericSend+0x44>
 80134d8:	2301      	movs	r3, #1
 80134da:	e000      	b.n	80134de <xQueueGenericSend+0x46>
 80134dc:	2300      	movs	r3, #0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d10a      	bne.n	80134f8 <xQueueGenericSend+0x60>
	__asm volatile
 80134e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e6:	f383 8811 	msr	BASEPRI, r3
 80134ea:	f3bf 8f6f 	isb	sy
 80134ee:	f3bf 8f4f 	dsb	sy
 80134f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80134f4:	bf00      	nop
 80134f6:	e7fe      	b.n	80134f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	2b02      	cmp	r3, #2
 80134fc:	d103      	bne.n	8013506 <xQueueGenericSend+0x6e>
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013502:	2b01      	cmp	r3, #1
 8013504:	d101      	bne.n	801350a <xQueueGenericSend+0x72>
 8013506:	2301      	movs	r3, #1
 8013508:	e000      	b.n	801350c <xQueueGenericSend+0x74>
 801350a:	2300      	movs	r3, #0
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10a      	bne.n	8013526 <xQueueGenericSend+0x8e>
	__asm volatile
 8013510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013514:	f383 8811 	msr	BASEPRI, r3
 8013518:	f3bf 8f6f 	isb	sy
 801351c:	f3bf 8f4f 	dsb	sy
 8013520:	623b      	str	r3, [r7, #32]
}
 8013522:	bf00      	nop
 8013524:	e7fe      	b.n	8013524 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013526:	f001 f983 	bl	8014830 <xTaskGetSchedulerState>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d102      	bne.n	8013536 <xQueueGenericSend+0x9e>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d101      	bne.n	801353a <xQueueGenericSend+0xa2>
 8013536:	2301      	movs	r3, #1
 8013538:	e000      	b.n	801353c <xQueueGenericSend+0xa4>
 801353a:	2300      	movs	r3, #0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d10a      	bne.n	8013556 <xQueueGenericSend+0xbe>
	__asm volatile
 8013540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	61fb      	str	r3, [r7, #28]
}
 8013552:	bf00      	nop
 8013554:	e7fe      	b.n	8013554 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013556:	f001 fd8d 	bl	8015074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013562:	429a      	cmp	r2, r3
 8013564:	d302      	bcc.n	801356c <xQueueGenericSend+0xd4>
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	2b02      	cmp	r3, #2
 801356a:	d129      	bne.n	80135c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801356c:	683a      	ldr	r2, [r7, #0]
 801356e:	68b9      	ldr	r1, [r7, #8]
 8013570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013572:	f000 fa87 	bl	8013a84 <prvCopyDataToQueue>
 8013576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801357c:	2b00      	cmp	r3, #0
 801357e:	d010      	beq.n	80135a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013582:	3324      	adds	r3, #36	; 0x24
 8013584:	4618      	mov	r0, r3
 8013586:	f000 ff97 	bl	80144b8 <xTaskRemoveFromEventList>
 801358a:	4603      	mov	r3, r0
 801358c:	2b00      	cmp	r3, #0
 801358e:	d013      	beq.n	80135b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013590:	4b3f      	ldr	r3, [pc, #252]	; (8013690 <xQueueGenericSend+0x1f8>)
 8013592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013596:	601a      	str	r2, [r3, #0]
 8013598:	f3bf 8f4f 	dsb	sy
 801359c:	f3bf 8f6f 	isb	sy
 80135a0:	e00a      	b.n	80135b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80135a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d007      	beq.n	80135b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80135a8:	4b39      	ldr	r3, [pc, #228]	; (8013690 <xQueueGenericSend+0x1f8>)
 80135aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ae:	601a      	str	r2, [r3, #0]
 80135b0:	f3bf 8f4f 	dsb	sy
 80135b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80135b8:	f001 fd8c 	bl	80150d4 <vPortExitCritical>
				return pdPASS;
 80135bc:	2301      	movs	r3, #1
 80135be:	e063      	b.n	8013688 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d103      	bne.n	80135ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80135c6:	f001 fd85 	bl	80150d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80135ca:	2300      	movs	r3, #0
 80135cc:	e05c      	b.n	8013688 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80135ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d106      	bne.n	80135e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80135d4:	f107 0314 	add.w	r3, r7, #20
 80135d8:	4618      	mov	r0, r3
 80135da:	f000 ffcf 	bl	801457c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80135de:	2301      	movs	r3, #1
 80135e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80135e2:	f001 fd77 	bl	80150d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80135e6:	f000 fd85 	bl	80140f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80135ea:	f001 fd43 	bl	8015074 <vPortEnterCritical>
 80135ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135f4:	b25b      	sxtb	r3, r3
 80135f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135fa:	d103      	bne.n	8013604 <xQueueGenericSend+0x16c>
 80135fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801360a:	b25b      	sxtb	r3, r3
 801360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013610:	d103      	bne.n	801361a <xQueueGenericSend+0x182>
 8013612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013614:	2200      	movs	r2, #0
 8013616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801361a:	f001 fd5b 	bl	80150d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801361e:	1d3a      	adds	r2, r7, #4
 8013620:	f107 0314 	add.w	r3, r7, #20
 8013624:	4611      	mov	r1, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f000 ffbe 	bl	80145a8 <xTaskCheckForTimeOut>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d124      	bne.n	801367c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013634:	f000 fb1e 	bl	8013c74 <prvIsQueueFull>
 8013638:	4603      	mov	r3, r0
 801363a:	2b00      	cmp	r3, #0
 801363c:	d018      	beq.n	8013670 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	3310      	adds	r3, #16
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	4611      	mov	r1, r2
 8013646:	4618      	mov	r0, r3
 8013648:	f000 ff12 	bl	8014470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801364c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801364e:	f000 faa9 	bl	8013ba4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013652:	f000 fd5d 	bl	8014110 <xTaskResumeAll>
 8013656:	4603      	mov	r3, r0
 8013658:	2b00      	cmp	r3, #0
 801365a:	f47f af7c 	bne.w	8013556 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801365e:	4b0c      	ldr	r3, [pc, #48]	; (8013690 <xQueueGenericSend+0x1f8>)
 8013660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013664:	601a      	str	r2, [r3, #0]
 8013666:	f3bf 8f4f 	dsb	sy
 801366a:	f3bf 8f6f 	isb	sy
 801366e:	e772      	b.n	8013556 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013672:	f000 fa97 	bl	8013ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013676:	f000 fd4b 	bl	8014110 <xTaskResumeAll>
 801367a:	e76c      	b.n	8013556 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801367c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801367e:	f000 fa91 	bl	8013ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013682:	f000 fd45 	bl	8014110 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013688:	4618      	mov	r0, r3
 801368a:	3738      	adds	r7, #56	; 0x38
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	e000ed04 	.word	0xe000ed04

08013694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b08e      	sub	sp, #56	; 0x38
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
 80136a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80136a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d10a      	bne.n	80136c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80136ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b0:	f383 8811 	msr	BASEPRI, r3
 80136b4:	f3bf 8f6f 	isb	sy
 80136b8:	f3bf 8f4f 	dsb	sy
 80136bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80136be:	bf00      	nop
 80136c0:	e7fe      	b.n	80136c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d103      	bne.n	80136d0 <xQueueGenericSendFromISR+0x3c>
 80136c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <xQueueGenericSendFromISR+0x40>
 80136d0:	2301      	movs	r3, #1
 80136d2:	e000      	b.n	80136d6 <xQueueGenericSendFromISR+0x42>
 80136d4:	2300      	movs	r3, #0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d10a      	bne.n	80136f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80136da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136de:	f383 8811 	msr	BASEPRI, r3
 80136e2:	f3bf 8f6f 	isb	sy
 80136e6:	f3bf 8f4f 	dsb	sy
 80136ea:	623b      	str	r3, [r7, #32]
}
 80136ec:	bf00      	nop
 80136ee:	e7fe      	b.n	80136ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	2b02      	cmp	r3, #2
 80136f4:	d103      	bne.n	80136fe <xQueueGenericSendFromISR+0x6a>
 80136f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d101      	bne.n	8013702 <xQueueGenericSendFromISR+0x6e>
 80136fe:	2301      	movs	r3, #1
 8013700:	e000      	b.n	8013704 <xQueueGenericSendFromISR+0x70>
 8013702:	2300      	movs	r3, #0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d10a      	bne.n	801371e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370c:	f383 8811 	msr	BASEPRI, r3
 8013710:	f3bf 8f6f 	isb	sy
 8013714:	f3bf 8f4f 	dsb	sy
 8013718:	61fb      	str	r3, [r7, #28]
}
 801371a:	bf00      	nop
 801371c:	e7fe      	b.n	801371c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801371e:	f001 fd8b 	bl	8015238 <vPortValidateInterruptPriority>
	__asm volatile
 8013722:	f3ef 8211 	mrs	r2, BASEPRI
 8013726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801372a:	f383 8811 	msr	BASEPRI, r3
 801372e:	f3bf 8f6f 	isb	sy
 8013732:	f3bf 8f4f 	dsb	sy
 8013736:	61ba      	str	r2, [r7, #24]
 8013738:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801373a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801373c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013746:	429a      	cmp	r2, r3
 8013748:	d302      	bcc.n	8013750 <xQueueGenericSendFromISR+0xbc>
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	2b02      	cmp	r3, #2
 801374e:	d12c      	bne.n	80137aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801375a:	683a      	ldr	r2, [r7, #0]
 801375c:	68b9      	ldr	r1, [r7, #8]
 801375e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013760:	f000 f990 	bl	8013a84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013764:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801376c:	d112      	bne.n	8013794 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013772:	2b00      	cmp	r3, #0
 8013774:	d016      	beq.n	80137a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013778:	3324      	adds	r3, #36	; 0x24
 801377a:	4618      	mov	r0, r3
 801377c:	f000 fe9c 	bl	80144b8 <xTaskRemoveFromEventList>
 8013780:	4603      	mov	r3, r0
 8013782:	2b00      	cmp	r3, #0
 8013784:	d00e      	beq.n	80137a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d00b      	beq.n	80137a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2201      	movs	r2, #1
 8013790:	601a      	str	r2, [r3, #0]
 8013792:	e007      	b.n	80137a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013798:	3301      	adds	r3, #1
 801379a:	b2db      	uxtb	r3, r3
 801379c:	b25a      	sxtb	r2, r3
 801379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80137a4:	2301      	movs	r3, #1
 80137a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80137a8:	e001      	b.n	80137ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80137aa:	2300      	movs	r3, #0
 80137ac:	637b      	str	r3, [r7, #52]	; 0x34
 80137ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	f383 8811 	msr	BASEPRI, r3
}
 80137b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80137ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3738      	adds	r7, #56	; 0x38
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}

080137c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b08c      	sub	sp, #48	; 0x30
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	60f8      	str	r0, [r7, #12]
 80137cc:	60b9      	str	r1, [r7, #8]
 80137ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80137d0:	2300      	movs	r3, #0
 80137d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d10a      	bne.n	80137f4 <xQueueReceive+0x30>
	__asm volatile
 80137de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e2:	f383 8811 	msr	BASEPRI, r3
 80137e6:	f3bf 8f6f 	isb	sy
 80137ea:	f3bf 8f4f 	dsb	sy
 80137ee:	623b      	str	r3, [r7, #32]
}
 80137f0:	bf00      	nop
 80137f2:	e7fe      	b.n	80137f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d103      	bne.n	8013802 <xQueueReceive+0x3e>
 80137fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d101      	bne.n	8013806 <xQueueReceive+0x42>
 8013802:	2301      	movs	r3, #1
 8013804:	e000      	b.n	8013808 <xQueueReceive+0x44>
 8013806:	2300      	movs	r3, #0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d10a      	bne.n	8013822 <xQueueReceive+0x5e>
	__asm volatile
 801380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013810:	f383 8811 	msr	BASEPRI, r3
 8013814:	f3bf 8f6f 	isb	sy
 8013818:	f3bf 8f4f 	dsb	sy
 801381c:	61fb      	str	r3, [r7, #28]
}
 801381e:	bf00      	nop
 8013820:	e7fe      	b.n	8013820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013822:	f001 f805 	bl	8014830 <xTaskGetSchedulerState>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d102      	bne.n	8013832 <xQueueReceive+0x6e>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d101      	bne.n	8013836 <xQueueReceive+0x72>
 8013832:	2301      	movs	r3, #1
 8013834:	e000      	b.n	8013838 <xQueueReceive+0x74>
 8013836:	2300      	movs	r3, #0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d10a      	bne.n	8013852 <xQueueReceive+0x8e>
	__asm volatile
 801383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013840:	f383 8811 	msr	BASEPRI, r3
 8013844:	f3bf 8f6f 	isb	sy
 8013848:	f3bf 8f4f 	dsb	sy
 801384c:	61bb      	str	r3, [r7, #24]
}
 801384e:	bf00      	nop
 8013850:	e7fe      	b.n	8013850 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013852:	f001 fc0f 	bl	8015074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801385a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	2b00      	cmp	r3, #0
 8013860:	d01f      	beq.n	80138a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013862:	68b9      	ldr	r1, [r7, #8]
 8013864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013866:	f000 f977 	bl	8013b58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	1e5a      	subs	r2, r3, #1
 801386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013874:	691b      	ldr	r3, [r3, #16]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d00f      	beq.n	801389a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387c:	3310      	adds	r3, #16
 801387e:	4618      	mov	r0, r3
 8013880:	f000 fe1a 	bl	80144b8 <xTaskRemoveFromEventList>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d007      	beq.n	801389a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801388a:	4b3d      	ldr	r3, [pc, #244]	; (8013980 <xQueueReceive+0x1bc>)
 801388c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013890:	601a      	str	r2, [r3, #0]
 8013892:	f3bf 8f4f 	dsb	sy
 8013896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801389a:	f001 fc1b 	bl	80150d4 <vPortExitCritical>
				return pdPASS;
 801389e:	2301      	movs	r3, #1
 80138a0:	e069      	b.n	8013976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d103      	bne.n	80138b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80138a8:	f001 fc14 	bl	80150d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80138ac:	2300      	movs	r3, #0
 80138ae:	e062      	b.n	8013976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80138b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d106      	bne.n	80138c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80138b6:	f107 0310 	add.w	r3, r7, #16
 80138ba:	4618      	mov	r0, r3
 80138bc:	f000 fe5e 	bl	801457c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138c0:	2301      	movs	r3, #1
 80138c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138c4:	f001 fc06 	bl	80150d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138c8:	f000 fc14 	bl	80140f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138cc:	f001 fbd2 	bl	8015074 <vPortEnterCritical>
 80138d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80138d6:	b25b      	sxtb	r3, r3
 80138d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138dc:	d103      	bne.n	80138e6 <xQueueReceive+0x122>
 80138de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e0:	2200      	movs	r2, #0
 80138e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80138e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80138ec:	b25b      	sxtb	r3, r3
 80138ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f2:	d103      	bne.n	80138fc <xQueueReceive+0x138>
 80138f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f6:	2200      	movs	r2, #0
 80138f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80138fc:	f001 fbea 	bl	80150d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013900:	1d3a      	adds	r2, r7, #4
 8013902:	f107 0310 	add.w	r3, r7, #16
 8013906:	4611      	mov	r1, r2
 8013908:	4618      	mov	r0, r3
 801390a:	f000 fe4d 	bl	80145a8 <xTaskCheckForTimeOut>
 801390e:	4603      	mov	r3, r0
 8013910:	2b00      	cmp	r3, #0
 8013912:	d123      	bne.n	801395c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013916:	f000 f997 	bl	8013c48 <prvIsQueueEmpty>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d017      	beq.n	8013950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013922:	3324      	adds	r3, #36	; 0x24
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	4611      	mov	r1, r2
 8013928:	4618      	mov	r0, r3
 801392a:	f000 fda1 	bl	8014470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801392e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013930:	f000 f938 	bl	8013ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013934:	f000 fbec 	bl	8014110 <xTaskResumeAll>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d189      	bne.n	8013852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801393e:	4b10      	ldr	r3, [pc, #64]	; (8013980 <xQueueReceive+0x1bc>)
 8013940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013944:	601a      	str	r2, [r3, #0]
 8013946:	f3bf 8f4f 	dsb	sy
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	e780      	b.n	8013852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013952:	f000 f927 	bl	8013ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013956:	f000 fbdb 	bl	8014110 <xTaskResumeAll>
 801395a:	e77a      	b.n	8013852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801395c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801395e:	f000 f921 	bl	8013ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013962:	f000 fbd5 	bl	8014110 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013968:	f000 f96e 	bl	8013c48 <prvIsQueueEmpty>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	f43f af6f 	beq.w	8013852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013976:	4618      	mov	r0, r3
 8013978:	3730      	adds	r7, #48	; 0x30
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	e000ed04 	.word	0xe000ed04

08013984 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b08e      	sub	sp, #56	; 0x38
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10a      	bne.n	80139b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801399e:	f383 8811 	msr	BASEPRI, r3
 80139a2:	f3bf 8f6f 	isb	sy
 80139a6:	f3bf 8f4f 	dsb	sy
 80139aa:	623b      	str	r3, [r7, #32]
}
 80139ac:	bf00      	nop
 80139ae:	e7fe      	b.n	80139ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d103      	bne.n	80139be <xQueueReceiveFromISR+0x3a>
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d101      	bne.n	80139c2 <xQueueReceiveFromISR+0x3e>
 80139be:	2301      	movs	r3, #1
 80139c0:	e000      	b.n	80139c4 <xQueueReceiveFromISR+0x40>
 80139c2:	2300      	movs	r3, #0
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d10a      	bne.n	80139de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80139c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139cc:	f383 8811 	msr	BASEPRI, r3
 80139d0:	f3bf 8f6f 	isb	sy
 80139d4:	f3bf 8f4f 	dsb	sy
 80139d8:	61fb      	str	r3, [r7, #28]
}
 80139da:	bf00      	nop
 80139dc:	e7fe      	b.n	80139dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139de:	f001 fc2b 	bl	8015238 <vPortValidateInterruptPriority>
	__asm volatile
 80139e2:	f3ef 8211 	mrs	r2, BASEPRI
 80139e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	61ba      	str	r2, [r7, #24]
 80139f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80139fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d02f      	beq.n	8013a6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a14:	68b9      	ldr	r1, [r7, #8]
 8013a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a18:	f000 f89e 	bl	8013b58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1e:	1e5a      	subs	r2, r3, #1
 8013a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013a24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a2c:	d112      	bne.n	8013a54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a30:	691b      	ldr	r3, [r3, #16]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d016      	beq.n	8013a64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a38:	3310      	adds	r3, #16
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f000 fd3c 	bl	80144b8 <xTaskRemoveFromEventList>
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d00e      	beq.n	8013a64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d00b      	beq.n	8013a64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2201      	movs	r2, #1
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	e007      	b.n	8013a64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a58:	3301      	adds	r3, #1
 8013a5a:	b2db      	uxtb	r3, r3
 8013a5c:	b25a      	sxtb	r2, r3
 8013a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013a64:	2301      	movs	r3, #1
 8013a66:	637b      	str	r3, [r7, #52]	; 0x34
 8013a68:	e001      	b.n	8013a6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8013a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	f383 8811 	msr	BASEPRI, r3
}
 8013a78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3738      	adds	r7, #56	; 0x38
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}

08013a84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b086      	sub	sp, #24
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	60b9      	str	r1, [r7, #8]
 8013a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013a90:	2300      	movs	r3, #0
 8013a92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d10d      	bne.n	8013abe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d14d      	bne.n	8013b46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	689b      	ldr	r3, [r3, #8]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f000 fedc 	bl	801486c <xTaskPriorityDisinherit>
 8013ab4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	609a      	str	r2, [r3, #8]
 8013abc:	e043      	b.n	8013b46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d119      	bne.n	8013af8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	6858      	ldr	r0, [r3, #4]
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013acc:	461a      	mov	r2, r3
 8013ace:	68b9      	ldr	r1, [r7, #8]
 8013ad0:	f002 fb56 	bl	8016180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	685a      	ldr	r2, [r3, #4]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013adc:	441a      	add	r2, r3
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	685a      	ldr	r2, [r3, #4]
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	689b      	ldr	r3, [r3, #8]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d32b      	bcc.n	8013b46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	681a      	ldr	r2, [r3, #0]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	605a      	str	r2, [r3, #4]
 8013af6:	e026      	b.n	8013b46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	68d8      	ldr	r0, [r3, #12]
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b00:	461a      	mov	r2, r3
 8013b02:	68b9      	ldr	r1, [r7, #8]
 8013b04:	f002 fb3c 	bl	8016180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	68da      	ldr	r2, [r3, #12]
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b10:	425b      	negs	r3, r3
 8013b12:	441a      	add	r2, r3
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	68da      	ldr	r2, [r3, #12]
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d207      	bcs.n	8013b34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	689a      	ldr	r2, [r3, #8]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b2c:	425b      	negs	r3, r3
 8013b2e:	441a      	add	r2, r3
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2b02      	cmp	r3, #2
 8013b38:	d105      	bne.n	8013b46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d002      	beq.n	8013b46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	3b01      	subs	r3, #1
 8013b44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	1c5a      	adds	r2, r3, #1
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013b4e:	697b      	ldr	r3, [r7, #20]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3718      	adds	r7, #24
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d018      	beq.n	8013b9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	68da      	ldr	r2, [r3, #12]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b72:	441a      	add	r2, r3
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	68da      	ldr	r2, [r3, #12]
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d303      	bcc.n	8013b8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	68d9      	ldr	r1, [r3, #12]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b94:	461a      	mov	r2, r3
 8013b96:	6838      	ldr	r0, [r7, #0]
 8013b98:	f002 faf2 	bl	8016180 <memcpy>
	}
}
 8013b9c:	bf00      	nop
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013bac:	f001 fa62 	bl	8015074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013bb8:	e011      	b.n	8013bde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d012      	beq.n	8013be8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	3324      	adds	r3, #36	; 0x24
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f000 fc76 	bl	80144b8 <xTaskRemoveFromEventList>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d001      	beq.n	8013bd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013bd2:	f000 fd4b 	bl	801466c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013bd6:	7bfb      	ldrb	r3, [r7, #15]
 8013bd8:	3b01      	subs	r3, #1
 8013bda:	b2db      	uxtb	r3, r3
 8013bdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	dce9      	bgt.n	8013bba <prvUnlockQueue+0x16>
 8013be6:	e000      	b.n	8013bea <prvUnlockQueue+0x46>
					break;
 8013be8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	22ff      	movs	r2, #255	; 0xff
 8013bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013bf2:	f001 fa6f 	bl	80150d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013bf6:	f001 fa3d 	bl	8015074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c02:	e011      	b.n	8013c28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	691b      	ldr	r3, [r3, #16]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d012      	beq.n	8013c32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	3310      	adds	r3, #16
 8013c10:	4618      	mov	r0, r3
 8013c12:	f000 fc51 	bl	80144b8 <xTaskRemoveFromEventList>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d001      	beq.n	8013c20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013c1c:	f000 fd26 	bl	801466c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013c20:	7bbb      	ldrb	r3, [r7, #14]
 8013c22:	3b01      	subs	r3, #1
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	dce9      	bgt.n	8013c04 <prvUnlockQueue+0x60>
 8013c30:	e000      	b.n	8013c34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013c32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	22ff      	movs	r2, #255	; 0xff
 8013c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013c3c:	f001 fa4a 	bl	80150d4 <vPortExitCritical>
}
 8013c40:	bf00      	nop
 8013c42:	3710      	adds	r7, #16
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c50:	f001 fa10 	bl	8015074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d102      	bne.n	8013c62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	60fb      	str	r3, [r7, #12]
 8013c60:	e001      	b.n	8013c66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013c62:	2300      	movs	r3, #0
 8013c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013c66:	f001 fa35 	bl	80150d4 <vPortExitCritical>

	return xReturn;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3710      	adds	r7, #16
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c7c:	f001 f9fa 	bl	8015074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d102      	bne.n	8013c92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	60fb      	str	r3, [r7, #12]
 8013c90:	e001      	b.n	8013c96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013c92:	2300      	movs	r3, #0
 8013c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013c96:	f001 fa1d 	bl	80150d4 <vPortExitCritical>

	return xReturn;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3710      	adds	r7, #16
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b08e      	sub	sp, #56	; 0x38
 8013ca8:	af04      	add	r7, sp, #16
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	607a      	str	r2, [r7, #4]
 8013cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d10a      	bne.n	8013cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8013cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cbc:	f383 8811 	msr	BASEPRI, r3
 8013cc0:	f3bf 8f6f 	isb	sy
 8013cc4:	f3bf 8f4f 	dsb	sy
 8013cc8:	623b      	str	r3, [r7, #32]
}
 8013cca:	bf00      	nop
 8013ccc:	e7fe      	b.n	8013ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d10a      	bne.n	8013cea <xTaskCreateStatic+0x46>
	__asm volatile
 8013cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd8:	f383 8811 	msr	BASEPRI, r3
 8013cdc:	f3bf 8f6f 	isb	sy
 8013ce0:	f3bf 8f4f 	dsb	sy
 8013ce4:	61fb      	str	r3, [r7, #28]
}
 8013ce6:	bf00      	nop
 8013ce8:	e7fe      	b.n	8013ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013cea:	2354      	movs	r3, #84	; 0x54
 8013cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	2b54      	cmp	r3, #84	; 0x54
 8013cf2:	d00a      	beq.n	8013d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8013cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf8:	f383 8811 	msr	BASEPRI, r3
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f3bf 8f4f 	dsb	sy
 8013d04:	61bb      	str	r3, [r7, #24]
}
 8013d06:	bf00      	nop
 8013d08:	e7fe      	b.n	8013d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d01e      	beq.n	8013d50 <xTaskCreateStatic+0xac>
 8013d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d01b      	beq.n	8013d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d24:	2202      	movs	r2, #2
 8013d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	9303      	str	r3, [sp, #12]
 8013d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d30:	9302      	str	r3, [sp, #8]
 8013d32:	f107 0314 	add.w	r3, r7, #20
 8013d36:	9301      	str	r3, [sp, #4]
 8013d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	687a      	ldr	r2, [r7, #4]
 8013d40:	68b9      	ldr	r1, [r7, #8]
 8013d42:	68f8      	ldr	r0, [r7, #12]
 8013d44:	f000 f850 	bl	8013de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d4a:	f000 f8d5 	bl	8013ef8 <prvAddNewTaskToReadyList>
 8013d4e:	e001      	b.n	8013d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013d50:	2300      	movs	r3, #0
 8013d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013d54:	697b      	ldr	r3, [r7, #20]
	}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3728      	adds	r7, #40	; 0x28
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}

08013d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013d5e:	b580      	push	{r7, lr}
 8013d60:	b08c      	sub	sp, #48	; 0x30
 8013d62:	af04      	add	r7, sp, #16
 8013d64:	60f8      	str	r0, [r7, #12]
 8013d66:	60b9      	str	r1, [r7, #8]
 8013d68:	603b      	str	r3, [r7, #0]
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013d6e:	88fb      	ldrh	r3, [r7, #6]
 8013d70:	009b      	lsls	r3, r3, #2
 8013d72:	4618      	mov	r0, r3
 8013d74:	f001 faa0 	bl	80152b8 <pvPortMalloc>
 8013d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d00e      	beq.n	8013d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013d80:	2054      	movs	r0, #84	; 0x54
 8013d82:	f001 fa99 	bl	80152b8 <pvPortMalloc>
 8013d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d003      	beq.n	8013d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	697a      	ldr	r2, [r7, #20]
 8013d92:	631a      	str	r2, [r3, #48]	; 0x30
 8013d94:	e005      	b.n	8013da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013d96:	6978      	ldr	r0, [r7, #20]
 8013d98:	f001 fb52 	bl	8015440 <vPortFree>
 8013d9c:	e001      	b.n	8013da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013d9e:	2300      	movs	r3, #0
 8013da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d017      	beq.n	8013dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	2200      	movs	r2, #0
 8013dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013db0:	88fa      	ldrh	r2, [r7, #6]
 8013db2:	2300      	movs	r3, #0
 8013db4:	9303      	str	r3, [sp, #12]
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	9302      	str	r3, [sp, #8]
 8013dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dbc:	9301      	str	r3, [sp, #4]
 8013dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc0:	9300      	str	r3, [sp, #0]
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	68b9      	ldr	r1, [r7, #8]
 8013dc6:	68f8      	ldr	r0, [r7, #12]
 8013dc8:	f000 f80e 	bl	8013de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013dcc:	69f8      	ldr	r0, [r7, #28]
 8013dce:	f000 f893 	bl	8013ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	61bb      	str	r3, [r7, #24]
 8013dd6:	e002      	b.n	8013dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013dde:	69bb      	ldr	r3, [r7, #24]
	}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3720      	adds	r7, #32
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b088      	sub	sp, #32
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	60f8      	str	r0, [r7, #12]
 8013df0:	60b9      	str	r1, [r7, #8]
 8013df2:	607a      	str	r2, [r7, #4]
 8013df4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013e00:	3b01      	subs	r3, #1
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	4413      	add	r3, r2
 8013e06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013e08:	69bb      	ldr	r3, [r7, #24]
 8013e0a:	f023 0307 	bic.w	r3, r3, #7
 8013e0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013e10:	69bb      	ldr	r3, [r7, #24]
 8013e12:	f003 0307 	and.w	r3, r3, #7
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d00a      	beq.n	8013e30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1e:	f383 8811 	msr	BASEPRI, r3
 8013e22:	f3bf 8f6f 	isb	sy
 8013e26:	f3bf 8f4f 	dsb	sy
 8013e2a:	617b      	str	r3, [r7, #20]
}
 8013e2c:	bf00      	nop
 8013e2e:	e7fe      	b.n	8013e2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d01f      	beq.n	8013e76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e36:	2300      	movs	r3, #0
 8013e38:	61fb      	str	r3, [r7, #28]
 8013e3a:	e012      	b.n	8013e62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013e3c:	68ba      	ldr	r2, [r7, #8]
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	4413      	add	r3, r2
 8013e42:	7819      	ldrb	r1, [r3, #0]
 8013e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e46:	69fb      	ldr	r3, [r7, #28]
 8013e48:	4413      	add	r3, r2
 8013e4a:	3334      	adds	r3, #52	; 0x34
 8013e4c:	460a      	mov	r2, r1
 8013e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013e50:	68ba      	ldr	r2, [r7, #8]
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	4413      	add	r3, r2
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d006      	beq.n	8013e6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	61fb      	str	r3, [r7, #28]
 8013e62:	69fb      	ldr	r3, [r7, #28]
 8013e64:	2b0f      	cmp	r3, #15
 8013e66:	d9e9      	bls.n	8013e3c <prvInitialiseNewTask+0x54>
 8013e68:	e000      	b.n	8013e6c <prvInitialiseNewTask+0x84>
			{
				break;
 8013e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6e:	2200      	movs	r2, #0
 8013e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013e74:	e003      	b.n	8013e7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e78:	2200      	movs	r2, #0
 8013e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e80:	2b06      	cmp	r3, #6
 8013e82:	d901      	bls.n	8013e88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013e84:	2306      	movs	r3, #6
 8013e86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e96:	2200      	movs	r2, #0
 8013e98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e9c:	3304      	adds	r3, #4
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7ff f8d9 	bl	8013056 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea6:	3318      	adds	r3, #24
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7ff f8d4 	bl	8013056 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb6:	f1c3 0207 	rsb	r2, r3, #7
 8013eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ecc:	2200      	movs	r2, #0
 8013ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013ed2:	683a      	ldr	r2, [r7, #0]
 8013ed4:	68f9      	ldr	r1, [r7, #12]
 8013ed6:	69b8      	ldr	r0, [r7, #24]
 8013ed8:	f000 ff9e 	bl	8014e18 <pxPortInitialiseStack>
 8013edc:	4602      	mov	r2, r0
 8013ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d002      	beq.n	8013eee <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013eee:	bf00      	nop
 8013ef0:	3720      	adds	r7, #32
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
	...

08013ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013f00:	f001 f8b8 	bl	8015074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013f04:	4b2a      	ldr	r3, [pc, #168]	; (8013fb0 <prvAddNewTaskToReadyList+0xb8>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	3301      	adds	r3, #1
 8013f0a:	4a29      	ldr	r2, [pc, #164]	; (8013fb0 <prvAddNewTaskToReadyList+0xb8>)
 8013f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013f0e:	4b29      	ldr	r3, [pc, #164]	; (8013fb4 <prvAddNewTaskToReadyList+0xbc>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d109      	bne.n	8013f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013f16:	4a27      	ldr	r2, [pc, #156]	; (8013fb4 <prvAddNewTaskToReadyList+0xbc>)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013f1c:	4b24      	ldr	r3, [pc, #144]	; (8013fb0 <prvAddNewTaskToReadyList+0xb8>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d110      	bne.n	8013f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013f24:	f000 fbc6 	bl	80146b4 <prvInitialiseTaskLists>
 8013f28:	e00d      	b.n	8013f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013f2a:	4b23      	ldr	r3, [pc, #140]	; (8013fb8 <prvAddNewTaskToReadyList+0xc0>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d109      	bne.n	8013f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013f32:	4b20      	ldr	r3, [pc, #128]	; (8013fb4 <prvAddNewTaskToReadyList+0xbc>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d802      	bhi.n	8013f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013f40:	4a1c      	ldr	r2, [pc, #112]	; (8013fb4 <prvAddNewTaskToReadyList+0xbc>)
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013f46:	4b1d      	ldr	r3, [pc, #116]	; (8013fbc <prvAddNewTaskToReadyList+0xc4>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	4a1b      	ldr	r2, [pc, #108]	; (8013fbc <prvAddNewTaskToReadyList+0xc4>)
 8013f4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f54:	2201      	movs	r2, #1
 8013f56:	409a      	lsls	r2, r3
 8013f58:	4b19      	ldr	r3, [pc, #100]	; (8013fc0 <prvAddNewTaskToReadyList+0xc8>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	4313      	orrs	r3, r2
 8013f5e:	4a18      	ldr	r2, [pc, #96]	; (8013fc0 <prvAddNewTaskToReadyList+0xc8>)
 8013f60:	6013      	str	r3, [r2, #0]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f66:	4613      	mov	r3, r2
 8013f68:	009b      	lsls	r3, r3, #2
 8013f6a:	4413      	add	r3, r2
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	4a15      	ldr	r2, [pc, #84]	; (8013fc4 <prvAddNewTaskToReadyList+0xcc>)
 8013f70:	441a      	add	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	3304      	adds	r3, #4
 8013f76:	4619      	mov	r1, r3
 8013f78:	4610      	mov	r0, r2
 8013f7a:	f7ff f879 	bl	8013070 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013f7e:	f001 f8a9 	bl	80150d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013f82:	4b0d      	ldr	r3, [pc, #52]	; (8013fb8 <prvAddNewTaskToReadyList+0xc0>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d00e      	beq.n	8013fa8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013f8a:	4b0a      	ldr	r3, [pc, #40]	; (8013fb4 <prvAddNewTaskToReadyList+0xbc>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d207      	bcs.n	8013fa8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013f98:	4b0b      	ldr	r3, [pc, #44]	; (8013fc8 <prvAddNewTaskToReadyList+0xd0>)
 8013f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f9e:	601a      	str	r2, [r3, #0]
 8013fa0:	f3bf 8f4f 	dsb	sy
 8013fa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013fa8:	bf00      	nop
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	20004970 	.word	0x20004970
 8013fb4:	20004870 	.word	0x20004870
 8013fb8:	2000497c 	.word	0x2000497c
 8013fbc:	2000498c 	.word	0x2000498c
 8013fc0:	20004978 	.word	0x20004978
 8013fc4:	20004874 	.word	0x20004874
 8013fc8:	e000ed04 	.word	0xe000ed04

08013fcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b084      	sub	sp, #16
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d017      	beq.n	801400e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013fde:	4b13      	ldr	r3, [pc, #76]	; (801402c <vTaskDelay+0x60>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00a      	beq.n	8013ffc <vTaskDelay+0x30>
	__asm volatile
 8013fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fea:	f383 8811 	msr	BASEPRI, r3
 8013fee:	f3bf 8f6f 	isb	sy
 8013ff2:	f3bf 8f4f 	dsb	sy
 8013ff6:	60bb      	str	r3, [r7, #8]
}
 8013ff8:	bf00      	nop
 8013ffa:	e7fe      	b.n	8013ffa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013ffc:	f000 f87a 	bl	80140f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014000:	2100      	movs	r1, #0
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 fea2 	bl	8014d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014008:	f000 f882 	bl	8014110 <xTaskResumeAll>
 801400c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d107      	bne.n	8014024 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014014:	4b06      	ldr	r3, [pc, #24]	; (8014030 <vTaskDelay+0x64>)
 8014016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801401a:	601a      	str	r2, [r3, #0]
 801401c:	f3bf 8f4f 	dsb	sy
 8014020:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014024:	bf00      	nop
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	20004998 	.word	0x20004998
 8014030:	e000ed04 	.word	0xe000ed04

08014034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b08a      	sub	sp, #40	; 0x28
 8014038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801403a:	2300      	movs	r3, #0
 801403c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801403e:	2300      	movs	r3, #0
 8014040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014042:	463a      	mov	r2, r7
 8014044:	1d39      	adds	r1, r7, #4
 8014046:	f107 0308 	add.w	r3, r7, #8
 801404a:	4618      	mov	r0, r3
 801404c:	f7ee fb7c 	bl	8002748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014050:	6839      	ldr	r1, [r7, #0]
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	68ba      	ldr	r2, [r7, #8]
 8014056:	9202      	str	r2, [sp, #8]
 8014058:	9301      	str	r3, [sp, #4]
 801405a:	2300      	movs	r3, #0
 801405c:	9300      	str	r3, [sp, #0]
 801405e:	2300      	movs	r3, #0
 8014060:	460a      	mov	r2, r1
 8014062:	491e      	ldr	r1, [pc, #120]	; (80140dc <vTaskStartScheduler+0xa8>)
 8014064:	481e      	ldr	r0, [pc, #120]	; (80140e0 <vTaskStartScheduler+0xac>)
 8014066:	f7ff fe1d 	bl	8013ca4 <xTaskCreateStatic>
 801406a:	4603      	mov	r3, r0
 801406c:	4a1d      	ldr	r2, [pc, #116]	; (80140e4 <vTaskStartScheduler+0xb0>)
 801406e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014070:	4b1c      	ldr	r3, [pc, #112]	; (80140e4 <vTaskStartScheduler+0xb0>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d002      	beq.n	801407e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014078:	2301      	movs	r3, #1
 801407a:	617b      	str	r3, [r7, #20]
 801407c:	e001      	b.n	8014082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801407e:	2300      	movs	r3, #0
 8014080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	2b01      	cmp	r3, #1
 8014086:	d116      	bne.n	80140b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8014088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408c:	f383 8811 	msr	BASEPRI, r3
 8014090:	f3bf 8f6f 	isb	sy
 8014094:	f3bf 8f4f 	dsb	sy
 8014098:	613b      	str	r3, [r7, #16]
}
 801409a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801409c:	4b12      	ldr	r3, [pc, #72]	; (80140e8 <vTaskStartScheduler+0xb4>)
 801409e:	f04f 32ff 	mov.w	r2, #4294967295
 80140a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80140a4:	4b11      	ldr	r3, [pc, #68]	; (80140ec <vTaskStartScheduler+0xb8>)
 80140a6:	2201      	movs	r2, #1
 80140a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80140aa:	4b11      	ldr	r3, [pc, #68]	; (80140f0 <vTaskStartScheduler+0xbc>)
 80140ac:	2200      	movs	r2, #0
 80140ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80140b0:	f000 ff3e 	bl	8014f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80140b4:	e00e      	b.n	80140d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140bc:	d10a      	bne.n	80140d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80140be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	60fb      	str	r3, [r7, #12]
}
 80140d0:	bf00      	nop
 80140d2:	e7fe      	b.n	80140d2 <vTaskStartScheduler+0x9e>
}
 80140d4:	bf00      	nop
 80140d6:	3718      	adds	r7, #24
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	0801c69c 	.word	0x0801c69c
 80140e0:	08014685 	.word	0x08014685
 80140e4:	20004994 	.word	0x20004994
 80140e8:	20004990 	.word	0x20004990
 80140ec:	2000497c 	.word	0x2000497c
 80140f0:	20004974 	.word	0x20004974

080140f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80140f4:	b480      	push	{r7}
 80140f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80140f8:	4b04      	ldr	r3, [pc, #16]	; (801410c <vTaskSuspendAll+0x18>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	3301      	adds	r3, #1
 80140fe:	4a03      	ldr	r2, [pc, #12]	; (801410c <vTaskSuspendAll+0x18>)
 8014100:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014102:	bf00      	nop
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr
 801410c:	20004998 	.word	0x20004998

08014110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b084      	sub	sp, #16
 8014114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014116:	2300      	movs	r3, #0
 8014118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801411a:	2300      	movs	r3, #0
 801411c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801411e:	4b41      	ldr	r3, [pc, #260]	; (8014224 <xTaskResumeAll+0x114>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d10a      	bne.n	801413c <xTaskResumeAll+0x2c>
	__asm volatile
 8014126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412a:	f383 8811 	msr	BASEPRI, r3
 801412e:	f3bf 8f6f 	isb	sy
 8014132:	f3bf 8f4f 	dsb	sy
 8014136:	603b      	str	r3, [r7, #0]
}
 8014138:	bf00      	nop
 801413a:	e7fe      	b.n	801413a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801413c:	f000 ff9a 	bl	8015074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014140:	4b38      	ldr	r3, [pc, #224]	; (8014224 <xTaskResumeAll+0x114>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	3b01      	subs	r3, #1
 8014146:	4a37      	ldr	r2, [pc, #220]	; (8014224 <xTaskResumeAll+0x114>)
 8014148:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801414a:	4b36      	ldr	r3, [pc, #216]	; (8014224 <xTaskResumeAll+0x114>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d161      	bne.n	8014216 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014152:	4b35      	ldr	r3, [pc, #212]	; (8014228 <xTaskResumeAll+0x118>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d05d      	beq.n	8014216 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801415a:	e02e      	b.n	80141ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801415c:	4b33      	ldr	r3, [pc, #204]	; (801422c <xTaskResumeAll+0x11c>)
 801415e:	68db      	ldr	r3, [r3, #12]
 8014160:	68db      	ldr	r3, [r3, #12]
 8014162:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	3318      	adds	r3, #24
 8014168:	4618      	mov	r0, r3
 801416a:	f7fe ffde 	bl	801312a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	3304      	adds	r3, #4
 8014172:	4618      	mov	r0, r3
 8014174:	f7fe ffd9 	bl	801312a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801417c:	2201      	movs	r2, #1
 801417e:	409a      	lsls	r2, r3
 8014180:	4b2b      	ldr	r3, [pc, #172]	; (8014230 <xTaskResumeAll+0x120>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	4313      	orrs	r3, r2
 8014186:	4a2a      	ldr	r2, [pc, #168]	; (8014230 <xTaskResumeAll+0x120>)
 8014188:	6013      	str	r3, [r2, #0]
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801418e:	4613      	mov	r3, r2
 8014190:	009b      	lsls	r3, r3, #2
 8014192:	4413      	add	r3, r2
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	4a27      	ldr	r2, [pc, #156]	; (8014234 <xTaskResumeAll+0x124>)
 8014198:	441a      	add	r2, r3
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	3304      	adds	r3, #4
 801419e:	4619      	mov	r1, r3
 80141a0:	4610      	mov	r0, r2
 80141a2:	f7fe ff65 	bl	8013070 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141aa:	4b23      	ldr	r3, [pc, #140]	; (8014238 <xTaskResumeAll+0x128>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d302      	bcc.n	80141ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80141b4:	4b21      	ldr	r3, [pc, #132]	; (801423c <xTaskResumeAll+0x12c>)
 80141b6:	2201      	movs	r2, #1
 80141b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80141ba:	4b1c      	ldr	r3, [pc, #112]	; (801422c <xTaskResumeAll+0x11c>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d1cc      	bne.n	801415c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d001      	beq.n	80141cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80141c8:	f000 fb12 	bl	80147f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80141cc:	4b1c      	ldr	r3, [pc, #112]	; (8014240 <xTaskResumeAll+0x130>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d010      	beq.n	80141fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80141d8:	f000 f836 	bl	8014248 <xTaskIncrementTick>
 80141dc:	4603      	mov	r3, r0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d002      	beq.n	80141e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80141e2:	4b16      	ldr	r3, [pc, #88]	; (801423c <xTaskResumeAll+0x12c>)
 80141e4:	2201      	movs	r2, #1
 80141e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	3b01      	subs	r3, #1
 80141ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d1f1      	bne.n	80141d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80141f4:	4b12      	ldr	r3, [pc, #72]	; (8014240 <xTaskResumeAll+0x130>)
 80141f6:	2200      	movs	r2, #0
 80141f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80141fa:	4b10      	ldr	r3, [pc, #64]	; (801423c <xTaskResumeAll+0x12c>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d009      	beq.n	8014216 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014202:	2301      	movs	r3, #1
 8014204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014206:	4b0f      	ldr	r3, [pc, #60]	; (8014244 <xTaskResumeAll+0x134>)
 8014208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801420c:	601a      	str	r2, [r3, #0]
 801420e:	f3bf 8f4f 	dsb	sy
 8014212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014216:	f000 ff5d 	bl	80150d4 <vPortExitCritical>

	return xAlreadyYielded;
 801421a:	68bb      	ldr	r3, [r7, #8]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	20004998 	.word	0x20004998
 8014228:	20004970 	.word	0x20004970
 801422c:	20004930 	.word	0x20004930
 8014230:	20004978 	.word	0x20004978
 8014234:	20004874 	.word	0x20004874
 8014238:	20004870 	.word	0x20004870
 801423c:	20004984 	.word	0x20004984
 8014240:	20004980 	.word	0x20004980
 8014244:	e000ed04 	.word	0xe000ed04

08014248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b086      	sub	sp, #24
 801424c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801424e:	2300      	movs	r3, #0
 8014250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014252:	4b4e      	ldr	r3, [pc, #312]	; (801438c <xTaskIncrementTick+0x144>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	f040 8088 	bne.w	801436c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801425c:	4b4c      	ldr	r3, [pc, #304]	; (8014390 <xTaskIncrementTick+0x148>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	3301      	adds	r3, #1
 8014262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014264:	4a4a      	ldr	r2, [pc, #296]	; (8014390 <xTaskIncrementTick+0x148>)
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d120      	bne.n	80142b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014270:	4b48      	ldr	r3, [pc, #288]	; (8014394 <xTaskIncrementTick+0x14c>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00a      	beq.n	8014290 <xTaskIncrementTick+0x48>
	__asm volatile
 801427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801427e:	f383 8811 	msr	BASEPRI, r3
 8014282:	f3bf 8f6f 	isb	sy
 8014286:	f3bf 8f4f 	dsb	sy
 801428a:	603b      	str	r3, [r7, #0]
}
 801428c:	bf00      	nop
 801428e:	e7fe      	b.n	801428e <xTaskIncrementTick+0x46>
 8014290:	4b40      	ldr	r3, [pc, #256]	; (8014394 <xTaskIncrementTick+0x14c>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	60fb      	str	r3, [r7, #12]
 8014296:	4b40      	ldr	r3, [pc, #256]	; (8014398 <xTaskIncrementTick+0x150>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4a3e      	ldr	r2, [pc, #248]	; (8014394 <xTaskIncrementTick+0x14c>)
 801429c:	6013      	str	r3, [r2, #0]
 801429e:	4a3e      	ldr	r2, [pc, #248]	; (8014398 <xTaskIncrementTick+0x150>)
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	6013      	str	r3, [r2, #0]
 80142a4:	4b3d      	ldr	r3, [pc, #244]	; (801439c <xTaskIncrementTick+0x154>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	3301      	adds	r3, #1
 80142aa:	4a3c      	ldr	r2, [pc, #240]	; (801439c <xTaskIncrementTick+0x154>)
 80142ac:	6013      	str	r3, [r2, #0]
 80142ae:	f000 fa9f 	bl	80147f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80142b2:	4b3b      	ldr	r3, [pc, #236]	; (80143a0 <xTaskIncrementTick+0x158>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	693a      	ldr	r2, [r7, #16]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d348      	bcc.n	801434e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80142bc:	4b35      	ldr	r3, [pc, #212]	; (8014394 <xTaskIncrementTick+0x14c>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d104      	bne.n	80142d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142c6:	4b36      	ldr	r3, [pc, #216]	; (80143a0 <xTaskIncrementTick+0x158>)
 80142c8:	f04f 32ff 	mov.w	r2, #4294967295
 80142cc:	601a      	str	r2, [r3, #0]
					break;
 80142ce:	e03e      	b.n	801434e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142d0:	4b30      	ldr	r3, [pc, #192]	; (8014394 <xTaskIncrementTick+0x14c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80142e0:	693a      	ldr	r2, [r7, #16]
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d203      	bcs.n	80142f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80142e8:	4a2d      	ldr	r2, [pc, #180]	; (80143a0 <xTaskIncrementTick+0x158>)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80142ee:	e02e      	b.n	801434e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	3304      	adds	r3, #4
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fe ff18 	bl	801312a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d004      	beq.n	801430c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	3318      	adds	r3, #24
 8014306:	4618      	mov	r0, r3
 8014308:	f7fe ff0f 	bl	801312a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014310:	2201      	movs	r2, #1
 8014312:	409a      	lsls	r2, r3
 8014314:	4b23      	ldr	r3, [pc, #140]	; (80143a4 <xTaskIncrementTick+0x15c>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4313      	orrs	r3, r2
 801431a:	4a22      	ldr	r2, [pc, #136]	; (80143a4 <xTaskIncrementTick+0x15c>)
 801431c:	6013      	str	r3, [r2, #0]
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014322:	4613      	mov	r3, r2
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	4413      	add	r3, r2
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	4a1f      	ldr	r2, [pc, #124]	; (80143a8 <xTaskIncrementTick+0x160>)
 801432c:	441a      	add	r2, r3
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	3304      	adds	r3, #4
 8014332:	4619      	mov	r1, r3
 8014334:	4610      	mov	r0, r2
 8014336:	f7fe fe9b 	bl	8013070 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801433e:	4b1b      	ldr	r3, [pc, #108]	; (80143ac <xTaskIncrementTick+0x164>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014344:	429a      	cmp	r2, r3
 8014346:	d3b9      	bcc.n	80142bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014348:	2301      	movs	r3, #1
 801434a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801434c:	e7b6      	b.n	80142bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801434e:	4b17      	ldr	r3, [pc, #92]	; (80143ac <xTaskIncrementTick+0x164>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014354:	4914      	ldr	r1, [pc, #80]	; (80143a8 <xTaskIncrementTick+0x160>)
 8014356:	4613      	mov	r3, r2
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	4413      	add	r3, r2
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	440b      	add	r3, r1
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2b01      	cmp	r3, #1
 8014364:	d907      	bls.n	8014376 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8014366:	2301      	movs	r3, #1
 8014368:	617b      	str	r3, [r7, #20]
 801436a:	e004      	b.n	8014376 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801436c:	4b10      	ldr	r3, [pc, #64]	; (80143b0 <xTaskIncrementTick+0x168>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	3301      	adds	r3, #1
 8014372:	4a0f      	ldr	r2, [pc, #60]	; (80143b0 <xTaskIncrementTick+0x168>)
 8014374:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014376:	4b0f      	ldr	r3, [pc, #60]	; (80143b4 <xTaskIncrementTick+0x16c>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d001      	beq.n	8014382 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801437e:	2301      	movs	r3, #1
 8014380:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014382:	697b      	ldr	r3, [r7, #20]
}
 8014384:	4618      	mov	r0, r3
 8014386:	3718      	adds	r7, #24
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	20004998 	.word	0x20004998
 8014390:	20004974 	.word	0x20004974
 8014394:	20004928 	.word	0x20004928
 8014398:	2000492c 	.word	0x2000492c
 801439c:	20004988 	.word	0x20004988
 80143a0:	20004990 	.word	0x20004990
 80143a4:	20004978 	.word	0x20004978
 80143a8:	20004874 	.word	0x20004874
 80143ac:	20004870 	.word	0x20004870
 80143b0:	20004980 	.word	0x20004980
 80143b4:	20004984 	.word	0x20004984

080143b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80143b8:	b480      	push	{r7}
 80143ba:	b087      	sub	sp, #28
 80143bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80143be:	4b27      	ldr	r3, [pc, #156]	; (801445c <vTaskSwitchContext+0xa4>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d003      	beq.n	80143ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80143c6:	4b26      	ldr	r3, [pc, #152]	; (8014460 <vTaskSwitchContext+0xa8>)
 80143c8:	2201      	movs	r2, #1
 80143ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80143cc:	e03f      	b.n	801444e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80143ce:	4b24      	ldr	r3, [pc, #144]	; (8014460 <vTaskSwitchContext+0xa8>)
 80143d0:	2200      	movs	r2, #0
 80143d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143d4:	4b23      	ldr	r3, [pc, #140]	; (8014464 <vTaskSwitchContext+0xac>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	fab3 f383 	clz	r3, r3
 80143e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80143e2:	7afb      	ldrb	r3, [r7, #11]
 80143e4:	f1c3 031f 	rsb	r3, r3, #31
 80143e8:	617b      	str	r3, [r7, #20]
 80143ea:	491f      	ldr	r1, [pc, #124]	; (8014468 <vTaskSwitchContext+0xb0>)
 80143ec:	697a      	ldr	r2, [r7, #20]
 80143ee:	4613      	mov	r3, r2
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	4413      	add	r3, r2
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	440b      	add	r3, r1
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d10a      	bne.n	8014414 <vTaskSwitchContext+0x5c>
	__asm volatile
 80143fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014402:	f383 8811 	msr	BASEPRI, r3
 8014406:	f3bf 8f6f 	isb	sy
 801440a:	f3bf 8f4f 	dsb	sy
 801440e:	607b      	str	r3, [r7, #4]
}
 8014410:	bf00      	nop
 8014412:	e7fe      	b.n	8014412 <vTaskSwitchContext+0x5a>
 8014414:	697a      	ldr	r2, [r7, #20]
 8014416:	4613      	mov	r3, r2
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	4413      	add	r3, r2
 801441c:	009b      	lsls	r3, r3, #2
 801441e:	4a12      	ldr	r2, [pc, #72]	; (8014468 <vTaskSwitchContext+0xb0>)
 8014420:	4413      	add	r3, r2
 8014422:	613b      	str	r3, [r7, #16]
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	685a      	ldr	r2, [r3, #4]
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	605a      	str	r2, [r3, #4]
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	685a      	ldr	r2, [r3, #4]
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	3308      	adds	r3, #8
 8014436:	429a      	cmp	r2, r3
 8014438:	d104      	bne.n	8014444 <vTaskSwitchContext+0x8c>
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	685a      	ldr	r2, [r3, #4]
 8014440:	693b      	ldr	r3, [r7, #16]
 8014442:	605a      	str	r2, [r3, #4]
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	4a08      	ldr	r2, [pc, #32]	; (801446c <vTaskSwitchContext+0xb4>)
 801444c:	6013      	str	r3, [r2, #0]
}
 801444e:	bf00      	nop
 8014450:	371c      	adds	r7, #28
 8014452:	46bd      	mov	sp, r7
 8014454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014458:	4770      	bx	lr
 801445a:	bf00      	nop
 801445c:	20004998 	.word	0x20004998
 8014460:	20004984 	.word	0x20004984
 8014464:	20004978 	.word	0x20004978
 8014468:	20004874 	.word	0x20004874
 801446c:	20004870 	.word	0x20004870

08014470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10a      	bne.n	8014496 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014484:	f383 8811 	msr	BASEPRI, r3
 8014488:	f3bf 8f6f 	isb	sy
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	60fb      	str	r3, [r7, #12]
}
 8014492:	bf00      	nop
 8014494:	e7fe      	b.n	8014494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014496:	4b07      	ldr	r3, [pc, #28]	; (80144b4 <vTaskPlaceOnEventList+0x44>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	3318      	adds	r3, #24
 801449c:	4619      	mov	r1, r3
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f7fe fe0a 	bl	80130b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80144a4:	2101      	movs	r1, #1
 80144a6:	6838      	ldr	r0, [r7, #0]
 80144a8:	f000 fc50 	bl	8014d4c <prvAddCurrentTaskToDelayedList>
}
 80144ac:	bf00      	nop
 80144ae:	3710      	adds	r7, #16
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	20004870 	.word	0x20004870

080144b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	68db      	ldr	r3, [r3, #12]
 80144c4:	68db      	ldr	r3, [r3, #12]
 80144c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10a      	bne.n	80144e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80144ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d2:	f383 8811 	msr	BASEPRI, r3
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	60fb      	str	r3, [r7, #12]
}
 80144e0:	bf00      	nop
 80144e2:	e7fe      	b.n	80144e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	3318      	adds	r3, #24
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fe fe1e 	bl	801312a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144ee:	4b1d      	ldr	r3, [pc, #116]	; (8014564 <xTaskRemoveFromEventList+0xac>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d11c      	bne.n	8014530 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	3304      	adds	r3, #4
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fe fe15 	bl	801312a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014504:	2201      	movs	r2, #1
 8014506:	409a      	lsls	r2, r3
 8014508:	4b17      	ldr	r3, [pc, #92]	; (8014568 <xTaskRemoveFromEventList+0xb0>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4313      	orrs	r3, r2
 801450e:	4a16      	ldr	r2, [pc, #88]	; (8014568 <xTaskRemoveFromEventList+0xb0>)
 8014510:	6013      	str	r3, [r2, #0]
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014516:	4613      	mov	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4413      	add	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	4a13      	ldr	r2, [pc, #76]	; (801456c <xTaskRemoveFromEventList+0xb4>)
 8014520:	441a      	add	r2, r3
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	3304      	adds	r3, #4
 8014526:	4619      	mov	r1, r3
 8014528:	4610      	mov	r0, r2
 801452a:	f7fe fda1 	bl	8013070 <vListInsertEnd>
 801452e:	e005      	b.n	801453c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	3318      	adds	r3, #24
 8014534:	4619      	mov	r1, r3
 8014536:	480e      	ldr	r0, [pc, #56]	; (8014570 <xTaskRemoveFromEventList+0xb8>)
 8014538:	f7fe fd9a 	bl	8013070 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014540:	4b0c      	ldr	r3, [pc, #48]	; (8014574 <xTaskRemoveFromEventList+0xbc>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014546:	429a      	cmp	r2, r3
 8014548:	d905      	bls.n	8014556 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801454a:	2301      	movs	r3, #1
 801454c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801454e:	4b0a      	ldr	r3, [pc, #40]	; (8014578 <xTaskRemoveFromEventList+0xc0>)
 8014550:	2201      	movs	r2, #1
 8014552:	601a      	str	r2, [r3, #0]
 8014554:	e001      	b.n	801455a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8014556:	2300      	movs	r3, #0
 8014558:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801455a:	697b      	ldr	r3, [r7, #20]
}
 801455c:	4618      	mov	r0, r3
 801455e:	3718      	adds	r7, #24
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}
 8014564:	20004998 	.word	0x20004998
 8014568:	20004978 	.word	0x20004978
 801456c:	20004874 	.word	0x20004874
 8014570:	20004930 	.word	0x20004930
 8014574:	20004870 	.word	0x20004870
 8014578:	20004984 	.word	0x20004984

0801457c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801457c:	b480      	push	{r7}
 801457e:	b083      	sub	sp, #12
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014584:	4b06      	ldr	r3, [pc, #24]	; (80145a0 <vTaskInternalSetTimeOutState+0x24>)
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801458c:	4b05      	ldr	r3, [pc, #20]	; (80145a4 <vTaskInternalSetTimeOutState+0x28>)
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	605a      	str	r2, [r3, #4]
}
 8014594:	bf00      	nop
 8014596:	370c      	adds	r7, #12
 8014598:	46bd      	mov	sp, r7
 801459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459e:	4770      	bx	lr
 80145a0:	20004988 	.word	0x20004988
 80145a4:	20004974 	.word	0x20004974

080145a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b088      	sub	sp, #32
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d10a      	bne.n	80145ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80145b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145bc:	f383 8811 	msr	BASEPRI, r3
 80145c0:	f3bf 8f6f 	isb	sy
 80145c4:	f3bf 8f4f 	dsb	sy
 80145c8:	613b      	str	r3, [r7, #16]
}
 80145ca:	bf00      	nop
 80145cc:	e7fe      	b.n	80145cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d10a      	bne.n	80145ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80145d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145d8:	f383 8811 	msr	BASEPRI, r3
 80145dc:	f3bf 8f6f 	isb	sy
 80145e0:	f3bf 8f4f 	dsb	sy
 80145e4:	60fb      	str	r3, [r7, #12]
}
 80145e6:	bf00      	nop
 80145e8:	e7fe      	b.n	80145e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80145ea:	f000 fd43 	bl	8015074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80145ee:	4b1d      	ldr	r3, [pc, #116]	; (8014664 <xTaskCheckForTimeOut+0xbc>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	69ba      	ldr	r2, [r7, #24]
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014606:	d102      	bne.n	801460e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014608:	2300      	movs	r3, #0
 801460a:	61fb      	str	r3, [r7, #28]
 801460c:	e023      	b.n	8014656 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681a      	ldr	r2, [r3, #0]
 8014612:	4b15      	ldr	r3, [pc, #84]	; (8014668 <xTaskCheckForTimeOut+0xc0>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	429a      	cmp	r2, r3
 8014618:	d007      	beq.n	801462a <xTaskCheckForTimeOut+0x82>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	69ba      	ldr	r2, [r7, #24]
 8014620:	429a      	cmp	r2, r3
 8014622:	d302      	bcc.n	801462a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014624:	2301      	movs	r3, #1
 8014626:	61fb      	str	r3, [r7, #28]
 8014628:	e015      	b.n	8014656 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	697a      	ldr	r2, [r7, #20]
 8014630:	429a      	cmp	r2, r3
 8014632:	d20b      	bcs.n	801464c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	1ad2      	subs	r2, r2, r3
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f7ff ff9b 	bl	801457c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014646:	2300      	movs	r3, #0
 8014648:	61fb      	str	r3, [r7, #28]
 801464a:	e004      	b.n	8014656 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	2200      	movs	r2, #0
 8014650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014652:	2301      	movs	r3, #1
 8014654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014656:	f000 fd3d 	bl	80150d4 <vPortExitCritical>

	return xReturn;
 801465a:	69fb      	ldr	r3, [r7, #28]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3720      	adds	r7, #32
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	20004974 	.word	0x20004974
 8014668:	20004988 	.word	0x20004988

0801466c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801466c:	b480      	push	{r7}
 801466e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014670:	4b03      	ldr	r3, [pc, #12]	; (8014680 <vTaskMissedYield+0x14>)
 8014672:	2201      	movs	r2, #1
 8014674:	601a      	str	r2, [r3, #0]
}
 8014676:	bf00      	nop
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr
 8014680:	20004984 	.word	0x20004984

08014684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801468c:	f000 f852 	bl	8014734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014690:	4b06      	ldr	r3, [pc, #24]	; (80146ac <prvIdleTask+0x28>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b01      	cmp	r3, #1
 8014696:	d9f9      	bls.n	801468c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014698:	4b05      	ldr	r3, [pc, #20]	; (80146b0 <prvIdleTask+0x2c>)
 801469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801469e:	601a      	str	r2, [r3, #0]
 80146a0:	f3bf 8f4f 	dsb	sy
 80146a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80146a8:	e7f0      	b.n	801468c <prvIdleTask+0x8>
 80146aa:	bf00      	nop
 80146ac:	20004874 	.word	0x20004874
 80146b0:	e000ed04 	.word	0xe000ed04

080146b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80146ba:	2300      	movs	r3, #0
 80146bc:	607b      	str	r3, [r7, #4]
 80146be:	e00c      	b.n	80146da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80146c0:	687a      	ldr	r2, [r7, #4]
 80146c2:	4613      	mov	r3, r2
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	4413      	add	r3, r2
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4a12      	ldr	r2, [pc, #72]	; (8014714 <prvInitialiseTaskLists+0x60>)
 80146cc:	4413      	add	r3, r2
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7fe fca1 	bl	8013016 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	3301      	adds	r3, #1
 80146d8:	607b      	str	r3, [r7, #4]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	2b06      	cmp	r3, #6
 80146de:	d9ef      	bls.n	80146c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80146e0:	480d      	ldr	r0, [pc, #52]	; (8014718 <prvInitialiseTaskLists+0x64>)
 80146e2:	f7fe fc98 	bl	8013016 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80146e6:	480d      	ldr	r0, [pc, #52]	; (801471c <prvInitialiseTaskLists+0x68>)
 80146e8:	f7fe fc95 	bl	8013016 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80146ec:	480c      	ldr	r0, [pc, #48]	; (8014720 <prvInitialiseTaskLists+0x6c>)
 80146ee:	f7fe fc92 	bl	8013016 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80146f2:	480c      	ldr	r0, [pc, #48]	; (8014724 <prvInitialiseTaskLists+0x70>)
 80146f4:	f7fe fc8f 	bl	8013016 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80146f8:	480b      	ldr	r0, [pc, #44]	; (8014728 <prvInitialiseTaskLists+0x74>)
 80146fa:	f7fe fc8c 	bl	8013016 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80146fe:	4b0b      	ldr	r3, [pc, #44]	; (801472c <prvInitialiseTaskLists+0x78>)
 8014700:	4a05      	ldr	r2, [pc, #20]	; (8014718 <prvInitialiseTaskLists+0x64>)
 8014702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014704:	4b0a      	ldr	r3, [pc, #40]	; (8014730 <prvInitialiseTaskLists+0x7c>)
 8014706:	4a05      	ldr	r2, [pc, #20]	; (801471c <prvInitialiseTaskLists+0x68>)
 8014708:	601a      	str	r2, [r3, #0]
}
 801470a:	bf00      	nop
 801470c:	3708      	adds	r7, #8
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}
 8014712:	bf00      	nop
 8014714:	20004874 	.word	0x20004874
 8014718:	20004900 	.word	0x20004900
 801471c:	20004914 	.word	0x20004914
 8014720:	20004930 	.word	0x20004930
 8014724:	20004944 	.word	0x20004944
 8014728:	2000495c 	.word	0x2000495c
 801472c:	20004928 	.word	0x20004928
 8014730:	2000492c 	.word	0x2000492c

08014734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801473a:	e019      	b.n	8014770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801473c:	f000 fc9a 	bl	8015074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014740:	4b10      	ldr	r3, [pc, #64]	; (8014784 <prvCheckTasksWaitingTermination+0x50>)
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	3304      	adds	r3, #4
 801474c:	4618      	mov	r0, r3
 801474e:	f7fe fcec 	bl	801312a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014752:	4b0d      	ldr	r3, [pc, #52]	; (8014788 <prvCheckTasksWaitingTermination+0x54>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	3b01      	subs	r3, #1
 8014758:	4a0b      	ldr	r2, [pc, #44]	; (8014788 <prvCheckTasksWaitingTermination+0x54>)
 801475a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801475c:	4b0b      	ldr	r3, [pc, #44]	; (801478c <prvCheckTasksWaitingTermination+0x58>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	3b01      	subs	r3, #1
 8014762:	4a0a      	ldr	r2, [pc, #40]	; (801478c <prvCheckTasksWaitingTermination+0x58>)
 8014764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014766:	f000 fcb5 	bl	80150d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 f810 	bl	8014790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014770:	4b06      	ldr	r3, [pc, #24]	; (801478c <prvCheckTasksWaitingTermination+0x58>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d1e1      	bne.n	801473c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014778:	bf00      	nop
 801477a:	bf00      	nop
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	20004944 	.word	0x20004944
 8014788:	20004970 	.word	0x20004970
 801478c:	20004958 	.word	0x20004958

08014790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014790:	b580      	push	{r7, lr}
 8014792:	b084      	sub	sp, #16
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d108      	bne.n	80147b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147a6:	4618      	mov	r0, r3
 80147a8:	f000 fe4a 	bl	8015440 <vPortFree>
				vPortFree( pxTCB );
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f000 fe47 	bl	8015440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80147b2:	e018      	b.n	80147e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d103      	bne.n	80147c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 fe3e 	bl	8015440 <vPortFree>
	}
 80147c4:	e00f      	b.n	80147e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80147cc:	2b02      	cmp	r3, #2
 80147ce:	d00a      	beq.n	80147e6 <prvDeleteTCB+0x56>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d4:	f383 8811 	msr	BASEPRI, r3
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	60fb      	str	r3, [r7, #12]
}
 80147e2:	bf00      	nop
 80147e4:	e7fe      	b.n	80147e4 <prvDeleteTCB+0x54>
	}
 80147e6:	bf00      	nop
 80147e8:	3710      	adds	r7, #16
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
	...

080147f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80147f0:	b480      	push	{r7}
 80147f2:	b083      	sub	sp, #12
 80147f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147f6:	4b0c      	ldr	r3, [pc, #48]	; (8014828 <prvResetNextTaskUnblockTime+0x38>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d104      	bne.n	801480a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014800:	4b0a      	ldr	r3, [pc, #40]	; (801482c <prvResetNextTaskUnblockTime+0x3c>)
 8014802:	f04f 32ff 	mov.w	r2, #4294967295
 8014806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014808:	e008      	b.n	801481c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801480a:	4b07      	ldr	r3, [pc, #28]	; (8014828 <prvResetNextTaskUnblockTime+0x38>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	68db      	ldr	r3, [r3, #12]
 8014810:	68db      	ldr	r3, [r3, #12]
 8014812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	685b      	ldr	r3, [r3, #4]
 8014818:	4a04      	ldr	r2, [pc, #16]	; (801482c <prvResetNextTaskUnblockTime+0x3c>)
 801481a:	6013      	str	r3, [r2, #0]
}
 801481c:	bf00      	nop
 801481e:	370c      	adds	r7, #12
 8014820:	46bd      	mov	sp, r7
 8014822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014826:	4770      	bx	lr
 8014828:	20004928 	.word	0x20004928
 801482c:	20004990 	.word	0x20004990

08014830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014830:	b480      	push	{r7}
 8014832:	b083      	sub	sp, #12
 8014834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014836:	4b0b      	ldr	r3, [pc, #44]	; (8014864 <xTaskGetSchedulerState+0x34>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d102      	bne.n	8014844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801483e:	2301      	movs	r3, #1
 8014840:	607b      	str	r3, [r7, #4]
 8014842:	e008      	b.n	8014856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014844:	4b08      	ldr	r3, [pc, #32]	; (8014868 <xTaskGetSchedulerState+0x38>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d102      	bne.n	8014852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801484c:	2302      	movs	r3, #2
 801484e:	607b      	str	r3, [r7, #4]
 8014850:	e001      	b.n	8014856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014852:	2300      	movs	r3, #0
 8014854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014856:	687b      	ldr	r3, [r7, #4]
	}
 8014858:	4618      	mov	r0, r3
 801485a:	370c      	adds	r7, #12
 801485c:	46bd      	mov	sp, r7
 801485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014862:	4770      	bx	lr
 8014864:	2000497c 	.word	0x2000497c
 8014868:	20004998 	.word	0x20004998

0801486c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801486c:	b580      	push	{r7, lr}
 801486e:	b086      	sub	sp, #24
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014878:	2300      	movs	r3, #0
 801487a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d06e      	beq.n	8014960 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014882:	4b3a      	ldr	r3, [pc, #232]	; (801496c <xTaskPriorityDisinherit+0x100>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	693a      	ldr	r2, [r7, #16]
 8014888:	429a      	cmp	r2, r3
 801488a:	d00a      	beq.n	80148a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014890:	f383 8811 	msr	BASEPRI, r3
 8014894:	f3bf 8f6f 	isb	sy
 8014898:	f3bf 8f4f 	dsb	sy
 801489c:	60fb      	str	r3, [r7, #12]
}
 801489e:	bf00      	nop
 80148a0:	e7fe      	b.n	80148a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d10a      	bne.n	80148c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80148aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ae:	f383 8811 	msr	BASEPRI, r3
 80148b2:	f3bf 8f6f 	isb	sy
 80148b6:	f3bf 8f4f 	dsb	sy
 80148ba:	60bb      	str	r3, [r7, #8]
}
 80148bc:	bf00      	nop
 80148be:	e7fe      	b.n	80148be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148c4:	1e5a      	subs	r2, r3, #1
 80148c6:	693b      	ldr	r3, [r7, #16]
 80148c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d044      	beq.n	8014960 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d140      	bne.n	8014960 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	3304      	adds	r3, #4
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7fe fc21 	bl	801312a <uxListRemove>
 80148e8:	4603      	mov	r3, r0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d115      	bne.n	801491a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148f2:	491f      	ldr	r1, [pc, #124]	; (8014970 <xTaskPriorityDisinherit+0x104>)
 80148f4:	4613      	mov	r3, r2
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	4413      	add	r3, r2
 80148fa:	009b      	lsls	r3, r3, #2
 80148fc:	440b      	add	r3, r1
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d10a      	bne.n	801491a <xTaskPriorityDisinherit+0xae>
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014908:	2201      	movs	r2, #1
 801490a:	fa02 f303 	lsl.w	r3, r2, r3
 801490e:	43da      	mvns	r2, r3
 8014910:	4b18      	ldr	r3, [pc, #96]	; (8014974 <xTaskPriorityDisinherit+0x108>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4013      	ands	r3, r2
 8014916:	4a17      	ldr	r2, [pc, #92]	; (8014974 <xTaskPriorityDisinherit+0x108>)
 8014918:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014926:	f1c3 0207 	rsb	r2, r3, #7
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014932:	2201      	movs	r2, #1
 8014934:	409a      	lsls	r2, r3
 8014936:	4b0f      	ldr	r3, [pc, #60]	; (8014974 <xTaskPriorityDisinherit+0x108>)
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	4313      	orrs	r3, r2
 801493c:	4a0d      	ldr	r2, [pc, #52]	; (8014974 <xTaskPriorityDisinherit+0x108>)
 801493e:	6013      	str	r3, [r2, #0]
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014944:	4613      	mov	r3, r2
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4413      	add	r3, r2
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	4a08      	ldr	r2, [pc, #32]	; (8014970 <xTaskPriorityDisinherit+0x104>)
 801494e:	441a      	add	r2, r3
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	3304      	adds	r3, #4
 8014954:	4619      	mov	r1, r3
 8014956:	4610      	mov	r0, r2
 8014958:	f7fe fb8a 	bl	8013070 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801495c:	2301      	movs	r3, #1
 801495e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014960:	697b      	ldr	r3, [r7, #20]
	}
 8014962:	4618      	mov	r0, r3
 8014964:	3718      	adds	r7, #24
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	20004870 	.word	0x20004870
 8014970:	20004874 	.word	0x20004874
 8014974:	20004978 	.word	0x20004978

08014978 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014978:	b580      	push	{r7, lr}
 801497a:	b086      	sub	sp, #24
 801497c:	af00      	add	r7, sp, #0
 801497e:	60f8      	str	r0, [r7, #12]
 8014980:	60b9      	str	r1, [r7, #8]
 8014982:	607a      	str	r2, [r7, #4]
 8014984:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014986:	f000 fb75 	bl	8015074 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801498a:	4b26      	ldr	r3, [pc, #152]	; (8014a24 <xTaskNotifyWait+0xac>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014992:	b2db      	uxtb	r3, r3
 8014994:	2b02      	cmp	r3, #2
 8014996:	d01a      	beq.n	80149ce <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014998:	4b22      	ldr	r3, [pc, #136]	; (8014a24 <xTaskNotifyWait+0xac>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	43d2      	mvns	r2, r2
 80149a2:	400a      	ands	r2, r1
 80149a4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80149a6:	4b1f      	ldr	r3, [pc, #124]	; (8014a24 <xTaskNotifyWait+0xac>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2201      	movs	r2, #1
 80149ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00b      	beq.n	80149ce <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149b6:	2101      	movs	r1, #1
 80149b8:	6838      	ldr	r0, [r7, #0]
 80149ba:	f000 f9c7 	bl	8014d4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80149be:	4b1a      	ldr	r3, [pc, #104]	; (8014a28 <xTaskNotifyWait+0xb0>)
 80149c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149c4:	601a      	str	r2, [r3, #0]
 80149c6:	f3bf 8f4f 	dsb	sy
 80149ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80149ce:	f000 fb81 	bl	80150d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80149d2:	f000 fb4f 	bl	8015074 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d004      	beq.n	80149e6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80149dc:	4b11      	ldr	r3, [pc, #68]	; (8014a24 <xTaskNotifyWait+0xac>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80149e6:	4b0f      	ldr	r3, [pc, #60]	; (8014a24 <xTaskNotifyWait+0xac>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80149ee:	b2db      	uxtb	r3, r3
 80149f0:	2b02      	cmp	r3, #2
 80149f2:	d002      	beq.n	80149fa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80149f4:	2300      	movs	r3, #0
 80149f6:	617b      	str	r3, [r7, #20]
 80149f8:	e008      	b.n	8014a0c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80149fa:	4b0a      	ldr	r3, [pc, #40]	; (8014a24 <xTaskNotifyWait+0xac>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014a00:	68ba      	ldr	r2, [r7, #8]
 8014a02:	43d2      	mvns	r2, r2
 8014a04:	400a      	ands	r2, r1
 8014a06:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014a0c:	4b05      	ldr	r3, [pc, #20]	; (8014a24 <xTaskNotifyWait+0xac>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	2200      	movs	r2, #0
 8014a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014a16:	f000 fb5d 	bl	80150d4 <vPortExitCritical>

		return xReturn;
 8014a1a:	697b      	ldr	r3, [r7, #20]
	}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3718      	adds	r7, #24
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	20004870 	.word	0x20004870
 8014a28:	e000ed04 	.word	0xe000ed04

08014a2c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b08a      	sub	sp, #40	; 0x28
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	60f8      	str	r0, [r7, #12]
 8014a34:	60b9      	str	r1, [r7, #8]
 8014a36:	603b      	str	r3, [r7, #0]
 8014a38:	4613      	mov	r3, r2
 8014a3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d10a      	bne.n	8014a5c <xTaskGenericNotify+0x30>
	__asm volatile
 8014a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4a:	f383 8811 	msr	BASEPRI, r3
 8014a4e:	f3bf 8f6f 	isb	sy
 8014a52:	f3bf 8f4f 	dsb	sy
 8014a56:	61bb      	str	r3, [r7, #24]
}
 8014a58:	bf00      	nop
 8014a5a:	e7fe      	b.n	8014a5a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014a60:	f000 fb08 	bl	8015074 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d003      	beq.n	8014a72 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014a6a:	6a3b      	ldr	r3, [r7, #32]
 8014a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014a72:	6a3b      	ldr	r3, [r7, #32]
 8014a74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014a78:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014a7a:	6a3b      	ldr	r3, [r7, #32]
 8014a7c:	2202      	movs	r2, #2
 8014a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014a82:	79fb      	ldrb	r3, [r7, #7]
 8014a84:	2b04      	cmp	r3, #4
 8014a86:	d828      	bhi.n	8014ada <xTaskGenericNotify+0xae>
 8014a88:	a201      	add	r2, pc, #4	; (adr r2, 8014a90 <xTaskGenericNotify+0x64>)
 8014a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a8e:	bf00      	nop
 8014a90:	08014afb 	.word	0x08014afb
 8014a94:	08014aa5 	.word	0x08014aa5
 8014a98:	08014ab3 	.word	0x08014ab3
 8014a9c:	08014abf 	.word	0x08014abf
 8014aa0:	08014ac7 	.word	0x08014ac7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014aa4:	6a3b      	ldr	r3, [r7, #32]
 8014aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	431a      	orrs	r2, r3
 8014aac:	6a3b      	ldr	r3, [r7, #32]
 8014aae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014ab0:	e026      	b.n	8014b00 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014ab2:	6a3b      	ldr	r3, [r7, #32]
 8014ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ab6:	1c5a      	adds	r2, r3, #1
 8014ab8:	6a3b      	ldr	r3, [r7, #32]
 8014aba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014abc:	e020      	b.n	8014b00 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014abe:	6a3b      	ldr	r3, [r7, #32]
 8014ac0:	68ba      	ldr	r2, [r7, #8]
 8014ac2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014ac4:	e01c      	b.n	8014b00 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014ac6:	7ffb      	ldrb	r3, [r7, #31]
 8014ac8:	2b02      	cmp	r3, #2
 8014aca:	d003      	beq.n	8014ad4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014acc:	6a3b      	ldr	r3, [r7, #32]
 8014ace:	68ba      	ldr	r2, [r7, #8]
 8014ad0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014ad2:	e015      	b.n	8014b00 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014ad8:	e012      	b.n	8014b00 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014ada:	6a3b      	ldr	r3, [r7, #32]
 8014adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ae2:	d00c      	beq.n	8014afe <xTaskGenericNotify+0xd2>
	__asm volatile
 8014ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ae8:	f383 8811 	msr	BASEPRI, r3
 8014aec:	f3bf 8f6f 	isb	sy
 8014af0:	f3bf 8f4f 	dsb	sy
 8014af4:	617b      	str	r3, [r7, #20]
}
 8014af6:	bf00      	nop
 8014af8:	e7fe      	b.n	8014af8 <xTaskGenericNotify+0xcc>
					break;
 8014afa:	bf00      	nop
 8014afc:	e000      	b.n	8014b00 <xTaskGenericNotify+0xd4>

					break;
 8014afe:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014b00:	7ffb      	ldrb	r3, [r7, #31]
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d139      	bne.n	8014b7a <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b06:	6a3b      	ldr	r3, [r7, #32]
 8014b08:	3304      	adds	r3, #4
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fe fb0d 	bl	801312a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014b10:	6a3b      	ldr	r3, [r7, #32]
 8014b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b14:	2201      	movs	r2, #1
 8014b16:	409a      	lsls	r2, r3
 8014b18:	4b1b      	ldr	r3, [pc, #108]	; (8014b88 <xTaskGenericNotify+0x15c>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	4313      	orrs	r3, r2
 8014b1e:	4a1a      	ldr	r2, [pc, #104]	; (8014b88 <xTaskGenericNotify+0x15c>)
 8014b20:	6013      	str	r3, [r2, #0]
 8014b22:	6a3b      	ldr	r3, [r7, #32]
 8014b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b26:	4613      	mov	r3, r2
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	4413      	add	r3, r2
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	4a17      	ldr	r2, [pc, #92]	; (8014b8c <xTaskGenericNotify+0x160>)
 8014b30:	441a      	add	r2, r3
 8014b32:	6a3b      	ldr	r3, [r7, #32]
 8014b34:	3304      	adds	r3, #4
 8014b36:	4619      	mov	r1, r3
 8014b38:	4610      	mov	r0, r2
 8014b3a:	f7fe fa99 	bl	8013070 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014b3e:	6a3b      	ldr	r3, [r7, #32]
 8014b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d00a      	beq.n	8014b5c <xTaskGenericNotify+0x130>
	__asm volatile
 8014b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4a:	f383 8811 	msr	BASEPRI, r3
 8014b4e:	f3bf 8f6f 	isb	sy
 8014b52:	f3bf 8f4f 	dsb	sy
 8014b56:	613b      	str	r3, [r7, #16]
}
 8014b58:	bf00      	nop
 8014b5a:	e7fe      	b.n	8014b5a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b5c:	6a3b      	ldr	r3, [r7, #32]
 8014b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b60:	4b0b      	ldr	r3, [pc, #44]	; (8014b90 <xTaskGenericNotify+0x164>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d907      	bls.n	8014b7a <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014b6a:	4b0a      	ldr	r3, [pc, #40]	; (8014b94 <xTaskGenericNotify+0x168>)
 8014b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b70:	601a      	str	r2, [r3, #0]
 8014b72:	f3bf 8f4f 	dsb	sy
 8014b76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014b7a:	f000 faab 	bl	80150d4 <vPortExitCritical>

		return xReturn;
 8014b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3728      	adds	r7, #40	; 0x28
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	20004978 	.word	0x20004978
 8014b8c:	20004874 	.word	0x20004874
 8014b90:	20004870 	.word	0x20004870
 8014b94:	e000ed04 	.word	0xe000ed04

08014b98 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b08e      	sub	sp, #56	; 0x38
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	603b      	str	r3, [r7, #0]
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014ba8:	2301      	movs	r3, #1
 8014baa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d10a      	bne.n	8014bc8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb6:	f383 8811 	msr	BASEPRI, r3
 8014bba:	f3bf 8f6f 	isb	sy
 8014bbe:	f3bf 8f4f 	dsb	sy
 8014bc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014bc4:	bf00      	nop
 8014bc6:	e7fe      	b.n	8014bc6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014bc8:	f000 fb36 	bl	8015238 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014bd0:	f3ef 8211 	mrs	r2, BASEPRI
 8014bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd8:	f383 8811 	msr	BASEPRI, r3
 8014bdc:	f3bf 8f6f 	isb	sy
 8014be0:	f3bf 8f4f 	dsb	sy
 8014be4:	623a      	str	r2, [r7, #32]
 8014be6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014be8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014bea:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d003      	beq.n	8014bfa <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c06:	2202      	movs	r2, #2
 8014c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014c0c:	79fb      	ldrb	r3, [r7, #7]
 8014c0e:	2b04      	cmp	r3, #4
 8014c10:	d828      	bhi.n	8014c64 <xTaskGenericNotifyFromISR+0xcc>
 8014c12:	a201      	add	r2, pc, #4	; (adr r2, 8014c18 <xTaskGenericNotifyFromISR+0x80>)
 8014c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c18:	08014c85 	.word	0x08014c85
 8014c1c:	08014c2d 	.word	0x08014c2d
 8014c20:	08014c3b 	.word	0x08014c3b
 8014c24:	08014c47 	.word	0x08014c47
 8014c28:	08014c4f 	.word	0x08014c4f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	431a      	orrs	r2, r3
 8014c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c36:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014c38:	e027      	b.n	8014c8a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c3e:	1c5a      	adds	r2, r3, #1
 8014c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c42:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014c44:	e021      	b.n	8014c8a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c48:	68ba      	ldr	r2, [r7, #8]
 8014c4a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014c4c:	e01d      	b.n	8014c8a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014c52:	2b02      	cmp	r3, #2
 8014c54:	d003      	beq.n	8014c5e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c58:	68ba      	ldr	r2, [r7, #8]
 8014c5a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014c5c:	e015      	b.n	8014c8a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014c62:	e012      	b.n	8014c8a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c6c:	d00c      	beq.n	8014c88 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c72:	f383 8811 	msr	BASEPRI, r3
 8014c76:	f3bf 8f6f 	isb	sy
 8014c7a:	f3bf 8f4f 	dsb	sy
 8014c7e:	61bb      	str	r3, [r7, #24]
}
 8014c80:	bf00      	nop
 8014c82:	e7fe      	b.n	8014c82 <xTaskGenericNotifyFromISR+0xea>
					break;
 8014c84:	bf00      	nop
 8014c86:	e000      	b.n	8014c8a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014c88:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d145      	bne.n	8014d1e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d00a      	beq.n	8014cb0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c9e:	f383 8811 	msr	BASEPRI, r3
 8014ca2:	f3bf 8f6f 	isb	sy
 8014ca6:	f3bf 8f4f 	dsb	sy
 8014caa:	617b      	str	r3, [r7, #20]
}
 8014cac:	bf00      	nop
 8014cae:	e7fe      	b.n	8014cae <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cb0:	4b20      	ldr	r3, [pc, #128]	; (8014d34 <xTaskGenericNotifyFromISR+0x19c>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d11c      	bne.n	8014cf2 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cba:	3304      	adds	r3, #4
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7fe fa34 	bl	801312a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	409a      	lsls	r2, r3
 8014cca:	4b1b      	ldr	r3, [pc, #108]	; (8014d38 <xTaskGenericNotifyFromISR+0x1a0>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	4313      	orrs	r3, r2
 8014cd0:	4a19      	ldr	r2, [pc, #100]	; (8014d38 <xTaskGenericNotifyFromISR+0x1a0>)
 8014cd2:	6013      	str	r3, [r2, #0]
 8014cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd8:	4613      	mov	r3, r2
 8014cda:	009b      	lsls	r3, r3, #2
 8014cdc:	4413      	add	r3, r2
 8014cde:	009b      	lsls	r3, r3, #2
 8014ce0:	4a16      	ldr	r2, [pc, #88]	; (8014d3c <xTaskGenericNotifyFromISR+0x1a4>)
 8014ce2:	441a      	add	r2, r3
 8014ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce6:	3304      	adds	r3, #4
 8014ce8:	4619      	mov	r1, r3
 8014cea:	4610      	mov	r0, r2
 8014cec:	f7fe f9c0 	bl	8013070 <vListInsertEnd>
 8014cf0:	e005      	b.n	8014cfe <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf4:	3318      	adds	r3, #24
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	4811      	ldr	r0, [pc, #68]	; (8014d40 <xTaskGenericNotifyFromISR+0x1a8>)
 8014cfa:	f7fe f9b9 	bl	8013070 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d02:	4b10      	ldr	r3, [pc, #64]	; (8014d44 <xTaskGenericNotifyFromISR+0x1ac>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d908      	bls.n	8014d1e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d002      	beq.n	8014d18 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d14:	2201      	movs	r2, #1
 8014d16:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014d18:	4b0b      	ldr	r3, [pc, #44]	; (8014d48 <xTaskGenericNotifyFromISR+0x1b0>)
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	601a      	str	r2, [r3, #0]
 8014d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	f383 8811 	msr	BASEPRI, r3
}
 8014d28:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3738      	adds	r7, #56	; 0x38
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	20004998 	.word	0x20004998
 8014d38:	20004978 	.word	0x20004978
 8014d3c:	20004874 	.word	0x20004874
 8014d40:	20004930 	.word	0x20004930
 8014d44:	20004870 	.word	0x20004870
 8014d48:	20004984 	.word	0x20004984

08014d4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b084      	sub	sp, #16
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014d56:	4b29      	ldr	r3, [pc, #164]	; (8014dfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d5c:	4b28      	ldr	r3, [pc, #160]	; (8014e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	3304      	adds	r3, #4
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7fe f9e1 	bl	801312a <uxListRemove>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d10b      	bne.n	8014d86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014d6e:	4b24      	ldr	r3, [pc, #144]	; (8014e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d74:	2201      	movs	r2, #1
 8014d76:	fa02 f303 	lsl.w	r3, r2, r3
 8014d7a:	43da      	mvns	r2, r3
 8014d7c:	4b21      	ldr	r3, [pc, #132]	; (8014e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	4013      	ands	r3, r2
 8014d82:	4a20      	ldr	r2, [pc, #128]	; (8014e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014d84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d8c:	d10a      	bne.n	8014da4 <prvAddCurrentTaskToDelayedList+0x58>
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d007      	beq.n	8014da4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014d94:	4b1a      	ldr	r3, [pc, #104]	; (8014e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	3304      	adds	r3, #4
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	481a      	ldr	r0, [pc, #104]	; (8014e08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014d9e:	f7fe f967 	bl	8013070 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014da2:	e026      	b.n	8014df2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	4413      	add	r3, r2
 8014daa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014dac:	4b14      	ldr	r3, [pc, #80]	; (8014e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	68ba      	ldr	r2, [r7, #8]
 8014db2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014db4:	68ba      	ldr	r2, [r7, #8]
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d209      	bcs.n	8014dd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dbc:	4b13      	ldr	r3, [pc, #76]	; (8014e0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	4b0f      	ldr	r3, [pc, #60]	; (8014e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	3304      	adds	r3, #4
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	4610      	mov	r0, r2
 8014dca:	f7fe f975 	bl	80130b8 <vListInsert>
}
 8014dce:	e010      	b.n	8014df2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dd0:	4b0f      	ldr	r3, [pc, #60]	; (8014e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	4b0a      	ldr	r3, [pc, #40]	; (8014e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	3304      	adds	r3, #4
 8014dda:	4619      	mov	r1, r3
 8014ddc:	4610      	mov	r0, r2
 8014dde:	f7fe f96b 	bl	80130b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014de2:	4b0c      	ldr	r3, [pc, #48]	; (8014e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	429a      	cmp	r2, r3
 8014dea:	d202      	bcs.n	8014df2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014dec:	4a09      	ldr	r2, [pc, #36]	; (8014e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	6013      	str	r3, [r2, #0]
}
 8014df2:	bf00      	nop
 8014df4:	3710      	adds	r7, #16
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	20004974 	.word	0x20004974
 8014e00:	20004870 	.word	0x20004870
 8014e04:	20004978 	.word	0x20004978
 8014e08:	2000495c 	.word	0x2000495c
 8014e0c:	2000492c 	.word	0x2000492c
 8014e10:	20004928 	.word	0x20004928
 8014e14:	20004990 	.word	0x20004990

08014e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b085      	sub	sp, #20
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	60b9      	str	r1, [r7, #8]
 8014e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	3b04      	subs	r3, #4
 8014e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	3b04      	subs	r3, #4
 8014e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	f023 0201 	bic.w	r2, r3, #1
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	3b04      	subs	r3, #4
 8014e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014e48:	4a0c      	ldr	r2, [pc, #48]	; (8014e7c <pxPortInitialiseStack+0x64>)
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	3b14      	subs	r3, #20
 8014e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	3b04      	subs	r3, #4
 8014e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f06f 0202 	mvn.w	r2, #2
 8014e66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	3b20      	subs	r3, #32
 8014e6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3714      	adds	r7, #20
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr
 8014e7c:	08014e81 	.word	0x08014e81

08014e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014e80:	b480      	push	{r7}
 8014e82:	b085      	sub	sp, #20
 8014e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014e86:	2300      	movs	r3, #0
 8014e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014e8a:	4b12      	ldr	r3, [pc, #72]	; (8014ed4 <prvTaskExitError+0x54>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e92:	d00a      	beq.n	8014eaa <prvTaskExitError+0x2a>
	__asm volatile
 8014e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e98:	f383 8811 	msr	BASEPRI, r3
 8014e9c:	f3bf 8f6f 	isb	sy
 8014ea0:	f3bf 8f4f 	dsb	sy
 8014ea4:	60fb      	str	r3, [r7, #12]
}
 8014ea6:	bf00      	nop
 8014ea8:	e7fe      	b.n	8014ea8 <prvTaskExitError+0x28>
	__asm volatile
 8014eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eae:	f383 8811 	msr	BASEPRI, r3
 8014eb2:	f3bf 8f6f 	isb	sy
 8014eb6:	f3bf 8f4f 	dsb	sy
 8014eba:	60bb      	str	r3, [r7, #8]
}
 8014ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014ebe:	bf00      	nop
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d0fc      	beq.n	8014ec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ec6:	bf00      	nop
 8014ec8:	bf00      	nop
 8014eca:	3714      	adds	r7, #20
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed2:	4770      	bx	lr
 8014ed4:	200041a8 	.word	0x200041a8
	...

08014ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014ee0:	4b07      	ldr	r3, [pc, #28]	; (8014f00 <pxCurrentTCBConst2>)
 8014ee2:	6819      	ldr	r1, [r3, #0]
 8014ee4:	6808      	ldr	r0, [r1, #0]
 8014ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eea:	f380 8809 	msr	PSP, r0
 8014eee:	f3bf 8f6f 	isb	sy
 8014ef2:	f04f 0000 	mov.w	r0, #0
 8014ef6:	f380 8811 	msr	BASEPRI, r0
 8014efa:	4770      	bx	lr
 8014efc:	f3af 8000 	nop.w

08014f00 <pxCurrentTCBConst2>:
 8014f00:	20004870 	.word	0x20004870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014f04:	bf00      	nop
 8014f06:	bf00      	nop

08014f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014f08:	4808      	ldr	r0, [pc, #32]	; (8014f2c <prvPortStartFirstTask+0x24>)
 8014f0a:	6800      	ldr	r0, [r0, #0]
 8014f0c:	6800      	ldr	r0, [r0, #0]
 8014f0e:	f380 8808 	msr	MSP, r0
 8014f12:	f04f 0000 	mov.w	r0, #0
 8014f16:	f380 8814 	msr	CONTROL, r0
 8014f1a:	b662      	cpsie	i
 8014f1c:	b661      	cpsie	f
 8014f1e:	f3bf 8f4f 	dsb	sy
 8014f22:	f3bf 8f6f 	isb	sy
 8014f26:	df00      	svc	0
 8014f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014f2a:	bf00      	nop
 8014f2c:	e000ed08 	.word	0xe000ed08

08014f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b086      	sub	sp, #24
 8014f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014f36:	4b46      	ldr	r3, [pc, #280]	; (8015050 <xPortStartScheduler+0x120>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	4a46      	ldr	r2, [pc, #280]	; (8015054 <xPortStartScheduler+0x124>)
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	d10a      	bne.n	8014f56 <xPortStartScheduler+0x26>
	__asm volatile
 8014f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f44:	f383 8811 	msr	BASEPRI, r3
 8014f48:	f3bf 8f6f 	isb	sy
 8014f4c:	f3bf 8f4f 	dsb	sy
 8014f50:	613b      	str	r3, [r7, #16]
}
 8014f52:	bf00      	nop
 8014f54:	e7fe      	b.n	8014f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014f56:	4b3e      	ldr	r3, [pc, #248]	; (8015050 <xPortStartScheduler+0x120>)
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	4a3f      	ldr	r2, [pc, #252]	; (8015058 <xPortStartScheduler+0x128>)
 8014f5c:	4293      	cmp	r3, r2
 8014f5e:	d10a      	bne.n	8014f76 <xPortStartScheduler+0x46>
	__asm volatile
 8014f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f64:	f383 8811 	msr	BASEPRI, r3
 8014f68:	f3bf 8f6f 	isb	sy
 8014f6c:	f3bf 8f4f 	dsb	sy
 8014f70:	60fb      	str	r3, [r7, #12]
}
 8014f72:	bf00      	nop
 8014f74:	e7fe      	b.n	8014f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014f76:	4b39      	ldr	r3, [pc, #228]	; (801505c <xPortStartScheduler+0x12c>)
 8014f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	b2db      	uxtb	r3, r3
 8014f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	22ff      	movs	r2, #255	; 0xff
 8014f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014f90:	78fb      	ldrb	r3, [r7, #3]
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014f98:	b2da      	uxtb	r2, r3
 8014f9a:	4b31      	ldr	r3, [pc, #196]	; (8015060 <xPortStartScheduler+0x130>)
 8014f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014f9e:	4b31      	ldr	r3, [pc, #196]	; (8015064 <xPortStartScheduler+0x134>)
 8014fa0:	2207      	movs	r2, #7
 8014fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014fa4:	e009      	b.n	8014fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014fa6:	4b2f      	ldr	r3, [pc, #188]	; (8015064 <xPortStartScheduler+0x134>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	3b01      	subs	r3, #1
 8014fac:	4a2d      	ldr	r2, [pc, #180]	; (8015064 <xPortStartScheduler+0x134>)
 8014fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014fb0:	78fb      	ldrb	r3, [r7, #3]
 8014fb2:	b2db      	uxtb	r3, r3
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	b2db      	uxtb	r3, r3
 8014fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014fba:	78fb      	ldrb	r3, [r7, #3]
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fc2:	2b80      	cmp	r3, #128	; 0x80
 8014fc4:	d0ef      	beq.n	8014fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014fc6:	4b27      	ldr	r3, [pc, #156]	; (8015064 <xPortStartScheduler+0x134>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	f1c3 0307 	rsb	r3, r3, #7
 8014fce:	2b04      	cmp	r3, #4
 8014fd0:	d00a      	beq.n	8014fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd6:	f383 8811 	msr	BASEPRI, r3
 8014fda:	f3bf 8f6f 	isb	sy
 8014fde:	f3bf 8f4f 	dsb	sy
 8014fe2:	60bb      	str	r3, [r7, #8]
}
 8014fe4:	bf00      	nop
 8014fe6:	e7fe      	b.n	8014fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014fe8:	4b1e      	ldr	r3, [pc, #120]	; (8015064 <xPortStartScheduler+0x134>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	021b      	lsls	r3, r3, #8
 8014fee:	4a1d      	ldr	r2, [pc, #116]	; (8015064 <xPortStartScheduler+0x134>)
 8014ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014ff2:	4b1c      	ldr	r3, [pc, #112]	; (8015064 <xPortStartScheduler+0x134>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014ffa:	4a1a      	ldr	r2, [pc, #104]	; (8015064 <xPortStartScheduler+0x134>)
 8014ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	b2da      	uxtb	r2, r3
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015006:	4b18      	ldr	r3, [pc, #96]	; (8015068 <xPortStartScheduler+0x138>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4a17      	ldr	r2, [pc, #92]	; (8015068 <xPortStartScheduler+0x138>)
 801500c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015012:	4b15      	ldr	r3, [pc, #84]	; (8015068 <xPortStartScheduler+0x138>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	4a14      	ldr	r2, [pc, #80]	; (8015068 <xPortStartScheduler+0x138>)
 8015018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801501c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801501e:	f000 f8dd 	bl	80151dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015022:	4b12      	ldr	r3, [pc, #72]	; (801506c <xPortStartScheduler+0x13c>)
 8015024:	2200      	movs	r2, #0
 8015026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015028:	f000 f8fc 	bl	8015224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801502c:	4b10      	ldr	r3, [pc, #64]	; (8015070 <xPortStartScheduler+0x140>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	4a0f      	ldr	r2, [pc, #60]	; (8015070 <xPortStartScheduler+0x140>)
 8015032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015038:	f7ff ff66 	bl	8014f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801503c:	f7ff f9bc 	bl	80143b8 <vTaskSwitchContext>
	prvTaskExitError();
 8015040:	f7ff ff1e 	bl	8014e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015044:	2300      	movs	r3, #0
}
 8015046:	4618      	mov	r0, r3
 8015048:	3718      	adds	r7, #24
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	e000ed00 	.word	0xe000ed00
 8015054:	410fc271 	.word	0x410fc271
 8015058:	410fc270 	.word	0x410fc270
 801505c:	e000e400 	.word	0xe000e400
 8015060:	2000499c 	.word	0x2000499c
 8015064:	200049a0 	.word	0x200049a0
 8015068:	e000ed20 	.word	0xe000ed20
 801506c:	200041a8 	.word	0x200041a8
 8015070:	e000ef34 	.word	0xe000ef34

08015074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
	__asm volatile
 801507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801507e:	f383 8811 	msr	BASEPRI, r3
 8015082:	f3bf 8f6f 	isb	sy
 8015086:	f3bf 8f4f 	dsb	sy
 801508a:	607b      	str	r3, [r7, #4]
}
 801508c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801508e:	4b0f      	ldr	r3, [pc, #60]	; (80150cc <vPortEnterCritical+0x58>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	3301      	adds	r3, #1
 8015094:	4a0d      	ldr	r2, [pc, #52]	; (80150cc <vPortEnterCritical+0x58>)
 8015096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015098:	4b0c      	ldr	r3, [pc, #48]	; (80150cc <vPortEnterCritical+0x58>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	2b01      	cmp	r3, #1
 801509e:	d10f      	bne.n	80150c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80150a0:	4b0b      	ldr	r3, [pc, #44]	; (80150d0 <vPortEnterCritical+0x5c>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	b2db      	uxtb	r3, r3
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d00a      	beq.n	80150c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80150aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ae:	f383 8811 	msr	BASEPRI, r3
 80150b2:	f3bf 8f6f 	isb	sy
 80150b6:	f3bf 8f4f 	dsb	sy
 80150ba:	603b      	str	r3, [r7, #0]
}
 80150bc:	bf00      	nop
 80150be:	e7fe      	b.n	80150be <vPortEnterCritical+0x4a>
	}
}
 80150c0:	bf00      	nop
 80150c2:	370c      	adds	r7, #12
 80150c4:	46bd      	mov	sp, r7
 80150c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ca:	4770      	bx	lr
 80150cc:	200041a8 	.word	0x200041a8
 80150d0:	e000ed04 	.word	0xe000ed04

080150d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80150da:	4b12      	ldr	r3, [pc, #72]	; (8015124 <vPortExitCritical+0x50>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d10a      	bne.n	80150f8 <vPortExitCritical+0x24>
	__asm volatile
 80150e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e6:	f383 8811 	msr	BASEPRI, r3
 80150ea:	f3bf 8f6f 	isb	sy
 80150ee:	f3bf 8f4f 	dsb	sy
 80150f2:	607b      	str	r3, [r7, #4]
}
 80150f4:	bf00      	nop
 80150f6:	e7fe      	b.n	80150f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80150f8:	4b0a      	ldr	r3, [pc, #40]	; (8015124 <vPortExitCritical+0x50>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	3b01      	subs	r3, #1
 80150fe:	4a09      	ldr	r2, [pc, #36]	; (8015124 <vPortExitCritical+0x50>)
 8015100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015102:	4b08      	ldr	r3, [pc, #32]	; (8015124 <vPortExitCritical+0x50>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d105      	bne.n	8015116 <vPortExitCritical+0x42>
 801510a:	2300      	movs	r3, #0
 801510c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801510e:	683b      	ldr	r3, [r7, #0]
 8015110:	f383 8811 	msr	BASEPRI, r3
}
 8015114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015116:	bf00      	nop
 8015118:	370c      	adds	r7, #12
 801511a:	46bd      	mov	sp, r7
 801511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop
 8015124:	200041a8 	.word	0x200041a8
	...

08015130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015130:	f3ef 8009 	mrs	r0, PSP
 8015134:	f3bf 8f6f 	isb	sy
 8015138:	4b15      	ldr	r3, [pc, #84]	; (8015190 <pxCurrentTCBConst>)
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	f01e 0f10 	tst.w	lr, #16
 8015140:	bf08      	it	eq
 8015142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514a:	6010      	str	r0, [r2, #0]
 801514c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015154:	f380 8811 	msr	BASEPRI, r0
 8015158:	f3bf 8f4f 	dsb	sy
 801515c:	f3bf 8f6f 	isb	sy
 8015160:	f7ff f92a 	bl	80143b8 <vTaskSwitchContext>
 8015164:	f04f 0000 	mov.w	r0, #0
 8015168:	f380 8811 	msr	BASEPRI, r0
 801516c:	bc09      	pop	{r0, r3}
 801516e:	6819      	ldr	r1, [r3, #0]
 8015170:	6808      	ldr	r0, [r1, #0]
 8015172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015176:	f01e 0f10 	tst.w	lr, #16
 801517a:	bf08      	it	eq
 801517c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015180:	f380 8809 	msr	PSP, r0
 8015184:	f3bf 8f6f 	isb	sy
 8015188:	4770      	bx	lr
 801518a:	bf00      	nop
 801518c:	f3af 8000 	nop.w

08015190 <pxCurrentTCBConst>:
 8015190:	20004870 	.word	0x20004870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015194:	bf00      	nop
 8015196:	bf00      	nop

08015198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
	__asm volatile
 801519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a2:	f383 8811 	msr	BASEPRI, r3
 80151a6:	f3bf 8f6f 	isb	sy
 80151aa:	f3bf 8f4f 	dsb	sy
 80151ae:	607b      	str	r3, [r7, #4]
}
 80151b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80151b2:	f7ff f849 	bl	8014248 <xTaskIncrementTick>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d003      	beq.n	80151c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80151bc:	4b06      	ldr	r3, [pc, #24]	; (80151d8 <SysTick_Handler+0x40>)
 80151be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151c2:	601a      	str	r2, [r3, #0]
 80151c4:	2300      	movs	r3, #0
 80151c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	f383 8811 	msr	BASEPRI, r3
}
 80151ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80151d0:	bf00      	nop
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	e000ed04 	.word	0xe000ed04

080151dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80151dc:	b480      	push	{r7}
 80151de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80151e0:	4b0b      	ldr	r3, [pc, #44]	; (8015210 <vPortSetupTimerInterrupt+0x34>)
 80151e2:	2200      	movs	r2, #0
 80151e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80151e6:	4b0b      	ldr	r3, [pc, #44]	; (8015214 <vPortSetupTimerInterrupt+0x38>)
 80151e8:	2200      	movs	r2, #0
 80151ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80151ec:	4b0a      	ldr	r3, [pc, #40]	; (8015218 <vPortSetupTimerInterrupt+0x3c>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	4a0a      	ldr	r2, [pc, #40]	; (801521c <vPortSetupTimerInterrupt+0x40>)
 80151f2:	fba2 2303 	umull	r2, r3, r2, r3
 80151f6:	099b      	lsrs	r3, r3, #6
 80151f8:	4a09      	ldr	r2, [pc, #36]	; (8015220 <vPortSetupTimerInterrupt+0x44>)
 80151fa:	3b01      	subs	r3, #1
 80151fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80151fe:	4b04      	ldr	r3, [pc, #16]	; (8015210 <vPortSetupTimerInterrupt+0x34>)
 8015200:	2207      	movs	r2, #7
 8015202:	601a      	str	r2, [r3, #0]
}
 8015204:	bf00      	nop
 8015206:	46bd      	mov	sp, r7
 8015208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520c:	4770      	bx	lr
 801520e:	bf00      	nop
 8015210:	e000e010 	.word	0xe000e010
 8015214:	e000e018 	.word	0xe000e018
 8015218:	2000408c 	.word	0x2000408c
 801521c:	10624dd3 	.word	0x10624dd3
 8015220:	e000e014 	.word	0xe000e014

08015224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015234 <vPortEnableVFP+0x10>
 8015228:	6801      	ldr	r1, [r0, #0]
 801522a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801522e:	6001      	str	r1, [r0, #0]
 8015230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015232:	bf00      	nop
 8015234:	e000ed88 	.word	0xe000ed88

08015238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015238:	b480      	push	{r7}
 801523a:	b085      	sub	sp, #20
 801523c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801523e:	f3ef 8305 	mrs	r3, IPSR
 8015242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	2b0f      	cmp	r3, #15
 8015248:	d914      	bls.n	8015274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801524a:	4a17      	ldr	r2, [pc, #92]	; (80152a8 <vPortValidateInterruptPriority+0x70>)
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	4413      	add	r3, r2
 8015250:	781b      	ldrb	r3, [r3, #0]
 8015252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015254:	4b15      	ldr	r3, [pc, #84]	; (80152ac <vPortValidateInterruptPriority+0x74>)
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	7afa      	ldrb	r2, [r7, #11]
 801525a:	429a      	cmp	r2, r3
 801525c:	d20a      	bcs.n	8015274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015262:	f383 8811 	msr	BASEPRI, r3
 8015266:	f3bf 8f6f 	isb	sy
 801526a:	f3bf 8f4f 	dsb	sy
 801526e:	607b      	str	r3, [r7, #4]
}
 8015270:	bf00      	nop
 8015272:	e7fe      	b.n	8015272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015274:	4b0e      	ldr	r3, [pc, #56]	; (80152b0 <vPortValidateInterruptPriority+0x78>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801527c:	4b0d      	ldr	r3, [pc, #52]	; (80152b4 <vPortValidateInterruptPriority+0x7c>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	429a      	cmp	r2, r3
 8015282:	d90a      	bls.n	801529a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015288:	f383 8811 	msr	BASEPRI, r3
 801528c:	f3bf 8f6f 	isb	sy
 8015290:	f3bf 8f4f 	dsb	sy
 8015294:	603b      	str	r3, [r7, #0]
}
 8015296:	bf00      	nop
 8015298:	e7fe      	b.n	8015298 <vPortValidateInterruptPriority+0x60>
	}
 801529a:	bf00      	nop
 801529c:	3714      	adds	r7, #20
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	e000e3f0 	.word	0xe000e3f0
 80152ac:	2000499c 	.word	0x2000499c
 80152b0:	e000ed0c 	.word	0xe000ed0c
 80152b4:	200049a0 	.word	0x200049a0

080152b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b08a      	sub	sp, #40	; 0x28
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80152c0:	2300      	movs	r3, #0
 80152c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80152c4:	f7fe ff16 	bl	80140f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80152c8:	4b58      	ldr	r3, [pc, #352]	; (801542c <pvPortMalloc+0x174>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d101      	bne.n	80152d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80152d0:	f000 f910 	bl	80154f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80152d4:	4b56      	ldr	r3, [pc, #344]	; (8015430 <pvPortMalloc+0x178>)
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	4013      	ands	r3, r2
 80152dc:	2b00      	cmp	r3, #0
 80152de:	f040 808e 	bne.w	80153fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d01d      	beq.n	8015324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80152e8:	2208      	movs	r2, #8
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4413      	add	r3, r2
 80152ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f003 0307 	and.w	r3, r3, #7
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d014      	beq.n	8015324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f023 0307 	bic.w	r3, r3, #7
 8015300:	3308      	adds	r3, #8
 8015302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f003 0307 	and.w	r3, r3, #7
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00a      	beq.n	8015324 <pvPortMalloc+0x6c>
	__asm volatile
 801530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015312:	f383 8811 	msr	BASEPRI, r3
 8015316:	f3bf 8f6f 	isb	sy
 801531a:	f3bf 8f4f 	dsb	sy
 801531e:	617b      	str	r3, [r7, #20]
}
 8015320:	bf00      	nop
 8015322:	e7fe      	b.n	8015322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d069      	beq.n	80153fe <pvPortMalloc+0x146>
 801532a:	4b42      	ldr	r3, [pc, #264]	; (8015434 <pvPortMalloc+0x17c>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	429a      	cmp	r2, r3
 8015332:	d864      	bhi.n	80153fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015334:	4b40      	ldr	r3, [pc, #256]	; (8015438 <pvPortMalloc+0x180>)
 8015336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015338:	4b3f      	ldr	r3, [pc, #252]	; (8015438 <pvPortMalloc+0x180>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801533e:	e004      	b.n	801534a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	687a      	ldr	r2, [r7, #4]
 8015350:	429a      	cmp	r2, r3
 8015352:	d903      	bls.n	801535c <pvPortMalloc+0xa4>
 8015354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d1f1      	bne.n	8015340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801535c:	4b33      	ldr	r3, [pc, #204]	; (801542c <pvPortMalloc+0x174>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015362:	429a      	cmp	r2, r3
 8015364:	d04b      	beq.n	80153fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015366:	6a3b      	ldr	r3, [r7, #32]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	2208      	movs	r2, #8
 801536c:	4413      	add	r3, r2
 801536e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	6a3b      	ldr	r3, [r7, #32]
 8015376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537a:	685a      	ldr	r2, [r3, #4]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	1ad2      	subs	r2, r2, r3
 8015380:	2308      	movs	r3, #8
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	429a      	cmp	r2, r3
 8015386:	d91f      	bls.n	80153c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	4413      	add	r3, r2
 801538e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015390:	69bb      	ldr	r3, [r7, #24]
 8015392:	f003 0307 	and.w	r3, r3, #7
 8015396:	2b00      	cmp	r3, #0
 8015398:	d00a      	beq.n	80153b0 <pvPortMalloc+0xf8>
	__asm volatile
 801539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801539e:	f383 8811 	msr	BASEPRI, r3
 80153a2:	f3bf 8f6f 	isb	sy
 80153a6:	f3bf 8f4f 	dsb	sy
 80153aa:	613b      	str	r3, [r7, #16]
}
 80153ac:	bf00      	nop
 80153ae:	e7fe      	b.n	80153ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80153b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b2:	685a      	ldr	r2, [r3, #4]
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	1ad2      	subs	r2, r2, r3
 80153b8:	69bb      	ldr	r3, [r7, #24]
 80153ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80153bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80153c2:	69b8      	ldr	r0, [r7, #24]
 80153c4:	f000 f8f8 	bl	80155b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80153c8:	4b1a      	ldr	r3, [pc, #104]	; (8015434 <pvPortMalloc+0x17c>)
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	1ad3      	subs	r3, r2, r3
 80153d2:	4a18      	ldr	r2, [pc, #96]	; (8015434 <pvPortMalloc+0x17c>)
 80153d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80153d6:	4b17      	ldr	r3, [pc, #92]	; (8015434 <pvPortMalloc+0x17c>)
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	4b18      	ldr	r3, [pc, #96]	; (801543c <pvPortMalloc+0x184>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	429a      	cmp	r2, r3
 80153e0:	d203      	bcs.n	80153ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80153e2:	4b14      	ldr	r3, [pc, #80]	; (8015434 <pvPortMalloc+0x17c>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	4a15      	ldr	r2, [pc, #84]	; (801543c <pvPortMalloc+0x184>)
 80153e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80153ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ec:	685a      	ldr	r2, [r3, #4]
 80153ee:	4b10      	ldr	r3, [pc, #64]	; (8015430 <pvPortMalloc+0x178>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	431a      	orrs	r2, r3
 80153f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80153f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fa:	2200      	movs	r2, #0
 80153fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80153fe:	f7fe fe87 	bl	8014110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015402:	69fb      	ldr	r3, [r7, #28]
 8015404:	f003 0307 	and.w	r3, r3, #7
 8015408:	2b00      	cmp	r3, #0
 801540a:	d00a      	beq.n	8015422 <pvPortMalloc+0x16a>
	__asm volatile
 801540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015410:	f383 8811 	msr	BASEPRI, r3
 8015414:	f3bf 8f6f 	isb	sy
 8015418:	f3bf 8f4f 	dsb	sy
 801541c:	60fb      	str	r3, [r7, #12]
}
 801541e:	bf00      	nop
 8015420:	e7fe      	b.n	8015420 <pvPortMalloc+0x168>
	return pvReturn;
 8015422:	69fb      	ldr	r3, [r7, #28]
}
 8015424:	4618      	mov	r0, r3
 8015426:	3728      	adds	r7, #40	; 0x28
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	200085ac 	.word	0x200085ac
 8015430:	200085b8 	.word	0x200085b8
 8015434:	200085b0 	.word	0x200085b0
 8015438:	200085a4 	.word	0x200085a4
 801543c:	200085b4 	.word	0x200085b4

08015440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b086      	sub	sp, #24
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d048      	beq.n	80154e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015452:	2308      	movs	r3, #8
 8015454:	425b      	negs	r3, r3
 8015456:	697a      	ldr	r2, [r7, #20]
 8015458:	4413      	add	r3, r2
 801545a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015460:	693b      	ldr	r3, [r7, #16]
 8015462:	685a      	ldr	r2, [r3, #4]
 8015464:	4b21      	ldr	r3, [pc, #132]	; (80154ec <vPortFree+0xac>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	4013      	ands	r3, r2
 801546a:	2b00      	cmp	r3, #0
 801546c:	d10a      	bne.n	8015484 <vPortFree+0x44>
	__asm volatile
 801546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015472:	f383 8811 	msr	BASEPRI, r3
 8015476:	f3bf 8f6f 	isb	sy
 801547a:	f3bf 8f4f 	dsb	sy
 801547e:	60fb      	str	r3, [r7, #12]
}
 8015480:	bf00      	nop
 8015482:	e7fe      	b.n	8015482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015484:	693b      	ldr	r3, [r7, #16]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d00a      	beq.n	80154a2 <vPortFree+0x62>
	__asm volatile
 801548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015490:	f383 8811 	msr	BASEPRI, r3
 8015494:	f3bf 8f6f 	isb	sy
 8015498:	f3bf 8f4f 	dsb	sy
 801549c:	60bb      	str	r3, [r7, #8]
}
 801549e:	bf00      	nop
 80154a0:	e7fe      	b.n	80154a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80154a2:	693b      	ldr	r3, [r7, #16]
 80154a4:	685a      	ldr	r2, [r3, #4]
 80154a6:	4b11      	ldr	r3, [pc, #68]	; (80154ec <vPortFree+0xac>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4013      	ands	r3, r2
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d019      	beq.n	80154e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d115      	bne.n	80154e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	685a      	ldr	r2, [r3, #4]
 80154bc:	4b0b      	ldr	r3, [pc, #44]	; (80154ec <vPortFree+0xac>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	43db      	mvns	r3, r3
 80154c2:	401a      	ands	r2, r3
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80154c8:	f7fe fe14 	bl	80140f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	685a      	ldr	r2, [r3, #4]
 80154d0:	4b07      	ldr	r3, [pc, #28]	; (80154f0 <vPortFree+0xb0>)
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	4413      	add	r3, r2
 80154d6:	4a06      	ldr	r2, [pc, #24]	; (80154f0 <vPortFree+0xb0>)
 80154d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80154da:	6938      	ldr	r0, [r7, #16]
 80154dc:	f000 f86c 	bl	80155b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80154e0:	f7fe fe16 	bl	8014110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80154e4:	bf00      	nop
 80154e6:	3718      	adds	r7, #24
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	200085b8 	.word	0x200085b8
 80154f0:	200085b0 	.word	0x200085b0

080154f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80154f4:	b480      	push	{r7}
 80154f6:	b085      	sub	sp, #20
 80154f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80154fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80154fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015500:	4b27      	ldr	r3, [pc, #156]	; (80155a0 <prvHeapInit+0xac>)
 8015502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f003 0307 	and.w	r3, r3, #7
 801550a:	2b00      	cmp	r3, #0
 801550c:	d00c      	beq.n	8015528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	3307      	adds	r3, #7
 8015512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f023 0307 	bic.w	r3, r3, #7
 801551a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801551c:	68ba      	ldr	r2, [r7, #8]
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	1ad3      	subs	r3, r2, r3
 8015522:	4a1f      	ldr	r2, [pc, #124]	; (80155a0 <prvHeapInit+0xac>)
 8015524:	4413      	add	r3, r2
 8015526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801552c:	4a1d      	ldr	r2, [pc, #116]	; (80155a4 <prvHeapInit+0xb0>)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015532:	4b1c      	ldr	r3, [pc, #112]	; (80155a4 <prvHeapInit+0xb0>)
 8015534:	2200      	movs	r2, #0
 8015536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	68ba      	ldr	r2, [r7, #8]
 801553c:	4413      	add	r3, r2
 801553e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015540:	2208      	movs	r2, #8
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	1a9b      	subs	r3, r3, r2
 8015546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	f023 0307 	bic.w	r3, r3, #7
 801554e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	4a15      	ldr	r2, [pc, #84]	; (80155a8 <prvHeapInit+0xb4>)
 8015554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015556:	4b14      	ldr	r3, [pc, #80]	; (80155a8 <prvHeapInit+0xb4>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2200      	movs	r2, #0
 801555c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801555e:	4b12      	ldr	r3, [pc, #72]	; (80155a8 <prvHeapInit+0xb4>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2200      	movs	r2, #0
 8015564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	68fa      	ldr	r2, [r7, #12]
 801556e:	1ad2      	subs	r2, r2, r3
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015574:	4b0c      	ldr	r3, [pc, #48]	; (80155a8 <prvHeapInit+0xb4>)
 8015576:	681a      	ldr	r2, [r3, #0]
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	4a0a      	ldr	r2, [pc, #40]	; (80155ac <prvHeapInit+0xb8>)
 8015582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	4a09      	ldr	r2, [pc, #36]	; (80155b0 <prvHeapInit+0xbc>)
 801558a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801558c:	4b09      	ldr	r3, [pc, #36]	; (80155b4 <prvHeapInit+0xc0>)
 801558e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015592:	601a      	str	r2, [r3, #0]
}
 8015594:	bf00      	nop
 8015596:	3714      	adds	r7, #20
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr
 80155a0:	200049a4 	.word	0x200049a4
 80155a4:	200085a4 	.word	0x200085a4
 80155a8:	200085ac 	.word	0x200085ac
 80155ac:	200085b4 	.word	0x200085b4
 80155b0:	200085b0 	.word	0x200085b0
 80155b4:	200085b8 	.word	0x200085b8

080155b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80155b8:	b480      	push	{r7}
 80155ba:	b085      	sub	sp, #20
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80155c0:	4b28      	ldr	r3, [pc, #160]	; (8015664 <prvInsertBlockIntoFreeList+0xac>)
 80155c2:	60fb      	str	r3, [r7, #12]
 80155c4:	e002      	b.n	80155cc <prvInsertBlockIntoFreeList+0x14>
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	60fb      	str	r3, [r7, #12]
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	687a      	ldr	r2, [r7, #4]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d8f7      	bhi.n	80155c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	68ba      	ldr	r2, [r7, #8]
 80155e0:	4413      	add	r3, r2
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d108      	bne.n	80155fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	685a      	ldr	r2, [r3, #4]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	441a      	add	r2, r3
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	68ba      	ldr	r2, [r7, #8]
 8015604:	441a      	add	r2, r3
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	429a      	cmp	r2, r3
 801560c:	d118      	bne.n	8015640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	681a      	ldr	r2, [r3, #0]
 8015612:	4b15      	ldr	r3, [pc, #84]	; (8015668 <prvInsertBlockIntoFreeList+0xb0>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	429a      	cmp	r2, r3
 8015618:	d00d      	beq.n	8015636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	685a      	ldr	r2, [r3, #4]
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	441a      	add	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	681a      	ldr	r2, [r3, #0]
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	601a      	str	r2, [r3, #0]
 8015634:	e008      	b.n	8015648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015636:	4b0c      	ldr	r3, [pc, #48]	; (8015668 <prvInsertBlockIntoFreeList+0xb0>)
 8015638:	681a      	ldr	r2, [r3, #0]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	601a      	str	r2, [r3, #0]
 801563e:	e003      	b.n	8015648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681a      	ldr	r2, [r3, #0]
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015648:	68fa      	ldr	r2, [r7, #12]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	429a      	cmp	r2, r3
 801564e:	d002      	beq.n	8015656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	687a      	ldr	r2, [r7, #4]
 8015654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015656:	bf00      	nop
 8015658:	3714      	adds	r7, #20
 801565a:	46bd      	mov	sp, r7
 801565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015660:	4770      	bx	lr
 8015662:	bf00      	nop
 8015664:	200085a4 	.word	0x200085a4
 8015668:	200085ac 	.word	0x200085ac

0801566c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015670:	2200      	movs	r2, #0
 8015672:	4912      	ldr	r1, [pc, #72]	; (80156bc <MX_USB_DEVICE_Init+0x50>)
 8015674:	4812      	ldr	r0, [pc, #72]	; (80156c0 <MX_USB_DEVICE_Init+0x54>)
 8015676:	f7fc f84f 	bl	8011718 <USBD_Init>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d001      	beq.n	8015684 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015680:	f7f0 fb40 	bl	8005d04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015684:	490f      	ldr	r1, [pc, #60]	; (80156c4 <MX_USB_DEVICE_Init+0x58>)
 8015686:	480e      	ldr	r0, [pc, #56]	; (80156c0 <MX_USB_DEVICE_Init+0x54>)
 8015688:	f7fc f87c 	bl	8011784 <USBD_RegisterClass>
 801568c:	4603      	mov	r3, r0
 801568e:	2b00      	cmp	r3, #0
 8015690:	d001      	beq.n	8015696 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015692:	f7f0 fb37 	bl	8005d04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015696:	490c      	ldr	r1, [pc, #48]	; (80156c8 <MX_USB_DEVICE_Init+0x5c>)
 8015698:	4809      	ldr	r0, [pc, #36]	; (80156c0 <MX_USB_DEVICE_Init+0x54>)
 801569a:	f7fb ffa1 	bl	80115e0 <USBD_CDC_RegisterInterface>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d001      	beq.n	80156a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80156a4:	f7f0 fb2e 	bl	8005d04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80156a8:	4805      	ldr	r0, [pc, #20]	; (80156c0 <MX_USB_DEVICE_Init+0x54>)
 80156aa:	f7fc f88c 	bl	80117c6 <USBD_Start>
 80156ae:	4603      	mov	r3, r0
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d001      	beq.n	80156b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80156b4:	f7f0 fb26 	bl	8005d04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80156b8:	bf00      	nop
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	200041c0 	.word	0x200041c0
 80156c0:	20010ea4 	.word	0x20010ea4
 80156c4:	200040a4 	.word	0x200040a4
 80156c8:	200041ac 	.word	0x200041ac

080156cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80156d0:	2200      	movs	r2, #0
 80156d2:	4905      	ldr	r1, [pc, #20]	; (80156e8 <CDC_Init_FS+0x1c>)
 80156d4:	4805      	ldr	r0, [pc, #20]	; (80156ec <CDC_Init_FS+0x20>)
 80156d6:	f7fb ff98 	bl	801160a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80156da:	4905      	ldr	r1, [pc, #20]	; (80156f0 <CDC_Init_FS+0x24>)
 80156dc:	4803      	ldr	r0, [pc, #12]	; (80156ec <CDC_Init_FS+0x20>)
 80156de:	f7fb ffad 	bl	801163c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80156e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	20011374 	.word	0x20011374
 80156ec:	20010ea4 	.word	0x20010ea4
 80156f0:	20011174 	.word	0x20011174

080156f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80156f4:	b480      	push	{r7}
 80156f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80156f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	4603      	mov	r3, r0
 801570c:	6039      	str	r1, [r7, #0]
 801570e:	71fb      	strb	r3, [r7, #7]
 8015710:	4613      	mov	r3, r2
 8015712:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015714:	79fb      	ldrb	r3, [r7, #7]
 8015716:	2b23      	cmp	r3, #35	; 0x23
 8015718:	f200 808c 	bhi.w	8015834 <CDC_Control_FS+0x130>
 801571c:	a201      	add	r2, pc, #4	; (adr r2, 8015724 <CDC_Control_FS+0x20>)
 801571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015722:	bf00      	nop
 8015724:	08015835 	.word	0x08015835
 8015728:	08015835 	.word	0x08015835
 801572c:	08015835 	.word	0x08015835
 8015730:	08015835 	.word	0x08015835
 8015734:	08015835 	.word	0x08015835
 8015738:	08015835 	.word	0x08015835
 801573c:	08015835 	.word	0x08015835
 8015740:	08015835 	.word	0x08015835
 8015744:	08015835 	.word	0x08015835
 8015748:	08015835 	.word	0x08015835
 801574c:	08015835 	.word	0x08015835
 8015750:	08015835 	.word	0x08015835
 8015754:	08015835 	.word	0x08015835
 8015758:	08015835 	.word	0x08015835
 801575c:	08015835 	.word	0x08015835
 8015760:	08015835 	.word	0x08015835
 8015764:	08015835 	.word	0x08015835
 8015768:	08015835 	.word	0x08015835
 801576c:	08015835 	.word	0x08015835
 8015770:	08015835 	.word	0x08015835
 8015774:	08015835 	.word	0x08015835
 8015778:	08015835 	.word	0x08015835
 801577c:	08015835 	.word	0x08015835
 8015780:	08015835 	.word	0x08015835
 8015784:	08015835 	.word	0x08015835
 8015788:	08015835 	.word	0x08015835
 801578c:	08015835 	.word	0x08015835
 8015790:	08015835 	.word	0x08015835
 8015794:	08015835 	.word	0x08015835
 8015798:	08015835 	.word	0x08015835
 801579c:	08015835 	.word	0x08015835
 80157a0:	08015835 	.word	0x08015835
 80157a4:	080157b5 	.word	0x080157b5
 80157a8:	080157ef 	.word	0x080157ef
 80157ac:	08015835 	.word	0x08015835
 80157b0:	08015835 	.word	0x08015835
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	781a      	ldrb	r2, [r3, #0]
 80157b8:	4b22      	ldr	r3, [pc, #136]	; (8015844 <CDC_Control_FS+0x140>)
 80157ba:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	785a      	ldrb	r2, [r3, #1]
 80157c0:	4b20      	ldr	r3, [pc, #128]	; (8015844 <CDC_Control_FS+0x140>)
 80157c2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	789a      	ldrb	r2, [r3, #2]
 80157c8:	4b1e      	ldr	r3, [pc, #120]	; (8015844 <CDC_Control_FS+0x140>)
 80157ca:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	78da      	ldrb	r2, [r3, #3]
 80157d0:	4b1c      	ldr	r3, [pc, #112]	; (8015844 <CDC_Control_FS+0x140>)
 80157d2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	791a      	ldrb	r2, [r3, #4]
 80157d8:	4b1a      	ldr	r3, [pc, #104]	; (8015844 <CDC_Control_FS+0x140>)
 80157da:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	795a      	ldrb	r2, [r3, #5]
 80157e0:	4b18      	ldr	r3, [pc, #96]	; (8015844 <CDC_Control_FS+0x140>)
 80157e2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	799a      	ldrb	r2, [r3, #6]
 80157e8:	4b16      	ldr	r3, [pc, #88]	; (8015844 <CDC_Control_FS+0x140>)
 80157ea:	719a      	strb	r2, [r3, #6]
    	break;
 80157ec:	e023      	b.n	8015836 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80157ee:	4b15      	ldr	r3, [pc, #84]	; (8015844 <CDC_Control_FS+0x140>)
 80157f0:	781a      	ldrb	r2, [r3, #0]
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	3301      	adds	r3, #1
 80157fa:	4a12      	ldr	r2, [pc, #72]	; (8015844 <CDC_Control_FS+0x140>)
 80157fc:	7852      	ldrb	r2, [r2, #1]
 80157fe:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	3302      	adds	r3, #2
 8015804:	4a0f      	ldr	r2, [pc, #60]	; (8015844 <CDC_Control_FS+0x140>)
 8015806:	7892      	ldrb	r2, [r2, #2]
 8015808:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	3303      	adds	r3, #3
 801580e:	4a0d      	ldr	r2, [pc, #52]	; (8015844 <CDC_Control_FS+0x140>)
 8015810:	78d2      	ldrb	r2, [r2, #3]
 8015812:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	3304      	adds	r3, #4
 8015818:	4a0a      	ldr	r2, [pc, #40]	; (8015844 <CDC_Control_FS+0x140>)
 801581a:	7912      	ldrb	r2, [r2, #4]
 801581c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	3305      	adds	r3, #5
 8015822:	4a08      	ldr	r2, [pc, #32]	; (8015844 <CDC_Control_FS+0x140>)
 8015824:	7952      	ldrb	r2, [r2, #5]
 8015826:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	3306      	adds	r3, #6
 801582c:	4a05      	ldr	r2, [pc, #20]	; (8015844 <CDC_Control_FS+0x140>)
 801582e:	7992      	ldrb	r2, [r2, #6]
 8015830:	701a      	strb	r2, [r3, #0]
    break;
 8015832:	e000      	b.n	8015836 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015834:	bf00      	nop
  }

  return (USBD_OK);
 8015836:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015838:	4618      	mov	r0, r3
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr
 8015844:	20011574 	.word	0x20011574

08015848 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	b29b      	uxth	r3, r3
 8015858:	461a      	mov	r2, r3
 801585a:	6879      	ldr	r1, [r7, #4]
 801585c:	4807      	ldr	r0, [pc, #28]	; (801587c <CDC_Receive_FS+0x34>)
 801585e:	f7f0 fae3 	bl	8005e28 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015862:	6879      	ldr	r1, [r7, #4]
 8015864:	4806      	ldr	r0, [pc, #24]	; (8015880 <CDC_Receive_FS+0x38>)
 8015866:	f7fb fee9 	bl	801163c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801586a:	4805      	ldr	r0, [pc, #20]	; (8015880 <CDC_Receive_FS+0x38>)
 801586c:	f7fb ff2a 	bl	80116c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015870:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015872:	4618      	mov	r0, r3
 8015874:	3708      	adds	r7, #8
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
 801587a:	bf00      	nop
 801587c:	20000068 	.word	0x20000068
 8015880:	20010ea4 	.word	0x20010ea4

08015884 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	460b      	mov	r3, r1
 801588e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015890:	2300      	movs	r3, #0
 8015892:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015894:	4b0d      	ldr	r3, [pc, #52]	; (80158cc <CDC_Transmit_FS+0x48>)
 8015896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801589a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d001      	beq.n	80158aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80158a6:	2301      	movs	r3, #1
 80158a8:	e00b      	b.n	80158c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80158aa:	887b      	ldrh	r3, [r7, #2]
 80158ac:	461a      	mov	r2, r3
 80158ae:	6879      	ldr	r1, [r7, #4]
 80158b0:	4806      	ldr	r0, [pc, #24]	; (80158cc <CDC_Transmit_FS+0x48>)
 80158b2:	f7fb feaa 	bl	801160a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80158b6:	4805      	ldr	r0, [pc, #20]	; (80158cc <CDC_Transmit_FS+0x48>)
 80158b8:	f7fb fed4 	bl	8011664 <USBD_CDC_TransmitPacket>
 80158bc:	4603      	mov	r3, r0
 80158be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80158c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3710      	adds	r7, #16
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop
 80158cc:	20010ea4 	.word	0x20010ea4

080158d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b087      	sub	sp, #28
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	4613      	mov	r3, r2
 80158dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80158de:	2300      	movs	r3, #0
 80158e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80158e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	371c      	adds	r7, #28
 80158ea:	46bd      	mov	sp, r7
 80158ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f0:	4770      	bx	lr
	...

080158f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158f4:	b480      	push	{r7}
 80158f6:	b083      	sub	sp, #12
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	4603      	mov	r3, r0
 80158fc:	6039      	str	r1, [r7, #0]
 80158fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	2212      	movs	r2, #18
 8015904:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015906:	4b03      	ldr	r3, [pc, #12]	; (8015914 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015908:	4618      	mov	r0, r3
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr
 8015914:	200041dc 	.word	0x200041dc

08015918 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015918:	b480      	push	{r7}
 801591a:	b083      	sub	sp, #12
 801591c:	af00      	add	r7, sp, #0
 801591e:	4603      	mov	r3, r0
 8015920:	6039      	str	r1, [r7, #0]
 8015922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	2204      	movs	r2, #4
 8015928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801592a:	4b03      	ldr	r3, [pc, #12]	; (8015938 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801592c:	4618      	mov	r0, r3
 801592e:	370c      	adds	r7, #12
 8015930:	46bd      	mov	sp, r7
 8015932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015936:	4770      	bx	lr
 8015938:	200041f0 	.word	0x200041f0

0801593c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	4603      	mov	r3, r0
 8015944:	6039      	str	r1, [r7, #0]
 8015946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015948:	79fb      	ldrb	r3, [r7, #7]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d105      	bne.n	801595a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801594e:	683a      	ldr	r2, [r7, #0]
 8015950:	4907      	ldr	r1, [pc, #28]	; (8015970 <USBD_FS_ProductStrDescriptor+0x34>)
 8015952:	4808      	ldr	r0, [pc, #32]	; (8015974 <USBD_FS_ProductStrDescriptor+0x38>)
 8015954:	f7fc ff14 	bl	8012780 <USBD_GetString>
 8015958:	e004      	b.n	8015964 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801595a:	683a      	ldr	r2, [r7, #0]
 801595c:	4904      	ldr	r1, [pc, #16]	; (8015970 <USBD_FS_ProductStrDescriptor+0x34>)
 801595e:	4805      	ldr	r0, [pc, #20]	; (8015974 <USBD_FS_ProductStrDescriptor+0x38>)
 8015960:	f7fc ff0e 	bl	8012780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015964:	4b02      	ldr	r3, [pc, #8]	; (8015970 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015966:	4618      	mov	r0, r3
 8015968:	3708      	adds	r7, #8
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	2001157c 	.word	0x2001157c
 8015974:	0801c6a4 	.word	0x0801c6a4

08015978 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
 801597e:	4603      	mov	r3, r0
 8015980:	6039      	str	r1, [r7, #0]
 8015982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015984:	683a      	ldr	r2, [r7, #0]
 8015986:	4904      	ldr	r1, [pc, #16]	; (8015998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015988:	4804      	ldr	r0, [pc, #16]	; (801599c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801598a:	f7fc fef9 	bl	8012780 <USBD_GetString>
  return USBD_StrDesc;
 801598e:	4b02      	ldr	r3, [pc, #8]	; (8015998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015990:	4618      	mov	r0, r3
 8015992:	3708      	adds	r7, #8
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}
 8015998:	2001157c 	.word	0x2001157c
 801599c:	0801c6bc 	.word	0x0801c6bc

080159a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4603      	mov	r3, r0
 80159a8:	6039      	str	r1, [r7, #0]
 80159aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	221a      	movs	r2, #26
 80159b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80159b2:	f000 f843 	bl	8015a3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80159b6:	4b02      	ldr	r3, [pc, #8]	; (80159c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	200041f4 	.word	0x200041f4

080159c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b082      	sub	sp, #8
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	4603      	mov	r3, r0
 80159cc:	6039      	str	r1, [r7, #0]
 80159ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80159d0:	79fb      	ldrb	r3, [r7, #7]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d105      	bne.n	80159e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80159d6:	683a      	ldr	r2, [r7, #0]
 80159d8:	4907      	ldr	r1, [pc, #28]	; (80159f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80159da:	4808      	ldr	r0, [pc, #32]	; (80159fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80159dc:	f7fc fed0 	bl	8012780 <USBD_GetString>
 80159e0:	e004      	b.n	80159ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80159e2:	683a      	ldr	r2, [r7, #0]
 80159e4:	4904      	ldr	r1, [pc, #16]	; (80159f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80159e6:	4805      	ldr	r0, [pc, #20]	; (80159fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80159e8:	f7fc feca 	bl	8012780 <USBD_GetString>
  }
  return USBD_StrDesc;
 80159ec:	4b02      	ldr	r3, [pc, #8]	; (80159f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3708      	adds	r7, #8
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	2001157c 	.word	0x2001157c
 80159fc:	0801c6d0 	.word	0x0801c6d0

08015a00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	4603      	mov	r3, r0
 8015a08:	6039      	str	r1, [r7, #0]
 8015a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a0c:	79fb      	ldrb	r3, [r7, #7]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d105      	bne.n	8015a1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015a12:	683a      	ldr	r2, [r7, #0]
 8015a14:	4907      	ldr	r1, [pc, #28]	; (8015a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015a16:	4808      	ldr	r0, [pc, #32]	; (8015a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015a18:	f7fc feb2 	bl	8012780 <USBD_GetString>
 8015a1c:	e004      	b.n	8015a28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015a1e:	683a      	ldr	r2, [r7, #0]
 8015a20:	4904      	ldr	r1, [pc, #16]	; (8015a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015a22:	4805      	ldr	r0, [pc, #20]	; (8015a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015a24:	f7fc feac 	bl	8012780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a28:	4b02      	ldr	r3, [pc, #8]	; (8015a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3708      	adds	r7, #8
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	2001157c 	.word	0x2001157c
 8015a38:	0801c6dc 	.word	0x0801c6dc

08015a3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b084      	sub	sp, #16
 8015a40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015a42:	4b0f      	ldr	r3, [pc, #60]	; (8015a80 <Get_SerialNum+0x44>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015a48:	4b0e      	ldr	r3, [pc, #56]	; (8015a84 <Get_SerialNum+0x48>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015a4e:	4b0e      	ldr	r3, [pc, #56]	; (8015a88 <Get_SerialNum+0x4c>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015a54:	68fa      	ldr	r2, [r7, #12]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	4413      	add	r3, r2
 8015a5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d009      	beq.n	8015a76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015a62:	2208      	movs	r2, #8
 8015a64:	4909      	ldr	r1, [pc, #36]	; (8015a8c <Get_SerialNum+0x50>)
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	f000 f814 	bl	8015a94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015a6c:	2204      	movs	r2, #4
 8015a6e:	4908      	ldr	r1, [pc, #32]	; (8015a90 <Get_SerialNum+0x54>)
 8015a70:	68b8      	ldr	r0, [r7, #8]
 8015a72:	f000 f80f 	bl	8015a94 <IntToUnicode>
  }
}
 8015a76:	bf00      	nop
 8015a78:	3710      	adds	r7, #16
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	1fff7a10 	.word	0x1fff7a10
 8015a84:	1fff7a14 	.word	0x1fff7a14
 8015a88:	1fff7a18 	.word	0x1fff7a18
 8015a8c:	200041f6 	.word	0x200041f6
 8015a90:	20004206 	.word	0x20004206

08015a94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015a94:	b480      	push	{r7}
 8015a96:	b087      	sub	sp, #28
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	60f8      	str	r0, [r7, #12]
 8015a9c:	60b9      	str	r1, [r7, #8]
 8015a9e:	4613      	mov	r3, r2
 8015aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	75fb      	strb	r3, [r7, #23]
 8015aaa:	e027      	b.n	8015afc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	0f1b      	lsrs	r3, r3, #28
 8015ab0:	2b09      	cmp	r3, #9
 8015ab2:	d80b      	bhi.n	8015acc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	0f1b      	lsrs	r3, r3, #28
 8015ab8:	b2da      	uxtb	r2, r3
 8015aba:	7dfb      	ldrb	r3, [r7, #23]
 8015abc:	005b      	lsls	r3, r3, #1
 8015abe:	4619      	mov	r1, r3
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	440b      	add	r3, r1
 8015ac4:	3230      	adds	r2, #48	; 0x30
 8015ac6:	b2d2      	uxtb	r2, r2
 8015ac8:	701a      	strb	r2, [r3, #0]
 8015aca:	e00a      	b.n	8015ae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	0f1b      	lsrs	r3, r3, #28
 8015ad0:	b2da      	uxtb	r2, r3
 8015ad2:	7dfb      	ldrb	r3, [r7, #23]
 8015ad4:	005b      	lsls	r3, r3, #1
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	440b      	add	r3, r1
 8015adc:	3237      	adds	r2, #55	; 0x37
 8015ade:	b2d2      	uxtb	r2, r2
 8015ae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	011b      	lsls	r3, r3, #4
 8015ae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015ae8:	7dfb      	ldrb	r3, [r7, #23]
 8015aea:	005b      	lsls	r3, r3, #1
 8015aec:	3301      	adds	r3, #1
 8015aee:	68ba      	ldr	r2, [r7, #8]
 8015af0:	4413      	add	r3, r2
 8015af2:	2200      	movs	r2, #0
 8015af4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015af6:	7dfb      	ldrb	r3, [r7, #23]
 8015af8:	3301      	adds	r3, #1
 8015afa:	75fb      	strb	r3, [r7, #23]
 8015afc:	7dfa      	ldrb	r2, [r7, #23]
 8015afe:	79fb      	ldrb	r3, [r7, #7]
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d3d3      	bcc.n	8015aac <IntToUnicode+0x18>
  }
}
 8015b04:	bf00      	nop
 8015b06:	bf00      	nop
 8015b08:	371c      	adds	r7, #28
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b10:	4770      	bx	lr
	...

08015b14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b08a      	sub	sp, #40	; 0x28
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b1c:	f107 0314 	add.w	r3, r7, #20
 8015b20:	2200      	movs	r2, #0
 8015b22:	601a      	str	r2, [r3, #0]
 8015b24:	605a      	str	r2, [r3, #4]
 8015b26:	609a      	str	r2, [r3, #8]
 8015b28:	60da      	str	r2, [r3, #12]
 8015b2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015b34:	d13a      	bne.n	8015bac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015b36:	2300      	movs	r3, #0
 8015b38:	613b      	str	r3, [r7, #16]
 8015b3a:	4b1e      	ldr	r3, [pc, #120]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b3e:	4a1d      	ldr	r2, [pc, #116]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b40:	f043 0301 	orr.w	r3, r3, #1
 8015b44:	6313      	str	r3, [r2, #48]	; 0x30
 8015b46:	4b1b      	ldr	r3, [pc, #108]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b4a:	f003 0301 	and.w	r3, r3, #1
 8015b4e:	613b      	str	r3, [r7, #16]
 8015b50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b58:	2302      	movs	r3, #2
 8015b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015b60:	2303      	movs	r3, #3
 8015b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015b64:	230a      	movs	r3, #10
 8015b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015b68:	f107 0314 	add.w	r3, r7, #20
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	4812      	ldr	r0, [pc, #72]	; (8015bb8 <HAL_PCD_MspInit+0xa4>)
 8015b70:	f7f6 fb6e 	bl	800c250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015b74:	4b0f      	ldr	r3, [pc, #60]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b78:	4a0e      	ldr	r2, [pc, #56]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b7e:	6353      	str	r3, [r2, #52]	; 0x34
 8015b80:	2300      	movs	r3, #0
 8015b82:	60fb      	str	r3, [r7, #12]
 8015b84:	4b0b      	ldr	r3, [pc, #44]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b88:	4a0a      	ldr	r2, [pc, #40]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8015b90:	4b08      	ldr	r3, [pc, #32]	; (8015bb4 <HAL_PCD_MspInit+0xa0>)
 8015b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b98:	60fb      	str	r3, [r7, #12]
 8015b9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	2105      	movs	r1, #5
 8015ba0:	2043      	movs	r0, #67	; 0x43
 8015ba2:	f7f5 ff8b 	bl	800babc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015ba6:	2043      	movs	r0, #67	; 0x43
 8015ba8:	f7f5 ffa4 	bl	800baf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015bac:	bf00      	nop
 8015bae:	3728      	adds	r7, #40	; 0x28
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}
 8015bb4:	40023800 	.word	0x40023800
 8015bb8:	40020000 	.word	0x40020000

08015bbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015bd0:	4619      	mov	r1, r3
 8015bd2:	4610      	mov	r0, r2
 8015bd4:	f7fb fe42 	bl	801185c <USBD_LL_SetupStage>
}
 8015bd8:	bf00      	nop
 8015bda:	3708      	adds	r7, #8
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b082      	sub	sp, #8
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	460b      	mov	r3, r1
 8015bea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015bf2:	78fa      	ldrb	r2, [r7, #3]
 8015bf4:	6879      	ldr	r1, [r7, #4]
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	00db      	lsls	r3, r3, #3
 8015bfa:	1a9b      	subs	r3, r3, r2
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	440b      	add	r3, r1
 8015c00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015c04:	681a      	ldr	r2, [r3, #0]
 8015c06:	78fb      	ldrb	r3, [r7, #3]
 8015c08:	4619      	mov	r1, r3
 8015c0a:	f7fb fe7c 	bl	8011906 <USBD_LL_DataOutStage>
}
 8015c0e:	bf00      	nop
 8015c10:	3708      	adds	r7, #8
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bd80      	pop	{r7, pc}

08015c16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c16:	b580      	push	{r7, lr}
 8015c18:	b082      	sub	sp, #8
 8015c1a:	af00      	add	r7, sp, #0
 8015c1c:	6078      	str	r0, [r7, #4]
 8015c1e:	460b      	mov	r3, r1
 8015c20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015c28:	78fa      	ldrb	r2, [r7, #3]
 8015c2a:	6879      	ldr	r1, [r7, #4]
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	00db      	lsls	r3, r3, #3
 8015c30:	1a9b      	subs	r3, r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	440b      	add	r3, r1
 8015c36:	3348      	adds	r3, #72	; 0x48
 8015c38:	681a      	ldr	r2, [r3, #0]
 8015c3a:	78fb      	ldrb	r3, [r7, #3]
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	f7fb fec5 	bl	80119cc <USBD_LL_DataInStage>
}
 8015c42:	bf00      	nop
 8015c44:	3708      	adds	r7, #8
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}

08015c4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c4a:	b580      	push	{r7, lr}
 8015c4c:	b082      	sub	sp, #8
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7fb ffc9 	bl	8011bf0 <USBD_LL_SOF>
}
 8015c5e:	bf00      	nop
 8015c60:	3708      	adds	r7, #8
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c66:	b580      	push	{r7, lr}
 8015c68:	b084      	sub	sp, #16
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015c6e:	2301      	movs	r3, #1
 8015c70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d102      	bne.n	8015c80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	73fb      	strb	r3, [r7, #15]
 8015c7e:	e008      	b.n	8015c92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d102      	bne.n	8015c8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015c88:	2301      	movs	r3, #1
 8015c8a:	73fb      	strb	r3, [r7, #15]
 8015c8c:	e001      	b.n	8015c92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015c8e:	f7f0 f839 	bl	8005d04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c98:	7bfa      	ldrb	r2, [r7, #15]
 8015c9a:	4611      	mov	r1, r2
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7fb ff6c 	bl	8011b7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7fb ff25 	bl	8011af8 <USBD_LL_Reset>
}
 8015cae:	bf00      	nop
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
	...

08015cb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7fb ff67 	bl	8011b9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	687a      	ldr	r2, [r7, #4]
 8015cd8:	6812      	ldr	r2, [r2, #0]
 8015cda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015cde:	f043 0301 	orr.w	r3, r3, #1
 8015ce2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6a1b      	ldr	r3, [r3, #32]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d005      	beq.n	8015cf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015cec:	4b04      	ldr	r3, [pc, #16]	; (8015d00 <HAL_PCD_SuspendCallback+0x48>)
 8015cee:	691b      	ldr	r3, [r3, #16]
 8015cf0:	4a03      	ldr	r2, [pc, #12]	; (8015d00 <HAL_PCD_SuspendCallback+0x48>)
 8015cf2:	f043 0306 	orr.w	r3, r3, #6
 8015cf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015cf8:	bf00      	nop
 8015cfa:	3708      	adds	r7, #8
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	e000ed00 	.word	0xe000ed00

08015d04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7fb ff56 	bl	8011bc4 <USBD_LL_Resume>
}
 8015d18:	bf00      	nop
 8015d1a:	3708      	adds	r7, #8
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}

08015d20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b082      	sub	sp, #8
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	460b      	mov	r3, r1
 8015d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d32:	78fa      	ldrb	r2, [r7, #3]
 8015d34:	4611      	mov	r1, r2
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7fb ff81 	bl	8011c3e <USBD_LL_IsoOUTIncomplete>
}
 8015d3c:	bf00      	nop
 8015d3e:	3708      	adds	r7, #8
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d56:	78fa      	ldrb	r2, [r7, #3]
 8015d58:	4611      	mov	r1, r2
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7fb ff62 	bl	8011c24 <USBD_LL_IsoINIncomplete>
}
 8015d60:	bf00      	nop
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}

08015d68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b082      	sub	sp, #8
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7fb ff6e 	bl	8011c58 <USBD_LL_DevConnected>
}
 8015d7c:	bf00      	nop
 8015d7e:	3708      	adds	r7, #8
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}

08015d84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7fb ff6b 	bl	8011c6e <USBD_LL_DevDisconnected>
}
 8015d98:	bf00      	nop
 8015d9a:	3708      	adds	r7, #8
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}

08015da0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b082      	sub	sp, #8
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	781b      	ldrb	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d13c      	bne.n	8015e2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015db0:	4a20      	ldr	r2, [pc, #128]	; (8015e34 <USBD_LL_Init+0x94>)
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	4a1e      	ldr	r2, [pc, #120]	; (8015e34 <USBD_LL_Init+0x94>)
 8015dbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015dc0:	4b1c      	ldr	r3, [pc, #112]	; (8015e34 <USBD_LL_Init+0x94>)
 8015dc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015dc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015dc8:	4b1a      	ldr	r3, [pc, #104]	; (8015e34 <USBD_LL_Init+0x94>)
 8015dca:	2204      	movs	r2, #4
 8015dcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015dce:	4b19      	ldr	r3, [pc, #100]	; (8015e34 <USBD_LL_Init+0x94>)
 8015dd0:	2202      	movs	r2, #2
 8015dd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015dd4:	4b17      	ldr	r3, [pc, #92]	; (8015e34 <USBD_LL_Init+0x94>)
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015dda:	4b16      	ldr	r3, [pc, #88]	; (8015e34 <USBD_LL_Init+0x94>)
 8015ddc:	2202      	movs	r2, #2
 8015dde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015de0:	4b14      	ldr	r3, [pc, #80]	; (8015e34 <USBD_LL_Init+0x94>)
 8015de2:	2200      	movs	r2, #0
 8015de4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015de6:	4b13      	ldr	r3, [pc, #76]	; (8015e34 <USBD_LL_Init+0x94>)
 8015de8:	2200      	movs	r2, #0
 8015dea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015dec:	4b11      	ldr	r3, [pc, #68]	; (8015e34 <USBD_LL_Init+0x94>)
 8015dee:	2200      	movs	r2, #0
 8015df0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015df2:	4b10      	ldr	r3, [pc, #64]	; (8015e34 <USBD_LL_Init+0x94>)
 8015df4:	2200      	movs	r2, #0
 8015df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015df8:	4b0e      	ldr	r3, [pc, #56]	; (8015e34 <USBD_LL_Init+0x94>)
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015dfe:	480d      	ldr	r0, [pc, #52]	; (8015e34 <USBD_LL_Init+0x94>)
 8015e00:	f7f6 fc32 	bl	800c668 <HAL_PCD_Init>
 8015e04:	4603      	mov	r3, r0
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d001      	beq.n	8015e0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015e0a:	f7ef ff7b 	bl	8005d04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015e0e:	2180      	movs	r1, #128	; 0x80
 8015e10:	4808      	ldr	r0, [pc, #32]	; (8015e34 <USBD_LL_Init+0x94>)
 8015e12:	f7f7 fd90 	bl	800d936 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015e16:	2240      	movs	r2, #64	; 0x40
 8015e18:	2100      	movs	r1, #0
 8015e1a:	4806      	ldr	r0, [pc, #24]	; (8015e34 <USBD_LL_Init+0x94>)
 8015e1c:	f7f7 fd44 	bl	800d8a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015e20:	2280      	movs	r2, #128	; 0x80
 8015e22:	2101      	movs	r1, #1
 8015e24:	4803      	ldr	r0, [pc, #12]	; (8015e34 <USBD_LL_Init+0x94>)
 8015e26:	f7f7 fd3f 	bl	800d8a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	2001177c 	.word	0x2001177c

08015e38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b084      	sub	sp, #16
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e40:	2300      	movs	r3, #0
 8015e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e44:	2300      	movs	r3, #0
 8015e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f6 fd27 	bl	800c8a2 <HAL_PCD_Start>
 8015e54:	4603      	mov	r3, r0
 8015e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e58:	7bfb      	ldrb	r3, [r7, #15]
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f000 f92a 	bl	80160b4 <USBD_Get_USB_Status>
 8015e60:	4603      	mov	r3, r0
 8015e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3710      	adds	r7, #16
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}

08015e6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015e6e:	b580      	push	{r7, lr}
 8015e70:	b084      	sub	sp, #16
 8015e72:	af00      	add	r7, sp, #0
 8015e74:	6078      	str	r0, [r7, #4]
 8015e76:	4608      	mov	r0, r1
 8015e78:	4611      	mov	r1, r2
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	70fb      	strb	r3, [r7, #3]
 8015e80:	460b      	mov	r3, r1
 8015e82:	70bb      	strb	r3, [r7, #2]
 8015e84:	4613      	mov	r3, r2
 8015e86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e96:	78bb      	ldrb	r3, [r7, #2]
 8015e98:	883a      	ldrh	r2, [r7, #0]
 8015e9a:	78f9      	ldrb	r1, [r7, #3]
 8015e9c:	f7f7 f90b 	bl	800d0b6 <HAL_PCD_EP_Open>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ea4:	7bfb      	ldrb	r3, [r7, #15]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f000 f904 	bl	80160b4 <USBD_Get_USB_Status>
 8015eac:	4603      	mov	r3, r0
 8015eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3710      	adds	r7, #16
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}

08015eba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015eba:	b580      	push	{r7, lr}
 8015ebc:	b084      	sub	sp, #16
 8015ebe:	af00      	add	r7, sp, #0
 8015ec0:	6078      	str	r0, [r7, #4]
 8015ec2:	460b      	mov	r3, r1
 8015ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ed4:	78fa      	ldrb	r2, [r7, #3]
 8015ed6:	4611      	mov	r1, r2
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7f7 f954 	bl	800d186 <HAL_PCD_EP_Close>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ee2:	7bfb      	ldrb	r3, [r7, #15]
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f000 f8e5 	bl	80160b4 <USBD_Get_USB_Status>
 8015eea:	4603      	mov	r3, r0
 8015eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3710      	adds	r7, #16
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	460b      	mov	r3, r1
 8015f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f04:	2300      	movs	r3, #0
 8015f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f12:	78fa      	ldrb	r2, [r7, #3]
 8015f14:	4611      	mov	r1, r2
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7f7 fa2c 	bl	800d374 <HAL_PCD_EP_SetStall>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f20:	7bfb      	ldrb	r3, [r7, #15]
 8015f22:	4618      	mov	r0, r3
 8015f24:	f000 f8c6 	bl	80160b4 <USBD_Get_USB_Status>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3710      	adds	r7, #16
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b084      	sub	sp, #16
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	6078      	str	r0, [r7, #4]
 8015f3e:	460b      	mov	r3, r1
 8015f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f42:	2300      	movs	r3, #0
 8015f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f46:	2300      	movs	r3, #0
 8015f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f50:	78fa      	ldrb	r2, [r7, #3]
 8015f52:	4611      	mov	r1, r2
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7f7 fa71 	bl	800d43c <HAL_PCD_EP_ClrStall>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f5e:	7bfb      	ldrb	r3, [r7, #15]
 8015f60:	4618      	mov	r0, r3
 8015f62:	f000 f8a7 	bl	80160b4 <USBD_Get_USB_Status>
 8015f66:	4603      	mov	r3, r0
 8015f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b085      	sub	sp, #20
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	460b      	mov	r3, r1
 8015f7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	da0b      	bge.n	8015fa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015f90:	78fb      	ldrb	r3, [r7, #3]
 8015f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f96:	68f9      	ldr	r1, [r7, #12]
 8015f98:	4613      	mov	r3, r2
 8015f9a:	00db      	lsls	r3, r3, #3
 8015f9c:	1a9b      	subs	r3, r3, r2
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	440b      	add	r3, r1
 8015fa2:	333e      	adds	r3, #62	; 0x3e
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	e00b      	b.n	8015fc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015fa8:	78fb      	ldrb	r3, [r7, #3]
 8015faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fae:	68f9      	ldr	r1, [r7, #12]
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	00db      	lsls	r3, r3, #3
 8015fb4:	1a9b      	subs	r3, r3, r2
 8015fb6:	009b      	lsls	r3, r3, #2
 8015fb8:	440b      	add	r3, r1
 8015fba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015fbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3714      	adds	r7, #20
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fca:	4770      	bx	lr

08015fcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b084      	sub	sp, #16
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
 8015fd4:	460b      	mov	r3, r1
 8015fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015fe6:	78fa      	ldrb	r2, [r7, #3]
 8015fe8:	4611      	mov	r1, r2
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7f7 f83e 	bl	800d06c <HAL_PCD_SetAddress>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ff4:	7bfb      	ldrb	r3, [r7, #15]
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f000 f85c 	bl	80160b4 <USBD_Get_USB_Status>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016000:	7bbb      	ldrb	r3, [r7, #14]
}
 8016002:	4618      	mov	r0, r3
 8016004:	3710      	adds	r7, #16
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}

0801600a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801600a:	b580      	push	{r7, lr}
 801600c:	b086      	sub	sp, #24
 801600e:	af00      	add	r7, sp, #0
 8016010:	60f8      	str	r0, [r7, #12]
 8016012:	607a      	str	r2, [r7, #4]
 8016014:	603b      	str	r3, [r7, #0]
 8016016:	460b      	mov	r3, r1
 8016018:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801601a:	2300      	movs	r3, #0
 801601c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801601e:	2300      	movs	r3, #0
 8016020:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016028:	7af9      	ldrb	r1, [r7, #11]
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	f7f7 f957 	bl	800d2e0 <HAL_PCD_EP_Transmit>
 8016032:	4603      	mov	r3, r0
 8016034:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016036:	7dfb      	ldrb	r3, [r7, #23]
 8016038:	4618      	mov	r0, r3
 801603a:	f000 f83b 	bl	80160b4 <USBD_Get_USB_Status>
 801603e:	4603      	mov	r3, r0
 8016040:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016042:	7dbb      	ldrb	r3, [r7, #22]
}
 8016044:	4618      	mov	r0, r3
 8016046:	3718      	adds	r7, #24
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	607a      	str	r2, [r7, #4]
 8016056:	603b      	str	r3, [r7, #0]
 8016058:	460b      	mov	r3, r1
 801605a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801605c:	2300      	movs	r3, #0
 801605e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016060:	2300      	movs	r3, #0
 8016062:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801606a:	7af9      	ldrb	r1, [r7, #11]
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	687a      	ldr	r2, [r7, #4]
 8016070:	f7f7 f8d3 	bl	800d21a <HAL_PCD_EP_Receive>
 8016074:	4603      	mov	r3, r0
 8016076:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016078:	7dfb      	ldrb	r3, [r7, #23]
 801607a:	4618      	mov	r0, r3
 801607c:	f000 f81a 	bl	80160b4 <USBD_Get_USB_Status>
 8016080:	4603      	mov	r3, r0
 8016082:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016084:	7dbb      	ldrb	r3, [r7, #22]
}
 8016086:	4618      	mov	r0, r3
 8016088:	3718      	adds	r7, #24
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b082      	sub	sp, #8
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
 8016096:	460b      	mov	r3, r1
 8016098:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80160a0:	78fa      	ldrb	r2, [r7, #3]
 80160a2:	4611      	mov	r1, r2
 80160a4:	4618      	mov	r0, r3
 80160a6:	f7f7 f903 	bl	800d2b0 <HAL_PCD_EP_GetRxCount>
 80160aa:	4603      	mov	r3, r0
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	3708      	adds	r7, #8
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80160b4:	b480      	push	{r7}
 80160b6:	b085      	sub	sp, #20
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	4603      	mov	r3, r0
 80160bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160be:	2300      	movs	r3, #0
 80160c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80160c2:	79fb      	ldrb	r3, [r7, #7]
 80160c4:	2b03      	cmp	r3, #3
 80160c6:	d817      	bhi.n	80160f8 <USBD_Get_USB_Status+0x44>
 80160c8:	a201      	add	r2, pc, #4	; (adr r2, 80160d0 <USBD_Get_USB_Status+0x1c>)
 80160ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ce:	bf00      	nop
 80160d0:	080160e1 	.word	0x080160e1
 80160d4:	080160e7 	.word	0x080160e7
 80160d8:	080160ed 	.word	0x080160ed
 80160dc:	080160f3 	.word	0x080160f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80160e0:	2300      	movs	r3, #0
 80160e2:	73fb      	strb	r3, [r7, #15]
    break;
 80160e4:	e00b      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80160e6:	2303      	movs	r3, #3
 80160e8:	73fb      	strb	r3, [r7, #15]
    break;
 80160ea:	e008      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80160ec:	2301      	movs	r3, #1
 80160ee:	73fb      	strb	r3, [r7, #15]
    break;
 80160f0:	e005      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80160f2:	2303      	movs	r3, #3
 80160f4:	73fb      	strb	r3, [r7, #15]
    break;
 80160f6:	e002      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80160f8:	2303      	movs	r3, #3
 80160fa:	73fb      	strb	r3, [r7, #15]
    break;
 80160fc:	bf00      	nop
  }
  return usb_status;
 80160fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016100:	4618      	mov	r0, r3
 8016102:	3714      	adds	r7, #20
 8016104:	46bd      	mov	sp, r7
 8016106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610a:	4770      	bx	lr

0801610c <__errno>:
 801610c:	4b01      	ldr	r3, [pc, #4]	; (8016114 <__errno+0x8>)
 801610e:	6818      	ldr	r0, [r3, #0]
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop
 8016114:	20004210 	.word	0x20004210

08016118 <__libc_init_array>:
 8016118:	b570      	push	{r4, r5, r6, lr}
 801611a:	4d0d      	ldr	r5, [pc, #52]	; (8016150 <__libc_init_array+0x38>)
 801611c:	4c0d      	ldr	r4, [pc, #52]	; (8016154 <__libc_init_array+0x3c>)
 801611e:	1b64      	subs	r4, r4, r5
 8016120:	10a4      	asrs	r4, r4, #2
 8016122:	2600      	movs	r6, #0
 8016124:	42a6      	cmp	r6, r4
 8016126:	d109      	bne.n	801613c <__libc_init_array+0x24>
 8016128:	4d0b      	ldr	r5, [pc, #44]	; (8016158 <__libc_init_array+0x40>)
 801612a:	4c0c      	ldr	r4, [pc, #48]	; (801615c <__libc_init_array+0x44>)
 801612c:	f006 f972 	bl	801c414 <_init>
 8016130:	1b64      	subs	r4, r4, r5
 8016132:	10a4      	asrs	r4, r4, #2
 8016134:	2600      	movs	r6, #0
 8016136:	42a6      	cmp	r6, r4
 8016138:	d105      	bne.n	8016146 <__libc_init_array+0x2e>
 801613a:	bd70      	pop	{r4, r5, r6, pc}
 801613c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016140:	4798      	blx	r3
 8016142:	3601      	adds	r6, #1
 8016144:	e7ee      	b.n	8016124 <__libc_init_array+0xc>
 8016146:	f855 3b04 	ldr.w	r3, [r5], #4
 801614a:	4798      	blx	r3
 801614c:	3601      	adds	r6, #1
 801614e:	e7f2      	b.n	8016136 <__libc_init_array+0x1e>
 8016150:	0801ce18 	.word	0x0801ce18
 8016154:	0801ce18 	.word	0x0801ce18
 8016158:	0801ce18 	.word	0x0801ce18
 801615c:	0801ce1c 	.word	0x0801ce1c

08016160 <malloc>:
 8016160:	4b02      	ldr	r3, [pc, #8]	; (801616c <malloc+0xc>)
 8016162:	4601      	mov	r1, r0
 8016164:	6818      	ldr	r0, [r3, #0]
 8016166:	f000 b88b 	b.w	8016280 <_malloc_r>
 801616a:	bf00      	nop
 801616c:	20004210 	.word	0x20004210

08016170 <free>:
 8016170:	4b02      	ldr	r3, [pc, #8]	; (801617c <free+0xc>)
 8016172:	4601      	mov	r1, r0
 8016174:	6818      	ldr	r0, [r3, #0]
 8016176:	f000 b833 	b.w	80161e0 <_free_r>
 801617a:	bf00      	nop
 801617c:	20004210 	.word	0x20004210

08016180 <memcpy>:
 8016180:	440a      	add	r2, r1
 8016182:	4291      	cmp	r1, r2
 8016184:	f100 33ff 	add.w	r3, r0, #4294967295
 8016188:	d100      	bne.n	801618c <memcpy+0xc>
 801618a:	4770      	bx	lr
 801618c:	b510      	push	{r4, lr}
 801618e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016196:	4291      	cmp	r1, r2
 8016198:	d1f9      	bne.n	801618e <memcpy+0xe>
 801619a:	bd10      	pop	{r4, pc}

0801619c <memmove>:
 801619c:	4288      	cmp	r0, r1
 801619e:	b510      	push	{r4, lr}
 80161a0:	eb01 0402 	add.w	r4, r1, r2
 80161a4:	d902      	bls.n	80161ac <memmove+0x10>
 80161a6:	4284      	cmp	r4, r0
 80161a8:	4623      	mov	r3, r4
 80161aa:	d807      	bhi.n	80161bc <memmove+0x20>
 80161ac:	1e43      	subs	r3, r0, #1
 80161ae:	42a1      	cmp	r1, r4
 80161b0:	d008      	beq.n	80161c4 <memmove+0x28>
 80161b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80161ba:	e7f8      	b.n	80161ae <memmove+0x12>
 80161bc:	4402      	add	r2, r0
 80161be:	4601      	mov	r1, r0
 80161c0:	428a      	cmp	r2, r1
 80161c2:	d100      	bne.n	80161c6 <memmove+0x2a>
 80161c4:	bd10      	pop	{r4, pc}
 80161c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161ce:	e7f7      	b.n	80161c0 <memmove+0x24>

080161d0 <memset>:
 80161d0:	4402      	add	r2, r0
 80161d2:	4603      	mov	r3, r0
 80161d4:	4293      	cmp	r3, r2
 80161d6:	d100      	bne.n	80161da <memset+0xa>
 80161d8:	4770      	bx	lr
 80161da:	f803 1b01 	strb.w	r1, [r3], #1
 80161de:	e7f9      	b.n	80161d4 <memset+0x4>

080161e0 <_free_r>:
 80161e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161e2:	2900      	cmp	r1, #0
 80161e4:	d048      	beq.n	8016278 <_free_r+0x98>
 80161e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161ea:	9001      	str	r0, [sp, #4]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	f1a1 0404 	sub.w	r4, r1, #4
 80161f2:	bfb8      	it	lt
 80161f4:	18e4      	addlt	r4, r4, r3
 80161f6:	f003 f835 	bl	8019264 <__malloc_lock>
 80161fa:	4a20      	ldr	r2, [pc, #128]	; (801627c <_free_r+0x9c>)
 80161fc:	9801      	ldr	r0, [sp, #4]
 80161fe:	6813      	ldr	r3, [r2, #0]
 8016200:	4615      	mov	r5, r2
 8016202:	b933      	cbnz	r3, 8016212 <_free_r+0x32>
 8016204:	6063      	str	r3, [r4, #4]
 8016206:	6014      	str	r4, [r2, #0]
 8016208:	b003      	add	sp, #12
 801620a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801620e:	f003 b82f 	b.w	8019270 <__malloc_unlock>
 8016212:	42a3      	cmp	r3, r4
 8016214:	d90b      	bls.n	801622e <_free_r+0x4e>
 8016216:	6821      	ldr	r1, [r4, #0]
 8016218:	1862      	adds	r2, r4, r1
 801621a:	4293      	cmp	r3, r2
 801621c:	bf04      	itt	eq
 801621e:	681a      	ldreq	r2, [r3, #0]
 8016220:	685b      	ldreq	r3, [r3, #4]
 8016222:	6063      	str	r3, [r4, #4]
 8016224:	bf04      	itt	eq
 8016226:	1852      	addeq	r2, r2, r1
 8016228:	6022      	streq	r2, [r4, #0]
 801622a:	602c      	str	r4, [r5, #0]
 801622c:	e7ec      	b.n	8016208 <_free_r+0x28>
 801622e:	461a      	mov	r2, r3
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	b10b      	cbz	r3, 8016238 <_free_r+0x58>
 8016234:	42a3      	cmp	r3, r4
 8016236:	d9fa      	bls.n	801622e <_free_r+0x4e>
 8016238:	6811      	ldr	r1, [r2, #0]
 801623a:	1855      	adds	r5, r2, r1
 801623c:	42a5      	cmp	r5, r4
 801623e:	d10b      	bne.n	8016258 <_free_r+0x78>
 8016240:	6824      	ldr	r4, [r4, #0]
 8016242:	4421      	add	r1, r4
 8016244:	1854      	adds	r4, r2, r1
 8016246:	42a3      	cmp	r3, r4
 8016248:	6011      	str	r1, [r2, #0]
 801624a:	d1dd      	bne.n	8016208 <_free_r+0x28>
 801624c:	681c      	ldr	r4, [r3, #0]
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	6053      	str	r3, [r2, #4]
 8016252:	4421      	add	r1, r4
 8016254:	6011      	str	r1, [r2, #0]
 8016256:	e7d7      	b.n	8016208 <_free_r+0x28>
 8016258:	d902      	bls.n	8016260 <_free_r+0x80>
 801625a:	230c      	movs	r3, #12
 801625c:	6003      	str	r3, [r0, #0]
 801625e:	e7d3      	b.n	8016208 <_free_r+0x28>
 8016260:	6825      	ldr	r5, [r4, #0]
 8016262:	1961      	adds	r1, r4, r5
 8016264:	428b      	cmp	r3, r1
 8016266:	bf04      	itt	eq
 8016268:	6819      	ldreq	r1, [r3, #0]
 801626a:	685b      	ldreq	r3, [r3, #4]
 801626c:	6063      	str	r3, [r4, #4]
 801626e:	bf04      	itt	eq
 8016270:	1949      	addeq	r1, r1, r5
 8016272:	6021      	streq	r1, [r4, #0]
 8016274:	6054      	str	r4, [r2, #4]
 8016276:	e7c7      	b.n	8016208 <_free_r+0x28>
 8016278:	b003      	add	sp, #12
 801627a:	bd30      	pop	{r4, r5, pc}
 801627c:	200085bc 	.word	0x200085bc

08016280 <_malloc_r>:
 8016280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016282:	1ccd      	adds	r5, r1, #3
 8016284:	f025 0503 	bic.w	r5, r5, #3
 8016288:	3508      	adds	r5, #8
 801628a:	2d0c      	cmp	r5, #12
 801628c:	bf38      	it	cc
 801628e:	250c      	movcc	r5, #12
 8016290:	2d00      	cmp	r5, #0
 8016292:	4606      	mov	r6, r0
 8016294:	db01      	blt.n	801629a <_malloc_r+0x1a>
 8016296:	42a9      	cmp	r1, r5
 8016298:	d903      	bls.n	80162a2 <_malloc_r+0x22>
 801629a:	230c      	movs	r3, #12
 801629c:	6033      	str	r3, [r6, #0]
 801629e:	2000      	movs	r0, #0
 80162a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162a2:	f002 ffdf 	bl	8019264 <__malloc_lock>
 80162a6:	4921      	ldr	r1, [pc, #132]	; (801632c <_malloc_r+0xac>)
 80162a8:	680a      	ldr	r2, [r1, #0]
 80162aa:	4614      	mov	r4, r2
 80162ac:	b99c      	cbnz	r4, 80162d6 <_malloc_r+0x56>
 80162ae:	4f20      	ldr	r7, [pc, #128]	; (8016330 <_malloc_r+0xb0>)
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	b923      	cbnz	r3, 80162be <_malloc_r+0x3e>
 80162b4:	4621      	mov	r1, r4
 80162b6:	4630      	mov	r0, r6
 80162b8:	f000 feb6 	bl	8017028 <_sbrk_r>
 80162bc:	6038      	str	r0, [r7, #0]
 80162be:	4629      	mov	r1, r5
 80162c0:	4630      	mov	r0, r6
 80162c2:	f000 feb1 	bl	8017028 <_sbrk_r>
 80162c6:	1c43      	adds	r3, r0, #1
 80162c8:	d123      	bne.n	8016312 <_malloc_r+0x92>
 80162ca:	230c      	movs	r3, #12
 80162cc:	6033      	str	r3, [r6, #0]
 80162ce:	4630      	mov	r0, r6
 80162d0:	f002 ffce 	bl	8019270 <__malloc_unlock>
 80162d4:	e7e3      	b.n	801629e <_malloc_r+0x1e>
 80162d6:	6823      	ldr	r3, [r4, #0]
 80162d8:	1b5b      	subs	r3, r3, r5
 80162da:	d417      	bmi.n	801630c <_malloc_r+0x8c>
 80162dc:	2b0b      	cmp	r3, #11
 80162de:	d903      	bls.n	80162e8 <_malloc_r+0x68>
 80162e0:	6023      	str	r3, [r4, #0]
 80162e2:	441c      	add	r4, r3
 80162e4:	6025      	str	r5, [r4, #0]
 80162e6:	e004      	b.n	80162f2 <_malloc_r+0x72>
 80162e8:	6863      	ldr	r3, [r4, #4]
 80162ea:	42a2      	cmp	r2, r4
 80162ec:	bf0c      	ite	eq
 80162ee:	600b      	streq	r3, [r1, #0]
 80162f0:	6053      	strne	r3, [r2, #4]
 80162f2:	4630      	mov	r0, r6
 80162f4:	f002 ffbc 	bl	8019270 <__malloc_unlock>
 80162f8:	f104 000b 	add.w	r0, r4, #11
 80162fc:	1d23      	adds	r3, r4, #4
 80162fe:	f020 0007 	bic.w	r0, r0, #7
 8016302:	1ac2      	subs	r2, r0, r3
 8016304:	d0cc      	beq.n	80162a0 <_malloc_r+0x20>
 8016306:	1a1b      	subs	r3, r3, r0
 8016308:	50a3      	str	r3, [r4, r2]
 801630a:	e7c9      	b.n	80162a0 <_malloc_r+0x20>
 801630c:	4622      	mov	r2, r4
 801630e:	6864      	ldr	r4, [r4, #4]
 8016310:	e7cc      	b.n	80162ac <_malloc_r+0x2c>
 8016312:	1cc4      	adds	r4, r0, #3
 8016314:	f024 0403 	bic.w	r4, r4, #3
 8016318:	42a0      	cmp	r0, r4
 801631a:	d0e3      	beq.n	80162e4 <_malloc_r+0x64>
 801631c:	1a21      	subs	r1, r4, r0
 801631e:	4630      	mov	r0, r6
 8016320:	f000 fe82 	bl	8017028 <_sbrk_r>
 8016324:	3001      	adds	r0, #1
 8016326:	d1dd      	bne.n	80162e4 <_malloc_r+0x64>
 8016328:	e7cf      	b.n	80162ca <_malloc_r+0x4a>
 801632a:	bf00      	nop
 801632c:	200085bc 	.word	0x200085bc
 8016330:	200085c0 	.word	0x200085c0

08016334 <__cvt>:
 8016334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016338:	ec55 4b10 	vmov	r4, r5, d0
 801633c:	2d00      	cmp	r5, #0
 801633e:	460e      	mov	r6, r1
 8016340:	4619      	mov	r1, r3
 8016342:	462b      	mov	r3, r5
 8016344:	bfbb      	ittet	lt
 8016346:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801634a:	461d      	movlt	r5, r3
 801634c:	2300      	movge	r3, #0
 801634e:	232d      	movlt	r3, #45	; 0x2d
 8016350:	700b      	strb	r3, [r1, #0]
 8016352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016354:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016358:	4691      	mov	r9, r2
 801635a:	f023 0820 	bic.w	r8, r3, #32
 801635e:	bfbc      	itt	lt
 8016360:	4622      	movlt	r2, r4
 8016362:	4614      	movlt	r4, r2
 8016364:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016368:	d005      	beq.n	8016376 <__cvt+0x42>
 801636a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801636e:	d100      	bne.n	8016372 <__cvt+0x3e>
 8016370:	3601      	adds	r6, #1
 8016372:	2102      	movs	r1, #2
 8016374:	e000      	b.n	8016378 <__cvt+0x44>
 8016376:	2103      	movs	r1, #3
 8016378:	ab03      	add	r3, sp, #12
 801637a:	9301      	str	r3, [sp, #4]
 801637c:	ab02      	add	r3, sp, #8
 801637e:	9300      	str	r3, [sp, #0]
 8016380:	ec45 4b10 	vmov	d0, r4, r5
 8016384:	4653      	mov	r3, sl
 8016386:	4632      	mov	r2, r6
 8016388:	f001 fdfa 	bl	8017f80 <_dtoa_r>
 801638c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016390:	4607      	mov	r7, r0
 8016392:	d102      	bne.n	801639a <__cvt+0x66>
 8016394:	f019 0f01 	tst.w	r9, #1
 8016398:	d022      	beq.n	80163e0 <__cvt+0xac>
 801639a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801639e:	eb07 0906 	add.w	r9, r7, r6
 80163a2:	d110      	bne.n	80163c6 <__cvt+0x92>
 80163a4:	783b      	ldrb	r3, [r7, #0]
 80163a6:	2b30      	cmp	r3, #48	; 0x30
 80163a8:	d10a      	bne.n	80163c0 <__cvt+0x8c>
 80163aa:	2200      	movs	r2, #0
 80163ac:	2300      	movs	r3, #0
 80163ae:	4620      	mov	r0, r4
 80163b0:	4629      	mov	r1, r5
 80163b2:	f7ea fb89 	bl	8000ac8 <__aeabi_dcmpeq>
 80163b6:	b918      	cbnz	r0, 80163c0 <__cvt+0x8c>
 80163b8:	f1c6 0601 	rsb	r6, r6, #1
 80163bc:	f8ca 6000 	str.w	r6, [sl]
 80163c0:	f8da 3000 	ldr.w	r3, [sl]
 80163c4:	4499      	add	r9, r3
 80163c6:	2200      	movs	r2, #0
 80163c8:	2300      	movs	r3, #0
 80163ca:	4620      	mov	r0, r4
 80163cc:	4629      	mov	r1, r5
 80163ce:	f7ea fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80163d2:	b108      	cbz	r0, 80163d8 <__cvt+0xa4>
 80163d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80163d8:	2230      	movs	r2, #48	; 0x30
 80163da:	9b03      	ldr	r3, [sp, #12]
 80163dc:	454b      	cmp	r3, r9
 80163de:	d307      	bcc.n	80163f0 <__cvt+0xbc>
 80163e0:	9b03      	ldr	r3, [sp, #12]
 80163e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80163e4:	1bdb      	subs	r3, r3, r7
 80163e6:	4638      	mov	r0, r7
 80163e8:	6013      	str	r3, [r2, #0]
 80163ea:	b004      	add	sp, #16
 80163ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f0:	1c59      	adds	r1, r3, #1
 80163f2:	9103      	str	r1, [sp, #12]
 80163f4:	701a      	strb	r2, [r3, #0]
 80163f6:	e7f0      	b.n	80163da <__cvt+0xa6>

080163f8 <__exponent>:
 80163f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163fa:	4603      	mov	r3, r0
 80163fc:	2900      	cmp	r1, #0
 80163fe:	bfb8      	it	lt
 8016400:	4249      	neglt	r1, r1
 8016402:	f803 2b02 	strb.w	r2, [r3], #2
 8016406:	bfb4      	ite	lt
 8016408:	222d      	movlt	r2, #45	; 0x2d
 801640a:	222b      	movge	r2, #43	; 0x2b
 801640c:	2909      	cmp	r1, #9
 801640e:	7042      	strb	r2, [r0, #1]
 8016410:	dd2a      	ble.n	8016468 <__exponent+0x70>
 8016412:	f10d 0407 	add.w	r4, sp, #7
 8016416:	46a4      	mov	ip, r4
 8016418:	270a      	movs	r7, #10
 801641a:	46a6      	mov	lr, r4
 801641c:	460a      	mov	r2, r1
 801641e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016422:	fb07 1516 	mls	r5, r7, r6, r1
 8016426:	3530      	adds	r5, #48	; 0x30
 8016428:	2a63      	cmp	r2, #99	; 0x63
 801642a:	f104 34ff 	add.w	r4, r4, #4294967295
 801642e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016432:	4631      	mov	r1, r6
 8016434:	dcf1      	bgt.n	801641a <__exponent+0x22>
 8016436:	3130      	adds	r1, #48	; 0x30
 8016438:	f1ae 0502 	sub.w	r5, lr, #2
 801643c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016440:	1c44      	adds	r4, r0, #1
 8016442:	4629      	mov	r1, r5
 8016444:	4561      	cmp	r1, ip
 8016446:	d30a      	bcc.n	801645e <__exponent+0x66>
 8016448:	f10d 0209 	add.w	r2, sp, #9
 801644c:	eba2 020e 	sub.w	r2, r2, lr
 8016450:	4565      	cmp	r5, ip
 8016452:	bf88      	it	hi
 8016454:	2200      	movhi	r2, #0
 8016456:	4413      	add	r3, r2
 8016458:	1a18      	subs	r0, r3, r0
 801645a:	b003      	add	sp, #12
 801645c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801645e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016462:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016466:	e7ed      	b.n	8016444 <__exponent+0x4c>
 8016468:	2330      	movs	r3, #48	; 0x30
 801646a:	3130      	adds	r1, #48	; 0x30
 801646c:	7083      	strb	r3, [r0, #2]
 801646e:	70c1      	strb	r1, [r0, #3]
 8016470:	1d03      	adds	r3, r0, #4
 8016472:	e7f1      	b.n	8016458 <__exponent+0x60>

08016474 <_printf_float>:
 8016474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016478:	ed2d 8b02 	vpush	{d8}
 801647c:	b08d      	sub	sp, #52	; 0x34
 801647e:	460c      	mov	r4, r1
 8016480:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016484:	4616      	mov	r6, r2
 8016486:	461f      	mov	r7, r3
 8016488:	4605      	mov	r5, r0
 801648a:	f002 fed5 	bl	8019238 <_localeconv_r>
 801648e:	f8d0 a000 	ldr.w	sl, [r0]
 8016492:	4650      	mov	r0, sl
 8016494:	f7e9 fe9c 	bl	80001d0 <strlen>
 8016498:	2300      	movs	r3, #0
 801649a:	930a      	str	r3, [sp, #40]	; 0x28
 801649c:	6823      	ldr	r3, [r4, #0]
 801649e:	9305      	str	r3, [sp, #20]
 80164a0:	f8d8 3000 	ldr.w	r3, [r8]
 80164a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80164a8:	3307      	adds	r3, #7
 80164aa:	f023 0307 	bic.w	r3, r3, #7
 80164ae:	f103 0208 	add.w	r2, r3, #8
 80164b2:	f8c8 2000 	str.w	r2, [r8]
 80164b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80164be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80164c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80164c6:	9307      	str	r3, [sp, #28]
 80164c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80164cc:	ee08 0a10 	vmov	s16, r0
 80164d0:	4b9f      	ldr	r3, [pc, #636]	; (8016750 <_printf_float+0x2dc>)
 80164d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80164d6:	f04f 32ff 	mov.w	r2, #4294967295
 80164da:	f7ea fb27 	bl	8000b2c <__aeabi_dcmpun>
 80164de:	bb88      	cbnz	r0, 8016544 <_printf_float+0xd0>
 80164e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80164e4:	4b9a      	ldr	r3, [pc, #616]	; (8016750 <_printf_float+0x2dc>)
 80164e6:	f04f 32ff 	mov.w	r2, #4294967295
 80164ea:	f7ea fb01 	bl	8000af0 <__aeabi_dcmple>
 80164ee:	bb48      	cbnz	r0, 8016544 <_printf_float+0xd0>
 80164f0:	2200      	movs	r2, #0
 80164f2:	2300      	movs	r3, #0
 80164f4:	4640      	mov	r0, r8
 80164f6:	4649      	mov	r1, r9
 80164f8:	f7ea faf0 	bl	8000adc <__aeabi_dcmplt>
 80164fc:	b110      	cbz	r0, 8016504 <_printf_float+0x90>
 80164fe:	232d      	movs	r3, #45	; 0x2d
 8016500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016504:	4b93      	ldr	r3, [pc, #588]	; (8016754 <_printf_float+0x2e0>)
 8016506:	4894      	ldr	r0, [pc, #592]	; (8016758 <_printf_float+0x2e4>)
 8016508:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801650c:	bf94      	ite	ls
 801650e:	4698      	movls	r8, r3
 8016510:	4680      	movhi	r8, r0
 8016512:	2303      	movs	r3, #3
 8016514:	6123      	str	r3, [r4, #16]
 8016516:	9b05      	ldr	r3, [sp, #20]
 8016518:	f023 0204 	bic.w	r2, r3, #4
 801651c:	6022      	str	r2, [r4, #0]
 801651e:	f04f 0900 	mov.w	r9, #0
 8016522:	9700      	str	r7, [sp, #0]
 8016524:	4633      	mov	r3, r6
 8016526:	aa0b      	add	r2, sp, #44	; 0x2c
 8016528:	4621      	mov	r1, r4
 801652a:	4628      	mov	r0, r5
 801652c:	f000 f9d8 	bl	80168e0 <_printf_common>
 8016530:	3001      	adds	r0, #1
 8016532:	f040 8090 	bne.w	8016656 <_printf_float+0x1e2>
 8016536:	f04f 30ff 	mov.w	r0, #4294967295
 801653a:	b00d      	add	sp, #52	; 0x34
 801653c:	ecbd 8b02 	vpop	{d8}
 8016540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016544:	4642      	mov	r2, r8
 8016546:	464b      	mov	r3, r9
 8016548:	4640      	mov	r0, r8
 801654a:	4649      	mov	r1, r9
 801654c:	f7ea faee 	bl	8000b2c <__aeabi_dcmpun>
 8016550:	b140      	cbz	r0, 8016564 <_printf_float+0xf0>
 8016552:	464b      	mov	r3, r9
 8016554:	2b00      	cmp	r3, #0
 8016556:	bfbc      	itt	lt
 8016558:	232d      	movlt	r3, #45	; 0x2d
 801655a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801655e:	487f      	ldr	r0, [pc, #508]	; (801675c <_printf_float+0x2e8>)
 8016560:	4b7f      	ldr	r3, [pc, #508]	; (8016760 <_printf_float+0x2ec>)
 8016562:	e7d1      	b.n	8016508 <_printf_float+0x94>
 8016564:	6863      	ldr	r3, [r4, #4]
 8016566:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801656a:	9206      	str	r2, [sp, #24]
 801656c:	1c5a      	adds	r2, r3, #1
 801656e:	d13f      	bne.n	80165f0 <_printf_float+0x17c>
 8016570:	2306      	movs	r3, #6
 8016572:	6063      	str	r3, [r4, #4]
 8016574:	9b05      	ldr	r3, [sp, #20]
 8016576:	6861      	ldr	r1, [r4, #4]
 8016578:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801657c:	2300      	movs	r3, #0
 801657e:	9303      	str	r3, [sp, #12]
 8016580:	ab0a      	add	r3, sp, #40	; 0x28
 8016582:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016586:	ab09      	add	r3, sp, #36	; 0x24
 8016588:	ec49 8b10 	vmov	d0, r8, r9
 801658c:	9300      	str	r3, [sp, #0]
 801658e:	6022      	str	r2, [r4, #0]
 8016590:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016594:	4628      	mov	r0, r5
 8016596:	f7ff fecd 	bl	8016334 <__cvt>
 801659a:	9b06      	ldr	r3, [sp, #24]
 801659c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801659e:	2b47      	cmp	r3, #71	; 0x47
 80165a0:	4680      	mov	r8, r0
 80165a2:	d108      	bne.n	80165b6 <_printf_float+0x142>
 80165a4:	1cc8      	adds	r0, r1, #3
 80165a6:	db02      	blt.n	80165ae <_printf_float+0x13a>
 80165a8:	6863      	ldr	r3, [r4, #4]
 80165aa:	4299      	cmp	r1, r3
 80165ac:	dd41      	ble.n	8016632 <_printf_float+0x1be>
 80165ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80165b2:	fa5f fb8b 	uxtb.w	fp, fp
 80165b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80165ba:	d820      	bhi.n	80165fe <_printf_float+0x18a>
 80165bc:	3901      	subs	r1, #1
 80165be:	465a      	mov	r2, fp
 80165c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80165c4:	9109      	str	r1, [sp, #36]	; 0x24
 80165c6:	f7ff ff17 	bl	80163f8 <__exponent>
 80165ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165cc:	1813      	adds	r3, r2, r0
 80165ce:	2a01      	cmp	r2, #1
 80165d0:	4681      	mov	r9, r0
 80165d2:	6123      	str	r3, [r4, #16]
 80165d4:	dc02      	bgt.n	80165dc <_printf_float+0x168>
 80165d6:	6822      	ldr	r2, [r4, #0]
 80165d8:	07d2      	lsls	r2, r2, #31
 80165da:	d501      	bpl.n	80165e0 <_printf_float+0x16c>
 80165dc:	3301      	adds	r3, #1
 80165de:	6123      	str	r3, [r4, #16]
 80165e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d09c      	beq.n	8016522 <_printf_float+0xae>
 80165e8:	232d      	movs	r3, #45	; 0x2d
 80165ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165ee:	e798      	b.n	8016522 <_printf_float+0xae>
 80165f0:	9a06      	ldr	r2, [sp, #24]
 80165f2:	2a47      	cmp	r2, #71	; 0x47
 80165f4:	d1be      	bne.n	8016574 <_printf_float+0x100>
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d1bc      	bne.n	8016574 <_printf_float+0x100>
 80165fa:	2301      	movs	r3, #1
 80165fc:	e7b9      	b.n	8016572 <_printf_float+0xfe>
 80165fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016602:	d118      	bne.n	8016636 <_printf_float+0x1c2>
 8016604:	2900      	cmp	r1, #0
 8016606:	6863      	ldr	r3, [r4, #4]
 8016608:	dd0b      	ble.n	8016622 <_printf_float+0x1ae>
 801660a:	6121      	str	r1, [r4, #16]
 801660c:	b913      	cbnz	r3, 8016614 <_printf_float+0x1a0>
 801660e:	6822      	ldr	r2, [r4, #0]
 8016610:	07d0      	lsls	r0, r2, #31
 8016612:	d502      	bpl.n	801661a <_printf_float+0x1a6>
 8016614:	3301      	adds	r3, #1
 8016616:	440b      	add	r3, r1
 8016618:	6123      	str	r3, [r4, #16]
 801661a:	65a1      	str	r1, [r4, #88]	; 0x58
 801661c:	f04f 0900 	mov.w	r9, #0
 8016620:	e7de      	b.n	80165e0 <_printf_float+0x16c>
 8016622:	b913      	cbnz	r3, 801662a <_printf_float+0x1b6>
 8016624:	6822      	ldr	r2, [r4, #0]
 8016626:	07d2      	lsls	r2, r2, #31
 8016628:	d501      	bpl.n	801662e <_printf_float+0x1ba>
 801662a:	3302      	adds	r3, #2
 801662c:	e7f4      	b.n	8016618 <_printf_float+0x1a4>
 801662e:	2301      	movs	r3, #1
 8016630:	e7f2      	b.n	8016618 <_printf_float+0x1a4>
 8016632:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016638:	4299      	cmp	r1, r3
 801663a:	db05      	blt.n	8016648 <_printf_float+0x1d4>
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	6121      	str	r1, [r4, #16]
 8016640:	07d8      	lsls	r0, r3, #31
 8016642:	d5ea      	bpl.n	801661a <_printf_float+0x1a6>
 8016644:	1c4b      	adds	r3, r1, #1
 8016646:	e7e7      	b.n	8016618 <_printf_float+0x1a4>
 8016648:	2900      	cmp	r1, #0
 801664a:	bfd4      	ite	le
 801664c:	f1c1 0202 	rsble	r2, r1, #2
 8016650:	2201      	movgt	r2, #1
 8016652:	4413      	add	r3, r2
 8016654:	e7e0      	b.n	8016618 <_printf_float+0x1a4>
 8016656:	6823      	ldr	r3, [r4, #0]
 8016658:	055a      	lsls	r2, r3, #21
 801665a:	d407      	bmi.n	801666c <_printf_float+0x1f8>
 801665c:	6923      	ldr	r3, [r4, #16]
 801665e:	4642      	mov	r2, r8
 8016660:	4631      	mov	r1, r6
 8016662:	4628      	mov	r0, r5
 8016664:	47b8      	blx	r7
 8016666:	3001      	adds	r0, #1
 8016668:	d12c      	bne.n	80166c4 <_printf_float+0x250>
 801666a:	e764      	b.n	8016536 <_printf_float+0xc2>
 801666c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016670:	f240 80e0 	bls.w	8016834 <_printf_float+0x3c0>
 8016674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016678:	2200      	movs	r2, #0
 801667a:	2300      	movs	r3, #0
 801667c:	f7ea fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 8016680:	2800      	cmp	r0, #0
 8016682:	d034      	beq.n	80166ee <_printf_float+0x27a>
 8016684:	4a37      	ldr	r2, [pc, #220]	; (8016764 <_printf_float+0x2f0>)
 8016686:	2301      	movs	r3, #1
 8016688:	4631      	mov	r1, r6
 801668a:	4628      	mov	r0, r5
 801668c:	47b8      	blx	r7
 801668e:	3001      	adds	r0, #1
 8016690:	f43f af51 	beq.w	8016536 <_printf_float+0xc2>
 8016694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016698:	429a      	cmp	r2, r3
 801669a:	db02      	blt.n	80166a2 <_printf_float+0x22e>
 801669c:	6823      	ldr	r3, [r4, #0]
 801669e:	07d8      	lsls	r0, r3, #31
 80166a0:	d510      	bpl.n	80166c4 <_printf_float+0x250>
 80166a2:	ee18 3a10 	vmov	r3, s16
 80166a6:	4652      	mov	r2, sl
 80166a8:	4631      	mov	r1, r6
 80166aa:	4628      	mov	r0, r5
 80166ac:	47b8      	blx	r7
 80166ae:	3001      	adds	r0, #1
 80166b0:	f43f af41 	beq.w	8016536 <_printf_float+0xc2>
 80166b4:	f04f 0800 	mov.w	r8, #0
 80166b8:	f104 091a 	add.w	r9, r4, #26
 80166bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166be:	3b01      	subs	r3, #1
 80166c0:	4543      	cmp	r3, r8
 80166c2:	dc09      	bgt.n	80166d8 <_printf_float+0x264>
 80166c4:	6823      	ldr	r3, [r4, #0]
 80166c6:	079b      	lsls	r3, r3, #30
 80166c8:	f100 8105 	bmi.w	80168d6 <_printf_float+0x462>
 80166cc:	68e0      	ldr	r0, [r4, #12]
 80166ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166d0:	4298      	cmp	r0, r3
 80166d2:	bfb8      	it	lt
 80166d4:	4618      	movlt	r0, r3
 80166d6:	e730      	b.n	801653a <_printf_float+0xc6>
 80166d8:	2301      	movs	r3, #1
 80166da:	464a      	mov	r2, r9
 80166dc:	4631      	mov	r1, r6
 80166de:	4628      	mov	r0, r5
 80166e0:	47b8      	blx	r7
 80166e2:	3001      	adds	r0, #1
 80166e4:	f43f af27 	beq.w	8016536 <_printf_float+0xc2>
 80166e8:	f108 0801 	add.w	r8, r8, #1
 80166ec:	e7e6      	b.n	80166bc <_printf_float+0x248>
 80166ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	dc39      	bgt.n	8016768 <_printf_float+0x2f4>
 80166f4:	4a1b      	ldr	r2, [pc, #108]	; (8016764 <_printf_float+0x2f0>)
 80166f6:	2301      	movs	r3, #1
 80166f8:	4631      	mov	r1, r6
 80166fa:	4628      	mov	r0, r5
 80166fc:	47b8      	blx	r7
 80166fe:	3001      	adds	r0, #1
 8016700:	f43f af19 	beq.w	8016536 <_printf_float+0xc2>
 8016704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016708:	4313      	orrs	r3, r2
 801670a:	d102      	bne.n	8016712 <_printf_float+0x29e>
 801670c:	6823      	ldr	r3, [r4, #0]
 801670e:	07d9      	lsls	r1, r3, #31
 8016710:	d5d8      	bpl.n	80166c4 <_printf_float+0x250>
 8016712:	ee18 3a10 	vmov	r3, s16
 8016716:	4652      	mov	r2, sl
 8016718:	4631      	mov	r1, r6
 801671a:	4628      	mov	r0, r5
 801671c:	47b8      	blx	r7
 801671e:	3001      	adds	r0, #1
 8016720:	f43f af09 	beq.w	8016536 <_printf_float+0xc2>
 8016724:	f04f 0900 	mov.w	r9, #0
 8016728:	f104 0a1a 	add.w	sl, r4, #26
 801672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801672e:	425b      	negs	r3, r3
 8016730:	454b      	cmp	r3, r9
 8016732:	dc01      	bgt.n	8016738 <_printf_float+0x2c4>
 8016734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016736:	e792      	b.n	801665e <_printf_float+0x1ea>
 8016738:	2301      	movs	r3, #1
 801673a:	4652      	mov	r2, sl
 801673c:	4631      	mov	r1, r6
 801673e:	4628      	mov	r0, r5
 8016740:	47b8      	blx	r7
 8016742:	3001      	adds	r0, #1
 8016744:	f43f aef7 	beq.w	8016536 <_printf_float+0xc2>
 8016748:	f109 0901 	add.w	r9, r9, #1
 801674c:	e7ee      	b.n	801672c <_printf_float+0x2b8>
 801674e:	bf00      	nop
 8016750:	7fefffff 	.word	0x7fefffff
 8016754:	0801c714 	.word	0x0801c714
 8016758:	0801c718 	.word	0x0801c718
 801675c:	0801c720 	.word	0x0801c720
 8016760:	0801c71c 	.word	0x0801c71c
 8016764:	0801c724 	.word	0x0801c724
 8016768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801676a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801676c:	429a      	cmp	r2, r3
 801676e:	bfa8      	it	ge
 8016770:	461a      	movge	r2, r3
 8016772:	2a00      	cmp	r2, #0
 8016774:	4691      	mov	r9, r2
 8016776:	dc37      	bgt.n	80167e8 <_printf_float+0x374>
 8016778:	f04f 0b00 	mov.w	fp, #0
 801677c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016780:	f104 021a 	add.w	r2, r4, #26
 8016784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016786:	9305      	str	r3, [sp, #20]
 8016788:	eba3 0309 	sub.w	r3, r3, r9
 801678c:	455b      	cmp	r3, fp
 801678e:	dc33      	bgt.n	80167f8 <_printf_float+0x384>
 8016790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016794:	429a      	cmp	r2, r3
 8016796:	db3b      	blt.n	8016810 <_printf_float+0x39c>
 8016798:	6823      	ldr	r3, [r4, #0]
 801679a:	07da      	lsls	r2, r3, #31
 801679c:	d438      	bmi.n	8016810 <_printf_float+0x39c>
 801679e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80167a0:	9b05      	ldr	r3, [sp, #20]
 80167a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	eba2 0901 	sub.w	r9, r2, r1
 80167aa:	4599      	cmp	r9, r3
 80167ac:	bfa8      	it	ge
 80167ae:	4699      	movge	r9, r3
 80167b0:	f1b9 0f00 	cmp.w	r9, #0
 80167b4:	dc35      	bgt.n	8016822 <_printf_float+0x3ae>
 80167b6:	f04f 0800 	mov.w	r8, #0
 80167ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80167be:	f104 0a1a 	add.w	sl, r4, #26
 80167c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80167c6:	1a9b      	subs	r3, r3, r2
 80167c8:	eba3 0309 	sub.w	r3, r3, r9
 80167cc:	4543      	cmp	r3, r8
 80167ce:	f77f af79 	ble.w	80166c4 <_printf_float+0x250>
 80167d2:	2301      	movs	r3, #1
 80167d4:	4652      	mov	r2, sl
 80167d6:	4631      	mov	r1, r6
 80167d8:	4628      	mov	r0, r5
 80167da:	47b8      	blx	r7
 80167dc:	3001      	adds	r0, #1
 80167de:	f43f aeaa 	beq.w	8016536 <_printf_float+0xc2>
 80167e2:	f108 0801 	add.w	r8, r8, #1
 80167e6:	e7ec      	b.n	80167c2 <_printf_float+0x34e>
 80167e8:	4613      	mov	r3, r2
 80167ea:	4631      	mov	r1, r6
 80167ec:	4642      	mov	r2, r8
 80167ee:	4628      	mov	r0, r5
 80167f0:	47b8      	blx	r7
 80167f2:	3001      	adds	r0, #1
 80167f4:	d1c0      	bne.n	8016778 <_printf_float+0x304>
 80167f6:	e69e      	b.n	8016536 <_printf_float+0xc2>
 80167f8:	2301      	movs	r3, #1
 80167fa:	4631      	mov	r1, r6
 80167fc:	4628      	mov	r0, r5
 80167fe:	9205      	str	r2, [sp, #20]
 8016800:	47b8      	blx	r7
 8016802:	3001      	adds	r0, #1
 8016804:	f43f ae97 	beq.w	8016536 <_printf_float+0xc2>
 8016808:	9a05      	ldr	r2, [sp, #20]
 801680a:	f10b 0b01 	add.w	fp, fp, #1
 801680e:	e7b9      	b.n	8016784 <_printf_float+0x310>
 8016810:	ee18 3a10 	vmov	r3, s16
 8016814:	4652      	mov	r2, sl
 8016816:	4631      	mov	r1, r6
 8016818:	4628      	mov	r0, r5
 801681a:	47b8      	blx	r7
 801681c:	3001      	adds	r0, #1
 801681e:	d1be      	bne.n	801679e <_printf_float+0x32a>
 8016820:	e689      	b.n	8016536 <_printf_float+0xc2>
 8016822:	9a05      	ldr	r2, [sp, #20]
 8016824:	464b      	mov	r3, r9
 8016826:	4442      	add	r2, r8
 8016828:	4631      	mov	r1, r6
 801682a:	4628      	mov	r0, r5
 801682c:	47b8      	blx	r7
 801682e:	3001      	adds	r0, #1
 8016830:	d1c1      	bne.n	80167b6 <_printf_float+0x342>
 8016832:	e680      	b.n	8016536 <_printf_float+0xc2>
 8016834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016836:	2a01      	cmp	r2, #1
 8016838:	dc01      	bgt.n	801683e <_printf_float+0x3ca>
 801683a:	07db      	lsls	r3, r3, #31
 801683c:	d538      	bpl.n	80168b0 <_printf_float+0x43c>
 801683e:	2301      	movs	r3, #1
 8016840:	4642      	mov	r2, r8
 8016842:	4631      	mov	r1, r6
 8016844:	4628      	mov	r0, r5
 8016846:	47b8      	blx	r7
 8016848:	3001      	adds	r0, #1
 801684a:	f43f ae74 	beq.w	8016536 <_printf_float+0xc2>
 801684e:	ee18 3a10 	vmov	r3, s16
 8016852:	4652      	mov	r2, sl
 8016854:	4631      	mov	r1, r6
 8016856:	4628      	mov	r0, r5
 8016858:	47b8      	blx	r7
 801685a:	3001      	adds	r0, #1
 801685c:	f43f ae6b 	beq.w	8016536 <_printf_float+0xc2>
 8016860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016864:	2200      	movs	r2, #0
 8016866:	2300      	movs	r3, #0
 8016868:	f7ea f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 801686c:	b9d8      	cbnz	r0, 80168a6 <_printf_float+0x432>
 801686e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016870:	f108 0201 	add.w	r2, r8, #1
 8016874:	3b01      	subs	r3, #1
 8016876:	4631      	mov	r1, r6
 8016878:	4628      	mov	r0, r5
 801687a:	47b8      	blx	r7
 801687c:	3001      	adds	r0, #1
 801687e:	d10e      	bne.n	801689e <_printf_float+0x42a>
 8016880:	e659      	b.n	8016536 <_printf_float+0xc2>
 8016882:	2301      	movs	r3, #1
 8016884:	4652      	mov	r2, sl
 8016886:	4631      	mov	r1, r6
 8016888:	4628      	mov	r0, r5
 801688a:	47b8      	blx	r7
 801688c:	3001      	adds	r0, #1
 801688e:	f43f ae52 	beq.w	8016536 <_printf_float+0xc2>
 8016892:	f108 0801 	add.w	r8, r8, #1
 8016896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016898:	3b01      	subs	r3, #1
 801689a:	4543      	cmp	r3, r8
 801689c:	dcf1      	bgt.n	8016882 <_printf_float+0x40e>
 801689e:	464b      	mov	r3, r9
 80168a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80168a4:	e6dc      	b.n	8016660 <_printf_float+0x1ec>
 80168a6:	f04f 0800 	mov.w	r8, #0
 80168aa:	f104 0a1a 	add.w	sl, r4, #26
 80168ae:	e7f2      	b.n	8016896 <_printf_float+0x422>
 80168b0:	2301      	movs	r3, #1
 80168b2:	4642      	mov	r2, r8
 80168b4:	e7df      	b.n	8016876 <_printf_float+0x402>
 80168b6:	2301      	movs	r3, #1
 80168b8:	464a      	mov	r2, r9
 80168ba:	4631      	mov	r1, r6
 80168bc:	4628      	mov	r0, r5
 80168be:	47b8      	blx	r7
 80168c0:	3001      	adds	r0, #1
 80168c2:	f43f ae38 	beq.w	8016536 <_printf_float+0xc2>
 80168c6:	f108 0801 	add.w	r8, r8, #1
 80168ca:	68e3      	ldr	r3, [r4, #12]
 80168cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168ce:	1a5b      	subs	r3, r3, r1
 80168d0:	4543      	cmp	r3, r8
 80168d2:	dcf0      	bgt.n	80168b6 <_printf_float+0x442>
 80168d4:	e6fa      	b.n	80166cc <_printf_float+0x258>
 80168d6:	f04f 0800 	mov.w	r8, #0
 80168da:	f104 0919 	add.w	r9, r4, #25
 80168de:	e7f4      	b.n	80168ca <_printf_float+0x456>

080168e0 <_printf_common>:
 80168e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168e4:	4616      	mov	r6, r2
 80168e6:	4699      	mov	r9, r3
 80168e8:	688a      	ldr	r2, [r1, #8]
 80168ea:	690b      	ldr	r3, [r1, #16]
 80168ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80168f0:	4293      	cmp	r3, r2
 80168f2:	bfb8      	it	lt
 80168f4:	4613      	movlt	r3, r2
 80168f6:	6033      	str	r3, [r6, #0]
 80168f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80168fc:	4607      	mov	r7, r0
 80168fe:	460c      	mov	r4, r1
 8016900:	b10a      	cbz	r2, 8016906 <_printf_common+0x26>
 8016902:	3301      	adds	r3, #1
 8016904:	6033      	str	r3, [r6, #0]
 8016906:	6823      	ldr	r3, [r4, #0]
 8016908:	0699      	lsls	r1, r3, #26
 801690a:	bf42      	ittt	mi
 801690c:	6833      	ldrmi	r3, [r6, #0]
 801690e:	3302      	addmi	r3, #2
 8016910:	6033      	strmi	r3, [r6, #0]
 8016912:	6825      	ldr	r5, [r4, #0]
 8016914:	f015 0506 	ands.w	r5, r5, #6
 8016918:	d106      	bne.n	8016928 <_printf_common+0x48>
 801691a:	f104 0a19 	add.w	sl, r4, #25
 801691e:	68e3      	ldr	r3, [r4, #12]
 8016920:	6832      	ldr	r2, [r6, #0]
 8016922:	1a9b      	subs	r3, r3, r2
 8016924:	42ab      	cmp	r3, r5
 8016926:	dc26      	bgt.n	8016976 <_printf_common+0x96>
 8016928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801692c:	1e13      	subs	r3, r2, #0
 801692e:	6822      	ldr	r2, [r4, #0]
 8016930:	bf18      	it	ne
 8016932:	2301      	movne	r3, #1
 8016934:	0692      	lsls	r2, r2, #26
 8016936:	d42b      	bmi.n	8016990 <_printf_common+0xb0>
 8016938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801693c:	4649      	mov	r1, r9
 801693e:	4638      	mov	r0, r7
 8016940:	47c0      	blx	r8
 8016942:	3001      	adds	r0, #1
 8016944:	d01e      	beq.n	8016984 <_printf_common+0xa4>
 8016946:	6823      	ldr	r3, [r4, #0]
 8016948:	68e5      	ldr	r5, [r4, #12]
 801694a:	6832      	ldr	r2, [r6, #0]
 801694c:	f003 0306 	and.w	r3, r3, #6
 8016950:	2b04      	cmp	r3, #4
 8016952:	bf08      	it	eq
 8016954:	1aad      	subeq	r5, r5, r2
 8016956:	68a3      	ldr	r3, [r4, #8]
 8016958:	6922      	ldr	r2, [r4, #16]
 801695a:	bf0c      	ite	eq
 801695c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016960:	2500      	movne	r5, #0
 8016962:	4293      	cmp	r3, r2
 8016964:	bfc4      	itt	gt
 8016966:	1a9b      	subgt	r3, r3, r2
 8016968:	18ed      	addgt	r5, r5, r3
 801696a:	2600      	movs	r6, #0
 801696c:	341a      	adds	r4, #26
 801696e:	42b5      	cmp	r5, r6
 8016970:	d11a      	bne.n	80169a8 <_printf_common+0xc8>
 8016972:	2000      	movs	r0, #0
 8016974:	e008      	b.n	8016988 <_printf_common+0xa8>
 8016976:	2301      	movs	r3, #1
 8016978:	4652      	mov	r2, sl
 801697a:	4649      	mov	r1, r9
 801697c:	4638      	mov	r0, r7
 801697e:	47c0      	blx	r8
 8016980:	3001      	adds	r0, #1
 8016982:	d103      	bne.n	801698c <_printf_common+0xac>
 8016984:	f04f 30ff 	mov.w	r0, #4294967295
 8016988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801698c:	3501      	adds	r5, #1
 801698e:	e7c6      	b.n	801691e <_printf_common+0x3e>
 8016990:	18e1      	adds	r1, r4, r3
 8016992:	1c5a      	adds	r2, r3, #1
 8016994:	2030      	movs	r0, #48	; 0x30
 8016996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801699a:	4422      	add	r2, r4
 801699c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80169a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80169a4:	3302      	adds	r3, #2
 80169a6:	e7c7      	b.n	8016938 <_printf_common+0x58>
 80169a8:	2301      	movs	r3, #1
 80169aa:	4622      	mov	r2, r4
 80169ac:	4649      	mov	r1, r9
 80169ae:	4638      	mov	r0, r7
 80169b0:	47c0      	blx	r8
 80169b2:	3001      	adds	r0, #1
 80169b4:	d0e6      	beq.n	8016984 <_printf_common+0xa4>
 80169b6:	3601      	adds	r6, #1
 80169b8:	e7d9      	b.n	801696e <_printf_common+0x8e>
	...

080169bc <_printf_i>:
 80169bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80169c0:	460c      	mov	r4, r1
 80169c2:	4691      	mov	r9, r2
 80169c4:	7e27      	ldrb	r7, [r4, #24]
 80169c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80169c8:	2f78      	cmp	r7, #120	; 0x78
 80169ca:	4680      	mov	r8, r0
 80169cc:	469a      	mov	sl, r3
 80169ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80169d2:	d807      	bhi.n	80169e4 <_printf_i+0x28>
 80169d4:	2f62      	cmp	r7, #98	; 0x62
 80169d6:	d80a      	bhi.n	80169ee <_printf_i+0x32>
 80169d8:	2f00      	cmp	r7, #0
 80169da:	f000 80d8 	beq.w	8016b8e <_printf_i+0x1d2>
 80169de:	2f58      	cmp	r7, #88	; 0x58
 80169e0:	f000 80a3 	beq.w	8016b2a <_printf_i+0x16e>
 80169e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80169e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80169ec:	e03a      	b.n	8016a64 <_printf_i+0xa8>
 80169ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80169f2:	2b15      	cmp	r3, #21
 80169f4:	d8f6      	bhi.n	80169e4 <_printf_i+0x28>
 80169f6:	a001      	add	r0, pc, #4	; (adr r0, 80169fc <_printf_i+0x40>)
 80169f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80169fc:	08016a55 	.word	0x08016a55
 8016a00:	08016a69 	.word	0x08016a69
 8016a04:	080169e5 	.word	0x080169e5
 8016a08:	080169e5 	.word	0x080169e5
 8016a0c:	080169e5 	.word	0x080169e5
 8016a10:	080169e5 	.word	0x080169e5
 8016a14:	08016a69 	.word	0x08016a69
 8016a18:	080169e5 	.word	0x080169e5
 8016a1c:	080169e5 	.word	0x080169e5
 8016a20:	080169e5 	.word	0x080169e5
 8016a24:	080169e5 	.word	0x080169e5
 8016a28:	08016b75 	.word	0x08016b75
 8016a2c:	08016a99 	.word	0x08016a99
 8016a30:	08016b57 	.word	0x08016b57
 8016a34:	080169e5 	.word	0x080169e5
 8016a38:	080169e5 	.word	0x080169e5
 8016a3c:	08016b97 	.word	0x08016b97
 8016a40:	080169e5 	.word	0x080169e5
 8016a44:	08016a99 	.word	0x08016a99
 8016a48:	080169e5 	.word	0x080169e5
 8016a4c:	080169e5 	.word	0x080169e5
 8016a50:	08016b5f 	.word	0x08016b5f
 8016a54:	680b      	ldr	r3, [r1, #0]
 8016a56:	1d1a      	adds	r2, r3, #4
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	600a      	str	r2, [r1, #0]
 8016a5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016a64:	2301      	movs	r3, #1
 8016a66:	e0a3      	b.n	8016bb0 <_printf_i+0x1f4>
 8016a68:	6825      	ldr	r5, [r4, #0]
 8016a6a:	6808      	ldr	r0, [r1, #0]
 8016a6c:	062e      	lsls	r6, r5, #24
 8016a6e:	f100 0304 	add.w	r3, r0, #4
 8016a72:	d50a      	bpl.n	8016a8a <_printf_i+0xce>
 8016a74:	6805      	ldr	r5, [r0, #0]
 8016a76:	600b      	str	r3, [r1, #0]
 8016a78:	2d00      	cmp	r5, #0
 8016a7a:	da03      	bge.n	8016a84 <_printf_i+0xc8>
 8016a7c:	232d      	movs	r3, #45	; 0x2d
 8016a7e:	426d      	negs	r5, r5
 8016a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a84:	485e      	ldr	r0, [pc, #376]	; (8016c00 <_printf_i+0x244>)
 8016a86:	230a      	movs	r3, #10
 8016a88:	e019      	b.n	8016abe <_printf_i+0x102>
 8016a8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016a8e:	6805      	ldr	r5, [r0, #0]
 8016a90:	600b      	str	r3, [r1, #0]
 8016a92:	bf18      	it	ne
 8016a94:	b22d      	sxthne	r5, r5
 8016a96:	e7ef      	b.n	8016a78 <_printf_i+0xbc>
 8016a98:	680b      	ldr	r3, [r1, #0]
 8016a9a:	6825      	ldr	r5, [r4, #0]
 8016a9c:	1d18      	adds	r0, r3, #4
 8016a9e:	6008      	str	r0, [r1, #0]
 8016aa0:	0628      	lsls	r0, r5, #24
 8016aa2:	d501      	bpl.n	8016aa8 <_printf_i+0xec>
 8016aa4:	681d      	ldr	r5, [r3, #0]
 8016aa6:	e002      	b.n	8016aae <_printf_i+0xf2>
 8016aa8:	0669      	lsls	r1, r5, #25
 8016aaa:	d5fb      	bpl.n	8016aa4 <_printf_i+0xe8>
 8016aac:	881d      	ldrh	r5, [r3, #0]
 8016aae:	4854      	ldr	r0, [pc, #336]	; (8016c00 <_printf_i+0x244>)
 8016ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8016ab2:	bf0c      	ite	eq
 8016ab4:	2308      	moveq	r3, #8
 8016ab6:	230a      	movne	r3, #10
 8016ab8:	2100      	movs	r1, #0
 8016aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016abe:	6866      	ldr	r6, [r4, #4]
 8016ac0:	60a6      	str	r6, [r4, #8]
 8016ac2:	2e00      	cmp	r6, #0
 8016ac4:	bfa2      	ittt	ge
 8016ac6:	6821      	ldrge	r1, [r4, #0]
 8016ac8:	f021 0104 	bicge.w	r1, r1, #4
 8016acc:	6021      	strge	r1, [r4, #0]
 8016ace:	b90d      	cbnz	r5, 8016ad4 <_printf_i+0x118>
 8016ad0:	2e00      	cmp	r6, #0
 8016ad2:	d04d      	beq.n	8016b70 <_printf_i+0x1b4>
 8016ad4:	4616      	mov	r6, r2
 8016ad6:	fbb5 f1f3 	udiv	r1, r5, r3
 8016ada:	fb03 5711 	mls	r7, r3, r1, r5
 8016ade:	5dc7      	ldrb	r7, [r0, r7]
 8016ae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016ae4:	462f      	mov	r7, r5
 8016ae6:	42bb      	cmp	r3, r7
 8016ae8:	460d      	mov	r5, r1
 8016aea:	d9f4      	bls.n	8016ad6 <_printf_i+0x11a>
 8016aec:	2b08      	cmp	r3, #8
 8016aee:	d10b      	bne.n	8016b08 <_printf_i+0x14c>
 8016af0:	6823      	ldr	r3, [r4, #0]
 8016af2:	07df      	lsls	r7, r3, #31
 8016af4:	d508      	bpl.n	8016b08 <_printf_i+0x14c>
 8016af6:	6923      	ldr	r3, [r4, #16]
 8016af8:	6861      	ldr	r1, [r4, #4]
 8016afa:	4299      	cmp	r1, r3
 8016afc:	bfde      	ittt	le
 8016afe:	2330      	movle	r3, #48	; 0x30
 8016b00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016b04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016b08:	1b92      	subs	r2, r2, r6
 8016b0a:	6122      	str	r2, [r4, #16]
 8016b0c:	f8cd a000 	str.w	sl, [sp]
 8016b10:	464b      	mov	r3, r9
 8016b12:	aa03      	add	r2, sp, #12
 8016b14:	4621      	mov	r1, r4
 8016b16:	4640      	mov	r0, r8
 8016b18:	f7ff fee2 	bl	80168e0 <_printf_common>
 8016b1c:	3001      	adds	r0, #1
 8016b1e:	d14c      	bne.n	8016bba <_printf_i+0x1fe>
 8016b20:	f04f 30ff 	mov.w	r0, #4294967295
 8016b24:	b004      	add	sp, #16
 8016b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b2a:	4835      	ldr	r0, [pc, #212]	; (8016c00 <_printf_i+0x244>)
 8016b2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016b30:	6823      	ldr	r3, [r4, #0]
 8016b32:	680e      	ldr	r6, [r1, #0]
 8016b34:	061f      	lsls	r7, r3, #24
 8016b36:	f856 5b04 	ldr.w	r5, [r6], #4
 8016b3a:	600e      	str	r6, [r1, #0]
 8016b3c:	d514      	bpl.n	8016b68 <_printf_i+0x1ac>
 8016b3e:	07d9      	lsls	r1, r3, #31
 8016b40:	bf44      	itt	mi
 8016b42:	f043 0320 	orrmi.w	r3, r3, #32
 8016b46:	6023      	strmi	r3, [r4, #0]
 8016b48:	b91d      	cbnz	r5, 8016b52 <_printf_i+0x196>
 8016b4a:	6823      	ldr	r3, [r4, #0]
 8016b4c:	f023 0320 	bic.w	r3, r3, #32
 8016b50:	6023      	str	r3, [r4, #0]
 8016b52:	2310      	movs	r3, #16
 8016b54:	e7b0      	b.n	8016ab8 <_printf_i+0xfc>
 8016b56:	6823      	ldr	r3, [r4, #0]
 8016b58:	f043 0320 	orr.w	r3, r3, #32
 8016b5c:	6023      	str	r3, [r4, #0]
 8016b5e:	2378      	movs	r3, #120	; 0x78
 8016b60:	4828      	ldr	r0, [pc, #160]	; (8016c04 <_printf_i+0x248>)
 8016b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016b66:	e7e3      	b.n	8016b30 <_printf_i+0x174>
 8016b68:	065e      	lsls	r6, r3, #25
 8016b6a:	bf48      	it	mi
 8016b6c:	b2ad      	uxthmi	r5, r5
 8016b6e:	e7e6      	b.n	8016b3e <_printf_i+0x182>
 8016b70:	4616      	mov	r6, r2
 8016b72:	e7bb      	b.n	8016aec <_printf_i+0x130>
 8016b74:	680b      	ldr	r3, [r1, #0]
 8016b76:	6826      	ldr	r6, [r4, #0]
 8016b78:	6960      	ldr	r0, [r4, #20]
 8016b7a:	1d1d      	adds	r5, r3, #4
 8016b7c:	600d      	str	r5, [r1, #0]
 8016b7e:	0635      	lsls	r5, r6, #24
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	d501      	bpl.n	8016b88 <_printf_i+0x1cc>
 8016b84:	6018      	str	r0, [r3, #0]
 8016b86:	e002      	b.n	8016b8e <_printf_i+0x1d2>
 8016b88:	0671      	lsls	r1, r6, #25
 8016b8a:	d5fb      	bpl.n	8016b84 <_printf_i+0x1c8>
 8016b8c:	8018      	strh	r0, [r3, #0]
 8016b8e:	2300      	movs	r3, #0
 8016b90:	6123      	str	r3, [r4, #16]
 8016b92:	4616      	mov	r6, r2
 8016b94:	e7ba      	b.n	8016b0c <_printf_i+0x150>
 8016b96:	680b      	ldr	r3, [r1, #0]
 8016b98:	1d1a      	adds	r2, r3, #4
 8016b9a:	600a      	str	r2, [r1, #0]
 8016b9c:	681e      	ldr	r6, [r3, #0]
 8016b9e:	6862      	ldr	r2, [r4, #4]
 8016ba0:	2100      	movs	r1, #0
 8016ba2:	4630      	mov	r0, r6
 8016ba4:	f7e9 fb1c 	bl	80001e0 <memchr>
 8016ba8:	b108      	cbz	r0, 8016bae <_printf_i+0x1f2>
 8016baa:	1b80      	subs	r0, r0, r6
 8016bac:	6060      	str	r0, [r4, #4]
 8016bae:	6863      	ldr	r3, [r4, #4]
 8016bb0:	6123      	str	r3, [r4, #16]
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016bb8:	e7a8      	b.n	8016b0c <_printf_i+0x150>
 8016bba:	6923      	ldr	r3, [r4, #16]
 8016bbc:	4632      	mov	r2, r6
 8016bbe:	4649      	mov	r1, r9
 8016bc0:	4640      	mov	r0, r8
 8016bc2:	47d0      	blx	sl
 8016bc4:	3001      	adds	r0, #1
 8016bc6:	d0ab      	beq.n	8016b20 <_printf_i+0x164>
 8016bc8:	6823      	ldr	r3, [r4, #0]
 8016bca:	079b      	lsls	r3, r3, #30
 8016bcc:	d413      	bmi.n	8016bf6 <_printf_i+0x23a>
 8016bce:	68e0      	ldr	r0, [r4, #12]
 8016bd0:	9b03      	ldr	r3, [sp, #12]
 8016bd2:	4298      	cmp	r0, r3
 8016bd4:	bfb8      	it	lt
 8016bd6:	4618      	movlt	r0, r3
 8016bd8:	e7a4      	b.n	8016b24 <_printf_i+0x168>
 8016bda:	2301      	movs	r3, #1
 8016bdc:	4632      	mov	r2, r6
 8016bde:	4649      	mov	r1, r9
 8016be0:	4640      	mov	r0, r8
 8016be2:	47d0      	blx	sl
 8016be4:	3001      	adds	r0, #1
 8016be6:	d09b      	beq.n	8016b20 <_printf_i+0x164>
 8016be8:	3501      	adds	r5, #1
 8016bea:	68e3      	ldr	r3, [r4, #12]
 8016bec:	9903      	ldr	r1, [sp, #12]
 8016bee:	1a5b      	subs	r3, r3, r1
 8016bf0:	42ab      	cmp	r3, r5
 8016bf2:	dcf2      	bgt.n	8016bda <_printf_i+0x21e>
 8016bf4:	e7eb      	b.n	8016bce <_printf_i+0x212>
 8016bf6:	2500      	movs	r5, #0
 8016bf8:	f104 0619 	add.w	r6, r4, #25
 8016bfc:	e7f5      	b.n	8016bea <_printf_i+0x22e>
 8016bfe:	bf00      	nop
 8016c00:	0801c726 	.word	0x0801c726
 8016c04:	0801c737 	.word	0x0801c737

08016c08 <_scanf_float>:
 8016c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c0c:	b087      	sub	sp, #28
 8016c0e:	4617      	mov	r7, r2
 8016c10:	9303      	str	r3, [sp, #12]
 8016c12:	688b      	ldr	r3, [r1, #8]
 8016c14:	1e5a      	subs	r2, r3, #1
 8016c16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016c1a:	bf83      	ittte	hi
 8016c1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016c20:	195b      	addhi	r3, r3, r5
 8016c22:	9302      	strhi	r3, [sp, #8]
 8016c24:	2300      	movls	r3, #0
 8016c26:	bf86      	itte	hi
 8016c28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016c2c:	608b      	strhi	r3, [r1, #8]
 8016c2e:	9302      	strls	r3, [sp, #8]
 8016c30:	680b      	ldr	r3, [r1, #0]
 8016c32:	468b      	mov	fp, r1
 8016c34:	2500      	movs	r5, #0
 8016c36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016c3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8016c3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016c42:	4680      	mov	r8, r0
 8016c44:	460c      	mov	r4, r1
 8016c46:	465e      	mov	r6, fp
 8016c48:	46aa      	mov	sl, r5
 8016c4a:	46a9      	mov	r9, r5
 8016c4c:	9501      	str	r5, [sp, #4]
 8016c4e:	68a2      	ldr	r2, [r4, #8]
 8016c50:	b152      	cbz	r2, 8016c68 <_scanf_float+0x60>
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	781b      	ldrb	r3, [r3, #0]
 8016c56:	2b4e      	cmp	r3, #78	; 0x4e
 8016c58:	d864      	bhi.n	8016d24 <_scanf_float+0x11c>
 8016c5a:	2b40      	cmp	r3, #64	; 0x40
 8016c5c:	d83c      	bhi.n	8016cd8 <_scanf_float+0xd0>
 8016c5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016c62:	b2c8      	uxtb	r0, r1
 8016c64:	280e      	cmp	r0, #14
 8016c66:	d93a      	bls.n	8016cde <_scanf_float+0xd6>
 8016c68:	f1b9 0f00 	cmp.w	r9, #0
 8016c6c:	d003      	beq.n	8016c76 <_scanf_float+0x6e>
 8016c6e:	6823      	ldr	r3, [r4, #0]
 8016c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c7a:	f1ba 0f01 	cmp.w	sl, #1
 8016c7e:	f200 8113 	bhi.w	8016ea8 <_scanf_float+0x2a0>
 8016c82:	455e      	cmp	r6, fp
 8016c84:	f200 8105 	bhi.w	8016e92 <_scanf_float+0x28a>
 8016c88:	2501      	movs	r5, #1
 8016c8a:	4628      	mov	r0, r5
 8016c8c:	b007      	add	sp, #28
 8016c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016c96:	2a0d      	cmp	r2, #13
 8016c98:	d8e6      	bhi.n	8016c68 <_scanf_float+0x60>
 8016c9a:	a101      	add	r1, pc, #4	; (adr r1, 8016ca0 <_scanf_float+0x98>)
 8016c9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016ca0:	08016ddf 	.word	0x08016ddf
 8016ca4:	08016c69 	.word	0x08016c69
 8016ca8:	08016c69 	.word	0x08016c69
 8016cac:	08016c69 	.word	0x08016c69
 8016cb0:	08016e3f 	.word	0x08016e3f
 8016cb4:	08016e17 	.word	0x08016e17
 8016cb8:	08016c69 	.word	0x08016c69
 8016cbc:	08016c69 	.word	0x08016c69
 8016cc0:	08016ded 	.word	0x08016ded
 8016cc4:	08016c69 	.word	0x08016c69
 8016cc8:	08016c69 	.word	0x08016c69
 8016ccc:	08016c69 	.word	0x08016c69
 8016cd0:	08016c69 	.word	0x08016c69
 8016cd4:	08016da5 	.word	0x08016da5
 8016cd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016cdc:	e7db      	b.n	8016c96 <_scanf_float+0x8e>
 8016cde:	290e      	cmp	r1, #14
 8016ce0:	d8c2      	bhi.n	8016c68 <_scanf_float+0x60>
 8016ce2:	a001      	add	r0, pc, #4	; (adr r0, 8016ce8 <_scanf_float+0xe0>)
 8016ce4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016ce8:	08016d97 	.word	0x08016d97
 8016cec:	08016c69 	.word	0x08016c69
 8016cf0:	08016d97 	.word	0x08016d97
 8016cf4:	08016e2b 	.word	0x08016e2b
 8016cf8:	08016c69 	.word	0x08016c69
 8016cfc:	08016d45 	.word	0x08016d45
 8016d00:	08016d81 	.word	0x08016d81
 8016d04:	08016d81 	.word	0x08016d81
 8016d08:	08016d81 	.word	0x08016d81
 8016d0c:	08016d81 	.word	0x08016d81
 8016d10:	08016d81 	.word	0x08016d81
 8016d14:	08016d81 	.word	0x08016d81
 8016d18:	08016d81 	.word	0x08016d81
 8016d1c:	08016d81 	.word	0x08016d81
 8016d20:	08016d81 	.word	0x08016d81
 8016d24:	2b6e      	cmp	r3, #110	; 0x6e
 8016d26:	d809      	bhi.n	8016d3c <_scanf_float+0x134>
 8016d28:	2b60      	cmp	r3, #96	; 0x60
 8016d2a:	d8b2      	bhi.n	8016c92 <_scanf_float+0x8a>
 8016d2c:	2b54      	cmp	r3, #84	; 0x54
 8016d2e:	d077      	beq.n	8016e20 <_scanf_float+0x218>
 8016d30:	2b59      	cmp	r3, #89	; 0x59
 8016d32:	d199      	bne.n	8016c68 <_scanf_float+0x60>
 8016d34:	2d07      	cmp	r5, #7
 8016d36:	d197      	bne.n	8016c68 <_scanf_float+0x60>
 8016d38:	2508      	movs	r5, #8
 8016d3a:	e029      	b.n	8016d90 <_scanf_float+0x188>
 8016d3c:	2b74      	cmp	r3, #116	; 0x74
 8016d3e:	d06f      	beq.n	8016e20 <_scanf_float+0x218>
 8016d40:	2b79      	cmp	r3, #121	; 0x79
 8016d42:	e7f6      	b.n	8016d32 <_scanf_float+0x12a>
 8016d44:	6821      	ldr	r1, [r4, #0]
 8016d46:	05c8      	lsls	r0, r1, #23
 8016d48:	d51a      	bpl.n	8016d80 <_scanf_float+0x178>
 8016d4a:	9b02      	ldr	r3, [sp, #8]
 8016d4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016d50:	6021      	str	r1, [r4, #0]
 8016d52:	f109 0901 	add.w	r9, r9, #1
 8016d56:	b11b      	cbz	r3, 8016d60 <_scanf_float+0x158>
 8016d58:	3b01      	subs	r3, #1
 8016d5a:	3201      	adds	r2, #1
 8016d5c:	9302      	str	r3, [sp, #8]
 8016d5e:	60a2      	str	r2, [r4, #8]
 8016d60:	68a3      	ldr	r3, [r4, #8]
 8016d62:	3b01      	subs	r3, #1
 8016d64:	60a3      	str	r3, [r4, #8]
 8016d66:	6923      	ldr	r3, [r4, #16]
 8016d68:	3301      	adds	r3, #1
 8016d6a:	6123      	str	r3, [r4, #16]
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	3b01      	subs	r3, #1
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	607b      	str	r3, [r7, #4]
 8016d74:	f340 8084 	ble.w	8016e80 <_scanf_float+0x278>
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	3301      	adds	r3, #1
 8016d7c:	603b      	str	r3, [r7, #0]
 8016d7e:	e766      	b.n	8016c4e <_scanf_float+0x46>
 8016d80:	eb1a 0f05 	cmn.w	sl, r5
 8016d84:	f47f af70 	bne.w	8016c68 <_scanf_float+0x60>
 8016d88:	6822      	ldr	r2, [r4, #0]
 8016d8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016d8e:	6022      	str	r2, [r4, #0]
 8016d90:	f806 3b01 	strb.w	r3, [r6], #1
 8016d94:	e7e4      	b.n	8016d60 <_scanf_float+0x158>
 8016d96:	6822      	ldr	r2, [r4, #0]
 8016d98:	0610      	lsls	r0, r2, #24
 8016d9a:	f57f af65 	bpl.w	8016c68 <_scanf_float+0x60>
 8016d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016da2:	e7f4      	b.n	8016d8e <_scanf_float+0x186>
 8016da4:	f1ba 0f00 	cmp.w	sl, #0
 8016da8:	d10e      	bne.n	8016dc8 <_scanf_float+0x1c0>
 8016daa:	f1b9 0f00 	cmp.w	r9, #0
 8016dae:	d10e      	bne.n	8016dce <_scanf_float+0x1c6>
 8016db0:	6822      	ldr	r2, [r4, #0]
 8016db2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016db6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016dba:	d108      	bne.n	8016dce <_scanf_float+0x1c6>
 8016dbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016dc0:	6022      	str	r2, [r4, #0]
 8016dc2:	f04f 0a01 	mov.w	sl, #1
 8016dc6:	e7e3      	b.n	8016d90 <_scanf_float+0x188>
 8016dc8:	f1ba 0f02 	cmp.w	sl, #2
 8016dcc:	d055      	beq.n	8016e7a <_scanf_float+0x272>
 8016dce:	2d01      	cmp	r5, #1
 8016dd0:	d002      	beq.n	8016dd8 <_scanf_float+0x1d0>
 8016dd2:	2d04      	cmp	r5, #4
 8016dd4:	f47f af48 	bne.w	8016c68 <_scanf_float+0x60>
 8016dd8:	3501      	adds	r5, #1
 8016dda:	b2ed      	uxtb	r5, r5
 8016ddc:	e7d8      	b.n	8016d90 <_scanf_float+0x188>
 8016dde:	f1ba 0f01 	cmp.w	sl, #1
 8016de2:	f47f af41 	bne.w	8016c68 <_scanf_float+0x60>
 8016de6:	f04f 0a02 	mov.w	sl, #2
 8016dea:	e7d1      	b.n	8016d90 <_scanf_float+0x188>
 8016dec:	b97d      	cbnz	r5, 8016e0e <_scanf_float+0x206>
 8016dee:	f1b9 0f00 	cmp.w	r9, #0
 8016df2:	f47f af3c 	bne.w	8016c6e <_scanf_float+0x66>
 8016df6:	6822      	ldr	r2, [r4, #0]
 8016df8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016dfc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016e00:	f47f af39 	bne.w	8016c76 <_scanf_float+0x6e>
 8016e04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016e08:	6022      	str	r2, [r4, #0]
 8016e0a:	2501      	movs	r5, #1
 8016e0c:	e7c0      	b.n	8016d90 <_scanf_float+0x188>
 8016e0e:	2d03      	cmp	r5, #3
 8016e10:	d0e2      	beq.n	8016dd8 <_scanf_float+0x1d0>
 8016e12:	2d05      	cmp	r5, #5
 8016e14:	e7de      	b.n	8016dd4 <_scanf_float+0x1cc>
 8016e16:	2d02      	cmp	r5, #2
 8016e18:	f47f af26 	bne.w	8016c68 <_scanf_float+0x60>
 8016e1c:	2503      	movs	r5, #3
 8016e1e:	e7b7      	b.n	8016d90 <_scanf_float+0x188>
 8016e20:	2d06      	cmp	r5, #6
 8016e22:	f47f af21 	bne.w	8016c68 <_scanf_float+0x60>
 8016e26:	2507      	movs	r5, #7
 8016e28:	e7b2      	b.n	8016d90 <_scanf_float+0x188>
 8016e2a:	6822      	ldr	r2, [r4, #0]
 8016e2c:	0591      	lsls	r1, r2, #22
 8016e2e:	f57f af1b 	bpl.w	8016c68 <_scanf_float+0x60>
 8016e32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016e36:	6022      	str	r2, [r4, #0]
 8016e38:	f8cd 9004 	str.w	r9, [sp, #4]
 8016e3c:	e7a8      	b.n	8016d90 <_scanf_float+0x188>
 8016e3e:	6822      	ldr	r2, [r4, #0]
 8016e40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016e44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016e48:	d006      	beq.n	8016e58 <_scanf_float+0x250>
 8016e4a:	0550      	lsls	r0, r2, #21
 8016e4c:	f57f af0c 	bpl.w	8016c68 <_scanf_float+0x60>
 8016e50:	f1b9 0f00 	cmp.w	r9, #0
 8016e54:	f43f af0f 	beq.w	8016c76 <_scanf_float+0x6e>
 8016e58:	0591      	lsls	r1, r2, #22
 8016e5a:	bf58      	it	pl
 8016e5c:	9901      	ldrpl	r1, [sp, #4]
 8016e5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016e62:	bf58      	it	pl
 8016e64:	eba9 0101 	subpl.w	r1, r9, r1
 8016e68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016e6c:	bf58      	it	pl
 8016e6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016e72:	6022      	str	r2, [r4, #0]
 8016e74:	f04f 0900 	mov.w	r9, #0
 8016e78:	e78a      	b.n	8016d90 <_scanf_float+0x188>
 8016e7a:	f04f 0a03 	mov.w	sl, #3
 8016e7e:	e787      	b.n	8016d90 <_scanf_float+0x188>
 8016e80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016e84:	4639      	mov	r1, r7
 8016e86:	4640      	mov	r0, r8
 8016e88:	4798      	blx	r3
 8016e8a:	2800      	cmp	r0, #0
 8016e8c:	f43f aedf 	beq.w	8016c4e <_scanf_float+0x46>
 8016e90:	e6ea      	b.n	8016c68 <_scanf_float+0x60>
 8016e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016e9a:	463a      	mov	r2, r7
 8016e9c:	4640      	mov	r0, r8
 8016e9e:	4798      	blx	r3
 8016ea0:	6923      	ldr	r3, [r4, #16]
 8016ea2:	3b01      	subs	r3, #1
 8016ea4:	6123      	str	r3, [r4, #16]
 8016ea6:	e6ec      	b.n	8016c82 <_scanf_float+0x7a>
 8016ea8:	1e6b      	subs	r3, r5, #1
 8016eaa:	2b06      	cmp	r3, #6
 8016eac:	d825      	bhi.n	8016efa <_scanf_float+0x2f2>
 8016eae:	2d02      	cmp	r5, #2
 8016eb0:	d836      	bhi.n	8016f20 <_scanf_float+0x318>
 8016eb2:	455e      	cmp	r6, fp
 8016eb4:	f67f aee8 	bls.w	8016c88 <_scanf_float+0x80>
 8016eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ebc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016ec0:	463a      	mov	r2, r7
 8016ec2:	4640      	mov	r0, r8
 8016ec4:	4798      	blx	r3
 8016ec6:	6923      	ldr	r3, [r4, #16]
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	6123      	str	r3, [r4, #16]
 8016ecc:	e7f1      	b.n	8016eb2 <_scanf_float+0x2aa>
 8016ece:	9802      	ldr	r0, [sp, #8]
 8016ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ed4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016ed8:	9002      	str	r0, [sp, #8]
 8016eda:	463a      	mov	r2, r7
 8016edc:	4640      	mov	r0, r8
 8016ede:	4798      	blx	r3
 8016ee0:	6923      	ldr	r3, [r4, #16]
 8016ee2:	3b01      	subs	r3, #1
 8016ee4:	6123      	str	r3, [r4, #16]
 8016ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016eea:	fa5f fa8a 	uxtb.w	sl, sl
 8016eee:	f1ba 0f02 	cmp.w	sl, #2
 8016ef2:	d1ec      	bne.n	8016ece <_scanf_float+0x2c6>
 8016ef4:	3d03      	subs	r5, #3
 8016ef6:	b2ed      	uxtb	r5, r5
 8016ef8:	1b76      	subs	r6, r6, r5
 8016efa:	6823      	ldr	r3, [r4, #0]
 8016efc:	05da      	lsls	r2, r3, #23
 8016efe:	d52f      	bpl.n	8016f60 <_scanf_float+0x358>
 8016f00:	055b      	lsls	r3, r3, #21
 8016f02:	d510      	bpl.n	8016f26 <_scanf_float+0x31e>
 8016f04:	455e      	cmp	r6, fp
 8016f06:	f67f aebf 	bls.w	8016c88 <_scanf_float+0x80>
 8016f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016f12:	463a      	mov	r2, r7
 8016f14:	4640      	mov	r0, r8
 8016f16:	4798      	blx	r3
 8016f18:	6923      	ldr	r3, [r4, #16]
 8016f1a:	3b01      	subs	r3, #1
 8016f1c:	6123      	str	r3, [r4, #16]
 8016f1e:	e7f1      	b.n	8016f04 <_scanf_float+0x2fc>
 8016f20:	46aa      	mov	sl, r5
 8016f22:	9602      	str	r6, [sp, #8]
 8016f24:	e7df      	b.n	8016ee6 <_scanf_float+0x2de>
 8016f26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016f2a:	6923      	ldr	r3, [r4, #16]
 8016f2c:	2965      	cmp	r1, #101	; 0x65
 8016f2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016f32:	f106 35ff 	add.w	r5, r6, #4294967295
 8016f36:	6123      	str	r3, [r4, #16]
 8016f38:	d00c      	beq.n	8016f54 <_scanf_float+0x34c>
 8016f3a:	2945      	cmp	r1, #69	; 0x45
 8016f3c:	d00a      	beq.n	8016f54 <_scanf_float+0x34c>
 8016f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f42:	463a      	mov	r2, r7
 8016f44:	4640      	mov	r0, r8
 8016f46:	4798      	blx	r3
 8016f48:	6923      	ldr	r3, [r4, #16]
 8016f4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016f4e:	3b01      	subs	r3, #1
 8016f50:	1eb5      	subs	r5, r6, #2
 8016f52:	6123      	str	r3, [r4, #16]
 8016f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f58:	463a      	mov	r2, r7
 8016f5a:	4640      	mov	r0, r8
 8016f5c:	4798      	blx	r3
 8016f5e:	462e      	mov	r6, r5
 8016f60:	6825      	ldr	r5, [r4, #0]
 8016f62:	f015 0510 	ands.w	r5, r5, #16
 8016f66:	d158      	bne.n	801701a <_scanf_float+0x412>
 8016f68:	7035      	strb	r5, [r6, #0]
 8016f6a:	6823      	ldr	r3, [r4, #0]
 8016f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f74:	d11c      	bne.n	8016fb0 <_scanf_float+0x3a8>
 8016f76:	9b01      	ldr	r3, [sp, #4]
 8016f78:	454b      	cmp	r3, r9
 8016f7a:	eba3 0209 	sub.w	r2, r3, r9
 8016f7e:	d124      	bne.n	8016fca <_scanf_float+0x3c2>
 8016f80:	2200      	movs	r2, #0
 8016f82:	4659      	mov	r1, fp
 8016f84:	4640      	mov	r0, r8
 8016f86:	f000 fee1 	bl	8017d4c <_strtod_r>
 8016f8a:	9b03      	ldr	r3, [sp, #12]
 8016f8c:	6821      	ldr	r1, [r4, #0]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	f011 0f02 	tst.w	r1, #2
 8016f94:	ec57 6b10 	vmov	r6, r7, d0
 8016f98:	f103 0204 	add.w	r2, r3, #4
 8016f9c:	d020      	beq.n	8016fe0 <_scanf_float+0x3d8>
 8016f9e:	9903      	ldr	r1, [sp, #12]
 8016fa0:	600a      	str	r2, [r1, #0]
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	e9c3 6700 	strd	r6, r7, [r3]
 8016fa8:	68e3      	ldr	r3, [r4, #12]
 8016faa:	3301      	adds	r3, #1
 8016fac:	60e3      	str	r3, [r4, #12]
 8016fae:	e66c      	b.n	8016c8a <_scanf_float+0x82>
 8016fb0:	9b04      	ldr	r3, [sp, #16]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d0e4      	beq.n	8016f80 <_scanf_float+0x378>
 8016fb6:	9905      	ldr	r1, [sp, #20]
 8016fb8:	230a      	movs	r3, #10
 8016fba:	462a      	mov	r2, r5
 8016fbc:	3101      	adds	r1, #1
 8016fbe:	4640      	mov	r0, r8
 8016fc0:	f000 ff4e 	bl	8017e60 <_strtol_r>
 8016fc4:	9b04      	ldr	r3, [sp, #16]
 8016fc6:	9e05      	ldr	r6, [sp, #20]
 8016fc8:	1ac2      	subs	r2, r0, r3
 8016fca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016fce:	429e      	cmp	r6, r3
 8016fd0:	bf28      	it	cs
 8016fd2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016fd6:	4912      	ldr	r1, [pc, #72]	; (8017020 <_scanf_float+0x418>)
 8016fd8:	4630      	mov	r0, r6
 8016fda:	f000 f86f 	bl	80170bc <siprintf>
 8016fde:	e7cf      	b.n	8016f80 <_scanf_float+0x378>
 8016fe0:	f011 0f04 	tst.w	r1, #4
 8016fe4:	9903      	ldr	r1, [sp, #12]
 8016fe6:	600a      	str	r2, [r1, #0]
 8016fe8:	d1db      	bne.n	8016fa2 <_scanf_float+0x39a>
 8016fea:	f8d3 8000 	ldr.w	r8, [r3]
 8016fee:	ee10 2a10 	vmov	r2, s0
 8016ff2:	ee10 0a10 	vmov	r0, s0
 8016ff6:	463b      	mov	r3, r7
 8016ff8:	4639      	mov	r1, r7
 8016ffa:	f7e9 fd97 	bl	8000b2c <__aeabi_dcmpun>
 8016ffe:	b128      	cbz	r0, 801700c <_scanf_float+0x404>
 8017000:	4808      	ldr	r0, [pc, #32]	; (8017024 <_scanf_float+0x41c>)
 8017002:	f000 f821 	bl	8017048 <nanf>
 8017006:	ed88 0a00 	vstr	s0, [r8]
 801700a:	e7cd      	b.n	8016fa8 <_scanf_float+0x3a0>
 801700c:	4630      	mov	r0, r6
 801700e:	4639      	mov	r1, r7
 8017010:	f7e9 fdea 	bl	8000be8 <__aeabi_d2f>
 8017014:	f8c8 0000 	str.w	r0, [r8]
 8017018:	e7c6      	b.n	8016fa8 <_scanf_float+0x3a0>
 801701a:	2500      	movs	r5, #0
 801701c:	e635      	b.n	8016c8a <_scanf_float+0x82>
 801701e:	bf00      	nop
 8017020:	0801c748 	.word	0x0801c748
 8017024:	0801cb60 	.word	0x0801cb60

08017028 <_sbrk_r>:
 8017028:	b538      	push	{r3, r4, r5, lr}
 801702a:	4d06      	ldr	r5, [pc, #24]	; (8017044 <_sbrk_r+0x1c>)
 801702c:	2300      	movs	r3, #0
 801702e:	4604      	mov	r4, r0
 8017030:	4608      	mov	r0, r1
 8017032:	602b      	str	r3, [r5, #0]
 8017034:	f7f4 fa24 	bl	800b480 <_sbrk>
 8017038:	1c43      	adds	r3, r0, #1
 801703a:	d102      	bne.n	8017042 <_sbrk_r+0x1a>
 801703c:	682b      	ldr	r3, [r5, #0]
 801703e:	b103      	cbz	r3, 8017042 <_sbrk_r+0x1a>
 8017040:	6023      	str	r3, [r4, #0]
 8017042:	bd38      	pop	{r3, r4, r5, pc}
 8017044:	20011b84 	.word	0x20011b84

08017048 <nanf>:
 8017048:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017050 <nanf+0x8>
 801704c:	4770      	bx	lr
 801704e:	bf00      	nop
 8017050:	7fc00000 	.word	0x7fc00000

08017054 <sniprintf>:
 8017054:	b40c      	push	{r2, r3}
 8017056:	b530      	push	{r4, r5, lr}
 8017058:	4b17      	ldr	r3, [pc, #92]	; (80170b8 <sniprintf+0x64>)
 801705a:	1e0c      	subs	r4, r1, #0
 801705c:	681d      	ldr	r5, [r3, #0]
 801705e:	b09d      	sub	sp, #116	; 0x74
 8017060:	da08      	bge.n	8017074 <sniprintf+0x20>
 8017062:	238b      	movs	r3, #139	; 0x8b
 8017064:	602b      	str	r3, [r5, #0]
 8017066:	f04f 30ff 	mov.w	r0, #4294967295
 801706a:	b01d      	add	sp, #116	; 0x74
 801706c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017070:	b002      	add	sp, #8
 8017072:	4770      	bx	lr
 8017074:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017078:	f8ad 3014 	strh.w	r3, [sp, #20]
 801707c:	bf14      	ite	ne
 801707e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017082:	4623      	moveq	r3, r4
 8017084:	9304      	str	r3, [sp, #16]
 8017086:	9307      	str	r3, [sp, #28]
 8017088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801708c:	9002      	str	r0, [sp, #8]
 801708e:	9006      	str	r0, [sp, #24]
 8017090:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017094:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017096:	ab21      	add	r3, sp, #132	; 0x84
 8017098:	a902      	add	r1, sp, #8
 801709a:	4628      	mov	r0, r5
 801709c:	9301      	str	r3, [sp, #4]
 801709e:	f002 fe13 	bl	8019cc8 <_svfiprintf_r>
 80170a2:	1c43      	adds	r3, r0, #1
 80170a4:	bfbc      	itt	lt
 80170a6:	238b      	movlt	r3, #139	; 0x8b
 80170a8:	602b      	strlt	r3, [r5, #0]
 80170aa:	2c00      	cmp	r4, #0
 80170ac:	d0dd      	beq.n	801706a <sniprintf+0x16>
 80170ae:	9b02      	ldr	r3, [sp, #8]
 80170b0:	2200      	movs	r2, #0
 80170b2:	701a      	strb	r2, [r3, #0]
 80170b4:	e7d9      	b.n	801706a <sniprintf+0x16>
 80170b6:	bf00      	nop
 80170b8:	20004210 	.word	0x20004210

080170bc <siprintf>:
 80170bc:	b40e      	push	{r1, r2, r3}
 80170be:	b500      	push	{lr}
 80170c0:	b09c      	sub	sp, #112	; 0x70
 80170c2:	ab1d      	add	r3, sp, #116	; 0x74
 80170c4:	9002      	str	r0, [sp, #8]
 80170c6:	9006      	str	r0, [sp, #24]
 80170c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170cc:	4809      	ldr	r0, [pc, #36]	; (80170f4 <siprintf+0x38>)
 80170ce:	9107      	str	r1, [sp, #28]
 80170d0:	9104      	str	r1, [sp, #16]
 80170d2:	4909      	ldr	r1, [pc, #36]	; (80170f8 <siprintf+0x3c>)
 80170d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80170d8:	9105      	str	r1, [sp, #20]
 80170da:	6800      	ldr	r0, [r0, #0]
 80170dc:	9301      	str	r3, [sp, #4]
 80170de:	a902      	add	r1, sp, #8
 80170e0:	f002 fdf2 	bl	8019cc8 <_svfiprintf_r>
 80170e4:	9b02      	ldr	r3, [sp, #8]
 80170e6:	2200      	movs	r2, #0
 80170e8:	701a      	strb	r2, [r3, #0]
 80170ea:	b01c      	add	sp, #112	; 0x70
 80170ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80170f0:	b003      	add	sp, #12
 80170f2:	4770      	bx	lr
 80170f4:	20004210 	.word	0x20004210
 80170f8:	ffff0208 	.word	0xffff0208

080170fc <sulp>:
 80170fc:	b570      	push	{r4, r5, r6, lr}
 80170fe:	4604      	mov	r4, r0
 8017100:	460d      	mov	r5, r1
 8017102:	ec45 4b10 	vmov	d0, r4, r5
 8017106:	4616      	mov	r6, r2
 8017108:	f002 fc24 	bl	8019954 <__ulp>
 801710c:	ec51 0b10 	vmov	r0, r1, d0
 8017110:	b17e      	cbz	r6, 8017132 <sulp+0x36>
 8017112:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017116:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801711a:	2b00      	cmp	r3, #0
 801711c:	dd09      	ble.n	8017132 <sulp+0x36>
 801711e:	051b      	lsls	r3, r3, #20
 8017120:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017124:	2400      	movs	r4, #0
 8017126:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801712a:	4622      	mov	r2, r4
 801712c:	462b      	mov	r3, r5
 801712e:	f7e9 fa63 	bl	80005f8 <__aeabi_dmul>
 8017132:	bd70      	pop	{r4, r5, r6, pc}
 8017134:	0000      	movs	r0, r0
	...

08017138 <_strtod_l>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	b0a3      	sub	sp, #140	; 0x8c
 801713e:	461f      	mov	r7, r3
 8017140:	2300      	movs	r3, #0
 8017142:	931e      	str	r3, [sp, #120]	; 0x78
 8017144:	4ba4      	ldr	r3, [pc, #656]	; (80173d8 <_strtod_l+0x2a0>)
 8017146:	9219      	str	r2, [sp, #100]	; 0x64
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	9307      	str	r3, [sp, #28]
 801714c:	4604      	mov	r4, r0
 801714e:	4618      	mov	r0, r3
 8017150:	4688      	mov	r8, r1
 8017152:	f7e9 f83d 	bl	80001d0 <strlen>
 8017156:	f04f 0a00 	mov.w	sl, #0
 801715a:	4605      	mov	r5, r0
 801715c:	f04f 0b00 	mov.w	fp, #0
 8017160:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017166:	781a      	ldrb	r2, [r3, #0]
 8017168:	2a2b      	cmp	r2, #43	; 0x2b
 801716a:	d04c      	beq.n	8017206 <_strtod_l+0xce>
 801716c:	d839      	bhi.n	80171e2 <_strtod_l+0xaa>
 801716e:	2a0d      	cmp	r2, #13
 8017170:	d832      	bhi.n	80171d8 <_strtod_l+0xa0>
 8017172:	2a08      	cmp	r2, #8
 8017174:	d832      	bhi.n	80171dc <_strtod_l+0xa4>
 8017176:	2a00      	cmp	r2, #0
 8017178:	d03c      	beq.n	80171f4 <_strtod_l+0xbc>
 801717a:	2300      	movs	r3, #0
 801717c:	930e      	str	r3, [sp, #56]	; 0x38
 801717e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017180:	7833      	ldrb	r3, [r6, #0]
 8017182:	2b30      	cmp	r3, #48	; 0x30
 8017184:	f040 80b4 	bne.w	80172f0 <_strtod_l+0x1b8>
 8017188:	7873      	ldrb	r3, [r6, #1]
 801718a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801718e:	2b58      	cmp	r3, #88	; 0x58
 8017190:	d16c      	bne.n	801726c <_strtod_l+0x134>
 8017192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017194:	9301      	str	r3, [sp, #4]
 8017196:	ab1e      	add	r3, sp, #120	; 0x78
 8017198:	9702      	str	r7, [sp, #8]
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	4a8f      	ldr	r2, [pc, #572]	; (80173dc <_strtod_l+0x2a4>)
 801719e:	ab1f      	add	r3, sp, #124	; 0x7c
 80171a0:	a91d      	add	r1, sp, #116	; 0x74
 80171a2:	4620      	mov	r0, r4
 80171a4:	f001 fd40 	bl	8018c28 <__gethex>
 80171a8:	f010 0707 	ands.w	r7, r0, #7
 80171ac:	4605      	mov	r5, r0
 80171ae:	d005      	beq.n	80171bc <_strtod_l+0x84>
 80171b0:	2f06      	cmp	r7, #6
 80171b2:	d12a      	bne.n	801720a <_strtod_l+0xd2>
 80171b4:	3601      	adds	r6, #1
 80171b6:	2300      	movs	r3, #0
 80171b8:	961d      	str	r6, [sp, #116]	; 0x74
 80171ba:	930e      	str	r3, [sp, #56]	; 0x38
 80171bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171be:	2b00      	cmp	r3, #0
 80171c0:	f040 8596 	bne.w	8017cf0 <_strtod_l+0xbb8>
 80171c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171c6:	b1db      	cbz	r3, 8017200 <_strtod_l+0xc8>
 80171c8:	4652      	mov	r2, sl
 80171ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80171ce:	ec43 2b10 	vmov	d0, r2, r3
 80171d2:	b023      	add	sp, #140	; 0x8c
 80171d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171d8:	2a20      	cmp	r2, #32
 80171da:	d1ce      	bne.n	801717a <_strtod_l+0x42>
 80171dc:	3301      	adds	r3, #1
 80171de:	931d      	str	r3, [sp, #116]	; 0x74
 80171e0:	e7c0      	b.n	8017164 <_strtod_l+0x2c>
 80171e2:	2a2d      	cmp	r2, #45	; 0x2d
 80171e4:	d1c9      	bne.n	801717a <_strtod_l+0x42>
 80171e6:	2201      	movs	r2, #1
 80171e8:	920e      	str	r2, [sp, #56]	; 0x38
 80171ea:	1c5a      	adds	r2, r3, #1
 80171ec:	921d      	str	r2, [sp, #116]	; 0x74
 80171ee:	785b      	ldrb	r3, [r3, #1]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d1c4      	bne.n	801717e <_strtod_l+0x46>
 80171f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f040 8576 	bne.w	8017cec <_strtod_l+0xbb4>
 8017200:	4652      	mov	r2, sl
 8017202:	465b      	mov	r3, fp
 8017204:	e7e3      	b.n	80171ce <_strtod_l+0x96>
 8017206:	2200      	movs	r2, #0
 8017208:	e7ee      	b.n	80171e8 <_strtod_l+0xb0>
 801720a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801720c:	b13a      	cbz	r2, 801721e <_strtod_l+0xe6>
 801720e:	2135      	movs	r1, #53	; 0x35
 8017210:	a820      	add	r0, sp, #128	; 0x80
 8017212:	f002 fcaa 	bl	8019b6a <__copybits>
 8017216:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017218:	4620      	mov	r0, r4
 801721a:	f002 f86f 	bl	80192fc <_Bfree>
 801721e:	3f01      	subs	r7, #1
 8017220:	2f05      	cmp	r7, #5
 8017222:	d807      	bhi.n	8017234 <_strtod_l+0xfc>
 8017224:	e8df f007 	tbb	[pc, r7]
 8017228:	1d180b0e 	.word	0x1d180b0e
 801722c:	030e      	.short	0x030e
 801722e:	f04f 0b00 	mov.w	fp, #0
 8017232:	46da      	mov	sl, fp
 8017234:	0728      	lsls	r0, r5, #28
 8017236:	d5c1      	bpl.n	80171bc <_strtod_l+0x84>
 8017238:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801723c:	e7be      	b.n	80171bc <_strtod_l+0x84>
 801723e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017242:	e7f7      	b.n	8017234 <_strtod_l+0xfc>
 8017244:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017248:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801724a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801724e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017252:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017256:	e7ed      	b.n	8017234 <_strtod_l+0xfc>
 8017258:	f8df b184 	ldr.w	fp, [pc, #388]	; 80173e0 <_strtod_l+0x2a8>
 801725c:	f04f 0a00 	mov.w	sl, #0
 8017260:	e7e8      	b.n	8017234 <_strtod_l+0xfc>
 8017262:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017266:	f04f 3aff 	mov.w	sl, #4294967295
 801726a:	e7e3      	b.n	8017234 <_strtod_l+0xfc>
 801726c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801726e:	1c5a      	adds	r2, r3, #1
 8017270:	921d      	str	r2, [sp, #116]	; 0x74
 8017272:	785b      	ldrb	r3, [r3, #1]
 8017274:	2b30      	cmp	r3, #48	; 0x30
 8017276:	d0f9      	beq.n	801726c <_strtod_l+0x134>
 8017278:	2b00      	cmp	r3, #0
 801727a:	d09f      	beq.n	80171bc <_strtod_l+0x84>
 801727c:	2301      	movs	r3, #1
 801727e:	f04f 0900 	mov.w	r9, #0
 8017282:	9304      	str	r3, [sp, #16]
 8017284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017286:	930a      	str	r3, [sp, #40]	; 0x28
 8017288:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801728c:	464f      	mov	r7, r9
 801728e:	220a      	movs	r2, #10
 8017290:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017292:	7806      	ldrb	r6, [r0, #0]
 8017294:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017298:	b2d9      	uxtb	r1, r3
 801729a:	2909      	cmp	r1, #9
 801729c:	d92a      	bls.n	80172f4 <_strtod_l+0x1bc>
 801729e:	9907      	ldr	r1, [sp, #28]
 80172a0:	462a      	mov	r2, r5
 80172a2:	f002 fe19 	bl	8019ed8 <strncmp>
 80172a6:	b398      	cbz	r0, 8017310 <_strtod_l+0x1d8>
 80172a8:	2000      	movs	r0, #0
 80172aa:	4633      	mov	r3, r6
 80172ac:	463d      	mov	r5, r7
 80172ae:	9007      	str	r0, [sp, #28]
 80172b0:	4602      	mov	r2, r0
 80172b2:	2b65      	cmp	r3, #101	; 0x65
 80172b4:	d001      	beq.n	80172ba <_strtod_l+0x182>
 80172b6:	2b45      	cmp	r3, #69	; 0x45
 80172b8:	d118      	bne.n	80172ec <_strtod_l+0x1b4>
 80172ba:	b91d      	cbnz	r5, 80172c4 <_strtod_l+0x18c>
 80172bc:	9b04      	ldr	r3, [sp, #16]
 80172be:	4303      	orrs	r3, r0
 80172c0:	d098      	beq.n	80171f4 <_strtod_l+0xbc>
 80172c2:	2500      	movs	r5, #0
 80172c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80172c8:	f108 0301 	add.w	r3, r8, #1
 80172cc:	931d      	str	r3, [sp, #116]	; 0x74
 80172ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80172d2:	2b2b      	cmp	r3, #43	; 0x2b
 80172d4:	d075      	beq.n	80173c2 <_strtod_l+0x28a>
 80172d6:	2b2d      	cmp	r3, #45	; 0x2d
 80172d8:	d07b      	beq.n	80173d2 <_strtod_l+0x29a>
 80172da:	f04f 0c00 	mov.w	ip, #0
 80172de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80172e2:	2909      	cmp	r1, #9
 80172e4:	f240 8082 	bls.w	80173ec <_strtod_l+0x2b4>
 80172e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80172ec:	2600      	movs	r6, #0
 80172ee:	e09d      	b.n	801742c <_strtod_l+0x2f4>
 80172f0:	2300      	movs	r3, #0
 80172f2:	e7c4      	b.n	801727e <_strtod_l+0x146>
 80172f4:	2f08      	cmp	r7, #8
 80172f6:	bfd8      	it	le
 80172f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80172fa:	f100 0001 	add.w	r0, r0, #1
 80172fe:	bfda      	itte	le
 8017300:	fb02 3301 	mlale	r3, r2, r1, r3
 8017304:	9309      	strle	r3, [sp, #36]	; 0x24
 8017306:	fb02 3909 	mlagt	r9, r2, r9, r3
 801730a:	3701      	adds	r7, #1
 801730c:	901d      	str	r0, [sp, #116]	; 0x74
 801730e:	e7bf      	b.n	8017290 <_strtod_l+0x158>
 8017310:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017312:	195a      	adds	r2, r3, r5
 8017314:	921d      	str	r2, [sp, #116]	; 0x74
 8017316:	5d5b      	ldrb	r3, [r3, r5]
 8017318:	2f00      	cmp	r7, #0
 801731a:	d037      	beq.n	801738c <_strtod_l+0x254>
 801731c:	9007      	str	r0, [sp, #28]
 801731e:	463d      	mov	r5, r7
 8017320:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017324:	2a09      	cmp	r2, #9
 8017326:	d912      	bls.n	801734e <_strtod_l+0x216>
 8017328:	2201      	movs	r2, #1
 801732a:	e7c2      	b.n	80172b2 <_strtod_l+0x17a>
 801732c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801732e:	1c5a      	adds	r2, r3, #1
 8017330:	921d      	str	r2, [sp, #116]	; 0x74
 8017332:	785b      	ldrb	r3, [r3, #1]
 8017334:	3001      	adds	r0, #1
 8017336:	2b30      	cmp	r3, #48	; 0x30
 8017338:	d0f8      	beq.n	801732c <_strtod_l+0x1f4>
 801733a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801733e:	2a08      	cmp	r2, #8
 8017340:	f200 84db 	bhi.w	8017cfa <_strtod_l+0xbc2>
 8017344:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017346:	9007      	str	r0, [sp, #28]
 8017348:	2000      	movs	r0, #0
 801734a:	920a      	str	r2, [sp, #40]	; 0x28
 801734c:	4605      	mov	r5, r0
 801734e:	3b30      	subs	r3, #48	; 0x30
 8017350:	f100 0201 	add.w	r2, r0, #1
 8017354:	d014      	beq.n	8017380 <_strtod_l+0x248>
 8017356:	9907      	ldr	r1, [sp, #28]
 8017358:	4411      	add	r1, r2
 801735a:	9107      	str	r1, [sp, #28]
 801735c:	462a      	mov	r2, r5
 801735e:	eb00 0e05 	add.w	lr, r0, r5
 8017362:	210a      	movs	r1, #10
 8017364:	4572      	cmp	r2, lr
 8017366:	d113      	bne.n	8017390 <_strtod_l+0x258>
 8017368:	182a      	adds	r2, r5, r0
 801736a:	2a08      	cmp	r2, #8
 801736c:	f105 0501 	add.w	r5, r5, #1
 8017370:	4405      	add	r5, r0
 8017372:	dc1c      	bgt.n	80173ae <_strtod_l+0x276>
 8017374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017376:	220a      	movs	r2, #10
 8017378:	fb02 3301 	mla	r3, r2, r1, r3
 801737c:	9309      	str	r3, [sp, #36]	; 0x24
 801737e:	2200      	movs	r2, #0
 8017380:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017382:	1c59      	adds	r1, r3, #1
 8017384:	911d      	str	r1, [sp, #116]	; 0x74
 8017386:	785b      	ldrb	r3, [r3, #1]
 8017388:	4610      	mov	r0, r2
 801738a:	e7c9      	b.n	8017320 <_strtod_l+0x1e8>
 801738c:	4638      	mov	r0, r7
 801738e:	e7d2      	b.n	8017336 <_strtod_l+0x1fe>
 8017390:	2a08      	cmp	r2, #8
 8017392:	dc04      	bgt.n	801739e <_strtod_l+0x266>
 8017394:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017396:	434e      	muls	r6, r1
 8017398:	9609      	str	r6, [sp, #36]	; 0x24
 801739a:	3201      	adds	r2, #1
 801739c:	e7e2      	b.n	8017364 <_strtod_l+0x22c>
 801739e:	f102 0c01 	add.w	ip, r2, #1
 80173a2:	f1bc 0f10 	cmp.w	ip, #16
 80173a6:	bfd8      	it	le
 80173a8:	fb01 f909 	mulle.w	r9, r1, r9
 80173ac:	e7f5      	b.n	801739a <_strtod_l+0x262>
 80173ae:	2d10      	cmp	r5, #16
 80173b0:	bfdc      	itt	le
 80173b2:	220a      	movle	r2, #10
 80173b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80173b8:	e7e1      	b.n	801737e <_strtod_l+0x246>
 80173ba:	2300      	movs	r3, #0
 80173bc:	9307      	str	r3, [sp, #28]
 80173be:	2201      	movs	r2, #1
 80173c0:	e77c      	b.n	80172bc <_strtod_l+0x184>
 80173c2:	f04f 0c00 	mov.w	ip, #0
 80173c6:	f108 0302 	add.w	r3, r8, #2
 80173ca:	931d      	str	r3, [sp, #116]	; 0x74
 80173cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80173d0:	e785      	b.n	80172de <_strtod_l+0x1a6>
 80173d2:	f04f 0c01 	mov.w	ip, #1
 80173d6:	e7f6      	b.n	80173c6 <_strtod_l+0x28e>
 80173d8:	0801c9a0 	.word	0x0801c9a0
 80173dc:	0801c750 	.word	0x0801c750
 80173e0:	7ff00000 	.word	0x7ff00000
 80173e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80173e6:	1c59      	adds	r1, r3, #1
 80173e8:	911d      	str	r1, [sp, #116]	; 0x74
 80173ea:	785b      	ldrb	r3, [r3, #1]
 80173ec:	2b30      	cmp	r3, #48	; 0x30
 80173ee:	d0f9      	beq.n	80173e4 <_strtod_l+0x2ac>
 80173f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80173f4:	2908      	cmp	r1, #8
 80173f6:	f63f af79 	bhi.w	80172ec <_strtod_l+0x1b4>
 80173fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80173fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017400:	9308      	str	r3, [sp, #32]
 8017402:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017404:	1c59      	adds	r1, r3, #1
 8017406:	911d      	str	r1, [sp, #116]	; 0x74
 8017408:	785b      	ldrb	r3, [r3, #1]
 801740a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801740e:	2e09      	cmp	r6, #9
 8017410:	d937      	bls.n	8017482 <_strtod_l+0x34a>
 8017412:	9e08      	ldr	r6, [sp, #32]
 8017414:	1b89      	subs	r1, r1, r6
 8017416:	2908      	cmp	r1, #8
 8017418:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801741c:	dc02      	bgt.n	8017424 <_strtod_l+0x2ec>
 801741e:	4576      	cmp	r6, lr
 8017420:	bfa8      	it	ge
 8017422:	4676      	movge	r6, lr
 8017424:	f1bc 0f00 	cmp.w	ip, #0
 8017428:	d000      	beq.n	801742c <_strtod_l+0x2f4>
 801742a:	4276      	negs	r6, r6
 801742c:	2d00      	cmp	r5, #0
 801742e:	d14f      	bne.n	80174d0 <_strtod_l+0x398>
 8017430:	9904      	ldr	r1, [sp, #16]
 8017432:	4301      	orrs	r1, r0
 8017434:	f47f aec2 	bne.w	80171bc <_strtod_l+0x84>
 8017438:	2a00      	cmp	r2, #0
 801743a:	f47f aedb 	bne.w	80171f4 <_strtod_l+0xbc>
 801743e:	2b69      	cmp	r3, #105	; 0x69
 8017440:	d027      	beq.n	8017492 <_strtod_l+0x35a>
 8017442:	dc24      	bgt.n	801748e <_strtod_l+0x356>
 8017444:	2b49      	cmp	r3, #73	; 0x49
 8017446:	d024      	beq.n	8017492 <_strtod_l+0x35a>
 8017448:	2b4e      	cmp	r3, #78	; 0x4e
 801744a:	f47f aed3 	bne.w	80171f4 <_strtod_l+0xbc>
 801744e:	499e      	ldr	r1, [pc, #632]	; (80176c8 <_strtod_l+0x590>)
 8017450:	a81d      	add	r0, sp, #116	; 0x74
 8017452:	f001 fe41 	bl	80190d8 <__match>
 8017456:	2800      	cmp	r0, #0
 8017458:	f43f aecc 	beq.w	80171f4 <_strtod_l+0xbc>
 801745c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	2b28      	cmp	r3, #40	; 0x28
 8017462:	d12d      	bne.n	80174c0 <_strtod_l+0x388>
 8017464:	4999      	ldr	r1, [pc, #612]	; (80176cc <_strtod_l+0x594>)
 8017466:	aa20      	add	r2, sp, #128	; 0x80
 8017468:	a81d      	add	r0, sp, #116	; 0x74
 801746a:	f001 fe49 	bl	8019100 <__hexnan>
 801746e:	2805      	cmp	r0, #5
 8017470:	d126      	bne.n	80174c0 <_strtod_l+0x388>
 8017472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017474:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017478:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801747c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017480:	e69c      	b.n	80171bc <_strtod_l+0x84>
 8017482:	210a      	movs	r1, #10
 8017484:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017488:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801748c:	e7b9      	b.n	8017402 <_strtod_l+0x2ca>
 801748e:	2b6e      	cmp	r3, #110	; 0x6e
 8017490:	e7db      	b.n	801744a <_strtod_l+0x312>
 8017492:	498f      	ldr	r1, [pc, #572]	; (80176d0 <_strtod_l+0x598>)
 8017494:	a81d      	add	r0, sp, #116	; 0x74
 8017496:	f001 fe1f 	bl	80190d8 <__match>
 801749a:	2800      	cmp	r0, #0
 801749c:	f43f aeaa 	beq.w	80171f4 <_strtod_l+0xbc>
 80174a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80174a2:	498c      	ldr	r1, [pc, #560]	; (80176d4 <_strtod_l+0x59c>)
 80174a4:	3b01      	subs	r3, #1
 80174a6:	a81d      	add	r0, sp, #116	; 0x74
 80174a8:	931d      	str	r3, [sp, #116]	; 0x74
 80174aa:	f001 fe15 	bl	80190d8 <__match>
 80174ae:	b910      	cbnz	r0, 80174b6 <_strtod_l+0x37e>
 80174b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80174b2:	3301      	adds	r3, #1
 80174b4:	931d      	str	r3, [sp, #116]	; 0x74
 80174b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80176e4 <_strtod_l+0x5ac>
 80174ba:	f04f 0a00 	mov.w	sl, #0
 80174be:	e67d      	b.n	80171bc <_strtod_l+0x84>
 80174c0:	4885      	ldr	r0, [pc, #532]	; (80176d8 <_strtod_l+0x5a0>)
 80174c2:	f002 fd01 	bl	8019ec8 <nan>
 80174c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80174ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80174ce:	e675      	b.n	80171bc <_strtod_l+0x84>
 80174d0:	9b07      	ldr	r3, [sp, #28]
 80174d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174d4:	1af3      	subs	r3, r6, r3
 80174d6:	2f00      	cmp	r7, #0
 80174d8:	bf08      	it	eq
 80174da:	462f      	moveq	r7, r5
 80174dc:	2d10      	cmp	r5, #16
 80174de:	9308      	str	r3, [sp, #32]
 80174e0:	46a8      	mov	r8, r5
 80174e2:	bfa8      	it	ge
 80174e4:	f04f 0810 	movge.w	r8, #16
 80174e8:	f7e9 f80c 	bl	8000504 <__aeabi_ui2d>
 80174ec:	2d09      	cmp	r5, #9
 80174ee:	4682      	mov	sl, r0
 80174f0:	468b      	mov	fp, r1
 80174f2:	dd13      	ble.n	801751c <_strtod_l+0x3e4>
 80174f4:	4b79      	ldr	r3, [pc, #484]	; (80176dc <_strtod_l+0x5a4>)
 80174f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80174fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80174fe:	f7e9 f87b 	bl	80005f8 <__aeabi_dmul>
 8017502:	4682      	mov	sl, r0
 8017504:	4648      	mov	r0, r9
 8017506:	468b      	mov	fp, r1
 8017508:	f7e8 fffc 	bl	8000504 <__aeabi_ui2d>
 801750c:	4602      	mov	r2, r0
 801750e:	460b      	mov	r3, r1
 8017510:	4650      	mov	r0, sl
 8017512:	4659      	mov	r1, fp
 8017514:	f7e8 feba 	bl	800028c <__adddf3>
 8017518:	4682      	mov	sl, r0
 801751a:	468b      	mov	fp, r1
 801751c:	2d0f      	cmp	r5, #15
 801751e:	dc38      	bgt.n	8017592 <_strtod_l+0x45a>
 8017520:	9b08      	ldr	r3, [sp, #32]
 8017522:	2b00      	cmp	r3, #0
 8017524:	f43f ae4a 	beq.w	80171bc <_strtod_l+0x84>
 8017528:	dd24      	ble.n	8017574 <_strtod_l+0x43c>
 801752a:	2b16      	cmp	r3, #22
 801752c:	dc0b      	bgt.n	8017546 <_strtod_l+0x40e>
 801752e:	4d6b      	ldr	r5, [pc, #428]	; (80176dc <_strtod_l+0x5a4>)
 8017530:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017534:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017538:	4652      	mov	r2, sl
 801753a:	465b      	mov	r3, fp
 801753c:	f7e9 f85c 	bl	80005f8 <__aeabi_dmul>
 8017540:	4682      	mov	sl, r0
 8017542:	468b      	mov	fp, r1
 8017544:	e63a      	b.n	80171bc <_strtod_l+0x84>
 8017546:	9a08      	ldr	r2, [sp, #32]
 8017548:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801754c:	4293      	cmp	r3, r2
 801754e:	db20      	blt.n	8017592 <_strtod_l+0x45a>
 8017550:	4c62      	ldr	r4, [pc, #392]	; (80176dc <_strtod_l+0x5a4>)
 8017552:	f1c5 050f 	rsb	r5, r5, #15
 8017556:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801755a:	4652      	mov	r2, sl
 801755c:	465b      	mov	r3, fp
 801755e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017562:	f7e9 f849 	bl	80005f8 <__aeabi_dmul>
 8017566:	9b08      	ldr	r3, [sp, #32]
 8017568:	1b5d      	subs	r5, r3, r5
 801756a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801756e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017572:	e7e3      	b.n	801753c <_strtod_l+0x404>
 8017574:	9b08      	ldr	r3, [sp, #32]
 8017576:	3316      	adds	r3, #22
 8017578:	db0b      	blt.n	8017592 <_strtod_l+0x45a>
 801757a:	9b07      	ldr	r3, [sp, #28]
 801757c:	4a57      	ldr	r2, [pc, #348]	; (80176dc <_strtod_l+0x5a4>)
 801757e:	1b9e      	subs	r6, r3, r6
 8017580:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017584:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017588:	4650      	mov	r0, sl
 801758a:	4659      	mov	r1, fp
 801758c:	f7e9 f95e 	bl	800084c <__aeabi_ddiv>
 8017590:	e7d6      	b.n	8017540 <_strtod_l+0x408>
 8017592:	9b08      	ldr	r3, [sp, #32]
 8017594:	eba5 0808 	sub.w	r8, r5, r8
 8017598:	4498      	add	r8, r3
 801759a:	f1b8 0f00 	cmp.w	r8, #0
 801759e:	dd71      	ble.n	8017684 <_strtod_l+0x54c>
 80175a0:	f018 030f 	ands.w	r3, r8, #15
 80175a4:	d00a      	beq.n	80175bc <_strtod_l+0x484>
 80175a6:	494d      	ldr	r1, [pc, #308]	; (80176dc <_strtod_l+0x5a4>)
 80175a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80175ac:	4652      	mov	r2, sl
 80175ae:	465b      	mov	r3, fp
 80175b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175b4:	f7e9 f820 	bl	80005f8 <__aeabi_dmul>
 80175b8:	4682      	mov	sl, r0
 80175ba:	468b      	mov	fp, r1
 80175bc:	f038 080f 	bics.w	r8, r8, #15
 80175c0:	d04d      	beq.n	801765e <_strtod_l+0x526>
 80175c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80175c6:	dd22      	ble.n	801760e <_strtod_l+0x4d6>
 80175c8:	2500      	movs	r5, #0
 80175ca:	462e      	mov	r6, r5
 80175cc:	9509      	str	r5, [sp, #36]	; 0x24
 80175ce:	9507      	str	r5, [sp, #28]
 80175d0:	2322      	movs	r3, #34	; 0x22
 80175d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80176e4 <_strtod_l+0x5ac>
 80175d6:	6023      	str	r3, [r4, #0]
 80175d8:	f04f 0a00 	mov.w	sl, #0
 80175dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175de:	2b00      	cmp	r3, #0
 80175e0:	f43f adec 	beq.w	80171bc <_strtod_l+0x84>
 80175e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80175e6:	4620      	mov	r0, r4
 80175e8:	f001 fe88 	bl	80192fc <_Bfree>
 80175ec:	9907      	ldr	r1, [sp, #28]
 80175ee:	4620      	mov	r0, r4
 80175f0:	f001 fe84 	bl	80192fc <_Bfree>
 80175f4:	4631      	mov	r1, r6
 80175f6:	4620      	mov	r0, r4
 80175f8:	f001 fe80 	bl	80192fc <_Bfree>
 80175fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175fe:	4620      	mov	r0, r4
 8017600:	f001 fe7c 	bl	80192fc <_Bfree>
 8017604:	4629      	mov	r1, r5
 8017606:	4620      	mov	r0, r4
 8017608:	f001 fe78 	bl	80192fc <_Bfree>
 801760c:	e5d6      	b.n	80171bc <_strtod_l+0x84>
 801760e:	2300      	movs	r3, #0
 8017610:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017614:	4650      	mov	r0, sl
 8017616:	4659      	mov	r1, fp
 8017618:	4699      	mov	r9, r3
 801761a:	f1b8 0f01 	cmp.w	r8, #1
 801761e:	dc21      	bgt.n	8017664 <_strtod_l+0x52c>
 8017620:	b10b      	cbz	r3, 8017626 <_strtod_l+0x4ee>
 8017622:	4682      	mov	sl, r0
 8017624:	468b      	mov	fp, r1
 8017626:	4b2e      	ldr	r3, [pc, #184]	; (80176e0 <_strtod_l+0x5a8>)
 8017628:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801762c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017630:	4652      	mov	r2, sl
 8017632:	465b      	mov	r3, fp
 8017634:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017638:	f7e8 ffde 	bl	80005f8 <__aeabi_dmul>
 801763c:	4b29      	ldr	r3, [pc, #164]	; (80176e4 <_strtod_l+0x5ac>)
 801763e:	460a      	mov	r2, r1
 8017640:	400b      	ands	r3, r1
 8017642:	4929      	ldr	r1, [pc, #164]	; (80176e8 <_strtod_l+0x5b0>)
 8017644:	428b      	cmp	r3, r1
 8017646:	4682      	mov	sl, r0
 8017648:	d8be      	bhi.n	80175c8 <_strtod_l+0x490>
 801764a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801764e:	428b      	cmp	r3, r1
 8017650:	bf86      	itte	hi
 8017652:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80176ec <_strtod_l+0x5b4>
 8017656:	f04f 3aff 	movhi.w	sl, #4294967295
 801765a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801765e:	2300      	movs	r3, #0
 8017660:	9304      	str	r3, [sp, #16]
 8017662:	e081      	b.n	8017768 <_strtod_l+0x630>
 8017664:	f018 0f01 	tst.w	r8, #1
 8017668:	d007      	beq.n	801767a <_strtod_l+0x542>
 801766a:	4b1d      	ldr	r3, [pc, #116]	; (80176e0 <_strtod_l+0x5a8>)
 801766c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017674:	f7e8 ffc0 	bl	80005f8 <__aeabi_dmul>
 8017678:	2301      	movs	r3, #1
 801767a:	f109 0901 	add.w	r9, r9, #1
 801767e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017682:	e7ca      	b.n	801761a <_strtod_l+0x4e2>
 8017684:	d0eb      	beq.n	801765e <_strtod_l+0x526>
 8017686:	f1c8 0800 	rsb	r8, r8, #0
 801768a:	f018 020f 	ands.w	r2, r8, #15
 801768e:	d00a      	beq.n	80176a6 <_strtod_l+0x56e>
 8017690:	4b12      	ldr	r3, [pc, #72]	; (80176dc <_strtod_l+0x5a4>)
 8017692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017696:	4650      	mov	r0, sl
 8017698:	4659      	mov	r1, fp
 801769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801769e:	f7e9 f8d5 	bl	800084c <__aeabi_ddiv>
 80176a2:	4682      	mov	sl, r0
 80176a4:	468b      	mov	fp, r1
 80176a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80176aa:	d0d8      	beq.n	801765e <_strtod_l+0x526>
 80176ac:	f1b8 0f1f 	cmp.w	r8, #31
 80176b0:	dd1e      	ble.n	80176f0 <_strtod_l+0x5b8>
 80176b2:	2500      	movs	r5, #0
 80176b4:	462e      	mov	r6, r5
 80176b6:	9509      	str	r5, [sp, #36]	; 0x24
 80176b8:	9507      	str	r5, [sp, #28]
 80176ba:	2322      	movs	r3, #34	; 0x22
 80176bc:	f04f 0a00 	mov.w	sl, #0
 80176c0:	f04f 0b00 	mov.w	fp, #0
 80176c4:	6023      	str	r3, [r4, #0]
 80176c6:	e789      	b.n	80175dc <_strtod_l+0x4a4>
 80176c8:	0801c721 	.word	0x0801c721
 80176cc:	0801c764 	.word	0x0801c764
 80176d0:	0801c719 	.word	0x0801c719
 80176d4:	0801c8a4 	.word	0x0801c8a4
 80176d8:	0801cb60 	.word	0x0801cb60
 80176dc:	0801ca40 	.word	0x0801ca40
 80176e0:	0801ca18 	.word	0x0801ca18
 80176e4:	7ff00000 	.word	0x7ff00000
 80176e8:	7ca00000 	.word	0x7ca00000
 80176ec:	7fefffff 	.word	0x7fefffff
 80176f0:	f018 0310 	ands.w	r3, r8, #16
 80176f4:	bf18      	it	ne
 80176f6:	236a      	movne	r3, #106	; 0x6a
 80176f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017ab0 <_strtod_l+0x978>
 80176fc:	9304      	str	r3, [sp, #16]
 80176fe:	4650      	mov	r0, sl
 8017700:	4659      	mov	r1, fp
 8017702:	2300      	movs	r3, #0
 8017704:	f018 0f01 	tst.w	r8, #1
 8017708:	d004      	beq.n	8017714 <_strtod_l+0x5dc>
 801770a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801770e:	f7e8 ff73 	bl	80005f8 <__aeabi_dmul>
 8017712:	2301      	movs	r3, #1
 8017714:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017718:	f109 0908 	add.w	r9, r9, #8
 801771c:	d1f2      	bne.n	8017704 <_strtod_l+0x5cc>
 801771e:	b10b      	cbz	r3, 8017724 <_strtod_l+0x5ec>
 8017720:	4682      	mov	sl, r0
 8017722:	468b      	mov	fp, r1
 8017724:	9b04      	ldr	r3, [sp, #16]
 8017726:	b1bb      	cbz	r3, 8017758 <_strtod_l+0x620>
 8017728:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801772c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017730:	2b00      	cmp	r3, #0
 8017732:	4659      	mov	r1, fp
 8017734:	dd10      	ble.n	8017758 <_strtod_l+0x620>
 8017736:	2b1f      	cmp	r3, #31
 8017738:	f340 8128 	ble.w	801798c <_strtod_l+0x854>
 801773c:	2b34      	cmp	r3, #52	; 0x34
 801773e:	bfde      	ittt	le
 8017740:	3b20      	suble	r3, #32
 8017742:	f04f 32ff 	movle.w	r2, #4294967295
 8017746:	fa02 f303 	lslle.w	r3, r2, r3
 801774a:	f04f 0a00 	mov.w	sl, #0
 801774e:	bfcc      	ite	gt
 8017750:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017754:	ea03 0b01 	andle.w	fp, r3, r1
 8017758:	2200      	movs	r2, #0
 801775a:	2300      	movs	r3, #0
 801775c:	4650      	mov	r0, sl
 801775e:	4659      	mov	r1, fp
 8017760:	f7e9 f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8017764:	2800      	cmp	r0, #0
 8017766:	d1a4      	bne.n	80176b2 <_strtod_l+0x57a>
 8017768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801776a:	9300      	str	r3, [sp, #0]
 801776c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801776e:	462b      	mov	r3, r5
 8017770:	463a      	mov	r2, r7
 8017772:	4620      	mov	r0, r4
 8017774:	f001 fe2e 	bl	80193d4 <__s2b>
 8017778:	9009      	str	r0, [sp, #36]	; 0x24
 801777a:	2800      	cmp	r0, #0
 801777c:	f43f af24 	beq.w	80175c8 <_strtod_l+0x490>
 8017780:	9b07      	ldr	r3, [sp, #28]
 8017782:	1b9e      	subs	r6, r3, r6
 8017784:	9b08      	ldr	r3, [sp, #32]
 8017786:	2b00      	cmp	r3, #0
 8017788:	bfb4      	ite	lt
 801778a:	4633      	movlt	r3, r6
 801778c:	2300      	movge	r3, #0
 801778e:	9310      	str	r3, [sp, #64]	; 0x40
 8017790:	9b08      	ldr	r3, [sp, #32]
 8017792:	2500      	movs	r5, #0
 8017794:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017798:	9318      	str	r3, [sp, #96]	; 0x60
 801779a:	462e      	mov	r6, r5
 801779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801779e:	4620      	mov	r0, r4
 80177a0:	6859      	ldr	r1, [r3, #4]
 80177a2:	f001 fd6b 	bl	801927c <_Balloc>
 80177a6:	9007      	str	r0, [sp, #28]
 80177a8:	2800      	cmp	r0, #0
 80177aa:	f43f af11 	beq.w	80175d0 <_strtod_l+0x498>
 80177ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177b0:	691a      	ldr	r2, [r3, #16]
 80177b2:	3202      	adds	r2, #2
 80177b4:	f103 010c 	add.w	r1, r3, #12
 80177b8:	0092      	lsls	r2, r2, #2
 80177ba:	300c      	adds	r0, #12
 80177bc:	f7fe fce0 	bl	8016180 <memcpy>
 80177c0:	ec4b ab10 	vmov	d0, sl, fp
 80177c4:	aa20      	add	r2, sp, #128	; 0x80
 80177c6:	a91f      	add	r1, sp, #124	; 0x7c
 80177c8:	4620      	mov	r0, r4
 80177ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80177ce:	f002 f93d 	bl	8019a4c <__d2b>
 80177d2:	901e      	str	r0, [sp, #120]	; 0x78
 80177d4:	2800      	cmp	r0, #0
 80177d6:	f43f aefb 	beq.w	80175d0 <_strtod_l+0x498>
 80177da:	2101      	movs	r1, #1
 80177dc:	4620      	mov	r0, r4
 80177de:	f001 fe93 	bl	8019508 <__i2b>
 80177e2:	4606      	mov	r6, r0
 80177e4:	2800      	cmp	r0, #0
 80177e6:	f43f aef3 	beq.w	80175d0 <_strtod_l+0x498>
 80177ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80177ec:	9904      	ldr	r1, [sp, #16]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	bfab      	itete	ge
 80177f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80177f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80177f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80177f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80177fc:	bfac      	ite	ge
 80177fe:	eb03 0902 	addge.w	r9, r3, r2
 8017802:	1ad7      	sublt	r7, r2, r3
 8017804:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017806:	eba3 0801 	sub.w	r8, r3, r1
 801780a:	4490      	add	r8, r2
 801780c:	4ba3      	ldr	r3, [pc, #652]	; (8017a9c <_strtod_l+0x964>)
 801780e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017812:	4598      	cmp	r8, r3
 8017814:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017818:	f280 80cc 	bge.w	80179b4 <_strtod_l+0x87c>
 801781c:	eba3 0308 	sub.w	r3, r3, r8
 8017820:	2b1f      	cmp	r3, #31
 8017822:	eba2 0203 	sub.w	r2, r2, r3
 8017826:	f04f 0101 	mov.w	r1, #1
 801782a:	f300 80b6 	bgt.w	801799a <_strtod_l+0x862>
 801782e:	fa01 f303 	lsl.w	r3, r1, r3
 8017832:	9311      	str	r3, [sp, #68]	; 0x44
 8017834:	2300      	movs	r3, #0
 8017836:	930c      	str	r3, [sp, #48]	; 0x30
 8017838:	eb09 0802 	add.w	r8, r9, r2
 801783c:	9b04      	ldr	r3, [sp, #16]
 801783e:	45c1      	cmp	r9, r8
 8017840:	4417      	add	r7, r2
 8017842:	441f      	add	r7, r3
 8017844:	464b      	mov	r3, r9
 8017846:	bfa8      	it	ge
 8017848:	4643      	movge	r3, r8
 801784a:	42bb      	cmp	r3, r7
 801784c:	bfa8      	it	ge
 801784e:	463b      	movge	r3, r7
 8017850:	2b00      	cmp	r3, #0
 8017852:	bfc2      	ittt	gt
 8017854:	eba8 0803 	subgt.w	r8, r8, r3
 8017858:	1aff      	subgt	r7, r7, r3
 801785a:	eba9 0903 	subgt.w	r9, r9, r3
 801785e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017860:	2b00      	cmp	r3, #0
 8017862:	dd17      	ble.n	8017894 <_strtod_l+0x75c>
 8017864:	4631      	mov	r1, r6
 8017866:	461a      	mov	r2, r3
 8017868:	4620      	mov	r0, r4
 801786a:	f001 ff09 	bl	8019680 <__pow5mult>
 801786e:	4606      	mov	r6, r0
 8017870:	2800      	cmp	r0, #0
 8017872:	f43f aead 	beq.w	80175d0 <_strtod_l+0x498>
 8017876:	4601      	mov	r1, r0
 8017878:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801787a:	4620      	mov	r0, r4
 801787c:	f001 fe5a 	bl	8019534 <__multiply>
 8017880:	900f      	str	r0, [sp, #60]	; 0x3c
 8017882:	2800      	cmp	r0, #0
 8017884:	f43f aea4 	beq.w	80175d0 <_strtod_l+0x498>
 8017888:	991e      	ldr	r1, [sp, #120]	; 0x78
 801788a:	4620      	mov	r0, r4
 801788c:	f001 fd36 	bl	80192fc <_Bfree>
 8017890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017892:	931e      	str	r3, [sp, #120]	; 0x78
 8017894:	f1b8 0f00 	cmp.w	r8, #0
 8017898:	f300 8091 	bgt.w	80179be <_strtod_l+0x886>
 801789c:	9b08      	ldr	r3, [sp, #32]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	dd08      	ble.n	80178b4 <_strtod_l+0x77c>
 80178a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80178a4:	9907      	ldr	r1, [sp, #28]
 80178a6:	4620      	mov	r0, r4
 80178a8:	f001 feea 	bl	8019680 <__pow5mult>
 80178ac:	9007      	str	r0, [sp, #28]
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f43f ae8e 	beq.w	80175d0 <_strtod_l+0x498>
 80178b4:	2f00      	cmp	r7, #0
 80178b6:	dd08      	ble.n	80178ca <_strtod_l+0x792>
 80178b8:	9907      	ldr	r1, [sp, #28]
 80178ba:	463a      	mov	r2, r7
 80178bc:	4620      	mov	r0, r4
 80178be:	f001 ff39 	bl	8019734 <__lshift>
 80178c2:	9007      	str	r0, [sp, #28]
 80178c4:	2800      	cmp	r0, #0
 80178c6:	f43f ae83 	beq.w	80175d0 <_strtod_l+0x498>
 80178ca:	f1b9 0f00 	cmp.w	r9, #0
 80178ce:	dd08      	ble.n	80178e2 <_strtod_l+0x7aa>
 80178d0:	4631      	mov	r1, r6
 80178d2:	464a      	mov	r2, r9
 80178d4:	4620      	mov	r0, r4
 80178d6:	f001 ff2d 	bl	8019734 <__lshift>
 80178da:	4606      	mov	r6, r0
 80178dc:	2800      	cmp	r0, #0
 80178de:	f43f ae77 	beq.w	80175d0 <_strtod_l+0x498>
 80178e2:	9a07      	ldr	r2, [sp, #28]
 80178e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80178e6:	4620      	mov	r0, r4
 80178e8:	f001 ffac 	bl	8019844 <__mdiff>
 80178ec:	4605      	mov	r5, r0
 80178ee:	2800      	cmp	r0, #0
 80178f0:	f43f ae6e 	beq.w	80175d0 <_strtod_l+0x498>
 80178f4:	68c3      	ldr	r3, [r0, #12]
 80178f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80178f8:	2300      	movs	r3, #0
 80178fa:	60c3      	str	r3, [r0, #12]
 80178fc:	4631      	mov	r1, r6
 80178fe:	f001 ff85 	bl	801980c <__mcmp>
 8017902:	2800      	cmp	r0, #0
 8017904:	da65      	bge.n	80179d2 <_strtod_l+0x89a>
 8017906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017908:	ea53 030a 	orrs.w	r3, r3, sl
 801790c:	f040 8087 	bne.w	8017a1e <_strtod_l+0x8e6>
 8017910:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017914:	2b00      	cmp	r3, #0
 8017916:	f040 8082 	bne.w	8017a1e <_strtod_l+0x8e6>
 801791a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801791e:	0d1b      	lsrs	r3, r3, #20
 8017920:	051b      	lsls	r3, r3, #20
 8017922:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017926:	d97a      	bls.n	8017a1e <_strtod_l+0x8e6>
 8017928:	696b      	ldr	r3, [r5, #20]
 801792a:	b913      	cbnz	r3, 8017932 <_strtod_l+0x7fa>
 801792c:	692b      	ldr	r3, [r5, #16]
 801792e:	2b01      	cmp	r3, #1
 8017930:	dd75      	ble.n	8017a1e <_strtod_l+0x8e6>
 8017932:	4629      	mov	r1, r5
 8017934:	2201      	movs	r2, #1
 8017936:	4620      	mov	r0, r4
 8017938:	f001 fefc 	bl	8019734 <__lshift>
 801793c:	4631      	mov	r1, r6
 801793e:	4605      	mov	r5, r0
 8017940:	f001 ff64 	bl	801980c <__mcmp>
 8017944:	2800      	cmp	r0, #0
 8017946:	dd6a      	ble.n	8017a1e <_strtod_l+0x8e6>
 8017948:	9904      	ldr	r1, [sp, #16]
 801794a:	4a55      	ldr	r2, [pc, #340]	; (8017aa0 <_strtod_l+0x968>)
 801794c:	465b      	mov	r3, fp
 801794e:	2900      	cmp	r1, #0
 8017950:	f000 8085 	beq.w	8017a5e <_strtod_l+0x926>
 8017954:	ea02 010b 	and.w	r1, r2, fp
 8017958:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801795c:	dc7f      	bgt.n	8017a5e <_strtod_l+0x926>
 801795e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017962:	f77f aeaa 	ble.w	80176ba <_strtod_l+0x582>
 8017966:	4a4f      	ldr	r2, [pc, #316]	; (8017aa4 <_strtod_l+0x96c>)
 8017968:	2300      	movs	r3, #0
 801796a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801796e:	4650      	mov	r0, sl
 8017970:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017974:	4659      	mov	r1, fp
 8017976:	f7e8 fe3f 	bl	80005f8 <__aeabi_dmul>
 801797a:	460b      	mov	r3, r1
 801797c:	4303      	orrs	r3, r0
 801797e:	bf08      	it	eq
 8017980:	2322      	moveq	r3, #34	; 0x22
 8017982:	4682      	mov	sl, r0
 8017984:	468b      	mov	fp, r1
 8017986:	bf08      	it	eq
 8017988:	6023      	streq	r3, [r4, #0]
 801798a:	e62b      	b.n	80175e4 <_strtod_l+0x4ac>
 801798c:	f04f 32ff 	mov.w	r2, #4294967295
 8017990:	fa02 f303 	lsl.w	r3, r2, r3
 8017994:	ea03 0a0a 	and.w	sl, r3, sl
 8017998:	e6de      	b.n	8017758 <_strtod_l+0x620>
 801799a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801799e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80179a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80179a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80179aa:	fa01 f308 	lsl.w	r3, r1, r8
 80179ae:	930c      	str	r3, [sp, #48]	; 0x30
 80179b0:	9111      	str	r1, [sp, #68]	; 0x44
 80179b2:	e741      	b.n	8017838 <_strtod_l+0x700>
 80179b4:	2300      	movs	r3, #0
 80179b6:	930c      	str	r3, [sp, #48]	; 0x30
 80179b8:	2301      	movs	r3, #1
 80179ba:	9311      	str	r3, [sp, #68]	; 0x44
 80179bc:	e73c      	b.n	8017838 <_strtod_l+0x700>
 80179be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80179c0:	4642      	mov	r2, r8
 80179c2:	4620      	mov	r0, r4
 80179c4:	f001 feb6 	bl	8019734 <__lshift>
 80179c8:	901e      	str	r0, [sp, #120]	; 0x78
 80179ca:	2800      	cmp	r0, #0
 80179cc:	f47f af66 	bne.w	801789c <_strtod_l+0x764>
 80179d0:	e5fe      	b.n	80175d0 <_strtod_l+0x498>
 80179d2:	465f      	mov	r7, fp
 80179d4:	d16e      	bne.n	8017ab4 <_strtod_l+0x97c>
 80179d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80179d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80179dc:	b342      	cbz	r2, 8017a30 <_strtod_l+0x8f8>
 80179de:	4a32      	ldr	r2, [pc, #200]	; (8017aa8 <_strtod_l+0x970>)
 80179e0:	4293      	cmp	r3, r2
 80179e2:	d128      	bne.n	8017a36 <_strtod_l+0x8fe>
 80179e4:	9b04      	ldr	r3, [sp, #16]
 80179e6:	4650      	mov	r0, sl
 80179e8:	b1eb      	cbz	r3, 8017a26 <_strtod_l+0x8ee>
 80179ea:	4a2d      	ldr	r2, [pc, #180]	; (8017aa0 <_strtod_l+0x968>)
 80179ec:	403a      	ands	r2, r7
 80179ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80179f2:	f04f 31ff 	mov.w	r1, #4294967295
 80179f6:	d819      	bhi.n	8017a2c <_strtod_l+0x8f4>
 80179f8:	0d12      	lsrs	r2, r2, #20
 80179fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80179fe:	fa01 f303 	lsl.w	r3, r1, r3
 8017a02:	4298      	cmp	r0, r3
 8017a04:	d117      	bne.n	8017a36 <_strtod_l+0x8fe>
 8017a06:	4b29      	ldr	r3, [pc, #164]	; (8017aac <_strtod_l+0x974>)
 8017a08:	429f      	cmp	r7, r3
 8017a0a:	d102      	bne.n	8017a12 <_strtod_l+0x8da>
 8017a0c:	3001      	adds	r0, #1
 8017a0e:	f43f addf 	beq.w	80175d0 <_strtod_l+0x498>
 8017a12:	4b23      	ldr	r3, [pc, #140]	; (8017aa0 <_strtod_l+0x968>)
 8017a14:	403b      	ands	r3, r7
 8017a16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017a1a:	f04f 0a00 	mov.w	sl, #0
 8017a1e:	9b04      	ldr	r3, [sp, #16]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1a0      	bne.n	8017966 <_strtod_l+0x82e>
 8017a24:	e5de      	b.n	80175e4 <_strtod_l+0x4ac>
 8017a26:	f04f 33ff 	mov.w	r3, #4294967295
 8017a2a:	e7ea      	b.n	8017a02 <_strtod_l+0x8ca>
 8017a2c:	460b      	mov	r3, r1
 8017a2e:	e7e8      	b.n	8017a02 <_strtod_l+0x8ca>
 8017a30:	ea53 030a 	orrs.w	r3, r3, sl
 8017a34:	d088      	beq.n	8017948 <_strtod_l+0x810>
 8017a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a38:	b1db      	cbz	r3, 8017a72 <_strtod_l+0x93a>
 8017a3a:	423b      	tst	r3, r7
 8017a3c:	d0ef      	beq.n	8017a1e <_strtod_l+0x8e6>
 8017a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a40:	9a04      	ldr	r2, [sp, #16]
 8017a42:	4650      	mov	r0, sl
 8017a44:	4659      	mov	r1, fp
 8017a46:	b1c3      	cbz	r3, 8017a7a <_strtod_l+0x942>
 8017a48:	f7ff fb58 	bl	80170fc <sulp>
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	460b      	mov	r3, r1
 8017a50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017a54:	f7e8 fc1a 	bl	800028c <__adddf3>
 8017a58:	4682      	mov	sl, r0
 8017a5a:	468b      	mov	fp, r1
 8017a5c:	e7df      	b.n	8017a1e <_strtod_l+0x8e6>
 8017a5e:	4013      	ands	r3, r2
 8017a60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017a64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017a68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017a6c:	f04f 3aff 	mov.w	sl, #4294967295
 8017a70:	e7d5      	b.n	8017a1e <_strtod_l+0x8e6>
 8017a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a74:	ea13 0f0a 	tst.w	r3, sl
 8017a78:	e7e0      	b.n	8017a3c <_strtod_l+0x904>
 8017a7a:	f7ff fb3f 	bl	80170fc <sulp>
 8017a7e:	4602      	mov	r2, r0
 8017a80:	460b      	mov	r3, r1
 8017a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017a86:	f7e8 fbff 	bl	8000288 <__aeabi_dsub>
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	4682      	mov	sl, r0
 8017a90:	468b      	mov	fp, r1
 8017a92:	f7e9 f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d0c1      	beq.n	8017a1e <_strtod_l+0x8e6>
 8017a9a:	e60e      	b.n	80176ba <_strtod_l+0x582>
 8017a9c:	fffffc02 	.word	0xfffffc02
 8017aa0:	7ff00000 	.word	0x7ff00000
 8017aa4:	39500000 	.word	0x39500000
 8017aa8:	000fffff 	.word	0x000fffff
 8017aac:	7fefffff 	.word	0x7fefffff
 8017ab0:	0801c778 	.word	0x0801c778
 8017ab4:	4631      	mov	r1, r6
 8017ab6:	4628      	mov	r0, r5
 8017ab8:	f002 f824 	bl	8019b04 <__ratio>
 8017abc:	ec59 8b10 	vmov	r8, r9, d0
 8017ac0:	ee10 0a10 	vmov	r0, s0
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017aca:	4649      	mov	r1, r9
 8017acc:	f7e9 f810 	bl	8000af0 <__aeabi_dcmple>
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	d07c      	beq.n	8017bce <_strtod_l+0xa96>
 8017ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d04c      	beq.n	8017b74 <_strtod_l+0xa3c>
 8017ada:	4b95      	ldr	r3, [pc, #596]	; (8017d30 <_strtod_l+0xbf8>)
 8017adc:	2200      	movs	r2, #0
 8017ade:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017ae2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017d30 <_strtod_l+0xbf8>
 8017ae6:	f04f 0800 	mov.w	r8, #0
 8017aea:	4b92      	ldr	r3, [pc, #584]	; (8017d34 <_strtod_l+0xbfc>)
 8017aec:	403b      	ands	r3, r7
 8017aee:	9311      	str	r3, [sp, #68]	; 0x44
 8017af0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017af2:	4b91      	ldr	r3, [pc, #580]	; (8017d38 <_strtod_l+0xc00>)
 8017af4:	429a      	cmp	r2, r3
 8017af6:	f040 80b2 	bne.w	8017c5e <_strtod_l+0xb26>
 8017afa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b02:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017b06:	ec4b ab10 	vmov	d0, sl, fp
 8017b0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017b0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b12:	f001 ff1f 	bl	8019954 <__ulp>
 8017b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b1a:	ec53 2b10 	vmov	r2, r3, d0
 8017b1e:	f7e8 fd6b 	bl	80005f8 <__aeabi_dmul>
 8017b22:	4652      	mov	r2, sl
 8017b24:	465b      	mov	r3, fp
 8017b26:	f7e8 fbb1 	bl	800028c <__adddf3>
 8017b2a:	460b      	mov	r3, r1
 8017b2c:	4981      	ldr	r1, [pc, #516]	; (8017d34 <_strtod_l+0xbfc>)
 8017b2e:	4a83      	ldr	r2, [pc, #524]	; (8017d3c <_strtod_l+0xc04>)
 8017b30:	4019      	ands	r1, r3
 8017b32:	4291      	cmp	r1, r2
 8017b34:	4682      	mov	sl, r0
 8017b36:	d95e      	bls.n	8017bf6 <_strtod_l+0xabe>
 8017b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017b3e:	4293      	cmp	r3, r2
 8017b40:	d103      	bne.n	8017b4a <_strtod_l+0xa12>
 8017b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b44:	3301      	adds	r3, #1
 8017b46:	f43f ad43 	beq.w	80175d0 <_strtod_l+0x498>
 8017b4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017d48 <_strtod_l+0xc10>
 8017b4e:	f04f 3aff 	mov.w	sl, #4294967295
 8017b52:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017b54:	4620      	mov	r0, r4
 8017b56:	f001 fbd1 	bl	80192fc <_Bfree>
 8017b5a:	9907      	ldr	r1, [sp, #28]
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f001 fbcd 	bl	80192fc <_Bfree>
 8017b62:	4631      	mov	r1, r6
 8017b64:	4620      	mov	r0, r4
 8017b66:	f001 fbc9 	bl	80192fc <_Bfree>
 8017b6a:	4629      	mov	r1, r5
 8017b6c:	4620      	mov	r0, r4
 8017b6e:	f001 fbc5 	bl	80192fc <_Bfree>
 8017b72:	e613      	b.n	801779c <_strtod_l+0x664>
 8017b74:	f1ba 0f00 	cmp.w	sl, #0
 8017b78:	d11b      	bne.n	8017bb2 <_strtod_l+0xa7a>
 8017b7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b7e:	b9f3      	cbnz	r3, 8017bbe <_strtod_l+0xa86>
 8017b80:	4b6b      	ldr	r3, [pc, #428]	; (8017d30 <_strtod_l+0xbf8>)
 8017b82:	2200      	movs	r2, #0
 8017b84:	4640      	mov	r0, r8
 8017b86:	4649      	mov	r1, r9
 8017b88:	f7e8 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8017b8c:	b9d0      	cbnz	r0, 8017bc4 <_strtod_l+0xa8c>
 8017b8e:	4640      	mov	r0, r8
 8017b90:	4649      	mov	r1, r9
 8017b92:	4b6b      	ldr	r3, [pc, #428]	; (8017d40 <_strtod_l+0xc08>)
 8017b94:	2200      	movs	r2, #0
 8017b96:	f7e8 fd2f 	bl	80005f8 <__aeabi_dmul>
 8017b9a:	4680      	mov	r8, r0
 8017b9c:	4689      	mov	r9, r1
 8017b9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017ba2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017ba6:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ba8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017bac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017bb0:	e79b      	b.n	8017aea <_strtod_l+0x9b2>
 8017bb2:	f1ba 0f01 	cmp.w	sl, #1
 8017bb6:	d102      	bne.n	8017bbe <_strtod_l+0xa86>
 8017bb8:	2f00      	cmp	r7, #0
 8017bba:	f43f ad7e 	beq.w	80176ba <_strtod_l+0x582>
 8017bbe:	4b61      	ldr	r3, [pc, #388]	; (8017d44 <_strtod_l+0xc0c>)
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	e78c      	b.n	8017ade <_strtod_l+0x9a6>
 8017bc4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017d40 <_strtod_l+0xc08>
 8017bc8:	f04f 0800 	mov.w	r8, #0
 8017bcc:	e7e7      	b.n	8017b9e <_strtod_l+0xa66>
 8017bce:	4b5c      	ldr	r3, [pc, #368]	; (8017d40 <_strtod_l+0xc08>)
 8017bd0:	4640      	mov	r0, r8
 8017bd2:	4649      	mov	r1, r9
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	f7e8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8017bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bdc:	4680      	mov	r8, r0
 8017bde:	4689      	mov	r9, r1
 8017be0:	b933      	cbnz	r3, 8017bf0 <_strtod_l+0xab8>
 8017be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017be6:	9012      	str	r0, [sp, #72]	; 0x48
 8017be8:	9313      	str	r3, [sp, #76]	; 0x4c
 8017bea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017bee:	e7dd      	b.n	8017bac <_strtod_l+0xa74>
 8017bf0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017bf4:	e7f9      	b.n	8017bea <_strtod_l+0xab2>
 8017bf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017bfa:	9b04      	ldr	r3, [sp, #16]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d1a8      	bne.n	8017b52 <_strtod_l+0xa1a>
 8017c00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017c04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017c06:	0d1b      	lsrs	r3, r3, #20
 8017c08:	051b      	lsls	r3, r3, #20
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d1a1      	bne.n	8017b52 <_strtod_l+0xa1a>
 8017c0e:	4640      	mov	r0, r8
 8017c10:	4649      	mov	r1, r9
 8017c12:	f7e9 f851 	bl	8000cb8 <__aeabi_d2lz>
 8017c16:	f7e8 fcc1 	bl	800059c <__aeabi_l2d>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	4640      	mov	r0, r8
 8017c20:	4649      	mov	r1, r9
 8017c22:	f7e8 fb31 	bl	8000288 <__aeabi_dsub>
 8017c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017c2c:	ea43 030a 	orr.w	r3, r3, sl
 8017c30:	4313      	orrs	r3, r2
 8017c32:	4680      	mov	r8, r0
 8017c34:	4689      	mov	r9, r1
 8017c36:	d053      	beq.n	8017ce0 <_strtod_l+0xba8>
 8017c38:	a335      	add	r3, pc, #212	; (adr r3, 8017d10 <_strtod_l+0xbd8>)
 8017c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3e:	f7e8 ff4d 	bl	8000adc <__aeabi_dcmplt>
 8017c42:	2800      	cmp	r0, #0
 8017c44:	f47f acce 	bne.w	80175e4 <_strtod_l+0x4ac>
 8017c48:	a333      	add	r3, pc, #204	; (adr r3, 8017d18 <_strtod_l+0xbe0>)
 8017c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c4e:	4640      	mov	r0, r8
 8017c50:	4649      	mov	r1, r9
 8017c52:	f7e8 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 8017c56:	2800      	cmp	r0, #0
 8017c58:	f43f af7b 	beq.w	8017b52 <_strtod_l+0xa1a>
 8017c5c:	e4c2      	b.n	80175e4 <_strtod_l+0x4ac>
 8017c5e:	9b04      	ldr	r3, [sp, #16]
 8017c60:	b333      	cbz	r3, 8017cb0 <_strtod_l+0xb78>
 8017c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017c68:	d822      	bhi.n	8017cb0 <_strtod_l+0xb78>
 8017c6a:	a32d      	add	r3, pc, #180	; (adr r3, 8017d20 <_strtod_l+0xbe8>)
 8017c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c70:	4640      	mov	r0, r8
 8017c72:	4649      	mov	r1, r9
 8017c74:	f7e8 ff3c 	bl	8000af0 <__aeabi_dcmple>
 8017c78:	b1a0      	cbz	r0, 8017ca4 <_strtod_l+0xb6c>
 8017c7a:	4649      	mov	r1, r9
 8017c7c:	4640      	mov	r0, r8
 8017c7e:	f7e8 ff93 	bl	8000ba8 <__aeabi_d2uiz>
 8017c82:	2801      	cmp	r0, #1
 8017c84:	bf38      	it	cc
 8017c86:	2001      	movcc	r0, #1
 8017c88:	f7e8 fc3c 	bl	8000504 <__aeabi_ui2d>
 8017c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c8e:	4680      	mov	r8, r0
 8017c90:	4689      	mov	r9, r1
 8017c92:	bb13      	cbnz	r3, 8017cda <_strtod_l+0xba2>
 8017c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017c98:	9014      	str	r0, [sp, #80]	; 0x50
 8017c9a:	9315      	str	r3, [sp, #84]	; 0x54
 8017c9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017ca0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ca6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017ca8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017cac:	1a9b      	subs	r3, r3, r2
 8017cae:	930d      	str	r3, [sp, #52]	; 0x34
 8017cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017cb4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017cb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017cbc:	f001 fe4a 	bl	8019954 <__ulp>
 8017cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017cc4:	ec53 2b10 	vmov	r2, r3, d0
 8017cc8:	f7e8 fc96 	bl	80005f8 <__aeabi_dmul>
 8017ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017cd0:	f7e8 fadc 	bl	800028c <__adddf3>
 8017cd4:	4682      	mov	sl, r0
 8017cd6:	468b      	mov	fp, r1
 8017cd8:	e78f      	b.n	8017bfa <_strtod_l+0xac2>
 8017cda:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8017cde:	e7dd      	b.n	8017c9c <_strtod_l+0xb64>
 8017ce0:	a311      	add	r3, pc, #68	; (adr r3, 8017d28 <_strtod_l+0xbf0>)
 8017ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce6:	f7e8 fef9 	bl	8000adc <__aeabi_dcmplt>
 8017cea:	e7b4      	b.n	8017c56 <_strtod_l+0xb1e>
 8017cec:	2300      	movs	r3, #0
 8017cee:	930e      	str	r3, [sp, #56]	; 0x38
 8017cf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017cf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017cf4:	6013      	str	r3, [r2, #0]
 8017cf6:	f7ff ba65 	b.w	80171c4 <_strtod_l+0x8c>
 8017cfa:	2b65      	cmp	r3, #101	; 0x65
 8017cfc:	f43f ab5d 	beq.w	80173ba <_strtod_l+0x282>
 8017d00:	2b45      	cmp	r3, #69	; 0x45
 8017d02:	f43f ab5a 	beq.w	80173ba <_strtod_l+0x282>
 8017d06:	2201      	movs	r2, #1
 8017d08:	f7ff bb92 	b.w	8017430 <_strtod_l+0x2f8>
 8017d0c:	f3af 8000 	nop.w
 8017d10:	94a03595 	.word	0x94a03595
 8017d14:	3fdfffff 	.word	0x3fdfffff
 8017d18:	35afe535 	.word	0x35afe535
 8017d1c:	3fe00000 	.word	0x3fe00000
 8017d20:	ffc00000 	.word	0xffc00000
 8017d24:	41dfffff 	.word	0x41dfffff
 8017d28:	94a03595 	.word	0x94a03595
 8017d2c:	3fcfffff 	.word	0x3fcfffff
 8017d30:	3ff00000 	.word	0x3ff00000
 8017d34:	7ff00000 	.word	0x7ff00000
 8017d38:	7fe00000 	.word	0x7fe00000
 8017d3c:	7c9fffff 	.word	0x7c9fffff
 8017d40:	3fe00000 	.word	0x3fe00000
 8017d44:	bff00000 	.word	0xbff00000
 8017d48:	7fefffff 	.word	0x7fefffff

08017d4c <_strtod_r>:
 8017d4c:	4b01      	ldr	r3, [pc, #4]	; (8017d54 <_strtod_r+0x8>)
 8017d4e:	f7ff b9f3 	b.w	8017138 <_strtod_l>
 8017d52:	bf00      	nop
 8017d54:	20004278 	.word	0x20004278

08017d58 <_strtol_l.isra.0>:
 8017d58:	2b01      	cmp	r3, #1
 8017d5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d5e:	d001      	beq.n	8017d64 <_strtol_l.isra.0+0xc>
 8017d60:	2b24      	cmp	r3, #36	; 0x24
 8017d62:	d906      	bls.n	8017d72 <_strtol_l.isra.0+0x1a>
 8017d64:	f7fe f9d2 	bl	801610c <__errno>
 8017d68:	2316      	movs	r3, #22
 8017d6a:	6003      	str	r3, [r0, #0]
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d72:	4f3a      	ldr	r7, [pc, #232]	; (8017e5c <_strtol_l.isra.0+0x104>)
 8017d74:	468e      	mov	lr, r1
 8017d76:	4676      	mov	r6, lr
 8017d78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017d7c:	5de5      	ldrb	r5, [r4, r7]
 8017d7e:	f015 0508 	ands.w	r5, r5, #8
 8017d82:	d1f8      	bne.n	8017d76 <_strtol_l.isra.0+0x1e>
 8017d84:	2c2d      	cmp	r4, #45	; 0x2d
 8017d86:	d134      	bne.n	8017df2 <_strtol_l.isra.0+0x9a>
 8017d88:	f89e 4000 	ldrb.w	r4, [lr]
 8017d8c:	f04f 0801 	mov.w	r8, #1
 8017d90:	f106 0e02 	add.w	lr, r6, #2
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d05c      	beq.n	8017e52 <_strtol_l.isra.0+0xfa>
 8017d98:	2b10      	cmp	r3, #16
 8017d9a:	d10c      	bne.n	8017db6 <_strtol_l.isra.0+0x5e>
 8017d9c:	2c30      	cmp	r4, #48	; 0x30
 8017d9e:	d10a      	bne.n	8017db6 <_strtol_l.isra.0+0x5e>
 8017da0:	f89e 4000 	ldrb.w	r4, [lr]
 8017da4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017da8:	2c58      	cmp	r4, #88	; 0x58
 8017daa:	d14d      	bne.n	8017e48 <_strtol_l.isra.0+0xf0>
 8017dac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017db0:	2310      	movs	r3, #16
 8017db2:	f10e 0e02 	add.w	lr, lr, #2
 8017db6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017dba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017dbe:	2600      	movs	r6, #0
 8017dc0:	fbbc f9f3 	udiv	r9, ip, r3
 8017dc4:	4635      	mov	r5, r6
 8017dc6:	fb03 ca19 	mls	sl, r3, r9, ip
 8017dca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017dce:	2f09      	cmp	r7, #9
 8017dd0:	d818      	bhi.n	8017e04 <_strtol_l.isra.0+0xac>
 8017dd2:	463c      	mov	r4, r7
 8017dd4:	42a3      	cmp	r3, r4
 8017dd6:	dd24      	ble.n	8017e22 <_strtol_l.isra.0+0xca>
 8017dd8:	2e00      	cmp	r6, #0
 8017dda:	db1f      	blt.n	8017e1c <_strtol_l.isra.0+0xc4>
 8017ddc:	45a9      	cmp	r9, r5
 8017dde:	d31d      	bcc.n	8017e1c <_strtol_l.isra.0+0xc4>
 8017de0:	d101      	bne.n	8017de6 <_strtol_l.isra.0+0x8e>
 8017de2:	45a2      	cmp	sl, r4
 8017de4:	db1a      	blt.n	8017e1c <_strtol_l.isra.0+0xc4>
 8017de6:	fb05 4503 	mla	r5, r5, r3, r4
 8017dea:	2601      	movs	r6, #1
 8017dec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017df0:	e7eb      	b.n	8017dca <_strtol_l.isra.0+0x72>
 8017df2:	2c2b      	cmp	r4, #43	; 0x2b
 8017df4:	bf08      	it	eq
 8017df6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017dfa:	46a8      	mov	r8, r5
 8017dfc:	bf08      	it	eq
 8017dfe:	f106 0e02 	addeq.w	lr, r6, #2
 8017e02:	e7c7      	b.n	8017d94 <_strtol_l.isra.0+0x3c>
 8017e04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017e08:	2f19      	cmp	r7, #25
 8017e0a:	d801      	bhi.n	8017e10 <_strtol_l.isra.0+0xb8>
 8017e0c:	3c37      	subs	r4, #55	; 0x37
 8017e0e:	e7e1      	b.n	8017dd4 <_strtol_l.isra.0+0x7c>
 8017e10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017e14:	2f19      	cmp	r7, #25
 8017e16:	d804      	bhi.n	8017e22 <_strtol_l.isra.0+0xca>
 8017e18:	3c57      	subs	r4, #87	; 0x57
 8017e1a:	e7db      	b.n	8017dd4 <_strtol_l.isra.0+0x7c>
 8017e1c:	f04f 36ff 	mov.w	r6, #4294967295
 8017e20:	e7e4      	b.n	8017dec <_strtol_l.isra.0+0x94>
 8017e22:	2e00      	cmp	r6, #0
 8017e24:	da05      	bge.n	8017e32 <_strtol_l.isra.0+0xda>
 8017e26:	2322      	movs	r3, #34	; 0x22
 8017e28:	6003      	str	r3, [r0, #0]
 8017e2a:	4665      	mov	r5, ip
 8017e2c:	b942      	cbnz	r2, 8017e40 <_strtol_l.isra.0+0xe8>
 8017e2e:	4628      	mov	r0, r5
 8017e30:	e79d      	b.n	8017d6e <_strtol_l.isra.0+0x16>
 8017e32:	f1b8 0f00 	cmp.w	r8, #0
 8017e36:	d000      	beq.n	8017e3a <_strtol_l.isra.0+0xe2>
 8017e38:	426d      	negs	r5, r5
 8017e3a:	2a00      	cmp	r2, #0
 8017e3c:	d0f7      	beq.n	8017e2e <_strtol_l.isra.0+0xd6>
 8017e3e:	b10e      	cbz	r6, 8017e44 <_strtol_l.isra.0+0xec>
 8017e40:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017e44:	6011      	str	r1, [r2, #0]
 8017e46:	e7f2      	b.n	8017e2e <_strtol_l.isra.0+0xd6>
 8017e48:	2430      	movs	r4, #48	; 0x30
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d1b3      	bne.n	8017db6 <_strtol_l.isra.0+0x5e>
 8017e4e:	2308      	movs	r3, #8
 8017e50:	e7b1      	b.n	8017db6 <_strtol_l.isra.0+0x5e>
 8017e52:	2c30      	cmp	r4, #48	; 0x30
 8017e54:	d0a4      	beq.n	8017da0 <_strtol_l.isra.0+0x48>
 8017e56:	230a      	movs	r3, #10
 8017e58:	e7ad      	b.n	8017db6 <_strtol_l.isra.0+0x5e>
 8017e5a:	bf00      	nop
 8017e5c:	0801c7a1 	.word	0x0801c7a1

08017e60 <_strtol_r>:
 8017e60:	f7ff bf7a 	b.w	8017d58 <_strtol_l.isra.0>

08017e64 <quorem>:
 8017e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e68:	6903      	ldr	r3, [r0, #16]
 8017e6a:	690c      	ldr	r4, [r1, #16]
 8017e6c:	42a3      	cmp	r3, r4
 8017e6e:	4607      	mov	r7, r0
 8017e70:	f2c0 8081 	blt.w	8017f76 <quorem+0x112>
 8017e74:	3c01      	subs	r4, #1
 8017e76:	f101 0814 	add.w	r8, r1, #20
 8017e7a:	f100 0514 	add.w	r5, r0, #20
 8017e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e82:	9301      	str	r3, [sp, #4]
 8017e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e8c:	3301      	adds	r3, #1
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017e94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017e98:	fbb2 f6f3 	udiv	r6, r2, r3
 8017e9c:	d331      	bcc.n	8017f02 <quorem+0x9e>
 8017e9e:	f04f 0e00 	mov.w	lr, #0
 8017ea2:	4640      	mov	r0, r8
 8017ea4:	46ac      	mov	ip, r5
 8017ea6:	46f2      	mov	sl, lr
 8017ea8:	f850 2b04 	ldr.w	r2, [r0], #4
 8017eac:	b293      	uxth	r3, r2
 8017eae:	fb06 e303 	mla	r3, r6, r3, lr
 8017eb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017eb6:	b29b      	uxth	r3, r3
 8017eb8:	ebaa 0303 	sub.w	r3, sl, r3
 8017ebc:	0c12      	lsrs	r2, r2, #16
 8017ebe:	f8dc a000 	ldr.w	sl, [ip]
 8017ec2:	fb06 e202 	mla	r2, r6, r2, lr
 8017ec6:	fa13 f38a 	uxtah	r3, r3, sl
 8017eca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017ece:	fa1f fa82 	uxth.w	sl, r2
 8017ed2:	f8dc 2000 	ldr.w	r2, [ip]
 8017ed6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017eda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ee4:	4581      	cmp	r9, r0
 8017ee6:	f84c 3b04 	str.w	r3, [ip], #4
 8017eea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017eee:	d2db      	bcs.n	8017ea8 <quorem+0x44>
 8017ef0:	f855 300b 	ldr.w	r3, [r5, fp]
 8017ef4:	b92b      	cbnz	r3, 8017f02 <quorem+0x9e>
 8017ef6:	9b01      	ldr	r3, [sp, #4]
 8017ef8:	3b04      	subs	r3, #4
 8017efa:	429d      	cmp	r5, r3
 8017efc:	461a      	mov	r2, r3
 8017efe:	d32e      	bcc.n	8017f5e <quorem+0xfa>
 8017f00:	613c      	str	r4, [r7, #16]
 8017f02:	4638      	mov	r0, r7
 8017f04:	f001 fc82 	bl	801980c <__mcmp>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	db24      	blt.n	8017f56 <quorem+0xf2>
 8017f0c:	3601      	adds	r6, #1
 8017f0e:	4628      	mov	r0, r5
 8017f10:	f04f 0c00 	mov.w	ip, #0
 8017f14:	f858 2b04 	ldr.w	r2, [r8], #4
 8017f18:	f8d0 e000 	ldr.w	lr, [r0]
 8017f1c:	b293      	uxth	r3, r2
 8017f1e:	ebac 0303 	sub.w	r3, ip, r3
 8017f22:	0c12      	lsrs	r2, r2, #16
 8017f24:	fa13 f38e 	uxtah	r3, r3, lr
 8017f28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f36:	45c1      	cmp	r9, r8
 8017f38:	f840 3b04 	str.w	r3, [r0], #4
 8017f3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017f40:	d2e8      	bcs.n	8017f14 <quorem+0xb0>
 8017f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f4a:	b922      	cbnz	r2, 8017f56 <quorem+0xf2>
 8017f4c:	3b04      	subs	r3, #4
 8017f4e:	429d      	cmp	r5, r3
 8017f50:	461a      	mov	r2, r3
 8017f52:	d30a      	bcc.n	8017f6a <quorem+0x106>
 8017f54:	613c      	str	r4, [r7, #16]
 8017f56:	4630      	mov	r0, r6
 8017f58:	b003      	add	sp, #12
 8017f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5e:	6812      	ldr	r2, [r2, #0]
 8017f60:	3b04      	subs	r3, #4
 8017f62:	2a00      	cmp	r2, #0
 8017f64:	d1cc      	bne.n	8017f00 <quorem+0x9c>
 8017f66:	3c01      	subs	r4, #1
 8017f68:	e7c7      	b.n	8017efa <quorem+0x96>
 8017f6a:	6812      	ldr	r2, [r2, #0]
 8017f6c:	3b04      	subs	r3, #4
 8017f6e:	2a00      	cmp	r2, #0
 8017f70:	d1f0      	bne.n	8017f54 <quorem+0xf0>
 8017f72:	3c01      	subs	r4, #1
 8017f74:	e7eb      	b.n	8017f4e <quorem+0xea>
 8017f76:	2000      	movs	r0, #0
 8017f78:	e7ee      	b.n	8017f58 <quorem+0xf4>
 8017f7a:	0000      	movs	r0, r0
 8017f7c:	0000      	movs	r0, r0
	...

08017f80 <_dtoa_r>:
 8017f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f84:	ed2d 8b02 	vpush	{d8}
 8017f88:	ec57 6b10 	vmov	r6, r7, d0
 8017f8c:	b095      	sub	sp, #84	; 0x54
 8017f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017f94:	9105      	str	r1, [sp, #20]
 8017f96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017f9a:	4604      	mov	r4, r0
 8017f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8017f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017fa0:	b975      	cbnz	r5, 8017fc0 <_dtoa_r+0x40>
 8017fa2:	2010      	movs	r0, #16
 8017fa4:	f7fe f8dc 	bl	8016160 <malloc>
 8017fa8:	4602      	mov	r2, r0
 8017faa:	6260      	str	r0, [r4, #36]	; 0x24
 8017fac:	b920      	cbnz	r0, 8017fb8 <_dtoa_r+0x38>
 8017fae:	4bb2      	ldr	r3, [pc, #712]	; (8018278 <_dtoa_r+0x2f8>)
 8017fb0:	21ea      	movs	r1, #234	; 0xea
 8017fb2:	48b2      	ldr	r0, [pc, #712]	; (801827c <_dtoa_r+0x2fc>)
 8017fb4:	f001 ffb0 	bl	8019f18 <__assert_func>
 8017fb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017fbc:	6005      	str	r5, [r0, #0]
 8017fbe:	60c5      	str	r5, [r0, #12]
 8017fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fc2:	6819      	ldr	r1, [r3, #0]
 8017fc4:	b151      	cbz	r1, 8017fdc <_dtoa_r+0x5c>
 8017fc6:	685a      	ldr	r2, [r3, #4]
 8017fc8:	604a      	str	r2, [r1, #4]
 8017fca:	2301      	movs	r3, #1
 8017fcc:	4093      	lsls	r3, r2
 8017fce:	608b      	str	r3, [r1, #8]
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	f001 f993 	bl	80192fc <_Bfree>
 8017fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fd8:	2200      	movs	r2, #0
 8017fda:	601a      	str	r2, [r3, #0]
 8017fdc:	1e3b      	subs	r3, r7, #0
 8017fde:	bfb9      	ittee	lt
 8017fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017fe4:	9303      	strlt	r3, [sp, #12]
 8017fe6:	2300      	movge	r3, #0
 8017fe8:	f8c8 3000 	strge.w	r3, [r8]
 8017fec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017ff0:	4ba3      	ldr	r3, [pc, #652]	; (8018280 <_dtoa_r+0x300>)
 8017ff2:	bfbc      	itt	lt
 8017ff4:	2201      	movlt	r2, #1
 8017ff6:	f8c8 2000 	strlt.w	r2, [r8]
 8017ffa:	ea33 0309 	bics.w	r3, r3, r9
 8017ffe:	d11b      	bne.n	8018038 <_dtoa_r+0xb8>
 8018000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018002:	f242 730f 	movw	r3, #9999	; 0x270f
 8018006:	6013      	str	r3, [r2, #0]
 8018008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801800c:	4333      	orrs	r3, r6
 801800e:	f000 857a 	beq.w	8018b06 <_dtoa_r+0xb86>
 8018012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018014:	b963      	cbnz	r3, 8018030 <_dtoa_r+0xb0>
 8018016:	4b9b      	ldr	r3, [pc, #620]	; (8018284 <_dtoa_r+0x304>)
 8018018:	e024      	b.n	8018064 <_dtoa_r+0xe4>
 801801a:	4b9b      	ldr	r3, [pc, #620]	; (8018288 <_dtoa_r+0x308>)
 801801c:	9300      	str	r3, [sp, #0]
 801801e:	3308      	adds	r3, #8
 8018020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018022:	6013      	str	r3, [r2, #0]
 8018024:	9800      	ldr	r0, [sp, #0]
 8018026:	b015      	add	sp, #84	; 0x54
 8018028:	ecbd 8b02 	vpop	{d8}
 801802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018030:	4b94      	ldr	r3, [pc, #592]	; (8018284 <_dtoa_r+0x304>)
 8018032:	9300      	str	r3, [sp, #0]
 8018034:	3303      	adds	r3, #3
 8018036:	e7f3      	b.n	8018020 <_dtoa_r+0xa0>
 8018038:	ed9d 7b02 	vldr	d7, [sp, #8]
 801803c:	2200      	movs	r2, #0
 801803e:	ec51 0b17 	vmov	r0, r1, d7
 8018042:	2300      	movs	r3, #0
 8018044:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018048:	f7e8 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 801804c:	4680      	mov	r8, r0
 801804e:	b158      	cbz	r0, 8018068 <_dtoa_r+0xe8>
 8018050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018052:	2301      	movs	r3, #1
 8018054:	6013      	str	r3, [r2, #0]
 8018056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018058:	2b00      	cmp	r3, #0
 801805a:	f000 8551 	beq.w	8018b00 <_dtoa_r+0xb80>
 801805e:	488b      	ldr	r0, [pc, #556]	; (801828c <_dtoa_r+0x30c>)
 8018060:	6018      	str	r0, [r3, #0]
 8018062:	1e43      	subs	r3, r0, #1
 8018064:	9300      	str	r3, [sp, #0]
 8018066:	e7dd      	b.n	8018024 <_dtoa_r+0xa4>
 8018068:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801806c:	aa12      	add	r2, sp, #72	; 0x48
 801806e:	a913      	add	r1, sp, #76	; 0x4c
 8018070:	4620      	mov	r0, r4
 8018072:	f001 fceb 	bl	8019a4c <__d2b>
 8018076:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801807a:	4683      	mov	fp, r0
 801807c:	2d00      	cmp	r5, #0
 801807e:	d07c      	beq.n	801817a <_dtoa_r+0x1fa>
 8018080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018082:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801808a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801808e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801809a:	4b7d      	ldr	r3, [pc, #500]	; (8018290 <_dtoa_r+0x310>)
 801809c:	2200      	movs	r2, #0
 801809e:	4630      	mov	r0, r6
 80180a0:	4639      	mov	r1, r7
 80180a2:	f7e8 f8f1 	bl	8000288 <__aeabi_dsub>
 80180a6:	a36e      	add	r3, pc, #440	; (adr r3, 8018260 <_dtoa_r+0x2e0>)
 80180a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ac:	f7e8 faa4 	bl	80005f8 <__aeabi_dmul>
 80180b0:	a36d      	add	r3, pc, #436	; (adr r3, 8018268 <_dtoa_r+0x2e8>)
 80180b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b6:	f7e8 f8e9 	bl	800028c <__adddf3>
 80180ba:	4606      	mov	r6, r0
 80180bc:	4628      	mov	r0, r5
 80180be:	460f      	mov	r7, r1
 80180c0:	f7e8 fa30 	bl	8000524 <__aeabi_i2d>
 80180c4:	a36a      	add	r3, pc, #424	; (adr r3, 8018270 <_dtoa_r+0x2f0>)
 80180c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ca:	f7e8 fa95 	bl	80005f8 <__aeabi_dmul>
 80180ce:	4602      	mov	r2, r0
 80180d0:	460b      	mov	r3, r1
 80180d2:	4630      	mov	r0, r6
 80180d4:	4639      	mov	r1, r7
 80180d6:	f7e8 f8d9 	bl	800028c <__adddf3>
 80180da:	4606      	mov	r6, r0
 80180dc:	460f      	mov	r7, r1
 80180de:	f7e8 fd3b 	bl	8000b58 <__aeabi_d2iz>
 80180e2:	2200      	movs	r2, #0
 80180e4:	4682      	mov	sl, r0
 80180e6:	2300      	movs	r3, #0
 80180e8:	4630      	mov	r0, r6
 80180ea:	4639      	mov	r1, r7
 80180ec:	f7e8 fcf6 	bl	8000adc <__aeabi_dcmplt>
 80180f0:	b148      	cbz	r0, 8018106 <_dtoa_r+0x186>
 80180f2:	4650      	mov	r0, sl
 80180f4:	f7e8 fa16 	bl	8000524 <__aeabi_i2d>
 80180f8:	4632      	mov	r2, r6
 80180fa:	463b      	mov	r3, r7
 80180fc:	f7e8 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8018100:	b908      	cbnz	r0, 8018106 <_dtoa_r+0x186>
 8018102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018106:	f1ba 0f16 	cmp.w	sl, #22
 801810a:	d854      	bhi.n	80181b6 <_dtoa_r+0x236>
 801810c:	4b61      	ldr	r3, [pc, #388]	; (8018294 <_dtoa_r+0x314>)
 801810e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018116:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801811a:	f7e8 fcdf 	bl	8000adc <__aeabi_dcmplt>
 801811e:	2800      	cmp	r0, #0
 8018120:	d04b      	beq.n	80181ba <_dtoa_r+0x23a>
 8018122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018126:	2300      	movs	r3, #0
 8018128:	930e      	str	r3, [sp, #56]	; 0x38
 801812a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801812c:	1b5d      	subs	r5, r3, r5
 801812e:	1e6b      	subs	r3, r5, #1
 8018130:	9304      	str	r3, [sp, #16]
 8018132:	bf43      	ittte	mi
 8018134:	2300      	movmi	r3, #0
 8018136:	f1c5 0801 	rsbmi	r8, r5, #1
 801813a:	9304      	strmi	r3, [sp, #16]
 801813c:	f04f 0800 	movpl.w	r8, #0
 8018140:	f1ba 0f00 	cmp.w	sl, #0
 8018144:	db3b      	blt.n	80181be <_dtoa_r+0x23e>
 8018146:	9b04      	ldr	r3, [sp, #16]
 8018148:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801814c:	4453      	add	r3, sl
 801814e:	9304      	str	r3, [sp, #16]
 8018150:	2300      	movs	r3, #0
 8018152:	9306      	str	r3, [sp, #24]
 8018154:	9b05      	ldr	r3, [sp, #20]
 8018156:	2b09      	cmp	r3, #9
 8018158:	d869      	bhi.n	801822e <_dtoa_r+0x2ae>
 801815a:	2b05      	cmp	r3, #5
 801815c:	bfc4      	itt	gt
 801815e:	3b04      	subgt	r3, #4
 8018160:	9305      	strgt	r3, [sp, #20]
 8018162:	9b05      	ldr	r3, [sp, #20]
 8018164:	f1a3 0302 	sub.w	r3, r3, #2
 8018168:	bfcc      	ite	gt
 801816a:	2500      	movgt	r5, #0
 801816c:	2501      	movle	r5, #1
 801816e:	2b03      	cmp	r3, #3
 8018170:	d869      	bhi.n	8018246 <_dtoa_r+0x2c6>
 8018172:	e8df f003 	tbb	[pc, r3]
 8018176:	4e2c      	.short	0x4e2c
 8018178:	5a4c      	.short	0x5a4c
 801817a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801817e:	441d      	add	r5, r3
 8018180:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018184:	2b20      	cmp	r3, #32
 8018186:	bfc1      	itttt	gt
 8018188:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801818c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018190:	fa09 f303 	lslgt.w	r3, r9, r3
 8018194:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018198:	bfda      	itte	le
 801819a:	f1c3 0320 	rsble	r3, r3, #32
 801819e:	fa06 f003 	lslle.w	r0, r6, r3
 80181a2:	4318      	orrgt	r0, r3
 80181a4:	f7e8 f9ae 	bl	8000504 <__aeabi_ui2d>
 80181a8:	2301      	movs	r3, #1
 80181aa:	4606      	mov	r6, r0
 80181ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80181b0:	3d01      	subs	r5, #1
 80181b2:	9310      	str	r3, [sp, #64]	; 0x40
 80181b4:	e771      	b.n	801809a <_dtoa_r+0x11a>
 80181b6:	2301      	movs	r3, #1
 80181b8:	e7b6      	b.n	8018128 <_dtoa_r+0x1a8>
 80181ba:	900e      	str	r0, [sp, #56]	; 0x38
 80181bc:	e7b5      	b.n	801812a <_dtoa_r+0x1aa>
 80181be:	f1ca 0300 	rsb	r3, sl, #0
 80181c2:	9306      	str	r3, [sp, #24]
 80181c4:	2300      	movs	r3, #0
 80181c6:	eba8 080a 	sub.w	r8, r8, sl
 80181ca:	930d      	str	r3, [sp, #52]	; 0x34
 80181cc:	e7c2      	b.n	8018154 <_dtoa_r+0x1d4>
 80181ce:	2300      	movs	r3, #0
 80181d0:	9308      	str	r3, [sp, #32]
 80181d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	dc39      	bgt.n	801824c <_dtoa_r+0x2cc>
 80181d8:	f04f 0901 	mov.w	r9, #1
 80181dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80181e0:	464b      	mov	r3, r9
 80181e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80181e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80181e8:	2200      	movs	r2, #0
 80181ea:	6042      	str	r2, [r0, #4]
 80181ec:	2204      	movs	r2, #4
 80181ee:	f102 0614 	add.w	r6, r2, #20
 80181f2:	429e      	cmp	r6, r3
 80181f4:	6841      	ldr	r1, [r0, #4]
 80181f6:	d92f      	bls.n	8018258 <_dtoa_r+0x2d8>
 80181f8:	4620      	mov	r0, r4
 80181fa:	f001 f83f 	bl	801927c <_Balloc>
 80181fe:	9000      	str	r0, [sp, #0]
 8018200:	2800      	cmp	r0, #0
 8018202:	d14b      	bne.n	801829c <_dtoa_r+0x31c>
 8018204:	4b24      	ldr	r3, [pc, #144]	; (8018298 <_dtoa_r+0x318>)
 8018206:	4602      	mov	r2, r0
 8018208:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801820c:	e6d1      	b.n	8017fb2 <_dtoa_r+0x32>
 801820e:	2301      	movs	r3, #1
 8018210:	e7de      	b.n	80181d0 <_dtoa_r+0x250>
 8018212:	2300      	movs	r3, #0
 8018214:	9308      	str	r3, [sp, #32]
 8018216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018218:	eb0a 0903 	add.w	r9, sl, r3
 801821c:	f109 0301 	add.w	r3, r9, #1
 8018220:	2b01      	cmp	r3, #1
 8018222:	9301      	str	r3, [sp, #4]
 8018224:	bfb8      	it	lt
 8018226:	2301      	movlt	r3, #1
 8018228:	e7dd      	b.n	80181e6 <_dtoa_r+0x266>
 801822a:	2301      	movs	r3, #1
 801822c:	e7f2      	b.n	8018214 <_dtoa_r+0x294>
 801822e:	2501      	movs	r5, #1
 8018230:	2300      	movs	r3, #0
 8018232:	9305      	str	r3, [sp, #20]
 8018234:	9508      	str	r5, [sp, #32]
 8018236:	f04f 39ff 	mov.w	r9, #4294967295
 801823a:	2200      	movs	r2, #0
 801823c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018240:	2312      	movs	r3, #18
 8018242:	9209      	str	r2, [sp, #36]	; 0x24
 8018244:	e7cf      	b.n	80181e6 <_dtoa_r+0x266>
 8018246:	2301      	movs	r3, #1
 8018248:	9308      	str	r3, [sp, #32]
 801824a:	e7f4      	b.n	8018236 <_dtoa_r+0x2b6>
 801824c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018250:	f8cd 9004 	str.w	r9, [sp, #4]
 8018254:	464b      	mov	r3, r9
 8018256:	e7c6      	b.n	80181e6 <_dtoa_r+0x266>
 8018258:	3101      	adds	r1, #1
 801825a:	6041      	str	r1, [r0, #4]
 801825c:	0052      	lsls	r2, r2, #1
 801825e:	e7c6      	b.n	80181ee <_dtoa_r+0x26e>
 8018260:	636f4361 	.word	0x636f4361
 8018264:	3fd287a7 	.word	0x3fd287a7
 8018268:	8b60c8b3 	.word	0x8b60c8b3
 801826c:	3fc68a28 	.word	0x3fc68a28
 8018270:	509f79fb 	.word	0x509f79fb
 8018274:	3fd34413 	.word	0x3fd34413
 8018278:	0801c8ae 	.word	0x0801c8ae
 801827c:	0801c8c5 	.word	0x0801c8c5
 8018280:	7ff00000 	.word	0x7ff00000
 8018284:	0801c8aa 	.word	0x0801c8aa
 8018288:	0801c8a1 	.word	0x0801c8a1
 801828c:	0801c725 	.word	0x0801c725
 8018290:	3ff80000 	.word	0x3ff80000
 8018294:	0801ca40 	.word	0x0801ca40
 8018298:	0801c924 	.word	0x0801c924
 801829c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801829e:	9a00      	ldr	r2, [sp, #0]
 80182a0:	601a      	str	r2, [r3, #0]
 80182a2:	9b01      	ldr	r3, [sp, #4]
 80182a4:	2b0e      	cmp	r3, #14
 80182a6:	f200 80ad 	bhi.w	8018404 <_dtoa_r+0x484>
 80182aa:	2d00      	cmp	r5, #0
 80182ac:	f000 80aa 	beq.w	8018404 <_dtoa_r+0x484>
 80182b0:	f1ba 0f00 	cmp.w	sl, #0
 80182b4:	dd36      	ble.n	8018324 <_dtoa_r+0x3a4>
 80182b6:	4ac3      	ldr	r2, [pc, #780]	; (80185c4 <_dtoa_r+0x644>)
 80182b8:	f00a 030f 	and.w	r3, sl, #15
 80182bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80182c0:	ed93 7b00 	vldr	d7, [r3]
 80182c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80182c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80182cc:	eeb0 8a47 	vmov.f32	s16, s14
 80182d0:	eef0 8a67 	vmov.f32	s17, s15
 80182d4:	d016      	beq.n	8018304 <_dtoa_r+0x384>
 80182d6:	4bbc      	ldr	r3, [pc, #752]	; (80185c8 <_dtoa_r+0x648>)
 80182d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80182dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80182e0:	f7e8 fab4 	bl	800084c <__aeabi_ddiv>
 80182e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182e8:	f007 070f 	and.w	r7, r7, #15
 80182ec:	2503      	movs	r5, #3
 80182ee:	4eb6      	ldr	r6, [pc, #728]	; (80185c8 <_dtoa_r+0x648>)
 80182f0:	b957      	cbnz	r7, 8018308 <_dtoa_r+0x388>
 80182f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80182f6:	ec53 2b18 	vmov	r2, r3, d8
 80182fa:	f7e8 faa7 	bl	800084c <__aeabi_ddiv>
 80182fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018302:	e029      	b.n	8018358 <_dtoa_r+0x3d8>
 8018304:	2502      	movs	r5, #2
 8018306:	e7f2      	b.n	80182ee <_dtoa_r+0x36e>
 8018308:	07f9      	lsls	r1, r7, #31
 801830a:	d508      	bpl.n	801831e <_dtoa_r+0x39e>
 801830c:	ec51 0b18 	vmov	r0, r1, d8
 8018310:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018314:	f7e8 f970 	bl	80005f8 <__aeabi_dmul>
 8018318:	ec41 0b18 	vmov	d8, r0, r1
 801831c:	3501      	adds	r5, #1
 801831e:	107f      	asrs	r7, r7, #1
 8018320:	3608      	adds	r6, #8
 8018322:	e7e5      	b.n	80182f0 <_dtoa_r+0x370>
 8018324:	f000 80a6 	beq.w	8018474 <_dtoa_r+0x4f4>
 8018328:	f1ca 0600 	rsb	r6, sl, #0
 801832c:	4ba5      	ldr	r3, [pc, #660]	; (80185c4 <_dtoa_r+0x644>)
 801832e:	4fa6      	ldr	r7, [pc, #664]	; (80185c8 <_dtoa_r+0x648>)
 8018330:	f006 020f 	and.w	r2, r6, #15
 8018334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801833c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018340:	f7e8 f95a 	bl	80005f8 <__aeabi_dmul>
 8018344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018348:	1136      	asrs	r6, r6, #4
 801834a:	2300      	movs	r3, #0
 801834c:	2502      	movs	r5, #2
 801834e:	2e00      	cmp	r6, #0
 8018350:	f040 8085 	bne.w	801845e <_dtoa_r+0x4de>
 8018354:	2b00      	cmp	r3, #0
 8018356:	d1d2      	bne.n	80182fe <_dtoa_r+0x37e>
 8018358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801835a:	2b00      	cmp	r3, #0
 801835c:	f000 808c 	beq.w	8018478 <_dtoa_r+0x4f8>
 8018360:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018364:	4b99      	ldr	r3, [pc, #612]	; (80185cc <_dtoa_r+0x64c>)
 8018366:	2200      	movs	r2, #0
 8018368:	4630      	mov	r0, r6
 801836a:	4639      	mov	r1, r7
 801836c:	f7e8 fbb6 	bl	8000adc <__aeabi_dcmplt>
 8018370:	2800      	cmp	r0, #0
 8018372:	f000 8081 	beq.w	8018478 <_dtoa_r+0x4f8>
 8018376:	9b01      	ldr	r3, [sp, #4]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d07d      	beq.n	8018478 <_dtoa_r+0x4f8>
 801837c:	f1b9 0f00 	cmp.w	r9, #0
 8018380:	dd3c      	ble.n	80183fc <_dtoa_r+0x47c>
 8018382:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018386:	9307      	str	r3, [sp, #28]
 8018388:	2200      	movs	r2, #0
 801838a:	4b91      	ldr	r3, [pc, #580]	; (80185d0 <_dtoa_r+0x650>)
 801838c:	4630      	mov	r0, r6
 801838e:	4639      	mov	r1, r7
 8018390:	f7e8 f932 	bl	80005f8 <__aeabi_dmul>
 8018394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018398:	3501      	adds	r5, #1
 801839a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801839e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80183a2:	4628      	mov	r0, r5
 80183a4:	f7e8 f8be 	bl	8000524 <__aeabi_i2d>
 80183a8:	4632      	mov	r2, r6
 80183aa:	463b      	mov	r3, r7
 80183ac:	f7e8 f924 	bl	80005f8 <__aeabi_dmul>
 80183b0:	4b88      	ldr	r3, [pc, #544]	; (80185d4 <_dtoa_r+0x654>)
 80183b2:	2200      	movs	r2, #0
 80183b4:	f7e7 ff6a 	bl	800028c <__adddf3>
 80183b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80183bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183c0:	9303      	str	r3, [sp, #12]
 80183c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d15c      	bne.n	8018482 <_dtoa_r+0x502>
 80183c8:	4b83      	ldr	r3, [pc, #524]	; (80185d8 <_dtoa_r+0x658>)
 80183ca:	2200      	movs	r2, #0
 80183cc:	4630      	mov	r0, r6
 80183ce:	4639      	mov	r1, r7
 80183d0:	f7e7 ff5a 	bl	8000288 <__aeabi_dsub>
 80183d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80183d8:	4606      	mov	r6, r0
 80183da:	460f      	mov	r7, r1
 80183dc:	f7e8 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 80183e0:	2800      	cmp	r0, #0
 80183e2:	f040 8296 	bne.w	8018912 <_dtoa_r+0x992>
 80183e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80183ea:	4630      	mov	r0, r6
 80183ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80183f0:	4639      	mov	r1, r7
 80183f2:	f7e8 fb73 	bl	8000adc <__aeabi_dcmplt>
 80183f6:	2800      	cmp	r0, #0
 80183f8:	f040 8288 	bne.w	801890c <_dtoa_r+0x98c>
 80183fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018400:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018406:	2b00      	cmp	r3, #0
 8018408:	f2c0 8158 	blt.w	80186bc <_dtoa_r+0x73c>
 801840c:	f1ba 0f0e 	cmp.w	sl, #14
 8018410:	f300 8154 	bgt.w	80186bc <_dtoa_r+0x73c>
 8018414:	4b6b      	ldr	r3, [pc, #428]	; (80185c4 <_dtoa_r+0x644>)
 8018416:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801841a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801841e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018420:	2b00      	cmp	r3, #0
 8018422:	f280 80e3 	bge.w	80185ec <_dtoa_r+0x66c>
 8018426:	9b01      	ldr	r3, [sp, #4]
 8018428:	2b00      	cmp	r3, #0
 801842a:	f300 80df 	bgt.w	80185ec <_dtoa_r+0x66c>
 801842e:	f040 826d 	bne.w	801890c <_dtoa_r+0x98c>
 8018432:	4b69      	ldr	r3, [pc, #420]	; (80185d8 <_dtoa_r+0x658>)
 8018434:	2200      	movs	r2, #0
 8018436:	4640      	mov	r0, r8
 8018438:	4649      	mov	r1, r9
 801843a:	f7e8 f8dd 	bl	80005f8 <__aeabi_dmul>
 801843e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018442:	f7e8 fb5f 	bl	8000b04 <__aeabi_dcmpge>
 8018446:	9e01      	ldr	r6, [sp, #4]
 8018448:	4637      	mov	r7, r6
 801844a:	2800      	cmp	r0, #0
 801844c:	f040 8243 	bne.w	80188d6 <_dtoa_r+0x956>
 8018450:	9d00      	ldr	r5, [sp, #0]
 8018452:	2331      	movs	r3, #49	; 0x31
 8018454:	f805 3b01 	strb.w	r3, [r5], #1
 8018458:	f10a 0a01 	add.w	sl, sl, #1
 801845c:	e23f      	b.n	80188de <_dtoa_r+0x95e>
 801845e:	07f2      	lsls	r2, r6, #31
 8018460:	d505      	bpl.n	801846e <_dtoa_r+0x4ee>
 8018462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018466:	f7e8 f8c7 	bl	80005f8 <__aeabi_dmul>
 801846a:	3501      	adds	r5, #1
 801846c:	2301      	movs	r3, #1
 801846e:	1076      	asrs	r6, r6, #1
 8018470:	3708      	adds	r7, #8
 8018472:	e76c      	b.n	801834e <_dtoa_r+0x3ce>
 8018474:	2502      	movs	r5, #2
 8018476:	e76f      	b.n	8018358 <_dtoa_r+0x3d8>
 8018478:	9b01      	ldr	r3, [sp, #4]
 801847a:	f8cd a01c 	str.w	sl, [sp, #28]
 801847e:	930c      	str	r3, [sp, #48]	; 0x30
 8018480:	e78d      	b.n	801839e <_dtoa_r+0x41e>
 8018482:	9900      	ldr	r1, [sp, #0]
 8018484:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018488:	4b4e      	ldr	r3, [pc, #312]	; (80185c4 <_dtoa_r+0x644>)
 801848a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801848e:	4401      	add	r1, r0
 8018490:	9102      	str	r1, [sp, #8]
 8018492:	9908      	ldr	r1, [sp, #32]
 8018494:	eeb0 8a47 	vmov.f32	s16, s14
 8018498:	eef0 8a67 	vmov.f32	s17, s15
 801849c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80184a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80184a4:	2900      	cmp	r1, #0
 80184a6:	d045      	beq.n	8018534 <_dtoa_r+0x5b4>
 80184a8:	494c      	ldr	r1, [pc, #304]	; (80185dc <_dtoa_r+0x65c>)
 80184aa:	2000      	movs	r0, #0
 80184ac:	f7e8 f9ce 	bl	800084c <__aeabi_ddiv>
 80184b0:	ec53 2b18 	vmov	r2, r3, d8
 80184b4:	f7e7 fee8 	bl	8000288 <__aeabi_dsub>
 80184b8:	9d00      	ldr	r5, [sp, #0]
 80184ba:	ec41 0b18 	vmov	d8, r0, r1
 80184be:	4639      	mov	r1, r7
 80184c0:	4630      	mov	r0, r6
 80184c2:	f7e8 fb49 	bl	8000b58 <__aeabi_d2iz>
 80184c6:	900c      	str	r0, [sp, #48]	; 0x30
 80184c8:	f7e8 f82c 	bl	8000524 <__aeabi_i2d>
 80184cc:	4602      	mov	r2, r0
 80184ce:	460b      	mov	r3, r1
 80184d0:	4630      	mov	r0, r6
 80184d2:	4639      	mov	r1, r7
 80184d4:	f7e7 fed8 	bl	8000288 <__aeabi_dsub>
 80184d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184da:	3330      	adds	r3, #48	; 0x30
 80184dc:	f805 3b01 	strb.w	r3, [r5], #1
 80184e0:	ec53 2b18 	vmov	r2, r3, d8
 80184e4:	4606      	mov	r6, r0
 80184e6:	460f      	mov	r7, r1
 80184e8:	f7e8 faf8 	bl	8000adc <__aeabi_dcmplt>
 80184ec:	2800      	cmp	r0, #0
 80184ee:	d165      	bne.n	80185bc <_dtoa_r+0x63c>
 80184f0:	4632      	mov	r2, r6
 80184f2:	463b      	mov	r3, r7
 80184f4:	4935      	ldr	r1, [pc, #212]	; (80185cc <_dtoa_r+0x64c>)
 80184f6:	2000      	movs	r0, #0
 80184f8:	f7e7 fec6 	bl	8000288 <__aeabi_dsub>
 80184fc:	ec53 2b18 	vmov	r2, r3, d8
 8018500:	f7e8 faec 	bl	8000adc <__aeabi_dcmplt>
 8018504:	2800      	cmp	r0, #0
 8018506:	f040 80b9 	bne.w	801867c <_dtoa_r+0x6fc>
 801850a:	9b02      	ldr	r3, [sp, #8]
 801850c:	429d      	cmp	r5, r3
 801850e:	f43f af75 	beq.w	80183fc <_dtoa_r+0x47c>
 8018512:	4b2f      	ldr	r3, [pc, #188]	; (80185d0 <_dtoa_r+0x650>)
 8018514:	ec51 0b18 	vmov	r0, r1, d8
 8018518:	2200      	movs	r2, #0
 801851a:	f7e8 f86d 	bl	80005f8 <__aeabi_dmul>
 801851e:	4b2c      	ldr	r3, [pc, #176]	; (80185d0 <_dtoa_r+0x650>)
 8018520:	ec41 0b18 	vmov	d8, r0, r1
 8018524:	2200      	movs	r2, #0
 8018526:	4630      	mov	r0, r6
 8018528:	4639      	mov	r1, r7
 801852a:	f7e8 f865 	bl	80005f8 <__aeabi_dmul>
 801852e:	4606      	mov	r6, r0
 8018530:	460f      	mov	r7, r1
 8018532:	e7c4      	b.n	80184be <_dtoa_r+0x53e>
 8018534:	ec51 0b17 	vmov	r0, r1, d7
 8018538:	f7e8 f85e 	bl	80005f8 <__aeabi_dmul>
 801853c:	9b02      	ldr	r3, [sp, #8]
 801853e:	9d00      	ldr	r5, [sp, #0]
 8018540:	930c      	str	r3, [sp, #48]	; 0x30
 8018542:	ec41 0b18 	vmov	d8, r0, r1
 8018546:	4639      	mov	r1, r7
 8018548:	4630      	mov	r0, r6
 801854a:	f7e8 fb05 	bl	8000b58 <__aeabi_d2iz>
 801854e:	9011      	str	r0, [sp, #68]	; 0x44
 8018550:	f7e7 ffe8 	bl	8000524 <__aeabi_i2d>
 8018554:	4602      	mov	r2, r0
 8018556:	460b      	mov	r3, r1
 8018558:	4630      	mov	r0, r6
 801855a:	4639      	mov	r1, r7
 801855c:	f7e7 fe94 	bl	8000288 <__aeabi_dsub>
 8018560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018562:	3330      	adds	r3, #48	; 0x30
 8018564:	f805 3b01 	strb.w	r3, [r5], #1
 8018568:	9b02      	ldr	r3, [sp, #8]
 801856a:	429d      	cmp	r5, r3
 801856c:	4606      	mov	r6, r0
 801856e:	460f      	mov	r7, r1
 8018570:	f04f 0200 	mov.w	r2, #0
 8018574:	d134      	bne.n	80185e0 <_dtoa_r+0x660>
 8018576:	4b19      	ldr	r3, [pc, #100]	; (80185dc <_dtoa_r+0x65c>)
 8018578:	ec51 0b18 	vmov	r0, r1, d8
 801857c:	f7e7 fe86 	bl	800028c <__adddf3>
 8018580:	4602      	mov	r2, r0
 8018582:	460b      	mov	r3, r1
 8018584:	4630      	mov	r0, r6
 8018586:	4639      	mov	r1, r7
 8018588:	f7e8 fac6 	bl	8000b18 <__aeabi_dcmpgt>
 801858c:	2800      	cmp	r0, #0
 801858e:	d175      	bne.n	801867c <_dtoa_r+0x6fc>
 8018590:	ec53 2b18 	vmov	r2, r3, d8
 8018594:	4911      	ldr	r1, [pc, #68]	; (80185dc <_dtoa_r+0x65c>)
 8018596:	2000      	movs	r0, #0
 8018598:	f7e7 fe76 	bl	8000288 <__aeabi_dsub>
 801859c:	4602      	mov	r2, r0
 801859e:	460b      	mov	r3, r1
 80185a0:	4630      	mov	r0, r6
 80185a2:	4639      	mov	r1, r7
 80185a4:	f7e8 fa9a 	bl	8000adc <__aeabi_dcmplt>
 80185a8:	2800      	cmp	r0, #0
 80185aa:	f43f af27 	beq.w	80183fc <_dtoa_r+0x47c>
 80185ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80185b0:	1e6b      	subs	r3, r5, #1
 80185b2:	930c      	str	r3, [sp, #48]	; 0x30
 80185b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80185b8:	2b30      	cmp	r3, #48	; 0x30
 80185ba:	d0f8      	beq.n	80185ae <_dtoa_r+0x62e>
 80185bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80185c0:	e04a      	b.n	8018658 <_dtoa_r+0x6d8>
 80185c2:	bf00      	nop
 80185c4:	0801ca40 	.word	0x0801ca40
 80185c8:	0801ca18 	.word	0x0801ca18
 80185cc:	3ff00000 	.word	0x3ff00000
 80185d0:	40240000 	.word	0x40240000
 80185d4:	401c0000 	.word	0x401c0000
 80185d8:	40140000 	.word	0x40140000
 80185dc:	3fe00000 	.word	0x3fe00000
 80185e0:	4baf      	ldr	r3, [pc, #700]	; (80188a0 <_dtoa_r+0x920>)
 80185e2:	f7e8 f809 	bl	80005f8 <__aeabi_dmul>
 80185e6:	4606      	mov	r6, r0
 80185e8:	460f      	mov	r7, r1
 80185ea:	e7ac      	b.n	8018546 <_dtoa_r+0x5c6>
 80185ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80185f0:	9d00      	ldr	r5, [sp, #0]
 80185f2:	4642      	mov	r2, r8
 80185f4:	464b      	mov	r3, r9
 80185f6:	4630      	mov	r0, r6
 80185f8:	4639      	mov	r1, r7
 80185fa:	f7e8 f927 	bl	800084c <__aeabi_ddiv>
 80185fe:	f7e8 faab 	bl	8000b58 <__aeabi_d2iz>
 8018602:	9002      	str	r0, [sp, #8]
 8018604:	f7e7 ff8e 	bl	8000524 <__aeabi_i2d>
 8018608:	4642      	mov	r2, r8
 801860a:	464b      	mov	r3, r9
 801860c:	f7e7 fff4 	bl	80005f8 <__aeabi_dmul>
 8018610:	4602      	mov	r2, r0
 8018612:	460b      	mov	r3, r1
 8018614:	4630      	mov	r0, r6
 8018616:	4639      	mov	r1, r7
 8018618:	f7e7 fe36 	bl	8000288 <__aeabi_dsub>
 801861c:	9e02      	ldr	r6, [sp, #8]
 801861e:	9f01      	ldr	r7, [sp, #4]
 8018620:	3630      	adds	r6, #48	; 0x30
 8018622:	f805 6b01 	strb.w	r6, [r5], #1
 8018626:	9e00      	ldr	r6, [sp, #0]
 8018628:	1bae      	subs	r6, r5, r6
 801862a:	42b7      	cmp	r7, r6
 801862c:	4602      	mov	r2, r0
 801862e:	460b      	mov	r3, r1
 8018630:	d137      	bne.n	80186a2 <_dtoa_r+0x722>
 8018632:	f7e7 fe2b 	bl	800028c <__adddf3>
 8018636:	4642      	mov	r2, r8
 8018638:	464b      	mov	r3, r9
 801863a:	4606      	mov	r6, r0
 801863c:	460f      	mov	r7, r1
 801863e:	f7e8 fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 8018642:	b9c8      	cbnz	r0, 8018678 <_dtoa_r+0x6f8>
 8018644:	4642      	mov	r2, r8
 8018646:	464b      	mov	r3, r9
 8018648:	4630      	mov	r0, r6
 801864a:	4639      	mov	r1, r7
 801864c:	f7e8 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018650:	b110      	cbz	r0, 8018658 <_dtoa_r+0x6d8>
 8018652:	9b02      	ldr	r3, [sp, #8]
 8018654:	07d9      	lsls	r1, r3, #31
 8018656:	d40f      	bmi.n	8018678 <_dtoa_r+0x6f8>
 8018658:	4620      	mov	r0, r4
 801865a:	4659      	mov	r1, fp
 801865c:	f000 fe4e 	bl	80192fc <_Bfree>
 8018660:	2300      	movs	r3, #0
 8018662:	702b      	strb	r3, [r5, #0]
 8018664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018666:	f10a 0001 	add.w	r0, sl, #1
 801866a:	6018      	str	r0, [r3, #0]
 801866c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801866e:	2b00      	cmp	r3, #0
 8018670:	f43f acd8 	beq.w	8018024 <_dtoa_r+0xa4>
 8018674:	601d      	str	r5, [r3, #0]
 8018676:	e4d5      	b.n	8018024 <_dtoa_r+0xa4>
 8018678:	f8cd a01c 	str.w	sl, [sp, #28]
 801867c:	462b      	mov	r3, r5
 801867e:	461d      	mov	r5, r3
 8018680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018684:	2a39      	cmp	r2, #57	; 0x39
 8018686:	d108      	bne.n	801869a <_dtoa_r+0x71a>
 8018688:	9a00      	ldr	r2, [sp, #0]
 801868a:	429a      	cmp	r2, r3
 801868c:	d1f7      	bne.n	801867e <_dtoa_r+0x6fe>
 801868e:	9a07      	ldr	r2, [sp, #28]
 8018690:	9900      	ldr	r1, [sp, #0]
 8018692:	3201      	adds	r2, #1
 8018694:	9207      	str	r2, [sp, #28]
 8018696:	2230      	movs	r2, #48	; 0x30
 8018698:	700a      	strb	r2, [r1, #0]
 801869a:	781a      	ldrb	r2, [r3, #0]
 801869c:	3201      	adds	r2, #1
 801869e:	701a      	strb	r2, [r3, #0]
 80186a0:	e78c      	b.n	80185bc <_dtoa_r+0x63c>
 80186a2:	4b7f      	ldr	r3, [pc, #508]	; (80188a0 <_dtoa_r+0x920>)
 80186a4:	2200      	movs	r2, #0
 80186a6:	f7e7 ffa7 	bl	80005f8 <__aeabi_dmul>
 80186aa:	2200      	movs	r2, #0
 80186ac:	2300      	movs	r3, #0
 80186ae:	4606      	mov	r6, r0
 80186b0:	460f      	mov	r7, r1
 80186b2:	f7e8 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80186b6:	2800      	cmp	r0, #0
 80186b8:	d09b      	beq.n	80185f2 <_dtoa_r+0x672>
 80186ba:	e7cd      	b.n	8018658 <_dtoa_r+0x6d8>
 80186bc:	9a08      	ldr	r2, [sp, #32]
 80186be:	2a00      	cmp	r2, #0
 80186c0:	f000 80c4 	beq.w	801884c <_dtoa_r+0x8cc>
 80186c4:	9a05      	ldr	r2, [sp, #20]
 80186c6:	2a01      	cmp	r2, #1
 80186c8:	f300 80a8 	bgt.w	801881c <_dtoa_r+0x89c>
 80186cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80186ce:	2a00      	cmp	r2, #0
 80186d0:	f000 80a0 	beq.w	8018814 <_dtoa_r+0x894>
 80186d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80186d8:	9e06      	ldr	r6, [sp, #24]
 80186da:	4645      	mov	r5, r8
 80186dc:	9a04      	ldr	r2, [sp, #16]
 80186de:	2101      	movs	r1, #1
 80186e0:	441a      	add	r2, r3
 80186e2:	4620      	mov	r0, r4
 80186e4:	4498      	add	r8, r3
 80186e6:	9204      	str	r2, [sp, #16]
 80186e8:	f000 ff0e 	bl	8019508 <__i2b>
 80186ec:	4607      	mov	r7, r0
 80186ee:	2d00      	cmp	r5, #0
 80186f0:	dd0b      	ble.n	801870a <_dtoa_r+0x78a>
 80186f2:	9b04      	ldr	r3, [sp, #16]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	dd08      	ble.n	801870a <_dtoa_r+0x78a>
 80186f8:	42ab      	cmp	r3, r5
 80186fa:	9a04      	ldr	r2, [sp, #16]
 80186fc:	bfa8      	it	ge
 80186fe:	462b      	movge	r3, r5
 8018700:	eba8 0803 	sub.w	r8, r8, r3
 8018704:	1aed      	subs	r5, r5, r3
 8018706:	1ad3      	subs	r3, r2, r3
 8018708:	9304      	str	r3, [sp, #16]
 801870a:	9b06      	ldr	r3, [sp, #24]
 801870c:	b1fb      	cbz	r3, 801874e <_dtoa_r+0x7ce>
 801870e:	9b08      	ldr	r3, [sp, #32]
 8018710:	2b00      	cmp	r3, #0
 8018712:	f000 809f 	beq.w	8018854 <_dtoa_r+0x8d4>
 8018716:	2e00      	cmp	r6, #0
 8018718:	dd11      	ble.n	801873e <_dtoa_r+0x7be>
 801871a:	4639      	mov	r1, r7
 801871c:	4632      	mov	r2, r6
 801871e:	4620      	mov	r0, r4
 8018720:	f000 ffae 	bl	8019680 <__pow5mult>
 8018724:	465a      	mov	r2, fp
 8018726:	4601      	mov	r1, r0
 8018728:	4607      	mov	r7, r0
 801872a:	4620      	mov	r0, r4
 801872c:	f000 ff02 	bl	8019534 <__multiply>
 8018730:	4659      	mov	r1, fp
 8018732:	9007      	str	r0, [sp, #28]
 8018734:	4620      	mov	r0, r4
 8018736:	f000 fde1 	bl	80192fc <_Bfree>
 801873a:	9b07      	ldr	r3, [sp, #28]
 801873c:	469b      	mov	fp, r3
 801873e:	9b06      	ldr	r3, [sp, #24]
 8018740:	1b9a      	subs	r2, r3, r6
 8018742:	d004      	beq.n	801874e <_dtoa_r+0x7ce>
 8018744:	4659      	mov	r1, fp
 8018746:	4620      	mov	r0, r4
 8018748:	f000 ff9a 	bl	8019680 <__pow5mult>
 801874c:	4683      	mov	fp, r0
 801874e:	2101      	movs	r1, #1
 8018750:	4620      	mov	r0, r4
 8018752:	f000 fed9 	bl	8019508 <__i2b>
 8018756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018758:	2b00      	cmp	r3, #0
 801875a:	4606      	mov	r6, r0
 801875c:	dd7c      	ble.n	8018858 <_dtoa_r+0x8d8>
 801875e:	461a      	mov	r2, r3
 8018760:	4601      	mov	r1, r0
 8018762:	4620      	mov	r0, r4
 8018764:	f000 ff8c 	bl	8019680 <__pow5mult>
 8018768:	9b05      	ldr	r3, [sp, #20]
 801876a:	2b01      	cmp	r3, #1
 801876c:	4606      	mov	r6, r0
 801876e:	dd76      	ble.n	801885e <_dtoa_r+0x8de>
 8018770:	2300      	movs	r3, #0
 8018772:	9306      	str	r3, [sp, #24]
 8018774:	6933      	ldr	r3, [r6, #16]
 8018776:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801877a:	6918      	ldr	r0, [r3, #16]
 801877c:	f000 fe74 	bl	8019468 <__hi0bits>
 8018780:	f1c0 0020 	rsb	r0, r0, #32
 8018784:	9b04      	ldr	r3, [sp, #16]
 8018786:	4418      	add	r0, r3
 8018788:	f010 001f 	ands.w	r0, r0, #31
 801878c:	f000 8086 	beq.w	801889c <_dtoa_r+0x91c>
 8018790:	f1c0 0320 	rsb	r3, r0, #32
 8018794:	2b04      	cmp	r3, #4
 8018796:	dd7f      	ble.n	8018898 <_dtoa_r+0x918>
 8018798:	f1c0 001c 	rsb	r0, r0, #28
 801879c:	9b04      	ldr	r3, [sp, #16]
 801879e:	4403      	add	r3, r0
 80187a0:	4480      	add	r8, r0
 80187a2:	4405      	add	r5, r0
 80187a4:	9304      	str	r3, [sp, #16]
 80187a6:	f1b8 0f00 	cmp.w	r8, #0
 80187aa:	dd05      	ble.n	80187b8 <_dtoa_r+0x838>
 80187ac:	4659      	mov	r1, fp
 80187ae:	4642      	mov	r2, r8
 80187b0:	4620      	mov	r0, r4
 80187b2:	f000 ffbf 	bl	8019734 <__lshift>
 80187b6:	4683      	mov	fp, r0
 80187b8:	9b04      	ldr	r3, [sp, #16]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	dd05      	ble.n	80187ca <_dtoa_r+0x84a>
 80187be:	4631      	mov	r1, r6
 80187c0:	461a      	mov	r2, r3
 80187c2:	4620      	mov	r0, r4
 80187c4:	f000 ffb6 	bl	8019734 <__lshift>
 80187c8:	4606      	mov	r6, r0
 80187ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d069      	beq.n	80188a4 <_dtoa_r+0x924>
 80187d0:	4631      	mov	r1, r6
 80187d2:	4658      	mov	r0, fp
 80187d4:	f001 f81a 	bl	801980c <__mcmp>
 80187d8:	2800      	cmp	r0, #0
 80187da:	da63      	bge.n	80188a4 <_dtoa_r+0x924>
 80187dc:	2300      	movs	r3, #0
 80187de:	4659      	mov	r1, fp
 80187e0:	220a      	movs	r2, #10
 80187e2:	4620      	mov	r0, r4
 80187e4:	f000 fdac 	bl	8019340 <__multadd>
 80187e8:	9b08      	ldr	r3, [sp, #32]
 80187ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80187ee:	4683      	mov	fp, r0
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f000 818f 	beq.w	8018b14 <_dtoa_r+0xb94>
 80187f6:	4639      	mov	r1, r7
 80187f8:	2300      	movs	r3, #0
 80187fa:	220a      	movs	r2, #10
 80187fc:	4620      	mov	r0, r4
 80187fe:	f000 fd9f 	bl	8019340 <__multadd>
 8018802:	f1b9 0f00 	cmp.w	r9, #0
 8018806:	4607      	mov	r7, r0
 8018808:	f300 808e 	bgt.w	8018928 <_dtoa_r+0x9a8>
 801880c:	9b05      	ldr	r3, [sp, #20]
 801880e:	2b02      	cmp	r3, #2
 8018810:	dc50      	bgt.n	80188b4 <_dtoa_r+0x934>
 8018812:	e089      	b.n	8018928 <_dtoa_r+0x9a8>
 8018814:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801881a:	e75d      	b.n	80186d8 <_dtoa_r+0x758>
 801881c:	9b01      	ldr	r3, [sp, #4]
 801881e:	1e5e      	subs	r6, r3, #1
 8018820:	9b06      	ldr	r3, [sp, #24]
 8018822:	42b3      	cmp	r3, r6
 8018824:	bfbf      	itttt	lt
 8018826:	9b06      	ldrlt	r3, [sp, #24]
 8018828:	9606      	strlt	r6, [sp, #24]
 801882a:	1af2      	sublt	r2, r6, r3
 801882c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801882e:	bfb6      	itet	lt
 8018830:	189b      	addlt	r3, r3, r2
 8018832:	1b9e      	subge	r6, r3, r6
 8018834:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018836:	9b01      	ldr	r3, [sp, #4]
 8018838:	bfb8      	it	lt
 801883a:	2600      	movlt	r6, #0
 801883c:	2b00      	cmp	r3, #0
 801883e:	bfb5      	itete	lt
 8018840:	eba8 0503 	sublt.w	r5, r8, r3
 8018844:	9b01      	ldrge	r3, [sp, #4]
 8018846:	2300      	movlt	r3, #0
 8018848:	4645      	movge	r5, r8
 801884a:	e747      	b.n	80186dc <_dtoa_r+0x75c>
 801884c:	9e06      	ldr	r6, [sp, #24]
 801884e:	9f08      	ldr	r7, [sp, #32]
 8018850:	4645      	mov	r5, r8
 8018852:	e74c      	b.n	80186ee <_dtoa_r+0x76e>
 8018854:	9a06      	ldr	r2, [sp, #24]
 8018856:	e775      	b.n	8018744 <_dtoa_r+0x7c4>
 8018858:	9b05      	ldr	r3, [sp, #20]
 801885a:	2b01      	cmp	r3, #1
 801885c:	dc18      	bgt.n	8018890 <_dtoa_r+0x910>
 801885e:	9b02      	ldr	r3, [sp, #8]
 8018860:	b9b3      	cbnz	r3, 8018890 <_dtoa_r+0x910>
 8018862:	9b03      	ldr	r3, [sp, #12]
 8018864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018868:	b9a3      	cbnz	r3, 8018894 <_dtoa_r+0x914>
 801886a:	9b03      	ldr	r3, [sp, #12]
 801886c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018870:	0d1b      	lsrs	r3, r3, #20
 8018872:	051b      	lsls	r3, r3, #20
 8018874:	b12b      	cbz	r3, 8018882 <_dtoa_r+0x902>
 8018876:	9b04      	ldr	r3, [sp, #16]
 8018878:	3301      	adds	r3, #1
 801887a:	9304      	str	r3, [sp, #16]
 801887c:	f108 0801 	add.w	r8, r8, #1
 8018880:	2301      	movs	r3, #1
 8018882:	9306      	str	r3, [sp, #24]
 8018884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018886:	2b00      	cmp	r3, #0
 8018888:	f47f af74 	bne.w	8018774 <_dtoa_r+0x7f4>
 801888c:	2001      	movs	r0, #1
 801888e:	e779      	b.n	8018784 <_dtoa_r+0x804>
 8018890:	2300      	movs	r3, #0
 8018892:	e7f6      	b.n	8018882 <_dtoa_r+0x902>
 8018894:	9b02      	ldr	r3, [sp, #8]
 8018896:	e7f4      	b.n	8018882 <_dtoa_r+0x902>
 8018898:	d085      	beq.n	80187a6 <_dtoa_r+0x826>
 801889a:	4618      	mov	r0, r3
 801889c:	301c      	adds	r0, #28
 801889e:	e77d      	b.n	801879c <_dtoa_r+0x81c>
 80188a0:	40240000 	.word	0x40240000
 80188a4:	9b01      	ldr	r3, [sp, #4]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	dc38      	bgt.n	801891c <_dtoa_r+0x99c>
 80188aa:	9b05      	ldr	r3, [sp, #20]
 80188ac:	2b02      	cmp	r3, #2
 80188ae:	dd35      	ble.n	801891c <_dtoa_r+0x99c>
 80188b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80188b4:	f1b9 0f00 	cmp.w	r9, #0
 80188b8:	d10d      	bne.n	80188d6 <_dtoa_r+0x956>
 80188ba:	4631      	mov	r1, r6
 80188bc:	464b      	mov	r3, r9
 80188be:	2205      	movs	r2, #5
 80188c0:	4620      	mov	r0, r4
 80188c2:	f000 fd3d 	bl	8019340 <__multadd>
 80188c6:	4601      	mov	r1, r0
 80188c8:	4606      	mov	r6, r0
 80188ca:	4658      	mov	r0, fp
 80188cc:	f000 ff9e 	bl	801980c <__mcmp>
 80188d0:	2800      	cmp	r0, #0
 80188d2:	f73f adbd 	bgt.w	8018450 <_dtoa_r+0x4d0>
 80188d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188d8:	9d00      	ldr	r5, [sp, #0]
 80188da:	ea6f 0a03 	mvn.w	sl, r3
 80188de:	f04f 0800 	mov.w	r8, #0
 80188e2:	4631      	mov	r1, r6
 80188e4:	4620      	mov	r0, r4
 80188e6:	f000 fd09 	bl	80192fc <_Bfree>
 80188ea:	2f00      	cmp	r7, #0
 80188ec:	f43f aeb4 	beq.w	8018658 <_dtoa_r+0x6d8>
 80188f0:	f1b8 0f00 	cmp.w	r8, #0
 80188f4:	d005      	beq.n	8018902 <_dtoa_r+0x982>
 80188f6:	45b8      	cmp	r8, r7
 80188f8:	d003      	beq.n	8018902 <_dtoa_r+0x982>
 80188fa:	4641      	mov	r1, r8
 80188fc:	4620      	mov	r0, r4
 80188fe:	f000 fcfd 	bl	80192fc <_Bfree>
 8018902:	4639      	mov	r1, r7
 8018904:	4620      	mov	r0, r4
 8018906:	f000 fcf9 	bl	80192fc <_Bfree>
 801890a:	e6a5      	b.n	8018658 <_dtoa_r+0x6d8>
 801890c:	2600      	movs	r6, #0
 801890e:	4637      	mov	r7, r6
 8018910:	e7e1      	b.n	80188d6 <_dtoa_r+0x956>
 8018912:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018914:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018918:	4637      	mov	r7, r6
 801891a:	e599      	b.n	8018450 <_dtoa_r+0x4d0>
 801891c:	9b08      	ldr	r3, [sp, #32]
 801891e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	f000 80fd 	beq.w	8018b22 <_dtoa_r+0xba2>
 8018928:	2d00      	cmp	r5, #0
 801892a:	dd05      	ble.n	8018938 <_dtoa_r+0x9b8>
 801892c:	4639      	mov	r1, r7
 801892e:	462a      	mov	r2, r5
 8018930:	4620      	mov	r0, r4
 8018932:	f000 feff 	bl	8019734 <__lshift>
 8018936:	4607      	mov	r7, r0
 8018938:	9b06      	ldr	r3, [sp, #24]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d05c      	beq.n	80189f8 <_dtoa_r+0xa78>
 801893e:	6879      	ldr	r1, [r7, #4]
 8018940:	4620      	mov	r0, r4
 8018942:	f000 fc9b 	bl	801927c <_Balloc>
 8018946:	4605      	mov	r5, r0
 8018948:	b928      	cbnz	r0, 8018956 <_dtoa_r+0x9d6>
 801894a:	4b80      	ldr	r3, [pc, #512]	; (8018b4c <_dtoa_r+0xbcc>)
 801894c:	4602      	mov	r2, r0
 801894e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018952:	f7ff bb2e 	b.w	8017fb2 <_dtoa_r+0x32>
 8018956:	693a      	ldr	r2, [r7, #16]
 8018958:	3202      	adds	r2, #2
 801895a:	0092      	lsls	r2, r2, #2
 801895c:	f107 010c 	add.w	r1, r7, #12
 8018960:	300c      	adds	r0, #12
 8018962:	f7fd fc0d 	bl	8016180 <memcpy>
 8018966:	2201      	movs	r2, #1
 8018968:	4629      	mov	r1, r5
 801896a:	4620      	mov	r0, r4
 801896c:	f000 fee2 	bl	8019734 <__lshift>
 8018970:	9b00      	ldr	r3, [sp, #0]
 8018972:	3301      	adds	r3, #1
 8018974:	9301      	str	r3, [sp, #4]
 8018976:	9b00      	ldr	r3, [sp, #0]
 8018978:	444b      	add	r3, r9
 801897a:	9307      	str	r3, [sp, #28]
 801897c:	9b02      	ldr	r3, [sp, #8]
 801897e:	f003 0301 	and.w	r3, r3, #1
 8018982:	46b8      	mov	r8, r7
 8018984:	9306      	str	r3, [sp, #24]
 8018986:	4607      	mov	r7, r0
 8018988:	9b01      	ldr	r3, [sp, #4]
 801898a:	4631      	mov	r1, r6
 801898c:	3b01      	subs	r3, #1
 801898e:	4658      	mov	r0, fp
 8018990:	9302      	str	r3, [sp, #8]
 8018992:	f7ff fa67 	bl	8017e64 <quorem>
 8018996:	4603      	mov	r3, r0
 8018998:	3330      	adds	r3, #48	; 0x30
 801899a:	9004      	str	r0, [sp, #16]
 801899c:	4641      	mov	r1, r8
 801899e:	4658      	mov	r0, fp
 80189a0:	9308      	str	r3, [sp, #32]
 80189a2:	f000 ff33 	bl	801980c <__mcmp>
 80189a6:	463a      	mov	r2, r7
 80189a8:	4681      	mov	r9, r0
 80189aa:	4631      	mov	r1, r6
 80189ac:	4620      	mov	r0, r4
 80189ae:	f000 ff49 	bl	8019844 <__mdiff>
 80189b2:	68c2      	ldr	r2, [r0, #12]
 80189b4:	9b08      	ldr	r3, [sp, #32]
 80189b6:	4605      	mov	r5, r0
 80189b8:	bb02      	cbnz	r2, 80189fc <_dtoa_r+0xa7c>
 80189ba:	4601      	mov	r1, r0
 80189bc:	4658      	mov	r0, fp
 80189be:	f000 ff25 	bl	801980c <__mcmp>
 80189c2:	9b08      	ldr	r3, [sp, #32]
 80189c4:	4602      	mov	r2, r0
 80189c6:	4629      	mov	r1, r5
 80189c8:	4620      	mov	r0, r4
 80189ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80189ce:	f000 fc95 	bl	80192fc <_Bfree>
 80189d2:	9b05      	ldr	r3, [sp, #20]
 80189d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189d6:	9d01      	ldr	r5, [sp, #4]
 80189d8:	ea43 0102 	orr.w	r1, r3, r2
 80189dc:	9b06      	ldr	r3, [sp, #24]
 80189de:	430b      	orrs	r3, r1
 80189e0:	9b08      	ldr	r3, [sp, #32]
 80189e2:	d10d      	bne.n	8018a00 <_dtoa_r+0xa80>
 80189e4:	2b39      	cmp	r3, #57	; 0x39
 80189e6:	d029      	beq.n	8018a3c <_dtoa_r+0xabc>
 80189e8:	f1b9 0f00 	cmp.w	r9, #0
 80189ec:	dd01      	ble.n	80189f2 <_dtoa_r+0xa72>
 80189ee:	9b04      	ldr	r3, [sp, #16]
 80189f0:	3331      	adds	r3, #49	; 0x31
 80189f2:	9a02      	ldr	r2, [sp, #8]
 80189f4:	7013      	strb	r3, [r2, #0]
 80189f6:	e774      	b.n	80188e2 <_dtoa_r+0x962>
 80189f8:	4638      	mov	r0, r7
 80189fa:	e7b9      	b.n	8018970 <_dtoa_r+0x9f0>
 80189fc:	2201      	movs	r2, #1
 80189fe:	e7e2      	b.n	80189c6 <_dtoa_r+0xa46>
 8018a00:	f1b9 0f00 	cmp.w	r9, #0
 8018a04:	db06      	blt.n	8018a14 <_dtoa_r+0xa94>
 8018a06:	9905      	ldr	r1, [sp, #20]
 8018a08:	ea41 0909 	orr.w	r9, r1, r9
 8018a0c:	9906      	ldr	r1, [sp, #24]
 8018a0e:	ea59 0101 	orrs.w	r1, r9, r1
 8018a12:	d120      	bne.n	8018a56 <_dtoa_r+0xad6>
 8018a14:	2a00      	cmp	r2, #0
 8018a16:	ddec      	ble.n	80189f2 <_dtoa_r+0xa72>
 8018a18:	4659      	mov	r1, fp
 8018a1a:	2201      	movs	r2, #1
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	9301      	str	r3, [sp, #4]
 8018a20:	f000 fe88 	bl	8019734 <__lshift>
 8018a24:	4631      	mov	r1, r6
 8018a26:	4683      	mov	fp, r0
 8018a28:	f000 fef0 	bl	801980c <__mcmp>
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	9b01      	ldr	r3, [sp, #4]
 8018a30:	dc02      	bgt.n	8018a38 <_dtoa_r+0xab8>
 8018a32:	d1de      	bne.n	80189f2 <_dtoa_r+0xa72>
 8018a34:	07da      	lsls	r2, r3, #31
 8018a36:	d5dc      	bpl.n	80189f2 <_dtoa_r+0xa72>
 8018a38:	2b39      	cmp	r3, #57	; 0x39
 8018a3a:	d1d8      	bne.n	80189ee <_dtoa_r+0xa6e>
 8018a3c:	9a02      	ldr	r2, [sp, #8]
 8018a3e:	2339      	movs	r3, #57	; 0x39
 8018a40:	7013      	strb	r3, [r2, #0]
 8018a42:	462b      	mov	r3, r5
 8018a44:	461d      	mov	r5, r3
 8018a46:	3b01      	subs	r3, #1
 8018a48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018a4c:	2a39      	cmp	r2, #57	; 0x39
 8018a4e:	d050      	beq.n	8018af2 <_dtoa_r+0xb72>
 8018a50:	3201      	adds	r2, #1
 8018a52:	701a      	strb	r2, [r3, #0]
 8018a54:	e745      	b.n	80188e2 <_dtoa_r+0x962>
 8018a56:	2a00      	cmp	r2, #0
 8018a58:	dd03      	ble.n	8018a62 <_dtoa_r+0xae2>
 8018a5a:	2b39      	cmp	r3, #57	; 0x39
 8018a5c:	d0ee      	beq.n	8018a3c <_dtoa_r+0xabc>
 8018a5e:	3301      	adds	r3, #1
 8018a60:	e7c7      	b.n	80189f2 <_dtoa_r+0xa72>
 8018a62:	9a01      	ldr	r2, [sp, #4]
 8018a64:	9907      	ldr	r1, [sp, #28]
 8018a66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018a6a:	428a      	cmp	r2, r1
 8018a6c:	d02a      	beq.n	8018ac4 <_dtoa_r+0xb44>
 8018a6e:	4659      	mov	r1, fp
 8018a70:	2300      	movs	r3, #0
 8018a72:	220a      	movs	r2, #10
 8018a74:	4620      	mov	r0, r4
 8018a76:	f000 fc63 	bl	8019340 <__multadd>
 8018a7a:	45b8      	cmp	r8, r7
 8018a7c:	4683      	mov	fp, r0
 8018a7e:	f04f 0300 	mov.w	r3, #0
 8018a82:	f04f 020a 	mov.w	r2, #10
 8018a86:	4641      	mov	r1, r8
 8018a88:	4620      	mov	r0, r4
 8018a8a:	d107      	bne.n	8018a9c <_dtoa_r+0xb1c>
 8018a8c:	f000 fc58 	bl	8019340 <__multadd>
 8018a90:	4680      	mov	r8, r0
 8018a92:	4607      	mov	r7, r0
 8018a94:	9b01      	ldr	r3, [sp, #4]
 8018a96:	3301      	adds	r3, #1
 8018a98:	9301      	str	r3, [sp, #4]
 8018a9a:	e775      	b.n	8018988 <_dtoa_r+0xa08>
 8018a9c:	f000 fc50 	bl	8019340 <__multadd>
 8018aa0:	4639      	mov	r1, r7
 8018aa2:	4680      	mov	r8, r0
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	220a      	movs	r2, #10
 8018aa8:	4620      	mov	r0, r4
 8018aaa:	f000 fc49 	bl	8019340 <__multadd>
 8018aae:	4607      	mov	r7, r0
 8018ab0:	e7f0      	b.n	8018a94 <_dtoa_r+0xb14>
 8018ab2:	f1b9 0f00 	cmp.w	r9, #0
 8018ab6:	9a00      	ldr	r2, [sp, #0]
 8018ab8:	bfcc      	ite	gt
 8018aba:	464d      	movgt	r5, r9
 8018abc:	2501      	movle	r5, #1
 8018abe:	4415      	add	r5, r2
 8018ac0:	f04f 0800 	mov.w	r8, #0
 8018ac4:	4659      	mov	r1, fp
 8018ac6:	2201      	movs	r2, #1
 8018ac8:	4620      	mov	r0, r4
 8018aca:	9301      	str	r3, [sp, #4]
 8018acc:	f000 fe32 	bl	8019734 <__lshift>
 8018ad0:	4631      	mov	r1, r6
 8018ad2:	4683      	mov	fp, r0
 8018ad4:	f000 fe9a 	bl	801980c <__mcmp>
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	dcb2      	bgt.n	8018a42 <_dtoa_r+0xac2>
 8018adc:	d102      	bne.n	8018ae4 <_dtoa_r+0xb64>
 8018ade:	9b01      	ldr	r3, [sp, #4]
 8018ae0:	07db      	lsls	r3, r3, #31
 8018ae2:	d4ae      	bmi.n	8018a42 <_dtoa_r+0xac2>
 8018ae4:	462b      	mov	r3, r5
 8018ae6:	461d      	mov	r5, r3
 8018ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018aec:	2a30      	cmp	r2, #48	; 0x30
 8018aee:	d0fa      	beq.n	8018ae6 <_dtoa_r+0xb66>
 8018af0:	e6f7      	b.n	80188e2 <_dtoa_r+0x962>
 8018af2:	9a00      	ldr	r2, [sp, #0]
 8018af4:	429a      	cmp	r2, r3
 8018af6:	d1a5      	bne.n	8018a44 <_dtoa_r+0xac4>
 8018af8:	f10a 0a01 	add.w	sl, sl, #1
 8018afc:	2331      	movs	r3, #49	; 0x31
 8018afe:	e779      	b.n	80189f4 <_dtoa_r+0xa74>
 8018b00:	4b13      	ldr	r3, [pc, #76]	; (8018b50 <_dtoa_r+0xbd0>)
 8018b02:	f7ff baaf 	b.w	8018064 <_dtoa_r+0xe4>
 8018b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	f47f aa86 	bne.w	801801a <_dtoa_r+0x9a>
 8018b0e:	4b11      	ldr	r3, [pc, #68]	; (8018b54 <_dtoa_r+0xbd4>)
 8018b10:	f7ff baa8 	b.w	8018064 <_dtoa_r+0xe4>
 8018b14:	f1b9 0f00 	cmp.w	r9, #0
 8018b18:	dc03      	bgt.n	8018b22 <_dtoa_r+0xba2>
 8018b1a:	9b05      	ldr	r3, [sp, #20]
 8018b1c:	2b02      	cmp	r3, #2
 8018b1e:	f73f aec9 	bgt.w	80188b4 <_dtoa_r+0x934>
 8018b22:	9d00      	ldr	r5, [sp, #0]
 8018b24:	4631      	mov	r1, r6
 8018b26:	4658      	mov	r0, fp
 8018b28:	f7ff f99c 	bl	8017e64 <quorem>
 8018b2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018b30:	f805 3b01 	strb.w	r3, [r5], #1
 8018b34:	9a00      	ldr	r2, [sp, #0]
 8018b36:	1aaa      	subs	r2, r5, r2
 8018b38:	4591      	cmp	r9, r2
 8018b3a:	ddba      	ble.n	8018ab2 <_dtoa_r+0xb32>
 8018b3c:	4659      	mov	r1, fp
 8018b3e:	2300      	movs	r3, #0
 8018b40:	220a      	movs	r2, #10
 8018b42:	4620      	mov	r0, r4
 8018b44:	f000 fbfc 	bl	8019340 <__multadd>
 8018b48:	4683      	mov	fp, r0
 8018b4a:	e7eb      	b.n	8018b24 <_dtoa_r+0xba4>
 8018b4c:	0801c924 	.word	0x0801c924
 8018b50:	0801c724 	.word	0x0801c724
 8018b54:	0801c8a1 	.word	0x0801c8a1

08018b58 <rshift>:
 8018b58:	6903      	ldr	r3, [r0, #16]
 8018b5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018b66:	f100 0414 	add.w	r4, r0, #20
 8018b6a:	dd45      	ble.n	8018bf8 <rshift+0xa0>
 8018b6c:	f011 011f 	ands.w	r1, r1, #31
 8018b70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018b74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018b78:	d10c      	bne.n	8018b94 <rshift+0x3c>
 8018b7a:	f100 0710 	add.w	r7, r0, #16
 8018b7e:	4629      	mov	r1, r5
 8018b80:	42b1      	cmp	r1, r6
 8018b82:	d334      	bcc.n	8018bee <rshift+0x96>
 8018b84:	1a9b      	subs	r3, r3, r2
 8018b86:	009b      	lsls	r3, r3, #2
 8018b88:	1eea      	subs	r2, r5, #3
 8018b8a:	4296      	cmp	r6, r2
 8018b8c:	bf38      	it	cc
 8018b8e:	2300      	movcc	r3, #0
 8018b90:	4423      	add	r3, r4
 8018b92:	e015      	b.n	8018bc0 <rshift+0x68>
 8018b94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018b98:	f1c1 0820 	rsb	r8, r1, #32
 8018b9c:	40cf      	lsrs	r7, r1
 8018b9e:	f105 0e04 	add.w	lr, r5, #4
 8018ba2:	46a1      	mov	r9, r4
 8018ba4:	4576      	cmp	r6, lr
 8018ba6:	46f4      	mov	ip, lr
 8018ba8:	d815      	bhi.n	8018bd6 <rshift+0x7e>
 8018baa:	1a9b      	subs	r3, r3, r2
 8018bac:	009a      	lsls	r2, r3, #2
 8018bae:	3a04      	subs	r2, #4
 8018bb0:	3501      	adds	r5, #1
 8018bb2:	42ae      	cmp	r6, r5
 8018bb4:	bf38      	it	cc
 8018bb6:	2200      	movcc	r2, #0
 8018bb8:	18a3      	adds	r3, r4, r2
 8018bba:	50a7      	str	r7, [r4, r2]
 8018bbc:	b107      	cbz	r7, 8018bc0 <rshift+0x68>
 8018bbe:	3304      	adds	r3, #4
 8018bc0:	1b1a      	subs	r2, r3, r4
 8018bc2:	42a3      	cmp	r3, r4
 8018bc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018bc8:	bf08      	it	eq
 8018bca:	2300      	moveq	r3, #0
 8018bcc:	6102      	str	r2, [r0, #16]
 8018bce:	bf08      	it	eq
 8018bd0:	6143      	streq	r3, [r0, #20]
 8018bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bd6:	f8dc c000 	ldr.w	ip, [ip]
 8018bda:	fa0c fc08 	lsl.w	ip, ip, r8
 8018bde:	ea4c 0707 	orr.w	r7, ip, r7
 8018be2:	f849 7b04 	str.w	r7, [r9], #4
 8018be6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018bea:	40cf      	lsrs	r7, r1
 8018bec:	e7da      	b.n	8018ba4 <rshift+0x4c>
 8018bee:	f851 cb04 	ldr.w	ip, [r1], #4
 8018bf2:	f847 cf04 	str.w	ip, [r7, #4]!
 8018bf6:	e7c3      	b.n	8018b80 <rshift+0x28>
 8018bf8:	4623      	mov	r3, r4
 8018bfa:	e7e1      	b.n	8018bc0 <rshift+0x68>

08018bfc <__hexdig_fun>:
 8018bfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018c00:	2b09      	cmp	r3, #9
 8018c02:	d802      	bhi.n	8018c0a <__hexdig_fun+0xe>
 8018c04:	3820      	subs	r0, #32
 8018c06:	b2c0      	uxtb	r0, r0
 8018c08:	4770      	bx	lr
 8018c0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018c0e:	2b05      	cmp	r3, #5
 8018c10:	d801      	bhi.n	8018c16 <__hexdig_fun+0x1a>
 8018c12:	3847      	subs	r0, #71	; 0x47
 8018c14:	e7f7      	b.n	8018c06 <__hexdig_fun+0xa>
 8018c16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018c1a:	2b05      	cmp	r3, #5
 8018c1c:	d801      	bhi.n	8018c22 <__hexdig_fun+0x26>
 8018c1e:	3827      	subs	r0, #39	; 0x27
 8018c20:	e7f1      	b.n	8018c06 <__hexdig_fun+0xa>
 8018c22:	2000      	movs	r0, #0
 8018c24:	4770      	bx	lr
	...

08018c28 <__gethex>:
 8018c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c2c:	ed2d 8b02 	vpush	{d8}
 8018c30:	b089      	sub	sp, #36	; 0x24
 8018c32:	ee08 0a10 	vmov	s16, r0
 8018c36:	9304      	str	r3, [sp, #16]
 8018c38:	4bbc      	ldr	r3, [pc, #752]	; (8018f2c <__gethex+0x304>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	9301      	str	r3, [sp, #4]
 8018c3e:	4618      	mov	r0, r3
 8018c40:	468b      	mov	fp, r1
 8018c42:	4690      	mov	r8, r2
 8018c44:	f7e7 fac4 	bl	80001d0 <strlen>
 8018c48:	9b01      	ldr	r3, [sp, #4]
 8018c4a:	f8db 2000 	ldr.w	r2, [fp]
 8018c4e:	4403      	add	r3, r0
 8018c50:	4682      	mov	sl, r0
 8018c52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018c56:	9305      	str	r3, [sp, #20]
 8018c58:	1c93      	adds	r3, r2, #2
 8018c5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018c5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018c62:	32fe      	adds	r2, #254	; 0xfe
 8018c64:	18d1      	adds	r1, r2, r3
 8018c66:	461f      	mov	r7, r3
 8018c68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018c6c:	9100      	str	r1, [sp, #0]
 8018c6e:	2830      	cmp	r0, #48	; 0x30
 8018c70:	d0f8      	beq.n	8018c64 <__gethex+0x3c>
 8018c72:	f7ff ffc3 	bl	8018bfc <__hexdig_fun>
 8018c76:	4604      	mov	r4, r0
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	d13a      	bne.n	8018cf2 <__gethex+0xca>
 8018c7c:	9901      	ldr	r1, [sp, #4]
 8018c7e:	4652      	mov	r2, sl
 8018c80:	4638      	mov	r0, r7
 8018c82:	f001 f929 	bl	8019ed8 <strncmp>
 8018c86:	4605      	mov	r5, r0
 8018c88:	2800      	cmp	r0, #0
 8018c8a:	d168      	bne.n	8018d5e <__gethex+0x136>
 8018c8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018c90:	eb07 060a 	add.w	r6, r7, sl
 8018c94:	f7ff ffb2 	bl	8018bfc <__hexdig_fun>
 8018c98:	2800      	cmp	r0, #0
 8018c9a:	d062      	beq.n	8018d62 <__gethex+0x13a>
 8018c9c:	4633      	mov	r3, r6
 8018c9e:	7818      	ldrb	r0, [r3, #0]
 8018ca0:	2830      	cmp	r0, #48	; 0x30
 8018ca2:	461f      	mov	r7, r3
 8018ca4:	f103 0301 	add.w	r3, r3, #1
 8018ca8:	d0f9      	beq.n	8018c9e <__gethex+0x76>
 8018caa:	f7ff ffa7 	bl	8018bfc <__hexdig_fun>
 8018cae:	2301      	movs	r3, #1
 8018cb0:	fab0 f480 	clz	r4, r0
 8018cb4:	0964      	lsrs	r4, r4, #5
 8018cb6:	4635      	mov	r5, r6
 8018cb8:	9300      	str	r3, [sp, #0]
 8018cba:	463a      	mov	r2, r7
 8018cbc:	4616      	mov	r6, r2
 8018cbe:	3201      	adds	r2, #1
 8018cc0:	7830      	ldrb	r0, [r6, #0]
 8018cc2:	f7ff ff9b 	bl	8018bfc <__hexdig_fun>
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	d1f8      	bne.n	8018cbc <__gethex+0x94>
 8018cca:	9901      	ldr	r1, [sp, #4]
 8018ccc:	4652      	mov	r2, sl
 8018cce:	4630      	mov	r0, r6
 8018cd0:	f001 f902 	bl	8019ed8 <strncmp>
 8018cd4:	b980      	cbnz	r0, 8018cf8 <__gethex+0xd0>
 8018cd6:	b94d      	cbnz	r5, 8018cec <__gethex+0xc4>
 8018cd8:	eb06 050a 	add.w	r5, r6, sl
 8018cdc:	462a      	mov	r2, r5
 8018cde:	4616      	mov	r6, r2
 8018ce0:	3201      	adds	r2, #1
 8018ce2:	7830      	ldrb	r0, [r6, #0]
 8018ce4:	f7ff ff8a 	bl	8018bfc <__hexdig_fun>
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	d1f8      	bne.n	8018cde <__gethex+0xb6>
 8018cec:	1bad      	subs	r5, r5, r6
 8018cee:	00ad      	lsls	r5, r5, #2
 8018cf0:	e004      	b.n	8018cfc <__gethex+0xd4>
 8018cf2:	2400      	movs	r4, #0
 8018cf4:	4625      	mov	r5, r4
 8018cf6:	e7e0      	b.n	8018cba <__gethex+0x92>
 8018cf8:	2d00      	cmp	r5, #0
 8018cfa:	d1f7      	bne.n	8018cec <__gethex+0xc4>
 8018cfc:	7833      	ldrb	r3, [r6, #0]
 8018cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018d02:	2b50      	cmp	r3, #80	; 0x50
 8018d04:	d13b      	bne.n	8018d7e <__gethex+0x156>
 8018d06:	7873      	ldrb	r3, [r6, #1]
 8018d08:	2b2b      	cmp	r3, #43	; 0x2b
 8018d0a:	d02c      	beq.n	8018d66 <__gethex+0x13e>
 8018d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8018d0e:	d02e      	beq.n	8018d6e <__gethex+0x146>
 8018d10:	1c71      	adds	r1, r6, #1
 8018d12:	f04f 0900 	mov.w	r9, #0
 8018d16:	7808      	ldrb	r0, [r1, #0]
 8018d18:	f7ff ff70 	bl	8018bfc <__hexdig_fun>
 8018d1c:	1e43      	subs	r3, r0, #1
 8018d1e:	b2db      	uxtb	r3, r3
 8018d20:	2b18      	cmp	r3, #24
 8018d22:	d82c      	bhi.n	8018d7e <__gethex+0x156>
 8018d24:	f1a0 0210 	sub.w	r2, r0, #16
 8018d28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018d2c:	f7ff ff66 	bl	8018bfc <__hexdig_fun>
 8018d30:	1e43      	subs	r3, r0, #1
 8018d32:	b2db      	uxtb	r3, r3
 8018d34:	2b18      	cmp	r3, #24
 8018d36:	d91d      	bls.n	8018d74 <__gethex+0x14c>
 8018d38:	f1b9 0f00 	cmp.w	r9, #0
 8018d3c:	d000      	beq.n	8018d40 <__gethex+0x118>
 8018d3e:	4252      	negs	r2, r2
 8018d40:	4415      	add	r5, r2
 8018d42:	f8cb 1000 	str.w	r1, [fp]
 8018d46:	b1e4      	cbz	r4, 8018d82 <__gethex+0x15a>
 8018d48:	9b00      	ldr	r3, [sp, #0]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	bf14      	ite	ne
 8018d4e:	2700      	movne	r7, #0
 8018d50:	2706      	moveq	r7, #6
 8018d52:	4638      	mov	r0, r7
 8018d54:	b009      	add	sp, #36	; 0x24
 8018d56:	ecbd 8b02 	vpop	{d8}
 8018d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5e:	463e      	mov	r6, r7
 8018d60:	4625      	mov	r5, r4
 8018d62:	2401      	movs	r4, #1
 8018d64:	e7ca      	b.n	8018cfc <__gethex+0xd4>
 8018d66:	f04f 0900 	mov.w	r9, #0
 8018d6a:	1cb1      	adds	r1, r6, #2
 8018d6c:	e7d3      	b.n	8018d16 <__gethex+0xee>
 8018d6e:	f04f 0901 	mov.w	r9, #1
 8018d72:	e7fa      	b.n	8018d6a <__gethex+0x142>
 8018d74:	230a      	movs	r3, #10
 8018d76:	fb03 0202 	mla	r2, r3, r2, r0
 8018d7a:	3a10      	subs	r2, #16
 8018d7c:	e7d4      	b.n	8018d28 <__gethex+0x100>
 8018d7e:	4631      	mov	r1, r6
 8018d80:	e7df      	b.n	8018d42 <__gethex+0x11a>
 8018d82:	1bf3      	subs	r3, r6, r7
 8018d84:	3b01      	subs	r3, #1
 8018d86:	4621      	mov	r1, r4
 8018d88:	2b07      	cmp	r3, #7
 8018d8a:	dc0b      	bgt.n	8018da4 <__gethex+0x17c>
 8018d8c:	ee18 0a10 	vmov	r0, s16
 8018d90:	f000 fa74 	bl	801927c <_Balloc>
 8018d94:	4604      	mov	r4, r0
 8018d96:	b940      	cbnz	r0, 8018daa <__gethex+0x182>
 8018d98:	4b65      	ldr	r3, [pc, #404]	; (8018f30 <__gethex+0x308>)
 8018d9a:	4602      	mov	r2, r0
 8018d9c:	21de      	movs	r1, #222	; 0xde
 8018d9e:	4865      	ldr	r0, [pc, #404]	; (8018f34 <__gethex+0x30c>)
 8018da0:	f001 f8ba 	bl	8019f18 <__assert_func>
 8018da4:	3101      	adds	r1, #1
 8018da6:	105b      	asrs	r3, r3, #1
 8018da8:	e7ee      	b.n	8018d88 <__gethex+0x160>
 8018daa:	f100 0914 	add.w	r9, r0, #20
 8018dae:	f04f 0b00 	mov.w	fp, #0
 8018db2:	f1ca 0301 	rsb	r3, sl, #1
 8018db6:	f8cd 9008 	str.w	r9, [sp, #8]
 8018dba:	f8cd b000 	str.w	fp, [sp]
 8018dbe:	9306      	str	r3, [sp, #24]
 8018dc0:	42b7      	cmp	r7, r6
 8018dc2:	d340      	bcc.n	8018e46 <__gethex+0x21e>
 8018dc4:	9802      	ldr	r0, [sp, #8]
 8018dc6:	9b00      	ldr	r3, [sp, #0]
 8018dc8:	f840 3b04 	str.w	r3, [r0], #4
 8018dcc:	eba0 0009 	sub.w	r0, r0, r9
 8018dd0:	1080      	asrs	r0, r0, #2
 8018dd2:	0146      	lsls	r6, r0, #5
 8018dd4:	6120      	str	r0, [r4, #16]
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f000 fb46 	bl	8019468 <__hi0bits>
 8018ddc:	1a30      	subs	r0, r6, r0
 8018dde:	f8d8 6000 	ldr.w	r6, [r8]
 8018de2:	42b0      	cmp	r0, r6
 8018de4:	dd63      	ble.n	8018eae <__gethex+0x286>
 8018de6:	1b87      	subs	r7, r0, r6
 8018de8:	4639      	mov	r1, r7
 8018dea:	4620      	mov	r0, r4
 8018dec:	f000 fee0 	bl	8019bb0 <__any_on>
 8018df0:	4682      	mov	sl, r0
 8018df2:	b1a8      	cbz	r0, 8018e20 <__gethex+0x1f8>
 8018df4:	1e7b      	subs	r3, r7, #1
 8018df6:	1159      	asrs	r1, r3, #5
 8018df8:	f003 021f 	and.w	r2, r3, #31
 8018dfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018e00:	f04f 0a01 	mov.w	sl, #1
 8018e04:	fa0a f202 	lsl.w	r2, sl, r2
 8018e08:	420a      	tst	r2, r1
 8018e0a:	d009      	beq.n	8018e20 <__gethex+0x1f8>
 8018e0c:	4553      	cmp	r3, sl
 8018e0e:	dd05      	ble.n	8018e1c <__gethex+0x1f4>
 8018e10:	1eb9      	subs	r1, r7, #2
 8018e12:	4620      	mov	r0, r4
 8018e14:	f000 fecc 	bl	8019bb0 <__any_on>
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	d145      	bne.n	8018ea8 <__gethex+0x280>
 8018e1c:	f04f 0a02 	mov.w	sl, #2
 8018e20:	4639      	mov	r1, r7
 8018e22:	4620      	mov	r0, r4
 8018e24:	f7ff fe98 	bl	8018b58 <rshift>
 8018e28:	443d      	add	r5, r7
 8018e2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018e2e:	42ab      	cmp	r3, r5
 8018e30:	da4c      	bge.n	8018ecc <__gethex+0x2a4>
 8018e32:	ee18 0a10 	vmov	r0, s16
 8018e36:	4621      	mov	r1, r4
 8018e38:	f000 fa60 	bl	80192fc <_Bfree>
 8018e3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e3e:	2300      	movs	r3, #0
 8018e40:	6013      	str	r3, [r2, #0]
 8018e42:	27a3      	movs	r7, #163	; 0xa3
 8018e44:	e785      	b.n	8018d52 <__gethex+0x12a>
 8018e46:	1e73      	subs	r3, r6, #1
 8018e48:	9a05      	ldr	r2, [sp, #20]
 8018e4a:	9303      	str	r3, [sp, #12]
 8018e4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018e50:	4293      	cmp	r3, r2
 8018e52:	d019      	beq.n	8018e88 <__gethex+0x260>
 8018e54:	f1bb 0f20 	cmp.w	fp, #32
 8018e58:	d107      	bne.n	8018e6a <__gethex+0x242>
 8018e5a:	9b02      	ldr	r3, [sp, #8]
 8018e5c:	9a00      	ldr	r2, [sp, #0]
 8018e5e:	f843 2b04 	str.w	r2, [r3], #4
 8018e62:	9302      	str	r3, [sp, #8]
 8018e64:	2300      	movs	r3, #0
 8018e66:	9300      	str	r3, [sp, #0]
 8018e68:	469b      	mov	fp, r3
 8018e6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018e6e:	f7ff fec5 	bl	8018bfc <__hexdig_fun>
 8018e72:	9b00      	ldr	r3, [sp, #0]
 8018e74:	f000 000f 	and.w	r0, r0, #15
 8018e78:	fa00 f00b 	lsl.w	r0, r0, fp
 8018e7c:	4303      	orrs	r3, r0
 8018e7e:	9300      	str	r3, [sp, #0]
 8018e80:	f10b 0b04 	add.w	fp, fp, #4
 8018e84:	9b03      	ldr	r3, [sp, #12]
 8018e86:	e00d      	b.n	8018ea4 <__gethex+0x27c>
 8018e88:	9b03      	ldr	r3, [sp, #12]
 8018e8a:	9a06      	ldr	r2, [sp, #24]
 8018e8c:	4413      	add	r3, r2
 8018e8e:	42bb      	cmp	r3, r7
 8018e90:	d3e0      	bcc.n	8018e54 <__gethex+0x22c>
 8018e92:	4618      	mov	r0, r3
 8018e94:	9901      	ldr	r1, [sp, #4]
 8018e96:	9307      	str	r3, [sp, #28]
 8018e98:	4652      	mov	r2, sl
 8018e9a:	f001 f81d 	bl	8019ed8 <strncmp>
 8018e9e:	9b07      	ldr	r3, [sp, #28]
 8018ea0:	2800      	cmp	r0, #0
 8018ea2:	d1d7      	bne.n	8018e54 <__gethex+0x22c>
 8018ea4:	461e      	mov	r6, r3
 8018ea6:	e78b      	b.n	8018dc0 <__gethex+0x198>
 8018ea8:	f04f 0a03 	mov.w	sl, #3
 8018eac:	e7b8      	b.n	8018e20 <__gethex+0x1f8>
 8018eae:	da0a      	bge.n	8018ec6 <__gethex+0x29e>
 8018eb0:	1a37      	subs	r7, r6, r0
 8018eb2:	4621      	mov	r1, r4
 8018eb4:	ee18 0a10 	vmov	r0, s16
 8018eb8:	463a      	mov	r2, r7
 8018eba:	f000 fc3b 	bl	8019734 <__lshift>
 8018ebe:	1bed      	subs	r5, r5, r7
 8018ec0:	4604      	mov	r4, r0
 8018ec2:	f100 0914 	add.w	r9, r0, #20
 8018ec6:	f04f 0a00 	mov.w	sl, #0
 8018eca:	e7ae      	b.n	8018e2a <__gethex+0x202>
 8018ecc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018ed0:	42a8      	cmp	r0, r5
 8018ed2:	dd72      	ble.n	8018fba <__gethex+0x392>
 8018ed4:	1b45      	subs	r5, r0, r5
 8018ed6:	42ae      	cmp	r6, r5
 8018ed8:	dc36      	bgt.n	8018f48 <__gethex+0x320>
 8018eda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018ede:	2b02      	cmp	r3, #2
 8018ee0:	d02a      	beq.n	8018f38 <__gethex+0x310>
 8018ee2:	2b03      	cmp	r3, #3
 8018ee4:	d02c      	beq.n	8018f40 <__gethex+0x318>
 8018ee6:	2b01      	cmp	r3, #1
 8018ee8:	d115      	bne.n	8018f16 <__gethex+0x2ee>
 8018eea:	42ae      	cmp	r6, r5
 8018eec:	d113      	bne.n	8018f16 <__gethex+0x2ee>
 8018eee:	2e01      	cmp	r6, #1
 8018ef0:	d10b      	bne.n	8018f0a <__gethex+0x2e2>
 8018ef2:	9a04      	ldr	r2, [sp, #16]
 8018ef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018ef8:	6013      	str	r3, [r2, #0]
 8018efa:	2301      	movs	r3, #1
 8018efc:	6123      	str	r3, [r4, #16]
 8018efe:	f8c9 3000 	str.w	r3, [r9]
 8018f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f04:	2762      	movs	r7, #98	; 0x62
 8018f06:	601c      	str	r4, [r3, #0]
 8018f08:	e723      	b.n	8018d52 <__gethex+0x12a>
 8018f0a:	1e71      	subs	r1, r6, #1
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	f000 fe4f 	bl	8019bb0 <__any_on>
 8018f12:	2800      	cmp	r0, #0
 8018f14:	d1ed      	bne.n	8018ef2 <__gethex+0x2ca>
 8018f16:	ee18 0a10 	vmov	r0, s16
 8018f1a:	4621      	mov	r1, r4
 8018f1c:	f000 f9ee 	bl	80192fc <_Bfree>
 8018f20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f22:	2300      	movs	r3, #0
 8018f24:	6013      	str	r3, [r2, #0]
 8018f26:	2750      	movs	r7, #80	; 0x50
 8018f28:	e713      	b.n	8018d52 <__gethex+0x12a>
 8018f2a:	bf00      	nop
 8018f2c:	0801c9a0 	.word	0x0801c9a0
 8018f30:	0801c924 	.word	0x0801c924
 8018f34:	0801c935 	.word	0x0801c935
 8018f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d1eb      	bne.n	8018f16 <__gethex+0x2ee>
 8018f3e:	e7d8      	b.n	8018ef2 <__gethex+0x2ca>
 8018f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d1d5      	bne.n	8018ef2 <__gethex+0x2ca>
 8018f46:	e7e6      	b.n	8018f16 <__gethex+0x2ee>
 8018f48:	1e6f      	subs	r7, r5, #1
 8018f4a:	f1ba 0f00 	cmp.w	sl, #0
 8018f4e:	d131      	bne.n	8018fb4 <__gethex+0x38c>
 8018f50:	b127      	cbz	r7, 8018f5c <__gethex+0x334>
 8018f52:	4639      	mov	r1, r7
 8018f54:	4620      	mov	r0, r4
 8018f56:	f000 fe2b 	bl	8019bb0 <__any_on>
 8018f5a:	4682      	mov	sl, r0
 8018f5c:	117b      	asrs	r3, r7, #5
 8018f5e:	2101      	movs	r1, #1
 8018f60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018f64:	f007 071f 	and.w	r7, r7, #31
 8018f68:	fa01 f707 	lsl.w	r7, r1, r7
 8018f6c:	421f      	tst	r7, r3
 8018f6e:	4629      	mov	r1, r5
 8018f70:	4620      	mov	r0, r4
 8018f72:	bf18      	it	ne
 8018f74:	f04a 0a02 	orrne.w	sl, sl, #2
 8018f78:	1b76      	subs	r6, r6, r5
 8018f7a:	f7ff fded 	bl	8018b58 <rshift>
 8018f7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018f82:	2702      	movs	r7, #2
 8018f84:	f1ba 0f00 	cmp.w	sl, #0
 8018f88:	d048      	beq.n	801901c <__gethex+0x3f4>
 8018f8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f8e:	2b02      	cmp	r3, #2
 8018f90:	d015      	beq.n	8018fbe <__gethex+0x396>
 8018f92:	2b03      	cmp	r3, #3
 8018f94:	d017      	beq.n	8018fc6 <__gethex+0x39e>
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d109      	bne.n	8018fae <__gethex+0x386>
 8018f9a:	f01a 0f02 	tst.w	sl, #2
 8018f9e:	d006      	beq.n	8018fae <__gethex+0x386>
 8018fa0:	f8d9 0000 	ldr.w	r0, [r9]
 8018fa4:	ea4a 0a00 	orr.w	sl, sl, r0
 8018fa8:	f01a 0f01 	tst.w	sl, #1
 8018fac:	d10e      	bne.n	8018fcc <__gethex+0x3a4>
 8018fae:	f047 0710 	orr.w	r7, r7, #16
 8018fb2:	e033      	b.n	801901c <__gethex+0x3f4>
 8018fb4:	f04f 0a01 	mov.w	sl, #1
 8018fb8:	e7d0      	b.n	8018f5c <__gethex+0x334>
 8018fba:	2701      	movs	r7, #1
 8018fbc:	e7e2      	b.n	8018f84 <__gethex+0x35c>
 8018fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fc0:	f1c3 0301 	rsb	r3, r3, #1
 8018fc4:	9315      	str	r3, [sp, #84]	; 0x54
 8018fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d0f0      	beq.n	8018fae <__gethex+0x386>
 8018fcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018fd0:	f104 0314 	add.w	r3, r4, #20
 8018fd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018fd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018fdc:	f04f 0c00 	mov.w	ip, #0
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fe6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018fea:	d01c      	beq.n	8019026 <__gethex+0x3fe>
 8018fec:	3201      	adds	r2, #1
 8018fee:	6002      	str	r2, [r0, #0]
 8018ff0:	2f02      	cmp	r7, #2
 8018ff2:	f104 0314 	add.w	r3, r4, #20
 8018ff6:	d13f      	bne.n	8019078 <__gethex+0x450>
 8018ff8:	f8d8 2000 	ldr.w	r2, [r8]
 8018ffc:	3a01      	subs	r2, #1
 8018ffe:	42b2      	cmp	r2, r6
 8019000:	d10a      	bne.n	8019018 <__gethex+0x3f0>
 8019002:	1171      	asrs	r1, r6, #5
 8019004:	2201      	movs	r2, #1
 8019006:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801900a:	f006 061f 	and.w	r6, r6, #31
 801900e:	fa02 f606 	lsl.w	r6, r2, r6
 8019012:	421e      	tst	r6, r3
 8019014:	bf18      	it	ne
 8019016:	4617      	movne	r7, r2
 8019018:	f047 0720 	orr.w	r7, r7, #32
 801901c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801901e:	601c      	str	r4, [r3, #0]
 8019020:	9b04      	ldr	r3, [sp, #16]
 8019022:	601d      	str	r5, [r3, #0]
 8019024:	e695      	b.n	8018d52 <__gethex+0x12a>
 8019026:	4299      	cmp	r1, r3
 8019028:	f843 cc04 	str.w	ip, [r3, #-4]
 801902c:	d8d8      	bhi.n	8018fe0 <__gethex+0x3b8>
 801902e:	68a3      	ldr	r3, [r4, #8]
 8019030:	459b      	cmp	fp, r3
 8019032:	db19      	blt.n	8019068 <__gethex+0x440>
 8019034:	6861      	ldr	r1, [r4, #4]
 8019036:	ee18 0a10 	vmov	r0, s16
 801903a:	3101      	adds	r1, #1
 801903c:	f000 f91e 	bl	801927c <_Balloc>
 8019040:	4681      	mov	r9, r0
 8019042:	b918      	cbnz	r0, 801904c <__gethex+0x424>
 8019044:	4b1a      	ldr	r3, [pc, #104]	; (80190b0 <__gethex+0x488>)
 8019046:	4602      	mov	r2, r0
 8019048:	2184      	movs	r1, #132	; 0x84
 801904a:	e6a8      	b.n	8018d9e <__gethex+0x176>
 801904c:	6922      	ldr	r2, [r4, #16]
 801904e:	3202      	adds	r2, #2
 8019050:	f104 010c 	add.w	r1, r4, #12
 8019054:	0092      	lsls	r2, r2, #2
 8019056:	300c      	adds	r0, #12
 8019058:	f7fd f892 	bl	8016180 <memcpy>
 801905c:	4621      	mov	r1, r4
 801905e:	ee18 0a10 	vmov	r0, s16
 8019062:	f000 f94b 	bl	80192fc <_Bfree>
 8019066:	464c      	mov	r4, r9
 8019068:	6923      	ldr	r3, [r4, #16]
 801906a:	1c5a      	adds	r2, r3, #1
 801906c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019070:	6122      	str	r2, [r4, #16]
 8019072:	2201      	movs	r2, #1
 8019074:	615a      	str	r2, [r3, #20]
 8019076:	e7bb      	b.n	8018ff0 <__gethex+0x3c8>
 8019078:	6922      	ldr	r2, [r4, #16]
 801907a:	455a      	cmp	r2, fp
 801907c:	dd0b      	ble.n	8019096 <__gethex+0x46e>
 801907e:	2101      	movs	r1, #1
 8019080:	4620      	mov	r0, r4
 8019082:	f7ff fd69 	bl	8018b58 <rshift>
 8019086:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801908a:	3501      	adds	r5, #1
 801908c:	42ab      	cmp	r3, r5
 801908e:	f6ff aed0 	blt.w	8018e32 <__gethex+0x20a>
 8019092:	2701      	movs	r7, #1
 8019094:	e7c0      	b.n	8019018 <__gethex+0x3f0>
 8019096:	f016 061f 	ands.w	r6, r6, #31
 801909a:	d0fa      	beq.n	8019092 <__gethex+0x46a>
 801909c:	449a      	add	sl, r3
 801909e:	f1c6 0620 	rsb	r6, r6, #32
 80190a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80190a6:	f000 f9df 	bl	8019468 <__hi0bits>
 80190aa:	42b0      	cmp	r0, r6
 80190ac:	dbe7      	blt.n	801907e <__gethex+0x456>
 80190ae:	e7f0      	b.n	8019092 <__gethex+0x46a>
 80190b0:	0801c924 	.word	0x0801c924

080190b4 <L_shift>:
 80190b4:	f1c2 0208 	rsb	r2, r2, #8
 80190b8:	0092      	lsls	r2, r2, #2
 80190ba:	b570      	push	{r4, r5, r6, lr}
 80190bc:	f1c2 0620 	rsb	r6, r2, #32
 80190c0:	6843      	ldr	r3, [r0, #4]
 80190c2:	6804      	ldr	r4, [r0, #0]
 80190c4:	fa03 f506 	lsl.w	r5, r3, r6
 80190c8:	432c      	orrs	r4, r5
 80190ca:	40d3      	lsrs	r3, r2
 80190cc:	6004      	str	r4, [r0, #0]
 80190ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80190d2:	4288      	cmp	r0, r1
 80190d4:	d3f4      	bcc.n	80190c0 <L_shift+0xc>
 80190d6:	bd70      	pop	{r4, r5, r6, pc}

080190d8 <__match>:
 80190d8:	b530      	push	{r4, r5, lr}
 80190da:	6803      	ldr	r3, [r0, #0]
 80190dc:	3301      	adds	r3, #1
 80190de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190e2:	b914      	cbnz	r4, 80190ea <__match+0x12>
 80190e4:	6003      	str	r3, [r0, #0]
 80190e6:	2001      	movs	r0, #1
 80190e8:	bd30      	pop	{r4, r5, pc}
 80190ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80190f2:	2d19      	cmp	r5, #25
 80190f4:	bf98      	it	ls
 80190f6:	3220      	addls	r2, #32
 80190f8:	42a2      	cmp	r2, r4
 80190fa:	d0f0      	beq.n	80190de <__match+0x6>
 80190fc:	2000      	movs	r0, #0
 80190fe:	e7f3      	b.n	80190e8 <__match+0x10>

08019100 <__hexnan>:
 8019100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	680b      	ldr	r3, [r1, #0]
 8019106:	6801      	ldr	r1, [r0, #0]
 8019108:	115e      	asrs	r6, r3, #5
 801910a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801910e:	f013 031f 	ands.w	r3, r3, #31
 8019112:	b087      	sub	sp, #28
 8019114:	bf18      	it	ne
 8019116:	3604      	addne	r6, #4
 8019118:	2500      	movs	r5, #0
 801911a:	1f37      	subs	r7, r6, #4
 801911c:	4682      	mov	sl, r0
 801911e:	4690      	mov	r8, r2
 8019120:	9301      	str	r3, [sp, #4]
 8019122:	f846 5c04 	str.w	r5, [r6, #-4]
 8019126:	46b9      	mov	r9, r7
 8019128:	463c      	mov	r4, r7
 801912a:	9502      	str	r5, [sp, #8]
 801912c:	46ab      	mov	fp, r5
 801912e:	784a      	ldrb	r2, [r1, #1]
 8019130:	1c4b      	adds	r3, r1, #1
 8019132:	9303      	str	r3, [sp, #12]
 8019134:	b342      	cbz	r2, 8019188 <__hexnan+0x88>
 8019136:	4610      	mov	r0, r2
 8019138:	9105      	str	r1, [sp, #20]
 801913a:	9204      	str	r2, [sp, #16]
 801913c:	f7ff fd5e 	bl	8018bfc <__hexdig_fun>
 8019140:	2800      	cmp	r0, #0
 8019142:	d14f      	bne.n	80191e4 <__hexnan+0xe4>
 8019144:	9a04      	ldr	r2, [sp, #16]
 8019146:	9905      	ldr	r1, [sp, #20]
 8019148:	2a20      	cmp	r2, #32
 801914a:	d818      	bhi.n	801917e <__hexnan+0x7e>
 801914c:	9b02      	ldr	r3, [sp, #8]
 801914e:	459b      	cmp	fp, r3
 8019150:	dd13      	ble.n	801917a <__hexnan+0x7a>
 8019152:	454c      	cmp	r4, r9
 8019154:	d206      	bcs.n	8019164 <__hexnan+0x64>
 8019156:	2d07      	cmp	r5, #7
 8019158:	dc04      	bgt.n	8019164 <__hexnan+0x64>
 801915a:	462a      	mov	r2, r5
 801915c:	4649      	mov	r1, r9
 801915e:	4620      	mov	r0, r4
 8019160:	f7ff ffa8 	bl	80190b4 <L_shift>
 8019164:	4544      	cmp	r4, r8
 8019166:	d950      	bls.n	801920a <__hexnan+0x10a>
 8019168:	2300      	movs	r3, #0
 801916a:	f1a4 0904 	sub.w	r9, r4, #4
 801916e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019172:	f8cd b008 	str.w	fp, [sp, #8]
 8019176:	464c      	mov	r4, r9
 8019178:	461d      	mov	r5, r3
 801917a:	9903      	ldr	r1, [sp, #12]
 801917c:	e7d7      	b.n	801912e <__hexnan+0x2e>
 801917e:	2a29      	cmp	r2, #41	; 0x29
 8019180:	d156      	bne.n	8019230 <__hexnan+0x130>
 8019182:	3102      	adds	r1, #2
 8019184:	f8ca 1000 	str.w	r1, [sl]
 8019188:	f1bb 0f00 	cmp.w	fp, #0
 801918c:	d050      	beq.n	8019230 <__hexnan+0x130>
 801918e:	454c      	cmp	r4, r9
 8019190:	d206      	bcs.n	80191a0 <__hexnan+0xa0>
 8019192:	2d07      	cmp	r5, #7
 8019194:	dc04      	bgt.n	80191a0 <__hexnan+0xa0>
 8019196:	462a      	mov	r2, r5
 8019198:	4649      	mov	r1, r9
 801919a:	4620      	mov	r0, r4
 801919c:	f7ff ff8a 	bl	80190b4 <L_shift>
 80191a0:	4544      	cmp	r4, r8
 80191a2:	d934      	bls.n	801920e <__hexnan+0x10e>
 80191a4:	f1a8 0204 	sub.w	r2, r8, #4
 80191a8:	4623      	mov	r3, r4
 80191aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80191ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80191b2:	429f      	cmp	r7, r3
 80191b4:	d2f9      	bcs.n	80191aa <__hexnan+0xaa>
 80191b6:	1b3b      	subs	r3, r7, r4
 80191b8:	f023 0303 	bic.w	r3, r3, #3
 80191bc:	3304      	adds	r3, #4
 80191be:	3401      	adds	r4, #1
 80191c0:	3e03      	subs	r6, #3
 80191c2:	42b4      	cmp	r4, r6
 80191c4:	bf88      	it	hi
 80191c6:	2304      	movhi	r3, #4
 80191c8:	4443      	add	r3, r8
 80191ca:	2200      	movs	r2, #0
 80191cc:	f843 2b04 	str.w	r2, [r3], #4
 80191d0:	429f      	cmp	r7, r3
 80191d2:	d2fb      	bcs.n	80191cc <__hexnan+0xcc>
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	b91b      	cbnz	r3, 80191e0 <__hexnan+0xe0>
 80191d8:	4547      	cmp	r7, r8
 80191da:	d127      	bne.n	801922c <__hexnan+0x12c>
 80191dc:	2301      	movs	r3, #1
 80191de:	603b      	str	r3, [r7, #0]
 80191e0:	2005      	movs	r0, #5
 80191e2:	e026      	b.n	8019232 <__hexnan+0x132>
 80191e4:	3501      	adds	r5, #1
 80191e6:	2d08      	cmp	r5, #8
 80191e8:	f10b 0b01 	add.w	fp, fp, #1
 80191ec:	dd06      	ble.n	80191fc <__hexnan+0xfc>
 80191ee:	4544      	cmp	r4, r8
 80191f0:	d9c3      	bls.n	801917a <__hexnan+0x7a>
 80191f2:	2300      	movs	r3, #0
 80191f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80191f8:	2501      	movs	r5, #1
 80191fa:	3c04      	subs	r4, #4
 80191fc:	6822      	ldr	r2, [r4, #0]
 80191fe:	f000 000f 	and.w	r0, r0, #15
 8019202:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019206:	6022      	str	r2, [r4, #0]
 8019208:	e7b7      	b.n	801917a <__hexnan+0x7a>
 801920a:	2508      	movs	r5, #8
 801920c:	e7b5      	b.n	801917a <__hexnan+0x7a>
 801920e:	9b01      	ldr	r3, [sp, #4]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d0df      	beq.n	80191d4 <__hexnan+0xd4>
 8019214:	f04f 32ff 	mov.w	r2, #4294967295
 8019218:	f1c3 0320 	rsb	r3, r3, #32
 801921c:	fa22 f303 	lsr.w	r3, r2, r3
 8019220:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019224:	401a      	ands	r2, r3
 8019226:	f846 2c04 	str.w	r2, [r6, #-4]
 801922a:	e7d3      	b.n	80191d4 <__hexnan+0xd4>
 801922c:	3f04      	subs	r7, #4
 801922e:	e7d1      	b.n	80191d4 <__hexnan+0xd4>
 8019230:	2004      	movs	r0, #4
 8019232:	b007      	add	sp, #28
 8019234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019238 <_localeconv_r>:
 8019238:	4800      	ldr	r0, [pc, #0]	; (801923c <_localeconv_r+0x4>)
 801923a:	4770      	bx	lr
 801923c:	20004368 	.word	0x20004368

08019240 <__ascii_mbtowc>:
 8019240:	b082      	sub	sp, #8
 8019242:	b901      	cbnz	r1, 8019246 <__ascii_mbtowc+0x6>
 8019244:	a901      	add	r1, sp, #4
 8019246:	b142      	cbz	r2, 801925a <__ascii_mbtowc+0x1a>
 8019248:	b14b      	cbz	r3, 801925e <__ascii_mbtowc+0x1e>
 801924a:	7813      	ldrb	r3, [r2, #0]
 801924c:	600b      	str	r3, [r1, #0]
 801924e:	7812      	ldrb	r2, [r2, #0]
 8019250:	1e10      	subs	r0, r2, #0
 8019252:	bf18      	it	ne
 8019254:	2001      	movne	r0, #1
 8019256:	b002      	add	sp, #8
 8019258:	4770      	bx	lr
 801925a:	4610      	mov	r0, r2
 801925c:	e7fb      	b.n	8019256 <__ascii_mbtowc+0x16>
 801925e:	f06f 0001 	mvn.w	r0, #1
 8019262:	e7f8      	b.n	8019256 <__ascii_mbtowc+0x16>

08019264 <__malloc_lock>:
 8019264:	4801      	ldr	r0, [pc, #4]	; (801926c <__malloc_lock+0x8>)
 8019266:	f000 be88 	b.w	8019f7a <__retarget_lock_acquire_recursive>
 801926a:	bf00      	nop
 801926c:	20011b8c 	.word	0x20011b8c

08019270 <__malloc_unlock>:
 8019270:	4801      	ldr	r0, [pc, #4]	; (8019278 <__malloc_unlock+0x8>)
 8019272:	f000 be83 	b.w	8019f7c <__retarget_lock_release_recursive>
 8019276:	bf00      	nop
 8019278:	20011b8c 	.word	0x20011b8c

0801927c <_Balloc>:
 801927c:	b570      	push	{r4, r5, r6, lr}
 801927e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019280:	4604      	mov	r4, r0
 8019282:	460d      	mov	r5, r1
 8019284:	b976      	cbnz	r6, 80192a4 <_Balloc+0x28>
 8019286:	2010      	movs	r0, #16
 8019288:	f7fc ff6a 	bl	8016160 <malloc>
 801928c:	4602      	mov	r2, r0
 801928e:	6260      	str	r0, [r4, #36]	; 0x24
 8019290:	b920      	cbnz	r0, 801929c <_Balloc+0x20>
 8019292:	4b18      	ldr	r3, [pc, #96]	; (80192f4 <_Balloc+0x78>)
 8019294:	4818      	ldr	r0, [pc, #96]	; (80192f8 <_Balloc+0x7c>)
 8019296:	2166      	movs	r1, #102	; 0x66
 8019298:	f000 fe3e 	bl	8019f18 <__assert_func>
 801929c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192a0:	6006      	str	r6, [r0, #0]
 80192a2:	60c6      	str	r6, [r0, #12]
 80192a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80192a6:	68f3      	ldr	r3, [r6, #12]
 80192a8:	b183      	cbz	r3, 80192cc <_Balloc+0x50>
 80192aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192ac:	68db      	ldr	r3, [r3, #12]
 80192ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80192b2:	b9b8      	cbnz	r0, 80192e4 <_Balloc+0x68>
 80192b4:	2101      	movs	r1, #1
 80192b6:	fa01 f605 	lsl.w	r6, r1, r5
 80192ba:	1d72      	adds	r2, r6, #5
 80192bc:	0092      	lsls	r2, r2, #2
 80192be:	4620      	mov	r0, r4
 80192c0:	f000 fc97 	bl	8019bf2 <_calloc_r>
 80192c4:	b160      	cbz	r0, 80192e0 <_Balloc+0x64>
 80192c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80192ca:	e00e      	b.n	80192ea <_Balloc+0x6e>
 80192cc:	2221      	movs	r2, #33	; 0x21
 80192ce:	2104      	movs	r1, #4
 80192d0:	4620      	mov	r0, r4
 80192d2:	f000 fc8e 	bl	8019bf2 <_calloc_r>
 80192d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192d8:	60f0      	str	r0, [r6, #12]
 80192da:	68db      	ldr	r3, [r3, #12]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d1e4      	bne.n	80192aa <_Balloc+0x2e>
 80192e0:	2000      	movs	r0, #0
 80192e2:	bd70      	pop	{r4, r5, r6, pc}
 80192e4:	6802      	ldr	r2, [r0, #0]
 80192e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80192ea:	2300      	movs	r3, #0
 80192ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80192f0:	e7f7      	b.n	80192e2 <_Balloc+0x66>
 80192f2:	bf00      	nop
 80192f4:	0801c8ae 	.word	0x0801c8ae
 80192f8:	0801c9b4 	.word	0x0801c9b4

080192fc <_Bfree>:
 80192fc:	b570      	push	{r4, r5, r6, lr}
 80192fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019300:	4605      	mov	r5, r0
 8019302:	460c      	mov	r4, r1
 8019304:	b976      	cbnz	r6, 8019324 <_Bfree+0x28>
 8019306:	2010      	movs	r0, #16
 8019308:	f7fc ff2a 	bl	8016160 <malloc>
 801930c:	4602      	mov	r2, r0
 801930e:	6268      	str	r0, [r5, #36]	; 0x24
 8019310:	b920      	cbnz	r0, 801931c <_Bfree+0x20>
 8019312:	4b09      	ldr	r3, [pc, #36]	; (8019338 <_Bfree+0x3c>)
 8019314:	4809      	ldr	r0, [pc, #36]	; (801933c <_Bfree+0x40>)
 8019316:	218a      	movs	r1, #138	; 0x8a
 8019318:	f000 fdfe 	bl	8019f18 <__assert_func>
 801931c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019320:	6006      	str	r6, [r0, #0]
 8019322:	60c6      	str	r6, [r0, #12]
 8019324:	b13c      	cbz	r4, 8019336 <_Bfree+0x3a>
 8019326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019328:	6862      	ldr	r2, [r4, #4]
 801932a:	68db      	ldr	r3, [r3, #12]
 801932c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019330:	6021      	str	r1, [r4, #0]
 8019332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019336:	bd70      	pop	{r4, r5, r6, pc}
 8019338:	0801c8ae 	.word	0x0801c8ae
 801933c:	0801c9b4 	.word	0x0801c9b4

08019340 <__multadd>:
 8019340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019344:	690e      	ldr	r6, [r1, #16]
 8019346:	4607      	mov	r7, r0
 8019348:	4698      	mov	r8, r3
 801934a:	460c      	mov	r4, r1
 801934c:	f101 0014 	add.w	r0, r1, #20
 8019350:	2300      	movs	r3, #0
 8019352:	6805      	ldr	r5, [r0, #0]
 8019354:	b2a9      	uxth	r1, r5
 8019356:	fb02 8101 	mla	r1, r2, r1, r8
 801935a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801935e:	0c2d      	lsrs	r5, r5, #16
 8019360:	fb02 c505 	mla	r5, r2, r5, ip
 8019364:	b289      	uxth	r1, r1
 8019366:	3301      	adds	r3, #1
 8019368:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801936c:	429e      	cmp	r6, r3
 801936e:	f840 1b04 	str.w	r1, [r0], #4
 8019372:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019376:	dcec      	bgt.n	8019352 <__multadd+0x12>
 8019378:	f1b8 0f00 	cmp.w	r8, #0
 801937c:	d022      	beq.n	80193c4 <__multadd+0x84>
 801937e:	68a3      	ldr	r3, [r4, #8]
 8019380:	42b3      	cmp	r3, r6
 8019382:	dc19      	bgt.n	80193b8 <__multadd+0x78>
 8019384:	6861      	ldr	r1, [r4, #4]
 8019386:	4638      	mov	r0, r7
 8019388:	3101      	adds	r1, #1
 801938a:	f7ff ff77 	bl	801927c <_Balloc>
 801938e:	4605      	mov	r5, r0
 8019390:	b928      	cbnz	r0, 801939e <__multadd+0x5e>
 8019392:	4602      	mov	r2, r0
 8019394:	4b0d      	ldr	r3, [pc, #52]	; (80193cc <__multadd+0x8c>)
 8019396:	480e      	ldr	r0, [pc, #56]	; (80193d0 <__multadd+0x90>)
 8019398:	21b5      	movs	r1, #181	; 0xb5
 801939a:	f000 fdbd 	bl	8019f18 <__assert_func>
 801939e:	6922      	ldr	r2, [r4, #16]
 80193a0:	3202      	adds	r2, #2
 80193a2:	f104 010c 	add.w	r1, r4, #12
 80193a6:	0092      	lsls	r2, r2, #2
 80193a8:	300c      	adds	r0, #12
 80193aa:	f7fc fee9 	bl	8016180 <memcpy>
 80193ae:	4621      	mov	r1, r4
 80193b0:	4638      	mov	r0, r7
 80193b2:	f7ff ffa3 	bl	80192fc <_Bfree>
 80193b6:	462c      	mov	r4, r5
 80193b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80193bc:	3601      	adds	r6, #1
 80193be:	f8c3 8014 	str.w	r8, [r3, #20]
 80193c2:	6126      	str	r6, [r4, #16]
 80193c4:	4620      	mov	r0, r4
 80193c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193ca:	bf00      	nop
 80193cc:	0801c924 	.word	0x0801c924
 80193d0:	0801c9b4 	.word	0x0801c9b4

080193d4 <__s2b>:
 80193d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193d8:	460c      	mov	r4, r1
 80193da:	4615      	mov	r5, r2
 80193dc:	461f      	mov	r7, r3
 80193de:	2209      	movs	r2, #9
 80193e0:	3308      	adds	r3, #8
 80193e2:	4606      	mov	r6, r0
 80193e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80193e8:	2100      	movs	r1, #0
 80193ea:	2201      	movs	r2, #1
 80193ec:	429a      	cmp	r2, r3
 80193ee:	db09      	blt.n	8019404 <__s2b+0x30>
 80193f0:	4630      	mov	r0, r6
 80193f2:	f7ff ff43 	bl	801927c <_Balloc>
 80193f6:	b940      	cbnz	r0, 801940a <__s2b+0x36>
 80193f8:	4602      	mov	r2, r0
 80193fa:	4b19      	ldr	r3, [pc, #100]	; (8019460 <__s2b+0x8c>)
 80193fc:	4819      	ldr	r0, [pc, #100]	; (8019464 <__s2b+0x90>)
 80193fe:	21ce      	movs	r1, #206	; 0xce
 8019400:	f000 fd8a 	bl	8019f18 <__assert_func>
 8019404:	0052      	lsls	r2, r2, #1
 8019406:	3101      	adds	r1, #1
 8019408:	e7f0      	b.n	80193ec <__s2b+0x18>
 801940a:	9b08      	ldr	r3, [sp, #32]
 801940c:	6143      	str	r3, [r0, #20]
 801940e:	2d09      	cmp	r5, #9
 8019410:	f04f 0301 	mov.w	r3, #1
 8019414:	6103      	str	r3, [r0, #16]
 8019416:	dd16      	ble.n	8019446 <__s2b+0x72>
 8019418:	f104 0909 	add.w	r9, r4, #9
 801941c:	46c8      	mov	r8, r9
 801941e:	442c      	add	r4, r5
 8019420:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019424:	4601      	mov	r1, r0
 8019426:	3b30      	subs	r3, #48	; 0x30
 8019428:	220a      	movs	r2, #10
 801942a:	4630      	mov	r0, r6
 801942c:	f7ff ff88 	bl	8019340 <__multadd>
 8019430:	45a0      	cmp	r8, r4
 8019432:	d1f5      	bne.n	8019420 <__s2b+0x4c>
 8019434:	f1a5 0408 	sub.w	r4, r5, #8
 8019438:	444c      	add	r4, r9
 801943a:	1b2d      	subs	r5, r5, r4
 801943c:	1963      	adds	r3, r4, r5
 801943e:	42bb      	cmp	r3, r7
 8019440:	db04      	blt.n	801944c <__s2b+0x78>
 8019442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019446:	340a      	adds	r4, #10
 8019448:	2509      	movs	r5, #9
 801944a:	e7f6      	b.n	801943a <__s2b+0x66>
 801944c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019450:	4601      	mov	r1, r0
 8019452:	3b30      	subs	r3, #48	; 0x30
 8019454:	220a      	movs	r2, #10
 8019456:	4630      	mov	r0, r6
 8019458:	f7ff ff72 	bl	8019340 <__multadd>
 801945c:	e7ee      	b.n	801943c <__s2b+0x68>
 801945e:	bf00      	nop
 8019460:	0801c924 	.word	0x0801c924
 8019464:	0801c9b4 	.word	0x0801c9b4

08019468 <__hi0bits>:
 8019468:	0c03      	lsrs	r3, r0, #16
 801946a:	041b      	lsls	r3, r3, #16
 801946c:	b9d3      	cbnz	r3, 80194a4 <__hi0bits+0x3c>
 801946e:	0400      	lsls	r0, r0, #16
 8019470:	2310      	movs	r3, #16
 8019472:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019476:	bf04      	itt	eq
 8019478:	0200      	lsleq	r0, r0, #8
 801947a:	3308      	addeq	r3, #8
 801947c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019480:	bf04      	itt	eq
 8019482:	0100      	lsleq	r0, r0, #4
 8019484:	3304      	addeq	r3, #4
 8019486:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801948a:	bf04      	itt	eq
 801948c:	0080      	lsleq	r0, r0, #2
 801948e:	3302      	addeq	r3, #2
 8019490:	2800      	cmp	r0, #0
 8019492:	db05      	blt.n	80194a0 <__hi0bits+0x38>
 8019494:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019498:	f103 0301 	add.w	r3, r3, #1
 801949c:	bf08      	it	eq
 801949e:	2320      	moveq	r3, #32
 80194a0:	4618      	mov	r0, r3
 80194a2:	4770      	bx	lr
 80194a4:	2300      	movs	r3, #0
 80194a6:	e7e4      	b.n	8019472 <__hi0bits+0xa>

080194a8 <__lo0bits>:
 80194a8:	6803      	ldr	r3, [r0, #0]
 80194aa:	f013 0207 	ands.w	r2, r3, #7
 80194ae:	4601      	mov	r1, r0
 80194b0:	d00b      	beq.n	80194ca <__lo0bits+0x22>
 80194b2:	07da      	lsls	r2, r3, #31
 80194b4:	d424      	bmi.n	8019500 <__lo0bits+0x58>
 80194b6:	0798      	lsls	r0, r3, #30
 80194b8:	bf49      	itett	mi
 80194ba:	085b      	lsrmi	r3, r3, #1
 80194bc:	089b      	lsrpl	r3, r3, #2
 80194be:	2001      	movmi	r0, #1
 80194c0:	600b      	strmi	r3, [r1, #0]
 80194c2:	bf5c      	itt	pl
 80194c4:	600b      	strpl	r3, [r1, #0]
 80194c6:	2002      	movpl	r0, #2
 80194c8:	4770      	bx	lr
 80194ca:	b298      	uxth	r0, r3
 80194cc:	b9b0      	cbnz	r0, 80194fc <__lo0bits+0x54>
 80194ce:	0c1b      	lsrs	r3, r3, #16
 80194d0:	2010      	movs	r0, #16
 80194d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80194d6:	bf04      	itt	eq
 80194d8:	0a1b      	lsreq	r3, r3, #8
 80194da:	3008      	addeq	r0, #8
 80194dc:	071a      	lsls	r2, r3, #28
 80194de:	bf04      	itt	eq
 80194e0:	091b      	lsreq	r3, r3, #4
 80194e2:	3004      	addeq	r0, #4
 80194e4:	079a      	lsls	r2, r3, #30
 80194e6:	bf04      	itt	eq
 80194e8:	089b      	lsreq	r3, r3, #2
 80194ea:	3002      	addeq	r0, #2
 80194ec:	07da      	lsls	r2, r3, #31
 80194ee:	d403      	bmi.n	80194f8 <__lo0bits+0x50>
 80194f0:	085b      	lsrs	r3, r3, #1
 80194f2:	f100 0001 	add.w	r0, r0, #1
 80194f6:	d005      	beq.n	8019504 <__lo0bits+0x5c>
 80194f8:	600b      	str	r3, [r1, #0]
 80194fa:	4770      	bx	lr
 80194fc:	4610      	mov	r0, r2
 80194fe:	e7e8      	b.n	80194d2 <__lo0bits+0x2a>
 8019500:	2000      	movs	r0, #0
 8019502:	4770      	bx	lr
 8019504:	2020      	movs	r0, #32
 8019506:	4770      	bx	lr

08019508 <__i2b>:
 8019508:	b510      	push	{r4, lr}
 801950a:	460c      	mov	r4, r1
 801950c:	2101      	movs	r1, #1
 801950e:	f7ff feb5 	bl	801927c <_Balloc>
 8019512:	4602      	mov	r2, r0
 8019514:	b928      	cbnz	r0, 8019522 <__i2b+0x1a>
 8019516:	4b05      	ldr	r3, [pc, #20]	; (801952c <__i2b+0x24>)
 8019518:	4805      	ldr	r0, [pc, #20]	; (8019530 <__i2b+0x28>)
 801951a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801951e:	f000 fcfb 	bl	8019f18 <__assert_func>
 8019522:	2301      	movs	r3, #1
 8019524:	6144      	str	r4, [r0, #20]
 8019526:	6103      	str	r3, [r0, #16]
 8019528:	bd10      	pop	{r4, pc}
 801952a:	bf00      	nop
 801952c:	0801c924 	.word	0x0801c924
 8019530:	0801c9b4 	.word	0x0801c9b4

08019534 <__multiply>:
 8019534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019538:	4614      	mov	r4, r2
 801953a:	690a      	ldr	r2, [r1, #16]
 801953c:	6923      	ldr	r3, [r4, #16]
 801953e:	429a      	cmp	r2, r3
 8019540:	bfb8      	it	lt
 8019542:	460b      	movlt	r3, r1
 8019544:	460d      	mov	r5, r1
 8019546:	bfbc      	itt	lt
 8019548:	4625      	movlt	r5, r4
 801954a:	461c      	movlt	r4, r3
 801954c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019550:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019554:	68ab      	ldr	r3, [r5, #8]
 8019556:	6869      	ldr	r1, [r5, #4]
 8019558:	eb0a 0709 	add.w	r7, sl, r9
 801955c:	42bb      	cmp	r3, r7
 801955e:	b085      	sub	sp, #20
 8019560:	bfb8      	it	lt
 8019562:	3101      	addlt	r1, #1
 8019564:	f7ff fe8a 	bl	801927c <_Balloc>
 8019568:	b930      	cbnz	r0, 8019578 <__multiply+0x44>
 801956a:	4602      	mov	r2, r0
 801956c:	4b42      	ldr	r3, [pc, #264]	; (8019678 <__multiply+0x144>)
 801956e:	4843      	ldr	r0, [pc, #268]	; (801967c <__multiply+0x148>)
 8019570:	f240 115d 	movw	r1, #349	; 0x15d
 8019574:	f000 fcd0 	bl	8019f18 <__assert_func>
 8019578:	f100 0614 	add.w	r6, r0, #20
 801957c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019580:	4633      	mov	r3, r6
 8019582:	2200      	movs	r2, #0
 8019584:	4543      	cmp	r3, r8
 8019586:	d31e      	bcc.n	80195c6 <__multiply+0x92>
 8019588:	f105 0c14 	add.w	ip, r5, #20
 801958c:	f104 0314 	add.w	r3, r4, #20
 8019590:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019594:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019598:	9202      	str	r2, [sp, #8]
 801959a:	ebac 0205 	sub.w	r2, ip, r5
 801959e:	3a15      	subs	r2, #21
 80195a0:	f022 0203 	bic.w	r2, r2, #3
 80195a4:	3204      	adds	r2, #4
 80195a6:	f105 0115 	add.w	r1, r5, #21
 80195aa:	458c      	cmp	ip, r1
 80195ac:	bf38      	it	cc
 80195ae:	2204      	movcc	r2, #4
 80195b0:	9201      	str	r2, [sp, #4]
 80195b2:	9a02      	ldr	r2, [sp, #8]
 80195b4:	9303      	str	r3, [sp, #12]
 80195b6:	429a      	cmp	r2, r3
 80195b8:	d808      	bhi.n	80195cc <__multiply+0x98>
 80195ba:	2f00      	cmp	r7, #0
 80195bc:	dc55      	bgt.n	801966a <__multiply+0x136>
 80195be:	6107      	str	r7, [r0, #16]
 80195c0:	b005      	add	sp, #20
 80195c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195c6:	f843 2b04 	str.w	r2, [r3], #4
 80195ca:	e7db      	b.n	8019584 <__multiply+0x50>
 80195cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80195d0:	f1ba 0f00 	cmp.w	sl, #0
 80195d4:	d020      	beq.n	8019618 <__multiply+0xe4>
 80195d6:	f105 0e14 	add.w	lr, r5, #20
 80195da:	46b1      	mov	r9, r6
 80195dc:	2200      	movs	r2, #0
 80195de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80195e2:	f8d9 b000 	ldr.w	fp, [r9]
 80195e6:	b2a1      	uxth	r1, r4
 80195e8:	fa1f fb8b 	uxth.w	fp, fp
 80195ec:	fb0a b101 	mla	r1, sl, r1, fp
 80195f0:	4411      	add	r1, r2
 80195f2:	f8d9 2000 	ldr.w	r2, [r9]
 80195f6:	0c24      	lsrs	r4, r4, #16
 80195f8:	0c12      	lsrs	r2, r2, #16
 80195fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80195fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019602:	b289      	uxth	r1, r1
 8019604:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019608:	45f4      	cmp	ip, lr
 801960a:	f849 1b04 	str.w	r1, [r9], #4
 801960e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019612:	d8e4      	bhi.n	80195de <__multiply+0xaa>
 8019614:	9901      	ldr	r1, [sp, #4]
 8019616:	5072      	str	r2, [r6, r1]
 8019618:	9a03      	ldr	r2, [sp, #12]
 801961a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801961e:	3304      	adds	r3, #4
 8019620:	f1b9 0f00 	cmp.w	r9, #0
 8019624:	d01f      	beq.n	8019666 <__multiply+0x132>
 8019626:	6834      	ldr	r4, [r6, #0]
 8019628:	f105 0114 	add.w	r1, r5, #20
 801962c:	46b6      	mov	lr, r6
 801962e:	f04f 0a00 	mov.w	sl, #0
 8019632:	880a      	ldrh	r2, [r1, #0]
 8019634:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019638:	fb09 b202 	mla	r2, r9, r2, fp
 801963c:	4492      	add	sl, r2
 801963e:	b2a4      	uxth	r4, r4
 8019640:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019644:	f84e 4b04 	str.w	r4, [lr], #4
 8019648:	f851 4b04 	ldr.w	r4, [r1], #4
 801964c:	f8be 2000 	ldrh.w	r2, [lr]
 8019650:	0c24      	lsrs	r4, r4, #16
 8019652:	fb09 2404 	mla	r4, r9, r4, r2
 8019656:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801965a:	458c      	cmp	ip, r1
 801965c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019660:	d8e7      	bhi.n	8019632 <__multiply+0xfe>
 8019662:	9a01      	ldr	r2, [sp, #4]
 8019664:	50b4      	str	r4, [r6, r2]
 8019666:	3604      	adds	r6, #4
 8019668:	e7a3      	b.n	80195b2 <__multiply+0x7e>
 801966a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801966e:	2b00      	cmp	r3, #0
 8019670:	d1a5      	bne.n	80195be <__multiply+0x8a>
 8019672:	3f01      	subs	r7, #1
 8019674:	e7a1      	b.n	80195ba <__multiply+0x86>
 8019676:	bf00      	nop
 8019678:	0801c924 	.word	0x0801c924
 801967c:	0801c9b4 	.word	0x0801c9b4

08019680 <__pow5mult>:
 8019680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019684:	4615      	mov	r5, r2
 8019686:	f012 0203 	ands.w	r2, r2, #3
 801968a:	4606      	mov	r6, r0
 801968c:	460f      	mov	r7, r1
 801968e:	d007      	beq.n	80196a0 <__pow5mult+0x20>
 8019690:	4c25      	ldr	r4, [pc, #148]	; (8019728 <__pow5mult+0xa8>)
 8019692:	3a01      	subs	r2, #1
 8019694:	2300      	movs	r3, #0
 8019696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801969a:	f7ff fe51 	bl	8019340 <__multadd>
 801969e:	4607      	mov	r7, r0
 80196a0:	10ad      	asrs	r5, r5, #2
 80196a2:	d03d      	beq.n	8019720 <__pow5mult+0xa0>
 80196a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80196a6:	b97c      	cbnz	r4, 80196c8 <__pow5mult+0x48>
 80196a8:	2010      	movs	r0, #16
 80196aa:	f7fc fd59 	bl	8016160 <malloc>
 80196ae:	4602      	mov	r2, r0
 80196b0:	6270      	str	r0, [r6, #36]	; 0x24
 80196b2:	b928      	cbnz	r0, 80196c0 <__pow5mult+0x40>
 80196b4:	4b1d      	ldr	r3, [pc, #116]	; (801972c <__pow5mult+0xac>)
 80196b6:	481e      	ldr	r0, [pc, #120]	; (8019730 <__pow5mult+0xb0>)
 80196b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80196bc:	f000 fc2c 	bl	8019f18 <__assert_func>
 80196c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80196c4:	6004      	str	r4, [r0, #0]
 80196c6:	60c4      	str	r4, [r0, #12]
 80196c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80196cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80196d0:	b94c      	cbnz	r4, 80196e6 <__pow5mult+0x66>
 80196d2:	f240 2171 	movw	r1, #625	; 0x271
 80196d6:	4630      	mov	r0, r6
 80196d8:	f7ff ff16 	bl	8019508 <__i2b>
 80196dc:	2300      	movs	r3, #0
 80196de:	f8c8 0008 	str.w	r0, [r8, #8]
 80196e2:	4604      	mov	r4, r0
 80196e4:	6003      	str	r3, [r0, #0]
 80196e6:	f04f 0900 	mov.w	r9, #0
 80196ea:	07eb      	lsls	r3, r5, #31
 80196ec:	d50a      	bpl.n	8019704 <__pow5mult+0x84>
 80196ee:	4639      	mov	r1, r7
 80196f0:	4622      	mov	r2, r4
 80196f2:	4630      	mov	r0, r6
 80196f4:	f7ff ff1e 	bl	8019534 <__multiply>
 80196f8:	4639      	mov	r1, r7
 80196fa:	4680      	mov	r8, r0
 80196fc:	4630      	mov	r0, r6
 80196fe:	f7ff fdfd 	bl	80192fc <_Bfree>
 8019702:	4647      	mov	r7, r8
 8019704:	106d      	asrs	r5, r5, #1
 8019706:	d00b      	beq.n	8019720 <__pow5mult+0xa0>
 8019708:	6820      	ldr	r0, [r4, #0]
 801970a:	b938      	cbnz	r0, 801971c <__pow5mult+0x9c>
 801970c:	4622      	mov	r2, r4
 801970e:	4621      	mov	r1, r4
 8019710:	4630      	mov	r0, r6
 8019712:	f7ff ff0f 	bl	8019534 <__multiply>
 8019716:	6020      	str	r0, [r4, #0]
 8019718:	f8c0 9000 	str.w	r9, [r0]
 801971c:	4604      	mov	r4, r0
 801971e:	e7e4      	b.n	80196ea <__pow5mult+0x6a>
 8019720:	4638      	mov	r0, r7
 8019722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019726:	bf00      	nop
 8019728:	0801cb08 	.word	0x0801cb08
 801972c:	0801c8ae 	.word	0x0801c8ae
 8019730:	0801c9b4 	.word	0x0801c9b4

08019734 <__lshift>:
 8019734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019738:	460c      	mov	r4, r1
 801973a:	6849      	ldr	r1, [r1, #4]
 801973c:	6923      	ldr	r3, [r4, #16]
 801973e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019742:	68a3      	ldr	r3, [r4, #8]
 8019744:	4607      	mov	r7, r0
 8019746:	4691      	mov	r9, r2
 8019748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801974c:	f108 0601 	add.w	r6, r8, #1
 8019750:	42b3      	cmp	r3, r6
 8019752:	db0b      	blt.n	801976c <__lshift+0x38>
 8019754:	4638      	mov	r0, r7
 8019756:	f7ff fd91 	bl	801927c <_Balloc>
 801975a:	4605      	mov	r5, r0
 801975c:	b948      	cbnz	r0, 8019772 <__lshift+0x3e>
 801975e:	4602      	mov	r2, r0
 8019760:	4b28      	ldr	r3, [pc, #160]	; (8019804 <__lshift+0xd0>)
 8019762:	4829      	ldr	r0, [pc, #164]	; (8019808 <__lshift+0xd4>)
 8019764:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019768:	f000 fbd6 	bl	8019f18 <__assert_func>
 801976c:	3101      	adds	r1, #1
 801976e:	005b      	lsls	r3, r3, #1
 8019770:	e7ee      	b.n	8019750 <__lshift+0x1c>
 8019772:	2300      	movs	r3, #0
 8019774:	f100 0114 	add.w	r1, r0, #20
 8019778:	f100 0210 	add.w	r2, r0, #16
 801977c:	4618      	mov	r0, r3
 801977e:	4553      	cmp	r3, sl
 8019780:	db33      	blt.n	80197ea <__lshift+0xb6>
 8019782:	6920      	ldr	r0, [r4, #16]
 8019784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019788:	f104 0314 	add.w	r3, r4, #20
 801978c:	f019 091f 	ands.w	r9, r9, #31
 8019790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019794:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019798:	d02b      	beq.n	80197f2 <__lshift+0xbe>
 801979a:	f1c9 0e20 	rsb	lr, r9, #32
 801979e:	468a      	mov	sl, r1
 80197a0:	2200      	movs	r2, #0
 80197a2:	6818      	ldr	r0, [r3, #0]
 80197a4:	fa00 f009 	lsl.w	r0, r0, r9
 80197a8:	4302      	orrs	r2, r0
 80197aa:	f84a 2b04 	str.w	r2, [sl], #4
 80197ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80197b2:	459c      	cmp	ip, r3
 80197b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80197b8:	d8f3      	bhi.n	80197a2 <__lshift+0x6e>
 80197ba:	ebac 0304 	sub.w	r3, ip, r4
 80197be:	3b15      	subs	r3, #21
 80197c0:	f023 0303 	bic.w	r3, r3, #3
 80197c4:	3304      	adds	r3, #4
 80197c6:	f104 0015 	add.w	r0, r4, #21
 80197ca:	4584      	cmp	ip, r0
 80197cc:	bf38      	it	cc
 80197ce:	2304      	movcc	r3, #4
 80197d0:	50ca      	str	r2, [r1, r3]
 80197d2:	b10a      	cbz	r2, 80197d8 <__lshift+0xa4>
 80197d4:	f108 0602 	add.w	r6, r8, #2
 80197d8:	3e01      	subs	r6, #1
 80197da:	4638      	mov	r0, r7
 80197dc:	612e      	str	r6, [r5, #16]
 80197de:	4621      	mov	r1, r4
 80197e0:	f7ff fd8c 	bl	80192fc <_Bfree>
 80197e4:	4628      	mov	r0, r5
 80197e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80197ee:	3301      	adds	r3, #1
 80197f0:	e7c5      	b.n	801977e <__lshift+0x4a>
 80197f2:	3904      	subs	r1, #4
 80197f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80197f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80197fc:	459c      	cmp	ip, r3
 80197fe:	d8f9      	bhi.n	80197f4 <__lshift+0xc0>
 8019800:	e7ea      	b.n	80197d8 <__lshift+0xa4>
 8019802:	bf00      	nop
 8019804:	0801c924 	.word	0x0801c924
 8019808:	0801c9b4 	.word	0x0801c9b4

0801980c <__mcmp>:
 801980c:	b530      	push	{r4, r5, lr}
 801980e:	6902      	ldr	r2, [r0, #16]
 8019810:	690c      	ldr	r4, [r1, #16]
 8019812:	1b12      	subs	r2, r2, r4
 8019814:	d10e      	bne.n	8019834 <__mcmp+0x28>
 8019816:	f100 0314 	add.w	r3, r0, #20
 801981a:	3114      	adds	r1, #20
 801981c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801982c:	42a5      	cmp	r5, r4
 801982e:	d003      	beq.n	8019838 <__mcmp+0x2c>
 8019830:	d305      	bcc.n	801983e <__mcmp+0x32>
 8019832:	2201      	movs	r2, #1
 8019834:	4610      	mov	r0, r2
 8019836:	bd30      	pop	{r4, r5, pc}
 8019838:	4283      	cmp	r3, r0
 801983a:	d3f3      	bcc.n	8019824 <__mcmp+0x18>
 801983c:	e7fa      	b.n	8019834 <__mcmp+0x28>
 801983e:	f04f 32ff 	mov.w	r2, #4294967295
 8019842:	e7f7      	b.n	8019834 <__mcmp+0x28>

08019844 <__mdiff>:
 8019844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019848:	460c      	mov	r4, r1
 801984a:	4606      	mov	r6, r0
 801984c:	4611      	mov	r1, r2
 801984e:	4620      	mov	r0, r4
 8019850:	4617      	mov	r7, r2
 8019852:	f7ff ffdb 	bl	801980c <__mcmp>
 8019856:	1e05      	subs	r5, r0, #0
 8019858:	d110      	bne.n	801987c <__mdiff+0x38>
 801985a:	4629      	mov	r1, r5
 801985c:	4630      	mov	r0, r6
 801985e:	f7ff fd0d 	bl	801927c <_Balloc>
 8019862:	b930      	cbnz	r0, 8019872 <__mdiff+0x2e>
 8019864:	4b39      	ldr	r3, [pc, #228]	; (801994c <__mdiff+0x108>)
 8019866:	4602      	mov	r2, r0
 8019868:	f240 2132 	movw	r1, #562	; 0x232
 801986c:	4838      	ldr	r0, [pc, #224]	; (8019950 <__mdiff+0x10c>)
 801986e:	f000 fb53 	bl	8019f18 <__assert_func>
 8019872:	2301      	movs	r3, #1
 8019874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801987c:	bfa4      	itt	ge
 801987e:	463b      	movge	r3, r7
 8019880:	4627      	movge	r7, r4
 8019882:	4630      	mov	r0, r6
 8019884:	6879      	ldr	r1, [r7, #4]
 8019886:	bfa6      	itte	ge
 8019888:	461c      	movge	r4, r3
 801988a:	2500      	movge	r5, #0
 801988c:	2501      	movlt	r5, #1
 801988e:	f7ff fcf5 	bl	801927c <_Balloc>
 8019892:	b920      	cbnz	r0, 801989e <__mdiff+0x5a>
 8019894:	4b2d      	ldr	r3, [pc, #180]	; (801994c <__mdiff+0x108>)
 8019896:	4602      	mov	r2, r0
 8019898:	f44f 7110 	mov.w	r1, #576	; 0x240
 801989c:	e7e6      	b.n	801986c <__mdiff+0x28>
 801989e:	693e      	ldr	r6, [r7, #16]
 80198a0:	60c5      	str	r5, [r0, #12]
 80198a2:	6925      	ldr	r5, [r4, #16]
 80198a4:	f107 0114 	add.w	r1, r7, #20
 80198a8:	f104 0914 	add.w	r9, r4, #20
 80198ac:	f100 0e14 	add.w	lr, r0, #20
 80198b0:	f107 0210 	add.w	r2, r7, #16
 80198b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80198b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80198bc:	46f2      	mov	sl, lr
 80198be:	2700      	movs	r7, #0
 80198c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80198c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80198c8:	fa1f f883 	uxth.w	r8, r3
 80198cc:	fa17 f78b 	uxtah	r7, r7, fp
 80198d0:	0c1b      	lsrs	r3, r3, #16
 80198d2:	eba7 0808 	sub.w	r8, r7, r8
 80198d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80198da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80198de:	fa1f f888 	uxth.w	r8, r8
 80198e2:	141f      	asrs	r7, r3, #16
 80198e4:	454d      	cmp	r5, r9
 80198e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80198ea:	f84a 3b04 	str.w	r3, [sl], #4
 80198ee:	d8e7      	bhi.n	80198c0 <__mdiff+0x7c>
 80198f0:	1b2b      	subs	r3, r5, r4
 80198f2:	3b15      	subs	r3, #21
 80198f4:	f023 0303 	bic.w	r3, r3, #3
 80198f8:	3304      	adds	r3, #4
 80198fa:	3415      	adds	r4, #21
 80198fc:	42a5      	cmp	r5, r4
 80198fe:	bf38      	it	cc
 8019900:	2304      	movcc	r3, #4
 8019902:	4419      	add	r1, r3
 8019904:	4473      	add	r3, lr
 8019906:	469e      	mov	lr, r3
 8019908:	460d      	mov	r5, r1
 801990a:	4565      	cmp	r5, ip
 801990c:	d30e      	bcc.n	801992c <__mdiff+0xe8>
 801990e:	f10c 0203 	add.w	r2, ip, #3
 8019912:	1a52      	subs	r2, r2, r1
 8019914:	f022 0203 	bic.w	r2, r2, #3
 8019918:	3903      	subs	r1, #3
 801991a:	458c      	cmp	ip, r1
 801991c:	bf38      	it	cc
 801991e:	2200      	movcc	r2, #0
 8019920:	441a      	add	r2, r3
 8019922:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019926:	b17b      	cbz	r3, 8019948 <__mdiff+0x104>
 8019928:	6106      	str	r6, [r0, #16]
 801992a:	e7a5      	b.n	8019878 <__mdiff+0x34>
 801992c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019930:	fa17 f488 	uxtah	r4, r7, r8
 8019934:	1422      	asrs	r2, r4, #16
 8019936:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801993a:	b2a4      	uxth	r4, r4
 801993c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019940:	f84e 4b04 	str.w	r4, [lr], #4
 8019944:	1417      	asrs	r7, r2, #16
 8019946:	e7e0      	b.n	801990a <__mdiff+0xc6>
 8019948:	3e01      	subs	r6, #1
 801994a:	e7ea      	b.n	8019922 <__mdiff+0xde>
 801994c:	0801c924 	.word	0x0801c924
 8019950:	0801c9b4 	.word	0x0801c9b4

08019954 <__ulp>:
 8019954:	b082      	sub	sp, #8
 8019956:	ed8d 0b00 	vstr	d0, [sp]
 801995a:	9b01      	ldr	r3, [sp, #4]
 801995c:	4912      	ldr	r1, [pc, #72]	; (80199a8 <__ulp+0x54>)
 801995e:	4019      	ands	r1, r3
 8019960:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019964:	2900      	cmp	r1, #0
 8019966:	dd05      	ble.n	8019974 <__ulp+0x20>
 8019968:	2200      	movs	r2, #0
 801996a:	460b      	mov	r3, r1
 801996c:	ec43 2b10 	vmov	d0, r2, r3
 8019970:	b002      	add	sp, #8
 8019972:	4770      	bx	lr
 8019974:	4249      	negs	r1, r1
 8019976:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801997a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801997e:	f04f 0200 	mov.w	r2, #0
 8019982:	f04f 0300 	mov.w	r3, #0
 8019986:	da04      	bge.n	8019992 <__ulp+0x3e>
 8019988:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801998c:	fa41 f300 	asr.w	r3, r1, r0
 8019990:	e7ec      	b.n	801996c <__ulp+0x18>
 8019992:	f1a0 0114 	sub.w	r1, r0, #20
 8019996:	291e      	cmp	r1, #30
 8019998:	bfda      	itte	le
 801999a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801999e:	fa20 f101 	lsrle.w	r1, r0, r1
 80199a2:	2101      	movgt	r1, #1
 80199a4:	460a      	mov	r2, r1
 80199a6:	e7e1      	b.n	801996c <__ulp+0x18>
 80199a8:	7ff00000 	.word	0x7ff00000

080199ac <__b2d>:
 80199ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ae:	6905      	ldr	r5, [r0, #16]
 80199b0:	f100 0714 	add.w	r7, r0, #20
 80199b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80199b8:	1f2e      	subs	r6, r5, #4
 80199ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80199be:	4620      	mov	r0, r4
 80199c0:	f7ff fd52 	bl	8019468 <__hi0bits>
 80199c4:	f1c0 0320 	rsb	r3, r0, #32
 80199c8:	280a      	cmp	r0, #10
 80199ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019a48 <__b2d+0x9c>
 80199ce:	600b      	str	r3, [r1, #0]
 80199d0:	dc14      	bgt.n	80199fc <__b2d+0x50>
 80199d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80199d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80199da:	42b7      	cmp	r7, r6
 80199dc:	ea41 030c 	orr.w	r3, r1, ip
 80199e0:	bf34      	ite	cc
 80199e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80199e6:	2100      	movcs	r1, #0
 80199e8:	3015      	adds	r0, #21
 80199ea:	fa04 f000 	lsl.w	r0, r4, r0
 80199ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80199f2:	ea40 0201 	orr.w	r2, r0, r1
 80199f6:	ec43 2b10 	vmov	d0, r2, r3
 80199fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199fc:	42b7      	cmp	r7, r6
 80199fe:	bf3a      	itte	cc
 8019a00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019a04:	f1a5 0608 	subcc.w	r6, r5, #8
 8019a08:	2100      	movcs	r1, #0
 8019a0a:	380b      	subs	r0, #11
 8019a0c:	d017      	beq.n	8019a3e <__b2d+0x92>
 8019a0e:	f1c0 0c20 	rsb	ip, r0, #32
 8019a12:	fa04 f500 	lsl.w	r5, r4, r0
 8019a16:	42be      	cmp	r6, r7
 8019a18:	fa21 f40c 	lsr.w	r4, r1, ip
 8019a1c:	ea45 0504 	orr.w	r5, r5, r4
 8019a20:	bf8c      	ite	hi
 8019a22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019a26:	2400      	movls	r4, #0
 8019a28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019a2c:	fa01 f000 	lsl.w	r0, r1, r0
 8019a30:	fa24 f40c 	lsr.w	r4, r4, ip
 8019a34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019a38:	ea40 0204 	orr.w	r2, r0, r4
 8019a3c:	e7db      	b.n	80199f6 <__b2d+0x4a>
 8019a3e:	ea44 030c 	orr.w	r3, r4, ip
 8019a42:	460a      	mov	r2, r1
 8019a44:	e7d7      	b.n	80199f6 <__b2d+0x4a>
 8019a46:	bf00      	nop
 8019a48:	3ff00000 	.word	0x3ff00000

08019a4c <__d2b>:
 8019a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019a50:	4689      	mov	r9, r1
 8019a52:	2101      	movs	r1, #1
 8019a54:	ec57 6b10 	vmov	r6, r7, d0
 8019a58:	4690      	mov	r8, r2
 8019a5a:	f7ff fc0f 	bl	801927c <_Balloc>
 8019a5e:	4604      	mov	r4, r0
 8019a60:	b930      	cbnz	r0, 8019a70 <__d2b+0x24>
 8019a62:	4602      	mov	r2, r0
 8019a64:	4b25      	ldr	r3, [pc, #148]	; (8019afc <__d2b+0xb0>)
 8019a66:	4826      	ldr	r0, [pc, #152]	; (8019b00 <__d2b+0xb4>)
 8019a68:	f240 310a 	movw	r1, #778	; 0x30a
 8019a6c:	f000 fa54 	bl	8019f18 <__assert_func>
 8019a70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019a74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019a78:	bb35      	cbnz	r5, 8019ac8 <__d2b+0x7c>
 8019a7a:	2e00      	cmp	r6, #0
 8019a7c:	9301      	str	r3, [sp, #4]
 8019a7e:	d028      	beq.n	8019ad2 <__d2b+0x86>
 8019a80:	4668      	mov	r0, sp
 8019a82:	9600      	str	r6, [sp, #0]
 8019a84:	f7ff fd10 	bl	80194a8 <__lo0bits>
 8019a88:	9900      	ldr	r1, [sp, #0]
 8019a8a:	b300      	cbz	r0, 8019ace <__d2b+0x82>
 8019a8c:	9a01      	ldr	r2, [sp, #4]
 8019a8e:	f1c0 0320 	rsb	r3, r0, #32
 8019a92:	fa02 f303 	lsl.w	r3, r2, r3
 8019a96:	430b      	orrs	r3, r1
 8019a98:	40c2      	lsrs	r2, r0
 8019a9a:	6163      	str	r3, [r4, #20]
 8019a9c:	9201      	str	r2, [sp, #4]
 8019a9e:	9b01      	ldr	r3, [sp, #4]
 8019aa0:	61a3      	str	r3, [r4, #24]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	bf14      	ite	ne
 8019aa6:	2202      	movne	r2, #2
 8019aa8:	2201      	moveq	r2, #1
 8019aaa:	6122      	str	r2, [r4, #16]
 8019aac:	b1d5      	cbz	r5, 8019ae4 <__d2b+0x98>
 8019aae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019ab2:	4405      	add	r5, r0
 8019ab4:	f8c9 5000 	str.w	r5, [r9]
 8019ab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019abc:	f8c8 0000 	str.w	r0, [r8]
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	b003      	add	sp, #12
 8019ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019acc:	e7d5      	b.n	8019a7a <__d2b+0x2e>
 8019ace:	6161      	str	r1, [r4, #20]
 8019ad0:	e7e5      	b.n	8019a9e <__d2b+0x52>
 8019ad2:	a801      	add	r0, sp, #4
 8019ad4:	f7ff fce8 	bl	80194a8 <__lo0bits>
 8019ad8:	9b01      	ldr	r3, [sp, #4]
 8019ada:	6163      	str	r3, [r4, #20]
 8019adc:	2201      	movs	r2, #1
 8019ade:	6122      	str	r2, [r4, #16]
 8019ae0:	3020      	adds	r0, #32
 8019ae2:	e7e3      	b.n	8019aac <__d2b+0x60>
 8019ae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019ae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019aec:	f8c9 0000 	str.w	r0, [r9]
 8019af0:	6918      	ldr	r0, [r3, #16]
 8019af2:	f7ff fcb9 	bl	8019468 <__hi0bits>
 8019af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019afa:	e7df      	b.n	8019abc <__d2b+0x70>
 8019afc:	0801c924 	.word	0x0801c924
 8019b00:	0801c9b4 	.word	0x0801c9b4

08019b04 <__ratio>:
 8019b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b08:	4688      	mov	r8, r1
 8019b0a:	4669      	mov	r1, sp
 8019b0c:	4681      	mov	r9, r0
 8019b0e:	f7ff ff4d 	bl	80199ac <__b2d>
 8019b12:	a901      	add	r1, sp, #4
 8019b14:	4640      	mov	r0, r8
 8019b16:	ec55 4b10 	vmov	r4, r5, d0
 8019b1a:	f7ff ff47 	bl	80199ac <__b2d>
 8019b1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019b26:	eba3 0c02 	sub.w	ip, r3, r2
 8019b2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019b2e:	1a9b      	subs	r3, r3, r2
 8019b30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019b34:	ec51 0b10 	vmov	r0, r1, d0
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	bfd6      	itet	le
 8019b3c:	460a      	movle	r2, r1
 8019b3e:	462a      	movgt	r2, r5
 8019b40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019b44:	468b      	mov	fp, r1
 8019b46:	462f      	mov	r7, r5
 8019b48:	bfd4      	ite	le
 8019b4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019b4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019b52:	4620      	mov	r0, r4
 8019b54:	ee10 2a10 	vmov	r2, s0
 8019b58:	465b      	mov	r3, fp
 8019b5a:	4639      	mov	r1, r7
 8019b5c:	f7e6 fe76 	bl	800084c <__aeabi_ddiv>
 8019b60:	ec41 0b10 	vmov	d0, r0, r1
 8019b64:	b003      	add	sp, #12
 8019b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b6a <__copybits>:
 8019b6a:	3901      	subs	r1, #1
 8019b6c:	b570      	push	{r4, r5, r6, lr}
 8019b6e:	1149      	asrs	r1, r1, #5
 8019b70:	6914      	ldr	r4, [r2, #16]
 8019b72:	3101      	adds	r1, #1
 8019b74:	f102 0314 	add.w	r3, r2, #20
 8019b78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019b7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019b80:	1f05      	subs	r5, r0, #4
 8019b82:	42a3      	cmp	r3, r4
 8019b84:	d30c      	bcc.n	8019ba0 <__copybits+0x36>
 8019b86:	1aa3      	subs	r3, r4, r2
 8019b88:	3b11      	subs	r3, #17
 8019b8a:	f023 0303 	bic.w	r3, r3, #3
 8019b8e:	3211      	adds	r2, #17
 8019b90:	42a2      	cmp	r2, r4
 8019b92:	bf88      	it	hi
 8019b94:	2300      	movhi	r3, #0
 8019b96:	4418      	add	r0, r3
 8019b98:	2300      	movs	r3, #0
 8019b9a:	4288      	cmp	r0, r1
 8019b9c:	d305      	bcc.n	8019baa <__copybits+0x40>
 8019b9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ba0:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ba4:	f845 6f04 	str.w	r6, [r5, #4]!
 8019ba8:	e7eb      	b.n	8019b82 <__copybits+0x18>
 8019baa:	f840 3b04 	str.w	r3, [r0], #4
 8019bae:	e7f4      	b.n	8019b9a <__copybits+0x30>

08019bb0 <__any_on>:
 8019bb0:	f100 0214 	add.w	r2, r0, #20
 8019bb4:	6900      	ldr	r0, [r0, #16]
 8019bb6:	114b      	asrs	r3, r1, #5
 8019bb8:	4298      	cmp	r0, r3
 8019bba:	b510      	push	{r4, lr}
 8019bbc:	db11      	blt.n	8019be2 <__any_on+0x32>
 8019bbe:	dd0a      	ble.n	8019bd6 <__any_on+0x26>
 8019bc0:	f011 011f 	ands.w	r1, r1, #31
 8019bc4:	d007      	beq.n	8019bd6 <__any_on+0x26>
 8019bc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019bca:	fa24 f001 	lsr.w	r0, r4, r1
 8019bce:	fa00 f101 	lsl.w	r1, r0, r1
 8019bd2:	428c      	cmp	r4, r1
 8019bd4:	d10b      	bne.n	8019bee <__any_on+0x3e>
 8019bd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019bda:	4293      	cmp	r3, r2
 8019bdc:	d803      	bhi.n	8019be6 <__any_on+0x36>
 8019bde:	2000      	movs	r0, #0
 8019be0:	bd10      	pop	{r4, pc}
 8019be2:	4603      	mov	r3, r0
 8019be4:	e7f7      	b.n	8019bd6 <__any_on+0x26>
 8019be6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019bea:	2900      	cmp	r1, #0
 8019bec:	d0f5      	beq.n	8019bda <__any_on+0x2a>
 8019bee:	2001      	movs	r0, #1
 8019bf0:	e7f6      	b.n	8019be0 <__any_on+0x30>

08019bf2 <_calloc_r>:
 8019bf2:	b513      	push	{r0, r1, r4, lr}
 8019bf4:	434a      	muls	r2, r1
 8019bf6:	4611      	mov	r1, r2
 8019bf8:	9201      	str	r2, [sp, #4]
 8019bfa:	f7fc fb41 	bl	8016280 <_malloc_r>
 8019bfe:	4604      	mov	r4, r0
 8019c00:	b118      	cbz	r0, 8019c0a <_calloc_r+0x18>
 8019c02:	9a01      	ldr	r2, [sp, #4]
 8019c04:	2100      	movs	r1, #0
 8019c06:	f7fc fae3 	bl	80161d0 <memset>
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	b002      	add	sp, #8
 8019c0e:	bd10      	pop	{r4, pc}

08019c10 <__ssputs_r>:
 8019c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c14:	688e      	ldr	r6, [r1, #8]
 8019c16:	429e      	cmp	r6, r3
 8019c18:	4682      	mov	sl, r0
 8019c1a:	460c      	mov	r4, r1
 8019c1c:	4690      	mov	r8, r2
 8019c1e:	461f      	mov	r7, r3
 8019c20:	d838      	bhi.n	8019c94 <__ssputs_r+0x84>
 8019c22:	898a      	ldrh	r2, [r1, #12]
 8019c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c28:	d032      	beq.n	8019c90 <__ssputs_r+0x80>
 8019c2a:	6825      	ldr	r5, [r4, #0]
 8019c2c:	6909      	ldr	r1, [r1, #16]
 8019c2e:	eba5 0901 	sub.w	r9, r5, r1
 8019c32:	6965      	ldr	r5, [r4, #20]
 8019c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	444b      	add	r3, r9
 8019c40:	106d      	asrs	r5, r5, #1
 8019c42:	429d      	cmp	r5, r3
 8019c44:	bf38      	it	cc
 8019c46:	461d      	movcc	r5, r3
 8019c48:	0553      	lsls	r3, r2, #21
 8019c4a:	d531      	bpl.n	8019cb0 <__ssputs_r+0xa0>
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	f7fc fb17 	bl	8016280 <_malloc_r>
 8019c52:	4606      	mov	r6, r0
 8019c54:	b950      	cbnz	r0, 8019c6c <__ssputs_r+0x5c>
 8019c56:	230c      	movs	r3, #12
 8019c58:	f8ca 3000 	str.w	r3, [sl]
 8019c5c:	89a3      	ldrh	r3, [r4, #12]
 8019c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c62:	81a3      	strh	r3, [r4, #12]
 8019c64:	f04f 30ff 	mov.w	r0, #4294967295
 8019c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c6c:	6921      	ldr	r1, [r4, #16]
 8019c6e:	464a      	mov	r2, r9
 8019c70:	f7fc fa86 	bl	8016180 <memcpy>
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c7e:	81a3      	strh	r3, [r4, #12]
 8019c80:	6126      	str	r6, [r4, #16]
 8019c82:	6165      	str	r5, [r4, #20]
 8019c84:	444e      	add	r6, r9
 8019c86:	eba5 0509 	sub.w	r5, r5, r9
 8019c8a:	6026      	str	r6, [r4, #0]
 8019c8c:	60a5      	str	r5, [r4, #8]
 8019c8e:	463e      	mov	r6, r7
 8019c90:	42be      	cmp	r6, r7
 8019c92:	d900      	bls.n	8019c96 <__ssputs_r+0x86>
 8019c94:	463e      	mov	r6, r7
 8019c96:	4632      	mov	r2, r6
 8019c98:	6820      	ldr	r0, [r4, #0]
 8019c9a:	4641      	mov	r1, r8
 8019c9c:	f7fc fa7e 	bl	801619c <memmove>
 8019ca0:	68a3      	ldr	r3, [r4, #8]
 8019ca2:	6822      	ldr	r2, [r4, #0]
 8019ca4:	1b9b      	subs	r3, r3, r6
 8019ca6:	4432      	add	r2, r6
 8019ca8:	60a3      	str	r3, [r4, #8]
 8019caa:	6022      	str	r2, [r4, #0]
 8019cac:	2000      	movs	r0, #0
 8019cae:	e7db      	b.n	8019c68 <__ssputs_r+0x58>
 8019cb0:	462a      	mov	r2, r5
 8019cb2:	f000 f964 	bl	8019f7e <_realloc_r>
 8019cb6:	4606      	mov	r6, r0
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	d1e1      	bne.n	8019c80 <__ssputs_r+0x70>
 8019cbc:	6921      	ldr	r1, [r4, #16]
 8019cbe:	4650      	mov	r0, sl
 8019cc0:	f7fc fa8e 	bl	80161e0 <_free_r>
 8019cc4:	e7c7      	b.n	8019c56 <__ssputs_r+0x46>
	...

08019cc8 <_svfiprintf_r>:
 8019cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ccc:	4698      	mov	r8, r3
 8019cce:	898b      	ldrh	r3, [r1, #12]
 8019cd0:	061b      	lsls	r3, r3, #24
 8019cd2:	b09d      	sub	sp, #116	; 0x74
 8019cd4:	4607      	mov	r7, r0
 8019cd6:	460d      	mov	r5, r1
 8019cd8:	4614      	mov	r4, r2
 8019cda:	d50e      	bpl.n	8019cfa <_svfiprintf_r+0x32>
 8019cdc:	690b      	ldr	r3, [r1, #16]
 8019cde:	b963      	cbnz	r3, 8019cfa <_svfiprintf_r+0x32>
 8019ce0:	2140      	movs	r1, #64	; 0x40
 8019ce2:	f7fc facd 	bl	8016280 <_malloc_r>
 8019ce6:	6028      	str	r0, [r5, #0]
 8019ce8:	6128      	str	r0, [r5, #16]
 8019cea:	b920      	cbnz	r0, 8019cf6 <_svfiprintf_r+0x2e>
 8019cec:	230c      	movs	r3, #12
 8019cee:	603b      	str	r3, [r7, #0]
 8019cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf4:	e0d1      	b.n	8019e9a <_svfiprintf_r+0x1d2>
 8019cf6:	2340      	movs	r3, #64	; 0x40
 8019cf8:	616b      	str	r3, [r5, #20]
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8019cfe:	2320      	movs	r3, #32
 8019d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d08:	2330      	movs	r3, #48	; 0x30
 8019d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019eb4 <_svfiprintf_r+0x1ec>
 8019d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d12:	f04f 0901 	mov.w	r9, #1
 8019d16:	4623      	mov	r3, r4
 8019d18:	469a      	mov	sl, r3
 8019d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d1e:	b10a      	cbz	r2, 8019d24 <_svfiprintf_r+0x5c>
 8019d20:	2a25      	cmp	r2, #37	; 0x25
 8019d22:	d1f9      	bne.n	8019d18 <_svfiprintf_r+0x50>
 8019d24:	ebba 0b04 	subs.w	fp, sl, r4
 8019d28:	d00b      	beq.n	8019d42 <_svfiprintf_r+0x7a>
 8019d2a:	465b      	mov	r3, fp
 8019d2c:	4622      	mov	r2, r4
 8019d2e:	4629      	mov	r1, r5
 8019d30:	4638      	mov	r0, r7
 8019d32:	f7ff ff6d 	bl	8019c10 <__ssputs_r>
 8019d36:	3001      	adds	r0, #1
 8019d38:	f000 80aa 	beq.w	8019e90 <_svfiprintf_r+0x1c8>
 8019d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d3e:	445a      	add	r2, fp
 8019d40:	9209      	str	r2, [sp, #36]	; 0x24
 8019d42:	f89a 3000 	ldrb.w	r3, [sl]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	f000 80a2 	beq.w	8019e90 <_svfiprintf_r+0x1c8>
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8019d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d56:	f10a 0a01 	add.w	sl, sl, #1
 8019d5a:	9304      	str	r3, [sp, #16]
 8019d5c:	9307      	str	r3, [sp, #28]
 8019d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d62:	931a      	str	r3, [sp, #104]	; 0x68
 8019d64:	4654      	mov	r4, sl
 8019d66:	2205      	movs	r2, #5
 8019d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d6c:	4851      	ldr	r0, [pc, #324]	; (8019eb4 <_svfiprintf_r+0x1ec>)
 8019d6e:	f7e6 fa37 	bl	80001e0 <memchr>
 8019d72:	9a04      	ldr	r2, [sp, #16]
 8019d74:	b9d8      	cbnz	r0, 8019dae <_svfiprintf_r+0xe6>
 8019d76:	06d0      	lsls	r0, r2, #27
 8019d78:	bf44      	itt	mi
 8019d7a:	2320      	movmi	r3, #32
 8019d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d80:	0711      	lsls	r1, r2, #28
 8019d82:	bf44      	itt	mi
 8019d84:	232b      	movmi	r3, #43	; 0x2b
 8019d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8019d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8019d90:	d015      	beq.n	8019dbe <_svfiprintf_r+0xf6>
 8019d92:	9a07      	ldr	r2, [sp, #28]
 8019d94:	4654      	mov	r4, sl
 8019d96:	2000      	movs	r0, #0
 8019d98:	f04f 0c0a 	mov.w	ip, #10
 8019d9c:	4621      	mov	r1, r4
 8019d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019da2:	3b30      	subs	r3, #48	; 0x30
 8019da4:	2b09      	cmp	r3, #9
 8019da6:	d94e      	bls.n	8019e46 <_svfiprintf_r+0x17e>
 8019da8:	b1b0      	cbz	r0, 8019dd8 <_svfiprintf_r+0x110>
 8019daa:	9207      	str	r2, [sp, #28]
 8019dac:	e014      	b.n	8019dd8 <_svfiprintf_r+0x110>
 8019dae:	eba0 0308 	sub.w	r3, r0, r8
 8019db2:	fa09 f303 	lsl.w	r3, r9, r3
 8019db6:	4313      	orrs	r3, r2
 8019db8:	9304      	str	r3, [sp, #16]
 8019dba:	46a2      	mov	sl, r4
 8019dbc:	e7d2      	b.n	8019d64 <_svfiprintf_r+0x9c>
 8019dbe:	9b03      	ldr	r3, [sp, #12]
 8019dc0:	1d19      	adds	r1, r3, #4
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	9103      	str	r1, [sp, #12]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	bfbb      	ittet	lt
 8019dca:	425b      	neglt	r3, r3
 8019dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8019dd0:	9307      	strge	r3, [sp, #28]
 8019dd2:	9307      	strlt	r3, [sp, #28]
 8019dd4:	bfb8      	it	lt
 8019dd6:	9204      	strlt	r2, [sp, #16]
 8019dd8:	7823      	ldrb	r3, [r4, #0]
 8019dda:	2b2e      	cmp	r3, #46	; 0x2e
 8019ddc:	d10c      	bne.n	8019df8 <_svfiprintf_r+0x130>
 8019dde:	7863      	ldrb	r3, [r4, #1]
 8019de0:	2b2a      	cmp	r3, #42	; 0x2a
 8019de2:	d135      	bne.n	8019e50 <_svfiprintf_r+0x188>
 8019de4:	9b03      	ldr	r3, [sp, #12]
 8019de6:	1d1a      	adds	r2, r3, #4
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	9203      	str	r2, [sp, #12]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	bfb8      	it	lt
 8019df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019df4:	3402      	adds	r4, #2
 8019df6:	9305      	str	r3, [sp, #20]
 8019df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019ec4 <_svfiprintf_r+0x1fc>
 8019dfc:	7821      	ldrb	r1, [r4, #0]
 8019dfe:	2203      	movs	r2, #3
 8019e00:	4650      	mov	r0, sl
 8019e02:	f7e6 f9ed 	bl	80001e0 <memchr>
 8019e06:	b140      	cbz	r0, 8019e1a <_svfiprintf_r+0x152>
 8019e08:	2340      	movs	r3, #64	; 0x40
 8019e0a:	eba0 000a 	sub.w	r0, r0, sl
 8019e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8019e12:	9b04      	ldr	r3, [sp, #16]
 8019e14:	4303      	orrs	r3, r0
 8019e16:	3401      	adds	r4, #1
 8019e18:	9304      	str	r3, [sp, #16]
 8019e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e1e:	4826      	ldr	r0, [pc, #152]	; (8019eb8 <_svfiprintf_r+0x1f0>)
 8019e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e24:	2206      	movs	r2, #6
 8019e26:	f7e6 f9db 	bl	80001e0 <memchr>
 8019e2a:	2800      	cmp	r0, #0
 8019e2c:	d038      	beq.n	8019ea0 <_svfiprintf_r+0x1d8>
 8019e2e:	4b23      	ldr	r3, [pc, #140]	; (8019ebc <_svfiprintf_r+0x1f4>)
 8019e30:	bb1b      	cbnz	r3, 8019e7a <_svfiprintf_r+0x1b2>
 8019e32:	9b03      	ldr	r3, [sp, #12]
 8019e34:	3307      	adds	r3, #7
 8019e36:	f023 0307 	bic.w	r3, r3, #7
 8019e3a:	3308      	adds	r3, #8
 8019e3c:	9303      	str	r3, [sp, #12]
 8019e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e40:	4433      	add	r3, r6
 8019e42:	9309      	str	r3, [sp, #36]	; 0x24
 8019e44:	e767      	b.n	8019d16 <_svfiprintf_r+0x4e>
 8019e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e4a:	460c      	mov	r4, r1
 8019e4c:	2001      	movs	r0, #1
 8019e4e:	e7a5      	b.n	8019d9c <_svfiprintf_r+0xd4>
 8019e50:	2300      	movs	r3, #0
 8019e52:	3401      	adds	r4, #1
 8019e54:	9305      	str	r3, [sp, #20]
 8019e56:	4619      	mov	r1, r3
 8019e58:	f04f 0c0a 	mov.w	ip, #10
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e62:	3a30      	subs	r2, #48	; 0x30
 8019e64:	2a09      	cmp	r2, #9
 8019e66:	d903      	bls.n	8019e70 <_svfiprintf_r+0x1a8>
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d0c5      	beq.n	8019df8 <_svfiprintf_r+0x130>
 8019e6c:	9105      	str	r1, [sp, #20]
 8019e6e:	e7c3      	b.n	8019df8 <_svfiprintf_r+0x130>
 8019e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e74:	4604      	mov	r4, r0
 8019e76:	2301      	movs	r3, #1
 8019e78:	e7f0      	b.n	8019e5c <_svfiprintf_r+0x194>
 8019e7a:	ab03      	add	r3, sp, #12
 8019e7c:	9300      	str	r3, [sp, #0]
 8019e7e:	462a      	mov	r2, r5
 8019e80:	4b0f      	ldr	r3, [pc, #60]	; (8019ec0 <_svfiprintf_r+0x1f8>)
 8019e82:	a904      	add	r1, sp, #16
 8019e84:	4638      	mov	r0, r7
 8019e86:	f7fc faf5 	bl	8016474 <_printf_float>
 8019e8a:	1c42      	adds	r2, r0, #1
 8019e8c:	4606      	mov	r6, r0
 8019e8e:	d1d6      	bne.n	8019e3e <_svfiprintf_r+0x176>
 8019e90:	89ab      	ldrh	r3, [r5, #12]
 8019e92:	065b      	lsls	r3, r3, #25
 8019e94:	f53f af2c 	bmi.w	8019cf0 <_svfiprintf_r+0x28>
 8019e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e9a:	b01d      	add	sp, #116	; 0x74
 8019e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ea0:	ab03      	add	r3, sp, #12
 8019ea2:	9300      	str	r3, [sp, #0]
 8019ea4:	462a      	mov	r2, r5
 8019ea6:	4b06      	ldr	r3, [pc, #24]	; (8019ec0 <_svfiprintf_r+0x1f8>)
 8019ea8:	a904      	add	r1, sp, #16
 8019eaa:	4638      	mov	r0, r7
 8019eac:	f7fc fd86 	bl	80169bc <_printf_i>
 8019eb0:	e7eb      	b.n	8019e8a <_svfiprintf_r+0x1c2>
 8019eb2:	bf00      	nop
 8019eb4:	0801cb14 	.word	0x0801cb14
 8019eb8:	0801cb1e 	.word	0x0801cb1e
 8019ebc:	08016475 	.word	0x08016475
 8019ec0:	08019c11 	.word	0x08019c11
 8019ec4:	0801cb1a 	.word	0x0801cb1a

08019ec8 <nan>:
 8019ec8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019ed0 <nan+0x8>
 8019ecc:	4770      	bx	lr
 8019ece:	bf00      	nop
 8019ed0:	00000000 	.word	0x00000000
 8019ed4:	7ff80000 	.word	0x7ff80000

08019ed8 <strncmp>:
 8019ed8:	b510      	push	{r4, lr}
 8019eda:	b16a      	cbz	r2, 8019ef8 <strncmp+0x20>
 8019edc:	3901      	subs	r1, #1
 8019ede:	1884      	adds	r4, r0, r2
 8019ee0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019ee4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019ee8:	4293      	cmp	r3, r2
 8019eea:	d103      	bne.n	8019ef4 <strncmp+0x1c>
 8019eec:	42a0      	cmp	r0, r4
 8019eee:	d001      	beq.n	8019ef4 <strncmp+0x1c>
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d1f5      	bne.n	8019ee0 <strncmp+0x8>
 8019ef4:	1a98      	subs	r0, r3, r2
 8019ef6:	bd10      	pop	{r4, pc}
 8019ef8:	4610      	mov	r0, r2
 8019efa:	e7fc      	b.n	8019ef6 <strncmp+0x1e>

08019efc <__ascii_wctomb>:
 8019efc:	b149      	cbz	r1, 8019f12 <__ascii_wctomb+0x16>
 8019efe:	2aff      	cmp	r2, #255	; 0xff
 8019f00:	bf85      	ittet	hi
 8019f02:	238a      	movhi	r3, #138	; 0x8a
 8019f04:	6003      	strhi	r3, [r0, #0]
 8019f06:	700a      	strbls	r2, [r1, #0]
 8019f08:	f04f 30ff 	movhi.w	r0, #4294967295
 8019f0c:	bf98      	it	ls
 8019f0e:	2001      	movls	r0, #1
 8019f10:	4770      	bx	lr
 8019f12:	4608      	mov	r0, r1
 8019f14:	4770      	bx	lr
	...

08019f18 <__assert_func>:
 8019f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019f1a:	4614      	mov	r4, r2
 8019f1c:	461a      	mov	r2, r3
 8019f1e:	4b09      	ldr	r3, [pc, #36]	; (8019f44 <__assert_func+0x2c>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	4605      	mov	r5, r0
 8019f24:	68d8      	ldr	r0, [r3, #12]
 8019f26:	b14c      	cbz	r4, 8019f3c <__assert_func+0x24>
 8019f28:	4b07      	ldr	r3, [pc, #28]	; (8019f48 <__assert_func+0x30>)
 8019f2a:	9100      	str	r1, [sp, #0]
 8019f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019f30:	4906      	ldr	r1, [pc, #24]	; (8019f4c <__assert_func+0x34>)
 8019f32:	462b      	mov	r3, r5
 8019f34:	f000 f80e 	bl	8019f54 <fiprintf>
 8019f38:	f000 fa60 	bl	801a3fc <abort>
 8019f3c:	4b04      	ldr	r3, [pc, #16]	; (8019f50 <__assert_func+0x38>)
 8019f3e:	461c      	mov	r4, r3
 8019f40:	e7f3      	b.n	8019f2a <__assert_func+0x12>
 8019f42:	bf00      	nop
 8019f44:	20004210 	.word	0x20004210
 8019f48:	0801cb25 	.word	0x0801cb25
 8019f4c:	0801cb32 	.word	0x0801cb32
 8019f50:	0801cb60 	.word	0x0801cb60

08019f54 <fiprintf>:
 8019f54:	b40e      	push	{r1, r2, r3}
 8019f56:	b503      	push	{r0, r1, lr}
 8019f58:	4601      	mov	r1, r0
 8019f5a:	ab03      	add	r3, sp, #12
 8019f5c:	4805      	ldr	r0, [pc, #20]	; (8019f74 <fiprintf+0x20>)
 8019f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f62:	6800      	ldr	r0, [r0, #0]
 8019f64:	9301      	str	r3, [sp, #4]
 8019f66:	f000 f859 	bl	801a01c <_vfiprintf_r>
 8019f6a:	b002      	add	sp, #8
 8019f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f70:	b003      	add	sp, #12
 8019f72:	4770      	bx	lr
 8019f74:	20004210 	.word	0x20004210

08019f78 <__retarget_lock_init_recursive>:
 8019f78:	4770      	bx	lr

08019f7a <__retarget_lock_acquire_recursive>:
 8019f7a:	4770      	bx	lr

08019f7c <__retarget_lock_release_recursive>:
 8019f7c:	4770      	bx	lr

08019f7e <_realloc_r>:
 8019f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f80:	4607      	mov	r7, r0
 8019f82:	4614      	mov	r4, r2
 8019f84:	460e      	mov	r6, r1
 8019f86:	b921      	cbnz	r1, 8019f92 <_realloc_r+0x14>
 8019f88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f8c:	4611      	mov	r1, r2
 8019f8e:	f7fc b977 	b.w	8016280 <_malloc_r>
 8019f92:	b922      	cbnz	r2, 8019f9e <_realloc_r+0x20>
 8019f94:	f7fc f924 	bl	80161e0 <_free_r>
 8019f98:	4625      	mov	r5, r4
 8019f9a:	4628      	mov	r0, r5
 8019f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f9e:	f000 fc51 	bl	801a844 <_malloc_usable_size_r>
 8019fa2:	42a0      	cmp	r0, r4
 8019fa4:	d20f      	bcs.n	8019fc6 <_realloc_r+0x48>
 8019fa6:	4621      	mov	r1, r4
 8019fa8:	4638      	mov	r0, r7
 8019faa:	f7fc f969 	bl	8016280 <_malloc_r>
 8019fae:	4605      	mov	r5, r0
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d0f2      	beq.n	8019f9a <_realloc_r+0x1c>
 8019fb4:	4631      	mov	r1, r6
 8019fb6:	4622      	mov	r2, r4
 8019fb8:	f7fc f8e2 	bl	8016180 <memcpy>
 8019fbc:	4631      	mov	r1, r6
 8019fbe:	4638      	mov	r0, r7
 8019fc0:	f7fc f90e 	bl	80161e0 <_free_r>
 8019fc4:	e7e9      	b.n	8019f9a <_realloc_r+0x1c>
 8019fc6:	4635      	mov	r5, r6
 8019fc8:	e7e7      	b.n	8019f9a <_realloc_r+0x1c>

08019fca <__sfputc_r>:
 8019fca:	6893      	ldr	r3, [r2, #8]
 8019fcc:	3b01      	subs	r3, #1
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	b410      	push	{r4}
 8019fd2:	6093      	str	r3, [r2, #8]
 8019fd4:	da08      	bge.n	8019fe8 <__sfputc_r+0x1e>
 8019fd6:	6994      	ldr	r4, [r2, #24]
 8019fd8:	42a3      	cmp	r3, r4
 8019fda:	db01      	blt.n	8019fe0 <__sfputc_r+0x16>
 8019fdc:	290a      	cmp	r1, #10
 8019fde:	d103      	bne.n	8019fe8 <__sfputc_r+0x1e>
 8019fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fe4:	f000 b94a 	b.w	801a27c <__swbuf_r>
 8019fe8:	6813      	ldr	r3, [r2, #0]
 8019fea:	1c58      	adds	r0, r3, #1
 8019fec:	6010      	str	r0, [r2, #0]
 8019fee:	7019      	strb	r1, [r3, #0]
 8019ff0:	4608      	mov	r0, r1
 8019ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ff6:	4770      	bx	lr

08019ff8 <__sfputs_r>:
 8019ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ffa:	4606      	mov	r6, r0
 8019ffc:	460f      	mov	r7, r1
 8019ffe:	4614      	mov	r4, r2
 801a000:	18d5      	adds	r5, r2, r3
 801a002:	42ac      	cmp	r4, r5
 801a004:	d101      	bne.n	801a00a <__sfputs_r+0x12>
 801a006:	2000      	movs	r0, #0
 801a008:	e007      	b.n	801a01a <__sfputs_r+0x22>
 801a00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a00e:	463a      	mov	r2, r7
 801a010:	4630      	mov	r0, r6
 801a012:	f7ff ffda 	bl	8019fca <__sfputc_r>
 801a016:	1c43      	adds	r3, r0, #1
 801a018:	d1f3      	bne.n	801a002 <__sfputs_r+0xa>
 801a01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a01c <_vfiprintf_r>:
 801a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a020:	460d      	mov	r5, r1
 801a022:	b09d      	sub	sp, #116	; 0x74
 801a024:	4614      	mov	r4, r2
 801a026:	4698      	mov	r8, r3
 801a028:	4606      	mov	r6, r0
 801a02a:	b118      	cbz	r0, 801a034 <_vfiprintf_r+0x18>
 801a02c:	6983      	ldr	r3, [r0, #24]
 801a02e:	b90b      	cbnz	r3, 801a034 <_vfiprintf_r+0x18>
 801a030:	f000 fb06 	bl	801a640 <__sinit>
 801a034:	4b89      	ldr	r3, [pc, #548]	; (801a25c <_vfiprintf_r+0x240>)
 801a036:	429d      	cmp	r5, r3
 801a038:	d11b      	bne.n	801a072 <_vfiprintf_r+0x56>
 801a03a:	6875      	ldr	r5, [r6, #4]
 801a03c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a03e:	07d9      	lsls	r1, r3, #31
 801a040:	d405      	bmi.n	801a04e <_vfiprintf_r+0x32>
 801a042:	89ab      	ldrh	r3, [r5, #12]
 801a044:	059a      	lsls	r2, r3, #22
 801a046:	d402      	bmi.n	801a04e <_vfiprintf_r+0x32>
 801a048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a04a:	f7ff ff96 	bl	8019f7a <__retarget_lock_acquire_recursive>
 801a04e:	89ab      	ldrh	r3, [r5, #12]
 801a050:	071b      	lsls	r3, r3, #28
 801a052:	d501      	bpl.n	801a058 <_vfiprintf_r+0x3c>
 801a054:	692b      	ldr	r3, [r5, #16]
 801a056:	b9eb      	cbnz	r3, 801a094 <_vfiprintf_r+0x78>
 801a058:	4629      	mov	r1, r5
 801a05a:	4630      	mov	r0, r6
 801a05c:	f000 f960 	bl	801a320 <__swsetup_r>
 801a060:	b1c0      	cbz	r0, 801a094 <_vfiprintf_r+0x78>
 801a062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a064:	07dc      	lsls	r4, r3, #31
 801a066:	d50e      	bpl.n	801a086 <_vfiprintf_r+0x6a>
 801a068:	f04f 30ff 	mov.w	r0, #4294967295
 801a06c:	b01d      	add	sp, #116	; 0x74
 801a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a072:	4b7b      	ldr	r3, [pc, #492]	; (801a260 <_vfiprintf_r+0x244>)
 801a074:	429d      	cmp	r5, r3
 801a076:	d101      	bne.n	801a07c <_vfiprintf_r+0x60>
 801a078:	68b5      	ldr	r5, [r6, #8]
 801a07a:	e7df      	b.n	801a03c <_vfiprintf_r+0x20>
 801a07c:	4b79      	ldr	r3, [pc, #484]	; (801a264 <_vfiprintf_r+0x248>)
 801a07e:	429d      	cmp	r5, r3
 801a080:	bf08      	it	eq
 801a082:	68f5      	ldreq	r5, [r6, #12]
 801a084:	e7da      	b.n	801a03c <_vfiprintf_r+0x20>
 801a086:	89ab      	ldrh	r3, [r5, #12]
 801a088:	0598      	lsls	r0, r3, #22
 801a08a:	d4ed      	bmi.n	801a068 <_vfiprintf_r+0x4c>
 801a08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a08e:	f7ff ff75 	bl	8019f7c <__retarget_lock_release_recursive>
 801a092:	e7e9      	b.n	801a068 <_vfiprintf_r+0x4c>
 801a094:	2300      	movs	r3, #0
 801a096:	9309      	str	r3, [sp, #36]	; 0x24
 801a098:	2320      	movs	r3, #32
 801a09a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a09e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0a2:	2330      	movs	r3, #48	; 0x30
 801a0a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a268 <_vfiprintf_r+0x24c>
 801a0a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0ac:	f04f 0901 	mov.w	r9, #1
 801a0b0:	4623      	mov	r3, r4
 801a0b2:	469a      	mov	sl, r3
 801a0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0b8:	b10a      	cbz	r2, 801a0be <_vfiprintf_r+0xa2>
 801a0ba:	2a25      	cmp	r2, #37	; 0x25
 801a0bc:	d1f9      	bne.n	801a0b2 <_vfiprintf_r+0x96>
 801a0be:	ebba 0b04 	subs.w	fp, sl, r4
 801a0c2:	d00b      	beq.n	801a0dc <_vfiprintf_r+0xc0>
 801a0c4:	465b      	mov	r3, fp
 801a0c6:	4622      	mov	r2, r4
 801a0c8:	4629      	mov	r1, r5
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	f7ff ff94 	bl	8019ff8 <__sfputs_r>
 801a0d0:	3001      	adds	r0, #1
 801a0d2:	f000 80aa 	beq.w	801a22a <_vfiprintf_r+0x20e>
 801a0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0d8:	445a      	add	r2, fp
 801a0da:	9209      	str	r2, [sp, #36]	; 0x24
 801a0dc:	f89a 3000 	ldrb.w	r3, [sl]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	f000 80a2 	beq.w	801a22a <_vfiprintf_r+0x20e>
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 801a0ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0f0:	f10a 0a01 	add.w	sl, sl, #1
 801a0f4:	9304      	str	r3, [sp, #16]
 801a0f6:	9307      	str	r3, [sp, #28]
 801a0f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0fc:	931a      	str	r3, [sp, #104]	; 0x68
 801a0fe:	4654      	mov	r4, sl
 801a100:	2205      	movs	r2, #5
 801a102:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a106:	4858      	ldr	r0, [pc, #352]	; (801a268 <_vfiprintf_r+0x24c>)
 801a108:	f7e6 f86a 	bl	80001e0 <memchr>
 801a10c:	9a04      	ldr	r2, [sp, #16]
 801a10e:	b9d8      	cbnz	r0, 801a148 <_vfiprintf_r+0x12c>
 801a110:	06d1      	lsls	r1, r2, #27
 801a112:	bf44      	itt	mi
 801a114:	2320      	movmi	r3, #32
 801a116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a11a:	0713      	lsls	r3, r2, #28
 801a11c:	bf44      	itt	mi
 801a11e:	232b      	movmi	r3, #43	; 0x2b
 801a120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a124:	f89a 3000 	ldrb.w	r3, [sl]
 801a128:	2b2a      	cmp	r3, #42	; 0x2a
 801a12a:	d015      	beq.n	801a158 <_vfiprintf_r+0x13c>
 801a12c:	9a07      	ldr	r2, [sp, #28]
 801a12e:	4654      	mov	r4, sl
 801a130:	2000      	movs	r0, #0
 801a132:	f04f 0c0a 	mov.w	ip, #10
 801a136:	4621      	mov	r1, r4
 801a138:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a13c:	3b30      	subs	r3, #48	; 0x30
 801a13e:	2b09      	cmp	r3, #9
 801a140:	d94e      	bls.n	801a1e0 <_vfiprintf_r+0x1c4>
 801a142:	b1b0      	cbz	r0, 801a172 <_vfiprintf_r+0x156>
 801a144:	9207      	str	r2, [sp, #28]
 801a146:	e014      	b.n	801a172 <_vfiprintf_r+0x156>
 801a148:	eba0 0308 	sub.w	r3, r0, r8
 801a14c:	fa09 f303 	lsl.w	r3, r9, r3
 801a150:	4313      	orrs	r3, r2
 801a152:	9304      	str	r3, [sp, #16]
 801a154:	46a2      	mov	sl, r4
 801a156:	e7d2      	b.n	801a0fe <_vfiprintf_r+0xe2>
 801a158:	9b03      	ldr	r3, [sp, #12]
 801a15a:	1d19      	adds	r1, r3, #4
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	9103      	str	r1, [sp, #12]
 801a160:	2b00      	cmp	r3, #0
 801a162:	bfbb      	ittet	lt
 801a164:	425b      	neglt	r3, r3
 801a166:	f042 0202 	orrlt.w	r2, r2, #2
 801a16a:	9307      	strge	r3, [sp, #28]
 801a16c:	9307      	strlt	r3, [sp, #28]
 801a16e:	bfb8      	it	lt
 801a170:	9204      	strlt	r2, [sp, #16]
 801a172:	7823      	ldrb	r3, [r4, #0]
 801a174:	2b2e      	cmp	r3, #46	; 0x2e
 801a176:	d10c      	bne.n	801a192 <_vfiprintf_r+0x176>
 801a178:	7863      	ldrb	r3, [r4, #1]
 801a17a:	2b2a      	cmp	r3, #42	; 0x2a
 801a17c:	d135      	bne.n	801a1ea <_vfiprintf_r+0x1ce>
 801a17e:	9b03      	ldr	r3, [sp, #12]
 801a180:	1d1a      	adds	r2, r3, #4
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	9203      	str	r2, [sp, #12]
 801a186:	2b00      	cmp	r3, #0
 801a188:	bfb8      	it	lt
 801a18a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a18e:	3402      	adds	r4, #2
 801a190:	9305      	str	r3, [sp, #20]
 801a192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a278 <_vfiprintf_r+0x25c>
 801a196:	7821      	ldrb	r1, [r4, #0]
 801a198:	2203      	movs	r2, #3
 801a19a:	4650      	mov	r0, sl
 801a19c:	f7e6 f820 	bl	80001e0 <memchr>
 801a1a0:	b140      	cbz	r0, 801a1b4 <_vfiprintf_r+0x198>
 801a1a2:	2340      	movs	r3, #64	; 0x40
 801a1a4:	eba0 000a 	sub.w	r0, r0, sl
 801a1a8:	fa03 f000 	lsl.w	r0, r3, r0
 801a1ac:	9b04      	ldr	r3, [sp, #16]
 801a1ae:	4303      	orrs	r3, r0
 801a1b0:	3401      	adds	r4, #1
 801a1b2:	9304      	str	r3, [sp, #16]
 801a1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1b8:	482c      	ldr	r0, [pc, #176]	; (801a26c <_vfiprintf_r+0x250>)
 801a1ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1be:	2206      	movs	r2, #6
 801a1c0:	f7e6 f80e 	bl	80001e0 <memchr>
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d03f      	beq.n	801a248 <_vfiprintf_r+0x22c>
 801a1c8:	4b29      	ldr	r3, [pc, #164]	; (801a270 <_vfiprintf_r+0x254>)
 801a1ca:	bb1b      	cbnz	r3, 801a214 <_vfiprintf_r+0x1f8>
 801a1cc:	9b03      	ldr	r3, [sp, #12]
 801a1ce:	3307      	adds	r3, #7
 801a1d0:	f023 0307 	bic.w	r3, r3, #7
 801a1d4:	3308      	adds	r3, #8
 801a1d6:	9303      	str	r3, [sp, #12]
 801a1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1da:	443b      	add	r3, r7
 801a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 801a1de:	e767      	b.n	801a0b0 <_vfiprintf_r+0x94>
 801a1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1e4:	460c      	mov	r4, r1
 801a1e6:	2001      	movs	r0, #1
 801a1e8:	e7a5      	b.n	801a136 <_vfiprintf_r+0x11a>
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	3401      	adds	r4, #1
 801a1ee:	9305      	str	r3, [sp, #20]
 801a1f0:	4619      	mov	r1, r3
 801a1f2:	f04f 0c0a 	mov.w	ip, #10
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1fc:	3a30      	subs	r2, #48	; 0x30
 801a1fe:	2a09      	cmp	r2, #9
 801a200:	d903      	bls.n	801a20a <_vfiprintf_r+0x1ee>
 801a202:	2b00      	cmp	r3, #0
 801a204:	d0c5      	beq.n	801a192 <_vfiprintf_r+0x176>
 801a206:	9105      	str	r1, [sp, #20]
 801a208:	e7c3      	b.n	801a192 <_vfiprintf_r+0x176>
 801a20a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a20e:	4604      	mov	r4, r0
 801a210:	2301      	movs	r3, #1
 801a212:	e7f0      	b.n	801a1f6 <_vfiprintf_r+0x1da>
 801a214:	ab03      	add	r3, sp, #12
 801a216:	9300      	str	r3, [sp, #0]
 801a218:	462a      	mov	r2, r5
 801a21a:	4b16      	ldr	r3, [pc, #88]	; (801a274 <_vfiprintf_r+0x258>)
 801a21c:	a904      	add	r1, sp, #16
 801a21e:	4630      	mov	r0, r6
 801a220:	f7fc f928 	bl	8016474 <_printf_float>
 801a224:	4607      	mov	r7, r0
 801a226:	1c78      	adds	r0, r7, #1
 801a228:	d1d6      	bne.n	801a1d8 <_vfiprintf_r+0x1bc>
 801a22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a22c:	07d9      	lsls	r1, r3, #31
 801a22e:	d405      	bmi.n	801a23c <_vfiprintf_r+0x220>
 801a230:	89ab      	ldrh	r3, [r5, #12]
 801a232:	059a      	lsls	r2, r3, #22
 801a234:	d402      	bmi.n	801a23c <_vfiprintf_r+0x220>
 801a236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a238:	f7ff fea0 	bl	8019f7c <__retarget_lock_release_recursive>
 801a23c:	89ab      	ldrh	r3, [r5, #12]
 801a23e:	065b      	lsls	r3, r3, #25
 801a240:	f53f af12 	bmi.w	801a068 <_vfiprintf_r+0x4c>
 801a244:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a246:	e711      	b.n	801a06c <_vfiprintf_r+0x50>
 801a248:	ab03      	add	r3, sp, #12
 801a24a:	9300      	str	r3, [sp, #0]
 801a24c:	462a      	mov	r2, r5
 801a24e:	4b09      	ldr	r3, [pc, #36]	; (801a274 <_vfiprintf_r+0x258>)
 801a250:	a904      	add	r1, sp, #16
 801a252:	4630      	mov	r0, r6
 801a254:	f7fc fbb2 	bl	80169bc <_printf_i>
 801a258:	e7e4      	b.n	801a224 <_vfiprintf_r+0x208>
 801a25a:	bf00      	nop
 801a25c:	0801cb84 	.word	0x0801cb84
 801a260:	0801cba4 	.word	0x0801cba4
 801a264:	0801cb64 	.word	0x0801cb64
 801a268:	0801cb14 	.word	0x0801cb14
 801a26c:	0801cb1e 	.word	0x0801cb1e
 801a270:	08016475 	.word	0x08016475
 801a274:	08019ff9 	.word	0x08019ff9
 801a278:	0801cb1a 	.word	0x0801cb1a

0801a27c <__swbuf_r>:
 801a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a27e:	460e      	mov	r6, r1
 801a280:	4614      	mov	r4, r2
 801a282:	4605      	mov	r5, r0
 801a284:	b118      	cbz	r0, 801a28e <__swbuf_r+0x12>
 801a286:	6983      	ldr	r3, [r0, #24]
 801a288:	b90b      	cbnz	r3, 801a28e <__swbuf_r+0x12>
 801a28a:	f000 f9d9 	bl	801a640 <__sinit>
 801a28e:	4b21      	ldr	r3, [pc, #132]	; (801a314 <__swbuf_r+0x98>)
 801a290:	429c      	cmp	r4, r3
 801a292:	d12b      	bne.n	801a2ec <__swbuf_r+0x70>
 801a294:	686c      	ldr	r4, [r5, #4]
 801a296:	69a3      	ldr	r3, [r4, #24]
 801a298:	60a3      	str	r3, [r4, #8]
 801a29a:	89a3      	ldrh	r3, [r4, #12]
 801a29c:	071a      	lsls	r2, r3, #28
 801a29e:	d52f      	bpl.n	801a300 <__swbuf_r+0x84>
 801a2a0:	6923      	ldr	r3, [r4, #16]
 801a2a2:	b36b      	cbz	r3, 801a300 <__swbuf_r+0x84>
 801a2a4:	6923      	ldr	r3, [r4, #16]
 801a2a6:	6820      	ldr	r0, [r4, #0]
 801a2a8:	1ac0      	subs	r0, r0, r3
 801a2aa:	6963      	ldr	r3, [r4, #20]
 801a2ac:	b2f6      	uxtb	r6, r6
 801a2ae:	4283      	cmp	r3, r0
 801a2b0:	4637      	mov	r7, r6
 801a2b2:	dc04      	bgt.n	801a2be <__swbuf_r+0x42>
 801a2b4:	4621      	mov	r1, r4
 801a2b6:	4628      	mov	r0, r5
 801a2b8:	f000 f92e 	bl	801a518 <_fflush_r>
 801a2bc:	bb30      	cbnz	r0, 801a30c <__swbuf_r+0x90>
 801a2be:	68a3      	ldr	r3, [r4, #8]
 801a2c0:	3b01      	subs	r3, #1
 801a2c2:	60a3      	str	r3, [r4, #8]
 801a2c4:	6823      	ldr	r3, [r4, #0]
 801a2c6:	1c5a      	adds	r2, r3, #1
 801a2c8:	6022      	str	r2, [r4, #0]
 801a2ca:	701e      	strb	r6, [r3, #0]
 801a2cc:	6963      	ldr	r3, [r4, #20]
 801a2ce:	3001      	adds	r0, #1
 801a2d0:	4283      	cmp	r3, r0
 801a2d2:	d004      	beq.n	801a2de <__swbuf_r+0x62>
 801a2d4:	89a3      	ldrh	r3, [r4, #12]
 801a2d6:	07db      	lsls	r3, r3, #31
 801a2d8:	d506      	bpl.n	801a2e8 <__swbuf_r+0x6c>
 801a2da:	2e0a      	cmp	r6, #10
 801a2dc:	d104      	bne.n	801a2e8 <__swbuf_r+0x6c>
 801a2de:	4621      	mov	r1, r4
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	f000 f919 	bl	801a518 <_fflush_r>
 801a2e6:	b988      	cbnz	r0, 801a30c <__swbuf_r+0x90>
 801a2e8:	4638      	mov	r0, r7
 801a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2ec:	4b0a      	ldr	r3, [pc, #40]	; (801a318 <__swbuf_r+0x9c>)
 801a2ee:	429c      	cmp	r4, r3
 801a2f0:	d101      	bne.n	801a2f6 <__swbuf_r+0x7a>
 801a2f2:	68ac      	ldr	r4, [r5, #8]
 801a2f4:	e7cf      	b.n	801a296 <__swbuf_r+0x1a>
 801a2f6:	4b09      	ldr	r3, [pc, #36]	; (801a31c <__swbuf_r+0xa0>)
 801a2f8:	429c      	cmp	r4, r3
 801a2fa:	bf08      	it	eq
 801a2fc:	68ec      	ldreq	r4, [r5, #12]
 801a2fe:	e7ca      	b.n	801a296 <__swbuf_r+0x1a>
 801a300:	4621      	mov	r1, r4
 801a302:	4628      	mov	r0, r5
 801a304:	f000 f80c 	bl	801a320 <__swsetup_r>
 801a308:	2800      	cmp	r0, #0
 801a30a:	d0cb      	beq.n	801a2a4 <__swbuf_r+0x28>
 801a30c:	f04f 37ff 	mov.w	r7, #4294967295
 801a310:	e7ea      	b.n	801a2e8 <__swbuf_r+0x6c>
 801a312:	bf00      	nop
 801a314:	0801cb84 	.word	0x0801cb84
 801a318:	0801cba4 	.word	0x0801cba4
 801a31c:	0801cb64 	.word	0x0801cb64

0801a320 <__swsetup_r>:
 801a320:	4b32      	ldr	r3, [pc, #200]	; (801a3ec <__swsetup_r+0xcc>)
 801a322:	b570      	push	{r4, r5, r6, lr}
 801a324:	681d      	ldr	r5, [r3, #0]
 801a326:	4606      	mov	r6, r0
 801a328:	460c      	mov	r4, r1
 801a32a:	b125      	cbz	r5, 801a336 <__swsetup_r+0x16>
 801a32c:	69ab      	ldr	r3, [r5, #24]
 801a32e:	b913      	cbnz	r3, 801a336 <__swsetup_r+0x16>
 801a330:	4628      	mov	r0, r5
 801a332:	f000 f985 	bl	801a640 <__sinit>
 801a336:	4b2e      	ldr	r3, [pc, #184]	; (801a3f0 <__swsetup_r+0xd0>)
 801a338:	429c      	cmp	r4, r3
 801a33a:	d10f      	bne.n	801a35c <__swsetup_r+0x3c>
 801a33c:	686c      	ldr	r4, [r5, #4]
 801a33e:	89a3      	ldrh	r3, [r4, #12]
 801a340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a344:	0719      	lsls	r1, r3, #28
 801a346:	d42c      	bmi.n	801a3a2 <__swsetup_r+0x82>
 801a348:	06dd      	lsls	r5, r3, #27
 801a34a:	d411      	bmi.n	801a370 <__swsetup_r+0x50>
 801a34c:	2309      	movs	r3, #9
 801a34e:	6033      	str	r3, [r6, #0]
 801a350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a354:	81a3      	strh	r3, [r4, #12]
 801a356:	f04f 30ff 	mov.w	r0, #4294967295
 801a35a:	e03e      	b.n	801a3da <__swsetup_r+0xba>
 801a35c:	4b25      	ldr	r3, [pc, #148]	; (801a3f4 <__swsetup_r+0xd4>)
 801a35e:	429c      	cmp	r4, r3
 801a360:	d101      	bne.n	801a366 <__swsetup_r+0x46>
 801a362:	68ac      	ldr	r4, [r5, #8]
 801a364:	e7eb      	b.n	801a33e <__swsetup_r+0x1e>
 801a366:	4b24      	ldr	r3, [pc, #144]	; (801a3f8 <__swsetup_r+0xd8>)
 801a368:	429c      	cmp	r4, r3
 801a36a:	bf08      	it	eq
 801a36c:	68ec      	ldreq	r4, [r5, #12]
 801a36e:	e7e6      	b.n	801a33e <__swsetup_r+0x1e>
 801a370:	0758      	lsls	r0, r3, #29
 801a372:	d512      	bpl.n	801a39a <__swsetup_r+0x7a>
 801a374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a376:	b141      	cbz	r1, 801a38a <__swsetup_r+0x6a>
 801a378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a37c:	4299      	cmp	r1, r3
 801a37e:	d002      	beq.n	801a386 <__swsetup_r+0x66>
 801a380:	4630      	mov	r0, r6
 801a382:	f7fb ff2d 	bl	80161e0 <_free_r>
 801a386:	2300      	movs	r3, #0
 801a388:	6363      	str	r3, [r4, #52]	; 0x34
 801a38a:	89a3      	ldrh	r3, [r4, #12]
 801a38c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a390:	81a3      	strh	r3, [r4, #12]
 801a392:	2300      	movs	r3, #0
 801a394:	6063      	str	r3, [r4, #4]
 801a396:	6923      	ldr	r3, [r4, #16]
 801a398:	6023      	str	r3, [r4, #0]
 801a39a:	89a3      	ldrh	r3, [r4, #12]
 801a39c:	f043 0308 	orr.w	r3, r3, #8
 801a3a0:	81a3      	strh	r3, [r4, #12]
 801a3a2:	6923      	ldr	r3, [r4, #16]
 801a3a4:	b94b      	cbnz	r3, 801a3ba <__swsetup_r+0x9a>
 801a3a6:	89a3      	ldrh	r3, [r4, #12]
 801a3a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a3ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3b0:	d003      	beq.n	801a3ba <__swsetup_r+0x9a>
 801a3b2:	4621      	mov	r1, r4
 801a3b4:	4630      	mov	r0, r6
 801a3b6:	f000 fa05 	bl	801a7c4 <__smakebuf_r>
 801a3ba:	89a0      	ldrh	r0, [r4, #12]
 801a3bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a3c0:	f010 0301 	ands.w	r3, r0, #1
 801a3c4:	d00a      	beq.n	801a3dc <__swsetup_r+0xbc>
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	60a3      	str	r3, [r4, #8]
 801a3ca:	6963      	ldr	r3, [r4, #20]
 801a3cc:	425b      	negs	r3, r3
 801a3ce:	61a3      	str	r3, [r4, #24]
 801a3d0:	6923      	ldr	r3, [r4, #16]
 801a3d2:	b943      	cbnz	r3, 801a3e6 <__swsetup_r+0xc6>
 801a3d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a3d8:	d1ba      	bne.n	801a350 <__swsetup_r+0x30>
 801a3da:	bd70      	pop	{r4, r5, r6, pc}
 801a3dc:	0781      	lsls	r1, r0, #30
 801a3de:	bf58      	it	pl
 801a3e0:	6963      	ldrpl	r3, [r4, #20]
 801a3e2:	60a3      	str	r3, [r4, #8]
 801a3e4:	e7f4      	b.n	801a3d0 <__swsetup_r+0xb0>
 801a3e6:	2000      	movs	r0, #0
 801a3e8:	e7f7      	b.n	801a3da <__swsetup_r+0xba>
 801a3ea:	bf00      	nop
 801a3ec:	20004210 	.word	0x20004210
 801a3f0:	0801cb84 	.word	0x0801cb84
 801a3f4:	0801cba4 	.word	0x0801cba4
 801a3f8:	0801cb64 	.word	0x0801cb64

0801a3fc <abort>:
 801a3fc:	b508      	push	{r3, lr}
 801a3fe:	2006      	movs	r0, #6
 801a400:	f000 fa50 	bl	801a8a4 <raise>
 801a404:	2001      	movs	r0, #1
 801a406:	f7f0 ffc3 	bl	800b390 <_exit>
	...

0801a40c <__sflush_r>:
 801a40c:	898a      	ldrh	r2, [r1, #12]
 801a40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a412:	4605      	mov	r5, r0
 801a414:	0710      	lsls	r0, r2, #28
 801a416:	460c      	mov	r4, r1
 801a418:	d458      	bmi.n	801a4cc <__sflush_r+0xc0>
 801a41a:	684b      	ldr	r3, [r1, #4]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	dc05      	bgt.n	801a42c <__sflush_r+0x20>
 801a420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a422:	2b00      	cmp	r3, #0
 801a424:	dc02      	bgt.n	801a42c <__sflush_r+0x20>
 801a426:	2000      	movs	r0, #0
 801a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a42c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a42e:	2e00      	cmp	r6, #0
 801a430:	d0f9      	beq.n	801a426 <__sflush_r+0x1a>
 801a432:	2300      	movs	r3, #0
 801a434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a438:	682f      	ldr	r7, [r5, #0]
 801a43a:	602b      	str	r3, [r5, #0]
 801a43c:	d032      	beq.n	801a4a4 <__sflush_r+0x98>
 801a43e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a440:	89a3      	ldrh	r3, [r4, #12]
 801a442:	075a      	lsls	r2, r3, #29
 801a444:	d505      	bpl.n	801a452 <__sflush_r+0x46>
 801a446:	6863      	ldr	r3, [r4, #4]
 801a448:	1ac0      	subs	r0, r0, r3
 801a44a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a44c:	b10b      	cbz	r3, 801a452 <__sflush_r+0x46>
 801a44e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a450:	1ac0      	subs	r0, r0, r3
 801a452:	2300      	movs	r3, #0
 801a454:	4602      	mov	r2, r0
 801a456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a458:	6a21      	ldr	r1, [r4, #32]
 801a45a:	4628      	mov	r0, r5
 801a45c:	47b0      	blx	r6
 801a45e:	1c43      	adds	r3, r0, #1
 801a460:	89a3      	ldrh	r3, [r4, #12]
 801a462:	d106      	bne.n	801a472 <__sflush_r+0x66>
 801a464:	6829      	ldr	r1, [r5, #0]
 801a466:	291d      	cmp	r1, #29
 801a468:	d82c      	bhi.n	801a4c4 <__sflush_r+0xb8>
 801a46a:	4a2a      	ldr	r2, [pc, #168]	; (801a514 <__sflush_r+0x108>)
 801a46c:	40ca      	lsrs	r2, r1
 801a46e:	07d6      	lsls	r6, r2, #31
 801a470:	d528      	bpl.n	801a4c4 <__sflush_r+0xb8>
 801a472:	2200      	movs	r2, #0
 801a474:	6062      	str	r2, [r4, #4]
 801a476:	04d9      	lsls	r1, r3, #19
 801a478:	6922      	ldr	r2, [r4, #16]
 801a47a:	6022      	str	r2, [r4, #0]
 801a47c:	d504      	bpl.n	801a488 <__sflush_r+0x7c>
 801a47e:	1c42      	adds	r2, r0, #1
 801a480:	d101      	bne.n	801a486 <__sflush_r+0x7a>
 801a482:	682b      	ldr	r3, [r5, #0]
 801a484:	b903      	cbnz	r3, 801a488 <__sflush_r+0x7c>
 801a486:	6560      	str	r0, [r4, #84]	; 0x54
 801a488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a48a:	602f      	str	r7, [r5, #0]
 801a48c:	2900      	cmp	r1, #0
 801a48e:	d0ca      	beq.n	801a426 <__sflush_r+0x1a>
 801a490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a494:	4299      	cmp	r1, r3
 801a496:	d002      	beq.n	801a49e <__sflush_r+0x92>
 801a498:	4628      	mov	r0, r5
 801a49a:	f7fb fea1 	bl	80161e0 <_free_r>
 801a49e:	2000      	movs	r0, #0
 801a4a0:	6360      	str	r0, [r4, #52]	; 0x34
 801a4a2:	e7c1      	b.n	801a428 <__sflush_r+0x1c>
 801a4a4:	6a21      	ldr	r1, [r4, #32]
 801a4a6:	2301      	movs	r3, #1
 801a4a8:	4628      	mov	r0, r5
 801a4aa:	47b0      	blx	r6
 801a4ac:	1c41      	adds	r1, r0, #1
 801a4ae:	d1c7      	bne.n	801a440 <__sflush_r+0x34>
 801a4b0:	682b      	ldr	r3, [r5, #0]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d0c4      	beq.n	801a440 <__sflush_r+0x34>
 801a4b6:	2b1d      	cmp	r3, #29
 801a4b8:	d001      	beq.n	801a4be <__sflush_r+0xb2>
 801a4ba:	2b16      	cmp	r3, #22
 801a4bc:	d101      	bne.n	801a4c2 <__sflush_r+0xb6>
 801a4be:	602f      	str	r7, [r5, #0]
 801a4c0:	e7b1      	b.n	801a426 <__sflush_r+0x1a>
 801a4c2:	89a3      	ldrh	r3, [r4, #12]
 801a4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4c8:	81a3      	strh	r3, [r4, #12]
 801a4ca:	e7ad      	b.n	801a428 <__sflush_r+0x1c>
 801a4cc:	690f      	ldr	r7, [r1, #16]
 801a4ce:	2f00      	cmp	r7, #0
 801a4d0:	d0a9      	beq.n	801a426 <__sflush_r+0x1a>
 801a4d2:	0793      	lsls	r3, r2, #30
 801a4d4:	680e      	ldr	r6, [r1, #0]
 801a4d6:	bf08      	it	eq
 801a4d8:	694b      	ldreq	r3, [r1, #20]
 801a4da:	600f      	str	r7, [r1, #0]
 801a4dc:	bf18      	it	ne
 801a4de:	2300      	movne	r3, #0
 801a4e0:	eba6 0807 	sub.w	r8, r6, r7
 801a4e4:	608b      	str	r3, [r1, #8]
 801a4e6:	f1b8 0f00 	cmp.w	r8, #0
 801a4ea:	dd9c      	ble.n	801a426 <__sflush_r+0x1a>
 801a4ec:	6a21      	ldr	r1, [r4, #32]
 801a4ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a4f0:	4643      	mov	r3, r8
 801a4f2:	463a      	mov	r2, r7
 801a4f4:	4628      	mov	r0, r5
 801a4f6:	47b0      	blx	r6
 801a4f8:	2800      	cmp	r0, #0
 801a4fa:	dc06      	bgt.n	801a50a <__sflush_r+0xfe>
 801a4fc:	89a3      	ldrh	r3, [r4, #12]
 801a4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a502:	81a3      	strh	r3, [r4, #12]
 801a504:	f04f 30ff 	mov.w	r0, #4294967295
 801a508:	e78e      	b.n	801a428 <__sflush_r+0x1c>
 801a50a:	4407      	add	r7, r0
 801a50c:	eba8 0800 	sub.w	r8, r8, r0
 801a510:	e7e9      	b.n	801a4e6 <__sflush_r+0xda>
 801a512:	bf00      	nop
 801a514:	20400001 	.word	0x20400001

0801a518 <_fflush_r>:
 801a518:	b538      	push	{r3, r4, r5, lr}
 801a51a:	690b      	ldr	r3, [r1, #16]
 801a51c:	4605      	mov	r5, r0
 801a51e:	460c      	mov	r4, r1
 801a520:	b913      	cbnz	r3, 801a528 <_fflush_r+0x10>
 801a522:	2500      	movs	r5, #0
 801a524:	4628      	mov	r0, r5
 801a526:	bd38      	pop	{r3, r4, r5, pc}
 801a528:	b118      	cbz	r0, 801a532 <_fflush_r+0x1a>
 801a52a:	6983      	ldr	r3, [r0, #24]
 801a52c:	b90b      	cbnz	r3, 801a532 <_fflush_r+0x1a>
 801a52e:	f000 f887 	bl	801a640 <__sinit>
 801a532:	4b14      	ldr	r3, [pc, #80]	; (801a584 <_fflush_r+0x6c>)
 801a534:	429c      	cmp	r4, r3
 801a536:	d11b      	bne.n	801a570 <_fflush_r+0x58>
 801a538:	686c      	ldr	r4, [r5, #4]
 801a53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d0ef      	beq.n	801a522 <_fflush_r+0xa>
 801a542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a544:	07d0      	lsls	r0, r2, #31
 801a546:	d404      	bmi.n	801a552 <_fflush_r+0x3a>
 801a548:	0599      	lsls	r1, r3, #22
 801a54a:	d402      	bmi.n	801a552 <_fflush_r+0x3a>
 801a54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a54e:	f7ff fd14 	bl	8019f7a <__retarget_lock_acquire_recursive>
 801a552:	4628      	mov	r0, r5
 801a554:	4621      	mov	r1, r4
 801a556:	f7ff ff59 	bl	801a40c <__sflush_r>
 801a55a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a55c:	07da      	lsls	r2, r3, #31
 801a55e:	4605      	mov	r5, r0
 801a560:	d4e0      	bmi.n	801a524 <_fflush_r+0xc>
 801a562:	89a3      	ldrh	r3, [r4, #12]
 801a564:	059b      	lsls	r3, r3, #22
 801a566:	d4dd      	bmi.n	801a524 <_fflush_r+0xc>
 801a568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a56a:	f7ff fd07 	bl	8019f7c <__retarget_lock_release_recursive>
 801a56e:	e7d9      	b.n	801a524 <_fflush_r+0xc>
 801a570:	4b05      	ldr	r3, [pc, #20]	; (801a588 <_fflush_r+0x70>)
 801a572:	429c      	cmp	r4, r3
 801a574:	d101      	bne.n	801a57a <_fflush_r+0x62>
 801a576:	68ac      	ldr	r4, [r5, #8]
 801a578:	e7df      	b.n	801a53a <_fflush_r+0x22>
 801a57a:	4b04      	ldr	r3, [pc, #16]	; (801a58c <_fflush_r+0x74>)
 801a57c:	429c      	cmp	r4, r3
 801a57e:	bf08      	it	eq
 801a580:	68ec      	ldreq	r4, [r5, #12]
 801a582:	e7da      	b.n	801a53a <_fflush_r+0x22>
 801a584:	0801cb84 	.word	0x0801cb84
 801a588:	0801cba4 	.word	0x0801cba4
 801a58c:	0801cb64 	.word	0x0801cb64

0801a590 <std>:
 801a590:	2300      	movs	r3, #0
 801a592:	b510      	push	{r4, lr}
 801a594:	4604      	mov	r4, r0
 801a596:	e9c0 3300 	strd	r3, r3, [r0]
 801a59a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a59e:	6083      	str	r3, [r0, #8]
 801a5a0:	8181      	strh	r1, [r0, #12]
 801a5a2:	6643      	str	r3, [r0, #100]	; 0x64
 801a5a4:	81c2      	strh	r2, [r0, #14]
 801a5a6:	6183      	str	r3, [r0, #24]
 801a5a8:	4619      	mov	r1, r3
 801a5aa:	2208      	movs	r2, #8
 801a5ac:	305c      	adds	r0, #92	; 0x5c
 801a5ae:	f7fb fe0f 	bl	80161d0 <memset>
 801a5b2:	4b05      	ldr	r3, [pc, #20]	; (801a5c8 <std+0x38>)
 801a5b4:	6263      	str	r3, [r4, #36]	; 0x24
 801a5b6:	4b05      	ldr	r3, [pc, #20]	; (801a5cc <std+0x3c>)
 801a5b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a5ba:	4b05      	ldr	r3, [pc, #20]	; (801a5d0 <std+0x40>)
 801a5bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a5be:	4b05      	ldr	r3, [pc, #20]	; (801a5d4 <std+0x44>)
 801a5c0:	6224      	str	r4, [r4, #32]
 801a5c2:	6323      	str	r3, [r4, #48]	; 0x30
 801a5c4:	bd10      	pop	{r4, pc}
 801a5c6:	bf00      	nop
 801a5c8:	0801a8dd 	.word	0x0801a8dd
 801a5cc:	0801a8ff 	.word	0x0801a8ff
 801a5d0:	0801a937 	.word	0x0801a937
 801a5d4:	0801a95b 	.word	0x0801a95b

0801a5d8 <_cleanup_r>:
 801a5d8:	4901      	ldr	r1, [pc, #4]	; (801a5e0 <_cleanup_r+0x8>)
 801a5da:	f000 b8af 	b.w	801a73c <_fwalk_reent>
 801a5de:	bf00      	nop
 801a5e0:	0801a519 	.word	0x0801a519

0801a5e4 <__sfmoreglue>:
 801a5e4:	b570      	push	{r4, r5, r6, lr}
 801a5e6:	1e4a      	subs	r2, r1, #1
 801a5e8:	2568      	movs	r5, #104	; 0x68
 801a5ea:	4355      	muls	r5, r2
 801a5ec:	460e      	mov	r6, r1
 801a5ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a5f2:	f7fb fe45 	bl	8016280 <_malloc_r>
 801a5f6:	4604      	mov	r4, r0
 801a5f8:	b140      	cbz	r0, 801a60c <__sfmoreglue+0x28>
 801a5fa:	2100      	movs	r1, #0
 801a5fc:	e9c0 1600 	strd	r1, r6, [r0]
 801a600:	300c      	adds	r0, #12
 801a602:	60a0      	str	r0, [r4, #8]
 801a604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a608:	f7fb fde2 	bl	80161d0 <memset>
 801a60c:	4620      	mov	r0, r4
 801a60e:	bd70      	pop	{r4, r5, r6, pc}

0801a610 <__sfp_lock_acquire>:
 801a610:	4801      	ldr	r0, [pc, #4]	; (801a618 <__sfp_lock_acquire+0x8>)
 801a612:	f7ff bcb2 	b.w	8019f7a <__retarget_lock_acquire_recursive>
 801a616:	bf00      	nop
 801a618:	20011b90 	.word	0x20011b90

0801a61c <__sfp_lock_release>:
 801a61c:	4801      	ldr	r0, [pc, #4]	; (801a624 <__sfp_lock_release+0x8>)
 801a61e:	f7ff bcad 	b.w	8019f7c <__retarget_lock_release_recursive>
 801a622:	bf00      	nop
 801a624:	20011b90 	.word	0x20011b90

0801a628 <__sinit_lock_acquire>:
 801a628:	4801      	ldr	r0, [pc, #4]	; (801a630 <__sinit_lock_acquire+0x8>)
 801a62a:	f7ff bca6 	b.w	8019f7a <__retarget_lock_acquire_recursive>
 801a62e:	bf00      	nop
 801a630:	20011b8b 	.word	0x20011b8b

0801a634 <__sinit_lock_release>:
 801a634:	4801      	ldr	r0, [pc, #4]	; (801a63c <__sinit_lock_release+0x8>)
 801a636:	f7ff bca1 	b.w	8019f7c <__retarget_lock_release_recursive>
 801a63a:	bf00      	nop
 801a63c:	20011b8b 	.word	0x20011b8b

0801a640 <__sinit>:
 801a640:	b510      	push	{r4, lr}
 801a642:	4604      	mov	r4, r0
 801a644:	f7ff fff0 	bl	801a628 <__sinit_lock_acquire>
 801a648:	69a3      	ldr	r3, [r4, #24]
 801a64a:	b11b      	cbz	r3, 801a654 <__sinit+0x14>
 801a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a650:	f7ff bff0 	b.w	801a634 <__sinit_lock_release>
 801a654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a658:	6523      	str	r3, [r4, #80]	; 0x50
 801a65a:	4b13      	ldr	r3, [pc, #76]	; (801a6a8 <__sinit+0x68>)
 801a65c:	4a13      	ldr	r2, [pc, #76]	; (801a6ac <__sinit+0x6c>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	62a2      	str	r2, [r4, #40]	; 0x28
 801a662:	42a3      	cmp	r3, r4
 801a664:	bf04      	itt	eq
 801a666:	2301      	moveq	r3, #1
 801a668:	61a3      	streq	r3, [r4, #24]
 801a66a:	4620      	mov	r0, r4
 801a66c:	f000 f820 	bl	801a6b0 <__sfp>
 801a670:	6060      	str	r0, [r4, #4]
 801a672:	4620      	mov	r0, r4
 801a674:	f000 f81c 	bl	801a6b0 <__sfp>
 801a678:	60a0      	str	r0, [r4, #8]
 801a67a:	4620      	mov	r0, r4
 801a67c:	f000 f818 	bl	801a6b0 <__sfp>
 801a680:	2200      	movs	r2, #0
 801a682:	60e0      	str	r0, [r4, #12]
 801a684:	2104      	movs	r1, #4
 801a686:	6860      	ldr	r0, [r4, #4]
 801a688:	f7ff ff82 	bl	801a590 <std>
 801a68c:	68a0      	ldr	r0, [r4, #8]
 801a68e:	2201      	movs	r2, #1
 801a690:	2109      	movs	r1, #9
 801a692:	f7ff ff7d 	bl	801a590 <std>
 801a696:	68e0      	ldr	r0, [r4, #12]
 801a698:	2202      	movs	r2, #2
 801a69a:	2112      	movs	r1, #18
 801a69c:	f7ff ff78 	bl	801a590 <std>
 801a6a0:	2301      	movs	r3, #1
 801a6a2:	61a3      	str	r3, [r4, #24]
 801a6a4:	e7d2      	b.n	801a64c <__sinit+0xc>
 801a6a6:	bf00      	nop
 801a6a8:	0801c710 	.word	0x0801c710
 801a6ac:	0801a5d9 	.word	0x0801a5d9

0801a6b0 <__sfp>:
 801a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6b2:	4607      	mov	r7, r0
 801a6b4:	f7ff ffac 	bl	801a610 <__sfp_lock_acquire>
 801a6b8:	4b1e      	ldr	r3, [pc, #120]	; (801a734 <__sfp+0x84>)
 801a6ba:	681e      	ldr	r6, [r3, #0]
 801a6bc:	69b3      	ldr	r3, [r6, #24]
 801a6be:	b913      	cbnz	r3, 801a6c6 <__sfp+0x16>
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f7ff ffbd 	bl	801a640 <__sinit>
 801a6c6:	3648      	adds	r6, #72	; 0x48
 801a6c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a6cc:	3b01      	subs	r3, #1
 801a6ce:	d503      	bpl.n	801a6d8 <__sfp+0x28>
 801a6d0:	6833      	ldr	r3, [r6, #0]
 801a6d2:	b30b      	cbz	r3, 801a718 <__sfp+0x68>
 801a6d4:	6836      	ldr	r6, [r6, #0]
 801a6d6:	e7f7      	b.n	801a6c8 <__sfp+0x18>
 801a6d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a6dc:	b9d5      	cbnz	r5, 801a714 <__sfp+0x64>
 801a6de:	4b16      	ldr	r3, [pc, #88]	; (801a738 <__sfp+0x88>)
 801a6e0:	60e3      	str	r3, [r4, #12]
 801a6e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a6e6:	6665      	str	r5, [r4, #100]	; 0x64
 801a6e8:	f7ff fc46 	bl	8019f78 <__retarget_lock_init_recursive>
 801a6ec:	f7ff ff96 	bl	801a61c <__sfp_lock_release>
 801a6f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a6f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a6f8:	6025      	str	r5, [r4, #0]
 801a6fa:	61a5      	str	r5, [r4, #24]
 801a6fc:	2208      	movs	r2, #8
 801a6fe:	4629      	mov	r1, r5
 801a700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a704:	f7fb fd64 	bl	80161d0 <memset>
 801a708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a70c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a710:	4620      	mov	r0, r4
 801a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a714:	3468      	adds	r4, #104	; 0x68
 801a716:	e7d9      	b.n	801a6cc <__sfp+0x1c>
 801a718:	2104      	movs	r1, #4
 801a71a:	4638      	mov	r0, r7
 801a71c:	f7ff ff62 	bl	801a5e4 <__sfmoreglue>
 801a720:	4604      	mov	r4, r0
 801a722:	6030      	str	r0, [r6, #0]
 801a724:	2800      	cmp	r0, #0
 801a726:	d1d5      	bne.n	801a6d4 <__sfp+0x24>
 801a728:	f7ff ff78 	bl	801a61c <__sfp_lock_release>
 801a72c:	230c      	movs	r3, #12
 801a72e:	603b      	str	r3, [r7, #0]
 801a730:	e7ee      	b.n	801a710 <__sfp+0x60>
 801a732:	bf00      	nop
 801a734:	0801c710 	.word	0x0801c710
 801a738:	ffff0001 	.word	0xffff0001

0801a73c <_fwalk_reent>:
 801a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a740:	4606      	mov	r6, r0
 801a742:	4688      	mov	r8, r1
 801a744:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a748:	2700      	movs	r7, #0
 801a74a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a74e:	f1b9 0901 	subs.w	r9, r9, #1
 801a752:	d505      	bpl.n	801a760 <_fwalk_reent+0x24>
 801a754:	6824      	ldr	r4, [r4, #0]
 801a756:	2c00      	cmp	r4, #0
 801a758:	d1f7      	bne.n	801a74a <_fwalk_reent+0xe>
 801a75a:	4638      	mov	r0, r7
 801a75c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a760:	89ab      	ldrh	r3, [r5, #12]
 801a762:	2b01      	cmp	r3, #1
 801a764:	d907      	bls.n	801a776 <_fwalk_reent+0x3a>
 801a766:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a76a:	3301      	adds	r3, #1
 801a76c:	d003      	beq.n	801a776 <_fwalk_reent+0x3a>
 801a76e:	4629      	mov	r1, r5
 801a770:	4630      	mov	r0, r6
 801a772:	47c0      	blx	r8
 801a774:	4307      	orrs	r7, r0
 801a776:	3568      	adds	r5, #104	; 0x68
 801a778:	e7e9      	b.n	801a74e <_fwalk_reent+0x12>

0801a77a <__swhatbuf_r>:
 801a77a:	b570      	push	{r4, r5, r6, lr}
 801a77c:	460e      	mov	r6, r1
 801a77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a782:	2900      	cmp	r1, #0
 801a784:	b096      	sub	sp, #88	; 0x58
 801a786:	4614      	mov	r4, r2
 801a788:	461d      	mov	r5, r3
 801a78a:	da07      	bge.n	801a79c <__swhatbuf_r+0x22>
 801a78c:	2300      	movs	r3, #0
 801a78e:	602b      	str	r3, [r5, #0]
 801a790:	89b3      	ldrh	r3, [r6, #12]
 801a792:	061a      	lsls	r2, r3, #24
 801a794:	d410      	bmi.n	801a7b8 <__swhatbuf_r+0x3e>
 801a796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a79a:	e00e      	b.n	801a7ba <__swhatbuf_r+0x40>
 801a79c:	466a      	mov	r2, sp
 801a79e:	f000 f903 	bl	801a9a8 <_fstat_r>
 801a7a2:	2800      	cmp	r0, #0
 801a7a4:	dbf2      	blt.n	801a78c <__swhatbuf_r+0x12>
 801a7a6:	9a01      	ldr	r2, [sp, #4]
 801a7a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a7ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a7b0:	425a      	negs	r2, r3
 801a7b2:	415a      	adcs	r2, r3
 801a7b4:	602a      	str	r2, [r5, #0]
 801a7b6:	e7ee      	b.n	801a796 <__swhatbuf_r+0x1c>
 801a7b8:	2340      	movs	r3, #64	; 0x40
 801a7ba:	2000      	movs	r0, #0
 801a7bc:	6023      	str	r3, [r4, #0]
 801a7be:	b016      	add	sp, #88	; 0x58
 801a7c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a7c4 <__smakebuf_r>:
 801a7c4:	898b      	ldrh	r3, [r1, #12]
 801a7c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7c8:	079d      	lsls	r5, r3, #30
 801a7ca:	4606      	mov	r6, r0
 801a7cc:	460c      	mov	r4, r1
 801a7ce:	d507      	bpl.n	801a7e0 <__smakebuf_r+0x1c>
 801a7d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a7d4:	6023      	str	r3, [r4, #0]
 801a7d6:	6123      	str	r3, [r4, #16]
 801a7d8:	2301      	movs	r3, #1
 801a7da:	6163      	str	r3, [r4, #20]
 801a7dc:	b002      	add	sp, #8
 801a7de:	bd70      	pop	{r4, r5, r6, pc}
 801a7e0:	ab01      	add	r3, sp, #4
 801a7e2:	466a      	mov	r2, sp
 801a7e4:	f7ff ffc9 	bl	801a77a <__swhatbuf_r>
 801a7e8:	9900      	ldr	r1, [sp, #0]
 801a7ea:	4605      	mov	r5, r0
 801a7ec:	4630      	mov	r0, r6
 801a7ee:	f7fb fd47 	bl	8016280 <_malloc_r>
 801a7f2:	b948      	cbnz	r0, 801a808 <__smakebuf_r+0x44>
 801a7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7f8:	059a      	lsls	r2, r3, #22
 801a7fa:	d4ef      	bmi.n	801a7dc <__smakebuf_r+0x18>
 801a7fc:	f023 0303 	bic.w	r3, r3, #3
 801a800:	f043 0302 	orr.w	r3, r3, #2
 801a804:	81a3      	strh	r3, [r4, #12]
 801a806:	e7e3      	b.n	801a7d0 <__smakebuf_r+0xc>
 801a808:	4b0d      	ldr	r3, [pc, #52]	; (801a840 <__smakebuf_r+0x7c>)
 801a80a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a80c:	89a3      	ldrh	r3, [r4, #12]
 801a80e:	6020      	str	r0, [r4, #0]
 801a810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a814:	81a3      	strh	r3, [r4, #12]
 801a816:	9b00      	ldr	r3, [sp, #0]
 801a818:	6163      	str	r3, [r4, #20]
 801a81a:	9b01      	ldr	r3, [sp, #4]
 801a81c:	6120      	str	r0, [r4, #16]
 801a81e:	b15b      	cbz	r3, 801a838 <__smakebuf_r+0x74>
 801a820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a824:	4630      	mov	r0, r6
 801a826:	f000 f8d1 	bl	801a9cc <_isatty_r>
 801a82a:	b128      	cbz	r0, 801a838 <__smakebuf_r+0x74>
 801a82c:	89a3      	ldrh	r3, [r4, #12]
 801a82e:	f023 0303 	bic.w	r3, r3, #3
 801a832:	f043 0301 	orr.w	r3, r3, #1
 801a836:	81a3      	strh	r3, [r4, #12]
 801a838:	89a0      	ldrh	r0, [r4, #12]
 801a83a:	4305      	orrs	r5, r0
 801a83c:	81a5      	strh	r5, [r4, #12]
 801a83e:	e7cd      	b.n	801a7dc <__smakebuf_r+0x18>
 801a840:	0801a5d9 	.word	0x0801a5d9

0801a844 <_malloc_usable_size_r>:
 801a844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a848:	1f18      	subs	r0, r3, #4
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	bfbc      	itt	lt
 801a84e:	580b      	ldrlt	r3, [r1, r0]
 801a850:	18c0      	addlt	r0, r0, r3
 801a852:	4770      	bx	lr

0801a854 <_raise_r>:
 801a854:	291f      	cmp	r1, #31
 801a856:	b538      	push	{r3, r4, r5, lr}
 801a858:	4604      	mov	r4, r0
 801a85a:	460d      	mov	r5, r1
 801a85c:	d904      	bls.n	801a868 <_raise_r+0x14>
 801a85e:	2316      	movs	r3, #22
 801a860:	6003      	str	r3, [r0, #0]
 801a862:	f04f 30ff 	mov.w	r0, #4294967295
 801a866:	bd38      	pop	{r3, r4, r5, pc}
 801a868:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a86a:	b112      	cbz	r2, 801a872 <_raise_r+0x1e>
 801a86c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a870:	b94b      	cbnz	r3, 801a886 <_raise_r+0x32>
 801a872:	4620      	mov	r0, r4
 801a874:	f000 f830 	bl	801a8d8 <_getpid_r>
 801a878:	462a      	mov	r2, r5
 801a87a:	4601      	mov	r1, r0
 801a87c:	4620      	mov	r0, r4
 801a87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a882:	f000 b817 	b.w	801a8b4 <_kill_r>
 801a886:	2b01      	cmp	r3, #1
 801a888:	d00a      	beq.n	801a8a0 <_raise_r+0x4c>
 801a88a:	1c59      	adds	r1, r3, #1
 801a88c:	d103      	bne.n	801a896 <_raise_r+0x42>
 801a88e:	2316      	movs	r3, #22
 801a890:	6003      	str	r3, [r0, #0]
 801a892:	2001      	movs	r0, #1
 801a894:	e7e7      	b.n	801a866 <_raise_r+0x12>
 801a896:	2400      	movs	r4, #0
 801a898:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a89c:	4628      	mov	r0, r5
 801a89e:	4798      	blx	r3
 801a8a0:	2000      	movs	r0, #0
 801a8a2:	e7e0      	b.n	801a866 <_raise_r+0x12>

0801a8a4 <raise>:
 801a8a4:	4b02      	ldr	r3, [pc, #8]	; (801a8b0 <raise+0xc>)
 801a8a6:	4601      	mov	r1, r0
 801a8a8:	6818      	ldr	r0, [r3, #0]
 801a8aa:	f7ff bfd3 	b.w	801a854 <_raise_r>
 801a8ae:	bf00      	nop
 801a8b0:	20004210 	.word	0x20004210

0801a8b4 <_kill_r>:
 801a8b4:	b538      	push	{r3, r4, r5, lr}
 801a8b6:	4d07      	ldr	r5, [pc, #28]	; (801a8d4 <_kill_r+0x20>)
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	4604      	mov	r4, r0
 801a8bc:	4608      	mov	r0, r1
 801a8be:	4611      	mov	r1, r2
 801a8c0:	602b      	str	r3, [r5, #0]
 801a8c2:	f7f0 fd55 	bl	800b370 <_kill>
 801a8c6:	1c43      	adds	r3, r0, #1
 801a8c8:	d102      	bne.n	801a8d0 <_kill_r+0x1c>
 801a8ca:	682b      	ldr	r3, [r5, #0]
 801a8cc:	b103      	cbz	r3, 801a8d0 <_kill_r+0x1c>
 801a8ce:	6023      	str	r3, [r4, #0]
 801a8d0:	bd38      	pop	{r3, r4, r5, pc}
 801a8d2:	bf00      	nop
 801a8d4:	20011b84 	.word	0x20011b84

0801a8d8 <_getpid_r>:
 801a8d8:	f7f0 bd42 	b.w	800b360 <_getpid>

0801a8dc <__sread>:
 801a8dc:	b510      	push	{r4, lr}
 801a8de:	460c      	mov	r4, r1
 801a8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8e4:	f000 f894 	bl	801aa10 <_read_r>
 801a8e8:	2800      	cmp	r0, #0
 801a8ea:	bfab      	itete	ge
 801a8ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a8ee:	89a3      	ldrhlt	r3, [r4, #12]
 801a8f0:	181b      	addge	r3, r3, r0
 801a8f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a8f6:	bfac      	ite	ge
 801a8f8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a8fa:	81a3      	strhlt	r3, [r4, #12]
 801a8fc:	bd10      	pop	{r4, pc}

0801a8fe <__swrite>:
 801a8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a902:	461f      	mov	r7, r3
 801a904:	898b      	ldrh	r3, [r1, #12]
 801a906:	05db      	lsls	r3, r3, #23
 801a908:	4605      	mov	r5, r0
 801a90a:	460c      	mov	r4, r1
 801a90c:	4616      	mov	r6, r2
 801a90e:	d505      	bpl.n	801a91c <__swrite+0x1e>
 801a910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a914:	2302      	movs	r3, #2
 801a916:	2200      	movs	r2, #0
 801a918:	f000 f868 	bl	801a9ec <_lseek_r>
 801a91c:	89a3      	ldrh	r3, [r4, #12]
 801a91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a926:	81a3      	strh	r3, [r4, #12]
 801a928:	4632      	mov	r2, r6
 801a92a:	463b      	mov	r3, r7
 801a92c:	4628      	mov	r0, r5
 801a92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a932:	f000 b817 	b.w	801a964 <_write_r>

0801a936 <__sseek>:
 801a936:	b510      	push	{r4, lr}
 801a938:	460c      	mov	r4, r1
 801a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a93e:	f000 f855 	bl	801a9ec <_lseek_r>
 801a942:	1c43      	adds	r3, r0, #1
 801a944:	89a3      	ldrh	r3, [r4, #12]
 801a946:	bf15      	itete	ne
 801a948:	6560      	strne	r0, [r4, #84]	; 0x54
 801a94a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a94e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a952:	81a3      	strheq	r3, [r4, #12]
 801a954:	bf18      	it	ne
 801a956:	81a3      	strhne	r3, [r4, #12]
 801a958:	bd10      	pop	{r4, pc}

0801a95a <__sclose>:
 801a95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a95e:	f000 b813 	b.w	801a988 <_close_r>
	...

0801a964 <_write_r>:
 801a964:	b538      	push	{r3, r4, r5, lr}
 801a966:	4d07      	ldr	r5, [pc, #28]	; (801a984 <_write_r+0x20>)
 801a968:	4604      	mov	r4, r0
 801a96a:	4608      	mov	r0, r1
 801a96c:	4611      	mov	r1, r2
 801a96e:	2200      	movs	r2, #0
 801a970:	602a      	str	r2, [r5, #0]
 801a972:	461a      	mov	r2, r3
 801a974:	f7f0 fd33 	bl	800b3de <_write>
 801a978:	1c43      	adds	r3, r0, #1
 801a97a:	d102      	bne.n	801a982 <_write_r+0x1e>
 801a97c:	682b      	ldr	r3, [r5, #0]
 801a97e:	b103      	cbz	r3, 801a982 <_write_r+0x1e>
 801a980:	6023      	str	r3, [r4, #0]
 801a982:	bd38      	pop	{r3, r4, r5, pc}
 801a984:	20011b84 	.word	0x20011b84

0801a988 <_close_r>:
 801a988:	b538      	push	{r3, r4, r5, lr}
 801a98a:	4d06      	ldr	r5, [pc, #24]	; (801a9a4 <_close_r+0x1c>)
 801a98c:	2300      	movs	r3, #0
 801a98e:	4604      	mov	r4, r0
 801a990:	4608      	mov	r0, r1
 801a992:	602b      	str	r3, [r5, #0]
 801a994:	f7f0 fd3f 	bl	800b416 <_close>
 801a998:	1c43      	adds	r3, r0, #1
 801a99a:	d102      	bne.n	801a9a2 <_close_r+0x1a>
 801a99c:	682b      	ldr	r3, [r5, #0]
 801a99e:	b103      	cbz	r3, 801a9a2 <_close_r+0x1a>
 801a9a0:	6023      	str	r3, [r4, #0]
 801a9a2:	bd38      	pop	{r3, r4, r5, pc}
 801a9a4:	20011b84 	.word	0x20011b84

0801a9a8 <_fstat_r>:
 801a9a8:	b538      	push	{r3, r4, r5, lr}
 801a9aa:	4d07      	ldr	r5, [pc, #28]	; (801a9c8 <_fstat_r+0x20>)
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	4604      	mov	r4, r0
 801a9b0:	4608      	mov	r0, r1
 801a9b2:	4611      	mov	r1, r2
 801a9b4:	602b      	str	r3, [r5, #0]
 801a9b6:	f7f0 fd3a 	bl	800b42e <_fstat>
 801a9ba:	1c43      	adds	r3, r0, #1
 801a9bc:	d102      	bne.n	801a9c4 <_fstat_r+0x1c>
 801a9be:	682b      	ldr	r3, [r5, #0]
 801a9c0:	b103      	cbz	r3, 801a9c4 <_fstat_r+0x1c>
 801a9c2:	6023      	str	r3, [r4, #0]
 801a9c4:	bd38      	pop	{r3, r4, r5, pc}
 801a9c6:	bf00      	nop
 801a9c8:	20011b84 	.word	0x20011b84

0801a9cc <_isatty_r>:
 801a9cc:	b538      	push	{r3, r4, r5, lr}
 801a9ce:	4d06      	ldr	r5, [pc, #24]	; (801a9e8 <_isatty_r+0x1c>)
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	4604      	mov	r4, r0
 801a9d4:	4608      	mov	r0, r1
 801a9d6:	602b      	str	r3, [r5, #0]
 801a9d8:	f7f0 fd39 	bl	800b44e <_isatty>
 801a9dc:	1c43      	adds	r3, r0, #1
 801a9de:	d102      	bne.n	801a9e6 <_isatty_r+0x1a>
 801a9e0:	682b      	ldr	r3, [r5, #0]
 801a9e2:	b103      	cbz	r3, 801a9e6 <_isatty_r+0x1a>
 801a9e4:	6023      	str	r3, [r4, #0]
 801a9e6:	bd38      	pop	{r3, r4, r5, pc}
 801a9e8:	20011b84 	.word	0x20011b84

0801a9ec <_lseek_r>:
 801a9ec:	b538      	push	{r3, r4, r5, lr}
 801a9ee:	4d07      	ldr	r5, [pc, #28]	; (801aa0c <_lseek_r+0x20>)
 801a9f0:	4604      	mov	r4, r0
 801a9f2:	4608      	mov	r0, r1
 801a9f4:	4611      	mov	r1, r2
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	602a      	str	r2, [r5, #0]
 801a9fa:	461a      	mov	r2, r3
 801a9fc:	f7f0 fd32 	bl	800b464 <_lseek>
 801aa00:	1c43      	adds	r3, r0, #1
 801aa02:	d102      	bne.n	801aa0a <_lseek_r+0x1e>
 801aa04:	682b      	ldr	r3, [r5, #0]
 801aa06:	b103      	cbz	r3, 801aa0a <_lseek_r+0x1e>
 801aa08:	6023      	str	r3, [r4, #0]
 801aa0a:	bd38      	pop	{r3, r4, r5, pc}
 801aa0c:	20011b84 	.word	0x20011b84

0801aa10 <_read_r>:
 801aa10:	b538      	push	{r3, r4, r5, lr}
 801aa12:	4d07      	ldr	r5, [pc, #28]	; (801aa30 <_read_r+0x20>)
 801aa14:	4604      	mov	r4, r0
 801aa16:	4608      	mov	r0, r1
 801aa18:	4611      	mov	r1, r2
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	602a      	str	r2, [r5, #0]
 801aa1e:	461a      	mov	r2, r3
 801aa20:	f7f0 fcc0 	bl	800b3a4 <_read>
 801aa24:	1c43      	adds	r3, r0, #1
 801aa26:	d102      	bne.n	801aa2e <_read_r+0x1e>
 801aa28:	682b      	ldr	r3, [r5, #0]
 801aa2a:	b103      	cbz	r3, 801aa2e <_read_r+0x1e>
 801aa2c:	6023      	str	r3, [r4, #0]
 801aa2e:	bd38      	pop	{r3, r4, r5, pc}
 801aa30:	20011b84 	.word	0x20011b84
 801aa34:	00000000 	.word	0x00000000

0801aa38 <ceil>:
 801aa38:	ec51 0b10 	vmov	r0, r1, d0
 801aa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801aa44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801aa48:	2e13      	cmp	r6, #19
 801aa4a:	ee10 5a10 	vmov	r5, s0
 801aa4e:	ee10 8a10 	vmov	r8, s0
 801aa52:	460c      	mov	r4, r1
 801aa54:	dc30      	bgt.n	801aab8 <ceil+0x80>
 801aa56:	2e00      	cmp	r6, #0
 801aa58:	da12      	bge.n	801aa80 <ceil+0x48>
 801aa5a:	a335      	add	r3, pc, #212	; (adr r3, 801ab30 <ceil+0xf8>)
 801aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa60:	f7e5 fc14 	bl	800028c <__adddf3>
 801aa64:	2200      	movs	r2, #0
 801aa66:	2300      	movs	r3, #0
 801aa68:	f7e6 f856 	bl	8000b18 <__aeabi_dcmpgt>
 801aa6c:	b128      	cbz	r0, 801aa7a <ceil+0x42>
 801aa6e:	2c00      	cmp	r4, #0
 801aa70:	db55      	blt.n	801ab1e <ceil+0xe6>
 801aa72:	432c      	orrs	r4, r5
 801aa74:	d057      	beq.n	801ab26 <ceil+0xee>
 801aa76:	4c30      	ldr	r4, [pc, #192]	; (801ab38 <ceil+0x100>)
 801aa78:	2500      	movs	r5, #0
 801aa7a:	4621      	mov	r1, r4
 801aa7c:	4628      	mov	r0, r5
 801aa7e:	e025      	b.n	801aacc <ceil+0x94>
 801aa80:	4f2e      	ldr	r7, [pc, #184]	; (801ab3c <ceil+0x104>)
 801aa82:	4137      	asrs	r7, r6
 801aa84:	ea01 0307 	and.w	r3, r1, r7
 801aa88:	4303      	orrs	r3, r0
 801aa8a:	d01f      	beq.n	801aacc <ceil+0x94>
 801aa8c:	a328      	add	r3, pc, #160	; (adr r3, 801ab30 <ceil+0xf8>)
 801aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa92:	f7e5 fbfb 	bl	800028c <__adddf3>
 801aa96:	2200      	movs	r2, #0
 801aa98:	2300      	movs	r3, #0
 801aa9a:	f7e6 f83d 	bl	8000b18 <__aeabi_dcmpgt>
 801aa9e:	2800      	cmp	r0, #0
 801aaa0:	d0eb      	beq.n	801aa7a <ceil+0x42>
 801aaa2:	2c00      	cmp	r4, #0
 801aaa4:	bfc2      	ittt	gt
 801aaa6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801aaaa:	fa43 f606 	asrgt.w	r6, r3, r6
 801aaae:	19a4      	addgt	r4, r4, r6
 801aab0:	ea24 0407 	bic.w	r4, r4, r7
 801aab4:	2500      	movs	r5, #0
 801aab6:	e7e0      	b.n	801aa7a <ceil+0x42>
 801aab8:	2e33      	cmp	r6, #51	; 0x33
 801aaba:	dd0b      	ble.n	801aad4 <ceil+0x9c>
 801aabc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aac0:	d104      	bne.n	801aacc <ceil+0x94>
 801aac2:	ee10 2a10 	vmov	r2, s0
 801aac6:	460b      	mov	r3, r1
 801aac8:	f7e5 fbe0 	bl	800028c <__adddf3>
 801aacc:	ec41 0b10 	vmov	d0, r0, r1
 801aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aad4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801aad8:	f04f 33ff 	mov.w	r3, #4294967295
 801aadc:	fa23 f707 	lsr.w	r7, r3, r7
 801aae0:	4207      	tst	r7, r0
 801aae2:	d0f3      	beq.n	801aacc <ceil+0x94>
 801aae4:	a312      	add	r3, pc, #72	; (adr r3, 801ab30 <ceil+0xf8>)
 801aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaea:	f7e5 fbcf 	bl	800028c <__adddf3>
 801aaee:	2200      	movs	r2, #0
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	f7e6 f811 	bl	8000b18 <__aeabi_dcmpgt>
 801aaf6:	2800      	cmp	r0, #0
 801aaf8:	d0bf      	beq.n	801aa7a <ceil+0x42>
 801aafa:	2c00      	cmp	r4, #0
 801aafc:	dd02      	ble.n	801ab04 <ceil+0xcc>
 801aafe:	2e14      	cmp	r6, #20
 801ab00:	d103      	bne.n	801ab0a <ceil+0xd2>
 801ab02:	3401      	adds	r4, #1
 801ab04:	ea25 0507 	bic.w	r5, r5, r7
 801ab08:	e7b7      	b.n	801aa7a <ceil+0x42>
 801ab0a:	2301      	movs	r3, #1
 801ab0c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ab10:	fa03 f606 	lsl.w	r6, r3, r6
 801ab14:	4435      	add	r5, r6
 801ab16:	4545      	cmp	r5, r8
 801ab18:	bf38      	it	cc
 801ab1a:	18e4      	addcc	r4, r4, r3
 801ab1c:	e7f2      	b.n	801ab04 <ceil+0xcc>
 801ab1e:	2500      	movs	r5, #0
 801ab20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ab24:	e7a9      	b.n	801aa7a <ceil+0x42>
 801ab26:	4625      	mov	r5, r4
 801ab28:	e7a7      	b.n	801aa7a <ceil+0x42>
 801ab2a:	bf00      	nop
 801ab2c:	f3af 8000 	nop.w
 801ab30:	8800759c 	.word	0x8800759c
 801ab34:	7e37e43c 	.word	0x7e37e43c
 801ab38:	3ff00000 	.word	0x3ff00000
 801ab3c:	000fffff 	.word	0x000fffff

0801ab40 <cos>:
 801ab40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab42:	ec53 2b10 	vmov	r2, r3, d0
 801ab46:	4824      	ldr	r0, [pc, #144]	; (801abd8 <cos+0x98>)
 801ab48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ab4c:	4281      	cmp	r1, r0
 801ab4e:	dc06      	bgt.n	801ab5e <cos+0x1e>
 801ab50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801abd0 <cos+0x90>
 801ab54:	f000 fce4 	bl	801b520 <__kernel_cos>
 801ab58:	ec51 0b10 	vmov	r0, r1, d0
 801ab5c:	e007      	b.n	801ab6e <cos+0x2e>
 801ab5e:	481f      	ldr	r0, [pc, #124]	; (801abdc <cos+0x9c>)
 801ab60:	4281      	cmp	r1, r0
 801ab62:	dd09      	ble.n	801ab78 <cos+0x38>
 801ab64:	ee10 0a10 	vmov	r0, s0
 801ab68:	4619      	mov	r1, r3
 801ab6a:	f7e5 fb8d 	bl	8000288 <__aeabi_dsub>
 801ab6e:	ec41 0b10 	vmov	d0, r0, r1
 801ab72:	b005      	add	sp, #20
 801ab74:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab78:	4668      	mov	r0, sp
 801ab7a:	f000 fa11 	bl	801afa0 <__ieee754_rem_pio2>
 801ab7e:	f000 0003 	and.w	r0, r0, #3
 801ab82:	2801      	cmp	r0, #1
 801ab84:	d007      	beq.n	801ab96 <cos+0x56>
 801ab86:	2802      	cmp	r0, #2
 801ab88:	d012      	beq.n	801abb0 <cos+0x70>
 801ab8a:	b9c0      	cbnz	r0, 801abbe <cos+0x7e>
 801ab8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ab90:	ed9d 0b00 	vldr	d0, [sp]
 801ab94:	e7de      	b.n	801ab54 <cos+0x14>
 801ab96:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ab9a:	ed9d 0b00 	vldr	d0, [sp]
 801ab9e:	f001 f8c7 	bl	801bd30 <__kernel_sin>
 801aba2:	ec53 2b10 	vmov	r2, r3, d0
 801aba6:	ee10 0a10 	vmov	r0, s0
 801abaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801abae:	e7de      	b.n	801ab6e <cos+0x2e>
 801abb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801abb4:	ed9d 0b00 	vldr	d0, [sp]
 801abb8:	f000 fcb2 	bl	801b520 <__kernel_cos>
 801abbc:	e7f1      	b.n	801aba2 <cos+0x62>
 801abbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801abc2:	ed9d 0b00 	vldr	d0, [sp]
 801abc6:	2001      	movs	r0, #1
 801abc8:	f001 f8b2 	bl	801bd30 <__kernel_sin>
 801abcc:	e7c4      	b.n	801ab58 <cos+0x18>
 801abce:	bf00      	nop
	...
 801abd8:	3fe921fb 	.word	0x3fe921fb
 801abdc:	7fefffff 	.word	0x7fefffff

0801abe0 <round>:
 801abe0:	ec51 0b10 	vmov	r0, r1, d0
 801abe4:	b570      	push	{r4, r5, r6, lr}
 801abe6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801abea:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801abee:	2c13      	cmp	r4, #19
 801abf0:	ee10 2a10 	vmov	r2, s0
 801abf4:	460b      	mov	r3, r1
 801abf6:	dc19      	bgt.n	801ac2c <round+0x4c>
 801abf8:	2c00      	cmp	r4, #0
 801abfa:	da09      	bge.n	801ac10 <round+0x30>
 801abfc:	3401      	adds	r4, #1
 801abfe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801ac02:	d103      	bne.n	801ac0c <round+0x2c>
 801ac04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801ac08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ac0c:	2100      	movs	r1, #0
 801ac0e:	e028      	b.n	801ac62 <round+0x82>
 801ac10:	4d15      	ldr	r5, [pc, #84]	; (801ac68 <round+0x88>)
 801ac12:	4125      	asrs	r5, r4
 801ac14:	ea01 0605 	and.w	r6, r1, r5
 801ac18:	4332      	orrs	r2, r6
 801ac1a:	d00e      	beq.n	801ac3a <round+0x5a>
 801ac1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801ac20:	fa42 f404 	asr.w	r4, r2, r4
 801ac24:	4423      	add	r3, r4
 801ac26:	ea23 0305 	bic.w	r3, r3, r5
 801ac2a:	e7ef      	b.n	801ac0c <round+0x2c>
 801ac2c:	2c33      	cmp	r4, #51	; 0x33
 801ac2e:	dd07      	ble.n	801ac40 <round+0x60>
 801ac30:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801ac34:	d101      	bne.n	801ac3a <round+0x5a>
 801ac36:	f7e5 fb29 	bl	800028c <__adddf3>
 801ac3a:	ec41 0b10 	vmov	d0, r0, r1
 801ac3e:	bd70      	pop	{r4, r5, r6, pc}
 801ac40:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801ac44:	f04f 35ff 	mov.w	r5, #4294967295
 801ac48:	40f5      	lsrs	r5, r6
 801ac4a:	4228      	tst	r0, r5
 801ac4c:	d0f5      	beq.n	801ac3a <round+0x5a>
 801ac4e:	2101      	movs	r1, #1
 801ac50:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801ac54:	fa01 f404 	lsl.w	r4, r1, r4
 801ac58:	1912      	adds	r2, r2, r4
 801ac5a:	bf28      	it	cs
 801ac5c:	185b      	addcs	r3, r3, r1
 801ac5e:	ea22 0105 	bic.w	r1, r2, r5
 801ac62:	4608      	mov	r0, r1
 801ac64:	4619      	mov	r1, r3
 801ac66:	e7e8      	b.n	801ac3a <round+0x5a>
 801ac68:	000fffff 	.word	0x000fffff
 801ac6c:	00000000 	.word	0x00000000

0801ac70 <sin>:
 801ac70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac72:	ec53 2b10 	vmov	r2, r3, d0
 801ac76:	4826      	ldr	r0, [pc, #152]	; (801ad10 <sin+0xa0>)
 801ac78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ac7c:	4281      	cmp	r1, r0
 801ac7e:	dc07      	bgt.n	801ac90 <sin+0x20>
 801ac80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801ad08 <sin+0x98>
 801ac84:	2000      	movs	r0, #0
 801ac86:	f001 f853 	bl	801bd30 <__kernel_sin>
 801ac8a:	ec51 0b10 	vmov	r0, r1, d0
 801ac8e:	e007      	b.n	801aca0 <sin+0x30>
 801ac90:	4820      	ldr	r0, [pc, #128]	; (801ad14 <sin+0xa4>)
 801ac92:	4281      	cmp	r1, r0
 801ac94:	dd09      	ble.n	801acaa <sin+0x3a>
 801ac96:	ee10 0a10 	vmov	r0, s0
 801ac9a:	4619      	mov	r1, r3
 801ac9c:	f7e5 faf4 	bl	8000288 <__aeabi_dsub>
 801aca0:	ec41 0b10 	vmov	d0, r0, r1
 801aca4:	b005      	add	sp, #20
 801aca6:	f85d fb04 	ldr.w	pc, [sp], #4
 801acaa:	4668      	mov	r0, sp
 801acac:	f000 f978 	bl	801afa0 <__ieee754_rem_pio2>
 801acb0:	f000 0003 	and.w	r0, r0, #3
 801acb4:	2801      	cmp	r0, #1
 801acb6:	d008      	beq.n	801acca <sin+0x5a>
 801acb8:	2802      	cmp	r0, #2
 801acba:	d00d      	beq.n	801acd8 <sin+0x68>
 801acbc:	b9d0      	cbnz	r0, 801acf4 <sin+0x84>
 801acbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801acc2:	ed9d 0b00 	vldr	d0, [sp]
 801acc6:	2001      	movs	r0, #1
 801acc8:	e7dd      	b.n	801ac86 <sin+0x16>
 801acca:	ed9d 1b02 	vldr	d1, [sp, #8]
 801acce:	ed9d 0b00 	vldr	d0, [sp]
 801acd2:	f000 fc25 	bl	801b520 <__kernel_cos>
 801acd6:	e7d8      	b.n	801ac8a <sin+0x1a>
 801acd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801acdc:	ed9d 0b00 	vldr	d0, [sp]
 801ace0:	2001      	movs	r0, #1
 801ace2:	f001 f825 	bl	801bd30 <__kernel_sin>
 801ace6:	ec53 2b10 	vmov	r2, r3, d0
 801acea:	ee10 0a10 	vmov	r0, s0
 801acee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801acf2:	e7d5      	b.n	801aca0 <sin+0x30>
 801acf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801acf8:	ed9d 0b00 	vldr	d0, [sp]
 801acfc:	f000 fc10 	bl	801b520 <__kernel_cos>
 801ad00:	e7f1      	b.n	801ace6 <sin+0x76>
 801ad02:	bf00      	nop
 801ad04:	f3af 8000 	nop.w
	...
 801ad10:	3fe921fb 	.word	0x3fe921fb
 801ad14:	7fefffff 	.word	0x7fefffff

0801ad18 <ceilf>:
 801ad18:	ee10 3a10 	vmov	r3, s0
 801ad1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ad20:	3a7f      	subs	r2, #127	; 0x7f
 801ad22:	2a16      	cmp	r2, #22
 801ad24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ad28:	dc2a      	bgt.n	801ad80 <ceilf+0x68>
 801ad2a:	2a00      	cmp	r2, #0
 801ad2c:	da11      	bge.n	801ad52 <ceilf+0x3a>
 801ad2e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801ad94 <ceilf+0x7c>
 801ad32:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ad36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ad3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad3e:	dd05      	ble.n	801ad4c <ceilf+0x34>
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	db23      	blt.n	801ad8c <ceilf+0x74>
 801ad44:	2900      	cmp	r1, #0
 801ad46:	bf18      	it	ne
 801ad48:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801ad4c:	ee00 3a10 	vmov	s0, r3
 801ad50:	4770      	bx	lr
 801ad52:	4911      	ldr	r1, [pc, #68]	; (801ad98 <ceilf+0x80>)
 801ad54:	4111      	asrs	r1, r2
 801ad56:	420b      	tst	r3, r1
 801ad58:	d0fa      	beq.n	801ad50 <ceilf+0x38>
 801ad5a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ad94 <ceilf+0x7c>
 801ad5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ad62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad6a:	ddef      	ble.n	801ad4c <ceilf+0x34>
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	bfc2      	ittt	gt
 801ad70:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801ad74:	fa40 f202 	asrgt.w	r2, r0, r2
 801ad78:	189b      	addgt	r3, r3, r2
 801ad7a:	ea23 0301 	bic.w	r3, r3, r1
 801ad7e:	e7e5      	b.n	801ad4c <ceilf+0x34>
 801ad80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ad84:	d3e4      	bcc.n	801ad50 <ceilf+0x38>
 801ad86:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ad8a:	4770      	bx	lr
 801ad8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ad90:	e7dc      	b.n	801ad4c <ceilf+0x34>
 801ad92:	bf00      	nop
 801ad94:	7149f2ca 	.word	0x7149f2ca
 801ad98:	007fffff 	.word	0x007fffff

0801ad9c <atan2>:
 801ad9c:	f000 b834 	b.w	801ae08 <__ieee754_atan2>

0801ada0 <sqrt>:
 801ada0:	b538      	push	{r3, r4, r5, lr}
 801ada2:	ed2d 8b02 	vpush	{d8}
 801ada6:	ec55 4b10 	vmov	r4, r5, d0
 801adaa:	f000 fb03 	bl	801b3b4 <__ieee754_sqrt>
 801adae:	4b15      	ldr	r3, [pc, #84]	; (801ae04 <sqrt+0x64>)
 801adb0:	eeb0 8a40 	vmov.f32	s16, s0
 801adb4:	eef0 8a60 	vmov.f32	s17, s1
 801adb8:	f993 3000 	ldrsb.w	r3, [r3]
 801adbc:	3301      	adds	r3, #1
 801adbe:	d019      	beq.n	801adf4 <sqrt+0x54>
 801adc0:	4622      	mov	r2, r4
 801adc2:	462b      	mov	r3, r5
 801adc4:	4620      	mov	r0, r4
 801adc6:	4629      	mov	r1, r5
 801adc8:	f7e5 feb0 	bl	8000b2c <__aeabi_dcmpun>
 801adcc:	b990      	cbnz	r0, 801adf4 <sqrt+0x54>
 801adce:	2200      	movs	r2, #0
 801add0:	2300      	movs	r3, #0
 801add2:	4620      	mov	r0, r4
 801add4:	4629      	mov	r1, r5
 801add6:	f7e5 fe81 	bl	8000adc <__aeabi_dcmplt>
 801adda:	b158      	cbz	r0, 801adf4 <sqrt+0x54>
 801addc:	f7fb f996 	bl	801610c <__errno>
 801ade0:	2321      	movs	r3, #33	; 0x21
 801ade2:	6003      	str	r3, [r0, #0]
 801ade4:	2200      	movs	r2, #0
 801ade6:	2300      	movs	r3, #0
 801ade8:	4610      	mov	r0, r2
 801adea:	4619      	mov	r1, r3
 801adec:	f7e5 fd2e 	bl	800084c <__aeabi_ddiv>
 801adf0:	ec41 0b18 	vmov	d8, r0, r1
 801adf4:	eeb0 0a48 	vmov.f32	s0, s16
 801adf8:	eef0 0a68 	vmov.f32	s1, s17
 801adfc:	ecbd 8b02 	vpop	{d8}
 801ae00:	bd38      	pop	{r3, r4, r5, pc}
 801ae02:	bf00      	nop
 801ae04:	200043e4 	.word	0x200043e4

0801ae08 <__ieee754_atan2>:
 801ae08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae0c:	ec57 6b11 	vmov	r6, r7, d1
 801ae10:	4273      	negs	r3, r6
 801ae12:	f8df e184 	ldr.w	lr, [pc, #388]	; 801af98 <__ieee754_atan2+0x190>
 801ae16:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801ae1a:	4333      	orrs	r3, r6
 801ae1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ae20:	4573      	cmp	r3, lr
 801ae22:	ec51 0b10 	vmov	r0, r1, d0
 801ae26:	ee11 8a10 	vmov	r8, s2
 801ae2a:	d80a      	bhi.n	801ae42 <__ieee754_atan2+0x3a>
 801ae2c:	4244      	negs	r4, r0
 801ae2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ae32:	4304      	orrs	r4, r0
 801ae34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ae38:	4574      	cmp	r4, lr
 801ae3a:	ee10 9a10 	vmov	r9, s0
 801ae3e:	468c      	mov	ip, r1
 801ae40:	d907      	bls.n	801ae52 <__ieee754_atan2+0x4a>
 801ae42:	4632      	mov	r2, r6
 801ae44:	463b      	mov	r3, r7
 801ae46:	f7e5 fa21 	bl	800028c <__adddf3>
 801ae4a:	ec41 0b10 	vmov	d0, r0, r1
 801ae4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801ae56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ae5a:	4334      	orrs	r4, r6
 801ae5c:	d103      	bne.n	801ae66 <__ieee754_atan2+0x5e>
 801ae5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae62:	f001 b825 	b.w	801beb0 <atan>
 801ae66:	17bc      	asrs	r4, r7, #30
 801ae68:	f004 0402 	and.w	r4, r4, #2
 801ae6c:	ea53 0909 	orrs.w	r9, r3, r9
 801ae70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ae74:	d107      	bne.n	801ae86 <__ieee754_atan2+0x7e>
 801ae76:	2c02      	cmp	r4, #2
 801ae78:	d060      	beq.n	801af3c <__ieee754_atan2+0x134>
 801ae7a:	2c03      	cmp	r4, #3
 801ae7c:	d1e5      	bne.n	801ae4a <__ieee754_atan2+0x42>
 801ae7e:	a142      	add	r1, pc, #264	; (adr r1, 801af88 <__ieee754_atan2+0x180>)
 801ae80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae84:	e7e1      	b.n	801ae4a <__ieee754_atan2+0x42>
 801ae86:	ea52 0808 	orrs.w	r8, r2, r8
 801ae8a:	d106      	bne.n	801ae9a <__ieee754_atan2+0x92>
 801ae8c:	f1bc 0f00 	cmp.w	ip, #0
 801ae90:	da5f      	bge.n	801af52 <__ieee754_atan2+0x14a>
 801ae92:	a13f      	add	r1, pc, #252	; (adr r1, 801af90 <__ieee754_atan2+0x188>)
 801ae94:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae98:	e7d7      	b.n	801ae4a <__ieee754_atan2+0x42>
 801ae9a:	4572      	cmp	r2, lr
 801ae9c:	d10f      	bne.n	801aebe <__ieee754_atan2+0xb6>
 801ae9e:	4293      	cmp	r3, r2
 801aea0:	f104 34ff 	add.w	r4, r4, #4294967295
 801aea4:	d107      	bne.n	801aeb6 <__ieee754_atan2+0xae>
 801aea6:	2c02      	cmp	r4, #2
 801aea8:	d84c      	bhi.n	801af44 <__ieee754_atan2+0x13c>
 801aeaa:	4b35      	ldr	r3, [pc, #212]	; (801af80 <__ieee754_atan2+0x178>)
 801aeac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801aeb0:	e9d4 0100 	ldrd	r0, r1, [r4]
 801aeb4:	e7c9      	b.n	801ae4a <__ieee754_atan2+0x42>
 801aeb6:	2c02      	cmp	r4, #2
 801aeb8:	d848      	bhi.n	801af4c <__ieee754_atan2+0x144>
 801aeba:	4b32      	ldr	r3, [pc, #200]	; (801af84 <__ieee754_atan2+0x17c>)
 801aebc:	e7f6      	b.n	801aeac <__ieee754_atan2+0xa4>
 801aebe:	4573      	cmp	r3, lr
 801aec0:	d0e4      	beq.n	801ae8c <__ieee754_atan2+0x84>
 801aec2:	1a9b      	subs	r3, r3, r2
 801aec4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801aec8:	ea4f 5223 	mov.w	r2, r3, asr #20
 801aecc:	da1e      	bge.n	801af0c <__ieee754_atan2+0x104>
 801aece:	2f00      	cmp	r7, #0
 801aed0:	da01      	bge.n	801aed6 <__ieee754_atan2+0xce>
 801aed2:	323c      	adds	r2, #60	; 0x3c
 801aed4:	db1e      	blt.n	801af14 <__ieee754_atan2+0x10c>
 801aed6:	4632      	mov	r2, r6
 801aed8:	463b      	mov	r3, r7
 801aeda:	f7e5 fcb7 	bl	800084c <__aeabi_ddiv>
 801aede:	ec41 0b10 	vmov	d0, r0, r1
 801aee2:	f001 f985 	bl	801c1f0 <fabs>
 801aee6:	f000 ffe3 	bl	801beb0 <atan>
 801aeea:	ec51 0b10 	vmov	r0, r1, d0
 801aeee:	2c01      	cmp	r4, #1
 801aef0:	d013      	beq.n	801af1a <__ieee754_atan2+0x112>
 801aef2:	2c02      	cmp	r4, #2
 801aef4:	d015      	beq.n	801af22 <__ieee754_atan2+0x11a>
 801aef6:	2c00      	cmp	r4, #0
 801aef8:	d0a7      	beq.n	801ae4a <__ieee754_atan2+0x42>
 801aefa:	a319      	add	r3, pc, #100	; (adr r3, 801af60 <__ieee754_atan2+0x158>)
 801aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af00:	f7e5 f9c2 	bl	8000288 <__aeabi_dsub>
 801af04:	a318      	add	r3, pc, #96	; (adr r3, 801af68 <__ieee754_atan2+0x160>)
 801af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af0a:	e014      	b.n	801af36 <__ieee754_atan2+0x12e>
 801af0c:	a118      	add	r1, pc, #96	; (adr r1, 801af70 <__ieee754_atan2+0x168>)
 801af0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af12:	e7ec      	b.n	801aeee <__ieee754_atan2+0xe6>
 801af14:	2000      	movs	r0, #0
 801af16:	2100      	movs	r1, #0
 801af18:	e7e9      	b.n	801aeee <__ieee754_atan2+0xe6>
 801af1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af1e:	4619      	mov	r1, r3
 801af20:	e793      	b.n	801ae4a <__ieee754_atan2+0x42>
 801af22:	a30f      	add	r3, pc, #60	; (adr r3, 801af60 <__ieee754_atan2+0x158>)
 801af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af28:	f7e5 f9ae 	bl	8000288 <__aeabi_dsub>
 801af2c:	4602      	mov	r2, r0
 801af2e:	460b      	mov	r3, r1
 801af30:	a10d      	add	r1, pc, #52	; (adr r1, 801af68 <__ieee754_atan2+0x160>)
 801af32:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af36:	f7e5 f9a7 	bl	8000288 <__aeabi_dsub>
 801af3a:	e786      	b.n	801ae4a <__ieee754_atan2+0x42>
 801af3c:	a10a      	add	r1, pc, #40	; (adr r1, 801af68 <__ieee754_atan2+0x160>)
 801af3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af42:	e782      	b.n	801ae4a <__ieee754_atan2+0x42>
 801af44:	a10c      	add	r1, pc, #48	; (adr r1, 801af78 <__ieee754_atan2+0x170>)
 801af46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af4a:	e77e      	b.n	801ae4a <__ieee754_atan2+0x42>
 801af4c:	2000      	movs	r0, #0
 801af4e:	2100      	movs	r1, #0
 801af50:	e77b      	b.n	801ae4a <__ieee754_atan2+0x42>
 801af52:	a107      	add	r1, pc, #28	; (adr r1, 801af70 <__ieee754_atan2+0x168>)
 801af54:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af58:	e777      	b.n	801ae4a <__ieee754_atan2+0x42>
 801af5a:	bf00      	nop
 801af5c:	f3af 8000 	nop.w
 801af60:	33145c07 	.word	0x33145c07
 801af64:	3ca1a626 	.word	0x3ca1a626
 801af68:	54442d18 	.word	0x54442d18
 801af6c:	400921fb 	.word	0x400921fb
 801af70:	54442d18 	.word	0x54442d18
 801af74:	3ff921fb 	.word	0x3ff921fb
 801af78:	54442d18 	.word	0x54442d18
 801af7c:	3fe921fb 	.word	0x3fe921fb
 801af80:	0801cbc8 	.word	0x0801cbc8
 801af84:	0801cbe0 	.word	0x0801cbe0
 801af88:	54442d18 	.word	0x54442d18
 801af8c:	c00921fb 	.word	0xc00921fb
 801af90:	54442d18 	.word	0x54442d18
 801af94:	bff921fb 	.word	0xbff921fb
 801af98:	7ff00000 	.word	0x7ff00000
 801af9c:	00000000 	.word	0x00000000

0801afa0 <__ieee754_rem_pio2>:
 801afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa4:	ed2d 8b02 	vpush	{d8}
 801afa8:	ec55 4b10 	vmov	r4, r5, d0
 801afac:	4bca      	ldr	r3, [pc, #808]	; (801b2d8 <__ieee754_rem_pio2+0x338>)
 801afae:	b08b      	sub	sp, #44	; 0x2c
 801afb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801afb4:	4598      	cmp	r8, r3
 801afb6:	4682      	mov	sl, r0
 801afb8:	9502      	str	r5, [sp, #8]
 801afba:	dc08      	bgt.n	801afce <__ieee754_rem_pio2+0x2e>
 801afbc:	2200      	movs	r2, #0
 801afbe:	2300      	movs	r3, #0
 801afc0:	ed80 0b00 	vstr	d0, [r0]
 801afc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801afc8:	f04f 0b00 	mov.w	fp, #0
 801afcc:	e028      	b.n	801b020 <__ieee754_rem_pio2+0x80>
 801afce:	4bc3      	ldr	r3, [pc, #780]	; (801b2dc <__ieee754_rem_pio2+0x33c>)
 801afd0:	4598      	cmp	r8, r3
 801afd2:	dc78      	bgt.n	801b0c6 <__ieee754_rem_pio2+0x126>
 801afd4:	9b02      	ldr	r3, [sp, #8]
 801afd6:	4ec2      	ldr	r6, [pc, #776]	; (801b2e0 <__ieee754_rem_pio2+0x340>)
 801afd8:	2b00      	cmp	r3, #0
 801afda:	ee10 0a10 	vmov	r0, s0
 801afde:	a3b0      	add	r3, pc, #704	; (adr r3, 801b2a0 <__ieee754_rem_pio2+0x300>)
 801afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe4:	4629      	mov	r1, r5
 801afe6:	dd39      	ble.n	801b05c <__ieee754_rem_pio2+0xbc>
 801afe8:	f7e5 f94e 	bl	8000288 <__aeabi_dsub>
 801afec:	45b0      	cmp	r8, r6
 801afee:	4604      	mov	r4, r0
 801aff0:	460d      	mov	r5, r1
 801aff2:	d01b      	beq.n	801b02c <__ieee754_rem_pio2+0x8c>
 801aff4:	a3ac      	add	r3, pc, #688	; (adr r3, 801b2a8 <__ieee754_rem_pio2+0x308>)
 801aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801affa:	f7e5 f945 	bl	8000288 <__aeabi_dsub>
 801affe:	4602      	mov	r2, r0
 801b000:	460b      	mov	r3, r1
 801b002:	e9ca 2300 	strd	r2, r3, [sl]
 801b006:	4620      	mov	r0, r4
 801b008:	4629      	mov	r1, r5
 801b00a:	f7e5 f93d 	bl	8000288 <__aeabi_dsub>
 801b00e:	a3a6      	add	r3, pc, #664	; (adr r3, 801b2a8 <__ieee754_rem_pio2+0x308>)
 801b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b014:	f7e5 f938 	bl	8000288 <__aeabi_dsub>
 801b018:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b01c:	f04f 0b01 	mov.w	fp, #1
 801b020:	4658      	mov	r0, fp
 801b022:	b00b      	add	sp, #44	; 0x2c
 801b024:	ecbd 8b02 	vpop	{d8}
 801b028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b02c:	a3a0      	add	r3, pc, #640	; (adr r3, 801b2b0 <__ieee754_rem_pio2+0x310>)
 801b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b032:	f7e5 f929 	bl	8000288 <__aeabi_dsub>
 801b036:	a3a0      	add	r3, pc, #640	; (adr r3, 801b2b8 <__ieee754_rem_pio2+0x318>)
 801b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03c:	4604      	mov	r4, r0
 801b03e:	460d      	mov	r5, r1
 801b040:	f7e5 f922 	bl	8000288 <__aeabi_dsub>
 801b044:	4602      	mov	r2, r0
 801b046:	460b      	mov	r3, r1
 801b048:	e9ca 2300 	strd	r2, r3, [sl]
 801b04c:	4620      	mov	r0, r4
 801b04e:	4629      	mov	r1, r5
 801b050:	f7e5 f91a 	bl	8000288 <__aeabi_dsub>
 801b054:	a398      	add	r3, pc, #608	; (adr r3, 801b2b8 <__ieee754_rem_pio2+0x318>)
 801b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b05a:	e7db      	b.n	801b014 <__ieee754_rem_pio2+0x74>
 801b05c:	f7e5 f916 	bl	800028c <__adddf3>
 801b060:	45b0      	cmp	r8, r6
 801b062:	4604      	mov	r4, r0
 801b064:	460d      	mov	r5, r1
 801b066:	d016      	beq.n	801b096 <__ieee754_rem_pio2+0xf6>
 801b068:	a38f      	add	r3, pc, #572	; (adr r3, 801b2a8 <__ieee754_rem_pio2+0x308>)
 801b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b06e:	f7e5 f90d 	bl	800028c <__adddf3>
 801b072:	4602      	mov	r2, r0
 801b074:	460b      	mov	r3, r1
 801b076:	e9ca 2300 	strd	r2, r3, [sl]
 801b07a:	4620      	mov	r0, r4
 801b07c:	4629      	mov	r1, r5
 801b07e:	f7e5 f903 	bl	8000288 <__aeabi_dsub>
 801b082:	a389      	add	r3, pc, #548	; (adr r3, 801b2a8 <__ieee754_rem_pio2+0x308>)
 801b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b088:	f7e5 f900 	bl	800028c <__adddf3>
 801b08c:	f04f 3bff 	mov.w	fp, #4294967295
 801b090:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b094:	e7c4      	b.n	801b020 <__ieee754_rem_pio2+0x80>
 801b096:	a386      	add	r3, pc, #536	; (adr r3, 801b2b0 <__ieee754_rem_pio2+0x310>)
 801b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b09c:	f7e5 f8f6 	bl	800028c <__adddf3>
 801b0a0:	a385      	add	r3, pc, #532	; (adr r3, 801b2b8 <__ieee754_rem_pio2+0x318>)
 801b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a6:	4604      	mov	r4, r0
 801b0a8:	460d      	mov	r5, r1
 801b0aa:	f7e5 f8ef 	bl	800028c <__adddf3>
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	e9ca 2300 	strd	r2, r3, [sl]
 801b0b6:	4620      	mov	r0, r4
 801b0b8:	4629      	mov	r1, r5
 801b0ba:	f7e5 f8e5 	bl	8000288 <__aeabi_dsub>
 801b0be:	a37e      	add	r3, pc, #504	; (adr r3, 801b2b8 <__ieee754_rem_pio2+0x318>)
 801b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c4:	e7e0      	b.n	801b088 <__ieee754_rem_pio2+0xe8>
 801b0c6:	4b87      	ldr	r3, [pc, #540]	; (801b2e4 <__ieee754_rem_pio2+0x344>)
 801b0c8:	4598      	cmp	r8, r3
 801b0ca:	f300 80d9 	bgt.w	801b280 <__ieee754_rem_pio2+0x2e0>
 801b0ce:	f001 f88f 	bl	801c1f0 <fabs>
 801b0d2:	ec55 4b10 	vmov	r4, r5, d0
 801b0d6:	ee10 0a10 	vmov	r0, s0
 801b0da:	a379      	add	r3, pc, #484	; (adr r3, 801b2c0 <__ieee754_rem_pio2+0x320>)
 801b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e0:	4629      	mov	r1, r5
 801b0e2:	f7e5 fa89 	bl	80005f8 <__aeabi_dmul>
 801b0e6:	4b80      	ldr	r3, [pc, #512]	; (801b2e8 <__ieee754_rem_pio2+0x348>)
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	f7e5 f8cf 	bl	800028c <__adddf3>
 801b0ee:	f7e5 fd33 	bl	8000b58 <__aeabi_d2iz>
 801b0f2:	4683      	mov	fp, r0
 801b0f4:	f7e5 fa16 	bl	8000524 <__aeabi_i2d>
 801b0f8:	4602      	mov	r2, r0
 801b0fa:	460b      	mov	r3, r1
 801b0fc:	ec43 2b18 	vmov	d8, r2, r3
 801b100:	a367      	add	r3, pc, #412	; (adr r3, 801b2a0 <__ieee754_rem_pio2+0x300>)
 801b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b106:	f7e5 fa77 	bl	80005f8 <__aeabi_dmul>
 801b10a:	4602      	mov	r2, r0
 801b10c:	460b      	mov	r3, r1
 801b10e:	4620      	mov	r0, r4
 801b110:	4629      	mov	r1, r5
 801b112:	f7e5 f8b9 	bl	8000288 <__aeabi_dsub>
 801b116:	a364      	add	r3, pc, #400	; (adr r3, 801b2a8 <__ieee754_rem_pio2+0x308>)
 801b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b11c:	4606      	mov	r6, r0
 801b11e:	460f      	mov	r7, r1
 801b120:	ec51 0b18 	vmov	r0, r1, d8
 801b124:	f7e5 fa68 	bl	80005f8 <__aeabi_dmul>
 801b128:	f1bb 0f1f 	cmp.w	fp, #31
 801b12c:	4604      	mov	r4, r0
 801b12e:	460d      	mov	r5, r1
 801b130:	dc0d      	bgt.n	801b14e <__ieee754_rem_pio2+0x1ae>
 801b132:	4b6e      	ldr	r3, [pc, #440]	; (801b2ec <__ieee754_rem_pio2+0x34c>)
 801b134:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b13c:	4543      	cmp	r3, r8
 801b13e:	d006      	beq.n	801b14e <__ieee754_rem_pio2+0x1ae>
 801b140:	4622      	mov	r2, r4
 801b142:	462b      	mov	r3, r5
 801b144:	4630      	mov	r0, r6
 801b146:	4639      	mov	r1, r7
 801b148:	f7e5 f89e 	bl	8000288 <__aeabi_dsub>
 801b14c:	e00f      	b.n	801b16e <__ieee754_rem_pio2+0x1ce>
 801b14e:	462b      	mov	r3, r5
 801b150:	4622      	mov	r2, r4
 801b152:	4630      	mov	r0, r6
 801b154:	4639      	mov	r1, r7
 801b156:	f7e5 f897 	bl	8000288 <__aeabi_dsub>
 801b15a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b15e:	9303      	str	r3, [sp, #12]
 801b160:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b164:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b168:	f1b8 0f10 	cmp.w	r8, #16
 801b16c:	dc02      	bgt.n	801b174 <__ieee754_rem_pio2+0x1d4>
 801b16e:	e9ca 0100 	strd	r0, r1, [sl]
 801b172:	e039      	b.n	801b1e8 <__ieee754_rem_pio2+0x248>
 801b174:	a34e      	add	r3, pc, #312	; (adr r3, 801b2b0 <__ieee754_rem_pio2+0x310>)
 801b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b17a:	ec51 0b18 	vmov	r0, r1, d8
 801b17e:	f7e5 fa3b 	bl	80005f8 <__aeabi_dmul>
 801b182:	4604      	mov	r4, r0
 801b184:	460d      	mov	r5, r1
 801b186:	4602      	mov	r2, r0
 801b188:	460b      	mov	r3, r1
 801b18a:	4630      	mov	r0, r6
 801b18c:	4639      	mov	r1, r7
 801b18e:	f7e5 f87b 	bl	8000288 <__aeabi_dsub>
 801b192:	4602      	mov	r2, r0
 801b194:	460b      	mov	r3, r1
 801b196:	4680      	mov	r8, r0
 801b198:	4689      	mov	r9, r1
 801b19a:	4630      	mov	r0, r6
 801b19c:	4639      	mov	r1, r7
 801b19e:	f7e5 f873 	bl	8000288 <__aeabi_dsub>
 801b1a2:	4622      	mov	r2, r4
 801b1a4:	462b      	mov	r3, r5
 801b1a6:	f7e5 f86f 	bl	8000288 <__aeabi_dsub>
 801b1aa:	a343      	add	r3, pc, #268	; (adr r3, 801b2b8 <__ieee754_rem_pio2+0x318>)
 801b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b0:	4604      	mov	r4, r0
 801b1b2:	460d      	mov	r5, r1
 801b1b4:	ec51 0b18 	vmov	r0, r1, d8
 801b1b8:	f7e5 fa1e 	bl	80005f8 <__aeabi_dmul>
 801b1bc:	4622      	mov	r2, r4
 801b1be:	462b      	mov	r3, r5
 801b1c0:	f7e5 f862 	bl	8000288 <__aeabi_dsub>
 801b1c4:	4602      	mov	r2, r0
 801b1c6:	460b      	mov	r3, r1
 801b1c8:	4604      	mov	r4, r0
 801b1ca:	460d      	mov	r5, r1
 801b1cc:	4640      	mov	r0, r8
 801b1ce:	4649      	mov	r1, r9
 801b1d0:	f7e5 f85a 	bl	8000288 <__aeabi_dsub>
 801b1d4:	9a03      	ldr	r2, [sp, #12]
 801b1d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b1da:	1ad3      	subs	r3, r2, r3
 801b1dc:	2b31      	cmp	r3, #49	; 0x31
 801b1de:	dc24      	bgt.n	801b22a <__ieee754_rem_pio2+0x28a>
 801b1e0:	e9ca 0100 	strd	r0, r1, [sl]
 801b1e4:	4646      	mov	r6, r8
 801b1e6:	464f      	mov	r7, r9
 801b1e8:	e9da 8900 	ldrd	r8, r9, [sl]
 801b1ec:	4630      	mov	r0, r6
 801b1ee:	4642      	mov	r2, r8
 801b1f0:	464b      	mov	r3, r9
 801b1f2:	4639      	mov	r1, r7
 801b1f4:	f7e5 f848 	bl	8000288 <__aeabi_dsub>
 801b1f8:	462b      	mov	r3, r5
 801b1fa:	4622      	mov	r2, r4
 801b1fc:	f7e5 f844 	bl	8000288 <__aeabi_dsub>
 801b200:	9b02      	ldr	r3, [sp, #8]
 801b202:	2b00      	cmp	r3, #0
 801b204:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b208:	f6bf af0a 	bge.w	801b020 <__ieee754_rem_pio2+0x80>
 801b20c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b210:	f8ca 3004 	str.w	r3, [sl, #4]
 801b214:	f8ca 8000 	str.w	r8, [sl]
 801b218:	f8ca 0008 	str.w	r0, [sl, #8]
 801b21c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b220:	f8ca 300c 	str.w	r3, [sl, #12]
 801b224:	f1cb 0b00 	rsb	fp, fp, #0
 801b228:	e6fa      	b.n	801b020 <__ieee754_rem_pio2+0x80>
 801b22a:	a327      	add	r3, pc, #156	; (adr r3, 801b2c8 <__ieee754_rem_pio2+0x328>)
 801b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b230:	ec51 0b18 	vmov	r0, r1, d8
 801b234:	f7e5 f9e0 	bl	80005f8 <__aeabi_dmul>
 801b238:	4604      	mov	r4, r0
 801b23a:	460d      	mov	r5, r1
 801b23c:	4602      	mov	r2, r0
 801b23e:	460b      	mov	r3, r1
 801b240:	4640      	mov	r0, r8
 801b242:	4649      	mov	r1, r9
 801b244:	f7e5 f820 	bl	8000288 <__aeabi_dsub>
 801b248:	4602      	mov	r2, r0
 801b24a:	460b      	mov	r3, r1
 801b24c:	4606      	mov	r6, r0
 801b24e:	460f      	mov	r7, r1
 801b250:	4640      	mov	r0, r8
 801b252:	4649      	mov	r1, r9
 801b254:	f7e5 f818 	bl	8000288 <__aeabi_dsub>
 801b258:	4622      	mov	r2, r4
 801b25a:	462b      	mov	r3, r5
 801b25c:	f7e5 f814 	bl	8000288 <__aeabi_dsub>
 801b260:	a31b      	add	r3, pc, #108	; (adr r3, 801b2d0 <__ieee754_rem_pio2+0x330>)
 801b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b266:	4604      	mov	r4, r0
 801b268:	460d      	mov	r5, r1
 801b26a:	ec51 0b18 	vmov	r0, r1, d8
 801b26e:	f7e5 f9c3 	bl	80005f8 <__aeabi_dmul>
 801b272:	4622      	mov	r2, r4
 801b274:	462b      	mov	r3, r5
 801b276:	f7e5 f807 	bl	8000288 <__aeabi_dsub>
 801b27a:	4604      	mov	r4, r0
 801b27c:	460d      	mov	r5, r1
 801b27e:	e75f      	b.n	801b140 <__ieee754_rem_pio2+0x1a0>
 801b280:	4b1b      	ldr	r3, [pc, #108]	; (801b2f0 <__ieee754_rem_pio2+0x350>)
 801b282:	4598      	cmp	r8, r3
 801b284:	dd36      	ble.n	801b2f4 <__ieee754_rem_pio2+0x354>
 801b286:	ee10 2a10 	vmov	r2, s0
 801b28a:	462b      	mov	r3, r5
 801b28c:	4620      	mov	r0, r4
 801b28e:	4629      	mov	r1, r5
 801b290:	f7e4 fffa 	bl	8000288 <__aeabi_dsub>
 801b294:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b298:	e9ca 0100 	strd	r0, r1, [sl]
 801b29c:	e694      	b.n	801afc8 <__ieee754_rem_pio2+0x28>
 801b29e:	bf00      	nop
 801b2a0:	54400000 	.word	0x54400000
 801b2a4:	3ff921fb 	.word	0x3ff921fb
 801b2a8:	1a626331 	.word	0x1a626331
 801b2ac:	3dd0b461 	.word	0x3dd0b461
 801b2b0:	1a600000 	.word	0x1a600000
 801b2b4:	3dd0b461 	.word	0x3dd0b461
 801b2b8:	2e037073 	.word	0x2e037073
 801b2bc:	3ba3198a 	.word	0x3ba3198a
 801b2c0:	6dc9c883 	.word	0x6dc9c883
 801b2c4:	3fe45f30 	.word	0x3fe45f30
 801b2c8:	2e000000 	.word	0x2e000000
 801b2cc:	3ba3198a 	.word	0x3ba3198a
 801b2d0:	252049c1 	.word	0x252049c1
 801b2d4:	397b839a 	.word	0x397b839a
 801b2d8:	3fe921fb 	.word	0x3fe921fb
 801b2dc:	4002d97b 	.word	0x4002d97b
 801b2e0:	3ff921fb 	.word	0x3ff921fb
 801b2e4:	413921fb 	.word	0x413921fb
 801b2e8:	3fe00000 	.word	0x3fe00000
 801b2ec:	0801cbf8 	.word	0x0801cbf8
 801b2f0:	7fefffff 	.word	0x7fefffff
 801b2f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b2f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b2fc:	ee10 0a10 	vmov	r0, s0
 801b300:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b304:	ee10 6a10 	vmov	r6, s0
 801b308:	460f      	mov	r7, r1
 801b30a:	f7e5 fc25 	bl	8000b58 <__aeabi_d2iz>
 801b30e:	f7e5 f909 	bl	8000524 <__aeabi_i2d>
 801b312:	4602      	mov	r2, r0
 801b314:	460b      	mov	r3, r1
 801b316:	4630      	mov	r0, r6
 801b318:	4639      	mov	r1, r7
 801b31a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b31e:	f7e4 ffb3 	bl	8000288 <__aeabi_dsub>
 801b322:	4b22      	ldr	r3, [pc, #136]	; (801b3ac <__ieee754_rem_pio2+0x40c>)
 801b324:	2200      	movs	r2, #0
 801b326:	f7e5 f967 	bl	80005f8 <__aeabi_dmul>
 801b32a:	460f      	mov	r7, r1
 801b32c:	4606      	mov	r6, r0
 801b32e:	f7e5 fc13 	bl	8000b58 <__aeabi_d2iz>
 801b332:	f7e5 f8f7 	bl	8000524 <__aeabi_i2d>
 801b336:	4602      	mov	r2, r0
 801b338:	460b      	mov	r3, r1
 801b33a:	4630      	mov	r0, r6
 801b33c:	4639      	mov	r1, r7
 801b33e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b342:	f7e4 ffa1 	bl	8000288 <__aeabi_dsub>
 801b346:	4b19      	ldr	r3, [pc, #100]	; (801b3ac <__ieee754_rem_pio2+0x40c>)
 801b348:	2200      	movs	r2, #0
 801b34a:	f7e5 f955 	bl	80005f8 <__aeabi_dmul>
 801b34e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b352:	ad04      	add	r5, sp, #16
 801b354:	f04f 0803 	mov.w	r8, #3
 801b358:	46a9      	mov	r9, r5
 801b35a:	2600      	movs	r6, #0
 801b35c:	2700      	movs	r7, #0
 801b35e:	4632      	mov	r2, r6
 801b360:	463b      	mov	r3, r7
 801b362:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b366:	46c3      	mov	fp, r8
 801b368:	3d08      	subs	r5, #8
 801b36a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b36e:	f7e5 fbab 	bl	8000ac8 <__aeabi_dcmpeq>
 801b372:	2800      	cmp	r0, #0
 801b374:	d1f3      	bne.n	801b35e <__ieee754_rem_pio2+0x3be>
 801b376:	4b0e      	ldr	r3, [pc, #56]	; (801b3b0 <__ieee754_rem_pio2+0x410>)
 801b378:	9301      	str	r3, [sp, #4]
 801b37a:	2302      	movs	r3, #2
 801b37c:	9300      	str	r3, [sp, #0]
 801b37e:	4622      	mov	r2, r4
 801b380:	465b      	mov	r3, fp
 801b382:	4651      	mov	r1, sl
 801b384:	4648      	mov	r0, r9
 801b386:	f000 f993 	bl	801b6b0 <__kernel_rem_pio2>
 801b38a:	9b02      	ldr	r3, [sp, #8]
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	4683      	mov	fp, r0
 801b390:	f6bf ae46 	bge.w	801b020 <__ieee754_rem_pio2+0x80>
 801b394:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b398:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b39c:	f8ca 3004 	str.w	r3, [sl, #4]
 801b3a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 801b3a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b3a8:	e73a      	b.n	801b220 <__ieee754_rem_pio2+0x280>
 801b3aa:	bf00      	nop
 801b3ac:	41700000 	.word	0x41700000
 801b3b0:	0801cc78 	.word	0x0801cc78

0801b3b4 <__ieee754_sqrt>:
 801b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3b8:	ec55 4b10 	vmov	r4, r5, d0
 801b3bc:	4e56      	ldr	r6, [pc, #344]	; (801b518 <__ieee754_sqrt+0x164>)
 801b3be:	43ae      	bics	r6, r5
 801b3c0:	ee10 0a10 	vmov	r0, s0
 801b3c4:	ee10 3a10 	vmov	r3, s0
 801b3c8:	4629      	mov	r1, r5
 801b3ca:	462a      	mov	r2, r5
 801b3cc:	d110      	bne.n	801b3f0 <__ieee754_sqrt+0x3c>
 801b3ce:	ee10 2a10 	vmov	r2, s0
 801b3d2:	462b      	mov	r3, r5
 801b3d4:	f7e5 f910 	bl	80005f8 <__aeabi_dmul>
 801b3d8:	4602      	mov	r2, r0
 801b3da:	460b      	mov	r3, r1
 801b3dc:	4620      	mov	r0, r4
 801b3de:	4629      	mov	r1, r5
 801b3e0:	f7e4 ff54 	bl	800028c <__adddf3>
 801b3e4:	4604      	mov	r4, r0
 801b3e6:	460d      	mov	r5, r1
 801b3e8:	ec45 4b10 	vmov	d0, r4, r5
 801b3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3f0:	2d00      	cmp	r5, #0
 801b3f2:	dc10      	bgt.n	801b416 <__ieee754_sqrt+0x62>
 801b3f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b3f8:	4330      	orrs	r0, r6
 801b3fa:	d0f5      	beq.n	801b3e8 <__ieee754_sqrt+0x34>
 801b3fc:	b15d      	cbz	r5, 801b416 <__ieee754_sqrt+0x62>
 801b3fe:	ee10 2a10 	vmov	r2, s0
 801b402:	462b      	mov	r3, r5
 801b404:	ee10 0a10 	vmov	r0, s0
 801b408:	f7e4 ff3e 	bl	8000288 <__aeabi_dsub>
 801b40c:	4602      	mov	r2, r0
 801b40e:	460b      	mov	r3, r1
 801b410:	f7e5 fa1c 	bl	800084c <__aeabi_ddiv>
 801b414:	e7e6      	b.n	801b3e4 <__ieee754_sqrt+0x30>
 801b416:	1509      	asrs	r1, r1, #20
 801b418:	d076      	beq.n	801b508 <__ieee754_sqrt+0x154>
 801b41a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b41e:	07ce      	lsls	r6, r1, #31
 801b420:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b424:	bf5e      	ittt	pl
 801b426:	0fda      	lsrpl	r2, r3, #31
 801b428:	005b      	lslpl	r3, r3, #1
 801b42a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b42e:	0fda      	lsrs	r2, r3, #31
 801b430:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b434:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b438:	2000      	movs	r0, #0
 801b43a:	106d      	asrs	r5, r5, #1
 801b43c:	005b      	lsls	r3, r3, #1
 801b43e:	f04f 0e16 	mov.w	lr, #22
 801b442:	4684      	mov	ip, r0
 801b444:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b448:	eb0c 0401 	add.w	r4, ip, r1
 801b44c:	4294      	cmp	r4, r2
 801b44e:	bfde      	ittt	le
 801b450:	1b12      	suble	r2, r2, r4
 801b452:	eb04 0c01 	addle.w	ip, r4, r1
 801b456:	1840      	addle	r0, r0, r1
 801b458:	0052      	lsls	r2, r2, #1
 801b45a:	f1be 0e01 	subs.w	lr, lr, #1
 801b45e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b462:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b466:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b46a:	d1ed      	bne.n	801b448 <__ieee754_sqrt+0x94>
 801b46c:	4671      	mov	r1, lr
 801b46e:	2720      	movs	r7, #32
 801b470:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b474:	4562      	cmp	r2, ip
 801b476:	eb04 060e 	add.w	r6, r4, lr
 801b47a:	dc02      	bgt.n	801b482 <__ieee754_sqrt+0xce>
 801b47c:	d113      	bne.n	801b4a6 <__ieee754_sqrt+0xf2>
 801b47e:	429e      	cmp	r6, r3
 801b480:	d811      	bhi.n	801b4a6 <__ieee754_sqrt+0xf2>
 801b482:	2e00      	cmp	r6, #0
 801b484:	eb06 0e04 	add.w	lr, r6, r4
 801b488:	da43      	bge.n	801b512 <__ieee754_sqrt+0x15e>
 801b48a:	f1be 0f00 	cmp.w	lr, #0
 801b48e:	db40      	blt.n	801b512 <__ieee754_sqrt+0x15e>
 801b490:	f10c 0801 	add.w	r8, ip, #1
 801b494:	eba2 020c 	sub.w	r2, r2, ip
 801b498:	429e      	cmp	r6, r3
 801b49a:	bf88      	it	hi
 801b49c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b4a0:	1b9b      	subs	r3, r3, r6
 801b4a2:	4421      	add	r1, r4
 801b4a4:	46c4      	mov	ip, r8
 801b4a6:	0052      	lsls	r2, r2, #1
 801b4a8:	3f01      	subs	r7, #1
 801b4aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b4ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b4b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b4b6:	d1dd      	bne.n	801b474 <__ieee754_sqrt+0xc0>
 801b4b8:	4313      	orrs	r3, r2
 801b4ba:	d006      	beq.n	801b4ca <__ieee754_sqrt+0x116>
 801b4bc:	1c4c      	adds	r4, r1, #1
 801b4be:	bf13      	iteet	ne
 801b4c0:	3101      	addne	r1, #1
 801b4c2:	3001      	addeq	r0, #1
 801b4c4:	4639      	moveq	r1, r7
 801b4c6:	f021 0101 	bicne.w	r1, r1, #1
 801b4ca:	1043      	asrs	r3, r0, #1
 801b4cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b4d0:	0849      	lsrs	r1, r1, #1
 801b4d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b4d6:	07c2      	lsls	r2, r0, #31
 801b4d8:	bf48      	it	mi
 801b4da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b4de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b4e2:	460c      	mov	r4, r1
 801b4e4:	463d      	mov	r5, r7
 801b4e6:	e77f      	b.n	801b3e8 <__ieee754_sqrt+0x34>
 801b4e8:	0ada      	lsrs	r2, r3, #11
 801b4ea:	3815      	subs	r0, #21
 801b4ec:	055b      	lsls	r3, r3, #21
 801b4ee:	2a00      	cmp	r2, #0
 801b4f0:	d0fa      	beq.n	801b4e8 <__ieee754_sqrt+0x134>
 801b4f2:	02d7      	lsls	r7, r2, #11
 801b4f4:	d50a      	bpl.n	801b50c <__ieee754_sqrt+0x158>
 801b4f6:	f1c1 0420 	rsb	r4, r1, #32
 801b4fa:	fa23 f404 	lsr.w	r4, r3, r4
 801b4fe:	1e4d      	subs	r5, r1, #1
 801b500:	408b      	lsls	r3, r1
 801b502:	4322      	orrs	r2, r4
 801b504:	1b41      	subs	r1, r0, r5
 801b506:	e788      	b.n	801b41a <__ieee754_sqrt+0x66>
 801b508:	4608      	mov	r0, r1
 801b50a:	e7f0      	b.n	801b4ee <__ieee754_sqrt+0x13a>
 801b50c:	0052      	lsls	r2, r2, #1
 801b50e:	3101      	adds	r1, #1
 801b510:	e7ef      	b.n	801b4f2 <__ieee754_sqrt+0x13e>
 801b512:	46e0      	mov	r8, ip
 801b514:	e7be      	b.n	801b494 <__ieee754_sqrt+0xe0>
 801b516:	bf00      	nop
 801b518:	7ff00000 	.word	0x7ff00000
 801b51c:	00000000 	.word	0x00000000

0801b520 <__kernel_cos>:
 801b520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b524:	ec57 6b10 	vmov	r6, r7, d0
 801b528:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b52c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b530:	ed8d 1b00 	vstr	d1, [sp]
 801b534:	da07      	bge.n	801b546 <__kernel_cos+0x26>
 801b536:	ee10 0a10 	vmov	r0, s0
 801b53a:	4639      	mov	r1, r7
 801b53c:	f7e5 fb0c 	bl	8000b58 <__aeabi_d2iz>
 801b540:	2800      	cmp	r0, #0
 801b542:	f000 8088 	beq.w	801b656 <__kernel_cos+0x136>
 801b546:	4632      	mov	r2, r6
 801b548:	463b      	mov	r3, r7
 801b54a:	4630      	mov	r0, r6
 801b54c:	4639      	mov	r1, r7
 801b54e:	f7e5 f853 	bl	80005f8 <__aeabi_dmul>
 801b552:	4b51      	ldr	r3, [pc, #324]	; (801b698 <__kernel_cos+0x178>)
 801b554:	2200      	movs	r2, #0
 801b556:	4604      	mov	r4, r0
 801b558:	460d      	mov	r5, r1
 801b55a:	f7e5 f84d 	bl	80005f8 <__aeabi_dmul>
 801b55e:	a340      	add	r3, pc, #256	; (adr r3, 801b660 <__kernel_cos+0x140>)
 801b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b564:	4682      	mov	sl, r0
 801b566:	468b      	mov	fp, r1
 801b568:	4620      	mov	r0, r4
 801b56a:	4629      	mov	r1, r5
 801b56c:	f7e5 f844 	bl	80005f8 <__aeabi_dmul>
 801b570:	a33d      	add	r3, pc, #244	; (adr r3, 801b668 <__kernel_cos+0x148>)
 801b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b576:	f7e4 fe89 	bl	800028c <__adddf3>
 801b57a:	4622      	mov	r2, r4
 801b57c:	462b      	mov	r3, r5
 801b57e:	f7e5 f83b 	bl	80005f8 <__aeabi_dmul>
 801b582:	a33b      	add	r3, pc, #236	; (adr r3, 801b670 <__kernel_cos+0x150>)
 801b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b588:	f7e4 fe7e 	bl	8000288 <__aeabi_dsub>
 801b58c:	4622      	mov	r2, r4
 801b58e:	462b      	mov	r3, r5
 801b590:	f7e5 f832 	bl	80005f8 <__aeabi_dmul>
 801b594:	a338      	add	r3, pc, #224	; (adr r3, 801b678 <__kernel_cos+0x158>)
 801b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b59a:	f7e4 fe77 	bl	800028c <__adddf3>
 801b59e:	4622      	mov	r2, r4
 801b5a0:	462b      	mov	r3, r5
 801b5a2:	f7e5 f829 	bl	80005f8 <__aeabi_dmul>
 801b5a6:	a336      	add	r3, pc, #216	; (adr r3, 801b680 <__kernel_cos+0x160>)
 801b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ac:	f7e4 fe6c 	bl	8000288 <__aeabi_dsub>
 801b5b0:	4622      	mov	r2, r4
 801b5b2:	462b      	mov	r3, r5
 801b5b4:	f7e5 f820 	bl	80005f8 <__aeabi_dmul>
 801b5b8:	a333      	add	r3, pc, #204	; (adr r3, 801b688 <__kernel_cos+0x168>)
 801b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5be:	f7e4 fe65 	bl	800028c <__adddf3>
 801b5c2:	4622      	mov	r2, r4
 801b5c4:	462b      	mov	r3, r5
 801b5c6:	f7e5 f817 	bl	80005f8 <__aeabi_dmul>
 801b5ca:	4622      	mov	r2, r4
 801b5cc:	462b      	mov	r3, r5
 801b5ce:	f7e5 f813 	bl	80005f8 <__aeabi_dmul>
 801b5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b5d6:	4604      	mov	r4, r0
 801b5d8:	460d      	mov	r5, r1
 801b5da:	4630      	mov	r0, r6
 801b5dc:	4639      	mov	r1, r7
 801b5de:	f7e5 f80b 	bl	80005f8 <__aeabi_dmul>
 801b5e2:	460b      	mov	r3, r1
 801b5e4:	4602      	mov	r2, r0
 801b5e6:	4629      	mov	r1, r5
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f7e4 fe4d 	bl	8000288 <__aeabi_dsub>
 801b5ee:	4b2b      	ldr	r3, [pc, #172]	; (801b69c <__kernel_cos+0x17c>)
 801b5f0:	4598      	cmp	r8, r3
 801b5f2:	4606      	mov	r6, r0
 801b5f4:	460f      	mov	r7, r1
 801b5f6:	dc10      	bgt.n	801b61a <__kernel_cos+0xfa>
 801b5f8:	4602      	mov	r2, r0
 801b5fa:	460b      	mov	r3, r1
 801b5fc:	4650      	mov	r0, sl
 801b5fe:	4659      	mov	r1, fp
 801b600:	f7e4 fe42 	bl	8000288 <__aeabi_dsub>
 801b604:	460b      	mov	r3, r1
 801b606:	4926      	ldr	r1, [pc, #152]	; (801b6a0 <__kernel_cos+0x180>)
 801b608:	4602      	mov	r2, r0
 801b60a:	2000      	movs	r0, #0
 801b60c:	f7e4 fe3c 	bl	8000288 <__aeabi_dsub>
 801b610:	ec41 0b10 	vmov	d0, r0, r1
 801b614:	b003      	add	sp, #12
 801b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b61a:	4b22      	ldr	r3, [pc, #136]	; (801b6a4 <__kernel_cos+0x184>)
 801b61c:	4920      	ldr	r1, [pc, #128]	; (801b6a0 <__kernel_cos+0x180>)
 801b61e:	4598      	cmp	r8, r3
 801b620:	bfcc      	ite	gt
 801b622:	4d21      	ldrgt	r5, [pc, #132]	; (801b6a8 <__kernel_cos+0x188>)
 801b624:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b628:	2400      	movs	r4, #0
 801b62a:	4622      	mov	r2, r4
 801b62c:	462b      	mov	r3, r5
 801b62e:	2000      	movs	r0, #0
 801b630:	f7e4 fe2a 	bl	8000288 <__aeabi_dsub>
 801b634:	4622      	mov	r2, r4
 801b636:	4680      	mov	r8, r0
 801b638:	4689      	mov	r9, r1
 801b63a:	462b      	mov	r3, r5
 801b63c:	4650      	mov	r0, sl
 801b63e:	4659      	mov	r1, fp
 801b640:	f7e4 fe22 	bl	8000288 <__aeabi_dsub>
 801b644:	4632      	mov	r2, r6
 801b646:	463b      	mov	r3, r7
 801b648:	f7e4 fe1e 	bl	8000288 <__aeabi_dsub>
 801b64c:	4602      	mov	r2, r0
 801b64e:	460b      	mov	r3, r1
 801b650:	4640      	mov	r0, r8
 801b652:	4649      	mov	r1, r9
 801b654:	e7da      	b.n	801b60c <__kernel_cos+0xec>
 801b656:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b690 <__kernel_cos+0x170>
 801b65a:	e7db      	b.n	801b614 <__kernel_cos+0xf4>
 801b65c:	f3af 8000 	nop.w
 801b660:	be8838d4 	.word	0xbe8838d4
 801b664:	bda8fae9 	.word	0xbda8fae9
 801b668:	bdb4b1c4 	.word	0xbdb4b1c4
 801b66c:	3e21ee9e 	.word	0x3e21ee9e
 801b670:	809c52ad 	.word	0x809c52ad
 801b674:	3e927e4f 	.word	0x3e927e4f
 801b678:	19cb1590 	.word	0x19cb1590
 801b67c:	3efa01a0 	.word	0x3efa01a0
 801b680:	16c15177 	.word	0x16c15177
 801b684:	3f56c16c 	.word	0x3f56c16c
 801b688:	5555554c 	.word	0x5555554c
 801b68c:	3fa55555 	.word	0x3fa55555
 801b690:	00000000 	.word	0x00000000
 801b694:	3ff00000 	.word	0x3ff00000
 801b698:	3fe00000 	.word	0x3fe00000
 801b69c:	3fd33332 	.word	0x3fd33332
 801b6a0:	3ff00000 	.word	0x3ff00000
 801b6a4:	3fe90000 	.word	0x3fe90000
 801b6a8:	3fd20000 	.word	0x3fd20000
 801b6ac:	00000000 	.word	0x00000000

0801b6b0 <__kernel_rem_pio2>:
 801b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6b4:	ed2d 8b02 	vpush	{d8}
 801b6b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b6bc:	f112 0f14 	cmn.w	r2, #20
 801b6c0:	9308      	str	r3, [sp, #32]
 801b6c2:	9101      	str	r1, [sp, #4]
 801b6c4:	4bc6      	ldr	r3, [pc, #792]	; (801b9e0 <__kernel_rem_pio2+0x330>)
 801b6c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b6c8:	9009      	str	r0, [sp, #36]	; 0x24
 801b6ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b6ce:	9304      	str	r3, [sp, #16]
 801b6d0:	9b08      	ldr	r3, [sp, #32]
 801b6d2:	f103 33ff 	add.w	r3, r3, #4294967295
 801b6d6:	bfa8      	it	ge
 801b6d8:	1ed4      	subge	r4, r2, #3
 801b6da:	9306      	str	r3, [sp, #24]
 801b6dc:	bfb2      	itee	lt
 801b6de:	2400      	movlt	r4, #0
 801b6e0:	2318      	movge	r3, #24
 801b6e2:	fb94 f4f3 	sdivge	r4, r4, r3
 801b6e6:	f06f 0317 	mvn.w	r3, #23
 801b6ea:	fb04 3303 	mla	r3, r4, r3, r3
 801b6ee:	eb03 0a02 	add.w	sl, r3, r2
 801b6f2:	9b04      	ldr	r3, [sp, #16]
 801b6f4:	9a06      	ldr	r2, [sp, #24]
 801b6f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b9d0 <__kernel_rem_pio2+0x320>
 801b6fa:	eb03 0802 	add.w	r8, r3, r2
 801b6fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b700:	1aa7      	subs	r7, r4, r2
 801b702:	ae20      	add	r6, sp, #128	; 0x80
 801b704:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b708:	2500      	movs	r5, #0
 801b70a:	4545      	cmp	r5, r8
 801b70c:	dd18      	ble.n	801b740 <__kernel_rem_pio2+0x90>
 801b70e:	9b08      	ldr	r3, [sp, #32]
 801b710:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b714:	aa20      	add	r2, sp, #128	; 0x80
 801b716:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801b9d0 <__kernel_rem_pio2+0x320>
 801b71a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b71e:	f1c3 0301 	rsb	r3, r3, #1
 801b722:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b726:	9307      	str	r3, [sp, #28]
 801b728:	9b07      	ldr	r3, [sp, #28]
 801b72a:	9a04      	ldr	r2, [sp, #16]
 801b72c:	4443      	add	r3, r8
 801b72e:	429a      	cmp	r2, r3
 801b730:	db2f      	blt.n	801b792 <__kernel_rem_pio2+0xe2>
 801b732:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b736:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b73a:	462f      	mov	r7, r5
 801b73c:	2600      	movs	r6, #0
 801b73e:	e01b      	b.n	801b778 <__kernel_rem_pio2+0xc8>
 801b740:	42ef      	cmn	r7, r5
 801b742:	d407      	bmi.n	801b754 <__kernel_rem_pio2+0xa4>
 801b744:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b748:	f7e4 feec 	bl	8000524 <__aeabi_i2d>
 801b74c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b750:	3501      	adds	r5, #1
 801b752:	e7da      	b.n	801b70a <__kernel_rem_pio2+0x5a>
 801b754:	ec51 0b18 	vmov	r0, r1, d8
 801b758:	e7f8      	b.n	801b74c <__kernel_rem_pio2+0x9c>
 801b75a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b75e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b762:	f7e4 ff49 	bl	80005f8 <__aeabi_dmul>
 801b766:	4602      	mov	r2, r0
 801b768:	460b      	mov	r3, r1
 801b76a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b76e:	f7e4 fd8d 	bl	800028c <__adddf3>
 801b772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b776:	3601      	adds	r6, #1
 801b778:	9b06      	ldr	r3, [sp, #24]
 801b77a:	429e      	cmp	r6, r3
 801b77c:	f1a7 0708 	sub.w	r7, r7, #8
 801b780:	ddeb      	ble.n	801b75a <__kernel_rem_pio2+0xaa>
 801b782:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b786:	3508      	adds	r5, #8
 801b788:	ecab 7b02 	vstmia	fp!, {d7}
 801b78c:	f108 0801 	add.w	r8, r8, #1
 801b790:	e7ca      	b.n	801b728 <__kernel_rem_pio2+0x78>
 801b792:	9b04      	ldr	r3, [sp, #16]
 801b794:	aa0c      	add	r2, sp, #48	; 0x30
 801b796:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b79a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b79c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b79e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b7a2:	9c04      	ldr	r4, [sp, #16]
 801b7a4:	930a      	str	r3, [sp, #40]	; 0x28
 801b7a6:	ab98      	add	r3, sp, #608	; 0x260
 801b7a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b7ac:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b7b0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801b7b4:	f8cd b008 	str.w	fp, [sp, #8]
 801b7b8:	4625      	mov	r5, r4
 801b7ba:	2d00      	cmp	r5, #0
 801b7bc:	dc78      	bgt.n	801b8b0 <__kernel_rem_pio2+0x200>
 801b7be:	ec47 6b10 	vmov	d0, r6, r7
 801b7c2:	4650      	mov	r0, sl
 801b7c4:	f000 fda0 	bl	801c308 <scalbn>
 801b7c8:	ec57 6b10 	vmov	r6, r7, d0
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b7d2:	ee10 0a10 	vmov	r0, s0
 801b7d6:	4639      	mov	r1, r7
 801b7d8:	f7e4 ff0e 	bl	80005f8 <__aeabi_dmul>
 801b7dc:	ec41 0b10 	vmov	d0, r0, r1
 801b7e0:	f000 fd12 	bl	801c208 <floor>
 801b7e4:	4b7f      	ldr	r3, [pc, #508]	; (801b9e4 <__kernel_rem_pio2+0x334>)
 801b7e6:	ec51 0b10 	vmov	r0, r1, d0
 801b7ea:	2200      	movs	r2, #0
 801b7ec:	f7e4 ff04 	bl	80005f8 <__aeabi_dmul>
 801b7f0:	4602      	mov	r2, r0
 801b7f2:	460b      	mov	r3, r1
 801b7f4:	4630      	mov	r0, r6
 801b7f6:	4639      	mov	r1, r7
 801b7f8:	f7e4 fd46 	bl	8000288 <__aeabi_dsub>
 801b7fc:	460f      	mov	r7, r1
 801b7fe:	4606      	mov	r6, r0
 801b800:	f7e5 f9aa 	bl	8000b58 <__aeabi_d2iz>
 801b804:	9007      	str	r0, [sp, #28]
 801b806:	f7e4 fe8d 	bl	8000524 <__aeabi_i2d>
 801b80a:	4602      	mov	r2, r0
 801b80c:	460b      	mov	r3, r1
 801b80e:	4630      	mov	r0, r6
 801b810:	4639      	mov	r1, r7
 801b812:	f7e4 fd39 	bl	8000288 <__aeabi_dsub>
 801b816:	f1ba 0f00 	cmp.w	sl, #0
 801b81a:	4606      	mov	r6, r0
 801b81c:	460f      	mov	r7, r1
 801b81e:	dd70      	ble.n	801b902 <__kernel_rem_pio2+0x252>
 801b820:	1e62      	subs	r2, r4, #1
 801b822:	ab0c      	add	r3, sp, #48	; 0x30
 801b824:	9d07      	ldr	r5, [sp, #28]
 801b826:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b82a:	f1ca 0118 	rsb	r1, sl, #24
 801b82e:	fa40 f301 	asr.w	r3, r0, r1
 801b832:	441d      	add	r5, r3
 801b834:	408b      	lsls	r3, r1
 801b836:	1ac0      	subs	r0, r0, r3
 801b838:	ab0c      	add	r3, sp, #48	; 0x30
 801b83a:	9507      	str	r5, [sp, #28]
 801b83c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b840:	f1ca 0317 	rsb	r3, sl, #23
 801b844:	fa40 f303 	asr.w	r3, r0, r3
 801b848:	9302      	str	r3, [sp, #8]
 801b84a:	9b02      	ldr	r3, [sp, #8]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	dd66      	ble.n	801b91e <__kernel_rem_pio2+0x26e>
 801b850:	9b07      	ldr	r3, [sp, #28]
 801b852:	2200      	movs	r2, #0
 801b854:	3301      	adds	r3, #1
 801b856:	9307      	str	r3, [sp, #28]
 801b858:	4615      	mov	r5, r2
 801b85a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b85e:	4294      	cmp	r4, r2
 801b860:	f300 8099 	bgt.w	801b996 <__kernel_rem_pio2+0x2e6>
 801b864:	f1ba 0f00 	cmp.w	sl, #0
 801b868:	dd07      	ble.n	801b87a <__kernel_rem_pio2+0x1ca>
 801b86a:	f1ba 0f01 	cmp.w	sl, #1
 801b86e:	f000 80a5 	beq.w	801b9bc <__kernel_rem_pio2+0x30c>
 801b872:	f1ba 0f02 	cmp.w	sl, #2
 801b876:	f000 80c1 	beq.w	801b9fc <__kernel_rem_pio2+0x34c>
 801b87a:	9b02      	ldr	r3, [sp, #8]
 801b87c:	2b02      	cmp	r3, #2
 801b87e:	d14e      	bne.n	801b91e <__kernel_rem_pio2+0x26e>
 801b880:	4632      	mov	r2, r6
 801b882:	463b      	mov	r3, r7
 801b884:	4958      	ldr	r1, [pc, #352]	; (801b9e8 <__kernel_rem_pio2+0x338>)
 801b886:	2000      	movs	r0, #0
 801b888:	f7e4 fcfe 	bl	8000288 <__aeabi_dsub>
 801b88c:	4606      	mov	r6, r0
 801b88e:	460f      	mov	r7, r1
 801b890:	2d00      	cmp	r5, #0
 801b892:	d044      	beq.n	801b91e <__kernel_rem_pio2+0x26e>
 801b894:	4650      	mov	r0, sl
 801b896:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b9d8 <__kernel_rem_pio2+0x328>
 801b89a:	f000 fd35 	bl	801c308 <scalbn>
 801b89e:	4630      	mov	r0, r6
 801b8a0:	4639      	mov	r1, r7
 801b8a2:	ec53 2b10 	vmov	r2, r3, d0
 801b8a6:	f7e4 fcef 	bl	8000288 <__aeabi_dsub>
 801b8aa:	4606      	mov	r6, r0
 801b8ac:	460f      	mov	r7, r1
 801b8ae:	e036      	b.n	801b91e <__kernel_rem_pio2+0x26e>
 801b8b0:	4b4e      	ldr	r3, [pc, #312]	; (801b9ec <__kernel_rem_pio2+0x33c>)
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	4630      	mov	r0, r6
 801b8b6:	4639      	mov	r1, r7
 801b8b8:	f7e4 fe9e 	bl	80005f8 <__aeabi_dmul>
 801b8bc:	f7e5 f94c 	bl	8000b58 <__aeabi_d2iz>
 801b8c0:	f7e4 fe30 	bl	8000524 <__aeabi_i2d>
 801b8c4:	4b4a      	ldr	r3, [pc, #296]	; (801b9f0 <__kernel_rem_pio2+0x340>)
 801b8c6:	2200      	movs	r2, #0
 801b8c8:	4680      	mov	r8, r0
 801b8ca:	4689      	mov	r9, r1
 801b8cc:	f7e4 fe94 	bl	80005f8 <__aeabi_dmul>
 801b8d0:	4602      	mov	r2, r0
 801b8d2:	460b      	mov	r3, r1
 801b8d4:	4630      	mov	r0, r6
 801b8d6:	4639      	mov	r1, r7
 801b8d8:	f7e4 fcd6 	bl	8000288 <__aeabi_dsub>
 801b8dc:	f7e5 f93c 	bl	8000b58 <__aeabi_d2iz>
 801b8e0:	9b02      	ldr	r3, [sp, #8]
 801b8e2:	f843 0b04 	str.w	r0, [r3], #4
 801b8e6:	3d01      	subs	r5, #1
 801b8e8:	9302      	str	r3, [sp, #8]
 801b8ea:	ab70      	add	r3, sp, #448	; 0x1c0
 801b8ec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f4:	4640      	mov	r0, r8
 801b8f6:	4649      	mov	r1, r9
 801b8f8:	f7e4 fcc8 	bl	800028c <__adddf3>
 801b8fc:	4606      	mov	r6, r0
 801b8fe:	460f      	mov	r7, r1
 801b900:	e75b      	b.n	801b7ba <__kernel_rem_pio2+0x10a>
 801b902:	d105      	bne.n	801b910 <__kernel_rem_pio2+0x260>
 801b904:	1e63      	subs	r3, r4, #1
 801b906:	aa0c      	add	r2, sp, #48	; 0x30
 801b908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b90c:	15c3      	asrs	r3, r0, #23
 801b90e:	e79b      	b.n	801b848 <__kernel_rem_pio2+0x198>
 801b910:	4b38      	ldr	r3, [pc, #224]	; (801b9f4 <__kernel_rem_pio2+0x344>)
 801b912:	2200      	movs	r2, #0
 801b914:	f7e5 f8f6 	bl	8000b04 <__aeabi_dcmpge>
 801b918:	2800      	cmp	r0, #0
 801b91a:	d139      	bne.n	801b990 <__kernel_rem_pio2+0x2e0>
 801b91c:	9002      	str	r0, [sp, #8]
 801b91e:	2200      	movs	r2, #0
 801b920:	2300      	movs	r3, #0
 801b922:	4630      	mov	r0, r6
 801b924:	4639      	mov	r1, r7
 801b926:	f7e5 f8cf 	bl	8000ac8 <__aeabi_dcmpeq>
 801b92a:	2800      	cmp	r0, #0
 801b92c:	f000 80b4 	beq.w	801ba98 <__kernel_rem_pio2+0x3e8>
 801b930:	f104 3bff 	add.w	fp, r4, #4294967295
 801b934:	465b      	mov	r3, fp
 801b936:	2200      	movs	r2, #0
 801b938:	9904      	ldr	r1, [sp, #16]
 801b93a:	428b      	cmp	r3, r1
 801b93c:	da65      	bge.n	801ba0a <__kernel_rem_pio2+0x35a>
 801b93e:	2a00      	cmp	r2, #0
 801b940:	d07b      	beq.n	801ba3a <__kernel_rem_pio2+0x38a>
 801b942:	ab0c      	add	r3, sp, #48	; 0x30
 801b944:	f1aa 0a18 	sub.w	sl, sl, #24
 801b948:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	f000 80a0 	beq.w	801ba92 <__kernel_rem_pio2+0x3e2>
 801b952:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b9d8 <__kernel_rem_pio2+0x328>
 801b956:	4650      	mov	r0, sl
 801b958:	f000 fcd6 	bl	801c308 <scalbn>
 801b95c:	4f23      	ldr	r7, [pc, #140]	; (801b9ec <__kernel_rem_pio2+0x33c>)
 801b95e:	ec55 4b10 	vmov	r4, r5, d0
 801b962:	46d8      	mov	r8, fp
 801b964:	2600      	movs	r6, #0
 801b966:	f1b8 0f00 	cmp.w	r8, #0
 801b96a:	f280 80cf 	bge.w	801bb0c <__kernel_rem_pio2+0x45c>
 801b96e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801b9d0 <__kernel_rem_pio2+0x320>
 801b972:	465f      	mov	r7, fp
 801b974:	f04f 0800 	mov.w	r8, #0
 801b978:	2f00      	cmp	r7, #0
 801b97a:	f2c0 80fd 	blt.w	801bb78 <__kernel_rem_pio2+0x4c8>
 801b97e:	ab70      	add	r3, sp, #448	; 0x1c0
 801b980:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b9f8 <__kernel_rem_pio2+0x348>
 801b984:	ec55 4b18 	vmov	r4, r5, d8
 801b988:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801b98c:	2600      	movs	r6, #0
 801b98e:	e0e5      	b.n	801bb5c <__kernel_rem_pio2+0x4ac>
 801b990:	2302      	movs	r3, #2
 801b992:	9302      	str	r3, [sp, #8]
 801b994:	e75c      	b.n	801b850 <__kernel_rem_pio2+0x1a0>
 801b996:	f8db 3000 	ldr.w	r3, [fp]
 801b99a:	b955      	cbnz	r5, 801b9b2 <__kernel_rem_pio2+0x302>
 801b99c:	b123      	cbz	r3, 801b9a8 <__kernel_rem_pio2+0x2f8>
 801b99e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b9a2:	f8cb 3000 	str.w	r3, [fp]
 801b9a6:	2301      	movs	r3, #1
 801b9a8:	3201      	adds	r2, #1
 801b9aa:	f10b 0b04 	add.w	fp, fp, #4
 801b9ae:	461d      	mov	r5, r3
 801b9b0:	e755      	b.n	801b85e <__kernel_rem_pio2+0x1ae>
 801b9b2:	1acb      	subs	r3, r1, r3
 801b9b4:	f8cb 3000 	str.w	r3, [fp]
 801b9b8:	462b      	mov	r3, r5
 801b9ba:	e7f5      	b.n	801b9a8 <__kernel_rem_pio2+0x2f8>
 801b9bc:	1e62      	subs	r2, r4, #1
 801b9be:	ab0c      	add	r3, sp, #48	; 0x30
 801b9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b9c8:	a90c      	add	r1, sp, #48	; 0x30
 801b9ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b9ce:	e754      	b.n	801b87a <__kernel_rem_pio2+0x1ca>
	...
 801b9dc:	3ff00000 	.word	0x3ff00000
 801b9e0:	0801cdc0 	.word	0x0801cdc0
 801b9e4:	40200000 	.word	0x40200000
 801b9e8:	3ff00000 	.word	0x3ff00000
 801b9ec:	3e700000 	.word	0x3e700000
 801b9f0:	41700000 	.word	0x41700000
 801b9f4:	3fe00000 	.word	0x3fe00000
 801b9f8:	0801cd80 	.word	0x0801cd80
 801b9fc:	1e62      	subs	r2, r4, #1
 801b9fe:	ab0c      	add	r3, sp, #48	; 0x30
 801ba00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ba04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ba08:	e7de      	b.n	801b9c8 <__kernel_rem_pio2+0x318>
 801ba0a:	a90c      	add	r1, sp, #48	; 0x30
 801ba0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ba10:	3b01      	subs	r3, #1
 801ba12:	430a      	orrs	r2, r1
 801ba14:	e790      	b.n	801b938 <__kernel_rem_pio2+0x288>
 801ba16:	3301      	adds	r3, #1
 801ba18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801ba1c:	2900      	cmp	r1, #0
 801ba1e:	d0fa      	beq.n	801ba16 <__kernel_rem_pio2+0x366>
 801ba20:	9a08      	ldr	r2, [sp, #32]
 801ba22:	18e3      	adds	r3, r4, r3
 801ba24:	18a6      	adds	r6, r4, r2
 801ba26:	aa20      	add	r2, sp, #128	; 0x80
 801ba28:	1c65      	adds	r5, r4, #1
 801ba2a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801ba2e:	9302      	str	r3, [sp, #8]
 801ba30:	9b02      	ldr	r3, [sp, #8]
 801ba32:	42ab      	cmp	r3, r5
 801ba34:	da04      	bge.n	801ba40 <__kernel_rem_pio2+0x390>
 801ba36:	461c      	mov	r4, r3
 801ba38:	e6b5      	b.n	801b7a6 <__kernel_rem_pio2+0xf6>
 801ba3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ba3c:	2301      	movs	r3, #1
 801ba3e:	e7eb      	b.n	801ba18 <__kernel_rem_pio2+0x368>
 801ba40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ba46:	f7e4 fd6d 	bl	8000524 <__aeabi_i2d>
 801ba4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ba4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba50:	46b3      	mov	fp, r6
 801ba52:	461c      	mov	r4, r3
 801ba54:	2700      	movs	r7, #0
 801ba56:	f04f 0800 	mov.w	r8, #0
 801ba5a:	f04f 0900 	mov.w	r9, #0
 801ba5e:	9b06      	ldr	r3, [sp, #24]
 801ba60:	429f      	cmp	r7, r3
 801ba62:	dd06      	ble.n	801ba72 <__kernel_rem_pio2+0x3c2>
 801ba64:	ab70      	add	r3, sp, #448	; 0x1c0
 801ba66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ba6a:	e9c3 8900 	strd	r8, r9, [r3]
 801ba6e:	3501      	adds	r5, #1
 801ba70:	e7de      	b.n	801ba30 <__kernel_rem_pio2+0x380>
 801ba72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801ba76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ba7a:	f7e4 fdbd 	bl	80005f8 <__aeabi_dmul>
 801ba7e:	4602      	mov	r2, r0
 801ba80:	460b      	mov	r3, r1
 801ba82:	4640      	mov	r0, r8
 801ba84:	4649      	mov	r1, r9
 801ba86:	f7e4 fc01 	bl	800028c <__adddf3>
 801ba8a:	3701      	adds	r7, #1
 801ba8c:	4680      	mov	r8, r0
 801ba8e:	4689      	mov	r9, r1
 801ba90:	e7e5      	b.n	801ba5e <__kernel_rem_pio2+0x3ae>
 801ba92:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ba96:	e754      	b.n	801b942 <__kernel_rem_pio2+0x292>
 801ba98:	ec47 6b10 	vmov	d0, r6, r7
 801ba9c:	f1ca 0000 	rsb	r0, sl, #0
 801baa0:	f000 fc32 	bl	801c308 <scalbn>
 801baa4:	ec57 6b10 	vmov	r6, r7, d0
 801baa8:	4b9f      	ldr	r3, [pc, #636]	; (801bd28 <__kernel_rem_pio2+0x678>)
 801baaa:	ee10 0a10 	vmov	r0, s0
 801baae:	2200      	movs	r2, #0
 801bab0:	4639      	mov	r1, r7
 801bab2:	f7e5 f827 	bl	8000b04 <__aeabi_dcmpge>
 801bab6:	b300      	cbz	r0, 801bafa <__kernel_rem_pio2+0x44a>
 801bab8:	4b9c      	ldr	r3, [pc, #624]	; (801bd2c <__kernel_rem_pio2+0x67c>)
 801baba:	2200      	movs	r2, #0
 801babc:	4630      	mov	r0, r6
 801babe:	4639      	mov	r1, r7
 801bac0:	f7e4 fd9a 	bl	80005f8 <__aeabi_dmul>
 801bac4:	f7e5 f848 	bl	8000b58 <__aeabi_d2iz>
 801bac8:	4605      	mov	r5, r0
 801baca:	f7e4 fd2b 	bl	8000524 <__aeabi_i2d>
 801bace:	4b96      	ldr	r3, [pc, #600]	; (801bd28 <__kernel_rem_pio2+0x678>)
 801bad0:	2200      	movs	r2, #0
 801bad2:	f7e4 fd91 	bl	80005f8 <__aeabi_dmul>
 801bad6:	460b      	mov	r3, r1
 801bad8:	4602      	mov	r2, r0
 801bada:	4639      	mov	r1, r7
 801badc:	4630      	mov	r0, r6
 801bade:	f7e4 fbd3 	bl	8000288 <__aeabi_dsub>
 801bae2:	f7e5 f839 	bl	8000b58 <__aeabi_d2iz>
 801bae6:	f104 0b01 	add.w	fp, r4, #1
 801baea:	ab0c      	add	r3, sp, #48	; 0x30
 801baec:	f10a 0a18 	add.w	sl, sl, #24
 801baf0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801baf4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801baf8:	e72b      	b.n	801b952 <__kernel_rem_pio2+0x2a2>
 801bafa:	4630      	mov	r0, r6
 801bafc:	4639      	mov	r1, r7
 801bafe:	f7e5 f82b 	bl	8000b58 <__aeabi_d2iz>
 801bb02:	ab0c      	add	r3, sp, #48	; 0x30
 801bb04:	46a3      	mov	fp, r4
 801bb06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bb0a:	e722      	b.n	801b952 <__kernel_rem_pio2+0x2a2>
 801bb0c:	ab70      	add	r3, sp, #448	; 0x1c0
 801bb0e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801bb12:	ab0c      	add	r3, sp, #48	; 0x30
 801bb14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801bb18:	f7e4 fd04 	bl	8000524 <__aeabi_i2d>
 801bb1c:	4622      	mov	r2, r4
 801bb1e:	462b      	mov	r3, r5
 801bb20:	f7e4 fd6a 	bl	80005f8 <__aeabi_dmul>
 801bb24:	4632      	mov	r2, r6
 801bb26:	e9c9 0100 	strd	r0, r1, [r9]
 801bb2a:	463b      	mov	r3, r7
 801bb2c:	4620      	mov	r0, r4
 801bb2e:	4629      	mov	r1, r5
 801bb30:	f7e4 fd62 	bl	80005f8 <__aeabi_dmul>
 801bb34:	f108 38ff 	add.w	r8, r8, #4294967295
 801bb38:	4604      	mov	r4, r0
 801bb3a:	460d      	mov	r5, r1
 801bb3c:	e713      	b.n	801b966 <__kernel_rem_pio2+0x2b6>
 801bb3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801bb42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801bb46:	f7e4 fd57 	bl	80005f8 <__aeabi_dmul>
 801bb4a:	4602      	mov	r2, r0
 801bb4c:	460b      	mov	r3, r1
 801bb4e:	4620      	mov	r0, r4
 801bb50:	4629      	mov	r1, r5
 801bb52:	f7e4 fb9b 	bl	800028c <__adddf3>
 801bb56:	3601      	adds	r6, #1
 801bb58:	4604      	mov	r4, r0
 801bb5a:	460d      	mov	r5, r1
 801bb5c:	9b04      	ldr	r3, [sp, #16]
 801bb5e:	429e      	cmp	r6, r3
 801bb60:	dc01      	bgt.n	801bb66 <__kernel_rem_pio2+0x4b6>
 801bb62:	45b0      	cmp	r8, r6
 801bb64:	daeb      	bge.n	801bb3e <__kernel_rem_pio2+0x48e>
 801bb66:	ab48      	add	r3, sp, #288	; 0x120
 801bb68:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bb6c:	e9c3 4500 	strd	r4, r5, [r3]
 801bb70:	3f01      	subs	r7, #1
 801bb72:	f108 0801 	add.w	r8, r8, #1
 801bb76:	e6ff      	b.n	801b978 <__kernel_rem_pio2+0x2c8>
 801bb78:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bb7a:	2b02      	cmp	r3, #2
 801bb7c:	dc0b      	bgt.n	801bb96 <__kernel_rem_pio2+0x4e6>
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	dc6e      	bgt.n	801bc60 <__kernel_rem_pio2+0x5b0>
 801bb82:	d045      	beq.n	801bc10 <__kernel_rem_pio2+0x560>
 801bb84:	9b07      	ldr	r3, [sp, #28]
 801bb86:	f003 0007 	and.w	r0, r3, #7
 801bb8a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801bb8e:	ecbd 8b02 	vpop	{d8}
 801bb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb96:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bb98:	2b03      	cmp	r3, #3
 801bb9a:	d1f3      	bne.n	801bb84 <__kernel_rem_pio2+0x4d4>
 801bb9c:	ab48      	add	r3, sp, #288	; 0x120
 801bb9e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801bba2:	46d0      	mov	r8, sl
 801bba4:	46d9      	mov	r9, fp
 801bba6:	f1b9 0f00 	cmp.w	r9, #0
 801bbaa:	f1a8 0808 	sub.w	r8, r8, #8
 801bbae:	dc64      	bgt.n	801bc7a <__kernel_rem_pio2+0x5ca>
 801bbb0:	465c      	mov	r4, fp
 801bbb2:	2c01      	cmp	r4, #1
 801bbb4:	f1aa 0a08 	sub.w	sl, sl, #8
 801bbb8:	dc7e      	bgt.n	801bcb8 <__kernel_rem_pio2+0x608>
 801bbba:	2000      	movs	r0, #0
 801bbbc:	2100      	movs	r1, #0
 801bbbe:	f1bb 0f01 	cmp.w	fp, #1
 801bbc2:	f300 8097 	bgt.w	801bcf4 <__kernel_rem_pio2+0x644>
 801bbc6:	9b02      	ldr	r3, [sp, #8]
 801bbc8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801bbcc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	f040 8099 	bne.w	801bd08 <__kernel_rem_pio2+0x658>
 801bbd6:	9b01      	ldr	r3, [sp, #4]
 801bbd8:	e9c3 5600 	strd	r5, r6, [r3]
 801bbdc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801bbe0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bbe4:	e7ce      	b.n	801bb84 <__kernel_rem_pio2+0x4d4>
 801bbe6:	ab48      	add	r3, sp, #288	; 0x120
 801bbe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbf0:	f7e4 fb4c 	bl	800028c <__adddf3>
 801bbf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bbf8:	f1bb 0f00 	cmp.w	fp, #0
 801bbfc:	daf3      	bge.n	801bbe6 <__kernel_rem_pio2+0x536>
 801bbfe:	9b02      	ldr	r3, [sp, #8]
 801bc00:	b113      	cbz	r3, 801bc08 <__kernel_rem_pio2+0x558>
 801bc02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc06:	4619      	mov	r1, r3
 801bc08:	9b01      	ldr	r3, [sp, #4]
 801bc0a:	e9c3 0100 	strd	r0, r1, [r3]
 801bc0e:	e7b9      	b.n	801bb84 <__kernel_rem_pio2+0x4d4>
 801bc10:	2000      	movs	r0, #0
 801bc12:	2100      	movs	r1, #0
 801bc14:	e7f0      	b.n	801bbf8 <__kernel_rem_pio2+0x548>
 801bc16:	ab48      	add	r3, sp, #288	; 0x120
 801bc18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc20:	f7e4 fb34 	bl	800028c <__adddf3>
 801bc24:	3c01      	subs	r4, #1
 801bc26:	2c00      	cmp	r4, #0
 801bc28:	daf5      	bge.n	801bc16 <__kernel_rem_pio2+0x566>
 801bc2a:	9b02      	ldr	r3, [sp, #8]
 801bc2c:	b1e3      	cbz	r3, 801bc68 <__kernel_rem_pio2+0x5b8>
 801bc2e:	4602      	mov	r2, r0
 801bc30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc34:	9c01      	ldr	r4, [sp, #4]
 801bc36:	e9c4 2300 	strd	r2, r3, [r4]
 801bc3a:	4602      	mov	r2, r0
 801bc3c:	460b      	mov	r3, r1
 801bc3e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801bc42:	f7e4 fb21 	bl	8000288 <__aeabi_dsub>
 801bc46:	ad4a      	add	r5, sp, #296	; 0x128
 801bc48:	2401      	movs	r4, #1
 801bc4a:	45a3      	cmp	fp, r4
 801bc4c:	da0f      	bge.n	801bc6e <__kernel_rem_pio2+0x5be>
 801bc4e:	9b02      	ldr	r3, [sp, #8]
 801bc50:	b113      	cbz	r3, 801bc58 <__kernel_rem_pio2+0x5a8>
 801bc52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc56:	4619      	mov	r1, r3
 801bc58:	9b01      	ldr	r3, [sp, #4]
 801bc5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801bc5e:	e791      	b.n	801bb84 <__kernel_rem_pio2+0x4d4>
 801bc60:	465c      	mov	r4, fp
 801bc62:	2000      	movs	r0, #0
 801bc64:	2100      	movs	r1, #0
 801bc66:	e7de      	b.n	801bc26 <__kernel_rem_pio2+0x576>
 801bc68:	4602      	mov	r2, r0
 801bc6a:	460b      	mov	r3, r1
 801bc6c:	e7e2      	b.n	801bc34 <__kernel_rem_pio2+0x584>
 801bc6e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801bc72:	f7e4 fb0b 	bl	800028c <__adddf3>
 801bc76:	3401      	adds	r4, #1
 801bc78:	e7e7      	b.n	801bc4a <__kernel_rem_pio2+0x59a>
 801bc7a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801bc7e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801bc82:	4620      	mov	r0, r4
 801bc84:	4632      	mov	r2, r6
 801bc86:	463b      	mov	r3, r7
 801bc88:	4629      	mov	r1, r5
 801bc8a:	f7e4 faff 	bl	800028c <__adddf3>
 801bc8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc92:	4602      	mov	r2, r0
 801bc94:	460b      	mov	r3, r1
 801bc96:	4620      	mov	r0, r4
 801bc98:	4629      	mov	r1, r5
 801bc9a:	f7e4 faf5 	bl	8000288 <__aeabi_dsub>
 801bc9e:	4632      	mov	r2, r6
 801bca0:	463b      	mov	r3, r7
 801bca2:	f7e4 faf3 	bl	800028c <__adddf3>
 801bca6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bcaa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801bcae:	ed88 7b00 	vstr	d7, [r8]
 801bcb2:	f109 39ff 	add.w	r9, r9, #4294967295
 801bcb6:	e776      	b.n	801bba6 <__kernel_rem_pio2+0x4f6>
 801bcb8:	e9da 8900 	ldrd	r8, r9, [sl]
 801bcbc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801bcc0:	4640      	mov	r0, r8
 801bcc2:	4632      	mov	r2, r6
 801bcc4:	463b      	mov	r3, r7
 801bcc6:	4649      	mov	r1, r9
 801bcc8:	f7e4 fae0 	bl	800028c <__adddf3>
 801bccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bcd0:	4602      	mov	r2, r0
 801bcd2:	460b      	mov	r3, r1
 801bcd4:	4640      	mov	r0, r8
 801bcd6:	4649      	mov	r1, r9
 801bcd8:	f7e4 fad6 	bl	8000288 <__aeabi_dsub>
 801bcdc:	4632      	mov	r2, r6
 801bcde:	463b      	mov	r3, r7
 801bce0:	f7e4 fad4 	bl	800028c <__adddf3>
 801bce4:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bce8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bcec:	ed8a 7b00 	vstr	d7, [sl]
 801bcf0:	3c01      	subs	r4, #1
 801bcf2:	e75e      	b.n	801bbb2 <__kernel_rem_pio2+0x502>
 801bcf4:	ab48      	add	r3, sp, #288	; 0x120
 801bcf6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcfe:	f7e4 fac5 	bl	800028c <__adddf3>
 801bd02:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bd06:	e75a      	b.n	801bbbe <__kernel_rem_pio2+0x50e>
 801bd08:	9b01      	ldr	r3, [sp, #4]
 801bd0a:	9a01      	ldr	r2, [sp, #4]
 801bd0c:	601d      	str	r5, [r3, #0]
 801bd0e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801bd12:	605c      	str	r4, [r3, #4]
 801bd14:	609f      	str	r7, [r3, #8]
 801bd16:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801bd1a:	60d3      	str	r3, [r2, #12]
 801bd1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bd20:	6110      	str	r0, [r2, #16]
 801bd22:	6153      	str	r3, [r2, #20]
 801bd24:	e72e      	b.n	801bb84 <__kernel_rem_pio2+0x4d4>
 801bd26:	bf00      	nop
 801bd28:	41700000 	.word	0x41700000
 801bd2c:	3e700000 	.word	0x3e700000

0801bd30 <__kernel_sin>:
 801bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd34:	ed2d 8b04 	vpush	{d8-d9}
 801bd38:	eeb0 8a41 	vmov.f32	s16, s2
 801bd3c:	eef0 8a61 	vmov.f32	s17, s3
 801bd40:	ec55 4b10 	vmov	r4, r5, d0
 801bd44:	b083      	sub	sp, #12
 801bd46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bd4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801bd4e:	9001      	str	r0, [sp, #4]
 801bd50:	da06      	bge.n	801bd60 <__kernel_sin+0x30>
 801bd52:	ee10 0a10 	vmov	r0, s0
 801bd56:	4629      	mov	r1, r5
 801bd58:	f7e4 fefe 	bl	8000b58 <__aeabi_d2iz>
 801bd5c:	2800      	cmp	r0, #0
 801bd5e:	d051      	beq.n	801be04 <__kernel_sin+0xd4>
 801bd60:	4622      	mov	r2, r4
 801bd62:	462b      	mov	r3, r5
 801bd64:	4620      	mov	r0, r4
 801bd66:	4629      	mov	r1, r5
 801bd68:	f7e4 fc46 	bl	80005f8 <__aeabi_dmul>
 801bd6c:	4682      	mov	sl, r0
 801bd6e:	468b      	mov	fp, r1
 801bd70:	4602      	mov	r2, r0
 801bd72:	460b      	mov	r3, r1
 801bd74:	4620      	mov	r0, r4
 801bd76:	4629      	mov	r1, r5
 801bd78:	f7e4 fc3e 	bl	80005f8 <__aeabi_dmul>
 801bd7c:	a341      	add	r3, pc, #260	; (adr r3, 801be84 <__kernel_sin+0x154>)
 801bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd82:	4680      	mov	r8, r0
 801bd84:	4689      	mov	r9, r1
 801bd86:	4650      	mov	r0, sl
 801bd88:	4659      	mov	r1, fp
 801bd8a:	f7e4 fc35 	bl	80005f8 <__aeabi_dmul>
 801bd8e:	a33f      	add	r3, pc, #252	; (adr r3, 801be8c <__kernel_sin+0x15c>)
 801bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd94:	f7e4 fa78 	bl	8000288 <__aeabi_dsub>
 801bd98:	4652      	mov	r2, sl
 801bd9a:	465b      	mov	r3, fp
 801bd9c:	f7e4 fc2c 	bl	80005f8 <__aeabi_dmul>
 801bda0:	a33c      	add	r3, pc, #240	; (adr r3, 801be94 <__kernel_sin+0x164>)
 801bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda6:	f7e4 fa71 	bl	800028c <__adddf3>
 801bdaa:	4652      	mov	r2, sl
 801bdac:	465b      	mov	r3, fp
 801bdae:	f7e4 fc23 	bl	80005f8 <__aeabi_dmul>
 801bdb2:	a33a      	add	r3, pc, #232	; (adr r3, 801be9c <__kernel_sin+0x16c>)
 801bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdb8:	f7e4 fa66 	bl	8000288 <__aeabi_dsub>
 801bdbc:	4652      	mov	r2, sl
 801bdbe:	465b      	mov	r3, fp
 801bdc0:	f7e4 fc1a 	bl	80005f8 <__aeabi_dmul>
 801bdc4:	a337      	add	r3, pc, #220	; (adr r3, 801bea4 <__kernel_sin+0x174>)
 801bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdca:	f7e4 fa5f 	bl	800028c <__adddf3>
 801bdce:	9b01      	ldr	r3, [sp, #4]
 801bdd0:	4606      	mov	r6, r0
 801bdd2:	460f      	mov	r7, r1
 801bdd4:	b9eb      	cbnz	r3, 801be12 <__kernel_sin+0xe2>
 801bdd6:	4602      	mov	r2, r0
 801bdd8:	460b      	mov	r3, r1
 801bdda:	4650      	mov	r0, sl
 801bddc:	4659      	mov	r1, fp
 801bdde:	f7e4 fc0b 	bl	80005f8 <__aeabi_dmul>
 801bde2:	a325      	add	r3, pc, #148	; (adr r3, 801be78 <__kernel_sin+0x148>)
 801bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bde8:	f7e4 fa4e 	bl	8000288 <__aeabi_dsub>
 801bdec:	4642      	mov	r2, r8
 801bdee:	464b      	mov	r3, r9
 801bdf0:	f7e4 fc02 	bl	80005f8 <__aeabi_dmul>
 801bdf4:	4602      	mov	r2, r0
 801bdf6:	460b      	mov	r3, r1
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	4629      	mov	r1, r5
 801bdfc:	f7e4 fa46 	bl	800028c <__adddf3>
 801be00:	4604      	mov	r4, r0
 801be02:	460d      	mov	r5, r1
 801be04:	ec45 4b10 	vmov	d0, r4, r5
 801be08:	b003      	add	sp, #12
 801be0a:	ecbd 8b04 	vpop	{d8-d9}
 801be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be12:	4b1b      	ldr	r3, [pc, #108]	; (801be80 <__kernel_sin+0x150>)
 801be14:	ec51 0b18 	vmov	r0, r1, d8
 801be18:	2200      	movs	r2, #0
 801be1a:	f7e4 fbed 	bl	80005f8 <__aeabi_dmul>
 801be1e:	4632      	mov	r2, r6
 801be20:	ec41 0b19 	vmov	d9, r0, r1
 801be24:	463b      	mov	r3, r7
 801be26:	4640      	mov	r0, r8
 801be28:	4649      	mov	r1, r9
 801be2a:	f7e4 fbe5 	bl	80005f8 <__aeabi_dmul>
 801be2e:	4602      	mov	r2, r0
 801be30:	460b      	mov	r3, r1
 801be32:	ec51 0b19 	vmov	r0, r1, d9
 801be36:	f7e4 fa27 	bl	8000288 <__aeabi_dsub>
 801be3a:	4652      	mov	r2, sl
 801be3c:	465b      	mov	r3, fp
 801be3e:	f7e4 fbdb 	bl	80005f8 <__aeabi_dmul>
 801be42:	ec53 2b18 	vmov	r2, r3, d8
 801be46:	f7e4 fa1f 	bl	8000288 <__aeabi_dsub>
 801be4a:	a30b      	add	r3, pc, #44	; (adr r3, 801be78 <__kernel_sin+0x148>)
 801be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be50:	4606      	mov	r6, r0
 801be52:	460f      	mov	r7, r1
 801be54:	4640      	mov	r0, r8
 801be56:	4649      	mov	r1, r9
 801be58:	f7e4 fbce 	bl	80005f8 <__aeabi_dmul>
 801be5c:	4602      	mov	r2, r0
 801be5e:	460b      	mov	r3, r1
 801be60:	4630      	mov	r0, r6
 801be62:	4639      	mov	r1, r7
 801be64:	f7e4 fa12 	bl	800028c <__adddf3>
 801be68:	4602      	mov	r2, r0
 801be6a:	460b      	mov	r3, r1
 801be6c:	4620      	mov	r0, r4
 801be6e:	4629      	mov	r1, r5
 801be70:	f7e4 fa0a 	bl	8000288 <__aeabi_dsub>
 801be74:	e7c4      	b.n	801be00 <__kernel_sin+0xd0>
 801be76:	bf00      	nop
 801be78:	55555549 	.word	0x55555549
 801be7c:	3fc55555 	.word	0x3fc55555
 801be80:	3fe00000 	.word	0x3fe00000
 801be84:	5acfd57c 	.word	0x5acfd57c
 801be88:	3de5d93a 	.word	0x3de5d93a
 801be8c:	8a2b9ceb 	.word	0x8a2b9ceb
 801be90:	3e5ae5e6 	.word	0x3e5ae5e6
 801be94:	57b1fe7d 	.word	0x57b1fe7d
 801be98:	3ec71de3 	.word	0x3ec71de3
 801be9c:	19c161d5 	.word	0x19c161d5
 801bea0:	3f2a01a0 	.word	0x3f2a01a0
 801bea4:	1110f8a6 	.word	0x1110f8a6
 801bea8:	3f811111 	.word	0x3f811111
 801beac:	00000000 	.word	0x00000000

0801beb0 <atan>:
 801beb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb4:	ec55 4b10 	vmov	r4, r5, d0
 801beb8:	4bc3      	ldr	r3, [pc, #780]	; (801c1c8 <atan+0x318>)
 801beba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bebe:	429e      	cmp	r6, r3
 801bec0:	46ab      	mov	fp, r5
 801bec2:	dd18      	ble.n	801bef6 <atan+0x46>
 801bec4:	4bc1      	ldr	r3, [pc, #772]	; (801c1cc <atan+0x31c>)
 801bec6:	429e      	cmp	r6, r3
 801bec8:	dc01      	bgt.n	801bece <atan+0x1e>
 801beca:	d109      	bne.n	801bee0 <atan+0x30>
 801becc:	b144      	cbz	r4, 801bee0 <atan+0x30>
 801bece:	4622      	mov	r2, r4
 801bed0:	462b      	mov	r3, r5
 801bed2:	4620      	mov	r0, r4
 801bed4:	4629      	mov	r1, r5
 801bed6:	f7e4 f9d9 	bl	800028c <__adddf3>
 801beda:	4604      	mov	r4, r0
 801bedc:	460d      	mov	r5, r1
 801bede:	e006      	b.n	801beee <atan+0x3e>
 801bee0:	f1bb 0f00 	cmp.w	fp, #0
 801bee4:	f300 8131 	bgt.w	801c14a <atan+0x29a>
 801bee8:	a59b      	add	r5, pc, #620	; (adr r5, 801c158 <atan+0x2a8>)
 801beea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801beee:	ec45 4b10 	vmov	d0, r4, r5
 801bef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bef6:	4bb6      	ldr	r3, [pc, #728]	; (801c1d0 <atan+0x320>)
 801bef8:	429e      	cmp	r6, r3
 801befa:	dc14      	bgt.n	801bf26 <atan+0x76>
 801befc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801bf00:	429e      	cmp	r6, r3
 801bf02:	dc0d      	bgt.n	801bf20 <atan+0x70>
 801bf04:	a396      	add	r3, pc, #600	; (adr r3, 801c160 <atan+0x2b0>)
 801bf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf0a:	ee10 0a10 	vmov	r0, s0
 801bf0e:	4629      	mov	r1, r5
 801bf10:	f7e4 f9bc 	bl	800028c <__adddf3>
 801bf14:	4baf      	ldr	r3, [pc, #700]	; (801c1d4 <atan+0x324>)
 801bf16:	2200      	movs	r2, #0
 801bf18:	f7e4 fdfe 	bl	8000b18 <__aeabi_dcmpgt>
 801bf1c:	2800      	cmp	r0, #0
 801bf1e:	d1e6      	bne.n	801beee <atan+0x3e>
 801bf20:	f04f 3aff 	mov.w	sl, #4294967295
 801bf24:	e02b      	b.n	801bf7e <atan+0xce>
 801bf26:	f000 f963 	bl	801c1f0 <fabs>
 801bf2a:	4bab      	ldr	r3, [pc, #684]	; (801c1d8 <atan+0x328>)
 801bf2c:	429e      	cmp	r6, r3
 801bf2e:	ec55 4b10 	vmov	r4, r5, d0
 801bf32:	f300 80bf 	bgt.w	801c0b4 <atan+0x204>
 801bf36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801bf3a:	429e      	cmp	r6, r3
 801bf3c:	f300 80a0 	bgt.w	801c080 <atan+0x1d0>
 801bf40:	ee10 2a10 	vmov	r2, s0
 801bf44:	ee10 0a10 	vmov	r0, s0
 801bf48:	462b      	mov	r3, r5
 801bf4a:	4629      	mov	r1, r5
 801bf4c:	f7e4 f99e 	bl	800028c <__adddf3>
 801bf50:	4ba0      	ldr	r3, [pc, #640]	; (801c1d4 <atan+0x324>)
 801bf52:	2200      	movs	r2, #0
 801bf54:	f7e4 f998 	bl	8000288 <__aeabi_dsub>
 801bf58:	2200      	movs	r2, #0
 801bf5a:	4606      	mov	r6, r0
 801bf5c:	460f      	mov	r7, r1
 801bf5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bf62:	4620      	mov	r0, r4
 801bf64:	4629      	mov	r1, r5
 801bf66:	f7e4 f991 	bl	800028c <__adddf3>
 801bf6a:	4602      	mov	r2, r0
 801bf6c:	460b      	mov	r3, r1
 801bf6e:	4630      	mov	r0, r6
 801bf70:	4639      	mov	r1, r7
 801bf72:	f7e4 fc6b 	bl	800084c <__aeabi_ddiv>
 801bf76:	f04f 0a00 	mov.w	sl, #0
 801bf7a:	4604      	mov	r4, r0
 801bf7c:	460d      	mov	r5, r1
 801bf7e:	4622      	mov	r2, r4
 801bf80:	462b      	mov	r3, r5
 801bf82:	4620      	mov	r0, r4
 801bf84:	4629      	mov	r1, r5
 801bf86:	f7e4 fb37 	bl	80005f8 <__aeabi_dmul>
 801bf8a:	4602      	mov	r2, r0
 801bf8c:	460b      	mov	r3, r1
 801bf8e:	4680      	mov	r8, r0
 801bf90:	4689      	mov	r9, r1
 801bf92:	f7e4 fb31 	bl	80005f8 <__aeabi_dmul>
 801bf96:	a374      	add	r3, pc, #464	; (adr r3, 801c168 <atan+0x2b8>)
 801bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9c:	4606      	mov	r6, r0
 801bf9e:	460f      	mov	r7, r1
 801bfa0:	f7e4 fb2a 	bl	80005f8 <__aeabi_dmul>
 801bfa4:	a372      	add	r3, pc, #456	; (adr r3, 801c170 <atan+0x2c0>)
 801bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfaa:	f7e4 f96f 	bl	800028c <__adddf3>
 801bfae:	4632      	mov	r2, r6
 801bfb0:	463b      	mov	r3, r7
 801bfb2:	f7e4 fb21 	bl	80005f8 <__aeabi_dmul>
 801bfb6:	a370      	add	r3, pc, #448	; (adr r3, 801c178 <atan+0x2c8>)
 801bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfbc:	f7e4 f966 	bl	800028c <__adddf3>
 801bfc0:	4632      	mov	r2, r6
 801bfc2:	463b      	mov	r3, r7
 801bfc4:	f7e4 fb18 	bl	80005f8 <__aeabi_dmul>
 801bfc8:	a36d      	add	r3, pc, #436	; (adr r3, 801c180 <atan+0x2d0>)
 801bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfce:	f7e4 f95d 	bl	800028c <__adddf3>
 801bfd2:	4632      	mov	r2, r6
 801bfd4:	463b      	mov	r3, r7
 801bfd6:	f7e4 fb0f 	bl	80005f8 <__aeabi_dmul>
 801bfda:	a36b      	add	r3, pc, #428	; (adr r3, 801c188 <atan+0x2d8>)
 801bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfe0:	f7e4 f954 	bl	800028c <__adddf3>
 801bfe4:	4632      	mov	r2, r6
 801bfe6:	463b      	mov	r3, r7
 801bfe8:	f7e4 fb06 	bl	80005f8 <__aeabi_dmul>
 801bfec:	a368      	add	r3, pc, #416	; (adr r3, 801c190 <atan+0x2e0>)
 801bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bff2:	f7e4 f94b 	bl	800028c <__adddf3>
 801bff6:	4642      	mov	r2, r8
 801bff8:	464b      	mov	r3, r9
 801bffa:	f7e4 fafd 	bl	80005f8 <__aeabi_dmul>
 801bffe:	a366      	add	r3, pc, #408	; (adr r3, 801c198 <atan+0x2e8>)
 801c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c004:	4680      	mov	r8, r0
 801c006:	4689      	mov	r9, r1
 801c008:	4630      	mov	r0, r6
 801c00a:	4639      	mov	r1, r7
 801c00c:	f7e4 faf4 	bl	80005f8 <__aeabi_dmul>
 801c010:	a363      	add	r3, pc, #396	; (adr r3, 801c1a0 <atan+0x2f0>)
 801c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c016:	f7e4 f937 	bl	8000288 <__aeabi_dsub>
 801c01a:	4632      	mov	r2, r6
 801c01c:	463b      	mov	r3, r7
 801c01e:	f7e4 faeb 	bl	80005f8 <__aeabi_dmul>
 801c022:	a361      	add	r3, pc, #388	; (adr r3, 801c1a8 <atan+0x2f8>)
 801c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c028:	f7e4 f92e 	bl	8000288 <__aeabi_dsub>
 801c02c:	4632      	mov	r2, r6
 801c02e:	463b      	mov	r3, r7
 801c030:	f7e4 fae2 	bl	80005f8 <__aeabi_dmul>
 801c034:	a35e      	add	r3, pc, #376	; (adr r3, 801c1b0 <atan+0x300>)
 801c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c03a:	f7e4 f925 	bl	8000288 <__aeabi_dsub>
 801c03e:	4632      	mov	r2, r6
 801c040:	463b      	mov	r3, r7
 801c042:	f7e4 fad9 	bl	80005f8 <__aeabi_dmul>
 801c046:	a35c      	add	r3, pc, #368	; (adr r3, 801c1b8 <atan+0x308>)
 801c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c04c:	f7e4 f91c 	bl	8000288 <__aeabi_dsub>
 801c050:	4632      	mov	r2, r6
 801c052:	463b      	mov	r3, r7
 801c054:	f7e4 fad0 	bl	80005f8 <__aeabi_dmul>
 801c058:	4602      	mov	r2, r0
 801c05a:	460b      	mov	r3, r1
 801c05c:	4640      	mov	r0, r8
 801c05e:	4649      	mov	r1, r9
 801c060:	f7e4 f914 	bl	800028c <__adddf3>
 801c064:	4622      	mov	r2, r4
 801c066:	462b      	mov	r3, r5
 801c068:	f7e4 fac6 	bl	80005f8 <__aeabi_dmul>
 801c06c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801c070:	4602      	mov	r2, r0
 801c072:	460b      	mov	r3, r1
 801c074:	d14b      	bne.n	801c10e <atan+0x25e>
 801c076:	4620      	mov	r0, r4
 801c078:	4629      	mov	r1, r5
 801c07a:	f7e4 f905 	bl	8000288 <__aeabi_dsub>
 801c07e:	e72c      	b.n	801beda <atan+0x2a>
 801c080:	ee10 0a10 	vmov	r0, s0
 801c084:	4b53      	ldr	r3, [pc, #332]	; (801c1d4 <atan+0x324>)
 801c086:	2200      	movs	r2, #0
 801c088:	4629      	mov	r1, r5
 801c08a:	f7e4 f8fd 	bl	8000288 <__aeabi_dsub>
 801c08e:	4b51      	ldr	r3, [pc, #324]	; (801c1d4 <atan+0x324>)
 801c090:	4606      	mov	r6, r0
 801c092:	460f      	mov	r7, r1
 801c094:	2200      	movs	r2, #0
 801c096:	4620      	mov	r0, r4
 801c098:	4629      	mov	r1, r5
 801c09a:	f7e4 f8f7 	bl	800028c <__adddf3>
 801c09e:	4602      	mov	r2, r0
 801c0a0:	460b      	mov	r3, r1
 801c0a2:	4630      	mov	r0, r6
 801c0a4:	4639      	mov	r1, r7
 801c0a6:	f7e4 fbd1 	bl	800084c <__aeabi_ddiv>
 801c0aa:	f04f 0a01 	mov.w	sl, #1
 801c0ae:	4604      	mov	r4, r0
 801c0b0:	460d      	mov	r5, r1
 801c0b2:	e764      	b.n	801bf7e <atan+0xce>
 801c0b4:	4b49      	ldr	r3, [pc, #292]	; (801c1dc <atan+0x32c>)
 801c0b6:	429e      	cmp	r6, r3
 801c0b8:	da1d      	bge.n	801c0f6 <atan+0x246>
 801c0ba:	ee10 0a10 	vmov	r0, s0
 801c0be:	4b48      	ldr	r3, [pc, #288]	; (801c1e0 <atan+0x330>)
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	4629      	mov	r1, r5
 801c0c4:	f7e4 f8e0 	bl	8000288 <__aeabi_dsub>
 801c0c8:	4b45      	ldr	r3, [pc, #276]	; (801c1e0 <atan+0x330>)
 801c0ca:	4606      	mov	r6, r0
 801c0cc:	460f      	mov	r7, r1
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	4620      	mov	r0, r4
 801c0d2:	4629      	mov	r1, r5
 801c0d4:	f7e4 fa90 	bl	80005f8 <__aeabi_dmul>
 801c0d8:	4b3e      	ldr	r3, [pc, #248]	; (801c1d4 <atan+0x324>)
 801c0da:	2200      	movs	r2, #0
 801c0dc:	f7e4 f8d6 	bl	800028c <__adddf3>
 801c0e0:	4602      	mov	r2, r0
 801c0e2:	460b      	mov	r3, r1
 801c0e4:	4630      	mov	r0, r6
 801c0e6:	4639      	mov	r1, r7
 801c0e8:	f7e4 fbb0 	bl	800084c <__aeabi_ddiv>
 801c0ec:	f04f 0a02 	mov.w	sl, #2
 801c0f0:	4604      	mov	r4, r0
 801c0f2:	460d      	mov	r5, r1
 801c0f4:	e743      	b.n	801bf7e <atan+0xce>
 801c0f6:	462b      	mov	r3, r5
 801c0f8:	ee10 2a10 	vmov	r2, s0
 801c0fc:	4939      	ldr	r1, [pc, #228]	; (801c1e4 <atan+0x334>)
 801c0fe:	2000      	movs	r0, #0
 801c100:	f7e4 fba4 	bl	800084c <__aeabi_ddiv>
 801c104:	f04f 0a03 	mov.w	sl, #3
 801c108:	4604      	mov	r4, r0
 801c10a:	460d      	mov	r5, r1
 801c10c:	e737      	b.n	801bf7e <atan+0xce>
 801c10e:	4b36      	ldr	r3, [pc, #216]	; (801c1e8 <atan+0x338>)
 801c110:	4e36      	ldr	r6, [pc, #216]	; (801c1ec <atan+0x33c>)
 801c112:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c116:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c11a:	e9da 2300 	ldrd	r2, r3, [sl]
 801c11e:	f7e4 f8b3 	bl	8000288 <__aeabi_dsub>
 801c122:	4622      	mov	r2, r4
 801c124:	462b      	mov	r3, r5
 801c126:	f7e4 f8af 	bl	8000288 <__aeabi_dsub>
 801c12a:	4602      	mov	r2, r0
 801c12c:	460b      	mov	r3, r1
 801c12e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c132:	f7e4 f8a9 	bl	8000288 <__aeabi_dsub>
 801c136:	f1bb 0f00 	cmp.w	fp, #0
 801c13a:	4604      	mov	r4, r0
 801c13c:	460d      	mov	r5, r1
 801c13e:	f6bf aed6 	bge.w	801beee <atan+0x3e>
 801c142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c146:	461d      	mov	r5, r3
 801c148:	e6d1      	b.n	801beee <atan+0x3e>
 801c14a:	a51d      	add	r5, pc, #116	; (adr r5, 801c1c0 <atan+0x310>)
 801c14c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c150:	e6cd      	b.n	801beee <atan+0x3e>
 801c152:	bf00      	nop
 801c154:	f3af 8000 	nop.w
 801c158:	54442d18 	.word	0x54442d18
 801c15c:	bff921fb 	.word	0xbff921fb
 801c160:	8800759c 	.word	0x8800759c
 801c164:	7e37e43c 	.word	0x7e37e43c
 801c168:	e322da11 	.word	0xe322da11
 801c16c:	3f90ad3a 	.word	0x3f90ad3a
 801c170:	24760deb 	.word	0x24760deb
 801c174:	3fa97b4b 	.word	0x3fa97b4b
 801c178:	a0d03d51 	.word	0xa0d03d51
 801c17c:	3fb10d66 	.word	0x3fb10d66
 801c180:	c54c206e 	.word	0xc54c206e
 801c184:	3fb745cd 	.word	0x3fb745cd
 801c188:	920083ff 	.word	0x920083ff
 801c18c:	3fc24924 	.word	0x3fc24924
 801c190:	5555550d 	.word	0x5555550d
 801c194:	3fd55555 	.word	0x3fd55555
 801c198:	2c6a6c2f 	.word	0x2c6a6c2f
 801c19c:	bfa2b444 	.word	0xbfa2b444
 801c1a0:	52defd9a 	.word	0x52defd9a
 801c1a4:	3fadde2d 	.word	0x3fadde2d
 801c1a8:	af749a6d 	.word	0xaf749a6d
 801c1ac:	3fb3b0f2 	.word	0x3fb3b0f2
 801c1b0:	fe231671 	.word	0xfe231671
 801c1b4:	3fbc71c6 	.word	0x3fbc71c6
 801c1b8:	9998ebc4 	.word	0x9998ebc4
 801c1bc:	3fc99999 	.word	0x3fc99999
 801c1c0:	54442d18 	.word	0x54442d18
 801c1c4:	3ff921fb 	.word	0x3ff921fb
 801c1c8:	440fffff 	.word	0x440fffff
 801c1cc:	7ff00000 	.word	0x7ff00000
 801c1d0:	3fdbffff 	.word	0x3fdbffff
 801c1d4:	3ff00000 	.word	0x3ff00000
 801c1d8:	3ff2ffff 	.word	0x3ff2ffff
 801c1dc:	40038000 	.word	0x40038000
 801c1e0:	3ff80000 	.word	0x3ff80000
 801c1e4:	bff00000 	.word	0xbff00000
 801c1e8:	0801cdf0 	.word	0x0801cdf0
 801c1ec:	0801cdd0 	.word	0x0801cdd0

0801c1f0 <fabs>:
 801c1f0:	ec51 0b10 	vmov	r0, r1, d0
 801c1f4:	ee10 2a10 	vmov	r2, s0
 801c1f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c1fc:	ec43 2b10 	vmov	d0, r2, r3
 801c200:	4770      	bx	lr
 801c202:	0000      	movs	r0, r0
 801c204:	0000      	movs	r0, r0
	...

0801c208 <floor>:
 801c208:	ec51 0b10 	vmov	r0, r1, d0
 801c20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c210:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c214:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c218:	2e13      	cmp	r6, #19
 801c21a:	ee10 5a10 	vmov	r5, s0
 801c21e:	ee10 8a10 	vmov	r8, s0
 801c222:	460c      	mov	r4, r1
 801c224:	dc32      	bgt.n	801c28c <floor+0x84>
 801c226:	2e00      	cmp	r6, #0
 801c228:	da14      	bge.n	801c254 <floor+0x4c>
 801c22a:	a333      	add	r3, pc, #204	; (adr r3, 801c2f8 <floor+0xf0>)
 801c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c230:	f7e4 f82c 	bl	800028c <__adddf3>
 801c234:	2200      	movs	r2, #0
 801c236:	2300      	movs	r3, #0
 801c238:	f7e4 fc6e 	bl	8000b18 <__aeabi_dcmpgt>
 801c23c:	b138      	cbz	r0, 801c24e <floor+0x46>
 801c23e:	2c00      	cmp	r4, #0
 801c240:	da57      	bge.n	801c2f2 <floor+0xea>
 801c242:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c246:	431d      	orrs	r5, r3
 801c248:	d001      	beq.n	801c24e <floor+0x46>
 801c24a:	4c2d      	ldr	r4, [pc, #180]	; (801c300 <floor+0xf8>)
 801c24c:	2500      	movs	r5, #0
 801c24e:	4621      	mov	r1, r4
 801c250:	4628      	mov	r0, r5
 801c252:	e025      	b.n	801c2a0 <floor+0x98>
 801c254:	4f2b      	ldr	r7, [pc, #172]	; (801c304 <floor+0xfc>)
 801c256:	4137      	asrs	r7, r6
 801c258:	ea01 0307 	and.w	r3, r1, r7
 801c25c:	4303      	orrs	r3, r0
 801c25e:	d01f      	beq.n	801c2a0 <floor+0x98>
 801c260:	a325      	add	r3, pc, #148	; (adr r3, 801c2f8 <floor+0xf0>)
 801c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c266:	f7e4 f811 	bl	800028c <__adddf3>
 801c26a:	2200      	movs	r2, #0
 801c26c:	2300      	movs	r3, #0
 801c26e:	f7e4 fc53 	bl	8000b18 <__aeabi_dcmpgt>
 801c272:	2800      	cmp	r0, #0
 801c274:	d0eb      	beq.n	801c24e <floor+0x46>
 801c276:	2c00      	cmp	r4, #0
 801c278:	bfbe      	ittt	lt
 801c27a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c27e:	fa43 f606 	asrlt.w	r6, r3, r6
 801c282:	19a4      	addlt	r4, r4, r6
 801c284:	ea24 0407 	bic.w	r4, r4, r7
 801c288:	2500      	movs	r5, #0
 801c28a:	e7e0      	b.n	801c24e <floor+0x46>
 801c28c:	2e33      	cmp	r6, #51	; 0x33
 801c28e:	dd0b      	ble.n	801c2a8 <floor+0xa0>
 801c290:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c294:	d104      	bne.n	801c2a0 <floor+0x98>
 801c296:	ee10 2a10 	vmov	r2, s0
 801c29a:	460b      	mov	r3, r1
 801c29c:	f7e3 fff6 	bl	800028c <__adddf3>
 801c2a0:	ec41 0b10 	vmov	d0, r0, r1
 801c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c2ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c2b0:	fa23 f707 	lsr.w	r7, r3, r7
 801c2b4:	4207      	tst	r7, r0
 801c2b6:	d0f3      	beq.n	801c2a0 <floor+0x98>
 801c2b8:	a30f      	add	r3, pc, #60	; (adr r3, 801c2f8 <floor+0xf0>)
 801c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2be:	f7e3 ffe5 	bl	800028c <__adddf3>
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	2300      	movs	r3, #0
 801c2c6:	f7e4 fc27 	bl	8000b18 <__aeabi_dcmpgt>
 801c2ca:	2800      	cmp	r0, #0
 801c2cc:	d0bf      	beq.n	801c24e <floor+0x46>
 801c2ce:	2c00      	cmp	r4, #0
 801c2d0:	da02      	bge.n	801c2d8 <floor+0xd0>
 801c2d2:	2e14      	cmp	r6, #20
 801c2d4:	d103      	bne.n	801c2de <floor+0xd6>
 801c2d6:	3401      	adds	r4, #1
 801c2d8:	ea25 0507 	bic.w	r5, r5, r7
 801c2dc:	e7b7      	b.n	801c24e <floor+0x46>
 801c2de:	2301      	movs	r3, #1
 801c2e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c2e4:	fa03 f606 	lsl.w	r6, r3, r6
 801c2e8:	4435      	add	r5, r6
 801c2ea:	4545      	cmp	r5, r8
 801c2ec:	bf38      	it	cc
 801c2ee:	18e4      	addcc	r4, r4, r3
 801c2f0:	e7f2      	b.n	801c2d8 <floor+0xd0>
 801c2f2:	2500      	movs	r5, #0
 801c2f4:	462c      	mov	r4, r5
 801c2f6:	e7aa      	b.n	801c24e <floor+0x46>
 801c2f8:	8800759c 	.word	0x8800759c
 801c2fc:	7e37e43c 	.word	0x7e37e43c
 801c300:	bff00000 	.word	0xbff00000
 801c304:	000fffff 	.word	0x000fffff

0801c308 <scalbn>:
 801c308:	b570      	push	{r4, r5, r6, lr}
 801c30a:	ec55 4b10 	vmov	r4, r5, d0
 801c30e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c312:	4606      	mov	r6, r0
 801c314:	462b      	mov	r3, r5
 801c316:	b99a      	cbnz	r2, 801c340 <scalbn+0x38>
 801c318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c31c:	4323      	orrs	r3, r4
 801c31e:	d036      	beq.n	801c38e <scalbn+0x86>
 801c320:	4b39      	ldr	r3, [pc, #228]	; (801c408 <scalbn+0x100>)
 801c322:	4629      	mov	r1, r5
 801c324:	ee10 0a10 	vmov	r0, s0
 801c328:	2200      	movs	r2, #0
 801c32a:	f7e4 f965 	bl	80005f8 <__aeabi_dmul>
 801c32e:	4b37      	ldr	r3, [pc, #220]	; (801c40c <scalbn+0x104>)
 801c330:	429e      	cmp	r6, r3
 801c332:	4604      	mov	r4, r0
 801c334:	460d      	mov	r5, r1
 801c336:	da10      	bge.n	801c35a <scalbn+0x52>
 801c338:	a32b      	add	r3, pc, #172	; (adr r3, 801c3e8 <scalbn+0xe0>)
 801c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c33e:	e03a      	b.n	801c3b6 <scalbn+0xae>
 801c340:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c344:	428a      	cmp	r2, r1
 801c346:	d10c      	bne.n	801c362 <scalbn+0x5a>
 801c348:	ee10 2a10 	vmov	r2, s0
 801c34c:	4620      	mov	r0, r4
 801c34e:	4629      	mov	r1, r5
 801c350:	f7e3 ff9c 	bl	800028c <__adddf3>
 801c354:	4604      	mov	r4, r0
 801c356:	460d      	mov	r5, r1
 801c358:	e019      	b.n	801c38e <scalbn+0x86>
 801c35a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c35e:	460b      	mov	r3, r1
 801c360:	3a36      	subs	r2, #54	; 0x36
 801c362:	4432      	add	r2, r6
 801c364:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c368:	428a      	cmp	r2, r1
 801c36a:	dd08      	ble.n	801c37e <scalbn+0x76>
 801c36c:	2d00      	cmp	r5, #0
 801c36e:	a120      	add	r1, pc, #128	; (adr r1, 801c3f0 <scalbn+0xe8>)
 801c370:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c374:	da1c      	bge.n	801c3b0 <scalbn+0xa8>
 801c376:	a120      	add	r1, pc, #128	; (adr r1, 801c3f8 <scalbn+0xf0>)
 801c378:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c37c:	e018      	b.n	801c3b0 <scalbn+0xa8>
 801c37e:	2a00      	cmp	r2, #0
 801c380:	dd08      	ble.n	801c394 <scalbn+0x8c>
 801c382:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c386:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c38a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c38e:	ec45 4b10 	vmov	d0, r4, r5
 801c392:	bd70      	pop	{r4, r5, r6, pc}
 801c394:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c398:	da19      	bge.n	801c3ce <scalbn+0xc6>
 801c39a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c39e:	429e      	cmp	r6, r3
 801c3a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c3a4:	dd0a      	ble.n	801c3bc <scalbn+0xb4>
 801c3a6:	a112      	add	r1, pc, #72	; (adr r1, 801c3f0 <scalbn+0xe8>)
 801c3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d1e2      	bne.n	801c376 <scalbn+0x6e>
 801c3b0:	a30f      	add	r3, pc, #60	; (adr r3, 801c3f0 <scalbn+0xe8>)
 801c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3b6:	f7e4 f91f 	bl	80005f8 <__aeabi_dmul>
 801c3ba:	e7cb      	b.n	801c354 <scalbn+0x4c>
 801c3bc:	a10a      	add	r1, pc, #40	; (adr r1, 801c3e8 <scalbn+0xe0>)
 801c3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d0b8      	beq.n	801c338 <scalbn+0x30>
 801c3c6:	a10e      	add	r1, pc, #56	; (adr r1, 801c400 <scalbn+0xf8>)
 801c3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3cc:	e7b4      	b.n	801c338 <scalbn+0x30>
 801c3ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c3d2:	3236      	adds	r2, #54	; 0x36
 801c3d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c3d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c3dc:	4620      	mov	r0, r4
 801c3de:	4b0c      	ldr	r3, [pc, #48]	; (801c410 <scalbn+0x108>)
 801c3e0:	2200      	movs	r2, #0
 801c3e2:	e7e8      	b.n	801c3b6 <scalbn+0xae>
 801c3e4:	f3af 8000 	nop.w
 801c3e8:	c2f8f359 	.word	0xc2f8f359
 801c3ec:	01a56e1f 	.word	0x01a56e1f
 801c3f0:	8800759c 	.word	0x8800759c
 801c3f4:	7e37e43c 	.word	0x7e37e43c
 801c3f8:	8800759c 	.word	0x8800759c
 801c3fc:	fe37e43c 	.word	0xfe37e43c
 801c400:	c2f8f359 	.word	0xc2f8f359
 801c404:	81a56e1f 	.word	0x81a56e1f
 801c408:	43500000 	.word	0x43500000
 801c40c:	ffff3cb0 	.word	0xffff3cb0
 801c410:	3c900000 	.word	0x3c900000

0801c414 <_init>:
 801c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c416:	bf00      	nop
 801c418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c41a:	bc08      	pop	{r3}
 801c41c:	469e      	mov	lr, r3
 801c41e:	4770      	bx	lr

0801c420 <_fini>:
 801c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c422:	bf00      	nop
 801c424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c426:	bc08      	pop	{r3}
 801c428:	469e      	mov	lr, r3
 801c42a:	4770      	bx	lr
